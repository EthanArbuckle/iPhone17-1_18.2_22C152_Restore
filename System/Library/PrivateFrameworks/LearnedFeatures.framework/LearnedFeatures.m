void sub_21B835F34(unsigned char *a1@<X8>)
{
  BOOL v2;
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v10 = &unk_26CBA1C08;
  v2 = sub_21B9825AC((uint64_t)&v10);
  nullsub_124(&v10);
  if (!v2)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  v3 = [MEMORY[0x263F28050] aneSubType];
  v4 = (const char *)[v3 UTF8String];
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      v8 = v5 | 7;
    }
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    a1[23] = v5;
    v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v4, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[24] = 1;
}

void sub_21B83606C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nullsub_124(va);
  _Unwind_Resume(a1);
}

void sub_21B836080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21B836090()
{
}

void sub_21B8360A8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21B836104(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2643B88A8, MEMORY[0x263F8C060]);
}

void sub_21B8360F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21B836104(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

double sub_21B836138@<D0>(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = 1;
  sub_21B91D8A8(&v26, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21B91D8A8(&v24, a4, *a2, 1, 1, 1);
      long long v26 = v24;
      int v27 = v25;
      if (!HIDWORD(*a2))
      {
        int v13 = *a3;
        int v14 = *a3 * *a2;
        int v12 = a5;
        int v15 = v14;
        int v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    unint64_t v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21B91D8A8(&v24, a4, v20, *a2, 1, 1);
      long long v26 = v24;
      int v27 = v25;
      unint64_t v21 = a2[1];
      if (!HIDWORD(v21))
      {
        int v14 = *a3;
        int v15 = *a3 * v21;
        int v13 = a3[2];
        int v12 = a5;
        int v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  int v13 = 1;
  int v14 = 1;
  int v15 = 1;
  int v16 = 1;
  if (a1 == 4)
  {
    unint64_t v17 = a2[3];
    if (!HIDWORD(v17))
    {
      unint64_t v18 = a2[2];
      if (!HIDWORD(v18))
      {
        unint64_t v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21B91D8A8(&v24, a4, v17, v18, v19, *a2);
          long long v26 = v24;
          int v27 = v25;
          int v13 = a3[6];
          int v14 = a3[4];
          int v15 = a3[2];
          int v16 = *a3;
          int v12 = a5;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CBA1D90;
    __cxa_throw(exception, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  double result = *(double *)&v26;
  *(_OWORD *)a6 = v26;
  *(_DWORD *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_21B836344@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = 1;
  sub_21B91D8A8(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21B91D8A8(&v25, a4, *a2, 1, 1, 1);
      long long v27 = v25;
      int v28 = v26;
      if (!HIDWORD(*a2))
      {
        int v12 = a5 >> 1;
        int v13 = *a3 >> 1;
        unsigned int v14 = (*a3 * *a2) >> 1;
        int v15 = v14;
        int v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    unint64_t v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21B91D8A8(&v25, a4, v20, *a2, 1, 1);
      long long v27 = v25;
      int v28 = v26;
      unint64_t v21 = a2[1];
      if (!HIDWORD(v21))
      {
        unsigned int v22 = *a3 * v21;
        int v12 = a5 >> 1;
        int v13 = a3[2] >> 1;
        unsigned int v14 = *a3 >> 1;
        int v15 = v22 >> 1;
        int v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  int v13 = 1;
  unsigned int v14 = 1;
  int v15 = 1;
  int v16 = 1;
  if (a1 == 4)
  {
    unint64_t v17 = a2[3];
    if (!HIDWORD(v17))
    {
      unint64_t v18 = a2[2];
      if (!HIDWORD(v18))
      {
        unint64_t v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21B91D8A8(&v25, a4, v17, v18, v19, *a2);
          long long v27 = v25;
          int v28 = v26;
          int v12 = a5 >> 1;
          int v13 = a3[6] >> 1;
          unsigned int v14 = a3[4] >> 1;
          int v15 = a3[2] >> 1;
          int v16 = *a3 >> 1;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CBA1D90;
    __cxa_throw(exception, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  double result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_21B836574@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = 1;
  sub_21B91D8A8(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21B91D8A8(&v25, a4, *a2, 1, 1, 1);
      long long v27 = v25;
      int v28 = v26;
      if (!HIDWORD(*a2))
      {
        int v12 = a5 >> 2;
        int v13 = *a3 >> 2;
        unsigned int v14 = (*a3 * *a2) >> 2;
        int v15 = v14;
        int v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    unint64_t v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21B91D8A8(&v25, a4, v20, *a2, 1, 1);
      long long v27 = v25;
      int v28 = v26;
      unint64_t v21 = a2[1];
      if (!HIDWORD(v21))
      {
        unsigned int v22 = *a3 * v21;
        int v12 = a5 >> 2;
        int v13 = a3[2] >> 2;
        unsigned int v14 = *a3 >> 2;
        int v15 = v22 >> 2;
        int v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  int v13 = 1;
  unsigned int v14 = 1;
  int v15 = 1;
  int v16 = 1;
  if (a1 == 4)
  {
    unint64_t v17 = a2[3];
    if (!HIDWORD(v17))
    {
      unint64_t v18 = a2[2];
      if (!HIDWORD(v18))
      {
        unint64_t v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21B91D8A8(&v25, a4, v17, v18, v19, *a2);
          long long v27 = v25;
          int v28 = v26;
          int v12 = a5 >> 2;
          int v13 = a3[6] >> 2;
          unsigned int v14 = a3[4] >> 2;
          int v15 = a3[2] >> 2;
          int v16 = *a3 >> 2;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CBA1D90;
    __cxa_throw(exception, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  double result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

uint64_t sub_21B8367A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = result + 24;
  if (*(unsigned char *)(result + 152))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 120) = -1;
    uint64_t v5 = *(unsigned int *)(result + 144);
    if (v5 == -1) {
      return result;
    }
    double result = ((uint64_t (*)(long long *, uint64_t, uint64_t))off_26CB954B8[v5])(&v20, a2, v4);
    goto LABEL_23;
  }
  int v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    sub_21B8455B0((_DWORD *)result, (uint64_t)&v20);
    long long v11 = v20;
    long long v12 = v21;
    long long v13 = v22;
    int v14 = v23;
    LOBYTE(v15) = 0;
    char v18 = 0;
    if (v27)
    {
      int v15 = &unk_26CB954E0;
      long long v9 = v25;
      long long v25 = 0uLL;
      long long v16 = v9;
      v17[0] = *(_OWORD *)v26;
      *(_OWORD *)((char *)v17 + 14) = *(_OWORD *)&v26[14];
      char v18 = 1;
      int v19 = 2;
      nullsub_82(v26);
      v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    int v19 = 2;
  }
  else if (v6 == 1)
  {
    sub_21B845230((_DWORD *)result, (uint64_t)&v20);
    long long v11 = v20;
    long long v12 = v21;
    long long v13 = v22;
    int v14 = v23;
    LOBYTE(v15) = 0;
    char v18 = 0;
    if (v27)
    {
      int v15 = &unk_26CB954E0;
      long long v10 = v25;
      long long v25 = 0uLL;
      long long v16 = v10;
      v17[0] = *(_OWORD *)v26;
      *(_OWORD *)((char *)v17 + 14) = *(_OWORD *)&v26[14];
      char v18 = 1;
      int v19 = 1;
      nullsub_82(v26);
      v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1))
      {
LABEL_17:
        nullsub_82(&v24);
        goto LABEL_18;
      }
LABEL_15:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_17;
    }
    int v19 = 1;
  }
  else
  {
    if (v6) {
      sub_21B984EF8();
    }
    sub_21B844EB4((_DWORD *)result, (uint64_t)&v20);
    long long v11 = v20;
    long long v12 = v21;
    long long v13 = v22;
    int v14 = v23;
    LOBYTE(v15) = 0;
    char v18 = 0;
    if (v27)
    {
      int v15 = &unk_26CB954E0;
      long long v7 = v25;
      long long v25 = 0uLL;
      long long v16 = v7;
      v17[0] = *(_OWORD *)v26;
      *(_OWORD *)((char *)v17 + 14) = *(_OWORD *)&v26[14];
      char v18 = 1;
      int v19 = 0;
      nullsub_82(v26);
      v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    int v19 = 0;
  }
LABEL_18:
  double result = sub_21B836B68(v4, (uint64_t)&v11);
  if (v19 != -1) {
    double result = ((uint64_t (*)(long long *, long long *))off_26CB954A0[v19])(&v20, &v11);
  }
  if (!*(unsigned char *)(v2 + 152)) {
    sub_21B8446A8();
  }
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 120) = -1;
  uint64_t v5 = *(unsigned int *)(v2 + 144);
  if (v5 != -1)
  {
    double result = ((uint64_t (*)(long long *, uint64_t, uint64_t))off_26CB954B8[v5])(&v20, a2, v4);
LABEL_23:
    *(_DWORD *)(a2 + 120) = v5;
  }
  return result;
}

void sub_21B836AE4(_Unwind_Exception *exception_object, ...)
{
  va_start(va, exception_object);
  uint64_t v3 = *(unsigned int *)(v1 + 120);
  if (v3 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_26CB954A0[v3])((uint64_t *)va, v1);
  }
  *(_DWORD *)(v1 + 120) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B836B68(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 120);
    uint64_t v4 = *(unsigned int *)(a2 + 120);
    if (v3 == -1)
    {
      if (v4 == -1) {
        return a1;
      }
    }
    else if (v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_26CB954A0[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 120) = -1;
      return a1;
    }
    uint64_t v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_26CB955D0[v4])(&v7, a1, a2);
    return a1;
  }
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  uint64_t v6 = *(unsigned int *)(a2 + 120);
  if (v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_26CB955E8[v6])(&v9, a1, a2);
    *(_DWORD *)(a1 + 120) = v6;
  }
  *(unsigned char *)(a1 + 128) = 1;
  return a1;
}

uint64_t sub_21B836C5C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB954A0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_21B836CB8(std::string *a1@<X8>)
{
  uint64_t v2 = (const char *)MEMORY[0x21D496190]();
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  std::string::size_type v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v2, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  char v8 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v25, ". Last Error: ", 0xEuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  size_t v13 = strlen(last_error_message);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    size_t v22 = v14;
    int64_t v23 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v23) = v13;
  p_p = &__p;
  if (v13) {
LABEL_16:
  }
    memmove(p_p, last_error_message, v14);
  *((unsigned char *)p_p + v14) = 0;
  if (v23 >= 0) {
    char v18 = (const std::string::value_type *)&__p;
  }
  else {
    char v18 = (const std::string::value_type *)__p;
  }
  if (v23 >= 0) {
    std::string::size_type v19 = HIBYTE(v23);
  }
  else {
    std::string::size_type v19 = v22;
  }
  long long v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_31:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_30:
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_31;
  }
}

void sub_21B836EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_21B836F98@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B836FF8@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  uint64_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *sub_21B837058(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_21B83710C(const void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = 0;
  if (!e5rt_program_library_create())
  {
    *(void *)a2 = v23;
    *(unsigned char *)(a2 + 8) = 0;
    v24[32] = 0;
    HIBYTE(v25) = 0;
    v24[64] = 0;
    sub_21B858B90(a2 + 16, &v24[32]);
  }
  sub_21B836CB8(&v20);
  size_t v4 = std::string::insert(&v20, 0, "Unable to create program library: ", 0x22uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v22 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *((char *)a1 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = (size_t)a1[1];
  }
  unint64_t v8 = v7 + 72;
  if (v7 + 72 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v8 > 0x16)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v12 = (char *)operator new(v10 + 1);
    *(void *)&v24[8] = v7 + 72;
    *(void *)&v24[16] = v11 | 0x8000000000000000;
    *(void *)uint64_t v24 = v12;
    long long v9 = v12 + 72;
    qmemcpy(v12, "Error during creation of program library model with bundle expected at '", 72);
    if (!v7)
    {
LABEL_16:
      v9[v7] = 0;
      size_t v14 = std::string::append((std::string *)v24, ". ", 2uLL);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      *(void *)&v24[48] = *((void *)&v14->__r_.__value_.__l + 2);
      *(_OWORD *)&v24[32] = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v22 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if (v22 >= 0) {
        std::string::size_type v17 = HIBYTE(v22);
      }
      else {
        std::string::size_type v17 = (std::string::size_type)__p[1];
      }
      char v18 = std::string::append((std::string *)&v24[32], (const std::string::value_type *)v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24[64] = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((v24[55] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v24[32]);
        if ((v24[23] & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((v24[23] & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      operator delete(*(void **)v24);
LABEL_24:
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      v24[32] = 5;
      sub_21B858B90(a2 + 16, &v24[32]);
    }
  }
  else
  {
    long long v9 = &v24[72];
    qmemcpy(v24, "Error during creation of program library model with bundle expected at '", 72);
  }
  if (v6 >= 0) {
    size_t v13 = a1;
  }
  else {
    size_t v13 = *a1;
  }
  memmove(v9, v13, v7);
  goto LABEL_16;
}

void sub_21B8373BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_21B83744C(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (sub_21B928CB8(0xDu)
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 143, (uint64_t)"IsNonBundleSupported()", 22, (uint64_t)"Hardware not supported", 22, (void (*)(void **))sub_21B984AC4))
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v31 = 0;
      if (e5rt_e5_compiler_config_options_create())
      {
        sub_21B836CB8(&v34);
        int v6 = std::string::insert(&v34, 0, "Unable to create compiler config: ", 0x22uLL);
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v37 = (uint64_t *)v6->__r_.__value_.__r.__words[2];
        long long v36 = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v36);
      }
      *(void *)&long long v36 = &unk_26CB95E78;
      *((void *)&v36 + 1) = MEMORY[0x263F3B7A0];
      v37 = &v31;
      v38 = &v36;
      if (!*(unsigned char *)(a2 + 24)) {
        sub_21B8446A8();
      }
      if (e5rt_e5_compiler_config_options_set_cache_bundle_location())
      {
        sub_21B836CB8(&v28);
        uint64_t v10 = std::string::insert(&v28, 0, "Unable to set config options to cache bundle location : ", 0x38uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        long long v12 = std::string::append(&v29, " cache location : ", 0x12uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        int v14 = *(char *)(a2 + 23);
        if (v14 >= 0) {
          long long v15 = (const std::string::value_type *)a2;
        }
        else {
          long long v15 = *(const std::string::value_type **)a2;
        }
        if (v14 >= 0) {
          std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v16 = *(void *)(a2 + 8);
        }
        std::string::size_type v17 = std::string::append(&v30, v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v34);
      }
      if (e5rt_e5_compiler_create_with_config())
      {
        sub_21B836CB8(&v30);
        long long v19 = std::string::insert(&v30, 0, "Unable to create compiler with config: ", 0x27uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v34);
      }
      if (!v38) {
        sub_21B846100();
      }
      (*(void (**)(long long *))(*(void *)v38 + 48))(v38);
      if (v38 == &v36)
      {
        (*(void (**)(long long *))(v36 + 32))(&v36);
      }
      else if (v38)
      {
        (*(void (**)(void))(*(void *)v38 + 40))();
      }
    }
    else if (e5rt_e5_compiler_create())
    {
      sub_21B836CB8(&v34);
      unint64_t v8 = std::string::insert(&v34, 0, "Unable to create compiler: ", 0x1BuLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v37 = (uint64_t *)v8->__r_.__value_.__r.__words[2];
      long long v36 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      sub_21B837E2C(a3, a1, (uint64_t)&v36);
    }
    if (v32
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 184, (uint64_t)"compiler", 8, (uint64_t)"Compiler must be created before this", 36, (void (*)(void **))sub_21B984AC4))
    {
      *(void *)&long long v36 = &unk_26CB95EF8;
      *((void *)&v36 + 1) = MEMORY[0x263F3B7B0];
      v37 = &v32;
      v38 = &v36;
      v28.__r_.__value_.__r.__words[0] = 0;
      if (e5rt_e5_compiler_options_create())
      {
        sub_21B836CB8(&v30);
        long long v21 = std::string::insert(&v30, 0, "Unable to create compiler options: ", 0x23uLL);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v34);
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB95F78;
      v34.__r_.__value_.__l.__size_ = MEMORY[0x263F3B7A8];
      v34.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28;
      uint64_t v35 = &v34;
      LOBYTE(v31) = 0;
      if (e5rt_e5_compiler_is_new_compile_required())
      {
        sub_21B836CB8(&v29);
        uint64_t v23 = std::string::insert(&v29, 0, "Unable to check if new compile required: ", 0x29uLL);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v30);
      }
      if (e5rt_e5_compiler_compile())
      {
        sub_21B836CB8(&v29);
        std::string::size_type v25 = std::string::insert(&v29, 0, "Unable to create program library: ", 0x22uLL);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        sub_21B837E2C(a3, a1, (uint64_t)&v30);
      }
      char v27 = v31;
      *(void *)a3 = v33;
      *(unsigned char *)(a3 + 8) = v27;
      v29.__r_.__value_.__s.__data_[0] = 0;
      sub_21B837058(&v30, (char *)&unk_21B997215);
      sub_21B858B90(a3 + 16, &v29);
    }
    abort();
  }
  abort();
}

void sub_21B837C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_21B83804C(&a29);
    sub_21B83804C((void *)(v34 - 80));
    _Unwind_Resume(a1);
  }
  sub_21B83804C(&a29);
  sub_21B83804C((void *)(v34 - 80));
  _Unwind_Resume(a1);
}

void sub_21B837CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      if (a21 < 0)
      {
LABEL_8:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0) {
LABEL_12:
        }
          JUMPOUT(0x21B837E10);
LABEL_11:
        operator delete(a10);
        sub_21B83804C((void *)(v37 - 80));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  if (a21 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_21B837DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B837E0C(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_21B837E2C(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  unint64_t v5 = v4 + 73;
  if (v4 + 73 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v5 > 0x16)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    *(void *)&v19[8] = v4 + 73;
    *(void *)&v19[16] = (v10 + 1) | 0x8000000000000000;
    *(void *)long long v19 = operator new(v10 + 1);
    long long v9 = (unsigned char *)(*(void *)v19 + 73);
    qmemcpy(*(void **)v19, "Error during creation of program library model with non-bundle format at'", 73);
    if (!v4)
    {
LABEL_14:
      v9[v4] = 0;
      long long v12 = std::string::append((std::string *)v19, ". ", 2uLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)&v19[48] = *((void *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)&v19[32] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      int v14 = *(char *)(a3 + 23);
      if (v14 >= 0) {
        long long v15 = (const std::string::value_type *)a3;
      }
      else {
        long long v15 = *(const std::string::value_type **)a3;
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v16 = *(void *)(a3 + 8);
      }
      std::string::size_type v17 = std::string::append((std::string *)&v19[32], v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v20 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19[64] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((v19[55] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v19[32]);
        if ((v19[23] & 0x80000000) == 0) {
          goto LABEL_22;
        }
      }
      else if ((v19[23] & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(*(void **)v19);
LABEL_22:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      v19[32] = 5;
      sub_21B858B90(a1 + 16, &v19[32]);
    }
  }
  else
  {
    long long v9 = &v19[73];
    qmemcpy(v19, "Error during creation of program library model with non-bundle format at'", 73);
  }
  if (v3 >= 0) {
    long long v11 = a2;
  }
  else {
    long long v11 = *a2;
  }
  memmove(v9, v11, v4);
  goto LABEL_14;
}

void sub_21B838004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B83804C(void *a1)
{
  uint64_t v2 = a1[3];
  if (!v2) {
    sub_21B846100();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  int v3 = (void *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    return a1;
  }
}

BOOL sub_21B838114(uint64_t *a1)
{
  int v1 = *((char *)a1 + 23);
  BOOL v2 = v1 < 0;
  size_t v4 = (uint64_t *)*a1;
  unint64_t v3 = a1[1];
  if (v1 >= 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if (v2) {
    unint64_t v7 = a1[1];
  }
  else {
    unint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  uint64_t v8 = (uint64_t)v5 - 1;
  do
  {
    unint64_t v9 = v7;
    if (!v7) {
      break;
    }
    int v10 = *(unsigned __int8 *)(v8 + v7--);
  }
  while (v10 != 46);
  if ((v6 & 0x80) == 0)
  {
    unint64_t v3 = *((unsigned __int8 *)a1 + 23);
    size_t v4 = a1;
    if (v9 <= v6) {
      goto LABEL_12;
    }
LABEL_35:
    sub_21B846058();
  }
  if (v3 < v9) {
    goto LABEL_35;
  }
LABEL_12:
  size_t v11 = v3 - v9;
  if (v3 - v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    size_t v23 = v11;
    int64_t v24 = v14 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v24) = v3 - v9;
  p_dst = (void **)&__dst;
  if (v3 != v9) {
LABEL_19:
  }
    memmove(p_dst, (char *)v4 + v9, v11);
  BOOL v15 = 0;
  *((unsigned char *)p_dst + v11) = 0;
  size_t v16 = HIBYTE(v24);
  if (v24 < 0) {
    size_t v16 = v23;
  }
  if (v16 == 6)
  {
    std::string::size_type v17 = __dst;
    if (v24 >= 0) {
      std::string::size_type v17 = (void **)&__dst;
    }
    int v18 = *(_DWORD *)v17;
    int v19 = *((unsigned __int16 *)v17 + 2);
    BOOL v15 = v18 == 1684960610 && v19 == 25964;
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
  return v15;
}

void sub_21B838278(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 39) < 0)
  {
    sub_21B846188(__dst, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 16);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  LODWORD(v3) = 0;
  sub_21B85912C();
}

void sub_21B839974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  uint64_t v72 = *v69;
  uint64_t *v69 = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  sub_21B83D090(&a69);
  if (a26) {
    (*(void (**)(uint64_t))(*(void *)a26 + 8))(a26);
  }
  sub_21B83D090((void *)(v70 - 208));
  sub_21B83C388(&a27);
  sub_21B83C388(&a30);
  sub_21B83D090((void *)(v70 - 176));
  sub_21B83804C(&STACK[0x260]);
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a40) {
    operator delete(a40);
  }
  sub_21B83D148((uint64_t)&a43);
  sub_21B83C4CC((uint64_t)&a49);
  sub_21B83804C((void *)(v70 - 136));
  sub_21B83D1BC((uint64_t)&a57);
  sub_21B83D258((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_21B839FFC(void *a1, const void **a2, uint64_t a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  unint64_t v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v5 > 0x16)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    *(void *)&__p[8] = v4 + 35;
    *(void *)&__p[16] = (v10 + 1) | 0x8000000000000000;
    *(void *)__p = operator new(v10 + 1);
    unint64_t v9 = (unsigned char *)(*(void *)__p + 35);
    qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
    if (!v4)
    {
LABEL_14:
      v9[v4] = 0;
      long long v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[32] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      size_t v16 = (const std::string::value_type *)a2[3];
      BOOL v15 = a2 + 3;
      uint64_t v14 = v16;
      int v17 = *((char *)v15 + 23);
      if (v17 >= 0) {
        int v18 = (const std::string::value_type *)v15;
      }
      else {
        int v18 = v14;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v15[1];
      }
      std::string::size_type v20 = std::string::append((std::string *)&__p[32], v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      long long v22 = std::string::append(&v31, ". ", 2uLL);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        std::string::size_type v25 = (const std::string::value_type *)a3;
      }
      else {
        std::string::size_type v25 = *(const std::string::value_type **)a3;
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(a3 + 8);
      }
      char v27 = std::string::append(&v32, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v34 = v27->__r_.__value_.__r.__words[2];
      long long v33 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_28:
          if ((SHIBYTE(v30) & 0x80000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v31.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30) & 0x80000000) == 0)
      {
LABEL_29:
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_30;
        }
LABEL_34:
        operator delete(*(void **)__p);
LABEL_30:
        *a1 = 0;
        v32.__r_.__value_.__s.__data_[0] = 5;
        sub_21B858B90((uint64_t)(a1 + 1), &v32);
      }
LABEL_33:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
  }
  if (v3 >= 0) {
    size_t v11 = a2;
  }
  else {
    size_t v11 = *a2;
  }
  memmove(v9, v11, v4);
  goto LABEL_14;
}

void sub_21B83A258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v38 = *v35;
  *uint64_t v35 = 0;
  if (v38) {
    sub_21B984F40(v38);
  }
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B83A314(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21B83A360(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_21B83A3DC(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    int v3 = (void **)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_21B83A450(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  *(void *)&long long v59 = 0;
  v56.__r_.__value_.__r.__words[0] = 0;
  e5rt_execution_stream_operation_get_num_inputs();
  e5rt_execution_stream_operation_get_num_outputs();
  unint64_t v3 = 0;
  uint64_t v5 = a1[5];
  uint64_t v4 = a1[6];
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - v5) >> 3) || v56.__r_.__value_.__r.__words[0] != (uint64_t)(a1[9] - a1[8]) >> 5)
  {
    *(void *)v61 = operator new(0x28uLL);
    *(_OWORD *)&v61[8] = xmmword_21B9A0700;
    strcpy(*(char **)v61, "Input/output port counts doesn't match.");
    v55.__r_.__value_.__s.__data_[0] = 3;
    sub_21B858B90(a2, &v55);
  }
  if (v4 != v5) {
    goto LABEL_8;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 505, (uint64_t)"params.inputs.size() >= 1", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v7 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3);
  if (v6 != v7)
  {
LABEL_8:
    unint64_t v8 = 0;
    while (1)
    {
      sub_21B928F3C((uint64_t)a1, v8, (uint64_t)v61);
      long long v59 = *(_OWORD *)v61;
      uint64_t v60 = *(void *)&v61[16];
      uint64_t v58 = 0;
      unsigned int v9 = e5rt_execution_stream_operation_retain_input_port();
      if (v9)
      {
        uint64_t v57 = 0;
        e5rt_execution_stream_operation_get_num_inputs();
        memset(v61, 0, sizeof(v61));
        e5rt_execution_stream_operation_get_input_names();
        int v10 = SHIBYTE(v60);
        if (v60 >= 0) {
          size_t v11 = HIBYTE(v60);
        }
        else {
          size_t v11 = *((void *)&v59 + 1);
        }
        unint64_t v12 = v11 + 29;
        if (v11 + 29 > 0x7FFFFFFFFFFFFFF7) {
          sub_21B836090();
        }
        if (v12 <= 0x16)
        {
          qmemcpy(v52, "Unable to retain input port: ", 29);
          long long v13 = &v52[29];
          goto LABEL_24;
        }
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        *(void *)&v52[8] = v11 + 29;
        *(void *)&v52[16] = (v14 + 1) | 0x8000000000000000;
        *(void *)v52 = operator new(v14 + 1);
        qmemcpy(*(void **)v52, "Unable to retain input port: ", 29);
        long long v13 = (unsigned char *)(*(void *)v52 + 29);
        if (v11)
        {
LABEL_24:
          if (v10 >= 0) {
            BOOL v15 = &v59;
          }
          else {
            BOOL v15 = (long long *)v59;
          }
          memmove(v13, v15, v11);
        }
        v13[v11] = 0;
        size_t v16 = std::string::append((std::string *)v52, ". Error: ", 9uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        sub_21B83D5CC(&__p, v9 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::size_type v20 = std::string::append(&v54, (const std::string::value_type *)p_p, size);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        long long v22 = std::string::append(&v55, ". Available ports are: ", 0x17uLL);
        long long v24 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v24;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v55.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_52;
          }
LABEL_36:
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_37;
          }
LABEL_53:
          operator delete(v54.__r_.__value_.__l.__data_);
          if ((v52[23] & 0x80000000) == 0)
          {
LABEL_38:
            sub_21B85A94C(0, v23, 0, ", ", 2uLL, &v55);
            if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = &v55;
            }
            else {
              std::string::size_type v25 = (std::string *)v55.__r_.__value_.__r.__words[0];
            }
            if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v26 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v26 = v55.__r_.__value_.__l.__size_;
            }
            std::string::append(&v56, (const std::string::value_type *)v25, v26);
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            v55.__r_.__value_.__s.__data_[0] = 3;
            sub_21B858B90(a2, &v55);
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_52:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_53;
          }
LABEL_37:
          if ((v52[23] & 0x80000000) == 0) {
            goto LABEL_38;
          }
        }
        operator delete(*(void **)v52);
        goto LABEL_38;
      }
      *(void *)v61 = &off_26CB96298;
      *(void *)&v61[8] = MEMORY[0x263F3B808];
      *(void *)&v61[16] = &v58;
      v62 = v61;
      e5rt_io_port_release();
      if (v62 == v61) {
        break;
      }
      if (v62)
      {
        (*(void (**)(void))(*(void *)v62 + 40))();
        if (SHIBYTE(v60) < 0) {
          goto LABEL_48;
        }
      }
      else if (SHIBYTE(v60) < 0)
      {
        goto LABEL_48;
      }
LABEL_49:
      if (v3 == ++v8) {
        goto LABEL_57;
      }
    }
    (*(void (**)(unsigned char *))(*(void *)v61 + 32))(v61);
    if ((SHIBYTE(v60) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_48:
    operator delete((void *)v59);
    goto LABEL_49;
  }
LABEL_57:
  uint64_t v28 = a1[8];
  uint64_t v27 = a1[9];
  if (v27 == v28)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 529, (uint64_t)"params.outputs.size() >= 1", 26, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    uint64_t v29 = a1[9] - a1[8];
    if (!v29)
    {
LABEL_111:
      LOBYTE(v59) = 0;
      v61[23] = 0;
      v61[0] = 0;
      sub_21B858B90(a2, &v59);
    }
  }
  else
  {
    uint64_t v29 = v27 - v28;
    if (!v29) {
      goto LABEL_111;
    }
  }
  unint64_t v30 = 0;
  uint64_t v31 = v29 >> 5;
  while (1)
  {
    sub_21B92913C((uint64_t)a1, v30, (uint64_t)v61);
    long long v59 = *(_OWORD *)v61;
    uint64_t v60 = *(void *)&v61[16];
    uint64_t v58 = 0;
    unsigned int v32 = e5rt_execution_stream_operation_retain_output_port();
    if (v32)
    {
      uint64_t v57 = 0;
      e5rt_execution_stream_operation_get_num_outputs();
      memset(v61, 0, sizeof(v61));
      e5rt_execution_stream_operation_get_output_names();
      int v33 = SHIBYTE(v60);
      if (v60 >= 0) {
        size_t v34 = HIBYTE(v60);
      }
      else {
        size_t v34 = *((void *)&v59 + 1);
      }
      unint64_t v35 = v34 + 30;
      if (v34 + 30 > 0x7FFFFFFFFFFFFFF7) {
        sub_21B836090();
      }
      if (v35 <= 0x16)
      {
        qmemcpy(v52, "Unable to retain output port: ", sizeof(v52));
        uint64_t v36 = &v53;
        goto LABEL_78;
      }
      uint64_t v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v37 = v35 | 7;
      }
      *(void *)&v52[8] = v34 + 30;
      *(void *)&v52[16] = (v37 + 1) | 0x8000000000000000;
      *(void *)v52 = operator new(v37 + 1);
      qmemcpy(*(void **)v52, "Unable to retain output port: ", 30);
      uint64_t v36 = (__int16 *)(*(void *)v52 + 30);
      if (v34)
      {
LABEL_78:
        if (v33 >= 0) {
          uint64_t v38 = &v59;
        }
        else {
          uint64_t v38 = (long long *)v59;
        }
        memmove(v36, v38, v34);
      }
      *((unsigned char *)v36 + v34) = 0;
      uint64_t v39 = std::string::append((std::string *)v52, ". Error: ", 9uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      sub_21B83D5CC(&__p, v32 | 0x100000000);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v41 = &__p;
      }
      else {
        v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = __p.__r_.__value_.__l.__size_;
      }
      v43 = std::string::append(&v54, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v55, ". Available ports are: ", 0x17uLL);
      long long v47 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v47;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v55.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_106;
        }
LABEL_90:
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
LABEL_107:
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((v52[23] & 0x80000000) == 0)
        {
LABEL_92:
          sub_21B85A94C(0, v46, 0, ", ", 2uLL, &v55);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v48 = &v55;
          }
          else {
            v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
          }
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v55.__r_.__value_.__l.__size_;
          }
          std::string::append(&v56, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          v55.__r_.__value_.__s.__data_[0] = 3;
          sub_21B858B90(a2, &v55);
        }
      }
      else
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_90;
        }
LABEL_106:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_107;
        }
LABEL_91:
        if ((v52[23] & 0x80000000) == 0) {
          goto LABEL_92;
        }
      }
      operator delete(*(void **)v52);
      goto LABEL_92;
    }
    *(void *)v61 = &off_26CB96298;
    *(void *)&v61[8] = MEMORY[0x263F3B808];
    *(void *)&v61[16] = &v58;
    v62 = v61;
    e5rt_io_port_release();
    if (v62 == v61) {
      break;
    }
    if (v62)
    {
      (*(void (**)(void))(*(void *)v62 + 40))();
      if (SHIBYTE(v60) < 0) {
        goto LABEL_102;
      }
    }
    else if (SHIBYTE(v60) < 0)
    {
      goto LABEL_102;
    }
LABEL_103:
    if (v31 == ++v30) {
      goto LABEL_111;
    }
  }
  (*(void (**)(unsigned char *))(*(void *)v61 + 32))(v61);
  if ((SHIBYTE(v60) & 0x80000000) == 0) {
    goto LABEL_103;
  }
LABEL_102:
  operator delete((void *)v59);
  goto LABEL_103;
}

void sub_21B83AEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 113) < 0)
  {
    operator delete(*(void **)(v44 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char **sub_21B83B0A4(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL) {
      sub_21B846300();
    }
    uint64_t v4 = (char *)operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[160 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 8) = 0uLL;
      *((_OWORD *)v4 + 9) = 0uLL;
      *((_OWORD *)v4 + 6) = 0uLL;
      *((_OWORD *)v4 + 7) = 0uLL;
      *((_OWORD *)v4 + 4) = 0uLL;
      *((_OWORD *)v4 + 5) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *((_OWORD *)v4 + 3) = 0uLL;
      *(_DWORD *)uint64_t v4 = 3;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 160;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_21B83B164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  BOOL v15 = *v13;
  if (*v13)
  {
    size_t v16 = v13[1];
    long long v17 = *v13;
    if (v16 != v15)
    {
      do
      {
        if (*((unsigned char *)v16 - 8))
        {
          uint64_t v18 = *(v16 - 4);
          if (v18 != -1) {
            ((void (*)(char *, _DWORD *))off_26CB954A0[v18])(&a13, v16 - 34);
          }
          *(v16 - 4) = -1;
        }
        v16 -= 40;
      }
      while (v16 != v15);
      long long v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B83B1E0(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const void ***)(a1 + 64);
  long long v59 = *(const void ***)(a1 + 72);
  if (v5 == v59)
  {
LABEL_102:
    v77[32] = 0;
    __p[23] = 0;
    __p[0] = 0;
    sub_21B858B90(a5, &v77[32]);
  }
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v66 = 0;
    e5rt_execution_stream_operation_retain_output_port();
    v75[0] = &off_26CB96298;
    v75[1] = MEMORY[0x263F3B808];
    v75[2] = &v66;
    v76 = v75;
    if (!a2) {
      goto LABEL_20;
    }
    uint64_t v9 = *a3;
    uint64_t v10 = *a3 + 160 * v8;
    if (!*(void *)(v10 + 8)) {
      break;
    }
    e5rt_tensor_desc_release();
    if (*(void *)(v9 + 160 * v8 + 16)) {
      goto LABEL_8;
    }
LABEL_9:
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(_DWORD *)uint64_t v10 = 3;
    uint64_t v11 = v9 + 160 * v8;
    int v13 = *(unsigned __int8 *)(v11 + 152);
    unint64_t v12 = (unsigned char *)(v11 + 152);
    if (v13)
    {
      uint64_t v14 = v9 + 160 * v8;
      unsigned int v17 = *(_DWORD *)(v14 + 144);
      size_t v16 = (_DWORD *)(v14 + 144);
      uint64_t v15 = v17;
      if (v17 != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_26CB954A0[v15])(__p, v12 - 128);
      }
      *size_t v16 = -1;
      *unint64_t v12 = 0;
    }
LABEL_13:
    e5rt_io_port_retain_tensor_desc();
    unint64_t v74 = 0;
    e5rt_tensor_desc_get_size();
    sub_21B842B24();
    *(_DWORD *)(*a3 + 160 * v8) = v18;
    if (e5rt_buffer_object_alloc())
    {
      LOBYTE(v73) = 5;
      int v19 = *((char *)v5 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        size_t v20 = (size_t)v5[1];
      }
      unint64_t v21 = v20 + 41;
      if (v20 + 41 > 0x7FFFFFFFFFFFFFF7) {
        sub_21B836090();
      }
      if (v21 <= 0x16)
      {
        qmemcpy(v77, "Unable to create buffer for output port: ", 41);
        long long v22 = &v77[41];
        goto LABEL_44;
      }
      uint64_t v36 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v36 = v21 | 7;
      }
      uint64_t v37 = v36 + 1;
      uint64_t v38 = (char *)operator new(v36 + 1);
      *(void *)&v77[8] = v20 + 41;
      *(void *)&v77[16] = v37 | 0x8000000000000000;
      *(void *)v77 = v38;
      qmemcpy(v38, "Unable to create buffer for output port: ", 41);
      long long v22 = v38 + 41;
      if (v20)
      {
LABEL_44:
        if (v19 >= 0) {
          uint64_t v39 = v5;
        }
        else {
          uint64_t v39 = *v5;
        }
        memmove(v22, v39, v20);
      }
      v22[v20] = 0;
      long long v40 = std::string::append((std::string *)v77, " of size ", 9uLL);
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v78 = (void **)v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77[32] = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      sub_21B84080C(&v74);
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v42 = v64;
      }
      else {
        std::string::size_type v42 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v43 = v65;
      }
      else {
        std::string::size_type v43 = (std::string::size_type)v64[1];
      }
      uint64_t v44 = std::string::append((std::string *)&v77[32], (const std::string::value_type *)v42, v43);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v44->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      sub_21B858B90(a5, &v73);
    }
LABEL_20:
    if (e5rt_io_port_bind_buffer_object())
    {
      v77[32] = 5;
      int v23 = *((char *)v5 + 23);
      if (v23 >= 0) {
        size_t v24 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        size_t v24 = (size_t)v5[1];
      }
      unint64_t v25 = v24 + 44;
      if (v24 + 44 > 0x7FFFFFFFFFFFFFF7) {
        sub_21B836090();
      }
      if (v25 <= 0x16)
      {
        qmemcpy(__p, "Unable to bind output buffer to output port ", sizeof(__p));
        std::string::size_type v26 = &v61;
        goto LABEL_36;
      }
      uint64_t v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v32 = v25 | 7;
      }
      uint64_t v33 = v32 + 1;
      size_t v34 = (int *)operator new(v32 + 1);
      *(void *)&__p[8] = v24 + 44;
      *(void *)&__p[16] = v33 | 0x8000000000000000;
      *(void *)std::string __p = v34;
      qmemcpy(v34, "Unable to bind output buffer to output port ", 44);
      std::string::size_type v26 = v34 + 11;
      if (v24)
      {
LABEL_36:
        if (v23 >= 0) {
          unint64_t v35 = v5;
        }
        else {
          unint64_t v35 = *v5;
        }
        memmove(v26, v35, v24);
      }
      *((unsigned char *)v26 + v24) = 0;
      sub_21B858B90(a5, &v77[32]);
    }
    if (a2)
    {
      uint64_t v27 = *a3;
      uint64_t v28 = *a3 + 160 * v8;
      if (*(_DWORD *)v28 == 2)
      {
        long long v29 = *(_OWORD *)v28;
        *(void *)&__p[16] = *(void *)(v28 + 16);
        *(_OWORD *)std::string __p = v29;
        uint64_t v30 = v27 + 160 * v8;
        __p[24] = 0;
        char v63 = 0;
        if (*(unsigned char *)(v30 + 152))
        {
          int v62 = -1;
          uint64_t v31 = *(unsigned int *)(v27 + 160 * v8 + 144);
          if (v31 != -1)
          {
            ((void (*)(unsigned char *, unsigned char *, uint64_t))off_26CB954B8[v31])(v77, &__p[24], v30 + 24);
            int v62 = v31;
          }
          char v63 = 1;
        }
LABEL_89:
        uint64_t v55 = *a4 + 160 * v8;
        long long v56 = *(_OWORD *)__p;
        *(void *)(v55 + 16) = *(void *)&__p[16];
        *(_OWORD *)uint64_t v55 = v56;
        sub_21B858A50(v55 + 24, (uint64_t)&__p[24]);
        if (v63 && v62 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_26CB954A0[v62])(&v77[32], &__p[24]);
        }
        goto LABEL_92;
      }
      v64[0] = 0;
      e5rt_tensor_desc_retain_dtype();
      *(void *)&v77[32] = &unk_26CB95550;
      *(void *)&v77[40] = MEMORY[0x263F3B860];
      v78 = v64;
      v79 = &v77[32];
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      e5rt_tensor_desc_get_shape();
      char v72 = 0;
      e5rt_tensor_desc_dtype_get_num_components();
      uint64_t v71 = 0;
      if (v72 != 1 && v72 != 4 && v72 != 2)
      {
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1045, (uint64_t)&unk_21B997215, 0, (uint64_t)"Number of components not supported yet", 38, (void (*)(void **))sub_21B984AC4);
        abort();
      }
      if (e5rt_tensor_desc_dtype_create()
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1077, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
      *(void *)v77 = &unk_26CB95550;
      *(void *)&v77[8] = MEMORY[0x263F3B860];
      *(void *)&v77[16] = &v71;
      *(void *)&v77[24] = v77;
      uint64_t v70 = 0;
      if (e5rt_tensor_desc_create()
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1084, (uint64_t)"ret_tensor == E5RT_ERROR_CODE_OK", 32, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      e5rt_tensor_desc_get_size();
      e5rt_tensor_desc_get_size();
      if (*(_DWORD *)v28 == 1)
      {
        if (v74)
        {
          if (v74 == 4 && (*(unsigned char *)(v73 + 24) & 0x1F) == 0)
          {
            if (2 * v68 != v69) {
              goto LABEL_76;
            }
          }
          else
          {
            if (v74 < 2)
            {
              unint64_t v46 = 0;
              uint64_t v47 = 1;
              goto LABEL_73;
            }
            unint64_t v46 = v74 & 0xFFFFFFFFFFFFFFFELL;
            v48 = (void *)(v73 + 8);
            unint64_t v49 = v74 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v50 = 1;
            uint64_t v51 = 1;
            do
            {
              v50 *= *(v48 - 1);
              v51 *= *v48;
              v48 += 2;
              v49 -= 2;
            }
            while (v49);
            uint64_t v47 = v51 * v50;
            if (v74 != v46)
            {
LABEL_73:
              uint64_t v52 = v74 - v46;
              __int16 v53 = (uint64_t *)(v73 + 8 * v46);
              do
              {
                uint64_t v54 = *v53++;
                v47 *= v54;
                --v52;
              }
              while (v52);
            }
            if (4 * v47 != v69)
            {
LABEL_76:
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1092, (uint64_t)"detail::IsValidShape(input_rank, input_shape, input_tensor_size, output_tensor_size)", 84, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                abort();
              }
            }
          }
        }
        else if (v69 != 4)
        {
          goto LABEL_76;
        }
      }
      uint64_t v67 = 0;
      if (e5rt_buffer_object_alloc()
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1099, (uint64_t)"mem_ret == E5RT_ERROR_CODE_OK", 29, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
      *(_DWORD *)std::string __p = 2;
      *(void *)&__p[8] = v70;
      *(void *)&__p[16] = v67;
      __p[24] = 0;
      char v63 = 0;
      if (!*(void *)&v77[24]) {
        sub_21B846100();
      }
      (*(void (**)(void))(**(void **)&v77[24] + 48))(*(void *)&v77[24]);
      if (*(unsigned char **)&v77[24] == v77)
      {
        (*(void (**)(unsigned char *))(*(void *)v77 + 32))(v77);
      }
      else if (*(void *)&v77[24])
      {
        (*(void (**)(void))(**(void **)&v77[24] + 40))(*(void *)&v77[24]);
      }
      if (!v79) {
        sub_21B846100();
      }
      (*(void (**)(unsigned char *))(*(void *)v79 + 48))(v79);
      if (v79 == &v77[32])
      {
        (*(void (**)(unsigned char *))(*(void *)&v77[32] + 32))(&v77[32]);
      }
      else if (v79)
      {
        (*(void (**)(unsigned char *))(*(void *)v79 + 40))(v79);
      }
      goto LABEL_89;
    }
LABEL_92:
    if (!v76) {
      sub_21B846100();
    }
    (*(void (**)(void *))(*v76 + 48))(v76);
    if (v76 == v75)
    {
      (*(void (**)(void *))(v75[0] + 32))(v75);
    }
    else if (v76)
    {
      (*(void (**)(void))(*v76 + 40))();
    }
    v5 += 4;
    ++v8;
    if (v5 == v59) {
      goto LABEL_102;
    }
  }
  if (!*(void *)(v9 + 160 * v8 + 16)) {
    goto LABEL_13;
  }
LABEL_8:
  e5rt_buffer_object_release();
  goto LABEL_9;
}

void sub_21B83BCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  sub_21B83804C((void *)(v38 - 160));
  sub_21B83804C((void *)(v38 - 128));
  sub_21B83804C((void *)(v38 - 192));
  _Unwind_Resume(a1);
}

void sub_21B83BE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if (a45 < 0)
    {
LABEL_5:
      operator delete(a40);
      if (*(char *)(v45 - 105) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v45 - 128));
        if ((*(char *)(v45 - 137) & 0x80000000) == 0) {
LABEL_12:
        }
          JUMPOUT(0x21B83BF20);
LABEL_11:
        operator delete(*(void **)(v45 - 160));
        sub_21B83804C((void *)(v45 - 192));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((*(char *)(v45 - 137) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (a45 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v45 - 105) < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_21B83BED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_21B83804C((void *)(v22 - 192));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B83BF20);
}

void sub_21B83BF0C(void *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  JUMPOUT(0x21B83BF28);
}

void sub_21B83BF1C(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void *sub_21B83BF30(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v7 = v6;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_21B846A2C(v6, a1);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  v6[0] = &unk_26CB95690;
  v6[1] = nullsub_3;
  uint64_t v7 = v6;
  sub_21B846A2C(v6, a2);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return a1;
}

void sub_21B83C120(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        uint64_t v5 = (void **)*v2;
        sub_21B8464C4((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0) {
          operator delete(v2[2]);
        }
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    uint64_t v3 = a1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_21B83C1B0()
{
}

void sub_21B83C2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B927060(v9);
  sub_21B83A360((uint64_t)&a9);
  MEMORY[0x21D495F30](v9, 0x10E1C40C03DF36ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_21B83C304@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26CB96248;
  uint64_t result = sub_21B91EE68((uint64_t)(v6 + 3), a1, a2);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

void sub_21B83C370(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void **sub_21B83C388(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((unsigned char *)v3 - 8))
        {
          uint64_t v5 = *(v3 - 4);
          if (v5 != -1) {
            ((void (*)(char *, _DWORD *))off_26CB954A0[v5])(&v7, v3 - 34);
          }
          *(v3 - 4) = -1;
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_21B83C434(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    if (*((unsigned char *)v3 + 176))
    {
      uint64_t v4 = *((unsigned int *)v3 + 42);
      if (v4 != -1) {
        ((void (*)(char *, void *))off_26CB954A0[v4])(&v7, v3 + 6);
      }
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_21B83C4CC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_21B83C538@<X0>(void *lpsrc@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
  if (!v5) {
    goto LABEL_94;
  }
  uint64_t v6 = v5;
  char v7 = (const void *)a2[1];
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
  if (!v8) {
LABEL_94:
  }
    __cxa_bad_cast();
  uint64_t v9 = v8[31];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v8[31];
  }
  else {
    uint64_t v10 = *((void *)v8 + 2);
  }
  uint64_t v11 = v6[31];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 2);
  }
  if (v10 != v11) {
    goto LABEL_19;
  }
  int v13 = (const void **)(v8 + 8);
  if (v12 >= 0) {
    uint64_t v14 = v6 + 8;
  }
  else {
    uint64_t v14 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((void *)v8 + 2))) {
      goto LABEL_19;
    }
LABEL_45:
    LOBYTE(v57[0]) = 0;
    std::string __p = operator new(0x38uLL);
    long long v61 = xmmword_21B9A0710;
    strcpy((char *)__p, "The model is already running in this configuration.");
    sub_21B858B90(a3, v57);
  }
  if (!v8[31]) {
    goto LABEL_45;
  }
  while (*(unsigned __int8 *)v13 == *v14)
  {
    int v13 = (const void **)((char *)v13 + 1);
    ++v14;
    if (!--v9) {
      goto LABEL_45;
    }
  }
LABEL_19:
  uint64_t v15 = (const void **)(v6 + 8);
  sub_21B8471D4((uint64_t)&__p, (uint64_t *)(a2[24] + 8));
  if (!v66) {
    goto LABEL_58;
  }
  uint64_t v16 = v64;
  uint64_t v17 = v65;
  if (v64 != v65)
  {
    unsigned __int8 v18 = v6[31];
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = v6[31];
    }
    else {
      uint64_t v19 = *((void *)v6 + 2);
    }
    if ((v18 & 0x80u) == 0) {
      size_t v20 = v6 + 8;
    }
    else {
      size_t v20 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    while (1)
    {
      uint64_t v21 = *(unsigned __int8 *)(v16 + 23);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v16 + 8);
      }
      if (v22 == v19)
      {
        if ((v21 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, v20, *(void *)(v16 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v16 + 23)) {
            break;
          }
          uint64_t v23 = 0;
          while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
          {
            if (v21 == ++v23) {
              goto LABEL_38;
            }
          }
        }
      }
      v16 += 24;
      if (v16 == v17) {
        goto LABEL_58;
      }
    }
  }
LABEL_38:
  if (v16 == v17)
  {
LABEL_58:
    LOBYTE(v55) = 3;
    int v36 = (char)v6[31];
    if (v36 >= 0) {
      size_t v37 = v6[31];
    }
    else {
      size_t v37 = *((void *)v6 + 2);
    }
    unint64_t v38 = v37 + 46;
    if (v37 + 46 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    if (v38 > 0x16)
    {
      uint64_t v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v40 = v38 | 7;
      }
      *(void *)&v54[40] = v37 + 46;
      *(void *)&v54[48] = (v40 + 1) | 0x8000000000000000;
      *(void *)&v54[32] = operator new(v40 + 1);
      qmemcpy(*(void **)&v54[32], "Unable to find the name of the configuration '", 46);
      uint64_t v39 = (unsigned char *)(*(void *)&v54[32] + 46);
      if (!v37)
      {
LABEL_71:
        v39[v37] = 0;
        std::string::size_type v42 = std::string::append((std::string *)&v54[32], "'.", 2uLL);
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        std::string::size_type v58 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v57 = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        sub_21B858B90(a3, &v55);
      }
    }
    else
    {
      qmemcpy(&v54[32], "Unable to find the name of the configuration '", 46);
      uint64_t v39 = &v54[78];
    }
    if (v36 >= 0) {
      long long v41 = v15;
    }
    else {
      long long v41 = *v15;
    }
    memmove(v39, v41, v37);
    goto LABEL_71;
  }
  size_t v24 = sub_21B859FB0(a2 + 2, (uint64_t)(v6 + 8));
  if (!v24) {
    sub_21B846070("unordered_map::at: key not found");
  }
  if (!v24[5]
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 439, (uint64_t)"espresso_stream_op != nullptr", 29, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B83A450(&__p, (uint64_t)v57);
  char v25 = (char)v57[1];
  if (!LOBYTE(v57[1]))
  {
    sub_21B83D2BC(a2);
    sub_21B83B0A4((char **)&v55, (v63 - v62) >> 5);
    sub_21B83B0A4((char **)&v54[64], (v63 - v62) >> 5);
    sub_21B83B1E0((uint64_t)&__p, 1, (uint64_t *)&v55, &v54[64], (uint64_t)&v54[32]);
    if (v54[40])
    {
      v52.__r_.__value_.__s.__data_[0] = 5;
      uint64_t v27 = *(const void ***)&v54[48];
      int v28 = *(char *)(*(void *)&v54[48] + 23);
      if (v28 >= 0) {
        size_t v29 = *(unsigned __int8 *)(*(void *)&v54[48] + 23);
      }
      else {
        size_t v29 = *(void *)(*(void *)&v54[48] + 8);
      }
      unint64_t v30 = v29 + 53;
      if (v29 + 53 > 0x7FFFFFFFFFFFFFF7) {
        sub_21B836090();
      }
      if (v30 > 0x16)
      {
        uint64_t v44 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v44 = v30 | 7;
        }
        *(void *)&v54[8] = v29 + 53;
        *(void *)&v54[16] = (v44 + 1) | 0x8000000000000000;
        *(void *)uint64_t v54 = operator new(v44 + 1);
        qmemcpy(*(void **)v54, "Unable to bind output buffers in this configuration: ", 53);
        uint64_t v31 = (unsigned char *)(*(void *)v54 + 53);
        if (!v29)
        {
LABEL_79:
          v31[v29] = 0;
          sub_21B858B90(a3, &v52);
        }
      }
      else
      {
        qmemcpy(v54, "Unable to bind output buffers in this configuration: ", 53);
        uint64_t v31 = &v54[53];
      }
      if (v28 >= 0) {
        uint64_t v45 = v27;
      }
      else {
        uint64_t v45 = *v27;
      }
      memmove(v31, v45, v29);
      goto LABEL_79;
    }
    if (!e5rt_execution_stream_operation_prepare_op_for_encode())
    {
      if (a2 + 13 != &v55) {
        sub_21B847CE0(a2 + 13, (long long *)v55, v56, 0xCCCCCCCCCCCCCCCDLL * (((char *)v56 - (unsigned char *)v55) >> 5));
      }
      if (a2 + 16 != (void *)&v54[64]) {
        sub_21B847CE0(a2 + 16, *(long long **)&v54[64], *(long long **)&v54[72], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v54[72] - *(void *)&v54[64]) >> 5));
      }
      operator new();
    }
    char v53 = 6;
    last_error_message = (const char *)e5rt_get_last_error_message();
    size_t v33 = strlen(last_error_message);
    if (v33 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    std::string::size_type v34 = v33;
    if (v33 >= 0x17)
    {
      uint64_t v46 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17) {
        uint64_t v46 = v33 | 7;
      }
      uint64_t v47 = v46 + 1;
      unint64_t v35 = (std::string *)operator new(v46 + 1);
      v52.__r_.__value_.__l.__size_ = v34;
      v52.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    }
    else
    {
      *((unsigned char *)&v52.__r_.__value_.__s + 23) = v33;
      unint64_t v35 = &v52;
      if (!v33)
      {
LABEL_89:
        v35->__r_.__value_.__s.__data_[v34] = 0;
        v48 = std::string::insert(&v52, 0, " Unable to load this espresso function for execution: ", 0x36uLL);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        *(void *)&v54[16] = *((void *)&v48->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v54 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        sub_21B858B90(a3, &v53);
      }
    }
    memmove(v35, last_error_message, v34);
    goto LABEL_89;
  }
  *(void *)a3 = &unk_26CB95650;
  *(unsigned char *)(a3 + 8) = v25;
  std::string::size_type v26 = v59;
  *(void *)(a3 + 16) = v58;
  *(void *)(a3 + 24) = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v57[0] = &unk_26CB95650;
  uint64_t v50 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  nullsub_82(v57);
  return sub_21B848B68((uint64_t)&__p);
}

void sub_21B83CED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v51 = nullsub_82(v49);
  MEMORY[0x21D495F30](v51, 0x1093C402D7449D9);
  sub_21B83D090(&a23);
  sub_21B83C388(&a30);
  sub_21B83C388(&a33);
  sub_21B83D090(&a36);
  sub_21B848B68((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void *sub_21B83D008(void *a1, long long *a2)
{
  *a1 = &unk_26CB9EF00;
  uint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21B846188(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

void sub_21B83D07C(_Unwind_Exception *a1)
{
  nullsub_82(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B83D090(void *a1)
{
  *a1 = &unk_26CB95650;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return nullsub_82();
}

uint64_t sub_21B83D148(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      sub_21B8464C4((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_21B83D1BC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 16) = &unk_26CB95650;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  nullsub_82(v2);
  return a1;
}

uint64_t sub_21B83D258(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_21B83D2B4(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

void sub_21B83D2BC(void *a1)
{
  for (uint64_t i = (uint64_t *)a1[10]; i; uint64_t i = (uint64_t *)*i)
  {
    if (i[4]) {
      e5rt_tensor_desc_release();
    }
    if (i[5]) {
      e5rt_buffer_object_release();
    }
    i[4] = 0;
    i[5] = 0;
    *((_DWORD *)i + 6) = 3;
    if (*((unsigned char *)i + 176))
    {
      uint64_t v3 = *((unsigned int *)i + 42);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t *))off_26CB954A0[v3])(&v23, i + 6);
      }
      *((_DWORD *)i + 42) = -1;
      *((unsigned char *)i + 176) = 0;
    }
  }
  if (a1[11])
  {
    long long v4 = (void *)a1[10];
    while (v4)
    {
      uint64_t v5 = v4;
      long long v4 = (void *)*v4;
      if (*((unsigned char *)v5 + 176))
      {
        uint64_t v6 = *((unsigned int *)v5 + 42);
        if (v6 != -1) {
          ((void (*)(char *, void *))off_26CB954A0[v6])(&v22, v5 + 6);
        }
      }
      operator delete(v5);
    }
    a1[10] = 0;
    uint64_t v7 = a1[9];
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(a1[8] + 8 * j) = 0;
    }
    a1[11] = 0;
  }
  for (k = (void *)a1[21]; k; k = (void *)*k)
  {
    for (m = (uint64_t *)k[12]; m; m = (uint64_t *)*m)
    {
      if (m[4]) {
        e5rt_tensor_desc_release();
      }
      if (m[5]) {
        e5rt_buffer_object_release();
      }
      m[4] = 0;
      m[5] = 0;
      *((_DWORD *)m + 6) = 3;
      if (*((unsigned char *)m + 176))
      {
        uint64_t v11 = *((unsigned int *)m + 42);
        if (v11 != -1) {
          ((void (*)(char *, uint64_t *))off_26CB954A0[v11])(&v24, m + 6);
        }
        *((_DWORD *)m + 42) = -1;
        *((unsigned char *)m + 176) = 0;
      }
    }
  }
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[14];
  uint64_t v14 = a1[16];
  uint64_t v15 = a1[17];
  if (v12 != v13 || v14 != v15)
  {
    uint64_t v17 = 0;
    do
    {
      if (*(_DWORD *)(v12 + v17) != 2)
      {
        if (*(void *)(v14 + v17 + 8)) {
          e5rt_tensor_desc_release();
        }
        if (*(void *)(v14 + v17 + 16)) {
          e5rt_buffer_object_release();
        }
        *(void *)(v14 + v17 + 8) = 0;
        *(void *)(v14 + v17 + 16) = 0;
        uint64_t v18 = v14 + v17;
        *(_DWORD *)(v14 + v17) = 3;
        if (*(unsigned char *)(v14 + v17 + 152))
        {
          uint64_t v19 = *(unsigned int *)(v18 + 144);
          if (v19 != -1) {
            ((void (*)(char *, uint64_t))off_26CB954A0[v19])(&v25, v18 + 24);
          }
          *(_DWORD *)(v18 + 144) = -1;
          *(unsigned char *)(v18 + 152) = 0;
        }
      }
      if (*(void *)(v12 + v17 + 8)) {
        e5rt_tensor_desc_release();
      }
      if (*(void *)(v12 + v17 + 16)) {
        e5rt_buffer_object_release();
      }
      *(void *)(v12 + v17 + 8) = 0;
      *(void *)(v12 + v17 + 16) = 0;
      uint64_t v20 = v12 + v17;
      *(_DWORD *)(v12 + v17) = 3;
      if (*(unsigned char *)(v12 + v17 + 152))
      {
        uint64_t v21 = *(unsigned int *)(v20 + 144);
        if (v21 != -1) {
          ((void (*)(char *, uint64_t))off_26CB954A0[v21])(&v26, v20 + 24);
        }
        *(_DWORD *)(v20 + 144) = -1;
        *(unsigned char *)(v20 + 152) = 0;
      }
      v17 += 160;
    }
    while (v17 + v12 != v13 || v17 + v14 != v15);
  }
}

uint64_t sub_21B83D5BC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_21B83D5CC(std::string *a1, uint64_t a2)
{
  uint64_t v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    *((unsigned char *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_12;
  }
  long long v4 = (const char *)MEMORY[0x21D496190](a2);
  size_t v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  uint64_t v10 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v29, ". ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
LABEL_12:
  uint64_t v14 = std::string::append(&v30, "Last Error: ", 0xCuLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  size_t v17 = strlen(last_error_message);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    size_t v26 = v18;
    int64_t v27 = v21 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v27) = v17;
  p_p = &__p;
  if (v17) {
LABEL_19:
  }
    memmove(p_p, last_error_message, v18);
  *((unsigned char *)p_p + v18) = 0;
  if (v27 >= 0) {
    char v22 = (const std::string::value_type *)&__p;
  }
  else {
    char v22 = (const std::string::value_type *)__p;
  }
  if (v27 >= 0) {
    std::string::size_type v23 = HIBYTE(v27);
  }
  else {
    std::string::size_type v23 = v26;
  }
  char v24 = std::string::append(&v31, v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v3) {
      return;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v3) {
    return;
  }
LABEL_34:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
}

void sub_21B83D864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B83D90C@<X0>(void *a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  uint64_t result = e5rt_program_library_create();
  if (result)
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v6[0] = &unk_26CB95FF8;
    v6[1] = MEMORY[0x263F3B850];
    v6[2] = &v5;
    uint64_t v7 = v6;
    long long v4 = 0;
    if (!e5rt_program_library_get_function_metadata()) {
      sub_21B97B5F8((uint64_t)&v3, v4, 0);
    }
    *a1 = 0;
    a1[1] = 0;
    if (!v7) {
      sub_21B846100();
    }
    (*(void (**)(void *))(*v7 + 48))(v7);
    uint64_t result = (uint64_t)v7;
    if (v7 == v6)
    {
      return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
    }
    else if (v7)
    {
      return (*(uint64_t (**)(void))(*v7 + 40))();
    }
  }
  return result;
}

void sub_21B83DC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  sub_21B83A360((uint64_t)va3);
  sub_21B83A360((uint64_t)va);
  sub_21B83DCE8((uint64_t)va1);
  sub_21B83A360((uint64_t)va2);
  sub_21B83804C((void *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_21B83DCB8(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B83DCCC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B83DCE8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void *sub_21B83DD6C(void *a1)
{
  *a1 = &unk_26CB95440;
  for (uint64_t i = (void *)a1[4]; i; uint64_t i = (void *)*i)
  {
    if (i[5]) {
      e5rt_execution_stream_operation_release();
    }
  }
  if (a1[7]) {
    e5rt_execution_stream_release();
  }
  sub_21B83D2BC(a1);
  uint64_t v3 = (std::__shared_weak_count *)a1[25];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_21B846FE0((uint64_t)(a1 + 2));
  return sub_21B927060(a1);
}

void sub_21B83DE50(void *a1)
{
}

void sub_21B83DE68(void *a1)
{
  sub_21B83DD6C(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B83DEA0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (!v2)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 657, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    uint64_t v2 = *(const void **)(a1 + 8);
  }
  uint64_t v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = sub_21B859FB0((void *)(a1 + 16), (uint64_t)v3 + 8);
  if (!v4) {
    sub_21B846070("unordered_map::at: key not found");
  }
  return v4[5];
}

void sub_21B83DF78(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[22]) {
    sub_21B83F2B4((uint64_t)a1, a2, (uint64_t)&v53);
  }
  sub_21B83E974(a1, a2, (uint64_t)&v53);
  if (v56)
  {
    if (e5rt_execution_stream_execute_sync())
    {
      uint64_t v5 = (const char *)MEMORY[0x21D496190]();
      size_t v6 = strlen(v5);
      if (v6 <= 0x7FFFFFFFFFFFFFF7)
      {
        std::string::size_type v7 = v6;
        if (v6 >= 0x17)
        {
          uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v6 | 7) != 0x17) {
            uint64_t v11 = v6 | 7;
          }
          uint64_t v12 = v11 + 1;
          p_dst = (std::string *)operator new(v11 + 1);
          __dst.__r_.__value_.__l.__size_ = v7;
          __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
          p_dst = &__dst;
          if (!v6)
          {
LABEL_18:
            p_dst->__r_.__value_.__s.__data_[v7] = 0;
            uint64_t v13 = std::string::insert(&__dst, 0, "Execution stream execute failed.  Return code: ", 0x2FuLL);
            long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v51.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v14;
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            uint64_t v15 = std::string::append(&v51, ". Last error message: ", 0x16uLL);
            long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v52.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v16;
            v15->__r_.__value_.__l.__size_ = 0;
            v15->__r_.__value_.__r.__words[2] = 0;
            v15->__r_.__value_.__r.__words[0] = 0;
            last_error_message = (const char *)e5rt_get_last_error_message();
            size_t v18 = strlen(last_error_message);
            if (v18 > 0x7FFFFFFFFFFFFFF7) {
              sub_21B836090();
            }
            size_t v19 = v18;
            if (v18 >= 0x17)
            {
              uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v18 | 7) != 0x17) {
                uint64_t v21 = v18 | 7;
              }
              uint64_t v22 = v21 + 1;
              p_p = operator new(v21 + 1);
              size_t v48 = v19;
              int64_t v49 = v22 | 0x8000000000000000;
              std::string __p = p_p;
            }
            else
            {
              HIBYTE(v49) = v18;
              p_p = &__p;
              if (!v18)
              {
LABEL_26:
                *((unsigned char *)p_p + v19) = 0;
                if (v49 >= 0) {
                  std::string::size_type v23 = (const std::string::value_type *)&__p;
                }
                else {
                  std::string::size_type v23 = (const std::string::value_type *)__p;
                }
                if (v49 >= 0) {
                  std::string::size_type v24 = HIBYTE(v49);
                }
                else {
                  std::string::size_type v24 = v48;
                }
                char v25 = std::string::append(&v52, v23, v24);
                long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
                std::string::size_type v54 = v25->__r_.__value_.__r.__words[2];
                long long v53 = v26;
                v25->__r_.__value_.__l.__size_ = 0;
                v25->__r_.__value_.__r.__words[2] = 0;
                v25->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v49) < 0)
                {
                  operator delete(__p);
                  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_34:
                    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_35;
                    }
                    goto LABEL_39;
                  }
                }
                else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_34;
                }
                operator delete(v52.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_35:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_36;
                  }
LABEL_40:
                  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
                  v52.__r_.__value_.__s.__data_[0] = 6;
                  sub_21B858B90(a3, &v52);
                }
LABEL_39:
                operator delete(v51.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_36;
                }
                goto LABEL_40;
              }
            }
            memmove(p_p, last_error_message, v19);
            goto LABEL_26;
          }
        }
        memmove(p_dst, v5, v7);
        goto LABEL_18;
      }
LABEL_75:
      sub_21B836090();
    }
    if (a1[22] || !e5rt_execution_stream_reset())
    {
      v52.__r_.__value_.__s.__data_[0] = 0;
      HIBYTE(v54) = 0;
      LOBYTE(v53) = 0;
      sub_21B858B90(a3, &v52);
    }
    int64_t v27 = (const char *)MEMORY[0x21D496190]();
    size_t v28 = strlen(v27);
    if (v28 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_75;
    }
    std::string::size_type v29 = v28;
    if (v28 >= 0x17)
    {
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      std::string v30 = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v29;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28;
      std::string v30 = &__dst;
      if (!v28)
      {
LABEL_52:
        v30->__r_.__value_.__s.__data_[v29] = 0;
        size_t v33 = std::string::insert(&__dst, 0, "Execution stream reset failed.  Return code: ", 0x2DuLL);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        unint64_t v35 = std::string::append(&v51, ". Last error message: ", 0x16uLL);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        size_t v37 = (const char *)e5rt_get_last_error_message();
        size_t v38 = strlen(v37);
        if (v38 > 0x7FFFFFFFFFFFFFF7) {
          sub_21B836090();
        }
        size_t v39 = v38;
        if (v38 >= 0x17)
        {
          uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v41 = v38 | 7;
          }
          uint64_t v42 = v41 + 1;
          uint64_t v40 = operator new(v41 + 1);
          size_t v48 = v39;
          int64_t v49 = v42 | 0x8000000000000000;
          std::string __p = v40;
        }
        else
        {
          HIBYTE(v49) = v38;
          uint64_t v40 = &__p;
          if (!v38)
          {
LABEL_60:
            *((unsigned char *)v40 + v39) = 0;
            if (v49 >= 0) {
              long long v43 = (const std::string::value_type *)&__p;
            }
            else {
              long long v43 = (const std::string::value_type *)__p;
            }
            if (v49 >= 0) {
              std::string::size_type v44 = HIBYTE(v49);
            }
            else {
              std::string::size_type v44 = v48;
            }
            uint64_t v45 = std::string::append(&v52, v43, v44);
            long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            std::string::size_type v54 = v45->__r_.__value_.__r.__words[2];
            long long v53 = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v49) < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_68:
                if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_69;
                }
                goto LABEL_73;
              }
            }
            else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_68;
            }
            operator delete(v52.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_69:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_70;
              }
LABEL_74:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_70:
              v52.__r_.__value_.__s.__data_[0] = 6;
              sub_21B858B90(a3, &v52);
            }
LABEL_73:
            operator delete(v51.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_70;
            }
            goto LABEL_74;
          }
        }
        memmove(v40, v37, v39);
        goto LABEL_60;
      }
    }
    memmove(v30, v27, v29);
    goto LABEL_52;
  }
  *(void *)a3 = &unk_26CB95650;
  *(unsigned char *)(a3 + 8) = BYTE8(v53);
  uint64_t v9 = v55;
  *(void *)(a3 + 16) = v54;
  *(void *)(a3 + 24) = v9;
  if (!v9)
  {
    *(unsigned char *)(a3 + 32) = 0;
    *(unsigned char *)(a3 + 56) = 0;
    goto LABEL_42;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  int v10 = v56;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  if (!v10) {
LABEL_42:
  }
    (*(void (**)(long long *))v53)(&v53);
}

void sub_21B83E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0)
  {
    operator delete(*(void **)(v33 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B83E974(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = (const void *)a1[1];
  if (!v6)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1501, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    size_t v6 = (const void *)a1[1];
  }
  std::string::size_type v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = sub_21B85B524(a1 + 19, (uint64_t)v7 + 8);
  if (!v8) {
    sub_21B846070("unordered_map::at: key not found");
  }
  uint64_t v9 = v8;
  int v10 = v8 + 5;
  uint64_t v11 = v8[15];
  sub_21B843F20(a2, &__p);
  uint64_t v12 = sub_21B85B754(v10, (uint64_t)&__p);
  uint64_t v13 = v12;
  if (SBYTE7(v57) < 0)
  {
    operator delete((void *)__p);
    size_t v39 = v9 + 10;
    if (v13) {
      goto LABEL_8;
    }
  }
  else
  {
    size_t v39 = v9 + 10;
    if (v12)
    {
LABEL_8:
      uint64_t v14 = a2[1];
      uint64_t v15 = (v14 - *a2) >> 7;
      if (v15 != 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1[24] + 56) - *(void *)(a1[24] + 48)) >> 3))
      {
        LOBYTE(v55) = 6;
        long long v53 = operator new(0x30uLL);
        long long v54 = xmmword_21B9A0720;
        strcpy((char *)v53, "Input size provided is different from config.");
        sub_21B858B90((uint64_t)&v40, &v55);
      }
      if (v14 != *a2)
      {
        unint64_t v16 = 0;
        do
        {
          sub_21B91F22C(*a2 + (v16 << 7), (uint64_t)&__p);
          int v55 = v59;
          uint64_t v17 = sub_21B926FDC(&v55);
          BOOL v18 = sub_21B93635C((uint64_t)&__p);
          BOOL v19 = (unint64_t)(v17 - 1) < 2 && v18;
          if (!v19 && sub_21B936370((uint64_t)&__p))
          {
            int8x8_t v20 = (int8x8_t)v9[11];
            if (v20)
            {
              uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
              v21.i16[0] = vaddlv_u8(v21);
              if (v21.u32[0] > 1uLL)
              {
                unint64_t v22 = v16;
                if (v16 >= *(void *)&v20) {
                  unint64_t v22 = v16 % *(void *)&v20;
                }
              }
              else
              {
                unint64_t v22 = (*(void *)&v20 - 1) & v16;
              }
              std::string::size_type v23 = *(int ***)(*v39 + 8 * v22);
              if (v23)
              {
                std::string::size_type v24 = *v23;
                if (*v23)
                {
                  if (v21.u32[0] < 2uLL)
                  {
                    uint64_t v25 = *(void *)&v20 - 1;
                    while (1)
                    {
                      uint64_t v27 = *((void *)v24 + 1);
                      if (v27 == v16)
                      {
                        if (*((void *)v24 + 2) == v16) {
                          goto LABEL_40;
                        }
                      }
                      else if ((v27 & v25) != v22)
                      {
                        goto LABEL_38;
                      }
                      std::string::size_type v24 = *(int **)v24;
                      if (!v24) {
                        goto LABEL_38;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v26 = *((void *)v24 + 1);
                    if (v26 == v16)
                    {
                      if (*((void *)v24 + 2) == v16) {
                        goto LABEL_40;
                      }
                    }
                    else
                    {
                      if (v26 >= *(void *)&v20) {
                        v26 %= *(void *)&v20;
                      }
                      if (v26 != v22) {
                        break;
                      }
                    }
                    std::string::size_type v24 = *(int **)v24;
                  }
                  while (v24);
                }
              }
            }
LABEL_38:
            {
              abort();
            }
            std::string::size_type v24 = 0;
LABEL_40:
            long long v40 = __p;
            long long v41 = v57;
            long long v42 = v58;
            int v43 = v59;
            LOBYTE(v44) = 0;
            char v52 = 0;
            if (v67)
            {
              std::string::size_type v44 = &unk_26CB954E0;
              uint64_t v28 = v60[1];
              std::string::size_type v29 = v61;
              if (v61)
              {
                atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v30 = v64;
                int v31 = v65;
                __int16 v32 = v66;
                atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                uint64_t v30 = v64;
                int v31 = v65;
                __int16 v32 = v66;
              }
              uint64_t v45 = v28;
              long long v46 = v29;
              uint64_t v47 = v62;
              int v48 = v63;
              uint64_t v49 = v30;
              int v50 = v31;
              __int16 v51 = v32;
              if (v29)
              {
                if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              char v52 = 1;
            }
            sub_21B8510B8((uint64_t)&v53, (uint64_t)&v40, v24 + 6);
          }
          if (v67)
          {
            nullsub_82(&v62);
            uint64_t v33 = v61;
            if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
            nullsub_82(v60);
          }
          ++v16;
        }
        while (v16 != v15);
      }
      uint64_t v34 = v13[5];
      goto LABEL_59;
    }
  }
  if (v9[8] >= (unint64_t)v9[17])
  {
    LOBYTE(v55) = 7;
    long long v53 = operator new(0x28uLL);
    long long v54 = xmmword_21B9A0730;
    strcpy((char *)v53, "Prewire pool limit size reached.");
    sub_21B858B90((uint64_t)&v40, &v55);
  }
  sub_21B842DA4(a1, a2, (uint64_t)v10, v11, (uint64_t)&__p);
  if ((_BYTE)v58)
  {
    uint64_t v34 = __p;
LABEL_59:
    *(void *)a3 = v34;
    *(unsigned char *)(a3 + 32) = 1;
    return;
  }
  char v35 = BYTE8(__p);
  BYTE8(v40) = BYTE8(__p);
  uint64_t v37 = *((void *)&v57 + 1);
  uint64_t v36 = v57;
  long long v41 = v57;
  if (*((void *)&v57 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 1uLL, memory_order_relaxed);
    char v35 = BYTE8(v40);
    uint64_t v37 = *((void *)&v41 + 1);
    uint64_t v36 = v41;
  }
  *(void *)a3 = &unk_26CB95650;
  *(unsigned char *)(a3 + 8) = v35;
  *(void *)(a3 + 16) = v36;
  *(void *)(a3 + 24) = v37;
  if (v37)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    size_t v38 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    *(unsigned char *)(a3 + 32) = 0;
    *(void *)&long long v40 = &unk_26CB95650;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    *(unsigned char *)(a3 + 32) = 0;
    *(void *)&long long v40 = &unk_26CB95650;
  }
  nullsub_82(&v40);
  if (!(_BYTE)v58) {
    (*(void (**)(long long *))__p)(&__p);
  }
}

void sub_21B83F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B83F2B4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)(a1 + 192) + 56) != *(void *)(*(void *)(a1 + 192) + 48))
  {
    unint64_t v21 = 0;
    sub_21B91F22C(*a2, (uint64_t)&v16);
    LODWORD(__p[0]) = v20;
    if (sub_21B926F54(__p)
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1305, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      if ((*(_OWORD *)&v13[4] = v18,
            int v14 = v19,
            *(_OWORD *)long long __p = v16,
            *(_DWORD *)uint64_t v13 = v17,
            int v15 = v20,
            sub_21B91D8B8(__p))
        && sub_21B91D960(__p, 16)
        || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1306, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        LODWORD(__p[0]) = v20;
        sub_21B926FDC((int *)__p);
        if (v4) {
          sub_21B85AE84(a3);
        }
        char v11 = 3;
        sub_21B84080C(&v21);
        uint64_t v5 = std::string::insert(&v9, 0, "Invalid input: The given view for input ", 0x28uLL);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v10.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v7 = std::string::append(&v10, " requires both a color format and type definition in its format flags.", 0x46uLL);
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        *(void *)uint64_t v13 = *((void *)&v7->__r_.__value_.__l + 2);
        *(_OWORD *)long long __p = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        sub_21B858B90(a3, &v11);
      }
    }
    abort();
  }
  LOBYTE(__p[0]) = 0;
  BYTE3(v18) = 0;
  LOBYTE(v16) = 0;
  sub_21B858B90(a3, __p);
}

void sub_21B83FA8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_21B83FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_21B83D090(v48);
  sub_21B842A94(v49 - 216);
  _Unwind_Resume(a1);
}

void sub_21B83FB9C(_Unwind_Exception *a1)
{
  sub_21B842A94(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_21B83FBB0(_Unwind_Exception *a1)
{
  sub_21B842A94(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_21B83FBC4(_Unwind_Exception *a1)
{
  sub_21B842A94(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_21B83FBD8(_Unwind_Exception *a1)
{
  sub_21B842A94(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_21B83FBEC(_Unwind_Exception *a1)
{
  sub_21B842A94(v1 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_21B83FC00@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_21B83DF78(a1, a2, (uint64_t)&v20);
  char v5 = v21;
  if (!v21)
  {
    uint64_t v7 = a1[13];
    uint64_t v8 = a1[14];
    uint64_t v9 = a1[16];
    uint64_t v10 = a1[17];
    BOOL v11 = v7 == v8 && v9 == v10;
    if (!v11)
    {
      uint64_t v12 = v9 + 160;
      uint64_t v13 = v7 + 160;
      while (1)
      {
        uint64_t v14 = v12;
        int v15 = *(_DWORD *)(v13 - 160);
        if (v15)
        {
          if (v15 == 1 && e5rt_tensor_utils_cast_from_fp16_to_fp32())
          {
            LOBYTE(v27) = 6;
            long long __p = operator new(0x38uLL);
            long long v29 = xmmword_21B9A0710;
            strcpy((char *)__p, "Unable to convert Float16 to Float32 output buffer.");
            sub_21B858B90((uint64_t)&v19, &v27);
          }
        }
        else if (e5rt_tensor_utils_dequantize_from_u8_to_fp32())
        {
          LOBYTE(v27) = 6;
          long long __p = operator new(0x38uLL);
          long long v29 = xmmword_21B9A06F0;
          strcpy((char *)__p, "Unable to convert Uint8 to Float32 output buffer.");
          sub_21B858B90((uint64_t)&v19, &v27);
        }
        uint64_t v12 = v14 + 160;
        uint64_t v16 = v13 + 160;
        BOOL v11 = v13 == v8;
        v13 += 160;
        if (v11)
        {
          uint64_t v13 = v16;
          if (v14 == v10) {
            break;
          }
        }
      }
    }
    LOBYTE(v27) = 0;
    HIBYTE(v29) = 0;
    LOBYTE(__p) = 0;
    sub_21B858B90((uint64_t)&v19, &v27);
  }
  *(void *)a3 = &unk_26CB95650;
  *(unsigned char *)(a3 + 8) = v5;
  long long v6 = v23;
  *(void *)(a3 + 16) = v22;
  *(void *)(a3 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 32) = *(_OWORD *)v24;
    *(void *)(a3 + 48) = v25;
    v24[1] = 0;
    uint64_t v25 = 0;
    v24[0] = 0;
    *(unsigned char *)(a3 + 56) = 1;
  }
  int v20 = &unk_26CB95650;
  int v17 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return nullsub_82(&v20);
}

void sub_21B840194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a36 < 0)
  {
    operator delete(__p);
    sub_21B840310((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_21B840310((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void **sub_21B840244(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          nullsub_82(v3 - 40);
          char v5 = (std::__shared_weak_count *)*((void *)v3 - 6);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          nullsub_82(v3 - 64);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_21B840310(uint64_t a1)
{
  sub_21B84AE14((char **)(a1 + 32));
  *(void *)a1 = &unk_26CB95650;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v3 = a1;
  }
  return nullsub_82(v3);
}

uint64_t sub_21B8403D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_21B83DF78(a1, a2, (uint64_t)&v13);
  char v4 = v14;
  if (!v14)
  {
    char v12 = 0;
    sub_21B858B90(a3, &v12);
  }
  *(void *)a3 = &unk_26CB95650;
  *(unsigned char *)(a3 + 8) = v4;
  char v5 = v16;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  if (v19)
  {
    long long v6 = (char *)v17;
    if (v17)
    {
      uint64_t v7 = v18;
      uint64_t v8 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*(v7 - 8))
          {
            nullsub_82(v7 - 40);
            uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 6);
            if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
            nullsub_82(v7 - 64);
          }
          v7 -= 120;
        }
        while (v7 != v6);
        uint64_t v8 = v17;
      }
      long long v18 = v6;
      operator delete(v8);
    }
  }
  uint64_t v13 = &unk_26CB95650;
  uint64_t v10 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return nullsub_82(&v13);
}

void sub_21B840698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  sub_21B840708(&a24);
  sub_21B83D090(v42);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_21B840310((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void **sub_21B840708(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        char v5 = v3 - 128;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_26CB954A0[v6])(&v8, v3 - 128);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_21B8407B0()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_21B8407F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B84080C(unint64_t *a1)
{
  int v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  uint64_t v6 = v5;
  ((void (*)(void **, unsigned char *))off_26CB95900[0])(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == -1) {
    sub_21B84C734();
  }
  v5[0] = &v4;
  uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_26CB95918[v3])(v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_26CB958A0[v3])(v5, v2);
  }
  return result;
}

void sub_21B8408FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B840914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_21B84C6D8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_21B840938(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v59[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 192);
  *(_DWORD *)long long __p = *(_DWORD *)(a3 + 48);
  uint64_t v9 = sub_21B926FA4(__p);
  sub_21B928F3C(v8 + 8, a4, (uint64_t)__p);
  long long v57 = *(_OWORD *)__p;
  uint64_t v58 = *(void *)&__p[16];
  sub_21B83DEA0(a2);
  uint64_t v56 = 0;
  if (e5rt_execution_stream_operation_retain_input_port()) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v56 == 0;
  }
  if (!v10)
  {
    v59[0] = &off_26CB96298;
    v59[1] = MEMORY[0x263F3B808];
    v59[2] = &v56;
    v59[3] = v59;
    int v55 = &v56;
    if (v9 != 2)
    {
      if (v9 == 1)
      {
        long long v11 = *(_OWORD *)(a3 + 16);
        v45[0] = *(_OWORD *)a3;
        v45[1] = v11;
        v45[2] = *(_OWORD *)(a3 + 32);
        int v46 = *(_DWORD *)(a3 + 48);
        LOBYTE(v47[0]) = 0;
        char v54 = 0;
        if (*(unsigned char *)(a3 + 112))
        {
          v47[0] = &unk_26CB954E0;
          uint64_t v12 = *(void *)(a3 + 64);
          uint64_t v13 = *(std::__shared_weak_count **)(a3 + 72);
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v14 = *(void *)(a3 + 96);
            int v15 = *(_DWORD *)(a3 + 104);
            __int16 v16 = *(_WORD *)(a3 + 108);
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v14 = *(void *)(a3 + 96);
            int v15 = *(_DWORD *)(a3 + 104);
            __int16 v16 = *(_WORD *)(a3 + 108);
          }
          v47[1] = v12;
          int v48 = v13;
          uint64_t v49 = *(void *)(a3 + 80);
          int v50 = *(_DWORD *)(a3 + 88);
          uint64_t v51 = v14;
          int v52 = v15;
          __int16 v53 = v16;
          if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          char v54 = 1;
        }
        sub_21B84B240((uint64_t)v45, (uint64_t)__p);
        if (v54)
        {
          nullsub_82(&v49);
          char v26 = v48;
          if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          nullsub_82(v47);
        }
        if (v40)
        {
          uint64_t v27 = *(void *)&__p[8];
          uint64_t v28 = *(std::__shared_weak_count **)&__p[16];
          if (*(void *)&__p[16])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[16] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          sub_21B873B00(v27, &pixelBuffer);
          CVPixelBufferGetIOSurface(pixelBuffer);
          sub_21B84B668(a1);
        }
        if (*(unsigned char *)(a3 + 112) && sub_21B93C80C(a3 + 56))
        {
          if (*(unsigned char *)(a3 + 112))
          {
            sub_21B93CA00(a3 + 56, &pixelBuffer);
            sub_21B8A2FBC((uint64_t)&pixelBuffer);
            sub_21B84B668(a1);
          }
          sub_21B8446A8();
        }
        char v42 = 5;
        CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)operator new(0x20uLL);
        long long v44 = xmmword_21B9A0740;
        strcpy((char *)pixelBuffer, "Buffer is not IOSurface backed.");
        sub_21B858B90(a1, &v42);
      }
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1177, (uint64_t)&unk_21B997215, 0, (uint64_t)"Only Grayscale or two component image direct binding supported now.", 67, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    long long v17 = *(_OWORD *)(a3 + 16);
    v29[0] = *(_OWORD *)a3;
    v29[1] = v17;
    v29[2] = *(_OWORD *)(a3 + 32);
    int v30 = *(_DWORD *)(a3 + 48);
    LOBYTE(v31[0]) = 0;
    char v38 = 0;
    if (*(unsigned char *)(a3 + 112))
    {
      v31[0] = &unk_26CB954E0;
      uint64_t v18 = *(void *)(a3 + 64);
      char v19 = *(std::__shared_weak_count **)(a3 + 72);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v20 = *(void *)(a3 + 96);
        int v21 = *(_DWORD *)(a3 + 104);
        __int16 v22 = *(_WORD *)(a3 + 108);
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v20 = *(void *)(a3 + 96);
        int v21 = *(_DWORD *)(a3 + 104);
        __int16 v22 = *(_WORD *)(a3 + 108);
      }
      v31[1] = v18;
      __int16 v32 = v19;
      uint64_t v33 = *(void *)(a3 + 80);
      int v34 = *(_DWORD *)(a3 + 88);
      uint64_t v35 = v20;
      int v36 = v21;
      __int16 v37 = v22;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      char v38 = 1;
    }
    sub_21B84B98C((uint64_t)v29, (uint64_t)__p);
    if (v38)
    {
      nullsub_82(&v33);
      std::string::size_type v23 = v32;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      nullsub_82(v31);
    }
    if (v41)
    {
      uint64_t v24 = *(void *)&__p[8];
      uint64_t v25 = *(std::__shared_weak_count **)&__p[16];
      if (*(void *)&__p[16])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[16] + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      sub_21B878C94(v24, &pixelBuffer);
      CVPixelBufferGetIOSurface(pixelBuffer);
      sub_21B84B668(a1);
    }
    if (*(unsigned char *)(a3 + 112) && sub_21B93C80C(a3 + 56))
    {
      if (*(unsigned char *)(a3 + 112))
      {
        sub_21B93CA00(a3 + 56, &pixelBuffer);
        sub_21B8A2FBC((uint64_t)&pixelBuffer);
        sub_21B84B668(a1);
      }
      sub_21B8446A8();
    }
    char v42 = 5;
    CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)operator new(0x20uLL);
    long long v44 = xmmword_21B9A0740;
    strcpy((char *)pixelBuffer, "Buffer is not IOSurface backed.");
    sub_21B858B90(a1, &v42);
  }
  LOBYTE(v59[0]) = 5;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_21B9A0750;
  strcpy(*(char **)__p, "Unable to retain input port.");
  sub_21B858B90(a1, v59);
}

void sub_21B8411F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  sub_21B974934(&__p);
  sub_21B84B910((uint64_t)&a24);
  sub_21B83804C((void *)(v45 - 120));
  if (*(char *)(v45 - 121) < 0)
  {
    operator delete(*(void **)(v45 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B841320(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  unint64_t v83 = a5;
  int8x8_t v9 = (int8x8_t)a3[1];
  if (!*(void *)&v9) {
    goto LABEL_21;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a5;
    if (*(void *)&v9 <= a5) {
      unint64_t v11 = a5 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v9 - 1) & a5;
  }
  uint64_t v12 = *(uint64_t ***)(*a3 + 8 * v11);
  if (!v12)
  {
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_22:
    char v17 = 1;
    goto LABEL_23;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v14 = *(void *)&v9 - 1;
    while (1)
    {
      uint64_t v16 = v13[1];
      if (v16 == a5)
      {
        if (v13[2] == a5) {
          goto LABEL_84;
        }
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_21;
      }
      uint64_t v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v13[1];
    if (v15 == a5) {
      break;
    }
    if (v15 >= *(void *)&v9) {
      v15 %= *(void *)&v9;
    }
    if (v15 != v11) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_22;
    }
  }
  if (v13[2] != a5) {
    goto LABEL_11;
  }
LABEL_84:
  if (!*(void *)(a2 + 176))
  {
    long long v69 = *(_OWORD *)(v13 + 3);
    uint64_t v70 = v13[5];
    LOBYTE(v71[0]) = 0;
    char v73 = 0;
    if (*((unsigned char *)v13 + 176))
    {
      int v72 = -1;
      uint64_t v46 = *((unsigned int *)v13 + 42);
      if (v46 != -1)
      {
        ((void (*)(void *, void *, uint64_t *))off_26CB954B8[v46])(v91, v71, v13 + 6);
        int v72 = v46;
      }
      char v73 = 1;
    }
    char v74 = 1;
LABEL_133:
    long long v84 = v69;
    uint64_t v85 = v70;
    LOBYTE(v86[0]) = 0;
    char v88 = 0;
    if (v73)
    {
      int v87 = -1;
      int v50 = v72;
      if (v72 != -1)
      {
        ((void (*)(unsigned char *, void *, void *))off_26CB954B8[v72])(&v89[40], v86, v71);
        int v87 = v50;
      }
      char v88 = 1;
    }
    long long v51 = *(_OWORD *)(a4 + 16);
    v58[0] = *(_OWORD *)a4;
    v58[1] = v51;
    v58[2] = *(_OWORD *)(a4 + 32);
    int v59 = *(_DWORD *)(a4 + 48);
    LOBYTE(v60) = 0;
    char v68 = 0;
    if (*(unsigned char *)(a4 + 112))
    {
      uint64_t v60 = &unk_26CB954E0;
      uint64_t v52 = *(void *)(a4 + 64);
      __int16 v53 = *(std::__shared_weak_count **)(a4 + 72);
      if (v53)
      {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v54 = *(void *)(a4 + 96);
        int v55 = *(_DWORD *)(a4 + 104);
        __int16 v56 = *(_WORD *)(a4 + 108);
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v54 = *(void *)(a4 + 96);
        int v55 = *(_DWORD *)(a4 + 104);
        __int16 v56 = *(_WORD *)(a4 + 108);
      }
      uint64_t v61 = v52;
      uint64_t v62 = v53;
      uint64_t v63 = *(void *)(a4 + 80);
      int v64 = *(_DWORD *)(a4 + 88);
      uint64_t v65 = v54;
      int v66 = v55;
      __int16 v67 = v56;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      char v68 = 1;
    }
    sub_21B8510B8(a1, (uint64_t)v58, (int *)&v84);
  }
  char v17 = 0;
LABEL_23:
  sub_21B928F3C(*(void *)(a2 + 192) + 8, a5, (uint64_t)&v84);
  *(_OWORD *)long long __p = v84;
  uint64_t v82 = v85;
  sub_21B83DEA0(a2);
  uint64_t v80 = 0;
  if (e5rt_execution_stream_operation_retain_input_port()) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v80 == 0;
  }
  if (v18)
  {
    v89[0] = 5;
    *(void *)&v89[40] = operator new(0x20uLL);
    *(_OWORD *)&v89[48] = xmmword_21B9A0750;
    strcpy(*(char **)&v89[40], "Unable to retain input port.");
    sub_21B858B90((uint64_t)v91, v89);
  }
  v91[0] = &off_26CB96298;
  v91[1] = MEMORY[0x263F3B808];
  v91[2] = &v80;
  v92 = v91;
  if ((v17 & 1) == 0)
  {
    if (!v13[5]
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1220, (uint64_t)"buffer_itr->second.buffer_obj", 29, (uint64_t)"GetAllocatedBufferForGenericTensor: Allocated buffer has null buffer_obj", 72, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    if (!e5rt_io_port_bind_buffer_object())
    {
      long long v69 = *(_OWORD *)(v13 + 3);
      uint64_t v70 = v13[5];
      LOBYTE(v71[0]) = 0;
      char v73 = 0;
      if (*((unsigned char *)v13 + 176))
      {
        int v72 = -1;
        uint64_t v27 = *((unsigned int *)v13 + 42);
        if (v27 != -1)
        {
          ((void (*)(unsigned char *, void *, uint64_t *))off_26CB954B8[v27])(&v89[40], v71, v13 + 6);
          int v72 = v27;
        }
        char v73 = 1;
      }
      char v74 = 1;
      goto LABEL_127;
    }
    LOBYTE(v75[0]) = 5;
    int v23 = SHIBYTE(v82);
    if (v82 >= 0) {
      size_t v24 = HIBYTE(v82);
    }
    else {
      size_t v24 = (size_t)__p[1];
    }
    unint64_t v25 = v24 + 50;
    if (v24 + 50 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    if (v25 > 0x16)
    {
      uint64_t v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v32 = v25 | 7;
      }
      uint64_t v33 = v32 + 1;
      int v34 = (char *)operator new(v32 + 1);
      *(void *)&v89[8] = v24 + 50;
      *(void *)&v89[16] = v33 | 0x8000000000000000;
      *(void *)v89 = v34;
      qmemcpy(v34, "Unable to bind generic input buffer to input port ", 50);
      char v26 = v34 + 50;
      if (!v24)
      {
LABEL_69:
        v26[v24] = 0;
        sub_21B858B90((uint64_t)&v89[40], v75);
      }
    }
    else
    {
      qmemcpy(v89, "Unable to bind generic input buffer to input port ", 50);
      char v26 = &v89[50];
    }
    if (v23 >= 0) {
      uint64_t v35 = __p;
    }
    else {
      uint64_t v35 = (void **)__p[0];
    }
    memmove(v26, v35, v24);
    goto LABEL_69;
  }
  e5rt_io_port_retain_tensor_desc();
  *(void *)&v89[40] = &unk_26CB95CA8;
  *(void *)&v89[48] = MEMORY[0x263F3B868];
  *(void *)&v89[56] = &v79[80];
  v90 = &v89[40];
  memset(&v79[64], 0, 24);
  e5rt_tensor_desc_get_size();
  if (e5rt_buffer_object_alloc())
  {
    v79[63] = 5;
    int v19 = SHIBYTE(v82);
    if (v82 >= 0) {
      size_t v20 = HIBYTE(v82);
    }
    else {
      size_t v20 = (size_t)__p[1];
    }
    unint64_t v21 = v20 + 40;
    if (v20 + 40 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    if (v21 <= 0x16)
    {
      qmemcpy(v79, "Unable to create buffer for input port: ", 40);
      __int16 v22 = &v79[40];
      goto LABEL_73;
    }
    uint64_t v36 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v36 = v21 | 7;
    }
    *(void *)&v79[8] = v20 + 40;
    *(void *)&v79[16] = (v36 + 1) | 0x8000000000000000;
    *(void *)v79 = operator new(v36 + 1);
    qmemcpy(*(void **)v79, "Unable to create buffer for input port: ", 40);
    __int16 v22 = (unsigned char *)(*(void *)v79 + 40);
    if (v20)
    {
LABEL_73:
      if (v19 >= 0) {
        __int16 v37 = __p;
      }
      else {
        __int16 v37 = (void **)__p[0];
      }
      memmove(v22, v37, v20);
    }
    v22[v20] = 0;
    char v38 = std::string::append((std::string *)v79, " of size ", 9uLL);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    *(void *)&v79[48] = *((void *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)&v79[32] = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    sub_21B84080C((unint64_t *)&v79[64]);
    if ((v78 & 0x80u) == 0) {
      char v40 = v77;
    }
    else {
      char v40 = (void **)v77[0];
    }
    if ((v78 & 0x80u) == 0) {
      std::string::size_type v41 = v78;
    }
    else {
      std::string::size_type v41 = (std::string::size_type)v77[1];
    }
    char v42 = std::string::append((std::string *)&v79[32], (const std::string::value_type *)v40, v41);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    *(void *)&long long v76 = *((void *)&v42->__r_.__value_.__l + 2);
    *(_OWORD *)v75 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    sub_21B858B90((uint64_t)v89, &v79[63]);
  }
  *(void *)v89 = &unk_26CB95D28;
  *(void *)&v89[8] = MEMORY[0x263F3B798];
  *(void *)&v89[16] = &v79[72];
  *(void *)&v89[24] = v89;
  if (e5rt_io_port_bind_buffer_object())
  {
    if (*(void *)&v79[72]) {
      e5rt_buffer_object_release();
    }
    v79[0] = 5;
    int v28 = SHIBYTE(v82);
    if (v82 >= 0) {
      size_t v29 = HIBYTE(v82);
    }
    else {
      size_t v29 = (size_t)__p[1];
    }
    unint64_t v30 = v29 + 50;
    if (v29 + 50 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    if (v30 <= 0x16)
    {
      qmemcpy(&v79[32], "Unable to bind generic input buffer to input port ", 50);
      int v31 = &v79[82];
      goto LABEL_93;
    }
    uint64_t v44 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v44 = v30 | 7;
    }
    *(void *)&v79[40] = v29 + 50;
    *(void *)&v79[48] = (v44 + 1) | 0x8000000000000000;
    *(void *)&v79[32] = operator new(v44 + 1);
    qmemcpy(*(void **)&v79[32], "Unable to bind generic input buffer to input port ", 50);
    int v31 = (unsigned char *)(*(void *)&v79[32] + 50);
    if (v29)
    {
LABEL_93:
      if (v28 >= 0) {
        uint64_t v45 = __p;
      }
      else {
        uint64_t v45 = (void **)__p[0];
      }
      memmove(v31, v45, v29);
    }
    v31[v29] = 0;
    sub_21B858B90((uint64_t)v75, v79);
  }
  *(void *)&long long v84 = &unk_26CB95690;
  *((void *)&v84 + 1) = nullsub_3;
  v86[0] = &v84;
  sub_21B83BF30(&v89[40], &v84);
  if (!v86[0]) {
    sub_21B846100();
  }
  (*(void (**)(void))(*(void *)v86[0] + 48))(v86[0]);
  if ((long long *)v86[0] == &v84)
  {
    (*(void (**)(long long *))(v84 + 32))(&v84);
  }
  else if (v86[0])
  {
    (*(void (**)(void))(*(void *)v86[0] + 40))();
  }
  *(void *)&long long v84 = &unk_26CB95690;
  *((void *)&v84 + 1) = nullsub_3;
  v86[0] = &v84;
  sub_21B83BF30(v89, &v84);
  if (!v86[0]) {
    sub_21B846100();
  }
  (*(void (**)(void))(*(void *)v86[0] + 48))(v86[0]);
  if ((long long *)v86[0] == &v84)
  {
    (*(void (**)(long long *))(v84 + 32))(&v84);
  }
  else if (v86[0])
  {
    (*(void (**)(void))(*(void *)v86[0] + 40))();
  }
  sub_21B842B24();
  LODWORD(v84) = v47;
  *((void *)&v84 + 1) = *(void *)&v79[80];
  uint64_t v85 = *(void *)&v79[72];
  LOBYTE(v86[0]) = 0;
  char v88 = 0;
  v75[0] = &v83;
  int v48 = sub_21B8531F0((uint64_t)a3, &v83, (uint64_t)&unk_21B9A08F1, (void **)v75);
  *(_OWORD *)(v48 + 24) = v84;
  *((void *)v48 + 5) = v85;
  sub_21B847F84((uint64_t)(v48 + 48), (uint64_t)v86);
  long long v69 = v84;
  uint64_t v70 = v85;
  LOBYTE(v71[0]) = 0;
  char v73 = 0;
  if (!v88) {
    goto LABEL_116;
  }
  int v72 = -1;
  int v49 = v87;
  if (v87 == -1)
  {
    char v73 = 1;
LABEL_116:
    char v74 = 1;
    goto LABEL_117;
  }
  ((void (*)(void **, void *, void *))off_26CB955E8[v87])(v75, v71, v86);
  int v72 = v49;
  char v73 = 1;
  char v74 = 1;
  if (v88 && v87 != -1) {
    ((void (*)(void **, void *))off_26CB954A0[v87])(v75, v86);
  }
LABEL_117:
  if (!*(void *)&v89[24]) {
    sub_21B846100();
  }
  (*(void (**)(void))(**(void **)&v89[24] + 48))(*(void *)&v89[24]);
  if (*(unsigned char **)&v89[24] == v89)
  {
    (*(void (**)(unsigned char *))(*(void *)v89 + 32))(v89);
  }
  else if (*(void *)&v89[24])
  {
    (*(void (**)(void))(**(void **)&v89[24] + 40))();
  }
  if (!v90) {
    sub_21B846100();
  }
  (*(void (**)(unsigned char *))(*(void *)v90 + 48))(v90);
  if (v90 == &v89[40])
  {
    (*(void (**)(unsigned char *))(*(void *)&v89[40] + 32))(&v89[40]);
  }
  else if (v90)
  {
    (*(void (**)(void))(*(void *)v90 + 40))();
  }
LABEL_127:
  if (!v92) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v92 + 48))(v92);
  if (v92 == v91)
  {
    (*(void (**)(void *))(v91[0] + 32))(v91);
    if ((SHIBYTE(v82) & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_46:
    operator delete(__p[0]);
    if (v74) {
      goto LABEL_133;
    }
    goto LABEL_140;
  }
  if (v92) {
    (*(void (**)(void))(*v92 + 40))();
  }
  if (SHIBYTE(v82) < 0) {
    goto LABEL_46;
  }
LABEL_132:
  if (v74) {
    goto LABEL_133;
  }
LABEL_140:
  *(void *)a1 = &unk_26CB95650;
  *(unsigned char *)(a1 + 8) = BYTE8(v69);
  uint64_t v57 = v71[0];
  *(void *)(a1 + 16) = v70;
  *(void *)(a1 + 24) = v57;
  if (v57) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  if (v74)
  {
    if (v73 && v72 != -1) {
      ((void (*)(long long *, void *))off_26CB954A0[v72])(&v84, v71);
    }
  }
  else
  {
    (*(void (**)(long long *))v69)(&v69);
  }
}

void sub_21B84282C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B842A94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    nullsub_82(a1 + 80);
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    nullsub_82(a1 + 56);
  }
  return a1;
}

void sub_21B842B24()
{
  v1[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  e5rt_tensor_desc_retain_dtype();
  v1[0] = &unk_26CB95550;
  v1[1] = MEMORY[0x263F3B860];
  v1[2] = &v0;
  v1[3] = v1;
  e5rt_tensor_desc_dtype_get_component_size();
  e5rt_tensor_desc_dtype_get_component_dtype();
  sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1024, (uint64_t)&unk_21B997215, 0, (uint64_t)"Conversions not supported yet", 29, (void (*)(void **))sub_21B984AC4);
  abort();
}

void sub_21B842CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B83804C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B842D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B83804C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B842D28(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B842D40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 144);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB954A0[v2])(&v4, a1 + 24);
    }
    *(_DWORD *)(a1 + 144) = -1;
  }
  return a1;
}

uint64_t sub_21B842DA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v10 = a1[24];
  uint64_t v12 = *(void *)(v10 + 48);
  uint64_t v11 = *(void *)(v10 + 56);
  if (0xCF3CF3CF3CF3CF3DLL * ((v11 - v12) >> 3) != (a2[1] - *a2) >> 7
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1431, (uint64_t)"num_inputs == data.inputs.size()", 32, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4)|| ((unint64_t v14 = sub_21B939C78(a4), v15 = v13, !v14) || !v13)&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1437, (uint64_t)"stream != nullptr && stream_op != nullptr", 41, (uint64_t)"Invalid e5rt objects from pool.", 31, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = &unk_26CB96318;
  v16[1] = sub_21B843F18;
  v16[2] = a4;
  v16[3] = v14;
  long long v51 = v16;
  sub_21B83B1E0(a1[24] + 8, 0, a1 + 13, a1 + 16, (uint64_t)&v43);
  if (v44)
  {
    LOBYTE(__p[0]) = 5;
    char v17 = (const void **)v45;
    int v18 = *(char *)(v45 + 23);
    if (v18 >= 0) {
      size_t v19 = *(unsigned __int8 *)(v45 + 23);
    }
    else {
      size_t v19 = *(void *)(v45 + 8);
    }
    unint64_t v20 = v19 + 66;
    if (v19 + 66 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v20 > 0x16)
    {
      uint64_t v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v27 = v20 | 7;
      }
      *(void *)&v39[8] = v19 + 66;
      *(void *)&v39[16] = (v27 + 1) | 0x8000000000000000;
      *(void *)long long v39 = operator new(v27 + 1);
      qmemcpy(*(void **)v39, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
      unint64_t v21 = (unsigned char *)(*(void *)v39 + 66);
      if (!v19)
      {
LABEL_29:
        v21[v19] = 0;
        sub_21B858B90((uint64_t)&v39[32], __p);
      }
    }
    else
    {
      qmemcpy(v39, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
      unint64_t v21 = &v39[66];
    }
    if (v18 >= 0) {
      int v28 = v17;
    }
    else {
      int v28 = *v17;
    }
    memmove(v21, v28, v19);
    goto LABEL_29;
  }
  if (v11 != v12)
  {
    unint64_t v42 = 0;
    sub_21B91F22C(*a2, (uint64_t)&v47);
    *(_DWORD *)&v39[32] = v49;
    if (sub_21B926F54(&v39[32])
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1457, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      if ((*(_OWORD *)&v39[52] = *(_OWORD *)&v48[4],
            int v40 = *(_DWORD *)&v48[20],
            *(_OWORD *)&v39[32] = v47,
            *(_DWORD *)&v39[48] = *(_DWORD *)v48,
            int v41 = v49,
            sub_21B91D8B8(&v39[32]))
        && sub_21B91D960(&v39[32], 16)
        || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1458, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        *(_DWORD *)&v39[32] = v49;
        sub_21B926FDC((int *)&v39[32]);
        if (v22) {
          sub_21B85AE84((uint64_t)&v39[32]);
        }
        char v38 = 3;
        sub_21B84080C(&v42);
        int v23 = std::string::insert(&v34, 0, "Invalid input: The given view for input ", 0x28uLL);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        unint64_t v25 = std::string::append(&v35, " requires both a color format and type definition in its format flags.", 0x46uLL);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        sub_21B858B90((uint64_t)v39, &v38);
      }
    }
    abort();
  }
  *(void *)&long long v47 = &unk_26CB95690;
  *((void *)&v47 + 1) = nullsub_3;
  *(void *)&v48[8] = &v47;
  sub_21B83BF30(v50, &v47);
  if (!*(void *)&v48[8]) {
    sub_21B846100();
  }
  (*(void (**)(void))(**(void **)&v48[8] + 48))(*(void *)&v48[8]);
  if (*(long long **)&v48[8] == &v47)
  {
    (*(void (**)(long long *))(v47 + 32))(&v47);
  }
  else if (*(void *)&v48[8])
  {
    (*(void (**)(void))(**(void **)&v48[8] + 40))(*(void *)&v48[8]);
  }
  e5rt_execution_stream_encode_operation();
  e5rt_execution_stream_prewire_in_use_allocations();
  sub_21B843F20(a2, &v39[32]);
  long long v47 = *(_OWORD *)&v39[32];
  uint64_t v29 = *(void *)&v39[48];
  memset(&v39[32], 0, 24);
  *(void *)int v48 = v29;
  *(void *)&v48[8] = v14;
  *(void *)&v48[16] = v15;
  sub_21B85B0B0(a3, (uint64_t)&v47, (uint64_t)&v47);
  char v31 = v30;
  if ((v48[7] & 0x80000000) == 0)
  {
    if ((v39[55] & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_40:
    operator delete(*(void **)&v39[32]);
    if (v31) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  operator delete((void *)v47);
  if ((v39[55] & 0x80000000) != 0) {
    goto LABEL_40;
  }
LABEL_37:
  if (v31) {
    goto LABEL_42;
  }
LABEL_41:
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1495, (uint64_t)"output.second", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_42:
  *(void *)a5 = v14;
  *(unsigned char *)(a5 + 32) = 1;
  long long v43 = &unk_26CB95650;
  uint64_t v32 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  nullsub_82(&v43);
  if (!v51) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v51 + 48))(v51);
  uint64_t result = (uint64_t)v51;
  if (v51 == v50) {
    return (*(uint64_t (**)(void *))(v50[0] + 32))(v50);
  }
  if (v51) {
    return (*(uint64_t (**)(void))(*v51 + 40))();
  }
  return result;
}

void sub_21B843DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_21B83D090(&a57);
  sub_21B83804C((void *)(v57 - 128));
  _Unwind_Resume(a1);
}

void sub_21B843F18(void *a1, unint64_t *a2)
{
}

uint64_t sub_21B843F20@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_21B844260((uint64_t)v21);
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v4 >> 7;
    do
    {
      sub_21B91F22C(*a1 + v5, (uint64_t)v17);
      if (sub_21B93635C((uint64_t)v17))
      {
        sub_21B91D558((uint64_t)v17);
        std::ostream::operator<<();
        std::ostream::operator<<();
      }
      if (v20[32])
      {
        nullsub_82(v20);
        uint64_t v8 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        nullsub_82(&v18);
      }
      ++v6;
      v5 += 128;
    }
    while (v7 != v6);
  }
  if ((v29 & 0x10) != 0)
  {
    unint64_t v10 = v28;
    if (v28 < v25)
    {
      unint64_t v28 = v25;
      unint64_t v10 = v25;
    }
    uint64_t v11 = v24;
    size_t v9 = v10 - (void)v24;
    if (v10 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_28;
    }
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_24;
    }
    uint64_t v11 = v22;
    size_t v9 = v23 - (void)v22;
    if ((unint64_t)(v23 - (void)v22) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_28:
    }
      sub_21B836090();
  }
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    unint64_t v14 = operator new(v12 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v13 | 0x8000000000000000;
    *(void *)a2 = v14;
    a2 = v14;
    goto LABEL_23;
  }
  a2[23] = v9;
  if (v9) {
LABEL_23:
  }
    memmove(a2, v11, v9);
LABEL_24:
  a2[v9] = 0;
  v21[0] = *MEMORY[0x263F8C2B8];
  uint64_t v15 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v21[2] = v15;
  v21[3] = MEMORY[0x263F8C318] + 16;
  if (v27 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D495E70](&v30);
}

void sub_21B84422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_21B844544((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B844244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_21B842A94((uint64_t)va);
  sub_21B844544((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B844260(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_21B844510(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B844544(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](a1 + 128);
  return a1;
}

uint64_t sub_21B84467C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 32))(a1, a2, 0, 0);
}

void sub_21B8446A8()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void sub_21B8446F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v3 = a2 + 56;
    nullsub_82(a2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = v3;
    }
    nullsub_82(v5);
  }
}

void sub_21B8447B0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v3 = a2 + 56;
    nullsub_82(a2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = v3;
    }
    nullsub_82(v5);
  }
}

void sub_21B84486C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v3 = a2 + 56;
    nullsub_82(a2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = v3;
    }
    nullsub_82(v5);
  }
}

uint64_t sub_21B844928(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    nullsub_82(a1 + 24);
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    nullsub_82(a1);
  }
  return a1;
}

uint64_t sub_21B8449AC(uint64_t a1)
{
  nullsub_82(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v3 = a1;
  }
  return nullsub_82(v3);
}

void sub_21B844A50(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    uint64_t v7 = *((void *)a3 + 8);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
    }
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    uint64_t v12 = *((void *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 104) = v10;
    *(_WORD *)(a2 + 108) = v11;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(unsigned char *)(a2 + 112) = 1;
  }
}

void sub_21B844B58(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    uint64_t v7 = *((void *)a3 + 8);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
    }
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    uint64_t v12 = *((void *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 104) = v10;
    *(_WORD *)(a2 + 108) = v11;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(unsigned char *)(a2 + 112) = 1;
  }
}

void sub_21B844C60(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    uint64_t v7 = *((void *)a3 + 8);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
    }
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    uint64_t v12 = *((void *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 104) = v10;
    *(_WORD *)(a2 + 108) = v11;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(unsigned char *)(a2 + 112) = 1;
  }
}

void sub_21B844D68(uint64_t a1)
{
  nullsub_82(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B844E00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_21B844E08(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_21B844E10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_21B844E24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B844EB4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*a1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v22 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  e5rt_tensor_desc_get_shape();
  size_t v19 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v18 = 0;
  e5rt_tensor_desc_retain_dtype();
  v23[0] = &unk_26CB95550;
  v23[1] = MEMORY[0x263F3B860];
  v23[2] = &v18;
  long long v24 = v23;
  char v17 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v16 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v15 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836138(v21, v20, v19, 0, 0, (uint64_t)v12);
  long long v9 = v13;
  int v10 = v14;
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C53C(a2, v22, v12, &v9, &unk_21B9B0F6C, v5);
  if (v8)
  {
    nullsub_82(&v7);
    long long v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v24) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v24 + 48))(v24);
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void))(*v24 + 40))();
  }
  return result;
}

void sub_21B8451A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8451C4(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8451D8(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8451EC(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845200(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845214(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B845230@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*a1 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v22 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  e5rt_tensor_desc_get_shape();
  size_t v19 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v18 = 0;
  e5rt_tensor_desc_retain_dtype();
  v23[0] = &unk_26CB95550;
  v23[1] = MEMORY[0x263F3B860];
  v23[2] = &v18;
  long long v24 = v23;
  char v17 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v16 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v15 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836344(v21, v20, v19, 0, 0, (uint64_t)v12);
  long long v9 = v13;
  int v10 = v14;
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C53C(a2, v22, v12, &v9, " ", v5);
  if (v8)
  {
    nullsub_82(&v7);
    long long v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v24) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v24 + 48))(v24);
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void))(*v24 + 40))();
  }
  return result;
}

void sub_21B845528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845544(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845558(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B84556C(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845580(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845594(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8455B0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*a1 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v22 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  e5rt_tensor_desc_get_shape();
  size_t v19 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v18 = 0;
  e5rt_tensor_desc_retain_dtype();
  v23[0] = &unk_26CB95550;
  v23[1] = MEMORY[0x263F3B860];
  v23[2] = &v18;
  long long v24 = v23;
  char v17 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v16 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v15 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836574(v21, v20, v19, 0, 0, (uint64_t)v12);
  long long v9 = v13;
  int v10 = v14;
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C53C(a2, v22, v12, &v9, "@", v5);
  if (v8)
  {
    nullsub_82(&v7);
    long long v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v24) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v24 + 48))(v24);
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void))(*v24 + 40))();
  }
  return result;
}

void sub_21B8458A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8458C4(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8458D8(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8458EC(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845900(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B845914(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B845934()
{
}

__n128 sub_21B845948(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B845994(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8459C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B8459CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B845A3C()
{
  return &unk_26CB955C0;
}

void sub_21B845A48()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void sub_21B845A7C(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 120);
  if (v5 != -1)
  {
    if (!v5)
    {
      long long v6 = *a3;
      long long v7 = a3[1];
      long long v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_21B845DA4(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_26CB954A0[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  long long v9 = *a3;
  long long v10 = a3[1];
  long long v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)uint64_t v4 = v9;
  *(unsigned char *)(v4 + 56) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(v4 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((void *)a3 + 8) = 0;
    *((void *)a3 + 9) = 0;
    long long v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(long long *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(unsigned char *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 0;
}

void sub_21B845B84(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 120);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      long long v6 = *a3;
      long long v7 = a3[1];
      long long v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_21B845DA4(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_26CB954A0[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  long long v9 = *a3;
  long long v10 = a3[1];
  long long v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)uint64_t v4 = v9;
  *(unsigned char *)(v4 + 56) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(v4 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((void *)a3 + 8) = 0;
    *((void *)a3 + 9) = 0;
    long long v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(long long *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(unsigned char *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 1;
}

void sub_21B845C94(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 120);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      long long v6 = *a3;
      long long v7 = a3[1];
      long long v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_21B845DA4(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_26CB954A0[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  long long v9 = *a3;
  long long v10 = a3[1];
  long long v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)uint64_t v4 = v9;
  *(unsigned char *)(v4 + 56) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(v4 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((void *)a3 + 8) = 0;
    *((void *)a3 + 9) = 0;
    long long v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(long long *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(unsigned char *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 2;
}

__n128 sub_21B845DA4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      long long v4 = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      __n128 result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    nullsub_82(a1 + 24);
    long long v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    nullsub_82(a1);
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    *(void *)a1 = &unk_26CB954E0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    __n128 result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
    *(__n128 *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

__n128 sub_21B845F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*(unsigned char *)(a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(unsigned char *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_21B845F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*(unsigned char *)(a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(unsigned char *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_21B845FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*(unsigned char *)(a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(unsigned char *)(a2 + 112) = 1;
  }
  return result;
}

void sub_21B846058()
{
}

void sub_21B846070(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21B8460CC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2643B88B0, MEMORY[0x263F8C068]);
}

void sub_21B8460B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21B8460CC(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void sub_21B846100()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26CB95628;
  __cxa_throw(exception, (struct type_info *)&unk_26CB95600, (void (*)(void *))std::exception::~exception);
}

void sub_21B846150(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x21D495F30);
}

void *sub_21B846188(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *long long v5 = v8;
    long long v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_21B846228(void *a1)
{
  *a1 = &unk_26CB95650;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

void *sub_21B8462D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (long long *)result[2];
  if (*((char *)v2 + 23) < 0) {
    return sub_21B846188((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
  }
  long long v3 = *v2;
  *(void *)(a2 + 16) = *((void *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_21B846300()
{
}

uint64_t sub_21B846318(uint64_t a1, const char **a2, uint64_t *a3)
{
  long long v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  long long v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = a3[1];
  a3[1] = 0;
  uint64_t v12 = a3[2];
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = a3[3];
  *(void *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 8);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    unint64_t v15 = *(void *)(a1 + 32);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(v11 + 8 * v14) = a1 + 40;
    a3[2] = 0;
    a3[3] = 0;
  }
  uint64_t v16 = a3[5];
  a3[5] = 0;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = a3[6];
  a3[6] = 0;
  uint64_t v17 = a3[7];
  *(void *)(a1 + 80) = v17;
  uint64_t v18 = a3[8];
  *(void *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a3 + 18);
  if (v18)
  {
    unint64_t v19 = *(void *)(v17 + 8);
    unint64_t v20 = *(void *)(a1 + 72);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20) {
        v19 %= v20;
      }
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(void *)(v16 + 8 * v19) = a1 + 80;
    a3[7] = 0;
    a3[8] = 0;
  }
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 5);
  a3[10] = 0;
  a3[11] = 0;
  *(void *)(a1 + 120) = a3[12];
  return a1;
}

uint64_t sub_21B8464C4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = *(void **)(a1 + 56);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v3 = *(void **)(a1 + 56);
    if (!v3) {
      goto LABEL_10;
    }
  }
  do
  {
    long long v4 = v3;
    long long v3 = (void *)*v3;
    if (*((unsigned char *)v4 + 176))
    {
      uint64_t v5 = *((unsigned int *)v4 + 42);
      if (v5 != -1) {
        ((void (*)(char *, void *))off_26CB954A0[v5])(&v11, v4 + 6);
      }
    }
    operator delete(v4);
  }
  while (v3);
LABEL_10:
  size_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v6) {
    operator delete(v6);
  }
  size_t v7 = *(void ***)(a1 + 16);
  if (v7)
  {
    do
    {
      uint64_t v10 = (void **)*v7;
      if (*((char *)v7 + 39) < 0) {
        operator delete(v7[2]);
      }
      operator delete(v7);
      size_t v7 = v10;
    }
    while (v10);
  }
  long long v8 = *(void **)a1;
  *(void *)a1 = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

void sub_21B8465EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_21B846300();
  }
  long long v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 24 * a2;
  size_t v6 = (char *)operator new(24 * a2);
  size_t v7 = &v6[v5];
  long long v8 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 3;
  }
  while (v4 != v2);
  char v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      if (*((char *)v2 - 1) < 0) {
        operator delete(*(v2 - 3));
      }
      v2 -= 3;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_21B846734(uint64_t a1)
{
  long long v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_21B84679C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  long long v10 = v8 + 24;
  char v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  unint64_t v14 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    uint64_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_21B846910()
{
}

void *sub_21B846924(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26CB95690;
  result[1] = v3;
  return result;
}

uint64_t sub_21B84696C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CB95690;
  a2[1] = v2;
  return result;
}

uint64_t sub_21B846998(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_21B8469A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021B9A09E0) {
    return a1 + 8;
  }
  if (((v3 & 0x800000021B9A09E0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021B9A09E0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021B9A09E0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *sub_21B846A20()
{
  return &unk_26CB95700;
}

void *sub_21B846A2C(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21B846CB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21B83DE50(a1);
}

void *sub_21B846CC4(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 5);
    if (v7 >= 0x19999999999999ALL) {
      sub_21B846300();
    }
    long long v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[160 * v7];
    a1[1] = sub_21B846E00(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_21B846D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v13[1] = v14;
  uint64_t v16 = *v13;
  if (*v13)
  {
    uint64_t v17 = v13[1];
    uint64_t v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((unsigned char *)v17 - 8))
        {
          uint64_t v19 = *(v17 - 4);
          if (v19 != -1) {
            ((void (*)(char *, _DWORD *))off_26CB954A0[v19])(&a13, v17 - 34);
          }
          *(v17 - 4) = -1;
        }
        v17 -= 40;
      }
      while (v17 != v16);
      uint64_t v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B846E00(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      long long v7 = *v6;
      *(void *)(v4 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v4 = v7;
      *(unsigned char *)(v4 + 24) = 0;
      *(unsigned char *)(v4 + 152) = 0;
      if (*((unsigned char *)v6 + 152))
      {
        *(unsigned char *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 144) = -1;
        uint64_t v8 = *((unsigned int *)v6 + 36);
        uint64_t v9 = v4;
        if (v8 != -1)
        {
          ((void (*)(unsigned char *, uint64_t, char *))off_26CB954B8[v8])(v12, v4 + 24, (char *)v6 + 24);
          *(_DWORD *)(v4 + 144) = v8;
          uint64_t v9 = v11;
        }
        *(unsigned char *)(v4 + 152) = 1;
        uint64_t v4 = v9;
      }
      v4 += 160;
      uint64_t v11 = v4;
      v6 += 10;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_21B846EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v22 = *(unsigned int *)(v19 + 144);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))off_26CB954A0[v22])(&a19, v20);
  }
  *(_DWORD *)(v19 + 144) = -1;
  sub_21B846F3C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_21B846F3C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    for (uint64_t i = *v4; v5 != i; v5 -= 160)
    {
      if (*(unsigned char *)(v5 - 8))
      {
        uint64_t v7 = *(unsigned int *)(v5 - 16);
        if (v7 != -1) {
          ((void (*)(char *, uint64_t))off_26CB954A0[v7])(&v8, v5 - 136);
        }
        *(_DWORD *)(v5 - 16) = -1;
      }
    }
  }
  return a1;
}

uint64_t sub_21B846FE0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 152);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      sub_21B8464C4((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    int64_t v6 = *(void **)(a1 + 112);
    if (v5 != v4)
    {
      do
      {
        if (*(unsigned char *)(v5 - 8))
        {
          uint64_t v8 = *(unsigned int *)(v5 - 16);
          if (v8 != -1) {
            ((void (*)(char *, uint64_t))off_26CB954A0[v8])(&v21, v5 - 136);
          }
          *(_DWORD *)(v5 - 16) = -1;
        }
        v5 -= 160;
      }
      while (v5 != v4);
      int64_t v6 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 120) = v4;
    operator delete(v6);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = *(void **)(a1 + 88);
    if (v10 != v9)
    {
      do
      {
        if (*(unsigned char *)(v10 - 8))
        {
          uint64_t v12 = *(unsigned int *)(v10 - 16);
          if (v12 != -1) {
            ((void (*)(char *, uint64_t))off_26CB954A0[v12])(&v22, v10 - 136);
          }
          *(_DWORD *)(v10 - 16) = -1;
        }
        v10 -= 160;
      }
      while (v10 != v9);
      uint64_t v11 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v9;
    operator delete(v11);
  }
  long long v13 = *(void **)(a1 + 64);
  while (v13)
  {
    uint64_t v19 = v13;
    long long v13 = (void *)*v13;
    if (*((unsigned char *)v19 + 176))
    {
      uint64_t v20 = *((unsigned int *)v19 + 42);
      if (v20 != -1) {
        ((void (*)(char *, void *))off_26CB954A0[v20])(&v23, v19 + 6);
      }
    }
    operator delete(v19);
  }
  unint64_t v14 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v14) {
    operator delete(v14);
  }
  unint64_t v15 = *(void ***)(a1 + 16);
  if (v15)
  {
    do
    {
      uint64_t v18 = (void **)*v15;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      unint64_t v15 = v18;
    }
    while (v18);
  }
  uint64_t v16 = *(void **)a1;
  *(void *)a1 = 0;
  if (v16) {
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_21B8471D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21B847400((void *)(a1 + 40), a2[5], a2[6], 0xCF3CF3CF3CF3CF3DLL * ((a2[6] - a2[5]) >> 3));
  sub_21B847980((void *)(a1 + 64), a2 + 8);
  *(unsigned char *)(a1 + 88) = 0;
  int64_t v6 = (char *)(a1 + 88);
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    *(void *)int64_t v6 = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    sub_21B847B14(v6, a2[11], a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_21B8472D0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 112)) {
    sub_21B984FF0((void **)(v1 + 88), v1);
  }
  sub_21B847320(v4);
  sub_21B84739C(v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void **sub_21B847320(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((unsigned char *)v3 - 8) && *((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_21B84739C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 168;
        sub_21B847844(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_21B847400(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x186186186186187) {
      sub_21B846300();
    }
    __n128 result = operator new(168 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[21 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_21B847590((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_21B8474C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21B8474D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 168)
    sub_21B847844(v10 - 168 + v11);
  *(void *)(v9 + 8) = v10;
  sub_21B847508(&a9);
  _Unwind_Resume(a1);
}

void ***sub_21B847508(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 168;
          sub_21B847844(v4);
        }
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_21B847590(char *__dst, long long *a2)
{
  *std::string __dst = 0;
  __dst[24] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)std::string __dst = v4;
    }
    __dst[24] = 1;
  }
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[4];
  int v8 = *((_DWORD *)a2 + 20);
  __dst[88] = 0;
  *((_DWORD *)__dst + 20) = v8;
  *((_OWORD *)__dst + 4) = v7;
  *((_OWORD *)__dst + 3) = v6;
  *((_OWORD *)__dst + 2) = v5;
  __dst[120] = 0;
  if (*((unsigned char *)a2 + 120))
  {
    uint64_t v9 = *((void *)a2 + 14);
    if (v9)
    {
      if ((long long *)v9 == (long long *)((char *)a2 + 88))
      {
        *((void *)__dst + 14) = __dst + 88;
        (*(void (**)(void, char *))(**((void **)a2 + 14) + 24))(*((void *)a2 + 14), __dst + 88);
        goto LABEL_12;
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
    *((void *)__dst + 14) = v9;
LABEL_12:
    __dst[120] = 1;
  }
  __dst[128] = 0;
  __dst[160] = 0;
  if (*((unsigned char *)a2 + 160))
  {
    uint64_t v10 = *((void *)a2 + 19);
    if (v10)
    {
      if ((long long *)v10 == a2 + 8)
      {
        *((void *)__dst + 19) = __dst + 128;
        (*(void (**)(void))(**((void **)a2 + 19) + 24))(*((void *)a2 + 19));
        goto LABEL_19;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
    *((void *)__dst + 19) = v10;
LABEL_19:
    __dst[160] = 1;
  }
  return __dst;
}

void sub_21B847738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 + 24))
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8477AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a1)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void sub_21B847844(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v2 = a1 + 128;
    uint64_t v3 = *(void *)(a1 + 152);
    if (v3 == a1 + 128)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 128);
      if (!*(unsigned char *)(a1 + 120)) {
        goto LABEL_11;
      }
      goto LABEL_6;
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  if (!*(unsigned char *)(a1 + 120)) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 == a1 + 88)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
    if (!*(unsigned char *)(a1 + 24)) {
      return;
    }
    goto LABEL_12;
  }
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if (!*(unsigned char *)(a1 + 24)) {
      return;
    }
    goto LABEL_12;
  }
LABEL_11:
  if (!*(unsigned char *)(a1 + 24)) {
    return;
  }
LABEL_12:
  if (*(char *)(a1 + 23) < 0)
  {
    long long v5 = *(void **)a1;
    operator delete(v5);
  }
}

void *sub_21B847980(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      sub_21B846300();
    }
    long long v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_21B847A3C(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_21B847A10(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_21B985170((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B847A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      uint64_t v10 = (long long *)(a2 + v7);
      *(unsigned char *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 24) = 0;
      if (*(unsigned char *)(a2 + v7 + 24))
      {
        if (*((char *)v10 + 23) < 0)
        {
          sub_21B846188((unsigned char *)(a4 + v7), *(void **)(a2 + v7), *(void *)(a2 + v7 + 8));
        }
        else
        {
          long long v8 = *v10;
          *(void *)(v9 + 16) = *((void *)v10 + 2);
          *(_OWORD *)uint64_t v9 = v8;
        }
        *(unsigned char *)(v9 + 24) = 1;
      }
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_21B847AE8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + v2 + 24)) {
    sub_21B985240(v1 + v2);
  }
  sub_21B9851EC(v1 + v2, v1);
  _Unwind_Resume(a1);
}

char *sub_21B847B14(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21B846300();
    }
    __n128 result = (char *)operator new(24 * a4);
    long long v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          __n128 result = (char *)sub_21B846188(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)__n128 result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_21B847BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21B847C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_21B847C48(&a9);
  _Unwind_Resume(a1);
}

void ***sub_21B847C48(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_21B847CE0(uint64_t *result, long long *a2, long long *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = result[1];
      uint64_t v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          if (*(unsigned char *)(v11 - 8))
          {
            uint64_t v13 = *(unsigned int *)(v11 - 16);
            if (v13 != -1) {
              ((void (*)(char *, uint64_t))off_26CB954A0[v13])(&v26, v11 - 136);
            }
            *(_DWORD *)(v11 - 16) = -1;
          }
          v11 -= 160;
        }
        while (v11 != v10);
        uint64_t v12 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999) {
      goto LABEL_40;
    }
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= __sz) {
      uint64_t v20 = __sz;
    }
    unint64_t v21 = v19 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v20;
    if (v21 > 0x199999999999999) {
LABEL_40:
    }
      sub_21B846300();
    uint64_t v22 = 160 * v21;
    char v23 = (char *)operator new(160 * v21);
    *(void *)uint64_t v7 = v23;
    *(void *)(v7 + 8) = v23;
    *(void *)(v7 + 16) = &v23[v22];
    __n128 result = (uint64_t *)sub_21B846E00(v9, v6, a3, (uint64_t)v23);
LABEL_30:
    *(void *)(v7 + 8) = result;
    return result;
  }
  uint64_t v14 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 5) < __sz)
  {
    unint64_t v15 = &a2[2 * ((v14 - v10) >> 5)];
    if (v14 != v10)
    {
      do
      {
        long long v16 = *v6;
        *(void *)(v10 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v10 = v16;
        sub_21B847F84(v10 + 24, (uint64_t)v6 + 24);
        v6 += 10;
        v10 += 160;
      }
      while (v6 != v15);
      uint64_t v10 = *(void *)(v7 + 8);
    }
    __n128 result = (uint64_t *)sub_21B846E00(v9, v15, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    uint64_t v17 = *result;
    do
    {
      long long v18 = *v6;
      *(void *)(v10 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v10 = v18;
      __n128 result = (uint64_t *)sub_21B847F84(v10 + 24, (uint64_t)v6 + 24);
      v17 += 160;
      v6 += 10;
      v10 += 160;
    }
    while (v6 != a3);
    uint64_t v14 = *(void *)(v7 + 8);
    if (v14 == v17) {
      goto LABEL_38;
    }
    do
    {
LABEL_35:
      if (*(unsigned char *)(v14 - 8))
      {
        uint64_t v24 = *(unsigned int *)(v14 - 16);
        if (v24 != -1) {
          __n128 result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_26CB954A0[v24])(&v25, v14 - 136);
        }
        *(_DWORD *)(v14 - 16) = -1;
      }
      v14 -= 160;
    }
    while (v14 != v17);
    goto LABEL_38;
  }
  uint64_t v17 = *result;
  if (v14 != v10) {
    goto LABEL_35;
  }
LABEL_38:
  *(void *)(v7 + 8) = v17;
  return result;
}

void sub_21B847F6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21B847F74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21B847F84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(unsigned char *)(result + 128)) {
      return result;
    }
    uint64_t v3 = *(unsigned int *)(result + 120);
    uint64_t v4 = *(unsigned int *)(a2 + 120);
    if (v3 != -1)
    {
      if (v4 == -1)
      {
        __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CB954A0[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      uint64_t v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26CB95720[v4])(&v7, result, a2);
    }
    if (v4 != -1) {
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(result + 128))
  {
    uint64_t v5 = *(unsigned int *)(result + 120);
    if (v5 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CB954A0[v5])(&v9, result, a2);
    }
    *(_DWORD *)(v2 + 120) = -1;
    *(unsigned char *)(v2 + 128) = 0;
  }
  else
  {
    *(unsigned char *)__n128 result = 0;
    *(_DWORD *)(result + 120) = -1;
    uint64_t v6 = *(unsigned int *)(a2 + 120);
    if (v6 != -1)
    {
      __n128 result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_26CB954B8[v6])(v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(unsigned char *)(v2 + 128) = 1;
  }
  return result;
}

void sub_21B8480C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 120);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_26CB954A0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B848104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 120))
  {
    v6[0] = *(void *)a1;
    v6[1] = a3;
    sub_21B84825C(v6);
  }
  else
  {
    long long v3 = *(_OWORD *)a3;
    long long v4 = *(_OWORD *)(a3 + 16);
    long long v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_21B8484B0(a2 + 56, a3 + 56);
  }
}

void sub_21B848174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 120) == 1)
  {
    long long v3 = *(_OWORD *)a3;
    long long v4 = *(_OWORD *)(a3 + 16);
    long long v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_21B8484B0(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(void *)a1;
    v6[1] = a3;
    sub_21B8486B4(v6);
  }
}

void sub_21B8481E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 120) == 2)
  {
    long long v3 = *(_OWORD *)a3;
    long long v4 = *(_OWORD *)(a3 + 16);
    long long v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_21B8484B0(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(void *)a1;
    v6[1] = a3;
    sub_21B84890C(v6);
  }
}

void sub_21B84825C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (long long *)a1[1];
  int v15 = *((_DWORD *)v1 + 12);
  long long v13 = v1[1];
  long long v14 = v1[2];
  long long v12 = *v1;
  LOBYTE(v16) = 0;
  unsigned __int8 v19 = 0;
  if (!*((unsigned char *)v1 + 112))
  {
    int v8 = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
LABEL_10:
    ((void (*)(char *, uint64_t))off_26CB954A0[v9])(&v20, v2);
    int v8 = v19;
    goto LABEL_11;
  }
  long long v16 = &unk_26CB954E0;
  uint64_t v3 = *((void *)v1 + 8);
  long long v4 = (std::__shared_weak_count *)*((void *)v1 + 9);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
  }
  *(void *)&long long v17 = v3;
  *((void *)&v17 + 1) = v4;
  int v10 = *((_DWORD *)v1 + 22);
  *(void *)long long v18 = *((void *)v1 + 10);
  *(_DWORD *)&v18[8] = v10;
  *(void *)&v18[16] = v5;
  *(_DWORD *)&v18[24] = v6;
  *(_WORD *)&v18[28] = v7;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v8 = 1;
    unsigned __int8 v19 = 1;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  int v8 = 1;
  unsigned __int8 v19 = 1;
  uint64_t v9 = *(unsigned int *)(v2 + 120);
  if (v9 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(v2 + 48) = v15;
  *(_OWORD *)(v2 + 16) = v13;
  *(_OWORD *)(v2 + 32) = v14;
  *(_OWORD *)uint64_t v2 = v12;
  *(unsigned char *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  if (v8)
  {
    *(void *)(v2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v2 + 64) = v17;
    long long v17 = 0uLL;
    long long v11 = *(_OWORD *)&v18[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v18;
    *(_OWORD *)(v2 + 94) = v11;
    *(unsigned char *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 0;
    nullsub_82(v18);
    if (*((void *)&v17 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v17 + 1) + 16))(*((void *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    nullsub_82(&v16);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 0;
  }
}

void sub_21B8484B0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v4 = *(void *)(a2 + 16);
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      int v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v4;
      if (v6)
      {
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      long long v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    nullsub_82(a1 + 24);
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    nullsub_82(a1);
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    *(void *)a1 = &unk_26CB954E0;
    uint64_t v9 = *(void *)(a2 + 8);
    int v10 = *(std::__shared_weak_count **)(a2 + 16);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = *(void *)(a2 + 40);
      int v12 = *(_DWORD *)(a2 + 48);
      __int16 v13 = *(_WORD *)(a2 + 52);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 40);
      int v12 = *(_DWORD *)(a2 + 48);
      __int16 v13 = *(_WORD *)(a2 + 52);
    }
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v10;
    uint64_t v14 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 40) = v11;
    *(_DWORD *)(a1 + 48) = v12;
    *(_WORD *)(a1 + 52) = v13;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *(unsigned char *)(a1 + 56) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
}

void sub_21B8486B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (long long *)a1[1];
  int v15 = *((_DWORD *)v1 + 12);
  long long v13 = v1[1];
  long long v14 = v1[2];
  long long v12 = *v1;
  LOBYTE(v16) = 0;
  unsigned __int8 v19 = 0;
  if (!*((unsigned char *)v1 + 112))
  {
    int v8 = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
LABEL_10:
    ((void (*)(char *, uint64_t))off_26CB954A0[v9])(&v20, v2);
    int v8 = v19;
    goto LABEL_11;
  }
  long long v16 = &unk_26CB954E0;
  uint64_t v3 = *((void *)v1 + 8);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 9);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
  }
  *(void *)&long long v17 = v3;
  *((void *)&v17 + 1) = v4;
  int v10 = *((_DWORD *)v1 + 22);
  *(void *)long long v18 = *((void *)v1 + 10);
  *(_DWORD *)&v18[8] = v10;
  *(void *)&v18[16] = v5;
  *(_DWORD *)&v18[24] = v6;
  *(_WORD *)&v18[28] = v7;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v8 = 1;
    unsigned __int8 v19 = 1;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  int v8 = 1;
  unsigned __int8 v19 = 1;
  uint64_t v9 = *(unsigned int *)(v2 + 120);
  if (v9 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(v2 + 48) = v15;
  *(_OWORD *)(v2 + 16) = v13;
  *(_OWORD *)(v2 + 32) = v14;
  *(_OWORD *)uint64_t v2 = v12;
  *(unsigned char *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  if (v8)
  {
    *(void *)(v2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v2 + 64) = v17;
    long long v17 = 0uLL;
    long long v11 = *(_OWORD *)&v18[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v18;
    *(_OWORD *)(v2 + 94) = v11;
    *(unsigned char *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 1;
    nullsub_82(v18);
    if (*((void *)&v17 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v17 + 1) + 16))(*((void *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    nullsub_82(&v16);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 1;
  }
}

void sub_21B84890C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (long long *)a1[1];
  int v15 = *((_DWORD *)v1 + 12);
  long long v13 = v1[1];
  long long v14 = v1[2];
  long long v12 = *v1;
  LOBYTE(v16) = 0;
  unsigned __int8 v19 = 0;
  if (!*((unsigned char *)v1 + 112))
  {
    int v8 = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
LABEL_10:
    ((void (*)(char *, uint64_t))off_26CB954A0[v9])(&v20, v2);
    int v8 = v19;
    goto LABEL_11;
  }
  long long v16 = &unk_26CB954E0;
  uint64_t v3 = *((void *)v1 + 8);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 9);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 12);
    int v6 = *((_DWORD *)v1 + 26);
    __int16 v7 = *((_WORD *)v1 + 54);
  }
  *(void *)&long long v17 = v3;
  *((void *)&v17 + 1) = v4;
  int v10 = *((_DWORD *)v1 + 22);
  *(void *)long long v18 = *((void *)v1 + 10);
  *(_DWORD *)&v18[8] = v10;
  *(void *)&v18[16] = v5;
  *(_DWORD *)&v18[24] = v6;
  *(_WORD *)&v18[28] = v7;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v8 = 1;
    unsigned __int8 v19 = 1;
    uint64_t v9 = *(unsigned int *)(v2 + 120);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  int v8 = 1;
  unsigned __int8 v19 = 1;
  uint64_t v9 = *(unsigned int *)(v2 + 120);
  if (v9 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(v2 + 48) = v15;
  *(_OWORD *)(v2 + 16) = v13;
  *(_OWORD *)(v2 + 32) = v14;
  *(_OWORD *)uint64_t v2 = v12;
  *(unsigned char *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  if (v8)
  {
    *(void *)(v2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(v2 + 64) = v17;
    long long v17 = 0uLL;
    long long v11 = *(_OWORD *)&v18[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v18;
    *(_OWORD *)(v2 + 94) = v11;
    *(unsigned char *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 2;
    nullsub_82(v18);
    if (*((void *)&v17 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v17 + 1) + 16))(*((void *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    nullsub_82(&v16);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 2;
  }
}

uint64_t sub_21B848B68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 96);
      uint64_t v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 88);
      }
      *(void *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    __int16 v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        if (*(unsigned char *)(v6 - 8) && *(char *)(v6 - 9) < 0) {
          operator delete(*(void **)(v6 - 32));
        }
        v6 -= 32;
      }
      while (v6 != v5);
      __int16 v7 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = *(void **)(a1 + 40);
    if (v9 != v8)
    {
      do
      {
        v9 -= 168;
        sub_21B847844(v9);
      }
      while (v9 != v8);
      int v10 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v8;
    operator delete(v10);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_21B848C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_21B848DB4(&v5, v3);
}

void sub_21B848DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B848DB4(void *a1, CFTypeRef cf)
{
  if (cf) {
    j__CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_21B848E28(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    j__CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_21B848E40(_Unwind_Exception *a1)
{
}

void sub_21B848E58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B848E90(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    j__CFRelease(v1);
  }
}

uint64_t sub_21B848EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_21B848F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21B85A394(a1, a2);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  sub_21B848FF8(v4 + 48, a2 + 48);
  sub_21B846CC4((void *)(a1 + 88), (long long **)(a2 + 88));
  sub_21B846CC4((void *)(a1 + 112), (long long **)(a2 + 112));
  sub_21B84983C(a1 + 136, a2 + 136);
  return a1;
}

void sub_21B848FA8(_Unwind_Exception *a1)
{
  sub_21B83C388(v4);
  sub_21B83C388(v3);
  sub_21B83C434(v2);
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

void sub_21B848FE4(_Unwind_Exception *a1)
{
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B848FF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_21B8491D4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_21B849384(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_21B849114(_Unwind_Exception *a1)
{
  sub_21B84913C(v1);
  _Unwind_Resume(a1);
}

void sub_21B849128(_Unwind_Exception *a1)
{
  sub_21B84913C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B84913C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    unint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    if (*((unsigned char *)v3 + 176))
    {
      uint64_t v4 = *((unsigned int *)v3 + 42);
      if (v4 != -1) {
        ((void (*)(char *, void *))off_26CB954A0[v4])(&v7, v3 + 6);
      }
    }
    operator delete(v3);
  }
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_21B8491D4(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    int v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_21B845A48();
  }
  uint64_t v4 = operator new(8 * a2);
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  char v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        long long v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          char v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *char v7 = *v12;
          uint64_t v14 = 8 * v13;
          *long long v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          char v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    long long v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *char v7 = *v16;
          uint64_t v17 = 8 * v18;
          *long long v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          long long v16 = v7;
LABEL_25:
          char v7 = v16;
          long long v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          char v7 = v16;
          long long v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void *sub_21B849384(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      __n128 result = (void *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5) {
                return result;
              }
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            __n128 result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_21B8496B0(a1, *a2, a3, (uint64_t)&v25);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v23 & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v23 & v5));
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *char v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      unint64_t v24 = *(void *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6) {
          v24 %= v6;
        }
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *char v25 = *v14;
  *uint64_t v14 = v25;
LABEL_61:
  __n128 result = v25;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_21B84969C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8497C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_21B8496B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __n128 result = (char *)operator new(0xB8uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)__n128 result = 0;
  *((void *)result + 1) = a2;
  *((void *)result + 2) = *(void *)a3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
  *((void *)result + 5) = *(void *)(a3 + 24);
  result[48] = 0;
  result[176] = 0;
  if (*(unsigned char *)(a3 + 160))
  {
    unint64_t v9 = result;
    result[48] = 0;
    *((_DWORD *)result + 42) = -1;
    uint64_t v10 = *(unsigned int *)(a3 + 152);
    if (v10 != -1)
    {
      __n128 result = (char *)((uint64_t (*)(unsigned char *, char *, uint64_t))off_26CB954B8[v10])(v11, result + 48, a3 + 32);
      *((_DWORD *)v9 + 42) = v10;
    }
    v9[176] = 1;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21B849780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v17 = *(unsigned int *)(v14 + 168);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26CB954A0[v17])(&a13, v15);
  }
  *(_DWORD *)(v14 + 168) = -1;
  sub_21B8497C4(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B8497C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(unsigned char *)(v2 + 176))
      {
        uint64_t v3 = *(unsigned int *)(v2 + 168);
        if (v3 != -1) {
          ((void (*)(char *, uint64_t))off_26CB954A0[v3])(&v5, v2 + 48);
        }
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_21B84983C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_21B8491D4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_21B849980(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_21B849958(_Unwind_Exception *a1)
{
  sub_21B83D148(v1);
  _Unwind_Resume(a1);
}

void sub_21B84996C(_Unwind_Exception *a1)
{
  sub_21B83D148(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B849980(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21B849E2C((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    float v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  *char v25 = 0;
  v25[1] = v10;
  sub_21B84A278(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        int v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      unint64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      int v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *int v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  unint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  int v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *int v29 = *v28;
  *unint64_t v28 = v41[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_21B849DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B849DD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B849DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B849DD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B849DD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_21B8464C4(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_21B849E2C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      int v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void *sub_21B84A278(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_21B84A364((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  sub_21B848FF8((uint64_t)(__dst + 8), (uint64_t)(a2 + 4));
  uint64_t v5 = *((void *)a2 + 14);
  __dst[13] = *((void *)a2 + 13);
  __dst[14] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __dst[15] = *((void *)a2 + 15);
  return __dst;
}

void sub_21B84A30C(_Unwind_Exception *exception_object)
{
  long long v4 = *(void ***)(v1 + 40);
  if (v4) {
    sub_21B985254(v4);
  }
  uint64_t v5 = *v2;
  *uint64_t v2 = 0;
  if (v5)
  {
    operator delete(v5);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B84A364(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_21B8491D4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_21B84A4A8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_21B84A480(_Unwind_Exception *a1)
{
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

void sub_21B84A494(_Unwind_Exception *a1)
{
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B84A4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21B849E2C((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21B846188(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_21B84A8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B84A904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B84A91C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_21B84A96C(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x222222222222223) {
    sub_21B846300();
  }
  long long v4 = a1[1];
  uint64_t v5 = 120 * a2;
  BOOL v6 = (char *)operator new(120 * a2);
  unint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[120 * ((v4 - v2) / 120)];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9];
    unint64_t v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 120];
    long long v13 = *(_OWORD *)&v4[v9 - 104];
    long long v14 = *(_OWORD *)&v4[v9 - 88];
    *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
    *(_OWORD *)(v10 - 88) = v14;
    *(_OWORD *)(v10 - 104) = v13;
    *(_OWORD *)(v10 - 120) = v12;
    *(v10 - 64) = 0;
    *(v10 - 8) = 0;
    if (v4[v9 - 8])
    {
      *((void *)v10 - 8) = &unk_26CB954E0;
      *(_OWORD *)(v10 - 56) = *(_OWORD *)(v11 - 56);
      *((void *)v11 - 7) = 0;
      *((void *)v11 - 6) = 0;
      long long v15 = *(_OWORD *)(v11 - 40);
      *(_OWORD *)(v10 - 26) = *(_OWORD *)(v11 - 26);
      *(_OWORD *)(v10 - 40) = v15;
      *(v10 - 8) = 1;
    }
    v9 -= 120;
  }
  while (&v4[v9] != v2);
  uint64_t v16 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v16)
  {
    do
    {
      if (*(v2 - 8))
      {
        nullsub_82(v2 - 40);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v2 - 6);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        nullsub_82(v2 - 64);
      }
      v2 -= 120;
    }
    while (v2 != v16);
    uint64_t v2 = v16;
  }
  if (v2)
  {
LABEL_18:
    operator delete(v2);
  }
}

char *sub_21B84AB7C(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  long long v4 = a1[1];
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222) {
    sub_21B846300();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3) >= 0x111111111111111) {
    unint64_t v8 = 0x222222222222222;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x222222222222222) {
      sub_21B845A48();
    }
    uint64_t v9 = (char *)operator new(120 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[120 * v5];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 + 48);
  v10[56] = 0;
  v10[112] = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    *((void *)v10 + 7) = &unk_26CB954E0;
    long long v12 = &v9[120 * v5];
    long long v13 = *(_OWORD *)(a2 + 64);
    long long v14 = *(_OWORD *)(a2 + 80);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *((_OWORD *)v12 + 4) = v13;
    *((_OWORD *)v12 + 5) = v14;
    *(_OWORD *)(v12 + 94) = *(_OWORD *)(a2 + 94);
    v10[112] = 1;
    unint64_t v3 = *a1;
    long long v4 = a1[1];
  }
  long long v15 = &v9[120 * v8];
  uint64_t v16 = v10 + 120;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3) {
      return v16;
    }
    goto LABEL_28;
  }
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = &v10[v17];
    uint64_t v19 = &v4[v17];
    long long v20 = *(_OWORD *)&v4[v17 - 120];
    long long v21 = *(_OWORD *)&v4[v17 - 104];
    long long v22 = *(_OWORD *)&v4[v17 - 88];
    *((_DWORD *)v18 - 18) = *(_DWORD *)&v4[v17 - 72];
    *(_OWORD *)(v18 - 88) = v22;
    *(_OWORD *)(v18 - 104) = v21;
    *(_OWORD *)(v18 - 120) = v20;
    *(v18 - 64) = 0;
    *(v18 - 8) = 0;
    if (v4[v17 - 8])
    {
      *((void *)v18 - 8) = &unk_26CB954E0;
      *(_OWORD *)(v18 - 56) = *(_OWORD *)(v19 - 56);
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      long long v23 = *(_OWORD *)(v19 - 40);
      *(_OWORD *)(v18 - 26) = *(_OWORD *)(v19 - 26);
      *(_OWORD *)(v18 - 40) = v23;
      *(v18 - 8) = 1;
    }
    v17 -= 120;
  }
  while (&v4[v17] != v3);
  uint64_t v24 = *a1;
  unint64_t v3 = a1[1];
  *a1 = &v10[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v3 != v24)
  {
    do
    {
      if (*(v3 - 8))
      {
        nullsub_82(v3 - 40);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)v3 - 6);
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        nullsub_82(v3 - 64);
      }
      v3 -= 120;
    }
    while (v3 != v24);
    unint64_t v3 = v24;
  }
  if (v3) {
LABEL_28:
  }
    operator delete(v3);
  return v16;
}

char **sub_21B84AE14(char **a1)
{
  if (*((unsigned char *)a1 + 24))
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      unint64_t v3 = a1[1];
      long long v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          if (*(v3 - 8))
          {
            nullsub_82(v3 - 40);
            unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 6);
            if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            nullsub_82(v3 - 64);
          }
          v3 -= 120;
        }
        while (v3 != v2);
        long long v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_21B84AEE8(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 7)
  {
    if (a2 >> 57) {
      sub_21B846300();
    }
    long long v4 = a1[1];
    unint64_t v5 = a2 << 7;
    unint64_t v6 = (char *)operator new(a2 << 7);
    unint64_t v7 = &v6[v5];
    unint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2) {
LABEL_15:
      }
        operator delete(v2);
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        v8[v9 - 128] = 0;
        *(_DWORD *)&v8[v9 - 8] = -1;
        uint64_t v10 = *(unsigned int *)&v4[v9 - 8];
        if (v10 != -1)
        {
          ((void (*)(char *, char *, char *))off_26CB955E8[v10])(&v14, &v8[v9 - 128], &v4[v9 - 128]);
          *(_DWORD *)&v8[v9 - 8] = v10;
        }
        v9 -= 128;
      }
      while (&v4[v9] != v2);
      long long v11 = *a1;
      uint64_t v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          long long v12 = v2 - 128;
          uint64_t v13 = *((unsigned int *)v2 - 2);
          if (v13 != -1) {
            ((void (*)(char *, char *))off_26CB954A0[v13])(&v15, v2 - 128);
          }
          *((_DWORD *)v2 - 2) = -1;
          v2 -= 128;
        }
        while (v12 != v11);
        uint64_t v2 = v11;
      }
      if (v2) {
        goto LABEL_15;
      }
    }
  }
}

char *sub_21B84B054(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  long long v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 7;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57) {
    sub_21B846300();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 6 > v6) {
    unint64_t v6 = v8 >> 6;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 57) {
      sub_21B845A48();
    }
    uint64_t v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[128 * v5];
  *long long v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_26CB955E8[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    unint64_t v3 = *a1;
    long long v4 = a1[1];
  }
  uint64_t v13 = &v10[128 * v9];
  char v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_25;
  }
  uint64_t v15 = 0;
  do
  {
    v11[v15 - 128] = 0;
    *(_DWORD *)&v11[v15 - 8] = -1;
    uint64_t v16 = *(unsigned int *)&v4[v15 - 8];
    if (v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_26CB955E8[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
      *(_DWORD *)&v11[v15 - 8] = v16;
    }
    v15 -= 128;
  }
  while (&v4[v15] != v3);
  uint64_t v17 = *a1;
  unint64_t v3 = a1[1];
  char v14 = v11 + 128;
  *a1 = &v11[v15];
  a1[1] = v11 + 128;
  a1[2] = v13;
  if (v3 != v17)
  {
    do
    {
      uint64_t v18 = v3 - 128;
      uint64_t v19 = *((unsigned int *)v3 - 2);
      if (v19 != -1) {
        ((void (*)(char *, char *))off_26CB954A0[v19])(&v23, v3 - 128);
      }
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 128;
    }
    while (v18 != v17);
    unint64_t v3 = v17;
  }
  if (v3) {
LABEL_25:
  }
    operator delete(v3);
  return v14;
}

void sub_21B84B240(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 112))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    LOBYTE(v15) = 0;
    char v18 = 0;
    goto LABEL_19;
  }
  long long v11 = &unk_26CB95798;
  sub_21B84C04C(a1 + 56, (uint64_t)&v12);
  uint64_t v15 = &unk_26CB95798;
  long long v3 = v12;
  long long v12 = 0uLL;
  long long v16 = v3;
  v17[0] = v13[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v13 + 10);
  char v18 = 1;
  nullsub_82(&v11);
  if (!v18)
  {
LABEL_19:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    goto LABEL_27;
  }
  if (sub_21B84EAFC((uint64_t)&v15))
  {
    uint64_t v19 = &unk_26CB95940;
    sub_21B84EE4C((uint64_t)&v15, (uint64_t)&v20);
    long long v11 = &unk_26CB95940;
    long long v4 = v20;
    long long v20 = 0uLL;
    long long v12 = v4;
    v13[0] = v21[0];
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v21 + 9);
    char v14 = 1;
    nullsub_82(&v19);
    if (v14)
    {
      long long v5 = v12;
      if (*((void *)&v12 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v5 + 1) + 16))(*((void *)&v5 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
        }
      }
      sub_21B865538(v5, &v19);
      unint64_t v6 = (__CVBuffer *)sub_21B8A2FBC((uint64_t)&v19);
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v6);
      sub_21B8A2C8C(&v19);
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      if (IOSurface)
      {
        if (!v14) {
          goto LABEL_27;
        }
        *(void *)a2 = &unk_26CB95940;
        long long v8 = v12;
        if (*((void *)&v12 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
          *(_OWORD *)(a2 + 24) = v13[0];
          *(void *)(a2 + 40) = *(void *)&v13[1];
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
          *(_OWORD *)(a2 + 8) = v8;
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v8 + 1) + 16))(*((void *)&v8 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
          }
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v8 + 1) + 16))(*((void *)&v8 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
          }
        }
        else
        {
          *(_OWORD *)(a2 + 8) = (unint64_t)v12;
          *(_OWORD *)(a2 + 24) = v13[0];
          *(void *)(a2 + 40) = *(void *)&v13[1];
        }
        *(unsigned char *)(a2 + 56) = 1;
        if (!v14) {
          goto LABEL_27;
        }
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    char v14 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
LABEL_22:
  if (v14)
  {
LABEL_23:
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    nullsub_82(&v11);
  }
LABEL_27:
  if (v18)
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (*((void *)&v16 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    nullsub_82(&v15);
  }
}

void sub_21B84B5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_21B84B910((uint64_t)va);
  sub_21B84B910((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21B84B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B84B910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B84B654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nullsub_82(va);
  _Unwind_Resume(a1);
}

void sub_21B84B668(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  __p[4] = 0;
  e5rt_surface_object_create_from_iosurface();
  LOBYTE(__p[0]) = 5;
  uint64_t v3 = operator new(0x30uLL);
  long long v4 = xmmword_21B9A0770;
  strcpy((char *)v3, "Unable to create surface object from IOSurface");
  sub_21B858B90(a1, __p);
}

void sub_21B84B89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_21B83804C(&a17);
    _Unwind_Resume(a1);
  }
  sub_21B83804C(&a17);
  _Unwind_Resume(a1);
}

void sub_21B84B8F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B84B910(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    nullsub_82(a1);
  }
  return a1;
}

void sub_21B84B98C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 112))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 5)
  {
    LOBYTE(v19) = 0;
    char v25 = 0;
    goto LABEL_19;
  }
  long long v12 = &unk_26CB95AB8;
  sub_21B84FD5C(a1 + 56, (uint64_t)&v13);
  uint64_t v19 = &unk_26CB95AB8;
  long long v3 = v13;
  long long v13 = 0uLL;
  long long v20 = v3;
  long long v21 = v14;
  long long v22 = v15;
  long long v23 = v16;
  __int16 v24 = v17;
  char v25 = 1;
  nullsub_82(&v12);
  if (!v25)
  {
LABEL_19:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    goto LABEL_27;
  }
  if (sub_21B8504DC((uint64_t)&v19))
  {
    uint64_t v26 = &unk_26CB95BB0;
    sub_21B85082C((uint64_t)&v19, (uint64_t)v27);
    long long v13 = v27[0];
    long long v14 = v27[1];
    long long v15 = v27[2];
    long long v12 = &unk_26CB95BB0;
    v27[0] = 0uLL;
    long long v16 = v27[3];
    LOBYTE(v17) = v28;
    char v18 = 1;
    nullsub_82(&v26);
    if (v18)
    {
      long long v4 = v13;
      if (*((void *)&v13 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v4 + 1) + 16))(*((void *)&v4 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
        }
      }
      sub_21B866774(v4, &v26);
      uint64_t v5 = (__CVBuffer *)sub_21B8A2FBC((uint64_t)&v26);
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v5);
      sub_21B8A2C8C(&v26);
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      if (IOSurface)
      {
        if (!v18) {
          goto LABEL_27;
        }
        *(void *)a2 = &unk_26CB95BB0;
        long long v7 = v13;
        if (*((void *)&v13 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
          long long v8 = v15;
          *(_OWORD *)(a2 + 24) = v14;
          *(_OWORD *)(a2 + 40) = v8;
          *(_OWORD *)(a2 + 56) = v16;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
          *(_OWORD *)(a2 + 8) = v7;
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v7 + 1) + 16))(*((void *)&v7 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
          }
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v7 + 1) + 16))(*((void *)&v7 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
          }
        }
        else
        {
          *(_OWORD *)(a2 + 8) = (unint64_t)v13;
          long long v11 = v15;
          *(_OWORD *)(a2 + 24) = v14;
          *(_OWORD *)(a2 + 40) = v11;
          *(_OWORD *)(a2 + 56) = v16;
        }
        *(unsigned char *)(a2 + 80) = 1;
        if (!v18) {
          goto LABEL_27;
        }
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else
  {
    LOBYTE(v12) = 0;
    char v18 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
LABEL_22:
  if (v18)
  {
LABEL_23:
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    nullsub_82(&v12);
  }
LABEL_27:
  if (v25)
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    nullsub_82(&v19);
  }
}

void sub_21B84BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_21B84BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_21B84BDE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B84BDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B84BDE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    nullsub_82(a1);
  }
  return a1;
}

uint64_t sub_21B84BE64(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return nullsub_82(a1);
}

void sub_21B84BF00(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B84BF90()
{
  return 1;
}

uint64_t sub_21B84BF98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B84BFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B84BFBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B84C04C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B84C2FC();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_21B84C2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_21B84C2FC()
{
  uint64_t v0 = sub_21B84E140();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_21B84C378(char *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = 0;
  sub_21B84C784(v9, __s);
  uint64_t v11 = v9;
  uint64_t v12 = a2;
  __int16 v13 = v9;
  uint64_t v14 = a2;
  uint64_t v15 = a2;
  if (v10 != -1)
  {
    int v16 = &v11;
    ((void (*)(void **, _DWORD *))off_26CB958B8[v10])(&v16, v9);
    uint64_t v11 = v9;
    uint64_t v12 = a3;
    __int16 v13 = v9;
    uint64_t v14 = a3;
    uint64_t v15 = a3;
    if (v10 != -1)
    {
      int v16 = &v11;
      ((void (*)(void **, _DWORD *))off_26CB958D0[v10])(&v16, v9);
      uint64_t v11 = v9;
      uint64_t v12 = a4;
      __int16 v13 = v9;
      uint64_t v14 = a4;
      uint64_t v15 = a4;
      if (v10 != -1)
      {
        int v16 = &v11;
        ((void (*)(void **, _DWORD *))off_26CB958B8[v10])(&v16, v9);
        uint64_t v11 = v9;
        uint64_t v12 = a5;
        __int16 v13 = v9;
        uint64_t v14 = a5;
        uint64_t v15 = a5;
        if (v10 != -1)
        {
          int v16 = &v11;
          ((void (*)(void **, _DWORD *))off_26CB958E8[v10])(&v16, v9);
          sub_21B84C5E0();
        }
        sub_21B84C734();
      }
      sub_21B84C734();
    }
    sub_21B84C734();
  }
  sub_21B84C734();
}

void sub_21B84C554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B84C5E0()
{
}

void sub_21B84C6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B84C6D8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB958A0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_21B84C734()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::exception::~exception);
}

_DWORD *sub_21B84C784(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB958A0[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    int v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B84C87C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_21B84C890(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)*a2;
  if (*a2)
  {
    uint64_t v4 = (void **)a2[1];
    size_t v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      size_t v5 = *a2;
      a2[1] = v2;
    }
    operator delete(v5);
  }
}

void *sub_21B84C93C(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21B846300();
    }
    uint64_t v5 = 24 * a3;
    size_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      uint64_t v9 = &v6[v7];
      int v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_21B846188(v9, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_21B84CA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21B84CA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_21B847C48(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B84CA68(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB958A0[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    uint64_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t **sub_21B84CB5C(uint64_t **result)
{
  uint64_t v1 = **result;
  uint64_t v2 = (long long *)(*result)[1];
  uint64_t v3 = *(unsigned int *)(v1 + 24);
  if (v3 != -1) {
    unint64_t result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_26CB958A0[v3])(&v5, v1);
  }
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    unint64_t result = (uint64_t **)sub_21B846188((unsigned char *)v1, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v4 = *v2;
    *(void *)(v1 + 16) = *((void *)v2 + 2);
    *(_OWORD *)uint64_t v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_21B84CBFC(uint64_t a1, uint64_t a2)
{
}

char *sub_21B84CC08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a2 + 16))
  {
    unint64_t result = sub_21B84CE30((char **)a2, v3);
    *(void *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_21B846188(*(unsigned char **)(a2 + 8), *(void **)v3, *(void *)(v3 + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      *(void *)(v4 + 16) = *(void *)(v3 + 16);
      *(_OWORD *)unint64_t v4 = v5;
    }
    unint64_t result = (char *)(v4 + 24);
    *(void *)(a2 + 8) = v4 + 24;
    *(void *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_21B84CCA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21B84CCA8(uint64_t *a1, uint64_t a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v14 + 7) = *(void *)(a2 + 15);
  uint64_t v3 = *(void **)a2;
  v14[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = v3;
  *(void *)uint64_t v10 = v14[0];
  *(void *)&v10[7] = *(void *)((char *)v14 + 7);
  char v11 = v4;
  memset(v14, 0, 15);
  long long v5 = (long long *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_21B846188(&__p, *(void **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    uint64_t v13 = *((void *)v5 + 2);
    long long __p = v6;
  }
  uint64_t v7 = *(unsigned int *)(v2 + 24);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_26CB958A0[v7])(&v8, v2);
  }
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0) {
    goto LABEL_10;
  }
}

void sub_21B84CDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B84CE30(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  int v16 = v10;
  __int16 v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21B846188(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    char v4 = a1[1];
    uint64_t v10 = v16;
    char v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    char v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_21B84CFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B84D008(_DWORD ***a1)
{
  return sub_21B84D024(**a1, (char *)(*a1)[1]);
}

void sub_21B84D014(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B84D024(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB958A0[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    uint64_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B84D118(uint64_t *a1, uint64_t a2)
{
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  uint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB958A0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B84D2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B84D314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    unint64_t result = sub_21B84D410((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  unint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B84D408(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B84D410(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  long long v21 = v8;
  long long v22 = v8;
  long long v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      uint64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    uint64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B84D62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B84D640(_DWORD ***a1)
{
  return sub_21B84D65C(**a1, (char *)(*a1)[1]);
}

void sub_21B84D64C(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B84D65C(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB958A0[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    size_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B84D750(uint64_t *a1, uint64_t a2)
{
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  unint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB958A0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B84D908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B84D94C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    unint64_t result = sub_21B84DA48((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  unint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B84DA40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B84DA48(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  long long v21 = v8;
  long long v22 = v8;
  long long v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      uint64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    uint64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B84DC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_21B84DC78(__n128 ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v3 = v1[1].n128_u32[2];
  if (v3 != -1) {
    ((void (*)(char *, __n128 *))off_26CB958A0[v3])(&v5, v1);
  }
  v1[1].n128_u32[2] = -1;
  __n128 result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  __n128 *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_21B84DCF4(uint64_t a1, uint64_t a2)
{
}

char *sub_21B84DD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a2 + 16))
  {
    __n128 result = sub_21B84679C((void **)a2, v3);
    *(void *)(a2 + 8) = result;
  }
  else
  {
    long long v5 = *(_OWORD *)v3;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(void *)uint64_t v3 = 0;
    __n128 result = (char *)(v4 + 24);
    *(void *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_21B84DD6C(uint64_t *a1, uint64_t a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v14 + 7) = *(void *)(a2 + 15);
  uint64_t v3 = *(void **)a2;
  v14[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  size_t v9 = v3;
  *(void *)size_t v10 = v14[0];
  *(void *)&v10[7] = *(void *)((char *)v14 + 7);
  char v11 = v4;
  memset(v14, 0, 15);
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)v5;
  uint64_t v13 = v6;
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  uint64_t v7 = *(unsigned int *)(v2 + 24);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_26CB958A0[v7])(&v8, v2);
  }
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0) {
    goto LABEL_7;
  }
}

void sub_21B84DE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B84DED4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_21B84DEE0@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_21B84DEFC(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
}

void sub_21B84DF0C(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  }
  uint64_t v14 = (v13 - 1) * a4;
  uint64_t v15 = a2 - a1;
  if (a2 == a1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      unint64_t v18 = (v15 - 24) / 0x18uLL + 1;
      uint64_t v19 = v18 & 3;
      if ((v18 & 3) == 0) {
        uint64_t v19 = 4;
      }
      unint64_t v20 = v18 - v19;
      uint64_t v17 = a1 + 24 * v20;
      long long v21 = (unsigned __int8 *)(a1 + 47);
      int64x2_t v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      int64x2_t v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        char v25 = (const double *)(v21 - 39);
        uint64_t v26 = (const double *)(v21 + 9);
        unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
        unsigned long long v28 = (unsigned __int128)vld3q_f64(v26);
        int32x2_t v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        int8x16_t v31 = v30;
        int32x2_t v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        int8x16_t v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        int8x16_t v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        int64x2_t v22 = vaddq_s64(a6, v22);
        int64x2_t v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      uint64_t v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = a1;
    }
    do
    {
      uint64_t v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0) {
        uint64_t v35 = *(void *)(v17 + 8);
      }
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    int v36 = *(char *)(a1 + 23);
    uint8x8_t v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    std::string::size_type v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (uint64_t i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        int v40 = *(char *)(i + 23);
        if (v40 >= 0) {
          int v41 = (const std::string::value_type *)i;
        }
        else {
          int v41 = *(const std::string::value_type **)i;
        }
        if (v40 >= 0) {
          std::string::size_type v42 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v42 = *(void *)(i + 8);
        }
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_21B84E11C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B84E140()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5B9A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5B9A8))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B84E40C();
    sub_21B84E350((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B84E350((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5B990, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5B990, &dword_21B831000);
          __cxa_guard_release(&qword_267C5B9A8);
          return &stru_267C5B990;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5B990;
}

void sub_21B84E29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5B9A8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5B9A8);
  _Unwind_Resume(a1);
}

void sub_21B84E350(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B84E3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B84E40C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5B9C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5B9C8))
  {
    return &stru_267C5B9B0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5B9B0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5B9B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5B9C8);
  return &stru_267C5B9B0;
}

void sub_21B84E4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5B9C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5B9C8);
  _Unwind_Resume(a1);
}

long long *sub_21B84E510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5B9E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5B9E8))
  {
    return &xmmword_267C5B9D0;
  }
  uint64_t v1 = (char *)sub_21B84E5F8();
  if (v1[23] < 0)
  {
    sub_21B846188(&xmmword_267C5B9D0, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267C5B9E0 = *((void *)v1 + 2);
    xmmword_267C5B9D0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5B9D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5B9E8);
  return &xmmword_267C5B9D0;
}

void sub_21B84E5E0(_Unwind_Exception *a1)
{
}

void *sub_21B84E5F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BA08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_267C5B9F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5B9F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BA08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BA28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BA28))
  {
    return &unk_267C5BA10;
  }
  sub_21B9840C8((uint64_t)qword_267C5B9F0, (uint64_t)&unk_267C5BA10);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267C5BA10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BA28);
  return &unk_267C5BA10;
}

void sub_21B84E6FC(_Unwind_Exception *a1)
{
}

void sub_21B84E714(_Unwind_Exception *a1)
{
}

std::string *sub_21B84E72C()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BA48))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B84E9F8();
    sub_21B84E93C((uint64_t)v1, (uint64_t)v8);
    long long v2 = sub_21B84E510();
    sub_21B84E93C((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BA30, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BA30, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BA48);
          return &stru_267C5BA30;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BA30;
}

void sub_21B84E888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BA48);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BA48);
  _Unwind_Resume(a1);
}

void sub_21B84E93C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B84E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B84E9F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BA68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BA68))
  {
    return &stru_267C5BA50;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BA50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BA50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BA68);
  return &stru_267C5BA50;
}

void sub_21B84EABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BA68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BA68);
  _Unwind_Resume(a1);
}

BOOL sub_21B84EAFC(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    int64x2_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    char v7 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int8x16_t v4 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB99818, 0);
    if (v4)
    {
      char v8 = v4;
      char v9 = v3;
      goto LABEL_9;
    }
  }
  else
  {
    char v7 = 0;
  }
  char v8 = 0;
  char v9 = 0;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v5 = 0;
    return v5 != 0;
  }
LABEL_9:
  uint64_t v5 = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return v8 != 0;
  }
  return v5 != 0;
}

uint64_t sub_21B84EC64(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return nullsub_82(a1);
}

void sub_21B84ED00(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B84ED90()
{
  return 1;
}

uint64_t sub_21B84ED98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B84EDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B84EDBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B84EE4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  size_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B84EFA8(a1, (uint64_t)&v9, &v13);
  long long v11 = *(_OWORD *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v5 = v13;
  uint64_t v6 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    char v7 = v14;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(_OWORD *)(a2 + 16) = v11;
    *(void *)(a2 + 32) = v12;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 32) = *(void *)(a1 + 40);
  }
  char v8 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B84EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B84EFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)a2
    || (__n128 result = __dynamic_cast(*(const void **)a2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB99818, 0)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v9 = a1;
    size_t v10 = exception;
    sub_21B84F0F8(v9, &v11);
    std::logic_error::logic_error(v10, &v11);
    v10->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v10, (struct type_info *)off_2643B88C8, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *a3 = result;
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21B84F0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21B83A360(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

double sub_21B84F0F8@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int8x16_t v4 = sub_21B84F574();
  uint64_t v5 = sub_21B84E140();
  uint64_t v26 = "Attempting to create an ";
  uint64_t v27 = 24;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  unsigned long long v28 = (const char *)v7;
  uint64_t v29 = size;
  int8x16_t v30 = " from an ";
  uint64_t v31 = 9;
  std::string::size_type v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = v5->__r_.__value_.__l.__size_;
  }
  v32[0] = v9;
  v32[1] = v8;
  sub_21B84F40C((uint64_t)&v26, (uint64_t)&v33, 0, 0, &__p);
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    std::string v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v26 = (const char *)p_p;
    uint64_t v27 = v15;
    unsigned long long v28 = " but the other image contains an incompatible buffer type ";
    uint64_t v29 = 58;
    int8x16_t v30 = (const char *)v13;
    uint64_t v31 = v14;
    sub_21B84F40C((uint64_t)&v26, (uint64_t)v32, 0, 0, a2);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_21;
    }
    return result;
  }
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 46;
  if (v19 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    long long v21 = (char *)a2;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v20;
LABEL_32:
    if (v18 >= 0) {
      int64x2_t v24 = &__p;
    }
    else {
      int64x2_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v24, v19);
    goto LABEL_36;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  long long v21 = (char *)operator new(v22 + 1);
  a2->__r_.__value_.__l.__size_ = v20;
  a2->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  a2 = (std::string *)v21;
  if (v19) {
    goto LABEL_32;
  }
LABEL_36:
  strcpy(&v21[v19], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v18 & 0x80) != 0) {
LABEL_21:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B84F3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B84F40C(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10 = (a2 - a1) >> 4;
  if (v10 <= 1) {
    uint64_t v10 = 1;
  }
  uint64_t v11 = (v10 - 1) * a4;
  uint64_t v12 = a2 - a1;
  if (a2 == a1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      unint64_t v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      uint64_t v16 = v15 & 3;
      if ((v15 & 3) == 0) {
        uint64_t v16 = 4;
      }
      unint64_t v17 = v15 - v16;
      uint64_t v14 = a1 + 16 * v17;
      int v18 = (const double *)(a1 + 40);
      int64x2_t v19 = 0uLL;
      int64x2_t v20 = 0uLL;
      do
      {
        long long v21 = v18 - 4;
        unsigned long long v22 = (unsigned __int128)vld2q_f64(v21);
        unsigned long long v23 = (unsigned __int128)vld2q_f64(v18);
        int64x2_t v19 = vaddq_s64((int64x2_t)v22, v19);
        int64x2_t v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      uint64_t v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = a1;
    }
    do
    {
      v13 += *(void *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (uint64_t i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        char v25 = *(const std::string::value_type **)i;
        std::string::size_type v26 = *(void *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_21B84F550(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B84F574()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BA88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BA88))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B84E40C();
    sub_21B84F784((uint64_t)v1, (uint64_t)v8);
    char v2 = sub_21B84F840();
    sub_21B84F784((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BA70, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BA70, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BA88);
          return &stru_267C5BA70;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BA70;
}

void sub_21B84F6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BA88);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BA88);
  _Unwind_Resume(a1);
}

void sub_21B84F784(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B84F824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21B84F840()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BAA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BAA8))
  {
    return &xmmword_267C5BA90;
  }
  uint64_t v1 = (char *)sub_21B84F928();
  if (v1[23] < 0)
  {
    sub_21B846188(&xmmword_267C5BA90, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267C5BAA0 = *((void *)v1 + 2);
    xmmword_267C5BA90 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BA90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BAA8);
  return &xmmword_267C5BA90;
}

void sub_21B84F910(_Unwind_Exception *a1)
{
}

void *sub_21B84F928()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BAC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BAC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_267C5BAB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BAB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BAC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BAE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BAE8))
  {
    return &unk_267C5BAD0;
  }
  sub_21B9840C8((uint64_t)qword_267C5BAB0, (uint64_t)&unk_267C5BAD0);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267C5BAD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BAE8);
  return &unk_267C5BAD0;
}

void sub_21B84FA2C(_Unwind_Exception *a1)
{
}

void sub_21B84FA44(_Unwind_Exception *a1)
{
}

void sub_21B84FA60()
{
}

__n128 sub_21B84FA74(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_26CB95A38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B84FAC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95A38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B84FAF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B84FAF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B84FB68()
{
  return &unk_26CB95A98;
}

uint64_t sub_21B84FB74(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return nullsub_82(a1);
}

void sub_21B84FC10(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B84FCA0()
{
  return 5;
}

uint64_t sub_21B84FCA8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B84FCB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B84FCCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B84FD5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B850090();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      int64x2_t v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      int64x2_t v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    int64x2_t v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (2 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 2;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_21B850044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_21B850090()
{
  uint64_t v0 = sub_21B85010C();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B85010C()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BB08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BB08))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B8503D8();
    sub_21B85031C((uint64_t)v1, (uint64_t)v8);
    long long v2 = sub_21B84E510();
    sub_21B85031C((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BAF0, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BAF0, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BB08);
          return &stru_267C5BAF0;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BAF0;
}

void sub_21B850268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BB08);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BB08);
  _Unwind_Resume(a1);
}

void sub_21B85031C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B8503BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B8503D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BB28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BB28))
  {
    return &stru_267C5BB10;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BB10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BB10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BB28);
  return &stru_267C5BB10;
}

void sub_21B85049C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BB28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BB28);
  _Unwind_Resume(a1);
}

BOOL sub_21B8504DC(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    int64x2_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    char v7 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int8x16_t v4 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C48, 0);
    if (v4)
    {
      BOOL v8 = v4;
      char v9 = v3;
      goto LABEL_9;
    }
  }
  else
  {
    char v7 = 0;
  }
  BOOL v8 = 0;
  char v9 = 0;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v5 = 0;
    return v5 != 0;
  }
LABEL_9:
  uint64_t v5 = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return v8 != 0;
  }
  return v5 != 0;
}

uint64_t sub_21B850644(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return nullsub_82(a1);
}

void sub_21B8506E0(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B850770()
{
  return 5;
}

uint64_t sub_21B850778(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B850780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B85079C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B85082C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 8);
  unint64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B850988(a1, (uint64_t)&v12, &v17);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v14 = *(_OWORD *)(a1 + 24);
  long long v15 = v5;
  long long v16 = *(_OWORD *)(a1 + 56);
  uint64_t v6 = v17;
  char v7 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v8 = v18;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    long long v9 = v15;
    *(_OWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v16;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = 0;
    long long v10 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v10;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  char v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_21B850974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B850988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)a2
    || (__n128 result = __dynamic_cast(*(const void **)a2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C48, 0)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v9 = a1;
    long long v10 = exception;
    sub_21B850AD8(v9, &v11);
    std::logic_error::logic_error(v10, &v11);
    v10->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v10, (struct type_info *)off_2643B88C8, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *a3 = result;
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21B850A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21B83A360(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

double sub_21B850AD8@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int8x16_t v4 = sub_21B850DEC();
  long long v5 = sub_21B85010C();
  std::string::size_type v26 = "Attempting to create an ";
  uint64_t v27 = 24;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  unsigned long long v28 = (const char *)v7;
  uint64_t v29 = size;
  int8x16_t v30 = " from an ";
  uint64_t v31 = 9;
  std::string::size_type v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = v5->__r_.__value_.__l.__size_;
  }
  v32[0] = v9;
  v32[1] = v8;
  sub_21B84F40C((uint64_t)&v26, (uint64_t)&v33, 0, 0, &__p);
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    std::string v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v26 = (const char *)p_p;
    uint64_t v27 = v15;
    unsigned long long v28 = " but the other image contains an incompatible buffer type ";
    uint64_t v29 = 58;
    int8x16_t v30 = (const char *)v13;
    uint64_t v31 = v14;
    sub_21B84F40C((uint64_t)&v26, (uint64_t)v32, 0, 0, a2);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_21;
    }
    return result;
  }
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 46;
  if (v19 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    long long v21 = (char *)a2;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v20;
LABEL_32:
    if (v18 >= 0) {
      int64x2_t v24 = &__p;
    }
    else {
      int64x2_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v24, v19);
    goto LABEL_36;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  long long v21 = (char *)operator new(v22 + 1);
  a2->__r_.__value_.__l.__size_ = v20;
  a2->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  a2 = (std::string *)v21;
  if (v19) {
    goto LABEL_32;
  }
LABEL_36:
  strcpy(&v21[v19], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v18 & 0x80) != 0) {
LABEL_21:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B850DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B850DEC()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BB48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BB48))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B8503D8();
    sub_21B850FFC((uint64_t)v1, (uint64_t)v8);
    char v2 = sub_21B84F840();
    sub_21B850FFC((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BB30, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BB30, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BB48);
          return &stru_267C5BB30;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BB30;
}

void sub_21B850F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BB48);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BB48);
  _Unwind_Resume(a1);
}

void sub_21B850FFC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B85109C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8510B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v263 = 0;
  long long v261 = 0u;
  long long v262 = 0u;
  long long v260 = 0u;
  memset(v259, 0, sizeof(v259));
  *(_OWORD *)std::string __p = 0u;
  sub_21B91D8A8(__p, 0, 0, 0, 0, 0);
  memset((char *)v259 + 4, 0, 24);
  *(void *)((char *)&v259[1] + 12) = 0x1000000000;
  BYTE8(v259[2]) = 0;
  LOBYTE(v263) = 0;
  unsigned int v264 = 0;
  int v6 = *(_DWORD *)(a2 + 48);
  if ((~v6 & 0x11) != 0)
  {
    if ((~v6 & 0x41) != 0)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 808, (uint64_t)&unk_21B997215, 0, (uint64_t)"Only Gray8u and Gray32f input tensors supported", 47, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    if (*(unsigned char *)(a2 + 112))
    {
      uint64_t v13 = (uint64_t *)(a2 + 96);
      if (*(unsigned char *)(a2 + 108) && *(void *)(a2 + 96))
      {
        uint64_t v14 = *(void *)(a2 + 64);
        std::string::size_type v15 = *(std::__shared_weak_count **)(a2 + 72);
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        (*(void (**)(uint64_t, void, const char *))(*(void *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        int v6 = *(_DWORD *)(a2 + 48);
      }
    }
    else
    {
      uint64_t v13 = (uint64_t *)(a2 + 40);
    }
    uint64_t v16 = *v13;
    uint32x4_t v280 = *(uint32x4_t *)a2;
    unsigned int v281 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 36) >> 2;
    uint32x4_t v237 = vshrq_n_u32(*(uint32x4_t *)(a2 + 20), 2uLL);
    LODWORD(v238) = v17;
    BYTE4(v238) = 1;
    LODWORD(v290) = v6;
    sub_21B91C53C(&v265, v16, &v280, &v237, &v290, a2 + 56);
    uint32x4_t v249 = v265;
    long long v250 = v266;
    long long v251 = v267;
    int v252 = v268;
    LOBYTE(v253) = 0;
    char v256 = 0;
    if (v272)
    {
      v253 = &unk_26CB954E0;
      long long v18 = v270;
      long long v270 = 0uLL;
      long long v254 = v18;
      *(_OWORD *)v255 = *(_OWORD *)v271;
      *(_OWORD *)&v255[14] = *(_OWORD *)&v271[14];
      char v256 = 1;
      int v257 = 1;
      nullsub_82(v271);
      size_t v19 = (std::__shared_weak_count *)*((void *)&v270 + 1);
      if (*((void *)&v270 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      nullsub_82(&v269);
      uint64_t v20 = v264;
      if (v264 != -1) {
        goto LABEL_28;
      }
    }
    else
    {
      int v257 = 1;
      uint64_t v20 = v264;
      if (v264 != -1) {
LABEL_28:
      }
        ((void (*)(uint32x4_t *, void **))off_26CB95E08[v20])(&v265, __p);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    uint32x4_t v249 = *(uint32x4_t *)a2;
    long long v250 = v7;
    long long v251 = *(_OWORD *)(a2 + 32);
    int v252 = *(_DWORD *)(a2 + 48);
    LOBYTE(v253) = 0;
    char v256 = 0;
    if (*(unsigned char *)(a2 + 112))
    {
      v253 = &unk_26CB954E0;
      uint64_t v8 = *(void *)(a2 + 64);
      char v9 = *(std::__shared_weak_count **)(a2 + 72);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = *(void *)(a2 + 96);
        int v11 = *(_DWORD *)(a2 + 104);
        __int16 v12 = *(_WORD *)(a2 + 108);
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 96);
        int v11 = *(_DWORD *)(a2 + 104);
        __int16 v12 = *(_WORD *)(a2 + 108);
      }
      *(void *)&long long v254 = v8;
      *((void *)&v254 + 1) = v9;
      *(void *)v255 = *(void *)(a2 + 80);
      *(_DWORD *)&v255[8] = *(_DWORD *)(a2 + 88);
      *(void *)&v255[16] = v10;
      *(_DWORD *)&v255[24] = v11;
      *(_WORD *)&v255[28] = v12;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      char v256 = 1;
    }
    int v257 = 0;
    uint64_t v20 = v264;
    if (v264 != -1) {
      goto LABEL_28;
    }
  }
  if (v257 != 1)
  {
    if (v257) {
      goto LABEL_277;
    }
    uint32x4_t v237 = v249;
    long long v238 = v250;
    long long v239 = v251;
    int v240 = v252;
    LOBYTE(v241) = 0;
    char v248 = 0;
    if (v256)
    {
      v241 = &unk_26CB954E0;
      long long v21 = v254;
      if (*((void *)&v254 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v254 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v22 = *(void *)&v255[16];
        int v23 = *(_DWORD *)&v255[24];
        __int16 v24 = *(_WORD *)&v255[28];
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v22 = *(void *)&v255[16];
        int v23 = *(_DWORD *)&v255[24];
        __int16 v24 = *(_WORD *)&v255[28];
      }
      long long v242 = v21;
      uint64_t v243 = *(void *)v255;
      int v244 = *(_DWORD *)&v255[8];
      uint64_t v245 = v22;
      int v246 = v23;
      __int16 v247 = v24;
      if (*((void *)&v21 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v21 + 1) + 16))(*((void *)&v21 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
      }
      char v248 = 1;
    }
    int v29 = *a3;
    if (*a3 != 2)
    {
      if (v29 == 1)
      {
        sub_21B853934(a3, (uint64_t)__p);
        uint32x4_t v265 = *(uint32x4_t *)__p;
        long long v266 = v259[0];
        long long v267 = v259[1];
        int v268 = v259[2];
        LOBYTE(v269) = 0;
        char v272 = 0;
        if ((_BYTE)v263)
        {
          v269 = &unk_26CB95DA8;
          long long v34 = v260;
          if (*((void *)&v260 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v35 = v262;
            int v36 = DWORD2(v262);
            __int16 v37 = WORD6(v262);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v35 = v262;
            int v36 = DWORD2(v262);
            __int16 v37 = WORD6(v262);
          }
          long long v270 = v34;
          *(void *)v271 = v261;
          *(_DWORD *)&v271[8] = DWORD2(v261);
          *(void *)&v271[16] = v35;
          *(_DWORD *)&v271[24] = v36;
          *(_WORD *)&v271[28] = v37;
          if (*((void *)&v34 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v34 + 1) + 16))(*((void *)&v34 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
          }
          char v272 = 1;
        }
        sub_21B8540D8((uint64_t)&v237, (uint64_t)&v290);
        sub_21B855DC4((uint64_t)&v265, (uint64_t)&v273);
        v55.n128_u64[0] = v294;
        v56.i64[0] = __PAIR64__(v293, v291);
        v56.i64[1] = v294;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v56))) & 1) == 0 && v292)
        {
          v280.i8[12] = v295;
          v280.i8[13] = v296;
          v280.i8[14] = v297;
          v280.i8[15] = v298;
          unsigned int v281 = v275;
          v280.i32[2] = v291 - 1;
          unsigned int v282 = v292 - 1;
          unint64_t v283 = v299 | ((unint64_t)v276 << 32);
          v280.i64[0] = 0;
          unint64_t v285 = v300 | ((unint64_t)v277 << 32);
          unsigned int v57 = v294 - 1;
          unsigned int v284 = v293 - 1;
          unsigned int v286 = v294 - 1;
          unint64_t v287 = v301 | ((unint64_t)v278 << 32);
          unint64_t v289 = v302 | ((unint64_t)v279 << 32);
          unint64_t v58 = v290;
          unint64_t v59 = v273;
          unsigned int v288 = HIDWORD(v294) - 1;
          if (HIDWORD(v294) != 1)
          {
            unsigned int v60 = 0;
            do
            {
              uint64_t v61 = v59;
              unint64_t v62 = v58;
              if (v286)
              {
                unsigned int v63 = 0;
                unint64_t v62 = v58;
                uint64_t v61 = v59;
                do
                {
                  int v64 = v62;
                  uint64_t v65 = v61;
                  if (v284)
                  {
                    unsigned int v66 = 0;
                    int v64 = v62;
                    uint64_t v65 = v61;
                    do
                    {
                      __int16 v67 = v64;
                      char v68 = v65;
                      if (v282)
                      {
                        unsigned int v69 = 0;
                        __int16 v67 = v64;
                        char v68 = v65;
                        do
                        {
                          __int32 v70 = v280.i32[2];
                          uint64_t v71 = v68;
                          int v72 = v67;
                          if (v280.i32[2])
                          {
                            uint64_t v73 = v280.u32[3];
                            uint64_t v74 = 2 * v281;
                            uint64_t v71 = v68;
                            int v72 = v67;
                            do
                            {
                              v55.n128_u8[0] = *v72;
                              *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                              v71->i16[0] = v55.n128_u16[0];
                              v72 += v73;
                              uint64_t v71 = (uint32x4_t *)((char *)v71 + v74);
                              --v70;
                            }
                            while (v70);
                          }
                          v55.n128_u8[0] = *v72;
                          *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                          v71->i16[0] = v55.n128_u16[0];
                          v67 += v283;
                          char v68 = (uint32x4_t *)((char *)v68 + 2 * HIDWORD(v283));
                          ++v69;
                        }
                        while (v69 < v282);
                      }
                      if (v280.i32[2])
                      {
                        unsigned int v75 = 0;
                        do
                        {
                          v55.n128_u8[0] = *v67;
                          *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                          v68->i16[0] = v55.n128_u16[0];
                          v67 += v280.i32[3];
                          char v68 = (uint32x4_t *)((char *)v68 + 2 * v281);
                          ++v75;
                        }
                        while (v75 < v280.i32[2]);
                      }
                      v55.n128_u8[0] = *v67;
                      *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                      v68->i16[0] = v55.n128_u16[0];
                      v64 += v285;
                      uint64_t v65 = (uint32x4_t *)((char *)v65 + 2 * HIDWORD(v285));
                      ++v66;
                    }
                    while (v66 < v284);
                  }
                  if (v282)
                  {
                    for (unsigned int i = 0; i < v282; ++i)
                    {
                      v77 = v65;
                      unsigned __int8 v78 = v64;
                      if (v280.i32[2])
                      {
                        unsigned int v79 = 0;
                        unsigned __int8 v78 = v64;
                        v77 = v65;
                        do
                        {
                          v55.n128_u8[0] = *v78;
                          *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                          v77->i16[0] = v55.n128_u16[0];
                          v78 += v280.i32[3];
                          v77 = (uint32x4_t *)((char *)v77 + 2 * v281);
                          ++v79;
                        }
                        while (v79 < v280.i32[2]);
                      }
                      v55.n128_u8[0] = *v78;
                      *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                      v77->i16[0] = v55.n128_u16[0];
                      v64 += v283;
                      uint64_t v65 = (uint32x4_t *)((char *)v65 + 2 * HIDWORD(v283));
                    }
                  }
                  if (v280.i32[2])
                  {
                    unsigned int v80 = 0;
                    do
                    {
                      v55.n128_u8[0] = *v64;
                      *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                      v65->i16[0] = v55.n128_u16[0];
                      v64 += v280.i32[3];
                      uint64_t v65 = (uint32x4_t *)((char *)v65 + 2 * v281);
                      ++v80;
                    }
                    while (v80 < v280.i32[2]);
                  }
                  v55.n128_u8[0] = *v64;
                  *(short float *)v55.n128_u16 = (short float)v55.n128_u16[0];
                  v65->i16[0] = v55.n128_u16[0];
                  v62 += v287;
                  uint64_t v61 = (uint32x4_t *)((char *)v61 + 2 * HIDWORD(v287));
                  ++v63;
                }
                while (v63 < v286);
              }
              v55.n128_u64[0] = sub_21B855FB8(&v280, v62, v61, v55);
              v58 += v289;
              unint64_t v59 = (uint32x4_t *)((char *)v59 + 2 * HIDWORD(v289));
              ++v60;
            }
            while (v60 < v288);
            unsigned int v57 = v286;
          }
          if (v57)
          {
            unsigned int v81 = 0;
            do
            {
              v55.n128_u64[0] = sub_21B855FB8(&v280, v58, v59, v55);
              v58 += v287;
              unint64_t v59 = (uint32x4_t *)((char *)v59 + 2 * HIDWORD(v287));
              ++v81;
            }
            while (v81 < v286);
          }
          sub_21B855FB8(&v280, v58, v59, v55);
        }
      }
      else
      {
        if (v29)
        {
          sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 848, (uint64_t)&unk_21B997215, 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_21B984AC4);
          abort();
        }
        sub_21B8535B8(a3, (uint64_t)__p);
        uint32x4_t v265 = *(uint32x4_t *)__p;
        long long v266 = v259[0];
        long long v267 = v259[1];
        int v268 = v259[2];
        LOBYTE(v269) = 0;
        char v272 = 0;
        if ((_BYTE)v263)
        {
          v269 = &unk_26CB95DA8;
          long long v30 = v260;
          if (*((void *)&v260 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v31 = v262;
            int v32 = DWORD2(v262);
            __int16 v33 = WORD6(v262);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v31 = v262;
            int v32 = DWORD2(v262);
            __int16 v33 = WORD6(v262);
          }
          long long v270 = v30;
          *(void *)v271 = v261;
          *(_DWORD *)&v271[8] = DWORD2(v261);
          *(void *)&v271[16] = v31;
          *(_DWORD *)&v271[24] = v32;
          *(_WORD *)&v271[28] = v33;
          if (*((void *)&v30 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v30 + 1) + 16))(*((void *)&v30 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
          }
          char v272 = 1;
        }
        sub_21B8540D8((uint64_t)&v237, (uint64_t)&v280);
        sub_21B8542CC((uint64_t)&v265, (uint64_t)&v290);
        v273 = &v280;
        v274 = &v290;
        sub_21B8544C0((size_t *)&v273);
      }
      goto LABEL_262;
    }
    sub_21B853CB4(a3, (uint64_t)__p);
    uint32x4_t v265 = *(uint32x4_t *)__p;
    long long v266 = v259[0];
    long long v267 = v259[1];
    int v268 = v259[2];
    LOBYTE(v269) = 0;
    char v272 = 0;
    if ((_BYTE)v263)
    {
      v269 = &unk_26CB95DA8;
      long long v38 = v260;
      if (*((void *)&v260 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v39 = v262;
        int v40 = DWORD2(v262);
        __int16 v41 = WORD6(v262);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v39 = v262;
        int v40 = DWORD2(v262);
        __int16 v41 = WORD6(v262);
      }
      long long v270 = v38;
      *(void *)v271 = v261;
      *(_DWORD *)&v271[8] = DWORD2(v261);
      *(void *)&v271[16] = v39;
      *(_DWORD *)&v271[24] = v40;
      *(_WORD *)&v271[28] = v41;
      if (*((void *)&v38 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v38 + 1) + 16))(*((void *)&v38 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
      }
      char v272 = 1;
    }
    sub_21B8540D8((uint64_t)&v237, (uint64_t)&v290);
    sub_21B85617C((uint64_t)&v265, (uint64_t)&v273);
    float v82 = *(float *)&v294;
    v83.i64[0] = __PAIR64__(v293, v291);
    v83.i64[1] = v294;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v83))) & 1) != 0 || !v292)
    {
LABEL_191:
      if (v272)
      {
        nullsub_82(v271);
        v181 = (std::__shared_weak_count *)*((void *)&v270 + 1);
        if (*((void *)&v270 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
        goto LABEL_266;
      }
LABEL_267:
      if ((_BYTE)v263)
      {
        nullsub_82(&v261);
        v227 = (std::__shared_weak_count *)*((void *)&v260 + 1);
        if (*((void *)&v260 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
        nullsub_82((char *)&v259[2] + 8);
      }
      if (v248)
      {
        nullsub_82(&v243);
        v228 = (std::__shared_weak_count *)*((void *)&v242 + 1);
        if (*((void *)&v242 + 1))
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v242 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
        nullsub_82(&v241);
      }
LABEL_277:
      v265.i8[0] = 0;
      BYTE7(v259[0]) = 0;
      LOBYTE(__p[0]) = 0;
      sub_21B858B90(a1, &v265);
    }
    v280.i8[12] = v295;
    v280.i8[13] = v296;
    v280.i8[14] = v297;
    v280.i8[15] = v298;
    unsigned int v281 = v275;
    v280.i32[2] = v291 - 1;
    unsigned int v282 = v292 - 1;
    unint64_t v283 = v299 | ((unint64_t)v276 << 32);
    v280.i64[0] = 0;
    unint64_t v285 = v300 | ((unint64_t)v277 << 32);
    unsigned int v84 = v294 - 1;
    unsigned int v284 = v293 - 1;
    unsigned int v286 = v294 - 1;
    unint64_t v287 = v301 | ((unint64_t)v278 << 32);
    unint64_t v289 = v302 | ((unint64_t)v279 << 32);
    uint64_t v85 = v290;
    v86 = (float *)v273;
    unsigned int v288 = HIDWORD(v294) - 1;
    if (HIDWORD(v294) == 1)
    {
LABEL_187:
      if (v84)
      {
        unsigned int v179 = 0;
        do
        {
          v180 = v86;
          float v82 = sub_21B856370(&v280, v85, v86, v82);
          v85 += v287;
          v86 = &v180[HIDWORD(v287)];
          ++v179;
        }
        while (v179 < v286);
      }
      sub_21B856370(&v280, v85, v86, v82);
      goto LABEL_191;
    }
    uint64_t v229 = a1;
    int v87 = 0;
    while (1)
    {
      int v230 = v87;
      unsigned int v88 = v286;
      v231 = v86;
      v232 = v85;
      v89 = v86;
      v90 = v85;
      if (v286) {
        break;
      }
LABEL_126:
      float v82 = sub_21B856370(&v280, v90, v89, v82);
      uint64_t v85 = &v232[v289];
      v86 = &v231[HIDWORD(v289)];
      int v87 = v230 + 1;
      if (v230 + 1 >= v288)
      {
        unsigned int v84 = v286;
        a1 = v229;
        goto LABEL_187;
      }
    }
    unsigned int v91 = v284;
    uint64_t v92 = v287;
    unsigned int v93 = v282;
    __int32 v94 = v280.i32[2];
    if (v284)
    {
      uint64_t v96 = v285;
      uint64_t v95 = HIDWORD(v285);
      if (v282)
      {
        uint64_t v97 = v283;
        int v98 = 0;
        if (v280.i32[2])
        {
          uint64_t v233 = 4 * HIDWORD(v287);
          uint64_t v234 = v287;
          uint64_t v99 = v280.u32[3];
          uint64_t v100 = HIDWORD(v285);
          uint64_t v101 = 4 * HIDWORD(v283);
          uint64_t v102 = 4 * v281;
          v90 = v232;
          v103 = &v86[(unint64_t)v101 / 4];
          v104 = &v86[v100];
          v105 = &v86[HIDWORD(v285) + (unint64_t)HIDWORD(v283)];
          v106 = &v86[(unint64_t)v101 / 4 + v100];
          v89 = v86;
          unsigned int v235 = v286;
          do
          {
            int v236 = v98;
            int v107 = 0;
            v108 = v106;
            v109 = v105;
            v110 = v104;
            v111 = v103;
            v112 = v89;
            v113 = v90;
            do
            {
              int v114 = 0;
              v115 = v110;
              v116 = v109;
              v117 = v108;
              v118 = v111;
              v119 = v112;
              v120 = v113;
              do
              {
                v121 = v118;
                v122 = v119;
                int v123 = v94;
                v124 = v120;
                do
                {
                  LOBYTE(v82) = *v124;
                  float v82 = (float)LODWORD(v82);
                  float *v122 = v82;
                  v124 += v99;
                  v122 = (float *)((char *)v122 + v102);
                  --v123;
                }
                while (v123);
                LOBYTE(v82) = *v124;
                float v82 = (float)LODWORD(v82);
                float *v122 = v82;
                v120 += v97;
                v119 = (float *)((char *)v119 + v101);
                ++v114;
                v118 = &v121[(unint64_t)v101 / 4];
              }
              while (v114 != v93);
              int v125 = v94;
              do
              {
                LOBYTE(v82) = *v120;
                float v82 = (float)LODWORD(v82);
                float *v121 = v82;
                v120 += v99;
                v121 = (float *)((char *)v121 + v102);
                --v125;
              }
              while (v125);
              LOBYTE(v82) = *v120;
              v113 += v96;
              v112 = (float *)((char *)v112 + v100 * 4);
              ++v107;
              v111 = (float *)((char *)v111 + v100 * 4);
              float v82 = (float)LODWORD(v82);
              float *v121 = v82;
              v110 = &v115[v100];
              v109 = &v116[v100];
              v108 = &v117[v100];
            }
            while (v107 != v91);
            int v126 = 0;
            do
            {
              v127 = v116;
              v128 = v117;
              v129 = v115;
              int v130 = v94;
              v131 = v113;
              do
              {
                LOBYTE(v82) = *v131;
                float v82 = (float)LODWORD(v82);
                float *v129 = v82;
                v131 += v99;
                v129 = (float *)((char *)v129 + v102);
                --v130;
              }
              while (v130);
              LOBYTE(v82) = *v131;
              float v82 = (float)LODWORD(v82);
              float *v129 = v82;
              v113 += v97;
              v115 = (float *)((char *)v115 + v101);
              ++v126;
              v116 = (float *)((char *)v116 + v101);
              v117 = (float *)((char *)v117 + v101);
            }
            while (v126 != v93);
            int v132 = v94;
            do
            {
              LOBYTE(v82) = *v113;
              float v82 = (float)LODWORD(v82);
              float *v128 = v82;
              v113 += v99;
              v127 = (float *)((char *)v127 + v102);
              v128 = (float *)((char *)v128 + v102);
              --v132;
            }
            while (v132);
            LOBYTE(v82) = *v113;
            v90 += v234;
            v89 = (float *)((char *)v89 + v233);
            int v98 = v236 + 1;
            v103 = (float *)((char *)v103 + v233);
            float v82 = (float)LODWORD(v82);
            float *v127 = v82;
            v104 = (float *)((char *)v104 + v233);
            v105 = (float *)((char *)v105 + v233);
            v106 = (float *)((char *)v106 + v233);
          }
          while (v236 + 1 != v235);
        }
        else
        {
          uint64_t v161 = 4 * HIDWORD(v287);
          uint64_t v162 = HIDWORD(v285);
          uint64_t v163 = 4 * HIDWORD(v283);
          v89 = v86;
          v90 = v232;
          v164 = &v86[v162];
          do
          {
            int v165 = 0;
            v166 = v164;
            v167 = v89;
            v168 = v90;
            do
            {
              v169 = v166;
              v170 = v167;
              unsigned int v171 = v93;
              v172 = v168;
              do
              {
                LOBYTE(v82) = *v172;
                float v82 = (float)LODWORD(v82);
                float *v170 = v82;
                v172 += v97;
                v170 = (float *)((char *)v170 + v163);
                --v171;
              }
              while (v171);
              LOBYTE(v82) = *v172;
              float v82 = (float)LODWORD(v82);
              float *v170 = v82;
              v168 += v96;
              v167 = (float *)((char *)v167 + v162 * 4);
              ++v165;
              v166 = &v169[v162];
            }
            while (v165 != v91);
            unsigned int v173 = v93;
            do
            {
              LOBYTE(v82) = *v168;
              float v82 = (float)LODWORD(v82);
              float *v169 = v82;
              v168 += v97;
              v169 = (float *)((char *)v169 + v163);
              --v173;
            }
            while (v173);
            LOBYTE(v82) = *v168;
            float v82 = (float)LODWORD(v82);
            float *v169 = v82;
            v90 += v92;
            v89 = (float *)((char *)v89 + v161);
            ++v98;
            v164 = (float *)((char *)v164 + v161);
          }
          while (v98 != v88);
        }
      }
      else if (v280.i32[2])
      {
        int v146 = 0;
        uint64_t v147 = 4 * HIDWORD(v287);
        uint64_t v148 = HIDWORD(v285);
        uint64_t v149 = v280.u32[3];
        uint64_t v150 = 4 * v281;
        v89 = v86;
        v90 = v232;
        v151 = &v86[v148];
        do
        {
          int v152 = 0;
          v153 = v151;
          v154 = v89;
          v155 = v90;
          do
          {
            v156 = v153;
            v157 = v154;
            int v158 = v94;
            v159 = v155;
            do
            {
              LOBYTE(v82) = *v159;
              float v82 = (float)LODWORD(v82);
              float *v157 = v82;
              v159 += v149;
              v157 = (float *)((char *)v157 + v150);
              --v158;
            }
            while (v158);
            LOBYTE(v82) = *v159;
            float v82 = (float)LODWORD(v82);
            float *v157 = v82;
            v155 += v96;
            v154 = (float *)((char *)v154 + v148 * 4);
            ++v152;
            v153 = &v156[v148];
          }
          while (v152 != v91);
          int v160 = v94;
          do
          {
            LOBYTE(v82) = *v155;
            float v82 = (float)LODWORD(v82);
            float *v156 = v82;
            v155 += v149;
            v156 = (float *)((char *)v156 + v150);
            --v160;
          }
          while (v160);
          LOBYTE(v82) = *v155;
          float v82 = (float)LODWORD(v82);
          float *v156 = v82;
          v90 += v92;
          v89 = (float *)((char *)v89 + v147);
          ++v146;
          v151 = (float *)((char *)v151 + v147);
        }
        while (v146 != v88);
      }
      else
      {
        int v174 = 0;
        uint64_t v175 = 4 * HIDWORD(v287);
        v89 = v86;
        v90 = v232;
        do
        {
          v176 = v89;
          unsigned int v177 = v91;
          v178 = v90;
          do
          {
            LOBYTE(v82) = *v178;
            float v82 = (float)LODWORD(v82);
            float *v176 = v82;
            v178 += v96;
            v176 += v95;
            --v177;
          }
          while (v177);
          LOBYTE(v82) = *v178;
          float v82 = (float)LODWORD(v82);
          float *v176 = v82;
          v90 += v92;
          v89 = (float *)((char *)v89 + v175);
          ++v174;
        }
        while (v174 != v88);
      }
      goto LABEL_126;
    }
    uint64_t v133 = v283;
    uint64_t v134 = 4 * HIDWORD(v287);
    uint64_t v135 = v280.u32[3];
    uint64_t v136 = 4 * HIDWORD(v283);
    uint64_t v137 = 4 * v281;
    v89 = v86;
    v90 = v232;
    while (1)
    {
      v138 = v90;
      v139 = v89;
      if (!v93) {
        goto LABEL_156;
      }
      v139 = v89;
      unsigned int v140 = v93;
      v138 = v90;
      if (v94) {
        break;
      }
      do
      {
        LOBYTE(v82) = *v138;
        float v82 = (float)LODWORD(v82);
        float *v139 = v82;
        v138 += v133;
        v139 = (float *)((char *)v139 + v136);
        --v140;
      }
      while (v140);
LABEL_149:
      LOBYTE(v82) = *v138;
      float v82 = (float)LODWORD(v82);
      float *v139 = v82;
      v90 += v92;
      v89 = (float *)((char *)v89 + v134);
      if (++v91 == v88) {
        goto LABEL_126;
      }
    }
    int v141 = 0;
    v139 = v89;
    v138 = v90;
    do
    {
      v142 = v139;
      int v143 = v94;
      v144 = v138;
      do
      {
        LOBYTE(v82) = *v144;
        float v82 = (float)LODWORD(v82);
        float *v142 = v82;
        v144 += v135;
        v142 = (float *)((char *)v142 + v137);
        --v143;
      }
      while (v143);
      LOBYTE(v82) = *v144;
      float v82 = (float)LODWORD(v82);
      float *v142 = v82;
      v138 += v133;
      v139 = (float *)((char *)v139 + v136);
      ++v141;
    }
    while (v141 != v93);
LABEL_156:
    if (v94)
    {
      int v145 = v94;
      do
      {
        LOBYTE(v82) = *v138;
        float v82 = (float)LODWORD(v82);
        float *v139 = v82;
        v138 += v135;
        v139 = (float *)((char *)v139 + v137);
        --v145;
      }
      while (v145);
    }
    goto LABEL_149;
  }
  uint32x4_t v237 = v249;
  long long v238 = v250;
  long long v239 = v251;
  int v240 = v252;
  LOBYTE(v241) = 0;
  char v248 = 0;
  if (v256)
  {
    v241 = &unk_26CB954E0;
    long long v25 = v254;
    if (*((void *)&v254 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v254 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v26 = *(void *)&v255[16];
      int v27 = *(_DWORD *)&v255[24];
      __int16 v28 = *(_WORD *)&v255[28];
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v26 = *(void *)&v255[16];
      int v27 = *(_DWORD *)&v255[24];
      __int16 v28 = *(_WORD *)&v255[28];
    }
    long long v242 = v25;
    uint64_t v243 = *(void *)v255;
    int v244 = *(_DWORD *)&v255[8];
    uint64_t v245 = v26;
    int v246 = v27;
    __int16 v247 = v28;
    if (*((void *)&v25 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v25 + 1) + 16))(*((void *)&v25 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    }
    char v248 = 1;
  }
  int v42 = *a3;
  if (*a3)
  {
    if (v42 != 2) {
      goto LABEL_61;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 861, (uint64_t)"buffer.data_type != BufferDataType::Uint8", 41, (uint64_t)"Copy from float to uint8 buffer is not allowed", 46, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_281;
    }
    int v42 = *a3;
    if (*a3 != 2)
    {
LABEL_61:
      if (v42 != 1)
      {
        if (!v42)
        {
          sub_21B8535B8(a3, (uint64_t)__p);
          uint32x4_t v265 = *(uint32x4_t *)__p;
          long long v266 = v259[0];
          long long v267 = v259[1];
          int v268 = v259[2];
          LOBYTE(v269) = 0;
          char v272 = 0;
          if ((_BYTE)v263)
          {
            v269 = &unk_26CB95DA8;
            long long v43 = v260;
            if (*((void *)&v260 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
              uint64_t v44 = v262;
              int v45 = DWORD2(v262);
              __int16 v46 = WORD6(v262);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            else
            {
              uint64_t v44 = v262;
              int v45 = DWORD2(v262);
              __int16 v46 = WORD6(v262);
            }
            long long v270 = v43;
            *(void *)v271 = v261;
            *(_DWORD *)&v271[8] = DWORD2(v261);
            *(void *)&v271[16] = v44;
            *(_DWORD *)&v271[24] = v45;
            *(_WORD *)&v271[28] = v46;
            if (*((void *)&v43 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v43 + 1) + 16))(*((void *)&v43 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
            }
            char v272 = 1;
          }
          sub_21B8565FC((uint64_t)&v237, (uint64_t)&v290);
          sub_21B8542CC((uint64_t)&v265, (uint64_t)&v273);
          v220.i64[0] = __PAIR64__(v293, v291);
          v220.i64[1] = v294;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v220))) & 1) == 0 && v292)
          {
            v280.i8[12] = v295;
            v280.i8[13] = v296;
            v280.i8[14] = v297;
            v280.i8[15] = v298;
            unsigned int v281 = v275;
            v280.i32[2] = v291 - 1;
            unsigned int v282 = v292 - 1;
            unint64_t v283 = v299 | ((unint64_t)v276 << 32);
            v280.i64[0] = 0;
            unint64_t v285 = v300 | ((unint64_t)v277 << 32);
            unsigned int v284 = v293 - 1;
            unsigned int v286 = v294 - 1;
            unint64_t v287 = v301 | ((unint64_t)v278 << 32);
            uint64_t v221 = v279;
            unint64_t v289 = v302 | ((unint64_t)v279 << 32);
            v222 = (float *)v290;
            v223 = v273;
            int v224 = HIDWORD(v294) - 1;
            unsigned int v288 = HIDWORD(v294) - 1;
            if (HIDWORD(v294) != 1)
            {
              uint64_t v225 = 4 * v302;
              do
              {
                sub_21B8567F0(&v280, v222, v223);
                v223 = (uint32x4_t *)((char *)v223 + v221);
                v222 = (float *)((char *)v222 + v225);
                --v224;
              }
              while (v224);
            }
            sub_21B8567F0(&v280, v222, v223);
          }
          goto LABEL_262;
        }
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 848, (uint64_t)&unk_21B997215, 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_21B984AC4);
LABEL_281:
        abort();
      }
      sub_21B853934(a3, (uint64_t)__p);
      uint32x4_t v265 = *(uint32x4_t *)__p;
      long long v266 = v259[0];
      long long v267 = v259[1];
      int v268 = v259[2];
      LOBYTE(v269) = 0;
      char v272 = 0;
      if ((_BYTE)v263)
      {
        v269 = &unk_26CB95DA8;
        long long v51 = v260;
        if (*((void *)&v260 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v52 = v262;
          int v53 = DWORD2(v262);
          __int16 v54 = WORD6(v262);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v52 = v262;
          int v53 = DWORD2(v262);
          __int16 v54 = WORD6(v262);
        }
        long long v270 = v51;
        *(void *)v271 = v261;
        *(_DWORD *)&v271[8] = DWORD2(v261);
        *(void *)&v271[16] = v52;
        *(_DWORD *)&v271[24] = v53;
        *(_WORD *)&v271[28] = v54;
        if (*((void *)&v51 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v51 + 1) + 16))(*((void *)&v51 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
        }
        char v272 = 1;
      }
      sub_21B8565FC((uint64_t)&v237, (uint64_t)&v290);
      sub_21B855DC4((uint64_t)&v265, (uint64_t)&v273);
      v182.i64[0] = __PAIR64__(v293, v291);
      v182.i64[1] = v294;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v182))) & 1) == 0 && v292)
      {
        v280.i8[12] = v295;
        v280.i8[13] = v296;
        v280.i8[14] = v297;
        v280.i8[15] = v298;
        unsigned int v281 = v275;
        v280.i32[2] = v291 - 1;
        unsigned int v282 = v292 - 1;
        unint64_t v283 = v299 | ((unint64_t)v276 << 32);
        v280.i64[0] = 0;
        unint64_t v285 = v300 | ((unint64_t)v277 << 32);
        unsigned int v183 = v294 - 1;
        unsigned int v284 = v293 - 1;
        unsigned int v286 = v294 - 1;
        unint64_t v287 = v301 | ((unint64_t)v278 << 32);
        unint64_t v289 = v302 | ((unint64_t)v279 << 32);
        v184 = (int *)v290;
        v185 = v273;
        unsigned int v288 = HIDWORD(v294) - 1;
        if (HIDWORD(v294) != 1)
        {
          unsigned int v186 = 0;
          do
          {
            v187 = v185;
            v188 = v184;
            if (v286)
            {
              unsigned int v189 = 0;
              v188 = v184;
              v187 = v185;
              do
              {
                v195 = v188;
                v196 = v187;
                if (v284)
                {
                  unsigned int v197 = 0;
                  v195 = v188;
                  v196 = v187;
                  do
                  {
                    v199 = v195;
                    v200 = v196;
                    if (v282)
                    {
                      unsigned int v201 = 0;
                      v199 = v195;
                      v200 = v196;
                      do
                      {
                        __int32 v203 = v280.i32[2];
                        v204 = v200;
                        v205 = v199;
                        if (v280.i32[2])
                        {
                          uint64_t v206 = 4 * v280.u32[3];
                          uint64_t v207 = 2 * v281;
                          v204 = v200;
                          v205 = v199;
                          do
                          {
                            _S0 = *v205;
                            __asm { FCVT            H0, S0 }
                            v204->i16[0] = _S0;
                            v205 = (int *)((char *)v205 + v206);
                            v204 = (uint32x4_t *)((char *)v204 + v207);
                            --v203;
                          }
                          while (v203);
                        }
                        _S0 = *v205;
                        __asm { FCVT            H0, S0 }
                        v204->i16[0] = _S0;
                        v199 += v283;
                        v200 = (uint32x4_t *)((char *)v200 + 2 * HIDWORD(v283));
                        ++v201;
                      }
                      while (v201 < v282);
                    }
                    if (v280.i32[2])
                    {
                      unsigned int v209 = 0;
                      do
                      {
                        _S0 = *v199;
                        __asm { FCVT            H0, S0 }
                        v200->i16[0] = _S0;
                        v199 += v280.u32[3];
                        v200 = (uint32x4_t *)((char *)v200 + 2 * v281);
                        ++v209;
                      }
                      while (v209 < v280.i32[2]);
                    }
                    _S0 = *v199;
                    __asm { FCVT            H0, S0 }
                    v200->i16[0] = _S0;
                    v195 += v285;
                    v196 = (uint32x4_t *)((char *)v196 + 2 * HIDWORD(v285));
                    ++v197;
                  }
                  while (v197 < v284);
                }
                if (v282)
                {
                  for (unsigned int j = 0; j < v282; ++j)
                  {
                    v213 = v196;
                    v214 = v195;
                    if (v280.i32[2])
                    {
                      unsigned int v215 = 0;
                      v214 = v195;
                      v213 = v196;
                      do
                      {
                        _S0 = *v214;
                        __asm { FCVT            H0, S0 }
                        v213->i16[0] = _S0;
                        v214 += v280.u32[3];
                        v213 = (uint32x4_t *)((char *)v213 + 2 * v281);
                        ++v215;
                      }
                      while (v215 < v280.i32[2]);
                    }
                    _S0 = *v214;
                    __asm { FCVT            H0, S0 }
                    v213->i16[0] = _S0;
                    v195 += v283;
                    v196 = (uint32x4_t *)((char *)v196 + 2 * HIDWORD(v283));
                  }
                }
                if (v280.i32[2])
                {
                  unsigned int v217 = 0;
                  do
                  {
                    _S0 = *v195;
                    __asm { FCVT            H0, S0 }
                    v196->i16[0] = _S0;
                    v195 += v280.u32[3];
                    v196 = (uint32x4_t *)((char *)v196 + 2 * v281);
                    ++v217;
                  }
                  while (v217 < v280.i32[2]);
                }
                _S0 = *v195;
                __asm { FCVT            H0, S0 }
                v196->i16[0] = _S0;
                v188 += v287;
                v187 = (uint32x4_t *)((char *)v187 + 2 * HIDWORD(v287));
                ++v189;
              }
              while (v189 < v286);
            }
            sub_21B856A7C(&v280, v188, v187);
            v184 += v289;
            v185 = (uint32x4_t *)((char *)v185 + 2 * HIDWORD(v289));
            ++v186;
          }
          while (v186 < v288);
          unsigned int v183 = v286;
        }
        if (v183)
        {
          unsigned int v219 = 0;
          do
          {
            sub_21B856A7C(&v280, v184, v185);
            v184 += v287;
            v185 = (uint32x4_t *)((char *)v185 + 2 * HIDWORD(v287));
            ++v219;
          }
          while (v219 < v286);
        }
        sub_21B856A7C(&v280, v184, v185);
      }
LABEL_262:
      if (v272)
      {
        nullsub_82(v271);
        v226 = (std::__shared_weak_count *)*((void *)&v270 + 1);
        if (*((void *)&v270 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
LABEL_266:
        nullsub_82(&v269);
        goto LABEL_267;
      }
      goto LABEL_267;
    }
  }
  sub_21B853CB4(a3, (uint64_t)__p);
  uint32x4_t v265 = *(uint32x4_t *)__p;
  long long v266 = v259[0];
  long long v267 = v259[1];
  int v268 = v259[2];
  LOBYTE(v269) = 0;
  char v272 = 0;
  if ((_BYTE)v263)
  {
    v269 = &unk_26CB95DA8;
    long long v47 = v260;
    if (*((void *)&v260 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v48 = v262;
      int v49 = DWORD2(v262);
      __int16 v50 = WORD6(v262);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v48 = v262;
      int v49 = DWORD2(v262);
      __int16 v50 = WORD6(v262);
    }
    long long v270 = v47;
    *(void *)v271 = v261;
    *(_DWORD *)&v271[8] = DWORD2(v261);
    *(void *)&v271[16] = v48;
    *(_DWORD *)&v271[24] = v49;
    *(_WORD *)&v271[28] = v50;
    if (*((void *)&v47 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v47 + 1) + 16))(*((void *)&v47 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
    }
    char v272 = 1;
  }
  sub_21B8565FC((uint64_t)&v237, (uint64_t)&v280);
  sub_21B85617C((uint64_t)&v265, (uint64_t)&v290);
  v273 = &v280;
  v274 = &v290;
  sub_21B856C40((uint64_t *)&v273);
  goto LABEL_262;
}

void sub_21B852E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_21B852EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  sub_21B85355C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_21B852F18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      uint64_t v2 = *(unsigned int *)(a1 + 144);
      if (v2 != -1) {
        ((void (*)(char *, uint64_t))off_26CB954A0[v2])(&v4, a1 + 24);
      }
      *(_DWORD *)(a1 + 144) = -1;
    }
    return a1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
}

void sub_21B852FC4()
{
}

__n128 sub_21B852FD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B853024(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B853054(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B85305C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B8530CC()
{
  return &unk_26CB95D08;
}

void sub_21B8530DC()
{
}

__n128 sub_21B8530F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B85313C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B85316C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B853174(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B8531E4()
{
  return &unk_26CB95D88;
}

char *sub_21B8531F0(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (*((void *)v11 + 2) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  int v11 = (char *)operator new(0xB8uLL);
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_DWORD *)v11 + 6) = 3;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  v11[48] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    long long v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(void *)int v11 = *v18;
LABEL_61:
      *long long v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        long long v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        long long v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      long long v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *(void *)int v11 = *v14;
  *uint64_t v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*(void *)v11)
  {
    unint64_t v27 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    long long v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_21B853548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8497C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B85355C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB95E08[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_21B8535B8@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*a1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v22 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  e5rt_tensor_desc_get_shape();
  BOOL v19 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v18 = 0;
  e5rt_tensor_desc_retain_dtype();
  v23[0] = &unk_26CB95550;
  v23[1] = MEMORY[0x263F3B860];
  v23[2] = &v18;
  uint8x8_t v24 = v23;
  char v17 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v16 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v15 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836138(v21, v20, v19, 0, 0, (uint64_t)v12);
  long long v9 = v13;
  int v10 = v14;
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C540(a2, v22, v12, &v9, &unk_21B9B0F68, v5);
  if (v8)
  {
    nullsub_82(&v7);
    unint64_t v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v24) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v24 + 48))(v24);
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void))(*v24 + 40))();
  }
  return result;
}

void sub_21B8538AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8538C8(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8538DC(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B8538F0(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853904(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853918(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B853934@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*a1 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v20 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  e5rt_tensor_desc_get_shape();
  char v17 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v16 = 0;
  e5rt_tensor_desc_retain_dtype();
  v21[0] = &unk_26CB95550;
  v21[1] = MEMORY[0x263F3B860];
  _OWORD v21[2] = &v16;
  uint64_t v22 = v21;
  char v15 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v14 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v13 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836344(v19, v18, v17, 0, 0, (uint64_t)v12);
  long long v9 = *(_OWORD *)&v12[5];
  int v10 = v12[9];
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C0C8(a2, v20, (long long *)v12, &v9, dword_21B9B0F70, (uint64_t)v5);
  if (v8)
  {
    nullsub_82(&v7);
    unint64_t v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v22) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v22 + 48))(v22);
  uint64_t result = (uint64_t)v22;
  if (v22 == v21) {
    return (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
  }
  if (v22) {
    return (*(uint64_t (**)(void))(*v22 + 40))();
  }
  return result;
}

void sub_21B853C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853C48(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853C5C(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853C70(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853C84(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853C98(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B853CB4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*a1 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v22 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  e5rt_tensor_desc_get_shape();
  uint64_t v19 = 0;
  e5rt_tensor_desc_get_strides();
  uint64_t v18 = 0;
  e5rt_tensor_desc_retain_dtype();
  v23[0] = &unk_26CB95550;
  v23[1] = MEMORY[0x263F3B860];
  v23[2] = &v18;
  uint8x8_t v24 = v23;
  char v17 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  uint64_t v16 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  uint64_t v15 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_21B836574(v21, v20, v19, 0, 0, (uint64_t)v12);
  long long v9 = v13;
  int v10 = v14;
  char v11 = 1;
  v5[0] = 0;
  char v8 = 0;
  sub_21B91C540(a2, v22, v12, &v9, "@", v5);
  if (v8)
  {
    nullsub_82(&v7);
    unint64_t v3 = v6;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_82(v5);
  }
  if (!v24) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v24 + 48))(v24);
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void))(*v24 + 40))();
  }
  return result;
}

void sub_21B853FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B844928((uint64_t)&a9);
  sub_21B83804C((void *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853FC8(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853FDC(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B853FF0(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B854004(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21B854018(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B854034(uint64_t a1)
{
  nullsub_82(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v3 = a1;
  }
  return nullsub_82(v3);
}

uint64_t sub_21B8540D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x10) == 0)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      long long v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *))(*(void *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    int v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    int v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

uint64_t sub_21B8542CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x10) == 0)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      long long v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    int v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    int v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

size_t *sub_21B8544C0(size_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*(_DWORD *)(*result + 28) != 1 || *(_DWORD *)(v2 + 28) != 1)
  {
    LOBYTE(var1) = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24)) {
        return (size_t *)sub_21B855720(&var1, v1, v2);
      }
    }
    return result;
  }
  int v4 = *(_DWORD *)(v1 + 32);
  if (v4 == *(_DWORD *)(v2 + 32))
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
    if (v4 == v5)
    {
      return sub_21B854598(result);
    }
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
  }
  size_t v10 = v5;
  if (v5) {
    BOOL v6 = *(_DWORD *)(v1 + 12) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0) {
    return sub_21B8551D0(&v10, v1, v2);
  }
  return result;
}

size_t *sub_21B854598(size_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 36);
  unsigned int v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    int v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      int v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
      {
        return sub_21B85469C(result);
      }
    }
    else
    {
      int v6 = *(_DWORD *)(v1 + 16);
    }
    int v9 = *(_DWORD *)(v1 + 8);
    size_t v14 = v9 * v6 * v4;
    if (v9) {
      BOOL v10 = v4 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0) {
      return sub_21B854974(&v14, (char **)v1, (char **)v2);
    }
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v1 + 8);
    size_t v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(void *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24)) {
      return (size_t *)sub_21B854CCC((unsigned int *)&v14, v1, v2);
    }
  }
  return result;
}

size_t *sub_21B85469C(size_t *result)
{
  size_t v1 = *result;
  size_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 44);
  unsigned int v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    size_t v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    int v6 = *(char **)v1;
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v5)
    {
      return result;
    }
    unint64_t v12 = *(char **)v2;
    return (size_t *)memmove(v12, v6, v5);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v1 + 8);
    unsigned int v9 = *(_DWORD *)(v1 + 12);
    unsigned int v10 = *(_DWORD *)(v1 + 16);
    size_t v13 = v9 * v8 * v10 * v4;
    v11.i64[0] = __PAIR64__(v9, v8);
    v11.i64[1] = __PAIR64__(v4, v10);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24)) {
      return sub_21B8547F4(&v13, (char **)v1, (char **)v2);
    }
  }
  return result;
}

size_t *sub_21B8547F4(size_t *result, char **a2, char **a3)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    int v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      unsigned int v4 = result;
      size_t v5 = *a2;
      int v6 = *a3;
      int v7 = v3 - 1;
      if (v3 != 1)
      {
        uint64_t v8 = *((unsigned int *)a3 + 11);
        uint64_t v9 = *((unsigned int *)a2 + 11);
        do
        {
          size_t v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          uint64_t result = (size_t *)memmove(v6, v5, v10);
LABEL_7:
          v5 += v9;
          v6 += v8;
          --v7;
        }
        while (v7);
      }
      size_t v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
LABEL_15:
        abort();
      }
      return (size_t *)memmove(v6, v5, v11);
    }
  }
  return result;
}

size_t *sub_21B854974(size_t *result, char **a2, char **a3)
{
  int32x4_t v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      size_t v5 = result;
      uint64_t v6 = *((unsigned int *)a2 + 10);
      uint64_t v7 = *((unsigned int *)a3 + 10);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v25 = v4 - 1;
      int v21 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        uint64_t v23 = *((unsigned int *)a3 + 11);
        uint64_t v22 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          int v10 = 0;
          while (1)
          {
            int v24 = v10;
            int v11 = v21;
            unint64_t v12 = v8;
            size_t v13 = v9;
            do
            {
              size_t v14 = v12;
              size_t v15 = *v5;
              if (!v14 && v15)
              {
                if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  goto LABEL_41;
                }
LABEL_11:
                uint64_t result = (size_t *)memmove(v13, v14, v15);
                goto LABEL_12;
              }
              if (v15) {
                goto LABEL_11;
              }
LABEL_12:
              unint64_t v12 = &v14[v6];
              v13 += v7;
              --v11;
            }
            while (v11);
            size_t v16 = *v5;
            if (!v14 && v16)
            {
              if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
LABEL_7:
                uint64_t result = (size_t *)memmove(v13, &v14[v6], v16);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v16) {
              goto LABEL_7;
            }
LABEL_8:
            v8 += v22;
            v9 += v23;
            int v10 = v24 + 1;
            if (v24 + 1 == v25) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          size_t v17 = *v5;
          if (!v8 && v17)
          {
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_41;
            }
          }
          else if (!v17)
          {
            goto LABEL_24;
          }
          uint64_t result = (size_t *)memmove(v9, v8, v17);
LABEL_24:
          v8 += v22;
          v9 += v23;
          --v25;
        }
        while (v25);
      }
LABEL_29:
      for (int i = v21; i; --i)
      {
        size_t v19 = *v5;
        if (!v8 && v19)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_41;
          }
        }
        else if (!v19)
        {
          goto LABEL_33;
        }
        uint64_t result = (size_t *)memmove(v9, v8, v19);
LABEL_33:
        v8 += v6;
        v9 += v7;
      }
      size_t v20 = *v5;
      if (v8 || !v20)
      {
        if (!v20) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_41;
      }
      return (size_t *)memmove(v9, v8, v20);
    }
  }
  return result;
}

unsigned int *sub_21B854CCC(unsigned int *result, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      int v14 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v7 = *(unsigned int *)(a2 + 32);
      uint64_t v8 = *(unsigned int *)(a3 + 32);
      unint64_t v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v13 = 0;
      int v16 = v6 - 1;
      uint64_t v17 = v7 | (v8 << 32);
      __int32 v18 = v3 - 1;
      uint64_t v9 = *(unsigned int *)(a2 + 40);
      uint64_t v10 = *(unsigned int *)(a3 + 40);
      unint64_t v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v20 = v4 - 1;
      uint64_t v21 = v9 | (v10 << 32);
      int v22 = HIDWORD(v4) - 1;
      unint64_t v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      int v11 = *(char **)a2;
      unint64_t v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return sub_21B854DB4((unsigned int *)&v13, (uint64_t)v24, (size_t *)result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_21B854DB4(unsigned int *a1, uint64_t a2, size_t *a3, char *__src, unsigned int *__dst)
{
  if (a1[14])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      unint64_t v26 = __src;
      unint64_t v27 = __dst;
      int v11 = __dst;
      unint64_t v12 = __src;
      if (a1[11]) {
        break;
      }
LABEL_3:
      sub_21B85502C(a1, (char **)a2, a3, v12, v11);
      __src = &v26[a1[15]];
      std::string __dst = (unsigned int *)((char *)v27 + a1[16]);
      int v10 = v25 + 1;
      if (v25 + 1 >= a1[14]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    unint64_t v12 = __src;
    int v11 = v27;
    while (1)
    {
      unint64_t v14 = a1[3] | ((unint64_t)a1[6] << 32);
      unint64_t v15 = a1[4] | ((unint64_t)a1[7] << 32);
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v15;
      unsigned int v16 = a1[8];
      uint64_t v17 = v11;
      __int32 v18 = v12;
      if (v16)
      {
        int v19 = 0;
        __int32 v18 = v12;
        uint64_t v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          size_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          int v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += a1[9];
          uint64_t v17 = (unsigned int *)((char *)v17 + a1[10]);
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        int v20 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, v21);
        unsigned int v16 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      size_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += a1[12];
      int v11 = (unsigned int *)((char *)v11 + a1[13]);
      if (++v13 >= a1[11]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    uint64_t v17 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B85502C(a1, (char **)a2, a3, __src, __dst);
      __src += a1[12];
      std::string __dst = (unsigned int *)((char *)__dst + a1[13]);
      ++v23;
    }
    while (v23 < a1[11]);
  }

  return sub_21B85502C(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_21B85502C(unsigned int *result, char **a2, size_t *a3, char *__src, unsigned int *__dst)
{
  int32x4_t v5 = __dst;
  int v6 = __src;
  unint64_t v9 = result[3] | ((unint64_t)result[6] << 32);
  unint64_t v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  unsigned int v11 = result[8];
  if (v11)
  {
    unint64_t v12 = result;
    int v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      size_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      uint64_t result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += v12[9];
      int32x4_t v5 = (unsigned int *)((char *)v5 + v12[10]);
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    uint64_t result = (unsigned int *)a2[2];
LABEL_4:
    uint64_t result = (unsigned int *)memmove(result, v6, v14);
    unsigned int v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  size_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    int32x4_t v5 = (unsigned int *)a2[2];
  }

  return (unsigned int *)memmove(v5, v6, v15);
}

size_t *sub_21B8551D0(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = result;
      int v16 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v8 = *(unsigned int *)(a2 + 32);
      uint64_t v9 = *(unsigned int *)(a3 + 32);
      unint64_t v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v15 = 0;
      int v18 = v6 - 1;
      uint64_t v19 = v8 | (v9 << 32);
      __int32 v20 = v3 - 1;
      uint64_t v10 = *(unsigned int *)(a2 + 40);
      uint64_t v11 = *(unsigned int *)(a3 + 40);
      unint64_t v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v22 = v4 - 1;
      uint64_t v23 = v10 | (v11 << 32);
      unint64_t v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      unint64_t v12 = *(char **)a2;
      int v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      unsigned int v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        unsigned int v14 = 0;
        do
        {
          sub_21B85530C(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += v25;
          v13 += HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (size_t *)sub_21B85530C(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_21B85530C(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  if (a1[11])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      unint64_t v26 = __src;
      unint64_t v27 = __dst;
      uint64_t v11 = __dst;
      unint64_t v12 = __src;
      if (a1[8]) {
        break;
      }
LABEL_3:
      sub_21B855580(a1, a2, a3, v12, v11);
      __src = &v26[a1[12]];
      std::string __dst = &v27[a1[13]];
      int v10 = v25 + 1;
      if ((v25 + 1) >= a1[11]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    unint64_t v12 = __src;
    uint64_t v11 = v27;
    while (1)
    {
      int v14 = a1[3];
      int v15 = a1[4];
      *(void *)a2 = v12;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 24) = v15;
      unsigned int v16 = a1[5];
      unint64_t v17 = v11;
      int v18 = v12;
      if (v16)
      {
        int v19 = 0;
        int v18 = v12;
        unint64_t v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          size_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          __int32 v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += a1[6];
          v17 += a1[7];
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        __int32 v20 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, v21);
        unsigned int v16 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      size_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += a1[9];
      v11 += a1[10];
      if (++v13 >= a1[8]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    unint64_t v17 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B855580(a1, a2, a3, __src, __dst);
      __src += a1[9];
      __dst += a1[10];
      ++v23;
    }
    while (v23 < a1[8]);
  }

  return sub_21B855580(a1, a2, a3, __src, __dst);
}

_DWORD *sub_21B855580(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  int32x4_t v5 = __dst;
  int v6 = __src;
  int v9 = result[3];
  int v10 = result[4];
  *(void *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  unsigned int v11 = result[5];
  if (v11)
  {
    unint64_t v12 = result;
    int v13 = 0;
    while (1)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 16) = v5;
      size_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      uint64_t result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    uint64_t result = *(_DWORD **)(a2 + 16);
LABEL_4:
    uint64_t result = memmove(result, v6, v14);
    unsigned int v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  size_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    int32x4_t v5 = *(char **)(a2 + 16);
  }

  return memmove(v5, v6, v15);
}

_DWORD *sub_21B855720(_DWORD *result, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      int v14 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v7 = *(unsigned int *)(a2 + 32);
      uint64_t v8 = *(unsigned int *)(a3 + 32);
      unint64_t v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v13 = 0;
      int v16 = v6 - 1;
      uint64_t v17 = v7 | (v8 << 32);
      __int32 v18 = v3 - 1;
      uint64_t v9 = *(unsigned int *)(a2 + 40);
      uint64_t v10 = *(unsigned int *)(a3 + 40);
      unint64_t v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v20 = v4 - 1;
      uint64_t v21 = v9 | (v10 << 32);
      int v22 = HIDWORD(v4) - 1;
      unint64_t v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      unsigned int v11 = *(unsigned char **)a2;
      unint64_t v12 = *(unsigned char **)a3;
      char v24 = 0;
      return sub_21B855804(&v13, (uint64_t)&v24, (uint64_t)result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_21B855804(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  if (a1[14])
  {
    unsigned int v10 = 0;
    do
    {
      unsigned int v11 = a5;
      unint64_t v12 = a4;
      if (a1[11])
      {
        unsigned int v13 = 0;
        unint64_t v12 = a4;
        unsigned int v11 = a5;
        do
        {
          int v14 = v12;
          unint64_t v15 = v11;
          if (a1[8])
          {
            unsigned int v16 = 0;
            int v14 = v12;
            unint64_t v15 = v11;
            do
            {
              uint64_t v17 = v14;
              __int32 v18 = v15;
              if (a1[5])
              {
                unsigned int v19 = 0;
                uint64_t v17 = v14;
                __int32 v18 = v15;
                do
                {
                  int v20 = v18;
                  uint64_t v21 = v17;
                  if (a1[2])
                  {
                    unsigned int v22 = 0;
                    uint64_t v21 = v17;
                    int v20 = v18;
                    do
                    {
                      *int v20 = *v21;
                      v21 += a1[3];
                      v20 += a1[4];
                      ++v22;
                    }
                    while (v22 < a1[2]);
                  }
                  *int v20 = *v21;
                  v17 += a1[6];
                  v18 += a1[7];
                  ++v19;
                }
                while (v19 < a1[5]);
              }
              if (a1[2])
              {
                unsigned int v23 = 0;
                do
                {
                  *__int32 v18 = *v17;
                  v17 += a1[3];
                  v18 += a1[4];
                  ++v23;
                }
                while (v23 < a1[2]);
              }
              *__int32 v18 = *v17;
              v14 += a1[9];
              v15 += a1[10];
              ++v16;
            }
            while (v16 < a1[8]);
          }
          if (a1[5])
          {
            unsigned int v24 = 0;
            do
            {
              int v25 = v15;
              unint64_t v26 = v14;
              if (a1[2])
              {
                unsigned int v27 = 0;
                unint64_t v26 = v14;
                int v25 = v15;
                do
                {
                  *int v25 = *v26;
                  v26 += a1[3];
                  v25 += a1[4];
                  ++v27;
                }
                while (v27 < a1[2]);
              }
              *int v25 = *v26;
              v14 += a1[6];
              v15 += a1[7];
              ++v24;
            }
            while (v24 < a1[5]);
          }
          if (a1[2])
          {
            unsigned int v28 = 0;
            do
            {
              *unint64_t v15 = *v14;
              v14 += a1[3];
              v15 += a1[4];
              ++v28;
            }
            while (v28 < a1[2]);
          }
          *unint64_t v15 = *v14;
          v12 += a1[12];
          v11 += a1[13];
          ++v13;
        }
        while (v13 < a1[11]);
      }
      sub_21B855AD4(a1, a2, a3, v12, v11);
      a4 += a1[15];
      a5 += a1[16];
      ++v10;
    }
    while (v10 < a1[14]);
  }
  if (a1[11])
  {
    unsigned int v29 = 0;
    do
    {
      sub_21B855AD4(a1, a2, a3, a4, a5);
      a4 += a1[12];
      a5 += a1[13];
      ++v29;
    }
    while (v29 < a1[11]);
  }

  return sub_21B855AD4(a1, a2, a3, a4, a5);
}

_DWORD *sub_21B855AD4(_DWORD *result, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  if (result[8])
  {
    unsigned int v5 = 0;
    do
    {
      int v6 = a4;
      uint64_t v7 = a5;
      if (result[5])
      {
        unsigned int v8 = 0;
        int v6 = a4;
        uint64_t v7 = a5;
        do
        {
          uint64_t v9 = v7;
          unsigned int v10 = v6;
          if (result[2])
          {
            unsigned int v11 = 0;
            unsigned int v10 = v6;
            uint64_t v9 = v7;
            do
            {
              *uint64_t v9 = *v10;
              v10 += result[3];
              v9 += result[4];
              ++v11;
            }
            while (v11 < result[2]);
          }
          *uint64_t v9 = *v10;
          v6 += result[6];
          v7 += result[7];
          ++v8;
        }
        while (v8 < result[5]);
      }
      if (result[2])
      {
        unsigned int v12 = 0;
        do
        {
          *uint64_t v7 = *v6;
          v6 += result[3];
          v7 += result[4];
          ++v12;
        }
        while (v12 < result[2]);
      }
      *uint64_t v7 = *v6;
      a4 += result[9];
      a5 += result[10];
      ++v5;
    }
    while (v5 < result[8]);
  }
  if (result[5])
  {
    unsigned int v13 = 0;
    do
    {
      int v14 = a5;
      unint64_t v15 = a4;
      if (result[2])
      {
        unsigned int v16 = 0;
        unint64_t v15 = a4;
        int v14 = a5;
        do
        {
          *int v14 = *v15;
          v15 += result[3];
          v14 += result[4];
          ++v16;
        }
        while (v16 < result[2]);
      }
      *int v14 = *v15;
      a4 += result[6];
      a5 += result[7];
      ++v13;
    }
    while (v13 < result[5]);
  }
  if (result[2])
  {
    unsigned int v17 = 0;
    do
    {
      *a5 = *a4;
      a4 += result[3];
      a5 += result[4];
      ++v17;
    }
    while (v17 < result[2]);
  }
  *a5 = *a4;
  return result;
}

void sub_21B855C78(uint64_t a1)
{
  nullsub_82(a1 + 24);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_82(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B855D10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_21B855D18(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_21B855D20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_21B855D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  size_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B855DC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x20) == 0)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 727, (uint64_t)"format.Contains(FormatFlags::FLOAT16)", 37, (uint64_t)"The DataView does not contain half data", 39, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      unsigned int v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    int v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    int v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

__int16 sub_21B855FB8@<H0>(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, _WORD *a3@<X2>, __n128 a4@<Q0>)
{
  if (a1[8])
  {
    unsigned int v4 = 0;
    do
    {
      unsigned int v5 = a2;
      int v6 = a3;
      if (a1[5])
      {
        unsigned int v7 = 0;
        unsigned int v5 = a2;
        int v6 = a3;
        do
        {
          int v8 = v6;
          int v9 = v5;
          if (a1[2])
          {
            unsigned int v10 = 0;
            int v9 = v5;
            int v8 = v6;
            do
            {
              a4.n128_u8[0] = *v9;
              *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
              _WORD *v8 = a4.n128_u16[0];
              v9 += a1[3];
              v8 += a1[4];
              ++v10;
            }
            while (v10 < a1[2]);
          }
          a4.n128_u8[0] = *v9;
          *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
          _WORD *v8 = a4.n128_u16[0];
          v5 += a1[6];
          v6 += a1[7];
          ++v7;
        }
        while (v7 < a1[5]);
      }
      if (a1[2])
      {
        unsigned int v11 = 0;
        do
        {
          a4.n128_u8[0] = *v5;
          *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
          *int v6 = a4.n128_u16[0];
          v5 += a1[3];
          v6 += a1[4];
          ++v11;
        }
        while (v11 < a1[2]);
      }
      a4.n128_u8[0] = *v5;
      *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
      *int v6 = a4.n128_u16[0];
      a2 += a1[9];
      a3 += a1[10];
      ++v4;
    }
    while (v4 < a1[8]);
  }
  if (a1[5])
  {
    unsigned int v12 = 0;
    do
    {
      unsigned int v13 = a3;
      int v14 = a2;
      if (a1[2])
      {
        unsigned int v15 = 0;
        int v14 = a2;
        unsigned int v13 = a3;
        do
        {
          a4.n128_u8[0] = *v14;
          *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
          *unsigned int v13 = a4.n128_u16[0];
          v14 += a1[3];
          v13 += a1[4];
          ++v15;
        }
        while (v15 < a1[2]);
      }
      a4.n128_u8[0] = *v14;
      *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
      *unsigned int v13 = a4.n128_u16[0];
      a2 += a1[6];
      a3 += a1[7];
      ++v12;
    }
    while (v12 < a1[5]);
  }
  if (a1[2])
  {
    unsigned int v16 = 0;
    do
    {
      a4.n128_u8[0] = *a2;
      *(short float *)a4.n128_u16 = (short float)a4.n128_u16[0];
      *a3 = a4.n128_u16[0];
      a2 += a1[3];
      a3 += a1[4];
      ++v16;
    }
    while (v16 < a1[2]);
  }
  a4.n128_u8[0] = *a2;
  *(short float *)&__int16 result = (short float)a4.n128_u16[0];
  *(short float *)a3 = *(short float *)&result;
  return result;
}

uint64_t sub_21B85617C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x40) == 0)
  {
    __int16 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      unsigned int v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      __int16 result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    int v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    int v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    __int16 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

float sub_21B856370(_DWORD *a1, unsigned char *a2, float *a3, float a4)
{
  int v4 = a1[8];
  int v5 = a1[5];
  if (v4)
  {
    int v6 = a1[2];
    uint64_t v7 = a1[9];
    uint64_t v8 = a1[10];
    if (v5)
    {
      uint64_t v9 = a1[6];
      uint64_t v10 = a1[7];
      if (!v6)
      {
        uint64_t v42 = 4 * v8;
        do
        {
          long long v43 = a3;
          int v44 = v5;
          int v45 = a2;
          do
          {
            LOBYTE(a4) = *v45;
            a4 = (float)LODWORD(a4);
            float *v43 = a4;
            v45 += v9;
            v43 += v10;
            --v44;
          }
          while (v44);
          LOBYTE(a4) = *v45;
          a4 = (float)LODWORD(a4);
          float *v43 = a4;
          a2 += v7;
          a3 = (float *)((char *)a3 + v42);
          ++v6;
        }
        while (v6 != v4);
        goto LABEL_33;
      }
      int v11 = 0;
      uint64_t v12 = a1[3];
      uint64_t v13 = 4 * v8;
      uint64_t v14 = v10;
      uint64_t v15 = 4 * a1[4];
      unsigned int v16 = &a3[v14];
      do
      {
        int v17 = 0;
        __int32 v18 = v16;
        unsigned int v19 = a3;
        int v20 = a2;
        do
        {
          uint64_t v21 = v18;
          unsigned int v22 = v19;
          int v23 = v6;
          unsigned int v24 = v20;
          do
          {
            LOBYTE(a4) = *v24;
            a4 = (float)LODWORD(a4);
            *unsigned int v22 = a4;
            v24 += v12;
            unsigned int v22 = (float *)((char *)v22 + v15);
            --v23;
          }
          while (v23);
          LOBYTE(a4) = *v24;
          a4 = (float)LODWORD(a4);
          *unsigned int v22 = a4;
          v20 += v9;
          unsigned int v19 = (float *)((char *)v19 + v14 * 4);
          ++v17;
          __int32 v18 = &v21[v14];
        }
        while (v17 != v5);
        int v25 = v6;
        do
        {
          LOBYTE(a4) = *v20;
          a4 = (float)LODWORD(a4);
          *uint64_t v21 = a4;
          v20 += v12;
          uint64_t v21 = (float *)((char *)v21 + v15);
          --v25;
        }
        while (v25);
        LOBYTE(a4) = *v20;
        a4 = (float)LODWORD(a4);
        *uint64_t v21 = a4;
        a2 += v7;
        a3 = (float *)((char *)a3 + v13);
        ++v11;
        unsigned int v16 = (float *)((char *)v16 + v13);
      }
      while (v11 != v4);
LABEL_14:
      uint64_t v9 = a1[6];
      uint64_t v10 = a1[7];
      if (v6)
      {
        int v26 = 0;
        uint64_t v27 = a1[3];
        uint64_t v28 = 4 * v10;
        uint64_t v29 = 4 * a1[4];
        do
        {
          long long v30 = a3;
          int v31 = v6;
          int v32 = a2;
          do
          {
            LOBYTE(a4) = *v32;
            a4 = (float)LODWORD(a4);
            *long long v30 = a4;
            v32 += v27;
            long long v30 = (float *)((char *)v30 + v29);
            --v31;
          }
          while (v31);
          LOBYTE(a4) = *v32;
          a4 = (float)LODWORD(a4);
          *long long v30 = a4;
          a2 += v9;
          a3 = (float *)((char *)a3 + v28);
          ++v26;
        }
        while (v26 != v5);
        goto LABEL_25;
      }
      do
      {
LABEL_33:
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v9;
        a3 += v10;
        --v5;
      }
      while (v5);
      goto LABEL_36;
    }
    if (!v6)
    {
      do
      {
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v7;
        a3 += v8;
        --v4;
      }
      while (v4);
      goto LABEL_36;
    }
    int v33 = 0;
    uint64_t v34 = a1[3];
    uint64_t v35 = 4 * v8;
    uint64_t v36 = 4 * a1[4];
    do
    {
      __int16 v37 = a3;
      int v38 = v6;
      uint64_t v39 = a2;
      do
      {
        LOBYTE(a4) = *v39;
        a4 = (float)LODWORD(a4);
        float *v37 = a4;
        v39 += v34;
        __int16 v37 = (float *)((char *)v37 + v36);
        --v38;
      }
      while (v38);
      LOBYTE(a4) = *v39;
      a4 = (float)LODWORD(a4);
      float *v37 = a4;
      a2 += v7;
      a3 = (float *)((char *)a3 + v35);
      ++v33;
    }
    while (v33 != v4);
  }
  else
  {
    int v6 = a1[2];
    if (v5) {
      goto LABEL_14;
    }
  }
LABEL_25:
  if (v6)
  {
    uint64_t v40 = a1[3];
    uint64_t v41 = 4 * a1[4];
    do
    {
      LOBYTE(a4) = *a2;
      a4 = (float)LODWORD(a4);
      *a3 = a4;
      a2 += v40;
      a3 = (float *)((char *)a3 + v41);
      --v6;
    }
    while (v6);
  }
LABEL_36:
  LOBYTE(a4) = *a2;
  float result = (float)LODWORD(a4);
  *a3 = result;
  return result;
}

uint64_t sub_21B8565FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x40) == 0)
  {
    float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      int v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      float result = (*(uint64_t (**)(uint64_t, void, const char *))(*(void *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    int v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    int v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

float sub_21B8567F0(_DWORD *a1, float *a2, unsigned char *a3)
{
  if (a1[11])
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = a3;
      int v8 = a2;
      if (a1[8])
      {
        unsigned int v9 = 0;
        int v8 = a2;
        uint64_t v7 = a3;
        do
        {
          int32x4_t v10 = v8;
          int v11 = v7;
          if (a1[5])
          {
            unsigned int v12 = 0;
            int32x4_t v10 = v8;
            int v11 = v7;
            do
            {
              uint64_t v13 = v11;
              uint64_t v14 = v10;
              if (a1[2])
              {
                unsigned int v15 = 0;
                uint64_t v14 = v10;
                uint64_t v13 = v11;
                do
                {
                  *uint64_t v13 = (int)*v14;
                  v14 += a1[3];
                  v13 += a1[4];
                  ++v15;
                }
                while (v15 < a1[2]);
              }
              *uint64_t v13 = (int)*v14;
              v10 += a1[6];
              v11 += a1[7];
              ++v12;
            }
            while (v12 < a1[5]);
          }
          if (a1[2])
          {
            unsigned int v16 = 0;
            do
            {
              *int v11 = (int)*v10;
              v10 += a1[3];
              v11 += a1[4];
              ++v16;
            }
            while (v16 < a1[2]);
          }
          *int v11 = (int)*v10;
          v8 += a1[9];
          v7 += a1[10];
          ++v9;
        }
        while (v9 < a1[8]);
      }
      sub_21B8569B8(a1, v8, v7);
      a2 += a1[12];
      a3 += a1[13];
      ++v6;
    }
    while (v6 < a1[11]);
  }
  if (a1[8])
  {
    unsigned int v17 = 0;
    do
    {
      sub_21B8569B8(a1, a2, a3);
      a2 += a1[9];
      a3 += a1[10];
      ++v17;
    }
    while (v17 < a1[8]);
  }

  return sub_21B8569B8(a1, a2, a3);
}

float sub_21B8569B8(_DWORD *a1, float *a2, unsigned char *a3)
{
  if (a1[5])
  {
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = a3;
      int v5 = a2;
      if (a1[2])
      {
        unsigned int v6 = 0;
        int v5 = a2;
        uint64_t v4 = a3;
        do
        {
          *uint64_t v4 = (int)*v5;
          v5 += a1[3];
          v4 += a1[4];
          ++v6;
        }
        while (v6 < a1[2]);
      }
      *uint64_t v4 = (int)*v5;
      a2 += a1[6];
      a3 += a1[7];
      ++v3;
    }
    while (v3 < a1[5]);
  }
  if (a1[2])
  {
    unsigned int v7 = 0;
    do
    {
      *a3 = (int)*a2;
      a2 += a1[3];
      a3 += a1[4];
      ++v7;
    }
    while (v7 < a1[2]);
  }
  float result = *a2;
  *a3 = (int)*a2;
  return result;
}

__int16 sub_21B856A7C@<H0>(_DWORD *a1@<X0>, int *a2@<X1>, _WORD *a3@<X2>)
{
  if (a1[8])
  {
    unsigned int v3 = 0;
    do
    {
      unsigned int v9 = a2;
      int32x4_t v10 = a3;
      if (a1[5])
      {
        unsigned int v11 = 0;
        unsigned int v9 = a2;
        int32x4_t v10 = a3;
        do
        {
          uint64_t v13 = v10;
          uint64_t v14 = v9;
          if (a1[2])
          {
            unsigned int v15 = 0;
            uint64_t v14 = v9;
            uint64_t v13 = v10;
            do
            {
              _S0 = *v14;
              __asm { FCVT            H0, S0 }
              *uint64_t v13 = _S0;
              v14 += a1[3];
              v13 += a1[4];
              ++v15;
            }
            while (v15 < a1[2]);
          }
          _S0 = *v14;
          __asm { FCVT            H0, S0 }
          *uint64_t v13 = _S0;
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        unsigned int v17 = 0;
        do
        {
          _S0 = *v9;
          __asm { FCVT            H0, S0 }
          *int32x4_t v10 = _S0;
          v9 += a1[3];
          v10 += a1[4];
          ++v17;
        }
        while (v17 < a1[2]);
      }
      _S0 = *v9;
      __asm { FCVT            H0, S0 }
      *int32x4_t v10 = _S0;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    unsigned int v19 = 0;
    do
    {
      uint64_t v21 = a3;
      unsigned int v22 = a2;
      if (a1[2])
      {
        unsigned int v23 = 0;
        unsigned int v22 = a2;
        uint64_t v21 = a3;
        do
        {
          _S0 = *v22;
          __asm { FCVT            H0, S0 }
          *uint64_t v21 = _S0;
          v22 += a1[3];
          v21 += a1[4];
          ++v23;
        }
        while (v23 < a1[2]);
      }
      _S0 = *v22;
      __asm { FCVT            H0, S0 }
      *uint64_t v21 = _S0;
      a2 += a1[6];
      a3 += a1[7];
      ++v19;
    }
    while (v19 < a1[5]);
  }
  if (a1[2])
  {
    unsigned int v25 = 0;
    do
    {
      _S0 = *a2;
      __asm { FCVT            H0, S0 }
      *a3 = _S0;
      a2 += a1[3];
      a3 += a1[4];
      ++v25;
    }
    while (v25 < a1[2]);
  }
  _S0 = *a2;
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

void sub_21B856C40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*(_DWORD *)(*a1 + 28) != 1 || *(_DWORD *)(v2 + 28) != 1)
  {
    char v11 = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24)) {
        sub_21B857EB0((uint64_t)&v11, v1, v2);
      }
    }
    return;
  }
  int v4 = *(_DWORD *)(v1 + 32);
  if (v4 == *(_DWORD *)(v2 + 32))
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
    if (v4 == v5)
    {
      sub_21B856D18(a1);
      return;
    }
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
  }
  uint64_t v10 = v5;
  if (v5) {
    BOOL v6 = *(_DWORD *)(v1 + 12) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0) {
    sub_21B857960(&v10, v1, v2);
  }
}

uint64_t *sub_21B856D18(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 36);
  unsigned int v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    int v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      int v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
      {
        return sub_21B856E1C(result);
      }
    }
    else
    {
      int v6 = *(_DWORD *)(v1 + 16);
    }
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v14 = v9 * v6 * v4;
    if (v9) {
      BOOL v10 = v4 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0) {
      return sub_21B8570FC(&v14, (char **)v1, (char **)v2);
    }
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v1 + 8);
    uint64_t v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(void *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24)) {
      return sub_21B85745C(&v14, v1, v2);
    }
  }
  return result;
}

uint64_t *sub_21B856E1C(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 44);
  unsigned int v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    uint64_t v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    int v6 = *(char **)v1;
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v5)
    {
      return result;
    }
    unsigned int v12 = *(char **)v2;
    return (uint64_t *)memmove(v12, v6, 4 * v5);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v1 + 8);
    unsigned int v9 = *(_DWORD *)(v1 + 12);
    unsigned int v10 = *(_DWORD *)(v1 + 16);
    uint64_t v13 = v9 * v8 * v10 * v4;
    v11.i64[0] = __PAIR64__(v9, v8);
    v11.i64[1] = __PAIR64__(v4, v10);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24)) {
      return sub_21B856F74(&v13, (char **)v1, (char **)v2);
    }
  }
  return result;
}

uint64_t *sub_21B856F74(uint64_t *result, char **a2, char **a3)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    int v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      unsigned int v4 = result;
      uint64_t v5 = *a2;
      int v6 = *a3;
      int v7 = v3 - 1;
      if (v3 != 1)
      {
        uint64_t v8 = 4 * *((unsigned int *)a2 + 11);
        uint64_t v9 = 4 * *((unsigned int *)a3 + 11);
        do
        {
          uint64_t v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          __int16 result = (uint64_t *)memmove(v6, v5, 4 * v10);
LABEL_7:
          v5 += v8;
          v6 += v9;
          --v7;
        }
        while (v7);
      }
      uint64_t v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
LABEL_15:
        abort();
      }
      return (uint64_t *)memmove(v6, v5, 4 * v11);
    }
  }
  return result;
}

uint64_t *sub_21B8570FC(uint64_t *result, char **a2, char **a3)
{
  int32x4_t v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      uint64_t v5 = result;
      int v6 = *a2;
      int v7 = *a3;
      uint64_t v8 = 4 * *((unsigned int *)a2 + 10);
      uint64_t v9 = 4 * *((unsigned int *)a3 + 10);
      int v29 = v4 - 1;
      int v27 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        uint64_t v10 = *((unsigned int *)a3 + 11);
        uint64_t v11 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          int v12 = 0;
          uint64_t v25 = 4 * v10;
          uint64_t v26 = 4 * v11;
          while (1)
          {
            int v28 = v12;
            uint64_t v13 = v7;
            uint64_t v14 = v6;
            int v15 = v27;
            do
            {
              unsigned int v16 = v14;
              uint64_t v17 = *v5;
              if (!v16 && v17)
              {
                if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  goto LABEL_41;
                }
LABEL_11:
                __int16 result = (uint64_t *)memmove(v13, v16, 4 * v17);
                goto LABEL_12;
              }
              if (v17) {
                goto LABEL_11;
              }
LABEL_12:
              uint64_t v14 = &v16[v8];
              v13 += v9;
              --v15;
            }
            while (v15);
            uint64_t v18 = *v5;
            if (!v16 && v18)
            {
              if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
LABEL_7:
                __int16 result = (uint64_t *)memmove(v13, &v16[v8], 4 * v18);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v18) {
              goto LABEL_7;
            }
LABEL_8:
            v6 += v26;
            v7 += v25;
            int v12 = v28 + 1;
            if (v28 + 1 == v29) {
              goto LABEL_29;
            }
          }
        }
        uint64_t v19 = 4 * v11;
        uint64_t v20 = 4 * v10;
        do
        {
          uint64_t v21 = *v5;
          if (!v6 && v21)
          {
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_41;
            }
          }
          else if (!v21)
          {
            goto LABEL_24;
          }
          __int16 result = (uint64_t *)memmove(v7, v6, 4 * v21);
LABEL_24:
          v6 += v19;
          v7 += v20;
          --v29;
        }
        while (v29);
      }
LABEL_29:
      for (int i = v27; i; --i)
      {
        uint64_t v23 = *v5;
        if (!v6 && v23)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_41;
          }
        }
        else if (!v23)
        {
          goto LABEL_33;
        }
        __int16 result = (uint64_t *)memmove(v7, v6, 4 * v23);
LABEL_33:
        v6 += v8;
        v7 += v9;
      }
      uint64_t v24 = *v5;
      if (v6 || !v24)
      {
        if (!v24) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_41;
      }
      return (uint64_t *)memmove(v7, v6, 4 * v24);
    }
  }
  return result;
}

uint64_t *sub_21B85745C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      int v14 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v7 = *(unsigned int *)(a2 + 32);
      uint64_t v8 = *(unsigned int *)(a3 + 32);
      unint64_t v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v13 = 0;
      int v16 = v6 - 1;
      uint64_t v17 = v7 | (v8 << 32);
      __int32 v18 = v3 - 1;
      uint64_t v9 = *(unsigned int *)(a2 + 40);
      uint64_t v10 = *(unsigned int *)(a3 + 40);
      unint64_t v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v20 = v4 - 1;
      uint64_t v21 = v9 | (v10 << 32);
      int v22 = HIDWORD(v4) - 1;
      unint64_t v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      uint64_t v11 = *(char **)a2;
      int v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return (uint64_t *)sub_21B857544((unsigned int *)&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_21B857544(unsigned int *a1, uint64_t a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  if (a1[14])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      uint64_t v26 = __src;
      int v27 = __dst;
      uint64_t v11 = __dst;
      int v12 = __src;
      if (a1[11]) {
        break;
      }
LABEL_3:
      sub_21B8577BC(a1, (char **)a2, a3, v12, v11);
      __src = &v26[4 * a1[15]];
      std::string __dst = &v27[a1[16]];
      int v10 = v25 + 1;
      if (v25 + 1 >= a1[14]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    int v12 = v26;
    uint64_t v11 = v27;
    while (1)
    {
      unint64_t v14 = a1[3] | ((unint64_t)a1[6] << 32);
      unint64_t v15 = a1[4] | ((unint64_t)a1[7] << 32);
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v15;
      unsigned int v16 = a1[8];
      uint64_t v17 = v11;
      __int32 v18 = v12;
      if (v16)
      {
        int v19 = 0;
        __int32 v18 = v12;
        uint64_t v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          uint64_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          int v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += 4 * a1[9];
          v17 += a1[10];
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        int v20 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, 4 * v21);
        unsigned int v16 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      uint64_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += 4 * a1[12];
      v11 += a1[13];
      if (++v13 >= a1[11]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    uint64_t v17 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, 4 * v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B8577BC(a1, (char **)a2, a3, __src, __dst);
      __src += 4 * a1[12];
      __dst += a1[13];
      ++v23;
    }
    while (v23 < a1[11]);
  }

  return sub_21B8577BC(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_21B8577BC(unsigned int *result, char **a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  int32x4_t v5 = __dst;
  int v6 = __src;
  unint64_t v9 = result[3] | ((unint64_t)result[6] << 32);
  unint64_t v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  unsigned int v11 = result[8];
  if (v11)
  {
    int v12 = result;
    int v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      uint64_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      __int16 result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += 4 * v12[9];
      v5 += v12[10];
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    __int16 result = (unsigned int *)a2[2];
LABEL_4:
    __int16 result = (unsigned int *)memmove(result, v6, 4 * v14);
    unsigned int v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  uint64_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    int32x4_t v5 = (unsigned int *)a2[2];
  }

  return (unsigned int *)memmove(v5, v6, 4 * v15);
}

uint64_t *sub_21B857960(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = result;
      int v16 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v8 = *(unsigned int *)(a2 + 32);
      uint64_t v9 = *(unsigned int *)(a3 + 32);
      unint64_t v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v15 = 0;
      int v18 = v6 - 1;
      uint64_t v19 = v8 | (v9 << 32);
      __int32 v20 = v3 - 1;
      uint64_t v10 = *(unsigned int *)(a2 + 40);
      uint64_t v11 = *(unsigned int *)(a3 + 40);
      unint64_t v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v22 = v4 - 1;
      uint64_t v23 = v10 | (v11 << 32);
      unint64_t v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      int v12 = *(char **)a2;
      int v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      unsigned int v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        unsigned int v14 = 0;
        do
        {
          sub_21B857A9C(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += 4 * v25;
          v13 += 4 * HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (uint64_t *)sub_21B857A9C(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_21B857A9C(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  if (a1[11])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      uint64_t v26 = __src;
      int v27 = __dst;
      uint64_t v11 = __dst;
      int v12 = __src;
      if (a1[8]) {
        break;
      }
LABEL_3:
      sub_21B857D10(a1, a2, a3, v12, v11);
      __src = &v26[4 * a1[12]];
      std::string __dst = &v27[4 * a1[13]];
      int v10 = v25 + 1;
      if ((v25 + 1) >= a1[11]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    int v12 = v26;
    uint64_t v11 = v27;
    while (1)
    {
      int v14 = a1[3];
      int v15 = a1[4];
      *(void *)a2 = v12;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 24) = v15;
      unsigned int v16 = a1[5];
      unint64_t v17 = v11;
      int v18 = v12;
      if (v16)
      {
        int v19 = 0;
        int v18 = v12;
        unint64_t v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          uint64_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          __int32 v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += 4 * a1[6];
          v17 += 4 * a1[7];
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        __int32 v20 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, 4 * v21);
        unsigned int v16 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      uint64_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += 4 * a1[9];
      v11 += 4 * a1[10];
      if (++v13 >= a1[8]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    unint64_t v17 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, 4 * v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B857D10(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v23;
    }
    while (v23 < a1[8]);
  }

  return sub_21B857D10(a1, a2, a3, __src, __dst);
}

_DWORD *sub_21B857D10(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  int32x4_t v5 = __dst;
  int v6 = __src;
  int v9 = result[3];
  int v10 = result[4];
  *(void *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  unsigned int v11 = result[5];
  if (v11)
  {
    int v12 = result;
    int v13 = 0;
    while (1)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 16) = v5;
      uint64_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      __int16 result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    __int16 result = *(_DWORD **)(a2 + 16);
LABEL_4:
    __int16 result = memmove(result, v6, 4 * v14);
    unsigned int v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  uint64_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    int32x4_t v5 = *(char **)(a2 + 16);
  }

  return memmove(v5, v6, 4 * v15);
}

float sub_21B857EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      int v15 = *(_DWORD *)(a2 + 8) - 1;
      uint64_t v7 = *(unsigned int *)(a2 + 32);
      uint64_t v8 = *(unsigned int *)(a3 + 32);
      unint64_t v16 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      uint64_t v14 = 0;
      int v17 = v6 - 1;
      uint64_t v18 = v7 | (v8 << 32);
      __int32 v19 = v3 - 1;
      uint64_t v9 = *(unsigned int *)(a2 + 40);
      uint64_t v10 = *(unsigned int *)(a3 + 40);
      unint64_t v20 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      int v21 = v4 - 1;
      uint64_t v22 = v9 | (v10 << 32);
      int v23 = HIDWORD(v4) - 1;
      unint64_t v24 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      unsigned int v11 = *(_DWORD **)a2;
      int v12 = *(_DWORD **)a3;
      char v25 = 0;
      *(float *)&uint64_t v4 = sub_21B857F94(&v14, (uint64_t)&v25, a1, v11, v12);
    }
  }
  return *(float *)&v4;
}

float sub_21B857F94(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  if (a1[14])
  {
    int v10 = 0;
    while (1)
    {
      int v128 = v10;
      int v11 = v9[11];
      v129 = a4;
      int v130 = a5;
      if (v11) {
        break;
      }
LABEL_3:
      uint64_t v8 = a2;
      uint64_t v7 = a3;
      sub_21B858634(v9, a2, a3, a4, a5);
      a4 = &v129[v9[15]];
      a5 = &v130[v9[16]];
      int v10 = v128 + 1;
      if ((v128 + 1) >= v9[14]) {
        goto LABEL_64;
      }
    }
    int v12 = v9[8];
    int v13 = v9[5];
    uint64_t v14 = v9[12];
    uint64_t v15 = v9[13];
    int v16 = v9[2];
    if (v12)
    {
      uint64_t v18 = v9[9];
      uint64_t v17 = v9[10];
      if (v13)
      {
        uint64_t v134 = v14;
        uint64_t v19 = v9[6];
        uint64_t v20 = v9[7];
        uint64_t v21 = v18;
        uint64_t v22 = 4 * v19;
        uint64_t v133 = v15;
        uint64_t v23 = v17;
        uint64_t v24 = 4 * v20;
        if (v16)
        {
          int v25 = 0;
          uint64_t v26 = 4 * v9[3];
          uint64_t v27 = 4 * v9[4];
          int v28 = &a4[(unint64_t)v22 / 4];
          int v29 = &a5[(unint64_t)v24 / 4];
          long long v30 = &a4[v21];
          int v31 = &a5[v23];
          int v32 = &a4[v18 + v19];
          int v33 = &a4[(unint64_t)v22 / 4 + v21];
          uint64_t v34 = &a5[v17 + v20];
          uint64_t v35 = &a5[(unint64_t)v24 / 4 + v23];
          int v132 = v9[11];
          do
          {
            int v143 = v25;
            int v36 = 0;
            uint64_t v135 = v35;
            uint64_t v136 = v34;
            uint64_t v137 = v33;
            v138 = v32;
            __int16 v37 = v33;
            v139 = v31;
            unsigned int v140 = v30;
            int v38 = v31;
            int v141 = v29;
            v142 = v28;
            v144 = a5;
            uint64_t v39 = a5;
            uint64_t v40 = a4;
            do
            {
              int v41 = 0;
              uint64_t v42 = v30;
              long long v43 = v38;
              int v44 = v32;
              int v45 = v37;
              __int16 v46 = v34;
              long long v47 = v35;
              uint64_t v48 = v29;
              int v49 = v28;
              __int16 v50 = v39;
              long long v51 = v40;
              do
              {
                uint64_t v52 = v49;
                int v53 = v48;
                __int16 v54 = v50;
                __n128 v55 = v51;
                int v56 = v16;
                do
                {
                  *__int16 v54 = *v55;
                  __n128 v55 = (_DWORD *)((char *)v55 + v26);
                  __int16 v54 = (_DWORD *)((char *)v54 + v27);
                  --v56;
                }
                while (v56);
                *__int16 v54 = *v55;
                long long v51 = (_DWORD *)((char *)v51 + v22);
                __int16 v50 = (_DWORD *)((char *)v50 + v24);
                ++v41;
                int v49 = &v52[(unint64_t)v22 / 4];
                uint64_t v48 = &v53[(unint64_t)v24 / 4];
              }
              while (v41 != v13);
              int v57 = v16;
              do
              {
                *int v53 = *v52;
                uint64_t v52 = (_DWORD *)((char *)v52 + v26);
                int v53 = (_DWORD *)((char *)v53 + v27);
                --v57;
              }
              while (v57);
              uint64_t v40 = (_DWORD *)((char *)v40 + v21 * 4);
              uint64_t v39 = (_DWORD *)((char *)v39 + v23 * 4);
              ++v36;
              int v28 = (_DWORD *)((char *)v28 + v21 * 4);
              *int v53 = *v52;
              int v29 = (_DWORD *)((char *)v29 + v23 * 4);
              long long v30 = &v42[v21];
              int v38 = &v43[v23];
              int v32 = &v44[v21];
              __int16 v37 = &v45[v21];
              uint64_t v34 = &v46[v23];
              uint64_t v35 = &v47[v23];
            }
            while (v36 != v12);
            int v58 = 0;
            uint64_t v9 = a1;
            do
            {
              unint64_t v59 = v44;
              unsigned int v60 = v45;
              uint64_t v61 = v46;
              unint64_t v62 = v47;
              unsigned int v63 = v43;
              int v64 = v42;
              int v65 = v16;
              do
              {
                *unsigned int v63 = *v64;
                int v64 = (_DWORD *)((char *)v64 + v26);
                unsigned int v63 = (_DWORD *)((char *)v63 + v27);
                --v65;
              }
              while (v65);
              uint64_t v42 = (_DWORD *)((char *)v42 + v22);
              long long v43 = (_DWORD *)((char *)v43 + v24);
              ++v58;
              int v44 = (int *)((char *)v44 + v22);
              *unsigned int v63 = *v64;
              int v45 = (_DWORD *)((char *)v45 + v22);
              __int16 v46 = &v61[(unint64_t)v24 / 4];
              long long v47 = (_DWORD *)((char *)v47 + v24);
            }
            while (v58 != v13);
            int v66 = v16;
            do
            {
              unint64_t v59 = (int *)((char *)v59 + v26);
              _DWORD *v62 = *v60;
              unsigned int v60 = (_DWORD *)((char *)v60 + v26);
              uint64_t v61 = (_DWORD *)((char *)v61 + v27);
              unint64_t v62 = (_DWORD *)((char *)v62 + v27);
              --v66;
            }
            while (v66);
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = &v144[v133];
            int v67 = *v59;
            int v25 = v143 + 1;
            int v28 = &v142[v134];
            *uint64_t v61 = v67;
            int v29 = &v141[v133];
            long long v30 = &v140[v134];
            int v31 = &v139[v133];
            int v32 = &v138[v134];
            int v33 = &v137[v134];
            uint64_t v34 = &v136[v133];
            uint64_t v35 = &v135[v133];
          }
          while (v143 + 1 != v132);
        }
        else
        {
          int v105 = 0;
          v106 = &a4[v21];
          int v107 = &a5[v23];
          do
          {
            int v108 = 0;
            v109 = v107;
            v110 = v106;
            v111 = a5;
            v112 = a4;
            do
            {
              v113 = v110;
              int v114 = v109;
              v115 = v111;
              v116 = v112;
              int v117 = v13;
              do
              {
                _DWORD *v115 = *v116;
                v116 = (_DWORD *)((char *)v116 + v22);
                v115 = (_DWORD *)((char *)v115 + v24);
                --v117;
              }
              while (v117);
              _DWORD *v115 = *v116;
              v112 = (_DWORD *)((char *)v112 + v21 * 4);
              v111 = (_DWORD *)((char *)v111 + v23 * 4);
              ++v108;
              v110 = &v113[v21];
              v109 = &v114[v23];
            }
            while (v108 != v12);
            int v118 = v13;
            do
            {
              *int v114 = *v113;
              v113 = (_DWORD *)((char *)v113 + v22);
              int v114 = (_DWORD *)((char *)v114 + v24);
              --v118;
            }
            while (v118);
            *int v114 = *v113;
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = (_DWORD *)((char *)a5 + v133 * 4);
            ++v105;
            v106 = (_DWORD *)((char *)v106 + v134 * 4);
            int v107 = (_DWORD *)((char *)v107 + v133 * 4);
          }
          while (v105 != v11);
        }
      }
      else
      {
        int v85 = 0;
        if (v16)
        {
          uint64_t v86 = 4 * v14;
          uint64_t v87 = v18;
          uint64_t v88 = 4 * v9[3];
          uint64_t v89 = 4 * v15;
          uint64_t v90 = v17;
          uint64_t v91 = 4 * v9[4];
          uint64_t v92 = &a4[v18];
          unsigned int v93 = &a5[v90];
          do
          {
            int v94 = 0;
            uint64_t v95 = v93;
            uint64_t v96 = v92;
            uint64_t v97 = a5;
            int v98 = a4;
            do
            {
              uint64_t v99 = v96;
              uint64_t v100 = v95;
              uint64_t v101 = v97;
              uint64_t v102 = v98;
              int v103 = v16;
              do
              {
                *uint64_t v101 = *v102;
                uint64_t v102 = (_DWORD *)((char *)v102 + v88);
                uint64_t v101 = (_DWORD *)((char *)v101 + v91);
                --v103;
              }
              while (v103);
              *uint64_t v101 = *v102;
              int v98 = (_DWORD *)((char *)v98 + v87 * 4);
              uint64_t v97 = (_DWORD *)((char *)v97 + v90 * 4);
              ++v94;
              uint64_t v96 = &v99[v87];
              uint64_t v95 = &v100[v90];
            }
            while (v94 != v12);
            int v104 = v16;
            do
            {
              *uint64_t v100 = *v99;
              uint64_t v99 = (_DWORD *)((char *)v99 + v88);
              uint64_t v100 = (_DWORD *)((char *)v100 + v91);
              --v104;
            }
            while (v104);
            *uint64_t v100 = *v99;
            a4 = (_DWORD *)((char *)a4 + v86);
            a5 = (_DWORD *)((char *)a5 + v89);
            ++v85;
            uint64_t v92 = (_DWORD *)((char *)v92 + v86);
            unsigned int v93 = (_DWORD *)((char *)v93 + v89);
          }
          while (v85 != v11);
        }
        else
        {
          uint64_t v119 = 4 * v18;
          uint64_t v120 = 4 * v15;
          do
          {
            v121 = a5;
            v122 = a4;
            int v123 = v12;
            do
            {
              _DWORD *v121 = *v122;
              v122 = (_DWORD *)((char *)v122 + v119);
              v121 += v17;
              --v123;
            }
            while (v123);
            _DWORD *v121 = *v122;
            a4 += v14;
            a5 = (_DWORD *)((char *)a5 + v120);
            ++v85;
          }
          while (v85 != v11);
        }
      }
      goto LABEL_3;
    }
    uint64_t v68 = 4 * v14;
    uint64_t v69 = 4 * v15;
    while (1)
    {
      __int32 v70 = a5;
      uint64_t v71 = a4;
      if (!v13) {
        goto LABEL_33;
      }
      uint64_t v73 = v9[6];
      uint64_t v72 = v9[7];
      if (v16) {
        break;
      }
      uint64_t v83 = 4 * v73;
      __int32 v70 = a5;
      uint64_t v71 = a4;
      int v84 = v13;
      do
      {
        *__int32 v70 = *v71;
        uint64_t v71 = (_DWORD *)((char *)v71 + v83);
        v70 += v72;
        --v84;
      }
      while (v84);
LABEL_26:
      *__int32 v70 = *v71;
      a4 = (_DWORD *)((char *)a4 + v68);
      a5 = (_DWORD *)((char *)a5 + v69);
      if (++v12 == v11) {
        goto LABEL_3;
      }
    }
    int v74 = 0;
    uint64_t v75 = 4 * v9[3];
    uint64_t v76 = 4 * v9[4];
    __int32 v70 = a5;
    uint64_t v71 = a4;
    do
    {
      v77 = v70;
      unsigned __int8 v78 = v71;
      int v79 = v16;
      do
      {
        _DWORD *v77 = *v78;
        unsigned __int8 v78 = (_DWORD *)((char *)v78 + v75);
        v77 = (_DWORD *)((char *)v77 + v76);
        --v79;
      }
      while (v79);
      _DWORD *v77 = *v78;
      v71 += v73;
      v70 += v72;
      ++v74;
    }
    while (v74 != v13);
LABEL_33:
    if (v16)
    {
      uint64_t v80 = v9[3];
      uint64_t v81 = 4 * v9[4];
      int v82 = v16;
      do
      {
        *__int32 v70 = *v71;
        v71 += v80;
        __int32 v70 = (_DWORD *)((char *)v70 + v81);
        --v82;
      }
      while (v82);
    }
    goto LABEL_26;
  }
LABEL_64:
  if (v9[11])
  {
    unsigned int v124 = 0;
    do
    {
      sub_21B858634(v9, v8, v7, a4, a5);
      a4 += v9[12];
      a5 += v9[13];
      ++v124;
    }
    while (v124 < v9[11]);
  }

  return sub_21B858634(v9, v8, v7, a4, a5);
}

float sub_21B858634(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = a1[8];
  int v6 = a1[5];
  if (v5)
  {
    int v7 = a1[2];
    uint64_t v8 = a1[9];
    uint64_t v9 = a1[10];
    if (v6)
    {
      uint64_t v10 = a1[6];
      uint64_t v11 = a1[7];
      if (!v7)
      {
        uint64_t v52 = 4 * v8;
        uint64_t v53 = 4 * v10;
        uint64_t v54 = 4 * v9;
        uint64_t v55 = 4 * v11;
        do
        {
          int v56 = a5;
          int v57 = a4;
          int v58 = v6;
          do
          {
            *int v56 = *v57;
            int v57 = (_DWORD *)((char *)v57 + v53);
            int v56 = (_DWORD *)((char *)v56 + v55);
            --v58;
          }
          while (v58);
          *int v56 = *v57;
          a4 = (_DWORD *)((char *)a4 + v52);
          a5 = (_DWORD *)((char *)a5 + v54);
          ++v7;
        }
        while (v7 != v5);
        uint64_t v32 = a1[6];
        uint64_t v33 = a1[7];
        goto LABEL_34;
      }
      int v12 = 0;
      uint64_t v13 = 4 * v8;
      uint64_t v14 = v10;
      uint64_t v15 = 4 * a1[3];
      uint64_t v16 = 4 * v9;
      uint64_t v17 = v11;
      uint64_t v18 = 4 * a1[4];
      uint64_t v19 = &a4[v14];
      uint64_t v20 = &a5[v17];
      do
      {
        int v21 = 0;
        uint64_t v22 = v20;
        uint64_t v23 = v19;
        uint64_t v24 = a5;
        int v25 = a4;
        do
        {
          uint64_t v26 = v23;
          uint64_t v27 = v22;
          int v28 = v24;
          int v29 = v25;
          int v30 = v7;
          do
          {
            *int v28 = *v29;
            int v29 = (_DWORD *)((char *)v29 + v15);
            int v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *int v28 = *v29;
          int v25 = (_DWORD *)((char *)v25 + v14 * 4);
          uint64_t v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          uint64_t v23 = &v26[v14];
          uint64_t v22 = &v27[v17];
        }
        while (v21 != v6);
        int v31 = v7;
        do
        {
          *uint64_t v27 = *v26;
          uint64_t v26 = (_DWORD *)((char *)v26 + v15);
          uint64_t v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *uint64_t v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        uint64_t v19 = (_DWORD *)((char *)v19 + v13);
        uint64_t v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      uint64_t v32 = a1[6];
      uint64_t v33 = a1[7];
      if (v7)
      {
        int v34 = 0;
        uint64_t v35 = 4 * v32;
        uint64_t v36 = 4 * a1[3];
        uint64_t v37 = 4 * v33;
        uint64_t v38 = 4 * a1[4];
        do
        {
          uint64_t v39 = a5;
          uint64_t v40 = a4;
          int v41 = v7;
          do
          {
            *uint64_t v39 = *v40;
            uint64_t v40 = (_DWORD *)((char *)v40 + v36);
            uint64_t v39 = (_DWORD *)((char *)v39 + v38);
            --v41;
          }
          while (v41);
          *uint64_t v39 = *v40;
          a4 = (_DWORD *)((char *)a4 + v35);
          a5 = (_DWORD *)((char *)a5 + v37);
          ++v34;
        }
        while (v34 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        *a5 = *a4;
        a4 += v32;
        a5 += v33;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_37;
    }
    int v42 = 0;
    uint64_t v43 = 4 * v8;
    uint64_t v44 = 4 * a1[3];
    uint64_t v45 = 4 * v9;
    uint64_t v46 = 4 * a1[4];
    do
    {
      long long v47 = a5;
      uint64_t v48 = a4;
      int v49 = v7;
      do
      {
        *long long v47 = *v48;
        uint64_t v48 = (_DWORD *)((char *)v48 + v44);
        long long v47 = (_DWORD *)((char *)v47 + v46);
        --v49;
      }
      while (v49);
      *long long v47 = *v48;
      a4 = (_DWORD *)((char *)a4 + v43);
      a5 = (_DWORD *)((char *)a5 + v45);
      ++v42;
    }
    while (v42 != v5);
  }
  else
  {
    int v7 = a1[2];
    if (v6) {
      goto LABEL_14;
    }
  }
LABEL_25:
  if (v7)
  {
    uint64_t v50 = 4 * a1[3];
    uint64_t v51 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v50);
      a5 = (_DWORD *)((char *)a5 + v51);
      --v7;
    }
    while (v7);
  }
LABEL_37:
  float result = *(float *)a4;
  *a5 = *a4;
  return result;
}

void sub_21B8588D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v3 = a2 + 56;
    nullsub_82(a2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = v3;
    }
    nullsub_82(v5);
  }
}

void sub_21B858994(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v3 = a2 + 56;
    nullsub_82(a2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = v3;
    }
    nullsub_82(v5);
  }
}

uint64_t sub_21B858A50(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(unsigned char *)(result + 128)) {
      return result;
    }
    uint64_t v3 = *(unsigned int *)(result + 120);
    uint64_t v4 = *(unsigned int *)(a2 + 120);
    if (v3 != -1)
    {
      if (v4 == -1)
      {
        float result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CB954A0[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      uint64_t v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26CB955D0[v4])(&v7, result, a2);
    }
    if (v4 != -1) {
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(result + 128))
  {
    uint64_t v5 = *(unsigned int *)(result + 120);
    if (v5 != -1) {
      float result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CB954A0[v5])(&v9, result, a2);
    }
    *(_DWORD *)(v2 + 120) = -1;
    *(unsigned char *)(v2 + 128) = 0;
  }
  else
  {
    *(unsigned char *)float result = 0;
    *(_DWORD *)(result + 120) = -1;
    uint64_t v6 = *(unsigned int *)(a2 + 120);
    if (v6 != -1)
    {
      float result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CB955E8[v6])(&v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(unsigned char *)(v2 + 128) = 1;
  }
  return result;
}

void sub_21B858B90(uint64_t a1, unsigned char *a2)
{
  *(void *)a1 = &unk_26CB95650;
  *(unsigned char *)(a1 + 8) = *a2;
  operator new();
}

void sub_21B858C68(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v2, 0x1012C40EC159624);
  nullsub_82(v1);
  _Unwind_Resume(a1);
}

void sub_21B858CAC(_Unwind_Exception *a1)
{
  nullsub_82(v1);
  _Unwind_Resume(a1);
}

void sub_21B858CC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B858CFC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B858D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021B9A1839) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021B9A1839 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021B9A1839)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021B9A1839 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_21B858DE8()
{
}

__n128 sub_21B858DFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B858E48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B858E78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B858E80(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_"
                                "config_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B858EF0()
{
  return &unk_26CB95ED8;
}

void sub_21B858F00()
{
}

__n128 sub_21B858F14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B858F60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B858F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B858F98(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B859008()
{
  return &unk_26CB95F58;
}

void sub_21B859018()
{
}

__n128 sub_21B85902C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B859078(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8590A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B8590B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_"
                                "optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B859120()
{
  return &unk_26CB95FD8;
}

void sub_21B85912C()
{
}

void sub_21B8591F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B859228()
{
}

__n128 sub_21B85923C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB95FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B859288(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB95FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8592B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B8592C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B859330()
{
  return &unk_26CB96058;
}

void sub_21B859340()
{
}

__n128 sub_21B859354(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB96078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8593A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB96078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8593D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B8593D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B859448()
{
  return &unk_26CB960D8;
}

void sub_21B859458()
{
}

__n128 sub_21B85946C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB960F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8594B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB960F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8594E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B8594F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_"
                     "create_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_"
                                "compute_op_create_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B859560()
{
  return &unk_26CB96158;
}

unsigned __int8 *sub_21B85956C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_21B849E2C((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v15 + 5) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      *uint64_t v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  *uint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_21B859980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B859998(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8599B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96178;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B859A0C(uint64_t a1)
{
  return sub_21B939BE0(a1 + 24);
}

uint64_t *sub_21B859A18(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21B849E2C((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint8x8_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  sub_21B859E6C((char *)v25 + 16, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v28 = *(void **)(*(void *)a1 + 8 * v10);
        float v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      long long v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      float v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *float v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  long long v28 = *(void **)(*(void *)a1 + 8 * v3);
  float v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *float v29 = *v28;
  *long long v28 = v41[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_21B859E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B849DD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B859E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B849DD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_21B859E6C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  *((void *)__dst + 3) = v5;
  *((void *)__dst + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)__dst + 5) = v6;
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)__dst + 6) = v7;
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (v7)
  {
    unint64_t v8 = *(void *)(v6 + 8);
    unint64_t v9 = *((void *)__dst + 4);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(void *)(v5 + 8 * v8) = __dst + 40;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
  }
  uint64_t v10 = *((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  *((void *)__dst + 8) = v10;
  *((void *)__dst + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = 0;
  uint64_t v11 = *((void *)a2 + 10);
  *((void *)__dst + 10) = v11;
  uint64_t v12 = *((void *)a2 + 11);
  *((void *)__dst + 11) = v12;
  *((_DWORD *)__dst + 24) = *((_DWORD *)a2 + 24);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    unint64_t v14 = *((void *)__dst + 9);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(v10 + 8 * v13) = __dst + 80;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
  }
  *(_OWORD *)(__dst + 104) = *(long long *)((char *)a2 + 104);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)__dst + 15) = *((void *)a2 + 15);
  return __dst;
}

uint64_t *sub_21B859FB0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_21B849E2C((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_21B85A1E4()
{
}

__n128 sub_21B85A1F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB961C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B85A244(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB961C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B85A274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B85A27C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B85A2EC()
{
  return &unk_26CB96228;
}

void sub_21B85A2F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B85A318(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96248;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B85A36C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21B85A394(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_21B8491D4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (int i = *(void **)(a2 + 16); i; int i = (void *)*i)
    sub_21B85A4D8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_21B85A4B0(_Unwind_Exception *a1)
{
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

void sub_21B85A4C4(_Unwind_Exception *a1)
{
  sub_21B83C4CC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B85A4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21B849E2C((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *char v25 = 0;
  v25[1] = v10;
  float v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21B846188(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)float v26 = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  v25[5] = *(void *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v29 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      float v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      BOOL v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  float v29 = *(void **)(*(void *)a1 + 8 * v3);
  BOOL v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v30 = *v29;
  *float v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_21B85A920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B85A934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B85A94C(const char **a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11 = a1 - a3;
  if (v11 >= -1) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = a1 - a3;
  }
  std::string::size_type v13 = a5 * ~v12;
  *(void *)&long long v27 = a1;
  *((void *)&v27 + 1) = a2;
  int64_t v22 = (char *)a1 - (char *)a3;
  uint64_t v14 = 0;
  if (a1 != a3)
  {
    char v15 = a1;
    do
    {
      sub_21B85AB8C((uint64_t)&v27 + 8, v15);
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v16 = v26;
      }
      else {
        std::string::size_type v16 = v25;
      }
      if ((char)v26 < 0) {
        operator delete(__p);
      }
      v14 += v16;
      char v15 = (const char **)(v27 + 8);
      *(void *)&long long v27 = v15;
    }
    while (v15 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(void *)&long long v27 = a1;
  *((void *)&v27 + 1) = a2;
  if (v22 < 0)
  {
    sub_21B85AB8C((uint64_t)&v27 + 8, a1);
    if ((v26 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v26 & 0x80u) == 0) {
      std::string::size_type v18 = v26;
    }
    else {
      std::string::size_type v18 = v25;
    }
    std::string::append(a6, p_p, v18);
    if ((char)v26 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v11 + 1) < 2) {
        return;
      }
    }
    else if ((unint64_t)(v11 + 1) < 2)
    {
      return;
    }
    *(void *)&long long v27 = v27 + 8;
    for (long long i = v27; (const char **)i != a3; *(void *)&long long i = i + 8)
    {
      std::string::append(a6, a4, a5);
      sub_21B85AB8C((uint64_t)&i + 8, (const char **)i);
      if ((v26 & 0x80u) == 0) {
        uint64_t v19 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v19 = (const std::string::value_type *)__p;
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v20 = v26;
      }
      else {
        std::string::size_type v20 = v25;
      }
      std::string::append(a6, v19, v20);
      if ((char)v26 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_21B85AB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B85AB8C(uint64_t a1, const char **a2)
{
  int v4 = 0;
  if (*a2) {
    sub_21B85AC74(v3, a2);
  }
  else {
    sub_21B84CA68(v3, "nullptr");
  }
  if (v4 == -1) {
    sub_21B84C734();
  }
  v6[0] = &v5;
  uint64_t result = ((uint64_t (*)(void *, _DWORD *))off_26CB95918[v4])(v6, v3);
  if (v4 != -1) {
    return ((uint64_t (*)(void *, _DWORD *))off_26CB958A0[v4])(v6, v3);
  }
  return result;
}

void sub_21B85AC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_26CB958A0[a13])(v13 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21B85AC74(_DWORD *a1, const char **a2)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB958A0[v4])(&v12, a1);
  }
  a1[6] = -1;
  char v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v8 = operator new(v9 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    unint64_t v8 = a1;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((unsigned char *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B85AD70()
{
}

__n128 sub_21B85AD84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26CB96298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B85ADD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26CB96298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B85AE00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B85AE08(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B85AE78()
{
  return &unk_26CB962F8;
}

void sub_21B85AE84(uint64_t a1)
{
  *(void *)a1 = &unk_26CB95650;
  *(unsigned char *)(a1 + 8) = 0;
  operator new();
}

void sub_21B85AF34(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  MEMORY[0x21D495F30](v2, 0x1012C40EC159624);
  nullsub_82(v1);
  _Unwind_Resume(a1);
}

void sub_21B85AF70(_Unwind_Exception *a1)
{
  nullsub_82(v1);
  _Unwind_Resume(a1);
}

void sub_21B85AF88()
{
}

__n128 sub_21B85AF9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26CB96318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21B85AFF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB96318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B85B028(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a1 + 24);
}

uint64_t sub_21B85B034(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_executi"
                     "on_streamEJS8_SB_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e"
                                "5rt_execution_streamEJS8_SB_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B85B0A4()
{
  return &unk_26CB96378;
}

uint64_t *sub_21B85B0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21B849E2C((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::string::size_type v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)std::string::size_type v25 = 0;
  *((void *)v25 + 1) = v10;
  unsigned __int8 v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21B846188(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unsigned __int8 v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v29 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      float v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      BOOL v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  float v29 = *(void **)(*(void *)a1 + 8 * v3);
  BOOL v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v30 = *v29;
  *float v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_21B85B4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B85B50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84A91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B85B524(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_21B849E2C((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_21B85B754(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_21B849E2C((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t LFDescriptorProgramMetadata(int a1, void *a2)
{
  if (!a2) {
    return 3;
  }
  switch(a1)
  {
    case 0:
    case 3:
      goto LABEL_7;
    case 1:
      sub_21B906C54(0, &cf);
      CFTypeRef v3 = cf;
      if (!cf) {
        break;
      }
      goto LABEL_11;
    case 2:
      sub_21B906C54(1, &cf);
      CFTypeRef v3 = cf;
      if (!cf) {
        break;
      }
      goto LABEL_11;
    case 4:
      sub_21B8E590C(4, &cf);
      CFTypeRef v3 = cf;
      if (cf) {
LABEL_11:
      }
        CFRetain(v3);
      break;
    default:
      if ((a1 - 101) >= 4)
      {
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_21B997215, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_21B984AC4);
        abort();
      }
LABEL_7:
      CFTypeRef v3 = 0;
      CFTypeRef cf = 0;
      int8x8_t v7 = 0;
      break;
  }
  *a2 = v3;
  unint64_t v5 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return 0;
}

void sub_21B85BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *LFV2KeypointsCreate()
{
  uint64_t v0 = operator new(0x20uLL, MEMORY[0x263F8C180]);
  if (v0)
  {
    uint64_t v1 = operator new(0x30uLL);
    v1[1] = 0;
    v1[2] = 0;
    void *v1 = &unk_26CB96A40;
    v1[4] = 0;
    void v1[5] = 0;
    v1[3] = 0;
    v0[1] = v1 + 3;
    v0[2] = v1;
    *((_DWORD *)v0 + 6) = 1;
    *uint64_t v0 = &unk_26CB96910;
  }
  return v0;
}

uint64_t sub_21B85BBB0(void *a1)
{
  MEMORY[0x21D495F20](v1, MEMORY[0x263F8C180]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void LFV2KeypointsAppend(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  *(void *)&long long v6 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((void *)&v6 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  float v7 = a6;
  sub_21B914178(*(void ***)(a1 + 8), &v6);
}

uint64_t LFV2KeypointsRetain(uint64_t result)
{
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 24), 1u);
  }
  return result;
}

atomic_uint *LFV2KeypointsRelease(atomic_uint *result)
{
  if (result)
  {
    if (atomic_fetch_add(result + 6, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

unint64_t LFV2KeypointsGetSize(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 2);
}

uint64_t LFV2KeypointsGetData(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

void *LFV2DescriptorsCreate(int a1, uint64_t a2, size_t __sz, void *a4)
{
  unint64_t v4 = a4;
  if (!a4) {
    return v4;
  }
  size_t v5 = __sz;
  int v6 = a1 == 1;
  if (a1 == 2) {
    int v6 = 2;
  }
  if (v6)
  {
    if (v6 != 2)
    {
      if (a2 == 64)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        if (__sz)
        {
          if (__sz >> 58) {
            sub_21B846300();
          }
          size_t v7 = __sz << 6;
          unint64_t v8 = (char *)operator new(__sz << 6);
          size_t v5 = (size_t)&v8[64 * v5];
          bzero(v8, v7);
          uint8x8_t v9 = &v8[v7];
        }
        else
        {
          uint8x8_t v9 = 0;
          size_t v7 = 0;
          unint64_t v8 = 0;
        }
        memcpy(v8, v4, v7);
        uint64_t v22 = v8;
        uint64_t v23 = v9;
        size_t v24 = v5;
        int v18 = 1;
        goto LABEL_31;
      }
      return 0;
    }
    if (a2 != 128 && a2 != 64) {
      return 0;
    }
    if (a2 == 64)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      if (__sz)
      {
        if (HIBYTE(__sz)) {
          sub_21B846300();
        }
        size_t v15 = __sz << 8;
        uint64_t v16 = (char *)operator new(__sz << 8);
        size_t v5 = (size_t)&v16[256 * v5];
        bzero(v16, v15);
        unint64_t v17 = &v16[v15];
      }
      else
      {
        unint64_t v17 = 0;
        size_t v15 = 0;
        uint64_t v16 = 0;
      }
      memcpy(v16, v4, v15);
      uint64_t v22 = v16;
      uint64_t v23 = v17;
      size_t v24 = v5;
      int v18 = 2;
LABEL_31:
      unsigned int v25 = v18;
      uint64_t v26 = 64;
      int v27 = v18;
      unint64_t v4 = operator new(0x20uLL, MEMORY[0x263F8C180]);
      if (!v4)
      {
LABEL_32:
        uint64_t v19 = v25;
LABEL_36:
        ((void (*)(uint64_t *, char **))off_26CB96388[v19])(&v28, &v22);
        return v4;
      }
      goto LABEL_35;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    if (__sz)
    {
      if (__sz >> 55) {
        sub_21B846300();
      }
      size_t v10 = __sz << 9;
      unint64_t v11 = (char *)operator new(__sz << 9);
      size_t v5 = (size_t)&v11[512 * v5];
      bzero(v11, v10);
      uint8x8_t v12 = &v11[v10];
    }
    else
    {
      uint8x8_t v12 = 0;
      size_t v10 = 0;
      unint64_t v11 = 0;
    }
    memcpy(v11, v4, v10);
    uint64_t v22 = v11;
    uint64_t v23 = v12;
    size_t v24 = v5;
    int v18 = 3;
    unsigned int v25 = 3;
    uint64_t v26 = 128;
    int v27 = 2;
    unint64_t v4 = operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v4) {
      goto LABEL_32;
    }
  }
  else
  {
    if (a2) {
      return 0;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    if (__sz)
    {
      if ((__sz & 0x8000000000000000) != 0) {
        sub_21B846300();
      }
      uint64_t v13 = (char *)operator new(__sz);
      char v14 = &v13[v5];
      bzero(v13, v5);
    }
    else
    {
      char v14 = 0;
      uint64_t v13 = 0;
    }
    memcpy(0, v4, v5);
    int v18 = 0;
    uint64_t v22 = v13;
    uint64_t v23 = v14;
    size_t v24 = (size_t)v14;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    unint64_t v4 = operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v4) {
      goto LABEL_32;
    }
  }
LABEL_35:
  uint64_t v20 = operator new(0x48uLL);
  v20[1] = 0;
  v20[2] = 0;
  *uint64_t v20 = &unk_26CB96A90;
  *((unsigned char *)v20 + 24) = 0;
  *((_DWORD *)v20 + 12) = -1;
  ((void (*)(uint64_t *, void *, char **))off_26CB96AF0[v18])(&v28, v20 + 3, &v22);
  *((_DWORD *)v20 + 12) = v18;
  v20[7] = v26;
  *((_DWORD *)v20 + 16) = v27;
  v4[1] = v20 + 3;
  v4[2] = v20;
  *((_DWORD *)v4 + 6) = 1;
  *unint64_t v4 = &unk_26CB96980;
  uint64_t v19 = v25;
  if (v25 != -1) {
    goto LABEL_36;
  }
  return v4;
}

void sub_21B85C05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B85C08C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  MEMORY[0x21D495F20](v13, MEMORY[0x263F8C180]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a13 != -1) {
    JUMPOUT(0x21B85BFBCLL);
  }
  JUMPOUT(0x21B85BFD4);
}

uint64_t LFV2DescriptorsRetain(uint64_t result)
{
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 24), 1u);
  }
  return result;
}

atomic_uint *LFV2DescriptorsRelease(atomic_uint *result)
{
  if (result)
  {
    if (atomic_fetch_add(result + 6, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

uint64_t LFV2DescriptorsGetType(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 8) + 40);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

uint64_t LFV2DescriptorsGetData(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v4 = &v5;
  uint64_t v5 = 0;
  uint64_t v2 = *(unsigned int *)(v1 + 24);
  if (v2 == -1) {
    sub_21B84C734();
  }
  int v6 = &v4;
  ((void (*)(uint64_t ***))off_26CB9E898[v2])(&v6);
  return v5;
}

uint64_t LFV2DescriptorsGetSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v4 = &v5;
  uint64_t v5 = 0;
  uint64_t v2 = *(unsigned int *)(v1 + 24);
  if (v2 == -1) {
    sub_21B84C734();
  }
  int v6 = &v4;
  ((void (*)(uint64_t ***))off_26CB9E8B8[v2])(&v6);
  return v5;
}

uint64_t LFV2DescriptorsGetDimension(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 32);
}

uint64_t LFV2FeaturesRetain(uint64_t result)
{
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 56), 1u);
  }
  return result;
}

atomic_uint *LFV2FeaturesRelease(atomic_uint *result)
{
  if (result)
  {
    if (atomic_fetch_add(result + 14, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void *LFV2FeaturesGetKeypoints(void *a1)
{
  if (a1[8]) {
    return (void *)a1[8];
  }
  uint64_t v4 = a1[1];
  CFTypeRef v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
  {
    __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!result)
    {
      a1[8] = 0;
      return 0;
    }
LABEL_8:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    void *result = &unk_26CB96910;
    a1[8] = result;
    return result;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
  if (result) {
    goto LABEL_8;
  }
  a1[8] = 0;
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return (void *)a1[8];
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (void *)a1[8];
}

void *LFV2FeaturesGetLocalDescriptors(void *a1)
{
  if (a1[9]) {
    return (void *)a1[9];
  }
  uint64_t v4 = a1[3];
  CFTypeRef v3 = (std::__shared_weak_count *)a1[4];
  if (!v3)
  {
    __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!result)
    {
      a1[9] = 0;
      return 0;
    }
LABEL_8:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    void *result = &unk_26CB96980;
    a1[9] = result;
    return result;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
  if (result) {
    goto LABEL_8;
  }
  a1[9] = 0;
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return (void *)a1[9];
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (void *)a1[9];
}

void *LFV2FeaturesGetGlobalDescriptors(void *a1)
{
  if (a1[10]) {
    return (void *)a1[10];
  }
  uint64_t v4 = a1[5];
  CFTypeRef v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
  {
    __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!result)
    {
      a1[10] = 0;
      return 0;
    }
LABEL_8:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    void *result = &unk_26CB96980;
    a1[10] = result;
    return result;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  __n128 result = operator new(0x20uLL, MEMORY[0x263F8C180]);
  if (result) {
    goto LABEL_8;
  }
  a1[10] = 0;
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return (void *)a1[10];
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (void *)a1[10];
}

uint64_t LFV2HandleCreate(void *a1, unsigned int a2)
{
  if (a2 >= 4)
  {
    switch(a2)
    {
      case 'e':
      case 'f':
      case 'g':
      case 'h':
        break;
      default:
        if (a2 != 4)
        {
          sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_21B997215, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_21B984AC4);
          abort();
        }
        return result;
    }
  }
  if (operator new(0x20uLL, MEMORY[0x263F8C180])) {
    sub_21B862B8C();
  }
  *a1 = 0;
  return 4;
}

void sub_21B85C6C4(void *a1)
{
  MEMORY[0x21D495F20](v1, MEMORY[0x263F8C180]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21B85C664);
}

uint64_t LFV2HandleSupported()
{
  return 1;
}

uint64_t LFV2DescriptorModelVersion(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 2;
  }
  if (!a2) {
    return 3;
  }
  unint64_t v3 = sub_21B862D6C((uint64_t **)(a1 + 8));
  unint64_t v5 = v3;
  if ((v4 & 0xFF00000000) != 0)
  {
    uint64_t result = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v4;
  }
  else if ((v3 - 1) >= 4)
  {
    return 6;
  }
  else
  {
    return *(unsigned int *)&asc_21B9A2DC0[4 * (int)v3 - 4];
  }
  return result;
}

uint64_t LFV2ComputeDescriptors(uint64_t a1, const void *a2, uint64_t a3)
{
  v5[7] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 2;
  }
  uint64_t v3 = 3;
  if (a2 && a3) {
    sub_21B8A1F44((int)v5, a2, 1);
  }
  return v3;
}

void sub_21B85CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B85CB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21B8A14FC(&v12, a1);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v13 + 8);
  if (v3
    && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (uint64_t *)v13;
    if (!v13) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)v13;
    if (!v13) {
      goto LABEL_18;
    }
  }
  uint64_t v6 = *v4;
  unint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    if (v6) {
      goto LABEL_8;
    }
LABEL_18:
    int v8 = 3;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6) {
    goto LABEL_18;
  }
LABEL_8:
  int v7 = sub_21B8A108C((uint64_t)&v12);
  if (v7 == 875704422 || v7 == 875704438) {
    sub_21B8A39A4((uint64_t)&v12, (int)&v11);
  }
  if (v7 == 1278226488)
  {
    v10[0] = &unk_26CB99920;
    v10[1] = v13;
    unsigned char v10[2] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    sub_21B85DE24((uint64_t)v10);
  }
  int v8 = 5;
LABEL_19:
  *(_DWORD *)a2 = v8;
  *(unsigned char *)(a2 + 56) = 0;
  return sub_21B8A1880(&v12);
}

void sub_21B85D498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  sub_21B9732E4(va2);
  sub_21B8A1880((void *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_21B85D4F8(_Unwind_Exception *a1)
{
  sub_21B974934((void *)(v1 - 144));
  sub_21B8A1880((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_21B85D514(_Unwind_Exception *a1)
{
  sub_21B8A1880((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_21B85D528(_Unwind_Exception *a1)
{
  sub_21B8A1880((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_21B85D53C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 56))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t LFV2DetectAndComputeFeatures(uint64_t a1, const void *a2)
{
  if (a1) {
    sub_21B8A1F44((int)&__p, a2, 1);
  }
  return 2;
}

void sub_21B85D8A8(_Unwind_Exception *a1)
{
  sub_21B85D53C(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_21B85D8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B85D8D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 96);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB96388[v2])(&v6, a1 + 72);
    }
    *(_DWORD *)(a1 + 96) = -1;
    uint64_t v3 = *(unsigned int *)(a1 + 48);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_26CB96388[v3])(&v7, a1 + 24);
    }
    *(_DWORD *)(a1 + 48) = -1;
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t LFV2ComputeLocalGlobalDescriptors(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  if (!a1) {
    return 2;
  }
  uint64_t v4 = 3;
  if (pixelBuffer && a3 && *(void *)(*(void *)(a3 + 8) + 8) != **(void **)(a3 + 8))
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    kdebug_trace();
    sub_21B8A1F44((int)&__p, pixelBuffer, 1);
  }
  return v4;
}

void sub_21B85DCCC(void *a1)
{
  MEMORY[0x21D495F20](v1, MEMORY[0x263F8C180]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21B85DB8CLL);
}

void sub_21B85DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_21B85DD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LFV2HandleRelease(atomic_uint *a1)
{
  if (!a1) {
    return 2;
  }
  if (atomic_fetch_add(a1 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a1 + 8))(a1);
  }
  return 0;
}

uint64_t LFV2DescriptorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 8) + 24) = a2;
  return 0;
}

uint64_t LFV2DescriptorResetPSHandle(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 8) + 24) = 0;
  return 0;
}

void sub_21B85DDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_21B85DDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_21B85DDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_21B85DE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_21B85DE24(uint64_t a1)
{
}

void sub_21B85DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_21B85DF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B854034((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B85DF78(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B85DFF4(uint64_t a1)
{
  sub_21B8C94A0(a1, (uint64_t)&v1);
}

void sub_21B85E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_21B85E15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B85F7F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B85E170(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB964B0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B85E208(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unint64_t v4 = a2;
  sub_21B8A19D0(v8, a1);
  sub_21B886F54(v6, (uint64_t)v8, v4);
  sub_21B8A1D54(v8);
  *a3 = &unk_26CB96710;
  sub_21B85F168((uint64_t)v6, (uint64_t)(a3 + 1));
  unint64_t v5 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21B85E2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B85E2F0(_Unwind_Exception *a1)
{
  sub_21B8A1D54((void *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_21B85E304(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B85E380(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B85E40C()
{
  return 1;
}

uint64_t sub_21B85E414(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B85E41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B85E438(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B85E4C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B85E624(a1, (uint64_t)&v9, &v13);
  long long v11 = *(_OWORD *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v5 = v13;
  char v6 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    char v7 = v14;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(_OWORD *)(a2 + 16) = v11;
    *(void *)(a2 + 32) = v12;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 32) = *(void *)(a1 + 40);
  }
  uint64_t v8 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B85E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B85E624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)a2
    || (uint64_t result = __dynamic_cast(*(const void **)a2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB99818, 0)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v9 = a1;
    uint64_t v10 = exception;
    sub_21B85E774(v9, &v11);
    std::logic_error::logic_error(v10, &v11);
    v10->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v10, (struct type_info *)off_2643B88C8, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *a3 = result;
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21B85E734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21B83A360(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

double sub_21B85E774@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v4 = sub_21B85EA88();
  uint64_t v5 = sub_21B85ED54();
  uint64_t v26 = "Attempting to create an ";
  uint64_t v27 = 24;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  uint64_t v28 = (const char *)v7;
  uint64_t v29 = size;
  uint64_t v30 = " from an ";
  uint64_t v31 = 9;
  std::string::size_type v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = v5->__r_.__value_.__l.__size_;
  }
  v32[0] = v9;
  v32[1] = v8;
  sub_21B84F40C((uint64_t)&v26, (uint64_t)&v33, 0, 0, &__p);
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    std::string v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v26 = (const char *)p_p;
    uint64_t v27 = v15;
    uint64_t v28 = " but the other image contains an incompatible buffer type ";
    uint64_t v29 = 58;
    uint64_t v30 = (const char *)v13;
    uint64_t v31 = v14;
    sub_21B84F40C((uint64_t)&v26, (uint64_t)v32, 0, 0, a2);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_21;
    }
    return result;
  }
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 46;
  if (v19 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = (char *)a2;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v20;
LABEL_32:
    if (v18 >= 0) {
      size_t v24 = &__p;
    }
    else {
      size_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v24, v19);
    goto LABEL_36;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  uint64_t v21 = (char *)operator new(v22 + 1);
  a2->__r_.__value_.__l.__size_ = v20;
  a2->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  a2 = (std::string *)v21;
  if (v19) {
    goto LABEL_32;
  }
LABEL_36:
  strcpy(&v21[v19], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v18 & 0x80) != 0) {
LABEL_21:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B85EA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B85EA88()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BB68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BB68))
  {
    sub_21B837058(v6, "ImageView");
    uint64_t v1 = sub_21B84E40C();
    sub_21B85EC98((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84F840();
    sub_21B85EC98((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BB50, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BB50, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BB68);
          return &stru_267C5BB50;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BB50;
}

void sub_21B85EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BB68);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BB68);
  _Unwind_Resume(a1);
}

void sub_21B85EC98(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B85ED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B85ED54()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BB88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BB88))
  {
    sub_21B837058(v6, "ImageView");
    uint64_t v1 = sub_21B84E40C();
    sub_21B85EF64((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B85EF64((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BB70, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BB70, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BB88);
          return &stru_267C5BB70;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BB70;
}

void sub_21B85EEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BB88);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BB88);
  _Unwind_Resume(a1);
}

void sub_21B85EF64(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B85F004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B85F020(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B85F0AC()
{
  return 1;
}

uint64_t sub_21B85F0B4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B85F0BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B85F0D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B85F168(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B85F418();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_21B85F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_21B85F418()
{
  uint64_t v0 = sub_21B85ED54();
  uint64_t v1 = sub_21B85F494();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B85F494()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BBA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BBA8))
  {
    sub_21B837058(v6, "ImageView");
    uint64_t v1 = sub_21B84E9F8();
    sub_21B85F6A4((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B85F6A4((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BB90, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BB90, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BBA8);
          return &stru_267C5BB90;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BB90;
}

void sub_21B85F5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BBA8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BBA8);
  _Unwind_Resume(a1);
}

void sub_21B85F6A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B85F744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B85F760(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB965A8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *sub_21B85F7F8(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB966A0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B85F890(void *a1)
{
  *a1 = &unk_26CB964B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B85F938()
{
  return 1;
}

uint64_t sub_21B85F940(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B85F948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B85F964(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B85F9EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B85FB48(a1, (uint64_t)&v9, &v13);
  long long v11 = *(_OWORD *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v5 = v13;
  uint64_t v6 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    char v7 = v14;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(_OWORD *)(a2 + 16) = v11;
    *(void *)(a2 + 32) = v12;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 32) = *(void *)(a1 + 40);
  }
  BOOL v8 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B85FB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B85FB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)a2
    || (double result = __dynamic_cast(*(const void **)a2, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9C9D8, 0)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v9 = a1;
    unint64_t v10 = exception;
    sub_21B85FC98(v9, &v11);
    std::logic_error::logic_error(v10, &v11);
    v10->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v10, (struct type_info *)off_2643B88C8, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *a3 = result;
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21B85FC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21B83A360(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

double sub_21B85FC98@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int8x16_t v4 = sub_21B85FFB8();
  uint64_t v5 = sub_21B8604A0();
  uint64_t v26 = "Attempting to create an ";
  uint64_t v27 = 24;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  uint64_t v28 = (const char *)v7;
  uint64_t v29 = size;
  uint64_t v30 = " from an ";
  uint64_t v31 = 9;
  std::string::size_type v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = v5->__r_.__value_.__l.__size_;
  }
  v32[0] = v9;
  v32[1] = v8;
  sub_21B84F40C((uint64_t)&v26, (uint64_t)&v33, 0, 0, &__p);
  uint64_t v10 = *(void *)(a1 + 8);
  std::string v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!v10) {
        goto LABEL_26;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10) {
        goto LABEL_26;
      }
    }
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
LABEL_21:
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v26 = (const char *)p_p;
    uint64_t v27 = v15;
    uint64_t v28 = " but the other image contains an incompatible buffer type ";
    uint64_t v29 = 58;
    uint64_t v30 = (const char *)v13;
    uint64_t v31 = v14;
    sub_21B84F40C((uint64_t)&v26, (uint64_t)v32, 0, 0, a2);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_24;
    }
    return result;
  }
  if (v10) {
    goto LABEL_21;
  }
LABEL_26:
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 46;
  if (v19 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = (char *)a2;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v20;
LABEL_35:
    if (v18 >= 0) {
      size_t v24 = &__p;
    }
    else {
      size_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v24, v19);
    goto LABEL_39;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  uint64_t v21 = (char *)operator new(v22 + 1);
  a2->__r_.__value_.__l.__size_ = v20;
  a2->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  a2 = (std::string *)v21;
  if (v19) {
    goto LABEL_35;
  }
LABEL_39:
  strcpy(&v21[v19], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v18 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B85FF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B85FFB8()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BBC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BBC8))
  {
    sub_21B837058(v6, "SharedImage");
    uint64_t v1 = sub_21B84E40C();
    sub_21B8601C8((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B860284();
    sub_21B8601C8((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BBB0, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BBB0, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BBC8);
          return &stru_267C5BBB0;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BBB0;
}

void sub_21B860114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BBC8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BBC8);
  _Unwind_Resume(a1);
}

void sub_21B8601C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B860268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21B860284()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BBE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BBE8))
  {
    return &xmmword_267C5BBD0;
  }
  uint64_t v1 = (char *)sub_21B86036C();
  if (v1[23] < 0)
  {
    sub_21B846188(&xmmword_267C5BBD0, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267C5BBE0 = *((void *)v1 + 2);
    xmmword_267C5BBD0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BBD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BBE8);
  return &xmmword_267C5BBD0;
}

void sub_21B860354(_Unwind_Exception *a1)
{
}

void *sub_21B86036C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BC08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BC08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceBuffer]", qword_267C5BBF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BBF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BC08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BC28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BC28))
  {
    return &unk_267C5BC10;
  }
  sub_21B9840C8((uint64_t)qword_267C5BBF0, (uint64_t)&unk_267C5BC10);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267C5BC10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BC28);
  return &unk_267C5BC10;
}

void sub_21B860470(_Unwind_Exception *a1)
{
}

void sub_21B860488(_Unwind_Exception *a1)
{
}

std::string *sub_21B8604A0()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BC48))
  {
    sub_21B837058(v6, "SharedImage");
    uint64_t v1 = sub_21B84E40C();
    sub_21B8606B0((uint64_t)v1, (uint64_t)v8);
    long long v2 = sub_21B84E510();
    sub_21B8606B0((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BC30, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BC30, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BC48);
          return &stru_267C5BC30;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BC30;
}

void sub_21B8605FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BC48);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BC48);
  _Unwind_Resume(a1);
}

void sub_21B8606B0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B860750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B86076C(void *a1)
{
  *a1 = &unk_26CB965A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B860814()
{
  return 1;
}

uint64_t sub_21B86081C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B860824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B860840(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8608C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B860B78();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_21B860B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_21B860B78()
{
  uint64_t v0 = sub_21B8604A0();
  uint64_t v1 = sub_21B860BFC();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

uint64_t sub_21B860BF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

std::string *sub_21B860BFC()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BC68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BC68))
  {
    sub_21B837058(v6, "SharedImage");
    uint64_t v1 = sub_21B84E9F8();
    sub_21B860E0C((uint64_t)v1, (uint64_t)v8);
    long long v2 = sub_21B84E510();
    sub_21B860E0C((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5BC50, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BC50, &dword_21B831000);
          __cxa_guard_release(&qword_267C5BC68);
          return &stru_267C5BC50;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5BC50;
}

void sub_21B860D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5BC68);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5BC68);
  _Unwind_Resume(a1);
}

void sub_21B860E0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B860EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B860EC8(void *a1)
{
  *a1 = &unk_26CB966A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B860F70(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_21B860F78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_21B860F8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t LFHandleCreate(void *a1, unsigned int a2)
{
  return LFHandleCreateOnDevice(a1, a2);
}

uint64_t LFHandleCreateOnDevice(void *a1, unsigned int a2)
{
  if (a2 >= 4)
  {
    switch(a2)
    {
      case 'e':
      case 'f':
      case 'g':
      case 'h':
        break;
      default:
        if (a2 != 4)
        {
          sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_21B997215, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_21B984AC4);
          abort();
        }
        return result;
    }
  }
  if (operator new(0x10uLL, MEMORY[0x263F8C180])) {
    sub_21B862C7C();
  }
  uint64_t result = 4;
  *a1 = 0;
  return result;
}

void sub_21B861144(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t LFDetectorModelVersion(uint64_t ***a1, uint64_t a2)
{
  if (!a1) {
    return 2;
  }
  if (!a2) {
    return 3;
  }
  if (!sub_21B8DDFD4(**a1)) {
    return 7;
  }
  uint64_t v4 = sub_21B8DCB3C(*a1);
  if ((v5 & 0xFF00000000) == 0) {
    return 9;
  }
  uint64_t v6 = v4;
  uint64_t result = 0;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t LFDescriptorModelVersion(uint64_t **a1, uint64_t a2)
{
  if (!a1) {
    return 2;
  }
  if (!a2) {
    return 3;
  }
  unint64_t v3 = sub_21B862D6C(a1);
  unint64_t v5 = v3;
  if ((v4 & 0xFF00000000) != 0)
  {
    uint64_t result = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v4;
  }
  else if ((v3 - 1) >= 4)
  {
    return 6;
  }
  else
  {
    return *(unsigned int *)&asc_21B9A2DC0[4 * (int)v3 - 4];
  }
  return result;
}

uint64_t LFDetectKeypoints(uint64_t a1, const void *a2)
{
  if (a1) {
    sub_21B8A1F44((int)&v3, a2, 1);
  }
  return 2;
}

void sub_21B861518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10)
  {
    operator delete(v10);
    sub_21B85D53C((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_21B85D53C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t LFComputeDescriptors(uint64_t a1, const void *a2, void *a3)
{
  v5[7] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 2;
  }
  if (a3 && *a3) {
    sub_21B8A1F44((int)v5, a2, 1);
  }
  return 3;
}

void sub_21B861800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_21B86188C(char ***result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  long long v9 = 0uLL;
  unint64_t v10 = 0;
  if (a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      sub_21B862A00();
    }
    uint64_t v5 = 20 * a2;
    *(void *)&long long v9 = operator new(20 * a2);
    *((void *)&v9 + 1) = v9;
    unint64_t v10 = (char **)(v9 + v5);
    uint64_t v6 = a3 + v5;
    __int16 v13 = (char **)&v9;
    do
    {
      long long v11 = *(_OWORD *)a3;
      int v12 = *(_DWORD *)(a3 + 16);
      uint64_t result = sub_21B862A18(&v13, &v11);
      a3 += 20;
    }
    while (a3 != v6);
    long long v7 = v9;
    BOOL v8 = v10;
  }
  else
  {
    BOOL v8 = 0;
    long long v7 = 0uLL;
  }
  *(_OWORD *)uint64_t v3 = v7;
  v3[2] = v8;
  return result;
}

void sub_21B861958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B861978(uint64_t a1)
{
  LOBYTE(v5) = 1;
  uint64_t v6 = &v5;
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (v1 == -1) {
    goto LABEL_7;
  }
  long long v7 = &v6;
  ((void (*)(void **, uint64_t))off_26CB9E8D8[v1])(&v7, a1);
  if (!(_BYTE)v5 && *(_DWORD *)(a1 + 40))
  {
    uint64_t v5 = &v6;
    uint64_t v6 = 0;
    uint64_t v4 = *(unsigned int *)(a1 + 24);
    if (v4 != -1)
    {
      long long v7 = &v5;
      ((void (*)(void **, uint64_t))off_26CB9E8B8[v4])(&v7, a1);
      operator new[]();
    }
LABEL_7:
    sub_21B84C734();
  }
  return 0;
}

uint64_t sub_21B861CE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB967F8[v2])(&v4, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t LFDetectAndComputeFeatures(uint64_t a1, const void *a2)
{
  if (a1) {
    sub_21B8A1F44((int)&__p, a2, 1);
  }
  return 2;
}

void sub_21B861FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B85D8D0((uint64_t)va);
  sub_21B85D53C(v7 - 96);
  _Unwind_Resume(a1);
}

void sub_21B861FFC(_Unwind_Exception *a1)
{
  sub_21B85D53C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_21B862010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B862024(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a2 != v4)
  {
    is_mul_ok(0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)a2) >> 2), 0x14uLL);
    operator new[]();
  }
  char v10 = 1;
  long long v9 = &v10;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 == -1) {
    goto LABEL_9;
  }
  long long v11 = &v9;
  ((void (*)(char ***, uint64_t))off_26CB9E8D8[v5])(&v11, a2 + 24);
  if (!v10)
  {
    *(void *)(a1 + 16) = sub_21B861978(a2 + 24);
    *(void *)(a1 + 24) = v6;
  }
  char v10 = 1;
  long long v9 = &v10;
  uint64_t v7 = *(unsigned int *)(a2 + 96);
  if (v7 == -1) {
LABEL_9:
  }
    sub_21B84C734();
  long long v11 = &v9;
  uint64_t result = ((uint64_t (*)(char ***, uint64_t))off_26CB9E8D8[v7])(&v11, a2 + 72);
  if (!v10) {
    operator new[]();
  }
  return result;
}

uint64_t LFComputeLocalGlobalDescriptors(uint64_t a1, CVPixelBufferRef pixelBuffer, void *a3)
{
  if (!a1) {
    return 2;
  }
  if (a3 && *a3)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    kdebug_trace();
    sub_21B8A1F44((int)&v6, pixelBuffer, 1);
  }
  return 3;
}

void sub_21B8626E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_21B85D8D0((uint64_t)&a15);
  sub_21B85D53C(v15 - 128);
  _Unwind_Resume(a1);
}

void sub_21B862764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *LFKeypointsRelease(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    if (v2)
    {
      MEMORY[0x21D495F00](v2, 0x1000C80A86A77D5);
      void *v1 = 0;
      v1[1] = 0;
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void *LFDescriptorsRelease(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)*result;
    if (v2)
    {
      if (!*v2 || (MEMORY[0x21D495F00](*v2, 0x1000C8052888210), *v1)) {
        MEMORY[0x21D495F00]();
      }
      void *v1 = 0;
      v1[1] = 0;
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void *LFFeaturesRelease(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    if (v2)
    {
      MEMORY[0x21D495F00](v2, 0x1000C80A86A77D5);
      void *v1 = 0;
      v1[1] = 0;
    }
    uint64_t v4 = v1 + 2;
    uint64_t v3 = (void *)v1[2];
    if (v3)
    {
      if (!*v3 || (MEMORY[0x21D495F00](*v3, 0x1000C8052888210), *v4)) {
        MEMORY[0x21D495F00]();
      }
      *uint64_t v4 = 0;
      v1[3] = 0;
    }
    uint64_t v5 = v1[4];
    if (v5) {
      MEMORY[0x21D495F00](v5, 0x1000C8052888210);
    }
    v1[4] = 0;
    void v1[5] = 0;
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t LFHandleRelease(uint64_t *a1)
{
  if (!a1) {
    return 2;
  }
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    ((void (*)(void))a1[1])();
  }
  MEMORY[0x21D495F30](a1, 0xA0C40AFF93C70);
  return 0;
}

uint64_t LFDetectorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)a1 + 16) = a2;
  return 0;
}

uint64_t LFDetectorResetPSHandle(uint64_t a1)
{
  *(void *)(*(void *)a1 + 16) = 0;
  return 0;
}

uint64_t LFDescriptorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)a1 + 24) = a2;
  return 0;
}

uint64_t LFDescriptorResetPSHandle(uint64_t a1)
{
  *(void *)(*(void *)a1 + 24) = 0;
  return 0;
}

void sub_21B862A00()
{
}

char ***sub_21B862A18(char ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    long long v9 = *v4;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      sub_21B862A00();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x666666666666666) {
      unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xCCCCCCCCCCCCCCCLL) {
        sub_21B845A48();
      }
      long long v14 = (char *)operator new(20 * v13);
    }
    else
    {
      long long v14 = 0;
    }
    uint64_t v15 = &v14[20 * v10];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_DWORD *)v15 + 4) = *((_DWORD *)a2 + 4);
    BOOL v8 = v15 + 20;
    if (v6 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v6 - 1);
        *(_OWORD *)(v15 - 20) = v16;
        v15 -= 20;
        v6 -= 20;
      }
      while (v6 != v9);
      uint64_t v6 = *v4;
    }
    *uint64_t v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[20 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    *((_DWORD *)v6 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)uint64_t v6 = v7;
    BOOL v8 = v6 + 20;
  }
  v4[1] = v8;
  return a1;
}

double LearnedFeaturesGetVersion@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0x2900000007;
  *(void *)a1 = 0x2900000007;
  *(_DWORD *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = &unk_21B997215;
  return result;
}

void sub_21B862B8C()
{
}

void sub_21B862C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void))
{
  if (a11) {
    a12();
  }
  _Unwind_Resume(exception_object);
}

void sub_21B862C7C()
{
}

void sub_21B862D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void))
{
  if (a11) {
    a12();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21B862D6C(uint64_t **a1)
{
  uint64_t v2 = (void *)**a1;
  uint64_t v4 = v2[2];
  uint64_t v3 = (std::__shared_weak_count *)v2[3];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v2[4];
  unint64_t v5 = (std::__shared_weak_count *)v2[5];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_9:
  unint64_t v7 = v4 | v6;
  if (v4 | v6)
  {
    uint64_t v8 = sub_21B8DCCE8(*a1);
    uint64_t v10 = v8;
    if ((v9 & 0xFF00000000) != 0)
    {
      unint64_t v7 = v8 & 0xFFFFFFFF00000000;
    }
    else
    {
      uint64_t v10 = 3;
      unint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v10 = 2;
  }
  return v7 | v10;
}

void sub_21B862EA4(uint64_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (void *)**a1;
  uint64_t v10 = v8[2];
  uint64_t v9 = (std::__shared_weak_count *)v8[3];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v8[4];
  unint64_t v11 = (std::__shared_weak_count *)v8[5];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v10 | v12) {
      goto LABEL_9;
    }
LABEL_18:
    *(_DWORD *)a4 = 2;
    *(unsigned char *)(a4 + 48) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!(v10 | v12)) {
    goto LABEL_18;
  }
LABEL_9:
  if ((sub_21B8DE30C(*a1, a2 + 32) & 1) == 0)
  {
    *(_DWORD *)a4 = 0;
    *(unsigned char *)(a4 + 48) = 0;
    return;
  }
  sub_21B8DD1B8(*a1, a2, (uint64_t)a3, (*a1)[3], (uint64_t)v15);
  size_t v19 = &v20;
  uint64_t v20 = 0;
  if (v16 == -1) {
    sub_21B84C734();
  }
  uint64_t v21 = &v19;
  ((void (*)(uint64_t ***, unsigned char *))off_26CB9E8B8[v16])(&v21, v15);
  if (v20 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2))
  {
    *(_DWORD *)a4 = 4;
    *(unsigned char *)(a4 + 48) = 0;
    uint64_t v14 = v16;
    if (v16 == -1) {
      return;
    }
    goto LABEL_20;
  }
  *(unsigned char *)a4 = 0;
  *(_DWORD *)(a4 + 24) = -1;
  unsigned int v13 = v16;
  if (v16 != -1)
  {
    ((void (*)(uint64_t ***, uint64_t, unsigned char *))off_26CB968C0[v16])(&v21, a4, v15);
    *(_DWORD *)(a4 + 24) = v13;
  }
  *(void *)(a4 + 32) = v17;
  *(_DWORD *)(a4 + 40) = v18;
  *(unsigned char *)(a4 + 48) = 1;
  uint64_t v14 = v16;
  if (v16 != -1) {
LABEL_20:
  }
    ((void (*)(uint64_t ***, unsigned char *))off_26CB968A0[v14])(&v21, v15);
}

void sub_21B8630F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B863104((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B863104(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB968A0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_21B863160(uint64_t ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((sub_21B8DDFD4(**a1) & 1) == 0)
  {
    int v16 = 1;
LABEL_25:
    *(_DWORD *)a3 = v16;
    goto LABEL_26;
  }
  uint64_t v6 = **a1;
  uint64_t v8 = v6[2];
  unint64_t v7 = (std::__shared_weak_count *)v6[3];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v6[4];
  uint64_t v9 = (std::__shared_weak_count *)v6[5];
  if (v9
    && (atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v7) {
      goto LABEL_8;
    }
  }
  else if (!v7)
  {
    goto LABEL_8;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8 | v10) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_8:
  if (!(v8 | v10))
  {
LABEL_24:
    int v16 = 2;
    goto LABEL_25;
  }
LABEL_9:
  if ((sub_21B8DE134(*a1, a2 + 32) & 1) == 0 || (sub_21B8DE30C((uint64_t *)*a1, a2 + 32) & 1) == 0)
  {
    *(_DWORD *)a3 = 0;
LABEL_26:
    *(unsigned char *)(a3 + 120) = 0;
    return;
  }
  sub_21B8DD528(*a1, a2, (uint64_t)(*a1)[2], (uint64_t)(*a1)[3], (uint64_t)&__p);
  uint64_t v28 = &v29;
  uint64_t v29 = 0;
  if (v21 == -1) {
    sub_21B84C734();
  }
  uint64_t v30 = &v28;
  ((void (*)(uint64_t ***, unsigned char *))off_26CB9E8B8[v21])(&v30, v20);
  unint64_t v11 = v18;
  if (v29 == 0xCCCCCCCCCCCCCCCDLL * ((v18 - (unsigned char *)__p) >> 2))
  {
    *(void *)a3 = __p;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = v19;
    int v18 = 0;
    uint64_t v19 = 0;
    std::string __p = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 48) = -1;
    int v12 = v21;
    if (v21 != -1)
    {
      ((void (*)(uint64_t ***, uint64_t, unsigned char *))off_26CB968C0[v21])(&v30, a3 + 24, v20);
      *(_DWORD *)(a3 + 48) = v12;
    }
    uint64_t v13 = v22;
    *(unsigned char *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = v13;
    uint64_t v14 = v25;
    *(_DWORD *)(a3 + 64) = v23;
    *(_DWORD *)(a3 + 96) = -1;
    if (v14 != -1)
    {
      ((void (*)(uint64_t ***))off_26CB968C0[v14])(&v30);
      *(_DWORD *)(a3 + 96) = v14;
    }
    *(void *)(a3 + 104) = v26;
    *(_DWORD *)(a3 + 112) = v27;
    *(unsigned char *)(a3 + 120) = 1;
    uint64_t v15 = v25;
    if (v25 == -1) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  *(_DWORD *)a3 = 4;
  *(unsigned char *)(a3 + 120) = 0;
  uint64_t v15 = v25;
  if (v25 != -1) {
LABEL_29:
  }
    ((void (*)(uint64_t ***, uint64_t *))off_26CB968A0[v15])(&v30, &v24);
LABEL_30:
  unsigned int v25 = -1;
  if (v21 != -1) {
    ((void (*)(uint64_t ***, unsigned char *))off_26CB968A0[v21])(&v30, v20);
  }
  int v21 = -1;
  if (__p)
  {
    int v18 = __p;
    operator delete(__p);
  }
}

void sub_21B86347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B863490(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB968A0[v2])(&v6, a1 + 72);
  }
  *(_DWORD *)(a1 + 96) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26CB968A0[v3])(&v7, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  char v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_21B863528(uint64_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (void *)**a1;
  uint64_t v10 = v8[2];
  uint64_t v9 = (std::__shared_weak_count *)v8[3];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v8[4];
  unint64_t v11 = (std::__shared_weak_count *)v8[5];
  if (v11
    && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v9)
    {
LABEL_7:
      if (v10 | v12) {
        goto LABEL_8;
      }
LABEL_26:
      *(_DWORD *)a4 = 2;
LABEL_35:
      *(unsigned char *)(a4 + 120) = 0;
      return;
    }
  }
  else if (!v9)
  {
    goto LABEL_7;
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!(v10 | v12)) {
    goto LABEL_26;
  }
LABEL_8:
  if ((sub_21B8DE30C(*a1, a2 + 32) & 1) == 0) {
    goto LABEL_34;
  }
  uint64_t v13 = **a1;
  uint64_t v14 = *(void *)(v13 + 32);
  if (!v14) {
    goto LABEL_34;
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 40);
  __p[0] = *(void **)(v13 + 32);
  __p[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2 + 32);
  char v17 = v16;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v16) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v17 & 1) == 0)
  {
LABEL_34:
    *(_DWORD *)a4 = 0;
    goto LABEL_35;
  }
LABEL_15:
  sub_21B8DDB24((uint64_t **)*a1, a2, (uint64_t)a3, (*a1)[3], (uint64_t)__p);
  unint64_t v32 = &v33;
  uint64_t v33 = 0;
  if (v25 == -1) {
    sub_21B84C734();
  }
  int8x8_t v34 = &v32;
  ((void (*)(uint64_t ***, unsigned char *))off_26CB9E8B8[v25])(&v34, v24);
  if (v33 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2))
  {
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(void *)(a4 + 16) = v23;
    __p[1] = 0;
    uint64_t v23 = 0;
    __p[0] = 0;
    *(unsigned char *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 48) = -1;
    int v18 = v25;
    if (v25 != -1)
    {
      ((void (*)(uint64_t ***, uint64_t, unsigned char *))off_26CB968C0[v25])(&v34, a4 + 24, v24);
      *(_DWORD *)(a4 + 48) = v18;
    }
    uint64_t v19 = v26;
    *(unsigned char *)(a4 + 72) = 0;
    *(void *)(a4 + 56) = v19;
    uint64_t v20 = v29;
    *(_DWORD *)(a4 + 64) = v27;
    *(_DWORD *)(a4 + 96) = -1;
    if (v20 != -1)
    {
      ((void (*)(uint64_t ***))off_26CB968C0[v20])(&v34);
      *(_DWORD *)(a4 + 96) = v20;
    }
    *(void *)(a4 + 104) = v30;
    *(_DWORD *)(a4 + 112) = v31;
    *(unsigned char *)(a4 + 120) = 1;
    uint64_t v21 = v29;
    if (v29 == -1) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  *(_DWORD *)a4 = 4;
  *(unsigned char *)(a4 + 120) = 0;
  uint64_t v21 = v29;
  if (v29 != -1) {
LABEL_28:
  }
    ((void (*)(uint64_t ***, uint64_t *))off_26CB968A0[v21])(&v34, &v28);
LABEL_29:
  unsigned int v29 = -1;
  if (v25 != -1) {
    ((void (*)(uint64_t ***, unsigned char *))off_26CB968A0[v25])(&v34, v24);
  }
  int v25 = -1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_21B8638C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8638DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8638F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_21B86392C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x21D495F30);
}

__n128 sub_21B863988(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B8639AC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B8639D0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B8639F4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void *sub_21B863A18(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21D495BF0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_21B863BBC(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21D495C00](v13);
  return a1;
}

void sub_21B863B54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x21D495C00](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x21B863B34);
}

void sub_21B863BA8(_Unwind_Exception *a1)
{
}

uint64_t sub_21B863BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_21B836090();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        char v16 = __b;
      }
      else {
        char v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_21B863D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B863DAC(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    void *v1 = 0;
    if (v2) {
      ((void (*)(void))v1[1])();
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void *sub_21B863E18(void *a1, long long *a2)
{
  char v4 = (char *)operator new(0x30uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)char v4 = &unk_26CB96A40;
  long long v5 = *a2;
  *((void *)v4 + 5) = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  a1[1] = v4;
  *(_OWORD *)(v4 + 24) = v5;
  *((void *)a2 + 2) = 0;
  *a1 = v4 + 24;
  uint64_t v6 = operator new(0x48uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_26CB96A90;
  *((unsigned char *)v6 + 24) = 0;
  uint64_t v7 = (char *)(v6 + 3);
  *((_DWORD *)v6 + 12) = -1;
  uint64_t v8 = *((unsigned int *)a2 + 12);
  if (v8 != -1)
  {
    ((void (*)(char *, char *, char *))off_26CB96AF0[v8])(&v13, v7, (char *)a2 + 24);
    *((_DWORD *)v6 + 12) = v8;
  }
  v6[7] = *((void *)a2 + 7);
  *((_DWORD *)v6 + 16) = *((_DWORD *)a2 + 16);
  a1[2] = v7;
  a1[3] = v6;
  int v9 = operator new(0x48uLL);
  v9[1] = 0;
  v9[2] = 0;
  *int v9 = &unk_26CB96A90;
  *((unsigned char *)v9 + 24) = 0;
  uint64_t v10 = (char *)(v9 + 3);
  *((_DWORD *)v9 + 12) = -1;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  if (v11 != -1)
  {
    ((void (*)(char *, char *, char *))off_26CB96AF0[v11])(&v14, v10, (char *)a2 + 72);
    *((_DWORD *)v9 + 12) = v11;
  }
  v9[7] = *((void *)a2 + 13);
  *((_DWORD *)v9 + 16) = *((_DWORD *)a2 + 28);
  a1[4] = v10;
  a1[5] = v9;
  return a1;
}

void sub_21B863F9C(_Unwind_Exception *a1)
{
  sub_21B83A360(v2);
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B863FB8(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B863FCC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B864048(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8640D4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B864150(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

void *sub_21B8641DC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  char v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *sub_21B8642F4(void *a1)
{
  *a1 = &unk_26CB968F0;
  uint64_t v3 = a1 + 8;
  uint64_t v2 = (atomic_uint *)a1[8];
  if (v2 && atomic_fetch_add(v2 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  char v4 = (atomic_uint *)a1[9];
  if (v4 && atomic_fetch_add(v4 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  long long v5 = (atomic_uint *)a1[10];
  if (v5 && atomic_fetch_add(v5 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;

  return sub_21B8641DC(a1);
}

void sub_21B864410(void *a1)
{
  *a1 = &unk_26CB968F0;
  uint64_t v3 = a1 + 8;
  uint64_t v2 = (atomic_uint *)a1[8];
  if (v2 && atomic_fetch_add(v2 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  char v4 = (atomic_uint *)a1[9];
  if (v4 && atomic_fetch_add(v4 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  long long v5 = (atomic_uint *)a1[10];
  if (v5 && atomic_fetch_add(v5 + 6, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  sub_21B8641DC(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B864540(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B864560(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8645B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_21B8645D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8645F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB96A90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B864644(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 48);
  if (v2 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26CB96AD0[v2])(&v3, result + 24);
  }
  *(_DWORD *)(v1 + 48) = -1;
  return result;
}

uint64_t sub_21B8646A0@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_21B9A7D3C[a2 - 1] | dword_21B9A7CA4[a2 - 1];
    }
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &unk_26CB99920;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_21B8649F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B864A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21B864A34(int a1, uint64_t a2, double result)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_14;
      }
      sub_21B8A14FC(v5, a2);
      sub_21B864BE8(&v7, (uint64_t)v5);
      double v4 = *(double *)&v8;
      sub_21B8A1880(v5);
      goto LABEL_4;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_14;
      }
      goto LABEL_9;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_14;
      }
LABEL_9:
      sub_21B864BE8(&v7, a2);
      __n128 result = *(double *)&v8;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_14:
      }
        sub_21B84C734();
      sub_21B864D60((uint64_t *)a2, v5);
      sub_21B864BE8(&v7, (uint64_t)v5);
      __n128 result = *(double *)&v8;
      v5[0] = &unk_26CB99920;
      char v3 = v6;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        double v4 = result;
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
LABEL_4:
        __n128 result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_21B864BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B864BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_21B864BE8(uint64_t *a1, uint64_t a2)
{
  double v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    long long v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = (result << 32) | 1;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B864D60(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &unk_26CB99920;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B864EDC(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B864EF0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  int v6 = a2;
  char v14 = a5;
  *(void *)a1 = &unk_26CB96B20;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_21B8646A0(a2, a3, a4, a1 + 16);
  if (*a4) {
    BOOL v10 = a4[1] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  }
  else
  {
    sub_21B864A34(v6, v8, v9);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
  }
  if (!sub_21B8656A8(a1))
  {
    sub_21B8658F0(a1, v16);
    sub_21B865A2C(a1, v15);
    v17[0] = v15;
    v17[1] = &v14;
    sub_21B892CFC(v17);
    sub_21B8A1D54(v16);
  }
  return a1;
}

void sub_21B864FD8(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B864FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B86501C(v6);
  _Unwind_Resume(a1);
}

void sub_21B865008(_Unwind_Exception *a1)
{
  sub_21B86501C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86501C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96B20;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B865094(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_21B8650F0(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96B20;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B8646A0(0, 1, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v14, v6);
    sub_21B864BE8(v15, (uint64_t)v14);
    uint64_t v8 = v15[1];
    uint64_t v9 = v15[2];
    sub_21B8A1880(v14);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_21B8656A8(a1))
  {
    sub_21B8658F0(a1, v15);
    sub_21B865A2C(a1, v14);
    v13[0] = (size_t)&v11;
    v13[1] = (size_t)v14;
    sub_21B892E98(v13);
    sub_21B8A1D54(v15);
  }
  return a1;
}

void sub_21B86520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v7);
  _Unwind_Resume(a1);
}

void sub_21B865228(_Unwind_Exception *a1)
{
  sub_21B8A1D54((void *)(v2 - 56));
  sub_21B86501C(v1);
  _Unwind_Resume(a1);
}

void sub_21B865244(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B865258(_Unwind_Exception *a1)
{
  sub_21B86501C(v1);
  _Unwind_Resume(a1);
}

void sub_21B865274(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      BOOL v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        long long v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            uint64_t v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            BOOL v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      BOOL v10 = 0;
      uint64_t v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B865514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B865538(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = &unk_26CB99920;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = &unk_26CB99920;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = &unk_26CB99920;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_21B84C734();
  }
}

BOOL sub_21B8656A8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      BOOL v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          BOOL v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = 0;
      BOOL v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B8658F0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_21B8A1B14(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_21B84C734();
    }
    sub_21B864D60((uint64_t *)(a1 + 16), v6);
    sub_21B8A19D0(a2, (uint64_t)v6);
    v6[0] = &unk_26CB99920;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_21B8A19D0(a2, v3);
  }
}

void sub_21B865A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B865A2C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_21B8656A8(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        char v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        char v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        BOOL v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              char v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              char v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        char v16 = 0;
        char v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B864BE8(a2, (uint64_t)&v14);
        char v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B865C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B865CC0(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B864D60(v4, v7);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B865DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B865E00(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 843264056);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B865F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B865F24(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = HIDWORD(v14);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = result;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = (result << 32) | 2;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B866114(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B866290(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8662A4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96BB0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86631C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26CB96BB0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B865E00(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v16, v6);
    sub_21B865F24((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_21B8668E4(a1))
  {
    sub_21B866B2C(v16, a1);
    sub_21B866C68((uint64_t)v17, a1);
    v15[0] = (size_t)v14;
    v15[1] = (size_t)v17;
    sub_21B8933A8(v15);
    sub_21B8A1D54(v16);
  }
  return a1;
}

void sub_21B866448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v10);
  _Unwind_Resume(a1);
}

void sub_21B866464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B8662A4(v10);
  _Unwind_Resume(a1);
}

void sub_21B866480(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B866494(_Unwind_Exception *a1)
{
  sub_21B8662A4(v1);
  _Unwind_Resume(a1);
}

void sub_21B8664B0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B866750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B866774(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = &unk_26CB99920;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = &unk_26CB99920;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = &unk_26CB99920;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_21B84C734();
  }
}

BOOL sub_21B8668E4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B866B2C(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B866114(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B866C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B866C68(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B8668E4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          char v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          char v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B865F24(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        BOOL v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B866EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B866F20(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B866114(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B867048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86705C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 24);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B867160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B86717C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 3;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = HIDWORD(v14);
  *(void *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = result;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = (result << 32) | 3;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B86736C(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B8674E8(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8674FC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96C40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B867574(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96C40;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86705C(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v35, v6);
    sub_21B86717C((uint64_t)&v31, (uint64_t)v35);
    long long v11 = v33;
    *uint64_t v7 = v32;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v34;
    sub_21B8A1880(v35);
  }
  long long v12 = a3[1];
  long long v28 = *a3;
  long long v29 = v12;
  long long v30 = a3[2];
  if (!sub_21B867B08(a1))
  {
    sub_21B867D50(v35, a1);
    sub_21B867E8C((uint64_t)&v31, a1);
    v36[0] = (size_t)&v28;
    v36[1] = (size_t)&v31;
    if (DWORD1(v29) == 1 && HIDWORD(v32) == 1)
    {
      sub_21B8934C4(v36);
    }
    else if (DWORD2(v28) && HIDWORD(v28) && v29)
    {
      int v13 = HIDWORD(v28) - 1;
      uint64_t v14 = DWORD2(v29);
      uint64_t v15 = v33;
      char v16 = (unsigned char *)v28;
      uint64_t v17 = v31;
      int v18 = v29 - 1;
      if (v29 != 1)
      {
        uint64_t v19 = DWORD1(v33);
        uint64_t v20 = HIDWORD(v29);
        if (HIDWORD(v28) == 1)
        {
          do
          {
            *uint64_t v17 = *v16;
            v17[1] = v16[1];
            void v17[2] = v16[2];
            v16 += v20;
            v17 += v19;
            --v18;
          }
          while (v18);
        }
        else
        {
          int v21 = 0;
          int64_t v22 = v31 + 2;
          uint64_t v23 = (unsigned char *)(v28 + 2);
          do
          {
            uint64_t v24 = v23;
            int v25 = v22;
            int v26 = v13;
            do
            {
              *(v25 - 2) = *(v24 - 2);
              *(v25 - 1) = *(v24 - 1);
              *int v25 = *v24;
              v25 += v15;
              v24 += v14;
              --v26;
            }
            while (v26);
            *(v25 - 2) = *(v24 - 2);
            *(v25 - 1) = *(v24 - 1);
            *int v25 = *v24;
            v16 += v20;
            v17 += v19;
            ++v21;
            v22 += v19;
            v23 += v20;
          }
          while (v21 != v18);
        }
      }
      for (; v13; --v13)
      {
        *uint64_t v17 = *v16;
        v17[1] = v16[1];
        void v17[2] = v16[2];
        v16 += v14;
        v17 += v15;
      }
      *uint64_t v17 = *v16;
      v17[1] = v16[1];
      void v17[2] = v16[2];
    }
    sub_21B8A1D54(v35);
  }
  return a1;
}

void sub_21B8677DC(_Unwind_Exception *a1)
{
  sub_21B8A1880((void *)(v2 - 88));
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B8677F8(_Unwind_Exception *a1)
{
  sub_21B8A1D54((void *)(v2 - 88));
  sub_21B8674FC(v1);
  _Unwind_Resume(a1);
}

void sub_21B867814(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B867828(_Unwind_Exception *a1)
{
  sub_21B8674FC(v1);
  _Unwind_Resume(a1);
}

void sub_21B867844(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B867AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B867B08(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B867D50(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86736C(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B867E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B867E8C(uint64_t a1, uint64_t a2)
{
  if (sub_21B867B08(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v11 = &unk_26CB99920;
        uint64_t v12 = v5;
        int v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          BOOL v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              uint64_t v11 = &unk_26CB99920;
              uint64_t v12 = v10;
              int v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        int v13 = 0;
        uint64_t v11 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86717C(a1, (uint64_t)&v11);
        uint64_t v11 = &unk_26CB99920;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B8680AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8680D0(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86736C(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B8681F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86820C(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v4 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 25) > 0xC) {
      int v5 = 0;
    }
    else {
      int v5 = dword_21B9A7C70[a2 - 25] | dword_21B9A7C3C[a2 - 25];
    }
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v6, v3, v5);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B868350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B86836C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = HIDWORD(v14);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = result;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = (result << 32) | 4;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B86855C(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B8686D8(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8686EC(uint64_t a1, int a2, uint64_t a3)
{
  char v12 = 0;
  *(void *)a1 = &unk_26CB96CD0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_21B86820C(a1 + 16, a2, a3);
  uint64_t v6 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v7 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    long long v8 = *(_OWORD *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 80) = *(void *)(a3 + 32);
    *uint64_t v6 = v8;
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(&v21, v5);
    sub_21B86836C((uint64_t)&v13, (uint64_t)&v21);
    long long v10 = v15;
    *uint64_t v6 = v14;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v16;
    sub_21B8A1880(&v21);
  }
  if (!sub_21B8692F8(a1))
  {
    sub_21B869540(v17, a1);
    sub_21B86967C((uint64_t)&v13, a1);
    v18[0] = &v13;
    v18[1] = &v12;
    if (HIDWORD(v14) == 1)
    {
      sub_21B8931E8(v18);
    }
    else
    {
      uint64_t v19 = &v12;
      if (v14 && DWORD1(v14) && DWORD2(v14))
      {
        uint64_t v20 = &v19;
        LODWORD(v21) = 0;
        HIDWORD(v21) = v14 - 1;
        int v22 = HIDWORD(v14);
        int v23 = DWORD1(v14) - 1;
        int v24 = v15;
        int v25 = DWORD2(v14) - 1;
        int v26 = DWORD1(v15);
        v27[0] = 0;
        v27[1] = 0;
        sub_21B893D30(&v21, (uint64_t)v27, &v20, v13);
      }
    }
    sub_21B8A1D54(v17);
  }
  return a1;
}

void sub_21B86886C(_Unwind_Exception *a1)
{
  sub_21B8A1880((void *)(v2 - 80));
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B868888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B8688CC(v8);
  _Unwind_Resume(a1);
}

void sub_21B8688A4(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B8688B8(_Unwind_Exception *a1)
{
  sub_21B8688CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8688CC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96CD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B868944(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = &unk_26CB96CD0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v7 = a1 + 16;
  sub_21B86820C(a1 + 16, a2, a3);
  uint64_t v8 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v9 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    long long v10 = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 80) = *(void *)(a3 + 32);
    _OWORD *v8 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v22, v7);
    sub_21B86836C((uint64_t)v18, (uint64_t)v22);
    long long v12 = v20;
    _OWORD *v8 = v19;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v21;
    sub_21B8A1880(v22);
  }
  long long v13 = a4[1];
  long long v15 = *a4;
  long long v16 = v13;
  long long v17 = a4[2];
  if (!sub_21B8692F8(a1))
  {
    sub_21B869540(v22, a1);
    sub_21B86967C((uint64_t)v18, a1);
    v23[0] = (size_t)&v15;
    v23[1] = (size_t)v18;
    if (DWORD1(v16) == 1 && HIDWORD(v19) == 1)
    {
      sub_21B8934C4(v23);
    }
    else
    {
      char v24 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && v16)
      {
        int v25 = &v24;
        sub_21B893EEC((uint64_t)&v25, (uint64_t)&v15, (uint64_t)v18);
      }
    }
    sub_21B8A1D54(v22);
  }
  return a1;
}

void sub_21B868ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v14);
  _Unwind_Resume(a1);
}

void sub_21B868AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B8688CC(v14);
  _Unwind_Resume(a1);
}

void sub_21B868AF4(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B868B08(_Unwind_Exception *a1)
{
  sub_21B8688CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B868B1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26CB96CD0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = &unk_26CB99920;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_21B8A3220(a2);
  unsigned int v14 = sub_21B8A33A4(a2);
  size_t v15 = sub_21B8A3528(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 4;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = (v15 << 32) | 4;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  int v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  long long v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_21B868EA8(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B868EC4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B869164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B869188(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = &unk_26CB99920;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = &unk_26CB99920;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = &unk_26CB99920;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_21B84C734();
  }
}

BOOL sub_21B8692F8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B869540(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86855C(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B869668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86967C(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B8692F8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86836C(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B869910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B869934(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86855C(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B869A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B869A70(uint64_t result, _DWORD *a2)
{
  if (*a2) {
    BOOL v2 = a2[1] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, (uint64_t)a2, 1647392359);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B869B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B869B94(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = ((unint64_t)(result >> 1) << 32) | 1;
  if (HIDWORD(v14) * (result >> 1) == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B869D10(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B869E8C(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B869EA0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96D60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B869F18(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96D60;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B869A70(a1 + 16, a2);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v13, v6);
    sub_21B869B94(v14, (uint64_t)v13);
    uint64_t v8 = v14[1];
    uint64_t v9 = v14[2];
    sub_21B8A1880(v13);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_21B86A34C(a1))
  {
    sub_21B86A594(v14, a1);
    sub_21B86A6D0(v13, a1);
    sub_21B8943FC((uint64_t *)&v11, (uint64_t)v13);
    sub_21B8A1D54(v14);
  }
  return a1;
}

void sub_21B86A020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v5);
  _Unwind_Resume(a1);
}

void sub_21B86A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B869EA0(v8);
  _Unwind_Resume(a1);
}

void sub_21B86A058(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86A06C(_Unwind_Exception *a1)
{
  sub_21B869EA0(v1);
  _Unwind_Resume(a1);
}

void sub_21B86A088(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            uint64_t v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B86A34C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86A594(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B869D10(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86A6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86A6D0(uint64_t *a1, uint64_t a2)
{
  if (sub_21B86A34C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        unint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        unint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              unint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              unint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        unint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(a1, (uint64_t)&v14);
        unint64_t v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B86A944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86A968(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B869D10(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B86AA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86AAA4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 1647589490);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B86ABAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B86ABC8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 3;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 3;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B86ADC0(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B86AF3C(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86AF50(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96DF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86AFC8(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96DF0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86AAA4(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v37, v6);
    sub_21B86ABC8((uint64_t)&v33, (uint64_t)v37);
    long long v11 = v35;
    *uint64_t v7 = v34;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v36;
    sub_21B8A1880(v37);
  }
  long long v12 = a3[1];
  long long v30 = *a3;
  long long v31 = v12;
  long long v32 = a3[2];
  if (!sub_21B86B57C(a1))
  {
    sub_21B86B7C4(v37, a1);
    sub_21B86B900((uint64_t)&v33, a1);
    v38[0] = (uint64_t)&v30;
    v38[1] = (uint64_t)&v33;
    if (DWORD1(v31) == 1 && HIDWORD(v34) == 1)
    {
      sub_21B894E9C(v38);
LABEL_27:
      sub_21B8A1D54(v37);
      return a1;
    }
    if (!DWORD2(v30) || !HIDWORD(v30) || !v31) {
      goto LABEL_27;
    }
    int v13 = HIDWORD(v30) - 1;
    uint64_t v14 = DWORD2(v31);
    uint64_t v15 = v35;
    uint64_t v16 = (_WORD *)v30;
    uint64_t v17 = v33;
    int v18 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v19 = DWORD1(v35);
      uint64_t v20 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *uint64_t v17 = *v16;
          v17[1] = v16[1];
          void v17[2] = v16[2];
          v16 += v20;
          v17 += v19;
          --v18;
        }
        while (v18);
LABEL_26:
        *uint64_t v17 = *v16;
        v17[1] = v16[1];
        void v17[2] = v16[2];
        goto LABEL_27;
      }
      int v21 = 0;
      int v22 = v33 + 2;
      uint64_t v23 = (_WORD *)(v30 + 4);
      uint64_t v24 = 2 * HIDWORD(v31);
      uint64_t v25 = 2 * DWORD2(v31);
      do
      {
        int v26 = v23;
        int v27 = v22;
        int v28 = v13;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v27 += v15;
          int v26 = (_WORD *)((char *)v26 + v25);
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v16 += v20;
        v17 += v19;
        ++v21;
        v22 += v19;
        uint64_t v23 = (_WORD *)((char *)v23 + v24);
      }
      while (v21 != v18);
    }
    for (; v13; --v13)
    {
      *uint64_t v17 = *v16;
      v17[1] = v16[1];
      void v17[2] = v16[2];
      v16 += v14;
      v17 += v15;
    }
    goto LABEL_26;
  }
  return a1;
}

void sub_21B86B250(_Unwind_Exception *a1)
{
  sub_21B8A1880((void *)(v2 - 88));
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86B26C(_Unwind_Exception *a1)
{
  sub_21B8A1D54((void *)(v2 - 88));
  sub_21B86AF50(v1);
  _Unwind_Resume(a1);
}

void sub_21B86B288(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86B29C(_Unwind_Exception *a1)
{
  sub_21B86AF50(v1);
  _Unwind_Resume(a1);
}

void sub_21B86B2B8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86B558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B86B57C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86B7C4(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86ADC0(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86B8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86B900(uint64_t a1, uint64_t a2)
{
  if (sub_21B86B57C(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v11 = &unk_26CB99920;
        uint64_t v12 = v5;
        int v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          BOOL v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              uint64_t v11 = &unk_26CB99920;
              uint64_t v12 = v10;
              int v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        int v13 = 0;
        uint64_t v11 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86ABC8(a1, (uint64_t)&v11);
        uint64_t v11 = &unk_26CB99920;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B86BB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86BB44(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86ADC0(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B86BC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86BC80(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 1647719521);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B86BD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B86BDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 4;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B86BF9C(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B86C118(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86C12C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96E80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86C1A4(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96E80;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86BC80(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v21, v6);
    sub_21B86BDA4((uint64_t)v17, (uint64_t)v21);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v21);
  }
  long long v12 = a3[1];
  long long v14 = *a3;
  long long v15 = v12;
  long long v16 = a3[2];
  if (!sub_21B86C648(a1))
  {
    sub_21B86C890(v21, a1);
    sub_21B86C9CC((uint64_t)v17, a1);
    v22[0] = (uint64_t)&v14;
    v22[1] = (uint64_t)v17;
    if (DWORD1(v15) == 1 && HIDWORD(v18) == 1)
    {
      sub_21B894E9C(v22);
    }
    else
    {
      char v23 = 0;
      if (DWORD2(v14) && HIDWORD(v14) && v15)
      {
        uint64_t v24 = &v23;
        sub_21B8957AC((uint64_t)&v24, (uint64_t)&v14, (uint64_t)v17);
      }
    }
    sub_21B8A1D54(v21);
  }
  return a1;
}

void sub_21B86C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v14);
  _Unwind_Resume(a1);
}

void sub_21B86C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B86C12C(v14);
  _Unwind_Resume(a1);
}

void sub_21B86C354(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86C368(_Unwind_Exception *a1)
{
  sub_21B86C12C(v1);
  _Unwind_Resume(a1);
}

void sub_21B86C384(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86C624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B86C648(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86C890(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86BF9C(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86C9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86C9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86C648(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B86CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B86CC84(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86BF9C(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B86CDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86CDC0@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_21B9A7D3C[a2 - 1] | dword_21B9A7CA4[a2 - 1];
    }
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &unk_26CB99920;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_21B86D110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B86D154(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    int v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  int v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unint64_t v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unint64_t v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B86D2D0(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

void *sub_21B86D2E4(uint64_t a1, _WORD *a2)
{
  size_t result = (void *)sub_21B86DA48(a1);
  if ((result & 1) == 0)
  {
    sub_21B86DC90(v20, a1);
    sub_21B86DDCC((uint64_t *)&v15, a1);
    v21[0] = &v15;
    v21[1] = a2;
    if (v18 == 1)
    {
      sub_21B895924(v21, v5);
    }
    else if (v16 && v17)
    {
      int v6 = v16 - 1;
      uint64_t v7 = v15;
      uint64_t v8 = 2 * v18;
      int v9 = v17 - 1;
      if (v17 != 1)
      {
        uint64_t v10 = v19;
        if (v16 == 1)
        {
          do
          {
            *uint64_t v7 = *a2;
            v7 += v10;
            --v9;
          }
          while (v9);
        }
        else
        {
          int v11 = 0;
          uint64_t v12 = 2 * v19;
          do
          {
            unint64_t v13 = v7;
            int v14 = v6;
            do
            {
              *unint64_t v13 = *a2;
              unint64_t v13 = (_WORD *)((char *)v13 + v8);
              --v14;
            }
            while (v14);
            *unint64_t v13 = *a2;
            uint64_t v7 = (_WORD *)((char *)v7 + v12);
            ++v11;
          }
          while (v11 != v9);
        }
      }
      for (; v6; --v6)
      {
        *uint64_t v7 = *a2;
        uint64_t v7 = (_WORD *)((char *)v7 + v8);
      }
      *uint64_t v7 = *a2;
    }
    return sub_21B8A1D54(v20);
  }
  return result;
}

void sub_21B86D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A1D54((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86D418(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96F10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86D490(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26CB96F10;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86CDC0(0, 3, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v14, v6);
    sub_21B869B94(v15, (uint64_t)v14);
    uint64_t v8 = v15[1];
    uint64_t v9 = v15[2];
    sub_21B8A1880(v14);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_21B86DA48(a1))
  {
    sub_21B86DC90(v15, a1);
    sub_21B86DDCC(v14, a1);
    v13[0] = (uint64_t)&v11;
    v13[1] = (uint64_t)v14;
    sub_21B895CE4(v13);
    sub_21B8A1D54(v15);
  }
  return a1;
}

void sub_21B86D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v7);
  _Unwind_Resume(a1);
}

void sub_21B86D5C8(_Unwind_Exception *a1)
{
  sub_21B8A1D54((void *)(v2 - 56));
  sub_21B86D418(v1);
  _Unwind_Resume(a1);
}

void sub_21B86D5E4(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86D5F8(_Unwind_Exception *a1)
{
  sub_21B86D418(v1);
  _Unwind_Resume(a1);
}

void sub_21B86D614(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        __n128 v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            uint64_t v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B86D8D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = &unk_26CB99920;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = &unk_26CB99920;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = &unk_26CB99920;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_21B84C734();
  }
}

BOOL sub_21B86DA48(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86DC90(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86D154(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86DDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86DDCC(uint64_t *a1, uint64_t a2)
{
  if (sub_21B86DA48(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        int v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        int v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              int v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              int v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        int v16 = 0;
        int v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(a1, (uint64_t)&v14);
        int v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B86E040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86E064(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86D154(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B86E18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86E1A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 843264104);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B86E2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B86E2C4(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 2;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B86E4BC(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B86E638(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86E64C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96FA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86E6C4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26CB96FA0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86E1A0(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v16, v6);
    sub_21B86E2C4((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_21B86EB1C(a1))
  {
    sub_21B86ED64(v16, a1);
    sub_21B86EEA0((uint64_t)v17, a1);
    v15[0] = (uint64_t)v14;
    v15[1] = (uint64_t)v17;
    sub_21B896778(v15);
    sub_21B8A1D54(v16);
  }
  return a1;
}

void sub_21B86E7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v10);
  _Unwind_Resume(a1);
}

void sub_21B86E80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B86E64C(v10);
  _Unwind_Resume(a1);
}

void sub_21B86E828(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86E83C(_Unwind_Exception *a1)
{
  sub_21B86E64C(v1);
  _Unwind_Resume(a1);
}

void sub_21B86E858(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B86EB1C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86ED64(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86E4BC(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86EE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86EEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86EB1C(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        BOOL v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          unint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86E2C4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B86F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B86F158(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86E4BC(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B86F280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86F294(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 1380411457);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B86F39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B86F3B8(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unint64_t v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unint64_t v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B86F534(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B86F548(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97030;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B86F5C0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26CB97030;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B86F294(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v16, v6);
    sub_21B86BDA4((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_21B86FA18(a1))
  {
    sub_21B86FC60(v16, a1);
    sub_21B86FD9C((uint64_t)v17, a1);
    v15[0] = v14;
    v15[1] = v17;
    sub_21B897400(v15);
    sub_21B8A1D54(v16);
  }
  return a1;
}

void sub_21B86F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v10);
  _Unwind_Resume(a1);
}

void sub_21B86F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B86F548(v10);
  _Unwind_Resume(a1);
}

void sub_21B86F724(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B86F738(_Unwind_Exception *a1)
{
  sub_21B86F548(v1);
  _Unwind_Resume(a1);
}

void sub_21B86F754(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B86F9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B86FA18(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B86FC60(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B86F3B8(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B86FD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B86FD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86FA18(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        BOOL v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          unint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B870030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B870054(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B86F3B8(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B87017C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B870190(uint64_t result, _DWORD *a2)
{
  if (*a2) {
    BOOL v2 = a2[1] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, (uint64_t)a2, 1278226534);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B870298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B8702B4(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = ((unint64_t)(result >> 2) << 32) | 1;
  if (HIDWORD(v14) * (result >> 2) == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B870430(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B8705AC(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8705C0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB970C0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B870638(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26CB970C0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B870190(a1 + 16, a2);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v13, v6);
    sub_21B8702B4(v14, (uint64_t)v13);
    uint64_t v8 = v14[1];
    uint64_t v9 = v14[2];
    sub_21B8A1880(v13);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_21B870A6C(a1))
  {
    sub_21B870CB4(v14, a1);
    sub_21B870DF0(v13, a1);
    sub_21B897A38((uint64_t)&v11, (uint64_t)v13);
    sub_21B8A1D54(v14);
  }
  return a1;
}

void sub_21B870740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v5);
  _Unwind_Resume(a1);
}

void sub_21B87075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B8705C0(v8);
  _Unwind_Resume(a1);
}

void sub_21B870778(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B87078C(_Unwind_Exception *a1)
{
  sub_21B8705C0(v1);
  _Unwind_Resume(a1);
}

void sub_21B8707A8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            uint64_t v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B870A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B870A6C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B870CB4(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B870430(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B870DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B870DF0(uint64_t *a1, uint64_t a2)
{
  if (sub_21B870A6C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        unint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              unint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B8702B4(a1, (uint64_t)&v14);
        unint64_t v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B871064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B871088(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B870430(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B8711B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8711C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 843264102);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B8712CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B8712E8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  size_t v11 = result >> 2;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 2;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B8714E0(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B87165C(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B871670(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97150;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B8716E8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26CB97150;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B8711C4(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v16, v6);
    sub_21B8712E8((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_21B871B40(a1))
  {
    sub_21B871D88(v16, a1);
    sub_21B871EC4((uint64_t)v17, a1);
    v15[0] = (uint64_t)v14;
    v15[1] = (uint64_t)v17;
    sub_21B89861C(v15);
    sub_21B8A1D54(v16);
  }
  return a1;
}

void sub_21B871814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v10);
  _Unwind_Resume(a1);
}

void sub_21B871830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B871670(v10);
  _Unwind_Resume(a1);
}

void sub_21B87184C(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B871860(_Unwind_Exception *a1)
{
  sub_21B871670(v1);
  _Unwind_Resume(a1);
}

void sub_21B87187C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B871B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B871B40(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B871D88(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B8714E0(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B871EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B871EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B871B40(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        BOOL v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          unint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8712E8(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B872158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87217C(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B8714E0(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B8722A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8722B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v3 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    strcpy((char *)operator new(0x70uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21B8A2D24((uint64_t)v4, v2, 1380410945);
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)size_t result = &unk_26CB99920;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B8723C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21B8723DC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_21B8A134C(a2, 0);
  unsigned int v8 = sub_21B8A3220(a2);
  unsigned int v9 = sub_21B8A33A4(a2);
  size_t result = sub_21B8A3528(a2);
  size_t v11 = result >> 2;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 4;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_21B8725D4(void *a1, uint64_t *a2)
{
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &unk_26CB99920;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &unk_26CB99920;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_21B997215, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_21B984AC4);
    abort();
  }
}

void sub_21B872750(_Unwind_Exception *a1)
{
  sub_21B8A2C8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B872764(uint64_t a1)
{
  *(void *)a1 = &unk_26CB971E0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_21B8727DC(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB971E0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_21B8722B8(a1 + 16, a2);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v21, v6);
    sub_21B8723DC((uint64_t)v17, (uint64_t)v21);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_21B8A1880(v21);
  }
  long long v12 = a3[1];
  long long v14 = *a3;
  long long v15 = v12;
  long long v16 = a3[2];
  if (!sub_21B872C80(a1))
  {
    sub_21B872EC8(v21, a1);
    sub_21B873004((uint64_t)v17, a1);
    v22[0] = (uint64_t)&v14;
    v22[1] = (uint64_t)v17;
    if (DWORD1(v15) == 1 && HIDWORD(v18) == 1)
    {
      sub_21B898758(v22);
    }
    else
    {
      char v23 = 0;
      if (DWORD2(v14) && HIDWORD(v14) && v15)
      {
        uint64_t v24 = &v23;
        sub_21B898FA4((uint64_t)&v24, (uint64_t)&v14, (uint64_t)v17);
      }
    }
    sub_21B8A1D54(v21);
  }
  return a1;
}

void sub_21B872954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v14);
  _Unwind_Resume(a1);
}

void sub_21B872970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1D54((uint64_t *)va);
  sub_21B872764(v14);
  _Unwind_Resume(a1);
}

void sub_21B87298C(_Unwind_Exception *a1)
{
  sub_21B865094(v1);
  _Unwind_Resume(a1);
}

void sub_21B8729A0(_Unwind_Exception *a1)
{
  sub_21B872764(v1);
  _Unwind_Resume(a1);
}

void sub_21B8729BC(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      BOOL v8 = &unk_26CB99920;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            BOOL v8 = &unk_26CB99920;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_21B8A39A4((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      BOOL v8 = &unk_26CB99920;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_21B84C734();
  }
}

void sub_21B872C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_21B872C80(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        BOOL v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_21B84C734();
  }
}

void sub_21B872EC8(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21B8A1B14(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_21B84C734();
    }
    sub_21B8725D4(v7, v4);
    sub_21B8A19D0(a1, (uint64_t)v7);
    v7[0] = &unk_26CB99920;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_21B8A19D0(a1, (uint64_t)v4);
  }
}

void sub_21B872FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873004(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B872C80(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8723DC(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        unint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B873298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8732BC(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_21B8A14FC(a1, (uint64_t)v4);
      return;
    case 1:
      sub_21B8A1640(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_21B8725D4(v7, v4);
      sub_21B8A14FC(a1, (uint64_t)v7);
      v7[0] = &unk_26CB99920;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_21B84C734();
  }
}

void sub_21B8733E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8733F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26CB97270;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(void *)&long long v9 = *(void *)a2;
  *((void *)&v9 + 1) = v3 | (v4 << 32);
  *(void *)a1 = &unk_26CB96B20;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_21B8646A0(0, 1, &v9, a1 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v10, v5);
    sub_21B864BE8(v11, (uint64_t)v10);
    uint64_t v6 = v11[1];
    uint64_t v7 = v11[2];
    sub_21B8A1880(v10);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)a1 = &unk_26CB97270;
  return a1;
}

void sub_21B8734FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_21B8A1880(&a16);
  uint64_t v19 = *(unsigned int *)(v16 + 40);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v19])(&a15, v17);
  }
  *(_DWORD *)(v16 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_21B873548(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96B20;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8735C0(uint64_t *a1, uint64_t a2)
{
  if (sub_21B8656A8(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B864BE8(a1, (uint64_t)&v14);
        uint64_t v14 = &unk_26CB99920;
        long long v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B873834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873858(void *a1, uint64_t a2)
{
  if (sub_21B8656A8(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &unk_26CB99920;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &unk_26CB99920;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B864BE8(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &unk_26CB99920;
        long long v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B873ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873B00(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      BOOL v4 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v10 = *(uint64_t **)(a1 + 24);
      uint64_t v11 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        long long v9 = v8;
        if (v8 && *(void *)(a1 + 16))
        {
          uint64_t v10 = *(uint64_t **)(a1 + 16);
          uint64_t v11 = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_20;
        }
      }
      else
      {
        long long v9 = 0;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      if (!v9) {
        goto LABEL_4;
      }
LABEL_20:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_4:
      if (!v10)
      {
        uint64_t v5 = 0;
        goto LABEL_9;
      }
      uint64_t v5 = *v10;
      uint64_t v6 = (std::__shared_weak_count *)v10[1];
      if (!v6)
      {
LABEL_9:
        *a2 = v5;
        a2[1] = 0;
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *a2 = v5;
      a2[1] = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_10:
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    default:
      sub_21B84C734();
  }
}

uint64_t sub_21B873D54()
{
  return 1;
}

uint64_t (***sub_21B873D5C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B873DD8(uint64_t a1)
{
  sub_21B865CC0(v4, a1);
  sub_21B873858(&v3, a1);
  sub_21B873858(&v2, a1);
  operator new();
}

void sub_21B873EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40A1F8E8FFLL);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B873F08(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B873F14(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB99818, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 1);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v12);
    sub_21B8735C0((uint64_t *)&v22, a1);
    v21[0] = (size_t)&v15;
    v21[1] = (size_t)&v22;
    sub_21B892E98(v21);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B865CC0(v21, (uint64_t)v5);
  sub_21B873858(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26CB97270;
  if (HIDWORD(v20) <= 0x20) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_21B8650F0((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26CB97270;
  sub_21B8A1880(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26CB97E58[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB96B20;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26CB97E18[v14])(&v22, v16);
  }
  return result;
}

void sub_21B874160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8741C4(uint64_t a1)
{
  sub_21B8735C0(v2, a1);
  return v2[0];
}

void sub_21B8741F0(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8735C0((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B87429C(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B873858(&v3, a1);
  operator new();
}

long long *sub_21B874348()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E098, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E098))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E0A0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0A8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E0A8))
    {
LABEL_13:
      if (byte_267C5E37F < 0)
      {
        sub_21B846188(&xmmword_267C5E350, (void *)qword_267C5E368, unk_267C5E370);
      }
      else
      {
        xmmword_267C5E350 = *(_OWORD *)&qword_267C5E368;
        unk_267C5E360 = unk_267C5E378;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E350, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0A0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E0B0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray8u>]", &qword_267C5E380);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E380, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0B0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0B8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E0B8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0C0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E0C0))
      {
        if (byte_267C5E398[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E398, *(unint64_t *)&byte_267C5E398[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E398;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E3B0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E3B0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E0C0);
      }
      if (byte_267C5E3C7 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E3B0, *((unint64_t *)&xmmword_267C5E3B0 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5E3B0;
        uint64_t v12 = unk_267C5E3C0;
      }
      sub_21B89E0F0(v11, (std::string *)&qword_267C5E368);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E368, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0A8);
      goto LABEL_13;
    }
    if (byte_267C5E397 >= 0) {
      size_t v1 = byte_267C5E397;
    }
    else {
      size_t v1 = unk_267C5E388;
    }
    if (byte_267C5E397 >= 0) {
      long long v2 = &qword_267C5E380;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E380;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E398[8] = v1;
      *(void *)&byte_267C5E398[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E398 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E398;
      byte_267C5E398[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E398, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E0B8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E367 < 0)
  {
    sub_21B846188(&xmmword_267C5E338, (void *)xmmword_267C5E350, *((unint64_t *)&xmmword_267C5E350 + 1));
  }
  else
  {
    xmmword_267C5E338 = xmmword_267C5E350;
    unk_267C5E348 = unk_267C5E360;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E338, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E098);
LABEL_2:
  if (byte_267C5E34F >= 0) {
    return &xmmword_267C5E338;
  }
  else {
    return (long long *)xmmword_267C5E338;
  }
}

void sub_21B8747D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E0A8);
  __cxa_guard_abort(&qword_267C5E0A0);
  __cxa_guard_abort(&qword_267C5E098);
  _Unwind_Resume(a1);
}

void sub_21B87486C(_Unwind_Exception *a1)
{
}

void sub_21B874884()
{
}

void sub_21B8748CC(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B8658F0(a1, &v2);
    operator new();
  }
  sub_21B865CC0(&v2, a1);
  operator new();
}

void sub_21B874A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B874A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B874A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B874AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B874AB4()
{
  return 65792;
}

uint64_t sub_21B874AC4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96D60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B874B3C(uint64_t *a1, uint64_t a2)
{
  if (sub_21B86A34C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(a1, (uint64_t)&v14);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B874DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B874DD4(void *a1, uint64_t a2)
{
  if (sub_21B86A34C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &unk_26CB99920;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &unk_26CB99920;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &unk_26CB99920;
        uint64_t v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B875058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B87507C()
{
  return 2;
}

uint64_t (***sub_21B875084())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B875100(uint64_t a1)
{
  sub_21B86A968(v4, a1);
  sub_21B874DD4(&v3, a1);
  sub_21B874DD4(&v2, a1);
  operator new();
}

void sub_21B8751DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40A1F8E8FFLL);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B875208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B875230(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B87523C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C00, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 2);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v12);
    sub_21B874B3C((uint64_t *)&v22, a1);
    sub_21B8943FC((uint64_t *)&v15, (uint64_t)&v22);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B86A968(v21, (uint64_t)v5);
  sub_21B874DD4(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26CB97300;
  if (HIDWORD(v20) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_21B869F18((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26CB97300;
  sub_21B8A1880(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26CB97E58[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB96D60;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26CB97E18[v14])(&v22, v16);
  }
  return result;
}

void sub_21B875480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8754E4(uint64_t a1)
{
  sub_21B874B3C(v2, a1);
  return v2[0];
}

void sub_21B875510(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B874B3C((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B8755BC(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B874DD4(&v3, a1);
  operator new();
}

long long *sub_21B875668()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E0C8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E0D0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0D8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E0D8))
    {
LABEL_13:
      if (byte_267C5E40F < 0)
      {
        sub_21B846188(&xmmword_267C5E3E0, (void *)qword_267C5E3F8, unk_267C5E400);
      }
      else
      {
        xmmword_267C5E3E0 = *(_OWORD *)&qword_267C5E3F8;
        unk_267C5E3F0 = unk_267C5E408;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E3E0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0D0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0E0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E0E0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16u>]", &qword_267C5E410);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E410, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0E0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0E8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E0E8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0F0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E0F0))
      {
        if (byte_267C5E428[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E428, *(unint64_t *)&byte_267C5E428[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E428;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E440);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E440, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E0F0);
      }
      if (byte_267C5E457 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E440, *((unint64_t *)&xmmword_267C5E440 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5E440;
        uint64_t v12 = unk_267C5E450;
      }
      sub_21B89E41C(v11, (std::string *)&qword_267C5E3F8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E3F8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E0D8);
      goto LABEL_13;
    }
    if (byte_267C5E427 >= 0) {
      size_t v1 = byte_267C5E427;
    }
    else {
      size_t v1 = unk_267C5E418;
    }
    if (byte_267C5E427 >= 0) {
      long long v2 = &qword_267C5E410;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E410;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E428[8] = v1;
      *(void *)&byte_267C5E428[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E428 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E428;
      byte_267C5E428[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E428, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E0E8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E3F7 < 0)
  {
    sub_21B846188(&xmmword_267C5E3C8, (void *)xmmword_267C5E3E0, *((unint64_t *)&xmmword_267C5E3E0 + 1));
  }
  else
  {
    xmmword_267C5E3C8 = xmmword_267C5E3E0;
    unk_267C5E3D8 = unk_267C5E3F0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E3C8, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E0C8);
LABEL_2:
  if (byte_267C5E3DF >= 0) {
    return &xmmword_267C5E3C8;
  }
  else {
    return (long long *)xmmword_267C5E3C8;
  }
}

void sub_21B875AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E0D8);
  __cxa_guard_abort(&qword_267C5E0D0);
  __cxa_guard_abort(&qword_267C5E0C8);
  _Unwind_Resume(a1);
}

void sub_21B875B8C(_Unwind_Exception *a1)
{
}

void sub_21B875BA4()
{
}

void sub_21B875BEC(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86A594(&v2, a1);
    operator new();
  }
  sub_21B86A968(&v2, a1);
  operator new();
}

void sub_21B875D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B875D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B875D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B875DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B875DD0()
{
  return 65792;
}

void sub_21B875DDC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B875DE8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96F10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B875E60(uint64_t *a1, uint64_t a2)
{
  if (sub_21B86DA48(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(a1, (uint64_t)&v14);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B8760D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8760F8(void *a1, uint64_t a2)
{
  if (sub_21B86DA48(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &unk_26CB99920;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &unk_26CB99920;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B869B94(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &unk_26CB99920;
        uint64_t v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8763A0(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      BOOL v4 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v10 = *(uint64_t **)(a1 + 24);
      uint64_t v11 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        uint64_t v9 = v8;
        if (v8 && *(void *)(a1 + 16))
        {
          uint64_t v10 = *(uint64_t **)(a1 + 16);
          uint64_t v11 = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      if (!v9) {
        goto LABEL_4;
      }
LABEL_20:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_4:
      if (!v10)
      {
        uint64_t v5 = 0;
        goto LABEL_9;
      }
      uint64_t v5 = *v10;
      uint64_t v6 = (std::__shared_weak_count *)v10[1];
      if (!v6)
      {
LABEL_9:
        *a2 = v5;
        a2[1] = 0;
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *a2 = v5;
      a2[1] = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_10:
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    default:
      sub_21B84C734();
  }
}

uint64_t sub_21B8765F4()
{
  return 3;
}

uint64_t (***sub_21B8765FC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B876678(uint64_t a1)
{
  sub_21B86E064(v4, a1);
  sub_21B8760F8(&v3, a1);
  sub_21B8760F8(&v2, a1);
  operator new();
}

void sub_21B876754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40A1F8E8FFLL);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B876780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B876794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8767A8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B8767B4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C18, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 3);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v12);
    sub_21B875E60((uint64_t *)&v22, a1);
    v21[0] = (uint64_t)&v15;
    v21[1] = (uint64_t)&v22;
    *(void *)&double result = sub_21B895CE4(v21);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B86E064(v21, (uint64_t)v5);
  sub_21B8760F8(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26CB97390;
  if (HIDWORD(v20) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_21B86D490((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26CB97390;
  sub_21B8A1880(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26CB97E58[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB96F10;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26CB97E18[v14])(&v22, v16);
  }
  return result;
}

void sub_21B876A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B876A64(uint64_t a1)
{
  sub_21B875E60(v2, a1);
  return v2[0];
}

void sub_21B876A90(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B875E60((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B876B3C(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8760F8(&v3, a1);
  operator new();
}

long long *sub_21B876BE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E0F8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E0F8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E100))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E108, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E108))
    {
LABEL_13:
      if (byte_267C5E49F < 0)
      {
        sub_21B846188(&xmmword_267C5E470, (void *)qword_267C5E488, unk_267C5E490);
      }
      else
      {
        xmmword_267C5E470 = *(_OWORD *)&qword_267C5E488;
        unk_267C5E480 = unk_267C5E498;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E470, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E100);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E110, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E110))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16f>]", &qword_267C5E4A0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E4A0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E110);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E118, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E118))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E120, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E120))
      {
        if (byte_267C5E4B8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E4B8, *(unint64_t *)&byte_267C5E4B8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E4B8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E4D0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E4D0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E120);
      }
      if (byte_267C5E4E7 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E4D0, *((unint64_t *)&xmmword_267C5E4D0 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5E4D0;
        uint64_t v12 = unk_267C5E4E0;
      }
      sub_21B89E548(v11, (std::string *)&qword_267C5E488);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E488, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E108);
      goto LABEL_13;
    }
    if (byte_267C5E4B7 >= 0) {
      size_t v1 = byte_267C5E4B7;
    }
    else {
      size_t v1 = unk_267C5E4A8;
    }
    if (byte_267C5E4B7 >= 0) {
      long long v2 = &qword_267C5E4A0;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E4A0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E4B8[8] = v1;
      *(void *)&byte_267C5E4B8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E4B8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E4B8;
      byte_267C5E4B8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E4B8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E118);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E487 < 0)
  {
    sub_21B846188(&xmmword_267C5E458, (void *)xmmword_267C5E470, *((unint64_t *)&xmmword_267C5E470 + 1));
  }
  else
  {
    xmmword_267C5E458 = xmmword_267C5E470;
    unk_267C5E468 = unk_267C5E480;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E458, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E0F8);
LABEL_2:
  if (byte_267C5E46F >= 0) {
    return &xmmword_267C5E458;
  }
  else {
    return (long long *)xmmword_267C5E458;
  }
}

void sub_21B877070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E108);
  __cxa_guard_abort(&qword_267C5E100);
  __cxa_guard_abort(&qword_267C5E0F8);
  _Unwind_Resume(a1);
}

void sub_21B87710C(_Unwind_Exception *a1)
{
}

void sub_21B877124()
{
}

void sub_21B87716C(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86DC90(&v2, a1);
    operator new();
  }
  sub_21B86E064(&v2, a1);
  operator new();
}

void sub_21B8772C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8772F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B877308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B877350()
{
  return 65792;
}

void sub_21B87735C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B877368(uint64_t a1)
{
  *(void *)a1 = &unk_26CB970C0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8773E0(uint64_t *a1, uint64_t a2)
{
  if (sub_21B870A6C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v14 = &unk_26CB99920;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B8702B4(a1, (uint64_t)&v14);
        uint64_t v14 = &unk_26CB99920;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B877654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B877678(void *a1, uint64_t a2)
{
  if (sub_21B870A6C(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &unk_26CB99920;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &unk_26CB99920;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &unk_26CB99920;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_21B8702B4(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &unk_26CB99920;
        uint64_t v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B8778FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B877920()
{
  return 4;
}

uint64_t (***sub_21B877928())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B8779A4(uint64_t a1)
{
  sub_21B871088(v4, a1);
  sub_21B877678(&v3, a1);
  sub_21B877678(&v2, a1);
  operator new();
}

void sub_21B877A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40A1F8E8FFLL);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B877AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B877AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B877AD4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B877AE0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C30, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 4);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v12);
    sub_21B8773E0((uint64_t *)&v22, a1);
    *(float *)&double result = sub_21B897A38((uint64_t)&v15, (uint64_t)&v22);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B871088(v21, (uint64_t)v5);
  sub_21B877678(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26CB97420;
  if (HIDWORD(v20) <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_21B870638((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26CB97420;
  sub_21B8A1880(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26CB97E58[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB970C0;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26CB97E18[v14])(&v22, v16);
  }
  return result;
}

void sub_21B877D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B877D88(uint64_t a1)
{
  sub_21B8773E0(v2, a1);
  return v2[0];
}

void sub_21B877DB4(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8773E0((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B877E60(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B877678(&v3, a1);
  operator new();
}

long long *sub_21B877F0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E128, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E128))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E130))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E138, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E138))
    {
LABEL_13:
      if (byte_267C5E52F < 0)
      {
        sub_21B846188(&xmmword_267C5E500, (void *)qword_267C5E518, unk_267C5E520);
      }
      else
      {
        xmmword_267C5E500 = *(_OWORD *)&qword_267C5E518;
        unk_267C5E510 = unk_267C5E528;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E500, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E130);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E140, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E140))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray32f>]", &qword_267C5E530);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E530, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E140);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E148, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E148))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E150, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E150))
      {
        if (byte_267C5E548[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E548, *(unint64_t *)&byte_267C5E548[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E548;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E560);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E560, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E150);
      }
      if (byte_267C5E577 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E560, *((unint64_t *)&xmmword_267C5E560 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5E560;
        uint64_t v12 = unk_267C5E570;
      }
      sub_21B89E674(v11, (std::string *)&qword_267C5E518);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E518, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E138);
      goto LABEL_13;
    }
    if (byte_267C5E547 >= 0) {
      size_t v1 = byte_267C5E547;
    }
    else {
      size_t v1 = unk_267C5E538;
    }
    if (byte_267C5E547 >= 0) {
      long long v2 = &qword_267C5E530;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E530;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E548[8] = v1;
      *(void *)&byte_267C5E548[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E548 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E548;
      byte_267C5E548[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E548, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E148);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E517 < 0)
  {
    sub_21B846188(&xmmword_267C5E4E8, (void *)xmmword_267C5E500, *((unint64_t *)&xmmword_267C5E500 + 1));
  }
  else
  {
    xmmword_267C5E4E8 = xmmword_267C5E500;
    unk_267C5E4F8 = unk_267C5E510;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E4E8, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E128);
LABEL_2:
  if (byte_267C5E4FF >= 0) {
    return &xmmword_267C5E4E8;
  }
  else {
    return (long long *)xmmword_267C5E4E8;
  }
}

void sub_21B878394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E138);
  __cxa_guard_abort(&qword_267C5E130);
  __cxa_guard_abort(&qword_267C5E128);
  _Unwind_Resume(a1);
}

void sub_21B878430(_Unwind_Exception *a1)
{
}

void sub_21B878448()
{
}

void sub_21B878490(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B870CB4(&v2, a1);
    operator new();
  }
  sub_21B871088(&v2, a1);
  operator new();
}

void sub_21B8785E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B878618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87862C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B878660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B878674()
{
  return 65792;
}

void sub_21B878680(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B87868C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96BB0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B878704(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B8668E4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B865F24(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B878998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8789BC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B8668E4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)int v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)int v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B865F24((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B878C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B878C94(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      BOOL v4 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v10 = *(uint64_t **)(a1 + 24);
      uint64_t v11 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      if (v7)
      {
        unint64_t v8 = std::__shared_weak_count::lock(v7);
        unint64_t v9 = v8;
        if (v8 && *(void *)(a1 + 16))
        {
          uint64_t v10 = *(uint64_t **)(a1 + 16);
          uint64_t v11 = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v9 = 0;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      if (!v9) {
        goto LABEL_4;
      }
LABEL_20:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_4:
      if (!v10)
      {
        uint64_t v5 = 0;
        goto LABEL_9;
      }
      uint64_t v5 = *v10;
      uint64_t v6 = (std::__shared_weak_count *)v10[1];
      if (!v6)
      {
LABEL_9:
        *a2 = v5;
        a2[1] = 0;
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *a2 = v5;
      a2[1] = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_10:
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    default:
      sub_21B84C734();
  }
}

uint64_t sub_21B878EE8()
{
  return 5;
}

uint64_t (***sub_21B878EF0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B878F6C(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B866F20(v4, a1);
  sub_21B8789BC((uint64_t)v3, a1);
  sub_21B8789BC((uint64_t)&v2, a1);
  operator new();
}

void sub_21B8790B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8790DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8790F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B879108(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B879114(uint64_t a1, uint64_t *lpsrc)
{
  size_t v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C48, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 5);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_21B878704((uint64_t)v30, a1);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    sub_21B8933A8((size_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B866F20(v29, (uint64_t)v5);
  sub_21B8789BC((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26CB974B0;
  if (HIDWORD(v28) <= 0x20) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_21B86631C((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26CB974B0;
  sub_21B8A1880(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB97E18[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB97E58[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26CB96BB0;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB97E18[v18])(v30, &v22);
  }
  return result;
}

void sub_21B8793DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B879460(uint64_t a1)
{
  sub_21B878704((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87948C(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B878704((uint64_t)&v3, a1);
  operator new();
}

void sub_21B879538(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8789BC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8795E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E158, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E158))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E160))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E168, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E168))
    {
LABEL_13:
      if (byte_267C5E5BF < 0)
      {
        sub_21B846188(&xmmword_267C5E590, (void *)qword_267C5E5A8, unk_267C5E5B0);
      }
      else
      {
        xmmword_267C5E590 = *(_OWORD *)&qword_267C5E5A8;
        unk_267C5E5A0 = unk_267C5E5B8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E590, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E160);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E170, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E170))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two8u>]", &qword_267C5E5C0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E5C0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E170);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E178, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E178))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E180, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E180))
      {
        if (byte_267C5E5D8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E5D8, *(unint64_t *)&byte_267C5E5D8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E5D8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E5F0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E5F0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E180);
      }
      if (byte_267C5E607 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E5F0, *((unint64_t *)&xmmword_267C5E5F0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E5F0;
        uint64_t v12 = unk_267C5E600;
      }
      sub_21B89E7A0(v11, (std::string *)&qword_267C5E5A8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E5A8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E168);
      goto LABEL_13;
    }
    if (byte_267C5E5D7 >= 0) {
      size_t v1 = byte_267C5E5D7;
    }
    else {
      size_t v1 = unk_267C5E5C8;
    }
    if (byte_267C5E5D7 >= 0) {
      long long v2 = &qword_267C5E5C0;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E5C0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E5D8[8] = v1;
      *(void *)&byte_267C5E5D8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E5D8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E5D8;
      byte_267C5E5D8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E5D8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E178);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E5A7 < 0)
  {
    sub_21B846188(&xmmword_267C5E578, (void *)xmmword_267C5E590, *((unint64_t *)&xmmword_267C5E590 + 1));
  }
  else
  {
    xmmword_267C5E578 = xmmword_267C5E590;
    unk_267C5E588 = unk_267C5E5A0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E578, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E158);
LABEL_2:
  if (byte_267C5E58F >= 0) {
    return &xmmword_267C5E578;
  }
  else {
    return (long long *)xmmword_267C5E578;
  }
}

void sub_21B879A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E168);
  __cxa_guard_abort(&qword_267C5E160);
  __cxa_guard_abort(&qword_267C5E158);
  _Unwind_Resume(a1);
}

void sub_21B879B08(_Unwind_Exception *a1)
{
}

void sub_21B879B20()
{
}

void sub_21B879B68(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B866B2C(&v2, a1);
    operator new();
  }
  sub_21B866F20(&v2, a1);
  operator new();
}

void sub_21B879CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B879CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B879D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B879D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B879D4C()
{
  return 65792;
}

void sub_21B879D58(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B879D64(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96FA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B879DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86EB1C(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86E2C4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87A094(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B86EB1C(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86E2C4((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87A36C()
{
  return 7;
}

uint64_t (***sub_21B87A374())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B87A3F0(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B86F158(v4, a1);
  sub_21B87A094((uint64_t)v3, a1);
  sub_21B87A094((uint64_t)&v2, a1);
  operator new();
}

void sub_21B87A534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87A560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87A58C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B87A598(uint64_t a1, uint64_t *lpsrc)
{
  size_t v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C60, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 7);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_21B879DDC((uint64_t)v30, a1);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    *(void *)&double result = sub_21B896778((uint64_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B86F158(v29, (uint64_t)v5);
  sub_21B87A094((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26CB97540;
  if (HIDWORD(v28) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_21B86E6C4((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26CB97540;
  sub_21B8A1880(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB97E18[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB97E58[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26CB96FA0;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB97E18[v18])(v30, &v22);
  }
  return result;
}

void sub_21B87A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B87A8E4(uint64_t a1)
{
  sub_21B879DDC((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87A910(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B879DDC((uint64_t)&v3, a1);
  operator new();
}

void sub_21B87A9BC(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87A094((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B87AA68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E188, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E188))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E190))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E198, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E198))
    {
LABEL_13:
      if (byte_267C5E64F < 0)
      {
        sub_21B846188(&xmmword_267C5E620, (void *)qword_267C5E638, unk_267C5E640);
      }
      else
      {
        xmmword_267C5E620 = *(_OWORD *)&qword_267C5E638;
        unk_267C5E630 = unk_267C5E648;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E620, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E190);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1A0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E1A0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two16f>]", &qword_267C5E650);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E650, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1A0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1A8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E1A8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1B0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E1B0))
      {
        if (byte_267C5E668[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E668, *(unint64_t *)&byte_267C5E668[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E668;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E680);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E680, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E1B0);
      }
      if (byte_267C5E697 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E680, *((unint64_t *)&xmmword_267C5E680 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E680;
        uint64_t v12 = unk_267C5E690;
      }
      sub_21B89E8CC(v11, (std::string *)&qword_267C5E638);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E638, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E198);
      goto LABEL_13;
    }
    if (byte_267C5E667 >= 0) {
      size_t v1 = byte_267C5E667;
    }
    else {
      size_t v1 = unk_267C5E658;
    }
    if (byte_267C5E667 >= 0) {
      long long v2 = &qword_267C5E650;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E650;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E668[8] = v1;
      *(void *)&byte_267C5E668[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E668 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E668;
      byte_267C5E668[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E668, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E1A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E637 < 0)
  {
    sub_21B846188(&xmmword_267C5E608, (void *)xmmword_267C5E620, *((unint64_t *)&xmmword_267C5E620 + 1));
  }
  else
  {
    xmmword_267C5E608 = xmmword_267C5E620;
    unk_267C5E618 = unk_267C5E630;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E608, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E188);
LABEL_2:
  if (byte_267C5E61F >= 0) {
    return &xmmword_267C5E608;
  }
  else {
    return (long long *)xmmword_267C5E608;
  }
}

void sub_21B87AEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E198);
  __cxa_guard_abort(&qword_267C5E190);
  __cxa_guard_abort(&qword_267C5E188);
  _Unwind_Resume(a1);
}

void sub_21B87AF8C(_Unwind_Exception *a1)
{
}

void sub_21B87AFA4()
{
}

void sub_21B87AFEC(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86ED64(&v2, a1);
    operator new();
  }
  sub_21B86F158(&v2, a1);
  operator new();
}

void sub_21B87B140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87B174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87B188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87B1D0()
{
  return 65792;
}

void sub_21B87B1DC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B87B1E8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97150;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B87B260(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B871B40(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8712E8(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87B4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87B518(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B871B40(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8712E8((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87B7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87B7F0()
{
  return 8;
}

uint64_t (***sub_21B87B7F8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B87B874(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B87217C(v4, a1);
  sub_21B87B518((uint64_t)v3, a1);
  sub_21B87B518((uint64_t)&v2, a1);
  operator new();
}

void sub_21B87B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87B9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87BA10(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B87BA1C(uint64_t a1, uint64_t *lpsrc)
{
  size_t v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C78, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 8);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_21B87B260((uint64_t)v30, a1);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    *(float *)&double result = sub_21B89861C((uint64_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B87217C(v29, (uint64_t)v5);
  sub_21B87B518((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26CB975D0;
  if (HIDWORD(v28) <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_21B8716E8((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26CB975D0;
  sub_21B8A1880(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB97E18[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB97E58[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26CB97150;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB97E18[v18])(v30, &v22);
  }
  return result;
}

void sub_21B87BCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B87BD68(uint64_t a1)
{
  sub_21B87B260((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87BD94(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87B260((uint64_t)&v3, a1);
  operator new();
}

void sub_21B87BE40(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87B518((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B87BEEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E1B8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E1C0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1C8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E1C8))
    {
LABEL_13:
      if (byte_267C5E6DF < 0)
      {
        sub_21B846188(&xmmword_267C5E6B0, (void *)qword_267C5E6C8, unk_267C5E6D0);
      }
      else
      {
        xmmword_267C5E6B0 = *(_OWORD *)&qword_267C5E6C8;
        unk_267C5E6C0 = unk_267C5E6D8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E6B0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1C0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E1D0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two32f>]", &qword_267C5E6E0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E6E0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1D0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1D8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E1D8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E1E0))
      {
        if (byte_267C5E6F8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E6F8, *(unint64_t *)&byte_267C5E6F8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E6F8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E710);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E710, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E1E0);
      }
      if (byte_267C5E727 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E710, *((unint64_t *)&xmmword_267C5E710 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E710;
        uint64_t v12 = unk_267C5E720;
      }
      sub_21B89E9F8(v11, (std::string *)&qword_267C5E6C8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E6C8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1C8);
      goto LABEL_13;
    }
    if (byte_267C5E6F7 >= 0) {
      size_t v1 = byte_267C5E6F7;
    }
    else {
      size_t v1 = unk_267C5E6E8;
    }
    if (byte_267C5E6F7 >= 0) {
      long long v2 = &qword_267C5E6E0;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E6E0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E6F8[8] = v1;
      *(void *)&byte_267C5E6F8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E6F8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E6F8;
      byte_267C5E6F8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E6F8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E1D8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E6C7 < 0)
  {
    sub_21B846188(&xmmword_267C5E698, (void *)xmmword_267C5E6B0, *((unint64_t *)&xmmword_267C5E6B0 + 1));
  }
  else
  {
    xmmword_267C5E698 = xmmword_267C5E6B0;
    unk_267C5E6A8 = unk_267C5E6C0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E698, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E1B8);
LABEL_2:
  if (byte_267C5E6AF >= 0) {
    return &xmmword_267C5E698;
  }
  else {
    return (long long *)xmmword_267C5E698;
  }
}

void sub_21B87C374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E1C8);
  __cxa_guard_abort(&qword_267C5E1C0);
  __cxa_guard_abort(&qword_267C5E1B8);
  _Unwind_Resume(a1);
}

void sub_21B87C410(_Unwind_Exception *a1)
{
}

void sub_21B87C428()
{
}

void sub_21B87C470(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B871D88(&v2, a1);
    operator new();
  }
  sub_21B87217C(&v2, a1);
  operator new();
}

void sub_21B87C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87C5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87C60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87C654()
{
  return 65792;
}

void sub_21B87C660(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B87C66C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96C40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B87C6E4(uint64_t a1, uint64_t a2)
{
  if (sub_21B867B08(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        long long v11 = &unk_26CB99920;
        uint64_t v12 = v5;
        uint64_t v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              long long v11 = &unk_26CB99920;
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        long long v11 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86717C(a1, (uint64_t)&v11);
        long long v11 = &unk_26CB99920;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87C904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87C928(uint64_t a1, uint64_t a2)
{
  if (sub_21B867B08(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v15 = &unk_26CB99920;
        uint64_t v16 = v5;
        uint64_t v17 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              uint64_t v15 = &unk_26CB99920;
              uint64_t v16 = v10;
              uint64_t v17 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v15 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86717C((uint64_t)&v11, (uint64_t)&v15);
        *(void *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v12;
        *(_OWORD *)(a1 + 24) = v13;
        *(void *)(a1 + 40) = v14;
        uint64_t v15 = &unk_26CB99920;
        uint64_t v6 = v17;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87CB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B87CB8C()
{
  return 21;
}

uint64_t (***sub_21B87CB94())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B87CC10(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B8680D0(v4, a1);
  sub_21B87C928((uint64_t)v3, a1);
  sub_21B87C928((uint64_t)&v2, a1);
  operator new();
}

void sub_21B87CD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87CD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87CD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87CDAC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B87CDB8(uint64_t a1, uint64_t *lpsrc)
{
  void v47[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97C90, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B8680D0(v38, (uint64_t)v5);
    sub_21B87C928((uint64_t)v36, v6);
    long long v39 = v36[0];
    long long v40 = v36[1];
    long long v41 = v37;
    *(void *)&long long v30 = &unk_26CB97660;
    if (HIDWORD(v37) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v37);
    }
    *(void *)&v42[1] = v37;
    v42[0] = 3;
    LODWORD(v47[0]) = 1;
    *(void *)((char *)v47 + 4) = DWORD2(v37) | (unint64_t)(v7 << 32);
    uint64_t v43 = v47[0];
    int v44 = v7;
    uint64_t v45 = v37;
    uint64_t v46 = *(void *)((char *)v47 + 4);
    sub_21B867574((uint64_t)&v30, (uint64_t)v42, &v39);
    *(void *)&long long v30 = &unk_26CB97660;
    sub_21B8A1880(v38);
    uint64_t v8 = DWORD2(v32);
    *(_DWORD *)(a1 + 8) = DWORD2(v30);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v33;
        long long v29 = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 64) = v29;
        *(void *)(a1 + 80) = v35;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v39, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v39 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v39);
LABEL_13:
    uint64_t v13 = DWORD2(v32);
    double result = *(double *)&v33;
    long long v14 = v34;
    *(_OWORD *)(a1 + 48) = v33;
    *(_OWORD *)(a1 + 64) = v14;
    *(void *)(a1 + 80) = v35;
    *(void *)&long long v30 = &unk_26CB96C40;
    if (v13 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v13])(&v39, &v31);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v39, lpsrc, 21);
  long long v11 = *(_OWORD *)(v39 + 16);
  long long v10 = *(_OWORD *)(v39 + 32);
  long long v30 = *(_OWORD *)v39;
  long long v31 = v11;
  long long v32 = v10;
  *(void *)&long long v39 = 0;
  MEMORY[0x21D495F30]();
  sub_21B87C6E4((uint64_t)&v39, a1);
  *(void *)&v36[0] = &v30;
  *((void *)&v36[0] + 1) = &v39;
  if (DWORD1(v31) == 1 && DWORD1(v40) == 1)
  {
    sub_21B8934C4((size_t *)v36);
  }
  else if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    int v15 = HIDWORD(v30) - 1;
    uint64_t v16 = DWORD2(v31);
    uint64_t v17 = DWORD2(v40);
    uint64_t v18 = (unsigned char *)v30;
    long long v19 = (unsigned char *)v39;
    int v20 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v21 = HIDWORD(v40);
      uint64_t v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v19 = *v18;
          v19[1] = v18[1];
          v19[2] = v18[2];
          v18 += v22;
          v19 += v21;
          --v20;
        }
        while (v20);
      }
      else
      {
        int v23 = 0;
        long long v24 = (unsigned char *)(v39 + 2);
        long long v25 = (unsigned char *)(v30 + 2);
        do
        {
          uint64_t v26 = v25;
          int v27 = v24;
          int v28 = v15;
          do
          {
            *(v27 - 2) = *(v26 - 2);
            *(v27 - 1) = *(v26 - 1);
            *int v27 = *v26;
            v27 += v17;
            v26 += v16;
            --v28;
          }
          while (v28);
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v18 += v22;
          v19 += v21;
          ++v23;
          v24 += v21;
          v25 += v22;
        }
        while (v23 != v20);
      }
    }
    for (; v15; --v15)
    {
      *long long v19 = *v18;
      v19[1] = v18[1];
      v19[2] = v18[2];
      v18 += v16;
      v19 += v17;
    }
    *long long v19 = *v18;
    v19[1] = v18[1];
    v19[2] = v18[2];
  }
  return result;
}

void sub_21B87D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B87D230(uint64_t a1)
{
  sub_21B87C6E4((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87D25C(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87C6E4((uint64_t)&v3, a1);
  operator new();
}

void sub_21B87D308(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87C928((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B87D3B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E1E8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E1F0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E1F8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E1F8))
    {
LABEL_13:
      if (byte_267C5E76F < 0)
      {
        sub_21B846188(&xmmword_267C5E740, (void *)qword_267C5E758, unk_267C5E760);
      }
      else
      {
        xmmword_267C5E740 = *(_OWORD *)&qword_267C5E758;
        unk_267C5E750 = unk_267C5E768;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E740, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1F0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E200, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E200))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb8u>]", &qword_267C5E770);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E770, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E200);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E208, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E208))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E210, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E210))
      {
        if (byte_267C5E788[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E788, *(unint64_t *)&byte_267C5E788[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E788;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E7A0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E7A0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E210);
      }
      if (byte_267C5E7B7 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E7A0, *((unint64_t *)&xmmword_267C5E7A0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E7A0;
        uint64_t v12 = unk_267C5E7B0;
      }
      sub_21B89EB24(v11, (std::string *)&qword_267C5E758);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E758, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E1F8);
      goto LABEL_13;
    }
    if (byte_267C5E787 >= 0) {
      size_t v1 = byte_267C5E787;
    }
    else {
      size_t v1 = unk_267C5E778;
    }
    if (byte_267C5E787 >= 0) {
      long long v2 = &qword_267C5E770;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E770;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E788[8] = v1;
      *(void *)&byte_267C5E788[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E788 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E788;
      byte_267C5E788[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E788, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E208);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E757 < 0)
  {
    sub_21B846188(&xmmword_267C5E728, (void *)xmmword_267C5E740, *((unint64_t *)&xmmword_267C5E740 + 1));
  }
  else
  {
    xmmword_267C5E728 = xmmword_267C5E740;
    unk_267C5E738 = unk_267C5E750;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E728, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E1E8);
LABEL_2:
  if (byte_267C5E73F >= 0) {
    return &xmmword_267C5E728;
  }
  else {
    return (long long *)xmmword_267C5E728;
  }
}

void sub_21B87D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E1F8);
  __cxa_guard_abort(&qword_267C5E1F0);
  __cxa_guard_abort(&qword_267C5E1E8);
  _Unwind_Resume(a1);
}

void sub_21B87D8D8(_Unwind_Exception *a1)
{
}

void sub_21B87D8F0()
{
}

void sub_21B87D938(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B867D50(&v2, a1);
    operator new();
  }
  sub_21B8680D0(&v2, a1);
  operator new();
}

void sub_21B87DA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87DAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87DB1C()
{
  return 65792;
}

void sub_21B87DB28(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B87DB34(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96DF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B87DBAC(uint64_t a1, uint64_t a2)
{
  if (sub_21B86B57C(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        long long v11 = &unk_26CB99920;
        uint64_t v12 = v5;
        uint64_t v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              long long v11 = &unk_26CB99920;
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        long long v11 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86ABC8(a1, (uint64_t)&v11);
        long long v11 = &unk_26CB99920;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87DDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87DDF0(uint64_t a1, uint64_t a2)
{
  if (sub_21B86B57C(a2))
  {
    sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        int v15 = &unk_26CB99920;
        uint64_t v16 = v5;
        uint64_t v17 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              int v15 = &unk_26CB99920;
              uint64_t v16 = v10;
              uint64_t v17 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        int v15 = &unk_26CB99920;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_21B86ABC8((uint64_t)&v11, (uint64_t)&v15);
        *(void *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v12;
        *(_OWORD *)(a1 + 24) = v13;
        *(void *)(a1 + 40) = v14;
        int v15 = &unk_26CB99920;
        uint64_t v6 = v17;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87E030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8A2C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B87E054()
{
  return 22;
}

uint64_t (***sub_21B87E05C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B87E0D8(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B86BB44(v4, a1);
  sub_21B87DDF0((uint64_t)v3, a1);
  sub_21B87DDF0((uint64_t)&v2, a1);
  operator new();
}

void sub_21B87E21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87E248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87E260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87E274(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_21B87E280(uint64_t a1, uint64_t *lpsrc)
{
  void v47[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97CA8, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B86BB44(v38, (uint64_t)v5);
    sub_21B87DDF0((uint64_t)v36, v6);
    long long v39 = v36[0];
    long long v40 = v36[1];
    long long v41 = v37;
    *(void *)&long long v30 = &unk_26CB976F0;
    if (HIDWORD(v37) <= 0x10) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = HIDWORD(v37);
    }
    *(void *)&v42[1] = v37;
    v42[0] = 3;
    LODWORD(v47[0]) = 1;
    *(void *)((char *)v47 + 4) = DWORD2(v37) | (unint64_t)(v7 << 32);
    uint64_t v43 = v47[0];
    int v44 = v7;
    uint64_t v45 = v37;
    uint64_t v46 = *(void *)((char *)v47 + 4);
    sub_21B86AFC8((uint64_t)&v30, (uint64_t)v42, &v39);
    *(void *)&long long v30 = &unk_26CB976F0;
    sub_21B8A1880(v38);
    uint64_t v8 = DWORD2(v32);
    *(_DWORD *)(a1 + 8) = DWORD2(v30);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        long long v29 = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 64) = v29;
        *(void *)(a1 + 80) = v35;
        return;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v39, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v39 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v39);
LABEL_13:
    uint64_t v12 = DWORD2(v32);
    long long v13 = v34;
    *(_OWORD *)(a1 + 48) = v33;
    *(_OWORD *)(a1 + 64) = v13;
    *(void *)(a1 + 80) = v35;
    *(void *)&long long v30 = &unk_26CB96DF0;
    if (v12 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v12])(&v39, &v31);
    }
    return;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v39, lpsrc, 22);
  long long v11 = *(_OWORD *)(v39 + 16);
  long long v10 = *(_OWORD *)(v39 + 32);
  long long v30 = *(_OWORD *)v39;
  long long v31 = v11;
  long long v32 = v10;
  *(void *)&long long v39 = 0;
  MEMORY[0x21D495F30]();
  sub_21B87DBAC((uint64_t)&v39, a1);
  *(void *)&v36[0] = &v30;
  *((void *)&v36[0] + 1) = &v39;
  if (DWORD1(v31) == 1 && DWORD1(v40) == 1)
  {
    sub_21B894E9C((uint64_t *)v36);
    return;
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    int v14 = HIDWORD(v30) - 1;
    uint64_t v15 = DWORD2(v31);
    uint64_t v16 = DWORD2(v40);
    uint64_t v17 = (_WORD *)v30;
    uint64_t v18 = (_WORD *)v39;
    int v19 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v20 = HIDWORD(v40);
      uint64_t v21 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
LABEL_29:
        *uint64_t v18 = *v17;
        v18[1] = v17[1];
        void v18[2] = v17[2];
        return;
      }
      int v22 = 0;
      uint64_t v23 = 2 * DWORD2(v40);
      long long v24 = (_WORD *)(v39 + 4);
      long long v25 = (_WORD *)(v30 + 4);
      do
      {
        uint64_t v26 = v25;
        int v27 = v24;
        int v28 = v14;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          int v27 = (_WORD *)((char *)v27 + v23);
          v26 += v15;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v17 += v21;
        v18 += v20;
        ++v22;
        v24 += v20;
        v25 += v21;
      }
      while (v22 != v19);
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    goto LABEL_29;
  }
}

void sub_21B87E694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B87E718(uint64_t a1)
{
  sub_21B87DBAC((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87E744(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87DBAC((uint64_t)&v3, a1);
  operator new();
}

void sub_21B87E7F0(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87DDF0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B87E89C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E218, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E218))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E220))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E228, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E228))
    {
LABEL_13:
      if (byte_267C5E7FF < 0)
      {
        sub_21B846188(&xmmword_267C5E7D0, (void *)qword_267C5E7E8, unk_267C5E7F0);
      }
      else
      {
        xmmword_267C5E7D0 = *(_OWORD *)&qword_267C5E7E8;
        unk_267C5E7E0 = unk_267C5E7F8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E7D0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E220);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E230, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E230))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb16u>]", &qword_267C5E800);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E800, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E230);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E238, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E238))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E240, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E240))
      {
        if (byte_267C5E818[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E818, *(unint64_t *)&byte_267C5E818[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E818;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E830);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E830, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E240);
      }
      if (byte_267C5E847 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E830, *((unint64_t *)&xmmword_267C5E830 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E830;
        uint64_t v12 = unk_267C5E840;
      }
      sub_21B89EC50(v11, (std::string *)&qword_267C5E7E8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E7E8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E228);
      goto LABEL_13;
    }
    if (byte_267C5E817 >= 0) {
      size_t v1 = byte_267C5E817;
    }
    else {
      size_t v1 = unk_267C5E808;
    }
    if (byte_267C5E817 >= 0) {
      long long v2 = &qword_267C5E800;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E800;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E818[8] = v1;
      *(void *)&byte_267C5E818[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E818 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E818;
      byte_267C5E818[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E818, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E238);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E7E7 < 0)
  {
    sub_21B846188(&xmmword_267C5E7B8, (void *)xmmword_267C5E7D0, *((unint64_t *)&xmmword_267C5E7D0 + 1));
  }
  else
  {
    xmmword_267C5E7B8 = xmmword_267C5E7D0;
    unk_267C5E7C8 = unk_267C5E7E0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E7B8, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E218);
LABEL_2:
  if (byte_267C5E7CF >= 0) {
    return &xmmword_267C5E7B8;
  }
  else {
    return (long long *)xmmword_267C5E7B8;
  }
}

void sub_21B87ED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E228);
  __cxa_guard_abort(&qword_267C5E220);
  __cxa_guard_abort(&qword_267C5E218);
  _Unwind_Resume(a1);
}

void sub_21B87EDC0(_Unwind_Exception *a1)
{
}

void sub_21B87EDD8()
{
}

void sub_21B87EE20(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86B7C4(&v2, a1);
    operator new();
  }
  sub_21B86BB44(&v2, a1);
  operator new();
}

void sub_21B87EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87EFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B87EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B87F004()
{
  return 65792;
}

void sub_21B87F010(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B87F01C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96CD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B87F094(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B8692F8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        int v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              int v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        int v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86836C(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        long long v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87F328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87F34C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B8692F8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86836C((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        long long v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B87F600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B87F624(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      BOOL v4 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v10 = *(uint64_t **)(a1 + 24);
      long long v11 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      if (v7)
      {
        unint64_t v8 = std::__shared_weak_count::lock(v7);
        unint64_t v9 = v8;
        if (v8 && *(void *)(a1 + 16))
        {
          uint64_t v10 = *(uint64_t **)(a1 + 16);
          long long v11 = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v9 = 0;
      }
      uint64_t v10 = 0;
      long long v11 = 0;
      if (!v9) {
        goto LABEL_4;
      }
LABEL_20:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_4:
      if (!v10)
      {
        uint64_t v5 = 0;
        goto LABEL_9;
      }
      uint64_t v5 = *v10;
      uint64_t v6 = (std::__shared_weak_count *)v10[1];
      if (!v6)
      {
LABEL_9:
        *a2 = v5;
        a2[1] = 0;
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *a2 = v5;
      a2[1] = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_10:
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    default:
      sub_21B84C734();
  }
}

uint64_t sub_21B87F878()
{
  return 25;
}

uint64_t (***sub_21B87F880())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B87F8FC(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B869934(v4, a1);
  sub_21B87F34C((uint64_t)v3, a1);
  sub_21B87F34C((uint64_t)&v2, a1);
  operator new();
}

void sub_21B87FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87FA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87FA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B87FA9C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B87FAA8(uint64_t a1, uint64_t *lpsrc)
{
  void v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97CC0, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B869934(v25, (uint64_t)v5);
    sub_21B87F34C((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26CB97780;
    if (HIDWORD(v24) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_21B868944((uint64_t)&v17, 25, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26CB97780;
    sub_21B8A1880(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26CB96CD0;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 25);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x21D495F30](v10);
  sub_21B87F094((uint64_t)&v26, a1);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_21B8934C4((size_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_21B893EEC((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_21B87FDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B87FE34(uint64_t a1)
{
  sub_21B87F094((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B87FE60(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87F094((uint64_t)&v3, a1);
  operator new();
}

void sub_21B87FF0C(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B87F34C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B87FFB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E248, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E248))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E250, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E250))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E258, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E258))
    {
LABEL_13:
      if (byte_267C5E88F < 0)
      {
        sub_21B846188(&xmmword_267C5E860, (void *)qword_267C5E878, unk_267C5E880);
      }
      else
      {
        xmmword_267C5E860 = *(_OWORD *)&qword_267C5E878;
        unk_267C5E870 = unk_267C5E888;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E860, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E250);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E260, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E260))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Bgra8u>]", &qword_267C5E890);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E890, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E260);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E268, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E268))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E270, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E270))
      {
        if (byte_267C5E8A8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E8A8, *(unint64_t *)&byte_267C5E8A8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E8A8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E8C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E8C0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E270);
      }
      if (byte_267C5E8D7 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E8C0, *((unint64_t *)&xmmword_267C5E8C0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E8C0;
        uint64_t v12 = unk_267C5E8D0;
      }
      sub_21B89ED7C(v11, (std::string *)&qword_267C5E878);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E878, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E258);
      goto LABEL_13;
    }
    if (byte_267C5E8A7 >= 0) {
      size_t v1 = byte_267C5E8A7;
    }
    else {
      size_t v1 = unk_267C5E898;
    }
    if (byte_267C5E8A7 >= 0) {
      long long v2 = &qword_267C5E890;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E890;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E8A8[8] = v1;
      *(void *)&byte_267C5E8A8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E8A8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E8A8;
      byte_267C5E8A8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E8A8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E268);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E877 < 0)
  {
    sub_21B846188(&xmmword_267C5E848, (void *)xmmword_267C5E860, *((unint64_t *)&xmmword_267C5E860 + 1));
  }
  else
  {
    xmmword_267C5E848 = xmmword_267C5E860;
    unk_267C5E858 = unk_267C5E870;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E848, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E248);
LABEL_2:
  if (byte_267C5E85F >= 0) {
    return &xmmword_267C5E848;
  }
  else {
    return (long long *)xmmword_267C5E848;
  }
}

void sub_21B880440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E258);
  __cxa_guard_abort(&qword_267C5E250);
  __cxa_guard_abort(&qword_267C5E248);
  _Unwind_Resume(a1);
}

void sub_21B8804DC(_Unwind_Exception *a1)
{
}

void sub_21B8804F4()
{
}

void sub_21B88053C(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B869540(&v2, a1);
    operator new();
  }
  sub_21B869934(&v2, a1);
  operator new();
}

void sub_21B880690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8806C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8806D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B88070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B880720()
{
  return 65792;
}

void sub_21B88072C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B880738(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97030;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8807B0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86FA18(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        long long v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B880A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B880A68(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B86FA18(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        long long v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B880D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B880D40()
{
  return 31;
}

uint64_t (***sub_21B880D48())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B880DC4(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B870054(v4, a1);
  sub_21B880A68((uint64_t)v3, a1);
  sub_21B880A68((uint64_t)&v2, a1);
  operator new();
}

void sub_21B880F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B880F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B880F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B880F60(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B880F6C(uint64_t a1, uint64_t *lpsrc)
{
  _OWORD v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97CD8, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 31);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x21D495F30](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_21B8807B0((uint64_t)v30, a1);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    return sub_21B897400(v27);
  }
  uint64_t v6 = (uint64_t)v5;
  sub_21B870054(v29, (uint64_t)v5);
  sub_21B880A68((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26CB97810;
  if (HIDWORD(v28) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 4;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_21B86F5C0((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26CB97810;
  sub_21B8A1880(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB97E18[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB97E58[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26CB97030;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB97E18[v18])(v30, &v22);
  }
  return result;
}

void sub_21B881234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8812B8(uint64_t a1)
{
  sub_21B8807B0((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8812E4(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8807B0((uint64_t)&v3, a1);
  operator new();
}

void sub_21B881390(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B880A68((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B88143C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E278, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E278))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E280))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E288, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E288))
    {
LABEL_13:
      if (byte_267C5E91F < 0)
      {
        sub_21B846188(&xmmword_267C5E8F0, (void *)qword_267C5E908, unk_267C5E910);
      }
      else
      {
        xmmword_267C5E8F0 = *(_OWORD *)&qword_267C5E908;
        unk_267C5E900 = unk_267C5E918;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E8F0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E280);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E290, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E290))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba16f>]", &qword_267C5E920);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E920, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E290);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E298, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E298))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E2A0))
      {
        if (byte_267C5E938[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E938, *(unint64_t *)&byte_267C5E938[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E938;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E950);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E950, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E2A0);
      }
      if (byte_267C5E967 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E950, *((unint64_t *)&xmmword_267C5E950 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E950;
        uint64_t v12 = unk_267C5E960;
      }
      sub_21B89EEA8(v11, (std::string *)&qword_267C5E908);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E908, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E288);
      goto LABEL_13;
    }
    if (byte_267C5E937 >= 0) {
      size_t v1 = byte_267C5E937;
    }
    else {
      size_t v1 = unk_267C5E928;
    }
    if (byte_267C5E937 >= 0) {
      long long v2 = &qword_267C5E920;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E920;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E938[8] = v1;
      *(void *)&byte_267C5E938[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E938 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E938;
      byte_267C5E938[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E938, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E298);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E907 < 0)
  {
    sub_21B846188(&xmmword_267C5E8D8, (void *)xmmword_267C5E8F0, *((unint64_t *)&xmmword_267C5E8F0 + 1));
  }
  else
  {
    xmmword_267C5E8D8 = xmmword_267C5E8F0;
    unk_267C5E8E8 = unk_267C5E900;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E8D8, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E278);
LABEL_2:
  if (byte_267C5E8EF >= 0) {
    return &xmmword_267C5E8D8;
  }
  else {
    return (long long *)xmmword_267C5E8D8;
  }
}

void sub_21B8818C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E288);
  __cxa_guard_abort(&qword_267C5E280);
  __cxa_guard_abort(&qword_267C5E278);
  _Unwind_Resume(a1);
}

void sub_21B881960(_Unwind_Exception *a1)
{
}

void sub_21B881978()
{
}

void sub_21B8819C0(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86FC60(&v2, a1);
    operator new();
  }
  sub_21B870054(&v2, a1);
  operator new();
}

void sub_21B881B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B881B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B881B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B881B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B881BA4()
{
  return 65792;
}

void sub_21B881BB0(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B881BBC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB971E0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B881C34(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B872C80(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8723DC(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B881EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B881EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B872C80(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          uint64_t v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B8723DC((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B8821A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8821C4()
{
  return 32;
}

uint64_t (***sub_21B8821CC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B882248(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B8732BC(v4, a1);
  sub_21B881EEC((uint64_t)v3, a1);
  sub_21B881EEC((uint64_t)&v2, a1);
  operator new();
}

void sub_21B88238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8823B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8823D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8823E4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B8823F0(uint64_t a1, uint64_t *lpsrc)
{
  void v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97CF0, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B8732BC(v25, (uint64_t)v5);
    sub_21B881EEC((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26CB978A0;
    if (HIDWORD(v24) <= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_21B8727DC((uint64_t)&v17, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26CB978A0;
    sub_21B8A1880(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26CB971E0;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 32);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x21D495F30](v10);
  sub_21B881C34((uint64_t)&v26, a1);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_21B898758((uint64_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      *(float *)&double result = sub_21B898FA4((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_21B8826F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B882778(uint64_t a1)
{
  sub_21B881C34((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8827A4(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B881C34((uint64_t)&v3, a1);
  operator new();
}

void sub_21B882850(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B881EEC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8828FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E2A8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E2B0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2B8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E2B8))
    {
LABEL_13:
      if (byte_267C5E9AF < 0)
      {
        sub_21B846188(&xmmword_267C5E980, (void *)qword_267C5E998, unk_267C5E9A0);
      }
      else
      {
        xmmword_267C5E980 = *(_OWORD *)&qword_267C5E998;
        unk_267C5E990 = unk_267C5E9A8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E980, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2B0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E2C0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba32f>]", &qword_267C5E9B0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E9B0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2C0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2C8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E2C8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2D0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E2D0))
      {
        if (byte_267C5E9C8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5E9C8, *(unint64_t *)&byte_267C5E9C8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5E9C8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5E9E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E9E0, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E2D0);
      }
      if (byte_267C5E9F7 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5E9E0, *((unint64_t *)&xmmword_267C5E9E0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5E9E0;
        uint64_t v12 = unk_267C5E9F0;
      }
      sub_21B89EFD4(v11, (std::string *)&qword_267C5E998);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5E998, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2B8);
      goto LABEL_13;
    }
    if (byte_267C5E9C7 >= 0) {
      size_t v1 = byte_267C5E9C7;
    }
    else {
      size_t v1 = unk_267C5E9B8;
    }
    if (byte_267C5E9C7 >= 0) {
      long long v2 = &qword_267C5E9B0;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5E9B0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5E9C8[8] = v1;
      *(void *)&byte_267C5E9C8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5E9C8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5E9C8;
      byte_267C5E9C8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5E9C8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E2C8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5E997 < 0)
  {
    sub_21B846188(&xmmword_267C5E968, (void *)xmmword_267C5E980, *((unint64_t *)&xmmword_267C5E980 + 1));
  }
  else
  {
    xmmword_267C5E968 = xmmword_267C5E980;
    unk_267C5E978 = unk_267C5E990;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E968, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E2A8);
LABEL_2:
  if (byte_267C5E97F >= 0) {
    return &xmmword_267C5E968;
  }
  else {
    return (long long *)xmmword_267C5E968;
  }
}

void sub_21B882D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E2B8);
  __cxa_guard_abort(&qword_267C5E2B0);
  __cxa_guard_abort(&qword_267C5E2A8);
  _Unwind_Resume(a1);
}

void sub_21B882E20(_Unwind_Exception *a1)
{
}

void sub_21B882E38()
{
}

void sub_21B882E80(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B872EC8(&v2, a1);
    operator new();
  }
  sub_21B8732BC(&v2, a1);
  operator new();
}

void sub_21B882FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B883008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B88301C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B883050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B883064()
{
  return 65792;
}

void sub_21B883070(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B88307C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96CD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8830F4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B8692F8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86836C(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B883388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8833AC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B8692F8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86836C((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B883660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B883684()
{
  return 37;
}

uint64_t (***sub_21B88368C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B883708(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B869934(v4, a1);
  sub_21B8833AC((uint64_t)v3, a1);
  sub_21B8833AC((uint64_t)&v2, a1);
  operator new();
}

void sub_21B883850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B88387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B883894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8838A8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B8838B4(uint64_t a1, uint64_t *lpsrc)
{
  void v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97D08, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B869934(v25, (uint64_t)v5);
    sub_21B8833AC((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26CB97930;
    if (HIDWORD(v24) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_21B868944((uint64_t)&v17, 37, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26CB97930;
    sub_21B8A1880(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26CB96CD0;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 37);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x21D495F30](v10);
  sub_21B8830F4((uint64_t)&v26, a1);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_21B8934C4((size_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_21B893EEC((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_21B883BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B883C40(uint64_t a1)
{
  sub_21B8830F4((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B883C6C(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8830F4((uint64_t)&v3, a1);
  operator new();
}

void sub_21B883D18(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8833AC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B883DC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2D8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E2D8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E2E0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2E8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E2E8))
    {
LABEL_13:
      if (byte_267C5EA3F < 0)
      {
        sub_21B846188(&xmmword_267C5EA10, (void *)qword_267C5EA28, unk_267C5EA30);
      }
      else
      {
        xmmword_267C5EA10 = *(_OWORD *)&qword_267C5EA28;
        unk_267C5EA20 = unk_267C5EA38;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EA10, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2E0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2F0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E2F0))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb8u>]", &qword_267C5EA40);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EA40, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2F0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E2F8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E2F8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E300, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E300))
      {
        if (byte_267C5EA58[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5EA58, *(unint64_t *)&byte_267C5EA58[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5EA58;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5EA70);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EA70, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E300);
      }
      if (byte_267C5EA87 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5EA70, *((unint64_t *)&xmmword_267C5EA70 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5EA70;
        uint64_t v12 = unk_267C5EA80;
      }
      sub_21B89F100(v11, (std::string *)&qword_267C5EA28);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EA28, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E2E8);
      goto LABEL_13;
    }
    if (byte_267C5EA57 >= 0) {
      size_t v1 = byte_267C5EA57;
    }
    else {
      size_t v1 = unk_267C5EA48;
    }
    if (byte_267C5EA57 >= 0) {
      long long v2 = &qword_267C5EA40;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5EA40;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5EA58[8] = v1;
      *(void *)&byte_267C5EA58[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5EA58 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5EA58;
      byte_267C5EA58[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5EA58, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E2F8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5EA27 < 0)
  {
    sub_21B846188(&xmmword_267C5E9F8, (void *)xmmword_267C5EA10, *((unint64_t *)&xmmword_267C5EA10 + 1));
  }
  else
  {
    xmmword_267C5E9F8 = xmmword_267C5EA10;
    unk_267C5EA08 = unk_267C5EA20;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E9F8, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E2D8);
LABEL_2:
  if (byte_267C5EA0F >= 0) {
    return &xmmword_267C5E9F8;
  }
  else {
    return (long long *)xmmword_267C5E9F8;
  }
}

void sub_21B88424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E2E8);
  __cxa_guard_abort(&qword_267C5E2E0);
  __cxa_guard_abort(&qword_267C5E2D8);
  _Unwind_Resume(a1);
}

void sub_21B8842E8(_Unwind_Exception *a1)
{
}

void sub_21B884300()
{
}

void sub_21B884348(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B869540(&v2, a1);
    operator new();
  }
  sub_21B869934(&v2, a1);
  operator new();
}

void sub_21B88449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8844D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8844E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B884518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B88452C()
{
  return 65792;
}

void sub_21B884538(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_21B884544(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96E80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8845BC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_21B86C648(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &unk_26CB99920;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &unk_26CB99920;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &unk_26CB99920;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B884850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B884874(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_21B86C648(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)long long v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)long long v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &unk_26CB99920;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          long long v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &unk_26CB99920;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &unk_26CB99920;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_21B86BDA4((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &unk_26CB99920;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_21B84C734();
    }
  }
}

void sub_21B884B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B884B4C()
{
  return 38;
}

uint64_t (***sub_21B884B54())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E090, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E090))
  {
    return off_26AD08F30;
  }
  __cxa_atexit((void (*)(void *))nullsub_32, off_26AD08F30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E090);
  return off_26AD08F30;
}

void sub_21B884BD0(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_21B86CC84(v4, a1);
  sub_21B884874((uint64_t)v3, a1);
  sub_21B884874((uint64_t)&v2, a1);
  operator new();
}

void sub_21B884D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C40ED729E16);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B884D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B884D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B884D6C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_21B884D78(uint64_t a1, uint64_t *lpsrc)
{
  void v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB97D20, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_21B86CC84(v25, (uint64_t)v5);
    sub_21B884874((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26CB979C0;
    if (HIDWORD(v24) <= 0x10) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_21B86C1A4((uint64_t)&v17, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26CB979C0;
    sub_21B8A1880(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26CB97E18[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26CB97E58[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26CB96E80;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26CB97E18[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 38);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x21D495F30](v10);
  sub_21B8845BC((uint64_t)&v26, a1);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_21B894E9C((uint64_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_21B8957AC((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_21B88507C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B885100(uint64_t a1)
{
  sub_21B8845BC((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B88512C(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8845BC((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8851D8(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B884874((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B885284()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E308, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5E308))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E310, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E310))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E318, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E318))
    {
LABEL_13:
      if (byte_267C5EACF < 0)
      {
        sub_21B846188(&xmmword_267C5EAA0, (void *)qword_267C5EAB8, unk_267C5EAC0);
      }
      else
      {
        xmmword_267C5EAA0 = *(_OWORD *)&qword_267C5EAB8;
        unk_267C5EAB0 = unk_267C5EAC8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EAA0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E310);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E320, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5E320))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb16u>]", &qword_267C5EAD0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EAD0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E320);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E328, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5E328))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E330, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5E330))
      {
        if (byte_267C5EAE8[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5EAE8, *(unint64_t *)&byte_267C5EAE8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5EAE8;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5EB00);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EB00, &dword_21B831000);
        __cxa_guard_release(&qword_267C5E330);
      }
      if (byte_267C5EB17 < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5EB00, *((unint64_t *)&xmmword_267C5EB00 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5EB00;
        uint64_t v12 = unk_267C5EB10;
      }
      sub_21B89F22C(v11, (std::string *)&qword_267C5EAB8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EAB8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5E318);
      goto LABEL_13;
    }
    if (byte_267C5EAE7 >= 0) {
      size_t v1 = byte_267C5EAE7;
    }
    else {
      size_t v1 = unk_267C5EAD8;
    }
    if (byte_267C5EAE7 >= 0) {
      long long v2 = &qword_267C5EAD0;
    }
    else {
      long long v2 = (uint64_t *)qword_267C5EAD0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5EAE8[8] = v1;
      *(void *)&byte_267C5EAE8[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5EAE8 = v8;
    }
    else
    {
      uint64_t v8 = byte_267C5EAE8;
      byte_267C5EAE8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5EAE8, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E328);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5EAB7 < 0)
  {
    sub_21B846188(&xmmword_267C5EA88, (void *)xmmword_267C5EAA0, *((unint64_t *)&xmmword_267C5EAA0 + 1));
  }
  else
  {
    xmmword_267C5EA88 = xmmword_267C5EAA0;
    unk_267C5EA98 = unk_267C5EAB0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EA88, &dword_21B831000);
  __cxa_guard_release(&qword_267C5E308);
LABEL_2:
  if (byte_267C5EA9F >= 0) {
    return &xmmword_267C5EA88;
  }
  else {
    return (long long *)xmmword_267C5EA88;
  }
}

void sub_21B88570C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5E318);
  __cxa_guard_abort(&qword_267C5E310);
  __cxa_guard_abort(&qword_267C5E308);
  _Unwind_Resume(a1);
}

void sub_21B8857A8(_Unwind_Exception *a1)
{
}

void sub_21B8857C0()
{
}

void sub_21B885808(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_21B86C890(&v2, a1);
    operator new();
  }
  sub_21B86CC84(&v2, a1);
  operator new();
}

void sub_21B88595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1880(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1880(&a9);
  _Unwind_Resume(a1);
}

void sub_21B885990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8859A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B8A1D54(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B8A1D54(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8859D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8859EC()
{
  return 65792;
}

void sub_21B8859F8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

std::string *sub_21B885A04()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BC88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BC88))
  {
    return &stru_267C5BC70;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BC70);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BC70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BC88);
  return &stru_267C5BC70;
}

void sub_21B885AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BC88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BC88);
  _Unwind_Resume(a1);
}

void *sub_21B885B08@<X0>(uint64_t a1@<X8>)
{
  long long v7 = xmmword_21B9A31A0;
  __int16 v8 = 0;
  *(void *)a1 = &unk_26CB96F10;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v2 = a1 + 16;
  sub_21B86CDC0(0, 3, &v7, a1 + 16);
  if (v7) {
    BOOL v3 = DWORD1(v7) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v9, v2);
    sub_21B869B94(v10, (uint64_t)v9);
    uint64_t v4 = v10[1];
    uint64_t v5 = v10[2];
    sub_21B8A1880(v9);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v5;
  }
  double result = sub_21B86D2E4(a1, &v8);
  *(void *)a1 = &unk_26CB97390;
  return result;
}

void sub_21B885C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_21B8A1880(&a16);
  uint64_t v19 = *v17;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v19])(&a15, v16);
  }
  *long long v17 = -1;
  _Unwind_Resume(a1);
}

void *sub_21B885C94@<X0>(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  LODWORD(a3) = *a1;
  BOOL v4 = *a1 != 0;
  if (*a1 <= 0x10u) {
    LODWORD(a3) = 16;
  }
  __int16 v5 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 16;
  }
  *(void *)&long long v9 = *(void *)a1;
  *((void *)&v9 + 1) = v4 | (a3 << 32);
  __int16 v10 = v5;
  *(void *)uint64_t v3 = &unk_26CB96F10;
  *(_DWORD *)(v3 + 8) = 0;
  sub_21B86CDC0(0, 3, &v9, v3 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_21B84C734();
    }
    sub_21B8A14FC(v11, v3 + 16);
    sub_21B869B94(v12, (uint64_t)v11);
    uint64_t v6 = v12[1];
    uint64_t v7 = v12[2];
    sub_21B8A1880(v11);
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v9;
  }
  double result = sub_21B86D2E4(v3, &v10);
  *(void *)uint64_t v3 = &unk_26CB97390;
  return result;
}

void sub_21B885DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_21B8A1880(&a16);
  uint64_t v19 = *v17;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v19])(&a15, v16);
  }
  *long long v17 = -1;
  _Unwind_Resume(a1);
}

std::string *sub_21B885E44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BCA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BCA8))
  {
    return &stru_267C5BC90;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BC90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BC90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BCA8);
  return &stru_267C5BC90;
}

void sub_21B885F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BCA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BCA8);
  _Unwind_Resume(a1);
}

std::string *sub_21B885F48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BCC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BCC8))
  {
    return &stru_267C5BCB0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BCB0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BCB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BCC8);
  return &stru_267C5BCB0;
}

void sub_21B88600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BCC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BCC8);
  _Unwind_Resume(a1);
}

std::string *sub_21B88604C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BCE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BCE8))
  {
    return &stru_267C5BCD0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BCD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BCD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BCE8);
  return &stru_267C5BCD0;
}

void sub_21B886110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BCE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BCE8);
  _Unwind_Resume(a1);
}

std::string *sub_21B886150()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BD08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BD08))
  {
    return &stru_267C5BCF0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BCF0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BCF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BD08);
  return &stru_267C5BCF0;
}

void sub_21B886214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BD08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BD08);
  _Unwind_Resume(a1);
}

std::string *sub_21B886254()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BD28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BD28))
  {
    return &stru_267C5BD10;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BD10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BD10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BD28);
  return &stru_267C5BD10;
}

void sub_21B886318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BD28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BD28);
  _Unwind_Resume(a1);
}

std::string *sub_21B886358()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BD48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BD48))
  {
    return &stru_267C5BD30;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BD30);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BD30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BD48);
  return &stru_267C5BD30;
}

void sub_21B88641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BD48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BD48);
  _Unwind_Resume(a1);
}

std::string *sub_21B88645C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BD68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BD68))
  {
    return &stru_267C5BD50;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BD50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BD50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BD68);
  return &stru_267C5BD50;
}

void sub_21B886520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BD68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BD68);
  _Unwind_Resume(a1);
}

std::string *sub_21B886560()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BD88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BD88))
  {
    return &stru_267C5BD70;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BD70);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BD70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BD88);
  return &stru_267C5BD70;
}

void sub_21B886624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BD88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BD88);
  _Unwind_Resume(a1);
}

std::string *sub_21B886664()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BDA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BDA8))
  {
    return &stru_267C5BD90;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BD90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BD90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BDA8);
  return &stru_267C5BD90;
}

void sub_21B886728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BDA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BDA8);
  _Unwind_Resume(a1);
}

std::string *sub_21B886768()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BDC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BDC8))
  {
    return &stru_267C5BDB0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BDB0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BDB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BDC8);
  return &stru_267C5BDB0;
}

void sub_21B88682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BDC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BDC8);
  _Unwind_Resume(a1);
}

std::string *sub_21B88686C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BDE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BDE8))
  {
    return &stru_267C5BDD0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BDD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BDD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BDE8);
  return &stru_267C5BDD0;
}

void sub_21B886930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BDE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BDE8);
  _Unwind_Resume(a1);
}

void *sub_21B886970(void *a1)
{
  *a1 = &unk_26CB97A50;
  sub_21B8A1880(a1 + 1);
  return a1;
}

void sub_21B8869B4(void *a1)
{
  *a1 = &unk_26CB97A50;
  sub_21B8A1880(a1 + 1);

  JUMPOUT(0x21D495F30);
}

void *sub_21B886A18(void *a1)
{
  *a1 = &unk_26CB97A70;
  sub_21B8A1D54(a1 + 1);
  return a1;
}

void sub_21B886A5C(void *a1)
{
  *a1 = &unk_26CB97A70;
  sub_21B8A1D54(a1 + 1);

  JUMPOUT(0x21D495F30);
}

void sub_21B886AC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_21B8A108C(a1);
  if (v4 <= 1278226535)
  {
    if (v4 <= 843264103)
    {
      if (v4 <= 842285638)
      {
        if (v4 == 24)
        {
          int v5 = 21;
        }
        else
        {
          if (v4 != 32) {
            goto LABEL_52;
          }
          int v5 = 37;
        }
      }
      else
      {
        switch(v4)
        {
          case 842285639:
            int v5 = 17;
            break;
          case 843264056:
            int v5 = 5;
            break;
          case 843264102:
            int v5 = 8;
            break;
          default:
            goto LABEL_52;
        }
      }
      goto LABEL_49;
    }
    if (v4 <= 1111970368)
    {
      if (v4 == 843264104)
      {
        int v5 = 7;
      }
      else
      {
        if (v4 != 1094862674) {
          goto LABEL_52;
        }
        int v5 = 33;
      }
      goto LABEL_49;
    }
    if (v4 == 1111970369)
    {
      int v5 = 25;
      goto LABEL_49;
    }
    if (v4 == 1278226488)
    {
      int v5 = 1;
      goto LABEL_49;
    }
    if (v4 != 1278226534)
    {
LABEL_52:
      __cxa_allocate_exception(0x10uLL);
      sub_21B8A108C(a1);
      sub_21B886E00();
    }
  }
  else
  {
    if (v4 <= 1647589489)
    {
      if (v4 > 1380410944)
      {
        switch(v4)
        {
          case 1380410945:
            int v5 = 32;
            break;
          case 1380411457:
            int v5 = 31;
            break;
          case 1647392359:
            int v5 = 2;
            break;
          default:
            goto LABEL_52;
        }
        goto LABEL_49;
      }
      if (v4 != 1278226536)
      {
        if (v4 != 1380401729) {
          goto LABEL_52;
        }
        int v5 = 29;
        goto LABEL_49;
      }
      goto LABEL_32;
    }
    if (v4 <= 1717856626)
    {
      switch(v4)
      {
        case 1647589490:
          int v5 = 22;
          break;
        case 1647719521:
          int v5 = 38;
          break;
        case 1717855600:
          goto LABEL_28;
        default:
          goto LABEL_52;
      }
LABEL_49:
      sub_21B887FEC(a2, v5);
    }
    if (v4 != 1717856627)
    {
      if (v4 != 1751410032 && v4 != 1751411059) {
        goto LABEL_52;
      }
LABEL_32:
      int v5 = 3;
      goto LABEL_49;
    }
  }
LABEL_28:
  int v5 = 4;
  goto LABEL_49;
}

void sub_21B886DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_21B886E00()
{
  v0[6] = 0;
  sub_21B84D65C(v0, "Attempting to map pixel buffer of format ");
  sub_21B890CAC();
}

void sub_21B886F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B886F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B886F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B886F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B886F54(void *a1, uint64_t a2, unint64_t a3)
{
  if (!sub_21B8A1210(a2)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 609, (uint64_t)"buffer.IsPlanar()", 17, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4)|| (int v6 = sub_21B8A108C(a2), sub_21B892808(v6) <= a3)&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 612, (uint64_t)"plane_index < num_planes", 24, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_20:
    abort();
  }
  if (sub_21B8A108C(a2) != 875704438 && sub_21B8A108C(a2) != 875704422)
  {
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 623, (uint64_t)&unk_21B997215, 0, (uint64_t)"Can't view the given planar format", 34, (void (*)(void **))sub_21B984AC4);
    goto LABEL_20;
  }
  uint64_t v7 = sub_21B8A37F4(a2, a3);
  unint64_t v16 = sub_21B8A3058(a2, a3);
  size_t v8 = sub_21B8A36AC(a2, a3);
  if (v16) {
    BOOL v9 = HIDWORD(v16) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  size_t v10 = v8 << 32;
  if (v9) {
    size_t v10 = 0;
  }
  BOOL v11 = v16 != 0;
  if (a3)
  {
    uint64_t v13 = &unk_26CB992C8;
    size_t v17 = v10 | (2 * v11);
    uint64_t v18 = v7;
    sub_21B892B74(&v18, &v16, &v17, (uint64_t)&v14);
    *a1 = &unk_26CB95DA8;
    sub_21B8924E8((uint64_t)&v13, (uint64_t)(a1 + 1));
  }
  else
  {
    uint64_t v13 = &unk_26CB96710;
    size_t v17 = v10 | v11;
    uint64_t v18 = v7;
    sub_21B892A50(&v18, &v16, (uint64_t *)&v17, (uint64_t)&v14);
    *a1 = &unk_26CB95DA8;
    sub_21B891B48((uint64_t)&v13, (uint64_t)(a1 + 1));
  }
  uint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21B887214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B85E304((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B887228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8921A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B88723C(uint64_t a1)
{
  sub_21B886AC0(a1, (uint64_t)&v1);
}

const char *sub_21B8873C4()
{
  return "{unknown buffer type}";
}

void sub_21B8873D8(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_21B8873E0()
{
  return 0;
}

uint64_t sub_21B8873E8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96B20;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_21B887474(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96D60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_21B887500(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96F10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_21B88758C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB970C0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_21B887618(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96BB0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B8876A4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96FA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B887730(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97150;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B8877BC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96C40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B887848(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96DF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B8878D4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96CD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B887960(uint64_t a1)
{
  *(void *)a1 = &unk_26CB97030;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B8879EC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB971E0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B887A78(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96CD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

uint64_t sub_21B887B04(uint64_t a1)
{
  *(void *)a1 = &unk_26CB96E80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40ED729E16);
}

void sub_21B887B90(uint64_t a1, void *a2)
{
  *a2 = &unk_26CB99920;
  uint64_t v2 = (std::__shared_weak_count *)a2[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_21B887C28(uint64_t a1, void *a2)
{
  return sub_21B8A1880(a2);
}

void *sub_21B887C30(uint64_t a1, void *a2)
{
  return sub_21B8A1D54(a2);
}

void sub_21B887C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

__n128 sub_21B887C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26CB99920;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

__n128 sub_21B887C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a2 = &unk_26CB998E0;
  return result;
}

__n128 sub_21B887CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a2 = &unk_26CB99900;
  return result;
}

__n128 sub_21B887CCC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_21B887CDC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26CB97E18[v5])(&v8, v4);
LABEL_7:
    *(void *)uint64_t v4 = &unk_26CB99920;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

__n128 sub_21B887DE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26CB97E18[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26CB998E0;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }

  sub_21B8A1784(a2, a3);
  return result;
}

__n128 sub_21B887E94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26CB97E18[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26CB99900;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }

  sub_21B8A1C58(a2, a3);
  return result;
}

__n128 sub_21B887F48(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_26CB97E18[v5])(&v8, v4);
LABEL_8:
    __n128 result = *a3;
    *uint64_t v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  char v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
  return result;
}

void sub_21B887FEC(uint64_t a1, int a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 7:
      operator new();
    case 8:
      operator new();
    case 21:
      operator new();
    case 22:
      operator new();
    case 25:
      operator new();
    case 31:
      operator new();
    case 32:
      operator new();
    case 37:
      operator new();
    case 38:
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B88D894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B83A360((uint64_t)va);
  if (a4)
  {
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void *sub_21B88DFD4(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB97E88;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88E06C(void *a1)
{
  *a1 = &unk_26CB97E88;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E114()
{
  return 1;
}

uint64_t sub_21B88E11C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B88E124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_21B88E140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88E1CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E204(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96B20;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_21B88E294(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88E308(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB97FD0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88E3A0(void *a1)
{
  *a1 = &unk_26CB97FD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E448()
{
  return 2;
}

uint64_t sub_21B88E450(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B88E458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B88E474(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88E500(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E538(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96D60;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_21B88E5C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88E63C(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98118;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88E6D4(void *a1)
{
  *a1 = &unk_26CB98118;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E77C()
{
  return 3;
}

uint64_t sub_21B88E784(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B88E78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B88E7A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88E834(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88E86C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96F10;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_21B88E8FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88E970(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98260;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88EA08(void *a1)
{
  *a1 = &unk_26CB98260;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88EAB0()
{
  return 4;
}

uint64_t sub_21B88EAB8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B88EAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_21B88EADC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88EB68(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88EBA0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB970C0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_21B88EC30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88ECA4(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB983A8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88ED3C(void *a1)
{
  *a1 = &unk_26CB983A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88EDE4()
{
  return 5;
}

uint64_t sub_21B88EDEC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88EDF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B88EE10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88EE9C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88EED4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96BB0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88EF64(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88EFD8(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB984F0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88F070(void *a1)
{
  *a1 = &unk_26CB984F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F118()
{
  return 7;
}

uint64_t sub_21B88F120(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88F128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B88F144(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88F1D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F208(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96FA0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88F298(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88F30C(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98638;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88F3A4(void *a1)
{
  *a1 = &unk_26CB98638;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F44C()
{
  return 8;
}

uint64_t sub_21B88F454(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88F45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B88F478(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88F504(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F53C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB97150;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88F5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88F640(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98780;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88F6D8(void *a1)
{
  *a1 = &unk_26CB98780;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F780()
{
  return 21;
}

uint64_t sub_21B88F788(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88F790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B88F7AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88F838(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88F870(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96C40;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88F900(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88F974(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB988C8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88FA0C(void *a1)
{
  *a1 = &unk_26CB988C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88FAB4()
{
  return 22;
}

uint64_t sub_21B88FABC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88FAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B88FAE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88FB6C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88FBA4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96DF0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88FC34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88FCA8(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98A10;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B88FD40(void *a1)
{
  *a1 = &unk_26CB98A10;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88FDE8()
{
  return 25;
}

uint64_t sub_21B88FDF0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B88FDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B88FE14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B88FEA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B88FED8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96CD0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B88FF68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B88FFDC(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98B58;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B890074(void *a1)
{
  *a1 = &unk_26CB98B58;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B89011C()
{
  return 31;
}

uint64_t sub_21B890124(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B89012C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B890148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8901D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B89020C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB97030;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B89029C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B890310(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98CA0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8903A8(void *a1)
{
  *a1 = &unk_26CB98CA0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890450()
{
  return 32;
}

uint64_t sub_21B890458(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B890460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B89047C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B890508(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890540(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB971E0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B8905D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B890644(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98DE8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8906DC(void *a1)
{
  *a1 = &unk_26CB98DE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890784()
{
  return 37;
}

uint64_t sub_21B89078C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B890794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8907B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B89083C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890874(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96CD0;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B890904(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_21B890978(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26CB98F30;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B890A10(void *a1)
{
  *a1 = &unk_26CB98F30;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890AB8()
{
  return 38;
}

uint64_t sub_21B890AC0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B890AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B890AE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B890B70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B890BA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB96E80;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_21B890C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B890CAC()
{
}

void sub_21B890E98(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_21B890EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21B890F00(_DWORD ***a1)
{
  return sub_21B84CA68(**a1, (char *)(*a1)[1]);
}

void sub_21B890F0C(uint64_t a1, uint64_t a2)
{
}

void sub_21B890F1C(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  unint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  uint64_t v5 = __p;
  long long v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  char v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99068[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8910D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B891118(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    __n128 result = sub_21B891214((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  __n128 result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B89120C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B891214(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  char v8 = &v7[24 * v3];
  long long v21 = v8;
  uint64_t v22 = v8;
  uint64_t v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)char v8 = v17;
    char v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      uint64_t v13 = (void **)*a1;
      uint64_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  uint64_t v13 = (void **)*a1;
  uint64_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  uint64_t v14 = (void **)*a1;
  uint64_t v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B891414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_21B891428(void **a1)
{
  uint64_t v1 = (_DWORD *)**a1;
  uint64_t v2 = (const char *)(*a1)[1];
  uint64_t v3 = v1[6];
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB99068[v3])(&v9, v1);
  }
  v1[6] = -1;
  size_t result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    *((void *)v1 + 1) = v5;
    *((void *)v1 + 2) = v8 | 0x8000000000000000;
    *(void *)uint64_t v1 = v6;
  }
  else
  {
    *((unsigned char *)v1 + 23) = result;
    unint64_t v6 = v1;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((unsigned char *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_21B891518(uint64_t *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  unint64_t v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = v4;
  *(void *)uint64_t v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  unint64_t v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  char v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    unint64_t v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99068[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21B84C93C((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8916D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B891718(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(*(void *)a1 + 32);
  char v5 = a2[1];
  unint64_t v4 = a2[2];
  if (v5 < (void *)v4)
  {
    size_t v6 = strlen(*(const char **)(*(void *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v14 = v6 | 7;
      }
      uint64_t v15 = v14 + 1;
      size_t v8 = operator new(v14 + 1);
      v5[1] = v7;
      void v5[2] = v15 | 0x8000000000000000;
      *char v5 = v8;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v6;
      size_t v8 = v5;
      if (!v6) {
        goto LABEL_19;
      }
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((unsigned char *)v8 + v7) = 0;
    char v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v11 = 2 * v10;
  if (2 * v10 <= v9 + 1) {
    uint64_t v11 = v9 + 1;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    char v13 = (char *)operator new(24 * v12);
  }
  else
  {
    char v13 = 0;
  }
  unint64_t v17 = &v13[24 * v9];
  size_t v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v20 = operator new(v24 + 1);
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = v25 | 0x8000000000000000;
    *(void *)unint64_t v17 = v20;
  }
  else
  {
    v17[23] = v18;
    long long v20 = v17;
    if (!v18)
    {
      long long v21 = &v13[24 * v12];
      *unint64_t v17 = 0;
      char v16 = v17 + 24;
      uint64_t v22 = (void **)*a2;
      uint64_t v23 = (void **)a2[1];
      if (v23 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v26 = *(_OWORD *)(v23 - 3);
        *((void *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v23 = (void **)*a2;
      long long v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  long long v21 = &v13[24 * v12];
  *((unsigned char *)v20 + v19) = 0;
  char v16 = v17 + 24;
  uint64_t v22 = (void **)*a2;
  uint64_t v23 = (void **)a2[1];
  if (v23 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23) {
    operator delete(v23);
  }
LABEL_39:
  a2[1] = v16;
}

void sub_21B8919AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8919C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8919CC(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  char v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = &v5->__shared_owners_;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)size_t result = v4;
    *(void *)(result + 8) = v5;
    long long v7 = *a3;
    *(void *)(result + 32) = *((void *)a3 + 2);
    *(_OWORD *)(result + 16) = v7;
    if (v4)
    {
      size_t v8 = (_WORD *)(result + 40);
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_7;
    }
LABEL_12:
    *(_WORD *)(result + 40) = 0;
    *(unsigned char *)(result + 41) = 0;
    return result;
  }
  *(void *)size_t result = v4;
  *(void *)(result + 8) = 0;
  long long v9 = *a3;
  *(void *)(result + 32) = *((void *)a3 + 2);
  *(_OWORD *)(result + 16) = v9;
  if (!v4) {
    goto LABEL_12;
  }
  size_t v8 = (_WORD *)(result + 40);
LABEL_7:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  unsigned __int8 v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v11 = 0;
  }
  __int16 v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0) {
    __int16 v12 = 0;
  }
  _WORD *v8 = v12 & 0xFF00 | v11;
  return v3;
}

void sub_21B891AF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B891B48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  __int16 v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 2, a1 + 32, 2, a1 + 40, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 1;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  size_t v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B891C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B891CA4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B891D20(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B891DAC()
{
  return 3;
}

uint64_t sub_21B891DB4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B891DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B891DD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B891E68(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B891EE4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B891F70()
{
  return 4;
}

uint64_t sub_21B891F78(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B891F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_21B891F9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B89202C(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = &v5->__shared_owners_;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)size_t result = v4;
    *(void *)(result + 8) = v5;
    long long v7 = *a3;
    *(void *)(result + 32) = *((void *)a3 + 2);
    *(_OWORD *)(result + 16) = v7;
    if (v4)
    {
      size_t v8 = (_WORD *)(result + 40);
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_7;
    }
LABEL_12:
    *(_WORD *)(result + 40) = 0;
    *(unsigned char *)(result + 41) = 0;
    return result;
  }
  *(void *)size_t result = v4;
  *(void *)(result + 8) = 0;
  long long v9 = *a3;
  *(void *)(result + 32) = *((void *)a3 + 2);
  *(_OWORD *)(result + 16) = v9;
  if (!v4) {
    goto LABEL_12;
  }
  size_t v8 = (_WORD *)(result + 40);
LABEL_7:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  unsigned __int8 v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v11 = 0;
  }
  __int16 v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0) {
    __int16 v12 = 0;
  }
  _WORD *v8 = v12 & 0xFF00 | v11;
  return v3;
}

void sub_21B892154(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8921A8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B892224(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8922B0()
{
  return 5;
}

uint64_t sub_21B8922B8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8922C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8922DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B89236C(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = &v5->__shared_owners_;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)size_t result = v4;
    *(void *)(result + 8) = v5;
    long long v7 = *a3;
    long long v8 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v8;
    *(_OWORD *)(result + 16) = v7;
    if (v4)
    {
      long long v9 = (_WORD *)(result + 64);
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_7;
    }
LABEL_12:
    *(_WORD *)(result + 64) = 0;
    *(unsigned char *)(result + 65) = 0;
    return result;
  }
  *(void *)size_t result = v4;
  *(void *)(result + 8) = 0;
  long long v10 = *a3;
  long long v11 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v11;
  *(_OWORD *)(result + 16) = v10;
  if (!v4) {
    goto LABEL_12;
  }
  long long v9 = (_WORD *)(result + 64);
LABEL_7:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  unsigned __int8 v13 = v12;
  if ((v12 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v13 = 0;
  }
  __int16 v14 = v12 & 0xFF00;
  if ((v12 & 0xFF0000) == 0) {
    __int16 v14 = 0;
  }
  *long long v9 = v14 & 0xFF00 | v13;
  return v3;
}

void sub_21B892494(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8924E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  uint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 5;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  long long v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B892630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B892644(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8926C0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B89274C()
{
  return 8;
}

uint64_t sub_21B892754(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B89275C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B892778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21B892808(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          if (a1 == 1094862674) {
            return result;
          }
          int v3 = 1111970369;
          goto LABEL_37;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        goto LABEL_39;
      }
      return 2;
    }
    if (a1 > 843264055)
    {
      int v4 = -843264056;
LABEL_23:
      unsigned int v5 = a1 + v4;
      if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0) {
        goto LABEL_39;
      }
      return result;
    }
    if (a1 != 24 && a1 != 32)
    {
      int v3 = 842285639;
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 <= 1647392358)
    {
      if (a1 > 1278226741)
      {
        if (a1 > 1380410944)
        {
          if (a1 == 1380410945) {
            return result;
          }
          int v3 = 1380411457;
        }
        else
        {
          if (a1 == 1278226742) {
            return result;
          }
          int v3 = 1380401729;
        }
        goto LABEL_37;
      }
      int v4 = -1278226488;
      goto LABEL_23;
    }
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032) {
          return result;
        }
        int v3 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600) {
          return result;
        }
        int v3 = 1717856627;
      }
LABEL_37:
      if (a1 == v3) {
        return result;
      }
LABEL_39:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 396, (uint64_t)&unk_21B997215, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    if (a1 != 1647392359 && a1 != 1647589490)
    {
      int v3 = 1647719521;
      goto LABEL_37;
    }
  }
  return result;
}

void sub_21B892A50(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a2[1]) {
    BOOL v5 = *a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = *(void *)a2;
  if (v5) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *a3;
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v6;
  uint64_t v10 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8919CC(a4, &v11, &v9);
  long long v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B892B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B892B74(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v5 = *a1;
  if (a2[1]) {
    BOOL v6 = *a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = *(void *)a2;
  if (v6) {
    uint64_t v7 = 0;
  }
  *(void *)&v18[4] = v7;
  *(_DWORD *)size_t v18 = 2;
  uint64_t v8 = *(void *)v18;
  *(_DWORD *)size_t v18 = 1;
  *(void *)&v18[4] = *a3;
  *(void *)&long long v10 = v5;
  *((void *)&v10 + 1) = v8;
  int v11 = HIDWORD(v7);
  uint64_t v12 = *(void *)v18;
  int v13 = *(_DWORD *)&v18[8];
  uint64_t v14 = v7;
  uint64_t v15 = *(void *)&v18[4];
  if (*(_DWORD *)&v18[8] * HIDWORD(v7) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B89236C(a4, &v16, &v10);
  long long v9 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21B892CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21B892CFC(void *result)
{
  uint64_t v1 = (char **)*result;
  uint64_t v2 = *(unsigned int *)(*result + 16);
  if (v2 == 1)
  {
    uint64_t v3 = *((unsigned int *)v1 + 5);
    size_t v4 = *((unsigned int *)v1 + 2);
    uint64_t v5 = (unsigned __int8 *)result[1];
    if (v3 == v4)
    {
      size_t v6 = (*((_DWORD *)v1 + 3) * v3);
      uint64_t v7 = *v1;
      int v8 = *v5;
      return memset(v7, v8, v6);
    }
    int v20 = *((_DWORD *)v1 + 3);
    if (v4) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      uint64_t v22 = *v1;
      int v23 = v20 - 1;
      if (v20 != 1)
      {
        do
        {
          memset(v22, *v5, v4);
          v22 += v3;
          --v23;
        }
        while (v23);
      }
      int v8 = *v5;
      uint64_t v7 = v22;
      size_t v6 = v4;
      return memset(v7, v8, v6);
    }
  }
  else
  {
    int v9 = *((_DWORD *)v1 + 2);
    int v10 = *((_DWORD *)v1 + 3);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = (unsigned char *)result[1];
      int v13 = v9 - 1;
      uint64_t v14 = *v1;
      int v15 = v10 - 1;
      if (v15)
      {
        uint64_t v16 = *((unsigned int *)v1 + 5);
        if (v13)
        {
          for (int i = 0; i != v15; ++i)
          {
            int v18 = v13;
            uint64_t v19 = v14;
            do
            {
              *uint64_t v19 = *v12;
              v19 += v2;
              --v18;
            }
            while (v18);
            *uint64_t v19 = *v12;
            v14 += v16;
          }
        }
        else
        {
          do
          {
            *uint64_t v14 = *v12;
            v14 += v16;
            --v15;
          }
          while (v15);
        }
      }
      for (; v13; --v13)
      {
        *uint64_t v14 = *v12;
        v14 += v2;
      }
      *uint64_t v14 = *v12;
    }
  }
  return result;
}

size_t *sub_21B892E98(size_t *result)
{
  size_t v1 = *result;
  size_t v2 = result[1];
  uint64_t v3 = *(unsigned int *)(*result + 16);
  uint64_t v4 = *(unsigned int *)(v2 + 16);
  if (v3 != 1 || v4 != 1)
  {
    int v6 = *(_DWORD *)(v1 + 8);
    int v7 = *(_DWORD *)(v1 + 12);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      int v9 = v6 - 1;
      int v10 = *(char **)v1;
      BOOL v11 = *(char **)v2;
      int v12 = v7 - 1;
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(v2 + 20);
        uint64_t v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (int i = 0; i != v12; ++i)
          {
            int v16 = v9;
            unint64_t v17 = v10;
            uint64_t result = (size_t *)v11;
            do
            {
              *(unsigned char *)uint64_t result = *v17;
              v17 += v3;
              uint64_t result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(unsigned char *)uint64_t result = *v17;
            v10 += v14;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *BOOL v11 = *v10;
            v10 += v14;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *BOOL v11 = *v10;
        v10 += v3;
        v11 += v4;
      }
      *BOOL v11 = *v10;
    }
    return result;
  }
  int v18 = *(_DWORD *)(v1 + 20);
  if (v18 != *(_DWORD *)(v2 + 20))
  {
    unsigned int v19 = *(_DWORD *)(v1 + 8);
LABEL_30:
    size_t v25 = v19;
    if (v19) {
      BOOL v23 = *(_DWORD *)(v1 + 12) == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      return sub_21B893078(&v25, (char **)v1, (char **)v2);
    }
    return result;
  }
  unsigned int v19 = *(_DWORD *)(v1 + 8);
  if (v18 != v19) {
    goto LABEL_30;
  }
  size_t v20 = (*(_DWORD *)(v1 + 12) * v18);
  BOOL v21 = *(char **)v1;
  if (v20) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
  }
  else if (!v20)
  {
    return result;
  }
  uint64_t v24 = *(char **)v2;

  return (size_t *)memmove(v24, v21, v20);
}

size_t *sub_21B893078(size_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = result;
    int v6 = *a2;
    int v7 = *a3;
    int v8 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v9 = *((unsigned int *)a3 + 5);
      uint64_t v10 = *((unsigned int *)a2 + 5);
      do
      {
        size_t v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        uint64_t result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    size_t v12 = *v5;
    if (v6 || !v12)
    {
      if (!v12) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

void *sub_21B8931E8(void *result)
{
  size_t v1 = (char **)*result;
  size_t v2 = *(unsigned int *)(*result + 8);
  uint64_t v3 = *(unsigned int *)(*result + 24);
  if (v3 == *(_DWORD *)(*result + 20) * v2)
  {
    uint64_t v4 = *((unsigned int *)v1 + 7);
    int v5 = *((_DWORD *)v1 + 3);
    int v6 = (unsigned __int8 *)result[1];
    size_t v7 = (v5 * v2);
    if (v4 == v5 * v3)
    {
      size_t v8 = (*((_DWORD *)v1 + 4) * v7);
      uint64_t v9 = *v1;
      int v10 = *v6;
LABEL_34:
      return memset(v9, v10, v8);
    }
    int v23 = *((_DWORD *)v1 + 4);
    if (v2) {
      BOOL v24 = v5 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24 && v23 != 0)
    {
      long long v26 = *v1;
      int v27 = v23 - 1;
      if (v23 != 1)
      {
        do
        {
          memset(v26, *v6, v7);
          v26 += v4;
          --v27;
        }
        while (v27);
      }
      int v10 = *v6;
      uint64_t v9 = v26;
      size_t v8 = v7;
      goto LABEL_34;
    }
  }
  else
  {
    int v12 = *((_DWORD *)v1 + 3);
    int v11 = *((_DWORD *)v1 + 4);
    if (v2) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13 && v11 != 0)
    {
      int v15 = (unsigned __int8 *)result[1];
      int v16 = v12 - 1;
      unint64_t v17 = *v1;
      int v18 = v11 - 1;
      if (v11 != 1)
      {
        uint64_t v19 = *((unsigned int *)v1 + 7);
        if (v12 == 1)
        {
          do
          {
            memset(v17, *v15, v2);
            v17 += v19;
            --v18;
          }
          while (v18);
        }
        else
        {
          int v20 = 0;
          do
          {
            int v21 = v16;
            BOOL v22 = v17;
            do
            {
              memset(v22, *v15, v2);
              v22 += v3;
              --v21;
            }
            while (v21);
            memset(v22, *v15, v2);
            v17 += v19;
            ++v20;
          }
          while (v20 != v18);
        }
      }
      for (; v16; --v16)
      {
        memset(v17, *v15, v2);
        v17 += v3;
      }
      int v10 = *v15;
      uint64_t v9 = v17;
      size_t v8 = v2;
      goto LABEL_34;
    }
  }
  return result;
}

size_t *sub_21B8933A8(size_t *result)
{
  size_t v2 = *result;
  size_t v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1) {
    return sub_21B8934C4(result);
  }
  int v4 = *(_DWORD *)(v2 + 12);
  int v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8)) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    int v8 = v4 - 1;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    uint64_t v10 = *(unsigned int *)(v1 + 24);
    int v11 = *(unsigned char **)v2;
    int v12 = *(unsigned char **)v1;
    int v13 = v5 - 1;
    if (v13)
    {
      uint64_t v14 = *(unsigned int *)(v1 + 28);
      uint64_t v15 = *(unsigned int *)(v2 + 28);
      if (v8)
      {
        int v16 = 0;
        unint64_t v17 = v11 + 1;
        uint64_t result = (size_t *)(v12 + 1);
        do
        {
          int v18 = result;
          uint64_t v19 = v17;
          int v20 = v8;
          do
          {
            *((unsigned char *)v18 - 1) = *(v19 - 1);
            *(unsigned char *)int v18 = *v19;
            v19 += v9;
            int v18 = (size_t *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *((unsigned char *)v18 - 1) = *(v19 - 1);
          *(unsigned char *)int v18 = *v19;
          v11 += v15;
          v12 += v14;
          ++v16;
          v17 += v15;
          uint64_t result = (size_t *)((char *)result + v14);
        }
        while (v16 != v13);
      }
      else
      {
        do
        {
          *int v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
      }
    }
    for (; v8; --v8)
    {
      *int v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    *int v12 = *v11;
    v12[1] = v11[1];
  }
  return result;
}

size_t *sub_21B8934C4(size_t *result)
{
  size_t v1 = *result;
  size_t v2 = result[1];
  uint64_t v3 = *(unsigned int *)(*result + 24);
  uint64_t v4 = *(unsigned int *)(v2 + 24);
  if (v3 == v4)
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v5)
    {
      return sub_21B8935AC(result);
    }
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v1 + 8);
  }
  size_t v10 = v5;
  int v7 = *(_DWORD *)(v1 + 12);
  int v6 = *(_DWORD *)(v1 + 16);
  if (v5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && v6 != 0)
  {
    uint64_t v13 = 0;
    unsigned int v14 = v5 - 1;
    unint64_t v15 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
    int v16 = v7 - 1;
    uint64_t v17 = v3 | (v4 << 32);
    int v18 = v6 - 1;
    unint64_t v19 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
    int v12 = *(const void **)v1;
    int v11 = *(void **)v2;
    return (size_t *)sub_21B89384C(&v13, &v10, &v12, &v11);
  }
  return result;
}

size_t *sub_21B8935AC(size_t *result)
{
  size_t v1 = *result;
  size_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 28);
  int v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 28) && v3 == *(_DWORD *)(v1 + 24) * v4)
  {
    size_t v5 = (*(_DWORD *)(v1 + 8) * v4 * *(_DWORD *)(v1 + 16));
    int v6 = *(char **)v1;
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v5)
    {
      return result;
    }
    int v11 = *(char **)v2;
    return (size_t *)memmove(v11, v6, v5);
  }
  else
  {
    int v8 = *(_DWORD *)(v1 + 8);
    size_t v12 = (v8 * v4);
    if (v8) {
      BOOL v9 = v4 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9 && *(_DWORD *)(v1 + 16) != 0) {
      return sub_21B8936D4(&v12, (char **)v1, (char **)v2);
    }
  }
  return result;
}

size_t *sub_21B8936D4(size_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v4 = *((_DWORD *)a2 + 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    int v6 = result;
    BOOL v7 = *a2;
    int v8 = *a3;
    int v9 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v10 = *((unsigned int *)a3 + 7);
      uint64_t v11 = *((unsigned int *)a2 + 7);
      do
      {
        size_t v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        uint64_t result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    size_t v13 = *v6;
    if (v7 || !v13)
    {
      if (!v13) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_22:
      abort();
    }
    return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

_DWORD *sub_21B89384C(_DWORD *result, size_t *a2, const void **a3, void **a4)
{
  size_t v5 = result;
  int v6 = (char *)*a3;
  BOOL v7 = (char *)*a4;
  if (result[8])
  {
    for (unsigned int i = 0; i < v5[8]; ++i)
    {
      unsigned int v9 = v5[5];
      uint64_t v10 = v7;
      uint64_t v11 = v6;
      if (v9)
      {
        unsigned int v12 = 0;
        uint64_t v11 = v6;
        uint64_t v10 = v7;
        do
        {
          size_t v13 = *a2;
          if (!v11 && v13)
          {
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_39;
            }
          }
          else if (!v13)
          {
            goto LABEL_10;
          }
          uint64_t result = memmove(v10, v11, v13);
          unsigned int v9 = v5[5];
LABEL_10:
          v11 += v5[6];
          v10 += v5[7];
          ++v12;
        }
        while (v12 < v9);
      }
      size_t v14 = *a2;
      if (!v11 && v14)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_39;
        }
      }
      else if (!v14)
      {
        goto LABEL_5;
      }
      uint64_t result = memmove(v10, v11, v14);
LABEL_5:
      v6 += v5[9];
      v7 += v5[10];
    }
  }
  unsigned int v15 = v5[5];
  if (v15)
  {
    for (unsigned int j = 0; j < v15; ++j)
    {
      size_t v17 = *a2;
      if (!v6 && v17)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_39;
        }
      }
      else if (!v17)
      {
        goto LABEL_23;
      }
      uint64_t result = memmove(v7, v6, v17);
      unsigned int v15 = v5[5];
LABEL_23:
      v6 += v5[6];
      v7 += v5[7];
    }
  }
  size_t v18 = *a2;
  if (v6) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v18 == 0;
  }
  if (v19)
  {
    if (!v18) {
      return result;
    }
  }
  else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_39:
    abort();
  }

  return memmove(v7, v6, v18);
}

void sub_21B893AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  int v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v7 = v3 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(unsigned int *)(a3 + 24);
    uint64_t v10 = *(unsigned char **)a2;
    uint64_t v11 = *(unsigned char **)a3;
    int v12 = v4 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 28);
      uint64_t v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        int v15 = 0;
        int v16 = v11 + 2;
        size_t v17 = v10 + 2;
        do
        {
          size_t v18 = v17;
          BOOL v19 = v16;
          int v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *BOOL v19 = *v18;
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *BOOL v19 = *v18;
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *uint64_t v11 = *v10;
          v11[1] = v10[1];
          unsigned char v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      unsigned char v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    *uint64_t v11 = *v10;
    v11[1] = v10[1];
    unsigned char v11[2] = v10[2];
  }
}

uint64_t sub_21B893C0C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[1]) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a3;
  if (v4) {
    unint64_t v5 = 0;
  }
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  LODWORD(v9) = 1;
  *(void *)((char *)&v9 + 4) = v6 | (v7 << 32);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = __PAIR64__(v5, 3);
  *(_DWORD *)(a1 + 16) = HIDWORD(v5);
  *(void *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)((char *)&v9 + 4);
  if (v7 * HIDWORD(v5) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_21B893D30(_DWORD *result, uint64_t a2, unsigned char ***a3, unsigned char *a4)
{
  if (result[5])
  {
    unsigned int v4 = 0;
    do
    {
      *(void *)a2 = a4;
      unint64_t v5 = a4;
      if (result[3])
      {
        unsigned int v6 = 0;
        unint64_t v5 = a4;
        do
        {
          *(void *)a2 = v5;
          *unint64_t v5 = ***a3;
          *(unsigned char *)(*(void *)a2 + 1) = ***a3;
          *(unsigned char *)(*(void *)a2 + 2) = ***a3;
          *(unsigned char *)(*(void *)a2 + 3) = ***a3;
          v5 += result[4];
          ++v6;
        }
        while (v6 < result[3]);
      }
      *(void *)a2 = v5;
      *unint64_t v5 = ***a3;
      *(unsigned char *)(*(void *)a2 + 1) = ***a3;
      *(unsigned char *)(*(void *)a2 + 2) = ***a3;
      *(unsigned char *)(*(void *)a2 + 3) = ***a3;
      a4 += result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *(void *)a2 = a4;
  if (result[3])
  {
    unsigned int v7 = 0;
    do
    {
      *(void *)a2 = a4;
      *a4 = ***a3;
      *(unsigned char *)(*(void *)a2 + 1) = ***a3;
      *(unsigned char *)(*(void *)a2 + 2) = ***a3;
      *(unsigned char *)(*(void *)a2 + 3) = ***a3;
      a4 += result[4];
      ++v7;
    }
    while (v7 < result[3]);
  }
  *(void *)a2 = a4;
  *a4 = ***a3;
  *(unsigned char *)(*(void *)a2 + 1) = ***a3;
  *(unsigned char *)(*(void *)a2 + 2) = ***a3;
  *(unsigned char *)(*(void *)a2 + 3) = ***a3;
  return result;
}

void sub_21B893EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  int v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v7 = v3 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(unsigned int *)(a3 + 24);
    uint64_t v10 = *(unsigned char **)a2;
    uint64_t v11 = *(unsigned char **)a3;
    int v12 = v4 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 28);
      uint64_t v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        int v15 = 0;
        int v16 = v11 + 3;
        size_t v17 = v10 + 1;
        do
        {
          size_t v18 = v17;
          BOOL v19 = v16;
          int v20 = v7;
          do
          {
            *(v19 - 3) = *(v18 - 1);
            *(v19 - 2) = *v18;
            *(v19 - 1) = v18[1];
            *BOOL v19 = v18[2];
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 3) = *(v18 - 1);
          *(v19 - 2) = *v18;
          *(v19 - 1) = v18[1];
          *BOOL v19 = v18[2];
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *uint64_t v11 = *v10;
          v11[1] = v10[1];
          unsigned char v11[2] = v10[2];
          void v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      unsigned char v11[2] = v10[2];
      void v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    *uint64_t v11 = *v10;
    v11[1] = v10[1];
    unsigned char v11[2] = v10[2];
    void v11[3] = v10[3];
  }
}

uint64_t sub_21B89403C(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  size_t v2 = *(const __int16 **)(result + 8);
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  int v5 = *(_DWORD *)(*(void *)result + 16);
  int v4 = *(_DWORD *)(*(void *)result + 20);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 12) * v3);
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v12 = v6 - (v6 != 0) + 1;
    if (v12 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v13 = 2 * v6;
    if (!v6) {
      uint64_t v13 = 2;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      uint64_t v14 = (__int16 *)v7;
LABEL_20:
      unint64_t v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    uint64_t v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v16 = vld1q_dup_s16(v2);
    size_t v17 = (int16x8_t *)(v7 + 16);
    unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *size_t v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v20 = 0;
    uint64_t v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    void v21[2] = v2;
    int v9 = *(_DWORD *)(v1 + 12);
    if (v3) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      uint64_t v22[2] = v5;
      void v22[3] = v9 - 1;
      v22[4] = v4;
      unint64_t v11 = *(void *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_21B8941D8((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_21B8941D8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  int v7 = *(_DWORD *)(result + 8);
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v8 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(void *)a2 = v4;
      BOOL v10 = *(const __int16 **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          BOOL v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          unint64_t v12 = (__int16 *)v4;
          if (v13)
          {
            unint64_t v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v14 = vld1q_dup_s16(v10);
            unint64_t v15 = (int16x8_t *)(v4 + 16);
            unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *unint64_t v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            BOOL v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v12 = (__int16 *)v4;
        }
        unint64_t v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(void *)a2 = v4;
  uint64_t v19 = *(uint64_t **)(a3 + 8);
  char v20 = *(const __int16 **)(a3 + 16);
  uint64_t v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (BOOL v22 = (unint64_t)v20 >= v4 + 2 * v21) : (BOOL v22 = 1), !v22))
    {
      int v23 = (__int16 *)v4;
      uint64_t v24 = v21;
LABEL_36:
      unint64_t v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    int v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v24 = v21 & 0xF;
    int16x8_t v25 = vld1q_dup_s16(v20);
    long long v26 = (int16x8_t *)(v4 + 16);
    unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *long long v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t *sub_21B8943FC(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *((unsigned int *)result + 4);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == 1 && v4 == 1)
  {
    int v23 = *((_DWORD *)result + 5);
    int v24 = *((_DWORD *)result + 2);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      uint64_t v27 = (*((_DWORD *)result + 3) * v23);
      unint64_t v28 = (char *)*result;
      if (v27) {
        BOOL v29 = v28 == 0;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
      }
      else if (!v27)
      {
        return result;
      }
      uint64_t v30 = *(char **)a2;
      return (uint64_t *)memmove(v30, v28, 2 * v27);
    }
    else
    {
      uint64_t v31 = *((unsigned int *)result + 2);
      if (v24) {
        BOOL v26 = *((_DWORD *)result + 3) == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26) {
        return sub_21B8945F4(&v31, (char **)result, (char **)a2);
      }
    }
  }
  else
  {
    int v6 = *((_DWORD *)result + 2);
    int v7 = *((_DWORD *)result + 3);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      int v9 = v6 - 1;
      BOOL v10 = (char *)*result;
      uint64_t v11 = *(char **)a2;
      int v12 = v7 - 1;
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(a2 + 20);
        uint64_t v14 = *((unsigned int *)result + 5);
        if (!v9)
        {
          do
          {
            *(_WORD *)uint64_t v11 = *(_WORD *)v10;
            v10 += 2 * v14;
            v11 += 2 * v13;
            --v12;
          }
          while (v12);
LABEL_40:
          *(_WORD *)uint64_t v11 = *(_WORD *)v10;
          return result;
        }
        int v15 = 0;
        uint64_t v16 = 2 * v14;
        uint64_t v17 = 2 * v13;
        uint64_t result = (uint64_t *)(2 * v4);
        do
        {
          unint64_t v18 = v11;
          uint64_t v19 = v10;
          int v20 = v9;
          do
          {
            *(_WORD *)unint64_t v18 = *(_WORD *)v19;
            v19 += 2 * v3;
            unint64_t v18 = (char *)result + (void)v18;
            --v20;
          }
          while (v20);
          *(_WORD *)unint64_t v18 = *(_WORD *)v19;
          v10 += v16;
          v11 += v17;
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        uint64_t v21 = 2 * v3;
        uint64_t v22 = 2 * v4;
        do
        {
          *(_WORD *)uint64_t v11 = *(_WORD *)v10;
          v10 += v21;
          v11 += v22;
          --v9;
        }
        while (v9);
      }
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t *sub_21B8945F4(uint64_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    int v5 = result;
    int v6 = *a2;
    int v7 = *a3;
    int v8 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v9 = 2 * *((unsigned int *)a2 + 5);
      uint64_t v10 = 2 * *((unsigned int *)a3 + 5);
      do
      {
        uint64_t v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        uint64_t result = (uint64_t *)memmove(v7, v6, 2 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    uint64_t v12 = *v5;
    if (v6 || !v12)
    {
      if (!v12) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    return (uint64_t *)memmove(v7, v6, 2 * v12);
  }
  return result;
}

uint64_t sub_21B89476C(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  size_t v2 = *(const __int16 **)(result + 8);
  int v3 = *(_DWORD *)(*(void *)result + 12);
  int v5 = *(_DWORD *)(*(void *)result + 24);
  int v4 = *(_DWORD *)(*(void *)result + 28);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v14 = v6 - (v6 != 0) + 1;
    if (v14 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v15 = 2 * v6;
    if (!v6) {
      uint64_t v15 = 2;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      uint64_t v16 = (__int16 *)v7;
LABEL_23:
      unint64_t v17 = v6 + 1;
      do
      {
        *v16++ = *v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    uint64_t v16 = (__int16 *)(v7 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v18 = vld1q_dup_s16(v2);
    uint64_t v19 = (int16x8_t *)(v7 + 16);
    unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *uint64_t v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v22 = 0;
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    void v23[2] = v2;
    int v10 = *(_DWORD *)(v1 + 16);
    if (v3) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      void v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      unint64_t v13 = *(void *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_21B89492C((BOOL)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_21B89492C(BOOL result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v7 = *(unsigned int *)(result + 16);
  unint64_t v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    int v9 = (unsigned int *)result;
    for (unsigned int i = 0; i < v9[5]; ++i)
    {
      *(void *)a2 = v4;
      BOOL v11 = *(const __int16 **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          BOOL v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          unint64_t v13 = (__int16 *)v4;
          if (v14)
          {
            unint64_t v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v15 = vld1q_dup_s16(v11);
            uint64_t v16 = (int16x8_t *)(v4 + 16);
            unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *uint64_t v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            BOOL v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v13 = (__int16 *)v4;
        }
        unint64_t v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(void *)a2 = v4;
  unint64_t v20 = *(uint64_t **)(a3 + 8);
  uint64_t v21 = *(const __int16 **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (BOOL v23 = (unint64_t)v21 >= v4 + 2 * v22) : (BOOL v23 = 1), !v23))
    {
      int v24 = (__int16 *)v4;
      uint64_t v25 = v22;
LABEL_36:
      unint64_t v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    int v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v25 = v22 & 0xF;
    int16x8_t v26 = vld1q_dup_s16(v21);
    uint64_t v27 = (int16x8_t *)(v4 + 16);
    unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t sub_21B894B58(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v7 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      int v9 = *(const __int16 **)(a3 + 16);
      uint64_t v10 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          BOOL v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          BOOL v11 = (__int16 *)v4;
          if (v12)
          {
            BOOL v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v13 = vld1q_dup_s16(v9);
            BOOL v14 = (int16x8_t *)(v4 + 16);
            unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *BOOL v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            BOOL v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          BOOL v11 = (__int16 *)v4;
        }
        unint64_t v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  BOOL v18 = *(uint64_t **)(a3 + 8);
  unint64_t v19 = *(const __int16 **)(a3 + 16);
  uint64_t v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (BOOL v21 = (unint64_t)v19 >= v4 + 2 * v20) : (BOOL v21 = 1), !v21))
    {
      uint64_t v22 = (__int16 *)v4;
      uint64_t v23 = v20;
LABEL_36:
      unint64_t v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    uint64_t v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v23 = v20 & 0xF;
    int16x8_t v24 = vld1q_dup_s16(v19);
    uint64_t v25 = (int16x8_t *)(v4 + 16);
    unint64_t v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *uint64_t v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

void **sub_21B894D74(void **result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  int v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    int v6 = v2 - 1;
    uint64_t v7 = *(unsigned int *)(a2 + 24);
    unint64_t v8 = *(_WORD **)a2;
    int v9 = v3 - 1;
    if (v3 == 1)
    {
      BOOL v11 = (_WORD *)**result;
      if (!v6)
      {
LABEL_19:
        _WORD *v8 = *v11;
        v8[1] = *v11;
        v8[2] = *v11;
        return result;
      }
    }
    else
    {
      uint64_t v10 = *(unsigned int *)(a2 + 28);
      BOOL v11 = (_WORD *)**result;
      if (!v6)
      {
        do
        {
          _WORD *v8 = *v11;
          v8[1] = *v11;
          v8[2] = *v11;
          v8 += v10;
          --v9;
        }
        while (v9);
        goto LABEL_19;
      }
      int v12 = 0;
      int16x8_t v13 = (void **)(v8 + 2);
      do
      {
        uint64_t result = v13;
        int v14 = v6;
        do
        {
          *((_WORD *)result - 2) = *v11;
          *((_WORD *)result - 1) = *v11;
          *(_WORD *)uint64_t result = *v11;
          uint64_t result = (void **)((char *)result + 2 * v7);
          --v14;
        }
        while (v14);
        *((_WORD *)result - 2) = *v11;
        *((_WORD *)result - 1) = *v11;
        *(_WORD *)uint64_t result = *v11;
        v8 += v10;
        ++v12;
        int16x8_t v13 = (void **)((char *)v13 + 2 * v10);
      }
      while (v12 != v9);
    }
    do
    {
      _WORD *v8 = *v11;
      v8[1] = *v11;
      v8[2] = *v11;
      v8 += v7;
      --v6;
    }
    while (v6);
    goto LABEL_19;
  }
  return result;
}

uint64_t *sub_21B894E9C(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 24);
  if (v3 != *(_DWORD *)(v2 + 24))
  {
    unsigned int v4 = *(_DWORD *)(v1 + 8);
LABEL_12:
    uint64_t v14 = v4;
    if (v4) {
      BOOL v10 = *(_DWORD *)(v1 + 12) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && *(_DWORD *)(v1 + 16) != 0) {
      return sub_21B895174(&v14, (char **)v1, (char **)v2);
    }
    return result;
  }
  unsigned int v4 = *(_DWORD *)(v1 + 8);
  if (v3 != *(_DWORD *)(v1 + 20) * v4) {
    goto LABEL_12;
  }
  int v5 = *(_DWORD *)(v1 + 28);
  if (v5 == *(_DWORD *)(v2 + 28) && (int v6 = *(_DWORD *)(v1 + 12), v5 == v6 * v3))
  {
    uint64_t v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
    unint64_t v8 = *(char **)v1;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return result;
    }
    int16x8_t v13 = *(char **)v2;
    return (uint64_t *)memmove(v13, v8, 2 * v7);
  }
  else
  {
    int v12 = (_DWORD *)*result;
    return (uint64_t *)sub_21B894FFC(v12, (char **)v2);
  }
}

_DWORD *sub_21B894FFC(_DWORD *result, char **a2)
{
  int v2 = result[2];
  int v3 = result[3];
  int v4 = result[4];
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    uint64_t v7 = (v3 * v2);
    unint64_t v8 = *(char **)result;
    BOOL v9 = *a2;
    int v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!v7 || v8)
      {
        if (!v7) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 2 * v7);
    }
    else if (v7)
    {
      uint64_t v11 = 2 * result[7];
      uint64_t v12 = 2 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        uint64_t result = memmove(v9, v8, 2 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10) {
          goto LABEL_17;
        }
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_21B895174(uint64_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  int v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    uint64_t v7 = result;
    int v8 = v3 - 1;
    BOOL v9 = *a2;
    int v10 = *a3;
    uint64_t v11 = 2 * *((unsigned int *)a2 + 6);
    uint64_t v12 = 2 * *((unsigned int *)a3 + 6);
    int v32 = v4 - 1;
    int v30 = v3 - 1;
    if (v4 != 1)
    {
      uint64_t v13 = *((unsigned int *)a3 + 7);
      uint64_t v14 = *((unsigned int *)a2 + 7);
      if (v8)
      {
        int v15 = 0;
        uint64_t v28 = 2 * v13;
        uint64_t v29 = 2 * v14;
        while (1)
        {
          int v31 = v15;
          BOOL v16 = v10;
          unint64_t v17 = v9;
          int v18 = v30;
          do
          {
            unint64_t v19 = v17;
            uint64_t v20 = *v7;
            if (!v19 && v20)
            {
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                goto LABEL_48;
              }
LABEL_18:
              uint64_t result = (uint64_t *)memmove(v16, v19, 2 * v20);
              goto LABEL_19;
            }
            if (v20) {
              goto LABEL_18;
            }
LABEL_19:
            unint64_t v17 = &v19[v11];
            v16 += v12;
            --v18;
          }
          while (v18);
          uint64_t v21 = *v7;
          if (!v19 && v21)
          {
            if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
LABEL_14:
              uint64_t result = (uint64_t *)memmove(v16, &v19[v11], 2 * v21);
              goto LABEL_15;
            }
LABEL_48:
            abort();
          }
          if (v21) {
            goto LABEL_14;
          }
LABEL_15:
          v9 += v29;
          v10 += v28;
          int v15 = v31 + 1;
          if (v31 + 1 == v32) {
            goto LABEL_36;
          }
        }
      }
      uint64_t v22 = 2 * v14;
      uint64_t v23 = 2 * v13;
      do
      {
        uint64_t v24 = *v7;
        if (!v9 && v24)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_48;
          }
        }
        else if (!v24)
        {
          goto LABEL_31;
        }
        uint64_t result = (uint64_t *)memmove(v10, v9, 2 * v24);
LABEL_31:
        v9 += v22;
        v10 += v23;
        --v32;
      }
      while (v32);
    }
LABEL_36:
    for (int i = v30; i; --i)
    {
      uint64_t v26 = *v7;
      if (!v9 && v26)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_48;
        }
      }
      else if (!v26)
      {
        goto LABEL_40;
      }
      uint64_t result = (uint64_t *)memmove(v10, v9, 2 * v26);
LABEL_40:
      v9 += v11;
      v10 += v12;
    }
    uint64_t v27 = *v7;
    if (v9 || !v27)
    {
      if (!v27) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_48;
    }
    return (uint64_t *)memmove(v10, v9, 2 * v27);
  }
  return result;
}

_DWORD *sub_21B8954C8(uint64_t a1)
{
  uint64_t result = *(_DWORD **)a1;
  int v3 = result[5];
  if (v3 == 1)
  {
    if (result[6] == result[2])
    {
      return (_DWORD *)sub_21B89476C(a1);
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      return (_DWORD *)sub_21B8955A8((uint64_t)result, v10);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    int v5 = result[2];
    int v4 = result[3];
    int v6 = result[4];
    if (v5) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v6 != 0)
    {
      uint64_t v12 = &v11;
      v14[0] = 0;
      v14[1] = v5 - 1;
      v14[2] = v3;
      _OWORD v14[3] = v4 - 1;
      int v9 = result[7];
      v14[4] = result[6];
      v14[5] = v6 - 1;
      v14[6] = v9;
      uint64_t v13 = *(_WORD **)result;
      return sub_21B89566C(v14, &v12, &v13);
    }
  }
  return result;
}

uint64_t sub_21B8955A8(uint64_t result, uint64_t a2)
{
  char v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  uint64_t v11 = v3;
  uint64_t v13[2] = a2;
  int v4 = *(_DWORD *)(result + 16);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    int v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    _OWORD v14[3] = v2 - 1;
    unsigned int v8 = *(_DWORD *)(result + 28);
    unint64_t v9 = *(void *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    unsigned int v15 = v4 - 1;
    unsigned int v16 = v8;
    if (v4 != 1)
    {
      unsigned int v10 = 0;
      do
      {
        sub_21B894B58((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 2 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_21B894B58((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

_DWORD *sub_21B89566C(_DWORD *result, void **a2, _WORD **a3)
{
  uint64_t v3 = *a3;
  int v4 = result[5];
  if (!v4)
  {
    int v5 = result[3];
    int v6 = (_WORD *)**a2;
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  int v5 = result[3];
  int v6 = (_WORD *)**a2;
  uint64_t v7 = result[6];
  if (v5)
  {
    int v8 = 0;
    unint64_t v9 = v3 + 2;
    uint64_t v10 = 2 * result[4];
    do
    {
      uint64_t v11 = v9;
      int v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *uint64_t v11 = *v6;
        v11[1] = *v6;
        uint64_t v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *uint64_t v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    uint64_t v13 = 2 * result[4];
    do
    {
      *uint64_t v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      uint64_t v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *uint64_t v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *uint64_t v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

void sub_21B8957AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  int v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v7 = v3 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(unsigned int *)(a3 + 24);
    uint64_t v10 = *(_WORD **)a2;
    uint64_t v11 = *(_WORD **)a3;
    int v12 = v4 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 28);
      uint64_t v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *uint64_t v11 = *v10;
          v11[1] = v10[1];
          unsigned char v11[2] = v10[2];
          void v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *uint64_t v11 = *v10;
        v11[1] = v10[1];
        unsigned char v11[2] = v10[2];
        void v11[3] = v10[3];
        return;
      }
      int v15 = 0;
      unsigned int v16 = v11 + 2;
      unint64_t v17 = v10 + 2;
      do
      {
        int v18 = v17;
        unint64_t v19 = v16;
        int v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *unint64_t v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *unint64_t v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      unsigned char v11[2] = v10[2];
      void v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

void sub_21B895924(void *a1, __n128 a2)
{
  uint64_t v2 = *a1;
  int v3 = (const __int16 *)a1[1];
  uint64_t v4 = *(unsigned int *)(*a1 + 8);
  int v6 = *(_DWORD *)(*a1 + 16);
  int v5 = *(_DWORD *)(*a1 + 20);
  if (v5 == v6 * v4)
  {
    uint64_t v7 = (*(_DWORD *)(v2 + 12) * v4);
    unint64_t v8 = *(void *)v2;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return;
    }
    unint64_t v13 = v7 - (v7 != 0) + 1;
    if (v13 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v14 = 2 * v7;
    if (!v7) {
      uint64_t v14 = 2;
    }
    if (v8 < (unint64_t)(v3 + 1) && v8 + v14 > (unint64_t)v3)
    {
LABEL_19:
      int v15 = (__int16 *)v8;
LABEL_20:
      unint64_t v16 = v7 + 1;
      do
      {
        *v15++ = *v3;
        --v16;
      }
      while (v16 > 1);
      return;
    }
    int v15 = (__int16 *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v13 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v17 = vld1q_dup_s16(v3);
    int v18 = (int16x8_t *)(v8 + 16);
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v18[-1] = v17;
      *int v18 = v17;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v21 = 0;
    uint64_t v20 = v4;
    v22[0] = &v21;
    v22[1] = &v20;
    uint64_t v22[2] = v3;
    int v10 = *(_DWORD *)(v2 + 12);
    if (v4) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      void v23[2] = v6;
      void v23[3] = v10 - 1;
      v23[4] = v5;
      unint64_t v12 = *(void *)v2;
      v24[0] = 0;
      v24[1] = 0;
      sub_21B895AC0(v23, (uint64_t)v24, (uint64_t)v22, v12, a2);
    }
  }
}

unsigned __int16 sub_21B895AC0@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  int v8 = a1[2];
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (unsigned int i = 0; i < a1[3]; ++i)
    {
      *(void *)a2 = v5;
      BOOL v11 = *(const __int16 **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v5
        && v12
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          BOOL v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          unint64_t v13 = (__int16 *)v5;
          if (v14)
          {
            unint64_t v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            int v15 = (__n128 *)(v5 + 16);
            unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *int v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            BOOL v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v13 = (__int16 *)v5;
        }
        unint64_t v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(void *)a2 = v5;
  unint64_t v19 = *(uint64_t **)(a3 + 8);
  uint64_t v20 = *(const __int16 **)(a3 + 16);
  uint64_t v21 = *v19;
  if (!v5
    && v21
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (BOOL v22 = (unint64_t)v20 >= v5 + 2 * v21) : (BOOL v22 = 1), !v22))
    {
      uint64_t v23 = (__int16 *)v5;
      uint64_t v24 = v21;
LABEL_36:
      unint64_t v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    uint64_t v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    uint64_t v25 = (__n128 *)(v5 + 16);
    unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *uint64_t v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

__int16 sub_21B895CE4@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v2 + 16);
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  if (v4 == 1 && v5 == 1)
  {
    int v24 = *(_DWORD *)(v2 + 20);
    if (v24 == *(_DWORD *)(v3 + 20) && v24 == *(_DWORD *)(v2 + 8))
    {
      uint64_t v25 = (*(_DWORD *)(v2 + 12) * v24);
      uint64_t v26 = *(void *)v2;
      if (v25) {
        BOOL v27 = v26 == 0;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
      }
      else if (!v25)
      {
        return v28;
      }
      uint64_t v29 = *(_WORD **)v3;
      unint64_t v30 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v30 < 0xF)
      {
        int v31 = (__int16 *)v26;
      }
      else
      {
        int v31 = (__int16 *)v26;
        if ((unint64_t)v29 - v26 >= 0x20)
        {
          unint64_t v32 = v30 + 1;
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v34 = &v29[v33];
          int v31 = (__int16 *)(v26 + v33 * 2);
          uint64_t v35 = (long long *)(v26 + 16);
          uint64_t v36 = v29 + 8;
          unint64_t v37 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v28 = *(v35 - 1);
            long long v38 = *v35;
            *(v36 - 1) = v28;
            *uint64_t v36 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 16;
          }
          while (v37);
          uint64_t v29 = v34;
          if (v32 == (v32 & 0xFFFFFFFFFFFFFFF0)) {
            return v28;
          }
        }
      }
      do
      {
        __int16 v39 = *v31++;
        LOWORD(v28) = v39;
        *v29++ = v39;
      }
      while (v31 != (__int16 *)(v26 + 2 * v25));
      return v28;
    }
    LOWORD(v28) = sub_21B895F28((uint64_t *)v2, (uint64_t *)v3);
  }
  else
  {
    int v7 = *(_DWORD *)(v2 + 8);
    int v8 = *(_DWORD *)(v2 + 12);
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      int v10 = v7 - 1;
      BOOL v11 = *(_WORD **)v2;
      uint64_t v12 = *(_WORD **)v3;
      uint64_t v13 = 2 * v4;
      uint64_t v14 = 2 * v5;
      int v15 = v8 - 1;
      if (v15)
      {
        uint64_t v16 = *(unsigned int *)(v3 + 20);
        uint64_t v17 = *(unsigned int *)(v2 + 20);
        if (v10)
        {
          int v18 = 0;
          uint64_t v19 = 2 * v17;
          uint64_t v20 = 2 * v16;
          do
          {
            uint64_t v21 = v12;
            BOOL v22 = v11;
            int v23 = v10;
            do
            {
              *uint64_t v21 = *v22;
              BOOL v22 = (_WORD *)((char *)v22 + v13);
              uint64_t v21 = (_WORD *)((char *)v21 + v14);
              --v23;
            }
            while (v23);
            *uint64_t v21 = *v22;
            BOOL v11 = (_WORD *)((char *)v11 + v19);
            uint64_t v12 = (_WORD *)((char *)v12 + v20);
            ++v18;
          }
          while (v18 != v15);
        }
        else
        {
          do
          {
            *uint64_t v12 = *v11;
            v11 += v17;
            v12 += v16;
            --v15;
          }
          while (v15);
        }
      }
      for (; v10; --v10)
      {
        *uint64_t v12 = *v11;
        BOOL v11 = (_WORD *)((char *)v11 + v13);
        uint64_t v12 = (_WORD *)((char *)v12 + v14);
      }
      LOWORD(v28) = *v11;
      *uint64_t v12 = *v11;
    }
  }
  return v28;
}

__int16 sub_21B895F28@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  int v2 = *((_DWORD *)a1 + 3);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a2;
    int v7 = v2 - 1;
    uint64_t v36 = *((unsigned int *)a1 + 2);
    if (v2 != 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 2 * *((unsigned int *)a2 + 5);
      uint64_t v10 = 2 * *((unsigned int *)a1 + 5);
      unint64_t v11 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v12 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v37 = 2 * v12;
      uint64_t v13 = *a2;
      uint64_t v14 = *a1;
      while (1)
      {
        if (!v14)
        {
          BOOL v15 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          uint64_t v3 = v36;
          if (v15) {
            goto LABEL_29;
          }
        }
        uint64_t v16 = (_WORD *)v13;
        uint64_t v17 = (__int16 *)v14;
        if (v11 < 0xF) {
          goto LABEL_33;
        }
        uint64_t v16 = (_WORD *)v13;
        uint64_t v17 = (__int16 *)v14;
        if ((unint64_t)(v6 + v9 * v8 - (v5 + v10 * v8)) < 0x20) {
          goto LABEL_33;
        }
        uint64_t v18 = 0;
        uint64_t v16 = (_WORD *)(v13 + v37);
        uint64_t v17 = (__int16 *)(v14 + v37);
        unint64_t v19 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint64_t v20 = (_OWORD *)(v13 + v18);
          long long v21 = *(_OWORD *)(v14 + v18 + 16);
          *uint64_t v20 = *(_OWORD *)(v14 + v18);
          v20[1] = v21;
          v18 += 32;
          v19 -= 16;
        }
        while (v19);
        if (v11 + 1 != v12)
        {
LABEL_33:
          do
          {
            __int16 v22 = *v17++;
            *v16++ = v22;
          }
          while (v17 != (__int16 *)(v14 + 2 * v3));
        }
        v14 += v10;
        v13 += v9;
        if (++v8 == v7) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v13 = *a2;
    uint64_t v14 = *a1;
LABEL_18:
    if (!v14)
    {
      BOOL v23 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      uint64_t v3 = v36;
      if (v23) {
LABEL_29:
      }
        abort();
    }
    unint64_t v24 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v24 < 0xF || (unint64_t)(v13 - v14) < 0x20)
    {
      BOOL v27 = (_WORD *)v13;
      long long v28 = (__int16 *)v14;
    }
    else
    {
      unint64_t v25 = v24 + 1;
      unint64_t v26 = (v24 + 1) & 0xFFFFFFFFFFFFFFF0;
      BOOL v27 = (_WORD *)(v13 + 2 * v26);
      long long v28 = (__int16 *)(v14 + 2 * v26);
      uint64_t v29 = (long long *)(v14 + 16);
      unint64_t v30 = (_OWORD *)(v13 + 16);
      unint64_t v31 = v26;
      do
      {
        long long v32 = *(v29 - 1);
        long long v33 = *v29;
        *(v30 - 1) = v32;
        *unint64_t v30 = v33;
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      if (v25 == v26) {
        return v32;
      }
    }
    do
    {
      __int16 v34 = *v28++;
      LOWORD(v32) = v34;
      *v27++ = v34;
    }
    while (v28 != (__int16 *)(v14 + 2 * v3));
  }
  return v32;
}

void sub_21B896170(void *a1, __n128 a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (const __int16 *)a1[1];
  int v4 = *(_DWORD *)(*a1 + 12);
  unsigned int v6 = *(_DWORD *)(*a1 + 24);
  unsigned int v5 = *(_DWORD *)(*a1 + 28);
  if (v5 == v6 * v4)
  {
    uint64_t v7 = (*(_DWORD *)(v2 + 8) * v4 * *(_DWORD *)(v2 + 16));
    unint64_t v8 = *(void *)v2;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return;
    }
    unint64_t v15 = v7 - (v7 != 0) + 1;
    if (v15 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v16 = 2 * v7;
    if (!v7) {
      uint64_t v16 = 2;
    }
    if (v8 < (unint64_t)(v3 + 1) && v8 + v16 > (unint64_t)v3)
    {
LABEL_22:
      uint64_t v17 = (__int16 *)v8;
LABEL_23:
      unint64_t v18 = v7 + 1;
      do
      {
        *v17++ = *v3;
        --v18;
      }
      while (v18 > 1);
      return;
    }
    uint64_t v17 = (__int16 *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v15 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v19 = vld1q_dup_s16(v3);
    uint64_t v20 = (int16x8_t *)(v8 + 16);
    unint64_t v21 = v15 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *uint64_t v20 = v19;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v23 = 0;
    int v10 = *(_DWORD *)(v2 + 8);
    uint64_t v22 = (v10 * v4);
    v24[0] = &v23;
    v24[1] = &v22;
    void v24[2] = v3;
    int v11 = *(_DWORD *)(v2 + 16);
    if (v4) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12 && v11 != 0)
    {
      v25[0] = 0;
      v25[1] = v10 - 1;
      v25[2] = *(_DWORD *)(v2 + 20);
      void v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v11 - 1;
      v25[6] = v5;
      unint64_t v14 = *(void *)v2;
      memset(v26, 0, sizeof(v26));
      sub_21B896330(v25, (uint64_t)v26, (uint64_t)v24, v14, a2);
    }
  }
}

unsigned __int16 sub_21B896330@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[2] | (unint64_t)(v8 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (unsigned int i = 0; i < a1[5]; ++i)
    {
      *(void *)a2 = v5;
      BOOL v12 = *(const __int16 **)(a3 + 16);
      uint64_t v13 = **(void **)(a3 + 8);
      if (!v5
        && v13
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          BOOL v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          unint64_t v14 = (__int16 *)v5;
          if (v15)
          {
            unint64_t v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            uint64_t v16 = (__n128 *)(v5 + 16);
            unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *uint64_t v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            BOOL v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v14 = (__int16 *)v5;
        }
        unint64_t v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(void *)a2 = v5;
  uint64_t v20 = *(uint64_t **)(a3 + 8);
  unint64_t v21 = *(const __int16 **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v5
    && v22
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (BOOL v23 = (unint64_t)v21 >= v5 + 2 * v22) : (BOOL v23 = 1), !v23))
    {
      unint64_t v24 = (__int16 *)v5;
      uint64_t v25 = v22;
LABEL_36:
      unint64_t v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    unint64_t v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    unint64_t v26 = (__n128 *)(v5 + 16);
    unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *unint64_t v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_21B89655C@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (unsigned int i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      int v10 = *(const __int16 **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v5
        && v11
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          BOOL v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          BOOL v12 = (__int16 *)v5;
          if (v13)
          {
            BOOL v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            unint64_t v14 = (__n128 *)(v5 + 16);
            unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *unint64_t v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            BOOL v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          BOOL v12 = (__int16 *)v5;
        }
        unint64_t v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  BOOL v18 = *(uint64_t **)(a3 + 8);
  unint64_t v19 = *(const __int16 **)(a3 + 16);
  uint64_t v20 = *v18;
  if (!v5
    && v20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (BOOL v21 = (unint64_t)v19 >= v5 + 2 * v20) : (BOOL v21 = 1), !v21))
    {
      uint64_t v22 = (__int16 *)v5;
      uint64_t v23 = v20;
LABEL_36:
      unint64_t v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    uint64_t v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    unint64_t v24 = (__n128 *)(v5 + 16);
    unint64_t v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *unint64_t v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

__int16 sub_21B896778@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) != 1 || *(_DWORD *)(v2 + 20) != 1)
  {
    int v4 = *(_DWORD *)(v1 + 12);
    int v5 = *(_DWORD *)(v1 + 16);
    if (*(_DWORD *)(v1 + 8)) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6 && v5 != 0)
    {
      int v8 = v4 - 1;
      unint64_t v9 = *(_WORD **)v1;
      int v10 = *(_WORD **)v2;
      uint64_t v11 = 2 * *(unsigned int *)(v1 + 24);
      uint64_t v12 = 2 * *(unsigned int *)(v2 + 24);
      int v13 = v5 - 1;
      if (v13)
      {
        uint64_t v14 = *(unsigned int *)(v2 + 28);
        uint64_t v15 = *(unsigned int *)(v1 + 28);
        if (v8)
        {
          int v16 = 0;
          unint64_t v17 = v9 + 1;
          BOOL v18 = v10 + 1;
          do
          {
            unint64_t v19 = v18;
            uint64_t v20 = v17;
            int v21 = v8;
            do
            {
              *(v19 - 1) = *(v20 - 1);
              *unint64_t v19 = *v20;
              uint64_t v20 = (_WORD *)((char *)v20 + v11);
              unint64_t v19 = (_WORD *)((char *)v19 + v12);
              --v21;
            }
            while (v21);
            *(v19 - 1) = *(v20 - 1);
            *unint64_t v19 = *v20;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v15;
            v18 += v14;
          }
          while (v16 != v13);
        }
        else
        {
          uint64_t v27 = 2 * v15;
          uint64_t v28 = 2 * v14;
          do
          {
            *int v10 = *v9;
            v10[1] = v9[1];
            unint64_t v9 = (_WORD *)((char *)v9 + v27);
            int v10 = (_WORD *)((char *)v10 + v28);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *int v10 = *v9;
        v10[1] = v9[1];
        unint64_t v9 = (_WORD *)((char *)v9 + v11);
        int v10 = (_WORD *)((char *)v10 + v12);
      }
      *int v10 = *v9;
      LOWORD(v24) = v9[1];
      v10[1] = LOWORD(v24);
    }
    return LOWORD(v24);
  }
  int v22 = *(_DWORD *)(v1 + 24);
  if (v22 == *(_DWORD *)(v2 + 24))
  {
    unsigned int v23 = *(_DWORD *)(v1 + 8);
    if (v22 == v23)
    {
      double v24 = sub_21B89692C(a1);
      return LOWORD(v24);
    }
  }
  else
  {
    unsigned int v23 = *(_DWORD *)(v1 + 8);
  }
  uint64_t v30 = v23;
  if (v23) {
    BOOL v25 = *(_DWORD *)(v1 + 12) == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25 && *(_DWORD *)(v1 + 16) != 0) {
    double v24 = sub_21B896D64(&v30, v1, v2);
  }
  return LOWORD(v24);
}

double sub_21B89692C(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = *(unsigned int *)(*a1 + 28);
  uint64_t v4 = *(unsigned int *)(v2 + 28);
  int v5 = *(_DWORD *)(*a1 + 12);
  if (v3 == v4 && v3 == *(_DWORD *)(v1 + 24) * v5)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 8) * v5 * *(_DWORD *)(v1 + 16));
    uint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v6)
    {
      return *(double *)&v17;
    }
    BOOL v18 = *(_WORD **)v2;
    unint64_t v19 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      uint64_t v20 = (__int16 *)v7;
      do
      {
LABEL_25:
        __int16 v28 = *v20++;
        LOWORD(v17) = v28;
        *v18++ = v28;
      }
      while (v20 != (__int16 *)(v7 + 2 * v6));
      return *(double *)&v17;
    }
    uint64_t v20 = (__int16 *)v7;
    if ((unint64_t)v18 - v7 < 0x20) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    unsigned int v23 = &v18[v22];
    uint64_t v20 = (__int16 *)(v7 + v22 * 2);
    double v24 = (long long *)(v7 + 16);
    BOOL v25 = v18 + 8;
    unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v17 = *(v24 - 1);
      long long v27 = *v24;
      *(v25 - 1) = v17;
      *BOOL v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    BOOL v18 = v23;
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_25;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v30 = (v9 * v5);
    int v10 = *(_DWORD *)(v1 + 16);
    if (v9) {
      BOOL v11 = v5 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != 0)
    {
      int v32 = v9 - 1;
      uint64_t v13 = *(unsigned int *)(v1 + 24);
      uint64_t v14 = *(unsigned int *)(v2 + 24);
      unint64_t v33 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
      uint64_t v31 = 0;
      int v34 = v5 - 1;
      uint64_t v35 = v13 | (v14 << 32);
      int v36 = v10 - 1;
      uint64_t v37 = v3 | (v4 << 32);
      uint64_t v15 = *(void *)v1;
      uint64_t v16 = *(void *)v2;
      memset(v38, 0, sizeof(v38));
      *(void *)&long long v17 = sub_21B896B00((unsigned int *)&v31, (uint64_t)v38, &v30, v15, v16);
    }
  }
  return *(double *)&v17;
}

__int16 sub_21B896B00@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  unint64_t v11 = a1[3] | (unint64_t)(v9 << 32);
  unint64_t v12 = a1[4] | (unint64_t)(v10 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = a5;
  *(void *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  unsigned int v13 = a1[8];
  if (v13)
  {
    for (unsigned int i = 0; i < v13; ++i)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 24) = v5;
      uint64_t v16 = *a3;
      if (v6 || !v16)
      {
        uint64_t v17 = v5;
        if (!v16) {
          goto LABEL_4;
        }
      }
      else
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_33;
        }
        uint64_t v17 = *(void *)(a2 + 24);
      }
      unint64_t v18 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v18 < 0xF || (unint64_t)(v17 - v6) < 0x20)
      {
        unint64_t v21 = (_WORD *)v17;
        unint64_t v22 = (__int16 *)v6;
      }
      else
      {
        unint64_t v19 = v18 + 1;
        unint64_t v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v21 = (_WORD *)(v17 + 2 * v20);
        unint64_t v22 = (__int16 *)(v6 + 2 * v20);
        unsigned int v23 = (long long *)(v6 + 16);
        double v24 = (_OWORD *)(v17 + 16);
        unint64_t v25 = v20;
        do
        {
          long long v26 = *(v23 - 1);
          long long v27 = *v23;
          *(v24 - 1) = v26;
          *double v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v19 == v20) {
          goto LABEL_3;
        }
      }
      do
      {
        __int16 v28 = *v22++;
        LOWORD(v26) = v28;
        *v21++ = v28;
      }
      while (v22 != (__int16 *)(v6 + 2 * v16));
LABEL_3:
      unsigned int v13 = a1[8];
LABEL_4:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 24) = v5;
  uint64_t v29 = *a3;
  if (v6 || !v29)
  {
    if (!v29) {
      return v26;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_33:
      abort();
    }
    uint64_t v5 = *(void *)(a2 + 24);
  }
  unint64_t v30 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v30 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    unint64_t v33 = (_WORD *)v5;
    int v34 = (__int16 *)v6;
    do
    {
LABEL_31:
      __int16 v39 = *v34++;
      LOWORD(v26) = v39;
      *v33++ = v39;
    }
    while (v34 != (__int16 *)(v6 + 2 * v29));
    return v26;
  }
  unint64_t v31 = v30 + 1;
  unint64_t v32 = (v30 + 1) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v33 = (_WORD *)(v5 + 2 * v32);
  int v34 = (__int16 *)(v6 + 2 * v32);
  uint64_t v35 = (long long *)(v6 + 16);
  int v36 = (_OWORD *)(v5 + 16);
  unint64_t v37 = v32;
  do
  {
    long long v26 = *(v35 - 1);
    long long v38 = *v35;
    *(v36 - 1) = v26;
    *int v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 16;
  }
  while (v37);
  if (v31 != v32) {
    goto LABEL_31;
  }
  return v26;
}

double sub_21B896D64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  int v5 = *(_DWORD *)(a2 + 16);
  if (v4) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    int v16 = v4 - 1;
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    uint64_t v10 = *(unsigned int *)(a3 + 24);
    unint64_t v17 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    uint64_t v15 = 0;
    int v18 = v3 - 1;
    uint64_t v19 = v9 | (v10 << 32);
    unint64_t v21 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)a3;
    memset(v22, 0, sizeof(v22));
    unsigned int v20 = v5 - 1;
    if (v5 != 1)
    {
      unsigned int v13 = 0;
      do
      {
        sub_21B896E54(&v15, v22, a1, v11, v12);
        v11 += 2 * v21;
        v12 += 2 * HIDWORD(v21);
        ++v13;
      }
      while (v13 < v20);
    }
    *(void *)&double result = sub_21B896E54(&v15, v22, a1, v11, v12);
  }
  return result;
}

__int16 sub_21B896E54@<H0>(_DWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  unsigned int v9 = a1[5];
  if (v9)
  {
    for (unsigned int i = 0; i < v9; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      uint64_t v12 = *a3;
      if (v6 || !v12)
      {
        uint64_t v13 = v5;
        if (!v12) {
          goto LABEL_4;
        }
      }
      else
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_33;
        }
        uint64_t v13 = a2[2];
      }
      unint64_t v14 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0xF || (unint64_t)(v13 - v6) < 0x20)
      {
        unint64_t v17 = (_WORD *)v13;
        int v18 = (__int16 *)v6;
      }
      else
      {
        unint64_t v15 = v14 + 1;
        unint64_t v16 = (v14 + 1) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v17 = (_WORD *)(v13 + 2 * v16);
        int v18 = (__int16 *)(v6 + 2 * v16);
        uint64_t v19 = (long long *)(v6 + 16);
        unsigned int v20 = (_OWORD *)(v13 + 16);
        unint64_t v21 = v16;
        do
        {
          long long v22 = *(v19 - 1);
          long long v23 = *v19;
          *(v20 - 1) = v22;
          *unsigned int v20 = v23;
          v19 += 2;
          v20 += 2;
          v21 -= 16;
        }
        while (v21);
        if (v15 == v16) {
          goto LABEL_3;
        }
      }
      do
      {
        __int16 v24 = *v18++;
        LOWORD(v22) = v24;
        *v17++ = v24;
      }
      while (v18 != (__int16 *)(v6 + 2 * v12));
LABEL_3:
      unsigned int v9 = a1[5];
LABEL_4:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  uint64_t v25 = *a3;
  if (v6 || !v25)
  {
    if (!v25) {
      return v22;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_33:
      abort();
    }
    uint64_t v5 = a2[2];
  }
  unint64_t v26 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v26 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    uint64_t v29 = (_WORD *)v5;
    unint64_t v30 = (__int16 *)v6;
    do
    {
LABEL_31:
      __int16 v35 = *v30++;
      LOWORD(v22) = v35;
      *v29++ = v35;
    }
    while (v30 != (__int16 *)(v6 + 2 * v25));
    return v22;
  }
  unint64_t v27 = v26 + 1;
  unint64_t v28 = (v26 + 1) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = (_WORD *)(v5 + 2 * v28);
  unint64_t v30 = (__int16 *)(v6 + 2 * v28);
  unint64_t v31 = (long long *)(v6 + 16);
  unint64_t v32 = (_OWORD *)(v5 + 16);
  unint64_t v33 = v28;
  do
  {
    long long v22 = *(v31 - 1);
    long long v34 = *v31;
    *(v32 - 1) = v22;
    *unint64_t v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v27 != v28) {
    goto LABEL_31;
  }
  return v22;
}

unsigned __int16 sub_21B8970A0@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(v3 + 20);
  if (v4 == 1)
  {
    if (*(_DWORD *)(v3 + 24) == *(_DWORD *)(v3 + 8))
    {
      sub_21B896170(a1, a2);
    }
    else
    {
      uint64_t v12 = a1[1];
      a2.n128_u16[0] = sub_21B897180(v3, v12, a2);
    }
  }
  else
  {
    uint64_t v14 = a1[1];
    int v6 = *(_DWORD *)(v3 + 8);
    int v5 = *(_DWORD *)(v3 + 12);
    int v7 = *(_DWORD *)(v3 + 16);
    if (v6) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && v7 != 0)
    {
      unint64_t v15 = (__int16 **)&v14;
      v16[0] = 0;
      v16[1] = v6 - 1;
      v16[2] = v4;
      void v16[3] = v5 - 1;
      int v10 = *(_DWORD *)(v3 + 28);
      v16[4] = *(_DWORD *)(v3 + 24);
      v16[5] = v7 - 1;
      v16[6] = v10;
      uint64_t v11 = *(__int16 **)v3;
      v17[0] = 0;
      v17[1] = 0;
      a2.n128_u16[0] = sub_21B897244(v16, (uint64_t)v17, &v15, v11);
    }
  }
  return a2.n128_u16[0];
}

unsigned __int16 sub_21B897180@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  char v14 = 0;
  v15[0] = &v14;
  v15[1] = &v13;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v13 = v4;
  uint64_t v15[2] = a2;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    int v8 = *(_DWORD *)(a1 + 24);
    v16[2] = *(_DWORD *)(a1 + 20);
    void v16[3] = v3 - 1;
    unsigned int v9 = *(_DWORD *)(a1 + 28);
    unint64_t v10 = *(void *)a1;
    v19[0] = 0;
    v19[1] = 0;
    v16[4] = v8;
    unsigned int v17 = v5 - 1;
    unsigned int v18 = v9;
    if (v5 != 1)
    {
      unsigned int v11 = 0;
      do
      {
        a3.n128_u64[0] = sub_21B89655C((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
        v10 += 2 * v18;
        ++v11;
      }
      while (v11 < v17);
    }
    a3.n128_u16[0] = sub_21B89655C((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
  }
  return a3.n128_u16[0];
}

__int16 sub_21B897244@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  if (a1[5])
  {
    unsigned int v4 = 0;
    do
    {
      *(void *)a2 = a4;
      int v5 = a4;
      if (a1[3])
      {
        unsigned int v6 = 0;
        int v5 = a4;
        do
        {
          *(void *)a2 = v5;
          *int v5 = ***a3;
          *(_WORD *)(*(void *)a2 + 2) = ***a3;
          *(_WORD *)(*(void *)a2 + 4) = ***a3;
          *(_WORD *)(*(void *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(void *)a2 = v5;
      *int v5 = ***a3;
      *(_WORD *)(*(void *)a2 + 2) = ***a3;
      *(_WORD *)(*(void *)a2 + 4) = ***a3;
      *(_WORD *)(*(void *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(void *)a2 = a4;
  if (a1[3])
  {
    unsigned int v7 = 0;
    do
    {
      *(void *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(void *)a2 + 2) = ***a3;
      *(_WORD *)(*(void *)a2 + 4) = ***a3;
      *(_WORD *)(*(void *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(void *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(void *)a2 + 2) = ***a3;
  *(_WORD *)(*(void *)a2 + 4) = ***a3;
  int v8 = **a3;
  __int16 result = *v8;
  *(_WORD *)(*(void *)a2 + 6) = *v8;
  return result;
}

double sub_21B897400(void *a1)
{
  uint64_t v1 = (_DWORD *)*a1;
  uint64_t v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) != 1 || *(_DWORD *)(v2 + 20) != 1)
  {
    char v11 = 0;
    if (v1[2]) {
      BOOL v4 = v1[3] == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4 && v1[4] != 0)
    {
      uint64_t v12 = &v11;
      *(void *)&double result = sub_21B8974CC((uint64_t)&v12, (uint64_t)v1, v2);
    }
    return result;
  }
  int v7 = v1[6];
  if (v7 == *(_DWORD *)(v2 + 24))
  {
    unsigned int v8 = v1[2];
    if (v7 == v8)
    {
      return sub_21B89692C(a1);
    }
  }
  else
  {
    unsigned int v8 = v1[2];
  }
  uint64_t v12 = (char *)v8;
  if (v8) {
    BOOL v9 = v1[3] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && v1[4] != 0) {
    return sub_21B896D64((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  return result;
}

__int16 sub_21B8974CC@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3 = *(_DWORD *)(a2 + 12);
  int v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v7 = v3 - 1;
    unsigned int v8 = *(_WORD **)a2;
    BOOL v9 = *(_WORD **)a3;
    uint64_t v10 = 2 * *(unsigned int *)(a2 + 24);
    uint64_t v11 = 2 * *(unsigned int *)(a3 + 24);
    int v12 = v4 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 28);
      uint64_t v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        int v15 = 0;
        unint64_t v16 = v9 + 2;
        unsigned int v17 = v8 + 2;
        do
        {
          unsigned int v18 = v17;
          uint64_t v19 = v16;
          int v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *uint64_t v19 = *v18;
            v19[1] = v18[1];
            uint64_t v19 = (_WORD *)((char *)v19 + v11);
            unsigned int v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *uint64_t v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        uint64_t v21 = 2 * v14;
        uint64_t v22 = 2 * v13;
        do
        {
          *BOOL v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          void v9[3] = v8[3];
          unsigned int v8 = (_WORD *)((char *)v8 + v21);
          BOOL v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *BOOL v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      void v9[3] = v8[3];
      unsigned int v8 = (_WORD *)((char *)v8 + v10);
      BOOL v9 = (_WORD *)((char *)v9 + v11);
    }
    *BOOL v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    __int16 result = v8[3];
    void v9[3] = result;
  }
  return result;
}

uint64_t sub_21B897634(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(const float **)(result + 8);
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  int v5 = *(_DWORD *)(*(void *)result + 16);
  int v4 = *(_DWORD *)(*(void *)result + 20);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 12) * v3);
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      __int16 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v12 = v6 - (v6 != 0) + 1;
    if (v12 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v13 = 4 * v6;
    if (!v6) {
      uint64_t v13 = 4;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      uint64_t v14 = (_DWORD *)v7;
LABEL_20:
      unint64_t v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    uint64_t v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v16 = vld1q_dup_f32(v2);
    unsigned int v17 = (float32x4_t *)(v7 + 16);
    unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *unsigned int v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v20 = 0;
    uint64_t v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    void v21[2] = v2;
    int v9 = *(_DWORD *)(v1 + 12);
    if (v3) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      _OWORD v22[2] = v5;
      void v22[3] = v9 - 1;
      v22[4] = v4;
      unint64_t v11 = *(void *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_21B8977D0((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_21B8977D0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  int v7 = *(_DWORD *)(result + 8);
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v8 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(void *)a2 = v4;
      BOOL v10 = *(const float **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          __int16 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v11 >= 1)
      {
        uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          uint64_t v15 = -4;
          if (!v12) {
            uint64_t v15 = 0;
          }
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, uint64_t v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            uint64_t v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v17 = vld1q_dup_f32(v10);
            unint64_t v18 = (float32x4_t *)(v4 + 16);
            unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *unint64_t v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v14 = (_DWORD *)v4;
        }
        unint64_t v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(void *)a2 = v4;
  uint64_t v21 = *(uint64_t **)(a3 + 8);
  uint64_t v22 = *(const float **)(a3 + 16);
  uint64_t v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      __int16 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v23 >= 1)
  {
    uint64_t v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v26 = 4 * v23;
    if (!v24) {
      uint64_t v26 = 4;
    }
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      unint64_t v27 = (_DWORD *)v4;
LABEL_30:
      unint64_t v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    unint64_t v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v29 = vld1q_dup_f32(v22);
    unint64_t v30 = (float32x4_t *)(v4 + 16);
    unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *unint64_t v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

float sub_21B897A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == 1 && v4 == 1)
  {
    int v23 = *(_DWORD *)(a1 + 20);
    int v24 = *(_DWORD *)(a1 + 8);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      uint64_t v28 = (*(_DWORD *)(a1 + 12) * v23);
      float32x4_t v29 = *(char **)a1;
      if (v28) {
        BOOL v30 = v29 == 0;
      }
      else {
        BOOL v30 = 0;
      }
      if (v30)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
      }
      else if (!v28)
      {
        return result;
      }
      unint64_t v31 = *(char **)a2;
      memmove(v31, v29, 4 * v28);
    }
    else
    {
      uint64_t v32 = *(unsigned int *)(a1 + 8);
      if (v24) {
        BOOL v26 = *(_DWORD *)(a1 + 12) == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26) {
        sub_21B897C30(&v32, (char **)a1, (char **)a2);
      }
    }
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      int v9 = v6 - 1;
      BOOL v10 = *(char **)a1;
      uint64_t v11 = *(char **)a2;
      int v12 = v7 - 1;
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(a2 + 20);
        uint64_t v14 = *(unsigned int *)(a1 + 20);
        if (!v9)
        {
          do
          {
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
            v10 += 4 * v14;
            v11 += 4 * v13;
            --v12;
          }
          while (v12);
LABEL_40:
          float result = *(float *)v10;
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
          return result;
        }
        int v15 = 0;
        uint64_t v16 = 4 * v14;
        uint64_t v17 = 4 * v13;
        do
        {
          unint64_t v18 = v11;
          unint64_t v19 = v10;
          int v20 = v9;
          do
          {
            *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
            v19 += 4 * v3;
            v18 += 4 * v4;
            --v20;
          }
          while (v20);
          *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
          v10 += v16;
          v11 += v17;
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        uint64_t v21 = 4 * v3;
        uint64_t v22 = 4 * v4;
        do
        {
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
          v10 += v21;
          v11 += v22;
          --v9;
        }
        while (v9);
      }
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t *sub_21B897C30(uint64_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    int v5 = result;
    int v6 = *a2;
    int v7 = *a3;
    int v8 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v9 = 4 * *((unsigned int *)a2 + 5);
      uint64_t v10 = 4 * *((unsigned int *)a3 + 5);
      do
      {
        uint64_t v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        float result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    uint64_t v12 = *v5;
    if (v6 || !v12)
    {
      if (!v12) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

float sub_21B897DA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)(v2 + 20) == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8)) {
      sub_21B897EC8((uint64_t)a1);
    }
    else {
      sub_21B8982F8(v2, a1[1]);
    }
    return result;
  }
  int v4 = *(_DWORD *)(v2 + 12);
  int v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8)) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    int v8 = (_DWORD *)a1[1];
    int v9 = v4 - 1;
    uint64_t v10 = *(unsigned int *)(v2 + 24);
    uint64_t v11 = *(_DWORD **)v2;
    int v12 = v5 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v2 + 28);
      if (!v9)
      {
        do
        {
          *uint64_t v11 = *v8;
          v11[1] = *v8;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_22:
        *uint64_t v11 = *v8;
        float result = *(float *)v8;
        v11[1] = *v8;
        return result;
      }
      int v14 = 0;
      int v15 = v11 + 1;
      do
      {
        uint64_t v16 = v15;
        int v17 = v9;
        do
        {
          *(v16 - 1) = *v8;
          *uint64_t v16 = *v8;
          v16 += v10;
          --v17;
        }
        while (v17);
        *(v16 - 1) = *v8;
        *uint64_t v16 = *v8;
        v11 += v13;
        ++v14;
        v15 += v13;
      }
      while (v14 != v12);
    }
    for (; v9; --v9)
    {
      *uint64_t v11 = *v8;
      v11[1] = *v8;
      v11 += v10;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_21B897EC8(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(const float **)(result + 8);
  int v3 = *(_DWORD *)(*(void *)result + 12);
  int v5 = *(_DWORD *)(*(void *)result + 24);
  int v4 = *(_DWORD *)(*(void *)result + 28);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v14 = v6 - (v6 != 0) + 1;
    if (v14 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v15 = 4 * v6;
    if (!v6) {
      uint64_t v15 = 4;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      uint64_t v16 = (_DWORD *)v7;
LABEL_23:
      unint64_t v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    uint64_t v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v18 = vld1q_dup_f32(v2);
    unint64_t v19 = (float32x4_t *)(v7 + 16);
    unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *unint64_t v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v22 = 0;
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    void v23[2] = v2;
    int v10 = *(_DWORD *)(v1 + 16);
    if (v3) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      void v24[2] = *(_DWORD *)(v1 + 20);
      void v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      unint64_t v13 = *(void *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_21B898088((BOOL)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_21B898088(BOOL result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v7 = *(unsigned int *)(result + 16);
  unint64_t v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    int v9 = (unsigned int *)result;
    for (unsigned int i = 0; i < v9[5]; ++i)
    {
      *(void *)a2 = v4;
      BOOL v11 = *(const float **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v12 >= 1)
      {
        uint64_t v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL) - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v14 >= 0x10)
        {
          uint64_t v16 = -4;
          if (!v13) {
            uint64_t v16 = 0;
          }
          if (v4 >= (unint64_t)(v11 + 1)
            || (v17 = v4 + v16 + 4 * v12 + 4, uint64_t v15 = (_DWORD *)v4, (unint64_t)v11 >= v17))
          {
            uint64_t v15 = (_DWORD *)(v4 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
            v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v18 = vld1q_dup_f32(v11);
            unint64_t v19 = (float32x4_t *)(v4 + 16);
            unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v19[-1] = v18;
              *unint64_t v19 = v18;
              v19 += 2;
              v20 -= 8;
            }
            while (v20);
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v15 = (_DWORD *)v4;
        }
        unint64_t v21 = v13 + 1;
        do
        {
          *v15++ = *(_DWORD *)v11;
          --v21;
        }
        while (v21 > 1);
      }
LABEL_3:
      v4 += 4 * v9[6];
    }
  }
  *(void *)a2 = v4;
  char v22 = *(uint64_t **)(a3 + 8);
  int v23 = *(const float **)(a3 + 16);
  uint64_t v24 = *v22;
  if (!v4)
  {
    if (v24)
    {
      float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v24 >= 1)
  {
    uint64_t v25 = v24 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v26 = (v24 & 0x3FFFFFFFFFFFFFFFLL) - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v26 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v27 = 4 * v24;
    if (!v25) {
      uint64_t v27 = 4;
    }
    if (v4 < (unint64_t)(v23 + 1) && (unint64_t)v23 < v4 + v27)
    {
LABEL_29:
      uint64_t v28 = (_DWORD *)v4;
LABEL_30:
      unint64_t v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v23;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    uint64_t v28 = (_DWORD *)(v4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v30 = vld1q_dup_f32(v23);
    unint64_t v31 = (float32x4_t *)(v4 + 16);
    unint64_t v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *unint64_t v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t sub_21B8982F8(uint64_t result, uint64_t a2)
{
  char v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  uint64_t v11 = v3;
  uint64_t v13[2] = a2;
  int v4 = *(_DWORD *)(result + 16);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    int v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    _OWORD v14[3] = v2 - 1;
    unsigned int v8 = *(_DWORD *)(result + 28);
    unint64_t v9 = *(void *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    unsigned int v15 = v4 - 1;
    unsigned int v16 = v8;
    if (v4 != 1)
    {
      unsigned int v10 = 0;
      do
      {
        sub_21B8983BC((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_21B8983BC((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_21B8983BC(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v7 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      unint64_t v9 = *(const float **)(a3 + 16);
      uint64_t v10 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v10 >= 1)
      {
        uint64_t v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          uint64_t v14 = -4;
          if (!v11) {
            uint64_t v14 = 0;
          }
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, uint64_t v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            uint64_t v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v16 = vld1q_dup_f32(v9);
            unint64_t v17 = (float32x4_t *)(v4 + 16);
            unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *unint64_t v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v13 = (_DWORD *)v4;
        }
        unint64_t v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  unint64_t v20 = *(uint64_t **)(a3 + 8);
  unint64_t v21 = *(const float **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      float result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v22 >= 1)
  {
    uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v25 = 4 * v22;
    if (!v23) {
      uint64_t v25 = 4;
    }
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      unint64_t v26 = (_DWORD *)v4;
LABEL_30:
      unint64_t v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    unint64_t v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v28 = vld1q_dup_f32(v21);
    unint64_t v29 = (float32x4_t *)(v4 + 16);
    unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *unint64_t v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

float sub_21B89861C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
  {
    sub_21B898758(a1);
    return result;
  }
  int v4 = *(_DWORD *)(v2 + 12);
  int v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8)) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    int v8 = v4 - 1;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    uint64_t v10 = *(unsigned int *)(v1 + 24);
    uint64_t v11 = *(float **)v2;
    unint64_t v12 = *(float **)v1;
    int v13 = v5 - 1;
    if (v13)
    {
      uint64_t v14 = *(unsigned int *)(v1 + 28);
      uint64_t v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *unint64_t v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *unint64_t v12 = *v11;
        float result = v11[1];
        v12[1] = result;
        return result;
      }
      int v16 = 0;
      unint64_t v17 = v11 + 1;
      unint64_t v18 = v12 + 1;
      do
      {
        unint64_t v19 = v18;
        unint64_t v20 = v17;
        int v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *unint64_t v19 = *v20;
          v20 += v9;
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *unint64_t v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *unint64_t v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_21B898758(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  int v3 = *(_DWORD *)(*result + 24);
  if (v3 != *(_DWORD *)(v2 + 24))
  {
    unsigned int v4 = *(_DWORD *)(v1 + 8);
LABEL_12:
    uint64_t v14 = v4;
    if (v4) {
      BOOL v10 = *(_DWORD *)(v1 + 12) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && *(_DWORD *)(v1 + 16) != 0) {
      return sub_21B898A30(&v14, (char **)v1, (char **)v2);
    }
    return result;
  }
  unsigned int v4 = *(_DWORD *)(v1 + 8);
  if (v3 != *(_DWORD *)(v1 + 20) * v4) {
    goto LABEL_12;
  }
  int v5 = *(_DWORD *)(v1 + 28);
  if (v5 == *(_DWORD *)(v2 + 28) && (int v6 = *(_DWORD *)(v1 + 12), v5 == v6 * v3))
  {
    uint64_t v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
    int v8 = *(char **)v1;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return result;
    }
    int v13 = *(char **)v2;
    return (uint64_t *)memmove(v13, v8, 4 * v7);
  }
  else
  {
    unint64_t v12 = (_DWORD *)*result;
    return (uint64_t *)sub_21B8988B8(v12, (char **)v2);
  }
}

_DWORD *sub_21B8988B8(_DWORD *result, char **a2)
{
  int v2 = result[2];
  int v3 = result[3];
  int v4 = result[4];
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    uint64_t v7 = (v3 * v2);
    int v8 = *(char **)result;
    BOOL v9 = *a2;
    int v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!v7 || v8)
      {
        if (!v7) {
          return result;
        }
      }
      else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 4 * v7);
    }
    else if (v7)
    {
      uint64_t v11 = 4 * result[7];
      uint64_t v12 = 4 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        float result = memmove(v9, v8, 4 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10) {
          goto LABEL_17;
        }
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_21B898A30(uint64_t *result, char **a2, char **a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  int v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    uint64_t v7 = result;
    int v8 = v3 - 1;
    BOOL v9 = *a2;
    int v10 = *a3;
    uint64_t v11 = 4 * *((unsigned int *)a2 + 6);
    uint64_t v12 = 4 * *((unsigned int *)a3 + 6);
    int v32 = v4 - 1;
    int v30 = v3 - 1;
    if (v4 != 1)
    {
      uint64_t v13 = *((unsigned int *)a3 + 7);
      uint64_t v14 = *((unsigned int *)a2 + 7);
      if (v8)
      {
        int v15 = 0;
        uint64_t v28 = 4 * v13;
        uint64_t v29 = 4 * v14;
        while (1)
        {
          int v31 = v15;
          int v16 = v10;
          unint64_t v17 = v9;
          int v18 = v30;
          do
          {
            unint64_t v19 = v17;
            uint64_t v20 = *v7;
            if (!v19 && v20)
            {
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                goto LABEL_48;
              }
LABEL_18:
              float result = (uint64_t *)memmove(v16, v19, 4 * v20);
              goto LABEL_19;
            }
            if (v20) {
              goto LABEL_18;
            }
LABEL_19:
            unint64_t v17 = &v19[v11];
            v16 += v12;
            --v18;
          }
          while (v18);
          uint64_t v21 = *v7;
          if (!v19 && v21)
          {
            if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
LABEL_14:
              float result = (uint64_t *)memmove(v16, &v19[v11], 4 * v21);
              goto LABEL_15;
            }
LABEL_48:
            abort();
          }
          if (v21) {
            goto LABEL_14;
          }
LABEL_15:
          v9 += v29;
          v10 += v28;
          int v15 = v31 + 1;
          if (v31 + 1 == v32) {
            goto LABEL_36;
          }
        }
      }
      uint64_t v22 = 4 * v14;
      uint64_t v23 = 4 * v13;
      do
      {
        uint64_t v24 = *v7;
        if (!v9 && v24)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_48;
          }
        }
        else if (!v24)
        {
          goto LABEL_31;
        }
        float result = (uint64_t *)memmove(v10, v9, 4 * v24);
LABEL_31:
        v9 += v22;
        v10 += v23;
        --v32;
      }
      while (v32);
    }
LABEL_36:
    for (int i = v30; i; --i)
    {
      uint64_t v26 = *v7;
      if (!v9 && v26)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_48;
        }
      }
      else if (!v26)
      {
        goto LABEL_40;
      }
      float result = (uint64_t *)memmove(v10, v9, 4 * v26);
LABEL_40:
      v9 += v11;
      v10 += v12;
    }
    uint64_t v27 = *v7;
    if (v9 || !v27)
    {
      if (!v27) {
        return result;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_48;
    }
    return (uint64_t *)memmove(v10, v9, 4 * v27);
  }
  return result;
}

void sub_21B898D84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
    {
      sub_21B897EC8((uint64_t)a1);
    }
    else
    {
      uint64_t v10 = a1[1];
      sub_21B8982F8(v2, v10);
    }
  }
  else
  {
    uint64_t v11 = a1[1];
    int v5 = *(_DWORD *)(v2 + 8);
    int v4 = *(_DWORD *)(v2 + 12);
    int v6 = *(_DWORD *)(v2 + 16);
    if (v5) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v6 != 0)
    {
      uint64_t v12 = &v11;
      v14[0] = 0;
      v14[1] = v5 - 1;
      v14[2] = v3;
      _OWORD v14[3] = v4 - 1;
      int v9 = *(_DWORD *)(v2 + 28);
      v14[4] = *(_DWORD *)(v2 + 24);
      _DWORD v14[5] = v6 - 1;
      v14[6] = v9;
      uint64_t v13 = *(_DWORD **)v2;
      sub_21B898E64(v14, &v12, &v13);
    }
  }
}

float sub_21B898E64(_DWORD *a1, void **a2, _DWORD **a3)
{
  int v3 = *a3;
  int v4 = a1[5];
  if (!v4)
  {
    int v5 = a1[3];
    int v6 = (_DWORD *)**a2;
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  int v5 = a1[3];
  int v6 = (_DWORD *)**a2;
  uint64_t v7 = a1[6];
  if (v5)
  {
    int v8 = 0;
    int v9 = v3 + 2;
    uint64_t v10 = 4 * a1[4];
    do
    {
      uint64_t v11 = v9;
      int v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *uint64_t v11 = *v6;
        v11[1] = *v6;
        uint64_t v11 = (_DWORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *uint64_t v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    uint64_t v13 = 4 * a1[4];
    do
    {
      *int v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      int v3 = (_DWORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *int v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *int v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  float result = *(float *)v6;
  v3[3] = *v6;
  return result;
}

float sub_21B898FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  int v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v7 = v3 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(unsigned int *)(a3 + 24);
    uint64_t v10 = *(float **)a2;
    uint64_t v11 = *(float **)a3;
    int v12 = v4 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(a3 + 28);
      uint64_t v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *uint64_t v11 = *v10;
          v11[1] = v10[1];
          unsigned char v11[2] = v10[2];
          void v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *uint64_t v11 = *v10;
        v11[1] = v10[1];
        unsigned char v11[2] = v10[2];
        float result = v10[3];
        void v11[3] = result;
        return result;
      }
      int v15 = 0;
      int v16 = v11 + 2;
      unint64_t v17 = v10 + 2;
      do
      {
        int v18 = v17;
        unint64_t v19 = v16;
        int v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *unint64_t v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *unint64_t v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      unsigned char v11[2] = v10[2];
      void v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_21B899118()
{
}

void sub_21B89912C(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  sub_21B89B544(a3, a1, &v3);
}

void sub_21B899158(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      *(void *)int v44 = &unk_26CB99500;
      if (HIDWORD(a3)) {
        uint64_t v3 = a3 << 32;
      }
      else {
        uint64_t v3 = 0;
      }
      *(void *)long long v47 = a3;
      *(void *)&v47[8] = v3 | (a3 != 0);
      sub_21B8733F8((uint64_t)&v36, (uint64_t)v47);
      operator new();
    case 2:
      uint64_t v43 = &unk_26CB99538;
      if (a3 <= 0x10) {
        unsigned int v20 = 16;
      }
      else {
        unsigned int v20 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 16;
      }
      *(void *)&long long v46 = a3;
      *((void *)&v46 + 1) = (a3 != 0) | (unint64_t)(v21 << 32);
      int v36 = &unk_26CB96D60;
      int v37 = 0;
      sub_21B869A70((uint64_t)v38, &v46);
      if (v46 && DWORD1(v46))
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v44, (uint64_t)v38);
        sub_21B869B94((uint64_t *)v47, (uint64_t)v44);
        uint64_t v22 = *(void *)&v47[8];
        uint64_t v23 = *(void *)&v47[16];
        sub_21B8A1880(v44);
        *(void *)&long long v40 = v22;
        *((void *)&v40 + 1) = v23;
      }
      else
      {
        long long v40 = v46;
      }
      int v36 = &unk_26CB97300;
      operator new();
    case 3:
      uint64_t v43 = &unk_26CB99570;
      if (a3 <= 0x10) {
        unsigned int v8 = 16;
      }
      else {
        unsigned int v8 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 16;
      }
      *(void *)&long long v46 = a3;
      *((void *)&v46 + 1) = (a3 != 0) | (unint64_t)(v9 << 32);
      int v36 = &unk_26CB96F10;
      int v37 = 0;
      sub_21B86CDC0(0, 3, &v46, (uint64_t)v38);
      if (v46 && DWORD1(v46))
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v44, (uint64_t)v38);
        sub_21B869B94((uint64_t *)v47, (uint64_t)v44);
        uint64_t v10 = *(void *)&v47[8];
        uint64_t v11 = *(void *)&v47[16];
        sub_21B8A1880(v44);
        *(void *)&long long v40 = v10;
        *((void *)&v40 + 1) = v11;
      }
      else
      {
        long long v40 = v46;
      }
      int v36 = &unk_26CB97390;
      operator new();
    case 4:
      uint64_t v43 = &unk_26CB995A8;
      if (a3 <= 8) {
        unsigned int v26 = 8;
      }
      else {
        unsigned int v26 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 8;
      }
      *(void *)&long long v46 = a3;
      *((void *)&v46 + 1) = (a3 != 0) | (unint64_t)(v27 << 32);
      int v36 = &unk_26CB970C0;
      int v37 = 0;
      sub_21B870190((uint64_t)v38, &v46);
      if (v46 && DWORD1(v46))
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v44, (uint64_t)v38);
        sub_21B8702B4((uint64_t *)v47, (uint64_t)v44);
        uint64_t v28 = *(void *)&v47[8];
        uint64_t v29 = *(void *)&v47[16];
        sub_21B8A1880(v44);
        *(void *)&long long v40 = v28;
        *((void *)&v40 + 1) = v29;
      }
      else
      {
        long long v40 = v46;
      }
      int v36 = &unk_26CB97420;
      operator new();
    case 5:
      uint64_t v43 = &unk_26CB995E0;
      uint64_t v16 = 2 * (a3 != 0);
      LODWORD(v17) = v16 * a3;
      if ((v16 * a3) <= 0x20) {
        LODWORD(v17) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v17 = v17;
      }
      else {
        unint64_t v17 = 32;
      }
      *(_DWORD *)long long v47 = 2;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v16 & 0x1FFFFFFFFLL | ((unint64_t)(v17 >> 1) << 33);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v17;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96BB0;
      int v37 = 0;
      sub_21B865E00((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B865F24((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB974B0;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)&unk_21B997215, 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_21B984AC4);
      abort();
    case 7:
      uint64_t v43 = &unk_26CB99618;
      uint64_t v30 = 2 * (a3 != 0);
      LODWORD(v31) = v30 * a3;
      if ((v30 * a3) <= 0x10) {
        LODWORD(v31) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v31 = v31;
      }
      else {
        unint64_t v31 = 16;
      }
      *(_DWORD *)long long v47 = 2;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v30 & 0x1FFFFFFFFLL | ((unint64_t)(v31 >> 1) << 33);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v31;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96FA0;
      int v37 = 0;
      sub_21B86E1A0((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86E2C4((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB97540;
      operator new();
    case 8:
      uint64_t v43 = &unk_26CB99650;
      uint64_t v18 = 2 * (a3 != 0);
      LODWORD(v19) = v18 * a3;
      if ((v18 * a3) <= 8) {
        LODWORD(v19) = 8;
      }
      if (HIDWORD(a3)) {
        unint64_t v19 = v19;
      }
      else {
        unint64_t v19 = 8;
      }
      *(_DWORD *)long long v47 = 2;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v18 & 0x1FFFFFFFFLL | ((unint64_t)(v19 >> 1) << 33);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v19;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB97150;
      int v37 = 0;
      sub_21B8711C4((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B8712E8((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB975D0;
      operator new();
    case 21:
      uint64_t v43 = &unk_26CB99688;
      if (a3) {
        uint64_t v6 = 3;
      }
      else {
        uint64_t v6 = 0;
      }
      LODWORD(v7) = v6 * a3;
      if ((v6 * a3) <= 0x20) {
        LODWORD(v7) = 32;
      }
      if (HIDWORD(a3)) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 32;
      }
      *(_DWORD *)long long v47 = 3;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v6 | (v7 << 32);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v7;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96C40;
      int v37 = 0;
      sub_21B86705C((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86717C((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB97660;
      operator new();
    case 22:
      uint64_t v43 = &unk_26CB996C0;
      if (a3) {
        uint64_t v12 = 3;
      }
      else {
        uint64_t v12 = 0;
      }
      LODWORD(v13) = v12 * a3;
      if ((v12 * a3) <= 0x10) {
        LODWORD(v13) = 16;
      }
      if (HIDWORD(a3)) {
        uint64_t v13 = v13;
      }
      else {
        uint64_t v13 = 16;
      }
      *(_DWORD *)long long v47 = 3;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v12 | (v13 << 32);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v13;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96DF0;
      int v37 = 0;
      sub_21B86AAA4((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86ABC8((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB976F0;
      operator new();
    case 25:
      uint64_t v43 = &unk_26CB996F8;
      uint64_t v14 = 4 * (a3 != 0);
      LODWORD(v15) = v14 * a3;
      if ((v14 * a3) <= 0x20) {
        LODWORD(v15) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v15 = v15;
      }
      else {
        unint64_t v15 = 32;
      }
      *(_DWORD *)long long v47 = 4;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v14 & 0x3FFFFFFFFLL | ((unint64_t)(v15 >> 2) << 34);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v15;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96CD0;
      int v37 = 0;
      sub_21B86820C((uint64_t)v38, 25, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86836C((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB97780;
      operator new();
    case 31:
      uint64_t v43 = &unk_26CB99730;
      uint64_t v24 = 4 * (a3 != 0);
      LODWORD(v25) = v24 * a3;
      if ((v24 * a3) <= 0x10) {
        LODWORD(v25) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v25 = v25;
      }
      else {
        unint64_t v25 = 16;
      }
      *(_DWORD *)long long v47 = 4;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v24 & 0x3FFFFFFFFLL | ((unint64_t)(v25 >> 2) << 34);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v25;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB97030;
      int v37 = 0;
      sub_21B86F294((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86BDA4((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB97810;
      operator new();
    case 32:
      uint64_t v43 = &unk_26CB99768;
      uint64_t v34 = 4 * (a3 != 0);
      LODWORD(v35) = v34 * a3;
      if ((v34 * a3) <= 8) {
        LODWORD(v35) = 8;
      }
      if (HIDWORD(a3)) {
        unint64_t v35 = v35;
      }
      else {
        unint64_t v35 = 8;
      }
      *(_DWORD *)long long v47 = 4;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v34 & 0x3FFFFFFFFLL | ((unint64_t)(v35 >> 2) << 34);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v35;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB971E0;
      int v37 = 0;
      sub_21B8722B8((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B8723DC((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB978A0;
      operator new();
    case 37:
      uint64_t v43 = &unk_26CB997A0;
      uint64_t v32 = 4 * (a3 != 0);
      LODWORD(v33) = v32 * a3;
      if ((v32 * a3) <= 0x20) {
        LODWORD(v33) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v33 = v33;
      }
      else {
        unint64_t v33 = 32;
      }
      *(_DWORD *)long long v47 = 4;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v32 & 0x3FFFFFFFFLL | ((unint64_t)(v33 >> 2) << 34);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v33;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96CD0;
      int v37 = 0;
      sub_21B86820C((uint64_t)v38, 37, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86836C((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB97930;
      operator new();
    case 38:
      uint64_t v43 = &unk_26CB997D8;
      uint64_t v4 = 4 * (a3 != 0);
      LODWORD(v5) = v4 * a3;
      if ((v4 * a3) <= 0x10) {
        LODWORD(v5) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v5 = v5;
      }
      else {
        unint64_t v5 = 16;
      }
      *(_DWORD *)long long v47 = 4;
      *(_DWORD *)&v47[4] = a3;
      *(void *)int v44 = *(void *)v47;
      *(_DWORD *)&v44[8] = HIDWORD(a3);
      *(_DWORD *)long long v47 = 1;
      *(void *)&v47[4] = v4 & 0x3FFFFFFFFLL | ((unint64_t)(v5 >> 2) << 34);
      *(void *)&v44[12] = *(void *)v47;
      *(_DWORD *)&v44[20] = v5;
      *(void *)&v44[24] = a3;
      uint64_t v45 = *(void *)&v47[4];
      int v36 = &unk_26CB96E80;
      int v37 = 0;
      sub_21B86BC80((uint64_t)v38, (uint64_t)v44);
      if (*(_DWORD *)&v44[24] && *(_DWORD *)&v44[28])
      {
        if (v39) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v46, (uint64_t)v38);
        sub_21B86BDA4((uint64_t)v47, (uint64_t)&v46);
        long long v40 = *(_OWORD *)&v47[8];
        long long v41 = v48;
        uint64_t v42 = v49;
        sub_21B8A1880(&v46);
      }
      else
      {
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)&v44[16];
        uint64_t v42 = v45;
      }
      int v36 = &unk_26CB979C0;
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B89ADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30)
{
  sub_21B8A1880(&a30);
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB97E18[a14])(&a29, v30);
  }
  _Unwind_Resume(a1);
}

void sub_21B89B544(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      *(void *)v142 = &unk_26CB99500;
      LODWORD(v3) = *a3;
      int v4 = a3[1];
      BOOL v5 = *a3 != 0;
      if (*a3 <= 0x20u) {
        LODWORD(v3) = 32;
      }
      uint64_t v6 = *(void *)a3;
      uint64_t v135 = &unk_26CB97270;
      if (v4) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = 32;
      }
      *(void *)v144 = v6;
      *(void *)&v144[8] = v5 | (v3 << 32);
      sub_21B864EF0((uint64_t)&v135, 0, 1, v144, 0);
      uint64_t v135 = &unk_26CB97270;
      operator new();
    case 2:
      v122[0] = &unk_26CB99538;
      LODWORD(v36) = *a3;
      BOOL v37 = *a3 != 0;
      if (*a3 <= 0x10u) {
        LODWORD(v36) = 16;
      }
      if (a3[1]) {
        uint64_t v36 = v36;
      }
      else {
        uint64_t v36 = 16;
      }
      *(void *)&long long v127 = *(void *)a3;
      *((void *)&v127 + 1) = v37 | (v36 << 32);
      LOWORD(v133) = 0;
      uint64_t v135 = &unk_26CB96D60;
      int v136 = 0;
      sub_21B869A70((uint64_t)v137, &v127);
      if (v127 && DWORD1(v127))
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v142, (uint64_t)v137);
        sub_21B869B94((uint64_t *)v144, (uint64_t)v142);
        uint64_t v38 = *(void *)&v144[8];
        uint64_t v39 = *(void *)&v144[16];
        sub_21B8A1880(v142);
        *(void *)&long long v139 = v38;
        *((void *)&v139 + 1) = v39;
      }
      else
      {
        long long v139 = v127;
      }
      if (sub_21B86A34C((uint64_t)&v135)) {
        goto LABEL_262;
      }
      sub_21B86A594(v144, (uint64_t)&v135);
      sub_21B86A6D0((uint64_t *)v142, (uint64_t)&v135);
      *(void *)&long long v129 = v142;
      *((void *)&v129 + 1) = &v133;
      uint64_t v61 = *(unsigned int *)&v142[16];
      if (*(_DWORD *)&v142[16] == 1)
      {
        sub_21B89403C((uint64_t)&v129);
LABEL_261:
        sub_21B8A1D54(v144);
LABEL_262:
        uint64_t v135 = &unk_26CB97300;
        operator new();
      }
      if (!*(_DWORD *)&v142[8] || !*(_DWORD *)&v142[12]) {
        goto LABEL_261;
      }
      int v85 = *(_DWORD *)&v142[8] - 1;
      uint64_t v86 = *(_WORD **)v142;
      int v87 = *(_DWORD *)&v142[12] - 1;
      if (*(_DWORD *)&v142[12] == 1) {
        goto LABEL_205;
      }
      uint64_t v88 = *(unsigned int *)&v142[20];
      if (*(_DWORD *)&v142[8] == 1)
      {
        do
        {
          _WORD *v86 = v133;
          v86 += v88;
          --v87;
        }
        while (v87);
      }
      else
      {
        int v89 = 0;
        uint64_t v90 = 2 * *(unsigned int *)&v142[20];
        do
        {
          uint64_t v91 = v86;
          int v92 = v85;
          do
          {
            *uint64_t v91 = v133;
            v91 += v61;
            --v92;
          }
          while (v92);
          *uint64_t v91 = v133;
          uint64_t v86 = (_WORD *)((char *)v86 + v90);
          ++v89;
        }
        while (v89 != v87);
LABEL_205:
        if (v85)
        {
          uint64_t v93 = 2 * v61;
          do
          {
            _WORD *v86 = v133;
            uint64_t v86 = (_WORD *)((char *)v86 + v93);
            --v85;
          }
          while (v85);
        }
      }
      _WORD *v86 = v133;
      goto LABEL_261;
    case 3:
      *(void *)&long long v127 = &unk_26CB99570;
      LODWORD(v15) = *a3;
      BOOL v16 = *a3 != 0;
      if (*a3 <= 0x10u) {
        LODWORD(v15) = 16;
      }
      if (a3[1]) {
        uint64_t v15 = v15;
      }
      else {
        uint64_t v15 = 16;
      }
      *(void *)&long long v129 = *(void *)a3;
      *((void *)&v129 + 1) = v16 | (v15 << 32);
      LOWORD(v122[0]) = 0;
      uint64_t v135 = &unk_26CB96F10;
      int v136 = 0;
      sub_21B86CDC0(0, 3, &v129, (uint64_t)v137);
      if (v129 && DWORD1(v129))
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v142, (uint64_t)v137);
        sub_21B869B94((uint64_t *)v144, (uint64_t)v142);
        uint64_t v17 = *(void *)&v144[8];
        uint64_t v18 = *(void *)&v144[16];
        sub_21B8A1880(v142);
        *(void *)&long long v139 = v17;
        *((void *)&v139 + 1) = v18;
      }
      else
      {
        long long v139 = v129;
      }
      sub_21B86D2E4((uint64_t)&v135, v122);
      uint64_t v135 = &unk_26CB97390;
      operator new();
    case 4:
      v122[0] = &unk_26CB995A8;
      LODWORD(v44) = *a3;
      BOOL v45 = *a3 != 0;
      if (*a3 <= 8u) {
        LODWORD(v44) = 8;
      }
      if (a3[1]) {
        uint64_t v44 = v44;
      }
      else {
        uint64_t v44 = 8;
      }
      *(void *)&long long v127 = *(void *)a3;
      *((void *)&v127 + 1) = v45 | (v44 << 32);
      LODWORD(v133) = 0;
      uint64_t v135 = &unk_26CB970C0;
      int v136 = 0;
      sub_21B870190((uint64_t)v137, &v127);
      if (v127 && DWORD1(v127))
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(v142, (uint64_t)v137);
        sub_21B8702B4((uint64_t *)v144, (uint64_t)v142);
        uint64_t v46 = *(void *)&v144[8];
        uint64_t v47 = *(void *)&v144[16];
        sub_21B8A1880(v142);
        *(void *)&long long v139 = v46;
        *((void *)&v139 + 1) = v47;
      }
      else
      {
        long long v139 = v127;
      }
      if (sub_21B870A6C((uint64_t)&v135)) {
        goto LABEL_266;
      }
      sub_21B870CB4(v144, (uint64_t)&v135);
      sub_21B870DF0((uint64_t *)v142, (uint64_t)&v135);
      *(void *)&long long v129 = v142;
      *((void *)&v129 + 1) = &v133;
      uint64_t v63 = *(unsigned int *)&v142[16];
      if (*(_DWORD *)&v142[16] == 1)
      {
        sub_21B897634((uint64_t)&v129);
LABEL_265:
        sub_21B8A1D54(v144);
LABEL_266:
        uint64_t v135 = &unk_26CB97420;
        operator new();
      }
      if (!*(_DWORD *)&v142[8] || !*(_DWORD *)&v142[12]) {
        goto LABEL_265;
      }
      int v94 = *(_DWORD *)&v142[8] - 1;
      uint64_t v95 = *(_DWORD **)v142;
      int v96 = *(_DWORD *)&v142[12] - 1;
      if (*(_DWORD *)&v142[12] == 1) {
        goto LABEL_217;
      }
      uint64_t v97 = *(unsigned int *)&v142[20];
      if (*(_DWORD *)&v142[8] == 1)
      {
        do
        {
          *uint64_t v95 = v133;
          v95 += v97;
          --v96;
        }
        while (v96);
      }
      else
      {
        int v98 = 0;
        uint64_t v99 = 4 * *(unsigned int *)&v142[20];
        do
        {
          uint64_t v100 = v95;
          int v101 = v94;
          do
          {
            *uint64_t v100 = v133;
            v100 += v63;
            --v101;
          }
          while (v101);
          *uint64_t v100 = v133;
          uint64_t v95 = (_DWORD *)((char *)v95 + v99);
          ++v98;
        }
        while (v98 != v96);
LABEL_217:
        if (v94)
        {
          uint64_t v102 = 4 * v63;
          do
          {
            *uint64_t v95 = v133;
            uint64_t v95 = (_DWORD *)((char *)v95 + v102);
            --v94;
          }
          while (v94);
        }
      }
      *uint64_t v95 = v133;
      goto LABEL_265;
    case 5:
      v122[0] = &unk_26CB995E0;
      uint64_t v28 = 2 * (*a3 != 0);
      LODWORD(v29) = v28 * *a3;
      if (v29 <= 0x20) {
        LODWORD(v29) = 32;
      }
      uint64_t v30 = *(void *)a3;
      uint64_t v31 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v29 = v29;
      }
      else {
        unint64_t v29 = 32;
      }
      *(_DWORD *)v144 = 2;
      *(_DWORD *)&v144[4] = v30;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v28 & 0x1FFFFFFFFLL | ((unint64_t)(v29 >> 1) << 33);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v31;
      *(_DWORD *)&v142[20] = v29;
      *(void *)&v142[24] = v30;
      uint64_t v143 = *(void *)&v144[4];
      LOBYTE(v133) = 0;
      uint64_t v135 = &unk_26CB96BB0;
      int v136 = 0;
      sub_21B865E00((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B865F24((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B8668E4((uint64_t)&v135))
      {
        sub_21B866B2C(&v129, (uint64_t)&v135);
        sub_21B866C68((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        if (*(_DWORD *)&v144[20] == 1)
        {
          sub_21B8931E8(&v127);
        }
        else if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
        {
          int v75 = *(_DWORD *)&v144[12] - 1;
          uint64_t v76 = v145;
          v77 = *(unsigned char **)v144;
          int v78 = *(_DWORD *)&v144[16] - 1;
          if (*(_DWORD *)&v144[16] == 1)
          {
            LOBYTE(v80) = 0;
          }
          else
          {
            uint64_t v79 = DWORD1(v145);
            int v80 = 0;
            if (*(_DWORD *)&v144[12] == 1)
            {
              do
              {
                unsigned char *v77 = v80;
                LOBYTE(v80) = v133;
                v77[1] = v133;
                v77 += v79;
                --v78;
              }
              while (v78);
            }
            else
            {
              uint64_t v81 = *(void *)v144 + 1;
              do
              {
                char v82 = v133;
                uint64_t v83 = (unsigned char *)v81;
                int v84 = v75;
                do
                {
                  *(v83 - 1) = v82;
                  char v82 = v133;
                  *uint64_t v83 = v133;
                  v83 += v76;
                  --v84;
                }
                while (v84);
                *(v83 - 1) = v82;
                *uint64_t v83 = v133;
                v77 += v79;
                ++v80;
                v81 += v79;
              }
              while (v80 != v78);
              LOBYTE(v80) = v133;
            }
          }
          for (; v75; --v75)
          {
            unsigned char *v77 = v80;
            LOBYTE(v80) = v133;
            v77[1] = v133;
            v77 += v76;
          }
          unsigned char *v77 = v80;
          v77[1] = v133;
        }
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB974B0;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)&unk_21B997215, 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_21B984AC4);
      abort();
    case 7:
      uint64_t v48 = 2 * (*a3 != 0);
      LODWORD(v49) = v48 * *a3;
      if (v49 <= 0x10) {
        LODWORD(v49) = 16;
      }
      uint64_t v50 = *(void *)a3;
      uint64_t v51 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v49 = v49;
      }
      else {
        unint64_t v49 = 16;
      }
      *(_DWORD *)v144 = 2;
      *(_DWORD *)&v144[4] = v50;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v48 & 0x1FFFFFFFFLL | ((unint64_t)(v49 >> 1) << 33);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v51;
      *(_DWORD *)&v142[20] = v49;
      *(void *)&v142[24] = v50;
      uint64_t v143 = *(void *)&v144[4];
      __int16 v121 = 0;
      uint64_t v135 = &unk_26CB96FA0;
      int v136 = 0;
      sub_21B86E1A0((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B86E2C4((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B86EB1C((uint64_t)&v135))
      {
        sub_21B86ED64(v122, (uint64_t)&v135);
        sub_21B86EEA0((uint64_t)v144, (uint64_t)&v135);
        int v123 = v144;
        unsigned int v124 = &v121;
        if (*(_DWORD *)&v144[20] == 1)
        {
          if (v145 == *(_DWORD *)&v144[8])
          {
            sub_21B896170(&v123, v64);
          }
          else
          {
            char v126 = 0;
            uint64_t v125 = *(unsigned int *)&v144[8];
            *(void *)&long long v127 = &v126;
            *((void *)&v127 + 1) = &v125;
            int v128 = &v121;
            if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
            {
              LODWORD(v129) = 0;
              DWORD1(v129) = *(_DWORD *)&v144[8] - 1;
              DWORD2(v129) = 1;
              HIDWORD(v129) = *(_DWORD *)&v144[12] - 1;
              unsigned int v132 = DWORD1(v145);
              unint64_t v115 = *(void *)v144;
              unint64_t v133 = 0;
              uint64_t v134 = 0;
              int v130 = v145;
              unsigned int v131 = *(_DWORD *)&v144[16] - 1;
              if (*(_DWORD *)&v144[16] != 1)
              {
                unsigned int v116 = 0;
                do
                {
                  v64.n128_u64[0] = sub_21B89655C((uint64_t)&v129, &v133, (uint64_t)&v127, v115, v64);
                  v115 += 2 * v132;
                  ++v116;
                }
                while (v116 < v131);
              }
              sub_21B89655C((uint64_t)&v129, &v133, (uint64_t)&v127, v115, v64);
            }
          }
        }
        else if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
        {
          int v103 = *(_DWORD *)&v144[12] - 1;
          int v104 = *(_WORD **)v144;
          uint64_t v105 = 2 * v145;
          int v106 = *(_DWORD *)&v144[16] - 1;
          if (*(_DWORD *)&v144[16] != 1)
          {
            uint64_t v107 = DWORD1(v145);
            if (*(_DWORD *)&v144[12] == 1)
            {
              __int16 v118 = v121;
              uint64_t v119 = 2 * DWORD1(v145);
              do
              {
                _WORD *v104 = v118;
                __int16 v118 = v121;
                v104[1] = v121;
                int v104 = (_WORD *)((char *)v104 + v119);
                --v106;
              }
              while (v106);
            }
            else
            {
              int v108 = 0;
              uint64_t v109 = *(void *)v144 + 2;
              do
              {
                __int16 v110 = v121;
                v111 = (_WORD *)v109;
                int v112 = v103;
                do
                {
                  *(v111 - 1) = v110;
                  __int16 v110 = v121;
                  _WORD *v111 = v121;
                  v111 = (_WORD *)((char *)v111 + v105);
                  --v112;
                }
                while (v112);
                *(v111 - 1) = v110;
                _WORD *v111 = v121;
                v104 += v107;
                ++v108;
                v109 += 2 * v107;
              }
              while (v108 != v106);
            }
          }
          for (__int16 i = v121; v103; --v103)
          {
            _WORD *v104 = i;
            __int16 i = v121;
            v104[1] = v121;
            int v104 = (_WORD *)((char *)v104 + v105);
          }
          _WORD *v104 = i;
          v104[1] = v121;
        }
        sub_21B8A1D54(v122);
      }
      uint64_t v135 = &unk_26CB97540;
      operator new();
    case 8:
      v122[0] = &unk_26CB99650;
      uint64_t v32 = 2 * (*a3 != 0);
      LODWORD(v33) = v32 * *a3;
      if (v33 <= 8) {
        LODWORD(v33) = 8;
      }
      uint64_t v34 = *(void *)a3;
      uint64_t v35 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v33 = v33;
      }
      else {
        unint64_t v33 = 8;
      }
      *(_DWORD *)v144 = 2;
      *(_DWORD *)&v144[4] = v34;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v32 & 0x1FFFFFFFFLL | ((unint64_t)(v33 >> 1) << 33);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v35;
      *(_DWORD *)&v142[20] = v33;
      *(void *)&v142[24] = v34;
      uint64_t v143 = *(void *)&v144[4];
      LODWORD(v133) = 0;
      uint64_t v135 = &unk_26CB97150;
      int v136 = 0;
      sub_21B8711C4((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B8712E8((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B871B40((uint64_t)&v135))
      {
        sub_21B871D88(&v129, (uint64_t)&v135);
        sub_21B871EC4((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        sub_21B897DA8((uint64_t *)&v127);
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB975D0;
      operator new();
    case 21:
      v122[0] = &unk_26CB99688;
      if (*a3) {
        uint64_t v11 = 3;
      }
      else {
        uint64_t v11 = 0;
      }
      LODWORD(v12) = v11 * *a3;
      if (v12 <= 0x20) {
        LODWORD(v12) = 32;
      }
      uint64_t v13 = *(void *)a3;
      uint64_t v14 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = 32;
      }
      *(_DWORD *)v144 = 3;
      *(_DWORD *)&v144[4] = v13;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v11 | (v12 << 32);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v14;
      *(_DWORD *)&v142[20] = v12;
      *(void *)&v142[24] = v13;
      uint64_t v143 = *(void *)&v144[4];
      LOBYTE(v133) = 0;
      uint64_t v135 = &unk_26CB96C40;
      int v136 = 0;
      sub_21B86705C((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B86717C((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B867B08((uint64_t)&v135))
      {
        sub_21B867D50(&v129, (uint64_t)&v135);
        sub_21B867E8C((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        if (*(_DWORD *)&v144[20] == 1)
        {
          sub_21B8931E8(&v127);
        }
        else if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
        {
          int v65 = *(_DWORD *)&v144[12] - 1;
          uint64_t v66 = v145;
          int v67 = *(unsigned char **)v144;
          int v68 = *(_DWORD *)&v144[16] - 1;
          if (*(_DWORD *)&v144[16] == 1)
          {
            LOBYTE(v70) = 0;
          }
          else
          {
            uint64_t v69 = DWORD1(v145);
            int v70 = 0;
            if (*(_DWORD *)&v144[12] == 1)
            {
              do
              {
                *int v67 = v70;
                LOBYTE(v70) = v133;
                v67[1] = v133;
                v67[2] = v70;
                v67 += v69;
                --v68;
              }
              while (v68);
            }
            else
            {
              uint64_t v71 = *(void *)v144 + 2;
              do
              {
                char v72 = v133;
                uint64_t v73 = (unsigned char *)v71;
                int v74 = v65;
                do
                {
                  *(v73 - 2) = v72;
                  char v72 = v133;
                  *(v73 - 1) = v133;
                  *uint64_t v73 = v72;
                  v73 += v66;
                  --v74;
                }
                while (v74);
                *(v73 - 2) = v72;
                *(v73 - 1) = v133;
                *uint64_t v73 = v133;
                v67 += v69;
                ++v70;
                v71 += v69;
              }
              while (v70 != v68);
              LOBYTE(v70) = v133;
            }
          }
          for (; v65; --v65)
          {
            *int v67 = v70;
            LOBYTE(v70) = v133;
            v67[1] = v133;
            v67[2] = v70;
            v67 += v66;
          }
          *int v67 = v70;
          char v117 = v133;
          v67[1] = v133;
          v67[2] = v117;
        }
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB97660;
      operator new();
    case 22:
      if (*a3) {
        uint64_t v19 = 3;
      }
      else {
        uint64_t v19 = 0;
      }
      LODWORD(v20) = v19 * *a3;
      if (v20 <= 0x10) {
        LODWORD(v20) = 16;
      }
      uint64_t v21 = *(void *)a3;
      uint64_t v22 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        uint64_t v20 = v20;
      }
      else {
        uint64_t v20 = 16;
      }
      *(_DWORD *)v144 = 3;
      *(_DWORD *)&v144[4] = v21;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v19 | (v20 << 32);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v22;
      *(_DWORD *)&v142[20] = v20;
      *(void *)&v142[24] = v21;
      uint64_t v143 = *(void *)&v144[4];
      __int16 v121 = 0;
      uint64_t v135 = &unk_26CB96DF0;
      int v136 = 0;
      sub_21B86AAA4((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B86ABC8((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B86B57C((uint64_t)&v135))
      {
        sub_21B86B7C4(v122, (uint64_t)&v135);
        sub_21B86B900((uint64_t)v144, (uint64_t)&v135);
        int v123 = v144;
        unsigned int v124 = &v121;
        if (*(_DWORD *)&v144[20] == 1)
        {
          if (v145 == *(_DWORD *)&v144[8])
          {
            sub_21B89476C((uint64_t)&v123);
          }
          else
          {
            char v126 = 0;
            uint64_t v125 = *(unsigned int *)&v144[8];
            *(void *)&long long v127 = &v126;
            *((void *)&v127 + 1) = &v125;
            int v128 = &v121;
            if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
            {
              LODWORD(v129) = 0;
              DWORD1(v129) = *(_DWORD *)&v144[8] - 1;
              DWORD2(v129) = 1;
              HIDWORD(v129) = *(_DWORD *)&v144[12] - 1;
              unsigned int v132 = DWORD1(v145);
              unint64_t v113 = *(void *)v144;
              unint64_t v133 = 0;
              uint64_t v134 = 0;
              int v130 = v145;
              unsigned int v131 = *(_DWORD *)&v144[16] - 1;
              if (*(_DWORD *)&v144[16] != 1)
              {
                unsigned int v114 = 0;
                do
                {
                  sub_21B894B58((uint64_t)&v129, &v133, (uint64_t)&v127, v113);
                  v113 += 2 * v132;
                  ++v114;
                }
                while (v114 < v131);
              }
              sub_21B894B58((uint64_t)&v129, &v133, (uint64_t)&v127, v113);
            }
          }
        }
        else
        {
          *(void *)&long long v127 = &v121;
          if (*(_DWORD *)&v144[8] && *(_DWORD *)&v144[12] && *(_DWORD *)&v144[16])
          {
            *(void *)&long long v129 = &v127;
            sub_21B894D74((void **)&v129, (uint64_t)v144);
          }
        }
        sub_21B8A1D54(v122);
      }
      uint64_t v135 = &unk_26CB976F0;
      operator new();
    case 25:
      *(void *)&long long v129 = &unk_26CB996F8;
      int v23 = a3[1];
      uint64_t v24 = 4 * (*a3 != 0);
      LODWORD(v25) = v24 * *a3;
      if (v25 <= 0x20) {
        LODWORD(v25) = 32;
      }
      uint64_t v26 = *(void *)a3;
      uint64_t v27 = HIDWORD(*(void *)a3);
      uint64_t v135 = &unk_26CB97780;
      if (v23) {
        unint64_t v25 = v25;
      }
      else {
        unint64_t v25 = 32;
      }
      *(_DWORD *)&v144[4] = v26;
      *(_DWORD *)v144 = 4;
      *(_DWORD *)&v144[8] = v27;
      *(_DWORD *)v142 = 1;
      *(void *)&v142[4] = v24 & 0x3FFFFFFFFLL | ((unint64_t)(v25 >> 2) << 34);
      *(void *)&v144[12] = *(void *)v142;
      *(_DWORD *)&v144[20] = v25;
      *(void *)&long long v145 = v26;
      *((void *)&v145 + 1) = *(void *)&v142[4];
      sub_21B8686EC((uint64_t)&v135, 25, (uint64_t)v144);
      uint64_t v135 = &unk_26CB97780;
      operator new();
    case 31:
      v122[0] = &unk_26CB99730;
      uint64_t v40 = 4 * (*a3 != 0);
      LODWORD(v41) = v40 * *a3;
      if (v41 <= 0x10) {
        LODWORD(v41) = 16;
      }
      uint64_t v42 = *(void *)a3;
      uint64_t v43 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v41 = v41;
      }
      else {
        unint64_t v41 = 16;
      }
      *(_DWORD *)v144 = 4;
      *(_DWORD *)&v144[4] = v42;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v40 & 0x3FFFFFFFFLL | ((unint64_t)(v41 >> 2) << 34);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v43;
      *(_DWORD *)&v142[20] = v41;
      *(void *)&v142[24] = v42;
      uint64_t v143 = *(void *)&v144[4];
      LOWORD(v133) = 0;
      uint64_t v135 = &unk_26CB97030;
      int v136 = 0;
      sub_21B86F294((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B86BDA4((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B86FA18((uint64_t)&v135))
      {
        sub_21B86FC60(&v129, (uint64_t)&v135);
        sub_21B86FD9C((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        sub_21B8970A0((uint64_t *)&v127, v62);
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB97810;
      operator new();
    case 32:
      v122[0] = &unk_26CB99768;
      uint64_t v57 = 4 * (*a3 != 0);
      LODWORD(v58) = v57 * *a3;
      if (v58 <= 8) {
        LODWORD(v58) = 8;
      }
      uint64_t v59 = *(void *)a3;
      uint64_t v60 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v58 = v58;
      }
      else {
        unint64_t v58 = 8;
      }
      *(_DWORD *)v144 = 4;
      *(_DWORD *)&v144[4] = v59;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v57 & 0x3FFFFFFFFLL | ((unint64_t)(v58 >> 2) << 34);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v60;
      *(_DWORD *)&v142[20] = v58;
      *(void *)&v142[24] = v59;
      uint64_t v143 = *(void *)&v144[4];
      LODWORD(v133) = 0;
      uint64_t v135 = &unk_26CB971E0;
      int v136 = 0;
      sub_21B8722B8((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B8723DC((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B872C80((uint64_t)&v135))
      {
        sub_21B872EC8(&v129, (uint64_t)&v135);
        sub_21B873004((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        sub_21B898D84((uint64_t *)&v127);
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB978A0;
      operator new();
    case 37:
      *(void *)&long long v129 = &unk_26CB997A0;
      int v52 = a3[1];
      uint64_t v53 = 4 * (*a3 != 0);
      LODWORD(v54) = v53 * *a3;
      if (v54 <= 0x20) {
        LODWORD(v54) = 32;
      }
      uint64_t v55 = *(void *)a3;
      uint64_t v56 = HIDWORD(*(void *)a3);
      uint64_t v135 = &unk_26CB97930;
      if (v52) {
        unint64_t v54 = v54;
      }
      else {
        unint64_t v54 = 32;
      }
      *(_DWORD *)&v144[4] = v55;
      *(_DWORD *)v144 = 4;
      *(_DWORD *)&v144[8] = v56;
      *(_DWORD *)v142 = 1;
      *(void *)&v142[4] = v53 & 0x3FFFFFFFFLL | ((unint64_t)(v54 >> 2) << 34);
      *(void *)&v144[12] = *(void *)v142;
      *(_DWORD *)&v144[20] = v54;
      *(void *)&long long v145 = v55;
      *((void *)&v145 + 1) = *(void *)&v142[4];
      sub_21B8686EC((uint64_t)&v135, 37, (uint64_t)v144);
      uint64_t v135 = &unk_26CB97930;
      operator new();
    case 38:
      v122[0] = &unk_26CB997D8;
      uint64_t v7 = 4 * (*a3 != 0);
      LODWORD(v8) = v7 * *a3;
      if (v8 <= 0x10) {
        LODWORD(v8) = 16;
      }
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v8 = v8;
      }
      else {
        unint64_t v8 = 16;
      }
      *(_DWORD *)v144 = 4;
      *(_DWORD *)&v144[4] = v9;
      *(void *)v142 = *(void *)v144;
      *(_DWORD *)v144 = 1;
      *(void *)&v144[4] = v7 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
      *(void *)&v142[12] = *(void *)v144;
      *(_DWORD *)&v142[8] = v10;
      *(_DWORD *)&v142[20] = v8;
      *(void *)&v142[24] = v9;
      uint64_t v143 = *(void *)&v144[4];
      LOWORD(v133) = 0;
      uint64_t v135 = &unk_26CB96E80;
      int v136 = 0;
      sub_21B86BC80((uint64_t)v137, (uint64_t)v142);
      if (*(_DWORD *)&v142[24] && *(_DWORD *)&v142[28])
      {
        if (v138) {
          sub_21B84C734();
        }
        sub_21B8A14FC(&v129, (uint64_t)v137);
        sub_21B86BDA4((uint64_t)v144, (uint64_t)&v129);
        long long v139 = *(_OWORD *)&v144[8];
        long long v140 = v145;
        uint64_t v141 = v146;
        sub_21B8A1880(&v129);
      }
      else
      {
        long long v139 = *(_OWORD *)v142;
        long long v140 = *(_OWORD *)&v142[16];
        uint64_t v141 = v143;
      }
      if (!sub_21B86C648((uint64_t)&v135))
      {
        sub_21B86C890(&v129, (uint64_t)&v135);
        sub_21B86C9CC((uint64_t)v144, (uint64_t)&v135);
        *(void *)&long long v127 = v144;
        *((void *)&v127 + 1) = &v133;
        sub_21B8954C8((uint64_t)&v127);
        sub_21B8A1D54(&v129);
      }
      uint64_t v135 = &unk_26CB979C0;
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B89DA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8A1880((uint64_t *)va);
  sub_21B865094(v14);
  _Unwind_Resume(a1);
}

void sub_21B89DA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B89DFA4()
{
}

void sub_21B89DFBC()
{
}

void sub_21B89DFD4()
{
}

void sub_21B89DFEC()
{
}

void sub_21B89E004()
{
}

void sub_21B89E01C()
{
}

void sub_21B89E034()
{
}

void sub_21B89E04C()
{
}

void sub_21B89E064()
{
}

void sub_21B89E07C()
{
}

void sub_21B89E094()
{
}

void sub_21B89E0AC()
{
}

void sub_21B89E0C4()
{
}

void sub_21B89E0DC()
{
}

void sub_21B89E0F0(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B84E40C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  unint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_21B89E21C@<X0>(void *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  long long v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    unint64_t v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      size_t v8 = v7 - a2;
      if (v8 >= a3) {
        size_t v9 = a3;
      }
      else {
        size_t v9 = v8;
      }
      if (v9 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_7;
      }
LABEL_19:
      sub_21B836090();
    }
LABEL_20:
    sub_21B846058();
  }
  unint64_t v13 = result[1];
  if (v13 < a2) {
    goto LABEL_20;
  }
  long long v5 = (void *)*result;
  size_t v14 = v13 - a2;
  if (v14 >= a3) {
    size_t v9 = a3;
  }
  else {
    size_t v9 = v14;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_19;
  }
LABEL_7:
  if (v9 >= 0x17)
  {
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v10 = v9 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((unsigned char *)a4 + 23) = v9;
    if (!v9)
    {
      *(unsigned char *)a4 = 0;
      return result;
    }
  }
  float result = memmove(a4, (char *)v5 + a2, v9);
  *((unsigned char *)a4 + v9) = 0;
  return result;
}

unint64_t sub_21B89E324(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    size_t v7 = strlen(__s);
    if (v6 < a3) {
      return -1;
    }
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
    size_t v7 = strlen(__s);
    if (v6 < a3) {
      return -1;
    }
  }
  int64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = (void *)(v5 + a3);
    uint64_t v11 = (char *)(v5 + v6);
    int64_t v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v12 - v9;
        if (v15 == -1) {
          break;
        }
        BOOL v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16) {
          break;
        }
        unint64_t v13 = v16;
        if (!memcmp(v16, __s, v9)) {
          goto LABEL_9;
        }
        uint64_t v10 = v13 + 1;
        int64_t v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    unint64_t v13 = v11;
LABEL_9:
    if (v13 == v11) {
      return -1;
    }
    else {
      return (unint64_t)&v13[-v5];
    }
  }
  return a3;
}

void sub_21B89E41C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B885A04();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89E548(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B885E44();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89E674(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B885F48();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89E7A0(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B8503D8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89E8CC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B88604C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89E9F8(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886150();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89EB24(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886254();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89EC50(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886358();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89ED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89ED7C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B88645C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89EE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89EEA8(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886560();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89EFD4(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886664();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89F0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89F100(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B886768();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89F200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B89F22C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B88686C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  size_t v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B89F32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B89F358(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  BOOL v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26CB99800[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  BOOL v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_21B84C734();
  }
  uint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26CB99080[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  BOOL v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26CB99800[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  BOOL v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_21B84C734();
  }
  uint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26CB99080[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  BOOL v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_21B84C734();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26CB99800[v9])(&v11, a2);
}

void sub_21B89F4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21B89F518(_DWORD ***a1)
{
  return sub_21B89F534(**a1, (char *)(*a1)[1]);
}

void sub_21B89F524(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B89F534(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB99068[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    uint64_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B89F628(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  uint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99068[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B89F7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B89F824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    float result = sub_21B89F920((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  float result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B89F918(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B89F920(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      unint64_t v13 = (void **)*a1;
      uint64_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  unint64_t v13 = (void **)*a1;
  uint64_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  uint64_t v14 = (void **)*a1;
  uint64_t v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B89FB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B89FB34(_DWORD ***a1)
{
  return sub_21B89FB50(**a1, (char *)(*a1)[1]);
}

void sub_21B89FB40(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B89FB50(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB99068[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    size_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B89FC44(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  unint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99068[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B89FDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B89FE40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    float result = sub_21B89FF3C((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  float result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B89FF34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B89FF3C(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      unint64_t v13 = (void **)*a1;
      uint64_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  unint64_t v13 = (void **)*a1;
  uint64_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  uint64_t v14 = (void **)*a1;
  uint64_t v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B8A013C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8A0150(uint64_t a1, int a2)
{
  int v2 = a2;
  v4[0] = 0;
  v4[1] = 0;
  value = v4;
  sub_21B97B8C4();
}

void sub_21B8A0420(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A0434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_21B83A360((uint64_t)&a12);
  sub_21B83A360((uint64_t)&a9);
  sub_21B83A360(v12);
  _Unwind_Resume(a1);
}

void sub_21B8A0480(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A0494(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A04A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_21B8A04C0(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A04D4(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  CFDictionaryRef v5 = *(CFDictionaryRef *)a1;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    goto LABEL_12;
  }
  unint64_t v6 = (const void *)*MEMORY[0x263F04130];
  value = 0;
  if (v6 && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v6, (const void **)&value))
  {
    size_t v7 = value;
    if (value)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v7) == TypeID)
      {
        CFRetain(v7);
        operator new();
      }
    }
    LOBYTE(v9) = 0;
    char v10 = 0;
  }
LABEL_12:
  *a2 = 0;
  a2[16] = 0;
}

void sub_21B8A07F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_21B83A360((uint64_t)va);
  sub_21B83DCE8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21B8A080C(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_21B8A0820(_Unwind_Exception *a1)
{
}

void sub_21B8A0834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8A0848(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_21B8A096C(&v5, v3);
}

void sub_21B8A0958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8A096C(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_21B8A09E0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_21B8A09F8(_Unwind_Exception *a1)
{
}

void sub_21B8A0A10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A0A48(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_21B8A0A6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8A0AE0(uint64_t a1, uint64_t a2)
{
  int v2 = *(atomic_ullong **)(a2 + 8);
  v3[0] = *(CFTypeRef *)a2;
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  sub_21B8A0C00(&v4, v3);
}

void sub_21B8A0BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8A0C00(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  operator new();
}

void sub_21B8A0C74(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_21B8A0C8C(_Unwind_Exception *a1)
{
}

void sub_21B8A0CA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A0CDC(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_21B8A0D00(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_21B8A0D74(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
    {
LABEL_4:
      unsigned int v7 = *a3;
      sub_21B97ABE8(&v7);
    }
  }
  else if (v5)
  {
    goto LABEL_4;
  }
  return 0;
}

void sub_21B8A0EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A0F04(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
LABEL_4:
    }
      sub_21B97AD08(a3);
  }
  else if (v5)
  {
    goto LABEL_4;
  }
  return 0;
}

void sub_21B8A1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8A108C(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 233, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    unsigned int v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetPixelFormatType(v8);
}

BOOL sub_21B8A1210(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 176, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *(__CVBuffer **)v5;
    unsigned int v7 = *(std::__shared_weak_count **)(v5 + 8);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return CVPixelBufferIsPlanar(v6) != 0;
}

uint64_t sub_21B8A134C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 250, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v7 = v10;
  if (atomic_load_explicit((atomic_ullong *volatile)(v10 + 104), memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v11, (void (__cdecl *)(void *))sub_21B8A5508);
  }
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v7 + 120) - *(void *)(v7 + 112)) >> 3)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 251, (uint64_t)"idx < p_->GetCachedBaseAddress().size()", 39, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_15:
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = v8;
  if (atomic_load_explicit((atomic_ullong *volatile)(v8 + 104), memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v8 + 104), &v11, (void (__cdecl *)(void *))sub_21B8A5508);
  }
  return *(void *)(*(void *)(v8 + 112) + 8 * a2);
}

void *sub_21B8A14FC(void *a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26CB99920;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    unint64_t v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26CB998E0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_21B8A6B80(a1[1]);
  }
  return a1;
}

void sub_21B8A15E8(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B8A1640(void *a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26CB99920;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    unint64_t v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26CB998E0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_21B8A6B80(a1[1]);
  }
  return a1;
}

void sub_21B8A172C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8A1784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_21B8A6DA4(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_21B8A1880(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_21B8A6DA4(a1[1]);
  }
LABEL_6:
  *a1 = &unk_26CB99920;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_21B8A1998(void *a1)
{
  sub_21B8A1880(a1);

  JUMPOUT(0x21D495F30);
}

void *sub_21B8A19D0(void *a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26CB99920;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    unint64_t v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26CB99900;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_21B8A6C94(a1[1]);
  }
  return a1;
}

void sub_21B8A1ABC(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B8A1B14(void *a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26CB99920;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    unint64_t v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26CB99900;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_21B8A6C94(a1[1]);
  }
  return a1;
}

void sub_21B8A1C00(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8A1C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_21B8A6EB8(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_21B8A1D54(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_21B8A6EB8(a1[1]);
  }
LABEL_6:
  *a1 = &unk_26CB99920;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_21B8A1E6C(void *a1)
{
  sub_21B8A1D54(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A1EA4(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_21B8A1F18(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_21B8A1F30(_Unwind_Exception *a1)
{
}

void sub_21B8A1F44(int a1, CFTypeRef cf, int a3)
{
  if (a3)
  {
    if (cf) {
      CFRetain(cf);
    }
    operator new();
  }
  operator new();
}

void sub_21B8A21DC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_21B8A21F0()
{
}

void sub_21B8A221C()
{
}

void sub_21B8A2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_21B8A224C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v7 = a3;
  CVPixelBufferRef pixelBufferOut = 0;
  sub_21B8A0848((uint64_t)v5, a5);
}

void sub_21B8A2AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_21B8A2BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B83A360(v14 - 144);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8A2BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,unsigned int a32,int a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a32 != -1) {
    (*(void (**)(char *, char *))(v43 + 8 * a32))(&a37, &a29);
  }
  if (a20 < 0)
  {
    operator delete(__p);
    sub_21B83A360((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B8A2C58);
}

void sub_21B8A2C14(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

void sub_21B8A2C30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21B8A2C50);
}

void sub_21B8A2C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *sub_21B8A2C8C(void *result)
{
  uint64_t v1 = result;
  char *result = &unk_26CB99920;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8A2D24(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_21B8A2E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A2E44(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CB99B30;
    __cxa_throw(exception, (struct type_info *)&unk_26CB96818, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_21B8A2EA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_21B8A2F14(void *a1)
{
  *a1 = &unk_26CB99920;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8A2FBC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = (std::__shared_weak_count *)v1[1];
  if (!v3) {
    return v2;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

unint64_t sub_21B8A3058(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 197, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = *(__CVBuffer **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    unsigned int WidthOfPlane = CVPixelBufferGetWidthOfPlane(v8, planeIndex);
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v12 = 0;
    return WidthOfPlane | ((unint64_t)CVPixelBufferGetHeightOfPlane(v12, planeIndex) << 32);
  }
  unsigned int WidthOfPlane = CVPixelBufferGetWidthOfPlane(0, planeIndex);
  uint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v12 = *(__CVBuffer **)v11;
  unint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return WidthOfPlane | ((unint64_t)CVPixelBufferGetHeightOfPlane(v12, planeIndex) << 32);
}

size_t sub_21B8A3220(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 203, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetWidth(v8);
}

size_t sub_21B8A33A4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 213, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetHeight(v8);
}

size_t sub_21B8A3528(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 223, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetBytesPerRow(v8);
}

size_t sub_21B8A36AC(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 228, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = *(__CVBuffer **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return CVPixelBufferGetBytesPerRowOfPlane(v8, planeIndex);
}

uint64_t sub_21B8A37F4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 244, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v7 = v10;
  if (atomic_load_explicit((atomic_ullong *volatile)(v10 + 104), memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v11, (void (__cdecl *)(void *))sub_21B8A5508);
  }
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v7 + 120) - *(void *)(v7 + 112)) >> 3)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 245, (uint64_t)"idx < p_->GetCachedBaseAddress().size()", 39, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_15:
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = v8;
  if (atomic_load_explicit((atomic_ullong *volatile)(v8 + 104), memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v8 + 104), &v11, (void (__cdecl *)(void *))sub_21B8A5508);
  }
  return *(void *)(*(void *)(v8 + 112) + 8 * a2);
}

void sub_21B8A39A4(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 256, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = *(__CVBuffer **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v8);

  sub_21B973B1C(a2, IOSurface, 1);
}

uint64_t sub_21B8A3AFC(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534) {
          return result;
        }
        if (a1 != 1094862674)
        {
          int v7 = 1111970369;
          goto LABEL_37;
        }
        return 4;
      }
      if (a1 == 875704422 || a1 == 875704438) {
        return result;
      }
      int v4 = 875836518;
LABEL_41:
      if (a1 != v4) {
        goto LABEL_43;
      }
      return result;
    }
    if (a1 > 843264055)
    {
      unsigned int v6 = a1 - 843264056;
      if (v6 <= 0x30 && ((1 << v6) & 0x1400000000001) != 0) {
        return 2;
      }
      goto LABEL_43;
    }
    if (a1 != 24)
    {
      if (a1 == 32) {
        return 4;
      }
      if (a1 != 842285639) {
        goto LABEL_43;
      }
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032) {
          return result;
        }
        int v4 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600) {
          return result;
        }
        int v4 = 1717856627;
      }
      goto LABEL_41;
    }
    if (a1 == 1647392359) {
      return result;
    }
    if (a1 != 1647589490)
    {
      int v7 = 1647719521;
      goto LABEL_37;
    }
    return 3;
  }
  if (a1 <= 1278226741)
  {
    unsigned int v5 = a1 - 1278226488;
    if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0) {
      goto LABEL_43;
    }
    return result;
  }
  if (a1 > 1380410944)
  {
    if (a1 != 1380410945)
    {
      unsigned __int16 v3 = 26689;
      goto LABEL_36;
    }
    return 4;
  }
  if (a1 != 1278226742)
  {
    unsigned __int16 v3 = 16961;
LABEL_36:
    int v7 = v3 | 0x52470000;
LABEL_37:
    if (a1 == v7) {
      return 4;
    }
LABEL_43:
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 420, (uint64_t)&unk_21B997215, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_21B984AC4);
    abort();
  }
  return result;
}

void sub_21B8A3D78()
{
  long long v0 = xmmword_21B9A0730;
  strcpy((char *)operator new(0x28uLL), "Failed to create CVPixelBuffer: ");
  int v1 = 1;
  operator new();
}

void sub_21B8A41B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v36 = a19;
  a19 = 0;
  if (v36) {
    sub_21B983CF0((uint64_t)&a19, v36);
  }
  sub_21B84C6D8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B8A4290()
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EB18))
  {
    LODWORD(v0) = 0;
    int v1 = operator new(0x48uLL);
    long long v2 = xmmword_21B9A7F20;
    strcpy((char *)v1, "kCVReturnSuccess: Function executed successfully without errors.");
    int v3 = -6660;
    int v4 = operator new(0x38uLL);
    long long v5 = xmmword_21B9A7F30;
    strcpy((char *)v4, "kCVReturnError: Function executed with unknown error.");
    int v6 = -6661;
    int v7 = operator new(0x78uLL);
    long long v8 = xmmword_21B9A7F40;
    strcpy((char *)v7, "kCVReturnInvalidArgument: At least one of the arguments passed in is not valid. Either out of range or the wrong type.");
    int v9 = -6662;
    uint64_t v10 = operator new(0x78uLL);
    long long v11 = xmmword_21B9A7F50;
    strcpy((char *)v10, "kCVReturnAllocationFailed: The allocation for a buffer or buffer pool failed. Most likely because of lack of resources.");
    int v12 = -6663;
    HIBYTE(v13[2]) = 20;
    strcpy((char *)v13, "kCVReturnUnsupported");
    int v14 = -6670;
    uint64_t v15 = operator new(0x58uLL);
    long long v16 = xmmword_21B9A7F60;
    strcpy((char *)v15, "kCVReturnInvalidDisplay: A CVDisplayLink cannot be created for the given DisplayRef.");
    int v17 = -6671;
    long long v18 = operator new(0x58uLL);
    long long v19 = xmmword_21B9A7F70;
    strcpy((char *)v18, "kCVReturnDisplayLinkAlreadyRunning: The CVDisplayLink is already started and running.");
    int v20 = -6672;
    uint64_t v21 = operator new(0x48uLL);
    long long v22 = xmmword_21B9A7F80;
    strcpy((char *)v21, "kCVReturnDisplayLinkNotRunning: The CVDisplayLink has not been started.");
    int v23 = -6673;
    uint64_t v24 = operator new(0x48uLL);
    long long v25 = xmmword_21B9A7F90;
    strcpy((char *)v24, "kCVReturnDisplayLinkCallbacksNotSet: The output callback is not set.");
    sub_21B8A4CBC((uint64_t)&v26, -6680, "kCVReturnInvalidPixelFormat: The requested pixelformat is not supported for the CVBuffer type.");
    int v29 = -6681;
    uint64_t v30 = operator new(0x68uLL);
    long long v31 = xmmword_21B9A7FA0;
    strcpy((char *)v30, "kCVReturnInvalidSize: The requested size (most likely too big) is not supported for the CVBuffer type.");
    sub_21B8A4CBC((uint64_t)&v32, -6682, "kCVReturnInvalidPixelBufferAttributes: A CVBuffer cannot be created with the given attributes.");
    int v35 = -6683;
    uint64_t v36 = operator new(0xA0uLL);
    long long v37 = xmmword_21B9A7FB0;
    strcpy((char *)v36, "kCVReturnPixelBufferNotOpenGLCompatible: The Buffer cannot be used with OpenGL as either its size, pixelformat or attributes are not supported by OpenGL.");
    int v38 = -6684;
    uint64_t v39 = operator new(0x98uLL);
    long long v40 = xmmword_21B9A7FC0;
    strcpy((char *)v39, "kCVReturnPixelBufferNotMetalCompatible: The Buffer cannot be used with Metal as either its size, pixelformat or attributes are not supported by Metal.");
    int v41 = -6689;
    uint64_t v42 = operator new(0xB8uLL);
    long long v43 = xmmword_21B9A7FD0;
    strcpy((char *)v42, "kCVReturnWouldExceedAllocationThreshold: The allocation request failed because it would have exceeded a specified allocation threshold (see kCVPixelBufferPoolAllocationThresholdKey).");
    int v44 = -6690;
    BOOL v45 = operator new(0xA0uLL);
    long long v46 = xmmword_21B9A7FE0;
    strcpy((char *)v45, "kCVReturnPoolAllocationFailed: The allocation for the buffer pool failed. Most likely because of lack of resources. Check if your parameters are in range.");
    int v47 = -6691;
    uint64_t v48 = operator new(0x60uLL);
    long long v49 = xmmword_21B9A7FF0;
    strcpy((char *)v48, "kCVReturnInvalidPoolAttributes: A CVBufferPool cannot be created with the given attributes.");
    int v50 = -6692;
    std::string __p = operator new(0x88uLL);
    long long v52 = xmmword_21B9A8000;
    strcpy((char *)__p, "kCVReturnRetry: a scan hasn't completely traversed the CVBufferPool due to a concurrent operation. The client can retry the scan.");
    sub_21B8A4D74(&v0, 18);
    if (SHIBYTE(v52) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v46) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v48);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
LABEL_25:
    operator delete(v45);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v42);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v37) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v39);
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
LABEL_10:
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_29;
    }
LABEL_28:
    operator delete(v36);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v33);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_12:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v30);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v27);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v24);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v21);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v18);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v13[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
LABEL_35:
    operator delete(v15);
    if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_37;
    }
LABEL_36:
    operator delete(v13[0]);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_38;
    }
LABEL_37:
    operator delete(v10);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v5) & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_39;
    }
LABEL_38:
    operator delete(v7);
    if ((SHIBYTE(v5) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v2) & 0x80000000) == 0)
      {
LABEL_22:
        __cxa_atexit((void (*)(void *))sub_21B8A4F5C, &qword_267C5EB20, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EB18);
        return;
      }
LABEL_40:
      operator delete(v1);
      goto LABEL_22;
    }
LABEL_39:
    operator delete(v4);
    if ((SHIBYTE(v2) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
}

void sub_21B8A4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (SLOBYTE(STACK[0x247]) < 0)
  {
    operator delete((void *)STACK[0x230]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a65 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a67);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a60);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a53);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a46);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a32);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a16 & 0x80000000) == 0)
    {
LABEL_38:
      __cxa_guard_abort(&qword_267C5EB18);
      _Unwind_Resume(a1);
    }
LABEL_37:
    operator delete(a11);
    __cxa_guard_abort(&qword_267C5EB18);
    _Unwind_Resume(a1);
  }
LABEL_36:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

uint64_t sub_21B8A4CBC(uint64_t a1, int a2, char *__s)
{
  *(_DWORD *)a1 = a2;
  long long v5 = (void *)(a1 + 8);
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v5 = operator new(v8 + 1);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9 | 0x8000000000000000;
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 31) = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((unsigned char *)v5 + v7) = 0;
  return a1;
}

uint64_t *sub_21B8A4D74(uint64_t *result, uint64_t a2)
{
  qword_267C5EB30 = 0;
  qword_267C5EB28 = 0;
  qword_267C5EB20 = (uint64_t)&qword_267C5EB28;
  if (a2)
  {
    long long v2 = result;
    uint64_t v3 = 0;
    int v4 = &result[4 * a2];
    int v5 = *(_DWORD *)result;
LABEL_6:
    size_t v7 = &qword_267C5EB28;
LABEL_10:
    if (v3)
    {
      uint64_t v10 = v7 + 1;
      if (v7[1]) {
        goto LABEL_27;
      }
    }
    else
    {
LABEL_20:
      uint64_t v10 = &qword_267C5EB28;
      size_t v7 = &qword_267C5EB28;
    }
LABEL_21:
    unint64_t v13 = (char *)operator new(0x40uLL);
    *((_DWORD *)v13 + 8) = v5;
    int v14 = v13 + 40;
    if (*((char *)v2 + 31) < 0)
    {
      sub_21B846188(v14, (void *)v2[1], v2[2]);
    }
    else
    {
      long long v15 = *(_OWORD *)(v2 + 1);
      *((void *)v13 + 7) = v2[3];
      *(_OWORD *)int v14 = v15;
    }
    *(void *)unint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v7;
    *uint64_t v10 = (uint64_t)v13;
    if (*(void *)qword_267C5EB20)
    {
      qword_267C5EB20 = *(void *)qword_267C5EB20;
      unint64_t v13 = (char *)*v10;
    }
    uint64_t result = sub_21B8A4F88((uint64_t *)qword_267C5EB28, (uint64_t *)v13);
    ++qword_267C5EB30;
LABEL_27:
    while (1)
    {
      v2 += 4;
      if (v2 == v4) {
        break;
      }
      uint64_t v3 = qword_267C5EB28;
      int v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_267C5EB20 == &qword_267C5EB28) {
        goto LABEL_6;
      }
      uint64_t v6 = qword_267C5EB28;
      if (qword_267C5EB28)
      {
        do
        {
          size_t v7 = (uint64_t *)v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_267C5EB28;
        do
        {
          size_t v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5) {
        goto LABEL_10;
      }
      if (!qword_267C5EB28) {
        goto LABEL_20;
      }
      uint64_t v11 = qword_267C5EB28;
      while (1)
      {
        while (1)
        {
          size_t v7 = (uint64_t *)v11;
          int v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5) {
            break;
          }
          uint64_t v11 = *v7;
          uint64_t v10 = v7;
          if (!*v7) {
            goto LABEL_21;
          }
        }
        if (v12 >= v5) {
          break;
        }
        uint64_t v11 = v7[1];
        if (!v11)
        {
          uint64_t v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_21B8A4F24(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_21B8A513C((char *)qword_267C5EB28);
  _Unwind_Resume(a1);
}

void sub_21B8A4F48(_Unwind_Exception *a1)
{
  sub_21B8A513C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A4F5C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21B8A4F88(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        BOOL v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *BOOL v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      CFTypeRef v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *int v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    int v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  unint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  uint64_t v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *unint64_t v13 = (uint64_t)v3;
  CFTypeRef v3[2] = (uint64_t)v13;
  return result;
}

void sub_21B8A513C(char *a1)
{
  if (a1)
  {
    sub_21B8A513C(*(void *)a1);
    sub_21B8A513C(*((void *)a1 + 1));
    if (a1[63] < 0)
    {
      operator delete(*((void **)a1 + 5));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

uint64_t sub_21B8A51B8(int a1)
{
  if (a1 <= 1278226533)
  {
    if (a1 > 875704421)
    {
      if (a1 <= 875836533)
      {
        if (a1 == 875704422 || a1 == 875704438) {
          return 0;
        }
        int v1 = 875836518;
      }
      else
      {
        if (a1 <= 1111970368)
        {
          if (a1 != 875836534)
          {
            int v1 = 1094862674;
            goto LABEL_38;
          }
          return 0;
        }
        if (a1 == 1111970369) {
          return 0;
        }
        int v1 = 1278226488;
      }
LABEL_38:
      if (a1 == v1) {
        return 0;
      }
LABEL_44:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 303, (uint64_t)&unk_21B997215, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24 || a1 == 32) {
        return 0;
      }
      int v1 = 842285639;
      goto LABEL_38;
    }
    if (a1 == 843264056) {
      return 0;
    }
    if (a1 != 843264102)
    {
      int v4 = 843264104;
      goto LABEL_42;
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032) {
          return 2;
        }
        int v4 = 1751411059;
        goto LABEL_42;
      }
      if (a1 != 1717855600 && a1 != 1717856627) {
        goto LABEL_44;
      }
      return 3;
    }
    if (a1 == 1647392359 || a1 == 1647589490) {
      return 1;
    }
    int v2 = 1647719521;
LABEL_27:
    if (a1 != v2) {
      goto LABEL_44;
    }
    return 1;
  }
  if (a1 <= 1380401728)
  {
    if (a1 == 1278226534) {
      return 3;
    }
    if (a1 == 1278226536) {
      return 2;
    }
    int v2 = 1278226742;
    goto LABEL_27;
  }
  if (a1 == 1380401729) {
    return 0;
  }
  if (a1 == 1380410945) {
    return 3;
  }
  int v4 = 1380411457;
LABEL_42:
  if (a1 != v4) {
    goto LABEL_44;
  }
  return 2;
}

void sub_21B8A5438(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A5470(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_21B8A5494(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8A5508(CVPixelBufferRef ****a1)
{
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(****a1);
  sub_21B8A1EA4(&v2, IOSurface);
}

void sub_21B8A56D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  operator delete(v15);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_21B8A57A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB999D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8A57C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB999D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A5818(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_21B8A58B8(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A58F0()
{
}

void sub_21B8A5ADC(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_21B8A5B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8A5B44(uint64_t *a1, uint64_t a2)
{
  unint64_t v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  int v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = v4;
  *(void *)long long v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  int v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  BOOL v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    int v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99978[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21B84C93C((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8A5D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21B8A5D44(_DWORD ***a1)
{
  return sub_21B8A5D60(**a1, (char *)(*a1)[1]);
}

void sub_21B8A5D50(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B8A5D60(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB99978[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    uint64_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B8A5E54(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  uint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99978[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8A600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B8A6050(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    uint64_t result = sub_21B8A614C((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  uint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B8A6144(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B8A614C(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v21 = v8;
  long long v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      char v13 = (void **)*a1;
      uint64_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  char v13 = (void **)*a1;
  uint64_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  uint64_t v14 = (void **)*a1;
  long long v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B8A634C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21B8A6360(void *a1, unsigned int *a2)
{
  int v10 = 0;
  sub_21B89F358((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_21B84C734();
  }
  char v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26CB999A8[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26CB99978[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t result = sub_21B863A18(a1, (uint64_t)v3, v4);
  unint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_21B8A644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8A6468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8A647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B8A6490(_DWORD ***a1)
{
  return sub_21B8A64AC(**a1, (char *)(*a1)[1]);
}

void sub_21B8A649C(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B8A64AC(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB99978[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    size_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B8A65A0(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  unint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v13 = v3;
  *(void *)uint64_t v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB99978[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8A6758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B8A679C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    uint64_t result = sub_21B8A6898((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  uint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B8A6890(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B8A6898(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v21 = v8;
  long long v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      char v13 = (void **)*a1;
      uint64_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  char v13 = (void **)*a1;
  uint64_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  uint64_t v14 = (void **)*a1;
  long long v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B8A6A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8A6AB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8A6AE8(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_21B8A6B0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8A6B80(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) + 1;
  *(void *)(a1 + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        size_t v5 = v2;
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v6 = 1;
    }
    else
    {
      if (v4 != 2 || *(void *)(a1 + 32)) {
        goto LABEL_5;
      }
      CVPixelBufferLockFlags v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    CVPixelBufferLockFlags v7 = 0;
    int v8 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    CVPixelBufferLockFlags v7 = 1;
    int v8 = 1;
  }
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
  *(_DWORD *)(a1 + 16) = v8;
  size_t v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_21B8A6C6C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6C80(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6C94(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) + 1;
  *(void *)(a1 + 32) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      CVPixelBufferLockFlags v7 = 1;
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v4 != 2 || v3 != 0) {
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v7 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    CVPixelBufferLockFlags v8 = 0;
    int v9 = 2;
    goto LABEL_19;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    CVPixelBufferLockFlags v6 = v2;
    goto LABEL_9;
  }
  CVPixelBufferLockFlags v8 = 1;
  int v9 = 1;
LABEL_19:
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v8);
  *(_DWORD *)(a1 + 16) = v9;
  CVPixelBufferLockFlags v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_21B8A6D7C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6D90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6DA4(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) - 1;
  *(void *)(a1 + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        size_t v5 = v2;
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v6 = 1;
    }
    else
    {
      if (v4 != 2 || *(void *)(a1 + 32)) {
        goto LABEL_5;
      }
      CVPixelBufferLockFlags v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    CVPixelBufferLockFlags v7 = 0;
    int v8 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    CVPixelBufferLockFlags v7 = 1;
    int v8 = 1;
  }
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
  *(_DWORD *)(a1 + 16) = v8;
  size_t v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_21B8A6E90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6EA4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6EB8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) - 1;
  *(void *)(a1 + 32) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      CVPixelBufferLockFlags v7 = 1;
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v4 != 2 || v3 != 0) {
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v7 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    CVPixelBufferLockFlags v8 = 0;
    int v9 = 2;
    goto LABEL_19;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    CVPixelBufferLockFlags v6 = v2;
    goto LABEL_9;
  }
  CVPixelBufferLockFlags v8 = 1;
  int v9 = 1;
LABEL_19:
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v8);
  *(_DWORD *)(a1 + 16) = v9;
  CVPixelBufferLockFlags v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_21B8A6FA0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6FB4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21B8A6FC8(uint64_t *a1, uint64_t a2)
{
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    size_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_37;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  CVPixelBufferLockFlags v7 = *(std::__shared_weak_count **)(a2 + 16);
  v31[0] = &unk_26CBA1808;
  v31[1] = v8;
  uint64_t v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v31);
  v31[0] = &unk_26CBA1808;
  int v9 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    size_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v29 = *(void *)(a2 + 8);
    uint64_t v30 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    char v28 = &unk_26CBA1808;
    goto LABEL_16;
  }
  size_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = *(void *)(a2 + 8);
  uint64_t v30 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  char v28 = &unk_26CBA1808;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
  long long v25 = &unk_26CBA1808;
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_21B973434((uint64_t)&v25, 0);
  v33[0] = &unk_26CBA1808;
  v33[1] = v26;
  char v34 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_21B974BF8((uint64_t)v33);
  unsigned int v15 = sub_21B974EC4((uint64_t)v33);
  unsigned int v16 = sub_21B975190((uint64_t)v33);
  unsigned int v17 = sub_21B97545C((uint64_t)v33);
  v33[0] = &unk_26CBA1808;
  long long v18 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  long long v25 = &unk_26CBA1808;
  long long v22 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *a1 = v13;
  a1[1] = v24;
  a1[2] = v21;
  if (v17 * HIDWORD(v24) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_37:
    abort();
  }
}

void sub_21B8A73AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8A73C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A73D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_21B8A73F0(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = &unk_26CB99B58;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(a2, 1278226488);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  size_t v5 = (_OWORD *)(a1 + 48);
  if (*a2 && a2[1])
  {
    uint64_t v12 = &unk_26CBA1808;
    long long v13 = 0uLL;
    sub_21B8A6FC8(&v10, (uint64_t)&v12);
    long long v6 = v11;
    uint64_t v12 = &unk_26CBA1808;
    CVPixelBufferLockFlags v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v9 = v6;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      long long v6 = v9;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
  }
  *size_t v5 = v6;
  return a1;
}

void sub_21B8A7664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A76AC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_21B8A7710(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  char v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8A77B4(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    size_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          unsigned int v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          unsigned int v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A6FC8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          long long v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          unsigned int v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8A7A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8A7A34(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    size_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v33);
  v33[0] = &unk_26CBA1808;
  long long v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_16;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_21B973434((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26CBA1808;
  *((void *)&v35 + 1) = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_21B974BF8((uint64_t)&v35);
  unsigned int v15 = sub_21B974EC4((uint64_t)&v35);
  unsigned int v16 = sub_21B975190((uint64_t)&v35);
  unsigned int v17 = sub_21B97545C((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26CBA1808;
  long long v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26CBA1808;
  long long v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 2;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8A7E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A7EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A7EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A7EDC(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB99BE8;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 843264056);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unsigned int v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8A7A34((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unsigned int v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8A818C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8A81DC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8A8280(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          uint64_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A7A34(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8A8504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8A8520(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v33);
  v33[0] = &unk_26CBA1808;
  long long v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_16;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_21B973434((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26CBA1808;
  *((void *)&v35 + 1) = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_21B974BF8((uint64_t)&v35);
  unsigned int v15 = sub_21B974EC4((uint64_t)&v35);
  unsigned int v16 = sub_21B975190((uint64_t)&v35);
  unsigned int v17 = sub_21B97545C((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26CBA1808;
  long long v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 3;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8A8984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A8998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A89AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A89C8(uint64_t a1, int a2, long long *a3)
{
  *(void *)a1 = &unk_26CB99C78;
  *(_DWORD *)(a1 + 8) = 0;
  BOOL v4 = (_DWORD *)a3 + 6;
  if (*((_DWORD *)a3 + 6)) {
    BOOL v5 = *((_DWORD *)a3 + 7) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (a2 == 21) {
      int v7 = 24;
    }
    else {
      int v7 = 0;
    }
    if (a2 == 17) {
      int v8 = 71;
    }
    else {
      int v8 = v7;
    }
    if (a2 == 17) {
      int v9 = 842285568;
    }
    else {
      int v9 = 0;
    }
    int v10 = v9 | v8;
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v4, v10);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v6 = a1 + 48;
  if (*((_DWORD *)a3 + 6) && *((_DWORD *)a3 + 7))
  {
    unint64_t v20 = &unk_26CBA1808;
    long long v21 = 0uLL;
    sub_21B8A8520((uint64_t)&v16, (uint64_t)&v20);
    long long v11 = v18;
    *(_OWORD *)uint64_t v6 = v17;
    *(_OWORD *)(v6 + 16) = v11;
    *(void *)(v6 + 32) = v19;
    unint64_t v20 = &unk_26CBA1808;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (*((void *)&v21 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    long long v13 = *a3;
    long long v14 = a3[1];
    *(void *)(a1 + 80) = *((void *)a3 + 4);
    *(_OWORD *)uint64_t v6 = v13;
    *(_OWORD *)(a1 + 64) = v14;
  }
  return a1;
}

void sub_21B8A8C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8A8CC4(uint64_t a1, unsigned char *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  BOOL v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 == 2)
  {
    sub_21B973698(v25, v7);
    goto LABEL_12;
  }
  if (v8 > 1) {
LABEL_29:
  }
    sub_21B84C734();
  sub_21B973554(v25, v7);
LABEL_12:
  sub_21B8A9768((uint64_t)&v18, a1);
  v26[0] = &v18;
  v26[1] = a2;
  if (v22 == 1)
  {
    sub_21B8931E8(v26);
  }
  else if (v19 && v20 && v21)
  {
    int v9 = v20 - 1;
    uint64_t v10 = v23;
    long long v11 = v18;
    int v12 = v21 - 1;
    if (v21 != 1)
    {
      uint64_t v13 = v24;
      if (v20 == 1)
      {
        do
        {
          *long long v11 = *a2;
          v11[1] = *a2;
          unsigned char v11[2] = *a2;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
      else
      {
        int v14 = 0;
        unsigned int v15 = v18 + 2;
        do
        {
          uint64_t v16 = v15;
          int v17 = v9;
          do
          {
            *(v16 - 2) = *a2;
            *(v16 - 1) = *a2;
            *uint64_t v16 = *a2;
            v16 += v10;
            --v17;
          }
          while (v17);
          *(v16 - 2) = *a2;
          *(v16 - 1) = *a2;
          *uint64_t v16 = *a2;
          v11 += v13;
          ++v14;
          v15 += v13;
        }
        while (v14 != v12);
      }
    }
    for (; v9; --v9)
    {
      *long long v11 = *a2;
      v11[1] = *a2;
      unsigned char v11[2] = *a2;
      v11 += v10;
    }
    *long long v11 = *a2;
    v11[1] = *a2;
    unsigned char v11[2] = *a2;
  }
  sub_21B9738D8(v25);
}

void sub_21B8A8EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9738D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A8EF0(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_20;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  BOOL v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 != 2)
  {
    if (v8 <= 1)
    {
      sub_21B973554(v11, v7);
      goto LABEL_12;
    }
LABEL_20:
    sub_21B84C734();
  }
  sub_21B973698(v11, v7);
LABEL_12:
  sub_21B8A9768((uint64_t)v9, a1);
  v12[0] = (size_t)a2;
  v12[1] = (size_t)v9;
  if (a2[5] == 1 && v10 == 1)
  {
    sub_21B8934C4(v12);
  }
  else
  {
    char v13 = 0;
    if (a2[2] && a2[3])
    {
      if (a2[4])
      {
        int v14 = &v13;
        sub_21B893AE4((uint64_t)&v14, (uint64_t)a2, (uint64_t)v9);
      }
    }
  }
  sub_21B9738D8(v11);
}

void sub_21B8A904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9738D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A9060(uint64_t a1, uint64_t a2)
{
  v37[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB99C78;
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      BOOL v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v9 = *(void **)(a2 + 8);
  int v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    long long v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26CBA1808;
  v35[1] = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v35);
  v35[0] = &unk_26CBA1808;
  char v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = v29;
    unint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_27;
  }
  int v14 = v29;
  unint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26CBA1808;
  v30[1] = v28;
  uint64_t v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_21B974BF8((uint64_t)v30);
  unsigned int v16 = sub_21B974EC4((uint64_t)v30);
  unsigned int v17 = sub_21B975190((uint64_t)v30);
  unsigned int v18 = sub_21B97545C((uint64_t)v30);
  v30[0] = &unk_26CBA1808;
  int v19 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v17 | ((unint64_t)v18 << 32);
  unint64_t v21 = v15 | ((unint64_t)v16 << 32);
  LODWORD(v37[0]) = 3;
  HIDWORD(v37[0]) = v21;
  *(void *)(a1 + 48) = v37[0];
  *(_DWORD *)(a1 + 56) = v16;
  LODWORD(v37[0]) = 1;
  *(void *)((char *)v37 + 4) = v20;
  *(void *)(a1 + 60) = v37[0];
  *(_DWORD *)(a1 + 68) = v18;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_35;
    }
LABEL_43:
    uint64_t v26 = 0;
    goto LABEL_44;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_35:
  unsigned int v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unsigned int v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_38;
      }
LABEL_50:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
  }
  unsigned int v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_50;
  }
LABEL_38:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_51:
    if (!v26) {
      return a1;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_52:
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  return a1;
}

void sub_21B8A965C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  sub_21B8A76AC(v2);
  _Unwind_Resume(a1);
}

void sub_21B8A96C4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8A9768(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v14 = v7;
          unsigned int v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            uint64_t v8 = v15;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          uint64_t v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A8520(a1, (uint64_t)v11);
          v11[0] = &unk_26CBA1808;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8A9978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8A9994(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v33);
  v33[0] = &unk_26CBA1808;
  uint64_t v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_16;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_21B973434((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26CBA1808;
  *((void *)&v35 + 1) = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_21B974BF8((uint64_t)&v35);
  unsigned int v15 = sub_21B974EC4((uint64_t)&v35);
  unsigned int v16 = sub_21B975190((uint64_t)&v35);
  unsigned int v17 = sub_21B97545C((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26CBA1808;
  unsigned int v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 4;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8A9DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8A9E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8A9E3C(uint64_t a1, int a2, long long *a3)
{
  *(void *)a1 = &unk_26CB99D08;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v4 = (_DWORD *)a3 + 6;
  if (*((_DWORD *)a3 + 6)) {
    BOOL v5 = *((_DWORD *)a3 + 7) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 25) > 0xC) {
      int v7 = 0;
    }
    else {
      int v7 = dword_21B9AD4AC[a2 - 25] | dword_21B9AD478[a2 - 25];
    }
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v4, v7);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v6 = a1 + 48;
  if (*((_DWORD *)a3 + 6) && *((_DWORD *)a3 + 7))
  {
    unsigned int v17 = &unk_26CBA1808;
    long long v18 = 0uLL;
    sub_21B8A9994((uint64_t)&v13, (uint64_t)&v17);
    long long v8 = v15;
    *(_OWORD *)uint64_t v6 = v14;
    *(_OWORD *)(v6 + 16) = v8;
    *(void *)(v6 + 32) = v16;
    unsigned int v17 = &unk_26CBA1808;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    long long v10 = *a3;
    long long v11 = a3[1];
    *(void *)(a1 + 80) = *((void *)a3 + 4);
    *(_OWORD *)uint64_t v6 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  return a1;
}

void sub_21B8AA0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AA140(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_19;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  BOOL v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 == 2)
  {
    sub_21B973698(v16, v7);
    goto LABEL_12;
  }
  if (v8 > 1) {
LABEL_19:
  }
    sub_21B84C734();
  sub_21B973554(v16, v7);
LABEL_12:
  sub_21B8AAB44((uint64_t)&v9, a1);
  v17[0] = &v9;
  v17[1] = a2;
  if (v13 == 1)
  {
    sub_21B8931E8(v17);
  }
  else
  {
    uint64_t v18 = a2;
    if (v10 && v11)
    {
      if (v12)
      {
        uint64_t v19 = &v18;
        v20[0] = 0;
        v20[1] = v10 - 1;
        v20[2] = v13;
        void v20[3] = v11 - 1;
        v20[4] = v14;
        v20[5] = v12 - 1;
        v20[6] = v15;
        v21[0] = 0;
        v21[1] = 0;
        sub_21B893D30(v20, (uint64_t)v21, (unsigned char ***)&v19, v9);
      }
    }
  }
  sub_21B9738D8(v16);
}

void sub_21B8AA2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9738D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AA2CC(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_20;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  BOOL v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 != 2)
  {
    if (v8 <= 1)
    {
      sub_21B973554(v11, v7);
      goto LABEL_12;
    }
LABEL_20:
    sub_21B84C734();
  }
  sub_21B973698(v11, v7);
LABEL_12:
  sub_21B8AAB44((uint64_t)v9, a1);
  v12[0] = (size_t)a2;
  v12[1] = (size_t)v9;
  if (a2[5] == 1 && v10 == 1)
  {
    sub_21B8934C4(v12);
  }
  else
  {
    char v13 = 0;
    if (a2[2] && a2[3])
    {
      if (a2[4])
      {
        int v14 = &v13;
        sub_21B893EEC((uint64_t)&v14, (uint64_t)a2, (uint64_t)v9);
      }
    }
  }
  sub_21B9738D8(v11);
}

void sub_21B8AA428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9738D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8AA43C(uint64_t a1, uint64_t a2)
{
  v37[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      uint64_t v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  int v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    int v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26CBA1808;
  v35[1] = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8D6B20((uint64_t)v35);
  v35[0] = &unk_26CBA1808;
  char v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = v29;
    unint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_27;
  }
  int v14 = v29;
  unint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26CBA1808;
  v30[1] = v28;
  uint64_t v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_21B974BF8((uint64_t)v30);
  unsigned int v16 = sub_21B974EC4((uint64_t)v30);
  unsigned int v17 = sub_21B975190((uint64_t)v30);
  unsigned int v18 = sub_21B97545C((uint64_t)v30);
  v30[0] = &unk_26CBA1808;
  uint64_t v19 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v17 | ((unint64_t)v18 << 32);
  unint64_t v21 = v15 | ((unint64_t)v16 << 32);
  LODWORD(v37[0]) = 4;
  HIDWORD(v37[0]) = v21;
  *(void *)(a1 + 48) = v37[0];
  *(_DWORD *)(a1 + 56) = v16;
  LODWORD(v37[0]) = 1;
  *(void *)((char *)v37 + 4) = v20;
  *(void *)(a1 + 60) = v37[0];
  *(_DWORD *)(a1 + 68) = v18;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_35;
    }
LABEL_43:
    uint64_t v26 = 0;
    goto LABEL_44;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_35:
  BOOL v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unint64_t v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_38;
      }
LABEL_50:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
  }
  unint64_t v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_50;
  }
LABEL_38:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_51:
    if (!v26) {
      return a1;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_52:
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  return a1;
}

void sub_21B8AAA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  sub_21B8A76AC(v2);
  _Unwind_Resume(a1);
}

void sub_21B8AAAA0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AAB44(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          uint64_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8AADC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8AADE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_49;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v33);
  uint64_t v10 = &v36;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      uint64_t v10 = (std::__shared_weak_count **)((char *)v35 + 4 * v11);
    }
  }
  if ((char *)v10 - (char *)v35 == 16
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v33[0] = &unk_26CBA1808;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_28;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v27, 0);
  v35[0] = &unk_26CBA1808;
  v35[1] = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)v35);
  unsigned int v18 = sub_21B974EC4((uint64_t)v35);
  size_t v19 = sub_21B975190((uint64_t)v35);
  size_t v20 = sub_21B97545C((uint64_t)v35) << 31;
  v35[0] = &unk_26CBA1808;
  unint64_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26CBA1808;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_49:
    abort();
  }
}

void sub_21B8AB2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8AB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AB2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_21B8AB2EC(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = &unk_26CB99D98;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(a2, 1647392359);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v5 = (_OWORD *)(a1 + 48);
  if (*a2 && a2[1])
  {
    unint64_t v12 = &unk_26CBA1808;
    long long v13 = 0uLL;
    sub_21B8AADE4(&v10, (uint64_t)&v12);
    long long v6 = v11;
    unint64_t v12 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v9 = v6;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      long long v6 = v9;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
  }
  *uint64_t v5 = v6;
  return a1;
}

void sub_21B8AB560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AB5B0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AB654(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          unsigned int v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AADE4(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          long long v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8AB8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8AB8D4(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      uint64_t v10 = (char *)&v38[-2] + 4 * v11;
    }
  }
  if (v10 - (char *)&v37 == 16
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  unint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_28;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 3;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8ABE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8ABE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8ABE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8ABE5C(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB99E28;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 1647589490);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8AB8D4((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8AC10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AC15C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AC200(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v14 = v7;
          long long v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            long long v8 = v15;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          long long v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AB8D4(a1, (uint64_t)v11);
          v11[0] = &unk_26CBA1808;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8AC410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8AC42C(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      uint64_t v10 = (char *)&v38[-2] + 4 * v11;
    }
  }
  if (v10 - (char *)&v37 == 16
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  long long v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_28;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8AC970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AC984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AC998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8AC9B4(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB99EB8;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 1647719521);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    uint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8AC42C((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    uint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8ACC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8ACCB4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8ACD58(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          size_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AC42C(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8ACFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8ACFF8(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_51;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v33);
  uint64_t v10 = (char *)&v36 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)v35 + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)v35 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v33[0] = &unk_26CBA1808;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v27, 0);
  v35[0] = &unk_26CBA1808;
  v35[1] = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)v35);
  unsigned int v18 = sub_21B974EC4((uint64_t)v35);
  size_t v19 = sub_21B975190((uint64_t)v35);
  size_t v20 = sub_21B97545C((uint64_t)v35) << 31;
  v35[0] = &unk_26CBA1808;
  unint64_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26CBA1808;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_51:
    abort();
  }
}

void sub_21B8AD4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8AD4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AD4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_21B8AD518(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = &unk_26CB99F48;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(a2, 1278226536);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v5 = (_OWORD *)(a1 + 48);
  if (*a2 && a2[1])
  {
    unint64_t v12 = &unk_26CBA1808;
    long long v13 = 0uLL;
    sub_21B8ACFF8(&v10, (uint64_t)&v12);
    long long v6 = v11;
    unint64_t v12 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v9 = v6;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      long long v6 = v9;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
  }
  *uint64_t v5 = v6;
  return a1;
}

void sub_21B8AD78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AD7DC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AD880(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          unsigned int v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ACFF8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          long long v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8ADAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8ADB00(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  unint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 2;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8AE05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AE070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AE084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8AE0A0(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB99FD8;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 843264104);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8ADB00((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8AE350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AE3A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AE444(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          size_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ADB00(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8AE6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8AE6E4(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  unint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8AEC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AEC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AEC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8AEC84(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB9A068;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 1380411457);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8AE6E4((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8AEF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AEF84(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AF028(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          size_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AE6E4(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8AF2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8AF2C8(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_51;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26CBA1808;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v33);
  uint64_t v10 = (char *)&v36 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)v35 + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)v35 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v33[0] = &unk_26CBA1808;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v30 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26CBA1808;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26CBA1808;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v27, 0);
  v35[0] = &unk_26CBA1808;
  v35[1] = v28;
  uint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)v35);
  unsigned int v18 = sub_21B974EC4((uint64_t)v35);
  size_t v19 = sub_21B975190((uint64_t)v35);
  size_t v20 = sub_21B97545C((uint64_t)v35) << 30;
  v35[0] = &unk_26CBA1808;
  unint64_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26CBA1808;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_51:
    abort();
  }
}

void sub_21B8AF7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8AF7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8AF7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_21B8AF7E8(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = &unk_26CB9A0F8;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(a2, 1278226534);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26CBA1808;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v5 = (_OWORD *)(a1 + 48);
  if (*a2 && a2[1])
  {
    unint64_t v12 = &unk_26CBA1808;
    long long v13 = 0uLL;
    sub_21B8AF2C8(&v10, (uint64_t)&v12);
    long long v6 = v11;
    unint64_t v12 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v9 = v6;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      long long v6 = v9;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
  }
  *uint64_t v5 = v6;
  return a1;
}

void sub_21B8AFA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8AFAAC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8AFB50(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          unsigned int v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AF2C8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          long long v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8AFDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8AFDD0(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  unint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 30;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 2;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B032C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B0354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B0370(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB9A188;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 843264102);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8AFDD0((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8B0620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8B0670(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8B0714(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          size_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AFDD0(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B0998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8B09B4(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26CBA1808;
  v35[1] = v8;
  uint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_21B975728((uint64_t)v35);
  uint64_t v10 = (char *)v38 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v35[0] = &unk_26CBA1808;
  unint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26CBA1808;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26CBA1808;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26CBA1808;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_21B973434((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26CBA1808;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_21B974BF8((uint64_t)&v37);
  unsigned int v18 = sub_21B974EC4((uint64_t)&v37);
  size_t v19 = sub_21B975190((uint64_t)&v37);
  size_t v20 = sub_21B97545C((uint64_t)&v37) << 30;
  *(void *)&long long v37 = &unk_26CBA1808;
  unint64_t v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26CBA1808;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B0F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B0F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B0F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va1);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B0F54(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = &unk_26CB9A218;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (_DWORD *)a2 + 6;
  if (*((_DWORD *)a2 + 6)) {
    BOOL v4 = *((_DWORD *)a2 + 7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_21B973E10(v3, 1380410945);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = &unk_26CBA1808;
  *(_DWORD *)(result + 40) = 0;
  uint64_t v5 = result + 48;
  if (*((_DWORD *)a2 + 6) && *((_DWORD *)a2 + 7))
  {
    unint64_t v14 = &unk_26CBA1808;
    long long v15 = 0uLL;
    sub_21B8B09B4((uint64_t)&v10, (uint64_t)&v14);
    long long v6 = v12;
    *(_OWORD *)uint64_t v5 = v11;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v13;
    unint64_t v14 = &unk_26CBA1808;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(result + 80) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v8;
    *(_OWORD *)(result + 64) = v9;
  }
  return result;
}

void sub_21B8B1204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8B1254(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_21B84C734();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21B8B12F8(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  BOOL v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          size_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8B09B4(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B157C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B1598(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB9A2A8;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  LODWORD(v5) = *(_DWORD *)(a2 + 12);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  v15[0] = *(void *)a2;
  v15[1] = v4 | (v5 << 32);
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  uint64_t v6 = sub_21B8A73F0(a1, v15);
  long long v16 = v13;
  uint64_t v17 = v14;
  if (*(_DWORD *)(v6 + 40) > 2u) {
    goto LABEL_17;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    long long v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v19, v10);
LABEL_15:
        sub_21B8A77B4(v18, a1);
        v20[0] = (size_t)&v16;
        v20[1] = (size_t)v18;
        sub_21B892E98(v20);
        sub_21B9738D8(v19);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v19, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A2A8;
  return a1;
}

void sub_21B8B16FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B9738D8((void *)(v12 - 72));
  *(void *)uint64_t v11 = &unk_26CB99B58;
  uint64_t v14 = *(unsigned int *)(v11 + 40);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v14])(va, v11 + 16);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B1764(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99B58;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B17DC(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          unsigned int v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            long long v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          unint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A6FC8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B1A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8B1A5C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          unsigned int v18 = &unk_26CBA1808;
          uint64_t v19 = v7;
          long long v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            long long v8 = v20;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          unint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A6FC8(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          unsigned int v18 = &unk_26CBA1808;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B1CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B1CEC()
{
  return 1;
}

uint64_t (***sub_21B8B1CF4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B1D70(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B1A5C((uint64_t)v5, a1);
      sub_21B8B1A5C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40EE3858B8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B1E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B1E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B1E8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

size_t *sub_21B8B1EF0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9C9D8, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 1);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v11);
    sub_21B8B17DC(v23, a1);
    *(void *)&long long v21 = &v15;
    *((void *)&v21 + 1) = v23;
    return sub_21B892E98((size_t *)&v21);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v23, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v23, v7);
LABEL_8:
  sub_21B8B1A5C((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_21B8B1598((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  uint64_t result = sub_21B9732E4(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    uint64_t result = (size_t *)((uint64_t (*)(size_t *, uint64_t))off_26CB9B078[v14])(result, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  uint64_t result = (size_t *)((uint64_t (*)(size_t *))off_26CB9B0A8[v13])(result);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB99B58;
  if (v17 != -1) {
    return (size_t *)((uint64_t (*)(uint64_t *, void *))off_26CB9B078[v17])(v23, v16);
  }
  return result;
}

void sub_21B8B2114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B2178(uint64_t a1)
{
  sub_21B8B17DC(v2, a1);
  return v2[0];
}

void sub_21B8B21A4(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B17DC((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B8B2250(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B1A5C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B22FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB40, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB40))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EB48))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB50, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EB50))
    {
LABEL_13:
      if (byte_267C5EEB7 < 0)
      {
        sub_21B846188(&xmmword_267C5EE88, (void *)qword_267C5EEA0, unk_267C5EEA8);
      }
      else
      {
        xmmword_267C5EE88 = *(_OWORD *)&qword_267C5EEA0;
        unk_267C5EE98 = unk_267C5EEB0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EE88, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB48);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EB58))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray8u>]", &qword_267C5EEB8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EEB8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB58);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB60, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EB60))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EB68))
      {
        if (byte_267C5EED0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5EED0, *(unint64_t *)&byte_267C5EED0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5EED0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5EEE8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EEE8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EB68);
      }
      if (byte_267C5EEFF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5EEE8, *((unint64_t *)&xmmword_267C5EEE8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5EEE8;
        uint64_t v12 = unk_267C5EEF8;
      }
      sub_21B89E0F0(v11, (std::string *)&qword_267C5EEA0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EEA0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB50);
      goto LABEL_13;
    }
    if (byte_267C5EECF >= 0) {
      size_t v1 = byte_267C5EECF;
    }
    else {
      size_t v1 = unk_267C5EEC0;
    }
    if (byte_267C5EECF >= 0) {
      uint64_t v2 = &qword_267C5EEB8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5EEB8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5EED0[8] = v1;
      *(void *)&byte_267C5EED0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5EED0 = v8;
    }
    else
    {
      int v8 = byte_267C5EED0;
      byte_267C5EED0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5EED0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EB60);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5EE9F < 0)
  {
    sub_21B846188(&xmmword_267C5EE70, (void *)xmmword_267C5EE88, *((unint64_t *)&xmmword_267C5EE88 + 1));
  }
  else
  {
    xmmword_267C5EE70 = xmmword_267C5EE88;
    unk_267C5EE80 = unk_267C5EE98;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EE70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB40);
LABEL_2:
  if (byte_267C5EE87 >= 0) {
    return &xmmword_267C5EE70;
  }
  else {
    return (long long *)xmmword_267C5EE70;
  }
}

void sub_21B8B2784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EB50);
  __cxa_guard_abort(&qword_267C5EB48);
  __cxa_guard_abort(&qword_267C5EB40);
  _Unwind_Resume(a1);
}

void sub_21B8B2820(_Unwind_Exception *a1)
{
}

void sub_21B8B2838()
{
}

void sub_21B8B2880(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B2A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B2A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B2A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B2AB0()
{
  return 65792;
}

void *sub_21B8B2ABC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B2B20(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB9A338;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  LODWORD(v5) = *(_DWORD *)(a2 + 12);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  v15[0] = *(void *)a2;
  v15[1] = v4 | (v5 << 32);
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  uint64_t v6 = sub_21B8AB2EC(a1, v15);
  long long v16 = v13;
  uint64_t v17 = v14;
  if (*(_DWORD *)(v6 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v19, v10);
LABEL_15:
        sub_21B8AB654(v18, a1);
        sub_21B8943FC((uint64_t *)&v16, (uint64_t)v18);
        sub_21B9738D8(v19);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v19, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A338;
  return a1;
}

void sub_21B8B2C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B9738D8((void *)(v12 - 56));
  *(void *)uint64_t v11 = &unk_26CB99D98;
  uint64_t v14 = *(unsigned int *)(v11 + 40);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v14])(va, v11 + 16);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B2CE4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D98;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B2D5C(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            int v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AADE4(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B2FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8B2FDC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26CBA1808;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            int v8 = v20;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AADE4(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26CBA1808;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B3250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B326C()
{
  return 2;
}

uint64_t (***sub_21B8B3274())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B32F0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B2FDC((uint64_t)v5, a1);
      sub_21B8B2FDC((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B33B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40EE3858B8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B33E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B340C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

uint64_t *sub_21B8B3470(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9ADE8, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 2);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v11);
    sub_21B8B2D5C(v23, a1);
    return sub_21B8943FC((uint64_t *)&v15, (uint64_t)v23);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v23, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v23, v7);
LABEL_8:
  sub_21B8B2FDC((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_21B8B2B20((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  uint64_t result = sub_21B9732E4(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_26CB9B078[v14])(result, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *))off_26CB9B0A8[v13])(result);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB99D98;
  if (v17 != -1) {
    return (uint64_t *)((uint64_t (*)(uint64_t *, void *))off_26CB9B078[v17])(v23, v16);
  }
  return result;
}

void sub_21B8B368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B36F0(uint64_t a1)
{
  sub_21B8B2D5C(v2, a1);
  return v2[0];
}

void sub_21B8B371C(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B2D5C((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B8B37C8(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B2FDC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B3874()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB70))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EB78))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB80, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EB80))
    {
LABEL_13:
      if (byte_267C5EF47 < 0)
      {
        sub_21B846188(&xmmword_267C5EF18, (void *)qword_267C5EF30, unk_267C5EF38);
      }
      else
      {
        xmmword_267C5EF18 = *(_OWORD *)&qword_267C5EF30;
        unk_267C5EF28 = unk_267C5EF40;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EF18, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB78);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB88, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EB88))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16u>]", &qword_267C5EF48);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EF48, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB88);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB90, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EB90))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB98, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EB98))
      {
        if (byte_267C5EF60[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5EF60, *(unint64_t *)&byte_267C5EF60[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5EF60;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5EF78);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EF78, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EB98);
      }
      if (byte_267C5EF8F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5EF78, *((unint64_t *)&xmmword_267C5EF78 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5EF78;
        uint64_t v12 = unk_267C5EF88;
      }
      sub_21B89E41C(v11, (std::string *)&qword_267C5EF30);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EF30, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EB80);
      goto LABEL_13;
    }
    if (byte_267C5EF5F >= 0) {
      size_t v1 = byte_267C5EF5F;
    }
    else {
      size_t v1 = unk_267C5EF50;
    }
    if (byte_267C5EF5F >= 0) {
      uint64_t v2 = &qword_267C5EF48;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5EF48;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5EF60[8] = v1;
      *(void *)&byte_267C5EF60[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5EF60 = v8;
    }
    else
    {
      int v8 = byte_267C5EF60;
      byte_267C5EF60[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5EF60, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EB90);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5EF2F < 0)
  {
    sub_21B846188(&xmmword_267C5EF00, (void *)xmmword_267C5EF18, *((unint64_t *)&xmmword_267C5EF18 + 1));
  }
  else
  {
    xmmword_267C5EF00 = xmmword_267C5EF18;
    unk_267C5EF10 = unk_267C5EF28;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EF00, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB70);
LABEL_2:
  if (byte_267C5EF17 >= 0) {
    return &xmmword_267C5EF00;
  }
  else {
    return (long long *)xmmword_267C5EF00;
  }
}

void sub_21B8B3CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EB80);
  __cxa_guard_abort(&qword_267C5EB78);
  __cxa_guard_abort(&qword_267C5EB70);
  _Unwind_Resume(a1);
}

void sub_21B8B3D98(_Unwind_Exception *a1)
{
}

void sub_21B8B3DB0()
{
}

void sub_21B8B3DF8(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B3F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B3FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B4014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B4028()
{
  return 65792;
}

void *sub_21B8B4034@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B4098(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB9A3C8;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  LODWORD(v5) = *(_DWORD *)(a2 + 12);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  v15[0] = *(void *)a2;
  v15[1] = v4 | (v5 << 32);
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  uint64_t v6 = sub_21B8AD518(a1, v15);
  long long v16 = v13;
  uint64_t v17 = v14;
  if (*(_DWORD *)(v6 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v19, v10);
LABEL_15:
        sub_21B8AD880(v18, a1);
        v20[0] = (uint64_t)&v16;
        v20[1] = (uint64_t)v18;
        sub_21B895CE4(v20);
        sub_21B9738D8(v19);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v19, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A3C8;
  return a1;
}

void sub_21B8B41FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B9738D8((void *)(v12 - 72));
  *(void *)uint64_t v11 = &unk_26CB99F48;
  uint64_t v14 = *(unsigned int *)(v11 + 40);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v14])(va, v11 + 16);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B4264(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99F48;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B42DC(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            int v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ACFF8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B4540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8B455C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26CBA1808;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            int v8 = v20;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ACFF8(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26CBA1808;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B47D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B47EC()
{
  return 3;
}

uint64_t (***sub_21B8B47F4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B4870(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B455C((uint64_t)v5, a1);
      sub_21B8B455C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B4938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40EE3858B8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B4964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B4978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B498C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8B49F0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE00, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 3);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v11);
    sub_21B8B42DC(v23, a1);
    *(void *)&long long v21 = &v15;
    *((void *)&v21 + 1) = v23;
    sub_21B895CE4((uint64_t *)&v21);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v23, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v23, v7);
LABEL_8:
  sub_21B8B455C((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_21B8B4098((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  unint64_t v12 = sub_21B9732E4(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    ((void (*)(void *, uint64_t))off_26CB9B078[v14])(v12, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  ((void (*)(void *))off_26CB9B0A8[v13])(v12);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB99F48;
  if (v17 != -1) {
    ((void (*)(uint64_t *, void *))off_26CB9B078[v17])(v23, v16);
  }
}

void sub_21B8B4C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B4C78(uint64_t a1)
{
  sub_21B8B42DC(v2, a1);
  return v2[0];
}

void sub_21B8B4CA4(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B42DC((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B8B4D50(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B455C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B4DFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBA0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EBA0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EBA8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBB0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EBB0))
    {
LABEL_13:
      if (byte_267C5EFD7 < 0)
      {
        sub_21B846188(&xmmword_267C5EFA8, (void *)qword_267C5EFC0, unk_267C5EFC8);
      }
      else
      {
        xmmword_267C5EFA8 = *(_OWORD *)&qword_267C5EFC0;
        unk_267C5EFB8 = unk_267C5EFD0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EFA8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBA8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBB8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EBB8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16f>]", &qword_267C5EFD8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EFD8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBB8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBC0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EBC0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBC8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EBC8))
      {
        if (byte_267C5EFF0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5EFF0, *(unint64_t *)&byte_267C5EFF0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5EFF0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F008);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F008, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EBC8);
      }
      if (byte_267C5F01F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F008, *((unint64_t *)&xmmword_267C5F008 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F008;
        uint64_t v12 = unk_267C5F018;
      }
      sub_21B89E548(v11, (std::string *)&qword_267C5EFC0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5EFC0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBB0);
      goto LABEL_13;
    }
    if (byte_267C5EFEF >= 0) {
      size_t v1 = byte_267C5EFEF;
    }
    else {
      size_t v1 = unk_267C5EFE0;
    }
    if (byte_267C5EFEF >= 0) {
      uint64_t v2 = &qword_267C5EFD8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5EFD8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5EFF0[8] = v1;
      *(void *)&byte_267C5EFF0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5EFF0 = v8;
    }
    else
    {
      int v8 = byte_267C5EFF0;
      byte_267C5EFF0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5EFF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EBC0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5EFBF < 0)
  {
    sub_21B846188(&xmmword_267C5EF90, (void *)xmmword_267C5EFA8, *((unint64_t *)&xmmword_267C5EFA8 + 1));
  }
  else
  {
    xmmword_267C5EF90 = xmmword_267C5EFA8;
    unk_267C5EFA0 = unk_267C5EFB8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5EF90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EBA0);
LABEL_2:
  if (byte_267C5EFA7 >= 0) {
    return &xmmword_267C5EF90;
  }
  else {
    return (long long *)xmmword_267C5EF90;
  }
}

void sub_21B8B5284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EBB0);
  __cxa_guard_abort(&qword_267C5EBA8);
  __cxa_guard_abort(&qword_267C5EBA0);
  _Unwind_Resume(a1);
}

void sub_21B8B5320(_Unwind_Exception *a1)
{
}

void sub_21B8B5338()
{
}

void sub_21B8B5380(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B5520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B5554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B5568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B55B0()
{
  return 65792;
}

void *sub_21B8B55BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B5620(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26CB9A458;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  LODWORD(v5) = *(_DWORD *)(a2 + 12);
  if (v5 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v5;
  }
  v15[0] = *(void *)a2;
  v15[1] = v4 | (v5 << 32);
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  uint64_t v6 = sub_21B8AF7E8(a1, v15);
  long long v16 = v13;
  uint64_t v17 = v14;
  if (*(_DWORD *)(v6 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v19, v10);
LABEL_15:
        sub_21B8AFB50(v18, a1);
        sub_21B897A38((uint64_t)&v16, (uint64_t)v18);
        sub_21B9738D8(v19);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v19, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A458;
  return a1;
}

void sub_21B8B577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B9738D8((void *)(v12 - 56));
  *(void *)uint64_t v11 = &unk_26CB9A0F8;
  uint64_t v14 = *(unsigned int *)(v11 + 40);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v14])(va, v11 + 16);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B57E4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A0F8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B585C(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v16 = &unk_26CBA1808;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            int v8 = v18;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AF2C8(a1, (uint64_t)v14);
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v16 = &unk_26CBA1808;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B5AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8B5ADC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26CBA1808;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            int v8 = v20;
          }
          v14[0] = &unk_26CBA1808;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AF2C8(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26CBA1808;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26CBA1808;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
}

void sub_21B8B5D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B5D6C()
{
  return 4;
}

uint64_t (***sub_21B8B5D74())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B5DF0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B5ADC((uint64_t)v5, a1);
      sub_21B8B5ADC((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B5EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x21D495F30](v8, 0x10A3C40EE3858B8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B5EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B5EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B5F0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8B5F70(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE18, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 4);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v11);
    sub_21B8B585C(v23, a1);
    sub_21B897A38((uint64_t)&v15, (uint64_t)v23);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v23, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v23, v7);
LABEL_8:
  sub_21B8B5ADC((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_21B8B5620((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  unint64_t v12 = sub_21B9732E4(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    ((void (*)(void *, uint64_t))off_26CB9B078[v14])(v12, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  ((void (*)(void *))off_26CB9B0A8[v13])(v12);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26CB9A0F8;
  if (v17 != -1) {
    ((void (*)(uint64_t *, void *))off_26CB9B078[v17])(v23, v16);
  }
}

void sub_21B8B618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B61F0(uint64_t a1)
{
  sub_21B8B585C(v2, a1);
  return v2[0];
}

void sub_21B8B621C(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B585C((uint64_t *)&v3, a1);
  operator new();
}

void sub_21B8B62C8(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B5ADC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B6374()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBD0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EBD0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EBD8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBE0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EBE0))
    {
LABEL_13:
      if (byte_267C5F067 < 0)
      {
        sub_21B846188(&xmmword_267C5F038, (void *)qword_267C5F050, unk_267C5F058);
      }
      else
      {
        xmmword_267C5F038 = *(_OWORD *)&qword_267C5F050;
        unk_267C5F048 = unk_267C5F060;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F038, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBD8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBE8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EBE8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray32f>]", &qword_267C5F068);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F068, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBE8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBF0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EBF0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EBF8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EBF8))
      {
        if (byte_267C5F080[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F080, *(unint64_t *)&byte_267C5F080[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F080;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F098);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F098, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EBF8);
      }
      if (byte_267C5F0AF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F098, *((unint64_t *)&xmmword_267C5F098 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F098;
        uint64_t v12 = unk_267C5F0A8;
      }
      sub_21B89E674(v11, (std::string *)&qword_267C5F050);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F050, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EBE0);
      goto LABEL_13;
    }
    if (byte_267C5F07F >= 0) {
      size_t v1 = byte_267C5F07F;
    }
    else {
      size_t v1 = unk_267C5F070;
    }
    if (byte_267C5F07F >= 0) {
      uint64_t v2 = &qword_267C5F068;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F068;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F080[8] = v1;
      *(void *)&byte_267C5F080[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F080 = v8;
    }
    else
    {
      int v8 = byte_267C5F080;
      byte_267C5F080[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F080, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EBF0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F04F < 0)
  {
    sub_21B846188(&xmmword_267C5F020, (void *)xmmword_267C5F038, *((unint64_t *)&xmmword_267C5F038 + 1));
  }
  else
  {
    xmmword_267C5F020 = xmmword_267C5F038;
    unk_267C5F030 = unk_267C5F048;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F020, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EBD0);
LABEL_2:
  if (byte_267C5F037 >= 0) {
    return &xmmword_267C5F020;
  }
  else {
    return (long long *)xmmword_267C5F020;
  }
}

void sub_21B8B67FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EBE0);
  __cxa_guard_abort(&qword_267C5EBD8);
  __cxa_guard_abort(&qword_267C5EBD0);
  _Unwind_Resume(a1);
}

void sub_21B8B6898(_Unwind_Exception *a1)
{
}

void sub_21B8B68B0()
{
}

void sub_21B8B68F8(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B6A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B6ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B6AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B6B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B6B28()
{
  return 65792;
}

void *sub_21B8B6B34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B6B98(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A4E8;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)BOOL v25 = 2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v25[4] = v6;
  uint64_t v16 = *(void *)v25;
  int v17 = HIDWORD(v6);
  *(_DWORD *)BOOL v25 = 1;
  *(void *)&v25[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v25;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v25[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8A7EDC(a1, (long long *)&v16);
  v22[0] = v13;
  v22[1] = v14;
  _OWORD v22[2] = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v23, v10);
LABEL_15:
        sub_21B8A8280((uint64_t)v25, a1);
        v24[0] = (size_t)v22;
        v24[1] = (size_t)v25;
        sub_21B8933A8(v24);
        sub_21B9738D8(v23);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v23, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A4E8;
  return a1;
}

void sub_21B8B6D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB99BE8;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8B6DD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8B6DE8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99BE8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B6E60(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A7A34(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B70E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8B7100(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A7A34((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)unint64_t v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)unint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B73A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B73C0()
{
  return 5;
}

uint64_t (***sub_21B8B73C8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B7444(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B7100((uint64_t)v5, a1);
      sub_21B8B7100((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B7514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B7540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B7554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B7568@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

size_t *sub_21B8B75CC(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE30, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v27, lpsrc, 5);
    uint64_t v9 = *(void *)&v27[0];
    long long v11 = *(_OWORD *)(*(void *)&v27[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v27[0] + 32);
    long long v20 = **(_OWORD **)&v27[0];
    long long v21 = v11;
    long long v22 = v10;
    *(void *)&v27[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_21B8B6E60((uint64_t)v27, a1);
    *(void *)&v26[0] = &v20;
    *((void *)&v26[0] + 1) = v27;
    return sub_21B8933A8((size_t *)v26);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v28, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v28, v7);
LABEL_8:
  sub_21B8B7100((uint64_t)v27, v6);
  v26[0] = v27[0];
  v26[1] = v27[1];
  void v26[2] = v27[2];
  sub_21B8B6B98((uint64_t)&v20, (uint64_t)v27 + 8, v26);
  uint64_t result = sub_21B9732E4(v28);
  uint64_t v17 = DWORD2(v22);
  *(_DWORD *)(a1 + 8) = DWORD2(v20);
  uint64_t v18 = *(unsigned int *)(a1 + 40);
  if (v18 == -1)
  {
    if (v17 == -1) {
      goto LABEL_13;
    }
  }
  else if (v17 == -1)
  {
    uint64_t result = (size_t *)((uint64_t (*)(_OWORD *, uint64_t))off_26CB9B078[v18])(v27, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v27[0] = a1 + 16;
  uint64_t result = (size_t *)((uint64_t (*)(_OWORD *))off_26CB9B0A8[v17])(v27);
LABEL_13:
  long long v19 = v24;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v25;
  *(void *)&long long v20 = &unk_26CB99BE8;
  if (DWORD2(v22) != -1) {
    return (size_t *)((uint64_t (*)(_OWORD *, long long *))off_26CB9B078[DWORD2(v22)])(v27, &v21);
  }
  return result;
}

void sub_21B8B7810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B7874(uint64_t a1)
{
  sub_21B8B6E60((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8B78A0(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B6E60((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8B794C(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B7100((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B79F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC00, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EC00))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EC08))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC10, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC10))
    {
LABEL_13:
      if (byte_267C5F0F7 < 0)
      {
        sub_21B846188(&xmmword_267C5F0C8, (void *)qword_267C5F0E0, unk_267C5F0E8);
      }
      else
      {
        xmmword_267C5F0C8 = *(_OWORD *)&qword_267C5F0E0;
        unk_267C5F0D8 = unk_267C5F0F0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F0C8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC08);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC18, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EC18))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two8u>]", &qword_267C5F0F8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F0F8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC18);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC20, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC20))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC28, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EC28))
      {
        if (byte_267C5F110[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F110, *(unint64_t *)&byte_267C5F110[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F110;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F128);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F128, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EC28);
      }
      if (byte_267C5F13F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F128, *((unint64_t *)&xmmword_267C5F128 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5F128;
        uint64_t v12 = unk_267C5F138;
      }
      sub_21B89E7A0(v11, (std::string *)&qword_267C5F0E0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F0E0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC10);
      goto LABEL_13;
    }
    if (byte_267C5F10F >= 0) {
      size_t v1 = byte_267C5F10F;
    }
    else {
      size_t v1 = unk_267C5F100;
    }
    if (byte_267C5F10F >= 0) {
      uint64_t v2 = &qword_267C5F0F8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F0F8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F110[8] = v1;
      *(void *)&byte_267C5F110[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F110 = v8;
    }
    else
    {
      int v8 = byte_267C5F110;
      byte_267C5F110[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F110, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EC20);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F0DF < 0)
  {
    sub_21B846188(&xmmword_267C5F0B0, (void *)xmmword_267C5F0C8, *((unint64_t *)&xmmword_267C5F0C8 + 1));
  }
  else
  {
    xmmword_267C5F0B0 = xmmword_267C5F0C8;
    unk_267C5F0C0 = unk_267C5F0D8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F0B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EC00);
LABEL_2:
  if (byte_267C5F0C7 >= 0) {
    return &xmmword_267C5F0B0;
  }
  else {
    return (long long *)xmmword_267C5F0B0;
  }
}

void sub_21B8B7E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EC10);
  __cxa_guard_abort(&qword_267C5EC08);
  __cxa_guard_abort(&qword_267C5EC00);
  _Unwind_Resume(a1);
}

void sub_21B8B7F1C(_Unwind_Exception *a1)
{
}

void sub_21B8B7F34()
{
}

void sub_21B8B7F7C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B8150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B8164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B8198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B81AC()
{
  return 65792;
}

void *sub_21B8B81B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B821C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A578;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)uint64_t v25 = 2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v25[4] = v6;
  uint64_t v16 = *(void *)v25;
  int v17 = HIDWORD(v6);
  *(_DWORD *)uint64_t v25 = 1;
  *(void *)&v25[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v25;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v25[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8AE0A0(a1, (long long *)&v16);
  v22[0] = v13;
  v22[1] = v14;
  _OWORD v22[2] = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v23, v10);
LABEL_15:
        sub_21B8AE444((uint64_t)v25, a1);
        v24[0] = (uint64_t)v22;
        v24[1] = (uint64_t)v25;
        sub_21B896778(v24);
        sub_21B9738D8(v23);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v23, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A578;
  return a1;
}

void sub_21B8B83EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB99FD8;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8B8454(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8B846C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99FD8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B84E4(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ADB00(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B8768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8B8784(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8ADB00((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B8A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8B8A44()
{
  return 7;
}

uint64_t (***sub_21B8B8A4C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8B8AC8(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B8784((uint64_t)v5, a1);
      sub_21B8B8784((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8B8B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B8BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8B8BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8B8BEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8B8C50(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE48, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 7);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_21B8B84E4((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_21B896778((uint64_t *)v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v27, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v27, v7);
LABEL_8:
  sub_21B8B8784((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  v25[2] = v26[2];
  sub_21B8B821C((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_21B9732E4(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB9B078[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB9B0A8[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26CB99FD8;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB9B078[DWORD2(v21)])(v26, &v20);
  }
}

void sub_21B8B8E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8B8EF8(uint64_t a1)
{
  sub_21B8B84E4((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8B8F24(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B84E4((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8B8FD0(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B8784((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8B907C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC30, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EC30))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EC38))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC40, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC40))
    {
LABEL_13:
      if (byte_267C5F187 < 0)
      {
        sub_21B846188(&xmmword_267C5F158, (void *)qword_267C5F170, unk_267C5F178);
      }
      else
      {
        xmmword_267C5F158 = *(_OWORD *)&qword_267C5F170;
        unk_267C5F168 = unk_267C5F180;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F158, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC38);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC48, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EC48))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two16f>]", &qword_267C5F188);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F188, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC48);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC50, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC50))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EC58))
      {
        if (byte_267C5F1A0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F1A0, *(unint64_t *)&byte_267C5F1A0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F1A0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F1B8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F1B8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EC58);
      }
      if (byte_267C5F1CF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F1B8, *((unint64_t *)&xmmword_267C5F1B8 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5F1B8;
        uint64_t v12 = unk_267C5F1C8;
      }
      sub_21B89E8CC(v11, (std::string *)&qword_267C5F170);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F170, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC40);
      goto LABEL_13;
    }
    if (byte_267C5F19F >= 0) {
      size_t v1 = byte_267C5F19F;
    }
    else {
      size_t v1 = unk_267C5F190;
    }
    if (byte_267C5F19F >= 0) {
      uint64_t v2 = &qword_267C5F188;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F188;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F1A0[8] = v1;
      *(void *)&byte_267C5F1A0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F1A0 = v8;
    }
    else
    {
      int v8 = byte_267C5F1A0;
      byte_267C5F1A0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F1A0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EC50);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F16F < 0)
  {
    sub_21B846188(&xmmword_267C5F140, (void *)xmmword_267C5F158, *((unint64_t *)&xmmword_267C5F158 + 1));
  }
  else
  {
    xmmword_267C5F140 = xmmword_267C5F158;
    unk_267C5F150 = unk_267C5F168;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F140, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EC30);
LABEL_2:
  if (byte_267C5F157 >= 0) {
    return &xmmword_267C5F140;
  }
  else {
    return (long long *)xmmword_267C5F140;
  }
}

void sub_21B8B9504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EC40);
  __cxa_guard_abort(&qword_267C5EC38);
  __cxa_guard_abort(&qword_267C5EC30);
  _Unwind_Resume(a1);
}

void sub_21B8B95A0(_Unwind_Exception *a1)
{
}

void sub_21B8B95B8()
{
}

void sub_21B8B9600(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8B97A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B97D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8B97E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8B981C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8B9830()
{
  return 65792;
}

void *sub_21B8B983C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8B98A0(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A608;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)uint64_t v25 = 2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v25[4] = v6;
  uint64_t v16 = *(void *)v25;
  int v17 = HIDWORD(v6);
  *(_DWORD *)uint64_t v25 = 1;
  *(void *)&v25[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v25;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v25[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8B0370(a1, (long long *)&v16);
  v22[0] = v13;
  v22[1] = v14;
  _OWORD v22[2] = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v23, v10);
LABEL_15:
        sub_21B8B0714((uint64_t)v25, a1);
        v24[0] = (uint64_t)v22;
        v24[1] = (uint64_t)v25;
        sub_21B89861C(v24);
        sub_21B9738D8(v23);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v23, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A608;
  return a1;
}

void sub_21B8B9A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB9A188;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8B9AD8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8B9AF0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A188;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8B9B68(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AFDD0(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8B9DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8B9E08(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AFDD0((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8BA0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8BA0C8()
{
  return 8;
}

uint64_t (***sub_21B8BA0D0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8BA14C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8B9E08((uint64_t)v5, a1);
      sub_21B8B9E08((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8BA21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BA248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BA25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8BA270@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8BA2D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE60, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 8);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_21B8B9B68((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_21B89861C((uint64_t *)v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v27, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v27, v7);
LABEL_8:
  sub_21B8B9E08((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  v25[2] = v26[2];
  sub_21B8B98A0((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_21B9732E4(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB9B078[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB9B0A8[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26CB9A188;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB9B078[DWORD2(v21)])(v26, &v20);
  }
}

void sub_21B8BA518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BA57C(uint64_t a1)
{
  sub_21B8B9B68((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8BA5A8(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B9B68((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8BA654(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8B9E08((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8BA700()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC60, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EC60))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EC68))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC70, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC70))
    {
LABEL_13:
      if (byte_267C5F217 < 0)
      {
        sub_21B846188(&xmmword_267C5F1E8, (void *)qword_267C5F200, unk_267C5F208);
      }
      else
      {
        xmmword_267C5F1E8 = *(_OWORD *)&qword_267C5F200;
        unk_267C5F1F8 = unk_267C5F210;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F1E8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC68);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EC78))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two32f>]", &qword_267C5F218);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F218, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC78);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC80, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EC80))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EC88))
      {
        if (byte_267C5F230[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F230, *(unint64_t *)&byte_267C5F230[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F230;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F248);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F248, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EC88);
      }
      if (byte_267C5F25F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F248, *((unint64_t *)&xmmword_267C5F248 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5F248;
        uint64_t v12 = unk_267C5F258;
      }
      sub_21B89E9F8(v11, (std::string *)&qword_267C5F200);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F200, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC70);
      goto LABEL_13;
    }
    if (byte_267C5F22F >= 0) {
      size_t v1 = byte_267C5F22F;
    }
    else {
      size_t v1 = unk_267C5F220;
    }
    if (byte_267C5F22F >= 0) {
      uint64_t v2 = &qword_267C5F218;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F218;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F230[8] = v1;
      *(void *)&byte_267C5F230[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F230 = v8;
    }
    else
    {
      int v8 = byte_267C5F230;
      byte_267C5F230[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F230, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EC80);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F1FF < 0)
  {
    sub_21B846188(&xmmword_267C5F1D0, (void *)xmmword_267C5F1E8, *((unint64_t *)&xmmword_267C5F1E8 + 1));
  }
  else
  {
    xmmword_267C5F1D0 = xmmword_267C5F1E8;
    unk_267C5F1E0 = unk_267C5F1F8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F1D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EC60);
LABEL_2:
  if (byte_267C5F1E7 >= 0) {
    return &xmmword_267C5F1D0;
  }
  else {
    return (long long *)xmmword_267C5F1D0;
  }
}

void sub_21B8BAB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EC70);
  __cxa_guard_abort(&qword_267C5EC68);
  __cxa_guard_abort(&qword_267C5EC60);
  _Unwind_Resume(a1);
}

void sub_21B8BAC24(_Unwind_Exception *a1)
{
}

void sub_21B8BAC3C()
{
}

void sub_21B8BAC84(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8BAE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BAE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8BAE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BAEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8BAEB4()
{
  return 65792;
}

void *sub_21B8BAEC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8BAF24(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9A698;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 3;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A89C8((uint64_t)a1, 17, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  void v17[2] = v10;
  sub_21B8A8EF0((uint64_t)a1, v17);
  *a1 = &unk_26CB9A698;
  return a1;
}

void sub_21B8BB028(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99C78;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8BB07C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BB098(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99C78;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8BB110(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            long long v8 = v15;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A8520(a1, (uint64_t)v11);
          v11[0] = &unk_26CBA1808;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26CBA1808;
          long long v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BB320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8BB33C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v17 = &unk_26CBA1808;
          uint64_t v18 = v7;
          long long v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            long long v8 = v19;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A8520((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26CBA1808;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v17 = &unk_26CBA1808;
          long long v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BB56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B974934(&a9);
  sub_21B974934((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_21B8BB588()
{
  return 17;
}

uint64_t (***sub_21B8BB590())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8BB60C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8BB33C((uint64_t)v5, a1);
      sub_21B8BB33C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8BB6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BB708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BB71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8BB730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8BB794(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE78, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v38, v7);
LABEL_11:
        sub_21B8BB33C((uint64_t)&v35, v6);
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        sub_21B8BAF24(&v28, (uint64_t)&v35 + 8, v34);
        sub_21B9732E4(v38);
        uint64_t v11 = DWORD2(v30);
        *(_DWORD *)(a1 + 8) = DWORD2(v28);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v35 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v35);
LABEL_16:
        long long v13 = v32;
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v33;
        *(void *)&long long v28 = &unk_26CB99C78;
        if (DWORD2(v30) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v30)])(&v35, &v29);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v38, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 17);
  long long v10 = *(_OWORD *)(v35 + 16);
  long long v9 = *(_OWORD *)(v35 + 32);
  long long v28 = *(_OWORD *)v35;
  long long v29 = v10;
  long long v30 = v9;
  *(void *)&long long v35 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8BB110((uint64_t)&v35, a1);
  *(void *)&v34[0] = &v28;
  *((void *)&v34[0] + 1) = &v35;
  if (DWORD1(v29) == 1 && DWORD1(v36) == 1)
  {
    sub_21B8934C4((size_t *)v34);
  }
  else if (DWORD2(v28) && HIDWORD(v28) && v29)
  {
    int v14 = HIDWORD(v28) - 1;
    uint64_t v15 = DWORD2(v29);
    uint64_t v16 = DWORD2(v36);
    uint64_t v17 = (unsigned char *)v28;
    uint64_t v18 = (unsigned char *)v35;
    int v19 = v29 - 1;
    if (v29 != 1)
    {
      uint64_t v20 = HIDWORD(v36);
      uint64_t v21 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v22 = 0;
        long long v23 = (unsigned char *)(v35 + 2);
        uint64_t v24 = (unsigned char *)(v28 + 2);
        do
        {
          uint64_t v25 = v24;
          uint64_t v26 = v23;
          int v27 = v14;
          do
          {
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = *v25;
            v26 += v16;
            v25 += v15;
            --v27;
          }
          while (v27);
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *uint64_t v26 = *v25;
          v17 += v21;
          v18 += v20;
          ++v22;
          v23 += v20;
          v24 += v21;
        }
        while (v22 != v19);
      }
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    *uint64_t v18 = *v17;
    v18[1] = v17[1];
    void v18[2] = v17[2];
  }
}

void sub_21B8BBB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BBB7C(uint64_t a1)
{
  sub_21B8BB110((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8BBBA8(uint64_t a1, int a2)
{
  if (a2 != 17
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BB110((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8BBC54(uint64_t a1, int a2)
{
  if (a2 != 17
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BB33C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8BBD00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC90, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EC90))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EC98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EC98))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECA0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ECA0))
    {
LABEL_13:
      if (byte_267C5F2A7 < 0)
      {
        sub_21B846188(&xmmword_267C5F278, (void *)qword_267C5F290, unk_267C5F298);
      }
      else
      {
        xmmword_267C5F278 = *(_OWORD *)&qword_267C5F290;
        unk_267C5F288 = unk_267C5F2A0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F278, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EC98);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECA8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ECA8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgr8u>]", &qword_267C5F2A8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F2A8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECA8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECB0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ECB0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECB8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5ECB8))
      {
        if (byte_267C5F2C0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F2C0, *(unint64_t *)&byte_267C5F2C0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F2C0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F2D8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F2D8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5ECB8);
      }
      if (byte_267C5F2EF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F2D8, *((unint64_t *)&xmmword_267C5F2D8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F2D8;
        uint64_t v12 = unk_267C5F2E8;
      }
      sub_21B8DC544(v11, (std::string *)&qword_267C5F290);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F290, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECA0);
      goto LABEL_13;
    }
    if (byte_267C5F2BF >= 0) {
      size_t v1 = byte_267C5F2BF;
    }
    else {
      size_t v1 = unk_267C5F2B0;
    }
    if (byte_267C5F2BF >= 0) {
      uint64_t v2 = &qword_267C5F2A8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F2A8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F2C0[8] = v1;
      *(void *)&byte_267C5F2C0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F2C0 = v8;
    }
    else
    {
      int v8 = byte_267C5F2C0;
      byte_267C5F2C0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F2C0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5ECB0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F28F < 0)
  {
    sub_21B846188(&xmmword_267C5F260, (void *)xmmword_267C5F278, *((unint64_t *)&xmmword_267C5F278 + 1));
  }
  else
  {
    xmmword_267C5F260 = xmmword_267C5F278;
    unk_267C5F270 = unk_267C5F288;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F260, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EC90);
LABEL_2:
  if (byte_267C5F277 >= 0) {
    return &xmmword_267C5F260;
  }
  else {
    return (long long *)xmmword_267C5F260;
  }
}

void sub_21B8BC188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ECA0);
  __cxa_guard_abort(&qword_267C5EC98);
  __cxa_guard_abort(&qword_267C5EC90);
  _Unwind_Resume(a1);
}

void sub_21B8BC224(_Unwind_Exception *a1)
{
}

void sub_21B8BC23C()
{
}

void sub_21B8BC284(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8BC424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BC458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8BC46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BC4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8BC4B4()
{
  return 65792;
}

void *sub_21B8BC4C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8BC524(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9A728;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 3;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A89C8((uint64_t)a1, 21, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  void v17[2] = v10;
  sub_21B8A8EF0((uint64_t)a1, v17);
  *a1 = &unk_26CB9A728;
  return a1;
}

void sub_21B8BC628(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99C78;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8BC67C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BC698(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99C78;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8BC710(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            long long v8 = v15;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A8520(a1, (uint64_t)v11);
          v11[0] = &unk_26CBA1808;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26CBA1808;
          long long v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8BC93C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v17 = &unk_26CBA1808;
          uint64_t v18 = v7;
          int v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            long long v8 = v19;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A8520((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26CBA1808;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v17 = &unk_26CBA1808;
          long long v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BCB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B974934(&a9);
  sub_21B974934((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_21B8BCB88()
{
  return 21;
}

uint64_t (***sub_21B8BCB90())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8BCC0C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8BC93C((uint64_t)v5, a1);
      sub_21B8BC93C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8BCCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BCD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BCD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8BCD30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8BCD94(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AE90, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v38, v7);
LABEL_11:
        sub_21B8BC93C((uint64_t)&v35, v6);
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        sub_21B8BC524(&v28, (uint64_t)&v35 + 8, v34);
        sub_21B9732E4(v38);
        uint64_t v11 = DWORD2(v30);
        *(_DWORD *)(a1 + 8) = DWORD2(v28);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v35 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v35);
LABEL_16:
        long long v13 = v32;
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v33;
        *(void *)&long long v28 = &unk_26CB99C78;
        if (DWORD2(v30) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v30)])(&v35, &v29);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v38, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 21);
  long long v10 = *(_OWORD *)(v35 + 16);
  long long v9 = *(_OWORD *)(v35 + 32);
  long long v28 = *(_OWORD *)v35;
  long long v29 = v10;
  long long v30 = v9;
  *(void *)&long long v35 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8BC710((uint64_t)&v35, a1);
  *(void *)&v34[0] = &v28;
  *((void *)&v34[0] + 1) = &v35;
  if (DWORD1(v29) == 1 && DWORD1(v36) == 1)
  {
    sub_21B8934C4((size_t *)v34);
  }
  else if (DWORD2(v28) && HIDWORD(v28) && v29)
  {
    int v14 = HIDWORD(v28) - 1;
    uint64_t v15 = DWORD2(v29);
    uint64_t v16 = DWORD2(v36);
    uint64_t v17 = (unsigned char *)v28;
    uint64_t v18 = (unsigned char *)v35;
    int v19 = v29 - 1;
    if (v29 != 1)
    {
      uint64_t v20 = HIDWORD(v36);
      uint64_t v21 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v22 = 0;
        long long v23 = (unsigned char *)(v35 + 2);
        uint64_t v24 = (unsigned char *)(v28 + 2);
        do
        {
          uint64_t v25 = v24;
          uint64_t v26 = v23;
          int v27 = v14;
          do
          {
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = *v25;
            v26 += v16;
            v25 += v15;
            --v27;
          }
          while (v27);
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *uint64_t v26 = *v25;
          v17 += v21;
          v18 += v20;
          ++v22;
          v23 += v20;
          v24 += v21;
        }
        while (v22 != v19);
      }
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    *uint64_t v18 = *v17;
    v18[1] = v17[1];
    void v18[2] = v17[2];
  }
}

void sub_21B8BD118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BD17C(uint64_t a1)
{
  sub_21B8BC710((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8BD1A8(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BC710((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8BD254(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BC93C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8BD300()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECC0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5ECC0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5ECC8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECD0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ECD0))
    {
LABEL_13:
      if (byte_267C5F337 < 0)
      {
        sub_21B846188(&xmmword_267C5F308, (void *)qword_267C5F320, unk_267C5F328);
      }
      else
      {
        xmmword_267C5F308 = *(_OWORD *)&qword_267C5F320;
        unk_267C5F318 = unk_267C5F330;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F308, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECC8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECD8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ECD8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb8u>]", &qword_267C5F338);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F338, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECD8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECE0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ECE0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECE8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5ECE8))
      {
        if (byte_267C5F350[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F350, *(unint64_t *)&byte_267C5F350[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F350;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F368);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F368, &dword_21B831000);
        __cxa_guard_release(&qword_267C5ECE8);
      }
      if (byte_267C5F37F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F368, *((unint64_t *)&xmmword_267C5F368 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F368;
        uint64_t v12 = unk_267C5F378;
      }
      sub_21B89EB24(v11, (std::string *)&qword_267C5F320);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F320, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECD0);
      goto LABEL_13;
    }
    if (byte_267C5F34F >= 0) {
      size_t v1 = byte_267C5F34F;
    }
    else {
      size_t v1 = unk_267C5F340;
    }
    if (byte_267C5F34F >= 0) {
      uint64_t v2 = &qword_267C5F338;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F338;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F350[8] = v1;
      *(void *)&byte_267C5F350[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F350 = v8;
    }
    else
    {
      int v8 = byte_267C5F350;
      byte_267C5F350[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F350, &dword_21B831000);
    __cxa_guard_release(&qword_267C5ECE0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F31F < 0)
  {
    sub_21B846188(&xmmword_267C5F2F0, (void *)xmmword_267C5F308, *((unint64_t *)&xmmword_267C5F308 + 1));
  }
  else
  {
    xmmword_267C5F2F0 = xmmword_267C5F308;
    unk_267C5F300 = unk_267C5F318;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F2F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5ECC0);
LABEL_2:
  if (byte_267C5F307 >= 0) {
    return &xmmword_267C5F2F0;
  }
  else {
    return (long long *)xmmword_267C5F2F0;
  }
}

void sub_21B8BD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ECD0);
  __cxa_guard_abort(&qword_267C5ECC8);
  __cxa_guard_abort(&qword_267C5ECC0);
  _Unwind_Resume(a1);
}

void sub_21B8BD824(_Unwind_Exception *a1)
{
}

void sub_21B8BD83C()
{
}

void sub_21B8BD884(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8BDA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8BDA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8BDAB4()
{
  return 65792;
}

void *sub_21B8BDAC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8BDB24(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A7B8;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)long long v43 = 3;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v43[4] = v6;
  uint64_t v32 = *(void *)v43;
  int v33 = HIDWORD(v6);
  *(_DWORD *)long long v43 = 1;
  *(void *)&v43[4] = v4 | (v5 << 32);
  uint64_t v34 = *(void *)v43;
  int v35 = v5;
  uint64_t v36 = v6;
  uint64_t v37 = *(void *)&v43[4];
  long long v30 = a3[1];
  long long v31 = a3[2];
  long long v29 = *a3;
  sub_21B8ABE5C(a1, (long long *)&v32);
  long long v38 = v29;
  long long v39 = v30;
  long long v40 = v31;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_34;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_33;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v41, v10);
LABEL_15:
        sub_21B8AC200((uint64_t)v43, a1);
        v42[0] = (uint64_t)&v38;
        v42[1] = (uint64_t)v43;
        if (DWORD1(v39) == 1 && v44 == 1)
        {
          sub_21B894E9C(v42);
LABEL_32:
          sub_21B9738D8(v41);
          goto LABEL_33;
        }
        if (!DWORD2(v38) || !HIDWORD(v38) || !v39) {
          goto LABEL_32;
        }
        int v12 = HIDWORD(v38) - 1;
        uint64_t v13 = DWORD2(v39);
        uint64_t v14 = v45;
        uint64_t v15 = (_WORD *)v38;
        uint64_t v16 = *(_WORD **)v43;
        int v17 = v39 - 1;
        if (v39 != 1)
        {
          uint64_t v18 = v46;
          uint64_t v19 = HIDWORD(v39);
          if (HIDWORD(v38) == 1)
          {
            do
            {
              *uint64_t v16 = *v15;
              v16[1] = v15[1];
              v16[2] = v15[2];
              v15 += v19;
              v16 += v18;
              --v17;
            }
            while (v17);
LABEL_31:
            *uint64_t v16 = *v15;
            v16[1] = v15[1];
            v16[2] = v15[2];
            goto LABEL_32;
          }
          int v20 = 0;
          uint64_t v21 = *(void *)v43 + 4;
          int v22 = (_WORD *)(v38 + 4);
          uint64_t v23 = 2 * HIDWORD(v39);
          uint64_t v24 = 2 * DWORD2(v39);
          do
          {
            uint64_t v25 = v22;
            uint64_t v26 = (_WORD *)v21;
            int v27 = v12;
            do
            {
              *(v26 - 2) = *(v25 - 2);
              *(v26 - 1) = *(v25 - 1);
              *uint64_t v26 = *v25;
              v26 += v14;
              uint64_t v25 = (_WORD *)((char *)v25 + v24);
              --v27;
            }
            while (v27);
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = *v25;
            v15 += v19;
            v16 += v18;
            ++v20;
            v21 += 2 * v18;
            int v22 = (_WORD *)((char *)v22 + v23);
          }
          while (v20 != v17);
        }
        for (; v12; --v12)
        {
          *uint64_t v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v13;
          v16 += v14;
        }
        goto LABEL_31;
      }
      if (v11 == 2)
      {
        sub_21B973698(v41, v10);
        goto LABEL_15;
      }
LABEL_34:
      sub_21B84C734();
    }
  }
LABEL_33:
  *(void *)a1 = &unk_26CB9A7B8;
  return a1;
}

void sub_21B8BDE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB99E28;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8BDEBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8BDED4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99E28;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8BDF4C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            int v8 = v15;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AB8D4(a1, (uint64_t)v11);
          v11[0] = &unk_26CBA1808;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26CBA1808;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BE15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8BE178(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          int v17 = &unk_26CBA1808;
          uint64_t v18 = v7;
          uint64_t v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            int v8 = v19;
          }
          v11[0] = &unk_26CBA1808;
          v11[1] = v7;
          int v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AB8D4((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26CBA1808;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          int v17 = &unk_26CBA1808;
          uint64_t v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_21B893C0C(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_21B8BE3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B974934(&a9);
  sub_21B974934((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_21B8BE3C4()
{
  return 22;
}

uint64_t (***sub_21B8BE3CC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8BE448(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8BE178((uint64_t)v5, a1);
      sub_21B8BE178((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8BE518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BE544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BE558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8BE56C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8BE5D0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AEA8, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v39, v7);
LABEL_11:
        sub_21B8BE178((uint64_t)&v36, v6);
        v35[0] = v36;
        v35[1] = v37;
        void v35[2] = v38;
        sub_21B8BDB24((uint64_t)&v29, (uint64_t)&v36 + 8, v35);
        sub_21B9732E4(v39);
        uint64_t v11 = DWORD2(v31);
        *(_DWORD *)(a1 + 8) = DWORD2(v29);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v36, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v36 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v36);
LABEL_16:
        long long v13 = v33;
        *(_OWORD *)(a1 + 48) = v32;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v34;
        *(void *)&long long v29 = &unk_26CB99E28;
        if (DWORD2(v31) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v31)])(&v36, &v30);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v39, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v36, lpsrc, 22);
  long long v10 = *(_OWORD *)(v36 + 16);
  long long v9 = *(_OWORD *)(v36 + 32);
  long long v29 = *(_OWORD *)v36;
  long long v30 = v10;
  long long v31 = v9;
  *(void *)&long long v36 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8BDF4C((uint64_t)&v36, a1);
  *(void *)&v35[0] = &v29;
  *((void *)&v35[0] + 1) = &v36;
  if (DWORD1(v30) == 1 && DWORD1(v37) == 1)
  {
    sub_21B894E9C((uint64_t *)v35);
    return;
  }
  if (DWORD2(v29) && HIDWORD(v29) && v30)
  {
    int v14 = HIDWORD(v29) - 1;
    uint64_t v15 = DWORD2(v30);
    uint64_t v16 = DWORD2(v37);
    int v17 = (_WORD *)v29;
    uint64_t v18 = (_WORD *)v36;
    int v19 = v30 - 1;
    if (v30 != 1)
    {
      uint64_t v20 = HIDWORD(v37);
      uint64_t v21 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
LABEL_31:
        *uint64_t v18 = *v17;
        v18[1] = v17[1];
        void v18[2] = v17[2];
        return;
      }
      int v22 = 0;
      uint64_t v23 = 2 * DWORD2(v37);
      uint64_t v24 = (_WORD *)(v36 + 4);
      uint64_t v25 = (_WORD *)(v29 + 4);
      do
      {
        uint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v14;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          uint64_t v27 = (_WORD *)((char *)v27 + v23);
          v26 += v15;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v17 += v21;
        v18 += v20;
        ++v22;
        v24 += v20;
        v25 += v21;
      }
      while (v22 != v19);
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    goto LABEL_31;
  }
}

void sub_21B8BE974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BE9D8(uint64_t a1)
{
  sub_21B8BDF4C((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8BEA04(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BDF4C((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8BEAB0(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BE178((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8BEB5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECF0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5ECF0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ECF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5ECF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED00, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED00))
    {
LABEL_13:
      if (byte_267C5F3C7 < 0)
      {
        sub_21B846188(&xmmword_267C5F398, (void *)qword_267C5F3B0, unk_267C5F3B8);
      }
      else
      {
        xmmword_267C5F398 = *(_OWORD *)&qword_267C5F3B0;
        unk_267C5F3A8 = unk_267C5F3C0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F398, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ECF8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ED08))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb16u>]", &qword_267C5F3C8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F3C8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED08);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED10, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED10))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED18, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5ED18))
      {
        if (byte_267C5F3E0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F3E0, *(unint64_t *)&byte_267C5F3E0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F3E0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F3F8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F3F8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5ED18);
      }
      if (byte_267C5F40F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F3F8, *((unint64_t *)&xmmword_267C5F3F8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F3F8;
        uint64_t v12 = unk_267C5F408;
      }
      sub_21B89EC50(v11, (std::string *)&qword_267C5F3B0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F3B0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED00);
      goto LABEL_13;
    }
    if (byte_267C5F3DF >= 0) {
      size_t v1 = byte_267C5F3DF;
    }
    else {
      size_t v1 = unk_267C5F3D0;
    }
    if (byte_267C5F3DF >= 0) {
      uint64_t v2 = &qword_267C5F3C8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F3C8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F3E0[8] = v1;
      *(void *)&byte_267C5F3E0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F3E0 = v8;
    }
    else
    {
      int v8 = byte_267C5F3E0;
      byte_267C5F3E0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F3E0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5ED10);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F3AF < 0)
  {
    sub_21B846188(&xmmword_267C5F380, (void *)xmmword_267C5F398, *((unint64_t *)&xmmword_267C5F398 + 1));
  }
  else
  {
    xmmword_267C5F380 = xmmword_267C5F398;
    unk_267C5F390 = unk_267C5F3A8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F380, &dword_21B831000);
  __cxa_guard_release(&qword_267C5ECF0);
LABEL_2:
  if (byte_267C5F397 >= 0) {
    return &xmmword_267C5F380;
  }
  else {
    return (long long *)xmmword_267C5F380;
  }
}

void sub_21B8BEFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ED00);
  __cxa_guard_abort(&qword_267C5ECF8);
  __cxa_guard_abort(&qword_267C5ECF0);
  _Unwind_Resume(a1);
}

void sub_21B8BF080(_Unwind_Exception *a1)
{
}

void sub_21B8BF098()
{
}

void sub_21B8BF0E0(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8BF280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BF2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8BF2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8BF2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8BF310()
{
  return 65792;
}

void *sub_21B8BF31C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8BF380(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9A848;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A9E3C((uint64_t)a1, 25, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  void v17[2] = v10;
  sub_21B8AA2CC((uint64_t)a1, v17);
  *a1 = &unk_26CB9A848;
  return a1;
}

void sub_21B8BF484(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99D08;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8BF4D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BF4F4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8BF56C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8BF7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8BF80C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            long long v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8BFAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8BFACC()
{
  return 25;
}

uint64_t (***sub_21B8BFAD4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8BFB50(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8BF80C((uint64_t)v5, a1);
      sub_21B8BF80C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8BFC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BFC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8BFC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8BFC74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8BFCD8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AEC0, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v25, v7);
LABEL_11:
        sub_21B8BF80C((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_21B8BF380(&v15, (uint64_t)&v22 + 8, v21);
        sub_21B9732E4(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26CB99D08;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 25);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8BF56C((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_21B8934C4((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_21B893EEC((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_21B8BFF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8BFFD4(uint64_t a1)
{
  sub_21B8BF56C((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C0000(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BF56C((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C00AC(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8BF80C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C0158()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED20, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5ED20))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5ED28))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED30, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED30))
    {
LABEL_13:
      if (byte_267C5F457 < 0)
      {
        sub_21B846188(&xmmword_267C5F428, (void *)qword_267C5F440, unk_267C5F448);
      }
      else
      {
        xmmword_267C5F428 = *(_OWORD *)&qword_267C5F440;
        unk_267C5F438 = unk_267C5F450;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F428, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED28);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED38, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ED38))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgra8u>]", &qword_267C5F458);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F458, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED38);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED40, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED40))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED48, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5ED48))
      {
        if (byte_267C5F470[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F470, *(unint64_t *)&byte_267C5F470[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F470;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F488);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F488, &dword_21B831000);
        __cxa_guard_release(&qword_267C5ED48);
      }
      if (byte_267C5F49F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F488, *((unint64_t *)&xmmword_267C5F488 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F488;
        uint64_t v12 = unk_267C5F498;
      }
      sub_21B89ED7C(v11, (std::string *)&qword_267C5F440);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F440, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED30);
      goto LABEL_13;
    }
    if (byte_267C5F46F >= 0) {
      size_t v1 = byte_267C5F46F;
    }
    else {
      size_t v1 = unk_267C5F460;
    }
    if (byte_267C5F46F >= 0) {
      uint64_t v2 = &qword_267C5F458;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F458;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F470[8] = v1;
      *(void *)&byte_267C5F470[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F470 = v8;
    }
    else
    {
      int v8 = byte_267C5F470;
      byte_267C5F470[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F470, &dword_21B831000);
    __cxa_guard_release(&qword_267C5ED40);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F43F < 0)
  {
    sub_21B846188(&xmmword_267C5F410, (void *)xmmword_267C5F428, *((unint64_t *)&xmmword_267C5F428 + 1));
  }
  else
  {
    xmmword_267C5F410 = xmmword_267C5F428;
    unk_267C5F420 = unk_267C5F438;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F410, &dword_21B831000);
  __cxa_guard_release(&qword_267C5ED20);
LABEL_2:
  if (byte_267C5F427 >= 0) {
    return &xmmword_267C5F410;
  }
  else {
    return (long long *)xmmword_267C5F410;
  }
}

void sub_21B8C05E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ED30);
  __cxa_guard_abort(&qword_267C5ED28);
  __cxa_guard_abort(&qword_267C5ED20);
  _Unwind_Resume(a1);
}

void sub_21B8C067C(_Unwind_Exception *a1)
{
}

void sub_21B8C0694()
{
}

void sub_21B8C06DC(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C08B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C08C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C08F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C090C()
{
  return 65792;
}

void *sub_21B8C0918@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8C097C(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9A8D8;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A9E3C((uint64_t)a1, 29, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  void v17[2] = v10;
  sub_21B8AA2CC((uint64_t)a1, v17);
  *a1 = &unk_26CB9A8D8;
  return a1;
}

void sub_21B8C0A80(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99D08;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8C0AD4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C0AF0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C0B68(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C0DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C0E08(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            long long v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C10AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C10C8()
{
  return 29;
}

uint64_t (***sub_21B8C10D0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C114C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C0E08((uint64_t)v5, a1);
      sub_21B8C0E08((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}