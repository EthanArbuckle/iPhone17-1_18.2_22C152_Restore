void sub_21B8C121C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C1270@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8C12D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AED8, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v25, v7);
LABEL_11:
        sub_21B8C0E08((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        v21[2] = v24;
        sub_21B8C097C(&v15, (uint64_t)&v22 + 8, v21);
        sub_21B9732E4(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26CB99D08;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 29);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8C0B68((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_21B8934C4((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_21B893EEC((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_21B8C156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C15D0(uint64_t a1)
{
  sub_21B8C0B68((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C15FC(uint64_t a1, int a2)
{
  if (a2 != 29
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C0B68((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C16A8(uint64_t a1, int a2)
{
  if (a2 != 29
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C0E08((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C1754()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED50, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5ED50))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5ED58))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED60, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED60))
    {
LABEL_13:
      if (byte_267C5F4E7 < 0)
      {
        sub_21B846188(&xmmword_267C5F4B8, (void *)qword_267C5F4D0, unk_267C5F4D8);
      }
      else
      {
        xmmword_267C5F4B8 = *(_OWORD *)&qword_267C5F4D0;
        unk_267C5F4C8 = unk_267C5F4E0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F4B8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED58);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ED68))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba8u>]", &qword_267C5F4E8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F4E8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED68);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED70, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED70))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED78, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5ED78))
      {
        if (byte_267C5F500[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F500, *(unint64_t *)&byte_267C5F500[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F500;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F518);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F518, &dword_21B831000);
        __cxa_guard_release(&qword_267C5ED78);
      }
      if (byte_267C5F52F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F518, *((unint64_t *)&xmmword_267C5F518 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F518;
        uint64_t v12 = unk_267C5F528;
      }
      sub_21B8DC670(v11, (std::string *)&qword_267C5F4D0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F4D0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED60);
      goto LABEL_13;
    }
    if (byte_267C5F4FF >= 0) {
      size_t v1 = byte_267C5F4FF;
    }
    else {
      size_t v1 = unk_267C5F4F0;
    }
    if (byte_267C5F4FF >= 0) {
      uint64_t v2 = &qword_267C5F4E8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F4E8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F500[8] = v1;
      *(void *)&byte_267C5F500[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F500 = v8;
    }
    else
    {
      int v8 = byte_267C5F500;
      byte_267C5F500[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F500, &dword_21B831000);
    __cxa_guard_release(&qword_267C5ED70);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F4CF < 0)
  {
    sub_21B846188(&xmmword_267C5F4A0, (void *)xmmword_267C5F4B8, *((unint64_t *)&xmmword_267C5F4B8 + 1));
  }
  else
  {
    xmmword_267C5F4A0 = xmmword_267C5F4B8;
    unk_267C5F4B0 = unk_267C5F4C8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F4A0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5ED50);
LABEL_2:
  if (byte_267C5F4B7 >= 0) {
    return &xmmword_267C5F4A0;
  }
  else {
    return (long long *)xmmword_267C5F4A0;
  }
}

void sub_21B8C1BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ED60);
  __cxa_guard_abort(&qword_267C5ED58);
  __cxa_guard_abort(&qword_267C5ED50);
  _Unwind_Resume(a1);
}

void sub_21B8C1C78(_Unwind_Exception *a1)
{
}

void sub_21B8C1C90()
{
}

void sub_21B8C1CD8(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C1E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C1EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C1EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C1EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C1F08()
{
  return 65792;
}

void *sub_21B8C1F14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8C1F78(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A968;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)v25 = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v25[4] = v6;
  uint64_t v16 = *(void *)v25;
  int v17 = HIDWORD(v6);
  *(_DWORD *)v25 = 1;
  *(void *)&v25[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v25;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v25[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8AEC84(a1, (long long *)&v16);
  v22[0] = v13;
  v22[1] = v14;
  v22[2] = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_17;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = *v7;
    int v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
    }
    if (v9)
    {
LABEL_9:
      uint64_t v10 = a1 + 16;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 < 2)
      {
        sub_21B973554(v23, v10);
LABEL_15:
        sub_21B8AF028((uint64_t)v25, a1);
        v24[0] = v22;
        v24[1] = v25;
        sub_21B897400(v24);
        sub_21B9738D8(v23);
        goto LABEL_16;
      }
      if (v11 == 2)
      {
        sub_21B973698(v23, v10);
        goto LABEL_15;
      }
LABEL_17:
      sub_21B84C734();
    }
  }
LABEL_16:
  *(void *)a1 = &unk_26CB9A968;
  return a1;
}

void sub_21B8C2148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB9A068;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8C21B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8C21C8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A068;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C2240(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AE6E4(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C24C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C24E0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AE6E4((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C2784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C27A0()
{
  return 31;
}

uint64_t (***sub_21B8C27A8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C2824(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C24E0((uint64_t)v5, a1);
      sub_21B8C24E0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8C28F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C2920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C2934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C2948@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8C29AC(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AEF0, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 31);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x21D495F30](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_21B8C2240((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_21B897400(v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_21B84C734();
    }
LABEL_5:
    sub_21B972F60(v27, v7);
    goto LABEL_8;
  }
  sub_21B9730A4(v27, v7);
LABEL_8:
  sub_21B8C24E0((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  v25[2] = v26[2];
  sub_21B8C1F78((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_21B9732E4(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26CB9B078[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26CB9B0A8[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26CB9A068;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26CB9B078[DWORD2(v21)])(v26, &v20);
  }
}

void sub_21B8C2BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C2C54(uint64_t a1)
{
  sub_21B8C2240((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C2C80(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C2240((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C2D2C(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C24E0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C2DD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED80, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5ED80))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5ED88))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED90, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5ED90))
    {
LABEL_13:
      if (byte_267C5F577 < 0)
      {
        sub_21B846188(&xmmword_267C5F548, (void *)qword_267C5F560, unk_267C5F568);
      }
      else
      {
        xmmword_267C5F548 = *(_OWORD *)&qword_267C5F560;
        unk_267C5F558 = unk_267C5F570;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F548, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED88);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5ED98, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5ED98))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba16f>]", &qword_267C5F578);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F578, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED98);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDA0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EDA0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDA8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EDA8))
      {
        if (byte_267C5F590[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F590, *(unint64_t *)&byte_267C5F590[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F590;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F5A8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F5A8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EDA8);
      }
      if (byte_267C5F5BF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F5A8, *((unint64_t *)&xmmword_267C5F5A8 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267C5F5A8;
        uint64_t v12 = unk_267C5F5B8;
      }
      sub_21B89EEA8(v11, (std::string *)&qword_267C5F560);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F560, &dword_21B831000);
      __cxa_guard_release(&qword_267C5ED90);
      goto LABEL_13;
    }
    if (byte_267C5F58F >= 0) {
      size_t v1 = byte_267C5F58F;
    }
    else {
      size_t v1 = unk_267C5F580;
    }
    if (byte_267C5F58F >= 0) {
      uint64_t v2 = &qword_267C5F578;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F578;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F590[8] = v1;
      *(void *)&byte_267C5F590[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F590 = v8;
    }
    else
    {
      int v8 = byte_267C5F590;
      byte_267C5F590[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F590, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EDA0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F55F < 0)
  {
    sub_21B846188(&xmmword_267C5F530, (void *)xmmword_267C5F548, *((unint64_t *)&xmmword_267C5F548 + 1));
  }
  else
  {
    xmmword_267C5F530 = xmmword_267C5F548;
    unk_267C5F540 = unk_267C5F558;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F530, &dword_21B831000);
  __cxa_guard_release(&qword_267C5ED80);
LABEL_2:
  if (byte_267C5F547 >= 0) {
    return &xmmword_267C5F530;
  }
  else {
    return (long long *)xmmword_267C5F530;
  }
}

void sub_21B8C3260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5ED90);
  __cxa_guard_abort(&qword_267C5ED88);
  __cxa_guard_abort(&qword_267C5ED80);
  _Unwind_Resume(a1);
}

void sub_21B8C32FC(_Unwind_Exception *a1)
{
}

void sub_21B8C3314()
{
}

void sub_21B8C335C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C34FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C3530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C3544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C358C()
{
  return 65792;
}

void *sub_21B8C3598@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8C35FC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9A9F8;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)v29 = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v29[4] = v6;
  uint64_t v16 = *(void *)v29;
  int v17 = HIDWORD(v6);
  *(_DWORD *)v29 = 1;
  *(void *)&v29[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v29;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v29[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8B0F54(a1, (long long *)&v16);
  long long v22 = v13;
  long long v23 = v14;
  long long v24 = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *v7;
  int v8 = (std::__shared_weak_count *)v7[1];
  if (v8
    && (atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else if (!v9)
  {
    goto LABEL_23;
  }
  uint64_t v10 = a1 + 16;
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  if (v11 < 2)
  {
    sub_21B973554(v25, v10);
    goto LABEL_15;
  }
  if (v11 != 2) {
LABEL_24:
  }
    sub_21B84C734();
  sub_21B973698(v25, v10);
LABEL_15:
  sub_21B8B12F8((uint64_t)v29, a1);
  v26[0] = (uint64_t)&v22;
  v26[1] = (uint64_t)v29;
  if (DWORD1(v23) == 1 && v30 == 1)
  {
    sub_21B898758(v26);
  }
  else
  {
    char v27 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && v23)
    {
      uint64_t v28 = &v27;
      sub_21B898FA4((uint64_t)&v28, (uint64_t)&v22, (uint64_t)v29);
    }
  }
  sub_21B9738D8(v25);
LABEL_23:
  *(void *)a1 = &unk_26CB9A9F8;
  return a1;
}

void sub_21B8C381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB9A218;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8C3884(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8C389C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A218;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C3914(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8B09B4(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C3B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C3BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8B09B4((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C3E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C3E74()
{
  return 32;
}

uint64_t (***sub_21B8C3E7C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C3EF8(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C3BB4((uint64_t)v5, a1);
      sub_21B8C3BB4((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8C3FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C3FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C4008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C401C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

float sub_21B8C4080(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AF08, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v26, v7);
LABEL_11:
        sub_21B8C3BB4((uint64_t)&v23, v6);
        v22[0] = v23;
        v22[1] = v24;
        v22[2] = v25;
        sub_21B8C35FC((uint64_t)&v16, (uint64_t)&v23 + 8, v22);
        sub_21B9732E4(v26);
        uint64_t v12 = DWORD2(v18);
        *(_DWORD *)(a1 + 8) = DWORD2(v16);
        uint64_t v13 = *(unsigned int *)(a1 + 40);
        if (v13 == -1)
        {
          if (v12 == -1) {
            goto LABEL_16;
          }
        }
        else if (v12 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v13])(&v23, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v23 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v12])(&v23);
LABEL_16:
        float result = *(float *)&v19;
        long long v14 = v20;
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)(a1 + 64) = v14;
        *(void *)(a1 + 80) = v21;
        *(void *)&long long v16 = &unk_26CB9A218;
        if (DWORD2(v18) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v18)])(&v23, &v17);
        }
        return result;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v26, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 32);
  long long v10 = *(_OWORD *)(v23 + 16);
  long long v9 = *(_OWORD *)(v23 + 32);
  long long v16 = *(_OWORD *)v23;
  long long v17 = v10;
  long long v18 = v9;
  *(void *)&long long v23 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8C3914((uint64_t)&v23, a1);
  *(void *)&v22[0] = &v16;
  *((void *)&v22[0] + 1) = &v23;
  if (DWORD1(v17) == 1 && DWORD1(v24) == 1)
  {
    sub_21B898758((uint64_t *)v22);
  }
  else
  {
    char v15 = 0;
    if (DWORD2(v16) && HIDWORD(v16) && v17)
    {
      v26[0] = &v15;
      return sub_21B898FA4((uint64_t)v26, (uint64_t)&v16, (uint64_t)&v23);
    }
  }
  return result;
}

void sub_21B8C4318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C437C(uint64_t a1)
{
  sub_21B8C3914((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C43A8(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C3914((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C4454(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C3BB4((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C4500()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDB0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EDB0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EDB8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDC0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EDC0))
    {
LABEL_13:
      if (byte_267C5F607 < 0)
      {
        sub_21B846188(&xmmword_267C5F5D8, (void *)qword_267C5F5F0, unk_267C5F5F8);
      }
      else
      {
        xmmword_267C5F5D8 = *(_OWORD *)&qword_267C5F5F0;
        unk_267C5F5E8 = unk_267C5F600;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F5D8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDB8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDC8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EDC8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba32f>]", &qword_267C5F608);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F608, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDC8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDD0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EDD0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDD8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EDD8))
      {
        if (byte_267C5F620[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F620, *(unint64_t *)&byte_267C5F620[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F620;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F638);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F638, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EDD8);
      }
      if (byte_267C5F64F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F638, *((unint64_t *)&xmmword_267C5F638 + 1));
      }
      else
      {
        *(_OWORD *)BOOL v11 = xmmword_267C5F638;
        uint64_t v12 = unk_267C5F648;
      }
      sub_21B89EFD4(v11, (std::string *)&qword_267C5F5F0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F5F0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDC0);
      goto LABEL_13;
    }
    if (byte_267C5F61F >= 0) {
      size_t v1 = byte_267C5F61F;
    }
    else {
      size_t v1 = unk_267C5F610;
    }
    if (byte_267C5F61F >= 0) {
      uint64_t v2 = &qword_267C5F608;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F608;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F620[8] = v1;
      *(void *)&byte_267C5F620[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F620 = v8;
    }
    else
    {
      int v8 = byte_267C5F620;
      byte_267C5F620[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F620, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EDD0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F5EF < 0)
  {
    sub_21B846188(&xmmword_267C5F5C0, (void *)xmmword_267C5F5D8, *((unint64_t *)&xmmword_267C5F5D8 + 1));
  }
  else
  {
    xmmword_267C5F5C0 = xmmword_267C5F5D8;
    unk_267C5F5D0 = unk_267C5F5E8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F5C0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EDB0);
LABEL_2:
  if (byte_267C5F5D7 >= 0) {
    return &xmmword_267C5F5C0;
  }
  else {
    return (long long *)xmmword_267C5F5C0;
  }
}

void sub_21B8C4988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EDC0);
  __cxa_guard_abort(&qword_267C5EDB8);
  __cxa_guard_abort(&qword_267C5EDB0);
  _Unwind_Resume(a1);
}

void sub_21B8C4A24(_Unwind_Exception *a1)
{
}

void sub_21B8C4A3C()
{
}

void sub_21B8C4A84(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C4C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C4C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C4C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C4CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C4CB4()
{
  return 65792;
}

void *sub_21B8C4CC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8C4D24(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9AA88;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A9E3C((uint64_t)a1, 33, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_21B8AA2CC((uint64_t)a1, v17);
  *a1 = &unk_26CB9AA88;
  return a1;
}

void sub_21B8C4E28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99D08;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8C4E7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C4E98(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C4F10(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C5194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C51B0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            long long v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C5454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C5470()
{
  return 33;
}

uint64_t (***sub_21B8C5478())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C54F4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C51B0((uint64_t)v5, a1);
      sub_21B8C51B0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8C55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C55F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C5604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C5618@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8C567C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AF20, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v25, v7);
LABEL_11:
        sub_21B8C51B0((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        v21[2] = v24;
        sub_21B8C4D24(&v15, (uint64_t)&v22 + 8, v21);
        sub_21B9732E4(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26CB99D08;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 33);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8C4F10((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_21B8934C4((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_21B893EEC((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_21B8C5914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C5978(uint64_t a1)
{
  sub_21B8C4F10((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C59A4(uint64_t a1, int a2)
{
  if (a2 != 33
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C4F10((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C5A50(uint64_t a1, int a2)
{
  if (a2 != 33
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C51B0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C5AFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDE0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EDE0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EDE8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDF0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EDF0))
    {
LABEL_13:
      if (byte_267C5F697 < 0)
      {
        sub_21B846188(&xmmword_267C5F668, (void *)qword_267C5F680, unk_267C5F688);
      }
      else
      {
        xmmword_267C5F668 = *(_OWORD *)&qword_267C5F680;
        unk_267C5F678 = unk_267C5F690;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F668, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDE8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EDF8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EDF8))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Abgr8u>]", &qword_267C5F698);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F698, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDF8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE00, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EE00))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE08, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EE08))
      {
        if (byte_267C5F6B0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F6B0, *(unint64_t *)&byte_267C5F6B0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F6B0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F6C8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F6C8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EE08);
      }
      if (byte_267C5F6DF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F6C8, *((unint64_t *)&xmmword_267C5F6C8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F6C8;
        uint64_t v12 = unk_267C5F6D8;
      }
      sub_21B8DC79C(v11, (std::string *)&qword_267C5F680);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F680, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EDF0);
      goto LABEL_13;
    }
    if (byte_267C5F6AF >= 0) {
      size_t v1 = byte_267C5F6AF;
    }
    else {
      size_t v1 = unk_267C5F6A0;
    }
    if (byte_267C5F6AF >= 0) {
      uint64_t v2 = &qword_267C5F698;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F698;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F6B0[8] = v1;
      *(void *)&byte_267C5F6B0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F6B0 = v8;
    }
    else
    {
      int v8 = byte_267C5F6B0;
      byte_267C5F6B0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F6B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EE00);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F67F < 0)
  {
    sub_21B846188(&xmmword_267C5F650, (void *)xmmword_267C5F668, *((unint64_t *)&xmmword_267C5F668 + 1));
  }
  else
  {
    xmmword_267C5F650 = xmmword_267C5F668;
    unk_267C5F660 = unk_267C5F678;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F650, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EDE0);
LABEL_2:
  if (byte_267C5F667 >= 0) {
    return &xmmword_267C5F650;
  }
  else {
    return (long long *)xmmword_267C5F650;
  }
}

void sub_21B8C5F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EDF0);
  __cxa_guard_abort(&qword_267C5EDE8);
  __cxa_guard_abort(&qword_267C5EDE0);
  _Unwind_Resume(a1);
}

void sub_21B8C6020(_Unwind_Exception *a1)
{
}

void sub_21B8C6038()
{
}

void sub_21B8C6080(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C6220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C6254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C6268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C62B0()
{
  return 65792;
}

void *sub_21B8C62BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

void *sub_21B8C6320(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CB9AB18;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = v5;
  }
  LODWORD(v17[0]) = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  uint64_t v11 = *(void *)&v17[0];
  int v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(void *)((char *)v17 + 4) = v4 | (v5 << 32);
  uint64_t v13 = *(void *)&v17[0];
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)((char *)v17 + 4);
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v8 = *a3;
  sub_21B8A9E3C((uint64_t)a1, 37, (long long *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_21B8AA2CC((uint64_t)a1, v17);
  *a1 = &unk_26CB9AB18;
  return a1;
}

void sub_21B8C6424(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26CB99D08;
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v4])(v2 - 81, v1 + 16);
  }
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_21B8C6478(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C6494(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C650C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            long long v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C6790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C67AC(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          long long v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            long long v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8A9994((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C6A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C6A6C()
{
  return 37;
}

uint64_t (***sub_21B8C6A74())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C6AF0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C67AC((uint64_t)v5, a1);
      sub_21B8C67AC((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8C6BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C6BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C6C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C6C14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8C6C78(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AF38, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v25, v7);
LABEL_11:
        sub_21B8C67AC((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        v21[2] = v24;
        sub_21B8C6320(&v15, (uint64_t)&v22 + 8, v21);
        sub_21B9732E4(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26CB99D08;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 37);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8C650C((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_21B8934C4((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_21B893EEC((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_21B8C6F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C6F74(uint64_t a1)
{
  sub_21B8C650C((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C6FA0(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C650C((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C704C(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C67AC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C70F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE10, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EE10))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EE18))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE20, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EE20))
    {
LABEL_13:
      if (byte_267C5F727 < 0)
      {
        sub_21B846188(&xmmword_267C5F6F8, (void *)qword_267C5F710, unk_267C5F718);
      }
      else
      {
        xmmword_267C5F6F8 = *(_OWORD *)&qword_267C5F710;
        unk_267C5F708 = unk_267C5F720;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F6F8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE18);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE28, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EE28))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb8u>]", &qword_267C5F728);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F728, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE28);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE30, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EE30))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE38, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EE38))
      {
        if (byte_267C5F740[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F740, *(unint64_t *)&byte_267C5F740[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F740;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F758);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F758, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EE38);
      }
      if (byte_267C5F76F < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F758, *((unint64_t *)&xmmword_267C5F758 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F758;
        uint64_t v12 = unk_267C5F768;
      }
      sub_21B89F100(v11, (std::string *)&qword_267C5F710);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F710, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE20);
      goto LABEL_13;
    }
    if (byte_267C5F73F >= 0) {
      size_t v1 = byte_267C5F73F;
    }
    else {
      size_t v1 = unk_267C5F730;
    }
    if (byte_267C5F73F >= 0) {
      uint64_t v2 = &qword_267C5F728;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F728;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F740[8] = v1;
      *(void *)&byte_267C5F740[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F740 = v8;
    }
    else
    {
      int v8 = byte_267C5F740;
      byte_267C5F740[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F740, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EE30);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F70F < 0)
  {
    sub_21B846188(&xmmword_267C5F6E0, (void *)xmmword_267C5F6F8, *((unint64_t *)&xmmword_267C5F6F8 + 1));
  }
  else
  {
    xmmword_267C5F6E0 = xmmword_267C5F6F8;
    unk_267C5F6F0 = unk_267C5F708;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F6E0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EE10);
LABEL_2:
  if (byte_267C5F6F7 >= 0) {
    return &xmmword_267C5F6E0;
  }
  else {
    return (long long *)xmmword_267C5F6E0;
  }
}

void sub_21B8C7580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EE20);
  __cxa_guard_abort(&qword_267C5EE18);
  __cxa_guard_abort(&qword_267C5EE10);
  _Unwind_Resume(a1);
}

void sub_21B8C761C(_Unwind_Exception *a1)
{
}

void sub_21B8C7634()
{
}

void sub_21B8C767C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C7850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C7864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C7898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C78AC()
{
  return 65792;
}

void *sub_21B8C78B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

uint64_t sub_21B8C791C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26CB9ABA8;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v5;
  }
  *(_DWORD *)v29 = 4;
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)&v29[4] = v6;
  uint64_t v16 = *(void *)v29;
  int v17 = HIDWORD(v6);
  *(_DWORD *)v29 = 1;
  *(void *)&v29[4] = v4 | (v5 << 32);
  uint64_t v18 = *(void *)v29;
  int v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = *(void *)&v29[4];
  long long v14 = a3[1];
  long long v15 = a3[2];
  long long v13 = *a3;
  sub_21B8AC9B4(a1, (long long *)&v16);
  long long v22 = v13;
  long long v23 = v14;
  long long v24 = v15;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *v7;
  int v8 = (std::__shared_weak_count *)v7[1];
  if (v8
    && (atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else if (!v9)
  {
    goto LABEL_23;
  }
  uint64_t v10 = a1 + 16;
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  if (v11 < 2)
  {
    sub_21B973554(v25, v10);
    goto LABEL_15;
  }
  if (v11 != 2) {
LABEL_24:
  }
    sub_21B84C734();
  sub_21B973698(v25, v10);
LABEL_15:
  sub_21B8ACD58((uint64_t)v29, a1);
  v26[0] = (uint64_t)&v22;
  v26[1] = (uint64_t)v29;
  if (DWORD1(v23) == 1 && v30 == 1)
  {
    sub_21B894E9C(v26);
  }
  else
  {
    char v27 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && v23)
    {
      uint64_t v28 = &v27;
      sub_21B8957AC((uint64_t)&v28, (uint64_t)&v22, (uint64_t)v29);
    }
  }
  sub_21B9738D8(v25);
LABEL_23:
  *(void *)a1 = &unk_26CB9ABA8;
  return a1;
}

void sub_21B8C7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_21B9738D8(&a27);
  *(void *)uint64_t v27 = &unk_26CB99EB8;
  uint64_t v30 = *(unsigned int *)(v27 + 40);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9B078[v30])(v28 - 104, v27 + 16);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_21B8C7BA4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B8C7BBC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99EB8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_21B8C7C34(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26CBA1808;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AC42C(a1, (uint64_t)v18);
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26CBA1808;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C7EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21B8C7ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26CBA1808;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26CBA1808;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21B8AC42C((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26CBA1808;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26CBA1808;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_21B84C734();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_21B8C8178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_21B974934((uint64_t *)va);
  sub_21B974934((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C8194()
{
  return 38;
}

uint64_t (***sub_21B8C819C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EB38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EB38))
  {
    return off_26AD08F38;
  }
  __cxa_atexit((void (*)(void *))nullsub_47, off_26AD08F38, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EB38);
  return off_26AD08F38;
}

void sub_21B8C8218(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_21B9730A4(v6, v2);
LABEL_6:
      sub_21B8C7ED4((uint64_t)v5, a1);
      sub_21B8C7ED4((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_21B84C734();
    }
  }
  sub_21B972F60(v6, v2);
  goto LABEL_6;
}

void sub_21B8C82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D495F30](v14, 0x10A3C4049419736);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C8314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8C8328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B9732E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21B8C833C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_21B972F60(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_21B84C734();
    }
    goto LABEL_4;
  }

  return sub_21B9730A4(a2, v2);
}

void sub_21B8C83A0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9AF50, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_21B9730A4(v25, v7);
LABEL_11:
        sub_21B8C7ED4((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        v21[2] = v24;
        sub_21B8C791C((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_21B9732E4(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26CB9B078[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26CB9B0A8[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26CB99EB8;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26CB9B078[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_21B84C734();
      }
    }
    sub_21B972F60(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 38);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x21D495F30]();
  sub_21B8C7C34((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_21B894E9C((uint64_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_21B8957AC((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_21B8C8638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8C869C(uint64_t a1)
{
  sub_21B8C7C34((uint64_t)v2, a1);
  return v2[0];
}

void sub_21B8C86C8(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C7C34((uint64_t)&v3, a1);
  operator new();
}

void sub_21B8C8774(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8C7ED4((uint64_t)&v3, a1);
  operator new();
}

long long *sub_21B8C8820()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE40, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5EE40))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5EE48))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE50, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EE50))
    {
LABEL_13:
      if (byte_267C5F7B7 < 0)
      {
        sub_21B846188(&xmmword_267C5F788, (void *)qword_267C5F7A0, unk_267C5F7A8);
      }
      else
      {
        xmmword_267C5F788 = *(_OWORD *)&qword_267C5F7A0;
        unk_267C5F798 = unk_267C5F7B0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F788, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE48);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5EE58))
    {
      sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb16u>]", &qword_267C5F7B8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F7B8, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE58);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE60, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267C5EE60))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5EE68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267C5EE68))
      {
        if (byte_267C5F7D0[23] < 0) {
          sub_21B846188(&__p, *(void **)byte_267C5F7D0, *(unint64_t *)&byte_267C5F7D0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267C5F7D0;
        }
        sub_21B983920(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267C5F7E8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F7E8, &dword_21B831000);
        __cxa_guard_release(&qword_267C5EE68);
      }
      if (byte_267C5F7FF < 0)
      {
        sub_21B846188(v11, (void *)xmmword_267C5F7E8, *((unint64_t *)&xmmword_267C5F7E8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267C5F7E8;
        uint64_t v12 = unk_267C5F7F8;
      }
      sub_21B89F22C(v11, (std::string *)&qword_267C5F7A0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F7A0, &dword_21B831000);
      __cxa_guard_release(&qword_267C5EE50);
      goto LABEL_13;
    }
    if (byte_267C5F7CF >= 0) {
      size_t v1 = byte_267C5F7CF;
    }
    else {
      size_t v1 = unk_267C5F7C0;
    }
    if (byte_267C5F7CF >= 0) {
      uint64_t v2 = &qword_267C5F7B8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267C5F7B8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21B836090();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267C5F7D0[8] = v1;
      *(void *)&byte_267C5F7D0[16] = v10 | 0x8000000000000000;
      *(void *)byte_267C5F7D0 = v8;
    }
    else
    {
      int v8 = byte_267C5F7D0;
      byte_267C5F7D0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267C5F7D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5EE60);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_267C5F79F < 0)
  {
    sub_21B846188(&xmmword_267C5F770, (void *)xmmword_267C5F788, *((unint64_t *)&xmmword_267C5F788 + 1));
  }
  else
  {
    xmmword_267C5F770 = xmmword_267C5F788;
    unk_267C5F780 = unk_267C5F798;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F770, &dword_21B831000);
  __cxa_guard_release(&qword_267C5EE40);
LABEL_2:
  if (byte_267C5F787 >= 0) {
    return &xmmword_267C5F770;
  }
  else {
    return (long long *)xmmword_267C5F770;
  }
}

void sub_21B8C8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267C5EE50);
  __cxa_guard_abort(&qword_267C5EE48);
  __cxa_guard_abort(&qword_267C5EE40);
  _Unwind_Resume(a1);
}

void sub_21B8C8D44(_Unwind_Exception *a1)
{
}

void sub_21B8C8D5C()
{
}

void sub_21B8C8DA4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_21B973698(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_21B973554(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_21B84C734();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_21B9730A4(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_21B972F60(&v6, v3);
  goto LABEL_12;
}

void sub_21B8C8F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9732E4(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9732E4(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8C8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_21B9738D8(&a12);
  MEMORY[0x21D495F30](v12, 0xA1C40711E6FFCLL);
  sub_21B9738D8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8C8FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8C8FD4()
{
  return 65792;
}

void *sub_21B8C8FE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_21B973698(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_21B84C734();
    }
    return sub_21B973554(a2, v2);
  }
}

std::string *sub_21B8C9044()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BE08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BE08))
  {
    return &stru_267C5BDF0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BDF0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BDF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BE08);
  return &stru_267C5BDF0;
}

void sub_21B8C9108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BE08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BE08);
  _Unwind_Resume(a1);
}

std::string *sub_21B8C9148()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BE28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BE28))
  {
    return &stru_267C5BE10;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BE10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BE10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BE28);
  return &stru_267C5BE10;
}

void sub_21B8C920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BE28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BE28);
  _Unwind_Resume(a1);
}

std::string *sub_21B8C924C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BE48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BE48))
  {
    return &stru_267C5BE30;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5BE30);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BE30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BE48);
  return &stru_267C5BE30;
}

void sub_21B8C9310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BE48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BE48);
  _Unwind_Resume(a1);
}

void *sub_21B8C9350(void *a1)
{
  *a1 = &unk_26CB9AC38;
  sub_21B9732E4(a1 + 1);
  return a1;
}

void sub_21B8C9394(void *a1)
{
  *a1 = &unk_26CB9AC38;
  sub_21B9732E4(a1 + 1);

  JUMPOUT(0x21D495F30);
}

void *sub_21B8C93F8(void *a1)
{
  *a1 = &unk_26CB9AC58;
  sub_21B9738D8(a1 + 1);
  return a1;
}

void sub_21B8C943C(void *a1)
{
  *a1 = &unk_26CB9AC58;
  sub_21B9738D8(a1 + 1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8C94A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_21B975728(a1);
  if (v4 <= 1278226535)
  {
    if (v4 <= 843264103)
    {
      if (v4 <= 842285638)
      {
        if (v4 == 24)
        {
          int v5 = 21;
        }
        else
        {
          if (v4 != 32) {
            goto LABEL_52;
          }
          int v5 = 37;
        }
      }
      else
      {
        switch(v4)
        {
          case 842285639:
            int v5 = 17;
            break;
          case 843264056:
            int v5 = 5;
            break;
          case 843264102:
            int v5 = 8;
            break;
          default:
            goto LABEL_52;
        }
      }
      goto LABEL_49;
    }
    if (v4 <= 1111970368)
    {
      if (v4 == 843264104)
      {
        int v5 = 7;
      }
      else
      {
        if (v4 != 1094862674) {
          goto LABEL_52;
        }
        int v5 = 33;
      }
      goto LABEL_49;
    }
    if (v4 == 1111970369)
    {
      int v5 = 25;
      goto LABEL_49;
    }
    if (v4 == 1278226488)
    {
      int v5 = 1;
      goto LABEL_49;
    }
    if (v4 != 1278226534)
    {
LABEL_52:
      __cxa_allocate_exception(0x10uLL);
      sub_21B975728(a1);
      sub_21B8C97E0();
    }
  }
  else
  {
    if (v4 <= 1647589489)
    {
      if (v4 > 1380410944)
      {
        switch(v4)
        {
          case 1380410945:
            int v5 = 32;
            break;
          case 1380411457:
            int v5 = 31;
            break;
          case 1647392359:
            int v5 = 2;
            break;
          default:
            goto LABEL_52;
        }
        goto LABEL_49;
      }
      if (v4 != 1278226536)
      {
        if (v4 != 1380401729) {
          goto LABEL_52;
        }
        int v5 = 29;
        goto LABEL_49;
      }
      goto LABEL_32;
    }
    if (v4 <= 1717856626)
    {
      switch(v4)
      {
        case 1647589490:
          int v5 = 22;
          break;
        case 1647719521:
          int v5 = 38;
          break;
        case 1717855600:
          goto LABEL_28;
        default:
          goto LABEL_52;
      }
LABEL_49:
      sub_21B8CA618(a2, v5);
    }
    if (v4 != 1717856627)
    {
      if (v4 != 1751410032 && v4 != 1751411059) {
        goto LABEL_52;
      }
LABEL_32:
      int v5 = 3;
      goto LABEL_49;
    }
  }
LABEL_28:
  int v5 = 4;
  goto LABEL_49;
}

void sub_21B8C97A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_21B8C97E0()
{
  v0[6] = 0;
  sub_21B8D6488(v0, "Attempting to map iosurface of format ");
  sub_21B890CAC();
}

void sub_21B8C98E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8C98F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8C990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8C9920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8C9934(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99B58;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_21B8C99C0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D98;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_21B8C9A4C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99F48;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_21B8C9AD8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A0F8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_21B8C9B64(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99BE8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9BF0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99FD8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9C7C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A188;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9D08(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99C78;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9D94(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99C78;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9E20(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99E28;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9EAC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9F38(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8C9FC4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A068;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8CA050(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9A218;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8CA0DC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8CA168(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99D08;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

uint64_t sub_21B8CA1F4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB99EB8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x21D495F30](a1, 0x10A3C4049419736);
}

void sub_21B8CA280(uint64_t a1, void *a2)
{
  *a2 = &unk_26CBA1808;
  uint64_t v2 = (std::__shared_weak_count *)a2[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_21B8CA318(uint64_t a1, void *a2)
{
  return sub_21B9732E4(a2);
}

void *sub_21B8CA320(uint64_t a1, void *a2)
{
  return sub_21B9738D8(a2);
}

__n128 sub_21B8CA328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26CBA1808;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

__n128 sub_21B8CA354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a2 = &unk_26CBA17C8;
  return result;
}

__n128 sub_21B8CA380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a2 = &unk_26CBA17E8;
  return result;
}

void sub_21B8CA3AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26CB9B078[v5])(&v8, v4);
LABEL_7:
    *(void *)uint64_t v4 = &unk_26CBA1808;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

__n128 sub_21B8CA4B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26CB9B078[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26CBA17C8;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }

  sub_21B9731E8(a2, a3);
  return result;
}

__n128 sub_21B8CA564(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26CB9B078[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26CBA17E8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }

  sub_21B9737DC(a2, a3);
  return result;
}

void sub_21B8CA618(uint64_t a1, int a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 7:
      operator new();
    case 8:
      operator new();
    case 17:
      operator new();
    case 21:
      operator new();
    case 22:
      operator new();
    case 25:
      operator new();
    case 29:
      operator new();
    case 31:
      operator new();
    case 32:
      operator new();
    case 33:
      operator new();
    case 37:
      operator new();
    case 38:
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B8D25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  sub_21B83A360(v14 - 136);
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_21B8D300C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3044(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99B58;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40EE3858B8);
  }
  return result;
}

uint64_t sub_21B8D30D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D3148(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B120;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D31E0(void *a1)
{
  *a1 = &unk_26CB9B120;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3288()
{
  return 2;
}

uint64_t sub_21B8D3290(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B8D3298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B8D32B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D3340(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3378(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99D98;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40EE3858B8);
  }
  return result;
}

uint64_t sub_21B8D3408(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D347C(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B268;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D3514(void *a1)
{
  *a1 = &unk_26CB9B268;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D35BC()
{
  return 3;
}

uint64_t sub_21B8D35C4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B8D35CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B8D35E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D3674(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D36AC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99F48;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40EE3858B8);
  }
  return result;
}

uint64_t sub_21B8D373C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D37B0(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B3B0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D3848(void *a1)
{
  *a1 = &unk_26CB9B3B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D38F0()
{
  return 4;
}

uint64_t sub_21B8D38F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B8D3900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_21B8D391C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D39A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D39E0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB9A0F8;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C40EE3858B8);
  }
  return result;
}

uint64_t sub_21B8D3A70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D3AE4(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B4F8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D3B7C(void *a1)
{
  *a1 = &unk_26CB9B4F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3C24()
{
  return 5;
}

uint64_t sub_21B8D3C2C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D3C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D3C50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D3CDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3D14(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99BE8;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D3DA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D3E18(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B640;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D3EB0(void *a1)
{
  *a1 = &unk_26CB9B640;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D3F58()
{
  return 7;
}

uint64_t sub_21B8D3F60(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D3F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B8D3F84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D4010(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D4048(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99FD8;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D40D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D414C(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B788;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D41E4(void *a1)
{
  *a1 = &unk_26CB9B788;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D428C()
{
  return 8;
}

uint64_t sub_21B8D4294(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D429C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B8D42B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D4344(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D437C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB9A188;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D440C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D4480(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9B8D0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D4518(void *a1)
{
  *a1 = &unk_26CB9B8D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D45C0()
{
  return 17;
}

uint64_t sub_21B8D45C8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D45D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D45EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D4678(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D46B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99C78;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D4740(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D47B4(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9BA18;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D484C(void *a1)
{
  *a1 = &unk_26CB9BA18;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D48F4()
{
  return 21;
}

uint64_t sub_21B8D48FC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D4904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D4920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D49AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D49E4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99C78;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D4A74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D4AE8(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9BB60;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D4B80(void *a1)
{
  *a1 = &unk_26CB9BB60;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D4C28()
{
  return 22;
}

uint64_t sub_21B8D4C30(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D4C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B8D4C54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D4CE0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D4D18(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99E28;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D4DA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D4E1C(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9BCA8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D4EB4(void *a1)
{
  *a1 = &unk_26CB9BCA8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D4F5C()
{
  return 25;
}

uint64_t sub_21B8D4F64(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D4F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D4F88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D5014(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D504C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99D08;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D50DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D5150(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9BDF0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D51E8(void *a1)
{
  *a1 = &unk_26CB9BDF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D5290()
{
  return 29;
}

uint64_t sub_21B8D5298(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D52A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D52BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D5348(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D5380(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99D08;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D5410(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D5484(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9BF38;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D551C(void *a1)
{
  *a1 = &unk_26CB9BF38;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D55C4()
{
  return 31;
}

uint64_t sub_21B8D55CC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D55D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B8D55F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D567C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D56B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB9A068;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D5744(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D57B8(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9C080;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D5850(void *a1)
{
  *a1 = &unk_26CB9C080;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D58F8()
{
  return 32;
}

uint64_t sub_21B8D5900(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D5908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B8D5924(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D59B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D59E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB9A218;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D5A78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D5AEC(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9C1C8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D5B84(void *a1)
{
  *a1 = &unk_26CB9C1C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D5C2C()
{
  return 33;
}

uint64_t sub_21B8D5C34(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D5C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D5C58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D5CE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D5D1C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99D08;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D5DAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D5E20(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9C310;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D5EB8(void *a1)
{
  *a1 = &unk_26CB9C310;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D5F60()
{
  return 37;
}

uint64_t sub_21B8D5F68(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D5F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B8D5F8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D6018(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D6050(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99D08;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D60E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_21B8D6154(void *result)
{
  uint64_t v1 = result;
  *__n128 result = &unk_26CB9C458;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8D61EC(void *a1)
{
  *a1 = &unk_26CB9C458;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D6294()
{
  return 38;
}

uint64_t sub_21B8D629C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B8D62A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_21B8D62C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_21B8D634C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8D6384(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26CB99EB8;
    uint64_t v2 = *(unsigned int *)(v1 + 40);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9B078[v2])(&v3, v1 + 16);
    }
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x21D495F30](v1, 0x10A3C4049419736);
  }
  return result;
}

uint64_t sub_21B8D6414(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

_DWORD *sub_21B8D6488(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB9C590[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    char v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

size_t sub_21B8D657C(void **a1)
{
  uint64_t v1 = (_DWORD *)**a1;
  uint64_t v2 = (const char *)(*a1)[1];
  uint64_t v3 = v1[6];
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB9C590[v3])(&v9, v1);
  }
  v1[6] = -1;
  size_t result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    *((void *)v1 + 1) = v5;
    *((void *)v1 + 2) = v8 | 0x8000000000000000;
    *(void *)uint64_t v1 = v6;
  }
  else
  {
    *((unsigned char *)v1 + 23) = result;
    size_t v6 = v1;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((unsigned char *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_21B8D666C(uint64_t *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  uint64_t v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = v4;
  *(void *)long long v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  size_t v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  char v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    size_t v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB9C590[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21B84C93C((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_21B8D6828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8D686C(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(*(void *)a1 + 32);
  char v5 = a2[1];
  uint64_t v4 = a2[2];
  if (v5 < (void *)v4)
  {
    size_t v6 = strlen(*(const char **)(*(void *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v14 = v6 | 7;
      }
      uint64_t v15 = v14 + 1;
      size_t v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      void *v5 = v8;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v6;
      size_t v8 = v5;
      if (!v6) {
        goto LABEL_19;
      }
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((unsigned char *)v8 + v7) = 0;
    char v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v11 = 2 * v10;
  if (2 * v10 <= v9 + 1) {
    uint64_t v11 = v9 + 1;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    char v13 = (char *)operator new(24 * v12);
  }
  else
  {
    char v13 = 0;
  }
  long long v17 = &v13[24 * v9];
  size_t v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v20 = operator new(v24 + 1);
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = v25 | 0x8000000000000000;
    *(void *)long long v17 = v20;
  }
  else
  {
    v17[23] = v18;
    uint64_t v20 = v17;
    if (!v18)
    {
      uint64_t v21 = &v13[24 * v12];
      *long long v17 = 0;
      char v16 = v17 + 24;
      long long v22 = (void **)*a2;
      uint64_t v23 = (void **)a2[1];
      if (v23 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v26 = *(_OWORD *)(v23 - 3);
        *((void *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v23 = (void **)*a2;
      uint64_t v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  uint64_t v21 = &v13[24 * v12];
  *((unsigned char *)v20 + v19) = 0;
  char v16 = v17 + 24;
  long long v22 = (void **)*a2;
  uint64_t v23 = (void **)a2[1];
  if (v23 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23) {
    operator delete(v23);
  }
LABEL_39:
  a2[1] = v16;
}

void sub_21B8D6B00(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8D6B18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21B8D6B20(uint64_t a1)
{
  uint64_t result = sub_21B975728(a1);
  uint64_t v2 = (char *)&vars0;
  if ((int)result > 875836517)
  {
    if ((int)result > 1111970368)
    {
      switch(result)
      {
        case 0x42475241:
          uint64_t v3 = 4;
          break;
        case 0x4C303038:
          uint64_t v3 = 0;
          break;
        case 0x52474241:
          uint64_t v3 = 6;
          break;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(result)
      {
        case 0x34343466:
          uint64_t v3 = 10;
          break;
        case 0x34343476:
          uint64_t v3 = 9;
          break;
        case 0x41424752:
          uint64_t v3 = 5;
          break;
        default:
          goto LABEL_29;
      }
    }
  }
  else if ((int)result > 843264055)
  {
    switch(result)
    {
      case 0x32433038:
        uint64_t v3 = 11;
        break;
      case 0x34323066:
        uint64_t v3 = 8;
        break;
      case 0x34323076:
        uint64_t v3 = 7;
        break;
      default:
        goto LABEL_29;
    }
  }
  else
  {
    switch(result)
    {
      case 0x18:
        uint64_t v3 = 1;
        break;
      case 0x20:
        uint64_t v3 = 3;
        break;
      case 0x32344247:
        uint64_t v3 = 2;
        break;
      default:
        goto LABEL_29;
    }
  }
  uint64_t v2 = (char *)&v4[v3];
LABEL_29:
  if (v2 - (char *)v4 == 48)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 111, (uint64_t)"Contains(pf::formats::U8(), ref.Format())", 41, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
    if (result) {
      abort();
    }
  }
  return result;
}

void sub_21B8D6CE0()
{
}

void sub_21B8D6CF4(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  sub_21B8D8F78(a3, a1, &v3);
}

void sub_21B8D6D20(uint64_t a1, int a2, uint64_t a3)
{
  v43[2] = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      v43[0] = &unk_26CB9C630;
      if (a3 <= 0x20) {
        unsigned int v3 = 32;
      }
      else {
        unsigned int v3 = a3;
      }
      v37 = &unk_26CB9A2A8;
      if (HIDWORD(a3)) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 32;
      }
      *(void *)v39 = a3;
      *(void *)&v39[8] = (a3 != 0) | (unint64_t)(v4 << 32);
      sub_21B8A73F0((uint64_t)&v37, v39);
      v37 = &unk_26CB9A2A8;
      operator new();
    case 2:
      v43[0] = &unk_26CB9C668;
      if (a3 <= 0x10) {
        unsigned int v5 = 16;
      }
      else {
        unsigned int v5 = a3;
      }
      v37 = &unk_26CB9A338;
      if (HIDWORD(a3)) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 16;
      }
      *(void *)v39 = a3;
      *(void *)&v39[8] = (a3 != 0) | (unint64_t)(v6 << 32);
      sub_21B8AB2EC((uint64_t)&v37, v39);
      v37 = &unk_26CB9A338;
      operator new();
    case 3:
      v43[0] = &unk_26CB9C6A0;
      if (a3 <= 0x10) {
        unsigned int v7 = 16;
      }
      else {
        unsigned int v7 = a3;
      }
      v37 = &unk_26CB9A3C8;
      if (HIDWORD(a3)) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 16;
      }
      *(void *)v39 = a3;
      *(void *)&v39[8] = (a3 != 0) | (unint64_t)(v8 << 32);
      sub_21B8AD518((uint64_t)&v37, v39);
      v37 = &unk_26CB9A3C8;
      operator new();
    case 4:
      v43[0] = &unk_26CB9C6D8;
      if (a3 <= 8) {
        unsigned int v9 = 8;
      }
      else {
        unsigned int v9 = a3;
      }
      v37 = &unk_26CB9A458;
      if (HIDWORD(a3)) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 8;
      }
      *(void *)v39 = a3;
      *(void *)&v39[8] = (a3 != 0) | (unint64_t)(v10 << 32);
      sub_21B8AF7E8((uint64_t)&v37, v39);
      v37 = &unk_26CB9A458;
      operator new();
    case 5:
      v38 = &unk_26CB9C710;
      uint64_t v11 = 2 * (a3 != 0);
      LODWORD(v12) = v11 * a3;
      if ((v11 * a3) <= 0x20) {
        LODWORD(v12) = 32;
      }
      v37 = &unk_26CB9A4E8;
      if (HIDWORD(a3)) {
        unint64_t v12 = v12;
      }
      else {
        unint64_t v12 = 32;
      }
      *(_DWORD *)v39 = 2;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v11 & 0x1FFFFFFFFLL | ((unint64_t)(v12 >> 1) << 33);
      *(void *)&v39[12] = v43[0];
      int v40 = v12;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A7EDC((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A4E8;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 30:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)&unk_21B997215, 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_21B984AC4);
      abort();
    case 7:
      v38 = &unk_26CB9C748;
      uint64_t v13 = 2 * (a3 != 0);
      LODWORD(v14) = v13 * a3;
      if ((v13 * a3) <= 0x10) {
        LODWORD(v14) = 16;
      }
      v37 = &unk_26CB9A578;
      if (HIDWORD(a3)) {
        unint64_t v14 = v14;
      }
      else {
        unint64_t v14 = 16;
      }
      *(_DWORD *)v39 = 2;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
      *(void *)&v39[12] = v43[0];
      int v40 = v14;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8AE0A0((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A578;
      operator new();
    case 8:
      v38 = &unk_26CB9C780;
      uint64_t v15 = 2 * (a3 != 0);
      LODWORD(v16) = v15 * a3;
      if ((v15 * a3) <= 8) {
        LODWORD(v16) = 8;
      }
      v37 = &unk_26CB9A608;
      if (HIDWORD(a3)) {
        unint64_t v16 = v16;
      }
      else {
        unint64_t v16 = 8;
      }
      *(_DWORD *)v39 = 2;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v15 & 0x1FFFFFFFFLL | ((unint64_t)(v16 >> 1) << 33);
      *(void *)&v39[12] = v43[0];
      int v40 = v16;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8B0370((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A608;
      operator new();
    case 17:
      v38 = &unk_26CB9C7B8;
      if (a3) {
        uint64_t v17 = 3;
      }
      else {
        uint64_t v17 = 0;
      }
      LODWORD(v18) = v17 * a3;
      if ((v17 * a3) <= 0x20) {
        LODWORD(v18) = 32;
      }
      v37 = &unk_26CB9A698;
      if (HIDWORD(a3)) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 32;
      }
      *(void *)v39 = __PAIR64__(a3, 3);
      *(_DWORD *)&v39[8] = HIDWORD(a3);
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v17 | (v18 << 32);
      *(void *)&v39[12] = v43[0];
      int v40 = v18;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A89C8((uint64_t)&v37, 17, (long long *)v39);
      v37 = &unk_26CB9A698;
      operator new();
    case 21:
      v38 = &unk_26CB9C7F0;
      if (a3) {
        uint64_t v19 = 3;
      }
      else {
        uint64_t v19 = 0;
      }
      LODWORD(v20) = v19 * a3;
      if ((v19 * a3) <= 0x20) {
        LODWORD(v20) = 32;
      }
      v37 = &unk_26CB9A728;
      if (HIDWORD(a3)) {
        uint64_t v20 = v20;
      }
      else {
        uint64_t v20 = 32;
      }
      *(void *)v39 = __PAIR64__(a3, 3);
      *(_DWORD *)&v39[8] = HIDWORD(a3);
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v19 | (v20 << 32);
      *(void *)&v39[12] = v43[0];
      int v40 = v20;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A89C8((uint64_t)&v37, 21, (long long *)v39);
      v37 = &unk_26CB9A728;
      operator new();
    case 22:
      v38 = &unk_26CB9C828;
      if (a3) {
        uint64_t v21 = 3;
      }
      else {
        uint64_t v21 = 0;
      }
      LODWORD(v22) = v21 * a3;
      if ((v21 * a3) <= 0x10) {
        LODWORD(v22) = 16;
      }
      v37 = &unk_26CB9A7B8;
      if (HIDWORD(a3)) {
        uint64_t v22 = v22;
      }
      else {
        uint64_t v22 = 16;
      }
      *(void *)v39 = __PAIR64__(a3, 3);
      *(_DWORD *)&v39[8] = HIDWORD(a3);
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v21 | (v22 << 32);
      *(void *)&v39[12] = v43[0];
      int v40 = v22;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8ABE5C((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A7B8;
      operator new();
    case 25:
      v38 = &unk_26CB9C860;
      uint64_t v23 = 4 * (a3 != 0);
      LODWORD(v24) = v23 * a3;
      if ((v23 * a3) <= 0x20) {
        LODWORD(v24) = 32;
      }
      v37 = &unk_26CB9A848;
      if (HIDWORD(a3)) {
        unint64_t v24 = v24;
      }
      else {
        unint64_t v24 = 32;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v23 & 0x3FFFFFFFFLL | ((unint64_t)(v24 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v24;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A9E3C((uint64_t)&v37, 25, (long long *)v39);
      v37 = &unk_26CB9A848;
      operator new();
    case 29:
      v38 = &unk_26CB9C898;
      uint64_t v25 = 4 * (a3 != 0);
      LODWORD(v26) = v25 * a3;
      if ((v25 * a3) <= 0x20) {
        LODWORD(v26) = 32;
      }
      v37 = &unk_26CB9A8D8;
      if (HIDWORD(a3)) {
        unint64_t v26 = v26;
      }
      else {
        unint64_t v26 = 32;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v25 & 0x3FFFFFFFFLL | ((unint64_t)(v26 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v26;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A9E3C((uint64_t)&v37, 29, (long long *)v39);
      v37 = &unk_26CB9A8D8;
      operator new();
    case 31:
      v38 = &unk_26CB9C8D0;
      uint64_t v27 = 4 * (a3 != 0);
      LODWORD(v28) = v27 * a3;
      if ((v27 * a3) <= 0x10) {
        LODWORD(v28) = 16;
      }
      v37 = &unk_26CB9A968;
      if (HIDWORD(a3)) {
        unint64_t v28 = v28;
      }
      else {
        unint64_t v28 = 16;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v27 & 0x3FFFFFFFFLL | ((unint64_t)(v28 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v28;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8AEC84((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A968;
      operator new();
    case 32:
      v38 = &unk_26CB9C908;
      uint64_t v35 = 4 * (a3 != 0);
      LODWORD(v36) = v35 * a3;
      if ((v35 * a3) <= 8) {
        LODWORD(v36) = 8;
      }
      v37 = &unk_26CB9A9F8;
      if (HIDWORD(a3)) {
        unint64_t v36 = v36;
      }
      else {
        unint64_t v36 = 8;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v35 & 0x3FFFFFFFFLL | ((unint64_t)(v36 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v36;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8B0F54((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9A9F8;
      operator new();
    case 33:
      v38 = &unk_26CB9C940;
      uint64_t v29 = 4 * (a3 != 0);
      LODWORD(v30) = v29 * a3;
      if ((v29 * a3) <= 0x20) {
        LODWORD(v30) = 32;
      }
      v37 = &unk_26CB9AA88;
      if (HIDWORD(a3)) {
        unint64_t v30 = v30;
      }
      else {
        unint64_t v30 = 32;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v29 & 0x3FFFFFFFFLL | ((unint64_t)(v30 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v30;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A9E3C((uint64_t)&v37, 33, (long long *)v39);
      v37 = &unk_26CB9AA88;
      operator new();
    case 37:
      v38 = &unk_26CB9C978;
      uint64_t v31 = 4 * (a3 != 0);
      LODWORD(v32) = v31 * a3;
      if ((v31 * a3) <= 0x20) {
        LODWORD(v32) = 32;
      }
      v37 = &unk_26CB9AB18;
      if (HIDWORD(a3)) {
        unint64_t v32 = v32;
      }
      else {
        unint64_t v32 = 32;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v31 & 0x3FFFFFFFFLL | ((unint64_t)(v32 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v32;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8A9E3C((uint64_t)&v37, 37, (long long *)v39);
      v37 = &unk_26CB9AB18;
      operator new();
    case 38:
      v38 = &unk_26CB9C9B0;
      uint64_t v33 = 4 * (a3 != 0);
      LODWORD(v34) = v33 * a3;
      if ((v33 * a3) <= 0x10) {
        LODWORD(v34) = 16;
      }
      v37 = &unk_26CB9ABA8;
      if (HIDWORD(a3)) {
        unint64_t v34 = v34;
      }
      else {
        unint64_t v34 = 16;
      }
      *(_DWORD *)v39 = 4;
      *(void *)&v39[4] = a3;
      LODWORD(v43[0]) = 1;
      *(void *)((char *)v43 + 4) = v33 & 0x3FFFFFFFFLL | ((unint64_t)(v34 >> 2) << 34);
      *(void *)&v39[12] = v43[0];
      int v40 = v34;
      uint64_t v41 = a3;
      uint64_t v42 = *(void *)((char *)v43 + 4);
      sub_21B8AC9B4((uint64_t)&v37, (long long *)v39);
      v37 = &unk_26CB9ABA8;
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B8D88E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8D8F78(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v197 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      v168[0] = &unk_26CB9C630;
      LODWORD(v3) = *a3;
      int v4 = a3[1];
      BOOL v5 = *a3 != 0;
      if (*a3 <= 0x20u) {
        LODWORD(v3) = 32;
      }
      uint64_t v6 = *(void *)a3;
      v183 = &unk_26CB9A2A8;
      if (v4) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = 32;
      }
      v173 = (__int16 *)v6;
      v174 = (unint64_t *)(v5 | (v3 << 32));
      LOBYTE(v181) = 0;
      sub_21B8A73F0((uint64_t)&v183, &v173);
      if (v186 > 2) {
        goto LABEL_340;
      }
      if (v185)
      {
        uint64_t v8 = *v185;
        unsigned int v7 = (std::__shared_weak_count *)v185[1];
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_340:
            }
              sub_21B84C734();
            sub_21B973698(v192, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(v192, (uint64_t)&v184);
          }
          sub_21B8A77B4((uint64_t *)v187, (uint64_t)&v183);
          v176 = (__int16 **)v187;
          v177 = &v181;
          sub_21B892CFC(&v176);
          sub_21B9738D8(v192);
        }
      }
      v183 = &unk_26CB9A2A8;
      operator new();
    case 2:
      v168[0] = &unk_26CB9C668;
      LODWORD(v40) = *a3;
      int v41 = a3[1];
      BOOL v42 = *a3 != 0;
      if (*a3 <= 0x10u) {
        LODWORD(v40) = 16;
      }
      uint64_t v43 = *(void *)a3;
      v183 = &unk_26CB9A338;
      if (v41) {
        uint64_t v40 = v40;
      }
      else {
        uint64_t v40 = 16;
      }
      v173 = (__int16 *)v43;
      v174 = (unint64_t *)(v42 | (v40 << 32));
      LOWORD(v181) = 0;
      sub_21B8AB2EC((uint64_t)&v183, &v173);
      if (v186 > 2) {
        goto LABEL_339;
      }
      if (!v185) {
        goto LABEL_318;
      }
      uint64_t v45 = *v185;
      v44 = (std::__shared_weak_count *)v185[1];
      if (v44)
      {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (!v45) {
        goto LABEL_318;
      }
      if (v186 >= 2)
      {
        if (v186 != 2) {
LABEL_339:
        }
          sub_21B84C734();
        sub_21B973698(v192, (uint64_t)&v184);
      }
      else
      {
        sub_21B973554(v192, (uint64_t)&v184);
      }
      sub_21B8AB654((uint64_t *)v187, (uint64_t)&v183);
      v176 = (__int16 **)v187;
      v177 = &v181;
      uint64_t v116 = HIDWORD(v188);
      if (HIDWORD(v188) == 1)
      {
        sub_21B89403C((uint64_t)&v176);
LABEL_317:
        sub_21B9738D8(v192);
LABEL_318:
        v183 = &unk_26CB9A338;
        operator new();
      }
      if (!*(_DWORD *)&v187[8] || !v188) {
        goto LABEL_317;
      }
      int v117 = *(_DWORD *)&v187[8] - 1;
      v118 = *(_WORD **)v187;
      int v119 = v188 - 1;
      if (v188 == 1) {
        goto LABEL_215;
      }
      uint64_t v120 = v189;
      if (*(_DWORD *)&v187[8] == 1)
      {
        do
        {
          _WORD *v118 = v181;
          v118 += v120;
          --v119;
        }
        while (v119);
      }
      else
      {
        int v121 = 0;
        uint64_t v122 = 2 * v189;
        do
        {
          v123 = v118;
          int v124 = v117;
          do
          {
            _WORD *v123 = v181;
            v123 += v116;
            --v124;
          }
          while (v124);
          _WORD *v123 = v181;
          v118 = (_WORD *)((char *)v118 + v122);
          ++v121;
        }
        while (v121 != v119);
LABEL_215:
        if (v117)
        {
          uint64_t v125 = 2 * v116;
          do
          {
            _WORD *v118 = v181;
            v118 = (_WORD *)((char *)v118 + v125);
            --v117;
          }
          while (v117);
        }
      }
      _WORD *v118 = v181;
      goto LABEL_317;
    case 3:
      v168[0] = &unk_26CB9C6A0;
      LODWORD(v34) = *a3;
      int v35 = a3[1];
      BOOL v36 = *a3 != 0;
      if (*a3 <= 0x10u) {
        LODWORD(v34) = 16;
      }
      uint64_t v37 = *(void *)a3;
      v183 = &unk_26CB9A3C8;
      if (v35) {
        uint64_t v34 = v34;
      }
      else {
        uint64_t v34 = 16;
      }
      v173 = (__int16 *)v37;
      v174 = (unint64_t *)(v36 | (v34 << 32));
      LOWORD(v181) = 0;
      sub_21B8AD518((uint64_t)&v183, &v173);
      if (v186 > 2) {
        goto LABEL_338;
      }
      if (v185)
      {
        uint64_t v39 = *v185;
        v38 = (std::__shared_weak_count *)v185[1];
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (v39)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_338:
            }
              sub_21B84C734();
            sub_21B973698(v192, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(v192, (uint64_t)&v184);
          }
          sub_21B8AD880((uint64_t *)v187, (uint64_t)&v183);
          v176 = (__int16 **)v187;
          v177 = &v181;
          if (HIDWORD(v188) == 1)
          {
            sub_21B895924(&v176, v106);
          }
          else if (*(_DWORD *)&v187[8] && v188)
          {
            int v107 = *(_DWORD *)&v187[8] - 1;
            v108 = *(_WORD **)v187;
            uint64_t v109 = 2 * HIDWORD(v188);
            int v110 = v188 - 1;
            if (v188 != 1)
            {
              uint64_t v111 = v189;
              if (*(_DWORD *)&v187[8] == 1)
              {
                do
                {
                  _WORD *v108 = v181;
                  v108 += v111;
                  --v110;
                }
                while (v110);
              }
              else
              {
                int v112 = 0;
                uint64_t v113 = 2 * v189;
                do
                {
                  v114 = v108;
                  int v115 = v107;
                  do
                  {
                    _WORD *v114 = v181;
                    v114 = (_WORD *)((char *)v114 + v109);
                    --v115;
                  }
                  while (v115);
                  _WORD *v114 = v181;
                  v108 = (_WORD *)((char *)v108 + v113);
                  ++v112;
                }
                while (v112 != v110);
              }
            }
            for (; v107; --v107)
            {
              _WORD *v108 = v181;
              v108 = (_WORD *)((char *)v108 + v109);
            }
            _WORD *v108 = v181;
          }
          sub_21B9738D8(v192);
        }
      }
      v183 = &unk_26CB9A3C8;
      operator new();
    case 4:
      v168[0] = &unk_26CB9C6D8;
      LODWORD(v79) = *a3;
      int v80 = a3[1];
      BOOL v81 = *a3 != 0;
      if (*a3 <= 8u) {
        LODWORD(v79) = 8;
      }
      uint64_t v82 = *(void *)a3;
      v183 = &unk_26CB9A458;
      if (v80) {
        uint64_t v79 = v79;
      }
      else {
        uint64_t v79 = 8;
      }
      v173 = (__int16 *)v82;
      v174 = (unint64_t *)(v81 | (v79 << 32));
      LODWORD(v181) = 0;
      sub_21B8AF7E8((uint64_t)&v183, &v173);
      if (v186 > 2) {
        goto LABEL_345;
      }
      if (!v185) {
        goto LABEL_329;
      }
      uint64_t v84 = *v185;
      v83 = (std::__shared_weak_count *)v185[1];
      if (v83)
      {
        atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (!v84) {
        goto LABEL_329;
      }
      if (v186 >= 2)
      {
        if (v186 != 2) {
LABEL_345:
        }
          sub_21B84C734();
        sub_21B973698(v192, (uint64_t)&v184);
      }
      else
      {
        sub_21B973554(v192, (uint64_t)&v184);
      }
      sub_21B8AFB50((uint64_t *)v187, (uint64_t)&v183);
      v176 = (__int16 **)v187;
      v177 = &v181;
      uint64_t v137 = HIDWORD(v188);
      if (HIDWORD(v188) == 1)
      {
        sub_21B897634((uint64_t)&v176);
LABEL_328:
        sub_21B9738D8(v192);
LABEL_329:
        v183 = &unk_26CB9A458;
        operator new();
      }
      if (!*(_DWORD *)&v187[8] || !v188) {
        goto LABEL_328;
      }
      int v138 = *(_DWORD *)&v187[8] - 1;
      v139 = *(_DWORD **)v187;
      int v140 = v188 - 1;
      if (v188 == 1) {
        goto LABEL_261;
      }
      uint64_t v141 = v189;
      if (*(_DWORD *)&v187[8] == 1)
      {
        do
        {
          _DWORD *v139 = v181;
          v139 += v141;
          --v140;
        }
        while (v140);
      }
      else
      {
        int v142 = 0;
        uint64_t v143 = 4 * v189;
        do
        {
          v144 = v139;
          int v145 = v138;
          do
          {
            _DWORD *v144 = v181;
            v144 += v137;
            --v145;
          }
          while (v145);
          _DWORD *v144 = v181;
          v139 = (_DWORD *)((char *)v139 + v143);
          ++v142;
        }
        while (v142 != v140);
LABEL_261:
        if (v138)
        {
          uint64_t v146 = 4 * v137;
          do
          {
            _DWORD *v139 = v181;
            v139 = (_DWORD *)((char *)v139 + v146);
            --v138;
          }
          while (v138);
        }
      }
      _DWORD *v139 = v181;
      goto LABEL_328;
    case 5:
      v168[0] = &unk_26CB9C710;
      int v46 = a3[1];
      uint64_t v47 = 2 * (*a3 != 0);
      LODWORD(v48) = v47 * *a3;
      if (v48 <= 0x20) {
        LODWORD(v48) = 32;
      }
      uint64_t v49 = *(void *)a3;
      uint64_t v50 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A4E8;
      if (v46) {
        unint64_t v48 = v48;
      }
      else {
        unint64_t v48 = 32;
      }
      *(_DWORD *)v192 = 2;
      *(_DWORD *)&v192[4] = v49;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v47 & 0x1FFFFFFFFLL | ((unint64_t)(v48 >> 1) << 33);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v50;
      unsigned int v189 = v48;
      uint64_t v190 = v49;
      uint64_t v191 = *(void *)&v192[4];
      LOBYTE(v181) = 0;
      sub_21B8A7EDC((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_341;
      }
      if (v185)
      {
        uint64_t v52 = *v185;
        v51 = (std::__shared_weak_count *)v185[1];
        if (v51)
        {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (v52)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_341:
            }
              sub_21B84C734();
            sub_21B973698(&v176, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(&v176, (uint64_t)&v184);
          }
          sub_21B8A8280((uint64_t)v192, (uint64_t)&v183);
          v173 = (__int16 *)v192;
          v174 = &v181;
          if (v194 == 1)
          {
            sub_21B8931E8(&v173);
          }
          else if (*(_DWORD *)&v192[8] && v193 && HIDWORD(v193))
          {
            int v126 = v193 - 1;
            uint64_t v127 = v195;
            v128 = *(unsigned char **)v192;
            int v129 = HIDWORD(v193) - 1;
            if (HIDWORD(v193) != 1)
            {
              uint64_t v130 = HIDWORD(v195);
              if (v193 == 1)
              {
                char v162 = v181;
                do
                {
                  unsigned char *v128 = v162;
                  char v162 = v181;
                  v128[1] = v181;
                  v128 += v130;
                  --v129;
                }
                while (v129);
              }
              else
              {
                int v131 = 0;
                uint64_t v132 = *(void *)v192 + 1;
                do
                {
                  char v133 = v181;
                  v134 = (unsigned char *)v132;
                  int v135 = v126;
                  do
                  {
                    *(v134 - 1) = v133;
                    char v133 = v181;
                    unsigned char *v134 = v181;
                    v134 += v127;
                    --v135;
                  }
                  while (v135);
                  *(v134 - 1) = v133;
                  unsigned char *v134 = v181;
                  v128 += v130;
                  ++v131;
                  v132 += v130;
                }
                while (v131 != v129);
              }
            }
            for (char i = v181; v126; --v126)
            {
              unsigned char *v128 = i;
              char i = v181;
              v128[1] = v181;
              v128 += v127;
            }
            unsigned char *v128 = i;
            v128[1] = v181;
          }
          sub_21B9738D8(&v176);
        }
      }
      v183 = &unk_26CB9A4E8;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 30:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)&unk_21B997215, 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_21B984AC4);
      abort();
    case 7:
      int v85 = a3[1];
      uint64_t v86 = 2 * (*a3 != 0);
      LODWORD(v87) = v86 * *a3;
      if (v87 <= 0x10) {
        LODWORD(v87) = 16;
      }
      uint64_t v88 = *(void *)a3;
      uint64_t v89 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A578;
      if (v85) {
        unint64_t v87 = v87;
      }
      else {
        unint64_t v87 = 16;
      }
      *(_DWORD *)v192 = 2;
      *(_DWORD *)&v192[4] = v88;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v86 & 0x1FFFFFFFFLL | ((unint64_t)(v87 >> 1) << 33);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v89;
      unsigned int v189 = v87;
      uint64_t v190 = v88;
      uint64_t v191 = *(void *)&v192[4];
      __int16 v167 = 0;
      sub_21B8AE0A0((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_346;
      }
      if (v185)
      {
        uint64_t v91 = *v185;
        v90 = (std::__shared_weak_count *)v185[1];
        if (v90)
        {
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        if (v91)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_346:
            }
              sub_21B84C734();
            sub_21B973698(v168, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(v168, (uint64_t)&v184);
          }
          sub_21B8AE444((uint64_t)v192, (uint64_t)&v183);
          v169 = v192;
          v170 = &v167;
          if (v194 == 1)
          {
            if (v195 == *(_DWORD *)&v192[8])
            {
              sub_21B896170(&v169, v147);
            }
            else
            {
              char v172 = 0;
              uint64_t v171 = *(unsigned int *)&v192[8];
              v173 = (__int16 *)&v172;
              v174 = (unint64_t *)&v171;
              v175 = &v167;
              if (*(_DWORD *)&v192[8] && v193 && HIDWORD(v193))
              {
                LODWORD(v176) = 0;
                HIDWORD(v176) = *(_DWORD *)&v192[8] - 1;
                LODWORD(v177) = 1;
                HIDWORD(v177) = v193 - 1;
                unsigned int v180 = HIDWORD(v195);
                unint64_t v158 = *(void *)v192;
                unint64_t v181 = 0;
                uint64_t v182 = 0;
                int v178 = v195;
                unsigned int v179 = HIDWORD(v193) - 1;
                if (HIDWORD(v193) != 1)
                {
                  unsigned int v159 = 0;
                  do
                  {
                    v147.n128_u64[0] = sub_21B89655C((uint64_t)&v176, &v181, (uint64_t)&v173, v158, v147);
                    v158 += 2 * v180;
                    ++v159;
                  }
                  while (v159 < v179);
                }
                sub_21B89655C((uint64_t)&v176, &v181, (uint64_t)&v173, v158, v147);
              }
            }
          }
          else if (*(_DWORD *)&v192[8] && v193 && HIDWORD(v193))
          {
            int v148 = v193 - 1;
            v149 = *(_WORD **)v192;
            uint64_t v150 = 2 * v195;
            int v151 = HIDWORD(v193) - 1;
            if (HIDWORD(v193) != 1)
            {
              uint64_t v152 = HIDWORD(v195);
              if (v193 == 1)
              {
                __int16 v164 = v167;
                uint64_t v165 = 2 * HIDWORD(v195);
                do
                {
                  _WORD *v149 = v164;
                  __int16 v164 = v167;
                  v149[1] = v167;
                  v149 = (_WORD *)((char *)v149 + v165);
                  --v151;
                }
                while (v151);
              }
              else
              {
                int v153 = 0;
                uint64_t v154 = *(void *)v192 + 2;
                do
                {
                  __int16 v155 = v167;
                  v156 = (_WORD *)v154;
                  int v157 = v148;
                  do
                  {
                    *(v156 - 1) = v155;
                    __int16 v155 = v167;
                    _WORD *v156 = v167;
                    v156 = (_WORD *)((char *)v156 + v150);
                    --v157;
                  }
                  while (v157);
                  *(v156 - 1) = v155;
                  _WORD *v156 = v167;
                  v149 += v152;
                  ++v153;
                  v154 += 2 * v152;
                }
                while (v153 != v151);
              }
            }
            for (__int16 j = v167; v148; --v148)
            {
              _WORD *v149 = j;
              __int16 j = v167;
              v149[1] = v167;
              v149 = (_WORD *)((char *)v149 + v150);
            }
            _WORD *v149 = j;
            v149[1] = v167;
          }
          sub_21B9738D8(v168);
        }
      }
      v183 = &unk_26CB9A578;
      operator new();
    case 8:
      v168[0] = &unk_26CB9C780;
      int v58 = a3[1];
      uint64_t v59 = 2 * (*a3 != 0);
      LODWORD(v60) = v59 * *a3;
      if (v60 <= 8) {
        LODWORD(v60) = 8;
      }
      uint64_t v61 = *(void *)a3;
      uint64_t v62 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A608;
      if (v58) {
        unint64_t v60 = v60;
      }
      else {
        unint64_t v60 = 8;
      }
      *(_DWORD *)v192 = 2;
      *(_DWORD *)&v192[4] = v61;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v59 & 0x1FFFFFFFFLL | ((unint64_t)(v60 >> 1) << 33);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v62;
      unsigned int v189 = v60;
      uint64_t v190 = v61;
      uint64_t v191 = *(void *)&v192[4];
      LODWORD(v181) = 0;
      sub_21B8B0370((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_342;
      }
      if (v185)
      {
        uint64_t v64 = *v185;
        v63 = (std::__shared_weak_count *)v185[1];
        if (v63)
        {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (v64)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_342:
            }
              sub_21B84C734();
            sub_21B973698(&v176, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(&v176, (uint64_t)&v184);
          }
          sub_21B8B0714((uint64_t)v192, (uint64_t)&v183);
          v173 = (__int16 *)v192;
          v174 = &v181;
          sub_21B897DA8((uint64_t *)&v173);
          sub_21B9738D8(&v176);
        }
      }
      v183 = &unk_26CB9A608;
      operator new();
    case 17:
      v176 = (__int16 **)&unk_26CB9C7B8;
      int v53 = a3[1];
      if (*a3) {
        uint64_t v54 = 3;
      }
      else {
        uint64_t v54 = 0;
      }
      LODWORD(v55) = v54 * *a3;
      if (v55 <= 0x20) {
        LODWORD(v55) = 32;
      }
      uint64_t v56 = *(void *)a3;
      uint64_t v57 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A698;
      if (v53) {
        uint64_t v55 = v55;
      }
      else {
        uint64_t v55 = 32;
      }
      *(_DWORD *)&v192[4] = v56;
      *(_DWORD *)v192 = 3;
      *(_DWORD *)&v192[8] = v57;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v54 | (v55 << 32);
      uint64_t v193 = *(void *)v187;
      int v194 = v55;
      uint64_t v195 = v56;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A89C8((uint64_t)&v183, 17, (long long *)v192);
      sub_21B8A8CC4((uint64_t)&v183, &v173);
      v183 = &unk_26CB9A698;
      operator new();
    case 21:
      v176 = (__int16 **)&unk_26CB9C7F0;
      int v24 = a3[1];
      if (*a3) {
        uint64_t v25 = 3;
      }
      else {
        uint64_t v25 = 0;
      }
      LODWORD(v26) = v25 * *a3;
      if (v26 <= 0x20) {
        LODWORD(v26) = 32;
      }
      uint64_t v27 = *(void *)a3;
      uint64_t v28 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A728;
      if (v24) {
        uint64_t v26 = v26;
      }
      else {
        uint64_t v26 = 32;
      }
      *(_DWORD *)&v192[4] = v27;
      *(_DWORD *)v192 = 3;
      *(_DWORD *)&v192[8] = v28;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v25 | (v26 << 32);
      uint64_t v193 = *(void *)v187;
      int v194 = v26;
      uint64_t v195 = v27;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A89C8((uint64_t)&v183, 21, (long long *)v192);
      sub_21B8A8CC4((uint64_t)&v183, &v173);
      v183 = &unk_26CB9A728;
      operator new();
    case 22:
      int v92 = a3[1];
      if (*a3) {
        uint64_t v93 = 3;
      }
      else {
        uint64_t v93 = 0;
      }
      LODWORD(v94) = v93 * *a3;
      if (v94 <= 0x10) {
        LODWORD(v94) = 16;
      }
      uint64_t v95 = *(void *)a3;
      uint64_t v96 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A7B8;
      if (v92) {
        uint64_t v94 = v94;
      }
      else {
        uint64_t v94 = 16;
      }
      *(_DWORD *)v192 = 3;
      *(_DWORD *)&v192[4] = v95;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v93 | (v94 << 32);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v96;
      unsigned int v189 = v94;
      uint64_t v190 = v95;
      uint64_t v191 = *(void *)&v192[4];
      __int16 v167 = 0;
      sub_21B8ABE5C((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_347;
      }
      if (v185)
      {
        uint64_t v98 = *v185;
        v97 = (std::__shared_weak_count *)v185[1];
        if (v97)
        {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        if (v98)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_347:
            }
              sub_21B84C734();
            sub_21B973698(v168, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(v168, (uint64_t)&v184);
          }
          sub_21B8AC200((uint64_t)v192, (uint64_t)&v183);
          v169 = v192;
          v170 = &v167;
          if (v194 == 1)
          {
            if (v195 == *(_DWORD *)&v192[8])
            {
              sub_21B89476C((uint64_t)&v169);
            }
            else
            {
              char v172 = 0;
              uint64_t v171 = *(unsigned int *)&v192[8];
              v173 = (__int16 *)&v172;
              v174 = (unint64_t *)&v171;
              v175 = &v167;
              if (*(_DWORD *)&v192[8] && v193 && HIDWORD(v193))
              {
                LODWORD(v176) = 0;
                HIDWORD(v176) = *(_DWORD *)&v192[8] - 1;
                LODWORD(v177) = 1;
                HIDWORD(v177) = v193 - 1;
                unsigned int v180 = HIDWORD(v195);
                unint64_t v160 = *(void *)v192;
                unint64_t v181 = 0;
                uint64_t v182 = 0;
                int v178 = v195;
                unsigned int v179 = HIDWORD(v193) - 1;
                if (HIDWORD(v193) != 1)
                {
                  unsigned int v161 = 0;
                  do
                  {
                    sub_21B894B58((uint64_t)&v176, &v181, (uint64_t)&v173, v160);
                    v160 += 2 * v180;
                    ++v161;
                  }
                  while (v161 < v179);
                }
                sub_21B894B58((uint64_t)&v176, &v181, (uint64_t)&v173, v160);
              }
            }
          }
          else
          {
            v173 = &v167;
            if (*(_DWORD *)&v192[8] && v193 && HIDWORD(v193))
            {
              v176 = &v173;
              sub_21B894D74(&v176, (uint64_t)v192);
            }
          }
          sub_21B9738D8(v168);
        }
      }
      v183 = &unk_26CB9A7B8;
      operator new();
    case 25:
      v176 = (__int16 **)&unk_26CB9C860;
      int v9 = a3[1];
      uint64_t v10 = 4 * (*a3 != 0);
      LODWORD(v11) = v10 * *a3;
      if (v11 <= 0x20) {
        LODWORD(v11) = 32;
      }
      uint64_t v12 = *(void *)a3;
      uint64_t v13 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A848;
      if (v9) {
        unint64_t v11 = v11;
      }
      else {
        unint64_t v11 = 32;
      }
      *(_DWORD *)&v192[4] = v12;
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[8] = v13;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v10 & 0x3FFFFFFFFLL | ((unint64_t)(v11 >> 2) << 34);
      uint64_t v193 = *(void *)v187;
      int v194 = v11;
      uint64_t v195 = v12;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A9E3C((uint64_t)&v183, 25, (long long *)v192);
      sub_21B8AA140((uint64_t)&v183, (uint64_t)&v173);
      v183 = &unk_26CB9A848;
      operator new();
    case 29:
      v176 = (__int16 **)&unk_26CB9C898;
      int v14 = a3[1];
      uint64_t v15 = 4 * (*a3 != 0);
      LODWORD(v16) = v15 * *a3;
      if (v16 <= 0x20) {
        LODWORD(v16) = 32;
      }
      uint64_t v17 = *(void *)a3;
      uint64_t v18 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A8D8;
      if (v14) {
        unint64_t v16 = v16;
      }
      else {
        unint64_t v16 = 32;
      }
      *(_DWORD *)&v192[4] = v17;
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[8] = v18;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v15 & 0x3FFFFFFFFLL | ((unint64_t)(v16 >> 2) << 34);
      uint64_t v193 = *(void *)v187;
      int v194 = v16;
      uint64_t v195 = v17;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A9E3C((uint64_t)&v183, 29, (long long *)v192);
      sub_21B8AA140((uint64_t)&v183, (uint64_t)&v173);
      v183 = &unk_26CB9A8D8;
      operator new();
    case 31:
      v168[0] = &unk_26CB9C8D0;
      int v65 = a3[1];
      uint64_t v66 = 4 * (*a3 != 0);
      LODWORD(v67) = v66 * *a3;
      if (v67 <= 0x10) {
        LODWORD(v67) = 16;
      }
      uint64_t v68 = *(void *)a3;
      uint64_t v69 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A968;
      if (v65) {
        unint64_t v67 = v67;
      }
      else {
        unint64_t v67 = 16;
      }
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[4] = v68;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v66 & 0x3FFFFFFFFLL | ((unint64_t)(v67 >> 2) << 34);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v69;
      unsigned int v189 = v67;
      uint64_t v190 = v68;
      uint64_t v191 = *(void *)&v192[4];
      LOWORD(v181) = 0;
      sub_21B8AEC84((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_343;
      }
      if (v185)
      {
        uint64_t v71 = *v185;
        v70 = (std::__shared_weak_count *)v185[1];
        if (v70)
        {
          atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if (v71)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_343:
            }
              sub_21B84C734();
            sub_21B973698(&v176, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(&v176, (uint64_t)&v184);
          }
          sub_21B8AF028((uint64_t)v192, (uint64_t)&v183);
          v173 = (__int16 *)v192;
          v174 = &v181;
          sub_21B8970A0((uint64_t *)&v173, v136);
          sub_21B9738D8(&v176);
        }
      }
      v183 = &unk_26CB9A968;
      operator new();
    case 32:
      v168[0] = &unk_26CB9C908;
      int v99 = a3[1];
      uint64_t v100 = 4 * (*a3 != 0);
      LODWORD(v101) = v100 * *a3;
      if (v101 <= 8) {
        LODWORD(v101) = 8;
      }
      uint64_t v102 = *(void *)a3;
      uint64_t v103 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9A9F8;
      if (v99) {
        unint64_t v101 = v101;
      }
      else {
        unint64_t v101 = 8;
      }
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[4] = v102;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v100 & 0x3FFFFFFFFLL | ((unint64_t)(v101 >> 2) << 34);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v103;
      unsigned int v189 = v101;
      uint64_t v190 = v102;
      uint64_t v191 = *(void *)&v192[4];
      LODWORD(v181) = 0;
      sub_21B8B0F54((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_348;
      }
      if (v185)
      {
        uint64_t v105 = *v185;
        v104 = (std::__shared_weak_count *)v185[1];
        if (v104)
        {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        if (v105)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_348:
            }
              sub_21B84C734();
            sub_21B973698(&v176, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(&v176, (uint64_t)&v184);
          }
          sub_21B8B12F8((uint64_t)v192, (uint64_t)&v183);
          v173 = (__int16 *)v192;
          v174 = &v181;
          sub_21B898D84((uint64_t *)&v173);
          sub_21B9738D8(&v176);
        }
      }
      v183 = &unk_26CB9A9F8;
      operator new();
    case 33:
      v176 = (__int16 **)&unk_26CB9C940;
      int v29 = a3[1];
      uint64_t v30 = 4 * (*a3 != 0);
      LODWORD(v31) = v30 * *a3;
      if (v31 <= 0x20) {
        LODWORD(v31) = 32;
      }
      uint64_t v32 = *(void *)a3;
      uint64_t v33 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9AA88;
      if (v29) {
        unint64_t v31 = v31;
      }
      else {
        unint64_t v31 = 32;
      }
      *(_DWORD *)&v192[4] = v32;
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[8] = v33;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v30 & 0x3FFFFFFFFLL | ((unint64_t)(v31 >> 2) << 34);
      uint64_t v193 = *(void *)v187;
      int v194 = v31;
      uint64_t v195 = v32;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A9E3C((uint64_t)&v183, 33, (long long *)v192);
      sub_21B8AA140((uint64_t)&v183, (uint64_t)&v173);
      v183 = &unk_26CB9AA88;
      operator new();
    case 37:
      v176 = (__int16 **)&unk_26CB9C978;
      int v19 = a3[1];
      uint64_t v20 = 4 * (*a3 != 0);
      LODWORD(v21) = v20 * *a3;
      if (v21 <= 0x20) {
        LODWORD(v21) = 32;
      }
      uint64_t v22 = *(void *)a3;
      uint64_t v23 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9AB18;
      if (v19) {
        unint64_t v21 = v21;
      }
      else {
        unint64_t v21 = 32;
      }
      *(_DWORD *)&v192[4] = v22;
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[8] = v23;
      *(_DWORD *)v187 = 1;
      *(void *)&v187[4] = v20 & 0x3FFFFFFFFLL | ((unint64_t)(v21 >> 2) << 34);
      uint64_t v193 = *(void *)v187;
      int v194 = v21;
      uint64_t v195 = v22;
      uint64_t v196 = *(void *)&v187[4];
      LOBYTE(v173) = 0;
      sub_21B8A9E3C((uint64_t)&v183, 37, (long long *)v192);
      sub_21B8AA140((uint64_t)&v183, (uint64_t)&v173);
      v183 = &unk_26CB9AB18;
      operator new();
    case 38:
      v168[0] = &unk_26CB9C9B0;
      int v72 = a3[1];
      uint64_t v73 = 4 * (*a3 != 0);
      LODWORD(v74) = v73 * *a3;
      if (v74 <= 0x10) {
        LODWORD(v74) = 16;
      }
      uint64_t v75 = *(void *)a3;
      uint64_t v76 = HIDWORD(*(void *)a3);
      v183 = &unk_26CB9ABA8;
      if (v72) {
        unint64_t v74 = v74;
      }
      else {
        unint64_t v74 = 16;
      }
      *(_DWORD *)v192 = 4;
      *(_DWORD *)&v192[4] = v75;
      *(void *)v187 = *(void *)v192;
      *(_DWORD *)v192 = 1;
      *(void *)&v192[4] = v73 & 0x3FFFFFFFFLL | ((unint64_t)(v74 >> 2) << 34);
      uint64_t v188 = *(void *)v192;
      *(_DWORD *)&v187[8] = v76;
      unsigned int v189 = v74;
      uint64_t v190 = v75;
      uint64_t v191 = *(void *)&v192[4];
      LOWORD(v181) = 0;
      sub_21B8AC9B4((uint64_t)&v183, (long long *)v187);
      if (v186 > 2) {
        goto LABEL_344;
      }
      if (v185)
      {
        uint64_t v78 = *v185;
        v77 = (std::__shared_weak_count *)v185[1];
        if (v77)
        {
          atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v78)
        {
          if (v186 >= 2)
          {
            if (v186 != 2) {
LABEL_344:
            }
              sub_21B84C734();
            sub_21B973698(&v176, (uint64_t)&v184);
          }
          else
          {
            sub_21B973554(&v176, (uint64_t)&v184);
          }
          sub_21B8ACD58((uint64_t)v192, (uint64_t)&v183);
          v173 = (__int16 *)v192;
          v174 = &v181;
          sub_21B8954C8((uint64_t)&v173);
          sub_21B9738D8(&v176);
        }
      }
      v183 = &unk_26CB9ABA8;
      operator new();
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_21B997215, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B8DBB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  sub_21B9738D8(&a12);
  a28 = &unk_26CB99FD8;
  if (a33 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_26CB9B078[a33])(v33 - 104, &a30);
  }
  _Unwind_Resume(a1);
}

void sub_21B8DC3B0()
{
}

void sub_21B8DC3C8()
{
}

void sub_21B8DC3E0()
{
}

void sub_21B8DC3F8()
{
}

void sub_21B8DC410()
{
}

void sub_21B8DC428()
{
}

void sub_21B8DC440()
{
}

void sub_21B8DC458()
{
}

void sub_21B8DC470()
{
}

void sub_21B8DC488()
{
}

void sub_21B8DC4A0()
{
}

void sub_21B8DC4B8()
{
}

void sub_21B8DC4D0()
{
}

void sub_21B8DC4E8()
{
}

void sub_21B8DC500()
{
}

void sub_21B8DC518()
{
}

void sub_21B8DC530()
{
}

void sub_21B8DC544(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B8C9044();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    int v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B8DC644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8DC670(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B8C9148();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    int v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B8DC770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8DC79C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = sub_21B8C924C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    int v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B8DC89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B8DC8C8()
{
}

void sub_21B8DCA60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  sub_21B83A360(v3);
  sub_21B83A360(v1);
  MEMORY[0x21D495F30](v1, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8DCB3C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (std::__shared_weak_count *)(*a1)[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = v1[4];
  long long v5 = (std::__shared_weak_count *)v1[5];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v2)
    {
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      int64x2_t v6 = v5;
LABEL_8:
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_9;
    }
  }
  else if (!v2)
  {
    uint64_t v9 = v1[4];
    uint64_t v10 = 0;
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  int64x2_t v6 = v3;
  if (v3) {
    goto LABEL_8;
  }
LABEL_9:
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v3)
  {
LABEL_13:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_15:
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

void sub_21B8DCCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8DCCE8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(v1 + 32);
  long long v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v2)
    {
      uint64_t v6 = v4 + 8;
      if (!v4) {
        uint64_t v6 = 0;
      }
      uint64_t v11 = v6;
      uint64_t v12 = v5;
      uint64_t v7 = v5;
      goto LABEL_10;
    }
  }
  else if (!v2)
  {
    uint64_t v10 = v4 + 8;
    if (!v4) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    if (v3) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  uint64_t v7 = v3;
  if (v3) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v3)
  {
LABEL_15:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_17:
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v8;
}

void sub_21B8DCE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8DCEAC(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  uint64_t v8 = **a1;
  uint64_t v9 = (std::__shared_weak_count *)(*a1)[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v7[4];
  uint64_t v11 = (std::__shared_weak_count *)v7[5];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v8)
    {
      uint64_t v14 = v10;
      uint64_t v15 = v11;
      uint64_t v12 = v11;
LABEL_8:
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_9;
    }
  }
  else if (!v8)
  {
    uint64_t v14 = v7[4];
    uint64_t v15 = 0;
    if (!v9) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v12 = v9;
  if (v9) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v9)
  {
LABEL_13:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_15:
  kdebug_trace();
  unint64_t v16 = 0;
  v17[0] = &unk_26CB9CA00;
  v17[1] = &v16;
  v17[2] = 0;
  uint64_t v18 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a2, a3);
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 2);
  if (!v18) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v18 + 48))(v18);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
    uint64_t v13 = v15;
    if (!v15) {
      return;
    }
    goto LABEL_22;
  }
  if (v18) {
    (*(void (**)(void))(*v18 + 40))();
  }
  uint64_t v13 = v15;
  if (v15)
  {
LABEL_22:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21B8DD180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_21B8DD19C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

void sub_21B8DD1B8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  uint64_t v11 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(v9 + 32);
  uint64_t v13 = *(std::__shared_weak_count **)(v9 + 40);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v10)
    {
      uint64_t v14 = v12 + 8;
      if (!v12) {
        uint64_t v14 = 0;
      }
      uint64_t v19 = v14;
      uint64_t v20 = v13;
      uint64_t v15 = v13;
      goto LABEL_10;
    }
  }
  else if (!v10)
  {
    uint64_t v18 = v12 + 8;
    if (!v12) {
      uint64_t v18 = 0;
    }
    uint64_t v19 = v18;
    uint64_t v20 = 0;
    if (v11) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  uint64_t v15 = v11;
  if (v11) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11)
  {
LABEL_15:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_17:
  kdebug_trace();
  uint64_t v21 = 0;
  v25[0] = &unk_26CB9CA80;
  v25[1] = &v21;
  v25[2] = 0;
  uint64_t v26 = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a2, a3, a4);
  uint64_t v22 = &v23;
  uint64_t v23 = 0;
  uint64_t v16 = *(unsigned int *)(a5 + 24);
  if (v16 == -1) {
    sub_21B84C734();
  }
  int v24 = &v22;
  ((void (*)(uint64_t ***, uint64_t))off_26CB9E8B8[v16])(&v24, a5);
  uint64_t v21 = v23;
  if (!v26) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v26 + 48))(v26);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
    uint64_t v17 = v20;
    if (!v20) {
      return;
    }
    goto LABEL_25;
  }
  if (v26) {
    (*(void (**)(void))(*v26 + 40))();
  }
  uint64_t v17 = v20;
  if (v20)
  {
LABEL_25:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_21B8DD4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21B83804C((uint64_t *)va1);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8DD528(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (sub_21B8DD7E8(*a1))
  {
    if (a3 != a4
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/FeatureExtraction/src/FeatureExtractor.cpp", 207, (uint64_t)"detector_ps_handle == descriptor_ps_handle", 42, (uint64_t)"Both detector and descriptor PSHandle handles must be same for EndToEndModel.", 77, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    uint64_t v10 = (*a1)[4];
    uint64_t v11 = (std::__shared_weak_count *)(*a1)[5];
    v16[0] = v10;
    v16[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21B8DD92C(a5, a2, v16, a3);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    sub_21B8DCEAC(a1, a2, a3, &v26);
    sub_21B8DD1B8((uint64_t *)a1, a2, (uint64_t)&v26, a4, (uint64_t)&v22);
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v18 = 0;
    __n128 v17 = 0uLL;
    unsigned int v19 = 0;
    *(_OWORD *)a5 = v26;
    *(void *)(a5 + 16) = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    *(unsigned char *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 48) = -1;
    unsigned int v12 = v23;
    if (v23 != -1)
    {
      (*(&off_26CB9E938 + v23))((uint64_t)&v28, (__n128 *)(a5 + 24), &v22);
      *(_DWORD *)(a5 + 48) = v12;
    }
    uint64_t v13 = v24;
    *(unsigned char *)(a5 + 72) = 0;
    *(void *)(a5 + 56) = v13;
    *(_DWORD *)(a5 + 64) = v25;
    *(_DWORD *)(a5 + 96) = -1;
    __n128 v14 = off_26CB9E938((uint64_t)&v28, (__n128 *)(a5 + 72), &v17);
    *(_DWORD *)(a5 + 96) = 0;
    uint64_t v15 = v19;
    *(void *)(a5 + 104) = v20;
    *(_DWORD *)(a5 + 112) = v21;
    if (v15 != -1) {
      ((void (*)(char *, __n128 *, __n128))off_26CB9CAF0[v15])(&v28, &v17, v14);
    }
    if (v23 != -1) {
      ((void (*)(__n128 *, __n128 *))off_26CB9CAF0[v23])(&v17, &v22);
    }
    if ((void)v26)
    {
      *((void *)&v26 + 1) = v26;
      operator delete((void *)v26);
    }
  }
}

void sub_21B8DD7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8DD7C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 80);
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 - 72) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

BOOL sub_21B8DD7E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[2];
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else if (!v3)
  {
    goto LABEL_11;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_11:
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  if (v6) {
    BOOL v7 = v2 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  return v7 && v4 == 0;
}

uint64_t sub_21B8DD92C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t v10 = 0;
  v14[0] = &unk_26CB9CB20;
  v14[1] = &v10;
  v14[2] = 0;
  uint64_t v15 = v14;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 48))(*a3, a2, a4);
  uint64_t v11 = &v12;
  uint64_t v12 = 0;
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  if (v8 == -1) {
    sub_21B84C734();
  }
  uint64_t v13 = &v11;
  ((void (*)(uint64_t ***, uint64_t))off_26CB9E8B8[v8])(&v13, a1 + 24);
  uint64_t v10 = v12;
  if (!v15) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v15 + 48))(v15);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void sub_21B8DDAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21B83804C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8DDB24(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (sub_21B8DD7E8(*a1))
  {
    uint64_t v11 = (*a1)[4];
    uint64_t v10 = (std::__shared_weak_count *)(*a1)[5];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kdebug_trace();
    uint64_t v25 = 0;
    std::string __p = &unk_26CB9CBA0;
    int v29 = &v25;
    uint64_t v30 = 0;
    p_p = &__p;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 56))(v11, a2, a3, a4);
    long long v26 = &v27;
    uint64_t v27 = 0;
    uint64_t v12 = *(unsigned int *)(a5 + 48);
    if (v12 == -1) {
      sub_21B84C734();
    }
    v21.n128_u64[0] = (unint64_t)&v26;
    ((void (*)(__n128 *, uint64_t))off_26CB9E8B8[v12])(&v21, a5 + 24);
    uint64_t v25 = v27;
    if (!p_p) {
      sub_21B846100();
    }
    (*((void (**)(void **))*p_p + 6))(p_p);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
      if (!v10) {
        return;
      }
    }
    else
    {
      if (p_p) {
        (*((void (**)(void))*p_p + 5))();
      }
      if (!v10) {
        return;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  sub_21B8DD1B8((uint64_t *)a1, a2, a3, a4, (uint64_t)&v21);
  uint64_t v13 = (*a1)[4];
  __n128 v14 = (std::__shared_weak_count *)(*a1)[5];
  v20[0] = v13;
  v20[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B8DD92C((uint64_t)&__p, a2, v20, a4);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 48) = -1;
  unsigned int v15 = v22;
  if (v22 != -1)
  {
    (*(&off_26CB9E938 + v22))((uint64_t)&v27, (__n128 *)(a5 + 24), &v21);
    *(_DWORD *)(a5 + 48) = v15;
  }
  uint64_t v16 = v23;
  *(unsigned char *)(a5 + 72) = 0;
  *(void *)(a5 + 56) = v16;
  *(_DWORD *)(a5 + 64) = v24;
  *(_DWORD *)(a5 + 96) = -1;
  unsigned int v17 = v34;
  if (v34 != -1)
  {
    ((void (*)(uint64_t *))*(&off_26CB9E938 + v34))(&v27);
    *(_DWORD *)(a5 + 96) = v17;
    uint64_t v18 = v34;
    *(void *)(a5 + 104) = v35;
    *(_DWORD *)(a5 + 112) = v36;
    if (v18 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_26CB9CAF0[v18])(&v27, &v33);
    }
    unsigned int v34 = -1;
    uint64_t v19 = v32;
    if (v32 == -1) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  *(void *)(a5 + 104) = v35;
  *(_DWORD *)(a5 + 112) = v36;
  unsigned int v34 = -1;
  uint64_t v19 = v32;
  if (v32 != -1) {
LABEL_24:
  }
    ((void (*)(uint64_t *, void ***))off_26CB9CAF0[v19])(&v27, &p_p);
LABEL_25:
  unsigned int v32 = -1;
  if (__p)
  {
    int v29 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v22 != -1) {
    ((void (*)(void **, __n128 *))off_26CB9CAF0[v22])(&__p, &v21);
  }
}

void sub_21B8DDF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

void sub_21B8DDFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_21B863490(v2);
  sub_21B83804C((uint64_t *)va1);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8DDFD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    uint64_t v6 = 1;
    if (!v5) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if (!v5) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v5) {
      goto LABEL_14;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_14:
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v6;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return v6;
}

void sub_21B8DE118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_21B8DE134(uint64_t **a1, uint64_t a2)
{
  if (!sub_21B8DDFD4(*a1)) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  uint64_t v6 = (std::__shared_weak_count *)(*a1)[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v4[4];
  uint64_t v8 = (std::__shared_weak_count *)v4[5];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v5)
    {
      uint64_t v12 = v7;
      uint64_t v13 = v8;
      uint64_t v9 = v8;
LABEL_11:
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    uint64_t v12 = v4[4];
    uint64_t v13 = 0;
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  uint64_t v9 = v6;
  if (v6) {
    goto LABEL_11;
  }
LABEL_12:
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v6)
  {
LABEL_16:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_18:
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, a2);
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v10;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return v10;
}

void sub_21B8DE2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8DE30C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(void *)(*a1 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(v4 + 32);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 40);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v6 | v8) {
      goto LABEL_9;
    }
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!(v6 | v8)) {
    return 0;
  }
LABEL_9:
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  uint64_t v11 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(v9 + 32);
  uint64_t v13 = *(std::__shared_weak_count **)(v9 + 40);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v10)
    {
      uint64_t v14 = v12 + 8;
      if (!v12) {
        uint64_t v14 = 0;
      }
      uint64_t v19 = v14;
      uint64_t v20 = v13;
      uint64_t v15 = v13;
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v19 = v10;
    uint64_t v20 = v11;
    uint64_t v15 = v11;
    if (!v11)
    {
LABEL_21:
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      if (!v11) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
LABEL_20:
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_21;
  }
  if (v10) {
    goto LABEL_19;
  }
  uint64_t v18 = v12 + 8;
  if (!v12) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v18;
  uint64_t v20 = 0;
  if (!v11) {
    goto LABEL_27;
  }
LABEL_25:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, a2);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v16;
}

void sub_21B8DE58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8DE5A4()
{
}

__n128 sub_21B8DE5B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9CA00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8DE604(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9CA00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8DE634()
{
  return kdebug_trace();
}

uint64_t sub_21B8DE66C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_121DetectKeypointsHelperE"
                     "RKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10shared_ptrIN"
                     "S6_17IKeypointDetectorEEEPvE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_121DetectKeypo"
                                "intsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE"
                                "0EEENS3_10shared_ptrINS6_17IKeypointDetectorEEEPvE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_121DetectKeypointsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10shared_ptrINS6_17IKeypointDetectorEEEPvE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_121DetectKeypointsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10shared_ptrINS6_17IKeypointDetectorEEEPvE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B8DE6DC()
{
  return &unk_26CB9CA60;
}

void sub_21B8DE6EC()
{
}

__n128 sub_21B8DE700(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9CA80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8DE74C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9CA80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8DE77C()
{
  return kdebug_trace();
}

uint64_t sub_21B8DE7B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_124ComputeDescriptorsHelp"
                     "erERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS5_13Keypoin"
                     "tsDataENS3_10shared_ptrINS6_20IDescriptorExtractorEEEPvE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_124ComputeDesc"
                                "riptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10Mutabili"
                                "tyE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_20IDescriptorExtractorEEEPvE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_124ComputeDescriptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_20IDescriptorExtractorEEEPvE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_124ComputeDescriptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_20IDescriptorExtractorEEEPvE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B8DE824()
{
  return &unk_26CB9CAE0;
}

void sub_21B8DE834()
{
}

__n128 sub_21B8DE848(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9CB20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8DE894(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9CB20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8DE8C4()
{
  return kdebug_trace();
}

uint64_t sub_21B8DE8FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_130DetectAndComputeFeatur"
                     "esHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10sha"
                     "red_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_130DetectAndCo"
                                "mputeFeaturesHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10Mu"
                                "tabilityE0EEENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_130DetectAndComputeFeaturesHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_130DetectAndComputeFeaturesHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B8DE96C()
{
  return &unk_26CB9CB80;
}

void sub_21B8DE97C()
{
}

__n128 sub_21B8DE990(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9CBA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B8DE9DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9CBA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B8DEA0C()
{
  return kdebug_trace();
}

uint64_t sub_21B8DEA44(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_135ComputeLocalGlobalDesc"
                     "riptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS"
                     "5_13KeypointsDataENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_135ComputeLoca"
                                "lGlobalDescriptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9"
                                "_10MutabilityE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_135ComputeLocalGlobalDescriptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature12_GLOBAL__N_135ComputeLocalGlobalDescriptorsHelperERKNS_3kit3img9ImageViewILNS9_6FormatE1ENS9_13DynamicBufferELNS9_10MutabilityE0EEERKNS5_13KeypointsDataENS3_10shared_ptrINS6_18IEndToEndExtractorEEEPvE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B8DEAB4()
{
  return &unk_26CB9CC00;
}

void sub_21B8DEAC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8DEAFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21B8DEB2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d2lf7feature17IKeypointDetectorEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature17IKeypointDetectorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d2lf7feature17IKeypointDetectorEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature17IKeypointDetectorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8DEBA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8DEBDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21B8DEC0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d2lf7feature20IDescriptorExtractorEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature20IDescriptorExtractorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d2lf7feature20IDescriptorExtractorEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature20IDescriptorExtractorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8DEC84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8DECBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21B8DECEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d2lf7feature18IEndToEndExtractorEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature18IEndToEndExtractorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d2lf7feature18IEndToEndExtractorEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature18IEndToEndExtractorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_21B8DED60(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(std::__shared_weak_count **)(result + 40);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

int *sub_21B8DEE84@<X0>(int *result@<X0>, void *a2@<X8>)
{
  int v3 = *result;
  if (result[1] == 4 && v3 == 2 || v3 == 0) {
    int v3 = 0;
  }
  if (v3)
  {
    if (v3 == 2) {
      operator new();
    }
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_21B8DEF3C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0xA1C4034F8F590);
  _Unwind_Resume(a1);
}

void sub_21B8DEF60(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0xA1C40FB386A5DLL);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B8DEF84@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  int v3 = result[1];
  if (*result == 2 && v3 == 4)
  {
    *a2 = 0;
  }
  else
  {
    BOOL v6 = v3 != 1 || result[2] != 1;
    if (v3) {
      BOOL v7 = !v6;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      switch(v3)
      {
        case 2:
        case 3:
          operator new();
        case 4:
        case 5:
        case 6:
          operator new();
        default:
          sub_21B835F34(__p);
          sub_21B928D38((uint64_t)__p, 0xEu);
          if (v10)
          {
            if (v9 < 0) {
              operator delete(__p[0]);
            }
          }
          operator new();
      }
    }
    *a2 = 0;
  }
  return result;
}

void sub_21B8DF124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x21D495F30](v15, 0xA1C4034F8F590);
  _Unwind_Resume(a1);
}

void sub_21B8DF174(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0xA1C40FB386A5DLL);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B8DF1B0@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  int v3 = result[1];
  if (*result == 2 && v3 == 4) {
    operator new();
  }
  int v5 = result[2];
  if (v3 == 1 && v5 == 1) {
    operator new();
  }
  if (v5 == 1) {
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_21B8DF2A0(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0xA1C40FB386A5DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8DF2CC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8DF348(_DWORD *a1)
{
  v1[10] = &unk_26CB9CEC0;
  sub_21B960570(a1, (uint64_t)v1);
  operator new();
}

void sub_21B8DF588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_21B83A360(v10);
  sub_21B83A360((uint64_t)&a10);
  sub_21B8DF728(&a9);
  _Unwind_Resume(a1);
}

void sub_21B8DF5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8DF5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8DF5E8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8DF674()
{
  return 4;
}

uint64_t sub_21B8DF67C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_21B8DF684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 64, 2, a1 + 72, 4);
}

uint64_t sub_21B8DF6A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21B8DF728(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = *(void **)(v2 + 48);
    if (v3) {
      free(v3);
    }
    *(void *)(v2 + 48) = 0;
    MEMORY[0x21D495F30](v2, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_21B8DF784()
{
}

uint64_t sub_21B8DF798()
{
  return 4;
}

long long *sub_21B8DF7A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BE68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BE68))
  {
    uint64_t v1 = sub_21B8DF888();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5BE50, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5BE60 = *((void *)v1 + 2);
      xmmword_267C5BE50 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BE50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BE68);
  }
  if (byte_267C5BE67 >= 0) {
    return &xmmword_267C5BE50;
  }
  else {
    return (long long *)xmmword_267C5BE50;
  }
}

void sub_21B8DF870(_Unwind_Exception *a1)
{
}

long long *sub_21B8DF888()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BE88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BE88))
  {
    return &xmmword_267C5BE70;
  }
  uint64_t v1 = sub_21B8DF970();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5BE70, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5BE80 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5BE70 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BE70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BE88);
  return &xmmword_267C5BE70;
}

void sub_21B8DF958(_Unwind_Exception *a1)
{
}

std::string *sub_21B8DF970()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BEA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BEA8))
  {
    return &stru_267C5BE90;
  }
  sub_21B8DFA6C((uint64_t)__p);
  sub_21B89E674(__p, &stru_267C5BE90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BE90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BEA8);
  return &stru_267C5BE90;
}

void sub_21B8DFA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BEA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BEA8);
  _Unwind_Resume(a1);
}

void sub_21B8DFA6C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BEC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BEC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_267C5BEB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BEB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BEC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BEE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BEE8))
  {
    size_t v3 = sub_21B89E324(qword_267C5BEB0, "<", 0);
    sub_21B89E21C(qword_267C5BEB0, 0, v3, qword_267C5BED0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BED0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BEE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BF08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BF08))
  {
    sub_21B9840C8((uint64_t)qword_267C5BED0, (uint64_t)&xmmword_267C5BEF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BEF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BF08);
  }
  if (byte_267C5BF07 < 0)
  {
    long long v2 = xmmword_267C5BEF0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5BEF0;
    *(void *)(a1 + 16) = unk_267C5BF00;
  }
}

void sub_21B8DFC34(_Unwind_Exception *a1)
{
}

void sub_21B8DFC4C(_Unwind_Exception *a1)
{
}

void sub_21B8DFC64(_Unwind_Exception *a1)
{
}

void sub_21B8DFC80(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8DFCB8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    long long v2 = *(void **)(v1 + 48);
    if (v2) {
      free(v2);
    }
    *(void *)(v1 + 48) = 0;
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B8DFD1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B8DFD90(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    BOOL v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 49)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_12;
  }
LABEL_8:
  BOOL v7 = *(void (**)(uint64_t, void))(*(void *)v3 + 96);

  v7(v3, 0);
}

void sub_21B8DFEC4(void *a1)
{
  *a1 = &unk_26CB9CF48;
  operator new();
}

void sub_21B8DFF60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_21B8DFF94(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x10B3C40AD57DCE5);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8DFFB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

BOOL sub_21B8DFFE4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8));
  return *a2 == v3 && a2[1] == HIDWORD(v3);
}

void sub_21B8E0044(void ***a1, uint64_t a2, uint64_t a3)
{
  if ((((uint64_t (*)(void ***, uint64_t))(*a1)[3])(a1, a2 + 32) & 1) == 0
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/KeypointDetection/src/KeypointDetector.cpp", 48, (uint64_t)"IsValidInputImageResolution(image.Size())", 41, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  (*(void (**)(uint64_t *__return_ptr))(**a1[1] + 32))(&v22);
  uint64_t v5 = (uint64_t)*a1[1];
  uint64_t v16 = &unk_26CB9CF98;
  uint64_t v6 = v23;
  BOOL v7 = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v27 = v6;
    char v28 = v7;
    uint64_t v25 = v6;
    long long v26 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    uint64_t v27 = v23;
    char v28 = 0;
    uint64_t v25 = v23;
    long long v26 = 0;
    uint64_t v17 = v23;
    uint64_t v18 = 0;
  }
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 72))(&v29, v6, 4);
  uint64_t v8 = *((void *)v29 + 2);
  long long v19 = *v29;
  uint64_t v20 = v8;
  int v29 = 0;
  MEMORY[0x21D495F30]();
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 104))(v17);
  unsigned __int8 v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v10 = 0;
  }
  __int16 v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0) {
    __int16 v11 = 0;
  }
  __int16 v21 = v11 & 0xFF00 | v10;
  uint64_t v12 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 40))(v5, &v16, a3);
  uint64_t v14 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_21B8E0420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E0468((uint64_t)va);
  sub_21B83A360(v2 + 8);
  _Unwind_Resume(a1);
}

void sub_21B8E043C(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  sub_21B83A360(v3 - 104);
  sub_21B83A360(v3 - 88);
  sub_21B83A360(v2 + 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E0468(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B8E04E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9CF48;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_21B8E0538(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9CF48;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x21D495F30);
}

void *sub_21B8E05AC(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    *uint64_t v1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void sub_21B8E0628(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E06B4()
{
  return 4;
}

uint64_t sub_21B8E06BC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B8E06C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_21B8E06E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B8E0770(void *a1, int a2)
{
  *a1 = &unk_26CB9D090;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_21B8E0888(a2, (uint64_t)(a1 + 1));
  v3[0] = 0;
  v3[24] = 0;
  sub_21B8E2A44((uint64_t)v4, v2, (uint64_t)v3);
  sub_21B8E1C18((uint64_t)v4);
}

void sub_21B8E0858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8E3394((uint64_t)va);
  sub_21B8E0984(v5);
  _Unwind_Resume(a1);
}

void sub_21B8E0874(_Unwind_Exception *a1)
{
  sub_21B8E0984(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E0888@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 12) = 0x1E000000280;
  *(void *)(a2 + 24) = 0x312E7475706E69;
  *(unsigned char *)(a2 + 47) = 7;
  *(void *)(a2 + 48) = 12600;
  *(unsigned char *)(a2 + 71) = 2;
  *(void *)(a2 + 72) = 14648;
  *(unsigned char *)(a2 + 95) = 2;
  *(void *)(a2 + 96) = 12601;
  *(unsigned char *)(a2 + 119) = 2;
  uint64_t result = sub_21B8E5064((std::string *)(a2 + 120));
  *(_DWORD *)(a2 + 144) = a1;
  return result;
}

void sub_21B8E0918(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(v1 + 48));
  if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v1 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8E0984(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_21B8E0A28(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 160) + 8);
}

uint64_t sub_21B8E0A40(uint64_t a1)
{
  return *(void *)(a1 + 20);
}

void sub_21B8E0A48(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = &unk_26CB9CDC8;
  sub_21B8DF348((_DWORD *)(a1 + 32));
}

void sub_21B8E0E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
    sub_21B83A360(v12);
    _Unwind_Resume(a1);
  }
  sub_21B83A360(v12);
  _Unwind_Resume(a1);
}

void sub_21B8E0EB8(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B8E0ECC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v9 = *(_DWORD *)(a2 + 32) == v8 && *(_DWORD *)(a2 + 36) == HIDWORD(v8);
  if (!v9
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/KeypointDetection/src/KeypointModel.cpp", 62, (uint64_t)"InputImageSize() == image.Size()", 32, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  v143[0] = &unk_26CB9EFA0;
  v143[1] = a3;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 160);
  *(void *)&v134[0] = &unk_26CB954E0;
  sub_21B8E28E8(a2, (uint64_t)v134 + 8);
  if (v10) {
    uint64_t v12 = v143;
  }
  else {
    uint64_t v12 = 0;
  }
  sub_21B93AB48(*(void *)(v11 + 16), (uint64_t)v134, (uint64_t)v12, v10, (uint64_t)&v137);
  uint64_t v13 = *(std::__shared_weak_count **)&v134[1];
  if (*(void *)&v134[1]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v134[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v138) {
      goto LABEL_12;
    }
  }
  else if (v138)
  {
LABEL_12:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_138;
  }
  if (!v142) {
    sub_21B8446A8();
  }
  sub_21B8565FC((uint64_t)__p, (uint64_t)v134);
  uint64_t v14 = *(void *)((char *)v134 + 12);
  if (HIDWORD(v134[0])) {
    BOOL v15 = HIDWORD(*(void *)((char *)v134 + 12)) == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    uint64_t v14 = 0;
  }
  v132[0] = *(void *)&v134[0];
  v132[1] = v14;
  unint64_t v133 = v135;
  if (HIDWORD(v14) * HIDWORD(v135) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8565FC((uint64_t)__p + 120, (uint64_t)v134);
  unint64_t v127 = v135;
  int v16 = v136;
  uint64_t v17 = *(void *)&v134[0];
  if (DWORD1(v134[1])) {
    BOOL v18 = HIDWORD(v134[0]) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || HIDWORD(*(void *)((char *)v134 + 12)) == 0) {
    int v20 = 0;
  }
  else {
    int v20 = DWORD1(v134[1]);
  }
  if (v20 * v136 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8565FC((uint64_t)__p + 240, (uint64_t)v134);
  int v21 = v135;
  uint64_t v22 = *(void *)&v134[0];
  uint64_t v23 = HIDWORD(*(void *)((char *)v134 + 12));
  if (HIDWORD(v134[0])) {
    BOOL v24 = v23 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24) {
    LODWORD(v23) = 0;
  }
  unint64_t v25 = HIDWORD(v135);
  if (v23 * HIDWORD(v135) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8E36F4((uint64_t)v132, &v130);
  long long v26 = v130;
  uint64_t v27 = v131;
  memset(v134, 0, 24);
  uint64_t v28 = (char *)v131 - (char *)v130;
  if (v131 == v130)
  {
    long long v32 = 0uLL;
  }
  else
  {
    if ((unint64_t)v28 >= 0x6666666666666661) {
      sub_21B862A00();
    }
    int v126 = a4;
    uint64_t v29 = v28 >> 3;
    *(void *)&v134[0] = operator new(20 * (v28 >> 3));
    *((void *)&v134[0] + 1) = *(void *)&v134[0];
    *(void *)&v134[1] = *(void *)&v134[0] + 20 * v29;
    uint64_t v146 = (char **)v134;
    do
    {
      unsigned int v30 = *v26;
      unsigned int v31 = v26[1];
      *(float *)&long long v144 = (float)*v26;
      *((float *)&v144 + 1) = (float)v31;
      DWORD2(v144) = atan2f(*(float *)(v17 + 4 * (v30 * v127 + v31 * HIDWORD(v127) + v16)), *(float *)(v17 + 4 * (v30 * v127 + v31 * HIDWORD(v127))));
      HIDWORD(v144) = *(_DWORD *)(v22 + 4 * (v30 * v21 + v31 * v25));
      int v145 = *(_DWORD *)(v132[0] + 4 * (v133 * v30 + HIDWORD(v133) * v31));
      sub_21B862A18(&v146, &v144);
      v26 += 2;
    }
    while (v26 != v27);
    uint64_t v28 = *(void *)&v134[0];
    long long v32 = *(_OWORD *)((char *)v134 + 8);
    a4 = v126;
  }
  v128 = (char *)v28;
  long long v129 = v32;
  unint64_t v33 = v32;
  if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v32 - v28) >> 2) <= 0x1000) {
    goto LABEL_136;
  }
  unint64_t v34 = v28 + 81920;
  if (v28 + 81920 != (void)v32)
  {
    do
    {
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - v28) >> 2);
      if (v35 < 2) {
        break;
      }
      if (v35 == 3)
      {
        uint64_t v92 = v28 + 20;
        uint64_t v93 = (long long *)(v33 - 20);
        float v94 = *(float *)(v28 + 36);
        float v95 = *(float *)(v33 - 4);
        if (v94 <= *(float *)(v28 + 16))
        {
          if (v95 > v94)
          {
            v134[0] = *(_OWORD *)v92;
            long long v109 = v134[0];
            LODWORD(v134[1]) = *(_DWORD *)(v28 + 36);
            int v110 = v134[1];
            int v111 = *((_DWORD *)v93 + 4);
            *(_OWORD *)uint64_t v92 = *v93;
            *(_DWORD *)(v28 + 36) = v111;
            *((_DWORD *)v93 + 4) = v110;
            *uint64_t v93 = v109;
            if (*(float *)(v28 + 36) > *(float *)(v28 + 16))
            {
              long long v112 = *(_OWORD *)v28;
              LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
              v134[0] = v112;
              *(_OWORD *)uint64_t v28 = *(_OWORD *)v92;
              *(_DWORD *)(v28 + 16) = *(_DWORD *)(v28 + 36);
              *(_OWORD *)uint64_t v92 = v134[0];
              *(_DWORD *)(v28 + 36) = v134[1];
            }
          }
        }
        else
        {
          if (v95 <= v94)
          {
            long long v113 = *(_OWORD *)v28;
            LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
            v134[0] = v113;
            *(_OWORD *)uint64_t v28 = *(_OWORD *)v92;
            *(_DWORD *)(v28 + 16) = *(_DWORD *)(v28 + 36);
            *(_OWORD *)uint64_t v92 = v134[0];
            *(_DWORD *)(v28 + 36) = v134[1];
            if (*(float *)(v33 - 4) <= *(float *)(v28 + 36)) {
              break;
            }
            long long v98 = *(_OWORD *)v92;
            v134[0] = *(_OWORD *)v92;
            int v99 = *(_DWORD *)(v28 + 36);
            LODWORD(v134[1]) = *(_DWORD *)(v92 + 16);
            int v114 = *(_DWORD *)(v33 - 4);
            *(_OWORD *)uint64_t v92 = *v93;
            *(_DWORD *)(v92 + 16) = v114;
          }
          else
          {
            long long v96 = *(_OWORD *)v28;
            LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
            v134[0] = v96;
            long long v97 = *v93;
            *(_DWORD *)(v28 + 16) = *(_DWORD *)(v33 - 4);
            *(_OWORD *)uint64_t v28 = v97;
            long long v98 = v134[0];
            int v99 = v134[1];
          }
          *((_DWORD *)v93 + 4) = v99;
          *uint64_t v93 = v98;
        }
        break;
      }
      if (v35 == 2)
      {
        if (*(float *)(v33 - 4) > *(float *)(v28 + 16))
        {
          long long v100 = *(_OWORD *)v28;
          LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
          v134[0] = v100;
          long long v101 = *(_OWORD *)(v33 - 20);
          *(_DWORD *)(v28 + 16) = *(_DWORD *)(v33 - 4);
          *(_OWORD *)uint64_t v28 = v101;
          long long v102 = v134[0];
          *(_DWORD *)(v33 - 4) = v134[1];
          *(_OWORD *)(v33 - 20) = v102;
        }
        break;
      }
      if ((uint64_t)(v33 - v28) <= 159)
      {
        while (v28 != v33 - 20)
        {
          uint64_t v103 = v28;
          v28 += 20;
          if (v103 != v33 && v28 != v33)
          {
            uint64_t v104 = v28;
            uint64_t v105 = v103;
            do
            {
              if (*(float *)(v104 + 16) > *(float *)(v105 + 16)) {
                uint64_t v105 = v104;
              }
              v104 += 20;
            }
            while (v104 != v33);
            if (v105 != v103)
            {
              long long v106 = *(_OWORD *)v103;
              LODWORD(v134[1]) = *(_DWORD *)(v103 + 16);
              v134[0] = v106;
              long long v107 = *(_OWORD *)v105;
              *(_DWORD *)(v103 + 16) = *(_DWORD *)(v105 + 16);
              *(_OWORD *)uint64_t v103 = v107;
              long long v108 = v134[0];
              *(_DWORD *)(v105 + 16) = v134[1];
              *(_OWORD *)uint64_t v105 = v108;
            }
          }
        }
        break;
      }
      unint64_t v36 = v28 + 20 * (v35 >> 1);
      unint64_t v37 = v33 - 20;
      float v38 = *(float *)(v36 + 16);
      float v39 = *(float *)(v33 - 4);
      if (v38 <= *(float *)(v28 + 16))
      {
        if (v39 <= v38)
        {
          int v43 = 0;
          float v44 = *(float *)(v28 + 16);
          float v45 = *(float *)(v36 + 16);
          if (v44 <= v45) {
            goto LABEL_73;
          }
          goto LABEL_55;
        }
        long long v56 = *(_OWORD *)v36;
        LODWORD(v134[1]) = *(_DWORD *)(v36 + 16);
        v134[0] = v56;
        long long v57 = *(_OWORD *)v37;
        *(_DWORD *)(v36 + 16) = *(_DWORD *)(v33 - 4);
        *(_OWORD *)unint64_t v36 = v57;
        long long v58 = v134[0];
        *(_DWORD *)(v33 - 4) = v134[1];
        *(_OWORD *)unint64_t v37 = v58;
        if (*(float *)(v36 + 16) > *(float *)(v28 + 16))
        {
          long long v59 = *(_OWORD *)v28;
          LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
          v134[0] = v59;
          long long v60 = *(_OWORD *)v36;
          *(_DWORD *)(v28 + 16) = *(_DWORD *)(v36 + 16);
          *(_OWORD *)uint64_t v28 = v60;
          long long v61 = v134[0];
          *(_DWORD *)(v36 + 16) = v134[1];
          *(_OWORD *)unint64_t v36 = v61;
          goto LABEL_70;
        }
      }
      else
      {
        if (v39 > v38)
        {
          long long v40 = *(_OWORD *)v28;
          LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
          v134[0] = v40;
          long long v41 = *(_OWORD *)v37;
          *(_DWORD *)(v28 + 16) = *(_DWORD *)(v33 - 4);
          *(_OWORD *)uint64_t v28 = v41;
          long long v42 = v134[0];
          *(_DWORD *)(v33 - 4) = v134[1];
          *(_OWORD *)unint64_t v37 = v42;
          int v43 = 1;
          float v44 = *(float *)(v28 + 16);
          float v45 = *(float *)(v36 + 16);
          if (v44 <= v45) {
            goto LABEL_73;
          }
          goto LABEL_55;
        }
        long long v62 = *(_OWORD *)v28;
        LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
        v134[0] = v62;
        long long v63 = *(_OWORD *)v36;
        *(_DWORD *)(v28 + 16) = *(_DWORD *)(v36 + 16);
        *(_OWORD *)uint64_t v28 = v63;
        long long v64 = v134[0];
        *(_DWORD *)(v36 + 16) = v134[1];
        *(_OWORD *)unint64_t v36 = v64;
        if (*(float *)(v33 - 4) > *(float *)(v36 + 16))
        {
          long long v65 = *(_OWORD *)v36;
          LODWORD(v134[1]) = *(_DWORD *)(v36 + 16);
          v134[0] = v65;
          long long v66 = *(_OWORD *)v37;
          *(_DWORD *)(v36 + 16) = *(_DWORD *)(v33 - 4);
          *(_OWORD *)unint64_t v36 = v66;
          long long v67 = v134[0];
          *(_DWORD *)(v33 - 4) = v134[1];
          *(_OWORD *)unint64_t v37 = v67;
LABEL_70:
          int v43 = 2;
          float v44 = *(float *)(v28 + 16);
          float v45 = *(float *)(v36 + 16);
          if (v44 <= v45) {
            goto LABEL_73;
          }
          goto LABEL_55;
        }
      }
      int v43 = 1;
      float v44 = *(float *)(v28 + 16);
      float v45 = *(float *)(v36 + 16);
      if (v44 <= v45)
      {
LABEL_73:
        unint64_t v68 = v33 - 20;
        while (1)
        {
          unint64_t v46 = v68 - 20;
          if (v68 - 20 == v28) {
            break;
          }
          float v69 = *(float *)(v68 - 4);
          v68 -= 20;
          if (v69 > v45)
          {
            long long v70 = *(_OWORD *)v28;
            LODWORD(v134[1]) = *(_DWORD *)(v28 + 16);
            v134[0] = v70;
            long long v71 = *(_OWORD *)v46;
            *(_DWORD *)(v28 + 16) = *(_DWORD *)(v46 + 16);
            *(_OWORD *)uint64_t v28 = v71;
            long long v72 = v134[0];
            *(_DWORD *)(v46 + 16) = v134[1];
            *(_OWORD *)unint64_t v46 = v72;
            ++v43;
            uint64_t v47 = v28 + 20;
            if (v28 + 20 < v46) {
              goto LABEL_56;
            }
            goto LABEL_77;
          }
        }
        uint64_t v79 = v28 + 20;
        if (v44 <= *(float *)(v33 - 4))
        {
          if (v79 == v37) {
            break;
          }
          while (v44 <= *(float *)(v79 + 16))
          {
            v79 += 20;
            if (v79 == v37) {
              goto LABEL_134;
            }
          }
          long long v83 = *(_OWORD *)v79;
          LODWORD(v134[1]) = *(_DWORD *)(v79 + 16);
          v134[0] = v83;
          long long v84 = *(_OWORD *)v37;
          *(_DWORD *)(v79 + 16) = *(_DWORD *)(v33 - 4);
          *(_OWORD *)uint64_t v79 = v84;
          v79 += 20;
          long long v85 = v134[0];
          *(_DWORD *)(v33 - 4) = v134[1];
          *(_OWORD *)unint64_t v37 = v85;
        }
        if (v79 == v37) {
          break;
        }
        while (1)
        {
          float v86 = *(float *)(v28 + 16);
          unint64_t v76 = v79 - 20;
          do
          {
            float v87 = *(float *)(v76 + 36);
            v76 += 20;
          }
          while (v86 <= v87);
          uint64_t v79 = v76 + 20;
          do
          {
            float v88 = *(float *)(v37 - 4);
            v37 -= 20;
          }
          while (v86 > v88);
          if (v76 >= v37) {
            break;
          }
          long long v89 = *(_OWORD *)v76;
          LODWORD(v134[1]) = *(_DWORD *)(v76 + 16);
          v134[0] = v89;
          long long v90 = *(_OWORD *)v37;
          *(_DWORD *)(v76 + 16) = *(_DWORD *)(v37 + 16);
          *(_OWORD *)unint64_t v76 = v90;
          long long v91 = v134[0];
          *(_DWORD *)(v37 + 16) = v134[1];
          *(_OWORD *)unint64_t v37 = v91;
        }
        if (v76 > v34) {
          break;
        }
        goto LABEL_110;
      }
LABEL_55:
      unint64_t v46 = v33 - 20;
      uint64_t v47 = v28 + 20;
      if (v28 + 20 >= v33 - 20)
      {
LABEL_77:
        unint64_t v50 = v47;
      }
      else
      {
LABEL_56:
        uint64_t v48 = v47;
        while (1)
        {
          float v49 = *(float *)(v36 + 16);
          unint64_t v50 = v48 - 20;
          do
          {
            float v51 = *(float *)(v50 + 36);
            v50 += 20;
          }
          while (v51 > v49);
          uint64_t v48 = v50 + 20;
          do
          {
            float v52 = *(float *)(v46 - 4);
            v46 -= 20;
          }
          while (v52 <= v49);
          if (v50 >= v46) {
            break;
          }
          long long v53 = *(_OWORD *)v50;
          LODWORD(v134[1]) = *(_DWORD *)(v50 + 16);
          v134[0] = v53;
          long long v54 = *(_OWORD *)v46;
          *(_DWORD *)(v50 + 16) = *(_DWORD *)(v46 + 16);
          *(_OWORD *)unint64_t v50 = v54;
          long long v55 = v134[0];
          *(_DWORD *)(v46 + 16) = v134[1];
          *(_OWORD *)unint64_t v46 = v55;
          ++v43;
          if (v50 == v36) {
            unint64_t v36 = v46;
          }
        }
      }
      if (v50 != v36 && *(float *)(v36 + 16) > *(float *)(v50 + 16))
      {
        long long v73 = *(_OWORD *)v50;
        LODWORD(v134[1]) = *(_DWORD *)(v50 + 16);
        v134[0] = v73;
        long long v74 = *(_OWORD *)v36;
        *(_DWORD *)(v50 + 16) = *(_DWORD *)(v36 + 16);
        *(_OWORD *)unint64_t v50 = v74;
        long long v75 = v134[0];
        *(_DWORD *)(v36 + 16) = v134[1];
        *(_OWORD *)unint64_t v36 = v75;
        ++v43;
      }
      if (v50 == v34) {
        break;
      }
      if (!v43)
      {
        if (v50 <= v34)
        {
          unint64_t v80 = v50 + 20;
          while (v80 != v33)
          {
            float v81 = *(float *)(v80 + 16);
            float v82 = *(float *)(v80 - 4);
            v80 += 20;
            if (v81 > v82) {
              goto LABEL_83;
            }
          }
        }
        else
        {
          while (v47 != v50)
          {
            float v77 = *(float *)(v47 + 16);
            float v78 = *(float *)(v47 - 4);
            v47 += 20;
            if (v77 > v78) {
              goto LABEL_83;
            }
          }
        }
        break;
      }
LABEL_83:
      if (v50 <= v34)
      {
        unint64_t v76 = v50 + 20;
      }
      else
      {
        unint64_t v33 = v50;
        unint64_t v76 = v28;
      }
LABEL_110:
      uint64_t v28 = v76;
    }
    while (v33 != v34);
  }
LABEL_134:
  int v115 = v128;
  uint64_t v116 = (char *)v129;
  unint64_t v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v129 - (void)v128) >> 2);
  if (v117 <= 0xFFF)
  {
    sub_21B8E25D0(&v128, 4096 - v117);
    uint64_t v28 = (uint64_t)v128;
    unint64_t v33 = v129;
LABEL_136:
    uint64_t v119 = *((void *)&v129 + 1);
    v118 = v130;
    v128 = 0;
    long long v129 = 0uLL;
    *a4 = v28;
    a4[1] = v33;
    a4[2] = v119;
    if (!v118) {
      goto LABEL_138;
    }
LABEL_137:
    int v131 = v118;
    operator delete(v118);
    goto LABEL_138;
  }
  if ((void)v129 - (void)v128 != 81920) {
    uint64_t v116 = v128 + 81920;
  }
  uint64_t v125 = *((void *)&v129 + 1);
  v118 = v130;
  v128 = 0;
  long long v129 = 0uLL;
  *a4 = v115;
  a4[1] = v116;
  a4[2] = v125;
  if (v118) {
    goto LABEL_137;
  }
LABEL_138:
  if (v142)
  {
    uint64_t v120 = (char *)__p;
    if (__p)
    {
      int v121 = v141;
      uint64_t v122 = __p;
      if (v141 != __p)
      {
        do
        {
          if (*(v121 - 8))
          {
            v123 = (std::__shared_weak_count *)*((void *)v121 - 6);
            if (v123)
            {
              if (!atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          v121 -= 120;
        }
        while (v121 != v120);
        uint64_t v122 = __p;
      }
      uint64_t v141 = v120;
      operator delete(v122);
    }
  }
  uint64_t v137 = &unk_26CB95650;
  int v124 = v139;
  if (v139)
  {
    if (!atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
}

void sub_21B8E1B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21B840310((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_21B8E1BE0(uint64_t a1)
{
  sub_21B8E2780(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8E1C18(uint64_t a1)
{
}

void sub_21B8E2164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 81) < 0)
  {
    operator delete(*(void **)(v9 - 104));
    sub_21B8E2238((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_21B8E2238((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E2238(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26CB95650;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_4;
    }
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!*(unsigned char *)(a1 + 24)) {
    return a1;
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t *sub_21B8E2360(uint64_t *a1)
{
  a1[1] = (uint64_t)&unk_26CB95650;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
LABEL_4:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  return a1;
}

void sub_21B8E242C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8E244C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E24A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21B8E24C8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(const void **)a2;
    uint64_t v3 = *(void *)(a2 + 8);
    int64_t v5 = v3 - *(void *)a2;
    if (v3 != *(void *)a2)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v5 >> 2)) >= 0x924924924924925) {
        sub_21B8E25B8();
      }
      uint64_t v6 = (char *)operator new(v5);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v6;
      BOOL v7 = &v6[4 * (v5 >> 2)];
      *(void *)(a1 + 16) = v7;
      memcpy(v6, v4, v5 - 2);
      *(void *)(a1 + 8) = v7;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_21B8E2584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v4 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8E25B8()
{
}

void sub_21B8E25D0(char **a1, unint64_t a2)
{
  int64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      sub_21B862A00();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x666666666666666) {
      unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL) {
        sub_21B845A48();
      }
      uint64_t v11 = (char *)operator new(20 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[20 * v7];
    uint64_t v14 = &v11[20 * v10];
    size_t v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    int v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      int64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_21B8E2780(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9D090;
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_17:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_18;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_17;
  }
LABEL_12:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_21B8E28E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  size_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 2, a1 + 32, 2, a1 + 40, 4);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 4;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B8E2A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E2A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  LOBYTE(v27[0]) = 0;
  char v29 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v27, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)a3;
      uint64_t v28 = *(void *)(a3 + 16);
    }
    char v29 = 1;
  }
  int v6 = *(_DWORD *)(a2 + 12);
  int v5 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_21B846188(&__dst, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long __dst = *(_OWORD *)(a2 + 24);
    uint64_t v58 = *(void *)(a2 + 40);
  }
  char v59 = 1;
  LODWORD(v60) = 65;
  BYTE4(v60) = 1;
  int v61 = 1;
  char v62 = 1;
  int v63 = v6;
  char v64 = 1;
  int v65 = v5;
  char v66 = 1;
  int v67 = 1;
  char v68 = 1;
  int v69 = 1;
  char v70 = 1;
  char v71 = 1;
  LOBYTE(v72[0]) = 0;
  char v74 = 0;
  LOBYTE(v75[0]) = 0;
  char v77 = 0;
  sub_21B847590((char *)__p, &__dst);
  sub_21B8E35D8((char **)&v41, (uint64_t)__p, 1uLL);
  if (!v56)
  {
LABEL_13:
    if (!v53) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v55 != v54)
  {
    if (v55) {
      (*(void (**)(void *, uint64_t, uint64_t))(*v55 + 40))(v55, v7, v8);
    }
    goto LABEL_13;
  }
  (*(void (**)(void *))(v54[0] + 32))(v54);
  if (!v53) {
    goto LABEL_20;
  }
LABEL_14:
  if (v52 == v51)
  {
    (*(void (**)(unsigned __int8 *))(*(void *)v51 + 32))(v51);
  }
  else if (v52)
  {
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)v52 + 40))(v52, v7, v8);
  }
LABEL_20:
  if (v45 && SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_21B846188(__p, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 48);
    uint64_t v44 = *(void *)(a2 + 64);
  }
  char v45 = 1;
  if (*(char *)(a2 + 95) < 0)
  {
    sub_21B846188(&v46, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v46 = *(_OWORD *)(a2 + 72);
    uint64_t v47 = *(void *)(a2 + 88);
  }
  char v48 = 1;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_21B846188(&v49, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v49 = *(_OWORD *)(a2 + 96);
    uint64_t v50 = *(void *)(a2 + 112);
  }
  v51[0] = 1;
  float v39 = 0;
  long long v40 = 0;
  float v38 = 0;
  uint64_t v9 = operator new(0x60uLL);
  int v10 = v9;
  *uint64_t v9 = 0;
  uint64_t v11 = (void **)(v9 + 96);
  float v38 = v9;
  float v39 = (void **)v9;
  long long v40 = v9 + 96;
  v9[24] = 0;
  size_t v12 = v9 + 24;
  if (v45)
  {
    if (SHIBYTE(v44) < 0)
    {
      sub_21B846188(v9, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
      *((void *)v9 + 2) = v44;
    }
    *size_t v12 = 1;
  }
  v10[32] = 0;
  v10[56] = 0;
  if (v48)
  {
    if (SHIBYTE(v47) < 0)
    {
      sub_21B846188(v10 + 32, (void *)v46, *((unint64_t *)&v46 + 1));
    }
    else
    {
      *((_OWORD *)v10 + 2) = v46;
      *((void *)v10 + 6) = v47;
    }
    v10[56] = 1;
  }
  v10[64] = 0;
  v10[88] = 0;
  uint64_t v13 = v10 + 88;
  if (!v51[0]) {
    goto LABEL_45;
  }
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    *((_OWORD *)v10 + 4) = v49;
    *((void *)v10 + 10) = v50;
    *uint64_t v13 = 1;
LABEL_45:
    float v39 = v11;
    goto LABEL_46;
  }
  sub_21B846188(v10 + 64, (void *)v49, *((unint64_t *)&v49 + 1));
  int v16 = v51[0];
  *uint64_t v13 = 1;
  float v39 = v11;
  if (v16 && SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (v45 && SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v30 = *(void *)a2;
  int v31 = *(_DWORD *)(a2 + 8);
  if (!v29)
  {
    uint64_t v14 = (void **)(a2 + 120);
    if (*(char *)(a2 + 143) < 0)
    {
      size_t v15 = (unint64_t *)(a2 + 128);
      goto LABEL_61;
    }
LABEL_56:
    long long v32 = *(_OWORD *)v14;
    unint64_t v33 = v14[2];
    goto LABEL_62;
  }
  uint64_t v14 = v27;
  if ((SHIBYTE(v28) & 0x80000000) == 0) {
    goto LABEL_56;
  }
  size_t v15 = (unint64_t *)&v27[1];
LABEL_61:
  sub_21B846188(&v32, *v14, *v15);
LABEL_62:
  memset(v34, 0, sizeof(v34));
  sub_21B847400(v34, (uint64_t)v41, (uint64_t)v42, 0xCF3CF3CF3CF3CF3DLL * ((v42 - (unsigned char *)v41) >> 3));
  sub_21B847980(v35, (uint64_t *)&v38);
  char v36 = 0;
  char v37 = 0;
  long long v19 = (void **)v38;
  if (v38)
  {
    int v20 = v39;
    int v21 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*((unsigned char *)v20 - 8) && *((char *)v20 - 9) < 0) {
          operator delete(*(v20 - 4));
        }
        v20 -= 4;
      }
      while (v20 != v19);
      int v21 = v38;
    }
    float v39 = v19;
    operator delete(v21);
  }
  uint64_t v22 = (char *)v41;
  if (v41)
  {
    uint64_t v23 = v42;
    BOOL v24 = v41;
    if (v42 != v41)
    {
      do
      {
        v23 -= 168;
        sub_21B847844((uint64_t)v23);
      }
      while (v23 != v22);
      BOOL v24 = v41;
    }
    long long v42 = v22;
    operator delete(v24);
  }
  if (!v77)
  {
LABEL_80:
    if (!v74) {
      goto LABEL_87;
    }
    goto LABEL_81;
  }
  if (v76 != v75)
  {
    if (v76) {
      (*(void (**)(void *, uint64_t, uint64_t))(*v76 + 40))(v76, v17, v18);
    }
    goto LABEL_80;
  }
  (*(void (**)(void *))(v75[0] + 32))(v75);
  if (!v74) {
    goto LABEL_87;
  }
LABEL_81:
  if (v73 == v72)
  {
    (*(void (**)(void *))(v72[0] + 32))(v72);
  }
  else if (v73)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v73 + 40))(v73, v17, v18);
  }
LABEL_87:
  if (v59 && SHIBYTE(v58) < 0) {
    operator delete((void *)__dst);
  }
  unsigned int v25 = *(_DWORD *)(a2 + 144);
  LOBYTE(__dst) = 0;
  char v59 = 0;
  LOWORD(v61) = 0;
  uint64_t v60 = v25;
  *(void *)a1 = &unk_26CB9F080;
  sub_21B8471D4(a1 + 8, &v30);
  *(void *)a1 = &unk_26CB9EF20;
  sub_21B8E24C8(a1 + 128, (uint64_t)&__dst);
  *(void *)(a1 + 160) = v60;
  *(_WORD *)(a1 + 168) = v61;
  if (v59 && (void)__dst)
  {
    *((void *)&__dst + 1) = __dst;
    operator delete((void *)__dst);
  }
  sub_21B848B68((uint64_t)&v30);
  if (v29 && SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  *(void *)a1 = &unk_26CB9D150;
  return a1;
}

void sub_21B8E31A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8E337C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_21B8E338C()
{
}

uint64_t sub_21B8E3394(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B8E3410(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E34AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160)) {
    goto LABEL_5;
  }
  uint64_t v2 = a1 + 128;
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3 != a1 + 128)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
LABEL_5:
    if (!*(unsigned char *)(a1 + 120)) {
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 128);
  if (!*(unsigned char *)(a1 + 120)) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 == a1 + 88)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
LABEL_12:
  if (!*(unsigned char *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

char **sub_21B8E35D8(char **a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x186186186186187) {
      sub_21B846300();
    }
    int v6 = (char *)operator new(168 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 168 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_21B847590(&v6[v7], (long long *)(a2 + v7));
      v7 += 168;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_21B8E368C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 168;
        sub_21B847844(v4);
      }
      while ((void *)v4 != v3);
      int v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8E36F4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = HIDWORD(v3);
  int v309 = v3;
  BOOL v5 = v3 >= 2 && HIDWORD(v3) > 1;
  if (!v5
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ImageProcessing/src/NonMaximumSuppression.cpp", 63, (uint64_t)"w > 1 && h > 1", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t v310 = (v4 - 1);
  if (v4 != 2)
  {
    v314 = a2 + 1;
    v312 = a2 + 2;
    int v315 = v309 - 1;
    if (v309 == 2) {
      goto LABEL_11;
    }
    int v114 = 0;
    uint64_t v115 = 1;
LABEL_163:
    uint64_t v311 = v115 << 32;
    int v320 = v115 - 1;
    int v318 = v115 + 1;
    uint64_t v116 = 1;
    uint64_t v319 = v115;
    while (1)
    {
      v316 = v114;
      int v117 = *(_DWORD *)(a1 + 16);
      int v118 = *(_DWORD *)(a1 + 20);
      uint64_t v119 = *(void *)a1;
      float v120 = *(float *)(*(void *)a1 + 4 * (v117 * v116 + v118 * v115));
      v321 = (char *)operator new(0x20uLL);
      v322 = v321;
      v323 = v321 + 32;
      v324 = &v321;
      int v121 = v116 - 1;
      sub_21B8E4EE0((uint64_t *)&v324, *(float *)(v119 + 4 * ((v116 - 1) * v117 + v118 * v320)));
      int v122 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v116 + *(_DWORD *)(a1 + 20) * v320));
      v123 = v324;
      uint64_t v125 = v324[1];
      int v124 = v324[2];
      if (v125 < v124)
      {
        *(_DWORD *)uint64_t v125 = v122;
        uint64_t v126 = (uint64_t)(v125 + 4);
        goto LABEL_186;
      }
      unint64_t v127 = *v324;
      uint64_t v128 = v125 - *v324;
      uint64_t v129 = v128 >> 2;
      unint64_t v130 = (v128 >> 2) + 1;
      if (v130 >> 62) {
        goto LABEL_353;
      }
      uint64_t v131 = v124 - v127;
      if (v131 >> 1 > v130) {
        unint64_t v130 = v131 >> 1;
      }
      unint64_t v132 = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v130;
      if (v132) {
        break;
      }
      unint64_t v133 = 0;
      v134 = (char *)(4 * v129);
      *(_DWORD *)(4 * v129) = v122;
      uint64_t v126 = 4 * v129 + 4;
      int64_t v135 = v125 - v127;
      if (v125 != v127) {
        goto LABEL_178;
      }
LABEL_184:
      std::__shared_weak_count *v123 = v134;
      v123[1] = (char *)v126;
      v123[2] = &v133[4 * v132];
      if (v127) {
        operator delete(v127);
      }
LABEL_186:
      v123[1] = (char *)v126;
      int v317 = v116 + 1;
      int v145 = *(_DWORD *)(*(void *)a1
                       + 4 * (*(_DWORD *)(a1 + 16) * (v116 + 1) + *(_DWORD *)(a1 + 20) * v320));
      uint64_t v146 = v324;
      int v148 = v324[1];
      __n128 v147 = v324[2];
      if (v148 < v147)
      {
        *(_DWORD *)int v148 = v145;
        uint64_t v149 = (uint64_t)(v148 + 4);
        goto LABEL_207;
      }
      uint64_t v150 = *v324;
      uint64_t v151 = v148 - *v324;
      uint64_t v152 = v151 >> 2;
      unint64_t v153 = (v151 >> 2) + 1;
      if (v153 >> 62) {
        goto LABEL_353;
      }
      uint64_t v154 = v147 - v150;
      if (v154 >> 1 > v153) {
        unint64_t v153 = v154 >> 1;
      }
      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v155 = v153;
      }
      if (v155)
      {
        if (v155 >> 62) {
          goto LABEL_354;
        }
        v156 = operator new(4 * v155);
        int v157 = &v156[4 * v152];
        *(_DWORD *)int v157 = v145;
        uint64_t v149 = (uint64_t)(v157 + 4);
        int64_t v158 = v148 - v150;
        if (v148 == v150) {
          goto LABEL_205;
        }
LABEL_199:
        unint64_t v159 = v158 - 4;
        if (v159 < 0x2C) {
          goto LABEL_364;
        }
        if ((unint64_t)(v148 - v156 - v151) < 0x20) {
          goto LABEL_364;
        }
        uint64_t v160 = (v159 >> 2) + 1;
        uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
        char v162 = &v148[-v161];
        v157 -= v161;
        v163 = &v156[4 * v152 - 16];
        __int16 v164 = v148 - 16;
        uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v166 = *(_OWORD *)v164;
          *(v163 - 1) = *((_OWORD *)v164 - 1);
          _OWORD *v163 = v166;
          v163 -= 2;
          v164 -= 32;
          v165 -= 8;
        }
        while (v165);
        int v148 = v162;
        if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_364:
          do
          {
            int v167 = *((_DWORD *)v148 - 1);
            v148 -= 4;
            *((_DWORD *)v157 - 1) = v167;
            v157 -= 4;
          }
          while (v148 != v150);
        }
        goto LABEL_205;
      }
      v156 = 0;
      int v157 = (char *)(4 * v152);
      *(_DWORD *)(4 * v152) = v145;
      uint64_t v149 = 4 * v152 + 4;
      int64_t v158 = v148 - v150;
      if (v148 != v150) {
        goto LABEL_199;
      }
LABEL_205:
      *uint64_t v146 = v157;
      v146[1] = (char *)v149;
      v146[2] = &v156[4 * v155];
      if (v150) {
        operator delete(v150);
      }
LABEL_207:
      v146[1] = (char *)v149;
      int v168 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v121 + *(_DWORD *)(a1 + 20) * v319));
      v169 = v324;
      uint64_t v171 = v324[1];
      v170 = v324[2];
      if (v171 < v170)
      {
        *(_DWORD *)uint64_t v171 = v168;
        uint64_t v172 = (uint64_t)(v171 + 4);
        goto LABEL_228;
      }
      v173 = *v324;
      uint64_t v174 = v171 - *v324;
      uint64_t v175 = v174 >> 2;
      unint64_t v176 = (v174 >> 2) + 1;
      if (v176 >> 62) {
        goto LABEL_353;
      }
      uint64_t v177 = v170 - v173;
      if (v177 >> 1 > v176) {
        unint64_t v176 = v177 >> 1;
      }
      if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v178 = v176;
      }
      if (v178)
      {
        if (v178 >> 62) {
          goto LABEL_354;
        }
        unsigned int v179 = operator new(4 * v178);
        unsigned int v180 = &v179[4 * v175];
        *(_DWORD *)unsigned int v180 = v168;
        uint64_t v172 = (uint64_t)(v180 + 4);
        int64_t v181 = v171 - v173;
        if (v171 == v173) {
          goto LABEL_226;
        }
LABEL_220:
        unint64_t v182 = v181 - 4;
        if (v182 < 0x2C) {
          goto LABEL_365;
        }
        if ((unint64_t)(v171 - &v179[v174]) < 0x20) {
          goto LABEL_365;
        }
        uint64_t v183 = (v182 >> 2) + 1;
        uint64_t v184 = 4 * (v183 & 0x7FFFFFFFFFFFFFF8);
        v185 = &v171[-v184];
        v180 -= v184;
        unsigned int v186 = &v179[4 * v175 - 16];
        v187 = v171 - 16;
        uint64_t v188 = v183 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v189 = *(_OWORD *)v187;
          *(v186 - 1) = *((_OWORD *)v187 - 1);
          *unsigned int v186 = v189;
          v186 -= 2;
          v187 -= 32;
          v188 -= 8;
        }
        while (v188);
        uint64_t v171 = v185;
        if (v183 != (v183 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_365:
          do
          {
            int v190 = *((_DWORD *)v171 - 1);
            v171 -= 4;
            *((_DWORD *)v180 - 1) = v190;
            v180 -= 4;
          }
          while (v171 != v173);
        }
        goto LABEL_226;
      }
      unsigned int v179 = 0;
      unsigned int v180 = (char *)(4 * v175);
      *(_DWORD *)(4 * v175) = v168;
      uint64_t v172 = 4 * v175 + 4;
      int64_t v181 = v171 - v173;
      if (v171 != v173) {
        goto LABEL_220;
      }
LABEL_226:
      unsigned char *v169 = v180;
      v169[1] = (char *)v172;
      v169[2] = &v179[4 * v178];
      if (v173) {
        operator delete(v173);
      }
LABEL_228:
      v169[1] = (char *)v172;
      int v191 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v317 + *(_DWORD *)(a1 + 20) * v319));
      v192 = v324;
      int v194 = v324[1];
      uint64_t v193 = v324[2];
      if (v194 < v193)
      {
        *(_DWORD *)int v194 = v191;
        uint64_t v195 = (uint64_t)(v194 + 4);
        goto LABEL_249;
      }
      uint64_t v196 = *v324;
      uint64_t v197 = v194 - *v324;
      uint64_t v198 = v197 >> 2;
      unint64_t v199 = (v197 >> 2) + 1;
      if (v199 >> 62) {
        goto LABEL_353;
      }
      uint64_t v200 = v193 - v196;
      if (v200 >> 1 > v199) {
        unint64_t v199 = v200 >> 1;
      }
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v201 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v201 = v199;
      }
      if (v201)
      {
        if (v201 >> 62) {
          goto LABEL_354;
        }
        v202 = operator new(4 * v201);
        v203 = &v202[4 * v198];
        *(_DWORD *)v203 = v191;
        uint64_t v195 = (uint64_t)(v203 + 4);
        int64_t v204 = v194 - v196;
        if (v194 == v196) {
          goto LABEL_247;
        }
LABEL_241:
        unint64_t v205 = v204 - 4;
        if (v205 < 0x2C) {
          goto LABEL_366;
        }
        if ((unint64_t)(v194 - &v202[v197]) < 0x20) {
          goto LABEL_366;
        }
        uint64_t v206 = (v205 >> 2) + 1;
        uint64_t v207 = 4 * (v206 & 0x7FFFFFFFFFFFFFF8);
        v208 = &v194[-v207];
        v203 -= v207;
        v209 = &v202[4 * v198 - 16];
        v210 = v194 - 16;
        uint64_t v211 = v206 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v212 = *(_OWORD *)v210;
          *(v209 - 1) = *((_OWORD *)v210 - 1);
          _OWORD *v209 = v212;
          v209 -= 2;
          v210 -= 32;
          v211 -= 8;
        }
        while (v211);
        int v194 = v208;
        if (v206 != (v206 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_366:
          do
          {
            int v213 = *((_DWORD *)v194 - 1);
            v194 -= 4;
            *((_DWORD *)v203 - 1) = v213;
            v203 -= 4;
          }
          while (v194 != v196);
        }
        goto LABEL_247;
      }
      v202 = 0;
      v203 = (char *)(4 * v198);
      *(_DWORD *)(4 * v198) = v191;
      uint64_t v195 = 4 * v198 + 4;
      int64_t v204 = v194 - v196;
      if (v194 != v196) {
        goto LABEL_241;
      }
LABEL_247:
      *v192 = v203;
      v192[1] = (char *)v195;
      v192[2] = &v202[4 * v201];
      if (v196) {
        operator delete(v196);
      }
LABEL_249:
      v192[1] = (char *)v195;
      int v214 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v121 + *(_DWORD *)(a1 + 20) * v318));
      v215 = v324;
      v217 = v324[1];
      v216 = v324[2];
      if (v217 < v216)
      {
        *(_DWORD *)v217 = v214;
        uint64_t v218 = (uint64_t)(v217 + 4);
        goto LABEL_270;
      }
      v219 = *v324;
      uint64_t v220 = v217 - *v324;
      uint64_t v221 = v220 >> 2;
      unint64_t v222 = (v220 >> 2) + 1;
      if (v222 >> 62) {
        goto LABEL_353;
      }
      uint64_t v223 = v216 - v219;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        if (v224 >> 62) {
          goto LABEL_354;
        }
        v225 = operator new(4 * v224);
        v226 = &v225[4 * v221];
        *(_DWORD *)v226 = v214;
        uint64_t v218 = (uint64_t)(v226 + 4);
        int64_t v227 = v217 - v219;
        if (v217 == v219) {
          goto LABEL_268;
        }
LABEL_262:
        unint64_t v228 = v227 - 4;
        if (v228 < 0x2C) {
          goto LABEL_367;
        }
        if ((unint64_t)(v217 - &v225[v220]) < 0x20) {
          goto LABEL_367;
        }
        uint64_t v229 = (v228 >> 2) + 1;
        uint64_t v230 = 4 * (v229 & 0x7FFFFFFFFFFFFFF8);
        v231 = &v217[-v230];
        v226 -= v230;
        v232 = &v225[4 * v221 - 16];
        v233 = v217 - 16;
        uint64_t v234 = v229 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v235 = *(_OWORD *)v233;
          *(v232 - 1) = *((_OWORD *)v233 - 1);
          _OWORD *v232 = v235;
          v232 -= 2;
          v233 -= 32;
          v234 -= 8;
        }
        while (v234);
        v217 = v231;
        if (v229 != (v229 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_367:
          do
          {
            int v236 = *((_DWORD *)v217 - 1);
            v217 -= 4;
            *((_DWORD *)v226 - 1) = v236;
            v226 -= 4;
          }
          while (v217 != v219);
        }
        goto LABEL_268;
      }
      v225 = 0;
      v226 = (char *)(4 * v221);
      *(_DWORD *)(4 * v221) = v214;
      uint64_t v218 = 4 * v221 + 4;
      int64_t v227 = v217 - v219;
      if (v217 != v219) {
        goto LABEL_262;
      }
LABEL_268:
      *v215 = v226;
      v215[1] = (char *)v218;
      v215[2] = &v225[4 * v224];
      if (v219) {
        operator delete(v219);
      }
LABEL_270:
      v215[1] = (char *)v218;
      int v237 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v116 + *(_DWORD *)(a1 + 20) * v318));
      v238 = v324;
      v240 = v324[1];
      v239 = v324[2];
      if (v240 < v239)
      {
        *(_DWORD *)v240 = v237;
        uint64_t v241 = (uint64_t)(v240 + 4);
        goto LABEL_291;
      }
      v242 = *v324;
      uint64_t v243 = v240 - *v324;
      uint64_t v244 = v243 >> 2;
      unint64_t v245 = (v243 >> 2) + 1;
      if (v245 >> 62) {
        goto LABEL_353;
      }
      uint64_t v246 = v239 - v242;
      if (v246 >> 1 > v245) {
        unint64_t v245 = v246 >> 1;
      }
      if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v247 = v245;
      }
      if (v247)
      {
        if (v247 >> 62) {
          goto LABEL_354;
        }
        v248 = operator new(4 * v247);
        v249 = &v248[4 * v244];
        *(_DWORD *)v249 = v237;
        uint64_t v241 = (uint64_t)(v249 + 4);
        int64_t v250 = v240 - v242;
        if (v240 == v242) {
          goto LABEL_289;
        }
LABEL_283:
        unint64_t v251 = v250 - 4;
        if (v251 < 0x2C) {
          goto LABEL_368;
        }
        if ((unint64_t)(v240 - &v248[v243]) < 0x20) {
          goto LABEL_368;
        }
        uint64_t v252 = (v251 >> 2) + 1;
        uint64_t v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
        v254 = &v240[-v253];
        v249 -= v253;
        v255 = &v248[4 * v244 - 16];
        v256 = v240 - 16;
        uint64_t v257 = v252 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v258 = *(_OWORD *)v256;
          *(v255 - 1) = *((_OWORD *)v256 - 1);
          _OWORD *v255 = v258;
          v255 -= 2;
          v256 -= 32;
          v257 -= 8;
        }
        while (v257);
        v240 = v254;
        if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_368:
          do
          {
            int v259 = *((_DWORD *)v240 - 1);
            v240 -= 4;
            *((_DWORD *)v249 - 1) = v259;
            v249 -= 4;
          }
          while (v240 != v242);
        }
        goto LABEL_289;
      }
      v248 = 0;
      v249 = (char *)(4 * v244);
      *(_DWORD *)(4 * v244) = v237;
      uint64_t v241 = 4 * v244 + 4;
      int64_t v250 = v240 - v242;
      if (v240 != v242) {
        goto LABEL_283;
      }
LABEL_289:
      *v238 = v249;
      v238[1] = (char *)v241;
      v238[2] = &v248[4 * v247];
      if (v242) {
        operator delete(v242);
      }
LABEL_291:
      int v114 = v316;
      v238[1] = (char *)v241;
      int v260 = *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v317 + *(_DWORD *)(a1 + 20) * v318));
      v261 = v324;
      v263 = v324[1];
      v262 = v324[2];
      if (v263 < v262)
      {
        *(_DWORD *)v263 = v260;
        v261[1] = v263 + 4;
        v264 = v321;
        v265 = v322;
        if (v321 == v322) {
          goto LABEL_333;
        }
        goto LABEL_293;
      }
      v271 = *v324;
      uint64_t v272 = v263 - *v324;
      uint64_t v273 = v272 >> 2;
      unint64_t v274 = (v272 >> 2) + 1;
      if (v274 >> 62) {
LABEL_353:
      }
        sub_21B846300();
      uint64_t v275 = v262 - v271;
      if (v275 >> 1 > v274) {
        unint64_t v274 = v275 >> 1;
      }
      if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v276 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v276 = v274;
      }
      if (!v276)
      {
        v277 = 0;
        v278 = (char *)(4 * v273);
        *(_DWORD *)(4 * v273) = v260;
        uint64_t v279 = 4 * v273 + 4;
        int64_t v280 = v263 - v271;
        if (v263 == v271) {
          goto LABEL_330;
        }
LABEL_324:
        unint64_t v288 = v280 - 4;
        if (v288 < 0x2C) {
          goto LABEL_369;
        }
        if ((unint64_t)(v263 - &v277[v272]) < 0x20) {
          goto LABEL_369;
        }
        uint64_t v289 = (v288 >> 2) + 1;
        uint64_t v290 = 4 * (v289 & 0x7FFFFFFFFFFFFFF8);
        v291 = &v263[-v290];
        v278 -= v290;
        v292 = &v277[4 * v273 - 16];
        v293 = v263 - 16;
        uint64_t v294 = v289 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v295 = *(_OWORD *)v293;
          *(v292 - 1) = *((_OWORD *)v293 - 1);
          _OWORD *v292 = v295;
          v292 -= 2;
          v293 -= 32;
          v294 -= 8;
        }
        while (v294);
        v263 = v291;
        if (v289 != (v289 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_369:
          do
          {
            int v296 = *((_DWORD *)v263 - 1);
            v263 -= 4;
            *((_DWORD *)v278 - 1) = v296;
            v278 -= 4;
          }
          while (v263 != v271);
        }
        goto LABEL_330;
      }
      if (v276 >> 62) {
LABEL_354:
      }
        sub_21B845A48();
      v277 = operator new(4 * v276);
      v278 = &v277[4 * v273];
      *(_DWORD *)v278 = v260;
      uint64_t v279 = (uint64_t)(v278 + 4);
      int64_t v280 = v263 - v271;
      if (v263 != v271) {
        goto LABEL_324;
      }
LABEL_330:
      *v261 = v278;
      v261[1] = (char *)v279;
      v261[2] = &v277[4 * v276];
      if (v271) {
        operator delete(v271);
      }
      int v114 = v316;
      v261[1] = (char *)v279;
      v264 = v321;
      v265 = v322;
      if (v321 == v322)
      {
LABEL_333:
        BOOL v268 = 1;
        if (!v264) {
          goto LABEL_301;
        }
        goto LABEL_300;
      }
LABEL_293:
      v266 = v264 + 4;
      do
      {
        float v267 = *((float *)v266 - 1);
        BOOL v268 = v120 > v267;
        BOOL v269 = v120 <= v267 || v266 == v265;
        v266 += 4;
      }
      while (!v269);
      if (!v264) {
        goto LABEL_301;
      }
LABEL_300:
      operator delete(v264);
LABEL_301:
      if (v268)
      {
        if ((unint64_t)v114 < *v312)
        {
          uint64_t *v114 = v116 | v311;
          v270 = v114 + 1;
          goto LABEL_342;
        }
        v281 = (char *)*a2;
        uint64_t v282 = (uint64_t)v114 - *a2;
        uint64_t v283 = v282 >> 3;
        unint64_t v284 = (v282 >> 3) + 1;
        if (v284 >> 61) {
          sub_21B846300();
        }
        uint64_t v285 = *v312 - (void)v281;
        if (v285 >> 2 > v284) {
          unint64_t v284 = v285 >> 2;
        }
        if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v286 = v284;
        }
        if (v286)
        {
          if (v286 >> 61) {
            sub_21B845A48();
          }
          v287 = operator new(8 * v286);
        }
        else
        {
          v287 = 0;
        }
        v297 = (uint64_t *)&v287[8 * v283];
        uint64_t *v297 = v116 | v311;
        v270 = v297 + 1;
        if (v114 == (uint64_t *)v281)
        {
          *a2 = v297;
          a2[1] = v270;
          a2[2] = &v287[8 * v286];
          if (!v114) {
            goto LABEL_342;
          }
LABEL_341:
          operator delete(v114);
          goto LABEL_342;
        }
        unint64_t v298 = (char *)v114 - v281 - 8;
        if (v298 < 0x168
          || (unint64_t v302 = ((char *)(v114 - 1) - v281) & 0xFFFFFFFFFFFFFFF8, &v287[v282 - 8 - v302] > &v287[v282 - 8])
          || (uint64_t *)((char *)v114 - v302 - 8) > v114 - 1
          || (unint64_t)((char *)v114 - &v287[v282]) < 0x20)
        {
          v299 = v114;
          v300 = (uint64_t **)a2;
          do
          {
LABEL_339:
            uint64_t v301 = *--v299;
            *--v297 = v301;
          }
          while (v299 != (uint64_t *)v281);
          goto LABEL_340;
        }
        uint64_t v303 = (v298 >> 3) + 1;
        uint64_t v304 = 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
        v299 = &v114[v304 / 0xFFFFFFFFFFFFFFF8];
        v297 = (uint64_t *)((char *)v297 - v304);
        v305 = &v287[8 * v283 - 16];
        v306 = v114 - 2;
        uint64_t v307 = v303 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v308 = *(_OWORD *)v306;
          *(v305 - 1) = *((_OWORD *)v306 - 1);
          _OWORD *v305 = v308;
          v305 -= 2;
          v306 -= 4;
          v307 -= 4;
        }
        while (v307);
        v300 = (uint64_t **)a2;
        if (v303 != (v303 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_339;
        }
LABEL_340:
        int v114 = *v300;
        *v300 = v297;
        v300[1] = v270;
        v300[2] = (uint64_t *)&v287[8 * v286];
        if (v114) {
          goto LABEL_341;
        }
LABEL_342:
        uint64_t v115 = v319;
        uint64_t *v314 = (uint64_t)v270;
        int v114 = v270;
        if (v315 == ++v116)
        {
LABEL_162:
          if (v310 == ++v115) {
            goto LABEL_7;
          }
          goto LABEL_163;
        }
      }
      else
      {
        uint64_t v115 = v319;
        if (v315 == ++v116) {
          goto LABEL_162;
        }
      }
    }
    if (v132 >> 62) {
      goto LABEL_354;
    }
    unint64_t v133 = operator new(4 * v132);
    v134 = &v133[4 * v129];
    *(_DWORD *)v134 = v122;
    uint64_t v126 = (uint64_t)(v134 + 4);
    int64_t v135 = v125 - v127;
    if (v125 == v127) {
      goto LABEL_184;
    }
LABEL_178:
    unint64_t v136 = v135 - 4;
    if (v136 < 0x2C) {
      goto LABEL_370;
    }
    if ((unint64_t)(v125 - v133 - v128) < 0x20) {
      goto LABEL_370;
    }
    uint64_t v137 = (v136 >> 2) + 1;
    uint64_t v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
    v139 = &v125[-v138];
    v134 -= v138;
    int v140 = &v133[4 * v129 - 16];
    uint64_t v141 = v125 - 16;
    uint64_t v142 = v137 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v143 = *(_OWORD *)v141;
      *(v140 - 1) = *((_OWORD *)v141 - 1);
      *int v140 = v143;
      v140 -= 2;
      v141 -= 32;
      v142 -= 8;
    }
    while (v142);
    uint64_t v125 = v139;
    if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_370:
      do
      {
        int v144 = *((_DWORD *)v125 - 1);
        v125 -= 4;
        *((_DWORD *)v134 - 1) = v144;
        v134 -= 4;
      }
      while (v125 != v127);
    }
    goto LABEL_184;
  }
LABEL_7:
  v314 = a2 + 1;
  v312 = a2 + 2;
  if (v309)
  {
LABEL_11:
    uint64_t v6 = 0;
    while (1)
    {
      float v8 = *(float *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v6));
      sub_21B8E4C00(&v321, (uint64_t *)a1, v6, 0);
      if (v321 == v322)
      {
        BOOL v11 = 1;
        if (v321) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v9 = v321 + 4;
        do
        {
          float v10 = *((float *)v9 - 1);
          BOOL v11 = v8 > v10;
          BOOL v12 = v8 <= v10 || v9 == v322;
          v9 += 4;
        }
        while (!v12);
        if (v321)
        {
LABEL_23:
          v322 = v321;
          operator delete(v321);
        }
      }
      if (!v11) {
        goto LABEL_14;
      }
      uint64_t v13 = (char *)*v314;
      if ((unint64_t)*v314 < *v312)
      {
        *(void *)uint64_t v13 = v6;
        uint64_t v7 = (uint64_t)(v13 + 8);
      }
      else
      {
        uint64_t v14 = (char *)*a2;
        uint64_t v15 = (uint64_t)&v13[-*a2];
        uint64_t v16 = v15 >> 3;
        unint64_t v17 = (v15 >> 3) + 1;
        if (v17 >> 61) {
LABEL_357:
        }
          sub_21B846300();
        uint64_t v18 = *v312 - (void)v14;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 >> 61) {
LABEL_359:
          }
            sub_21B845A48();
          int v20 = operator new(8 * v19);
          int v21 = &v20[8 * v16];
          *int v21 = v6;
          uint64_t v7 = (uint64_t)(v21 + 1);
          uint64_t v22 = (char *)(v13 - v14);
          if (v13 != v14)
          {
LABEL_35:
            unint64_t v23 = (unint64_t)(v22 - 8);
            if (v23 < 0x58) {
              goto LABEL_371;
            }
            if ((unint64_t)(v13 - v20 - v15) < 0x20) {
              goto LABEL_371;
            }
            uint64_t v24 = (v23 >> 3) + 1;
            uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
            long long v26 = &v13[-v25];
            int v21 = (void *)((char *)v21 - v25);
            uint64_t v27 = &v20[8 * v16 - 16];
            uint64_t v28 = v13 - 16;
            uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *uint64_t v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 4;
            }
            while (v29);
            uint64_t v13 = v26;
            if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_371:
              do
              {
                uint64_t v31 = *((void *)v13 - 1);
                v13 -= 8;
                *--int v21 = v31;
              }
              while (v13 != v14);
            }
            uint64_t v13 = (char *)*a2;
            *a2 = v21;
            a2[1] = v7;
            a2[2] = &v20[8 * v19];
            if (!v13) {
              goto LABEL_13;
            }
LABEL_47:
            operator delete(v13);
            goto LABEL_13;
          }
        }
        else
        {
          int v20 = 0;
          int v21 = (void *)(8 * v16);
          *(void *)(8 * v16) = v6;
          uint64_t v7 = 8 * v16 + 8;
          uint64_t v22 = (char *)(v13 - v14);
          if (v13 != v14) {
            goto LABEL_35;
          }
        }
        *a2 = v21;
        a2[1] = v7;
        a2[2] = &v20[8 * v19];
        if (v13) {
          goto LABEL_47;
        }
      }
LABEL_13:
      uint64_t *v314 = v7;
LABEL_14:
      if (++v6 == v309)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v310 << 32;
        while (1)
        {
          float v35 = *(float *)(*(void *)a1 + 4
                                         * (*(_DWORD *)(a1 + 16) * v32 + *(_DWORD *)(a1 + 20) * v310));
          sub_21B8E4C00(&v321, (uint64_t *)a1, v32, v310);
          if (v321 == v322)
          {
            BOOL v38 = 1;
            if (v321) {
              goto LABEL_60;
            }
          }
          else
          {
            char v36 = v321 + 4;
            do
            {
              float v37 = *((float *)v36 - 1);
              BOOL v38 = v35 > v37;
              BOOL v39 = v35 <= v37 || v36 == v322;
              v36 += 4;
            }
            while (!v39);
            if (v321)
            {
LABEL_60:
              v322 = v321;
              operator delete(v321);
            }
          }
          if (!v38) {
            goto LABEL_51;
          }
          long long v40 = (char *)*v314;
          if ((unint64_t)*v314 < *v312)
          {
            *(void *)long long v40 = v32 | v33;
            uint64_t v34 = (uint64_t)(v40 + 8);
          }
          else
          {
            long long v41 = (char *)*a2;
            uint64_t v42 = (uint64_t)&v40[-*a2];
            uint64_t v43 = v42 >> 3;
            unint64_t v44 = (v42 >> 3) + 1;
            if (v44 >> 61) {
              goto LABEL_357;
            }
            uint64_t v45 = *v312 - (void)v41;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              if (v46 >> 61) {
                goto LABEL_359;
              }
              uint64_t v47 = operator new(8 * v46);
              char v48 = (uint64_t *)&v47[8 * v43];
              *char v48 = v32 | v33;
              uint64_t v34 = (uint64_t)(v48 + 1);
              long long v49 = (char *)(v40 - v41);
              if (v40 != v41)
              {
LABEL_72:
                unint64_t v50 = (unint64_t)(v49 - 8);
                if (v50 < 0x58) {
                  goto LABEL_372;
                }
                if ((unint64_t)(v40 - v47 - v42) < 0x20) {
                  goto LABEL_372;
                }
                uint64_t v51 = (v50 >> 3) + 1;
                uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                char v53 = &v40[-v52];
                char v48 = (uint64_t *)((char *)v48 - v52);
                long long v54 = &v47[8 * v43 - 16];
                long long v55 = v40 - 16;
                uint64_t v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v57 = *(_OWORD *)v55;
                  *(v54 - 1) = *((_OWORD *)v55 - 1);
                  *long long v54 = v57;
                  v54 -= 2;
                  v55 -= 32;
                  v56 -= 4;
                }
                while (v56);
                long long v40 = v53;
                if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_372:
                  do
                  {
                    uint64_t v58 = *((void *)v40 - 1);
                    v40 -= 8;
                    *--char v48 = v58;
                  }
                  while (v40 != v41);
                }
                long long v40 = (char *)*a2;
                *a2 = v48;
                a2[1] = v34;
                a2[2] = &v47[8 * v46];
                if (!v40) {
                  goto LABEL_50;
                }
LABEL_84:
                operator delete(v40);
                goto LABEL_50;
              }
            }
            else
            {
              uint64_t v47 = 0;
              char v48 = (uint64_t *)(8 * v43);
              *(void *)(8 * v43) = v32 | v33;
              uint64_t v34 = 8 * v43 + 8;
              long long v49 = (char *)(v40 - v41);
              if (v40 != v41) {
                goto LABEL_72;
              }
            }
            *a2 = v48;
            a2[1] = v34;
            a2[2] = &v47[8 * v46];
            if (v40) {
              goto LABEL_84;
            }
          }
LABEL_50:
          uint64_t *v314 = v34;
LABEL_51:
          if (++v32 == v309) {
            goto LABEL_8;
          }
        }
      }
    }
  }
LABEL_8:
  if (v310 != 1)
  {
    uint64_t v59 = (v309 - 1);
    uint64_t v60 = 1;
    while (1)
    {
      float v62 = *(float *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 20) * v60));
      sub_21B8E4C00(&v321, (uint64_t *)a1, 0, v60);
      if (v321 == v322)
      {
        BOOL v65 = 1;
        if (v321) {
          goto LABEL_97;
        }
      }
      else
      {
        int v63 = v321 + 4;
        do
        {
          float v64 = *((float *)v63 - 1);
          BOOL v65 = v62 > v64;
          BOOL v66 = v62 <= v64 || v63 == v322;
          v63 += 4;
        }
        while (!v66);
        if (v321)
        {
LABEL_97:
          v322 = v321;
          operator delete(v321);
        }
      }
      if (!v65) {
        goto LABEL_88;
      }
      int v67 = (char *)*v314;
      if ((unint64_t)*v314 < *v312)
      {
        *(void *)int v67 = v60 << 32;
        uint64_t v61 = (uint64_t)(v67 + 8);
        goto LABEL_87;
      }
      char v68 = (char *)*a2;
      uint64_t v69 = (uint64_t)&v67[-*a2];
      uint64_t v70 = v69 >> 3;
      unint64_t v71 = (v69 >> 3) + 1;
      if (v71 >> 61) {
LABEL_358:
      }
        sub_21B846300();
      uint64_t v72 = *v312 - (void)v68;
      if (v72 >> 2 > v71) {
        unint64_t v71 = v72 >> 2;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73)
      {
        if (v73 >> 61) {
LABEL_360:
        }
          sub_21B845A48();
        char v74 = operator new(8 * v73);
        long long v75 = &v74[8 * v70];
        *(void *)long long v75 = v60 << 32;
        uint64_t v61 = (uint64_t)(v75 + 8);
        unint64_t v76 = (char *)(v67 - v68);
        if (v67 == v68)
        {
LABEL_114:
          *a2 = v75;
          a2[1] = v61;
          a2[2] = &v74[8 * v73];
          if (!v67) {
            goto LABEL_87;
          }
LABEL_122:
          operator delete(v67);
          goto LABEL_87;
        }
      }
      else
      {
        char v74 = 0;
        long long v75 = (char *)(8 * v70);
        *(void *)(8 * v70) = v60 << 32;
        uint64_t v61 = 8 * v70 + 8;
        unint64_t v76 = (char *)(v67 - v68);
        if (v67 == v68) {
          goto LABEL_114;
        }
      }
      unint64_t v77 = (unint64_t)(v76 - 8);
      if (v77 < 0x58)
      {
        uint64_t v78 = (char **)a2;
        do
        {
LABEL_120:
          uint64_t v86 = *((void *)v67 - 1);
          v67 -= 8;
          *((void *)v75 - 1) = v86;
          v75 -= 8;
        }
        while (v67 != v68);
        goto LABEL_121;
      }
      uint64_t v78 = (char **)a2;
      if ((unint64_t)(v67 - v74 - v69) < 0x20) {
        goto LABEL_120;
      }
      uint64_t v79 = (v77 >> 3) + 1;
      uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
      float v81 = &v67[-v80];
      v75 -= v80;
      float v82 = &v74[8 * v70 - 16];
      long long v83 = v67 - 16;
      uint64_t v84 = v79 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v85 = *(_OWORD *)v83;
        *(v82 - 1) = *((_OWORD *)v83 - 1);
        *float v82 = v85;
        v82 -= 2;
        v83 -= 32;
        v84 -= 4;
      }
      while (v84);
      int v67 = v81;
      if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_120;
      }
LABEL_121:
      int v67 = *v78;
      *uint64_t v78 = v75;
      v78[1] = (char *)v61;
      v78[2] = &v74[8 * v73];
      if (v67) {
        goto LABEL_122;
      }
LABEL_87:
      uint64_t *v314 = v61;
LABEL_88:
      if (v310 == ++v60)
      {
        uint64_t v87 = 1;
        while (1)
        {
          float v89 = *(float *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 16) * v59 + *(_DWORD *)(a1 + 20) * v87));
          sub_21B8E4C00(&v321, (uint64_t *)a1, v59, v87);
          if (v321 == v322)
          {
            BOOL v92 = 1;
            if (v321) {
              goto LABEL_135;
            }
          }
          else
          {
            long long v90 = v321 + 4;
            do
            {
              float v91 = *((float *)v90 - 1);
              BOOL v92 = v89 > v91;
              BOOL v93 = v89 <= v91 || v90 == v322;
              v90 += 4;
            }
            while (!v93);
            if (v321)
            {
LABEL_135:
              v322 = v321;
              operator delete(v321);
            }
          }
          if (!v92) {
            goto LABEL_126;
          }
          float v94 = (uint64_t *)*v314;
          if ((unint64_t)*v314 < *v312)
          {
            *float v94 = v59 | (v87 << 32);
            uint64_t v88 = (uint64_t)(v94 + 1);
            goto LABEL_125;
          }
          float v95 = (char *)*a2;
          uint64_t v96 = (uint64_t)v94 - *a2;
          uint64_t v97 = v96 >> 3;
          unint64_t v98 = (v96 >> 3) + 1;
          if (v98 >> 61) {
            goto LABEL_358;
          }
          uint64_t v99 = *v312 - (void)v95;
          if (v99 >> 2 > v98) {
            unint64_t v98 = v99 >> 2;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 >> 61) {
              goto LABEL_360;
            }
            long long v101 = operator new(8 * v100);
            long long v102 = (uint64_t *)&v101[8 * v97];
            *long long v102 = v59 | (v87 << 32);
            uint64_t v88 = (uint64_t)(v102 + 1);
            uint64_t v103 = (char *)((char *)v94 - v95);
            if (v94 == (uint64_t *)v95)
            {
LABEL_152:
              *a2 = v102;
              a2[1] = v88;
              a2[2] = &v101[8 * v100];
              if (!v94) {
                goto LABEL_125;
              }
LABEL_160:
              operator delete(v94);
              goto LABEL_125;
            }
          }
          else
          {
            long long v101 = 0;
            long long v102 = (uint64_t *)(8 * v97);
            *(void *)(8 * v97) = v59 | (v87 << 32);
            uint64_t v88 = 8 * v97 + 8;
            uint64_t v103 = (char *)((char *)v94 - v95);
            if (v94 == (uint64_t *)v95) {
              goto LABEL_152;
            }
          }
          unint64_t v104 = (unint64_t)(v103 - 8);
          if (v104 < 0x58)
          {
            uint64_t v105 = (uint64_t **)a2;
            do
            {
LABEL_158:
              uint64_t v113 = *--v94;
              *--long long v102 = v113;
            }
            while (v94 != (uint64_t *)v95);
            goto LABEL_159;
          }
          uint64_t v105 = (uint64_t **)a2;
          if ((unint64_t)((char *)v94 - &v101[v96]) < 0x20) {
            goto LABEL_158;
          }
          uint64_t v106 = (v104 >> 3) + 1;
          uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
          long long v108 = &v94[v107 / 0xFFFFFFFFFFFFFFF8];
          long long v102 = (uint64_t *)((char *)v102 - v107);
          long long v109 = &v101[8 * v97 - 16];
          int v110 = v94 - 2;
          uint64_t v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v112 = *(_OWORD *)v110;
            *(v109 - 1) = *((_OWORD *)v110 - 1);
            *long long v109 = v112;
            v109 -= 2;
            v110 -= 4;
            v111 -= 4;
          }
          while (v111);
          float v94 = v108;
          if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_158;
          }
LABEL_159:
          float v94 = *v105;
          *uint64_t v105 = v102;
          v105[1] = (uint64_t *)v88;
          v105[2] = (uint64_t *)&v101[8 * v100];
          if (v94) {
            goto LABEL_160;
          }
LABEL_125:
          uint64_t *v314 = v88;
LABEL_126:
          if (v310 == ++v87) {
            return;
          }
        }
      }
    }
  }
}

void sub_21B8E4B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  unint64_t v23 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8E4C00(char **a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  float v8 = (char *)operator new(0x20uLL);
  uint64_t v9 = 0;
  float v10 = v8 + 32;
  *uint64_t v7 = v8;
  v7[1] = v8;
  v7[2] = v8 + 32;
  BOOL v11 = v8;
  int v37 = a4;
  BOOL v38 = v7;
  do
  {
    uint64_t v13 = (_DWORD *)((char *)&unk_21B9AE6EC + 8 * v9);
    int v14 = *v13 + a3;
    if (v14 >= 0)
    {
      int v15 = v13[1] + a4;
      if ((v15 & 0x80000000) == 0
        && (float)((float)*((unsigned int *)a2 + 2) + -1.0) >= (float)v14
        && (float)((float)*((unsigned int *)a2 + 3) + -1.0) >= (float)v15)
      {
        uint64_t v17 = (*((_DWORD *)a2 + 4) * v14 + *((_DWORD *)a2 + 5) * v15);
        uint64_t v18 = *a2;
        if (v11 < v10)
        {
          *(_DWORD *)BOOL v11 = *(_DWORD *)(v18 + 4 * v17);
          uint64_t v12 = (uint64_t)(v11 + 4);
LABEL_3:
          v7[1] = (char *)v12;
          BOOL v11 = (char *)v12;
          goto LABEL_4;
        }
        uint64_t v19 = (v11 - v8) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_21B846300();
        }
        if ((v10 - v8) >> 1 > v20) {
          unint64_t v20 = (v10 - v8) >> 1;
        }
        if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 62) {
            sub_21B845A48();
          }
          unint64_t v22 = v21;
          unint64_t v23 = operator new(4 * v21);
          unint64_t v21 = v22;
          uint64_t v24 = &v23[4 * v19];
          *(_DWORD *)uint64_t v24 = *(_DWORD *)(v18 + 4 * v17);
          uint64_t v12 = (uint64_t)(v24 + 4);
          int64_t v25 = v11 - v8;
          if (v11 != v8)
          {
LABEL_21:
            unint64_t v26 = v25 - 4;
            if (v26 < 0xBC
              || (unint64_t v30 = (v11 - 4 - v8) & 0xFFFFFFFFFFFFFFFCLL, &v23[v11 - v8 - 4 - v30] > &v23[v11 - v8 - 4])
              || &v11[-v30 - 4] > v11 - 4
              || (unint64_t)(v8 - v23) < 0x20)
            {
              uint64_t v27 = v11;
              uint64_t v7 = v38;
            }
            else
            {
              uint64_t v31 = (v26 >> 2) + 1;
              uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v27 = &v11[-v32];
              v24 -= v32;
              uint64_t v33 = &v23[4 * v19 - 16];
              uint64_t v34 = v11 - 16;
              uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v7 = v38;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *uint64_t v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 8;
              }
              while (v35);
              if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_24:
                float v10 = &v23[4 * v21];
                *uint64_t v7 = v24;
                v7[1] = (char *)v12;
                v7[2] = v10;
                if (!v8)
                {
LABEL_26:
                  float v8 = v24;
                  a4 = v37;
                  goto LABEL_3;
                }
LABEL_25:
                uint64_t v29 = v10;
                operator delete(v8);
                float v10 = v29;
                goto LABEL_26;
              }
            }
            do
            {
              int v28 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v24 - 1) = v28;
              v24 -= 4;
            }
            while (v27 != v8);
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v23 = 0;
          uint64_t v24 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = *(_DWORD *)(v18 + 4 * v17);
          uint64_t v12 = 4 * v19 + 4;
          int64_t v25 = v11 - v8;
          if (v11 != v8) {
            goto LABEL_21;
          }
        }
        uint64_t v7 = v38;
        float v10 = &v23[4 * v21];
        void *v38 = v24;
        v38[1] = (char *)v12;
        v38[2] = v10;
        if (!v8) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
LABEL_4:
    ++v9;
  }
  while (v9 != 8);
}

void sub_21B8E4EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    *(void *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21B8E4EE0(uint64_t *a1, float a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(float **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *uint64_t v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  uint64_t v9 = *(float **)v4;
  uint64_t v10 = (uint64_t)v6 - *(void *)v4;
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + 1;
  if (v12 >> 62) {
    sub_21B846300();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_21B845A48();
    }
    int v15 = operator new(4 * v14);
    uint64_t v16 = (float *)&v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *uint64_t v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int64_t v18 = (char *)v6 - (char *)v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  uint64_t v16 = (float *)(4 * v11);
  uint64_t v17 = 0;
  *(float *)(4 * v11) = a2;
  uint64_t v8 = 4 * v11 + 4;
  int64_t v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v7 = &v6[v21 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v16 = (float *)((char *)v16 - v21);
    unint64_t v22 = &v15[4 * v11 - 16];
    unint64_t v23 = v6 - 4;
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *unint64_t v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v26 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(void *)uint64_t v4 = v16;
  *(void *)(v4 + 8) = v8;
  *(void *)(v4 + 16) = v17;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  *(void *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_21B8E5064@<X0>(std::string *a1@<X8>)
{
  sub_21B844260((uint64_t)v11);
  uint64_t v7 = operator new(0x20uLL);
  long long v8 = xmmword_21B9AE730;
  strcpy((char *)v7, "com.apple.LearnedFeatures");
  std::string __p = operator new(0x78uLL);
  long long v6 = xmmword_21B9AE740;
  strcpy((char *)__p, "CV3D_LearnedFeatures_KpNet_Detector_Descriptor_Model/detector_n1_c1_h480_w640_omultiplefp32_i8jbvgyuv2.espresso.net");
  sub_21B97FE7C((uint64_t)&v7, (std::string::size_type)&__p, v12, 1, &v9);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
LABEL_3:
      if (v10) {
        goto LABEL_4;
      }
LABEL_8:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to access model resource path");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v7);
  if (!v10) {
    goto LABEL_8;
  }
LABEL_4:
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(a1, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    if (v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v9;
  }
  v11[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v12[0] = v3;
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D495E70](&v14);
}

void sub_21B8E5308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_free_exception(v32);
  if (a28)
  {
    if (a27 < 0)
    {
      operator delete(__p);
      sub_21B844544((uint64_t)&a30);
      _Unwind_Resume(a1);
    }
  }
  sub_21B844544((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_21B8E5384(void *a1)
{
  *a1 = &unk_26CB9D178;
  a1[1] = &unk_26CB9D1D0;
  operator new();
}

void sub_21B8E55D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E5CA4((uint64_t)va);
  MEMORY[0x21D495F30](v3, 0x10B3C402B4004AALL);
  MEMORY[0x21D495F30](v2, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E5700(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 16))();
}

uint64_t sub_21B8E572C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

uint64_t sub_21B8E5758(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 32))();
}

uint64_t sub_21B8E5784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))();
}

uint64_t sub_21B8E57B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 24))();
}

uint64_t sub_21B8E57DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 64))();
}

uint64_t sub_21B8E5808(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unint64_t))(***(void ***)(a1 + 16) + 72))(**(void **)(a1 + 16), a2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2));
}

uint64_t sub_21B8E5850(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unint64_t))(***(void ***)(a1 + 8) + 72))(**(void **)(a1 + 8), a2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2));
}

uint64_t sub_21B8E5898(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 56))();
}

uint64_t sub_21B8E58C4(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unint64_t))(***(void ***)(a1 + 16) + 48))(**(void **)(a1 + 16), a2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2));
}

void sub_21B8E590C(int a1@<W0>, void *a2@<X8>)
{
  if (a1 != 4
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndExtractor.cpp", 101, (uint64_t)"type == EndToEndModelType::ATUHardNetGlobalFeat", 47, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8E8574(0, (uint64_t)__p);
  long long v14 = v12;
  uint64_t v15 = v13;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  sub_21B8E5CA4((uint64_t)__p);
  uint64_t v3 = HIBYTE(v15);
  char v4 = HIBYTE(v15);
  if (v15 < 0) {
    uint64_t v3 = *((void *)&v14 + 1);
  }
  if (v3 < 6) {
    goto LABEL_12;
  }
  unint64_t v5 = (long long *)v14;
  if (v15 >= 0) {
    unint64_t v5 = &v14;
  }
  long long v6 = (char *)v5 + v3;
  int v7 = *(_DWORD *)(v6 - 6);
  int v8 = *((unsigned __int16 *)v6 - 1);
  if (v7 != 1684960610 || v8 != 25964)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    if ((v4 & 0x80) == 0) {
      return;
    }
LABEL_18:
    operator delete((void *)v14);
    return;
  }
  char v11 = 4;
  strcpy((char *)__p, "main");
  sub_21B83D90C(a2);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v15 < 0) {
      goto LABEL_18;
    }
  }
  else if (v15 < 0)
  {
    goto LABEL_18;
  }
}

void sub_21B8E5A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 - 25) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8E5AA0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9D178;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = &unk_26CB9D1D0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

void sub_21B8E5B14(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9D178;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = &unk_26CB9D1D0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 24))();
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E5BA8(uint64_t result)
{
  *(void *)(result - 8) = &unk_26CB9D178;
  uint64_t v1 = *(void *)(result + 8);
  *(void *)uint64_t result = &unk_26CB9D1D0;
  *(void *)(result + 8) = 0;
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(result + 16))(v1);
  }
  return result;
}

void sub_21B8E5C10(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26CB9D178;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9D1D0;
  *(void *)(a1 + 8) = 0;
  if (v1) {
    (*(void (**)(uint64_t))(a1 + 16))(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E5CA4(uint64_t a1)
{
  sub_21B8E5D7C(a1 + 160, *(void ***)(a1 + 176));
  uint64_t v2 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_14;
  }
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
    return a1;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_21B8E5D7C(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 95) < 0)
      {
        operator delete(v2[9]);
        if (*((unsigned char *)v2 + 64))
        {
LABEL_8:
          char v4 = (void **)v2[5];
          if (v4)
          {
            unint64_t v5 = (void **)v2[6];
            long long v6 = v2[5];
            if (v5 != v4)
            {
              do
              {
                if (*((char *)v5 - 1) < 0) {
                  operator delete(*(v5 - 3));
                }
                v5 -= 3;
              }
              while (v5 != v4);
              long long v6 = v2[5];
            }
            void v2[6] = v4;
            operator delete(v6);
          }
        }
      }
      else if (*((unsigned char *)v2 + 64))
      {
        goto LABEL_8;
      }
      int v7 = v2[2];
      if (v7)
      {
        v2[3] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_21B8E5E48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E5E80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21B8E5EB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d2lf7feature14IEndToEndModelEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature14IEndToEndModelEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d2lf7feature14IEndToEndModelEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature14IEndToEndModelEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_21B8E5F24(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void sub_21B8E5FB8(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  char v26 = 10;
  strcpy((char *)&v25, "lf-640x480");
  unint64_t v3 = operator new(0x14uLL);
  int v28 = (char *)(v3 + 5);
  uint64_t v29 = (char *)(v3 + 5);
  *(_OWORD *)unint64_t v3 = xmmword_21B9AE830;
  v3[4] = 1;
  uint64_t v27 = v3;
  char v30 = 0;
  char v31 = 0;
  v32[23] = 10;
  strcpy(v32, "lf-640x360");
  char v4 = operator new(0x14uLL);
  uint64_t v34 = (char *)(v4 + 5);
  uint64_t v35 = (char *)(v4 + 5);
  *(_OWORD *)char v4 = xmmword_21B9AE840;
  v4[4] = 1;
  uint64_t v33 = v4;
  char v36 = 0;
  char v37 = 0;
  v38[23] = 10;
  strcpy(v38, "lf-480x480");
  unint64_t v5 = operator new(0x14uLL);
  long long v40 = (char *)(v5 + 5);
  long long v41 = (char *)(v5 + 5);
  *(_OWORD *)unint64_t v5 = xmmword_21B9AE850;
  v5[4] = 1;
  BOOL v39 = v5;
  char v42 = 0;
  char v43 = 0;
  v44[23] = 10;
  strcpy(v44, "lf-480x360");
  long long v6 = operator new(0x14uLL);
  unint64_t v46 = (char *)(v6 + 5);
  uint64_t v47 = (char *)(v6 + 5);
  *(_OWORD *)long long v6 = xmmword_21B9AE860;
  v6[4] = 1;
  uint64_t v45 = v6;
  char v48 = 0;
  char v49 = 0;
  strcpy(v51, "\n");
  strcpy(v50, "lf-480x270");
  char v53 = 0;
  v51[2] = 0;
  *(_WORD *)&v51[3] = 0;
  *(_DWORD *)&v51[5] = 0;
  uint64_t v52 = 0;
  int v7 = operator new(0x14uLL);
  char v53 = (char *)(v7 + 5);
  *(_OWORD *)int v7 = xmmword_21B9AE870;
  v7[4] = 1;
  *(void *)&v51[1] = v7;
  uint64_t v52 = (char *)(v7 + 5);
  char v54 = 0;
  char v55 = 0;
  strcpy(v57, "\n");
  strcpy(v56, "lf-360x270");
  uint64_t v59 = 0;
  v57[2] = 0;
  *(_WORD *)&v57[3] = 0;
  *(_DWORD *)&v57[5] = 0;
  uint64_t v58 = 0;
  int v8 = operator new(0x14uLL);
  uint64_t v59 = (char *)(v8 + 5);
  *(_OWORD *)int v8 = xmmword_21B9AE880;
  v8[4] = 1;
  *(void *)&v57[1] = v8;
  uint64_t v58 = (char *)(v8 + 5);
  char v60 = 0;
  char v61 = 0;
  strcpy(v63, "\n");
  strcpy(v62, "lf-320x180");
  BOOL v65 = 0;
  v63[2] = 0;
  *(_WORD *)&v63[3] = 0;
  *(_DWORD *)&v63[5] = 0;
  float v64 = 0;
  std::string v9 = operator new(0x14uLL);
  BOOL v65 = (char *)(v9 + 5);
  *(_OWORD *)std::string v9 = xmmword_21B9AE890;
  v9[4] = 1;
  *(void *)&v63[1] = v9;
  float v64 = (char *)(v9 + 5);
  char v66 = 0;
  char v67 = 0;
  strcpy(v69, "\n");
  strcpy(v68, "lf-320x240");
  v69[2] = 0;
  *(_WORD *)&v69[3] = 0;
  *(_DWORD *)&v69[5] = 0;
  unint64_t v71 = 0;
  uint64_t v70 = 0;
  char v10 = operator new(0x14uLL);
  *(void *)&v69[1] = v10;
  unint64_t v71 = (char *)(v10 + 5);
  *(_OWORD *)char v10 = xmmword_21B9AE8A0;
  v10[4] = 1;
  uint64_t v70 = (char *)(v10 + 5);
  char v72 = 0;
  char v73 = 0;
  strcpy(v75, "\n");
  strcpy(v74, "lf-320x320");
  v75[2] = 0;
  *(_WORD *)&void v75[3] = 0;
  *(_DWORD *)&v75[5] = 0;
  unint64_t v77 = 0;
  unint64_t v76 = 0;
  char v11 = operator new(0x14uLL);
  *(void *)&v75[1] = v11;
  unint64_t v77 = (char *)(v11 + 5);
  *(_OWORD *)char v11 = xmmword_21B9AE8B0;
  v11[4] = 1;
  unint64_t v76 = (char *)(v11 + 5);
  char v78 = 0;
  char v79 = 0;
  strcpy(v81, "\n");
  strcpy(v80, "lf-640x640");
  v81[2] = 0;
  *(_WORD *)&v81[3] = 0;
  *(_DWORD *)&v81[5] = 0;
  long long v83 = 0;
  float v82 = 0;
  long long v12 = operator new(0x14uLL);
  *(void *)&v81[1] = v12;
  long long v83 = (char *)(v12 + 5);
  *(_OWORD *)long long v12 = xmmword_21B9AE8C0;
  v12[4] = 1;
  float v82 = (char *)(v12 + 5);
  char v84 = 0;
  char v85 = 0;
  v86[23] = 19;
  strcpy(v86, "lf-big-test-512x380");
  uint64_t v87 = 0;
  float v89 = 0;
  uint64_t v88 = 0;
  uint64_t v13 = operator new(0x14uLL);
  uint64_t v87 = v13;
  float v89 = (char *)(v13 + 5);
  *(_OWORD *)uint64_t v13 = xmmword_21B9AE8D0;
  v13[4] = 1;
  uint64_t v88 = (char *)(v13 + 5);
  char v90 = 0;
  char v91 = 0;
  sub_21B914D3C(&v25, 0xBuLL, (uint64_t)v24);
  if (!v24[120])
  {
    uint64_t v21 = sub_21B8F210C((uint64_t)v24);
    sub_21B8F2168(v21);
  }
  sub_21B8F2178((uint64_t)__p, (uint64_t)v24);
  sub_21B8F2B10((uint64_t)v24);
  long long v14 = &v92;
  do
  {
    if (*((unsigned char *)v14 - 8))
    {
      uint64_t v15 = *(v14 - 4);
      if (v15)
      {
        uint64_t v16 = *(v14 - 3);
        uint64_t v17 = (void *)*(v14 - 4);
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 24;
          }
          while (v16 != v15);
          uint64_t v17 = (void *)*(v14 - 4);
        }
        *(v14 - 3) = v15;
        operator delete(v17);
      }
    }
    int64_t v18 = (void *)*(v14 - 7);
    if (v18)
    {
      *(v14 - 6) = (uint64_t)v18;
      operator delete(v18);
    }
    unint64_t v19 = (void **)(v14 - 10);
    if (*((char *)v14 - 57) < 0) {
      operator delete(*v19);
    }
    v14 -= 10;
  }
  while (v19 != (void **)&v25);
  *(void *)a2 = 0x700000003;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x6567616D69;
  *(_WORD *)(a2 + 39) = 5;
  *(unsigned char *)(a2 + 63) = 0;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 87) = 0;
  *(void *)(a2 + 88) = 0;
  strcpy((char *)(a2 + 112), "global_descriptor");
  *(unsigned char *)(a2 + 135) = 17;
  *(unsigned char *)(a2 + 111) = 0;
  sub_21B97F56C((std::string *)(a2 + 136));
  sub_21B8F2178(a2 + 160, (uint64_t)__p);
  *(_DWORD *)(a2 + 200) = -1082130432;
  *(void *)(a2 + 208) = 8;
  *(unsigned char *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = a1;
  *(unsigned char *)(a2 + 224) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 1;
  *(unsigned char *)(a2 + 256) = 1;
  *(unsigned char *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  sub_21B8E5D7C((int)__p, (void **)__p[2]);
  uint64_t v20 = __p[0];
  __p[0] = 0;
  if (v20) {
    operator delete(v20);
  }
}

void sub_21B8E6614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 + 159) < 0)
  {
    operator delete(*v7);
    if ((*(char *)(v6 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v6 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v6 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v6 + 112));
  if ((*(char *)(v6 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v6 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v6 + 88));
  if ((*(char *)(v6 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v6 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v6 + 64));
  if ((*(char *)(v6 + 63) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v6 + 39) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  operator delete(*(void **)(v6 + 40));
  if ((*(char *)(v6 + 39) & 0x80000000) == 0)
  {
LABEL_8:
    sub_21B8F12E8((uint64_t)va);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)(v6 + 16));
  goto LABEL_8;
}

void sub_21B8E66C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  do
  {
    v35 -= 80;
    sub_21B8F205C((uint64_t)v35);
  }
  while (v35 != &a35);
  _Unwind_Resume(a1);
}

void sub_21B8E6748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_21B8F2B10((uint64_t)&a19);
  sub_21B8F205C(v37);
  sub_21B8F205C(v36);
  sub_21B8F205C(v41);
  sub_21B8F205C(v40);
  sub_21B8F205C(v38);
  sub_21B8F205C(a11);
  sub_21B8F205C(a12);
  sub_21B8F205C(v39);
  sub_21B8F205C(v35);
  sub_21B8F205C(a10);
  sub_21B8F205C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_21B8E67B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 159);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 144);
  }
  if (v2 >= 7)
  {
    if (v3 >= 0) {
      uint64_t v4 = a2 + 136;
    }
    else {
      uint64_t v4 = *(void *)(a2 + 136);
    }
    uint64_t v5 = v2 + v4;
    int v6 = *(_DWORD *)(v5 - 7);
    int v7 = *(_DWORD *)(v5 - 4);
    if (v6 == 1853186606 && v7 == 1701602414)
    {
      LOBYTE(v11) = 0;
      char v12 = 0;
      sub_21B8F3F5C((uint64_t)v13, a2, (uint64_t)&v11);
      sub_21B91F064((uint64_t)v13);
    }
  }
  LOBYTE(v9) = 0;
  char v10 = 0;
  sub_21B8F3AA8((uint64_t)v13, a2, (uint64_t)&v9);
  sub_21B91EC88((uint64_t)v13);
}

void sub_21B8E7418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(unsigned char *)(v26 + 224) && *(char *)(v26 + 223) < 0) {
    operator delete(*v30);
  }
  if (*(unsigned char *)(v26 + 176) && *(char *)(v26 + 175) < 0) {
    operator delete(*v29);
  }
  *char v31 = v27;
  sub_21B848B68(v28);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v34);
  sub_21B8E2360((uint64_t *)(v32 - 120));
  sub_21B8F434C((uint64_t)&a24);
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21B8E7600(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  return a1;
}

void *sub_21B8E76C8(void *a1)
{
  *a1 = &unk_26CB9D270;
  uint64_t v2 = a1[36];
  a1[36] = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_21B8E77B4(void *a1)
{
  *a1 = &unk_26CB9D270;
  uint64_t v2 = a1[36];
  a1[36] = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E78C0(uint64_t a1)
{
  sub_21B8471D4((uint64_t)&v3, (uint64_t *)(**(void **)(a1 + 288) + 8));
  uint64_t v1 = v3;
  sub_21B848B68((uint64_t)&v3);
  return v1;
}

BOOL sub_21B8E7910(void *a1, void *a2)
{
  uint64_t v3 = a1 + 21;
  int v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = (char *)operator new(0x14uLL);
  char v12 = v5 + 20;
  uint64_t v13 = v5 + 20;
  *(_DWORD *)uint64_t v5 = 1;
  *(void *)(v5 + 4) = *a2;
  *((_DWORD *)v5 + 3) = 1;
  *((_DWORD *)v5 + 4) = v4;
  uint64_t v11 = v5;
  LOBYTE(__p) = 0;
  char v16 = 0;
  int v6 = sub_21B919A54(v3, (unint64_t)&v11);
  if (v16)
  {
    int v7 = (void **)__p;
    if (__p)
    {
      int v8 = v15;
      std::string v9 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        std::string v9 = __p;
      }
      uint64_t v15 = v7;
      operator delete(v9);
    }
  }
  if (v11)
  {
    char v12 = v11;
    operator delete(v11);
  }
  return v6 != 0;
}

void sub_21B8E7A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E7A28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8E7A28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        int v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v2;
      operator delete(v4);
    }
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_21B8E7AB4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = a1 + 21;
  int v7 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  int v8 = (char *)operator new(0x14uLL);
  *(void *)&v45[8] = v8 + 20;
  *(void *)&v45[16] = v8 + 20;
  *(_DWORD *)int v8 = 1;
  *(void *)(v8 + 4) = *(void *)(a2 + 32);
  *((_DWORD *)v8 + 3) = 1;
  *((_DWORD *)v8 + 4) = v7;
  *(void *)uint64_t v45 = v8;
  v45[24] = 0;
  LOBYTE(v47) = 0;
  std::string v9 = sub_21B919A54(v6, (unint64_t)v45);
  if (!v9) {
    sub_21B846070("unordered_map::at: key not found");
  }
  if (*((char *)v9 + 95) < 0)
  {
    sub_21B846188(&__dst, (void *)v9[9], v9[10]);
  }
  else
  {
    long long __dst = *(_OWORD *)(v9 + 9);
    uint64_t v71 = v9[11];
  }
  if ((_BYTE)v47)
  {
    char v10 = *(void ***)&v45[24];
    if (*(void *)&v45[24])
    {
      uint64_t v11 = (void **)v46[0];
      char v12 = *(void **)&v45[24];
      if (v46[0] != *(void **)&v45[24])
      {
        do
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete(*(v11 - 3));
          }
          v11 -= 3;
        }
        while (v11 != v10);
        char v12 = *(void **)&v45[24];
      }
      v46[0] = v10;
      operator delete(v12);
    }
  }
  if (*(void *)v45)
  {
    *(void *)&v45[8] = *(void *)v45;
    operator delete(*(void **)v45);
  }
  uint64_t v13 = a1[36];
  *(void *)uint64_t v45 = &unk_26CB9EF00;
  if (SHIBYTE(v71) < 0)
  {
    sub_21B846188(&v45[8], (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v45[8] = __dst;
    *(void *)&v45[24] = v71;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v13 + 16) + 48))(&v67);
  *(void *)uint64_t v45 = &unk_26CB9EF00;
  if ((v45[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v45[8]);
    if (!v68) {
      goto LABEL_24;
    }
  }
  else if (!v68)
  {
    goto LABEL_24;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 188, (uint64_t)"ret_config == kml::MLResultCode::NoError", 40, (uint64_t)"Unable to set model configuration", 33, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_24:
  uint64_t v14 = a1[36];
  v62[0] = &unk_26CB954E0;
  sub_21B8F2D38(a2, (uint64_t)&v62[1]);
  sub_21B93AB48(*(void *)(v14 + 16), (uint64_t)v62, 0, 0, (uint64_t)v45);
  uint64_t v15 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v45[8])
  {
    sub_21B8E84B4((uint64_t *)&v61, "Error:");
    int v38 = *(char *)(*(void *)&v45[16] + 23);
    if (v38 >= 0) {
      uint64_t v39 = *(const std::string::value_type **)&v45[16];
    }
    else {
      uint64_t v39 = **(const std::string::value_type ***)&v45[16];
    }
    if (v38 >= 0) {
      std::string::size_type v40 = *(unsigned __int8 *)(*(void *)&v45[16] + 23);
    }
    else {
      std::string::size_type v40 = *(void *)(*(void *)&v45[16] + 8);
    }
    uint64_t v41 = std::string::append(&v61, v39, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    int v63 = (std::__shared_weak_count *)v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)float v62 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63) >= 0) {
      char v43 = v62;
    }
    else {
      char v43 = (void **)v62[0];
    }
    if (SHIBYTE(v63) >= 0) {
      uint64_t v44 = HIBYTE(v63);
    }
    else {
      uint64_t v44 = (uint64_t)v62[1];
    }
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 191, (uint64_t)&unk_21B997215, 0, (uint64_t)v43, v44, (void (*)(void **))sub_21B984AC4);
    if (SHIBYTE(v63) < 0) {
      operator delete(v62[0]);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    goto LABEL_96;
  }
  if ((_BYTE)v48) {
    goto LABEL_31;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 193, (uint64_t)"ret.outputs.has_value()", 23, (uint64_t)"No error detected but output empty.", 35, (void (*)(void **))sub_21B984AC4))
  {
LABEL_96:
    abort();
  }
  if (!(_BYTE)v48) {
    sub_21B8446A8();
  }
LABEL_31:
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  sub_21B8F1860(&v58, (uint64_t)v46[0], (uint64_t)v46[1], 0xEEEEEEEEEEEEEEEFLL * (((char *)v46[1] - (char *)v46[0]) >> 3));
  if ((_BYTE)v48)
  {
    char v16 = (char *)v46[0];
    if (v46[0])
    {
      uint64_t v17 = (char *)v46[1];
      int64_t v18 = v46[0];
      if (v46[1] != v46[0])
      {
        do
        {
          if (*(v17 - 8))
          {
            unint64_t v19 = (std::__shared_weak_count *)*((void *)v17 - 6);
            if (v19)
            {
              if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
          }
          v17 -= 120;
        }
        while (v17 != v16);
        int64_t v18 = v46[0];
      }
      v46[1] = v16;
      operator delete(v18);
    }
  }
  *(void *)uint64_t v45 = &unk_26CB95650;
  uint64_t v20 = *(std::__shared_weak_count **)&v45[24];
  if (*(void *)&v45[24]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v45[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    char v67 = &unk_26CB95650;
    uint64_t v21 = v69;
    if (!v69)
    {
LABEL_46:
      if ((SHIBYTE(v71) & 0x80000000) == 0) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
  }
  else
  {
    char v67 = &unk_26CB95650;
    uint64_t v21 = v69;
    if (!v69) {
      goto LABEL_46;
    }
  }
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (SHIBYTE(v71) < 0) {
LABEL_47:
  }
    operator delete((void *)__dst);
LABEL_48:
  unint64_t v22 = v58;
  long long v24 = *((_OWORD *)v58 + 1);
  long long v23 = *((_OWORD *)v58 + 2);
  long long v25 = *(_OWORD *)v58;
  int v47 = *((_DWORD *)v58 + 12);
  *(_OWORD *)&v45[16] = v24;
  *(_OWORD *)unint64_t v46 = v23;
  *(_OWORD *)uint64_t v45 = v25;
  LOBYTE(v48) = 0;
  char v56 = 0;
  if (*((unsigned char *)v58 + 112))
  {
    char v48 = &unk_26CB954E0;
    uint64_t v26 = *((void *)v58 + 8);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)v58 + 9);
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v28 = v22[12];
      int v29 = *((_DWORD *)v22 + 26);
      __int16 v30 = *((_WORD *)v22 + 54);
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v28 = *((void *)v58 + 12);
      int v29 = *((_DWORD *)v58 + 26);
      __int16 v30 = *((_WORD *)v58 + 54);
    }
    uint64_t v49 = v26;
    unint64_t v50 = v27;
    int v31 = *((_DWORD *)v22 + 22);
    uint64_t v51 = v22[10];
    int v52 = v31;
    uint64_t v53 = v28;
    int v54 = v29;
    __int16 v55 = v30;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    char v56 = 1;
  }
  int v57 = 2;
  sub_21B8FB5B0((long long *)v45, 1uLL, (uint64_t)v62);
  if (v57 != -1) {
    ((void (*)(void **, unsigned char *))off_26CB9D610[v57])(&v67, v45);
  }
  v46[0] = 0;
  LODWORD(v46[1]) = 0;
  memset(v45, 0, 28);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 48) = -1;
  __n128 v32 = off_26CB9E938((uint64_t)&v67, (__n128 *)(a3 + 24), (__n128 *)v45);
  *(unsigned char *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  *(void **)(a3 + 56) = v46[0];
  *(_DWORD *)(a3 + 64) = v46[1];
  *(_DWORD *)(a3 + 96) = -1;
  unsigned int v33 = v64;
  if (v64 != -1)
  {
    ((void (*)(void **, __n128))*(&off_26CB9E938 + v64))(&v67, v32);
    *(_DWORD *)(a3 + 96) = v33;
  }
  *(void *)(a3 + 104) = v65;
  *(_DWORD *)(a3 + 112) = v66;
  if (*(_DWORD *)&v45[24] != -1) {
    ((void (*)(void **, unsigned char *))off_26CB9D628[*(unsigned int *)&v45[24]])(&v67, v45);
  }
  if (v64 != -1) {
    ((void (*)(unsigned char *, void **))off_26CB9D628[v64])(v45, v62);
  }
  uint64_t v34 = (char *)v58;
  if (v58)
  {
    uint64_t v35 = v59;
    uint64_t v36 = v58;
    if (v59 != v58)
    {
      do
      {
        if (*(v35 - 8))
        {
          uint64_t v37 = (std::__shared_weak_count *)*((void *)v35 - 6);
          if (v37)
          {
            if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        v35 -= 120;
      }
      while (v35 != v34);
      uint64_t v36 = v58;
    }
    uint64_t v59 = v34;
    operator delete(v36);
  }
}

void sub_21B8E82F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  sub_21B840310((uint64_t)&a9);
  sub_21B83D090((void *)(v42 - 112));
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_21B8E83C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8E83DC()
{
}

void sub_21B8E8424()
{
}

void sub_21B8E846C()
{
}

uint64_t sub_21B8E84B4(char *__s)
{
  int v3 = 0;
  sub_21B8F2E94(v2, __s);
  if (v3 == -1) {
    sub_21B84C734();
  }
  uint64_t v5 = &v4;
  uint64_t result = ((uint64_t (*)(char **, _DWORD *))off_26CB9D6B0[v3])(&v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char **, _DWORD *))off_26CB9D698[v3])(&v5, v2);
  }
  return result;
}

void sub_21B8E854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8E8560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8E8574(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  char v43 = 10;
  strcpy((char *)__p, "lf-640x640");
  char v4 = operator new(0x28uLL);
  uint64_t v45 = (char *)v4 + 40;
  unint64_t v46 = (char *)v4 + 40;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *char v4 = xmmword_21B9AE8C0;
  v4[1] = v5;
  *((void *)v4 + 4) = 0x40000000006;
  uint64_t v44 = v4;
  char v47 = 0;
  char v48 = 0;
  v49[23] = 10;
  strcpy(v49, "lf-640x480");
  int v6 = operator new(0x28uLL);
  uint64_t v51 = (char *)v6 + 40;
  int v52 = (char *)v6 + 40;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *int v6 = xmmword_21B9AE830;
  v6[1] = v7;
  *((void *)v6 + 4) = 0x40000000006;
  unint64_t v50 = v6;
  char v53 = 0;
  char v54 = 0;
  v55[23] = 10;
  strcpy(v55, "lf-640x360");
  int v8 = operator new(0x28uLL);
  int v57 = (char *)v8 + 40;
  uint64_t v58 = (char *)v8 + 40;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  *int v8 = xmmword_21B9AE840;
  v8[1] = v9;
  *((void *)v8 + 4) = 0x40000000006;
  char v56 = v8;
  char v59 = 0;
  char v60 = 0;
  v61[23] = 10;
  strcpy(v61, "lf-480x480");
  char v10 = operator new(0x28uLL);
  int v63 = (char *)v10 + 40;
  unsigned int v64 = (char *)v10 + 40;
  *(void *)&long long v11 = 0x100000001;
  *((void *)&v11 + 1) = 0x100000001;
  *char v10 = xmmword_21B9AE850;
  v10[1] = v11;
  *((void *)v10 + 4) = 0x40000000006;
  float v62 = v10;
  char v65 = 0;
  char v66 = 0;
  strcpy(v68, "\n");
  strcpy(v67, "lf-480x360");
  uint64_t v70 = 0;
  v68[2] = 0;
  *(_WORD *)&v68[3] = 0;
  *(_DWORD *)&v68[5] = 0;
  uint64_t v69 = 0;
  char v12 = operator new(0x28uLL);
  uint64_t v70 = (char *)v12 + 40;
  *(void *)&long long v13 = 0x100000001;
  *((void *)&v13 + 1) = 0x100000001;
  *char v12 = xmmword_21B9AE860;
  v12[1] = v13;
  *((void *)v12 + 4) = 0x40000000006;
  *(void *)&v68[1] = v12;
  uint64_t v69 = (char *)v12 + 40;
  char v71 = 0;
  char v72 = 0;
  strcpy(v74, "\n");
  strcpy(v73, "lf-480x270");
  unint64_t v76 = 0;
  v74[2] = 0;
  *(_WORD *)&v74[3] = 0;
  *(_DWORD *)&v74[5] = 0;
  long long v75 = 0;
  uint64_t v14 = operator new(0x28uLL);
  unint64_t v76 = (char *)v14 + 40;
  *(void *)&long long v15 = 0x100000001;
  *((void *)&v15 + 1) = 0x100000001;
  *uint64_t v14 = xmmword_21B9AE870;
  v14[1] = v15;
  *((void *)v14 + 4) = 0x40000000006;
  *(void *)&v74[1] = v14;
  long long v75 = (char *)v14 + 40;
  char v77 = 0;
  char v78 = 0;
  strcpy(v80, "\n");
  strcpy(v79, "lf-360x270");
  float v82 = 0;
  v80[2] = 0;
  *(_WORD *)&v80[3] = 0;
  *(_DWORD *)&v80[5] = 0;
  float v81 = 0;
  char v16 = operator new(0x28uLL);
  float v82 = (char *)v16 + 40;
  *(void *)&long long v17 = 0x100000001;
  *((void *)&v17 + 1) = 0x100000001;
  *char v16 = xmmword_21B9AE880;
  v16[1] = v17;
  *((void *)v16 + 4) = 0x40000000006;
  *(void *)&v80[1] = v16;
  float v81 = (char *)v16 + 40;
  char v83 = 0;
  char v84 = 0;
  strcpy(v86, "\n");
  strcpy(v85, "lf-320x320");
  v86[2] = 0;
  *(_WORD *)&v86[3] = 0;
  *(_DWORD *)&v86[5] = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  int64_t v18 = operator new(0x28uLL);
  int v19 = a1;
  *(void *)&v86[1] = v18;
  uint64_t v88 = (char *)v18 + 40;
  *(void *)&long long v20 = 0x100000001;
  *((void *)&v20 + 1) = 0x100000001;
  *int64_t v18 = xmmword_21B9AE8B0;
  v18[1] = v20;
  *((void *)v18 + 4) = 0x40000000006;
  uint64_t v87 = (char *)v18 + 40;
  char v89 = 0;
  char v90 = 0;
  strcpy(v92, "\n");
  strcpy(v91, "lf-320x240");
  v92[2] = 0;
  *(_WORD *)&v92[3] = 0;
  *(_DWORD *)&v92[5] = 0;
  float v94 = 0;
  BOOL v93 = 0;
  uint64_t v21 = operator new(0x28uLL);
  *(void *)&v92[1] = v21;
  float v94 = (char *)v21 + 40;
  *(void *)&long long v22 = 0x100000001;
  *((void *)&v22 + 1) = 0x100000001;
  *uint64_t v21 = xmmword_21B9AE8A0;
  v21[1] = v22;
  *((void *)v21 + 4) = 0x40000000006;
  BOOL v93 = (char *)v21 + 40;
  char v95 = 0;
  char v96 = 0;
  strcpy(v98, "\n");
  strcpy(v97, "lf-320x180");
  v98[2] = 0;
  *(_WORD *)&v98[3] = 0;
  *(_DWORD *)&v98[5] = 0;
  unint64_t v100 = 0;
  uint64_t v99 = 0;
  long long v23 = operator new(0x28uLL);
  *(void *)&v98[1] = v23;
  unint64_t v100 = (char *)v23 + 40;
  *(void *)&long long v24 = 0x100000001;
  *((void *)&v24 + 1) = 0x100000001;
  *long long v23 = xmmword_21B9AE890;
  v23[1] = v24;
  *((void *)v23 + 4) = 0x40000000006;
  uint64_t v99 = (char *)v23 + 40;
  char v101 = 0;
  char v102 = 0;
  v103[23] = 19;
  strcpy(v103, "lf-big-test-512x380");
  unint64_t v104 = 0;
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  long long v25 = operator new(0x28uLL);
  unint64_t v104 = v25;
  uint64_t v106 = (char *)v25 + 40;
  *(void *)&long long v26 = 0x100000001;
  *((void *)&v26 + 1) = 0x100000001;
  *long long v25 = xmmword_21B9AE8D0;
  v25[1] = v26;
  *((void *)v25 + 4) = 0x40000000006;
  uint64_t v105 = (char *)v25 + 40;
  char v107 = 0;
  char v108 = 0;
  sub_21B914D3C((long long *)__p, 0xBuLL, (uint64_t)v41);
  if (!v41[120])
  {
    uint64_t v39 = sub_21B8F210C((uint64_t)v41);
    sub_21B8F2168(v39);
  }
  sub_21B8F2178((uint64_t)v40, (uint64_t)v41);
  sub_21B8F2B10((uint64_t)v41);
  uint64_t v27 = &v109;
  do
  {
    if (*((unsigned char *)v27 - 8))
    {
      uint64_t v28 = *(v27 - 4);
      if (v28)
      {
        uint64_t v29 = *(v27 - 3);
        __int16 v30 = (void *)*(v27 - 4);
        if (v29 != v28)
        {
          do
          {
            if (*(char *)(v29 - 1) < 0) {
              operator delete(*(void **)(v29 - 24));
            }
            v29 -= 24;
          }
          while (v29 != v28);
          __int16 v30 = (void *)*(v27 - 4);
        }
        *(v27 - 3) = v28;
        operator delete(v30);
      }
    }
    int v31 = (void *)*(v27 - 7);
    if (v31)
    {
      *(v27 - 6) = (uint64_t)v31;
      operator delete(v31);
    }
    __n128 v32 = (void **)(v27 - 10);
    if (*((char *)v27 - 57) < 0) {
      operator delete(*v32);
    }
    v27 -= 10;
  }
  while (v32 != __p);
  sub_21B835F34(__p);
  BOOL v33 = sub_21B928D38((uint64_t)__p, 0xEu);
  if ((_BYTE)v44 && v43 < 0) {
    operator delete(__p[0]);
  }
  BOOL v34 = v19 == 0;
  BOOL v35 = v34 && v33;
  if (v34 && v33) {
    int v36 = 0;
  }
  else {
    int v36 = 3;
  }
  uint64_t v37 = (char *)operator new(0x20uLL);
  strcpy(v37, "output_batch_size_1024_0_0");
  *(void *)a2 = 0x700000003;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x6D695F7475706E69;
  *(void *)(a2 + 24) = 6645601;
  *(unsigned char *)(a2 + 39) = 11;
  *(void *)(a2 + 40) = 0x746E696F7079656BLL;
  *(void *)(a2 + 48) = 115;
  *(unsigned char *)(a2 + 63) = 9;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 87) = 0;
  sub_21B846188((unsigned char *)(a2 + 88), v37, 0x1AuLL);
  strcpy((char *)(a2 + 112), "global_descriptor");
  *(unsigned char *)(a2 + 135) = 17;
  sub_21B97F8F0(v35, (std::string *)(a2 + 136));
  sub_21B8F2178(a2 + 160, (uint64_t)v40);
  *(_DWORD *)(a2 + 200) = -1082130432;
  *(void *)(a2 + 208) = 8;
  *(unsigned char *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = v36;
  *(unsigned char *)(a2 + 224) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 1024;
  *(unsigned char *)(a2 + 256) = 1;
  *(unsigned char *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 242;
  operator delete(v37);
  sub_21B8E5D7C((int)v40, (void **)v40[2]);
  int v38 = v40[0];
  v40[0] = 0;
  if (v38) {
    operator delete(v38);
  }
}

void sub_21B8E8CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 + 159) < 0)
  {
    operator delete(*v17);
    if (*(char *)(v14 + 135) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v14 + 112));
      if ((*(char *)(v14 + 111) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if (*(char *)(v14 + 135) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v14 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v14 + 87) < 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v16);
  if (*(char *)(v14 + 87) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v14 + 64));
    if ((*(char *)(v14 + 63) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((*(char *)(v14 + 63) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v14 + 39) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_14:
  operator delete(*(void **)(v14 + 40));
  if ((*(char *)(v14 + 39) & 0x80000000) == 0)
  {
LABEL_10:
    operator delete(v15);
    sub_21B8F12E8((uint64_t)&a14);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v14 + 16));
  goto LABEL_10;
}

void sub_21B8E8D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

void sub_21B8E8D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  do
  {
    v35 -= 80;
    sub_21B8F205C((uint64_t)v35);
  }
  while (v35 != &a35);
  _Unwind_Resume(a1);
}

void sub_21B8E8E24(_Unwind_Exception *a1)
{
}

void sub_21B8E8E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_21B8F2B10((uint64_t)&a19);
  sub_21B8F205C(v37);
  sub_21B8F205C(v36);
  sub_21B8F205C(v41);
  sub_21B8F205C(v40);
  sub_21B8F205C(a13);
  sub_21B8F205C(a11);
  sub_21B8F205C(a12);
  sub_21B8F205C(v35);
  sub_21B8F205C(v39);
  sub_21B8F205C(v38);
  sub_21B8F205C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_21B8E8E98(uint64_t a1, uint64_t a2)
{
  sub_21B8E67B4((uint64_t)&v2, a2);
}

void sub_21B8E8FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E7600((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B8E8FF4(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = &unk_26CB9D2D0;
  sub_21B8F15C0((uint64_t)(a1 + 1), a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[36] = v5;
  a1[38] = &unk_26CB9D6D8;
  v6[12] = &unk_26CB99570;
  sub_21B885B08((uint64_t)v6);
  operator new();
}

void sub_21B8E98CC(_Unwind_Exception *a1)
{
  sub_21B83A360(v3);
  sub_21B8E7600((uint64_t *)(v1 + 288));
  sub_21B8E5CA4(v2);
  _Unwind_Resume(a1);
}

void sub_21B8E997C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v8 = v5;
  sub_21B83A360(v4);
  if (!atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_21B83A360((uint64_t)va);
  sub_21B8F30C8((uint64_t *)(v7 - 88));
  sub_21B8E7600((uint64_t *)(v2 + 288));
  sub_21B8E5CA4(v3);
  _Unwind_Resume(a1);
}

void sub_21B8E99F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B86D418((uint64_t)va);
  sub_21B8E7600((uint64_t *)(v2 + 288));
  sub_21B8E5CA4(v3);
  _Unwind_Resume(a1);
}

void sub_21B8E9A1C(_Unwind_Exception *a1)
{
  sub_21B8E7600((uint64_t *)(v1 + 288));
  sub_21B8E5CA4(v2);
  _Unwind_Resume(a1);
}

void *sub_21B8E9A38(void *a1)
{
  *a1 = &unk_26CB9D2D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[40];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1[36];
    a1[36] = 0;
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = a1[36];
    a1[36] = 0;
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
LABEL_10:
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_21B8E9B7C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B8E9BF8(void *a1)
{
  *a1 = &unk_26CB9D2D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[40];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1[36];
    a1[36] = 0;
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = a1[36];
    a1[36] = 0;
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
LABEL_10:
  sub_21B8E5CA4((uint64_t)(a1 + 1));

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8E9D5C(uint64_t a1)
{
  sub_21B8471D4((uint64_t)&v3, (uint64_t *)(**(void **)(a1 + 288) + 8));
  uint64_t v1 = v3;
  sub_21B848B68((uint64_t)&v3);
  return v1;
}

BOOL sub_21B8E9DAC(void *a1, void *a2)
{
  uint64_t v3 = a1 + 21;
  int v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = (char *)operator new(0x28uLL);
  long long v13 = v5 + 40;
  uint64_t v14 = v5 + 40;
  *(_DWORD *)uint64_t v5 = 1;
  *(void *)(v5 + 4) = *a2;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 12) = v6;
  *(void *)(v5 + 28) = 0x600000001;
  *((_DWORD *)v5 + 9) = v4;
  char v12 = v5;
  LOBYTE(__p) = 0;
  char v17 = 0;
  uint64_t v7 = sub_21B919A54(v3, (unint64_t)&v12);
  if (v17)
  {
    int v8 = (void **)__p;
    if (__p)
    {
      long long v9 = v16;
      char v10 = __p;
      if (v16 != __p)
      {
        do
        {
          if (*((char *)v9 - 1) < 0) {
            operator delete(*(v9 - 3));
          }
          v9 -= 3;
        }
        while (v9 != v8);
        char v10 = __p;
      }
      char v16 = v8;
      operator delete(v10);
    }
  }
  if (v12)
  {
    long long v13 = v12;
    operator delete(v12);
  }
  return v7 != 0;
}

void sub_21B8E9EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E7A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8E9ED8()
{
}

void sub_21B8E9F20()
{
}

void sub_21B8E9F68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 48))(__p);
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  int v3 = v7;
  if (v7 != -1)
  {
    ((void (*)(char *, uint64_t, unsigned char *))off_26CB9D648[v7])(&v12, a2, v6);
    *(_DWORD *)(a2 + 24) = v3;
  }
  *(void *)(a2 + 32) = v8;
  uint64_t v4 = v11;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4 != -1) {
    ((void (*)(char *, uint64_t *))off_26CB9D628[v4])(&v12, &v10);
  }
  unsigned int v11 = -1;
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))off_26CB9D628[v7])(&v12, v6);
  }
  int v7 = -1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_21B8EA07C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, std::__shared_weak_count *a6)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  *(void *)unint64_t v132 = &unk_26CB9D7F0;
  __uint64_t v12 = *(void *)(a2 + 312);
  unsigned int v11 = *(std::__shared_weak_count **)(a2 + 320);
  __uint64_t v106 = v12;
  *(void *)&long long v107 = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    v104.__r_.__value_.__r.__words[0] = v12;
    v104.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&v132[8] = v12;
    *(void *)&v132[16] = v11;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v12;
    *(void *)&v132[8] = v12;
    *(void *)&v132[16] = 0;
  }
  (*(void (**)(void **__return_ptr, __uint64_t, uint64_t))(*(void *)v12 + 64))(&v114, v12, 3);
  uint64_t v13 = v114[2];
  long long __p = *(_OWORD *)v114;
  uint64_t v134 = v13;
  int v114 = 0;
  MEMORY[0x21D495F30]();
  uint64_t v14 = *(std::__shared_weak_count **)&v132[16];
  if (*(void *)&v132[16])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v132[16] + 8), 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v104.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v104.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(std::string::size_type))(*(void *)v104.__r_.__value_.__l.__size_ + 16))(v104.__r_.__value_.__l.__size_);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v104.__r_.__value_.__l.__size_);
  }
  if ((void)v107 && !atomic_fetch_add((atomic_ullong *volatile)(v107 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(*(void *)v107 + 16))(v107);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v107);
  }
  float v120 = &unk_26CB990D8;
  uint64_t v15 = *(void *)&v132[8];
  char v16 = *(std::__shared_weak_count **)&v132[16];
  if (*(void *)&v132[16])
  {
    char v17 = (atomic_ullong *)(*(void *)&v132[16] + 8);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v132[16] + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v123 = __p;
    uint64_t v124 = v134;
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v121 = v15;
    int v122 = v16;
    __int16 v125 = 256;
    if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_20;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_20:
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    uint64_t v121 = *(void *)&v132[8];
    int v122 = 0;
    long long v123 = __p;
    uint64_t v124 = v134;
    __int16 v125 = 256;
  }
  sub_21B8FBE20((unsigned int *)(a3 + 32), a4, a5, (uint64_t)&v120);
  int64_t v18 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = *(std::__shared_weak_count **)&v132[16];
  if (!*(void *)&v132[16]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v132[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v20 = *(void *)(a2 + 312);
    uint64_t v21 = *(std::__shared_weak_count **)(a2 + 320);
    if (v21) {
      goto LABEL_27;
    }
LABEL_31:
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  uint64_t v20 = *(void *)(a2 + 312);
  uint64_t v21 = *(std::__shared_weak_count **)(a2 + 320);
  if (!v21) {
    goto LABEL_31;
  }
LABEL_27:
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v20)
    {
LABEL_29:
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 312) + 96))(&v119);
      goto LABEL_33;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v20) {
      goto LABEL_29;
    }
  }
LABEL_32:
  uint64_t v119 = 0;
LABEL_33:
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v23 = *(void *)(a3 + 32);
  long long v24 = (char *)operator new(0x28uLL);
  *(void *)&v132[8] = v24 + 40;
  *(void *)&v132[16] = v24 + 40;
  *(_DWORD *)long long v24 = 1;
  *(void *)(v24 + 4) = v23;
  *(void *)&long long v25 = 0x100000001;
  *((void *)&v25 + 1) = 0x100000001;
  *(_OWORD *)(v24 + 12) = v25;
  *(void *)(v24 + 28) = 0x600000001;
  *((_DWORD *)v24 + 9) = v22;
  *(void *)unint64_t v132 = v24;
  LOBYTE(__p) = 0;
  LOBYTE(v135) = 0;
  long long v26 = sub_21B919A54((void *)(a2 + 168), (unint64_t)v132);
  if (!v26) {
    sub_21B846070("unordered_map::at: key not found");
  }
  if (*((char *)v26 + 95) < 0)
  {
    sub_21B846188(__dst, (void *)v26[9], v26[10]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v26 + 9);
    uint64_t v118 = v26[11];
  }
  if ((_BYTE)v135)
  {
    uint64_t v27 = __p;
    if ((void)__p)
    {
      uint64_t v28 = *((void *)&__p + 1);
      uint64_t v29 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v28 - 1) < 0) {
            operator delete(*(void **)(v28 - 24));
          }
          v28 -= 24;
        }
        while (v28 != v27);
        uint64_t v29 = (void *)__p;
      }
      *((void *)&__p + 1) = v27;
      operator delete(v29);
    }
  }
  if (*(void *)v132)
  {
    *(void *)&v132[8] = *(void *)v132;
    operator delete(*(void **)v132);
  }
  uint64_t v30 = *(void *)(a2 + 288);
  *(void *)unint64_t v132 = &unk_26CB9EF00;
  if (SHIBYTE(v118) < 0)
  {
    sub_21B846188(&v132[8], __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)&v132[8] = *(_OWORD *)__dst;
    *(void *)&long long __p = v118;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v30 + 16) + 48))(&v114);
  *(void *)unint64_t v132 = &unk_26CB9EF00;
  if (SBYTE7(__p) < 0)
  {
    operator delete(*(void **)&v132[8]);
    if (!v115) {
      goto LABEL_56;
    }
  }
  else if (!v115)
  {
    goto LABEL_56;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 270, (uint64_t)"ret_config == kml::MLResultCode::NoError", 40, (uint64_t)"Unable to set model configuration", 33, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_56:
  uint64_t v111 = 0;
  long long v112 = 0;
  unint64_t v113 = 0;
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB954E0;
  sub_21B8F2D38(a3, (uint64_t)&v104.__r_.__value_.__l.__size_);
  long long v31 = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
  __uint64_t v106 = (__uint64_t)&unk_26CB954E0;
  long long v107 = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)char v108 = *(_OWORD *)v105;
  *(_OWORD *)&v108[14] = *(_OWORD *)&v105[14];
  int v110 = 2;
  LODWORD(v144) = -1;
  *(void *)unint64_t v132 = &unk_26CB954E0;
  if (*((void *)&v31 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v32 = *(void *)&v108[16];
    int v33 = *(_DWORD *)&v108[24];
    __int16 v34 = *(_WORD *)&v108[28];
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v32 = *(void *)&v108[16];
    int v33 = *(_DWORD *)&v108[24];
    __int16 v34 = *(_WORD *)&v108[28];
  }
  *(_OWORD *)&v132[8] = v31;
  *(void *)&long long __p = *(void *)v108;
  DWORD2(__p) = *(_DWORD *)&v108[8];
  uint64_t v134 = v32;
  int v135 = v33;
  __int16 v136 = v34;
  if (*((void *)&v31 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v31 + 1) + 16))(*((void *)&v31 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    LODWORD(v144) = 2;
    uint64_t v35 = v112;
    if ((unint64_t)v112 < v113) {
      goto LABEL_62;
    }
LABEL_68:
    uint64_t v37 = sub_21B8F1B28((char **)&v111, (uint64_t)v132);
    goto LABEL_69;
  }
  LODWORD(v144) = 2;
  uint64_t v35 = v112;
  if ((unint64_t)v112 >= v113) {
    goto LABEL_68;
  }
LABEL_62:
  *uint64_t v35 = 0;
  *((_DWORD *)v35 + 30) = -1;
  int v36 = (int)v144;
  if (v144 != -1)
  {
    ((void (*)(void **, char *, unsigned char *))off_26CB9D680[v144])(&v130, v35, v132);
    *((_DWORD *)v35 + 30) = v36;
  }
  uint64_t v37 = v35 + 128;
LABEL_69:
  long long v112 = v37;
  if (v144 != -1) {
    ((void (*)(void **, unsigned char *))off_26CB9D668[v144])(&v130, v132);
  }
  LODWORD(v144) = -1;
  if (v110 != -1) {
    ((void (*)(void **, __uint64_t *))off_26CB9D668[v110])(&v130, &v106);
  }
  int v110 = -1;
  uint64_t v38 = (std::__shared_weak_count *)v104.__r_.__value_.__r.__words[2];
  if (v104.__r_.__value_.__r.__words[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(v104.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB954E0;
    std::string::size_type v40 = *(void *)(a2 + 312);
    uint64_t v39 = *(std::__shared_weak_count **)(a2 + 320);
    unint64_t v130 = (void *)v40;
    uint64_t v131 = v39;
    if (v39) {
      goto LABEL_76;
    }
  }
  else
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB954E0;
    std::string::size_type v40 = *(void *)(a2 + 312);
    uint64_t v39 = *(std::__shared_weak_count **)(a2 + 320);
    unint64_t v130 = (void *)v40;
    uint64_t v131 = v39;
    if (v39)
    {
LABEL_76:
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v128 = v40;
      uint64_t v129 = v39;
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_79;
    }
  }
  std::string::size_type v128 = v40;
  uint64_t v129 = 0;
LABEL_79:
  uint64_t v41 = *(void *)(a2 + 336);
  sub_21B972E90((uint64_t)&v126, 2, a2 + 368, 2, a2 + 376, 2);
  uint64_t v42 = v129;
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v104.__r_.__value_.__l.__size_ = v40;
  v104.__r_.__value_.__r.__words[2] = (std::string::size_type)v42;
  *(void *)uint64_t v105 = v126;
  *(_DWORD *)&v105[8] = v127;
  *(void *)&v105[16] = v41;
  *(_DWORD *)&v105[24] = 3;
  if (!v40)
  {
    *(_WORD *)&v105[28] = 0;
    if (!v42) {
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  int v43 = (*(uint64_t (**)(std::string::size_type))(*(void *)v40 + 104))(v40);
  if ((v43 & 0xFFFFFFu) <= 0x10000) {
    unsigned __int8 v44 = 0;
  }
  else {
    unsigned __int8 v44 = v43;
  }
  __int16 v45 = v43 & 0xFF00;
  if ((v43 & 0xFF0000) == 0) {
    __int16 v45 = 0;
  }
  uint64_t v42 = v129;
  *(_WORD *)&v105[28] = v45 & 0xFF00 | v44;
  if (v129)
  {
LABEL_93:
    if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_95:
  unint64_t v46 = v131;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  long long v47 = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
  __uint64_t v106 = (__uint64_t)&unk_26CB954E0;
  long long v107 = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)char v108 = *(_OWORD *)v105;
  *(_OWORD *)&v108[14] = *(_OWORD *)&v105[14];
  int v110 = 2;
  LODWORD(v144) = -1;
  *(void *)unint64_t v132 = &unk_26CB954E0;
  if (*((void *)&v47 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v48 = *(void *)&v108[16];
    int v49 = *(_DWORD *)&v108[24];
    __int16 v50 = *(_WORD *)&v108[28];
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v48 = *(void *)&v108[16];
    int v49 = *(_DWORD *)&v108[24];
    __int16 v50 = *(_WORD *)&v108[28];
  }
  *(_OWORD *)&v132[8] = v47;
  *(void *)&long long __p = *(void *)v108;
  DWORD2(__p) = *(_DWORD *)&v108[8];
  uint64_t v134 = v48;
  int v135 = v49;
  __int16 v136 = v50;
  if (*((void *)&v47 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v47 + 1) + 16))(*((void *)&v47 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
    LODWORD(v144) = 2;
    uint64_t v51 = v112;
    if ((unint64_t)v112 < v113) {
      goto LABEL_104;
    }
LABEL_108:
    char v53 = sub_21B8F1B28((char **)&v111, (uint64_t)v132);
    goto LABEL_109;
  }
  LODWORD(v144) = 2;
  uint64_t v51 = v112;
  if ((unint64_t)v112 >= v113) {
    goto LABEL_108;
  }
LABEL_104:
  char *v51 = 0;
  *((_DWORD *)v51 + 30) = -1;
  int v52 = (int)v144;
  if (v144 != -1)
  {
    ((void (*)(void **, char *, unsigned char *))off_26CB9D680[v144])(&v130, v51, v132);
    *((_DWORD *)v51 + 30) = v52;
  }
  char v53 = v51 + 128;
LABEL_109:
  long long v112 = v53;
  if (v144 != -1) {
    ((void (*)(void **, unsigned char *))off_26CB9D668[v144])(&v130, v132);
  }
  LODWORD(v144) = -1;
  if (v110 != -1) {
    ((void (*)(void **, __uint64_t *))off_26CB9D668[v110])(&v130, &v106);
  }
  int v110 = -1;
  char v54 = (std::__shared_weak_count *)v104.__r_.__value_.__r.__words[2];
  if (v104.__r_.__value_.__r.__words[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(v104.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  unint64_t v102 = a4;
  unint64_t v130 = &unk_26CB9EFA0;
  uint64_t v131 = a6;
  uint64_t v55 = *(unsigned __int8 *)(a2 + 296);
  if (*(unsigned char *)(a2 + 296)) {
    char v56 = &v130;
  }
  else {
    char v56 = 0;
  }
  kdebug_trace();
  int v57 = sub_21B913A08();
  uint64_t v58 = (std::mutex *)sub_21B91401C();
  unint64_t v59 = atomic_load((unint64_t *)&v58[1]);
  char v60 = "BufferILNS1_6FormatE4EEE";
  if (v59)
  {
    uint64_t v61 = a1;
    *(_DWORD *)unint64_t v132 = 67109120;
    *(_DWORD *)&v132[4] = a6 != 0;
    float v62 = (char *)_os_log_send_and_compose_impl();
    size_t v63 = strlen(v62);
    __uint64_t v106 = 0;
    pthread_threadid_np(0, &v106);
    __uint64_t v64 = v106;
    timespec_get((timespec *)&v106, 1);
    sub_21B913D20(v132, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (long long *)(v57 + 1), (long long *)(v57 + 5), "LF:E2EMR:BEGIN: PS:%d", 0x15uLL, v62, v63, v64, &v106);
    std::mutex::lock(v58);
    uint64_t v65 = *(void *)v58[1].__m_.__opaque;
    for (uint64_t i = *(void *)&v58[1].__m_.__opaque[8]; v65 != i; v65 += 40)
    {
      uint64_t v67 = *(void *)(v65 + 32);
      if (!v67) {
        sub_21B846100();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v67 + 48))(v67, v132);
    }
    std::mutex::unlock(v58);
    if (v145 < 0)
    {
      operator delete(v144);
      a1 = v61;
      char v60 = "BufferILNS1_6FormatE4EEE";
      if ((v143 & 0x80000000) == 0)
      {
LABEL_125:
        if (!v141)
        {
LABEL_131:
          if (v138 && v137 < 0) {
            operator delete(*((void **)&__p + 1));
          }
          if (SBYTE7(__p) < 0) {
            operator delete(*(void **)&v132[8]);
          }
          if (v62) {
            free(v62);
          }
          goto LABEL_138;
        }
LABEL_129:
        if (v140 < 0) {
          operator delete(v139);
        }
        goto LABEL_131;
      }
    }
    else
    {
      a1 = v61;
      char v60 = "N4cv3d3kit3img16ArrayImageBufferILNS1_6FormatE4EEE" + 26;
      if ((v143 & 0x80000000) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(v142);
    if (!v141) {
      goto LABEL_131;
    }
    goto LABEL_129;
  }
LABEL_138:
  if (os_signpost_enabled((os_log_t)*v57))
  {
    *(_DWORD *)unint64_t v132 = *((void *)v60 + 297);
    *(_DWORD *)&v132[4] = a6 != 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_21B93AC30(*(void *)(*(void *)(a2 + 288) + 16), (uint64_t *)&v111, (uint64_t)v56, v55, (uint64_t)&v106);
  char v68 = sub_21B913A08();
  uint64_t v69 = (std::mutex *)sub_21B91401C();
  if (atomic_load((unint64_t *)&v69[1]))
  {
    *(_DWORD *)unint64_t v132 = 134217984;
    *(void *)&v132[4] = v102;
    char v71 = (char *)_os_log_send_and_compose_impl();
    size_t v72 = strlen(v71);
    v104.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v104);
    uint64_t v73 = v104.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v104, 1);
    sub_21B913D20(v132, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (long long *)(v68 + 1), (long long *)(v68 + 5), "LF:E2EMR:END: NV:%lu", 0x14uLL, v71, v72, v73, &v104);
    std::mutex::lock(v69);
    uint64_t v74 = *(void *)v69[1].__m_.__opaque;
    for (uint64_t j = *(void *)&v69[1].__m_.__opaque[8]; v74 != j; v74 += 40)
    {
      uint64_t v76 = *(void *)(v74 + 32);
      if (!v76) {
        sub_21B846100();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v76 + 48))(v76, v132);
    }
    std::mutex::unlock(v69);
    if (v145 < 0)
    {
      operator delete(v144);
      if ((v143 & 0x80000000) == 0)
      {
LABEL_146:
        if (!v141)
        {
LABEL_152:
          if (v138 && v137 < 0) {
            operator delete(*((void **)&__p + 1));
          }
          if (SBYTE7(__p) < 0) {
            operator delete(*(void **)&v132[8]);
          }
          if (v71) {
            free(v71);
          }
          goto LABEL_159;
        }
LABEL_150:
        if (v140 < 0) {
          operator delete(v139);
        }
        goto LABEL_152;
      }
    }
    else if ((v143 & 0x80000000) == 0)
    {
      goto LABEL_146;
    }
    operator delete(v142);
    if (!v141) {
      goto LABEL_152;
    }
    goto LABEL_150;
  }
LABEL_159:
  if (os_signpost_enabled((os_log_t)*v68))
  {
    *(_DWORD *)unint64_t v132 = 134217984;
    *(void *)&v132[4] = v102;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if ((_BYTE)v107)
  {
    sub_21B8E84B4((uint64_t *)&v104, "Error:");
    int v95 = *(char *)(*((void *)&v107 + 1) + 23);
    if (v95 >= 0) {
      char v96 = (const std::string::value_type *)*((void *)&v107 + 1);
    }
    else {
      char v96 = (const std::string::value_type *)**((void **)&v107 + 1);
    }
    if (v95 >= 0) {
      std::string::size_type v97 = *(unsigned __int8 *)(*((void *)&v107 + 1) + 23);
    }
    else {
      std::string::size_type v97 = *(void *)(*((void *)&v107 + 1) + 8);
    }
    unint64_t v98 = std::string::append(&v104, v96, v97);
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    *(void *)&v132[16] = *((void *)&v98->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v132 = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    if (v132[23] >= 0) {
      unint64_t v100 = v132;
    }
    else {
      unint64_t v100 = *(unsigned char **)v132;
    }
    if (v132[23] >= 0) {
      uint64_t v101 = v132[23];
    }
    else {
      uint64_t v101 = *(void *)&v132[8];
    }
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 301, (uint64_t)&unk_21B997215, 0, (uint64_t)v100, v101, (void (*)(void **))sub_21B984AC4);
    if ((v132[23] & 0x80000000) != 0) {
      operator delete(*(void **)v132);
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    abort();
  }
  sub_21B8FA6A8(*(long long **)&v108[8], v102, (uint64_t)v132);
  sub_21B8FB5B0((long long *)(*(void *)&v108[8] + 128), 1uLL, (uint64_t)&v104);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  int v77 = __p;
  if (__p != -1)
  {
    (*(&off_26CB9E938 + __p))((uint64_t)&v128, (__n128 *)(a1 + 24), (__n128 *)v132);
    *(_DWORD *)(a1 + 48) = v77;
  }
  uint64_t v78 = *((void *)&__p + 1);
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v78;
  *(_DWORD *)(a1 + 64) = v134;
  *(_DWORD *)(a1 + 96) = -1;
  int v79 = *(_DWORD *)v105;
  if (*(_DWORD *)v105 == -1)
  {
    *(void *)(a1 + 104) = *(void *)&v105[8];
    *(_DWORD *)(a1 + 112) = *(_DWORD *)&v105[16];
    uint64_t v81 = __p;
    if (__p == -1) {
      goto LABEL_171;
    }
LABEL_170:
    ((void (*)(std::string *, unsigned char *))off_26CB9D628[v81])(&v104, v132);
    goto LABEL_171;
  }
  ((void (*)(std::string::size_type *))*(&off_26CB9E938 + *(unsigned int *)v105))(&v128);
  *(_DWORD *)(a1 + 96) = v79;
  uint64_t v80 = *(unsigned int *)v105;
  *(void *)(a1 + 104) = *(void *)&v105[8];
  *(_DWORD *)(a1 + 112) = *(_DWORD *)&v105[16];
  if (v80 != -1) {
    ((void (*)(std::string::size_type *, std::string *))off_26CB9D628[v80])(&v128, &v104);
  }
  uint64_t v81 = __p;
  if (__p != -1) {
    goto LABEL_170;
  }
LABEL_171:
  if (v109)
  {
    uint64_t v82 = *(void *)&v108[8];
    if (*(void *)&v108[8])
    {
      uint64_t v83 = *(void *)&v108[16];
      char v84 = *(void **)&v108[8];
      if (*(void *)&v108[16] != *(void *)&v108[8])
      {
        do
        {
          uint64_t v85 = v83 - 128;
          uint64_t v86 = *(unsigned int *)(v83 - 8);
          if (v86 != -1) {
            ((void (*)(unsigned char *, uint64_t))off_26CB9D610[v86])(v132, v83 - 128);
          }
          *(_DWORD *)(v83 - 8) = -1;
          v83 -= 128;
        }
        while (v85 != v82);
        char v84 = *(void **)&v108[8];
      }
      *(void *)&v108[16] = v82;
      operator delete(v84);
    }
  }
  __uint64_t v106 = (__uint64_t)&unk_26CB95650;
  uint64_t v87 = *(std::__shared_weak_count **)v108;
  if (*(void *)v108 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v108 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    uint64_t v88 = (char *)v111;
    if (!v111) {
      goto LABEL_190;
    }
  }
  else
  {
    uint64_t v88 = (char *)v111;
    if (!v111) {
      goto LABEL_190;
    }
  }
  char v89 = v112;
  char v90 = v88;
  if (v112 != v88)
  {
    do
    {
      char v91 = v89 - 128;
      uint64_t v92 = *((unsigned int *)v89 - 2);
      if (v92 != -1) {
        ((void (*)(unsigned char *, char *))off_26CB9D668[v92])(v132, v89 - 128);
      }
      *((_DWORD *)v89 - 2) = -1;
      v89 -= 128;
    }
    while (v91 != v88);
    char v90 = v111;
  }
  long long v112 = v88;
  operator delete(v90);
LABEL_190:
  int v114 = &unk_26CB95650;
  BOOL v93 = v116;
  if (!v116 || atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v118) & 0x80000000) == 0) {
      goto LABEL_194;
    }
    goto LABEL_193;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (SHIBYTE(v118) < 0) {
LABEL_193:
  }
    operator delete(__dst[0]);
LABEL_194:
  uint64_t result = v119;
  uint64_t v119 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B8EB670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56)
{
  sub_21B8EBA48((uint64_t)&a25);
  sub_21B8EBB5C(&a42);
  sub_21B83D090(&a45);
  if (a54 < 0)
  {
    operator delete(__p);
    uint64_t v57 = a56;
    a56 = 0;
    if (!v57) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v57 = a56;
    a56 = 0;
    if (!v57) {
      goto LABEL_6;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8EB914(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B8EB990(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9D668[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_21B8EB9EC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9D668[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_21B8EBA48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      char v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = v3 - 128;
          uint64_t v6 = *(unsigned int *)(v3 - 8);
          if (v6 != -1) {
            ((void (*)(char *, uint64_t))off_26CB9D610[v6])(&v9, v3 - 128);
          }
          *(_DWORD *)(v3 - 8) = -1;
          v3 -= 128;
        }
        while (v5 != v2);
        char v4 = *(void **)(a1 + 32);
      }
      *(void *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(void *)a1 = &unk_26CB95650;
  int v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void **sub_21B8EBB5C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 128;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_26CB9D668[v6])(&v8, v3 - 128);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_21B8EBC04(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, std::__shared_weak_count *a5@<X4>, uint64_t a6@<X8>)
{
  v50[0] = a3;
  v50[1] = a4;
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(void *)(a6 + 112) = 0;
  unint64_t v38 = vcvtps_u32_f32((float)a3 / (float)v8);
  if (!v38) {
    return;
  }
  unint64_t v9 = v8;
  if (a3 % v8) {
    unint64_t v10 = a3 % v8;
  }
  else {
    unint64_t v10 = v8;
  }
  unint64_t v11 = sub_21B8EC14C(v50, 0, v10);
  sub_21B8EA07C((uint64_t)&__p, a1, a2, v11, v12, a5);
  uint64_t v14 = (long long *)__p;
  uint64_t v13 = v45;
  v53[0] = (char **)a6;
  if (__p != v45)
  {
    do
    {
      sub_21B862A18(v53, v14);
      uint64_t v14 = (long long *)((char *)v14 + 20);
    }
    while (v14 != v13);
  }
  int v36 = (char **)(a6 + 72);
  if (!sub_21B9145D4((char **)(a6 + 24), (uint64_t)v46)) {
    goto LABEL_11;
  }
  char v52 = 1;
  uint64_t v51 = &v52;
  uint64_t v15 = *(unsigned int *)(a6 + 96);
  if (v15 == -1) {
    sub_21B84C734();
  }
  v53[0] = &v51;
  ((void (*)(char ***, char **))off_26CB9E8D8[v15])(v53, v36);
  if (v52)
  {
    if ((sub_21B9145D4(v36, (uint64_t)v48) & 1) == 0)
    {
LABEL_11:
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 319, (uint64_t)"append_ret", 10, (uint64_t)"Append features failed", 22, (void (*)(void **))sub_21B984AC4))
      {
LABEL_55:
        abort();
      }
    }
  }
  if (v49 != -1) {
    ((void (*)(char ***, unsigned char *))off_26CB9D628[v49])(v53, v48);
  }
  int v49 = -1;
  if (v47 != -1) {
    ((void (*)(char ***, unsigned char *))off_26CB9D628[v47])(v53, v46);
  }
  int v47 = -1;
  if (__p)
  {
    __int16 v45 = (long long *)__p;
    operator delete(__p);
  }
  if (v38 != 1)
  {
    uint64_t v16 = 1;
    unint64_t v37 = v9;
    while (1)
    {
      uint64_t v42 = v16;
      unint64_t v43 = v10;
      unint64_t v17 = sub_21B8EC14C(v50, v10, v9);
      sub_21B8EA07C((uint64_t)&__p, a1, a2, v17, v18, a5);
      uint64_t v20 = (long long *)__p;
      int v19 = v45;
      if (__p != v45)
      {
        uint64_t v21 = *(char **)(a6 + 8);
        do
        {
          unint64_t v24 = *(void *)(a6 + 16);
          if ((unint64_t)v21 < v24)
          {
            long long v22 = *v20;
            *((_DWORD *)v21 + 4) = *((_DWORD *)v20 + 4);
            *(_OWORD *)uint64_t v21 = v22;
            uint64_t v23 = v21 + 20;
          }
          else
          {
            long long v25 = *(char **)a6;
            unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v21[-*(void *)a6] >> 2);
            unint64_t v27 = v26 + 1;
            if (v26 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              sub_21B862A00();
            }
            unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v25) >> 2);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x666666666666666) {
              unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              if (v29 > 0xCCCCCCCCCCCCCCCLL) {
                sub_21B845A48();
              }
              uint64_t v30 = (char *)operator new(20 * v29);
            }
            else
            {
              uint64_t v30 = 0;
            }
            long long v31 = *v20;
            uint64_t v32 = &v30[20 * v26];
            *((_DWORD *)v32 + 4) = *((_DWORD *)v20 + 4);
            *(_OWORD *)uint64_t v32 = v31;
            int v33 = v32;
            if (v21 != v25)
            {
              do
              {
                long long v34 = *(_OWORD *)(v21 - 20);
                *((_DWORD *)v33 - 1) = *((_DWORD *)v21 - 1);
                *(_OWORD *)(v33 - 20) = v34;
                v33 -= 20;
                v21 -= 20;
              }
              while (v21 != v25);
              uint64_t v21 = *(char **)a6;
            }
            uint64_t v23 = v32 + 20;
            *(void *)a6 = v33;
            *(void *)(a6 + 8) = v32 + 20;
            *(void *)(a6 + 16) = &v30[20 * v29];
            if (v21) {
              operator delete(v21);
            }
          }
          *(void *)(a6 + 8) = v23;
          uint64_t v20 = (long long *)((char *)v20 + 20);
          uint64_t v21 = v23;
        }
        while (v20 != v19);
      }
      unint64_t v9 = v37;
      if (!sub_21B9145D4((char **)(a6 + 24), (uint64_t)v46)) {
        goto LABEL_60;
      }
      char v52 = 1;
      uint64_t v51 = &v52;
      uint64_t v35 = *(unsigned int *)(a6 + 96);
      if (v35 == -1) {
        sub_21B84C734();
      }
      v53[0] = &v51;
      ((void (*)(char ***, char **))off_26CB9E8D8[v35])(v53, v36);
      if (v52)
      {
        if ((sub_21B9145D4(v36, (uint64_t)v48) & 1) == 0)
        {
LABEL_60:
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 319, (uint64_t)"append_ret", 10, (uint64_t)"Append features failed", 22, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_55;
          }
        }
      }
      if (v49 != -1) {
        ((void (*)(char ***, unsigned char *))off_26CB9D628[v49])(v53, v48);
      }
      int v49 = -1;
      if (v47 != -1) {
        ((void (*)(char ***, unsigned char *))off_26CB9D628[v47])(v53, v46);
      }
      int v47 = -1;
      if (__p)
      {
        __int16 v45 = (long long *)__p;
        operator delete(__p);
      }
      unint64_t v10 = v43 + v37;
      uint64_t v16 = v42 + 1;
      if (v42 + 1 == v38) {
        return;
      }
    }
  }
}

void sub_21B8EC0FC(_Unwind_Exception *a1)
{
  sub_21B863490(v1);
  _Unwind_Resume(a1);
}

void sub_21B8EC130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_21B863490((uint64_t)va);
  sub_21B863490(v12);
  _Unwind_Resume(a1);
}

unint64_t sub_21B8EC14C(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if (a3 != -1)
  {
    unint64_t v5 = a3;
    if (a3 + a2 > *a1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_14;
    }
    if (!v5 || a1[1]) {
      return v5;
    }
LABEL_12:
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))return v5; {
LABEL_14:
    }
    abort();
  }
  unint64_t v6 = *a1;
  if (*a1 < a2)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 471, (uint64_t)"offset <= size()", 16, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_14;
    }
    unint64_t v6 = *a1;
  }
  unint64_t v5 = v6 - a2;
  if (!a1[1] && v5) {
    goto LABEL_12;
  }
  return v5;
}

void sub_21B8EC294(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B8F0BDC((uint64_t)__p);
  *(void *)a2 = 4;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x6567616D69;
  *(_WORD *)(a2 + 39) = 5;
  *(unsigned char *)(a2 + 63) = 0;
  *(void *)(a2 + 64) = 0x3535335F726176;
  *(unsigned char *)(a2 + 87) = 7;
  *(void *)(a2 + 88) = 0x333332315F726176;
  *(void *)(a2 + 96) = 0;
  *(_WORD *)(a2 + 111) = 8;
  *(unsigned char *)(a2 + 135) = 0;
  sub_21B97F248((std::string *)(a2 + 136));
  sub_21B8F2178(a2 + 160, (uint64_t)__p);
  *(_DWORD *)(a2 + 200) = 1041865114;
  *(void *)(a2 + 208) = 8;
  *(unsigned char *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = a1;
  *(unsigned char *)(a2 + 224) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 1;
  *(unsigned char *)(a2 + 256) = 1;
  *(unsigned char *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  sub_21B8E5D7C((int)__p, (void **)__p[2]);
  char v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
}

void sub_21B8EC3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 159) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v2 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v2 + 112));
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v2 + 88));
  if ((*(char *)(v2 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v2 + 64));
  if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v2 + 40));
  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
LABEL_7:
    sub_21B8F12E8((uint64_t)va);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v2 + 16));
  sub_21B8F12E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8EC460(uint64_t a1, uint64_t a2)
{
  sub_21B8E67B4((uint64_t)&v2, a2);
}

void sub_21B8EC608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    uint64_t v11 = sub_21B928C0C(a10);
    MEMORY[0x21D495F30](v11, 0x60C40CE5A77A8);
  }
  sub_21B8E7600(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8EC63C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26CB9D480;
  sub_21B8F15C0(a1 + 8, a2);
  uint64_t v6 = *a3;
  *a3 = 0;
  *(void *)(a1 + 288) = v6;
  int v7 = (void *)a2[22];
  if (v7)
  {
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7[2];
      if (v8 < *(_DWORD *)(v10 + 4)
              * *(_DWORD *)v10
              * *(_DWORD *)(v10 + 8)
              * *(_DWORD *)(v10 + 12)
              * *(_DWORD *)(v10 + 16))
      {
        unint64_t v9 = *(void *)(v10 + 4);
        unsigned int v8 = *(_DWORD *)(v10 + 4)
           * *(_DWORD *)v10
           * *(_DWORD *)(v10 + 8)
           * *(_DWORD *)(v10 + 12)
           * *(_DWORD *)(v10 + 16);
      }
      int v7 = (void *)*v7;
    }
    while (v7);
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (HIDWORD(v9)) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = v11;
  if (v11) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v9;
  }
  unint64_t v14 = v9 << 32;
  if (v11) {
    unint64_t v14 = 0;
  }
  uint64_t v15 = v14 | (v13 != 0);
  *(void *)(a1 + 296) = v13;
  *(void *)(a1 + 304) = v15;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  if (!v13) {
    int v12 = 1;
  }
  if (v12) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = v13;
  }
  unint64_t v17 = v14 >> 30;
  unint64_t v18 = v17 - 1;
  unint64_t v19 = HIDWORD(v16) * v17;
  BOOL v11 = (v17 & (v17 - 1)) == 0;
  unint64_t v20 = 3;
  if (v11) {
    unint64_t v20 = v18;
  }
  unint64_t v21 = v20 | (v20 >> 1) | ((v20 | (v20 >> 1)) >> 2);
  unint64_t v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
  unint64_t v23 = v22 | (v22 >> 16) | ((v22 | (v22 >> 16)) >> 32);
  if (v23 + 1 > 8) {
    size_t v24 = v23 + 1;
  }
  else {
    size_t v24 = 8;
  }
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = v24;
  unint64_t v25 = v19 & 0x3FFFFFFFCLL;
  *(void *)(a1 + 328) = v19 & 0x3FFFFFFFCLL;
  if ((v19 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    int v26 = malloc_type_posix_memalign(&memptr, v24, v19 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v26) {
      sub_21B97D9E4(v26, *(void *)(a1 + 344), v25);
    }
    *(void *)(a1 + 336) = memptr;
  }
  *(void *)(a1 + 352) = v16;
  *(void *)(a1 + 360) = 4 * v15;
  return a1;
}

void sub_21B8EC7DC(_Unwind_Exception *a1)
{
  sub_21B8E7600(v2);
  sub_21B8E5CA4(v1);
  _Unwind_Resume(a1);
}

void *sub_21B8EC7F8(void *a1)
{
  *a1 = &unk_26CB9D480;
  uint64_t v2 = (void *)a1[42];
  if (v2) {
    free(v2);
  }
  a1[42] = 0;
  uint64_t v3 = a1[36];
  a1[36] = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

void *sub_21B8EC8F4(void *a1)
{
  *a1 = &unk_26CB9D480;
  uint64_t v2 = (void *)a1[42];
  if (v2) {
    free(v2);
  }
  a1[42] = 0;
  uint64_t v3 = a1[36];
  a1[36] = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_21B8EC9F0(void *a1)
{
  *a1 = &unk_26CB9D480;
  uint64_t v2 = (void *)a1[42];
  if (v2) {
    free(v2);
  }
  a1[42] = 0;
  uint64_t v3 = a1[36];
  a1[36] = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));

  JUMPOUT(0x21D495F30);
}

void sub_21B8ECB0C(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_21B8565FC(*a2, (uint64_t)&v13);
  uint64_t v5 = *(void *)&v14[4];
  if (*(_DWORD *)&v14[4]) {
    BOOL v6 = HIDWORD(*(void *)&v14[4]) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v5 = 0;
  }
  *(void *)&long long v11 = v13;
  *((void *)&v11 + 1) = v5;
  uint64_t v12 = v15;
  if (HIDWORD(v5) * HIDWORD(v15) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8F5EC0((uint64_t *)&v11, 1, &v13, *(float *)(a1 + 208));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v7 = v13;
  int64_t v8 = *(void *)v14 - (void)v13;
  if (*(float **)v14 != v13)
  {
    if (v8 < 0) {
      sub_21B846300();
    }
    unint64_t v9 = (char *)operator new(*(void *)v14 - (void)v13);
    *(void *)a3 = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a3 + 16) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a3 + 8) = v10;
  }
  *(_OWORD *)(a3 + 24) = v11;
  *(void *)(a3 + 40) = v12;
  if (v7)
  {
    *(void *)unint64_t v14 = v7;
    operator delete(v7);
  }
}

void sub_21B8ECC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    unint64_t v17 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_21B8ECC80(uint64_t a1@<X0>, int32x2_t *a2@<X1>, void *a3@<X2>, float32x2_t **a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 248)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 363, (uint64_t)"!m_param.op_desc_quant.has_value()", 34, (uint64_t)"Not implemented desc_quantization for float network.", 52, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_93;
  }
  sub_21B8565FC(*a3 + 120, (uint64_t)v90);
  uint64_t v7 = v91;
  int v8 = DWORD2(v91);
  uint64_t v9 = *(void *)&v90[0];
  _ZF = !HIDWORD(*(void *)((char *)v90 + 12)) || HIDWORD(v90[0]) == 0;
  BOOL v11 = _ZF || DWORD1(v90[1]) == 0;
  BOOL v12 = v11;
  if (v11) {
    int32x2_t v13 = 0;
  }
  else {
    int32x2_t v13 = *(int32x2_t *)((char *)v90 + 12);
  }
  uint64_t v14 = v11 ? 0 : DWORD1(v90[1]);
  if (v14 * DWORD2(v91) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_93:
    abort();
  }
  unint64_t v15 = a4[1] - *a4;
  LODWORD(v89) = 0;
  unint64_t v16 = 0x100000000;
  if (v12) {
    unint64_t v16 = 0;
  }
  *(void *)&v90[0] = v16 | v14;
  BYTE8(v90[0]) = 0;
  BYTE12(v90[0]) = 0;
  LODWORD(v88[0]) = HIDWORD(v16);
  LODWORD(v86) = v14;
  sub_21B8F359C((uint64_t)&v90[1], (unsigned int *)&v86, (int *)v88, 1, (const float *)&v89, 1, v16 >> 30);
  sub_21B8F32AC((char **)&__p, v15, (uint64_t)v90);
  if (*((void *)&v90[1] + 1)) {
    free(*((void **)&v90[1] + 1));
  }
  unint64_t v17 = *a4;
  unint64_t v18 = a4[1];
  if (*a4 != v18 && !v12)
  {
    uint64_t v33 = 0;
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v37 = vdivq_f64(_Q2, vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(a2[4], (int32x2_t)-1))));
    float64x2_t v38 = vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v13, (int32x2_t)-1)));
    uint64_t v39 = (char *)__p;
    int v40 = v14 - 1;
    __asm { FMOV            V6.2S, #1.0 }
    do
    {
      float32x2_t v42 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vmulq_f64(v37, vcvtq_f64_f32(*v17)), v38), (float64x2_t)0));
      float32x2_t v43 = vadd_f32(vrndm_f32(v42), _D6);
      int32x2_t v44 = vcgt_f32(v43, _D6);
      if (v44.i8[4]) {
        float v45 = v43.f32[1];
      }
      else {
        float v45 = 1.0;
      }
      if ((float)((float)v13.u32[1] + -1.0) >= v43.f32[1]) {
        float v46 = v45;
      }
      else {
        float v46 = (float)v13.u32[1] + -1.0;
      }
      float v47 = v46 + -1.0;
      if (v44.i8[0]) {
        float v48 = v43.f32[0];
      }
      else {
        float v48 = 1.0;
      }
      if ((float)((float)v13.u32[0] + -1.0) >= v43.f32[0]) {
        float v49 = v48;
      }
      else {
        float v49 = (float)v13.u32[0] + -1.0;
      }
      int v50 = (unint64_t)(float)(v49 + -1.0) * v7;
      int v51 = (unint64_t)v47 * HIDWORD(v7);
      int v52 = (unint64_t)v49 * v7;
      float v53 = (float)(v42.f32[0] - (float)(v49 + -1.0)) / (float)(v49 - (float)(v49 + -1.0));
      int v54 = (unint64_t)v46 * HIDWORD(v7);
      float v55 = (float)(v42.f32[1] - v47) / (float)(v46 - v47);
      char v56 = &v39[48 * v33];
      int v57 = *((_DWORD *)v56 + 1);
      uint64_t v58 = (float32x4_t *)*((void *)v56 + 3);
      if (v14 >= 0x14)
      {
        uint64_t v59 = 0;
        BOOL v60 = __CFADD__(v50 + v51, v40);
        BOOL v61 = __CFADD__(v52 + v51, v40);
        BOOL v62 = __CFADD__(v50 + v54, v40);
        if (__CFADD__(v52 + v54, v40) || v62 || v61 || v57 != 1 || v8 != 1 || v60 || (unint64_t)(v14 - 1) >> 32) {
          goto LABEL_85;
        }
        if ((unint64_t)v58 - v9 + -4 * (v52 + v54) >= 0x10
          && (unint64_t)v58 - v9 + -4 * (v50 + v54) >= 0x10
          && (unint64_t)v58 - v9 + -4 * (v52 + v51) >= 0x10
          && (unint64_t)v58 - v9 + -4 * (v50 + v51) >= 0x10)
        {
          int v75 = v52;
          int v76 = v50;
          uint64_t v77 = v14 & 0xFFFFFFFC;
          uint64_t v78 = v58;
          do
          {
            float32x4_t v79 = *(float32x4_t *)(v9 + 4 * (v51 + v76));
            float32x4_t v80 = *(float32x4_t *)(v9 + 4 * (v54 + v76));
            float32x4_t v81 = vaddq_f32(v79, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v9 + 4 * (v51 + v75)), v79), v53));
            *v78++ = vaddq_f32(v81, vmulq_n_f32(vsubq_f32(vaddq_f32(v80, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v9 + 4 * (v54 + v75)), v80), v53)), v81), v55));
            v76 += 4;
            v75 += 4;
            v77 -= 4;
          }
          while (v77);
          uint64_t v59 = v14 & 0xFFFFFFFC;
          if (v59 == v14) {
            goto LABEL_87;
          }
          goto LABEL_85;
        }
      }
      uint64_t v59 = 0;
LABEL_85:
      uint64_t v66 = v14 - v59;
      int v67 = v57 * v59;
      int v68 = v52 + v54;
      int v69 = v52 + v51;
      int v70 = v50 + v54;
      int v71 = v50 + v51;
      int v72 = v8 * v59;
      do
      {
        float v73 = *(float *)(v9 + 4 * (v71 + v72));
        float v74 = v73 + (float)(v53 * (float)(*(float *)(v9 + 4 * (v69 + v72)) - v73));
        v58->f32[v67] = v74
                      + (float)(v55
                              * (float)((float)(*(float *)(v9 + 4 * (v70 + v72))
                                              + (float)(v53
                                                      * (float)(*(float *)(v9 + 4 * (v68 + v72))
                                                              - *(float *)(v9 + 4 * (v70 + v72)))))
                                      - v74));
        v67 += v57;
        v72 += v8;
        --v66;
      }
      while (v66);
LABEL_87:
      ++v17;
      ++v33;
    }
    while (v17 != v18);
  }
  unint64_t v19 = (char *)__p;
  unint64_t v20 = v85;
  long long v86 = 0uLL;
  uint64_t v87 = 0;
  uint64_t v21 = v85 - (unsigned char *)__p;
  if (v85 == __p)
  {
    long long v29 = 0uLL;
  }
  else
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 4);
    if (HIBYTE(v22)) {
      sub_21B846300();
    }
    *(void *)&long long v86 = operator new(0xAAAAAAAAAAAAAB00 * (v21 >> 4));
    *((void *)&v86 + 1) = v86;
    uint64_t v87 = v86 + (v22 << 8);
    char v89 = (char **)&v86;
    do
    {
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      memset(v90, 0, sizeof(v90));
      uint64_t v23 = (*((_DWORD *)v19 + 1) * *(_DWORD *)v19);
      if (v23)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *((void *)v19 + 3);
        uint64_t v26 = 4 * v23;
        uint64_t v27 = (*(void *)v19 >> 30) & 0x3FFFFFFFCLL;
        unint64_t v28 = v90;
        do
        {
          *v28++ = *(_DWORD *)(v25 + v24);
          v24 += v27;
        }
        while (v26 != v24);
      }
      v88[13] = v102;
      v88[14] = v103;
      v88[15] = v104;
      v88[9] = v98;
      v88[10] = v99;
      v88[11] = v100;
      v88[12] = v101;
      v88[5] = v94;
      v88[6] = v95;
      v88[7] = v96;
      v88[8] = v97;
      v88[0] = v90[0];
      v88[1] = v90[1];
      v88[2] = v91;
      v88[3] = v92;
      v88[4] = v93;
      sub_21B8F37C4(&v89, v88);
      v19 += 48;
    }
    while (v19 != v20);
    long long v29 = v86;
    uint64_t v21 = v87;
    unint64_t v19 = (char *)__p;
  }
  *(_OWORD *)a5 = v29;
  *(void *)(a5 + 16) = v21;
  *(_DWORD *)(a5 + 24) = 2;
  *(void *)(a5 + 32) = 64;
  *(_DWORD *)(a5 + 40) = 2;
  if (v19)
  {
    uint64_t v30 = v85;
    long long v31 = v19;
    if (v85 != v19)
    {
      do
      {
        uint64_t v32 = (void *)*((void *)v30 - 3);
        if (v32) {
          free(v32);
        }
        *((void *)v30 - 3) = 0;
        v30 -= 48;
      }
      while (v30 != v19);
      long long v31 = __p;
    }
    uint64_t v85 = v19;
    operator delete(v31);
  }
}

void sub_21B8ED284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (a56) {
    free(a56);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8ED29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_21B8ED2C4(&a12);
  _Unwind_Resume(a1);
}

void **sub_21B8ED2C4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5) {
          free(v5);
        }
        *((void *)v3 - 3) = 0;
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_21B8ED33C(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B8F0BDC((uint64_t)__p);
  *(void *)a2 = 4;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x6567616D69;
  *(_WORD *)(a2 + 39) = 5;
  *(unsigned char *)(a2 + 63) = 0;
  *(void *)(a2 + 64) = 0x3536335F726176;
  *(unsigned char *)(a2 + 87) = 7;
  strcpy((char *)(a2 + 88), "descriptors_1");
  *(_WORD *)(a2 + 102) = 0;
  *(_WORD *)(a2 + 111) = 13;
  *(unsigned char *)(a2 + 135) = 0;
  sub_21B97EEA8((std::string *)(a2 + 136));
  sub_21B8F2178(a2 + 160, (uint64_t)__p);
  *(_DWORD *)(a2 + 200) = 1041865114;
  *(void *)(a2 + 208) = 8;
  *(unsigned char *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = a1;
  *(unsigned char *)(a2 + 224) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 1;
  *(unsigned char *)(a2 + 256) = 1;
  *(unsigned char *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  sub_21B8E5D7C((int)__p, (void **)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
}

void sub_21B8ED458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 159) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v2 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v2 + 112));
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v2 + 88));
  if ((*(char *)(v2 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v2 + 64));
  if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v2 + 40));
  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
LABEL_7:
    sub_21B8F12E8((uint64_t)va);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v2 + 16));
  sub_21B8F12E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8ED514(uint64_t a1, uint64_t a2)
{
  sub_21B8E67B4((uint64_t)&v2, a2);
}

void sub_21B8ED6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    uint64_t v11 = sub_21B928C0C(a10);
    MEMORY[0x21D495F30](v11, 0x60C40CE5A77A8);
  }
  sub_21B8E7600(&a9);
  _Unwind_Resume(a1);
}

void *sub_21B8ED6F0(void *a1)
{
  *a1 = &unk_26CB9D480;
  uint64_t v2 = (void *)a1[42];
  if (v2) {
    free(v2);
  }
  a1[42] = 0;
  uint64_t v3 = a1[36];
  a1[36] = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_21B8ED7EC(void *a1)
{
  *a1 = &unk_26CB9D480;
  uint64_t v2 = (void *)a1[42];
  if (v2) {
    free(v2);
  }
  a1[42] = 0;
  uint64_t v3 = a1[36];
  a1[36] = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x21D495F30](v3, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));

  JUMPOUT(0x21D495F30);
}

void sub_21B8ED908(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_21B8565FC(*a2, (uint64_t)&v13);
  uint64_t v5 = *(void *)&v14[4];
  if (*(_DWORD *)&v14[4]) {
    BOOL v6 = HIDWORD(*(void *)&v14[4]) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v5 = 0;
  }
  *(void *)&long long v11 = v13;
  *((void *)&v11 + 1) = v5;
  uint64_t v12 = v15;
  if (HIDWORD(v5) * HIDWORD(v15) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8F5EC0((uint64_t *)&v11, 1, &v13, *(float *)(a1 + 208));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = v13;
  int64_t v8 = *(void *)v14 - (void)v13;
  if (*(float **)v14 != v13)
  {
    if (v8 < 0) {
      sub_21B846300();
    }
    uint64_t v9 = (char *)operator new(*(void *)v14 - (void)v13);
    *(void *)a3 = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a3 + 16) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a3 + 8) = v10;
  }
  *(_OWORD *)(a3 + 24) = v11;
  *(void *)(a3 + 40) = v12;
  if (v7)
  {
    *(void *)uint64_t v14 = v7;
    operator delete(v7);
  }
}

void sub_21B8EDA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    unint64_t v17 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_21B8EDA7C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, float **a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 248)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 414, (uint64_t)"!m_param.op_desc_quant.has_value()", 34, (uint64_t)"Not implemented desc_quantization for binary network.", 53, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_61;
  }
  sub_21B8565FC(*a3 + 120, (uint64_t)v53);
  uint64_t v8 = v55;
  int v9 = v56;
  uint64_t v10 = *(void *)v53;
  BOOL v11 = !HIDWORD(*(void *)&v53[12]) || *(_DWORD *)&v53[12] == 0;
  BOOL v12 = v11 || *(_DWORD *)&v53[20] == 0;
  BOOL v13 = v12;
  uint64_t v14 = v12 ? 0 : *(void *)&v53[12];
  uint64_t v15 = v12 ? 0 : *(unsigned int *)&v53[20];
  if (v15 * v56 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_61:
    abort();
  }
  unint64_t v16 = ((char *)a4[1] - (char *)*a4) >> 3;
  int v57 = 0;
  unsigned int v58 = v15;
  unint64_t v17 = 0x100000000;
  if (v13) {
    unint64_t v17 = 0;
  }
  *(void *)float v53 = v17 | v15;
  v53[8] = 0;
  v53[12] = 0;
  int v59 = HIDWORD(v17);
  sub_21B8F359C((uint64_t)&v53[16], &v58, &v59, 1, (const float *)&v57, 1, v17 >> 30);
  sub_21B8F32AC((char **)&__p, v16, (uint64_t)v53);
  if (v54) {
    free(v54);
  }
  unint64_t v18 = *a4;
  unint64_t v19 = a4[1];
  if (*a4 != v19 && !v13)
  {
    uint64_t v24 = 0;
    uint64_t v25 = (char *)__p;
    unint64_t v26 = (v14 - 1);
    double v27 = 1.0 / (float)(*(_DWORD *)(a2 + 32) - 1);
    unint64_t v28 = (HIDWORD(v14) - 1);
    double v29 = 1.0 / (float)(*(_DWORD *)(a2 + 36) - 1);
    do
    {
      float v30 = v27 * *v18 * (float)v26 + 0.0;
      unint64_t v31 = vcvtas_u32_f32(v30);
      float v32 = v29 * v18[1] * (float)v28 + 0.0;
      unint64_t v33 = vcvtas_u32_f32(v32);
      if (v26 < v31) {
        LODWORD(v31) = v14 - 1;
      }
      if (v28 < v33) {
        LODWORD(v33) = HIDWORD(v14) - 1;
      }
      int v34 = v31 * v8;
      int v35 = v33 * HIDWORD(v8);
      int v36 = &v25[48 * v24];
      int v37 = *((_DWORD *)v36 + 1);
      uint64_t v38 = *((void *)v36 + 3);
      if (v15 >= 0x18)
      {
        uint64_t v39 = 0;
        unsigned int v40 = v34 + v35;
        BOOL v41 = __CFADD__(v34 + v35, v15 - 1);
        BOOL v42 = v37 == 1 && v9 == 1;
        if (!v42 || v41 || (unint64_t)(v15 - 1) >> 32) {
          goto LABEL_53;
        }
        if (v38 - (v10 + 4 * (unint64_t)(v34 + v35)) >= 0x20)
        {
          float v46 = (_OWORD *)(v38 + 16);
          uint64_t v47 = v15 & 0xFFFFFFF8;
          do
          {
            float v48 = (_OWORD *)(v10 + 4 * v40);
            long long v49 = v48[1];
            *(v46 - 1) = *v48;
            *float v46 = v49;
            v46 += 2;
            v40 += 8;
            v47 -= 8;
          }
          while (v47);
          uint64_t v39 = v15 & 0xFFFFFFF8;
          if (v39 == v15) {
            goto LABEL_55;
          }
          goto LABEL_53;
        }
      }
      uint64_t v39 = 0;
LABEL_53:
      uint64_t v43 = v15 - v39;
      unsigned int v44 = v37 * v39;
      unsigned int v45 = v34 + v9 * v39 + v35;
      do
      {
        *(_DWORD *)(v38 + 4 * v44) = *(_DWORD *)(v10 + 4 * v45);
        v44 += v37;
        v45 += v9;
        --v43;
      }
      while (v43);
LABEL_55:
      v18 += 2;
      ++v24;
    }
    while (v18 != v19);
  }
  sub_21B8EDE3C((char ***)v53, (uint64_t)__p, (uint64_t)v52);
  *(_OWORD *)a5 = *(_OWORD *)v53;
  *(void *)(a5 + 16) = *(void *)&v53[16];
  *(_DWORD *)(a5 + 24) = 1;
  *(void *)(a5 + 32) = 64;
  *(_DWORD *)(a5 + 40) = 1;
  unint64_t v20 = (char *)__p;
  if (__p)
  {
    uint64_t v21 = v52;
    unint64_t v22 = __p;
    if (v52 != __p)
    {
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        if (v23) {
          free(v23);
        }
        *((void *)v21 - 3) = 0;
        v21 -= 48;
      }
      while (v21 != v20);
      unint64_t v22 = __p;
    }
    int v52 = v20;
    operator delete(v22);
  }
}

void sub_21B8EDE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8ED2C4((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B8EDE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_21B8EDE3C(char ***result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    long long v14 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 4);
    if (v5 >> 58) {
      sub_21B846300();
    }
    uint64_t v7 = a2;
    *(void *)&long long v15 = operator new(0xAAAAAAAAAAAAAAC0 * (v4 >> 4));
    *((void *)&v15 + 1) = v15;
    uint64_t v16 = v15 + (v5 << 6);
    unint64_t v17 = (char **)&v15;
    do
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v8 = (*(_DWORD *)(v7 + 4) * *(_DWORD *)v7);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(v7 + 24);
        uint64_t v11 = 4 * v8;
        uint64_t v12 = (*(void *)v7 >> 30) & 0x3FFFFFFFCLL;
        BOOL v13 = &v19;
        do
        {
          *(unsigned char *)BOOL v13 = (int)*(float *)(v10 + v9);
          BOOL v13 = (long long *)((char *)v13 + 1);
          v9 += v12;
        }
        while (v11 != v9);
      }
      v18[0] = v19;
      v18[1] = v20;
      void v18[2] = v21;
      v18[3] = v22;
      uint64_t result = sub_21B8F3980(&v17, v18);
      v7 += 48;
    }
    while (v7 != a3);
    long long v14 = v15;
    uint64_t v4 = v16;
  }
  *(_OWORD *)uint64_t v3 = v14;
  v3[2] = (char **)v4;
  return result;
}

void sub_21B8EDF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8EDF98(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B8F0BDC((uint64_t)__p);
  *(void *)a2 = 4;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x6567616D69;
  *(_WORD *)(a2 + 39) = 5;
  *(unsigned char *)(a2 + 63) = 0;
  *(void *)(a2 + 64) = 0x7365726F6373;
  *(unsigned char *)(a2 + 87) = 6;
  strcpy((char *)(a2 + 88), "local_descriptor_map");
  *(_WORD *)(a2 + 111) = 20;
  *(unsigned char *)(a2 + 135) = 0;
  sub_21B97E814((std::string *)(a2 + 136));
  sub_21B8F2178(a2 + 160, (uint64_t)__p);
  *(_DWORD *)(a2 + 200) = 1000593162;
  *(void *)(a2 + 208) = 8;
  *(unsigned char *)(a2 + 216) = 1;
  *(_DWORD *)(a2 + 220) = a1;
  *(_OWORD *)(a2 + 224) = *(_OWORD *)"\x1B\n1B";
  *(unsigned char *)(a2 + 240) = 1;
  *(void *)(a2 + 248) = 1;
  *(unsigned char *)(a2 + 256) = 1;
  *(unsigned char *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  sub_21B8E5D7C((int)__p, (void **)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
}

void sub_21B8EE0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 159) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v2 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v2 + 112));
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v2 + 88));
  if ((*(char *)(v2 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v2 + 64));
  if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v2 + 40));
  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
LABEL_7:
    sub_21B8F12E8((uint64_t)va);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v2 + 16));
  sub_21B8F12E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8EE18C(uint64_t a1, int a2)
{
  sub_21B8EDF98(a2, (uint64_t)v2);
  sub_21B8E67B4((uint64_t)&v3, (uint64_t)v2);
}

void sub_21B8EE28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B8E7600((uint64_t *)(v9 - 40));
  sub_21B8E5CA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B8EE2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B8EE2BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v41 = v5;
  sub_21B8EC63C(a1, a2, &v41);
  uint64_t v6 = v41;
  if (v41)
  {
    uint64_t v7 = *(void *)(v41 + 16);
    *(void *)(v41 + 16) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    MEMORY[0x21D495F30](v6, 0x60C40CE5A77A8);
  }
  *(void *)a1 = &unk_26CB9D410;
  uint64_t v9 = (void *)a2[22];
  if (v9)
  {
    unsigned int v10 = 0;
    LODWORD(v11) = 0;
    unint64_t v12 = 0;
    int v13 = 0;
    unint64_t v14 = a2[26];
    do
    {
      long long v15 = (_DWORD *)v9[2];
      unint64_t v16 = v15[1];
      unint64_t v17 = v15[2];
      unsigned int v18 = v16 * *v15 * v17 * v15[3] * v15[4];
      if (v10 < v18)
      {
        unint64_t v11 = v16 / v14;
        int v13 = v14 * v14 + 1;
        unsigned int v10 = v18;
        unint64_t v12 = v17 / v14;
      }
      uint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    int v13 = 0;
    unint64_t v12 = 0;
    LODWORD(v11) = 0;
  }
  unint64_t v19 = v11 | (v12 << 32);
  if (v11) {
    BOOL v20 = v12 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  BOOL v21 = v20 || v13 == 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v21) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v19;
  }
  if (v21)
  {
    int v13 = 0;
    unsigned int v24 = 0;
  }
  else
  {
    unsigned int v24 = HIDWORD(v23) * v23;
  }
  BOOL v25 = v23 != 0;
  if (HIDWORD(v23)) {
    uint64_t v26 = v23 << 32;
  }
  else {
    uint64_t v26 = 0;
  }
  if (HIDWORD(v23)) {
    BOOL v27 = v23 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  uint64_t v28 = v26 | v25;
  *(void *)(a1 + 368) = v23;
  *(_DWORD *)(a1 + 376) = v13;
  *(void *)(a1 + 380) = v26 | v25;
  *(_DWORD *)(a1 + 388) = v24;
  *(unsigned char *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 404) = 0;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (HIDWORD(v23)) {
    int v29 = v27;
  }
  else {
    int v29 = 1;
  }
  if (v29) {
    int v30 = 0;
  }
  else {
    int v30 = v13;
  }
  uint64_t v31 = 4 * v24;
  unint64_t v32 = v31 - 1;
  BOOL v20 = (v31 & (v31 - 1)) == 0;
  unint64_t v33 = 3;
  if (v20) {
    unint64_t v33 = v32;
  }
  unint64_t v34 = v33 | (v33 >> 1) | ((v33 | (v33 >> 1)) >> 2);
  unint64_t v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
  unint64_t v36 = v35 | (v35 >> 16) | ((v35 | (v35 >> 16)) >> 32);
  if (v36 + 1 > 8) {
    size_t v37 = v36 + 1;
  }
  else {
    size_t v37 = 8;
  }
  *(void *)(a1 + 408) = 4 * v30 * v24;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = v37;
  if (v30 * v24)
  {
    memptr = 0;
    int v38 = malloc_type_posix_memalign(&memptr, v37, 4 * v30 * v24, 0x1F88E90uLL);
    if (v38) {
      sub_21B97D9E4(v38, *(void *)(a1 + 424), 4 * v30 * v24);
    }
    *(void *)(a1 + 416) = memptr;
  }
  if (v29) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = v23;
  }
  *(void *)(a1 + 432) = v39;
  *(_DWORD *)(a1 + 440) = v30;
  *(void *)(a1 + 444) = 4 * v28;
  *(_DWORD *)(a1 + 452) = 4 * v24;
  return a1;
}

void sub_21B8EE564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B8EE578(_Unwind_Exception *a1)
{
  sub_21B8EC7F8(v1);
  _Unwind_Resume(a1);
}

void *sub_21B8EE58C(void *a1)
{
  *a1 = &unk_26CB9D410;
  uint64_t v2 = (void *)a1[52];
  if (v2) {
    free(v2);
  }
  a1[52] = 0;
  *a1 = &unk_26CB9D480;
  uint64_t v3 = (void *)a1[42];
  if (v3) {
    free(v3);
  }
  a1[42] = 0;
  uint64_t v4 = a1[36];
  a1[36] = 0;
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    MEMORY[0x21D495F30](v4, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_21B8EE6B4(void *a1)
{
  *a1 = &unk_26CB9D410;
  uint64_t v2 = (void *)a1[52];
  if (v2) {
    free(v2);
  }
  a1[52] = 0;
  *a1 = &unk_26CB9D480;
  uint64_t v3 = (void *)a1[42];
  if (v3) {
    free(v3);
  }
  a1[42] = 0;
  uint64_t v4 = a1[36];
  a1[36] = 0;
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    MEMORY[0x21D495F30](v4, 0x60C40CE5A77A8);
  }
  sub_21B8E5CA4((uint64_t)(a1 + 1));

  JUMPOUT(0x21D495F30);
}

void sub_21B8EE7FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_21B8565FC(*a3, (uint64_t)&v36);
  if (HIDWORD(*(void *)((char *)&v37 + 4))) {
    BOOL v7 = DWORD1(v37) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v8 = v7 || HIDWORD(v37) == 0;
  int v9 = v8;
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)((char *)&v37 + 4);
  }
  if (v8) {
    int v11 = 0;
  }
  else {
    int v11 = HIDWORD(v37);
  }
  v32[0] = v36;
  v32[1] = v10;
  int v33 = v11;
  uint64_t v34 = v39;
  int v35 = v40;
  if (v11 * v40 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_49;
  }
  if (v10) {
    int v12 = v9;
  }
  else {
    int v12 = 1;
  }
  BOOL v13 = v12 == 0;
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  if (v13) {
    int v15 = v11;
  }
  else {
    int v15 = 0;
  }
  int v16 = HIDWORD(v14) * v14;
  if (!v13) {
    int v16 = 0;
  }
  uint64_t v17 = HIDWORD(v14) ? v14 << 32 : 0;
  uint64_t v30 = *(void *)(a1 + 416);
  *(void *)uint64_t v31 = v14;
  *(_DWORD *)&v31[8] = v15;
  *(void *)&v31[12] = v17 | (v14 != 0);
  *(_DWORD *)&v31[20] = v16;
  if (v16 * v15 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_49;
  }
  if (*(_DWORD *)(a2 + 36)) {
    BOOL v18 = *(_DWORD *)(a2 + 32) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  unint64_t v19 = *(void *)(a2 + 32);
  if (v18) {
    unint64_t v19 = 0;
  }
  uint64_t v20 = 0x100000000;
  if (v19 > 0x100000000) {
    uint64_t v20 = v19;
  }
  uint64_t v28 = *(void *)(a1 + 336);
  *(void *)&long long v29 = v19;
  *((void *)&v29 + 1) = (v19 != 0) | (unint64_t)(v20 << 32);
  if (HIDWORD(v19) * v20 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
LABEL_49:
    abort();
  }
  float v21 = *(float *)(a1 + 208);
  sub_21B8F52DC(&v30, v32);
  uint64_t v36 = v30;
  long long v37 = *(_OWORD *)v31;
  uint64_t v38 = *(void *)&v31[16];
  unint64_t v41 = 8;
  sub_21B8F589C((uint64_t)&v28, &v36, &v41);
  uint64_t v36 = v28;
  long long v37 = v29;
  sub_21B8F5EC0(&v36, 1, &v26, v21);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  long long v22 = v26;
  int64_t v23 = (char *)v27 - (char *)v26;
  if (v27 != v26)
  {
    if (v23 < 0) {
      sub_21B846300();
    }
    unsigned int v24 = (char *)operator new((char *)v27 - (char *)v26);
    *(void *)a4 = v24;
    BOOL v25 = &v24[8 * (v23 >> 3)];
    *(void *)(a4 + 16) = v25;
    memcpy(v24, v22, v23);
    *(void *)(a4 + 8) = v25;
  }
  *(void *)(a4 + 24) = v28;
  *(_OWORD *)(a4 + 32) = v29;
  if (v22)
  {
    BOOL v27 = v22;
    operator delete(v22);
  }
}

void sub_21B8EEADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  BOOL v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
    uint64_t v14 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_21B8EEB18(uint64_t a1@<X0>, int32x2_t *a2@<X1>, void *a3@<X2>, float32x2_t **a4@<X3>, uint64_t a5@<X8>)
{
  sub_21B8565FC(*a3 + 120, (uint64_t)v161);
  uint64_t v8 = v163;
  int v9 = v164;
  uint64_t v10 = *(void *)v161;
  if (HIDWORD(*(void *)&v161[12])) {
    _ZF = *(_DWORD *)&v161[12] == 0;
  }
  else {
    _ZF = 1;
  }
  BOOL v12 = _ZF || *(_DWORD *)&v161[20] == 0;
  int v13 = v12;
  if (v12) {
    int32x2_t v14 = 0;
  }
  else {
    int32x2_t v14 = *(int32x2_t *)&v161[12];
  }
  if (v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(unsigned int *)&v161[20];
  }
  if (v15 * v164 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  int32x2_t v157 = v14;
  unint64_t v16 = 0x100000000;
  if (v13) {
    unint64_t v16 = 0;
  }
  if (*(unsigned char *)(a1 + 248))
  {
    unint64_t v17 = a4[1] - *a4;
    int v165 = 0;
    unsigned int v166 = v15;
    *(void *)uint64_t v161 = v16 | v15;
    v161[8] = 0;
    v161[12] = 0;
    int v167 = HIDWORD(v16);
    sub_21B8F359C((uint64_t)&v161[16], &v166, &v167, 1, (const float *)&v165, 1, v16 >> 30);
    sub_21B8F32AC((char **)&__p, v17, (uint64_t)v161);
    if (v162) {
      free(v162);
    }
    uint64_t v20 = *a4;
    float v21 = a4[1];
    if (*a4 == v21 || (v13 & 1) != 0)
    {
LABEL_25:
      sub_21B8EDE3C((char ***)v161, (uint64_t)__p, (uint64_t)v160);
      long long v22 = __p;
      *(_OWORD *)a5 = *(_OWORD *)v161;
      *(void *)(a5 + 16) = *(void *)&v161[16];
      *(_DWORD *)(a5 + 24) = 1;
      *(void *)(a5 + 32) = 64;
      *(_DWORD *)(a5 + 40) = 1;
      if (!v22) {
        return;
      }
      uint64_t v23 = (uint64_t)v160;
      unsigned int v24 = v22;
      if (v160 == v22) {
        goto LABEL_42;
      }
      do
      {
        BOOL v25 = *(void **)(v23 - 24);
        if (v25) {
          free(v25);
        }
        *(void *)(v23 - 24) = 0;
        v23 -= 48;
      }
      while ((void *)v23 != v22);
      goto LABEL_41;
    }
    uint64_t v31 = 0;
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v35 = vdivq_f64(_Q2, vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(a2[4], (int32x2_t)-1))));
    float64x2_t v36 = vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v157, (int32x2_t)-1)));
    *(float *)v18.i32 = (float)*(int *)(a1 + 240);
    *(float *)v19.i32 = (float)*(int *)(a1 + 244);
    long long v37 = (char *)__p;
    int v38 = v15 - 1;
    uint64_t v39 = v10 + 4 * v15;
    float32x4_t v40 = (float32x4_t)vdupq_lane_s32(v19, 0);
    float32x4_t v41 = (float32x4_t)vdupq_lane_s32(v18, 0);
    __asm { FMOV            V18.2S, #1.0 }
    while (1)
    {
      float32x2_t v43 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vmulq_f64(v35, vcvtq_f64_f32(*v20)), v36), (float64x2_t)0));
      float32x2_t v44 = vadd_f32(vrndm_f32(v43), _D18);
      int32x2_t v45 = vcgt_f32(v44, _D18);
      float v46 = (v45.i8[4] & 1) != 0 ? v44.f32[1] : 1.0;
      float v47 = (float)((float)v157.u32[1] + -1.0) >= v44.f32[1] ? v46 : (float)v157.u32[1] + -1.0;
      float v48 = v47 + -1.0;
      float v49 = (v45.i8[0] & 1) != 0 ? v44.f32[0] : 1.0;
      float v50 = (float)((float)v157.u32[0] + -1.0) >= v44.f32[0] ? v49 : (float)v157.u32[0] + -1.0;
      int v51 = (unint64_t)(float)(v50 + -1.0) * v8;
      int v52 = (unint64_t)v48 * HIDWORD(v8);
      int v53 = (unint64_t)v50 * v8;
      float v54 = (float)(v43.f32[0] - (float)(v50 + -1.0)) / (float)(v50 - (float)(v50 + -1.0));
      int v55 = (unint64_t)v47 * HIDWORD(v8);
      float v56 = (float)(v43.f32[1] - v48) / (float)(v47 - v48);
      int v57 = &v37[48 * v31];
      int v58 = *((_DWORD *)v57 + 1);
      unint64_t v59 = *((void *)v57 + 3);
      if (v15 < 0x10) {
        break;
      }
      uint64_t v60 = 0;
      BOOL v74 = __CFADD__(v51 + v52, v38);
      BOOL v75 = __CFADD__(v53 + v52, v38);
      BOOL v76 = __CFADD__(v51 + v55, v38);
      if (__CFADD__(v53 + v55, v38) || v76 || v75 || v58 != 1 || v9 != 1 || v74 || (unint64_t)(v15 - 1) >> 32) {
        goto LABEL_59;
      }
      uint64_t v60 = 0;
      unint64_t v77 = v59 + 4 * v15;
      uint64_t v78 = 4 * (v53 + v55);
      unint64_t v79 = v10 + v78;
      uint64_t v80 = 4 * (v51 + v55);
      unint64_t v81 = v10 + v80;
      unint64_t v82 = v39 + v80;
      uint64_t v83 = 4 * (v53 + v52);
      unint64_t v84 = v10 + v83;
      unint64_t v85 = v39 + v83;
      uint64_t v86 = 4 * (v51 + v52);
      _CF = v59 >= v39 + v78;
      unint64_t v87 = v10 + v86;
      unint64_t v88 = v39 + v86;
      _CF = _CF || v79 >= v77;
      BOOL v90 = !_CF;
      BOOL v91 = v59 >= v82 || v81 >= v77;
      BOOL v92 = !v91;
      BOOL v93 = v59 >= v85 || v84 >= v77;
      BOOL v94 = !v93;
      BOOL v95 = v59 >= v88 || v87 >= v77;
      BOOL v96 = !v95;
      if (v59 < a1 + 240 && a1 + 232 < v77) {
        goto LABEL_59;
      }
      if (v90) {
        goto LABEL_59;
      }
      if (v92) {
        goto LABEL_59;
      }
      if (v94) {
        goto LABEL_59;
      }
      if (v96) {
        goto LABEL_59;
      }
      long long v98 = (const float *)(a1 + 232);
      float32x4_t v99 = vld1q_dup_f32(v98);
      long long v100 = (const float *)(a1 + 236);
      float32x4_t v101 = vld1q_dup_f32(v100);
      int v102 = v53;
      int v103 = v51;
      uint64_t v104 = v15 & 0xFFFFFFFC;
      uint64_t v105 = (float32x4_t *)v59;
      do
      {
        float32x4_t v106 = *(float32x4_t *)(v10 + 4 * (v52 + v103));
        float32x4_t v107 = *(float32x4_t *)(v10 + 4 * (v55 + v103));
        float32x4_t v108 = vaddq_f32(v106, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + 4 * (v52 + v102)), v106), v54));
        float32x4_t v109 = vaddq_f32(v101, vmulq_f32(v99, vaddq_f32(v108, vmulq_n_f32(vsubq_f32(vaddq_f32(v107, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + 4 * (v55 + v102)), v107), v54)), v108), v56))));
        *v105++ = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v109, v40), (int8x16_t)v40, vbslq_s8((int8x16_t)vcgtq_f32(v109, v41), (int8x16_t)v109, (int8x16_t)v41))));
        v103 += 4;
        v102 += 4;
        v104 -= 4;
      }
      while (v104);
      uint64_t v60 = v15 & 0xFFFFFFFC;
      if (v60 != v15) {
        goto LABEL_59;
      }
LABEL_67:
      ++v20;
      ++v31;
      if (v20 == v21) {
        goto LABEL_25;
      }
    }
    uint64_t v60 = 0;
LABEL_59:
    uint64_t v61 = v15 - v60;
    unsigned int v62 = v58 * v60;
    int v63 = v53 + v55;
    int v64 = v53 + v52;
    int v65 = v51 + v55;
    int v66 = v51 + v52;
    int v67 = v9 * v60;
    do
    {
      float v68 = *(float *)(v10 + 4 * (v66 + v67));
      float v69 = *(float *)(v10 + 4 * (v65 + v67));
      float v70 = v68 + (float)(v54 * (float)(*(float *)(v10 + 4 * (v64 + v67)) - v68));
      float v71 = *(float *)(a1 + 236)
          + (float)(*(float *)(a1 + 232)
                  * (float)(v70
                          + (float)(v56
                                  * (float)((float)(v69
                                                  + (float)(v54
                                                          * (float)(*(float *)(v10 + 4 * (v63 + v67))
                                                                  - v69)))
                                          - v70))));
      if (v71 <= *(float *)v18.i32) {
        float v72 = *(float *)v18.i32;
      }
      else {
        float v72 = v71;
      }
      if (v71 <= *(float *)v19.i32) {
        float v73 = v72;
      }
      else {
        float v73 = *(float *)v19.i32;
      }
      *(float *)(v59 + 4 * v62) = (float)(int)v73;
      v62 += v58;
      v67 += v9;
      --v61;
    }
    while (v61);
    goto LABEL_67;
  }
  unint64_t v26 = a4[1] - *a4;
  int v165 = 0;
  unsigned int v166 = v15;
  *(void *)uint64_t v161 = v16 | v15;
  v161[8] = 0;
  v161[12] = 0;
  int v167 = HIDWORD(v16);
  sub_21B8F359C((uint64_t)&v161[16], &v166, &v167, 1, (const float *)&v165, 1, v16 >> 30);
  sub_21B8F32AC((char **)&__p, v26, (uint64_t)v161);
  if (v162) {
    free(v162);
  }
  BOOL v27 = *a4;
  uint64_t v28 = a4[1];
  if (*a4 != v28 && (v13 & 1) == 0)
  {
    uint64_t v110 = 0;
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v112 = vdivq_f64(_Q2, vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(a2[4], (int32x2_t)-1))));
    float64x2_t v113 = vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v14, (int32x2_t)-1)));
    int v114 = (char *)__p;
    int v115 = v15 - 1;
    __asm { FMOV            V6.2S, #1.0 }
    do
    {
      float32x2_t v117 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vmulq_f64(v112, vcvtq_f64_f32(*v27)), v113), (float64x2_t)0));
      float32x2_t v118 = vadd_f32(vrndm_f32(v117), _D6);
      int32x2_t v119 = vcgt_f32(v118, _D6);
      if (v119.i8[4]) {
        float v120 = v118.f32[1];
      }
      else {
        float v120 = 1.0;
      }
      if ((float)((float)v14.u32[1] + -1.0) >= v118.f32[1]) {
        float v121 = v120;
      }
      else {
        float v121 = (float)v14.u32[1] + -1.0;
      }
      float v122 = v121 + -1.0;
      if (v119.i8[0]) {
        float v123 = v118.f32[0];
      }
      else {
        float v123 = 1.0;
      }
      if ((float)((float)v14.u32[0] + -1.0) >= v118.f32[0]) {
        float v124 = v123;
      }
      else {
        float v124 = (float)v14.u32[0] + -1.0;
      }
      int v125 = (unint64_t)(float)(v124 + -1.0) * v8;
      int v126 = (unint64_t)v122 * HIDWORD(v8);
      int v127 = (unint64_t)v124 * v8;
      float v128 = (float)(v117.f32[0] - (float)(v124 + -1.0)) / (float)(v124 - (float)(v124 + -1.0));
      int v129 = (unint64_t)v121 * HIDWORD(v8);
      float v130 = (float)(v117.f32[1] - v122) / (float)(v121 - v122);
      uint64_t v131 = &v114[48 * v110];
      int v132 = *((_DWORD *)v131 + 1);
      unint64_t v133 = (float32x4_t *)*((void *)v131 + 3);
      if (v15 >= 0x14)
      {
        uint64_t v134 = 0;
        BOOL v135 = __CFADD__(v125 + v126, v115);
        BOOL v136 = __CFADD__(v127 + v126, v115);
        BOOL v137 = __CFADD__(v125 + v129, v115);
        if (__CFADD__(v127 + v129, v115)
          || v137
          || v136
          || v132 != 1
          || v9 != 1
          || v135
          || (unint64_t)(v15 - 1) >> 32)
        {
          goto LABEL_163;
        }
        if ((unint64_t)v133 - v10 + -4 * (v127 + v129) >= 0x10
          && (unint64_t)v133 - v10 + -4 * (v125 + v129) >= 0x10
          && (unint64_t)v133 - v10 + -4 * (v127 + v126) >= 0x10
          && (unint64_t)v133 - v10 + -4 * (v125 + v126) >= 0x10)
        {
          int v150 = v127;
          int v151 = v125;
          uint64_t v152 = v15 & 0xFFFFFFFC;
          unint64_t v153 = v133;
          do
          {
            float32x4_t v154 = *(float32x4_t *)(v10 + 4 * (v126 + v151));
            float32x4_t v155 = *(float32x4_t *)(v10 + 4 * (v129 + v151));
            float32x4_t v156 = vaddq_f32(v154, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + 4 * (v126 + v150)), v154), v128));
            *v153++ = vaddq_f32(v156, vmulq_n_f32(vsubq_f32(vaddq_f32(v155, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + 4 * (v129 + v150)), v155), v128)), v156), v130));
            v151 += 4;
            v150 += 4;
            v152 -= 4;
          }
          while (v152);
          uint64_t v134 = v15 & 0xFFFFFFFC;
          if (v134 == v15) {
            goto LABEL_165;
          }
          goto LABEL_163;
        }
      }
      uint64_t v134 = 0;
LABEL_163:
      uint64_t v141 = v15 - v134;
      int v142 = v132 * v134;
      int v143 = v127 + v129;
      int v144 = v127 + v126;
      int v145 = v125 + v129;
      int v146 = v125 + v126;
      int v147 = v9 * v134;
      do
      {
        float v148 = *(float *)(v10 + 4 * (v146 + v147));
        float v149 = v148 + (float)(v128 * (float)(*(float *)(v10 + 4 * (v144 + v147)) - v148));
        v133->f32[v142] = v149
                        + (float)(v130
                                * (float)((float)(*(float *)(v10 + 4 * (v145 + v147))
                                                + (float)(v128
                                                        * (float)(*(float *)(v10 + 4 * (v143 + v147))
                                                                - *(float *)(v10 + 4 * (v145 + v147)))))
                                        - v149));
        v142 += v132;
        v147 += v9;
        --v141;
      }
      while (v141);
LABEL_165:
      ++v27;
      ++v110;
    }
    while (v27 != v28);
  }
  sub_21B8EDE3C((char ***)v161, (uint64_t)__p, (uint64_t)v160);
  long long v22 = __p;
  *(_OWORD *)a5 = *(_OWORD *)v161;
  *(void *)(a5 + 16) = *(void *)&v161[16];
  *(_DWORD *)(a5 + 24) = 1;
  *(void *)(a5 + 32) = 64;
  *(_DWORD *)(a5 + 40) = 1;
  if (!v22) {
    return;
  }
  uint64_t v29 = (uint64_t)v160;
  unsigned int v24 = v22;
  if (v160 != v22)
  {
    do
    {
      uint64_t v30 = *(void **)(v29 - 24);
      if (v30) {
        free(v30);
      }
      *(void *)(v29 - 24) = 0;
      v29 -= 48;
    }
    while ((void *)v29 != v22);
LABEL_41:
    unsigned int v24 = __p;
  }
LABEL_42:
  uint64_t v160 = v22;
  operator delete(v24);
}

void sub_21B8EF45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21B8ED2C4((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B8EF470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a22) {
    free(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8EF4A8(uint64_t a1)
{
  sub_21B8471D4((uint64_t)&v3, (uint64_t *)(**(void **)(a1 + 288) + 8));
  uint64_t v1 = v3;
  sub_21B848B68((uint64_t)&v3);
  return v1;
}

BOOL sub_21B8EF4F8(void *a1, void *a2)
{
  uint64_t v3 = a1 + 21;
  int v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = (char *)operator new(0x14uLL);
  BOOL v12 = v5 + 20;
  int v13 = v5 + 20;
  *(_DWORD *)uint64_t v5 = 1;
  *(void *)(v5 + 4) = *a2;
  *((_DWORD *)v5 + 3) = 1;
  *((_DWORD *)v5 + 4) = v4;
  uint64_t v11 = v5;
  LOBYTE(__p) = 0;
  char v16 = 0;
  uint64_t v6 = sub_21B919A54(v3, (unint64_t)&v11);
  if (v16)
  {
    BOOL v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v15;
      int v9 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = __p;
      }
      uint64_t v15 = v7;
      operator delete(v9);
    }
  }
  if (v11)
  {
    BOOL v12 = v11;
    operator delete(v11);
  }
  return v6 != 0;
}

void sub_21B8EF5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E7A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8EF610(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21B8EF914(&v31, a1, a2);
  (*(void (**)(void **__return_ptr, void *, uint64_t, char **))(*a1 + 80))(&v28, a1, a2, &v31);
  sub_21B8EFF7C((char ***)__p, (uint64_t)v28, v29, (uint64_t)&v30);
  (*(void (**)(void *__return_ptr, void *, uint64_t, char **, void **))(*a1 + 88))(v23, a1, a2, &v31, &v28);
  sub_21B8F00BC((char **)&v21, (uint64_t)__p);
  uint64_t v6 = v22;
  long long v7 = v21;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v17 = 0;
  __n128 v16 = 0uLL;
  unsigned int v18 = 0;
  *(_OWORD *)a3 = v7;
  *(void *)(a3 + 16) = v6;
  *(unsigned char *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 48) = -1;
  unsigned int v8 = v24;
  if (v24 != -1)
  {
    (*(&off_26CB9E938 + v24))((uint64_t)&v33, (__n128 *)(a3 + 24), (__n128 *)v23);
    *(_DWORD *)(a3 + 48) = v8;
  }
  uint64_t v9 = v25;
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = v9;
  *(_DWORD *)(a3 + 64) = v26;
  *(_DWORD *)(a3 + 96) = -1;
  __n128 v10 = off_26CB9E938((uint64_t)&v33, (__n128 *)(a3 + 72), &v16);
  *(_DWORD *)(a3 + 96) = 0;
  uint64_t v11 = v18;
  *(void *)(a3 + 104) = v19;
  *(_DWORD *)(a3 + 112) = v20;
  if (v11 != -1) {
    ((void (*)(char *, __n128 *, __n128))off_26CB9D628[v11])(&v33, &v16, v10);
  }
  if (v24 != -1) {
    ((void (*)(__n128 *, void *))off_26CB9D628[v24])(&v16, v23);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v28)
  {
    uint64_t v29 = (uint64_t)v28;
    operator delete(v28);
  }
  BOOL v12 = v31;
  if (v31)
  {
    int v13 = v32;
    int32x2_t v14 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*(v13 - 8))
        {
          uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 - 6);
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v13 -= 120;
      }
      while (v13 != v12);
      int32x2_t v14 = v31;
    }
    unint64_t v32 = v12;
    operator delete(v14);
  }
}

void sub_21B8EF894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  sub_21B863104((uint64_t)&a18);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
    BOOL v27 = *(void **)(v25 - 128);
    if (!v27)
    {
LABEL_3:
      sub_21B840244((void **)(v25 - 80));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    BOOL v27 = *(void **)(v25 - 128);
    if (!v27) {
      goto LABEL_3;
    }
  }
  *(void *)(v25 - 120) = v27;
  operator delete(v27);
  sub_21B840244((void **)(v25 - 80));
  _Unwind_Resume(a1);
}

void sub_21B8EF900(_Unwind_Exception *a1)
{
  sub_21B840244((void **)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_21B8EF914(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2 + 21;
  int v7 = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
  unsigned int v8 = (char *)operator new(0x14uLL);
  *(void *)&long long v33 = v8 + 20;
  *((void *)&v33 + 1) = v8 + 20;
  *(_DWORD *)unsigned int v8 = 1;
  *(void *)(v8 + 4) = *(void *)(a3 + 32);
  *((_DWORD *)v8 + 3) = 1;
  *((_DWORD *)v8 + 4) = v7;
  unint64_t v32 = v8;
  LOBYTE(__p) = 0;
  char v37 = 0;
  uint64_t v9 = sub_21B919A54(v6, (unint64_t)&v32);
  if (!v9) {
    sub_21B846070("unordered_map::at: key not found");
  }
  if (*((char *)v9 + 95) < 0)
  {
    sub_21B846188(&__dst, (void *)v9[9], v9[10]);
  }
  else
  {
    long long __dst = *(_OWORD *)(v9 + 9);
    float32x2_t v43 = (void *)v9[11];
  }
  if (v37)
  {
    __n128 v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = (void **)v35;
      BOOL v12 = __p;
      if (v35 != __p)
      {
        do
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete(*(v11 - 3));
          }
          v11 -= 3;
        }
        while (v11 != v10);
        BOOL v12 = __p;
      }
      float64x2_t v35 = v10;
      operator delete(v12);
    }
  }
  if (v32)
  {
    *(void *)&long long v33 = v32;
    operator delete(v32);
  }
  uint64_t v13 = a2[36];
  unint64_t v32 = &unk_26CB9EF00;
  if (SHIBYTE(v43) < 0)
  {
    sub_21B846188(&v33, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v33 = __dst;
    long long __p = v43;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v13 + 16) + 48))(&v39);
  unint64_t v32 = &unk_26CB9EF00;
  if (SHIBYTE(__p) < 0)
  {
    operator delete((void *)v33);
    if (!v40) {
      goto LABEL_24;
    }
  }
  else if (!v40)
  {
    goto LABEL_24;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 563, (uint64_t)"ret_config == kml::MLResultCode::NoError", 40, (uint64_t)"Unable to set model configuration", 33, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_24:
  uint64_t v14 = a2[36];
  v30[0] = &unk_26CB954E0;
  sub_21B8F2D38(a3, (uint64_t)&v30[1]);
  sub_21B93AB48(*(void *)(v14 + 16), (uint64_t)v30, 0, 0, (uint64_t)&v32);
  uint64_t v15 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if ((_BYTE)v33)
  {
    sub_21B8E84B4((uint64_t *)&v29, "Error:");
    int v22 = *(char *)(*((void *)&v33 + 1) + 23);
    if (v22 >= 0) {
      __n128 v23 = (const std::string::value_type *)*((void *)&v33 + 1);
    }
    else {
      __n128 v23 = (const std::string::value_type *)**((void **)&v33 + 1);
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(*((void *)&v33 + 1) + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(*((void *)&v33 + 1) + 8);
    }
    uint64_t v25 = std::string::append(&v29, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    uint64_t v31 = (std::__shared_weak_count *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v30 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31) >= 0) {
      BOOL v27 = v30;
    }
    else {
      BOOL v27 = (void **)v30[0];
    }
    if (SHIBYTE(v31) >= 0) {
      uint64_t v28 = HIBYTE(v31);
    }
    else {
      uint64_t v28 = (uint64_t)v30[1];
    }
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 566, (uint64_t)&unk_21B997215, 0, (uint64_t)v27, v28, (void (*)(void **))sub_21B984AC4);
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    goto LABEL_69;
  }
  if (v38) {
    goto LABEL_31;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModel.cpp", 568, (uint64_t)"ret.outputs.has_value()", 23, (uint64_t)"No error detected but output empty.", 35, (void (*)(void **))sub_21B984AC4))
  {
LABEL_69:
    abort();
  }
  if (!v38) {
    sub_21B8446A8();
  }
LABEL_31:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_21B8F1860(a1, (uint64_t)v35, (uint64_t)v36, 0xEEEEEEEEEEEEEEEFLL * ((v36 - (unsigned char *)v35) >> 3));
  if (v38)
  {
    __n128 v16 = (char *)v35;
    if (v35)
    {
      uint64_t v17 = v36;
      unsigned int v18 = v35;
      if (v36 != v35)
      {
        do
        {
          if (*(v17 - 8))
          {
            uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 - 6);
            if (v19)
            {
              if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
          }
          v17 -= 120;
        }
        while (v17 != v16);
        unsigned int v18 = v35;
      }
      float64x2_t v36 = v16;
      operator delete(v18);
    }
  }
  unint64_t v32 = &unk_26CB95650;
  int v20 = (std::__shared_weak_count *)__p;
  if (__p && !atomic_fetch_add((atomic_ullong *volatile)__p + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v39 = &unk_26CB95650;
  long long v21 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (SHIBYTE(v43) < 0) {
LABEL_48:
  }
    operator delete((void *)__dst);
}

void sub_21B8EFEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_21B840310((uint64_t)&a27);
  sub_21B83D090((void *)(v33 - 128));
  if (*(char *)(v33 - 73) < 0)
  {
    operator delete(*(void **)(v33 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B8EFF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_21B8E7A28((uint64_t)va);
  _Unwind_Resume(a1);
}

char ***sub_21B8EFF7C(char ***result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = result;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v5 = a3 - a2;
  if (a3 == a2)
  {
    long long v14 = 0uLL;
  }
  else
  {
    if ((unint64_t)v5 >= 0x6666666666666661) {
      sub_21B862A00();
    }
    uint64_t v8 = a2;
    uint64_t v9 = v5 >> 3;
    *(void *)&long long v15 = operator new(20 * (v5 >> 3));
    *((void *)&v15 + 1) = v15;
    uint64_t v16 = v15 + 20 * v9;
    uint64_t v19 = (char **)&v15;
    do
    {
      float v10 = *(float *)(v8 + 4);
      LODWORD(v17) = *(_DWORD *)v8;
      *((float *)&v17 + 1) = v10;
      double v11 = v10 + 0.5;
      int v12 = *(_DWORD *)(a4 + 20);
      int v13 = *(_DWORD *)(a4 + 16) * (unint64_t)(*(float *)&v17 + 0.5);
      *((void *)&v17 + 1) = 0x3F80000000000000;
      int v18 = *(_DWORD *)(*(void *)a4 + 4 * (v13 + v12 * (unint64_t)v11));
      uint64_t result = sub_21B862A18(&v19, &v17);
      v8 += 8;
    }
    while (v8 != a3);
    long long v14 = v15;
    uint64_t v5 = v16;
  }
  *(_OWORD *)int v4 = v14;
  v4[2] = (char **)v5;
  return result;
}

void sub_21B8F009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8F00BC(char **a1, uint64_t a2)
{
  int v4 = *(char **)a2;
  uint64_t v5 = *(char **)(a2 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-*(void *)a2] >> 2) > 0x1000)
  {
    uint64_t v6 = v4 + 81920;
    while (v5 != v6)
    {
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2);
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        float32x2_t v44 = v4 + 20;
        int32x2_t v45 = v5 - 20;
        float v46 = *((float *)v4 + 9);
        float v47 = *((float *)v5 - 1);
        if (v46 <= *((float *)v4 + 4))
        {
          if (v47 > v46)
          {
            long long v56 = *(_OWORD *)v44;
            int v89 = *((_DWORD *)v4 + 9);
            int v57 = *((_DWORD *)v5 - 1);
            *(_OWORD *)float32x2_t v44 = *(_OWORD *)v45;
            *((_DWORD *)v4 + 9) = v57;
            *((_DWORD *)v5 - 1) = v89;
            *(_OWORD *)int32x2_t v45 = v56;
            if (*((float *)v4 + 9) > *((float *)v4 + 4))
            {
              int v90 = *((_DWORD *)v4 + 4);
              long long v74 = *(_OWORD *)v4;
              *(_OWORD *)int v4 = *(_OWORD *)v44;
              *((_DWORD *)v4 + 4) = *((_DWORD *)v4 + 9);
              *(_OWORD *)float32x2_t v44 = v74;
              *((_DWORD *)v4 + 9) = v90;
            }
          }
        }
        else
        {
          if (v47 <= v46)
          {
            int v91 = *((_DWORD *)v4 + 4);
            long long v75 = *(_OWORD *)v4;
            *(_OWORD *)int v4 = *(_OWORD *)v44;
            *((_DWORD *)v4 + 4) = *((_DWORD *)v4 + 9);
            *(_OWORD *)float32x2_t v44 = v75;
            *((_DWORD *)v4 + 9) = v91;
            if (*((float *)v5 - 1) <= *((float *)v4 + 9)) {
              break;
            }
            long long v49 = *(_OWORD *)v44;
            int v50 = *((_DWORD *)v4 + 9);
            int v58 = *((_DWORD *)v5 - 1);
            *(_OWORD *)float32x2_t v44 = *(_OWORD *)v45;
            *((_DWORD *)v44 + 4) = v58;
          }
          else
          {
            int v86 = *((_DWORD *)v4 + 4);
            long long v71 = *(_OWORD *)v4;
            long long v48 = *(_OWORD *)v45;
            *((_DWORD *)v4 + 4) = *((_DWORD *)v5 - 1);
            *(_OWORD *)int v4 = v48;
            long long v49 = v71;
            int v50 = v86;
          }
          *((_DWORD *)v45 + 4) = v50;
          *(_OWORD *)int32x2_t v45 = v49;
        }
        break;
      }
      if (v7 == 2)
      {
        if (*((float *)v5 - 1) > *((float *)v4 + 4))
        {
          int v87 = *((_DWORD *)v4 + 4);
          long long v72 = *(_OWORD *)v4;
          long long v51 = *(_OWORD *)(v5 - 20);
          *((_DWORD *)v4 + 4) = *((_DWORD *)v5 - 1);
          *(_OWORD *)int v4 = v51;
          *((_DWORD *)v5 - 1) = v87;
          *(_OWORD *)(v5 - 20) = v72;
        }
        break;
      }
      if (v5 - v4 <= 159)
      {
        while (v4 != v5 - 20)
        {
          int v52 = v4;
          v4 += 20;
          if (v52 != v5 && v4 != v5)
          {
            int v53 = v4;
            float v54 = v52;
            do
            {
              if (*((float *)v53 + 4) > *((float *)v54 + 4)) {
                float v54 = v53;
              }
              v53 += 20;
            }
            while (v53 != v5);
            if (v54 != v52)
            {
              int v88 = *((_DWORD *)v52 + 4);
              long long v73 = *(_OWORD *)v52;
              long long v55 = *(_OWORD *)v54;
              *((_DWORD *)v52 + 4) = *((_DWORD *)v54 + 4);
              *(_OWORD *)int v52 = v55;
              *((_DWORD *)v54 + 4) = v88;
              *(_OWORD *)float v54 = v73;
            }
          }
        }
        break;
      }
      uint64_t v8 = &v4[20 * (v7 >> 1)];
      uint64_t v9 = v5 - 20;
      float v10 = *((float *)v8 + 4);
      float v11 = *((float *)v5 - 1);
      if (v10 <= *((float *)v4 + 4))
      {
        if (v11 <= v10)
        {
          int v13 = 0;
          float v14 = *((float *)v4 + 4);
          float v15 = *((float *)v8 + 4);
          if (v14 <= v15) {
            goto LABEL_28;
          }
          goto LABEL_10;
        }
        int v78 = *((_DWORD *)v8 + 4);
        long long v63 = *(_OWORD *)v8;
        long long v24 = *(_OWORD *)v9;
        *((_DWORD *)v8 + 4) = *((_DWORD *)v5 - 1);
        *(_OWORD *)uint64_t v8 = v24;
        *((_DWORD *)v5 - 1) = v78;
        *(_OWORD *)uint64_t v9 = v63;
        if (*((float *)v8 + 4) > *((float *)v4 + 4))
        {
          int v79 = *((_DWORD *)v4 + 4);
          long long v64 = *(_OWORD *)v4;
          long long v25 = *(_OWORD *)v8;
          *((_DWORD *)v4 + 4) = *((_DWORD *)v8 + 4);
          *(_OWORD *)int v4 = v25;
          *((_DWORD *)v8 + 4) = v79;
          *(_OWORD *)uint64_t v8 = v64;
          int v13 = 2;
          float v14 = *((float *)v4 + 4);
          float v15 = *((float *)v8 + 4);
          if (v14 <= v15) {
            goto LABEL_28;
          }
          goto LABEL_10;
        }
      }
      else
      {
        if (v11 > v10)
        {
          int v76 = *((_DWORD *)v4 + 4);
          long long v61 = *(_OWORD *)v4;
          long long v12 = *(_OWORD *)v9;
          *((_DWORD *)v4 + 4) = *((_DWORD *)v5 - 1);
          *(_OWORD *)int v4 = v12;
          *((_DWORD *)v5 - 1) = v76;
          *(_OWORD *)uint64_t v9 = v61;
          int v13 = 1;
          float v14 = *((float *)v4 + 4);
          float v15 = *((float *)v8 + 4);
          if (v14 <= v15) {
            goto LABEL_28;
          }
          goto LABEL_10;
        }
        int v80 = *((_DWORD *)v4 + 4);
        long long v65 = *(_OWORD *)v4;
        long long v26 = *(_OWORD *)v8;
        *((_DWORD *)v4 + 4) = *((_DWORD *)v8 + 4);
        *(_OWORD *)int v4 = v26;
        *((_DWORD *)v8 + 4) = v80;
        *(_OWORD *)uint64_t v8 = v65;
        if (*((float *)v5 - 1) > *((float *)v8 + 4))
        {
          int v81 = *((_DWORD *)v8 + 4);
          long long v66 = *(_OWORD *)v8;
          long long v27 = *(_OWORD *)v9;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 - 1);
          *(_OWORD *)uint64_t v8 = v27;
          *((_DWORD *)v5 - 1) = v81;
          *(_OWORD *)uint64_t v9 = v66;
          int v13 = 2;
          float v14 = *((float *)v4 + 4);
          float v15 = *((float *)v8 + 4);
          if (v14 <= v15) {
            goto LABEL_28;
          }
          goto LABEL_10;
        }
      }
      int v13 = 1;
      float v14 = *((float *)v4 + 4);
      float v15 = *((float *)v8 + 4);
      if (v14 <= v15)
      {
LABEL_28:
        uint64_t v28 = v5 - 20;
        while (1)
        {
          unint64_t v16 = (unint64_t)(v28 - 20);
          if (v28 - 20 == v4) {
            break;
          }
          float v29 = *((float *)v28 - 1);
          v28 -= 20;
          if (v29 > v15)
          {
            int v82 = *((_DWORD *)v4 + 4);
            long long v67 = *(_OWORD *)v4;
            long long v30 = *(_OWORD *)v16;
            *((_DWORD *)v4 + 4) = *(_DWORD *)(v16 + 16);
            *(_OWORD *)int v4 = v30;
            *(_DWORD *)(v16 + 16) = v82;
            *(_OWORD *)unint64_t v16 = v67;
            ++v13;
            long long v17 = v4 + 20;
            if ((unint64_t)(v4 + 20) < v16) {
              goto LABEL_11;
            }
            goto LABEL_32;
          }
        }
        float64x2_t v35 = v4 + 20;
        if (v14 <= *((float *)v5 - 1))
        {
          if (v35 == v9) {
            break;
          }
          while (v14 <= *((float *)v35 + 4))
          {
            v35 += 20;
            if (v35 == v9) {
              goto LABEL_90;
            }
          }
          int v84 = *((_DWORD *)v35 + 4);
          long long v69 = *(_OWORD *)v35;
          long long v39 = *(_OWORD *)v9;
          *((_DWORD *)v35 + 4) = *((_DWORD *)v5 - 1);
          *(_OWORD *)float64x2_t v35 = v39;
          v35 += 20;
          *((_DWORD *)v5 - 1) = v84;
          *(_OWORD *)uint64_t v9 = v69;
        }
        if (v35 == v9) {
          break;
        }
        while (1)
        {
          float v41 = *((float *)v4 + 4);
          unint64_t v32 = v35 - 20;
          do
          {
            float v42 = *((float *)v32 + 9);
            v32 += 20;
          }
          while (v41 <= v42);
          float64x2_t v35 = v32 + 20;
          do
          {
            float v43 = *((float *)v9 - 1);
            v9 -= 20;
          }
          while (v41 > v43);
          if (v32 >= v9) {
            break;
          }
          int v85 = *((_DWORD *)v32 + 4);
          long long v70 = *(_OWORD *)v32;
          long long v40 = *(_OWORD *)v9;
          *((_DWORD *)v32 + 4) = *((_DWORD *)v9 + 4);
          *(_OWORD *)unint64_t v32 = v40;
          *((_DWORD *)v9 + 4) = v85;
          *(_OWORD *)uint64_t v9 = v70;
        }
        if (v32 > v6) {
          break;
        }
        goto LABEL_66;
      }
LABEL_10:
      unint64_t v16 = (unint64_t)(v5 - 20);
      long long v17 = v4 + 20;
      if (v4 + 20 >= v5 - 20)
      {
LABEL_32:
        unint64_t v20 = (unint64_t)v17;
      }
      else
      {
LABEL_11:
        int v18 = v17;
        while (1)
        {
          float v19 = *((float *)v8 + 4);
          unint64_t v20 = (unint64_t)(v18 - 20);
          do
          {
            float v21 = *(float *)(v20 + 36);
            v20 += 20;
          }
          while (v21 > v19);
          int v18 = (char *)(v20 + 20);
          do
          {
            float v22 = *(float *)(v16 - 4);
            v16 -= 20;
          }
          while (v22 <= v19);
          if (v20 >= v16) {
            break;
          }
          int v77 = *(_DWORD *)(v20 + 16);
          long long v62 = *(_OWORD *)v20;
          long long v23 = *(_OWORD *)v16;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v16 + 16);
          *(_OWORD *)unint64_t v20 = v23;
          *(_DWORD *)(v16 + 16) = v77;
          *(_OWORD *)unint64_t v16 = v62;
          ++v13;
          if ((char *)v20 == v8) {
            uint64_t v8 = (char *)v16;
          }
        }
      }
      if ((char *)v20 != v8 && *((float *)v8 + 4) > *(float *)(v20 + 16))
      {
        int v83 = *(_DWORD *)(v20 + 16);
        long long v68 = *(_OWORD *)v20;
        long long v31 = *(_OWORD *)v8;
        *(_DWORD *)(v20 + 16) = *((_DWORD *)v8 + 4);
        *(_OWORD *)unint64_t v20 = v31;
        *((_DWORD *)v8 + 4) = v83;
        *(_OWORD *)uint64_t v8 = v68;
        ++v13;
      }
      if ((char *)v20 == v6) {
        break;
      }
      if (!v13)
      {
        if (v20 <= (unint64_t)v6)
        {
          unint64_t v36 = v20 + 20;
          while ((char *)v36 != v5)
          {
            float v37 = *(float *)(v36 + 16);
            float v38 = *(float *)(v36 - 4);
            v36 += 20;
            if (v37 > v38) {
              goto LABEL_38;
            }
          }
        }
        else
        {
          while (v17 != (char *)v20)
          {
            float v33 = *((float *)v17 + 4);
            float v34 = *((float *)v17 - 1);
            v17 += 20;
            if (v33 > v34) {
              goto LABEL_38;
            }
          }
        }
        break;
      }
LABEL_38:
      if (v20 <= (unint64_t)v6)
      {
        unint64_t v32 = (char *)(v20 + 20);
      }
      else
      {
        uint64_t v5 = (char *)v20;
        unint64_t v32 = v4;
      }
LABEL_66:
      int v4 = v32;
    }
LABEL_90:
    int v4 = *(char **)a2;
    uint64_t v5 = *(char **)(a2 + 8);
    uint64_t v59 = (uint64_t)&v5[-*(void *)a2];
    unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * (v59 >> 2);
    if (v60 > 0xFFF)
    {
      if (v59 != 81920)
      {
        uint64_t v5 = v4 + 81920;
        *(void *)(a2 + 8) = v4 + 81920;
      }
    }
    else
    {
      sub_21B8E25D0((char **)a2, 4096 - v60);
      int v4 = *(char **)a2;
      uint64_t v5 = *(char **)(a2 + 8);
    }
  }
  *a1 = v4;
  a1[1] = v5;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_21B8F07E0()
{
}

void sub_21B8F0828(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21B8EF914(&v16, a1, a2);
  (*(void (**)(void **__return_ptr, void *, uint64_t, char **))(*a1 + 80))(&v13, a1, a2, &v16);
  sub_21B8EFF7C((char ***)__p, (uint64_t)v13, (uint64_t)v14, (uint64_t)&v15);
  sub_21B8F00BC((char **)&v10, (uint64_t)__p);
  *(_OWORD *)a3 = v10;
  *(void *)(a3 + 16) = v11;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13)
  {
    float v14 = v13;
    operator delete(v13);
  }
  uint64_t v6 = v16;
  if (v16)
  {
    unint64_t v7 = v17;
    uint64_t v8 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*(v7 - 8))
        {
          uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 6);
          if (v9)
          {
            if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
        v7 -= 120;
      }
      while (v7 != v6);
      uint64_t v8 = v16;
    }
    long long v17 = v6;
    operator delete(v8);
  }
}

void sub_21B8F097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    float v19 = a16;
    if (!a16)
    {
LABEL_3:
      sub_21B840244((void **)(v17 - 56));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    float v19 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  sub_21B840244((void **)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_21B8F09D8(_Unwind_Exception *a1)
{
  sub_21B840244((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_21B8F09EC(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  sub_21B8EF914(&v17, a1, a2);
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  if (a3)
  {
    if (a3 >> 61) {
      sub_21B846300();
    }
    *(void *)&long long v19 = operator new(8 * a3);
    *((void *)&v19 + 1) = v19;
    uint64_t v20 = v19 + 8 * a3;
    float v22 = (void **)&v19;
    uint64_t v8 = 20 * a3;
    do
    {
      uint64_t v21 = *a4;
      sub_21B8F2BC0(&v22, &v21);
      a4 = (uint64_t *)((char *)a4 + 20);
      v8 -= 20;
    }
    while (v8);
    long long v9 = v19;
    uint64_t v10 = v20;
  }
  else
  {
    uint64_t v10 = 0;
    long long v9 = 0uLL;
  }
  *(_OWORD *)long long __p = v9;
  uint64_t v16 = v10;
  (*(void (**)(void *, uint64_t, void **, void **))(*a1 + 88))(a1, a2, &v17, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v11 = (char *)v17;
  if (v17)
  {
    long long v12 = v18;
    int v13 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*(v12 - 8))
        {
          float v14 = (std::__shared_weak_count *)*((void *)v12 - 6);
          if (v14)
          {
            if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        v12 -= 120;
      }
      while (v12 != v11);
      int v13 = v17;
    }
    int v18 = v11;
    operator delete(v13);
  }
}

void sub_21B8F0B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21B840244(&a12);
  _Unwind_Resume(a1);
}

void sub_21B8F0BDC(uint64_t a1)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  char v33 = 10;
  strcpy((char *)&v32, "lf-480x640");
  uint64_t v2 = operator new(0x14uLL);
  float64x2_t v35 = v2 + 5;
  unint64_t v36 = (char *)(v2 + 5);
  *(_OWORD *)uint64_t v2 = xmmword_21B9AE8E0;
  v2[4] = 1;
  float v34 = v2;
  LOBYTE(v37) = 0;
  char v39 = 0;
  char v41 = 10;
  strcpy((char *)v40, "lf-640x480");
  uint64_t v3 = operator new(0x14uLL);
  float v43 = v3 + 5;
  float32x2_t v44 = (char *)(v3 + 5);
  *(_OWORD *)uint64_t v3 = xmmword_21B9AE830;
  v3[4] = 1;
  float v42 = v3;
  LOBYTE(v45) = 0;
  char v47 = 0;
  char v49 = 10;
  strcpy((char *)v48, "lf-320x320");
  int v4 = operator new(0x14uLL);
  long long v51 = v4 + 5;
  int v52 = (char *)(v4 + 5);
  *(_OWORD *)int v4 = xmmword_21B9AE8B0;
  v4[4] = 1;
  int v50 = v4;
  LOBYTE(v53) = 0;
  char v55 = 0;
  char v57 = 10;
  strcpy((char *)v56, "lf-640x640");
  uint64_t v5 = operator new(0x14uLL);
  uint64_t v59 = v5 + 5;
  unint64_t v60 = (char *)(v5 + 5);
  *(_OWORD *)uint64_t v5 = xmmword_21B9AE8C0;
  v5[4] = 1;
  int v58 = v5;
  LOBYTE(v61) = 0;
  char v63 = 0;
  HIBYTE(v64[2]) = 19;
  strcpy((char *)v64, "lf-big-test-512x384");
  uint64_t v6 = operator new(0x14uLL);
  long long v66 = v6 + 5;
  long long v67 = (char *)(v6 + 5);
  *(_OWORD *)uint64_t v6 = xmmword_21B9AE8F0;
  v6[4] = 1;
  long long v65 = v6;
  LOBYTE(v68) = 0;
  char v70 = 0;
  char v72 = 13;
  strcpy((char *)v71, "lf-test-32x32");
  unint64_t v7 = operator new(0x14uLL);
  long long v75 = (char *)(v7 + 5);
  *(_OWORD *)unint64_t v7 = xmmword_21B9AE900;
  v7[4] = 1;
  long long v73 = v7;
  long long v74 = v7 + 5;
  LOBYTE(v76) = 0;
  char v78 = 0;
  char v80 = 13;
  strcpy((char *)v79, "lf-test-64x32");
  uint64_t v8 = operator new(0x14uLL);
  int v83 = (char *)(v8 + 5);
  *(_OWORD *)uint64_t v8 = xmmword_21B9AE910;
  v8[4] = 1;
  int v81 = v8;
  int v82 = v8 + 5;
  LOBYTE(__p) = 0;
  char v86 = 0;
  sub_21B914D3C(&v32, 7uLL, (uint64_t)v31);
  if (!v31[120])
  {
    uint64_t v30 = sub_21B8F210C((uint64_t)v31);
    sub_21B8F2168(v30);
  }
  sub_21B8F2178(a1, (uint64_t)v31);
  sub_21B8F2B10((uint64_t)v31);
  if (v86)
  {
    long long v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v85;
      uint64_t v11 = __p;
      if (v85 != __p)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      int v85 = v9;
      operator delete(v11);
    }
  }
  if (v81)
  {
    int v82 = v81;
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79[0]);
  }
  if (v78)
  {
    long long v12 = (void **)v76;
    if (v76)
    {
      int v13 = v77;
      float v14 = v76;
      if (v77 != v76)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v12);
        float v14 = v76;
      }
      int v77 = v12;
      operator delete(v14);
    }
  }
  if (v73)
  {
    long long v74 = v73;
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (v70)
  {
    uint64_t v15 = (void **)v68;
    if (v68)
    {
      uint64_t v16 = v69;
      uint64_t v17 = v68;
      if (v69 != v68)
      {
        do
        {
          if (*((char *)v16 - 1) < 0) {
            operator delete(*(v16 - 3));
          }
          v16 -= 3;
        }
        while (v16 != v15);
        uint64_t v17 = v68;
      }
      long long v69 = v15;
      operator delete(v17);
    }
  }
  if (v65)
  {
    long long v66 = v65;
    operator delete(v65);
  }
  if (SHIBYTE(v64[2]) < 0) {
    operator delete(v64[0]);
  }
  if (v63)
  {
    int v18 = (void **)v61;
    if (v61)
    {
      long long v19 = v62;
      uint64_t v20 = v61;
      if (v62 != v61)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 3;
        }
        while (v19 != v18);
        uint64_t v20 = v61;
      }
      long long v62 = v18;
      operator delete(v20);
    }
  }
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  if (v55)
  {
    uint64_t v21 = (void **)v53;
    if (v53)
    {
      float v22 = v54;
      long long v23 = v53;
      if (v54 != v53)
      {
        do
        {
          if (*((char *)v22 - 1) < 0) {
            operator delete(*(v22 - 3));
          }
          v22 -= 3;
        }
        while (v22 != v21);
        long long v23 = v53;
      }
      float v54 = v21;
      operator delete(v23);
    }
  }
  if (v50)
  {
    long long v51 = v50;
    operator delete(v50);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v47)
  {
    long long v24 = (void **)v45;
    if (v45)
    {
      long long v25 = v46;
      long long v26 = v45;
      if (v46 != v45)
      {
        do
        {
          if (*((char *)v25 - 1) < 0) {
            operator delete(*(v25 - 3));
          }
          v25 -= 3;
        }
        while (v25 != v24);
        long long v26 = v45;
      }
      float v46 = v24;
      operator delete(v26);
    }
  }
  if (v42)
  {
    float v43 = v42;
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v39)
  {
    long long v27 = (void **)v37;
    if (v37)
    {
      uint64_t v28 = v38;
      float v29 = v37;
      if (v38 != v37)
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        float v29 = v37;
      }
      float v38 = v27;
      operator delete(v29);
    }
  }
  if (v34)
  {
    float64x2_t v35 = v34;
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete((void *)v32);
  }
}

void sub_21B8F123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  do
  {
    v26 -= 80;
    sub_21B8F205C((uint64_t)v26);
  }
  while (v26 != &a26);
  _Unwind_Resume(a1);
}

void sub_21B8F129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_21B8F2B10((uint64_t)&a10);
  sub_21B8F205C(v31);
  sub_21B8F205C(v30);
  sub_21B8F205C(v29);
  sub_21B8F205C(v28);
  sub_21B8F205C(v27);
  sub_21B8F205C(v26);
  sub_21B8F205C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F12E8(uint64_t a1)
{
  sub_21B8E5D7C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_21B8F1324()
{
  return 0;
}

uint64_t sub_21B8F132C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264)) {
    return *(void *)(a1 + 256);
  }
  else {
    return 1;
  }
}

uint64_t sub_21B8F1344()
{
  return 0;
}

uint64_t sub_21B8F134C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264)) {
    return *(void *)(a1 + 256);
  }
  else {
    return 1;
  }
}

uint64_t sub_21B8F1364()
{
  return 1;
}

uint64_t sub_21B8F136C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264)) {
    return *(void *)(a1 + 256);
  }
  else {
    return 1;
  }
}

void sub_21B8F1384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8F13A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D580;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F13F8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned char *sub_21B8F1420(unsigned char *__dst, long long *a2)
{
  *long long __dst = 0;
  __dst[24] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)long long __dst = v4;
    }
    __dst[24] = 1;
  }
  long long v5 = a2[2];
  __dst[48] = 0;
  *((_OWORD *)__dst + 2) = v5;
  __dst[72] = 0;
  if (*((unsigned char *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0)
    {
      sub_21B846188(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
    }
    else
    {
      long long v6 = a2[3];
      *((void *)__dst + 8) = *((void *)a2 + 8);
      *((_OWORD *)__dst + 3) = v6;
    }
    __dst[72] = 1;
  }
  return __dst;
}

void sub_21B8F14E0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 72) && *(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8F1524(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8F1544(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9D5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F1598(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21B8F15C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 16), (void *)a2[2], a2[3]);
    uint64_t v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a2 + 5);
      *(void *)(v6 + 16) = a2[7];
      *(_OWORD *)uint64_t v6 = v7;
      goto LABEL_6;
    }
  }
  sub_21B846188((unsigned char *)v6, (void *)a2[5], a2[6]);
LABEL_6:
  if (*((char *)a2 + 87) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 64), (void *)a2[8], a2[9]);
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 64) = v8;
  }
  if (*((char *)a2 + 111) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 88), (void *)a2[11], a2[12]);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 11);
    *(void *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v9;
  }
  if (*((char *)a2 + 135) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 112), (void *)a2[14], a2[15]);
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = a2[16];
    *(_OWORD *)(a1 + 112) = v10;
  }
  if (*((char *)a2 + 159) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 136), (void *)a2[17], a2[18]);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 17);
    *(void *)(a1 + 152) = a2[19];
    *(_OWORD *)(a1 + 136) = v11;
  }
  sub_21B8F2178(a1 + 160, (uint64_t)(a2 + 20));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  long long v12 = *(_OWORD *)(a2 + 27);
  long long v13 = *(_OWORD *)(a2 + 29);
  long long v14 = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  return a1;
}

void sub_21B8F1774(_Unwind_Exception *exception_object)
{
  if (v1[135] < 0)
  {
    operator delete(*v6);
    if ((v1[111] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[87] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v1[111] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((v1[87] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1[63] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v4);
  if ((v1[63] & 0x80000000) == 0)
  {
LABEL_5:
    if ((v1[39] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v3);
  if ((v1[39] & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_21B8F1860(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x222222222222223) {
      sub_21B846300();
    }
    long long v8 = (char *)operator new(120 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[120 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        long long v11 = &v8[v9];
        long long v12 = *(_OWORD *)(a2 + v9 + 16);
        *(_OWORD *)long long v11 = *(_OWORD *)(a2 + v9);
        *((_OWORD *)v11 + 1) = v12;
        *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + v9 + 32);
        *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + v9 + 48);
        v11[56] = 0;
        v11[112] = 0;
        if (*(unsigned char *)(a2 + v9 + 112))
        {
          *((void *)v11 + 7) = &unk_26CB954E0;
          uint64_t v13 = *(void *)(v10 + 64);
          long long v14 = *(std::__shared_weak_count **)(v10 + 72);
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v15 = *(void *)(a2 + v9 + 96);
            int v16 = *(_DWORD *)(a2 + v9 + 104);
            __int16 v17 = *(_WORD *)(a2 + v9 + 108);
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v15 = *(void *)(a2 + v9 + 96);
            int v16 = *(_DWORD *)(a2 + v9 + 104);
            __int16 v17 = *(_WORD *)(a2 + v9 + 108);
          }
          *((void *)v11 + 8) = v13;
          int v18 = &v8[v9];
          uint64_t v19 = *(void *)(a2 + v9 + 80);
          *((void *)v18 + 9) = v14;
          *((void *)v18 + 10) = v19;
          *((_DWORD *)v18 + 22) = *(_DWORD *)(a2 + v9 + 88);
          *((void *)v18 + 12) = v15;
          *((_DWORD *)v18 + 26) = v16;
          *((_WORD *)v18 + 54) = v17;
          if (v14)
          {
            if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v11[112] = 1;
        }
        v9 += 120;
      }
      while (v10 + 120 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_21B8F1A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_21B8F1A44(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 8))
          {
            uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 6);
            if (v6)
            {
              if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_21B8F1B28(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 7;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57) {
    sub_21B846300();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 6 > v6) {
    unint64_t v6 = v8 >> 6;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 57) {
      sub_21B845A48();
    }
    uint64_t v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[128 * v5];
  *long long v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_26CB9D680[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
  }
  uint64_t v13 = &v10[128 * v9];
  long long v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      v11[v15 - 128] = 0;
      *(_DWORD *)&v11[v15 - 8] = -1;
      uint64_t v16 = *(unsigned int *)&v4[v15 - 8];
      if (v16 != -1)
      {
        ((void (*)(char *, char *, char *))off_26CB9D680[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
        *(_DWORD *)&v11[v15 - 8] = v16;
      }
      v15 -= 128;
    }
    while (&v4[v15] != v3);
    uint64_t v3 = *a1;
    __int16 v17 = a1[1];
    long long v14 = v11 + 128;
    *a1 = &v11[v15];
    a1[1] = v11 + 128;
    a1[2] = v13;
    if (v17 != v3)
    {
      do
      {
        int v18 = v17 - 128;
        uint64_t v19 = *((unsigned int *)v17 - 2);
        if (v19 != -1) {
          ((void (*)(char *, char *))off_26CB9D668[v19])(&v23, v17 - 128);
        }
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v18 != v3);
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

void sub_21B8F1D08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_21B8F1D8C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_21B8F1E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

__n128 sub_21B8F1E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*(unsigned char *)(a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(unsigned char *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_21B8F1EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*(unsigned char *)(a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(unsigned char *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_21B8F1F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26CB954E0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_21B8F1FA8(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(unsigned char *)(a1 + 88)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if (!*(unsigned char *)(a1 + 88)) {
    goto LABEL_8;
  }
LABEL_7:
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if (!*(unsigned char *)(a1 + 56)) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
LABEL_8:
  if (!*(unsigned char *)(a1 + 56)) {
    goto LABEL_12;
  }
LABEL_9:
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
LABEL_12:
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_21B8F205C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 56);
      long long v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        long long v4 = *(void **)(a1 + 48);
      }
      *(void *)(a1 + 56) = v2;
      operator delete(v4);
    }
  }
  long long v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21B8F210C(uint64_t result)
{
  if (*(unsigned char *)(result + 120))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CB99B30;
    __cxa_throw(exception, (struct type_info *)&unk_26CB96818, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_21B8F2168(uint64_t a1)
{
}

uint64_t sub_21B8F2178(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_21B8491D4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_21B8F22BC(a1, (unint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_21B8F2294(_Unwind_Exception *a1)
{
  sub_21B8F12E8(v1);
  _Unwind_Resume(a1);
}

void sub_21B8F22A8(_Unwind_Exception *a1)
{
  sub_21B8F12E8(v1);
  _Unwind_Resume(a1);
}

void *sub_21B8F22BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a2 + 24;
  uint64_t v31 = (void *)a2;
  long long v32 = (void *)(a2 + 24);
  unint64_t v34 = 0;
  sub_21B8F2698((uint64_t *)&v34, (uint64_t)&v31);
  unint64_t v8 = v34;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v34;
      if (v34 >= v9) {
        unint64_t v3 = v34 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v34;
    }
    long long v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              uint64_t v31 = v12 + 2;
              long long v32 = v12 + 5;
              unint64_t v34 = a2;
              unint64_t v35 = v7;
              if (sub_21B91727C((uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v34)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            uint64_t v31 = v12 + 2;
            long long v32 = v12 + 5;
            unint64_t v34 = a2;
            unint64_t v35 = v7;
            if (sub_21B91727C((uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v34)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x60uLL);
  uint64_t v31 = v15;
  long long v32 = (void *)(a1 + 16);
  char v33 = 0;
  *uint64_t v15 = 0;
  v15[1] = v8;
  sub_21B8F27EC((uint64_t)(v15 + 2), a3);
  char v33 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        int v18 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        uint64_t v19 = v31;
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v8;
        int v18 = *(void **)(*(void *)a1 + 8 * v8);
        uint64_t v19 = v31;
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v8;
      int v18 = *(void **)(*(void *)a1 + 8 * (v28 & v8));
      uint64_t v19 = v31;
      if (v18) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v31)
    {
      unint64_t v29 = *(void *)(*v31 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v29 >= v9) {
          v29 %= v9;
        }
      }
      else
      {
        v29 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v31;
    }
    goto LABEL_61;
  }
  int v18 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v19 = v31;
  if (!v18) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v19 = *v18;
  *int v18 = v31;
LABEL_61:
  uint64_t v12 = v31;
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_21B8F265C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_21B8F2A24(v9, a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21B8F2698(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = 2654435769;
  long long v4 = **(unsigned int ***)a2;
  int8x8_t v5 = *(unsigned int **)(*(void *)a2 + 8);
  uint64_t v6 = 2654435769;
  if (v4 != v5)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = (v4[1] + 2654435769 + (((unint64_t)*v4 + 2654435769u) >> 2) + ((*v4 + 2654435769) << 6)) ^ (*v4 + 2654435769);
      unint64_t v9 = (v4[2] + 2654435769 + (v8 >> 2) + (v8 << 6)) ^ v8;
      unint64_t v10 = (v4[3] + 2654435769 + (v9 >> 2) + (v9 << 6)) ^ v9;
      v7 ^= (v7 >> 2) + 2654435769u + (v7 << 6) + ((v4[4] + 2654435769 + (v10 >> 2) + (v10 << 6)) ^ v10);
      v4 += 5;
    }
    while (v4 != v5);
    uint64_t v6 = v7 + 2654435769u;
  }
  unint64_t v11 = (v6 + ((unint64_t)*result >> 2) + (*result << 6)) ^ *result;
  *__n128 result = v11;
  uint64_t v12 = *(uint64_t **)(a2 + 8);
  if (*((unsigned char *)v12 + 24))
  {
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (*v12 != v14)
    {
      unint64_t v15 = 0;
      do
      {
        int v16 = *(char *)(v13 + 23);
        if (v16 >= 0) {
          float v17 = (uint64_t *)v13;
        }
        else {
          float v17 = *(uint64_t **)v13;
        }
        if (v16 >= 0) {
          unint64_t v18 = *(unsigned __int8 *)(v13 + 23);
        }
        else {
          unint64_t v18 = *(void *)(v13 + 8);
        }
        __n128 result = (uint64_t *)sub_21B849E2C((uint64_t)&v19, v17, v18);
        v15 ^= (unint64_t)&result[8 * v15 + 331804471] + (v15 >> 2) + 1;
        v13 += 24;
      }
      while (v13 != v14);
      uint64_t v3 = v15 + 2654435769u;
      unint64_t v11 = *v2;
    }
  }
  *uint64_t v2 = (v3 + (v11 >> 2) + (v11 << 6)) ^ v11;
  return result;
}

uint64_t sub_21B8F27EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21B8F28C8(a1, a2) + 56;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_21B846188((unsigned char *)v4, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(v4 + 16) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_21B8F285C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    if (v3)
    {
      uint64_t v4 = *(void *)(v1 + 32);
      long long v5 = *(void **)(v1 + 24);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        long long v5 = *(void **)(v1 + 24);
      }
      *(void *)(v1 + 32) = v3;
      operator delete(v5);
    }
  }
  uint64_t v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F28C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 2) >= 0xCCCCCCCCCCCCCCDLL) {
      sub_21B846300();
    }
    unint64_t v7 = (char *)operator new(v6);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    sub_21B847B14((char *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_21B8F29B0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    uint64_t v4 = (void **)*v2;
    if (*v2)
    {
      long long v5 = *(void ***)(v1 + 32);
      int64_t v6 = *v2;
      if (v5 != v4)
      {
        do
        {
          if (*((char *)v5 - 1) < 0) {
            operator delete(*(v5 - 3));
          }
          v5 -= 3;
        }
        while (v5 != v4);
        int64_t v6 = *v2;
      }
      *(void *)(v1 + 32) = v4;
      operator delete(v6);
    }
  }
  unint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8F2A24(uint64_t a1, void **__p)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!__p) {
      return;
    }
    goto LABEL_12;
  }
  if (*((char *)__p + 95) < 0) {
    operator delete(__p[9]);
  }
  if (*((unsigned char *)__p + 64))
  {
    uint64_t v3 = (void **)__p[5];
    if (v3)
    {
      uint64_t v4 = (void **)__p[6];
      long long v5 = __p[5];
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        long long v5 = __p[5];
      }
      __p[6] = v3;
      operator delete(v5);
    }
  }
  unint64_t v7 = __p[2];
  if (!v7)
  {
LABEL_12:
    int64_t v6 = __p;
    goto LABEL_14;
  }
  __p[3] = v7;
  operator delete(v7);
  int64_t v6 = __p;

LABEL_14:
  operator delete(v6);
}

uint64_t sub_21B8F2B10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 120))
  {
    if (!*(unsigned char *)(a1 + 112)) {
      return a1;
    }
    if (!*(unsigned char *)(a1 + 104)) {
      goto LABEL_8;
    }
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_8:
        if (!*(unsigned char *)(a1 + 40)) {
          return a1;
        }
        goto LABEL_9;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(unsigned char *)(a1 + 40)) {
      return a1;
    }
LABEL_9:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
    uint64_t v2 = *(void **)(a1 + 16);
    goto LABEL_11;
  }
  sub_21B8E5D7C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (!v2) {
    return a1;
  }
LABEL_11:
  operator delete(v2);
  return a1;
}

void ***sub_21B8F2BC0(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  int64_t v6 = (char *)(*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  unint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = (char *)*v4;
    uint64_t v10 = v6 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_21B846300();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_21B845A48();
      }
      unint64_t v15 = operator new(8 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    int v16 = &v15[8 * v11];
    *int v16 = *a2;
    unint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v7 = &v6[-v19];
      int v16 = (void *)((char *)v16 - v19);
      BOOL v20 = &v15[8 * v11 - 16];
      unint64_t v21 = (long long *)(v6 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *BOOL v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--int v16 = v24;
        }
        while (v7 != v9);
      }
      unint64_t v7 = (char *)*v4;
    }
    *uint64_t v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)int64_t v6 = *a2;
    unint64_t v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_21B8F2D38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 2, a1 + 32, 2, a1 + 40, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 1;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B8F2E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B8F2E94(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB9D698[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    __int16 v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    __int16 v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B8F2F88(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F3014()
{
  return 3;
}

uint64_t sub_21B8F301C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_21B8F3024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 64, 2, a1 + 72, 2);
}

uint64_t sub_21B8F3040(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21B8F30C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(void *)uint64_t v2 = &unk_26CB96F10;
    uint64_t v3 = *(unsigned int *)(v2 + 40);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v3])(&v5, v2 + 16);
    }
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x21D495F30](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_21B8F3164(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F31F0()
{
  return 3;
}

uint64_t sub_21B8F31F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B8F3200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B8F321C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

char **sub_21B8F32AC(char **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21B846300();
    }
    size_t v6 = (char *)operator new(48 * a2);
    __int16 v7 = &v6[48 * a2];
    *uint64_t v3 = v6;
    v3[1] = v6;
    v3[2] = v7;
    do
    {
      *(_OWORD *)size_t v6 = *(_OWORD *)a3;
      size_t v8 = *(void *)(a3 + 16);
      size_t v9 = *(void *)(a3 + 32);
      *((void *)v6 + 2) = v8;
      *((void *)v6 + 3) = 0;
      *((void *)v6 + 4) = v9;
      if (v8)
      {
        memptr = 0;
        int v10 = malloc_type_posix_memalign(&memptr, v9, v8, 0x1F88E90uLL);
        if (v10) {
          sub_21B97D9E4(v10, *((void *)v6 + 4), v8);
        }
        *((void *)v6 + 3) = memptr;
      }
      unint64_t v11 = *(void *)(a3 + 40);
      *((void *)v6 + 5) = v11;
      unint64_t v12 = *(_DWORD **)(a3 + 24);
      unint64_t v13 = v11 >> 34;
      if ((v11 >> 34) * v11 == -1
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
      {
LABEL_24:
        abort();
      }
      if (v11)
      {
        unint64_t v14 = (_DWORD *)*((void *)v6 + 3);
        unint64_t v15 = (unint64_t)*((unsigned int *)v6 + 11) >> 2;
        if (v15 * *((_DWORD *)v6 + 10) == -1
          && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_24;
        }
        if (v13 == 1 && v15 == 1)
        {
          if (!v12
            && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_24;
          }
          memmove(v14, v12, 4 * v11);
        }
        else
        {
          int v16 = v11 - 1;
          if (v11 != 1)
          {
            do
            {
              *unint64_t v14 = *v12;
              v12 += v13;
              v14 += v15;
              --v16;
            }
            while (v16);
          }
          *unint64_t v14 = *v12;
        }
      }
      v6 += 48;
    }
    while (v6 != v7);
    uint64_t v3 = a1;
    a1[1] = v7;
  }
  return v3;
}

void sub_21B8F3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  int v10 = (char *)*a9;
  if (*a9)
  {
    unint64_t v11 = (char *)a9[1];
    unint64_t v12 = *a9;
    if (v11 != v10)
    {
      do
      {
        unint64_t v13 = (void *)*((void *)v11 - 3);
        if (v13) {
          free(v13);
        }
        *((void *)v11 - 3) = 0;
        v11 -= 48;
      }
      while (v11 != v10);
      unint64_t v12 = *a9;
    }
    a9[1] = v10;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F359C(uint64_t a1, unsigned int *a2, int *a3, char a4, const float *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    int v11 = *a3;
    int v12 = *a2;
  }
  else
  {
    int v12 = *a2;
    int v11 = *a2 != 0;
  }
  unsigned int v13 = v11 * v12;
  unint64_t v14 = 4 * v13;
  unint64_t v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  unint64_t v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8) {
    size_t v18 = v17 + 1;
  }
  else {
    size_t v18 = 8;
  }
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v18;
  if (!v13)
  {
    *(_DWORD *)(a1 + 24) = *a2;
    *(_DWORD *)(a1 + 28) = 4 * v11;
    return a1;
  }
  memptr = 0;
  int v19 = malloc_type_posix_memalign(&memptr, v18, 4 * v13, 0x1F88E90uLL);
  if (v19) {
    sub_21B97D9E4(v19, *(void *)(a1 + 16), v14);
  }
  BOOL v20 = (float32x4_t *)memptr;
  *(void *)(a1 + 8) = memptr;
  uint64_t v21 = *a2;
  *(_DWORD *)(a1 + 24) = v21;
  *(_DWORD *)(a1 + 28) = 4 * v11;
  if (v20 && a6)
  {
    uint64_t v22 = v11 & 0x3FFFFFFF;
    if (v21 * v22 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    if (v22 == 1)
    {
      if (!v21) {
        return a1;
      }
      if (v21 < 8 || v20 < (float32x4_t *)(a5 + 1) && &v20->f32[v21] > a5)
      {
        long long v23 = v20;
        uint64_t v24 = v21;
LABEL_21:
        unint64_t v25 = v24 + 1;
        do
        {
          v23->f32[0] = *a5;
          long long v23 = (float32x4_t *)((char *)v23 + 4);
          --v25;
        }
        while (v25 > 1);
        return a1;
      }
      long long v23 = (float32x4_t *)((char *)v20 + 4 * (v21 & 0xFFFFFFF8));
      uint64_t v24 = v21 & 7;
      float32x4_t v28 = vld1q_dup_f32(a5);
      unint64_t v29 = v20 + 1;
      uint64_t v30 = v21 & 0xFFFFFFF8;
      do
      {
        v29[-1] = v28;
        *unint64_t v29 = v28;
        v29 += 2;
        v30 -= 8;
      }
      while (v30);
      if ((v21 & 0xFFFFFFF8) != v21) {
        goto LABEL_21;
      }
    }
    else if (v21)
    {
      int v26 = v21 - 1;
      if (v21 != 1)
      {
        do
        {
          v20->f32[0] = *a5;
          BOOL v20 = (float32x4_t *)((char *)v20 + 4 * v22);
          --v26;
        }
        while (v26);
      }
      v20->f32[0] = *a5;
    }
  }
  return a1;
}

void sub_21B8F37A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

char ***sub_21B8F37C4(char ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  size_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    BOOL v20 = *v4;
    uint64_t v21 = (v6 - *v4) >> 8;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 56) {
      sub_21B846300();
    }
    uint64_t v23 = v5 - (void)v20;
    if (v23 >> 7 > v22) {
      unint64_t v22 = v23 >> 7;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF00) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (HIBYTE(v24)) {
        sub_21B845A48();
      }
      unint64_t v25 = (char *)operator new(v24 << 8);
    }
    else
    {
      unint64_t v25 = 0;
    }
    long long v26 = a2[13];
    uint64_t v27 = &v25[256 * v21];
    *((_OWORD *)v27 + 12) = a2[12];
    *((_OWORD *)v27 + 13) = v26;
    long long v28 = a2[15];
    *((_OWORD *)v27 + 14) = a2[14];
    *((_OWORD *)v27 + 15) = v28;
    long long v29 = a2[9];
    *((_OWORD *)v27 + 8) = a2[8];
    *((_OWORD *)v27 + 9) = v29;
    long long v30 = a2[11];
    *((_OWORD *)v27 + 10) = a2[10];
    *((_OWORD *)v27 + 11) = v30;
    long long v31 = a2[5];
    *((_OWORD *)v27 + 4) = a2[4];
    *((_OWORD *)v27 + 5) = v31;
    long long v32 = a2[7];
    *((_OWORD *)v27 + 6) = a2[6];
    *((_OWORD *)v27 + 7) = v32;
    long long v33 = a2[1];
    *(_OWORD *)uint64_t v27 = *a2;
    *((_OWORD *)v27 + 1) = v33;
    long long v34 = a2[2];
    long long v35 = a2[3];
    int v19 = v27 + 256;
    *((_OWORD *)v27 + 2) = v34;
    *((_OWORD *)v27 + 3) = v35;
    if (v6 != v20)
    {
      do
      {
        long long v36 = *((_OWORD *)v6 - 16);
        long long v37 = *((_OWORD *)v6 - 15);
        long long v38 = *((_OWORD *)v6 - 13);
        *((_OWORD *)v27 - 14) = *((_OWORD *)v6 - 14);
        *((_OWORD *)v27 - 13) = v38;
        *((_OWORD *)v27 - 16) = v36;
        *((_OWORD *)v27 - 15) = v37;
        long long v39 = *((_OWORD *)v6 - 12);
        long long v40 = *((_OWORD *)v6 - 11);
        long long v41 = *((_OWORD *)v6 - 9);
        *((_OWORD *)v27 - 10) = *((_OWORD *)v6 - 10);
        *((_OWORD *)v27 - 9) = v41;
        *((_OWORD *)v27 - 12) = v39;
        *((_OWORD *)v27 - 11) = v40;
        long long v42 = *((_OWORD *)v6 - 8);
        long long v43 = *((_OWORD *)v6 - 7);
        long long v44 = *((_OWORD *)v6 - 5);
        *((_OWORD *)v27 - 6) = *((_OWORD *)v6 - 6);
        *((_OWORD *)v27 - 5) = v44;
        *((_OWORD *)v27 - 8) = v42;
        *((_OWORD *)v27 - 7) = v43;
        long long v45 = *((_OWORD *)v6 - 4);
        long long v46 = *((_OWORD *)v6 - 3);
        long long v47 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v27 - 1) = v47;
        *((_OWORD *)v27 - 4) = v45;
        *((_OWORD *)v27 - 3) = v46;
        v27 -= 256;
        v6 -= 256;
      }
      while (v6 != v20);
      size_t v6 = *v4;
    }
    *uint64_t v4 = v27;
    v4[1] = v19;
    v4[2] = &v25[256 * v24];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)size_t v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    long long v10 = a2[4];
    long long v11 = a2[5];
    long long v12 = a2[7];
    *((_OWORD *)v6 + 6) = a2[6];
    *((_OWORD *)v6 + 7) = v12;
    *((_OWORD *)v6 + 4) = v10;
    *((_OWORD *)v6 + 5) = v11;
    long long v13 = a2[8];
    long long v14 = a2[9];
    long long v15 = a2[11];
    *((_OWORD *)v6 + 10) = a2[10];
    *((_OWORD *)v6 + 11) = v15;
    *((_OWORD *)v6 + 8) = v13;
    *((_OWORD *)v6 + 9) = v14;
    long long v16 = a2[12];
    long long v17 = a2[13];
    long long v18 = a2[15];
    *((_OWORD *)v6 + 14) = a2[14];
    *((_OWORD *)v6 + 15) = v18;
    *((_OWORD *)v6 + 12) = v16;
    *((_OWORD *)v6 + 13) = v17;
    int v19 = v6 + 256;
  }
  v4[1] = v19;
  return a1;
}

char ***sub_21B8F3980(char ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  size_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    long long v11 = *v4;
    uint64_t v12 = (v6 - *v4) >> 6;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58) {
      sub_21B846300();
    }
    uint64_t v14 = v5 - (void)v11;
    if (v14 >> 5 > v13) {
      unint64_t v13 = v14 >> 5;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 58) {
        sub_21B845A48();
      }
      long long v16 = (char *)operator new(v15 << 6);
    }
    else
    {
      long long v16 = 0;
    }
    long long v17 = &v16[64 * v12];
    long long v18 = a2[1];
    *(_OWORD *)long long v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    long long v19 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v19;
    long long v10 = v17 + 64;
    if (v6 != v11)
    {
      do
      {
        long long v20 = *((_OWORD *)v6 - 4);
        long long v21 = *((_OWORD *)v6 - 3);
        long long v22 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 64;
        v6 -= 64;
      }
      while (v6 != v11);
      size_t v6 = *v4;
    }
    *uint64_t v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[64 * v15];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)size_t v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    long long v10 = v6 + 64;
  }
  v4[1] = v10;
  return a1;
}

uint64_t sub_21B8F3AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v9[0]) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v9, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long v9 = *(_OWORD *)a3;
      uint64_t v10 = *(void *)(a3 + 16);
    }
    char v11 = 1;
    LOBYTE(__dst) = 0;
    char v35 = 0;
    if (SHIBYTE(v10) < 0)
    {
      sub_21B846188(&__dst, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v9;
      uint64_t v34 = v10;
    }
    char v35 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v35 = 0;
  }
  sub_21B8F44AC((uint64_t)v36, a2, (uint64_t)&__dst);
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)__dst);
  }
  unsigned __int8 v5 = *(unsigned char *)(a2 + 216);
  unsigned int v6 = *(_DWORD *)(a2 + 220);
  LOBYTE(__p[0]) = 0;
  char v30 = 0;
  __int16 v32 = v5;
  uint64_t v31 = v6;
  uint64_t v12 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v13, v36);
  uint64_t v12 = &unk_26CB9EF20;
  sub_21B8E24C8((uint64_t)&v24, (uint64_t)__p);
  uint64_t v27 = v31;
  __int16 v28 = v32;
  if (v30 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_21B848B68((uint64_t)v36);
  uint64_t v7 = v13;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 24) = v15;
  *(void *)(a1 + 40) = v16;
  long long v15 = 0uLL;
  *(_OWORD *)(a1 + 48) = v17;
  *(void *)(a1 + 64) = v18;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  *(_OWORD *)(a1 + 72) = v19;
  *(void *)(a1 + 88) = v20;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v23)
  {
    *(_OWORD *)(a1 + 96) = v21;
    *(void *)(a1 + 112) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF20;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (v26)
  {
    *(_OWORD *)(a1 + 128) = v24;
    *(void *)(a1 + 144) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
    *(void *)(a1 + 160) = v27;
    *(_WORD *)(a1 + 168) = v28;
    uint64_t v12 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v13);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    *(void *)(a1 + 160) = v27;
    *(_WORD *)(a1 + 168) = v28;
    uint64_t v12 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v13);
    if (!v11) {
      goto LABEL_24;
    }
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
LABEL_24:
  *(void *)a1 = &unk_26CB9D8E8;
  return a1;
}

void sub_21B8F3DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (*(unsigned char *)(v41 - 200) && *(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F3E44(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B8F3EC0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F3F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v11[0]) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v11, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)char v11 = *(_OWORD *)a3;
      uint64_t v12 = *(void *)(a3 + 16);
    }
    char v13 = 1;
    LOBYTE(__dst) = 0;
    char v43 = 0;
    if (SHIBYTE(v12) < 0)
    {
      sub_21B846188(&__dst, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v11;
      uint64_t v42 = v12;
    }
    char v43 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v43 = 0;
  }
  sub_21B8F44AC((uint64_t)v44, a2, (uint64_t)&__dst);
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)__dst);
  }
  if (*(_DWORD *)(a2 + 220)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndModelDefinition.cpp", 128, (uint64_t)"param.device == DeviceType::Any", 31, (uint64_t)"Only DeviceType::Any supported for EspressoV2", 45, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  char v5 = *(unsigned char *)(a2 + 264);
  uint64_t v6 = *(void *)(a2 + 272);
  LOBYTE(v33) = 0;
  char v35 = 0;
  LOBYTE(__p) = 0;
  char v40 = 0;
  char v36 = v5;
  uint64_t v37 = v6;
  int v14 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v15, v44);
  int v14 = &unk_26CB9EF78;
  sub_21B8F1420(&v26, &v33);
  if (v40 && v39 < 0) {
    operator delete(__p);
  }
  if (v35 && v34 < 0) {
    operator delete((void *)v33);
  }
  sub_21B848B68((uint64_t)v44);
  uint64_t v7 = v15;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 24) = v17;
  *(void *)(a1 + 40) = v18;
  long long v17 = 0uLL;
  *(_OWORD *)(a1 + 48) = v19;
  *(void *)(a1 + 64) = v20;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  *(_OWORD *)(a1 + 72) = v21;
  *(void *)(a1 + 88) = v22;
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v25)
  {
    *(_OWORD *)(a1 + 96) = v23;
    *(void *)(a1 + 112) = v24;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF78;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  int v8 = v28;
  if (v28)
  {
    *(_OWORD *)(a1 + 128) = v26;
    *(void *)(a1 + 144) = v27;
    uint64_t v27 = 0;
    long long v26 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
  }
  long long v9 = v29;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = v9;
  *(unsigned char *)(a1 + 200) = 0;
  if (v32)
  {
    *(_OWORD *)(a1 + 176) = v30;
    *(void *)(a1 + 192) = v31;
    uint64_t v31 = 0;
    long long v30 = 0uLL;
    *(unsigned char *)(a1 + 200) = 1;
  }
  int v14 = &unk_26CB9EF78;
  if (v8 && SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  int v14 = &unk_26CB9F080;
  sub_21B848B68((uint64_t)&v15);
  if (v13 && SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  *(void *)a1 = &unk_26CB9D910;
  return a1;
}

void sub_21B8F42D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (*(unsigned char *)(v42 - 184) && *(char *)(v42 - 185) < 0) {
    operator delete(*(void **)(v42 - 208));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F434C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B8F43EC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

void sub_21B8F44AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  char v35 = 0;
  char v36 = 0;
  unint64_t v37 = 0;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_21B846188(__dst, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(a2 + 16);
    uint64_t v61 = *(void *)(a2 + 32);
  }
  char v62 = 1;
  int v63 = 17;
  char v64 = 1;
  int v65 = 1;
  char v66 = 1;
  char v67 = 0;
  char v68 = 0;
  char v69 = 0;
  char v70 = 0;
  int v71 = 1;
  char v72 = 1;
  char v73 = 0;
  char v74 = 0;
  char v75 = 1;
  LOBYTE(v76[0]) = 0;
  char v78 = 0;
  LOBYTE(v79[0]) = 0;
  char v81 = 0;
  uint64_t v6 = sub_21B8F4D8C((long long **)&v35, (long long *)__dst);
  char v36 = v6;
  uint64_t v7 = (void **)(a2 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    unint64_t v8 = *(void *)(a2 + 48);
    if (!v8) {
      goto LABEL_27;
    }
    sub_21B846188(__p, *v7, v8);
    uint64_t v6 = v36;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 63)) {
      goto LABEL_27;
    }
    *(_OWORD *)long long __p = *(_OWORD *)v7;
    uint64_t v39 = *(void *)(a2 + 56);
  }
  char v40 = 1;
  int v41 = 33;
  char v42 = 1;
  int v43 = 1;
  char v44 = 1;
  int v45 = 6;
  char v46 = 1;
  int v47 = 1024;
  char v48 = 1;
  int v49 = 1;
  char v50 = 1;
  int v51 = 1;
  char v52 = 1;
  char v53 = 1;
  LOBYTE(v54[0]) = 0;
  char v56 = 0;
  LOBYTE(v57[0]) = 0;
  char v59 = 0;
  if ((unint64_t)v6 >= v37)
  {
    long long v9 = sub_21B8F4D8C((long long **)&v35, (long long *)__p);
  }
  else
  {
    sub_21B847590(v6, (long long *)__p);
    long long v9 = v6 + 168;
  }
  char v36 = v9;
  if (!v59)
  {
LABEL_17:
    if (v56) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  if (v58 != v57)
  {
    if (v58) {
      (*(void (**)(void))(*v58 + 40))();
    }
    goto LABEL_17;
  }
  (*(void (**)(void *))(v57[0] + 32))(v57);
  if (v56)
  {
LABEL_18:
    if (v55 == v54)
    {
      (*(void (**)(void *))(v54[0] + 32))(v54);
    }
    else if (v55)
    {
      (*(void (**)(void))(*v55 + 40))();
    }
  }
LABEL_24:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
LABEL_27:
  char v32 = 0;
  long long v33 = 0;
  unint64_t v34 = 0;
  uint64_t v10 = (void **)(a2 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    unint64_t v11 = *(void *)(a2 + 72);
    if (!v11) {
      goto LABEL_35;
    }
    sub_21B846188(__p, *v10, v11);
    char v40 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 87)) {
      goto LABEL_35;
    }
    *(_OWORD *)long long __p = *(_OWORD *)v10;
    uint64_t v39 = *(void *)(a2 + 80);
    char v40 = 1;
  }
  long long v33 = (unsigned char *)sub_21B8F50D8((uint64_t)&v32, (uint64_t)__p);
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
LABEL_35:
  uint64_t v12 = (void **)(a2 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    unint64_t v13 = *(void *)(a2 + 96);
    if (!v13) {
      goto LABEL_48;
    }
    sub_21B846188(__p, *v12, v13);
  }
  else
  {
    if (!*(unsigned char *)(a2 + 111)) {
      goto LABEL_48;
    }
    *(_OWORD *)long long __p = *(_OWORD *)v12;
    uint64_t v39 = *(void *)(a2 + 104);
  }
  char v40 = 1;
  int v14 = v33;
  if ((unint64_t)v33 >= v34)
  {
    uint64_t v16 = sub_21B8F50D8((uint64_t)&v32, (uint64_t)__p);
  }
  else
  {
    *long long v33 = 0;
    v14[24] = 0;
    if (v40)
    {
      long long v15 = *(_OWORD *)__p;
      *((void *)v14 + 2) = v39;
      *(_OWORD *)int v14 = v15;
      __p[1] = 0;
      uint64_t v39 = 0;
      __p[0] = 0;
      v14[24] = 1;
    }
    uint64_t v16 = (uint64_t)(v14 + 32);
  }
  long long v33 = (unsigned char *)v16;
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
LABEL_48:
  long long v17 = (void **)(a2 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    unint64_t v18 = *(void *)(a2 + 120);
    if (!v18) {
      goto LABEL_61;
    }
    sub_21B846188(__p, *v17, v18);
  }
  else
  {
    if (!*(unsigned char *)(a2 + 135)) {
      goto LABEL_61;
    }
    *(_OWORD *)long long __p = *(_OWORD *)v17;
    uint64_t v39 = *(void *)(a2 + 128);
  }
  char v40 = 1;
  long long v19 = v33;
  if ((unint64_t)v33 >= v34)
  {
    uint64_t v21 = sub_21B8F50D8((uint64_t)&v32, (uint64_t)__p);
  }
  else
  {
    *long long v33 = 0;
    v19[24] = 0;
    if (v40)
    {
      long long v20 = *(_OWORD *)__p;
      *((void *)v19 + 2) = v39;
      *(_OWORD *)long long v19 = v20;
      __p[1] = 0;
      uint64_t v39 = 0;
      __p[0] = 0;
      v19[24] = 1;
    }
    uint64_t v21 = (uint64_t)(v19 + 32);
  }
  long long v33 = (unsigned char *)v21;
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
LABEL_61:
  sub_21B917124(a2 + 160, (uint64_t)__p);
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (!*(unsigned char *)(a3 + 24))
  {
    a3 = a2 + 136;
    if (*(char *)(a2 + 159) < 0)
    {
      uint64_t v22 = (unint64_t *)(a2 + 144);
      goto LABEL_67;
    }
LABEL_65:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
    *(void *)(a1 + 32) = *(void *)(a3 + 16);
    goto LABEL_68;
  }
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_65;
  }
  uint64_t v22 = (unint64_t *)(a3 + 8);
LABEL_67:
  sub_21B846188((unsigned char *)(a1 + 16), *(void **)a3, *v22);
LABEL_68:
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21B847400((void *)(a1 + 40), (uint64_t)v35, (uint64_t)v36, 0xCF3CF3CF3CF3CF3DLL * ((v36 - (unsigned char *)v35) >> 3));
  sub_21B847980((void *)(a1 + 64), (uint64_t *)&v32);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_21B847B14((char *)(a1 + 88), (uint64_t)__p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  *(unsigned char *)(a1 + 112) = 1;
  long long v23 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v24 = (void **)__p[1];
    char v25 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      char v25 = __p[0];
    }
    __p[1] = v23;
    operator delete(v25);
  }
  long long v26 = (void **)v32;
  if (v32)
  {
    uint64_t v27 = (void **)v33;
    unsigned __int8 v28 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((unsigned char *)v27 - 8) && *((char *)v27 - 9) < 0) {
          operator delete(*(v27 - 4));
        }
        v27 -= 4;
      }
      while (v27 != v26);
      unsigned __int8 v28 = v32;
    }
    long long v33 = v26;
    operator delete(v28);
  }
  if (!v81)
  {
LABEL_89:
    if (!v78) {
      goto LABEL_96;
    }
    goto LABEL_90;
  }
  if (v80 != v79)
  {
    if (v80) {
      (*(void (**)(void))(*v80 + 40))();
    }
    goto LABEL_89;
  }
  (*(void (**)(void *))(v79[0] + 32))(v79);
  if (!v78) {
    goto LABEL_96;
  }
LABEL_90:
  if (v77 == v76)
  {
    (*(void (**)(void *))(v76[0] + 32))(v76);
  }
  else if (v77)
  {
    (*(void (**)(void))(*v77 + 40))();
  }
LABEL_96:
  if (v62 && SHIBYTE(v61) < 0) {
    operator delete(__dst[0]);
  }
  long long v29 = (char *)v35;
  if (v35)
  {
    long long v30 = v36;
    uint64_t v31 = v35;
    if (v36 != v35)
    {
      do
      {
        v30 -= 168;
        sub_21B847844((uint64_t)v30);
      }
      while (v30 != v29);
      uint64_t v31 = v35;
    }
    char v36 = v29;
    operator delete(v31);
  }
}

void sub_21B8F4C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

char *sub_21B8F4D8C(long long **a1, long long *a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_21B846300();
  }
  if (0x9E79E79E79E79E7ALL * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x186186186186186) {
      sub_21B845A48();
    }
    uint64_t v7 = (char *)operator new(168 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v14 = &v7[168 * v3];
  long long v15 = (long long *)&v7[168 * v6];
  sub_21B847590(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  long long v9 = v14 + 168;
  unint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (!v10) {
      return v14 + 168;
    }
    goto LABEL_16;
  }
  do
  {
    v8 -= 168;
    uint64_t v10 = (long long *)((char *)v10 - 168);
    sub_21B8F4F74(v8, v10);
  }
  while (v10 != v11);
  uint64_t v10 = *a1;
  uint64_t v12 = (uint64_t)a1[1];
  *a1 = (long long *)v8;
  a1[1] = (long long *)v9;
  a1[2] = v15;
  while ((long long *)v12 != v10)
  {
    v12 -= 168;
    sub_21B847844(v12);
  }
  if (v10) {
LABEL_16:
  }
    operator delete(v10);
  return v14 + 168;
}

void sub_21B8F4F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8F4F20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F4F20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    sub_21B847844(i - 168);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21B8F4F74(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[4];
  int v8 = *((_DWORD *)a2 + 20);
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    long long v9 = a2 + 7;
    uint64_t v10 = (long long *)*((void *)a2 + 14);
    if (v10)
    {
      if (v10 == (long long *)((char *)a2 + 88))
      {
        *(void *)(a1 + 112) = a1 + 88;
        (*(void (**)(void))(**(void **)v9 + 24))();
        goto LABEL_10;
      }
      *(void *)(a1 + 112) = v10;
    }
    else
    {
      long long v9 = (long long *)(a1 + 112);
    }
    *(void *)long long v9 = 0;
LABEL_10:
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    uint64_t v11 = (uint64_t)a2 + 152;
    uint64_t v12 = (long long *)*((void *)a2 + 19);
    if (v12)
    {
      if (v12 == a2 + 8)
      {
        *(void *)(a1 + 152) = a1 + 128;
        (*(void (**)(void))(**(void **)v11 + 24))();
        goto LABEL_18;
      }
      *(void *)(a1 + 152) = v12;
    }
    else
    {
      uint64_t v11 = a1 + 152;
    }
    *(void *)uint64_t v11 = 0;
LABEL_18:
    *(unsigned char *)(a1 + 160) = 1;
  }
  return a1;
}

uint64_t sub_21B8F50D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void ***)a1;
  long long v4 = *(void ***)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21B846300();
  }
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_21B845A48();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    *(unsigned char *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + 24) = 0;
    if (*(unsigned char *)(a2 + 24)) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    *(unsigned char *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + 24) = 0;
    if (*(unsigned char *)(a2 + 24))
    {
LABEL_10:
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(v11 + 24) = 1;
      uint64_t v3 = *(void ***)a1;
      long long v4 = *(void ***)(a1 + 8);
    }
  }
  uint64_t v12 = &v10[32 * v9];
  uint64_t v13 = v11 + 32;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v12;
  }
  else
  {
    uint64_t v14 = v11;
    do
    {
      *(unsigned char *)(v14 - 32) = 0;
      v14 -= 32;
      long long v15 = (char *)(v4 - 4);
      *(unsigned char *)(v14 + 24) = 0;
      if (*((unsigned char *)v4 - 8))
      {
        long long v16 = *(_OWORD *)v15;
        *(void *)(v14 + 16) = *(v4 - 2);
        *(_OWORD *)uint64_t v14 = v16;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(void *)long long v15 = 0;
        *(unsigned char *)(v11 - 8) = 1;
      }
      uint64_t v11 = v14;
      v4 -= 4;
    }
    while (v15 != (char *)v3);
    uint64_t v3 = *(void ***)a1;
    long long v17 = *(void ***)(a1 + 8);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v12;
    while (v17 != v3)
    {
      if (*((unsigned char *)v17 - 8))
      {
        if (*((char *)v17 - 9) < 0) {
          operator delete(*(v17 - 4));
        }
      }
      v17 -= 4;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v13;
}

uint64_t sub_21B8F526C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(unsigned char *)(a1 + 24)) {
      return a1;
    }
  }
  else if (!*(unsigned char *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_21B8F52DC(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  int v80 = a1[2];
  if (v80 == a2[2] && (int v4 = a1[3], v4 == a2[3]) && (v88 = a1[4], v88 == a2[4]))
  {
    int v70 = a1[3];
    if (!v4) {
      return;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndUtils.cpp", 39, (uint64_t)"out_wxhxc.Shape() == in_wxhxc.Shape()", 37, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_102:
      abort();
    }
    int v80 = v3[2];
    int v88 = v3[4];
    int v70 = v3[3];
    if (!v70) {
      return;
    }
  }
  if (v88) {
    unint64_t v5 = 0x100000001;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v5) {
    BOOL v6 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = v6;
  if (!v88) {
    char v7 = 1;
  }
  char v87 = v7;
  if (v80)
  {
    int v85 = 0;
    int v8 = v5 - 1;
    int v91 = v88 - 1;
    uint64_t v71 = 4 * (v5 & 1) + 0x3FFFFFFFCLL;
    char v72 = v2;
    int v90 = v5 - 1;
    unint64_t v74 = HIDWORD(v5);
    char v75 = v3;
    int v73 = v5;
    do
    {
      for (int i = 0; i != v80; ++i)
      {
        int v11 = v3[5];
        int v10 = v3[6];
        unint64_t v12 = v3[7];
        uint64_t v13 = *(void *)v3;
        unint64_t v14 = *(void *)(v3 + 5);
        int v86 = v12 * v88;
        if (v12 * v88 == -1)
        {
          int v15 = v3[6];
          int v16 = i;
          unint64_t v17 = v3[7];
          uint64_t v18 = *(void *)v3;
          BOOL v19 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
          uint64_t v13 = v18;
          int v10 = v15;
          unint64_t v12 = v17;
          int i = v16;
          int v8 = v90;
          if (v19) {
            goto LABEL_102;
          }
        }
        uint64_t v21 = v2[5];
        int v20 = v2[6];
        uint64_t v22 = v2[7];
        uint64_t v23 = *(void *)v2;
        if (v22 * v88 == -1)
        {
          int v81 = v10;
          int v24 = i;
          unint64_t v83 = v14;
          char v25 = v2;
          uint64_t v26 = v13;
          int v27 = v2[6];
          int v28 = v11;
          uint64_t v29 = v23;
          BOOL v30 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
          uint64_t v23 = v29;
          int v11 = v28;
          int v20 = v27;
          uint64_t v13 = v26;
          int v10 = v81;
          uint64_t v2 = v25;
          uint64_t v3 = v75;
          unint64_t v14 = v83;
          int i = v24;
          int v8 = v90;
          if (v30) {
            goto LABEL_102;
          }
        }
        int v31 = v11 * i;
        char v32 = (float *)(v13 + 4 * (v31 + v10 * v85));
        if ((v87 & 1) == 0)
        {
          int v79 = i;
          int v33 = v21 * i;
          uint64_t v34 = 4 * v21;
          uint64_t v77 = v13;
          unint64_t v78 = v12;
          int v82 = v10;
          unint64_t v84 = v14;
          int v76 = v31;
          if (v88 == 1)
          {
            long long v38 = (float *)(v23 + 4 * (v33 + v20 * v85));
            char v36 = (float *)(v13 + 4 * (v31 + v10 * v85));
          }
          else
          {
            int v35 = 0;
            char v36 = (float *)(v13 + 4 * (v31 + v85 * v10));
            uint64_t v89 = 4 * v12;
            uint64_t v37 = 4 * v14;
            long long v38 = (float *)(v23 + 4 * (v33 + v85 * v20));
            uint64_t v39 = 4 * v22;
            do
            {
              char v40 = v38;
              int v41 = v36;
              if (v8)
              {
                char v40 = v38;
                int v41 = v36;
                int v42 = v90;
                do
                {
                  *int v41 = expf(*v40);
                  int v41 = (float *)((char *)v41 + v37);
                  char v40 = (float *)((char *)v40 + v34);
                  --v42;
                }
                while (v42);
              }
              *int v41 = expf(*v40);
              char v36 = (float *)((char *)v36 + v89);
              long long v38 = (float *)((char *)v38 + v39);
              ++v35;
              int v8 = v90;
            }
            while (v35 != v91);
          }
          if (v8)
          {
            unint64_t v14 = v84;
            int v43 = v8;
            LODWORD(v5) = v73;
            do
            {
              *char v36 = expf(*v38);
              v36 += v84;
              long long v38 = (float *)((char *)v38 + v34);
              --v43;
            }
            while (v43);
          }
          else
          {
            LODWORD(v5) = v73;
            unint64_t v14 = v84;
          }
          *char v36 = expf(*v38);
          uint64_t v2 = v72;
          uint64_t v3 = v75;
          int v8 = v90;
          int i = v79;
          uint64_t v13 = v77;
          unint64_t v12 = v78;
          int v10 = v82;
          int v31 = v76;
        }
        if (v86)
        {
          int v44 = 0;
          int v45 = 0;
          int v46 = 0;
          float v47 = 0.0;
          char v48 = v32;
          do
          {
            float v47 = v47 + *v48;
            int v49 = v46 + 1;
            unint64_t v50 = v14 - (unint64_t)((v46 + 1) * v14);
            if (v45 + 1 == v74) {
              int v51 = v44 + 1;
            }
            else {
              int v51 = v44;
            }
            if (v45 + 1 == v74) {
              int v52 = 0;
            }
            else {
              int v52 = v45 + 1;
            }
            if (v45 + 1 == v74)
            {
              unint64_t v50 = v50 + HIDWORD(v14) - ((v45 + 1) * HIDWORD(v14));
              unint64_t v53 = v12;
            }
            else
            {
              unint64_t v53 = HIDWORD(v14);
            }
            BOOL v54 = v49 == v5;
            if (v49 == v5)
            {
              int v44 = v51;
              int v45 = v52;
              int v46 = 0;
            }
            else
            {
              ++v46;
            }
            if (v49 == v5) {
              unint64_t v55 = v50;
            }
            else {
              unint64_t v55 = 0;
            }
            if (v54) {
              unint64_t v56 = v53;
            }
            else {
              unint64_t v56 = v14;
            }
            v48 += v56 + v55;
          }
          while (v48 != &v32[v86]);
          if (v87) {
            continue;
          }
        }
        else
        {
          float v47 = 0.0;
          if (v87) {
            continue;
          }
        }
        uint64_t v57 = 4 * v14;
        if (v88 != 1)
        {
          int v58 = 0;
          float v59 = 0.0 - v47;
          if (v47 >= 0.0) {
            float v59 = v47;
          }
          if (v59 <= 0.00000011921 || v47 == 0.0) {
            float v61 = 1.0;
          }
          else {
            float v61 = v47;
          }
          char v32 = (float *)(v13 + 4 * (v31 + v85 * v10));
          do
          {
            char v62 = v32;
            if (v8)
            {
              if (v47 == 0.0 || (char v62 = v32, v63 = v8, v59 <= 0.00000011921))
              {
                char v62 = (float *)((char *)v32 + v14 * v71);
              }
              else
              {
                do
                {
                  *char v62 = *v62 / v47;
                  char v62 = (float *)((char *)v62 + v57);
                  --v63;
                }
                while (v63);
              }
            }
            *char v62 = *v62 / v61;
            v32 += v12;
            ++v58;
          }
          while (v58 != v91);
        }
        if (v8)
        {
          float v64 = 0.0 - v47;
          if (v47 >= 0.0) {
            float v64 = v47;
          }
          if (v64 <= 0.00000011921 || v47 == 0.0) {
            float v66 = 1.0;
          }
          else {
            float v66 = v47;
          }
          int v67 = v8;
          do
          {
            *char v32 = *v32 / v66;
            char v32 = (float *)((char *)v32 + v57);
            --v67;
          }
          while (v67);
        }
        float v68 = *v32;
        if (v47 != 0.0)
        {
          float v69 = 0.0 - v47;
          if (v47 >= 0.0) {
            float v69 = v47;
          }
          if (v69 > 0.00000011921) {
            float v68 = v68 / v47;
          }
        }
        *char v32 = v68;
      }
      ++v85;
    }
    while (v85 != v70);
  }
}

void sub_21B8F589C(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6 = *((unsigned int *)a2 + 2);
  uint64_t v7 = *((unsigned int *)a2 + 3);
  unint64_t v8 = *a3;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v8 * v8 != *((_DWORD *)a2 + 4) - 1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndUtils.cpp", 75, (uint64_t)"(c - 1) == (window_size * window_size)", 38, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4)|| ((size_t v10 = v8 * v6, v11 = v8 * v7, v10 == v9) ? (v12 = v11 == HIDWORD(v9)) : (v12 = 0), !v12&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/EndToEndExtraction/src/EndToEndUtils.cpp", 76, (uint64_t)"w8 == w_x8 && h8 == h_x8", 24, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4)))
  {
    abort();
  }
  unint64_t v13 = *a3;
  if (v10 <= v11) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v10;
  }
  int v51 = 0;
  int v52 = 0;
  unint64_t v50 = 0;
  if (v14)
  {
    if ((v14 & 0x8000000000000000) != 0) {
      sub_21B846300();
    }
    unint64_t v50 = operator new(2 * v14);
    int v52 = (char *)v50 + 2 * v14;
    bzero(v50, 2 * v14);
    int v51 = v52;
    int v15 = (char *)operator new(v14);
    int v16 = &v15[v14];
    long long __p = v15;
    unint64_t v55 = &v15[v14];
    bzero(v15, v14);
    unint64_t v17 = 0;
    BOOL v54 = v16;
    do
    {
      *((_WORD *)v50 + v17) = v17 / v13;
      *((unsigned char *)__p + v17) = v17 % v13;
      ++v17;
    }
    while (v14 != v17);
    unint64_t v13 = *a3;
  }
  else
  {
    long long __p = 0;
    BOOL v54 = 0;
    unint64_t v55 = 0;
  }
  uint64_t v58 = 0;
  float v59 = 0;
  long long v56 = *(_OWORD *)a1;
  uint64_t v57 = *(void *)(a1 + 16);
  sub_21B89202C((uint64_t)&v43, &v58, &v56);
  uint64_t v18 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v19 = v43;
    if (!v43) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v19 = v43;
    if (!v43) {
      goto LABEL_31;
    }
  }
  int v20 = v44;
  if (!v44) {
    goto LABEL_25;
  }
  atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v19 = v43;
  uint64_t v21 = v44;
  if (!v44
    || (atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_25:
    if (v49) {
      goto LABEL_26;
    }
LABEL_31:
    *(void *)&long long v56 = 0;
    uint64_t v22 = v45;
    unsigned int v23 = v46;
    unint64_t v24 = HIDWORD(v46);
    if (!v48) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v49) {
    goto LABEL_31;
  }
LABEL_26:
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v19 + 96))(&v56, v19, 1);
  uint64_t v22 = v45;
  unsigned int v23 = v46;
  unint64_t v24 = HIDWORD(v46);
  if (!v48) {
    goto LABEL_37;
  }
LABEL_32:
  if (v22)
  {
    uint64_t v25 = v43;
    uint64_t v26 = v44;
    if (v44)
    {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v25 + 88))(v25, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    uint64_t v22 = v45;
    LODWORD(v24) = HIDWORD(v46);
  }
LABEL_37:
  unsigned int v27 = v47 * v24;
  if (v27 && v23)
  {
    unsigned int v28 = 0;
    uint64_t v29 = v22 + 4 * v27;
    BOOL v30 = (unsigned __int16 *)v50;
    int v31 = (unsigned __int8 *)__p;
    int v32 = *((_DWORD *)a2 + 5);
    int v33 = *((_DWORD *)a2 + 6);
    int v34 = *((_DWORD *)a2 + 7);
    uint64_t v35 = 4 * v47;
    uint64_t v36 = *a2;
    do
    {
      uint64_t v37 = 0;
      uint64_t v38 = v28;
      int v39 = v33 * v30[v28];
      uint64_t v40 = 4 * v23;
      do
      {
        *(_DWORD *)(v22 + 4 * v37) = *(_DWORD *)(v36
                                               + 4
                                               * (v39 + v32 * v30[v37] + v34 * (v31[v37] + v13 * v31[v38])));
        ++v37;
        v40 -= 4;
      }
      while (v40);
      v22 += v35;
      unsigned int v28 = v38 + 1;
    }
    while (v22 != v29);
  }
  uint64_t v41 = v56;
  *(void *)&long long v56 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  int v42 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
}

void sub_21B8F5DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_21B891E68((uint64_t)va);
  sub_21B8F5E7C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21B8F5DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F5E7C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21B8F5EC0(uint64_t *a1@<X0>, int a2@<W1>, float **a3@<X8>, float a4@<S0>)
{
  uint64_t v6 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v8 = *((_DWORD *)a1 + 2);
  unsigned int v7 = *((_DWORD *)a1 + 3);
  uint64_t v108 = 0;
  float32x4_t v109 = 0;
  long long v106 = *(_OWORD *)a1;
  uint64_t v107 = a1[2];
  sub_21B8F681C((uint64_t)&v99, &v108, &v106);
  uint64_t v9 = v109;
  if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = v99;
    if (!v99) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = v99;
    if (!v99) {
      goto LABEL_15;
    }
  }
  size_t v11 = v100;
  if (!v100) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v10 = v99;
  BOOL v12 = v100;
  if (!v100
    || (atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_9:
    if (v105) {
      goto LABEL_10;
    }
LABEL_15:
    *(void *)&long long v106 = 0;
    unint64_t v13 = v101;
    unsigned int v14 = v102;
    unint64_t v15 = HIDWORD(v102);
    if (!v104) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v105) {
    goto LABEL_15;
  }
LABEL_10:
  (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)v10 + 96))(&v106, v10, 0);
  unint64_t v13 = v101;
  unsigned int v14 = v102;
  unint64_t v15 = HIDWORD(v102);
  if (!v104) {
    goto LABEL_21;
  }
LABEL_16:
  if (v13)
  {
    uint64_t v16 = v99;
    unint64_t v17 = v100;
    if (v100)
    {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v16 + 88))(v16, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    unint64_t v13 = v101;
    LODWORD(v15) = HIDWORD(v102);
  }
LABEL_21:
  uint64_t v91 = v103;
  int v18 = v103 * v15;
  if (v18)
  {
    uint64_t v90 = v14;
    if (v14)
    {
      unsigned int v19 = 0;
      uint64_t v89 = &v13[v18];
      unsigned int v95 = v7 - 3;
      unsigned int v96 = v8 - 3;
      float v20 = (float)v8 + -1.0;
      float v21 = (float)v7 + -1.0;
      BOOL v94 = v6;
      do
      {
        uint64_t v22 = v13;
        unsigned int v23 = 0;
        long long v98 = &v13[v90];
        unsigned int v93 = v19 - 1;
        BOOL v92 = v13;
        do
        {
          float v25 = *v22;
          if (*v22 < a4) {
            goto LABEL_28;
          }
          int v26 = *((_DWORD *)a1 + 4);
          int v27 = *((_DWORD *)a1 + 5);
          uint64_t v28 = *a1;
          if (v23 >= 4 && v23 < v96 && v19 >= 4 && v19 < v95)
          {
            uint64_t v29 = 0;
            do
            {
              float v30 = *(float *)(v28
                             + 4
                             * ((*(_DWORD *)((char *)&unk_21B9AF0CC + v29) + v23) * v26
                              + (*(_DWORD *)((char *)&unk_21B9AF0CC + v29 + 4) + v19) * v27));
              BOOL v31 = v30 < v25;
              if (v30 >= v25) {
                break;
              }
              BOOL v32 = v29 == 376;
              v29 += 8;
            }
            while (!v32);
            if (a2)
            {
              unint64_t v33 = a1[2];
              if (HIDWORD(v33) != 1431655765
                || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
              {
                uint64_t v34 = v28 + 4 * (v26 * (v23 - 1) + v27 * v93);
                float v35 = *(float *)(v34 + 4 * HIDWORD(v33));
                float v36 = *(float *)(v34 + 4 * v33);
                float v37 = *(float *)(v34 + 4 * (HIDWORD(v33) + 2 * v33));
                float v38 = *(float *)(v34 + 4 * (v33 + 2 * HIDWORD(v33)));
                float v39 = v38
                    + (float)(v36
                            + (float)((float)(*(float *)(v34 + 4 * (HIDWORD(v33) + v33)) + v35) + v37));
                float v40 = (float)(v37 - v35) / v39;
                if (v40 <= 1.0) {
                  float v41 = (float)(v37 - v35) / v39;
                }
                else {
                  float v41 = 1.0;
                }
                if (v40 >= -1.0) {
                  float v42 = v41;
                }
                else {
                  float v42 = -1.0;
                }
                float v43 = (float)(v38 - v36) / v39;
                if (v43 <= 1.0) {
                  float v44 = (float)(v38 - v36) / v39;
                }
                else {
                  float v44 = 1.0;
                }
                if (v43 >= -1.0) {
                  float v45 = v44;
                }
                else {
                  float v45 = -1.0;
                }
                uint64_t v6 = v94;
                if (v30 >= v25) {
                  goto LABEL_28;
                }
                goto LABEL_70;
              }
              goto LABEL_122;
            }
LABEL_69:
            float v42 = 0.0;
            float v45 = 0.0;
            if (v31) {
              goto LABEL_70;
            }
            goto LABEL_28;
          }
          for (uint64_t i = 0; i != 384; i += 8)
          {
            unsigned int v47 = *(_DWORD *)((char *)&unk_21B9AF0CC + i) + v23;
            unsigned int v48 = *(_DWORD *)((char *)&unk_21B9AF0CC + i + 4) + v19;
            BOOL v49 = v20 < (float)v47 || v21 < (float)v48;
            if (!v49 && *(float *)(v28 + 4 * (v47 * v26 + v48 * v27)) >= v25)
            {
              BOOL v31 = 0;
              if (a2) {
                goto LABEL_65;
              }
              goto LABEL_69;
            }
          }
          BOOL v31 = 1;
          if (!a2) {
            goto LABEL_69;
          }
LABEL_65:
          if (v20 >= (float)(v23 + 1))
          {
            if (v21 < (float)(v19 + 1)) {
              goto LABEL_69;
            }
            if (v20 < (float)(v23 - 1))
            {
              float v42 = 0.0;
              float v45 = 0.0;
              uint64_t v6 = v94;
              if (!v31) {
                goto LABEL_28;
              }
              goto LABEL_70;
            }
            if (v21 < (float)(v19 - 1))
            {
              uint64_t v6 = v94;
              float v42 = 0.0;
              float v45 = 0.0;
              if (!v31) {
                goto LABEL_28;
              }
              goto LABEL_70;
            }
            unint64_t v88 = a1[2];
            if (HIDWORD(v88) != 1431655765
              || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
            {
              uint64_t v76 = v28 + 4 * (v26 * (v23 - 1) + v27 * v93);
              float v77 = *(float *)(v76 + 4 * HIDWORD(v88));
              float v78 = *(float *)(v76 + 4 * v88);
              float v79 = *(float *)(v76 + 4 * (HIDWORD(v88) + 2 * v88));
              float v80 = *(float *)(v76 + 4 * (v88 + 2 * HIDWORD(v88)));
              float v81 = v80
                  + (float)(v78
                          + (float)((float)(*(float *)(v76 + 4 * (HIDWORD(v88) + v88)) + v77) + v79));
              float v82 = (float)(v79 - v77) / v81;
              if (v82 <= 1.0) {
                float v83 = (float)(v79 - v77) / v81;
              }
              else {
                float v83 = 1.0;
              }
              if (v82 >= -1.0) {
                float v42 = v83;
              }
              else {
                float v42 = -1.0;
              }
              float v84 = (float)(v80 - v78) / v81;
              if (v84 <= 1.0) {
                float v85 = (float)(v80 - v78) / v81;
              }
              else {
                float v85 = 1.0;
              }
              if (v84 >= -1.0) {
                float v45 = v85;
              }
              else {
                float v45 = -1.0;
              }
              uint64_t v6 = v94;
              if (!v31) {
                goto LABEL_28;
              }
LABEL_70:
              float v50 = v42 + (float)v23;
              float v51 = v45 + (float)v19;
              unint64_t v53 = v6[1];
              unint64_t v52 = (unint64_t)v6[2];
              if ((unint64_t)v53 < v52)
              {
                *unint64_t v53 = v50;
                v53[1] = v51;
                unint64_t v24 = v53 + 2;
                goto LABEL_27;
              }
              BOOL v54 = *v6;
              uint64_t v55 = (char *)v53 - (char *)*v6;
              uint64_t v56 = v55 >> 3;
              unint64_t v57 = (v55 >> 3) + 1;
              if (v57 >> 61) {
                sub_21B846300();
              }
              uint64_t v58 = v52 - (void)v54;
              if (v58 >> 2 > v57) {
                unint64_t v57 = v58 >> 2;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                if (v59 >> 61) {
                  sub_21B845A48();
                }
                unint64_t v60 = operator new(8 * v59);
                float v61 = (float *)&v60[8 * v56];
                *float v61 = v50;
                v61[1] = v51;
                char v62 = (char *)((char *)v53 - (char *)v54);
                if (v53 != v54)
                {
LABEL_80:
                  int v63 = v62 - 8;
                  if ((unint64_t)(v62 - 8) < 0x58)
                  {
                    float v64 = v61;
                    uint64_t v6 = v94;
                    goto LABEL_89;
                  }
                  unint64_t v66 = (char *)v53 - v60 - v55;
                  float v64 = v61;
                  uint64_t v6 = v94;
                  if (v66 < 0x20) {
                    goto LABEL_125;
                  }
                  uint64_t v67 = ((unint64_t)v63 >> 3) + 1;
                  uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
                  float v69 = &v53[v68 / 0xFFFFFFFFFFFFFFFCLL];
                  float v64 = &v61[v68 / 0xFFFFFFFFFFFFFFFCLL];
                  int v70 = &v60[8 * v56 - 16];
                  uint64_t v71 = v53 - 4;
                  uint64_t v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v73 = *(_OWORD *)v71;
                    *(v70 - 1) = *((_OWORD *)v71 - 1);
                    _OWORD *v70 = v73;
                    v70 -= 2;
                    v71 -= 8;
                    v72 -= 4;
                  }
                  while (v72);
                  unint64_t v53 = v69;
                  if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_125:
                    do
                    {
LABEL_89:
                      uint64_t v74 = *((void *)v53 - 1);
                      v53 -= 2;
                      *((void *)v64 - 1) = v74;
                      v64 -= 2;
                    }
                    while (v53 != v54);
                  }
                  unint64_t v53 = *v6;
                  char v75 = (float *)&v60[8 * v59];
                  unint64_t v24 = v61 + 2;
                  *uint64_t v6 = v64;
                  v6[1] = v61 + 2;
                  v6[2] = v75;
                  if (v53) {
LABEL_91:
                  }
                    operator delete(v53);
LABEL_27:
                  v6[1] = v24;
                  goto LABEL_28;
                }
              }
              else
              {
                unint64_t v60 = 0;
                float v61 = (float *)(8 * v56);
                *float v61 = v50;
                v61[1] = v51;
                char v62 = (char *)((char *)v53 - (char *)v54);
                if (v53 != v54) {
                  goto LABEL_80;
                }
              }
              uint64_t v6 = v94;
              int v65 = (float *)&v60[8 * v59];
              unint64_t v24 = v61 + 2;
              *BOOL v94 = v61;
              v94[1] = v61 + 2;
              v94[2] = v65;
              if (v53) {
                goto LABEL_91;
              }
              goto LABEL_27;
            }
LABEL_122:
            abort();
          }
          float v42 = 0.0;
          float v45 = 0.0;
          if (v31) {
            goto LABEL_70;
          }
LABEL_28:
          ++v22;
          ++v23;
        }
        while (v22 != v98);
        unint64_t v13 = &v92[v91];
        ++v19;
      }
      while (v13 != v89);
    }
  }
  uint64_t v86 = v106;
  *(void *)&long long v106 = 0;
  if (v86) {
    (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
  }
  char v87 = v100;
  if (v100)
  {
    if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_21B8F6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21B8E0468((uint64_t)va);
  uint64_t v16 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(a1);
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F681C(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = &v5->__shared_owners_;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)__n128 result = v4;
    *(void *)(result + 8) = v5;
    long long v7 = *a3;
    *(void *)(result + 32) = *((void *)a3 + 2);
    *(_OWORD *)(result + 16) = v7;
    if (v4)
    {
      unsigned int v8 = (_WORD *)(result + 40);
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_7;
    }
LABEL_12:
    *(_WORD *)(result + 40) = 0;
    *(unsigned char *)(result + 41) = 0;
    return result;
  }
  *(void *)__n128 result = v4;
  *(void *)(result + 8) = 0;
  long long v9 = *a3;
  *(void *)(result + 32) = *((void *)a3 + 2);
  *(_OWORD *)(result + 16) = v9;
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v8 = (_WORD *)(result + 40);
LABEL_7:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  unsigned __int8 v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v11 = 0;
  }
  __int16 v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0) {
    __int16 v12 = 0;
  }
  *unsigned int v8 = v12 & 0xFF00 | v11;
  return v3;
}

void sub_21B8F6944(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8F6998(void *a1)
{
  *a1 = &unk_26CB9D9C0;
  operator new();
}

void sub_21B8F6A48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  MEMORY[0x21D495F30](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F6A80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

uint64_t sub_21B8F6AAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))();
}

void sub_21B8F6AD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  unint64_t v8 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8));
  unint64_t v9 = v8;
  uint64_t v10 = *a3;
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2);
  unint64_t v12 = vcvtps_u32_f32((float)v11 / (float)v8);
  if (!v12) {
    return;
  }
  if (v11 % v8) {
    unint64_t v13 = v11 % v8;
  }
  else {
    unint64_t v13 = v8;
  }
  unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2);
  uint64_t v21 = v10;
  unint64_t v14 = sub_21B8EC14C(&v20, 0, v13);
  sub_21B8FBB28((unsigned int *)(a2 + 32), v14, v15, (float **)&__p);
  (*(void (**)(unint64_t *__return_ptr))(***(void ***)(a1 + 8) + 40))(&v20);
  if ((sub_21B9145D4((char **)a4, (uint64_t)&v20) & 1) == 0
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/ATUDescriptorExtractor.cpp", 78, (uint64_t)"append_ret", 10, (uint64_t)"Append descriptors failed", 25, (void (*)(void **))sub_21B984AC4))
  {
LABEL_21:
    abort();
  }
  if (v22 != -1) {
    ((void (*)(char *, unint64_t *))off_26CB9DA00[v22])(&v25, &v20);
  }
  if (__p)
  {
    unint64_t v24 = __p;
    operator delete(__p);
  }
  unint64_t v16 = v12 - 1;
  if (v16)
  {
    while (1)
    {
      uint64_t v17 = *a3;
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2);
      uint64_t v21 = v17;
      unint64_t v18 = sub_21B8EC14C(&v20, v13, v9);
      sub_21B8FBB28((unsigned int *)(a2 + 32), v18, v19, (float **)&__p);
      (*(void (**)(unint64_t *__return_ptr))(***(void ***)(a1 + 8) + 40))(&v20);
      if ((sub_21B9145D4((char **)a4, (uint64_t)&v20) & 1) == 0
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/ATUDescriptorExtractor.cpp", 78, (uint64_t)"append_ret", 10, (uint64_t)"Append descriptors failed", 25, (void (*)(void **))sub_21B984AC4))
      {
        break;
      }
      if (v22 != -1) {
        ((void (*)(char *, unint64_t *))off_26CB9DA00[v22])(&v25, &v20);
      }
      if (__p)
      {
        unint64_t v24 = __p;
        operator delete(__p);
      }
      v13 += v9;
      if (!--v16) {
        return;
      }
    }
    goto LABEL_21;
  }
}

void sub_21B8F6DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_21B863104(v16);
    _Unwind_Resume(a1);
  }
  sub_21B863104(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F6E74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9D9C0;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_21B8F6EC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9D9C0;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x21D495F30);
}

void sub_21B8F6F3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8F6F5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DA30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F6FB0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21B8F6FD8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

void sub_21B8F706C(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26CB9DA80;
  uint64_t v3 = a1 + 8;
  sub_21B8FF734(a2, a1 + 8);
  *(void *)(a1 + 176) = 0;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 127);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 112);
  }
  if (v4 >= 7)
  {
    if (v5 >= 0) {
      uint64_t v6 = a1 + 104;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 104);
    }
    uint64_t v7 = v4 + v6;
    int v8 = *(_DWORD *)(v7 - 7);
    int v9 = *(_DWORD *)(v7 - 4);
    if (v8 == 1853186606 && v9 == 1701602414)
    {
      v11[0] = 0;
      char v12 = 0;
      sub_21B8F97F8((uint64_t)v13, v3, (uint64_t)v11);
      sub_21B91F064((uint64_t)v13);
    }
  }
  v11[0] = 0;
  char v12 = 0;
  sub_21B8F934C((uint64_t)v13, v3, (uint64_t)v11);
  sub_21B91EC88((uint64_t)v13);
}

void sub_21B8F7DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (*(unsigned char *)(v47 + 224) && *(char *)(v47 + 223) < 0) {
    operator delete(*v51);
  }
  if (*(unsigned char *)(v47 + 176) && *(char *)(v47 + 175) < 0) {
    operator delete(*v50);
  }
  *unint64_t v52 = v48;
  sub_21B848B68(v49);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v47);
  operator delete(v55);
  sub_21B8E2360((uint64_t *)(v53 - 128));
  sub_21B8F9BE0((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  sub_21B8E7600(v45);
  sub_21B8F7FAC(v46);
  _Unwind_Resume(a1);
}

uint64_t sub_21B8F7FAC(uint64_t a1)
{
  sub_21B8E5D7C(a1 + 128, *(void ***)(a1 + 144));
  uint64_t v2 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_21B8F8054(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 176) + 8);
}

uint64_t sub_21B8F806C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

BOOL sub_21B8F8074(void *a1, void *a2)
{
  uint64_t v3 = a1 + 17;
  int v4 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v5 = (char *)operator new(0x28uLL);
  unint64_t v13 = v5 + 40;
  unint64_t v14 = v5 + 40;
  *(_DWORD *)int v5 = 1;
  *(void *)(v5 + 4) = *a2;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 12) = v6;
  *(void *)(v5 + 28) = 0x600000001;
  *((_DWORD *)v5 + 9) = v4;
  char v12 = v5;
  LOBYTE(__p) = 0;
  char v17 = 0;
  uint64_t v7 = sub_21B919A54(v3, (unint64_t)&v12);
  if (v17)
  {
    int v8 = (void **)__p;
    if (__p)
    {
      int v9 = v16;
      uint64_t v10 = __p;
      if (v16 != __p)
      {
        do
        {
          if (*((char *)v9 - 1) < 0) {
            operator delete(*(v9 - 3));
          }
          v9 -= 3;
        }
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v16 = v8;
      operator delete(v10);
    }
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  return v7 != 0;
}

void sub_21B8F818C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E7A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8F81A0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 == (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    char v12 = 0;
  }
  else
  {
    unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    sub_21B8FBFE0(a3, a4, v13, v83);
    char v12 = *(void **)v83;
    a4 = *(void **)v83;
  }
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = (char *)operator new(0x28uLL);
  *(void *)&v83[8] = v16 + 40;
  *(void *)&v83[16] = v16 + 40;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 4) = v15;
  *(void *)&long long v17 = 0x100000001;
  *((void *)&v17 + 1) = 0x100000001;
  *(_OWORD *)(v16 + 12) = v17;
  *(void *)(v16 + 28) = 0x600000001;
  *((_DWORD *)v16 + 9) = v14;
  *(void *)float v83 = v16;
  v83[24] = 0;
  LOBYTE(v85) = 0;
  unint64_t v18 = sub_21B919A54((void *)(a1 + 136), (unint64_t)v83);
  if (!v18) {
    sub_21B846070("unordered_map::at: key not found");
  }
  if (*((char *)v18 + 95) < 0)
  {
    sub_21B846188(&__dst, (void *)v18[9], v18[10]);
  }
  else
  {
    long long __dst = *(_OWORD *)(v18 + 9);
    uint64_t v116 = v18[11];
  }
  if ((_BYTE)v85)
  {
    unsigned int v19 = *(void ***)&v83[24];
    if (*(void *)&v83[24])
    {
      unint64_t v20 = (void **)v84[0];
      uint64_t v21 = *(void **)&v83[24];
      if (v84[0] != *(void **)&v83[24])
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        uint64_t v21 = *(void **)&v83[24];
      }
      v84[0] = v19;
      operator delete(v21);
    }
  }
  if (*(void *)v83)
  {
    *(void *)&v83[8] = *(void *)v83;
    operator delete(*(void **)v83);
  }
  uint64_t v22 = *(void *)(a1 + 176);
  *(void *)float v83 = &unk_26CB9EF00;
  if (SHIBYTE(v116) < 0)
  {
    sub_21B846188(&v83[8], (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v83[8] = __dst;
    *(void *)&v83[24] = v116;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v22 + 16) + 48))(&v112);
  *(void *)float v83 = &unk_26CB9EF00;
  if ((v83[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v83[8]);
    if (!v113) {
      goto LABEL_27;
    }
  }
  else if (!v113)
  {
    goto LABEL_27;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/ATUDescriptorModel.cpp", 94, (uint64_t)"ret_config == kml::MLResultCode::NoError", 40, (uint64_t)"Unable to set model configuration", 33, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
LABEL_27:
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  LODWORD(v97) = 65;
  v83[0] = 0;
  LOBYTE(v87) = 0;
  *(_OWORD *)int v70 = xmmword_21B9AF350;
  *(_DWORD *)&v70[16] = v23;
  v76[0] = 0;
  v76[20] = 0;
  sub_21B91C3BC((uint64_t)&v100, (uint64_t)a4, (long long *)v70, (long long *)v76, (int *)&v97, (uint64_t)v83);
  if ((_BYTE)v87)
  {
    unint64_t v24 = *(std::__shared_weak_count **)&v83[16];
    if (*(void *)&v83[16])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v83[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  long long v97 = 0;
  long long v98 = 0;
  unint64_t v99 = 0;
  *(void *)int v70 = &unk_26CB954E0;
  sub_21B8F2D38(a2, (uint64_t)&v70[8]);
  long long v25 = *(_OWORD *)&v70[8];
  *(void *)uint64_t v76 = &unk_26CB954E0;
  *(_OWORD *)&v76[8] = *(_OWORD *)&v70[8];
  *(_OWORD *)&v70[8] = 0uLL;
  *(_OWORD *)&v76[24] = *(_OWORD *)&v70[24];
  *(_OWORD *)&v76[38] = *(_OWORD *)&v70[38];
  int v82 = 2;
  unsigned int v96 = -1;
  *(void *)float v83 = &unk_26CB954E0;
  if (*((void *)&v25 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    int v26 = *(void **)&v76[40];
    int v27 = *(_DWORD *)&v76[48];
    __int16 v28 = *(_WORD *)&v76[52];
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    int v26 = *(void **)&v76[40];
    int v27 = *(_DWORD *)&v76[48];
    __int16 v28 = *(_WORD *)&v76[52];
  }
  *(_OWORD *)&v83[8] = v25;
  *(void *)&v83[24] = *(void *)&v76[24];
  LODWORD(v84[0]) = *(_DWORD *)&v76[32];
  v84[1] = v26;
  int v85 = v27;
  __int16 v86 = v28;
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v25 + 1) + 16))(*((void *)&v25 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    unsigned int v96 = 2;
    uint64_t v29 = v98;
    if ((unint64_t)v98 < v99) {
      goto LABEL_37;
    }
LABEL_41:
    BOOL v31 = sub_21B8F1B28((char **)&v97, (uint64_t)v83);
    goto LABEL_42;
  }
  unsigned int v96 = 2;
  uint64_t v29 = v98;
  if ((unint64_t)v98 >= v99) {
    goto LABEL_41;
  }
LABEL_37:
  *uint64_t v29 = 0;
  *((_DWORD *)v29 + 30) = -1;
  unsigned int v30 = v96;
  if (v96 != -1)
  {
    ((void (*)(void *, char *, unsigned char *))off_26CB9DB80[v96])(v69, v29, v83);
    *((_DWORD *)v29 + 30) = v30;
  }
  BOOL v31 = v29 + 128;
LABEL_42:
  long long v98 = v31;
  if (v96 != -1) {
    ((void (*)(void *, unsigned char *))off_26CB9DB68[v96])(v69, v83);
  }
  unsigned int v96 = -1;
  if (v82 != -1) {
    ((void (*)(void *, unsigned char *))off_26CB9DB68[v82])(v69, v76);
  }
  int v82 = -1;
  BOOL v32 = *(std::__shared_weak_count **)&v70[16];
  if (*(void *)&v70[16]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  *(_OWORD *)int v70 = v100;
  *(_OWORD *)&v70[16] = v101;
  *(_OWORD *)&v70[32] = v102;
  *(_DWORD *)&v70[48] = v103;
  LOBYTE(v71) = 0;
  char v75 = 0;
  if (v111)
  {
    uint64_t v71 = &unk_26CB954E0;
    uint64_t v33 = v104;
    uint64_t v34 = v105;
    if (v105)
    {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v35 = v108;
      int v36 = v109;
      __int16 v37 = v110;
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v35 = v108;
      int v36 = v109;
      __int16 v37 = v110;
    }
    uint64_t v72 = v33;
    long long v73 = v34;
    *(void *)uint64_t v74 = v106;
    *(_DWORD *)&v74[8] = v107;
    *(void *)&v74[16] = v35;
    *(_DWORD *)&v74[24] = v36;
    *(_WORD *)&v74[28] = v37;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    char v75 = 1;
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v70;
    *(_OWORD *)&v76[16] = *(_OWORD *)&v70[16];
    *(_OWORD *)&v76[32] = *(_OWORD *)&v70[32];
    *(_DWORD *)&v76[48] = *(_DWORD *)&v70[48];
    uint64_t v40 = v72;
    float v41 = v73;
    float v77 = &unk_26CB954E0;
    uint64_t v78 = v72;
    float v79 = v73;
    uint64_t v72 = 0;
    long long v73 = 0;
    *(_OWORD *)&v80[14] = *(_OWORD *)&v74[14];
    *(_OWORD *)float v80 = *(_OWORD *)v74;
    char v81 = 1;
    int v82 = 1;
    unsigned int v96 = -1;
    int v85 = *(_DWORD *)&v70[48];
    *(_OWORD *)&v83[16] = *(_OWORD *)&v70[16];
    *(_OWORD *)float v84 = *(_OWORD *)&v70[32];
    *(_OWORD *)float v83 = *(_OWORD *)v70;
    char v95 = 0;
    char v87 = &unk_26CB954E0;
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v42 = *(void *)&v80[16];
      int v43 = *(_DWORD *)&v80[24];
      __int16 v44 = *(_WORD *)&v80[28];
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v42 = *(void *)&v80[16];
      int v43 = *(_DWORD *)&v80[24];
      __int16 v44 = *(_WORD *)&v80[28];
    }
    uint64_t v88 = v40;
    uint64_t v89 = v41;
    uint64_t v90 = *(void *)v80;
    int v91 = *(_DWORD *)&v80[8];
    uint64_t v92 = v42;
    int v93 = v43;
    __int16 v94 = v44;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    char v95 = 1;
    unsigned int v96 = 1;
    float v38 = v98;
    if ((unint64_t)v98 < v99)
    {
LABEL_66:
      char *v38 = 0;
      *((_DWORD *)v38 + 30) = -1;
      unsigned int v45 = v96;
      if (v96 != -1)
      {
        ((void (*)(void *, char *, unsigned char *))off_26CB9DB80[v96])(v69, v38, v83);
        *((_DWORD *)v38 + 30) = v45;
      }
      long long v98 = v38 + 128;
      uint64_t v39 = v96;
      if (v96 != -1) {
        goto LABEL_69;
      }
      goto LABEL_70;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v76 = v100;
    *(_OWORD *)&v76[16] = v101;
    *(_OWORD *)&v76[32] = v102;
    *(_DWORD *)&v76[48] = v103;
    LOBYTE(v77) = 0;
    char v81 = 0;
    int v82 = 1;
    int v85 = v103;
    *(_OWORD *)float v83 = v100;
    *(_OWORD *)&v83[16] = v101;
    *(_OWORD *)float v84 = v102;
    LOBYTE(v87) = 0;
    char v95 = 0;
    unsigned int v96 = 1;
    float v38 = v98;
    if ((unint64_t)v98 < v99) {
      goto LABEL_66;
    }
  }
  long long v98 = sub_21B8F1B28((char **)&v97, (uint64_t)v83);
  uint64_t v39 = v96;
  if (v96 != -1) {
LABEL_69:
  }
    ((void (*)(void *, unsigned char *))off_26CB9DB68[v39])(v69, v83);
LABEL_70:
  unsigned int v96 = -1;
  if (v82 != -1) {
    ((void (*)(void *, unsigned char *))off_26CB9DB68[v82])(v69, v76);
  }
  int v82 = -1;
  if (v75)
  {
    uint64_t v46 = v73;
    if (v73)
    {
      if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v69[0] = &unk_26CB9EFA0;
  v69[1] = a5;
  uint64_t v47 = *(unsigned __int8 *)(a1 + 184);
  kdebug_trace();
  if (v47) {
    uint64_t v48 = v69;
  }
  else {
    uint64_t v48 = 0;
  }
  sub_21B93AC30(*(void *)(*(void *)(a1 + 176) + 16), (uint64_t *)&v97, (uint64_t)v48, v47, (uint64_t)v83);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kdebug_trace();
  if (v83[8])
  {
    sub_21B8E84B4((uint64_t *)v70, "Error:");
    int v62 = *(char *)(*(void *)&v83[16] + 23);
    if (v62 >= 0) {
      int v63 = *(const std::string::value_type **)&v83[16];
    }
    else {
      int v63 = **(const std::string::value_type ***)&v83[16];
    }
    if (v62 >= 0) {
      std::string::size_type v64 = *(unsigned __int8 *)(*(void *)&v83[16] + 23);
    }
    else {
      std::string::size_type v64 = *(void *)(*(void *)&v83[16] + 8);
    }
    int v65 = std::string::append((std::string *)v70, v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    *(void *)&v76[16] = *((void *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v76 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (v76[23] >= 0) {
      uint64_t v67 = v76;
    }
    else {
      uint64_t v67 = *(unsigned char **)v76;
    }
    if (v76[23] >= 0) {
      uint64_t v68 = v76[23];
    }
    else {
      uint64_t v68 = *(void *)&v76[8];
    }
    sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/ATUDescriptorModel.cpp", 123, (uint64_t)&unk_21B997215, 0, (uint64_t)v67, v68, (void (*)(void **))sub_21B984AC4);
    if ((v76[23] & 0x80000000) != 0) {
      operator delete(*(void **)v76);
    }
    if ((v70[23] & 0x80000000) != 0) {
      operator delete(*(void **)v70);
    }
    abort();
  }
  sub_21B8FA6A8((long long *)v84[0], (unint64_t)a3, a6);
  if ((_BYTE)v87)
  {
    uint64_t v49 = (char *)v84[0];
    if (v84[0])
    {
      float v50 = (char *)v84[1];
      float v51 = v84[0];
      if (v84[1] != v84[0])
      {
        do
        {
          unint64_t v52 = v50 - 128;
          uint64_t v53 = *((unsigned int *)v50 - 2);
          if (v53 != -1) {
            ((void (*)(unsigned char *, char *))off_26CB9DB98[v53])(v76, v50 - 128);
          }
          *((_DWORD *)v50 - 2) = -1;
          v50 -= 128;
        }
        while (v52 != v49);
        float v51 = v84[0];
      }
      v84[1] = v49;
      operator delete(v51);
    }
  }
  *(void *)float v83 = &unk_26CB95650;
  BOOL v54 = *(std::__shared_weak_count **)&v83[24];
  if (*(void *)&v83[24]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v83[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    uint64_t v55 = (char *)v97;
    if (!v97) {
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v55 = (char *)v97;
    if (!v97) {
      goto LABEL_99;
    }
  }
  uint64_t v56 = v98;
  unint64_t v57 = v55;
  if (v98 != v55)
  {
    do
    {
      uint64_t v58 = v56 - 128;
      uint64_t v59 = *((unsigned int *)v56 - 2);
      if (v59 != -1) {
        ((void (*)(unsigned char *, char *))off_26CB9DB68[v59])(v83, v56 - 128);
      }
      *((_DWORD *)v56 - 2) = -1;
      v56 -= 128;
    }
    while (v58 != v55);
    unint64_t v57 = v97;
  }
  long long v98 = v55;
  operator delete(v57);
LABEL_99:
  if (v111 && (unint64_t v60 = v105) != 0 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    float64x2_t v112 = &unk_26CB95650;
    float v61 = v114;
    if (!v114)
    {
LABEL_104:
      if ((SHIBYTE(v116) & 0x80000000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }
  }
  else
  {
    float64x2_t v112 = &unk_26CB95650;
    float v61 = v114;
    if (!v114) {
      goto LABEL_104;
    }
  }
  if (atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_104;
  }
  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
  std::__shared_weak_count::__release_weak(v61);
  if (SHIBYTE(v116) < 0) {
LABEL_105:
  }
    operator delete((void *)__dst);
LABEL_106:
  if (v12) {
    operator delete(v12);
  }
}

void sub_21B8F8F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_21B8EBA48((uint64_t)&a43);
  sub_21B8EBB5C(&a59);
  sub_21B842A94((uint64_t)&a62);
  sub_21B83D090((void *)(v63 - 176));
  if (*(char *)(v63 - 121) < 0)
  {
    operator delete(*(void **)(v63 - 144));
    if (v62) {
      goto LABEL_3;
    }
  }
  else if (v62)
  {
LABEL_3:
    operator delete(v62);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B8F9008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_21B8F9018()
{
}

void sub_21B8F9020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21B8F8FD8);
}

void sub_21B8F903C()
{
}

void sub_21B8F9044()
{
  if (v0) {
    JUMPOUT(0x21B8F8FECLL);
  }
  JUMPOUT(0x21B8F9000);
}

void sub_21B8F9050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_21B8E7A28((uint64_t)&a43);
  if (v43) {
    JUMPOUT(0x21B8F8FECLL);
  }
  JUMPOUT(0x21B8F9000);
}

void sub_21B8F9070(uint64_t a1)
{
  sub_21B8F91E0(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B8F90A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8F90C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F911C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21B8F9144(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B8F9164(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DB28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F91B8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21B8F91E0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9DA80;
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    int v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  sub_21B8E5D7C(a1 + 136, *(void ***)(a1 + 152));
  int v5 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_17:
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_18;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_17;
  }
LABEL_13:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_21B8F934C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v7[0]) = 0;
  char v9 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v7, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
      uint64_t v8 = *(void *)(a3 + 16);
    }
    char v9 = 1;
    LOBYTE(__dst) = 0;
    char v33 = 0;
    if (SHIBYTE(v8) < 0)
    {
      sub_21B846188(&__dst, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v7;
      uint64_t v32 = v8;
    }
    char v33 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v33 = 0;
  }
  sub_21B8F9D40((uint64_t)v34, a2, (uint64_t)&__dst);
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)__dst);
  }
  LOBYTE(__p[0]) = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  __int16 v30 = 0;
  LODWORD(v29) = *(_DWORD *)(a2 + 120);
  uint64_t v10 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v11, v34);
  uint64_t v10 = &unk_26CB9EF20;
  sub_21B8E24C8((uint64_t)&v22, (uint64_t)__p);
  uint64_t v25 = v29;
  __int16 v26 = v30;
  if (v28 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_21B848B68((uint64_t)v34);
  uint64_t v5 = v11;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = v14;
  long long v13 = 0uLL;
  *(_OWORD *)(a1 + 48) = v15;
  *(void *)(a1 + 64) = v16;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  *(_OWORD *)(a1 + 72) = v17;
  *(void *)(a1 + 88) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v21)
  {
    *(_OWORD *)(a1 + 96) = v19;
    *(void *)(a1 + 112) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF20;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 128) = v22;
    *(void *)(a1 + 144) = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
    *(void *)(a1 + 160) = v25;
    *(_WORD *)(a1 + 168) = v26;
    uint64_t v10 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v11);
    if (!v9) {
      goto LABEL_24;
    }
  }
  else
  {
    *(void *)(a1 + 160) = v25;
    *(_WORD *)(a1 + 168) = v26;
    uint64_t v10 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v11);
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
LABEL_24:
  *(void *)a1 = &unk_26CB9DBC0;
  return a1;
}

void sub_21B8F965C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (*(unsigned char *)(v41 - 200) && *(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F96E0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B8F975C(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B8F97F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v9[0]) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v9, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)char v9 = *(_OWORD *)a3;
      uint64_t v10 = *(void *)(a3 + 16);
    }
    char v11 = 1;
    LOBYTE(__dst) = 0;
    char v41 = 0;
    if (SHIBYTE(v10) < 0)
    {
      sub_21B846188(&__dst, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v9;
      uint64_t v40 = v10;
    }
    char v41 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v41 = 0;
  }
  sub_21B8F9D40((uint64_t)v42, a2, (uint64_t)&__dst);
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)__dst);
  }
  if (*(_DWORD *)(a2 + 120)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/ATUDescriptorModelDefinition.cpp", 76, (uint64_t)"param.device == DeviceType::Any", 31, (uint64_t)"Only DeviceType::Any supported for EspressoV2", 45, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  LOBYTE(v31) = 0;
  char v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  LOBYTE(__p) = 0;
  char v38 = 0;
  int v12 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v13, v42);
  int v12 = &unk_26CB9EF78;
  sub_21B8F1420(&v24, &v31);
  if (v38 && v37 < 0) {
    operator delete(__p);
  }
  if (v33 && v32 < 0) {
    operator delete((void *)v31);
  }
  sub_21B848B68((uint64_t)v42);
  uint64_t v5 = v13;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 24) = v15;
  *(void *)(a1 + 40) = v16;
  long long v15 = 0uLL;
  *(_OWORD *)(a1 + 48) = v17;
  *(void *)(a1 + 64) = v18;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  *(_OWORD *)(a1 + 72) = v19;
  *(void *)(a1 + 88) = v20;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v23)
  {
    *(_OWORD *)(a1 + 96) = v21;
    *(void *)(a1 + 112) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF78;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  int v6 = v26;
  if (v26)
  {
    *(_OWORD *)(a1 + 128) = v24;
    *(void *)(a1 + 144) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
  }
  long long v7 = v27;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = v7;
  *(unsigned char *)(a1 + 200) = 0;
  if (v30)
  {
    *(_OWORD *)(a1 + 176) = v28;
    *(void *)(a1 + 192) = v29;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    *(unsigned char *)(a1 + 200) = 1;
  }
  int v12 = &unk_26CB9EF78;
  if (v6 && SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  int v12 = &unk_26CB9F080;
  sub_21B848B68((uint64_t)&v13);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  *(void *)a1 = &unk_26CB9DBE8;
  return a1;
}

void sub_21B8F9B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (*(unsigned char *)(v42 - 184) && *(char *)(v42 - 185) < 0) {
    operator delete(*(void **)(v42 - 208));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8F9BE0(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B8F9C80(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

void sub_21B8F9D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_21B846188(&__dst, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long __dst = *(_OWORD *)(a2 + 24);
    uint64_t v66 = *(void *)(a2 + 40);
  }
  char v67 = 1;
  int v68 = 17;
  char v69 = 1;
  int v70 = 1;
  char v71 = 1;
  char v72 = 0;
  char v73 = 0;
  char v74 = 0;
  char v75 = 0;
  int v76 = 1;
  char v77 = 1;
  int v78 = 1;
  char v79 = 1;
  char v80 = 1;
  LOBYTE(v81[0]) = 0;
  char v83 = 0;
  LOBYTE(v84[0]) = 0;
  char v86 = 0;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_21B846188(v43, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)uint64_t v43 = *(_OWORD *)(a2 + 48);
    uint64_t v44 = *(void *)(a2 + 64);
  }
  char v45 = 1;
  int v46 = 65;
  char v47 = 1;
  int v48 = 1;
  char v49 = 1;
  int v50 = 1;
  char v51 = 1;
  int v52 = 1;
  char v53 = 1;
  int v54 = 6;
  char v55 = 1;
  char v56 = 0;
  char v57 = 0;
  char v58 = 1;
  LOBYTE(v59[0]) = 0;
  char v61 = 0;
  LOBYTE(v62[0]) = 0;
  char v64 = 0;
  sub_21B847590((char *)v25, &__dst);
  sub_21B847590((char *)&__p, (long long *)v43);
  sub_21B8E35D8((char **)&v23, (uint64_t)v25, 2uLL);
  if (!v42) {
    goto LABEL_11;
  }
  if (v41 != v40)
  {
    if (v41) {
      (*(void (**)(void))(*v41 + 40))();
    }
LABEL_11:
    if (!v39) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  (*(void (**)(void *))(v40[0] + 32))(v40);
  if (!v39) {
    goto LABEL_18;
  }
LABEL_12:
  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void))(*v38 + 40))();
  }
LABEL_18:
  if (v36 && v35 < 0) {
    operator delete(__p);
  }
  if (!v33)
  {
LABEL_25:
    if (!v30) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
  if (v32 != v31)
  {
    if (v32) {
      (*(void (**)(void))(*v32 + 40))();
    }
    goto LABEL_25;
  }
  (*(void (**)(void *))(v31[0] + 32))(v31);
  if (!v30) {
    goto LABEL_32;
  }
LABEL_26:
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void))(*v29 + 40))();
  }
LABEL_32:
  if (v27 && SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (*(char *)(a2 + 95) < 0)
  {
    sub_21B846188(v25, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)(a2 + 72);
    uint64_t v26 = *(void *)(a2 + 88);
  }
  unsigned __int8 v27 = 1;
  int v6 = operator new(0x20uLL);
  long long v7 = v6;
  uint64_t v20 = v6;
  long long v21 = (void **)v6;
  uint64_t v8 = (void **)(v6 + 32);
  uint64_t v22 = v6 + 32;
  *int v6 = 0;
  unsigned char v6[24] = 0;
  if (SHIBYTE(v26) < 0)
  {
    sub_21B846188(v6, v25[0], (unint64_t)v25[1]);
    int v9 = v27;
    v7[24] = 1;
    long long v21 = v8;
    if (v9 && SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
  }
  else
  {
    *(_OWORD *)int v6 = *(_OWORD *)v25;
    *((void *)v6 + 2) = v26;
    unsigned char v6[24] = 1;
    long long v21 = (void **)(v6 + 32);
  }
  sub_21B917124(a2 + 128, (uint64_t)v25);
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (!*(unsigned char *)(a3 + 24))
  {
    a3 = a2 + 96;
    if (*(char *)(a2 + 119) < 0)
    {
      uint64_t v10 = (unint64_t *)(a2 + 104);
      goto LABEL_49;
    }
LABEL_47:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
    *(void *)(a1 + 32) = *(void *)(a3 + 16);
    goto LABEL_50;
  }
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_47;
  }
  uint64_t v10 = (unint64_t *)(a3 + 8);
LABEL_49:
  sub_21B846188((unsigned char *)(a1 + 16), *(void **)a3, *v10);
LABEL_50:
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21B847400((void *)(a1 + 40), (uint64_t)v23, (uint64_t)v24, 0xCF3CF3CF3CF3CF3DLL * ((v24 - (unsigned char *)v23) >> 3));
  sub_21B847980((void *)(a1 + 64), (uint64_t *)&v20);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_21B847B14((char *)(a1 + 88), (uint64_t)v25[0], (uint64_t)v25[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v25[1] - (char *)v25[0]) >> 3));
  *(unsigned char *)(a1 + 112) = 1;
  char v11 = (void **)v25[0];
  if (v25[0])
  {
    int v12 = (void **)v25[1];
    uint64_t v13 = v25[0];
    if (v25[1] != v25[0])
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = v25[0];
    }
    v25[1] = v11;
    operator delete(v13);
  }
  int v14 = (void **)v20;
  if (v20)
  {
    long long v15 = v21;
    uint64_t v16 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((unsigned char *)v15 - 8) && *((char *)v15 - 9) < 0) {
          operator delete(*(v15 - 4));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v20;
    }
    long long v21 = v14;
    operator delete(v16);
  }
  long long v17 = (char *)v23;
  if (v23)
  {
    uint64_t v18 = v24;
    long long v19 = v23;
    if (v24 != v23)
    {
      do
      {
        v18 -= 168;
        sub_21B847844((uint64_t)v18);
      }
      while (v18 != v17);
      long long v19 = v23;
    }
    long long v24 = v17;
    operator delete(v19);
  }
  if (!v64)
  {
LABEL_76:
    if (!v61) {
      goto LABEL_83;
    }
    goto LABEL_77;
  }
  if (v63 != v62)
  {
    if (v63) {
      (*(void (**)(void))(*v63 + 40))();
    }
    goto LABEL_76;
  }
  (*(void (**)(void *))(v62[0] + 32))(v62);
  if (!v61) {
    goto LABEL_83;
  }
LABEL_77:
  if (v60 == v59)
  {
    (*(void (**)(void *))(v59[0] + 32))(v59);
  }
  else if (v60)
  {
    (*(void (**)(void))(*v60 + 40))();
  }
LABEL_83:
  if (v45 && SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (v86)
  {
    if (v85 == v84)
    {
      (*(void (**)(void *))(v84[0] + 32))(v84);
      if (!v83) {
        goto LABEL_97;
      }
      goto LABEL_91;
    }
    if (v85) {
      (*(void (**)(void *))(*v85 + 40))(v85);
    }
  }
  if (!v83) {
    goto LABEL_97;
  }
LABEL_91:
  if (v82 == v81)
  {
    (*(void (**)(void *))(v81[0] + 32))(v81);
  }
  else if (v82)
  {
    (*(void (**)(void *))(*v82 + 40))(v82);
  }
LABEL_97:
  if (v67)
  {
    if (SHIBYTE(v66) < 0) {
      operator delete((void *)__dst);
    }
  }
}

void sub_21B8FA530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_21B83A3DC(&__p);
  sub_21B847320((void **)&a9);
  sub_21B84739C(&a12);
  sub_21B8E34AC((uint64_t)&a60);
  sub_21B8E34AC(v60 - 224);
  _Unwind_Resume(a1);
}

void sub_21B8FA658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_21B8E34AC(v57);
  sub_21B8E34AC((uint64_t)&a15);
  sub_21B8E34AC((uint64_t)&a57);
  sub_21B8E34AC(v58 - 224);
  _Unwind_Resume(a1);
}

void sub_21B8FA68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_21B8E34AC((uint64_t)&a57);
  sub_21B8E34AC(v57 - 224);
  _Unwind_Resume(a1);
}

void sub_21B8FA6A8(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 30);
  if (v5 == 2)
  {
    long long v18 = a1[1];
    long long v27 = *a1;
    long long v28 = v18;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v19 = *((void *)a1 + 8);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v19;
      char v33 = v20;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v21;
      int v37 = v22;
      __int16 v38 = v23;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAF08((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 53, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FC8A4((uint64_t)&v27, a2, &v25);
  }
  else if (v5 == 1)
  {
    long long v12 = a1[1];
    long long v27 = *a1;
    long long v28 = v12;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v13 = *((void *)a1 + 8);
      int v14 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v13;
      char v33 = v14;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v15;
      int v37 = v16;
      __int16 v38 = v17;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAD50((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 49, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FCD30((uint64_t)&v27, a2, &v25);
  }
  else
  {
    if (v5)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 56, (uint64_t)&unk_21B997215, 0, (uint64_t)"OutputDataVariant copy not implemented", 38, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    long long v6 = a1[1];
    long long v27 = *a1;
    long long v28 = v6;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v7 = *((void *)a1 + 8);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v7;
      char v33 = v8;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v9;
      int v37 = v10;
      __int16 v38 = v11;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAC1C((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 45, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FC5F8((uint64_t)&v27, a2, &v25);
  }
  *(_OWORD *)a3 = v25;
  *(void *)(a3 + 16) = v26;
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 32) = 64;
  *(_DWORD *)(a3 + 40) = 1;
  if (v39)
  {
    long long v24 = v33;
    if (v33)
    {
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_21B8FABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FAC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21B8FAC1C(uint64_t a1)
{
  sub_21B8540D8(a1, (uint64_t)&v12);
  uint64_t v2 = *(void *)&v13[4];
  if (HIDWORD(*(void *)&v13[4])) {
    BOOL v3 = *(_DWORD *)&v13[4] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v5 = v3 || *(_DWORD *)&v13[12] == 0 || HIDWORD(*(void *)&v13[12]) == 0;
  int v6 = v5;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)&v13[12];
  }
  if (HIDWORD(v7) * v15 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8540D8(a1, (uint64_t)&v12);
  uint64_t v8 = 0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v13))) & 1) == 0 && *(_DWORD *)&v13[16])
  {
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    uint64_t v8 = (vaddvq_s32(vmulq_s32(v14, vaddq_s32(*(int32x4_t *)v13, v9)))
                      + v15 * (*(_DWORD *)&v13[16] - 1)
                      + 1);
  }
  if (v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v2;
  }
  return v8 == v7 * v10 * HIDWORD(v10) * HIDWORD(v7);
}

BOOL sub_21B8FAD50(uint64_t a1)
{
  sub_21B8FC2D0(a1, (uint64_t)&v12);
  uint64_t v2 = *(void *)&v13[4];
  if (HIDWORD(*(void *)&v13[4])) {
    BOOL v3 = *(_DWORD *)&v13[4] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v5 = v3 || *(_DWORD *)&v13[12] == 0 || HIDWORD(*(void *)&v13[12]) == 0;
  int v6 = v5;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)&v13[12];
  }
  if (HIDWORD(v7) * v15 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8FC2D0(a1, (uint64_t)&v12);
  uint64_t v8 = 0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v13))) & 1) == 0 && *(_DWORD *)&v13[16])
  {
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    uint64_t v8 = (vaddvq_s32(vmulq_s32(v14, vaddq_s32(*(int32x4_t *)v13, v9)))
                      + v15 * (*(_DWORD *)&v13[16] - 1)
                      + 1);
  }
  if (v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v2;
  }
  return v8 == v7 * v10 * HIDWORD(v10) * HIDWORD(v7);
}

uint64_t sub_21B8FAE84(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 112))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 72);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

BOOL sub_21B8FAF08(uint64_t a1)
{
  sub_21B8565FC(a1, (uint64_t)&v12);
  uint64_t v2 = *(void *)&v13[4];
  if (HIDWORD(*(void *)&v13[4])) {
    BOOL v3 = *(_DWORD *)&v13[4] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v5 = v3 || *(_DWORD *)&v13[12] == 0 || HIDWORD(*(void *)&v13[12]) == 0;
  int v6 = v5;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)&v13[12];
  }
  if (HIDWORD(v7) * v15 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8565FC(a1, (uint64_t)&v12);
  uint64_t v8 = 0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v13))) & 1) == 0 && *(_DWORD *)&v13[16])
  {
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    uint64_t v8 = (vaddvq_s32(vmulq_s32(v14, vaddq_s32(*(int32x4_t *)v13, v9)))
                      + v15 * (*(_DWORD *)&v13[16] - 1)
                      + 1);
  }
  if (v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v2;
  }
  return v8 == v7 * v10 * HIDWORD(v10) * HIDWORD(v7);
}

void sub_21B8FB03C(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 30);
  if (v5 == 2)
  {
    long long v18 = a1[1];
    long long v27 = *a1;
    long long v28 = v18;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v19 = *((void *)a1 + 8);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v19;
      char v33 = v20;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v21;
      int v37 = v22;
      __int16 v38 = v23;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAF08((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 53, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FD644((uint64_t)&v27, a2, &v25);
  }
  else if (v5 == 1)
  {
    long long v12 = a1[1];
    long long v27 = *a1;
    long long v28 = v12;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v13 = *((void *)a1 + 8);
      int32x4_t v14 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v13;
      char v33 = v14;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v15;
      int v37 = v16;
      __int16 v38 = v17;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAD50((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 49, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FD8F0((uint64_t)&v27, a2, &v25);
  }
  else
  {
    if (v5)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 56, (uint64_t)&unk_21B997215, 0, (uint64_t)"OutputDataVariant copy not implemented", 38, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    long long v6 = a1[1];
    long long v27 = *a1;
    long long v28 = v6;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v7 = *((void *)a1 + 8);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v7;
      char v33 = v8;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v9;
      int v37 = v10;
      __int16 v38 = v11;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAC1C((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 45, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FD1BC((uint64_t)&v27, a2, &v25);
  }
  *(_OWORD *)a3 = v25;
  *(void *)(a3 + 16) = v26;
  *(_DWORD *)(a3 + 24) = 2;
  *(void *)(a3 + 32) = 64;
  *(_DWORD *)(a3 + 40) = 2;
  if (v39)
  {
    long long v24 = v33;
    if (v33)
    {
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_21B8FB538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FB5B0(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 30);
  if (v5 == 2)
  {
    long long v18 = a1[1];
    long long v27 = *a1;
    long long v28 = v18;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v19 = *((void *)a1 + 8);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v21 = *((void *)a1 + 12);
        int v22 = *((_DWORD *)a1 + 26);
        __int16 v23 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v19;
      char v33 = v20;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v21;
      int v37 = v22;
      __int16 v38 = v23;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAF08((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 53, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FE208((uint64_t)&v27, a2, &v25);
  }
  else if (v5 == 1)
  {
    long long v12 = a1[1];
    long long v27 = *a1;
    long long v28 = v12;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v13 = *((void *)a1 + 8);
      int32x4_t v14 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v15 = *((void *)a1 + 12);
        int v16 = *((_DWORD *)a1 + 26);
        __int16 v17 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v13;
      char v33 = v14;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v15;
      int v37 = v16;
      __int16 v38 = v17;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAD50((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 49, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FE4B4((uint64_t)&v27, a2, &v25);
  }
  else
  {
    if (v5)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 56, (uint64_t)&unk_21B997215, 0, (uint64_t)"OutputDataVariant copy not implemented", 38, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    long long v6 = a1[1];
    long long v27 = *a1;
    long long v28 = v6;
    long long v29 = a1[2];
    int v30 = *((_DWORD *)a1 + 12);
    LOBYTE(v31) = 0;
    char v39 = 0;
    if (*((unsigned char *)a1 + 112))
    {
      long long v31 = &unk_26CB954E0;
      uint64_t v7 = *((void *)a1 + 8);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v9 = *((void *)a1 + 12);
        int v10 = *((_DWORD *)a1 + 26);
        __int16 v11 = *((_WORD *)a1 + 54);
      }
      uint64_t v32 = v7;
      char v33 = v8;
      uint64_t v34 = *((void *)a1 + 10);
      int v35 = *((_DWORD *)a1 + 22);
      uint64_t v36 = v9;
      int v37 = v10;
      __int16 v38 = v11;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      char v39 = 1;
    }
    if (!sub_21B8FAC1C((uint64_t)&v27)
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionCommonUtil.cpp", 45, (uint64_t)"IsContiguousMemory(data_view)", 29, (uint64_t)"Data is not contiguous", 22, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    sub_21B8FDD80((uint64_t)&v27, a2, &v25);
  }
  *(_OWORD *)a3 = v25;
  *(void *)(a3 + 16) = v26;
  *(_DWORD *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 128;
  *(_DWORD *)(a3 + 40) = 2;
  if (v39)
  {
    long long v24 = v33;
    if (v33)
    {
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_21B8FBAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B8FAE84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B8FBB28(unsigned int *a1@<X0>, unint64_t a2@<X1>, float *a3@<X2>, float **a4@<X8>)
{
  unsigned int v5 = *a1;
  unsigned int v4 = a1[1];
  if (!a2)
  {
    int v30 = 0;
    uint64_t v8 = 0;
    long long v29 = 0;
    goto LABEL_25;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B8FC2B8();
  }
  long long v31 = a4;
  uint64_t v8 = (float *)operator new(24 * a2);
  float v32 = 1.0 / (float)((float)v4 + -1.0);
  float v33 = 1.0 / (float)((float)v5 + -1.0);
  uint64_t v34 = v8;
  int v35 = &v8[6 * a2];
  uint64_t v9 = &a3[5 * a2];
  do
  {
    while (1)
    {
      while (1)
      {
        float v10 = *a3;
        float v11 = a3[1];
        float v12 = a3[3];
        float v13 = (float)(v33 * 12.0) * v12;
        float v14 = (float)(v32 * 12.0) * v12;
        __float2 v15 = __sincosf_stret(a3[2]);
        float v16 = (float)(v33 * v10) + (float)(v33 * v10) + -1.0;
        float v17 = (float)(v32 * v11) + (float)(v32 * v11) + -1.0;
        float v18 = v15.__cosval * v13;
        float v19 = -(float)(v13 * v15.__sinval);
        float v20 = v15.__sinval * v14;
        float v21 = v15.__cosval * v14;
        if (v8 >= v35) {
          break;
        }
        *uint64_t v8 = v18;
        v8[1] = v19;
        v8[2] = v16;
        v8[3] = v20;
        v8[4] = v21;
        v8[5] = v17;
        v8 += 6;
        a3 += 5;
        if (a3 == v9) {
          goto LABEL_23;
        }
      }
      int v22 = v34;
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v34) >> 3) + 1;
      if (v23 > 0xAAAAAAAAAAAAAAALL) {
        sub_21B8FC2B8();
      }
      if (0x5555555555555556 * (((char *)v35 - (char *)v34) >> 3) > v23) {
        unint64_t v23 = 0x5555555555555556 * (((char *)v35 - (char *)v34) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3) >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        if (v24 > 0xAAAAAAAAAAAAAAALL) {
          sub_21B845A48();
        }
        long long v25 = (char *)operator new(24 * v24);
      }
      else
      {
        long long v25 = 0;
      }
      uint64_t v26 = (float *)&v25[8 * (((char *)v8 - (char *)v34) >> 3)];
      *uint64_t v26 = v18;
      v26[1] = v19;
      uint64_t v26[2] = v16;
      void v26[3] = v20;
      v26[4] = v21;
      v26[5] = v17;
      long long v27 = v26 + 6;
      if (v8 == v34)
      {
        uint64_t v34 = (float *)&v25[8 * (((char *)v8 - (char *)v34) >> 3)];
        int v22 = v8;
        int v35 = (float *)&v25[24 * v24];
        break;
      }
      do
      {
        long long v28 = *(_OWORD *)(v8 - 6);
        *((void *)v26 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v26 - 6) = v28;
        v26 -= 6;
        v8 -= 6;
      }
      while (v8 != v34);
      uint64_t v34 = v26;
      int v35 = (float *)&v25[24 * v24];
      if (v22) {
        break;
      }
      uint64_t v8 = v27;
      a3 += 5;
      if (a3 == v9) {
        goto LABEL_23;
      }
    }
    operator delete(v22);
    uint64_t v8 = v27;
    a3 += 5;
  }
  while (a3 != v9);
LABEL_23:
  long long v29 = v34;
  int v30 = v35;
  a4 = v31;
LABEL_25:
  *a4 = v29;
  a4[1] = v8;
  a4[2] = v30;
}

void sub_21B8FBDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B8FBE20(unsigned int *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  v33[0] = a2;
  v33[1] = a3;
  unsigned int v6 = *a1;
  unsigned int v7 = a1[1];
  sub_21B8FC4C4(a4, &v32);
  if (a2 >= *(unsigned int *)(a4 + 36)) {
    unint64_t v8 = *(unsigned int *)(a4 + 36);
  }
  else {
    unint64_t v8 = a2;
  }
  unint64_t v9 = sub_21B8EC14C(v33, 0, v8);
  if (v9)
  {
    int v11 = 0;
    float v12 = 1.0 / (float)((float)v6 + -1.0);
    float v13 = 1.0 / (float)((float)v7 + -1.0);
    uint64_t v14 = 20 * v9;
    __float2 v15 = (float *)(v10 + 8);
    do
    {
      float v16 = v15[1];
      float v17 = (float)(v12 * 12.0) * v16;
      float v18 = (float)(v13 * 12.0) * v16;
      __float2 v19 = __sincosf_stret(*v15);
      float v20 = (_WORD *)(*(void *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v11));
      _S2 = v17 * v19.__cosval;
      __asm { FCVT            H2, S2 }
      *float v20 = LOWORD(_S2);
      _S2 = -(float)(v17 * v19.__sinval);
      __asm { FCVT            H2, S2 }
      v20[1] = LOWORD(_S2);
      _S2 = (float)((float)(v12 * *(v15 - 2)) + (float)(v12 * *(v15 - 2))) + -1.0;
      __asm { FCVT            H2, S2 }
      void v20[2] = LOWORD(_S2);
      _S0 = v18 * v19.__sinval;
      __asm { FCVT            H0, S0 }
      v20[3] = LOWORD(_S0);
      _S0 = v18 * v19.__cosval;
      __asm { FCVT            H0, S0 }
      v20[4] = LOWORD(_S0);
      _S0 = (float)((float)(v13 * *(v15 - 1)) + (float)(v13 * *(v15 - 1))) + -1.0;
      __asm { FCVT            H0, S0 }
      v20[5] = LOWORD(_S0);
      ++v11;
      v15 += 5;
      v14 -= 20;
    }
    while (v14);
  }
  uint64_t result = v32;
  uint64_t v32 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B8FBFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B8FBFE0@<X0>(void *result@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (result == (void *)a3)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (a3)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * a3) >> 3);
      if (v6 > 0xAAAAAAAAAAAAAAALL) {
        sub_21B8FC2B8();
      }
      size_t v7 = 24 * a3;
      unint64_t v8 = (char *)operator new(24 * a3);
      *a4 = v8;
      unint64_t v9 = &v8[24 * v6];
      a4[2] = v9;
      uint64_t result = memcpy(v8, a2, v7);
      a4[1] = v9;
    }
  }
  else
  {
    unint64_t v10 = (unint64_t)result;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (a3)
    {
      if (a3 > 0xAAAAAAAAAAAAAAALL) {
        sub_21B8FC2B8();
      }
      uint64_t v11 = 24 * a3;
      float v12 = (char *)operator new(24 * a3);
      *a4 = v12;
      a4[1] = v12;
      float v13 = &v12[v11];
      a4[2] = &v12[v11];
      uint64_t v14 = v12;
      do
      {
        long long v15 = *(_OWORD *)a2;
        *((void *)v14 + 2) = a2[2];
        *(_OWORD *)uint64_t v14 = v15;
        v14 += 24;
        v11 -= 24;
      }
      while (v11);
      a4[1] = v13;
    }
    else
    {
      float v13 = 0;
      float v12 = 0;
    }
    v17[0] = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3);
    v17[1] = (unint64_t)v12;
    uint64_t result = (void *)sub_21B8FC170(v17, 0, v10);
    if (v10) {
      return memmove(v16, a2, 24 * v10);
    }
  }
  return result;
}

void sub_21B8FC14C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21B8FC170(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if (a3 != -1)
  {
    unint64_t v5 = a3;
    if (a3 + a2 > *a1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_14;
    }
    if (!v5 || a1[1]) {
      return v5;
    }
LABEL_12:
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))return v5; {
LABEL_14:
    }
    abort();
  }
  unint64_t v6 = *a1;
  if (*a1 < a2)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 471, (uint64_t)"offset <= size()", 16, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_14;
    }
    unint64_t v6 = *a1;
  }
  unint64_t v5 = v6 - a2;
  if (!a1[1] && v5) {
    goto LABEL_12;
  }
  return v5;
}

void sub_21B8FC2B8()
{
}

uint64_t sub_21B8FC2D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if ((*(unsigned char *)(result + 48) & 0x20) == 0)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 727, (uint64_t)"format.Contains(FormatFlags::FLOAT16)", 37, (uint64_t)"The DataView does not contain half data", 39, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_19;
    }
  }
  if (*(unsigned char *)(v2 + 112))
  {
    if (*(unsigned char *)(v2 + 108) && *(void *)(v2 + 96))
    {
      uint64_t v4 = *(void *)(v2 + 64);
      unint64_t v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *))(*(void *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    unint64_t v6 = (uint64_t *)(v2 + 96);
  }
  else
  {
    unint64_t v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (int v9 = *(_DWORD *)(v2 + 16)) == 0)
  {
    int v9 = 0;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    int32x4_t v10 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(void *)a2 = v7;
  *(int32x4_t *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 44) = v8;
  if (v9 * v8 == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
LABEL_19:
    }
      abort();
  }
  return result;
}

void sub_21B8FC4C4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 49)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96);

  v7(v3, 1);
}

void *sub_21B8FC5F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8540D8(a1, (uint64_t)&v17);
  if (HIDWORD(v18)) {
    BOOL v6 = v18 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || v19 == 0 || HIDWORD(v19) == 0;
  if (v8) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v18;
  }
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v19;
  }
  if (HIDWORD(v10) * v20 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v10 * v9 * HIDWORD(v9) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_35;
  }
  size_t v11 = a2 << 6;
  if (HIDWORD(v10) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_24;
    }
LABEL_35:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (a2)
  {
LABEL_24:
    if (a2 >> 58) {
      sub_21B846300();
    }
    float v12 = (char *)operator new(a2 << 6);
    *a3 = v12;
    a3[2] = &v12[64 * a2];
    bzero(v12, a2 << 6);
    a3[1] = &v12[v11];
    if (*(unsigned char *)(a1 + 112)) {
      goto LABEL_26;
    }
LABEL_33:
    float v13 = (const void **)(a1 + 40);
    return memcpy(v12, *v13, v11);
  }
  float v12 = 0;
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_33;
  }
LABEL_26:
  float v13 = (const void **)(a1 + 96);
  if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
  {
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v15 + 88))(v15, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return memcpy(v12, *v13, v11);
}

void sub_21B8FC884(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (*v1)
  {
    *uint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float sub_21B8FC8A4@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8565FC(a1, (uint64_t)&v39);
  if (HIDWORD(v41)) {
    BOOL v6 = v41 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v42 == 0 || *(unsigned int *)&v42[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v41;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v42;
  }
  if (HIDWORD(v11) * HIDWORD(v43) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_83;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_83:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (a2 >> 58) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 6);
  *a3 = v12;
  a3[2] = &v12[64 * a2];
  bzero(v12, a2 << 6);
  a3[1] = &v12[64 * a2];
LABEL_29:
  sub_21B8565FC(a1, (uint64_t)&v39);
  long long v14 = v43;
  uint64_t v15 = v39;
  if (*(_DWORD *)&v42[4]) {
    BOOL v16 = *(_DWORD *)v42 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16 || v41 == 0 || HIDWORD(v41) == 0) {
    int v19 = 0;
  }
  else {
    int v19 = *(_DWORD *)&v42[4];
  }
  uint64_t v20 = HIDWORD(*((void *)&v43 + 1));
  if (v19 * HIDWORD(v43) == -1)
  {
    BOOL v21 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    uint64_t v20 = HIDWORD(*((void *)&v14 + 1));
    if (v21) {
      abort();
    }
  }
  uint64_t v38 = v20;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v20 * HIDWORD(v30) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (a2) {
    int v31 = v25;
  }
  else {
    int v31 = 1;
  }
  if (v28 | v31)
  {
    unint64_t v10 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = v23;
  }
  unsigned int v33 = HIDWORD(v10) * v10 * v32;
  unint64_t v34 = HIDWORD(v32);
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v35 * v34 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    char v39 = 0;
    int v40 = v29 - 1;
    unint64_t v41 = v14 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)char v42 = HIDWORD(v29) - 1;
    unint64_t v36 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v36 = 0;
    }
    *(void *)&v42[4] = v36 & 0xFFFFFFFF00000000 | DWORD1(v14);
    LODWORD(v43) = v30 - 1;
    *(void *)((char *)&v43 + 4) = DWORD2(v14) | ((unint64_t)DWORD2(v14) << 32);
    uint64_t v44 = v38 | (v35 << 32);
    int v37 = HIDWORD(v30) - 1;
    HIDWORD(v43) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      do
      {
        sub_21B903EA0(&v39, v15, v12);
        v12 += v35;
        v15 += v38;
        --v37;
      }
      while (v37);
    }
    return sub_21B903EA0(&v39, v15, v12);
  }
  return result;
}

void sub_21B8FCCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10)
  {
    *a10 = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

double sub_21B8FCD30@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8FC2D0(a1, (uint64_t)&v39);
  if (HIDWORD(v41)) {
    BOOL v6 = v41 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v42 == 0 || *(unsigned int *)&v42[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v41;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v42;
  }
  if (HIDWORD(v11) * HIDWORD(v43) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_83;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_83:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (a2 >> 58) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 6);
  *a3 = v12;
  a3[2] = &v12[64 * a2];
  bzero(v12, a2 << 6);
  a3[1] = &v12[64 * a2];
LABEL_29:
  sub_21B8FC2D0(a1, (uint64_t)&v39);
  long long v14 = v43;
  uint64_t v15 = v39;
  if (*(_DWORD *)&v42[4]) {
    BOOL v16 = *(_DWORD *)v42 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16 || v41 == 0 || HIDWORD(v41) == 0) {
    int v19 = 0;
  }
  else {
    int v19 = *(_DWORD *)&v42[4];
  }
  uint64_t v20 = HIDWORD(*((void *)&v43 + 1));
  if (v19 * HIDWORD(v43) == -1)
  {
    BOOL v21 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    uint64_t v20 = HIDWORD(*((void *)&v14 + 1));
    if (v21) {
      abort();
    }
  }
  uint64_t v38 = v20;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v20 * HIDWORD(v30) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (a2) {
    int v31 = v25;
  }
  else {
    int v31 = 1;
  }
  if (v28 | v31)
  {
    unint64_t v10 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = v23;
  }
  unsigned int v33 = HIDWORD(v10) * v10 * v32;
  unint64_t v34 = HIDWORD(v32);
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v35 * v34 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    char v39 = 0;
    int v40 = v29 - 1;
    unint64_t v41 = v14 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)char v42 = HIDWORD(v29) - 1;
    unint64_t v36 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v36 = 0;
    }
    *(void *)&v42[4] = v36 & 0xFFFFFFFF00000000 | DWORD1(v14);
    LODWORD(v43) = v30 - 1;
    *(void *)((char *)&v43 + 4) = DWORD2(v14) | ((unint64_t)DWORD2(v14) << 32);
    uint64_t v44 = v38 | (v35 << 32);
    int v37 = HIDWORD(v30) - 1;
    HIDWORD(v43) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      do
      {
        sub_21B904064(&v39, v15, v12);
        v12 += v35;
        v15 += v38;
        --v37;
      }
      while (v37);
    }
    *(void *)&double result = sub_21B904064(&v39, v15, v12);
  }
  return result;
}

void sub_21B8FD180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10)
  {
    *a10 = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

float sub_21B8FD1BC@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8540D8(a1, (uint64_t)&v43);
  if (HIDWORD(v45)) {
    BOOL v6 = v45 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v46 == 0 || *(unsigned int *)&v46[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v45;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v46;
  }
  if (HIDWORD(v11) * HIDWORD(v47) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_87;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_87:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (HIBYTE(a2)) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 8);
  *a3 = v12;
  a3[2] = &v12[256 * a2];
  bzero(v12, a2 << 8);
  a3[1] = &v12[256 * a2];
LABEL_29:
  sub_21B8540D8(a1, (uint64_t)&v43);
  uint64_t v15 = v47;
  unsigned int v14 = DWORD2(v47);
  BOOL v16 = v43;
  if (*(_DWORD *)&v46[4]) {
    BOOL v17 = *(_DWORD *)v46 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || v45 == 0 || HIDWORD(v45) == 0) {
    int v20 = 0;
  }
  else {
    int v20 = *(_DWORD *)&v46[4];
  }
  uint64_t v21 = HIDWORD(*((void *)&v47 + 1));
  if (v20 * HIDWORD(v47) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unsigned int v42 = v14;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v21 * HIDWORD(v30) == -1)
  {
    int v41 = v28;
    BOOL v31 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    int v28 = v41;
    if (v31) {
      abort();
    }
  }
  if (a2) {
    int v32 = v25;
  }
  else {
    int v32 = 1;
  }
  if (v28 | v32)
  {
    unint64_t v10 = 0;
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = v23;
  }
  if (v33) {
    unsigned int v34 = HIDWORD(v10) * v10;
  }
  else {
    unsigned int v34 = 0;
  }
  unsigned int v35 = HIDWORD(v10) * v10 * v33;
  unint64_t v36 = HIDWORD(v33);
  if (v36) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = 0;
  }
  if (v37 * v36 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    long long v43 = 0;
    int v44 = v29 - 1;
    unint64_t v45 = v15 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)int v46 = HIDWORD(v29) - 1;
    unint64_t v38 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v38 = 0;
    }
    *(void *)&v46[4] = v38 & 0xFFFFFFFF00000000 | HIDWORD(v15);
    LODWORD(v47) = v30 - 1;
    *(void *)((char *)&v47 + 4) = v42 | ((unint64_t)v34 << 32);
    uint64_t v48 = v21 | (v37 << 32);
    int v39 = HIDWORD(v30) - 1;
    HIDWORD(v47) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      uint64_t v40 = 4 * v37;
      do
      {
        float result = sub_21B856370(&v43, v16, (float *)v12, result);
        v16 += v21;
        v12 += v40;
        --v39;
      }
      while (v39);
    }
    return sub_21B856370(&v43, v16, (float *)v12, result);
  }
  return result;
}

void sub_21B8FD608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v11)
  {
    *a11 = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B8FD644@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8565FC(a1, (uint64_t)&v17);
  if (HIDWORD(v18)) {
    BOOL v6 = v18 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || v19 == 0 || HIDWORD(v19) == 0;
  if (v8) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v18;
  }
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v19;
  }
  if (HIDWORD(v10) * v20 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v10 * v9 * HIDWORD(v9) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_35;
  }
  size_t v11 = a2 << 8;
  if (HIDWORD(v10) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_24;
    }
LABEL_35:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (a2)
  {
LABEL_24:
    if (HIBYTE(a2)) {
      sub_21B846300();
    }
    float v12 = (char *)operator new(a2 << 8);
    *a3 = v12;
    a3[2] = &v12[256 * a2];
    bzero(v12, a2 << 8);
    a3[1] = &v12[v11];
    if (*(unsigned char *)(a1 + 112)) {
      goto LABEL_26;
    }
LABEL_33:
    float v13 = (const void **)(a1 + 40);
    return memcpy(v12, *v13, v11);
  }
  float v12 = 0;
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_33;
  }
LABEL_26:
  float v13 = (const void **)(a1 + 96);
  if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
  {
    uint64_t v15 = *(void *)(a1 + 64);
    unsigned int v14 = *(std::__shared_weak_count **)(a1 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v15 + 88))(v15, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return memcpy(v12, *v13, v11);
}

void sub_21B8FD8D0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (*v1)
  {
    *uint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float sub_21B8FD8F0@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8FC2D0(a1, (uint64_t)&v40);
  if (HIDWORD(v42)) {
    BOOL v6 = v42 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v43 == 0 || *(unsigned int *)&v43[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v42;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v43;
  }
  if (HIDWORD(v11) * HIDWORD(v44) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 64&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_84;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_84:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (HIBYTE(a2)) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 8);
  *a3 = v12;
  a3[2] = &v12[256 * a2];
  bzero(v12, a2 << 8);
  a3[1] = &v12[256 * a2];
LABEL_29:
  sub_21B8FC2D0(a1, (uint64_t)&v40);
  long long v14 = v44;
  uint64_t v15 = v40;
  if (*(_DWORD *)&v43[4]) {
    BOOL v16 = *(_DWORD *)v43 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16 || v42 == 0 || HIDWORD(v42) == 0) {
    int v19 = 0;
  }
  else {
    int v19 = *(_DWORD *)&v43[4];
  }
  uint64_t v20 = HIDWORD(*((void *)&v44 + 1));
  if (v19 * HIDWORD(v44) == -1)
  {
    BOOL v21 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    uint64_t v20 = HIDWORD(*((void *)&v14 + 1));
    if (v21) {
      abort();
    }
  }
  uint64_t v39 = v20;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v20 * HIDWORD(v30) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (a2) {
    int v31 = v25;
  }
  else {
    int v31 = 1;
  }
  if (v28 | v31)
  {
    unint64_t v10 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = v23;
  }
  unsigned int v33 = HIDWORD(v10) * v10 * v32;
  unint64_t v34 = HIDWORD(v32);
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v35 * v34 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    uint64_t v40 = 0;
    int v41 = v29 - 1;
    unint64_t v42 = v14 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)long long v43 = HIDWORD(v29) - 1;
    unint64_t v36 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v36 = 0;
    }
    *(void *)&v43[4] = v36 & 0xFFFFFFFF00000000 | DWORD1(v14);
    LODWORD(v44) = v30 - 1;
    *(void *)((char *)&v44 + 4) = DWORD2(v14) | ((unint64_t)DWORD2(v14) << 32);
    uint64_t v45 = v39 | (v35 << 32);
    int v37 = HIDWORD(v30) - 1;
    HIDWORD(v44) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      uint64_t v38 = 4 * v35;
      do
      {
        sub_21B904228(&v40, v15, v12);
        v15 += v39;
        v12 += v38;
        --v37;
      }
      while (v37);
    }
    return sub_21B904228(&v40, v15, v12);
  }
  return result;
}

void sub_21B8FDD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10)
  {
    *a10 = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

float sub_21B8FDD80@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8540D8(a1, (uint64_t)&v43);
  if (HIDWORD(v45)) {
    BOOL v6 = v45 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v46 == 0 || *(unsigned int *)&v46[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v45;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v46;
  }
  if (HIDWORD(v11) * HIDWORD(v47) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 128&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_87;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_87:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (a2 >> 55) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 9);
  *a3 = v12;
  a3[2] = &v12[512 * a2];
  bzero(v12, a2 << 9);
  a3[1] = &v12[512 * a2];
LABEL_29:
  sub_21B8540D8(a1, (uint64_t)&v43);
  uint64_t v15 = v47;
  unsigned int v14 = DWORD2(v47);
  BOOL v16 = v43;
  if (*(_DWORD *)&v46[4]) {
    BOOL v17 = *(_DWORD *)v46 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || v45 == 0 || HIDWORD(v45) == 0) {
    int v20 = 0;
  }
  else {
    int v20 = *(_DWORD *)&v46[4];
  }
  uint64_t v21 = HIDWORD(*((void *)&v47 + 1));
  if (v20 * HIDWORD(v47) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unsigned int v42 = v14;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v21 * HIDWORD(v30) == -1)
  {
    int v41 = v28;
    BOOL v31 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    int v28 = v41;
    if (v31) {
      abort();
    }
  }
  if (a2) {
    int v32 = v25;
  }
  else {
    int v32 = 1;
  }
  if (v28 | v32)
  {
    unint64_t v10 = 0;
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = v23;
  }
  if (v33) {
    unsigned int v34 = HIDWORD(v10) * v10;
  }
  else {
    unsigned int v34 = 0;
  }
  unsigned int v35 = HIDWORD(v10) * v10 * v33;
  unint64_t v36 = HIDWORD(v33);
  if (v36) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = 0;
  }
  if (v37 * v36 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    long long v43 = 0;
    int v44 = v29 - 1;
    unint64_t v45 = v15 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)int v46 = HIDWORD(v29) - 1;
    unint64_t v38 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v38 = 0;
    }
    *(void *)&v46[4] = v38 & 0xFFFFFFFF00000000 | HIDWORD(v15);
    LODWORD(v47) = v30 - 1;
    *(void *)((char *)&v47 + 4) = v42 | ((unint64_t)v34 << 32);
    uint64_t v48 = v21 | (v37 << 32);
    int v39 = HIDWORD(v30) - 1;
    HIDWORD(v47) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      uint64_t v40 = 4 * v37;
      do
      {
        float result = sub_21B856370(&v43, v16, (float *)v12, result);
        v16 += v21;
        v12 += v40;
        --v39;
      }
      while (v39);
    }
    return sub_21B856370(&v43, v16, (float *)v12, result);
  }
  return result;
}

void sub_21B8FE1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v11)
  {
    *a11 = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B8FE208@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8565FC(a1, (uint64_t)&v17);
  if (HIDWORD(v18)) {
    BOOL v6 = v18 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || v19 == 0 || HIDWORD(v19) == 0;
  if (v8) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v18;
  }
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v19;
  }
  if (HIDWORD(v10) * v20 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v10 * v9 * HIDWORD(v9) != 128&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_35;
  }
  size_t v11 = a2 << 9;
  if (HIDWORD(v10) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_24;
    }
LABEL_35:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (a2)
  {
LABEL_24:
    if (a2 >> 55) {
      sub_21B846300();
    }
    float v12 = (char *)operator new(a2 << 9);
    *a3 = v12;
    a3[2] = &v12[512 * a2];
    bzero(v12, a2 << 9);
    a3[1] = &v12[v11];
    if (*(unsigned char *)(a1 + 112)) {
      goto LABEL_26;
    }
LABEL_33:
    float v13 = (const void **)(a1 + 40);
    return memcpy(v12, *v13, v11);
  }
  float v12 = 0;
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_33;
  }
LABEL_26:
  float v13 = (const void **)(a1 + 96);
  if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
  {
    uint64_t v15 = *(void *)(a1 + 64);
    unsigned int v14 = *(std::__shared_weak_count **)(a1 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v15 + 88))(v15, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return memcpy(v12, *v13, v11);
}

void sub_21B8FE494(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (*v1)
  {
    *uint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float sub_21B8FE4B4@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21B8FC2D0(a1, (uint64_t)&v40);
  if (HIDWORD(v42)) {
    BOOL v6 = v42 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || *(_DWORD *)v43 == 0 || *(unsigned int *)&v43[4] == 0;
  int v9 = v8;
  if (v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v42;
  }
  if (v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *(void *)v43;
  }
  if (HIDWORD(v11) * HIDWORD(v44) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4)|| v11 * v10 * HIDWORD(v10) != 128&& sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 47, (uint64_t)"w * h * c == N", 14, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_84;
  }
  if (HIDWORD(v11) < a2)
  {
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 48, (uint64_t)"num_valid_descriptors <= num_of_output_descriptors", 50, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      a3[1] = 0;
      *a3 = 0;
      a3[2] = 0;
      goto LABEL_27;
    }
LABEL_84:
    abort();
  }
  a3[1] = 0;
  *a3 = 0;
  a3[2] = 0;
  if (!a2)
  {
    float v12 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (a2 >> 55) {
    sub_21B846300();
  }
  float v12 = (char *)operator new(a2 << 9);
  *a3 = v12;
  a3[2] = &v12[512 * a2];
  bzero(v12, a2 << 9);
  a3[1] = &v12[512 * a2];
LABEL_29:
  sub_21B8FC2D0(a1, (uint64_t)&v40);
  long long v14 = v44;
  uint64_t v15 = v40;
  if (*(_DWORD *)&v43[4]) {
    BOOL v16 = *(_DWORD *)v43 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16 || v42 == 0 || HIDWORD(v42) == 0) {
    int v19 = 0;
  }
  else {
    int v19 = *(_DWORD *)&v43[4];
  }
  uint64_t v20 = HIDWORD(*((void *)&v44 + 1));
  if (v19 * HIDWORD(v44) == -1)
  {
    BOOL v21 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    uint64_t v20 = HIDWORD(*((void *)&v14 + 1));
    if (v21) {
      abort();
    }
  }
  uint64_t v39 = v20;
  uint64_t v22 = v11;
  unint64_t v23 = v11 | ((unint64_t)a2 << 32);
  if (v10) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  if (HIDWORD(v23)) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  int v27 = v9 | v26;
  int v28 = v9;
  if (v27) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v10;
  }
  if (v27) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v23;
  }
  if (v20 * HIDWORD(v30) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (a2) {
    int v31 = v25;
  }
  else {
    int v31 = 1;
  }
  if (v28 | v31)
  {
    unint64_t v10 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = v23;
  }
  unsigned int v33 = HIDWORD(v10) * v10 * v32;
  unint64_t v34 = HIDWORD(v32);
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v35 * v34 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (HIDWORD(v30) && v30 && HIDWORD(v29) && v29 && v30)
  {
    uint64_t v40 = 0;
    int v41 = v29 - 1;
    unint64_t v42 = v14 | ((unint64_t)(v10 != 0) << 32);
    *(_DWORD *)long long v43 = HIDWORD(v29) - 1;
    unint64_t v36 = v10 << 32;
    if (!HIDWORD(v10)) {
      unint64_t v36 = 0;
    }
    *(void *)&v43[4] = v36 & 0xFFFFFFFF00000000 | DWORD1(v14);
    LODWORD(v44) = v30 - 1;
    *(void *)((char *)&v44 + 4) = DWORD2(v14) | ((unint64_t)DWORD2(v14) << 32);
    uint64_t v45 = v39 | (v35 << 32);
    int v37 = HIDWORD(v30) - 1;
    HIDWORD(v44) = HIDWORD(v30) - 1;
    if (HIDWORD(v30) != 1)
    {
      uint64_t v38 = 4 * v35;
      do
      {
        sub_21B904228(&v40, v15, v12);
        v15 += v39;
        v12 += v38;
        --v37;
      }
      while (v37);
    }
    return sub_21B904228(&v40, v15, v12);
  }
  return result;
}

void sub_21B8FE908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10)
  {
    *a10 = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B8FE944(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v9 = *(void *)(a2 + 8);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  unint64_t v36 = &unk_26CB95798;
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (!v11)
  {
    __int16 v14 = *(_WORD *)(a2 + 72);
    uint64_t v37 = *(void *)(a2 + 32);
    uint64_t v38 = 0;
    long long v39 = *(_OWORD *)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 64);
    __int16 v41 = v14;
    goto LABEL_8;
  }
  p_shared_owners = &v11->__shared_owners_;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v13 = *(_WORD *)(a2 + 72);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v39 = *(_OWORD *)(a2 + 48);
  uint64_t v40 = *(void *)(a2 + 64);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v37 = v10;
  uint64_t v38 = v11;
  __int16 v41 = v13;
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
LABEL_8:
  unint64_t v42 = &unk_26CB954E0;
  sub_21B8F2D38((uint64_t)&v36, (uint64_t)&v43);
  uint64_t v15 = v43;
  BOOL v16 = v44;
  v46[0] = &unk_26CB954E0;
  v46[1] = v43;
  v46[2] = v44;
  uint64_t v43 = 0;
  long long v44 = 0;
  *(_OWORD *)long long v47 = v45[0];
  *(_OWORD *)&v47[14] = *(_OWORD *)((char *)v45 + 14);
  int v48 = 2;
  int v58 = -1;
  char v49 = &unk_26CB954E0;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *(char **)&v47[16];
    int v18 = *(_DWORD *)&v47[24];
    __int16 v19 = *(_WORD *)&v47[28];
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v17 = *(char **)&v47[16];
    int v18 = *(_DWORD *)&v47[24];
    __int16 v19 = *(_WORD *)&v47[28];
  }
  uint64_t v50 = v15;
  char v51 = v16;
  int v52 = *(std::__shared_weak_count **)v47;
  LODWORD(__p) = *(_DWORD *)&v47[8];
  int v54 = v17;
  int v55 = v18;
  __int16 v56 = v19;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    int v58 = 2;
    uint64_t v20 = v60;
    if ((unint64_t)v60 < v61) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v22 = sub_21B8F1B28(&v59, (uint64_t)&v49);
    goto LABEL_19;
  }
  int v58 = 2;
  uint64_t v20 = v60;
  if ((unint64_t)v60 >= v61) {
    goto LABEL_18;
  }
LABEL_14:
  *uint64_t v20 = 0;
  *((_DWORD *)v20 + 30) = -1;
  int v21 = v58;
  if (v58 != -1)
  {
    ((void (*)(char *, char *, void **))off_26CB9DC48[v58])(&v62, v20, &v49);
    *((_DWORD *)v20 + 30) = v21;
  }
  uint64_t v22 = v20 + 128;
LABEL_19:
  uint64_t v60 = v22;
  if (v58 != -1) {
    ((void (*)(char *, void **))off_26CB9DC30[v58])(&v62, &v49);
  }
  int v58 = -1;
  if (v48 != -1) {
    ((void (*)(char *, void *))off_26CB9DC30[v48])(&v62, v46);
  }
  int v48 = -1;
  unint64_t v23 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  BOOL v24 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  kdebug_trace();
  sub_21B93AC30(*(void *)(a1 + 16), (uint64_t *)&v59, a3, a4, (uint64_t)&v49);
  kdebug_trace();
  if ((_BYTE)v50)
  {
    *(void *)(a5 + 32) = 0;
    *(_DWORD *)(a5 + 40) = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  else
  {
    if (!v57) {
      sub_21B8446A8();
    }
    sub_21B8FA6A8((long long *)__p, v9, a5);
  }
  if (v57)
  {
    int v25 = (char *)__p;
    if (__p)
    {
      int v26 = v54;
      int v27 = __p;
      if (v54 != __p)
      {
        do
        {
          int v28 = v26 - 128;
          uint64_t v29 = *((unsigned int *)v26 - 2);
          if (v29 != -1) {
            ((void (*)(void *, char *))off_26CB9DC78[v29])(v46, v26 - 128);
          }
          *((_DWORD *)v26 - 2) = -1;
          v26 -= 128;
        }
        while (v28 != v25);
        int v27 = __p;
      }
      int v54 = v25;
      operator delete(v27);
    }
  }
  char v49 = &unk_26CB95650;
  unint64_t v30 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    int v31 = v59;
    if (!v59) {
      return;
    }
  }
  else
  {
    int v31 = v59;
    if (!v59) {
      return;
    }
  }
  unint64_t v32 = v60;
  unsigned int v33 = v31;
  if (v60 != v31)
  {
    do
    {
      unint64_t v34 = v32 - 128;
      uint64_t v35 = *((unsigned int *)v32 - 2);
      if (v35 != -1) {
        ((void (*)(void **, char *))off_26CB9DC30[v35])(&v49, v32 - 128);
      }
      *((_DWORD *)v32 - 2) = -1;
      v32 -= 128;
    }
    while (v34 != v31);
    unsigned int v33 = v59;
  }
  uint64_t v60 = v31;
  operator delete(v33);
}

void sub_21B8FEF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_21B8EB990((uint64_t)&a39);
  sub_21B8EB9EC((uint64_t)&a23);
  sub_21B8449AC((uint64_t)&a16);
  sub_21B84BE64((uint64_t)&a9);
  sub_21B8EBB5C((void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FEF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_21B8EBA48((uint64_t)&a39);
  sub_21B8EBB5C((void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FEF60(_Unwind_Exception *a1)
{
  sub_21B8EBB5C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FEF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B84BE64((uint64_t)&a9);
  sub_21B8EBB5C((void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FEF9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v9 = *(void *)(a2 + 8);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  unint64_t v36 = &unk_26CB95798;
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (!v11)
  {
    __int16 v14 = *(_WORD *)(a2 + 72);
    uint64_t v37 = *(void *)(a2 + 32);
    uint64_t v38 = 0;
    long long v39 = *(_OWORD *)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 64);
    __int16 v41 = v14;
    goto LABEL_8;
  }
  p_shared_owners = &v11->__shared_owners_;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v13 = *(_WORD *)(a2 + 72);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v39 = *(_OWORD *)(a2 + 48);
  uint64_t v40 = *(void *)(a2 + 64);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v37 = v10;
  uint64_t v38 = v11;
  __int16 v41 = v13;
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
LABEL_8:
  unint64_t v42 = &unk_26CB954E0;
  sub_21B8F2D38((uint64_t)&v36, (uint64_t)&v43);
  uint64_t v15 = v43;
  BOOL v16 = v44;
  v46[0] = &unk_26CB954E0;
  v46[1] = v43;
  v46[2] = v44;
  uint64_t v43 = 0;
  long long v44 = 0;
  *(_OWORD *)long long v47 = v45[0];
  *(_OWORD *)&v47[14] = *(_OWORD *)((char *)v45 + 14);
  int v48 = 2;
  int v58 = -1;
  char v49 = &unk_26CB954E0;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *(char **)&v47[16];
    int v18 = *(_DWORD *)&v47[24];
    __int16 v19 = *(_WORD *)&v47[28];
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v17 = *(char **)&v47[16];
    int v18 = *(_DWORD *)&v47[24];
    __int16 v19 = *(_WORD *)&v47[28];
  }
  uint64_t v50 = v15;
  char v51 = v16;
  int v52 = *(std::__shared_weak_count **)v47;
  LODWORD(__p) = *(_DWORD *)&v47[8];
  int v54 = v17;
  int v55 = v18;
  __int16 v56 = v19;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    int v58 = 2;
    uint64_t v20 = v60;
    if ((unint64_t)v60 < v61) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v22 = sub_21B8F1B28(&v59, (uint64_t)&v49);
    goto LABEL_19;
  }
  int v58 = 2;
  uint64_t v20 = v60;
  if ((unint64_t)v60 >= v61) {
    goto LABEL_18;
  }
LABEL_14:
  *uint64_t v20 = 0;
  *((_DWORD *)v20 + 30) = -1;
  int v21 = v58;
  if (v58 != -1)
  {
    ((void (*)(char *, char *, void **))off_26CB9DC48[v58])(&v62, v20, &v49);
    *((_DWORD *)v20 + 30) = v21;
  }
  uint64_t v22 = v20 + 128;
LABEL_19:
  uint64_t v60 = v22;
  if (v58 != -1) {
    ((void (*)(char *, void **))off_26CB9DC30[v58])(&v62, &v49);
  }
  int v58 = -1;
  if (v48 != -1) {
    ((void (*)(char *, void *))off_26CB9DC30[v48])(&v62, v46);
  }
  int v48 = -1;
  unint64_t v23 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  BOOL v24 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  kdebug_trace();
  sub_21B93AC30(*(void *)(a1 + 16), (uint64_t *)&v59, a3, a4, (uint64_t)&v49);
  kdebug_trace();
  if ((_BYTE)v50)
  {
    *(void *)(a5 + 32) = 0;
    *(_DWORD *)(a5 + 40) = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  else
  {
    if (!v57) {
      sub_21B8446A8();
    }
    sub_21B8FB03C((long long *)__p, v9, a5);
  }
  if (v57)
  {
    int v25 = (char *)__p;
    if (__p)
    {
      int v26 = v54;
      int v27 = __p;
      if (v54 != __p)
      {
        do
        {
          int v28 = v26 - 128;
          uint64_t v29 = *((unsigned int *)v26 - 2);
          if (v29 != -1) {
            ((void (*)(void *, char *))off_26CB9DC78[v29])(v46, v26 - 128);
          }
          *((_DWORD *)v26 - 2) = -1;
          v26 -= 128;
        }
        while (v28 != v25);
        int v27 = __p;
      }
      int v54 = v25;
      operator delete(v27);
    }
  }
  char v49 = &unk_26CB95650;
  unint64_t v30 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    int v31 = v59;
    if (!v59) {
      return;
    }
  }
  else
  {
    int v31 = v59;
    if (!v59) {
      return;
    }
  }
  unint64_t v32 = v60;
  unsigned int v33 = v31;
  if (v60 != v31)
  {
    do
    {
      unint64_t v34 = v32 - 128;
      uint64_t v35 = *((unsigned int *)v32 - 2);
      if (v35 != -1) {
        ((void (*)(void **, char *))off_26CB9DC30[v35])(&v49, v32 - 128);
      }
      *((_DWORD *)v32 - 2) = -1;
      v32 -= 128;
    }
    while (v34 != v31);
    unsigned int v33 = v59;
  }
  uint64_t v60 = v31;
  operator delete(v33);
}

void sub_21B8FF55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_21B8EB990((uint64_t)&a39);
  sub_21B8EB9EC((uint64_t)&a23);
  sub_21B8449AC((uint64_t)&a16);
  sub_21B84BE64((uint64_t)&a9);
  sub_21B8EBB5C((void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FF598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_21B8EBA48((uint64_t)&a39);
  sub_21B8EBB5C((void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FF5B8(_Unwind_Exception *a1)
{
  sub_21B8EBB5C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FF5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B84BE64((uint64_t)&a9);
  sub_21B8EBB5C((void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void sub_21B8FF5F4(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B919D2C(&__p);
  *(void *)a2 = 0x700000003;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_21B9AF570;
  *(void *)(a2 + 32) = 0x7475706E69;
  *(unsigned char *)(a2 + 55) = 5;
  *(void *)(a2 + 56) = 0x74757074756FLL;
  *(unsigned char *)(a2 + 79) = 6;
  uint64_t v4 = (unsigned char *)(a2 + 80);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_WORD *)(a2 + 104) = 256;
    *(_DWORD *)(a2 + 108) = a1;
    *(unsigned char *)(a2 + 112) = 0;
    *(unsigned char *)(a2 + 136) = 0;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 96) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_WORD *)(a2 + 104) = 256;
    *(_DWORD *)(a2 + 108) = a1;
    *(unsigned char *)(a2 + 112) = 0;
    *(unsigned char *)(a2 + 136) = 0;
  }
}

void sub_21B8FF6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 79) < 0)
  {
    operator delete(*(void **)(v15 + 56));
    if ((*(char *)(v15 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v15 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 + 32));
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B8FF734(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "lf-640x640");
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v39 = (char *)v4 + 40;
  uint64_t v40 = (char *)v4 + 40;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *uint64_t v4 = xmmword_21B9AE8C0;
  v4[1] = v5;
  *((void *)v4 + 4) = 0x20000000006;
  uint64_t v38 = v4;
  char v41 = 0;
  char v42 = 0;
  v43[23] = 10;
  strcpy(v43, "lf-640x480");
  BOOL v6 = operator new(0x28uLL);
  uint64_t v45 = (char *)v6 + 40;
  int v46 = (char *)v6 + 40;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *BOOL v6 = xmmword_21B9AE830;
  v6[1] = v7;
  *((void *)v6 + 4) = 0x20000000006;
  long long v44 = v6;
  char v47 = 0;
  char v48 = 0;
  v49[23] = 10;
  strcpy(v49, "lf-640x360");
  BOOL v8 = operator new(0x28uLL);
  char v51 = (char *)v8 + 40;
  int v52 = (char *)v8 + 40;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  *BOOL v8 = xmmword_21B9AE840;
  v8[1] = v9;
  *((void *)v8 + 4) = 0x20000000006;
  uint64_t v50 = v8;
  char v53 = 0;
  char v54 = 0;
  v55[23] = 10;
  strcpy(v55, "lf-480x480");
  uint64_t v10 = operator new(0x28uLL);
  char v57 = (char *)v10 + 40;
  int v58 = (char *)v10 + 40;
  *(void *)&long long v11 = 0x100000001;
  *((void *)&v11 + 1) = 0x100000001;
  *uint64_t v10 = xmmword_21B9AE850;
  v10[1] = v11;
  *((void *)v10 + 4) = 0x20000000006;
  __int16 v56 = v10;
  char v59 = 0;
  char v60 = 0;
  v61[23] = 10;
  strcpy(v61, "lf-480x360");
  float v12 = operator new(0x28uLL);
  char v64 = (char *)v12 + 40;
  *(void *)&long long v13 = 0x100000001;
  *((void *)&v13 + 1) = 0x100000001;
  *float v12 = xmmword_21B9AE860;
  v12[1] = v13;
  *((void *)v12 + 4) = 0x20000000006;
  char v62 = v12;
  uint64_t v63 = (char *)v12 + 40;
  char v65 = 0;
  char v66 = 0;
  strcpy(v68, "\n");
  strcpy(v67, "lf-480x270");
  int v70 = 0;
  v68[2] = 0;
  *(_WORD *)&v68[3] = 0;
  *(_DWORD *)&v68[5] = 0;
  char v69 = 0;
  __int16 v14 = operator new(0x28uLL);
  int v70 = (char *)v14 + 40;
  *(void *)&long long v15 = 0x100000001;
  *((void *)&v15 + 1) = 0x100000001;
  *__int16 v14 = xmmword_21B9AE870;
  v14[1] = v15;
  *((void *)v14 + 4) = 0x20000000006;
  *(void *)&v68[1] = v14;
  char v69 = (char *)v14 + 40;
  char v71 = 0;
  char v72 = 0;
  strcpy(v74, "\n");
  strcpy(v73, "lf-360x270");
  int v76 = 0;
  v74[2] = 0;
  *(_WORD *)&v74[3] = 0;
  *(_DWORD *)&v74[5] = 0;
  char v75 = 0;
  BOOL v16 = operator new(0x28uLL);
  int v76 = (char *)v16 + 40;
  *(void *)&long long v17 = 0x100000001;
  *((void *)&v17 + 1) = 0x100000001;
  *BOOL v16 = xmmword_21B9AE880;
  v16[1] = v17;
  *((void *)v16 + 4) = 0x20000000006;
  *(void *)&v74[1] = v16;
  char v75 = (char *)v16 + 40;
  char v77 = 0;
  char v78 = 0;
  strcpy(v80, "\n");
  strcpy(v79, "lf-320x320");
  v80[2] = 0;
  *(_WORD *)&v80[3] = 0;
  *(_DWORD *)&v80[5] = 0;
  int v82 = 0;
  char v81 = 0;
  int v18 = operator new(0x28uLL);
  *(void *)&v80[1] = v18;
  int v82 = (char *)v18 + 40;
  *(void *)&long long v19 = 0x100000001;
  *((void *)&v19 + 1) = 0x100000001;
  *int v18 = xmmword_21B9AE8B0;
  v18[1] = v19;
  *((void *)v18 + 4) = 0x20000000006;
  char v81 = (char *)v18 + 40;
  char v83 = 0;
  char v84 = 0;
  strcpy(v86, "\n");
  strcpy(v85, "lf-320x240");
  v86[2] = 0;
  *(_WORD *)&v86[3] = 0;
  *(_DWORD *)&v86[5] = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v20 = operator new(0x28uLL);
  *(void *)&v86[1] = v20;
  uint64_t v88 = (char *)v20 + 40;
  *(void *)&long long v21 = 0x100000001;
  *((void *)&v21 + 1) = 0x100000001;
  *uint64_t v20 = xmmword_21B9AE8A0;
  v20[1] = v21;
  *((void *)v20 + 4) = 0x20000000006;
  uint64_t v87 = (char *)v20 + 40;
  char v89 = 0;
  char v90 = 0;
  strcpy(v92, "\n");
  strcpy(v91, "lf-320x180");
  v92[2] = 0;
  *(_WORD *)&v92[3] = 0;
  *(_DWORD *)&v92[5] = 0;
  __int16 v94 = 0;
  int v93 = 0;
  uint64_t v22 = operator new(0x28uLL);
  *(void *)&v92[1] = v22;
  __int16 v94 = (char *)v22 + 40;
  *(void *)&long long v23 = 0x100000001;
  *((void *)&v23 + 1) = 0x100000001;
  *uint64_t v22 = xmmword_21B9AE890;
  v22[1] = v23;
  *((void *)v22 + 4) = 0x20000000006;
  int v93 = (char *)v22 + 40;
  char v95 = 0;
  char v96 = 0;
  char v97[23] = 19;
  strcpy(v97, "lf-big-test-512x380");
  long long v98 = 0;
  long long v100 = 0;
  unint64_t v99 = 0;
  BOOL v24 = operator new(0x28uLL);
  long long v98 = v24;
  long long v100 = (char *)v24 + 40;
  *(void *)&long long v25 = 0x100000001;
  *((void *)&v25 + 1) = 0x100000001;
  *BOOL v24 = xmmword_21B9AE8D0;
  v24[1] = v25;
  *((void *)v24 + 4) = 0x20000000006;
  unint64_t v99 = (char *)v24 + 40;
  char v101 = 0;
  char v102 = 0;
  sub_21B914D3C((long long *)&__p, 0xBuLL, (uint64_t)v36);
  if (!v36[120])
  {
    uint64_t v34 = sub_21B8F210C((uint64_t)v36);
    sub_21B8F2168(v34);
  }
  sub_21B8F2178((uint64_t)v35, (uint64_t)v36);
  sub_21B8F2B10((uint64_t)v36);
  int v26 = &v103;
  do
  {
    if (*((unsigned char *)v26 - 8))
    {
      uint64_t v27 = *(v26 - 4);
      if (v27)
      {
        uint64_t v28 = *(v26 - 3);
        uint64_t v29 = (void *)*(v26 - 4);
        if (v28 != v27)
        {
          do
          {
            if (*(char *)(v28 - 1) < 0) {
              operator delete(*(void **)(v28 - 24));
            }
            v28 -= 24;
          }
          while (v28 != v27);
          uint64_t v29 = (void *)*(v26 - 4);
        }
        *(v26 - 3) = v27;
        operator delete(v29);
      }
    }
    unint64_t v30 = (void *)*(v26 - 7);
    if (v30)
    {
      *(v26 - 6) = (uint64_t)v30;
      operator delete(v30);
    }
    int v31 = (std::string *)(v26 - 10);
    if (*((char *)v26 - 57) < 0) {
      operator delete(v31->__r_.__value_.__l.__data_);
    }
    v26 -= 10;
  }
  while (v31 != &__p);
  unint64_t v32 = (char *)operator new(0x20uLL);
  strcpy(v32, "output_batch_size_512_0_0");
  *(void *)a2 = 0x700000003;
  *(void *)(a2 + 16) = 512;
  *(void *)(a2 + 24) = 0x6D695F7475706E69;
  *(void *)(a2 + 32) = 6645601;
  *(unsigned char *)(a2 + 47) = 11;
  *(void *)(a2 + 48) = 0x746E696F7079656BLL;
  *(void *)(a2 + 56) = 115;
  *(unsigned char *)(a2 + 71) = 9;
  *(_DWORD *)(a2 + 8) = 0;
  sub_21B846188((unsigned char *)(a2 + 72), v32, 0x19uLL);
  sub_21B91A65C(&__p);
  if ((_BYTE)v38)
  {
    *(std::string *)(a2 + 96) = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *(unsigned char *)(a2 + 119) = 0;
    *(unsigned char *)(a2 + 96) = 0;
  }
  *(_DWORD *)(a2 + 120) = a1;
  sub_21B8F2178(a2 + 128, (uint64_t)v35);
  if ((_BYTE)v38 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator delete(v32);
  sub_21B8E5D7C((int)v35, (void **)v35[2]);
  unsigned int v33 = v35[0];
  v35[0] = 0;
  if (v33) {
    operator delete(v33);
  }
}

void sub_21B8FFE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (*(char *)(v39 + 119) < 0) {
    operator delete(*v42);
  }
  if (a39)
  {
    if (a38 < 0) {
      operator delete(__p);
    }
  }
  if (*(char *)(v39 + 95) < 0)
  {
    operator delete(*v41);
    if ((*(char *)(v39 + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*(char *)(v39 + 47) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v39 + 71) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(v39 + 48));
  if ((*(char *)(v39 + 47) & 0x80000000) == 0)
  {
LABEL_10:
    operator delete(v40);
    sub_21B8F12E8((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v39 + 24));
  goto LABEL_10;
}

void sub_21B8FFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  do
  {
    v33 -= 80;
    sub_21B8F205C((uint64_t)v33);
  }
  while (v33 != &a33);
  _Unwind_Resume(a1);
}

void sub_21B8FFF34(_Unwind_Exception *a1)
{
}

void sub_21B8FFF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_21B8F2B10((uint64_t)&a17);
  sub_21B8F205C(v35);
  sub_21B8F205C(v34);
  sub_21B8F205C(v41);
  sub_21B8F205C(v40);
  sub_21B8F205C(v39);
  sub_21B8F205C(a10);
  sub_21B8F205C(v33);
  sub_21B8F205C(v36);
  sub_21B8F205C(v38);
  sub_21B8F205C(v37);
  sub_21B8F205C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_21B8FFFA8(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B835F34(&__p);
  sub_21B928D38((uint64_t)&__p, 0xDu);
  if (v7 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_21B91AF88(&__p);
  *(void *)a2 = 2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_21B9AF570;
  *(void *)(a2 + 32) = 0x7475706E69;
  *(unsigned char *)(a2 + 55) = 5;
  *(void *)(a2 + 56) = 0x74757074756FLL;
  *(unsigned char *)(a2 + 79) = 6;
  uint64_t v4 = (unsigned char *)(a2 + 80);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_WORD *)(a2 + 104) = 256;
    *(_DWORD *)(a2 + 108) = a1;
    *(unsigned char *)(a2 + 112) = 0;
    *(unsigned char *)(a2 + 136) = 0;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 96) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_WORD *)(a2 + 104) = 256;
    *(_DWORD *)(a2 + 108) = a1;
    *(unsigned char *)(a2 + 112) = 0;
    *(unsigned char *)(a2 + 136) = 0;
  }
}

void sub_21B9000DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v15 + 79) < 0) {
    operator delete(*(void **)(v15 + 56));
  }
  if (*(char *)(v15 + 55) < 0) {
    operator delete(*(void **)(v15 + 32));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B900128(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_21B91B8F4(&__p);
  *(void *)a2 = 2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_21B9AF570;
  strcpy((char *)(a2 + 32), "input_patches");
  *(_WORD *)(a2 + 46) = 0;
  *(unsigned char *)(a2 + 55) = 13;
  *(void *)(a2 + 56) = 0x74757074756FLL;
  *(unsigned char *)(a2 + 79) = 6;
  uint64_t v4 = (unsigned char *)(a2 + 80);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    BOOL v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  }
  else
  {
    BOOL v5 = 0;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 96) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *(_WORD *)(a2 + 104) = 256;
  *(_DWORD *)(a2 + 108) = a1;
  strcpy((char *)(a2 + 112), "input_keypoints");
  *(_WORD *)(a2 + 135) = 271;
  if (v5) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B900234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 79) < 0)
  {
    operator delete(*(void **)(v15 + 56));
    if ((*(char *)(v15 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v15 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 + 32));
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B900288(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 103);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 88);
  }
  if (v1 >= 7)
  {
    if (v2 >= 0) {
      uint64_t v3 = a1 + 80;
    }
    else {
      uint64_t v3 = *(void *)(a1 + 80);
    }
    uint64_t v4 = v1 + v3;
    int v5 = *(_DWORD *)(v4 - 7);
    int v6 = *(_DWORD *)(v4 - 4);
    if (v5 == 1853186606 && v6 == 1701602414)
    {
      LOBYTE(v10) = 0;
      char v11 = 0;
      sub_21B90A800((uint64_t)v12, a1, (uint64_t)&v10);
      sub_21B9004B8((uint64_t)v12);
    }
  }
  LOBYTE(v8) = 0;
  char v9 = 0;
  sub_21B90A34C((uint64_t)v12, a1, (uint64_t)&v8);
  sub_21B900AC8((uint64_t)v12);
}

void sub_21B900458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

void sub_21B9004B8(uint64_t a1)
{
}

void sub_21B9009F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 81) < 0)
  {
    operator delete(*(void **)(v9 - 104));
    sub_21B8E2238((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_21B8E2238((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B900AC8(uint64_t a1)
{
}

void sub_21B901014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 81) < 0)
  {
    operator delete(*(void **)(v9 - 104));
    sub_21B8E2238((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_21B8E2238((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9010E8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v66 = a5;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 > (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 254, (uint64_t)"patches.NumberOfUsedPatches() <= model->BatchSize()", 51, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B902C48((uint64_t)&v51, a2);
  uint64_t v12 = v52;
  uint64_t v13 = v53;
  kdebug_trace();
  uint64_t v65 = 0;
  v69[0] = &unk_26CB9DD40;
  v69[1] = &v65;
  void v69[2] = 0;
  int v70 = v69;
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))();
  v63[0] = a1;
  v63[1] = &v66;
  int v64 = v13;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15 != (*(uint64_t (**)(void))(*(void *)*a1 + 32))())
  {
    char v51 = &unk_26CB95798;
    uint64_t v17 = *(void *)(a2 + 32);
    int v18 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v18)
    {
      __int16 v23 = *(_WORD *)(a2 + 72);
      uint64_t v52 = *(void *)(a2 + 32);
      char v53 = 0;
      long long v54 = *(_OWORD *)(a2 + 48);
      uint64_t v55 = *(void *)(a2 + 64);
      __int16 v56 = v23;
      unsigned int v21 = HIDWORD(v54);
      goto LABEL_15;
    }
    p_shared_owners = &v18->__shared_owners_;
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    __int16 v20 = *(_WORD *)(a2 + 72);
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v54 = *(_OWORD *)(a2 + 48);
    uint64_t v55 = *(void *)(a2 + 64);
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v52 = v17;
    char v53 = v18;
    __int16 v56 = v20;
    if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_9;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_9:
        unsigned int v21 = HIDWORD(v54);
        uint64_t v22 = v53;
        if (!v53) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    unsigned int v21 = HIDWORD(v54);
    uint64_t v22 = v53;
    if (!v53) {
      goto LABEL_15;
    }
LABEL_14:
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v21 >= v13) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_15:
    if (v21 >= v13) {
      goto LABEL_17;
    }
LABEL_16:
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 215, (uint64_t)"this->Patches().Height() >= batch_start + num_patches", 53, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
LABEL_17:
    char v51 = &unk_26CB95798;
    uint64_t v24 = *(void *)(a2 + 32);
    long long v25 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v25)
    {
      __int16 v29 = *(_WORD *)(a2 + 72);
      uint64_t v52 = *(void *)(a2 + 32);
      char v53 = 0;
      long long v54 = *(_OWORD *)(a2 + 48);
      uint64_t v55 = *(void *)(a2 + 64);
      __int16 v56 = v29;
      uint64_t v28 = v52;
      if (!v52) {
        goto LABEL_36;
      }
LABEL_28:
      unint64_t v30 = v53;
      if (v53)
      {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        uint64_t v28 = v52;
        int v31 = v53;
        if (v53)
        {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      if (HIBYTE(v56))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v28 + 96))(&v68, v28, 0);
        goto LABEL_37;
      }
LABEL_36:
      uint64_t v68 = 0;
LABEL_37:
      uint64_t v32 = *(void *)a2;
      v67[0] = DWORD2(v54);
      v67[1] = v13;
      uint64_t v44 = v54;
      uint64_t v45 = &unk_26CB95798;
      if (DWORD2(v54)) {
        BOOL v33 = v13 == 0;
      }
      else {
        BOOL v33 = 1;
      }
      unint64_t v34 = (unint64_t)HIDWORD(v55) << 32;
      if (v33) {
        unint64_t v34 = 0;
      }
      *(void *)&long long v43 = v34 | (DWORD2(v54) != 0);
      sub_21B904780(&v44, v67, (uint64_t *)&v43, (uint64_t)&v46);
      v57[0] = v32;
      v57[1] = v13;
      v57[2] = v13;
      void v57[3] = &unk_26CB95798;
      uint64_t v35 = v46;
      uint64_t v36 = v47;
      if (!v47)
      {
        uint64_t v58 = v46;
        char v59 = 0;
        long long v60 = v48;
        uint64_t v61 = v49;
        __int16 v62 = v50;
        goto LABEL_52;
      }
      uint64_t v37 = &v47->__shared_owners_;
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      __int16 v38 = v50;
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v60 = v48;
      uint64_t v61 = v49;
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v58 = v35;
      char v59 = v36;
      __int16 v62 = v38;
      if (atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_45;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_45:
          uint64_t v39 = v47;
          if (!v47) {
            goto LABEL_52;
          }
          goto LABEL_50;
        }
      }
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      uint64_t v39 = v47;
      if (!v47) {
        goto LABEL_52;
      }
LABEL_50:
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
LABEL_52:
      uint64_t v40 = v68;
      uint64_t v68 = 0;
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      }
      uint64_t v41 = v53;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      LOWORD(v45) = 0;
      sub_21B90E9B0((uint64_t)&v51, v12, v14);
    }
    int v26 = &v25->__shared_owners_;
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    __int16 v27 = *(_WORD *)(a2 + 72);
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v54 = *(_OWORD *)(a2 + 48);
    uint64_t v55 = *(void *)(a2 + 64);
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v52 = v24;
    char v53 = v25;
    __int16 v56 = v27;
    if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(v26, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_20;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (atomic_fetch_add(v26, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_20:
        uint64_t v28 = v52;
        if (!v52) {
          goto LABEL_36;
        }
        goto LABEL_28;
      }
    }
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    uint64_t v28 = v52;
    if (!v52) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  sub_21B902E20(a6, v63, a2, a3, a4);
  v57[0] = 0;
  uint64_t v45 = v57;
  uint64_t v16 = *(unsigned int *)(a6 + 24);
  if (v16 == -1) {
    sub_21B84C734();
  }
  char v51 = &v45;
  ((void (*)(void **, uint64_t))off_26CB9E8B8[v16])(&v51, a6);
  uint64_t v65 = v57[0];
  if (!v70) {
    sub_21B846100();
  }
  (*(void (**)(void *))(*v70 + 48))(v70);
  uint64_t result = (uint64_t)v70;
  if (v70 == v69) {
    return (*(uint64_t (**)(void *))(v69[0] + 32))(v69);
  }
  if (v70) {
    return (*(uint64_t (**)(void))(*v70 + 40))();
  }
  return result;
}

void sub_21B902A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_21B85E304(v54 - 192);
  sub_21B84BE64((uint64_t)&a11);
  sub_21B90308C((uint64_t)&a21);
  sub_21B90308C((uint64_t)&a31);
  sub_21B903108((uint64_t)&a42);
  sub_21B90308C((uint64_t)&a54);
  sub_21B83804C((void *)(v54 - 136));
  _Unwind_Resume(a1);
}

void sub_21B902BE4(_Unwind_Exception *a1)
{
  sub_21B863104(v1);
  sub_21B83804C((void *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_21B902C00(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_21B902C1C(_Unwind_Exception *a1)
{
  sub_21B83804C((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_21B902C30(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B902C48(uint64_t a1, uint64_t a2)
{
  sub_21B8DFD90(a2 + 24, &v13);
  if (*(unsigned char *)(a2 + 72) && *(void *)(a2 + 48))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    int v5 = *(std::__shared_weak_count **)(a2 + 40);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  int v6 = *(_DWORD *)(a2 + 68);
  unint64_t v7 = *(unsigned int *)(a2 + 64) | ((unint64_t)*(void *)a2 << 32);
  BOOL v8 = *(void *)a2 == 0;
  if (!*(_DWORD *)(a2 + 16)) {
    BOOL v8 = 1;
  }
  BOOL v9 = !v8;
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)a2 | (*(void *)a2 << 32);
  }
  if (v9) {
    int v11 = *(_DWORD *)(a2 + 16);
  }
  else {
    int v11 = 0;
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 28) = v6;
  if (v11 * v6 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B902DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B902E20(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = *((unsigned int *)a2 + 4);
    if (a4 == v9)
    {
      uint64_t v10 = *(void (**)(void))(*(void *)**a2 + 64);
      v10();
    }
    else
    {
      if (v9)
      {
        uint64_t v12 = (int64x2_t *)operator new(8 * v9);
        uint64_t v13 = v12;
        uint64_t v14 = (unint64_t *)v12 + v9;
        unint64_t v15 = *a5;
        unint64_t v16 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v17 = (unint64_t *)v12;
        if (v16 < 3) {
          goto LABEL_26;
        }
        unint64_t v18 = v16 + 1;
        uint64_t v17 = (unint64_t *)v12 + (v18 & 0x3FFFFFFFFFFFFFFCLL);
        int64x2_t v19 = vdupq_n_s64(v15);
        __int16 v20 = v12 + 1;
        uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20[-1] = v19;
          *__int16 v20 = v19;
          v20 += 2;
          v21 -= 4;
        }
        while (v21);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_26:
          do
            *v17++ = v15;
          while (v17 != v14);
        }
      }
      else
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      memmove(v13, a5, 8 * a4);
      (*(void (**)(void, uint64_t, int64_t, int64x2_t *, void))(*(void *)**a2 + 64))(**a2, a3, ((char *)v14 - (char *)v13) >> 3, v13, *a2[1]);
      if (v13)
      {
        operator delete(v13);
      }
    }
  }
  else
  {
    int v11 = *(void (**)(void))(*(void *)**a2 + 56);
    v11();
  }
}

void sub_21B903074(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B90308C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 40);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B903108(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 88))();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_21B90319C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  sub_21B902C48((uint64_t)v76, a2);
  int v14 = v77;
  if (a3 != v77
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorExtractionUtil.cpp", 333, (uint64_t)"keypoints.size() == n", 21, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v15 = *(void *)(a2 + 8);
  LODWORD(v90) = 65;
  LOBYTE(v99[0]) = 0;
  char v106 = 0;
  long long v78 = xmmword_21B9AF580;
  *(_DWORD *)char v79 = v14;
  LOBYTE(v86) = 0;
  BYTE4(v87) = 0;
  sub_21B91C3BC((uint64_t)&v64, a4, &v78, &v86, (int *)&v90, (uint64_t)v99);
  if (v106)
  {
    unint64_t v16 = v100;
    if (v100)
    {
      if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  kdebug_trace();
  long long v50 = &unk_26CB95798;
  uint64_t v17 = *(void *)(a2 + 32);
  unint64_t v18 = *(std::__shared_weak_count **)(a2 + 40);
  if (!v18)
  {
    __int16 v21 = *(_WORD *)(a2 + 72);
    uint64_t v51 = *(void *)(a2 + 32);
    uint64_t v52 = 0;
    long long v53 = *(_OWORD *)(a2 + 48);
    uint64_t v54 = *(void *)(a2 + 64);
    __int16 v55 = v21;
    goto LABEL_14;
  }
  p_shared_owners = &v18->__shared_owners_;
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v20 = *(_WORD *)(a2 + 72);
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v53 = *(_OWORD *)(a2 + 48);
  uint64_t v54 = *(void *)(a2 + 64);
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v51 = v17;
  uint64_t v52 = v18;
  __int16 v55 = v20;
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
LABEL_14:
  *(void *)&long long v78 = &unk_26CB954E0;
  sub_21B8F2D38((uint64_t)&v50, (uint64_t)&v78 + 8);
  uint64_t v22 = *((void *)&v78 + 1);
  __int16 v23 = *(std::__shared_weak_count **)v79;
  *(void *)&long long v86 = &unk_26CB954E0;
  *((void *)&v86 + 1) = *((void *)&v78 + 1);
  uint64_t v87 = *(void *)v79;
  *(_OWORD *)uint64_t v88 = *(_OWORD *)&v79[8];
  *(_OWORD *)&v88[14] = *(_OWORD *)&v79[22];
  int v89 = 2;
  int v107 = -1;
  v99[0] = &unk_26CB954E0;
  if (*(void *)v79)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v79 + 8), 1uLL, memory_order_relaxed);
    uint64_t v24 = *(void *)&v88[16];
    int v25 = *(_DWORD *)&v88[24];
    __int16 v26 = *(_WORD *)&v88[28];
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v24 = *(void *)&v88[16];
    int v25 = *(_DWORD *)&v88[24];
    __int16 v26 = *(_WORD *)&v88[28];
  }
  v99[1] = v22;
  long long v100 = v23;
  uint64_t v101 = *(void *)v88;
  int v102 = *(_DWORD *)&v88[8];
  uint64_t v103 = v24;
  int v104 = v25;
  __int16 v105 = v26;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  int v107 = 2;
  long long v90 = v64;
  long long v91 = v65;
  long long v92 = v66;
  int v93 = v67;
  char v98 = 0;
  if (v75)
  {
    __int16 v94 = &unk_26CB954E0;
    uint64_t v27 = v68;
    uint64_t v28 = v69;
    if (v69)
    {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v29 = v72;
      int v30 = v73;
      __int16 v31 = v74;
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v29 = v72;
      int v30 = v73;
      __int16 v31 = v74;
    }
    uint64_t v95 = v27;
    char v96 = v28;
    *(void *)long long v97 = v70;
    *(_DWORD *)&v97[8] = v71;
    *(void *)&v97[16] = v29;
    *(_DWORD *)&char v97[24] = v30;
    *(_WORD *)&v97[28] = v31;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    long long v78 = v90;
    *(_OWORD *)char v79 = v91;
    *(_OWORD *)&v79[16] = v92;
    *(_DWORD *)&v79[32] = v93;
    uint64_t v32 = v95;
    BOOL v33 = v96;
    char v80 = &unk_26CB954E0;
    uint64_t v81 = v95;
    int v82 = v96;
    *(_OWORD *)char v83 = *(_OWORD *)v97;
    *(_OWORD *)&v83[14] = *(_OWORD *)&v97[14];
    char v84 = 1;
    int v85 = 1;
    int v121 = -1;
    long long v108 = v90;
    long long v109 = v91;
    long long v110 = v92;
    int v111 = v93;
    char v120 = 0;
    float64x2_t v112 = &unk_26CB954E0;
    if (v96)
    {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v34 = *(void *)&v83[16];
      int v35 = *(_DWORD *)&v83[24];
      __int16 v36 = *(_WORD *)&v83[28];
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v34 = *(void *)&v83[16];
      int v35 = *(_DWORD *)&v83[24];
      __int16 v36 = *(_WORD *)&v83[28];
    }
    uint64_t v113 = v32;
    int v114 = v33;
    uint64_t v115 = *(void *)v83;
    int v116 = *(_DWORD *)&v83[8];
    uint64_t v117 = v34;
    int v118 = v35;
    __int16 v119 = v36;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    char v120 = 1;
  }
  else
  {
    long long v78 = v64;
    *(_OWORD *)char v79 = v65;
    *(_OWORD *)&v79[16] = v66;
    *(_DWORD *)&v79[32] = v67;
    LOBYTE(v80) = 0;
    char v84 = 0;
    int v85 = 1;
    int v121 = -1;
    long long v108 = v64;
    long long v109 = v65;
    long long v110 = v66;
    int v111 = v67;
    LOBYTE(v112) = 0;
    char v120 = 0;
  }
  int v121 = 1;
  sub_21B9054E4(&__p, (uint64_t)v99, 2uLL);
  if (v121 != -1) {
    ((void (*)(long long *, long long *))off_26CB9DC30[v121])(&v90, &v108);
  }
  int v121 = -1;
  if (v107 != -1) {
    ((void (*)(long long *, void *))off_26CB9DC30[v107])(&v90, v99);
  }
  int v107 = -1;
  if (v85 != -1) {
    ((void (*)(long long *, long long *))off_26CB9DC30[v85])(&v90, &v78);
  }
  if (v89 != -1) {
    ((void (*)(long long *, long long *))off_26CB9DC30[v89])(&v78, &v86);
  }
  sub_21B93AC30(*(void *)(a1 + 16), (uint64_t *)&__p, a5, a6, (uint64_t)&v58);
  uint64_t v37 = (char *)__p;
  if (__p)
  {
    __int16 v38 = v57;
    uint64_t v39 = __p;
    if (v57 != __p)
    {
      do
      {
        uint64_t v40 = v38 - 128;
        uint64_t v41 = *((unsigned int *)v38 - 2);
        if (v41 != -1) {
          ((void (*)(void *, char *))off_26CB9DC30[v41])(v99, v38 - 128);
        }
        *((_DWORD *)v38 - 2) = -1;
        v38 -= 128;
      }
      while (v40 != v37);
      uint64_t v39 = __p;
    }
    char v57 = v37;
    operator delete(v39);
  }
  char v42 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  kdebug_trace();
  if (v59)
  {
    *(void *)(a7 + 32) = 0;
    *(_DWORD *)(a7 + 40) = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    *(void *)a7 = 0;
    *(_DWORD *)(a7 + 24) = 0;
  }
  else
  {
    sub_21B8FB5B0((long long *)v61, v15, a7);
  }
  if (v63)
  {
    long long v43 = (char *)v61;
    if (v61)
    {
      uint64_t v44 = v62;
      uint64_t v45 = v61;
      if (v62 != v61)
      {
        do
        {
          uint64_t v46 = v44 - 128;
          uint64_t v47 = *((unsigned int *)v44 - 2);
          if (v47 != -1) {
            ((void (*)(void *, char *))off_26CB9DC78[v47])(v99, v44 - 128);
          }
          *((_DWORD *)v44 - 2) = -1;
          v44 -= 128;
        }
        while (v46 != v43);
        uint64_t v45 = v61;
      }
      __int16 v62 = v43;
      operator delete(v45);
    }
  }
  uint64_t v58 = &unk_26CB95650;
  long long v48 = v60;
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v75)
  {
    uint64_t v49 = v69;
    if (v69)
    {
      if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
}

void sub_21B903AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_21B903AE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21B83DE50(a1);
}

void sub_21B903BA8(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    uint64_t v7 = *((void *)a3 + 8);
    BOOL v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
    }
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    uint64_t v12 = *((void *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 104) = v10;
    *(_WORD *)(a2 + 108) = v11;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(unsigned char *)(a2 + 112) = 1;
  }
}

void sub_21B903CB0(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 56) = &unk_26CB954E0;
    uint64_t v7 = *((void *)a3 + 8);
    BOOL v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 12);
      int v10 = *((_DWORD *)a3 + 26);
      __int16 v11 = *((_WORD *)a3 + 54);
    }
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    uint64_t v12 = *((void *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 104) = v10;
    *(_WORD *)(a2 + 108) = v11;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(unsigned char *)(a2 + 112) = 1;
  }
}

void sub_21B903DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26CB954E0;
  uint64_t v3 = *(void *)(a3 + 8);
  long long v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a3 + 40);
    int v6 = *(_DWORD *)(a3 + 48);
    __int16 v7 = *(_WORD *)(a3 + 52);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *(void *)(a3 + 40);
    int v6 = *(_DWORD *)(a3 + 48);
    __int16 v7 = *(_WORD *)(a3 + 52);
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  uint64_t v8 = *(void *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 40) = v5;
  *(_DWORD *)(a2 + 48) = v6;
  *(_WORD *)(a2 + 52) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

float sub_21B903EA0(_DWORD *a1, float *a2, unsigned char *a3)
{
  if (a1[8])
  {
    unsigned int v3 = 0;
    do
    {
      long long v4 = a2;
      uint64_t v5 = a3;
      if (a1[5])
      {
        unsigned int v6 = 0;
        long long v4 = a2;
        uint64_t v5 = a3;
        do
        {
          __int16 v7 = v5;
          uint64_t v8 = v4;
          if (a1[2])
          {
            unsigned int v9 = 0;
            uint64_t v8 = v4;
            __int16 v7 = v5;
            do
            {
              *__int16 v7 = (int)*v8;
              v8 += a1[3];
              v7 += a1[4];
              ++v9;
            }
            while (v9 < a1[2]);
          }
          *__int16 v7 = (int)*v8;
          v4 += a1[6];
          v5 += a1[7];
          ++v6;
        }
        while (v6 < a1[5]);
      }
      if (a1[2])
      {
        unsigned int v10 = 0;
        do
        {
          unsigned char *v5 = (int)*v4;
          v4 += a1[3];
          v5 += a1[4];
          ++v10;
        }
        while (v10 < a1[2]);
      }
      unsigned char *v5 = (int)*v4;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = a3;
      uint64_t v13 = a2;
      if (a1[2])
      {
        unsigned int v14 = 0;
        uint64_t v13 = a2;
        uint64_t v12 = a3;
        do
        {
          *uint64_t v12 = (int)*v13;
          v13 += a1[3];
          v12 += a1[4];
          ++v14;
        }
        while (v14 < a1[2]);
      }
      *uint64_t v12 = (int)*v13;
      a2 += a1[6];
      a3 += a1[7];
      ++v11;
    }
    while (v11 < a1[5]);
  }
  if (a1[2])
  {
    unsigned int v15 = 0;
    do
    {
      *a3 = (int)*a2;
      a2 += a1[3];
      a3 += a1[4];
      ++v15;
    }
    while (v15 < a1[2]);
  }
  float result = *a2;
  *a3 = (int)*a2;
  return result;
}

__int16 sub_21B904064@<H0>(_DWORD *a1@<X0>, short float *a2@<X1>, unsigned char *a3@<X2>)
{
  if (a1[8])
  {
    unsigned int v3 = 0;
    do
    {
      long long v4 = a2;
      uint64_t v5 = a3;
      if (a1[5])
      {
        unsigned int v6 = 0;
        long long v4 = a2;
        uint64_t v5 = a3;
        do
        {
          __int16 v7 = v5;
          uint64_t v8 = v4;
          if (a1[2])
          {
            unsigned int v9 = 0;
            uint64_t v8 = v4;
            __int16 v7 = v5;
            do
            {
              *__int16 v7 = (int)*v8;
              v8 += a1[3];
              v7 += a1[4];
              ++v9;
            }
            while (v9 < a1[2]);
          }
          *__int16 v7 = (int)*v8;
          v4 += a1[6];
          v5 += a1[7];
          ++v6;
        }
        while (v6 < a1[5]);
      }
      if (a1[2])
      {
        unsigned int v10 = 0;
        do
        {
          unsigned char *v5 = (int)*v4;
          v4 += a1[3];
          v5 += a1[4];
          ++v10;
        }
        while (v10 < a1[2]);
      }
      unsigned char *v5 = (int)*v4;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = a3;
      uint64_t v13 = a2;
      if (a1[2])
      {
        unsigned int v14 = 0;
        uint64_t v13 = a2;
        uint64_t v12 = a3;
        do
        {
          *uint64_t v12 = (int)*v13;
          v13 += a1[3];
          v12 += a1[4];
          ++v14;
        }
        while (v14 < a1[2]);
      }
      *uint64_t v12 = (int)*v13;
      a2 += a1[6];
      a3 += a1[7];
      ++v11;
    }
    while (v11 < a1[5]);
  }
  if (a1[2])
  {
    unsigned int v15 = 0;
    do
    {
      *a3 = (int)*a2;
      a2 += a1[3];
      a3 += a1[4];
      ++v15;
    }
    while (v15 < a1[2]);
  }
  __int16 result = *(_WORD *)a2;
  *a3 = (int)*a2;
  return result;
}

float sub_21B904228(_DWORD *a1, __int16 *a2, _DWORD *a3)
{
  int v3 = a1[8];
  int v4 = a1[5];
  if (v3)
  {
    int v5 = a1[2];
    uint64_t v6 = a1[9];
    uint64_t v7 = a1[10];
    if (v4)
    {
      uint64_t v8 = a1[6];
      uint64_t v9 = a1[7];
      if (!v5)
      {
        do
        {
          uint64_t v70 = a3;
          int v71 = a2;
          int v72 = v4;
          do
          {
            _H0 = *v71;
            __asm { FCVT            S0, H0 }
            _DWORD *v70 = _S0;
            v71 += v8;
            v70 += v9;
            --v72;
          }
          while (v72);
          _H0 = *v71;
          __asm { FCVT            S0, H0 }
          _DWORD *v70 = _S0;
          a2 += v6;
          a3 += v7;
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_32;
      }
      int v10 = 0;
      uint64_t v11 = 2 * v6;
      uint64_t v12 = v8;
      uint64_t v13 = 2 * a1[3];
      uint64_t v14 = 4 * v7;
      uint64_t v15 = v9;
      uint64_t v16 = 4 * a1[4];
      uint64_t v17 = &a2[v12];
      unint64_t v18 = &a3[v15];
      do
      {
        int v19 = 0;
        __int16 v20 = v18;
        __int16 v21 = v17;
        uint64_t v22 = a3;
        __int16 v23 = a2;
        do
        {
          uint64_t v24 = v21;
          int v25 = v20;
          __int16 v26 = v22;
          uint64_t v27 = v23;
          int v28 = v5;
          do
          {
            _H0 = *v27;
            __asm { FCVT            S0, H0 }
            *__int16 v26 = _S0;
            uint64_t v27 = (__int16 *)((char *)v27 + v13);
            __int16 v26 = (_DWORD *)((char *)v26 + v16);
            --v28;
          }
          while (v28);
          _H0 = *v27;
          __asm { FCVT            S0, H0 }
          *__int16 v26 = _S0;
          __int16 v23 = (__int16 *)((char *)v23 + v12 * 2);
          uint64_t v22 = (_DWORD *)((char *)v22 + v15 * 4);
          ++v19;
          __int16 v21 = &v24[v12];
          __int16 v20 = &v25[v15];
        }
        while (v19 != v4);
        int v37 = v5;
        do
        {
          _H0 = *v24;
          __asm { FCVT            S0, H0 }
          *int v25 = _S0;
          uint64_t v24 = (__int16 *)((char *)v24 + v13);
          int v25 = (_DWORD *)((char *)v25 + v16);
          --v37;
        }
        while (v37);
        _H0 = *v24;
        __asm { FCVT            S0, H0 }
        *int v25 = _S0;
        a2 = (__int16 *)((char *)a2 + v11);
        a3 = (_DWORD *)((char *)a3 + v14);
        ++v10;
        uint64_t v17 = (__int16 *)((char *)v17 + v11);
        unint64_t v18 = (_DWORD *)((char *)v18 + v14);
      }
      while (v10 != v3);
LABEL_14:
      uint64_t v8 = a1[6];
      uint64_t v9 = a1[7];
      if (v5)
      {
        int v42 = 0;
        uint64_t v43 = 2 * v8;
        uint64_t v44 = 2 * a1[3];
        uint64_t v45 = 4 * v9;
        uint64_t v46 = 4 * a1[4];
        do
        {
          uint64_t v47 = a3;
          long long v48 = a2;
          int v49 = v5;
          do
          {
            _H0 = *v48;
            __asm { FCVT            S0, H0 }
            *uint64_t v47 = _S0;
            long long v48 = (__int16 *)((char *)v48 + v44);
            uint64_t v47 = (_DWORD *)((char *)v47 + v46);
            --v49;
          }
          while (v49);
          _H0 = *v48;
          __asm { FCVT            S0, H0 }
          *uint64_t v47 = _S0;
          a2 = (__int16 *)((char *)a2 + v43);
          a3 = (_DWORD *)((char *)a3 + v45);
          ++v42;
        }
        while (v42 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        _H0 = *a2;
        __asm { FCVT            S0, H0 }
        *a3 = _S0;
        a2 += v8;
        a3 += v9;
        --v4;
      }
      while (v4);
      goto LABEL_35;
    }
    if (!v5)
    {
      do
      {
        _H0 = *a2;
        __asm { FCVT            S0, H0 }
        *a3 = _S0;
        a2 += v6;
        a3 += v7;
        --v3;
      }
      while (v3);
      goto LABEL_35;
    }
    int v54 = 0;
    uint64_t v55 = 2 * v6;
    uint64_t v56 = 2 * a1[3];
    uint64_t v57 = 4 * v7;
    uint64_t v58 = 4 * a1[4];
    do
    {
      char v59 = a3;
      long long v60 = a2;
      int v61 = v5;
      do
      {
        _H0 = *v60;
        __asm { FCVT            S0, H0 }
        *char v59 = _S0;
        long long v60 = (__int16 *)((char *)v60 + v56);
        char v59 = (_DWORD *)((char *)v59 + v58);
        --v61;
      }
      while (v61);
      _H0 = *v60;
      __asm { FCVT            S0, H0 }
      *char v59 = _S0;
      a2 = (__int16 *)((char *)a2 + v55);
      a3 = (_DWORD *)((char *)a3 + v57);
      ++v54;
    }
    while (v54 != v3);
  }
  else
  {
    int v5 = a1[2];
    if (v4) {
      goto LABEL_14;
    }
  }
LABEL_25:
  if (v5)
  {
    uint64_t v66 = 2 * a1[3];
    uint64_t v67 = 4 * a1[4];
    do
    {
      _H0 = *a2;
      __asm { FCVT            S0, H0 }
      *a3 = _S0;
      a2 = (__int16 *)((char *)a2 + v66);
      a3 = (_DWORD *)((char *)a3 + v67);
      --v5;
    }
    while (v5);
  }
LABEL_35:
  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  *(float *)a3 = result;
  return result;
}

void sub_21B904500(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B904520(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B904574(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21B90459C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DCF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B9045BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9DCF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B904610(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21B90463C()
{
}

__n128 sub_21B904650(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9DD40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B90469C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9DD40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B9046CC()
{
  return kdebug_trace();
}

uint64_t sub_21B904704(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature21DescriptorsForPatchesENS3_10shared_p"
                     "trINS6_16IDescriptorModelEEERKNS5_2pc16ImagePatchesViewIKhEENS0_4spanIKNS0_4math6VectorIfLj2EEELm18"
                     "446744073709551615EEEPvE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature21DescriptorsForPatchesENS3"
                                "_10shared_ptrINS6_16IDescriptorModelEEERKNS5_2pc16ImagePatchesViewIKhEENS0_4spanIKNS0_4m"
                                "ath6VectorIfLj2EEELm18446744073709551615EEEPvE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature21DescriptorsForPatchesENS3_10shared_ptrINS6_16IDescriptorModelEEERKNS5_2pc16ImagePatchesViewIKhEENS0_4spanIKNS0_4math6VectorIfLj2EEELm18446744073709551615EEEPvE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_2lf7feature21DescriptorsForPatchesENS3_10shared_ptrINS6_16IDescriptorModelEEERKNS5_2pc16ImagePatchesViewIKhEENS0_4spanIKNS0_4math6VectorIfLj2EEELm18446744073709551615EEEPvE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B904774()
{
  return &unk_26CB9DDA0;
}

void sub_21B904780(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a2[1]) {
    BOOL v5 = *a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = *(void *)a2;
  if (v5) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *a3;
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v6;
  uint64_t v10 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B9048A4(a4, &v11, &v9);
  uint64_t v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B904890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9048A4(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = &v5->__shared_owners_;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)__n128 result = v4;
    *(void *)(result + 8) = v5;
    long long v7 = *a3;
    *(void *)(result + 32) = *((void *)a3 + 2);
    *(_OWORD *)(result + 16) = v7;
    if (v4)
    {
      uint64_t v8 = (_WORD *)(result + 40);
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_7;
    }
LABEL_12:
    *(_WORD *)(result + 40) = 0;
    *(unsigned char *)(result + 41) = 0;
    return result;
  }
  *(void *)__n128 result = v4;
  *(void *)(result + 8) = 0;
  long long v9 = *a3;
  *(void *)(result + 32) = *((void *)a3 + 2);
  *(_OWORD *)(result + 16) = v9;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v8 = (_WORD *)(result + 40);
LABEL_7:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  unsigned __int8 v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v11 = 0;
  }
  __int16 v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0) {
    __int16 v12 = 0;
  }
  *uint64_t v8 = v12 & 0xFF00 | v11;
  return v3;
}

void sub_21B9049CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B904A20(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (!v6)
  {
    uint64_t v15 = *((void *)a2 + 4);
    long long v17 = a2[3];
    uint64_t v19 = *((void *)a2 + 8);
    __int16 v21 = *((_WORD *)a2 + 36);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &unk_26CB96710;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 48) = v17;
    *(void *)(a1 + 64) = v19;
    *(_WORD *)(a1 + 72) = v21;
    return a1;
  }
  p_shared_owners = &v6->__shared_owners_;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v8 = *((_WORD *)a2 + 36);
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v16 = a2[3];
  uint64_t v18 = *((void *)a2 + 8);
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = v5;
  __int16 v20 = v8;
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_4:
      *(_OWORD *)a1 = v3;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &unk_26CB96710;
      uint64_t v9 = v14;
      goto LABEL_5;
    }
  }
  else
  {
    long long v12 = v3;
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    long long v3 = v12;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_4;
    }
  }
  long long v13 = v3;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  *(_OWORD *)a1 = v13;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = &unk_26CB96710;
  uint64_t v9 = v14;
LABEL_5:
  uint64_t v10 = &v6->__shared_owners_;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v18;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 72) = v20;
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
LABEL_12:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
LABEL_13:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t sub_21B904D14(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 32);
  int v5 = *(_DWORD *)(result + 44);
  if (v5 != *(_DWORD *)(a2 + 44) || v5 != v4)
  {
    size_t v17 = *(unsigned int *)(result + 32);
    return sub_21B904F88(result, a2, &v17);
  }
  size_t v7 = *(unsigned int *)(result + 36) * (unint64_t)v4;
  __int16 v8 = *(const void **)(result + 24);
  if (*(unsigned char *)(result + 48)) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(void *)(result + 8);
    unsigned __int8 v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    __n128 result = (*(uint64_t (**)(uint64_t, void, const char *))(*(void *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    __int16 v8 = *(const void **)(v3 + 24);
  }
  if (v7) {
    BOOL v12 = v8 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    __n128 result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_36;
    }
  }
  long long v13 = *(void **)(a2 + 24);
  if (*(unsigned char *)(a2 + 48) && v13)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v14 + 88))(v14, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    long long v13 = *(void **)(a2 + 24);
  }
  if (v7) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    if (!v7) {
      return result;
    }
    goto LABEL_33;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_36:
    abort();
  }
LABEL_33:

  return (uint64_t)memmove(v13, v8, v7);
}

uint64_t sub_21B904F88(uint64_t a1, uint64_t a2, size_t *a3)
{
  sub_21B8DFD90(a1, &v10);
  sub_21B8FC4C4(a2, &v9);
  if (*(_DWORD *)(a1 + 32)) {
    BOOL v6 = *(_DWORD *)(a1 + 36) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    sub_21B9050E8(a3, a1, a2);
  }
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B905054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    uint64_t v11 = a10;
    if (!a10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v11 = a10;
    if (!a10) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

size_t *sub_21B9050E8(size_t *result, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 32);
  int v3 = *(_DWORD *)(a2 + 36);
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    __int16 v8 = result;
    int v18 = v4 - 1;
    uint64_t v9 = *(unsigned int *)(a2 + 44);
    uint64_t v10 = *(unsigned int *)(a3 + 44);
    unint64_t v19 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
    uint64_t v17 = 0;
    int v20 = v3 - 1;
    uint64_t v21 = v9 | (v10 << 32);
    uint64_t v11 = *(char **)(a2 + 24);
    if (*(unsigned char *)(a2 + 48) && v11)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      long long v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      uint64_t v11 = *(char **)(a2 + 24);
    }
    uint64_t v14 = *(char **)(a3 + 24);
    if (*(unsigned char *)(a3 + 48) && v14)
    {
      uint64_t v15 = *(void *)(a3 + 8);
      BOOL v16 = *(std::__shared_weak_count **)(a3 + 16);
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v15 + 88))(v15, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      uint64_t v14 = *(char **)(a3 + 24);
    }
    memset(v22, 0, sizeof(v22));
    return (size_t *)sub_21B9052B0((uint64_t)&v17, (uint64_t)v22, v8, v11, v14);
  }
  return result;
}

uint64_t sub_21B9052B0(uint64_t result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  BOOL v5 = __dst;
  BOOL v6 = __src;
  int v9 = *(_DWORD *)(result + 12);
  int v10 = *(_DWORD *)(result + 16);
  *(void *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  if (*(_DWORD *)(result + 20))
  {
    uint64_t v11 = (_DWORD *)result;
    int v12 = 0;
    do
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 16) = v5;
      size_t v13 = *a3;
      uint64_t v14 = v5;
      size_t v15 = *a3;
      if (!v6)
      {
        uint64_t v14 = v5;
        size_t v15 = *a3;
        if (v13)
        {
          uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_25;
          }
          size_t v15 = *a3;
          uint64_t v14 = *(void **)(a2 + 16);
        }
      }
      if (!v14)
      {
        if (v15)
        {
          uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          if (result) {
            goto LABEL_25;
          }
        }
      }
      if (v13) {
        uint64_t result = (uint64_t)memmove(v14, v6, v13);
      }
      v6 += v11[6];
      v5 += v11[7];
    }
    while (++v12 < v11[5]);
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  size_t v16 = *a3;
  size_t v17 = *a3;
  if (!v6 && v16)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
    if (result) {
      goto LABEL_25;
    }
    size_t v17 = *a3;
    BOOL v5 = *(char **)(a2 + 16);
  }
  if (!v5)
  {
    if (v17)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
      if (result) {
LABEL_25:
      }
        abort();
    }
  }
  if (v16)
  {
    return (uint64_t)memmove(v5, v6, v16);
  }
  return result;
}

void *sub_21B9054E4(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 57) {
      sub_21B846300();
    }
    uint64_t v6 = a3 << 7;
    uint64_t v7 = (char *)operator new(a3 << 7);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_21B905608(v4, a2, a2 + v6, (uint64_t)v7);
  }
  return a1;
}

void sub_21B905584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v13[1] = v14;
  size_t v16 = (char *)*v13;
  if (*v13)
  {
    size_t v17 = (char *)v13[1];
    int v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        unint64_t v19 = v17 - 128;
        uint64_t v20 = *((unsigned int *)v17 - 2);
        if (v20 != -1) {
          ((void (*)(char *, char *))off_26CB9DC30[v20])(&a13, v17 - 128);
        }
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v19 != v16);
      int v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B905608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(unsigned char *)uint64_t v8 = 0;
      *(_DWORD *)(v8 + 120) = -1;
      uint64_t v9 = *(unsigned int *)(a2 + v7 + 120);
      if (v9 != -1)
      {
        ((void (*)(unsigned char *, uint64_t))off_26CB9DC60[v9])(v11, a4 + v7);
        *(_DWORD *)(v8 + 120) = v9;
      }
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_21B9056B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + v14 + 120);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9DC30[v16])(&a12, v13 + v14);
  }
  for (*(_DWORD *)(v13 + v14 + 120) = -1; v14; v14 -= 128)
  {
    uint64_t v17 = v13 + v14;
    uint64_t v18 = *(unsigned int *)(v13 + v14 - 8);
    if (v18 != -1) {
      ((void (*)(char *, uint64_t))off_26CB9DC30[v18])(&a13, v17 - 128);
    }
    *(_DWORD *)(v17 - 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void sub_21B90573C(void *a1)
{
  *a1 = &unk_26CB9DE40;
  operator new();
}

void sub_21B905920(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v2, 0x10B3C40BF87A6DDLL);
  MEMORY[0x21D495F30](v1, 0xA0C40A3F8AD00);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9059AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

BOOL sub_21B9059D8(uint64_t a1, _DWORD *a2)
{
  return *a2 > 1u && a2[1] > 1u;
}

void sub_21B9059EC(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  BOOL v5 = (std::__shared_weak_count *)v3[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  v11[0] = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 2);
  v11[1] = v6;
  if (v7)
  {
    unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
    if (v11[0] % v8) {
      unint64_t v9 = v11[0] % v8;
    }
    else {
      unint64_t v9 = v8;
    }
    sub_21B8EC14C(v11, 0, v9);
    operator new();
  }
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_21B906B30()
{
  std::mutex::unlock(v1);
  if (atomic_fetch_add(v0, 0xFFFFFFFFFFFFFFFFLL)) {
    JUMPOUT(0x21B906C3CLL);
  }
  JUMPOUT(0x21B906C14);
}

void sub_21B906B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_21B863104((uint64_t)&a66);
  sub_21B83A360((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_21B906B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::mutex *a33,char a34)
{
  if (a34) {
    std::mutex::unlock(a33);
  }
  if (!v34) {
    JUMPOUT(0x21B906C3CLL);
  }
  JUMPOUT(0x21B906C04);
}

void sub_21B906BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_21B906BE8()
{
}

void sub_21B906C54(int a1@<W0>, void *a2@<X8>)
{
  if (a1 == 2)
  {
    sub_21B900128(0, (uint64_t)__p);
    goto LABEL_17;
  }
  if (a1 == 1)
  {
    sub_21B8FFFA8(0, (uint64_t)__p);
LABEL_17:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v24;
    uint64_t v14 = v25[0];
    v24[1] = 0;
    v25[0] = 0;
    v24[0] = 0;
    if (v28 && SHIBYTE(v27) < 0 && (operator delete(v26), SHIBYTE(v25[0]) < 0))
    {
      operator delete(v24[0]);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
      {
LABEL_21:
        if ((SHIBYTE(v20) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_25:
        BOOL v5 = v18;
LABEL_26:
        operator delete(v5);
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v21);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  sub_21B835F34(__p);
  BOOL v3 = sub_21B928D38((uint64_t)__p, 0xEu);
  if ((_BYTE)v17 && v16 < 0) {
    operator delete(__p[0]);
  }
  if (!v3)
  {
    sub_21B8FF5F4(0, (uint64_t)__p);
    goto LABEL_17;
  }
  sub_21B8FF734(0, (uint64_t)__p);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v25;
  uint64_t v14 = v26;
  v25[1] = 0;
  __int16 v26 = 0;
  v25[0] = 0;
  sub_21B8E5D7C((int)&v27, (void **)v29);
  uint64_t v4 = v27;
  uint64_t v27 = 0;
  if (v4) {
    operator delete(v4);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(v25[0]);
    if ((SHIBYTE(v24[1]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(v24[1]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v23);
  if ((v22 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v20);
  if (v19 < 0)
  {
LABEL_46:
    BOOL v5 = v17;
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v6 = HIBYTE(v14);
  char v7 = HIBYTE(v14);
  if (SHIBYTE(v14) < 0) {
    uint64_t v6 = (uint64_t)v13[1];
  }
  if (v6 < 6) {
    goto LABEL_36;
  }
  unint64_t v8 = (void **)v13[0];
  if (SHIBYTE(v14) >= 0) {
    unint64_t v8 = v13;
  }
  unint64_t v9 = (char *)v8 + v6;
  int v10 = *(_DWORD *)(v9 - 6);
  int v11 = *((unsigned __int16 *)v9 - 1);
  if (v10 != 1684960610 || v11 != 25964)
  {
LABEL_36:
    *a2 = 0;
    a2[1] = 0;
    if ((v7 & 0x80) == 0) {
      return;
    }
LABEL_42:
    operator delete(v13[0]);
    return;
  }
  char v16 = 4;
  strcpy((char *)__p, "main");
  sub_21B83D90C(a2);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((HIBYTE(v14) & 0x80) != 0) {
      goto LABEL_42;
    }
  }
  else if ((HIBYTE(v14) & 0x80) != 0)
  {
    goto LABEL_42;
  }
}

void sub_21B906EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B906EFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9DE40;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_21B906F50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9DE40;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B906FC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 88))();
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_21B907068(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void sub_21B90708C(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B9070F8(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B907178(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return sub_21B907410((uint64_t)a1);
}

void sub_21B9071B4(uint64_t a1)
{
  sub_21B9074DC((uint64_t)&v8, a1 + 264);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v16.__ptr_ = 0, uint64_t v2 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v16), v2))
  {
    sub_21B907D30(2u);
  }
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = &unk_26CB96710;
  long long v3 = v10;
  long long v4 = v11[0];
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 202) = *(_OWORD *)((char *)v11 + 10);
  BOOL v5 = v13;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 232) = v5;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)__p;
  *(void *)(a1 + 256) = v15;
  uint64_t v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    v13();
  }
  char v7 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B90732C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    v39();
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v32, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_21B9073F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t sub_21B907410(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 240);
    if (v2)
    {
      *(void *)(a1 + 248) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 224);
    *(void *)(a1 + 224) = 0;
    if (v3) {
      (*(void (**)(void))(a1 + 232))();
    }
    long long v4 = *(std::__shared_weak_count **)(a1 + 184);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  BOOL v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v5(a1);
}

void sub_21B9074DC(uint64_t a1, uint64_t a2)
{
  v55[1] = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_21B910838(*(uint64_t **)a2, *(void *)(a2 + 8), v5, v4, (uint64_t)&v34);
  (*(void (**)(void *__return_ptr))(***(void ***)(a2 + 16) + 40))(v43);
  if (v45)
  {
    sub_21B907D98((uint64_t)&v34, (uint64_t)&v46);
    sub_21B907D98((uint64_t)&v34, (uint64_t)v53);
    *(void *)&long long v40 = v43;
    if (v47)
    {
      if (v48 && v49)
      {
        *(_DWORD *)&v26[8] = v47 - 1;
        *(void *)&v26[12] = v50 | ((unint64_t)v54 << 32);
        *(void *)__int16 v26 = 0;
        *(_DWORD *)&v26[20] = v48 - 1;
        uint64_t v27 = (void *)(v51 | ((unint64_t)LODWORD(v55[0]) << 32));
        LODWORD(v28) = v49 - 1;
        *(void *)((char *)&v28 + 4) = HIDWORD(v51) | ((unint64_t)HIDWORD(v55[0]) << 32);
        sub_21B907F70(v26, (uint64_t *)&v40, v46, v53[0], v6);
      }
    }
  }
  *(_OWORD *)__int16 v26 = v34;
  *(void *)&v26[16] = v35;
  uint64_t v27 = &unk_26CB96710;
  long long v7 = v36;
  long long v36 = 0uLL;
  long long v28 = v7;
  v29[0] = v37[0];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v37 + 10);
  uint64_t v8 = v38;
  uint64_t v38 = 0;
  uint64_t v30 = v8;
  __int16 v31 = v39;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  (*(void (**)(unsigned char **__return_ptr))(***(void ***)(a2 + 16) + 48))(&v46);
  if (!v52)
  {
    long long v16 = *(_OWORD *)__p;
    uint64_t v17 = v33;
    goto LABEL_35;
  }
  if (v51 != &v46)
  {
    if (v51) {
      (*((void (**)(unsigned char **))*v51 + 5))(v51);
    }
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    if (v5) {
      goto LABEL_11;
    }
LABEL_33:
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    uint64_t v18 = __p[0];
    if (!__p[0]) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  (*((void (**)(unsigned char **))v46 + 4))(&v46);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  if (!v5) {
    goto LABEL_33;
  }
LABEL_11:
  if (v5 >> 61) {
    sub_21B846300();
  }
  *(void *)&long long v40 = operator new(8 * v5);
  *((void *)&v40 + 1) = v40;
  uint64_t v41 = v40 + 8 * v5;
  int v42 = (void **)&v40;
  uint64_t v11 = 20 * v5;
  do
  {
    (*(void (**)(unsigned char **__return_ptr))(**(void **)v9 + 48))(&v46);
    if (!v52) {
      sub_21B8446A8();
    }
    uint64_t v12 = v55;
    if (v51)
    {
      if (v51 == &v46)
      {
        v55[0] = v53;
        (*((void (**)(unsigned char **, unsigned char **))v46 + 3))(&v46, v53);
        if (!v52) {
          goto LABEL_23;
        }
        goto LABEL_18;
      }
      v55[0] = v51;
      uint64_t v12 = &v51;
    }
    *uint64_t v12 = 0;
LABEL_18:
    if (v51 == &v46)
    {
      (*((void (**)(unsigned char **))v46 + 4))(&v46);
    }
    else if (v51)
    {
      (*((void (**)(void))*v51 + 5))();
    }
LABEL_23:
    if (!v55[0]) {
      sub_21B846100();
    }
    float v13 = (*(float (**)(void, uint64_t, uint64_t))(*(void *)v55[0] + 48))(v55[0], v4, v10 + 32);
    unsigned int v15 = v14;
    if ((unsigned char **)v55[0] == v53)
    {
      (*((void (**)(unsigned char **))v53[0] + 4))(v53);
    }
    else if (v55[0])
    {
      (*(void (**)(void))(*(void *)v55[0] + 40))();
    }
    uint64_t v46 = (unsigned char *)__PAIR64__(v15, LODWORD(v13));
    sub_21B8F2BC0(&v42, &v46);
    v4 += 20;
    v11 -= 20;
  }
  while (v11);
  long long v16 = v40;
  uint64_t v17 = v41;
  uint64_t v18 = __p[0];
  if (__p[0])
  {
LABEL_34:
    __p[1] = v18;
    long long v25 = v16;
    operator delete(v18);
    long long v16 = v25;
  }
LABEL_35:
  *(_OWORD *)a1 = *(_OWORD *)v26;
  *(void *)(a1 + 16) = *(void *)&v26[16];
  *(void *)(a1 + 24) = &unk_26CB96710;
  long long v19 = v28;
  long long v28 = 0uLL;
  long long v20 = v29[0];
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 48) = v20;
  *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v29 + 10);
  uint64_t v21 = v31;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v21;
  *(_OWORD *)(a1 + 96) = v16;
  *(void *)(a1 + 112) = v17;
  if (!v45) {
    goto LABEL_39;
  }
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
    uint64_t v24 = v38;
    uint64_t v38 = 0;
    if (v24) {
      goto LABEL_40;
    }
  }
  else
  {
    if (v44) {
      (*(void (**)(void))(*v44 + 40))();
    }
LABEL_39:
    uint64_t v22 = v38;
    uint64_t v38 = 0;
    if (v22) {
LABEL_40:
    }
      v39();
  }
  __int16 v23 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_21B907AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_objecta,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

void sub_21B907D30(unsigned int a1)
{
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::future_category();
  MEMORY[0x21D495BC0](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x263F8C1A0], MEMORY[0x263F8C0C0]);
}

void sub_21B907D84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B907D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21B8FC4C4(a1 + 24, &v13);
  if (*(unsigned char *)(a1 + 72) && *(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  int v6 = *(_DWORD *)(a1 + 68);
  unint64_t v7 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(void *)a1 << 32);
  BOOL v8 = *(void *)a1 == 0;
  if (!*(_DWORD *)(a1 + 16)) {
    BOOL v8 = 1;
  }
  BOOL v9 = !v8;
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)a1 | (*(void *)a1 << 32);
  }
  if (v9) {
    int v11 = *(_DWORD *)(a1 + 16);
  }
  else {
    int v11 = 0;
  }
  *(void *)a2 = *(void *)(a1 + 48);
  *(void *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v11;
  *(void *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 28) = v6;
  if (v11 * v6 == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B907F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B907F70(_DWORD *a1, uint64_t *a2, unsigned char *a3, unsigned char *a4, float a5)
{
  if (a1[8])
  {
    int v9 = 0;
    do
    {
      int v21 = v9;
      uint64_t v10 = a4;
      int v11 = a3;
      if (a1[5])
      {
        unsigned int v12 = 0;
        int v11 = a3;
        uint64_t v10 = a4;
        do
        {
          uint64_t v13 = v10;
          unsigned int v14 = v11;
          if (a1[2])
          {
            int v15 = 0;
            unsigned int v14 = v11;
            uint64_t v13 = v10;
            while (1)
            {
              uint64_t v16 = *a2;
              LOBYTE(a5) = *v14;
              float v23 = (float)LODWORD(a5);
              uint64_t v17 = *(void *)(v16 + 24);
              if (!v17) {
                break;
              }
              a5 = (*(float (**)(uint64_t, float *))(*(void *)v17 + 48))(v17, &v23);
              *uint64_t v13 = (int)a5;
              v14 += a1[3];
              v13 += a1[4];
              if (++v15 >= a1[2]) {
                goto LABEL_10;
              }
            }
LABEL_17:
            sub_21B846100();
          }
LABEL_10:
          uint64_t v18 = *a2;
          LOBYTE(a5) = *v14;
          float v22 = (float)LODWORD(a5);
          uint64_t v19 = *(void *)(v18 + 24);
          if (!v19) {
            goto LABEL_17;
          }
          a5 = (*(float (**)(uint64_t, float *))(*(void *)v19 + 48))(v19, &v22);
          *uint64_t v13 = (int)a5;
          v11 += a1[6];
          v10 += a1[7];
          ++v12;
        }
        while (v12 < a1[5]);
      }
      sub_21B908164(a1, a2, v11, v10, a5);
      a3 += a1[9];
      a4 += a1[10];
      int v9 = v21 + 1;
    }
    while ((v21 + 1) < a1[8]);
  }
  if (a1[5])
  {
    unsigned int v20 = 0;
    do
    {
      sub_21B908164(a1, a2, a3, a4, a5);
      a3 += a1[6];
      a4 += a1[7];
      ++v20;
    }
    while (v20 < a1[5]);
  }
  sub_21B908164(a1, a2, a3, a4, a5);
}

void sub_21B908164(_DWORD *a1, uint64_t *a2, unsigned char *a3, unsigned char *a4, float a5)
{
  if (a1[2])
  {
    int v9 = 0;
    while (1)
    {
      uint64_t v10 = *a2;
      LOBYTE(a5) = *a3;
      float v15 = (float)LODWORD(a5);
      uint64_t v11 = *(void *)(v10 + 24);
      if (!v11) {
        break;
      }
      a5 = (*(float (**)(uint64_t, float *))(*(void *)v11 + 48))(v11, &v15);
      *a4 = (int)a5;
      a3 += a1[3];
      a4 += a1[4];
      if (++v9 >= a1[2]) {
        goto LABEL_5;
      }
    }
LABEL_7:
    sub_21B846100();
  }
LABEL_5:
  uint64_t v12 = *a2;
  LOBYTE(a5) = *a3;
  float v14 = (float)LODWORD(a5);
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13) {
    goto LABEL_7;
  }
  *a4 = (int)(*(float (**)(uint64_t, float *))(*(void *)v13 + 48))(v13, &v14);
}

uint64_t sub_21B908264(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void (**)(void *))(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = (void *)(*(void *)(a1 + 24) + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(void (**)(void *))(*v6 + v4);
  }
  v4(v6);
  unint64_t v7 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    uint64_t v8 = MEMORY[0x21D495C80]();
    MEMORY[0x21D495F30](v8, 0x20C4093837F09);
  }
  MEMORY[0x21D495F30](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_21B90832C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B908340((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_21B908340(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x21D495C80]();
      MEMORY[0x21D495F30](v4, 0x20C4093837F09);
    }
    MEMORY[0x21D495F30](v2, 0xA0C40F20CD8FBLL);
  }
  return a1;
}

void sub_21B9083AC(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B908418(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B908498(uint64_t a1)
{
  sub_21B9074DC((uint64_t)&v8, a1 + 264);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v16.__ptr_ = 0, uint64_t v2 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v16), v2))
  {
    sub_21B907D30(2u);
  }
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = &unk_26CB96710;
  long long v3 = v10;
  long long v4 = v11[0];
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 202) = *(_OWORD *)((char *)v11 + 10);
  uint64_t v5 = v13;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 232) = v5;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)__p;
  *(void *)(a1 + 256) = v15;
  uint64_t v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    v13();
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B908610(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    v39();
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v32, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_21B9086D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_21B9086F4(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B908760(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B9087E0(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return sub_21B907410((uint64_t)a1);
}

void sub_21B90881C(uint64_t a1)
{
  sub_21B908A78((uint64_t)&v8, a1 + 264);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v16.__ptr_ = 0, uint64_t v2 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v16), v2))
  {
    sub_21B907D30(2u);
  }
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = &unk_26CB96710;
  long long v3 = v10;
  long long v4 = v11[0];
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 202) = *(_OWORD *)((char *)v11 + 10);
  uint64_t v5 = v13;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 232) = v5;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)__p;
  *(void *)(a1 + 256) = v15;
  uint64_t v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    v13();
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B908994(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    v39();
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v32, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_21B908A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_21B908A78(uint64_t a1, uint64_t a2)
{
  v55[1] = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_21B910838(*(uint64_t **)a2, *(void *)(a2 + 8), v5, v4, (uint64_t)&v34);
  (*(void (**)(void *__return_ptr))(***(void ***)(a2 + 16) + 40))(v43);
  if (v45)
  {
    sub_21B907D98((uint64_t)&v34, (uint64_t)&v46);
    sub_21B907D98((uint64_t)&v34, (uint64_t)v53);
    *(void *)&long long v40 = v43;
    if (v47)
    {
      if (v48 && v49)
      {
        *(_DWORD *)&v26[8] = v47 - 1;
        *(void *)&v26[12] = v50 | ((unint64_t)v54 << 32);
        *(void *)__int16 v26 = 0;
        *(_DWORD *)&v26[20] = v48 - 1;
        uint64_t v27 = (void *)(v51 | ((unint64_t)LODWORD(v55[0]) << 32));
        LODWORD(v28) = v49 - 1;
        *(void *)((char *)&v28 + 4) = HIDWORD(v51) | ((unint64_t)HIDWORD(v55[0]) << 32);
        sub_21B907F70(v26, (uint64_t *)&v40, v46, v53[0], v6);
      }
    }
  }
  *(_OWORD *)__int16 v26 = v34;
  *(void *)&v26[16] = v35;
  uint64_t v27 = &unk_26CB96710;
  long long v7 = v36;
  long long v36 = 0uLL;
  long long v28 = v7;
  v29[0] = v37[0];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v37 + 10);
  uint64_t v8 = v38;
  uint64_t v38 = 0;
  uint64_t v30 = v8;
  __int16 v31 = v39;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  (*(void (**)(unsigned char **__return_ptr))(***(void ***)(a2 + 16) + 48))(&v46);
  if (!v52)
  {
    long long v16 = *(_OWORD *)__p;
    uint64_t v17 = v33;
    goto LABEL_35;
  }
  if (v51 != &v46)
  {
    if (v51) {
      (*((void (**)(unsigned char **))*v51 + 5))(v51);
    }
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    if (v5) {
      goto LABEL_11;
    }
LABEL_33:
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    uint64_t v18 = __p[0];
    if (!__p[0]) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  (*((void (**)(unsigned char **))v46 + 4))(&v46);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  if (!v5) {
    goto LABEL_33;
  }
LABEL_11:
  if (v5 >> 61) {
    sub_21B846300();
  }
  *(void *)&long long v40 = operator new(8 * v5);
  *((void *)&v40 + 1) = v40;
  uint64_t v41 = v40 + 8 * v5;
  int v42 = (void **)&v40;
  uint64_t v11 = 20 * v5;
  do
  {
    (*(void (**)(unsigned char **__return_ptr))(**(void **)v9 + 48))(&v46);
    if (!v52) {
      sub_21B8446A8();
    }
    uint64_t v12 = v55;
    if (v51)
    {
      if (v51 == &v46)
      {
        v55[0] = v53;
        (*((void (**)(unsigned char **, unsigned char **))v46 + 3))(&v46, v53);
        if (!v52) {
          goto LABEL_23;
        }
        goto LABEL_18;
      }
      v55[0] = v51;
      uint64_t v12 = &v51;
    }
    *uint64_t v12 = 0;
LABEL_18:
    if (v51 == &v46)
    {
      (*((void (**)(unsigned char **))v46 + 4))(&v46);
    }
    else if (v51)
    {
      (*((void (**)(void))*v51 + 5))();
    }
LABEL_23:
    if (!v55[0]) {
      sub_21B846100();
    }
    float v13 = (*(float (**)(void, uint64_t, uint64_t))(*(void *)v55[0] + 48))(v55[0], v4, v10 + 32);
    unsigned int v15 = v14;
    if ((unsigned char **)v55[0] == v53)
    {
      (*((void (**)(unsigned char **))v53[0] + 4))(v53);
    }
    else if (v55[0])
    {
      (*(void (**)(void))(*(void *)v55[0] + 40))();
    }
    uint64_t v46 = (unsigned char *)__PAIR64__(v15, LODWORD(v13));
    sub_21B8F2BC0(&v42, &v46);
    v4 += 20;
    v11 -= 20;
  }
  while (v11);
  long long v16 = v40;
  uint64_t v17 = v41;
  uint64_t v18 = __p[0];
  if (__p[0])
  {
LABEL_34:
    __p[1] = v18;
    long long v25 = v16;
    operator delete(v18);
    long long v16 = v25;
  }
LABEL_35:
  *(_OWORD *)a1 = *(_OWORD *)v26;
  *(void *)(a1 + 16) = *(void *)&v26[16];
  *(void *)(a1 + 24) = &unk_26CB96710;
  long long v19 = v28;
  long long v28 = 0uLL;
  long long v20 = v29[0];
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 48) = v20;
  *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v29 + 10);
  int v21 = v31;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v21;
  *(_OWORD *)(a1 + 96) = v16;
  *(void *)(a1 + 112) = v17;
  if (!v45) {
    goto LABEL_39;
  }
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
    uint64_t v24 = v38;
    uint64_t v38 = 0;
    if (v24) {
      goto LABEL_40;
    }
  }
  else
  {
    if (v44) {
      (*(void (**)(void))(*v44 + 40))();
    }
LABEL_39:
    uint64_t v22 = v38;
    uint64_t v38 = 0;
    if (v22) {
LABEL_40:
    }
      v39();
  }
  float v23 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_21B90905C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_objecta,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21B83DE50(exception_object);
}

uint64_t sub_21B9092CC(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  long long v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void (**)(void *))(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  float v6 = (void *)(*(void *)(a1 + 24) + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(void (**)(void *))(*v6 + v4);
  }
  v4(v6);
  long long v7 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    uint64_t v8 = MEMORY[0x21D495C80]();
    MEMORY[0x21D495F30](v8, 0x20C4093837F09);
  }
  MEMORY[0x21D495F30](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_21B909394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B908340((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_21B9093A8(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B909414(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B909494(uint64_t a1)
{
  sub_21B908A78((uint64_t)&v8, a1 + 264);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v16.__ptr_ = 0, uint64_t v2 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v16), v2))
  {
    sub_21B907D30(2u);
  }
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = &unk_26CB96710;
  long long v3 = v10;
  long long v4 = v11[0];
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 202) = *(_OWORD *)((char *)v11 + 10);
  uint64_t v5 = v13;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 232) = v5;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)__p;
  *(void *)(a1 + 256) = v15;
  uint64_t v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    v13();
  }
  long long v7 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B90960C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    v39();
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v32, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_21B9096D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_21B9096F4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90972C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21B90975C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d2lf7feature16IDescriptorModelEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature16IDescriptorModelEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d2lf7feature16IDescriptorModelEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d2lf7feature16IDescriptorModelEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_21B9097D0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    *(void *)(v1 + 16) = 0;
    if (v2) {
      (*(void (**)(void))(v1 + 24))();
    }
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B909884(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_9;
  }
LABEL_5:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_21B909918(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9E058;
  uint64_t v2 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x21D495F30](v2, 0x60C40CE5A77A8);
  }
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_16;
  }
LABEL_12:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return a1;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_21B909A74(uint64_t a1)
{
  sub_21B909918(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B909AAC(uint64_t a1)
{
  sub_21B8471D4((uint64_t)&v3, (uint64_t *)(**(void **)(a1 + 152) + 8));
  uint64_t v1 = v3;
  sub_21B848B68((uint64_t)&v3);
  return v1;
}

void sub_21B909AFC(void *a1, int a2)
{
  sub_21B8FF5F4(a2, (uint64_t)v3);
  *a1 = &unk_26CB9E058;
  sub_21B90A080((uint64_t)(a1 + 1), (uint64_t)v3);
  sub_21B900288((uint64_t)v3);
}

void sub_21B909BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B909884(v9);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B909C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B909C14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 152);
  v5[0] = &unk_26CB9EFA0;
  v5[1] = a3;
  sub_21B8FE944(v4, a2, (uint64_t)v5, 1, a4);
}

void sub_21B909C68(void *a1, int a2)
{
  sub_21B8FFFA8(a2, (uint64_t)v3);
  *a1 = &unk_26CB9E058;
  sub_21B90A080((uint64_t)(a1 + 1), (uint64_t)v3);
  sub_21B900288((uint64_t)v3);
}

void sub_21B909D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B909884(v9);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B909D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B909D80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 152);
  v5[0] = &unk_26CB9EFA0;
  v5[1] = a3;
  sub_21B8FEF9C(v4, a2, (uint64_t)v5, 1, a4);
}

void sub_21B909DD4(void *a1, int a2)
{
  sub_21B900128(a2, (uint64_t)v3);
  *a1 = &unk_26CB9E058;
  sub_21B90A080((uint64_t)(a1 + 1), (uint64_t)v3);
  sub_21B900288((uint64_t)v3);
}

void sub_21B909EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B909884(v9);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B909ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B909EEC(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26CB9E218;
  *(void *)(a1 + 8) = sub_21B909F28;
  *(void *)(a1 + 24) = a1;
  *(unsigned char *)(a1 + 32) = 1;
}

float32x2_t sub_21B909F28(float32x2_t *a1, uint32x2_t *a2)
{
  __asm { FMOV            V2.2S, #-1.0 }
  return vadd_f32(vdiv_f32(vadd_f32(*a1, *a1), vadd_f32(vcvt_f32_u32(*a2), _D2)), _D2);
}

void sub_21B909F50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 152);
  v7[0] = &unk_26CB9EFA0;
  v7[1] = a5;
  sub_21B90319C(v6, a2, a3, a4, (uint64_t)v7, 1, a6);
}

uint64_t sub_21B909FA4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_21B909FAC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_21B909FB4(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void sub_21B909FC0(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void sub_21B909FD0(uint64_t a1)
{
  sub_21B909918(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B90A00C(uint64_t a1)
{
  sub_21B909918(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B90A048(uint64_t a1)
{
  sub_21B909918(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90A080(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v6 = a1 + 56;
    if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
    uint64_t v6 = a1 + 56;
    if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *(_OWORD *)(a2 + 56);
      *(void *)(v6 + 16) = *(void *)(a2 + 72);
      *(_OWORD *)uint64_t v6 = v7;
      goto LABEL_6;
    }
  }
  sub_21B846188((unsigned char *)v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
LABEL_6:
  if (*(char *)(a2 + 103) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = v9;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_21B846188((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v10;
    }
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

void sub_21B90A1A8(_Unwind_Exception *exception_object)
{
  if (v1[136])
  {
    if (v1[135] < 0) {
      operator delete(*v5);
    }
  }
  if (v1[103] < 0)
  {
    operator delete(*v4);
    if ((v1[79] & 0x80000000) == 0)
    {
LABEL_6:
      if ((v1[55] & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
  else if ((v1[79] & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v3);
  if ((v1[55] & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_10:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_21B90A238()
{
}

void *sub_21B90A24C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CB9E218;
  result[1] = v3;
  return result;
}

uint64_t sub_21B90A294(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CB9E218;
  a2[1] = v2;
  return result;
}

uint64_t sub_21B90A2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_21B90A2D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN4cv3d3esn4math6VectorIfLj2EEERKNS_2lf8KeypointERKNS0_3arr5SizeTILj2ELNS8_8SizeTypeE0EvEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFN4cv3d3esn4math6VectorIfLj2EEERKNS_2lf8KeypointERKNS0_3arr5SizeTILj2ELNS8_8SizeTypeE0EvEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFN4cv3d3esn4math6VectorIfLj2EEERKNS_2lf8KeypointERKNS0_3arr5SizeTILj2ELNS8_8SizeTypeE0EvEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN4cv3d3esn4math6VectorIfLj2EEERKNS_2lf8KeypointERKNS0_3arr5SizeTILj2ELNS8_8SizeTypeE0EvEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B90A340()
{
  return &unk_26CB9E298;
}

uint64_t sub_21B90A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v7[0]) = 0;
  char v9 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v7, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long v7 = *(_OWORD *)a3;
      uint64_t v8 = *(void *)(a3 + 16);
    }
    char v9 = 1;
    LOBYTE(__dst) = 0;
    char v33 = 0;
    if (SHIBYTE(v8) < 0)
    {
      sub_21B846188(&__dst, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v7;
      uint64_t v32 = v8;
    }
    char v33 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v33 = 0;
  }
  sub_21B90AD48((uint64_t)v34, a2, (uint64_t)&__dst);
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)__dst);
  }
  LOBYTE(__p[0]) = 0;
  char v28 = 0;
  __int16 v30 = 0;
  uint64_t v29 = 0;
  LOBYTE(v30) = *(unsigned char *)(a2 + 104);
  LODWORD(v29) = *(_DWORD *)(a2 + 108);
  long long v10 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v11, v34);
  long long v10 = &unk_26CB9EF20;
  sub_21B8E24C8((uint64_t)&v22, (uint64_t)__p);
  uint64_t v25 = v29;
  __int16 v26 = v30;
  if (v28 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_21B848B68((uint64_t)v34);
  uint64_t v5 = v11;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = v14;
  long long v13 = 0uLL;
  *(_OWORD *)(a1 + 48) = v15;
  *(void *)(a1 + 64) = v16;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  *(_OWORD *)(a1 + 72) = v17;
  *(void *)(a1 + 88) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v21)
  {
    *(_OWORD *)(a1 + 96) = v19;
    *(void *)(a1 + 112) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF20;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 128) = v22;
    *(void *)(a1 + 144) = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
    *(void *)(a1 + 160) = v25;
    *(_WORD *)(a1 + 168) = v26;
    long long v10 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v11);
    if (!v9) {
      goto LABEL_24;
    }
  }
  else
  {
    *(void *)(a1 + 160) = v25;
    *(_WORD *)(a1 + 168) = v26;
    long long v10 = &unk_26CB9F080;
    sub_21B848B68((uint64_t)&v11);
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
LABEL_24:
  *(void *)a1 = &unk_26CB9DDC0;
  return a1;
}

void sub_21B90A664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (*(unsigned char *)(v41 - 200) && *(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B90A6E8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B90A764(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90A800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v9[0]) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21B846188(v9, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)char v9 = *(_OWORD *)a3;
      uint64_t v10 = *(void *)(a3 + 16);
    }
    char v11 = 1;
    LOBYTE(__dst) = 0;
    char v41 = 0;
    if (SHIBYTE(v10) < 0)
    {
      sub_21B846188(&__dst, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v9;
      uint64_t v40 = v10;
    }
    char v41 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    char v41 = 0;
  }
  sub_21B90AD48((uint64_t)v42, a2, (uint64_t)&__dst);
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)__dst);
  }
  if (*(_DWORD *)(a2 + 108)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/DescriptorExtraction/src/DescriptorModelDefinition.cpp", 89, (uint64_t)"param.device == DeviceType::Any", 31, (uint64_t)"Only DeviceType::Any supported for EspressoV2", 45, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  LOBYTE(v31) = 0;
  char v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  LOBYTE(__p) = 0;
  char v38 = 0;
  int v12 = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)&v13, v42);
  int v12 = &unk_26CB9EF78;
  sub_21B8F1420(&v24, &v31);
  if (v38 && v37 < 0) {
    operator delete(__p);
  }
  if (v33 && v32 < 0) {
    operator delete((void *)v31);
  }
  sub_21B848B68((uint64_t)v42);
  uint64_t v5 = v13;
  *(void *)a1 = &unk_26CB9F080;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 24) = v15;
  *(void *)(a1 + 40) = v16;
  long long v15 = 0uLL;
  *(_OWORD *)(a1 + 48) = v17;
  *(void *)(a1 + 64) = v18;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  *(_OWORD *)(a1 + 72) = v19;
  *(void *)(a1 + 88) = v20;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v23)
  {
    *(_OWORD *)(a1 + 96) = v21;
    *(void *)(a1 + 112) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)a1 = &unk_26CB9EF78;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  int v6 = v26;
  if (v26)
  {
    *(_OWORD *)(a1 + 128) = v24;
    *(void *)(a1 + 144) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 152) = 1;
  }
  long long v7 = v27;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = v7;
  *(unsigned char *)(a1 + 200) = 0;
  if (v30)
  {
    *(_OWORD *)(a1 + 176) = v28;
    *(void *)(a1 + 192) = v29;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    *(unsigned char *)(a1 + 200) = 1;
  }
  int v12 = &unk_26CB9EF78;
  if (v6 && SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  int v12 = &unk_26CB9F080;
  sub_21B848B68((uint64_t)&v13);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  *(void *)a1 = &unk_26CB9DDE8;
  return a1;
}

void sub_21B90AB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (*(unsigned char *)(v42 - 184) && *(char *)(v42 - 185) < 0) {
    operator delete(*(void **)(v42 - 208));
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B90ABE8(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B90AC88(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

void sub_21B90AD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  sub_21B90A080((uint64_t)&v25, a2);
  if (!*(unsigned char *)(a3 + 24))
  {
    a3 = a2 + 80;
    if (*(char *)(a2 + 103) < 0)
    {
      int v6 = (unint64_t *)(a2 + 88);
      goto LABEL_7;
    }
LABEL_5:
    long long __dst = *(_OWORD *)a3;
    uint64_t v68 = *(void *)(a3 + 16);
    goto LABEL_8;
  }
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  int v6 = (unint64_t *)(a3 + 8);
LABEL_7:
  sub_21B846188(&__dst, *(void **)a3, *v6);
LABEL_8:
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  long long __p = __dst;
  uint64_t v34 = v68;
  int v7 = v27;
  if (v35) {
    int v8 = v27;
  }
  else {
    int v8 = 1;
  }
  if (v35) {
    int v9 = 17;
  }
  else {
    int v9 = 65;
  }
  if (v35) {
    int v10 = v28;
  }
  else {
    int v10 = v27;
  }
  if (v35) {
    int v11 = 1;
  }
  else {
    int v11 = v28;
  }
  if (SHIBYTE(v30) < 0)
  {
    sub_21B846188(&__dst, (void *)v29, *((unint64_t *)&v29 + 1));
  }
  else
  {
    long long __dst = v29;
    uint64_t v68 = v30;
  }
  int v70 = v9;
  char v69 = 1;
  char v71 = 1;
  int v72 = 1;
  char v73 = 1;
  int v74 = v8 * v7;
  char v75 = 1;
  int v76 = v10;
  char v77 = 1;
  int v78 = 1;
  char v79 = 1;
  int v80 = v11;
  char v81 = 1;
  char v82 = 1;
  LOBYTE(v83[0]) = 0;
  char v85 = 0;
  LOBYTE(v86[0]) = 0;
  char v88 = 0;
  sub_21B847590((char *)v45, &__dst);
  sub_21B8E35D8((char **)&v42, (uint64_t)v45, 1uLL);
  if (!v66)
  {
LABEL_29:
    if (!v63) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  if (v65 != v64)
  {
    if (v65) {
      (*(void (**)(void))(*v65 + 40))();
    }
    goto LABEL_29;
  }
  (*(void (**)(void *))(v64[0] + 32))(v64);
  if (!v63) {
    goto LABEL_36;
  }
LABEL_30:
  if (v62 == v61)
  {
    (*(void (**)(void *))(v61[0] + 32))(v61);
  }
  else if (v62)
  {
    (*(void (**)(void))(*v62 + 40))();
  }
LABEL_36:
  if (v47 && SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  if (v38)
  {
    int v12 = v28;
    if (SHIBYTE(v37) < 0)
    {
      sub_21B846188(v45, (void *)v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      *(_OWORD *)char v45 = v36;
      uint64_t v46 = v37;
    }
    unsigned __int8 v47 = 1;
    int v48 = 65;
    char v49 = 1;
    int v50 = 1;
    char v51 = 1;
    int v52 = 1;
    char v53 = 1;
    int v54 = 1;
    char v55 = 1;
    int v56 = 2;
    char v57 = 1;
    int v58 = v12;
    char v59 = 1;
    char v60 = 1;
    LOBYTE(v61[0]) = 0;
    char v63 = 0;
    LOBYTE(v64[0]) = 0;
    char v66 = 0;
    uint64_t v13 = v43;
    if ((unint64_t)v43 >= v44)
    {
      int v14 = sub_21B8F4D8C((long long **)&v42, (long long *)v45);
    }
    else
    {
      sub_21B847590(v43, (long long *)v45);
      int v14 = v13 + 168;
    }
    uint64_t v43 = v14;
    if (v66)
    {
      if (v65 == v64)
      {
        (*(void (**)(void *))(v64[0] + 32))(v64);
        if (v63)
        {
LABEL_51:
          if (v62 == v61)
          {
            (*(void (**)(void *))(v61[0] + 32))(v61);
          }
          else if (v62)
          {
            (*(void (**)(void))(*v62 + 40))();
          }
        }
LABEL_57:
        if (v47 && SHIBYTE(v46) < 0) {
          operator delete(v45[0]);
        }
        goto LABEL_60;
      }
      if (v65) {
        (*(void (**)(void))(*v65 + 40))();
      }
    }
    if (v63) {
      goto LABEL_51;
    }
    goto LABEL_57;
  }
LABEL_60:
  if (SHIBYTE(v32) < 0)
  {
    sub_21B846188(v45, (void *)v31, *((unint64_t *)&v31 + 1));
  }
  else
  {
    *(_OWORD *)char v45 = v31;
    uint64_t v46 = v32;
  }
  unsigned __int8 v47 = 1;
  uint64_t v40 = 0;
  char v41 = 0;
  uint64_t v39 = 0;
  long long v15 = operator new(0x20uLL);
  uint64_t v16 = v15;
  uint64_t v39 = v15;
  uint64_t v40 = (void **)v15;
  long long v17 = (void **)(v15 + 32);
  char v41 = v15 + 32;
  *long long v15 = 0;
  v15[24] = 0;
  if (SHIBYTE(v46) < 0)
  {
    sub_21B846188(v15, v45[0], (unint64_t)v45[1]);
    int v18 = v47;
    v16[24] = 1;
    uint64_t v40 = v17;
    if (v18 && SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v15 = *(_OWORD *)v45;
    *((void *)v15 + 2) = v46;
    v15[24] = 1;
    uint64_t v40 = (void **)(v15 + 32);
  }
  *(void *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v26;
  if (SHIBYTE(v34) < 0)
  {
    sub_21B846188((unsigned char *)(a1 + 16), (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = __p;
    *(void *)(a1 + 32) = v34;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21B847400((void *)(a1 + 40), (uint64_t)v42, (uint64_t)v43, 0xCF3CF3CF3CF3CF3DLL * ((v43 - (unsigned char *)v42) >> 3));
  sub_21B847980((void *)(a1 + 64), (uint64_t *)&v39);
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  long long v19 = (void **)v39;
  if (v39)
  {
    uint64_t v20 = v40;
    long long v21 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((unsigned char *)v20 - 8) && *((char *)v20 - 9) < 0) {
          operator delete(*(v20 - 4));
        }
        v20 -= 4;
      }
      while (v20 != v19);
      long long v21 = v39;
    }
    uint64_t v40 = v19;
    operator delete(v21);
  }
  uint64_t v22 = (char *)v42;
  if (v42)
  {
    char v23 = v43;
    long long v24 = v42;
    if (v43 != v42)
    {
      do
      {
        v23 -= 168;
        sub_21B847844((uint64_t)v23);
      }
      while (v23 != v22);
      long long v24 = v42;
    }
    uint64_t v43 = v22;
    operator delete(v24);
  }
  if (!v88)
  {
LABEL_89:
    if (!v85) {
      goto LABEL_96;
    }
    goto LABEL_90;
  }
  if (v87 != v86)
  {
    if (v87) {
      (*(void (**)(void *))(*v87 + 40))(v87);
    }
    goto LABEL_89;
  }
  (*(void (**)(void *))(v86[0] + 32))(v86);
  if (!v85) {
    goto LABEL_96;
  }
LABEL_90:
  if (v84 == v83)
  {
    (*(void (**)(void *))(v83[0] + 32))(v83);
  }
  else if (v84)
  {
    (*(void (**)(void *))(*v84 + 40))(v84);
  }
LABEL_96:
  if (v69 && SHIBYTE(v68) < 0) {
    operator delete((void *)__dst);
  }
  if (v38)
  {
    if (SHIBYTE(v37) < 0) {
      operator delete((void *)v36);
    }
  }
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v30) & 0x80000000) == 0) {
        return;
      }
LABEL_108:
      operator delete((void *)v29);
      return;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete((void *)v31);
  if (SHIBYTE(v30) < 0) {
    goto LABEL_108;
  }
}

void sub_21B90B4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  sub_21B84739C(&a30);
  sub_21B8E34AC(v39 - 256);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B90B614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_21B8E34AC((uint64_t)&a33);
  sub_21B8E34AC(v33 - 256);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B90B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B8E34AC(v9 - 256);
  sub_21B909884((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B90B658()
{
}

void sub_21B90B6A0()
{
}

void sub_21B90B6E8(void *a1, int a2)
{
  *a1 = &unk_26CB9E2F8;
  v2[0] = a2;
  v2[1] = a2;
  a1[1] = &unk_26CB9E428;
  sub_21B90C260(v2);
}

void sub_21B90B9D0(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B90B9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  sub_21B83A360(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_21B90BA28(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B90BAAC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &unk_26CB9E428;
  sub_21B90C260((_DWORD *)(a1 + 120));
}

void sub_21B90BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B892644((uint64_t)&a9);
  sub_21B83A360(v9);
  _Unwind_Resume(a1);
}

void sub_21B90BBFC(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B90BC10(uint64_t a1, uint64_t a2, float *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 4)) {
    float v7 = *(float *)a4;
  }
  else {
    float v7 = 1.0;
  }
  float v8 = a3[3];
  __float2 v9 = __sincosf_stret(a3[2]);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10
    && (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11) {
      goto LABEL_10;
    }
  }
  else if (!v11)
  {
LABEL_10:
    uint64_t v36 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a1 + 137)) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 96))(&v36);
LABEL_11:
  sub_21B90D45C(a2, &v35);
  if (*(_DWORD *)(a1 + 96))
  {
    int v12 = *(_DWORD *)(a1 + 100);
    if (v12)
    {
      int v13 = *(_DWORD *)(a1 + 104);
      if (v13)
      {
        uint64_t v14 = *(unsigned int *)(a1 + 112);
        uint64_t v15 = *(unsigned int *)(a1 + 116);
        uint64_t v16 = *(unsigned int *)(a2 + 48);
        uint64_t v17 = *(unsigned int *)(a2 + 52);
        int v18 = *(float **)(a1 + 40);
        if (*(unsigned char *)(a1 + 136) && v18)
        {
          (*(void (**)(void, uint64_t, const char *))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/Image.h:1190");
          int v18 = *(float **)(a1 + 40);
        }
        long long v19 = *(float **)(a2 + 24);
        if (*(unsigned char *)(a2 + 72) && v19)
        {
          uint64_t v34 = v16;
          uint64_t v20 = v14;
          uint64_t v21 = *(void *)(a2 + 8);
          uint64_t v22 = *(std::__shared_weak_count **)(a2 + 16);
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v21 + 88))(v21, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          uint64_t v14 = v20;
          uint64_t v16 = v34;
          long long v19 = *(float **)(a2 + 24);
        }
        float v23 = v8 * v7;
        int v24 = v12 - 1;
        int v25 = v13 - 1;
        if (v13 != 1)
        {
          if (v12 == 1)
          {
            do
            {
              *long long v19 = *a3 + (float)(v23 * (float)((float)(v9.__cosval * *v18) - (float)(v9.__sinval * v18[1])));
              v19[1] = a3[1] + (float)(v23 * (float)((float)(v9.__sinval * *v18) + (float)(v9.__cosval * v18[1])));
              v18 += v15;
              v19 += v17;
              --v25;
            }
            while (v25);
LABEL_33:
            *long long v19 = *a3 + (float)(v23 * (float)((float)(v9.__cosval * *v18) - (float)(v9.__sinval * v18[1])));
            v19[1] = a3[1] + (float)(v23 * (float)((float)(v9.__sinval * *v18) + (float)(v9.__cosval * v18[1])));
            goto LABEL_34;
          }
          int v26 = 0;
          int v27 = v18 + 1;
          int v28 = v19 + 1;
          do
          {
            long long v29 = v28;
            uint64_t v30 = v27;
            int v31 = v12 - 1;
            do
            {
              *(v29 - 1) = *a3 + (float)(v23 * (float)((float)(v9.__cosval * *(v30 - 1)) - (float)(v9.__sinval * *v30)));
              *long long v29 = a3[1] + (float)(v23 * (float)((float)(v9.__sinval * *(v30 - 1)) + (float)(v9.__cosval * *v30)));
              v30 += v14;
              v29 += v16;
              --v31;
            }
            while (v31);
            *(v29 - 1) = *a3 + (float)(v23 * (float)((float)(v9.__cosval * *(v30 - 1)) - (float)(v9.__sinval * *v30)));
            *long long v29 = a3[1] + (float)(v23 * (float)((float)(v9.__sinval * *(v30 - 1)) + (float)(v9.__cosval * *v30)));
            v18 += v15;
            v19 += v17;
            ++v26;
            v27 += v15;
            v28 += v17;
          }
          while (v26 != v25);
        }
        if (v12 != 1)
        {
          do
          {
            *long long v19 = *a3 + (float)(v23 * (float)((float)(v9.__cosval * *v18) - (float)(v9.__sinval * v18[1])));
            v19[1] = a3[1] + (float)(v23 * (float)((float)(v9.__sinval * *v18) + (float)(v9.__cosval * v18[1])));
            v18 += v14;
            v19 += v16;
            --v24;
          }
          while (v24);
        }
        goto LABEL_33;
      }
    }
  }
LABEL_34:
  uint64_t v32 = v35;
  uint64_t v35 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t result = v36;
  uint64_t v36 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B90C088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
    uint64_t v13 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v13 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(exception_object);
}

void *sub_21B90C120(void *result)
{
  uint64_t v1 = result;
  *uint64_t result = &unk_26CB9E2F8;
  uint64_t v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B90C1B8(void *a1)
{
  *a1 = &unk_26CB9E2F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

void sub_21B90C260(_DWORD *a1)
{
  uint64_t v10 = &unk_26CB9E520;
  sub_21B9725D8((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26CB9E380;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_21B90C528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_21B83A360(v10);
  sub_21B83A360((uint64_t)&a10);
  sub_21B90C6C8(&a9);
  _Unwind_Resume(a1);
}

void sub_21B90C55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B90C570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B90C588(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90C614()
{
  return 8;
}

uint64_t sub_21B90C61C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_21B90C624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 88, 3, a1 + 100, 4);
}

uint64_t sub_21B90C640(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21B90C6C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = *(void **)(v2 + 72);
    if (v3) {
      free(v3);
    }
    *(void *)(v2 + 72) = 0;
    MEMORY[0x21D495F30](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_21B90C724()
{
}

uint64_t sub_21B90C738()
{
  return 8;
}

long long *sub_21B90C744()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BF28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BF28))
  {
    uint64_t v1 = sub_21B90C828();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5BF10, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5BF20 = *((void *)v1 + 2);
      xmmword_267C5BF10 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BF10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BF28);
  }
  if (byte_267C5BF27 >= 0) {
    return &xmmword_267C5BF10;
  }
  else {
    return (long long *)xmmword_267C5BF10;
  }
}

void sub_21B90C810(_Unwind_Exception *a1)
{
}

long long *sub_21B90C828()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BF48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BF48))
  {
    return &xmmword_267C5BF30;
  }
  uint64_t v1 = sub_21B90C910();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5BF30, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5BF40 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5BF30 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BF30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BF48);
  return &xmmword_267C5BF30;
}

void sub_21B90C8F8(_Unwind_Exception *a1)
{
}

std::string *sub_21B90C910()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BF68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5BF68))
  {
    return &stru_267C5BF50;
  }
  sub_21B90CA0C((uint64_t)__p);
  sub_21B89E9F8(__p, &stru_267C5BF50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5BF50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5BF68);
  return &stru_267C5BF50;
}

void sub_21B90C9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5BF68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5BF68);
  _Unwind_Resume(a1);
}

void sub_21B90CA0C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BF88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BF88))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two32f>]", qword_267C5BF70);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BF70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BF88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BFA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BFA8))
  {
    size_t v3 = sub_21B89E324(qword_267C5BF70, "<", 0);
    sub_21B89E21C(qword_267C5BF70, 0, v3, qword_267C5BF90);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5BF90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BFA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5BFC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5BFC8))
  {
    sub_21B9840C8((uint64_t)qword_267C5BF90, (uint64_t)&xmmword_267C5BFB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5BFB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5BFC8);
  }
  if (byte_267C5BFC7 < 0)
  {
    long long v2 = xmmword_267C5BFB0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5BFB0;
    *(void *)(a1 + 16) = unk_267C5BFC0;
  }
}

void sub_21B90CBD4(_Unwind_Exception *a1)
{
}

void sub_21B90CBEC(_Unwind_Exception *a1)
{
}

void sub_21B90CC04(_Unwind_Exception *a1)
{
}

void sub_21B90CC20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90CC58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    long long v2 = *(void **)(v1 + 72);
    if (v2) {
      free(v2);
    }
    *(void *)(v1 + 72) = 0;
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B90CCBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_21B90CD30(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v8 = v4;
    uint64_t v9 = 0;
  }
  sub_21B90CE48(a2, &v8);
  long long v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B90CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t *sub_21B90CE48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(void *)v3 + 64))(&v13, v3, 8);
  long long v6 = v13[1];
  long long v5 = v13[2];
  *((_OWORD *)a1 + 1) = *v13;
  *((_OWORD *)a1 + 2) = v6;
  *((_OWORD *)a1 + 3) = v5;
  long long v13 = 0;
  MEMORY[0x21D495F30]();
  uint64_t v7 = *a1;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104))(v7);
  unsigned __int8 v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v10 = 0;
  }
  __int16 v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0) {
    __int16 v11 = 0;
  }
  *((_WORD *)a1 + 32) = v11 & 0xFF00 | v10;
  return a1;
}

void sub_21B90CFD0(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B90CFE4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v10 = v4;
  __int16 v11 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v8 = v4;
    uint64_t v9 = 0;
  }
  sub_21B90D2C0(a2, &v8);
  long long v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B90D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_21B90D0FC(uint64_t result)
{
  uint64_t v1 = result;
  long long v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B90D178(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90D204()
{
  return 8;
}

uint64_t sub_21B90D20C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B90D214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B90D230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_21B90D2C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(void *)v3 + 72))(&v13, v3, 8);
  long long v6 = v13[1];
  long long v5 = v13[2];
  *((_OWORD *)a1 + 1) = *v13;
  *((_OWORD *)a1 + 2) = v6;
  *((_OWORD *)a1 + 3) = v5;
  long long v13 = 0;
  MEMORY[0x21D495F30]();
  uint64_t v7 = *a1;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104))(v7);
  unsigned __int8 v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000) {
    unsigned __int8 v10 = 0;
  }
  __int16 v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0) {
    __int16 v11 = 0;
  }
  *((_WORD *)a1 + 32) = v11 & 0xFF00 | v10;
  return a1;
}

void sub_21B90D448(_Unwind_Exception *a1)
{
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

void sub_21B90D45C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    long long v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 73)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 73)) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96);

  v7(v3, 1);
}

uint64_t sub_21B90D590(uint64_t result, uint64_t a2, float a3, float a4)
{
  if (result != 2)
  {
    if (result != 1) {
      return result;
    }
    sub_21B90D45C(a2, &v76);
    if (!*(_DWORD *)(a2 + 32) || (int v7 = *(_DWORD *)(a2 + 36)) == 0 || (v8 = *(_DWORD *)(a2 + 40)) == 0)
    {
LABEL_102:
      uint64_t result = v76;
      uint64_t v76 = 0;
      if (!result) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    uint64_t v9 = *(unsigned int *)(a2 + 48);
    uint64_t v10 = *(unsigned int *)(a2 + 52);
    __int16 v11 = *(float **)(a2 + 24);
    if (*(unsigned char *)(a2 + 72) && v11)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      long long v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      __int16 v11 = *(float **)(a2 + 24);
    }
    int v14 = v7 - 1;
    int v15 = v8 - 1;
    if (v8 != 1)
    {
      if (v7 == 1)
      {
        do
        {
          float v64 = v11[1];
          if ((float)(a3 + -1.0) >= *v11) {
            float v65 = *v11;
          }
          else {
            float v65 = a3 + -1.0;
          }
          if (*v11 >= 0.0) {
            float v66 = v65;
          }
          else {
            float v66 = 0.0;
          }
          *__int16 v11 = v66;
          float v67 = 0.0;
          if (v64 >= 0.0)
          {
            float v67 = a4 + -1.0;
            if ((float)(a4 + -1.0) >= v64) {
              float v67 = v64;
            }
          }
          v11[1] = v67;
          v11 += v10;
          --v15;
        }
        while (v15);
        goto LABEL_94;
      }
      int v16 = 0;
      float v17 = a3 + -1.0;
      float v18 = a4 + -1.0;
      long long v19 = v11 + 1;
      do
      {
        uint64_t v20 = v19;
        int v21 = v7 - 1;
        do
        {
          float v22 = *(v20 - 1);
          if (v17 >= v22) {
            float v23 = *(v20 - 1);
          }
          else {
            float v23 = a3 + -1.0;
          }
          if (v22 >= 0.0) {
            float v24 = v23;
          }
          else {
            float v24 = 0.0;
          }
          *(v20 - 1) = v24;
          float v25 = 0.0;
          if (*v20 >= 0.0)
          {
            float v25 = a4 + -1.0;
            if (v18 >= *v20) {
              float v25 = *v20;
            }
          }
          *uint64_t v20 = v25;
          v20 += v9;
          --v21;
        }
        while (v21);
        float v26 = *(v20 - 1);
        if (v17 >= v26) {
          float v27 = *(v20 - 1);
        }
        else {
          float v27 = a3 + -1.0;
        }
        if (v26 >= 0.0) {
          float v28 = v27;
        }
        else {
          float v28 = 0.0;
        }
        *(v20 - 1) = v28;
        float v29 = 0.0;
        if (*v20 >= 0.0)
        {
          float v29 = a4 + -1.0;
          if (v18 >= *v20) {
            float v29 = *v20;
          }
        }
        *uint64_t v20 = v29;
        v11 += v10;
        ++v16;
        v19 += v10;
      }
      while (v16 != v15);
    }
    if (v7 != 1)
    {
      do
      {
        float v58 = v11[1];
        if ((float)(a3 + -1.0) >= *v11) {
          float v59 = *v11;
        }
        else {
          float v59 = a3 + -1.0;
        }
        if (*v11 >= 0.0) {
          float v60 = v59;
        }
        else {
          float v60 = 0.0;
        }
        *__int16 v11 = v60;
        float v61 = 0.0;
        if (v58 >= 0.0)
        {
          float v61 = a4 + -1.0;
          if ((float)(a4 + -1.0) >= v58) {
            float v61 = v58;
          }
        }
        v11[1] = v61;
        v11 += v9;
        --v14;
      }
      while (v14);
    }
LABEL_94:
    float v68 = 0.0;
    float v69 = a3 + -1.0;
    float v70 = v11[1];
    if ((float)(a3 + -1.0) >= *v11) {
      float v69 = *v11;
    }
    if (*v11 < 0.0) {
      float v69 = 0.0;
    }
    *__int16 v11 = v69;
    if (v70 >= 0.0)
    {
      float v68 = a4 + -1.0;
      if ((float)(a4 + -1.0) >= v70) {
        float v68 = v70;
      }
    }
    v11[1] = v68;
    goto LABEL_102;
  }
  sub_21B90D45C(a2, &v76);
  int v30 = *(_DWORD *)(a2 + 36);
  int v31 = *(_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32)) {
    BOOL v32 = v30 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  if (v32 || v31 == 0) {
    goto LABEL_102;
  }
  uint64_t v35 = *(unsigned int *)(a2 + 48);
  uint64_t v34 = *(unsigned int *)(a2 + 52);
  uint64_t v36 = *(float **)(a2 + 24);
  if (*(unsigned char *)(a2 + 72) && v36)
  {
    uint64_t v37 = *(void *)(a2 + 8);
    char v38 = *(std::__shared_weak_count **)(a2 + 16);
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v37 + 88))(v37, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    uint64_t v36 = *(float **)(a2 + 24);
  }
  int v39 = v30 - 1;
  int v40 = v31 - 1;
  if (v31 == 1)
  {
    uint64_t v75 = v35;
    float v54 = a3 + -1.0;
    float v55 = v54 + v54;
    float v56 = a4 + -1.0;
    float v57 = v56 + v56;
    if (v30 == 1) {
      goto LABEL_111;
    }
    goto LABEL_77;
  }
  if (v30 != 1)
  {
    int v41 = 0;
    float v42 = a3 + -1.0;
    float v43 = v42 + v42;
    float v44 = a4 + -1.0;
    float v45 = v44 + v44;
    uint64_t v46 = v36 + 1;
    uint64_t v75 = v35;
    uint64_t v47 = 4 * v35;
    do
    {
      int v48 = v46;
      int v49 = v39;
      do
      {
        float v50 = fmodf(fabsf(*(v48 - 1)), v42 + v42);
        if (v50 > v42) {
          float v50 = v43 - v50;
        }
        *(v48 - 1) = v50;
        float v51 = fmodf(fabsf(*v48), v44 + v44);
        if (v51 > v44) {
          float v51 = v45 - v51;
        }
        *int v48 = v51;
        int v48 = (float *)((char *)v48 + v47);
        --v49;
      }
      while (v49);
      float v52 = fmodf(fabsf(*(v48 - 1)), v42 + v42);
      if (v52 > v42) {
        float v52 = v43 - v52;
      }
      *(v48 - 1) = v52;
      float v53 = fmodf(fabsf(*v48), v44 + v44);
      if (v53 > v44) {
        float v53 = v45 - v53;
      }
      *int v48 = v53;
      v36 += v34;
      ++v41;
      v46 += v34;
    }
    while (v41 != v40);
    float v54 = a3 + -1.0;
    float v55 = v54 + v54;
    float v56 = a4 + -1.0;
    float v57 = v56 + v56;
    do
    {
LABEL_77:
      float v62 = fmodf(fabsf(*v36), v55);
      if (v62 > v54) {
        float v62 = v55 - v62;
      }
      *uint64_t v36 = v62;
      float v63 = fmodf(fabsf(v36[1]), v57);
      if (v63 > v56) {
        float v63 = v57 - v63;
      }
      v36[1] = v63;
      v36 += v75;
      --v39;
    }
    while (v39);
    goto LABEL_111;
  }
  float v54 = a3 + -1.0;
  float v55 = v54 + v54;
  float v56 = a4 + -1.0;
  float v57 = v56 + v56;
  do
  {
    float v71 = fmodf(fabsf(*v36), v54 + v54);
    if (v71 > v54) {
      float v71 = v55 - v71;
    }
    *uint64_t v36 = v71;
    float v72 = fmodf(fabsf(v36[1]), v56 + v56);
    if (v72 > v56) {
      float v72 = v57 - v72;
    }
    v36[1] = v72;
    v36 += v34;
    --v40;
  }
  while (v40);
LABEL_111:
  float v73 = fmodf(fabsf(*v36), v55);
  if (v73 > v54) {
    float v73 = v55 - v73;
  }
  *uint64_t v36 = v73;
  float v74 = fmodf(fabsf(v36[1]), v57);
  if (v74 > v56) {
    float v74 = v57 - v74;
  }
  v36[1] = v74;
  uint64_t result = v76;
  uint64_t v76 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B90DBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B90DC00(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (float (*)(__n128))sub_21B9105E8;
  if (*a1 == 1) {
    long long v6 = (float (*)(__n128))sub_21B910400;
  }
  if (!*a1) {
    long long v6 = (float (*)(__n128))sub_21B910378;
  }
  char v83 = v6;
  if (a1[1])
  {
    sub_21B90E738(a3, &v88);
    sub_21B8FC4C4(a4, v93);
    if (!*(_DWORD *)(a3 + 32)) {
      goto LABEL_65;
    }
    int v7 = *(_DWORD *)(a3 + 36);
    if (!v7) {
      goto LABEL_65;
    }
    int v8 = *(_DWORD *)(a3 + 40);
    if (!v8) {
      goto LABEL_65;
    }
    uint64_t v9 = *(unsigned int *)(a3 + 48);
    uint64_t v10 = *(unsigned int *)(a4 + 40);
    uint64_t v79 = *(unsigned int *)(a3 + 52);
    uint64_t v81 = *(unsigned int *)(a4 + 44);
    __int16 v11 = *(float **)(a3 + 24);
    if (*(unsigned char *)(a3 + 72) && v11)
    {
      uint64_t v12 = *(void *)(a3 + 8);
      long long v13 = *(std::__shared_weak_count **)(a3 + 16);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      __int16 v11 = *(float **)(a3 + 24);
    }
    int v14 = *(unsigned char **)(a4 + 24);
    if (*(unsigned char *)(a4 + 48) && v14)
    {
      uint64_t v15 = *(void *)(a4 + 8);
      int v16 = *(std::__shared_weak_count **)(a4 + 16);
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v15 + 88))(v15, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      int v14 = *(unsigned char **)(a4 + 24);
    }
    int v17 = v7 - 1;
    uint64_t v18 = 4 * v9;
    int v19 = v8 - 1;
    if (v8 != 1)
    {
      if (v7 == 1)
      {
        do
        {
          *int v14 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *v11, v11[1]));
          v14 += v81;
          v11 += v79;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v20 = 0;
        int v21 = v11 + 1;
        int v77 = v19;
        do
        {
          float v22 = v21;
          int v23 = v17;
          float v24 = v14;
          do
          {
            *float v24 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *(v22 - 1), *v22));
            v24 += v10;
            float v22 = (float *)((char *)v22 + v18);
            --v23;
          }
          while (v23);
          *float v24 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *(v22 - 1), *v22));
          v11 += v79;
          v14 += v81;
          ++v20;
          v21 += v79;
        }
        while (v20 != v77);
      }
    }
    for (; v17; --v17)
    {
      *int v14 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *v11, v11[1]));
      v14 += v10;
      __int16 v11 = (float *)((char *)v11 + v18);
    }
    float v47 = ((float (*)(uint64_t, float, float))v83)(a2, *v11, v11[1]);
    goto LABEL_64;
  }
  float v25 = *(float **)(a3 + 24);
  if (*v25 < 0.0) {
    goto LABEL_37;
  }
  float v26 = v25[1];
  float v27 = (float)*(unsigned int *)(a2 + 32) + -1.0;
  BOOL v28 = v26 < 0.0 || v27 < *v25;
  float v29 = (float)*(unsigned int *)(a2 + 36) + -1.0;
  if (v28 || v29 < v26) {
    goto LABEL_37;
  }
  unsigned int v49 = *(_DWORD *)(a3 + 64) * (*(_DWORD *)(a3 + 56) - 1);
  float v50 = &v25[v49];
  if (*v50 < 0.0) {
    goto LABEL_37;
  }
  float v51 = v50[1];
  BOOL v52 = v29 < v51 || v27 < *v50;
  if (v52
    || v51 < 0.0
    || (unsigned int v53 = *(_DWORD *)(a3 + 68) * (*(_DWORD *)(a3 + 60) - 1), v54 = &v25[v53], *v54 < 0.0)
    || ((float v55 = v54[1], v29 >= v55) ? (v56 = v27 < *v54) : (v56 = 1),
        v56
     || v55 < 0.0
     || (float v57 = &v25[v53 + v49], *v57 < 0.0)
     || ((float v58 = v57[1], v29 >= v58) ? (v59 = v27 < *v57) : (v59 = 1), v59 || v58 < 0.0)))
  {
LABEL_37:
    v85[0] = (float (*)(__n128))a2;
    v85[1] = v83;
    sub_21B90E738(a3, &v87);
    sub_21B8FC4C4(a4, &v86);
    if (*(_DWORD *)(a3 + 32))
    {
      int v32 = *(_DWORD *)(a3 + 36);
      if (v32)
      {
        int v33 = *(_DWORD *)(a3 + 40);
        if (v33)
        {
          uint64_t v34 = *(unsigned int *)(a3 + 48);
          uint64_t v88 = *(unsigned int *)(a3 + 44);
          int v89 = v32 - 1;
          uint64_t v35 = *(unsigned int *)(a4 + 44);
          unint64_t v90 = v34 | ((unint64_t)*(unsigned int *)(a4 + 40) << 32);
          int v91 = v33 - 1;
          unint64_t v92 = *(unsigned int *)(a3 + 52) | (unint64_t)(v35 << 32);
          uint64_t v36 = *(void *)(a3 + 24);
          if (*(unsigned char *)(a3 + 72) && v36)
          {
            uint64_t v37 = *(void *)(a3 + 8);
            char v38 = *(std::__shared_weak_count **)(a3 + 16);
            if (v38)
            {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            (*(void (**)(uint64_t, void, const char *))(*(void *)v37 + 88))(v37, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            uint64_t v36 = *(void *)(a3 + 24);
          }
          int v39 = *(unsigned char **)(a4 + 24);
          if (*(unsigned char *)(a4 + 48) && v39)
          {
            uint64_t v40 = *(void *)(a4 + 8);
            int v41 = *(std::__shared_weak_count **)(a4 + 16);
            if (v41)
            {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v40 + 88))(v40, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            int v39 = *(unsigned char **)(a4 + 24);
          }
          memset(v93, 0, sizeof(v93));
          int v42 = v91;
          if (v91)
          {
            uint64_t v43 = HIDWORD(v92);
            uint64_t v44 = 4 * v92;
            do
            {
              sub_21B90E86C(&v88, v93, v85, v36, v39, v31);
              v39 += v43;
              v36 += v44;
              --v42;
            }
            while (v42);
          }
          sub_21B90E86C(&v88, v93, v85, v36, v39, v31);
        }
      }
    }
    uint64_t v45 = v86;
    uint64_t v86 = 0;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
    uint64_t result = v87;
    uint64_t v87 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return result;
  }
  sub_21B90E738(a3, &v88);
  sub_21B8FC4C4(a4, v93);
  if (*(_DWORD *)(a3 + 32))
  {
    int v60 = *(_DWORD *)(a3 + 36);
    if (v60)
    {
      int v61 = *(_DWORD *)(a3 + 40);
      if (v61)
      {
        uint64_t v62 = *(unsigned int *)(a3 + 48);
        uint64_t v63 = *(unsigned int *)(a4 + 40);
        uint64_t v80 = *(unsigned int *)(a3 + 52);
        uint64_t v82 = *(unsigned int *)(a4 + 44);
        float v64 = *(float **)(a3 + 24);
        if (*(unsigned char *)(a3 + 72) && v64)
        {
          uint64_t v65 = *(void *)(a3 + 8);
          float v66 = *(std::__shared_weak_count **)(a3 + 16);
          if (v66)
          {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          (*(void (**)(uint64_t, void, const char *))(*(void *)v65 + 88))(v65, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          float v64 = *(float **)(a3 + 24);
        }
        int v14 = *(unsigned char **)(a4 + 24);
        if (*(unsigned char *)(a4 + 48) && v14)
        {
          uint64_t v67 = *(void *)(a4 + 8);
          float v68 = *(std::__shared_weak_count **)(a4 + 16);
          if (v68)
          {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v67 + 88))(v67, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          int v14 = *(unsigned char **)(a4 + 24);
        }
        int v69 = v60 - 1;
        uint64_t v70 = 4 * v62;
        int v71 = v61 - 1;
        if (v71)
        {
          if (v60 == 1)
          {
            do
            {
              *int v14 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *v64, v64[1]));
              v14 += v82;
              v64 += v80;
              --v71;
            }
            while (v71);
          }
          else
          {
            int v72 = 0;
            float v73 = v64 + 1;
            int v78 = v71;
            do
            {
              float v74 = v73;
              int v75 = v69;
              uint64_t v76 = v14;
              do
              {
                *uint64_t v76 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *(v74 - 1), *v74));
                v76 += v63;
                float v74 = (float *)((char *)v74 + v70);
                --v75;
              }
              while (v75);
              *uint64_t v76 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *(v74 - 1), *v74));
              v64 += v80;
              v14 += v82;
              ++v72;
              v73 += v80;
            }
            while (v72 != v78);
          }
        }
        for (; v69; --v69)
        {
          *int v14 = llroundf(((float (*)(uint64_t, float, float))v83)(a2, *v64, v64[1]));
          v14 += v63;
          float v64 = (float *)((char *)v64 + v70);
        }
        ((void (*)(uint64_t, float, float))v83)(a2, *v64, v64[1]);
LABEL_64:
        *int v14 = llroundf(v47);
      }
    }
  }
LABEL_65:
  uint64_t v48 = v93[0];
  v93[0] = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t result = v88;
  uint64_t v88 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B90E4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void *)(v20 - 104);
  *(void *)(v20 - 104) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B90E5D8@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = a2;
  if (a1[2] <= a2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 82, (uint64_t)"i < num_allocated_patches", 25, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8FC4C4((uint64_t)(a1 + 3), &v14);
  uint64_t v6 = a1[6] + (*((_DWORD *)a1 + 17) * v3);
  uint64_t v7 = *a1;
  v13[0] = v7;
  v13[1] = v7;
  uint64_t v16 = v6;
  *a3 = &unk_26CB96710;
  uint64_t v8 = (uint64_t)(a3 + 1);
  BOOL v9 = v7 == 0;
  BOOL v10 = v7 != 0;
  uint64_t v11 = v7 << 32;
  if (v9) {
    uint64_t v11 = 0;
  }
  uint64_t v15 = v11 | v10;
  sub_21B892A50(&v16, v13, &v15, v8);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21B90E6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B90E738(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 73)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 73)) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v7 = *(void (**)(uint64_t, void))(*(void *)v3 + 96);

  v7(v3, 0);
}

void sub_21B90E86C(_DWORD *a1, void *a2, float (**a3)(__n128), uint64_t a4, unsigned char *a5, __n128 a6)
{
  uint64_t v7 = a4;
  *a2 = a4;
  unsigned int v10 = a1[2];
  if (v10)
  {
    for (unsigned int i = 0; i < v10; ++i)
    {
      *a2 = v7;
      a2[2] = a5;
      a6.n128_u32[0] = *(_DWORD *)v7;
      if (*(float *)v7 >= 0.0)
      {
        float v13 = *(float *)(v7 + 4);
        BOOL v14 = v13 < 0.0 || (float)((float)*((unsigned int *)*a3 + 8) + -1.0) < a6.n128_f32[0];
        if (!v14 && (float)((float)*((unsigned int *)*a3 + 9) + -1.0) >= v13)
        {
          *a5 = llroundf(a3[1](a6));
          unsigned int v10 = a1[2];
        }
      }
      v7 += 4 * a1[3];
      a5 += a1[4];
    }
  }
  *a2 = v7;
  a2[2] = a5;
  a6.n128_u32[0] = *(_DWORD *)v7;
  if (*(float *)v7 >= 0.0)
  {
    float v16 = *(float *)(v7 + 4);
    if (v16 >= 0.0
      && (float)((float)*((unsigned int *)*a3 + 8) + -1.0) >= a6.n128_f32[0]
      && (float)((float)*((unsigned int *)*a3 + 9) + -1.0) >= v16)
    {
      *a5 = llroundf(a3[1](a6));
    }
  }
}

void sub_21B90E9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = &unk_26CB96710;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v13 = 0uLL;
  sub_21B8919CC((uint64_t)&v16, &v21, &v13);
  uint64_t v6 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 24) = &unk_26CB96710;
    uint64_t v8 = v17;
    uint64_t v7 = v16;
    if (v17)
    {
LABEL_4:
      p_shared_owners = &v8->__shared_owners_;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      __int16 v10 = v20;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = v8;
      *(_WORD *)(a1 + 72) = v10;
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_6;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_6:
          uint64_t v11 = v17;
          if (!v17) {
            goto LABEL_15;
          }
          goto LABEL_13;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      uint64_t v11 = v17;
      if (!v17) {
        goto LABEL_15;
      }
LABEL_13:
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
LABEL_15:
      operator new();
    }
  }
  else
  {
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 24) = &unk_26CB96710;
    uint64_t v8 = v17;
    uint64_t v7 = v16;
    if (v17) {
      goto LABEL_4;
    }
  }
  __int16 v12 = v20;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)(a1 + 64) = v19;
  *(_WORD *)(a1 + 72) = v12;
  uint64_t v11 = v17;
  if (!v17) {
    goto LABEL_15;
  }
  goto LABEL_13;
}

void sub_21B90F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21B83A360(v8);
  if (!atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_21B83A360((uint64_t)va);
  sub_21B90FA38((uint64_t *)(v11 - 72));
  MEMORY[0x21D495F30](v7, 0x10F0C407947B7F5);
  sub_21B90308C(v6);
  _Unwind_Resume(a1);
}

void sub_21B90F70C(_Unwind_Exception *a1)
{
  sub_21B90308C(v1);
  _Unwind_Resume(a1);
}

void sub_21B90F720(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 80);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21B90F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360(v4);
  sub_21B83A360(v5 - 88);
  sub_21B83A360((uint64_t)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  uint64_t v7 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  if (v7) {
    (*(void (**)(void))(v3 + 88))();
  }
  sub_21B90308C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_21B90F7E8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 16);
    if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B90F87C(uint64_t result)
{
  uint64_t v1 = result;
  long long v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B90F8F8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B90F984()
{
  return 1;
}

uint64_t sub_21B90F98C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_21B90F994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 64, 2, a1 + 72, 1);
}

uint64_t sub_21B90F9B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return v1;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21B90FA38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(void *)uint64_t v2 = &unk_26CB96B20;
    uint64_t v3 = *(unsigned int *)(v2 + 40);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_26CB97E18[v3])(&v5, v2 + 16);
    }
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x21D495F30](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_21B90FAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 24) = a5;
  operator new();
}

void sub_21B90FC90(_Unwind_Exception *a1)
{
  sub_21B90FCA8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21B90FCA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 72));
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 40);
      char v5 = *(void **)(v2 + 32);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void *)(v4 - 16);
          *(void *)(v4 - 16) = 0;
          if (v6) {
            (*(void (**)(void))(v4 - 8))();
          }
          uint64_t v7 = *(std::__shared_weak_count **)(v4 - 56);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          v4 -= 96;
        }
        while (v4 != v3);
        char v5 = *(void **)(v2 + 32);
      }
      *(void *)(v2 + 40) = v3;
      operator delete(v5);
    }
    uint64_t v8 = *(void *)(v2 + 24);
    if (v8 == v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    }
    else if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    MEMORY[0x21D495F30](v2, 0x1020C40A43346C3);
  }
  return a1;
}

void sub_21B90FE04()
{
}

void *sub_21B90FE18(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CB9E7B8;
  result[1] = v3;
  return result;
}

uint64_t sub_21B90FE60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CB9E7B8;
  a2[1] = v2;
  return result;
}

void sub_21B90FE8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_21B90FEA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21B90FF10()
{
  return &unk_26CB9E828;
}

void sub_21B90FF1C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[5];
  if (a1[4] == v4)
  {
    unint64_t v9 = a1[7];
    if (v9 >= a1[8])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    a1[7] = v9 + 1;
    uint64_t v10 = a1[3];
    if (!v10) {
      sub_21B846100();
    }
    uint64_t v11 = *(void (**)(void))(*(void *)v10 + 48);
    v11();
  }
  else
  {
    long long v13 = *(_OWORD *)(v4 - 96);
    uint64_t v14 = *(void *)(v4 - 80);
    long long v15 = *(_OWORD *)(v4 - 64);
    *(void *)(v4 - 64) = 0;
    *(void *)(v4 - 56) = 0;
    *(_OWORD *)&v16[10] = *(_OWORD *)(v4 - 38);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)(v4 - 48);
    uint64_t v5 = *(void *)(v4 - 16);
    *(void *)(v4 - 16) = 0;
    uint64_t v17 = v5;
    uint64_t v18 = *(void *)(v4 - 8);
    uint64_t v6 = a1[5];
    uint64_t v7 = *(void *)(v6 - 16);
    *(void *)(v6 - 16) = 0;
    if (v7) {
      (*(void (**)(void))(v6 - 8))();
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v6 - 56);
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a1[5] = v6 - 96;
    *(_OWORD *)a2 = v13;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = &unk_26CB96710;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v16;
    *(_OWORD *)(a2 + 58) = *(_OWORD *)&v16[10];
    *(void *)(a2 + 80) = v17;
    *(void *)(a2 + 88) = v18;
  }
}

void sub_21B91011C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_21B910134(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v5 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x2AAAAAAAAAAAAAALL) {
    sub_21B845A48();
  }
  uint64_t v7 = 96 * v5;
  uint64_t v8 = (char *)operator new(96 * v5);
  unint64_t v9 = &v8[96 * v3];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *((void *)v9 + 3) = &unk_26CB96710;
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v9 + 2) = v11;
  *((_OWORD *)v9 + 3) = v12;
  *(_OWORD *)(v9 + 58) = *(_OWORD *)(a2 + 58);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  *(void *)(a2 + 80) = 0;
  *((void *)v9 + 10) = v13;
  *((void *)v9 + 11) = v14;
  long long v15 = v9 + 96;
  uint64_t v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v9[v18];
      long long v20 = &v17[v18];
      long long v21 = *(_OWORD *)&v17[v18 - 96];
      *((void *)v19 - 10) = *(void *)&v17[v18 - 80];
      *((_OWORD *)v19 - 6) = v21;
      *((void *)v19 - 9) = &unk_26CB96710;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((void *)v20 - 8) = 0;
      *((void *)v20 - 7) = 0;
      long long v22 = *(_OWORD *)&v17[v18 - 48];
      *(_OWORD *)(v19 - 38) = *(_OWORD *)&v17[v18 - 38];
      *((_OWORD *)v19 - 3) = v22;
      uint64_t v23 = *(void *)&v17[v18 - 16];
      *((void *)v20 - 2) = 0;
      *((void *)v19 - 2) = v23;
      *((void *)v19 - 1) = *(void *)&v17[v18 - 8];
      v18 -= 96;
    }
    while (&v17[v18] != v16);
    uint64_t v17 = (char *)*a1;
    float v24 = (char *)a1[1];
    *a1 = &v9[v18];
    a1[1] = v15;
    for (a1[2] = v10; v24 != v17; v24 -= 96)
    {
      uint64_t v25 = *((void *)v24 - 2);
      *((void *)v24 - 2) = 0;
      if (v25) {
        (*((void (**)(void))v24 - 1))();
      }
      float v26 = (std::__shared_weak_count *)*((void *)v24 - 7);
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v15;
}

float sub_21B910378(uint64_t a1, float a2, float a3, double a4, double a5, double a6, float a7)
{
  float v7 = a2 - floorf(a2);
  *(float *)&unsigned int v8 = a3 - floorf(a3);
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = (unsigned char *)(*(void *)(a1 + 24) + v9 * a2 + HIDWORD(v9) * a3);
  long long v11 = &v10[HIDWORD(v9)];
  LOBYTE(a2) = v10[v9];
  LOBYTE(a3) = *v10;
  float v12 = (float)LODWORD(a3);
  float v13 = (float)LODWORD(a2) - v12;
  LOBYTE(a7) = *v11;
  float v14 = (float)LODWORD(a7);
  float v15 = (float)((float)(v7 * v13) + v12) + (float)(*(float *)&v8 * (float)(v14 - v12));
  float v16 = v7 * *(float *)&v8;
  LOBYTE(v8) = v11[v9];
  return v15 + (float)(v16 * (float)((float)((float)v8 - v14) - v13));
}

float sub_21B910400(uint64_t a1, float a2, float a3)
{
  float v3 = a2 + 0.5;
  float v4 = (float)(int)(float)(a2 + 0.5);
  float v5 = (float)(int)(float)(a3 + 0.5);
  float v6 = a2 - v4;
  if (v4 > a2) {
    float v6 = v4 - a2;
  }
  BOOL v7 = v4 == a2 || v6 <= 0.000001;
  if (v5 == a3)
  {
    BOOL v8 = 1;
  }
  else
  {
    float v10 = a3 - v5;
    if (v5 > a3) {
      float v10 = v5 - a3;
    }
    BOOL v8 = v10 <= 0.000001;
    char v11 = v10 <= 0.000001 || v7;
    if ((v11 & 1) == 0)
    {
      float v19 = a2 - floorf(a2);
      float v20 = a3 - floorf(a3);
      unint64_t v21 = *(void *)(a1 + 40);
      long long v22 = (unsigned char *)(*(void *)(a1 + 24) + v21 * a2 + HIDWORD(v21) * a3);
      uint64_t v23 = &v22[HIDWORD(v21)];
      LOBYTE(a2) = v22[v21];
      LOBYTE(a3) = *v22;
      float v24 = (float)LODWORD(a3);
      float v25 = (float)LODWORD(a2) - v24;
      *(float *)&unsigned int v26 = (float)(v19 * v25) + v24;
      LOBYTE(v4) = *v23;
      float v27 = (float)LODWORD(v4);
      float v28 = *(float *)&v26 + (float)(v20 * (float)(v27 - v24));
      LOBYTE(v26) = v23[v21];
      return v28 + (float)((float)(v19 * v20) * (float)((float)((float)v26 - v27) - v25));
    }
    if (v7 && v10 > 0.000001)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 44);
      float v13 = a3 - floorf(a3);
      float v14 = (unsigned char *)(*(void *)(a1 + 24)
                    + *(_DWORD *)(a1 + 40) * (int)(float)(v4 + 0.5)
                    + v12 * a3);
      LOBYTE(a3) = *v14;
      LOBYTE(v3) = v14[v12];
      return (float)(v13 * (float)((float)LODWORD(v3) - (float)LODWORD(a3))) + (float)LODWORD(a3);
    }
  }
  if (v7 || !v8)
  {
    LOBYTE(a2) = *(unsigned char *)(*(void *)(a1 + 24)
                          + (*(_DWORD *)(a1 + 40) * (int)v3 + *(_DWORD *)(a1 + 44)
                                                                          * (int)(float)(a3 + 0.5)));
    return (float)LODWORD(a2);
  }
  else
  {
    float v15 = a2 - floorf(a2);
    *(float *)&unsigned int v16 = v5 + 0.5;
    uint64_t v17 = *(unsigned int *)(a1 + 40);
    uint64_t v18 = (unsigned char *)(*(void *)(a1 + 24)
                  + v17 * a2
                  + *(_DWORD *)(a1 + 44) * (int)(float)(v5 + 0.5));
    LOBYTE(a2) = *v18;
    LOBYTE(v16) = v18[v17];
    return (float)(v15 * (float)((float)v16 - (float)LODWORD(a2))) + (float)LODWORD(a2);
  }
}

float sub_21B9105E8(uint64_t a1, float a2, float a3)
{
  int v3 = (int)(float)(a2 + 0.5);
  *(float *)&unsigned int v4 = a3 + 0.5;
  LOBYTE(v4) = *(unsigned char *)(*(void *)(a1 + 24)
                        + (*(_DWORD *)(a1 + 40) * v3 + *(_DWORD *)(a1 + 44) * (int)(float)(a3 + 0.5)));
  return (float)v4;
}

void sub_21B910618()
{
}

void sub_21B910788(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v3, 0x1020C4094298415);
  sub_21B912D20(v2, 0);
  uint64_t v5 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  MEMORY[0x21D495F30](v1, 0x1020C40E94EDECFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21B910838@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v40[0] = a3;
  v40[1] = a4;
  kdebug_trace();
  v39[0] = v40;
  v39[1] = a1;
  v39[2] = a2;
  uint64_t v9 = *a1;
  float v10 = *(void ***)(*a1 + 96);
  if (!v10) {
    sub_21B90E9B0(a5, *(void *)(v9 + 24), a3);
  }
  if (*(void *)(v9 + 56) < a3)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/src/PatchCropper.cpp", 160, (uint64_t)"m().config.max_keypoint_size >= key_points.size()", 49, (uint64_t)"key_points size must be equal or less than the specified max size.", 66, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    float v10 = *(void ***)(*a1 + 96);
  }
  char v11 = *v10;
  uint64_t v12 = (std::mutex *)(*v10 + 9);
  std::mutex::lock(v12);
  sub_21B90FF1C(v11, a5);
  std::mutex::unlock(v12);
  if (!*(_DWORD *)(*a1 + 4))
  {
    uint64_t v14 = *(void *)(a5 + 32);
    float v15 = *(std::__shared_weak_count **)(a5 + 40);
    if (v15)
    {
      p_shared_owners = &v15->__shared_owners_;
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      __int16 v17 = *(_WORD *)(a5 + 72);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)__len = *(_OWORD *)(a5 + 48);
      uint64_t v37 = *(void *)(a5 + 64);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v34 = v14;
      uint64_t v35 = v15;
      __int16 v38 = v17;
      if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_11;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_11:
          uint64_t v18 = *a1;
          if (*(unsigned char *)(*a1 + 9)) {
            goto LABEL_12;
          }
LABEL_15:
          int v19 = 0;
          uint64_t v20 = v34;
          if (!v34) {
            goto LABEL_31;
          }
LABEL_16:
          if (v35)
          {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            uint64_t v20 = v34;
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          if (HIBYTE(v38))
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v20 + 96))(&v41, v20, 1);
            uint64_t v21 = v37;
            if (v37 != 1)
            {
LABEL_32:
              if (LODWORD(__len[1]) && HIDWORD(__len[1]))
              {
                float v25 = (unsigned char *)__len[0];
                if ((_BYTE)v38 && __len[0])
                {
                  if (v35)
                  {
                    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
                    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v34 + 88))(v34, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  float v25 = (unsigned char *)__len[0];
                }
                int v26 = LODWORD(__len[1]) - 1;
                int v27 = HIDWORD(__len[1]) - 1;
                if (HIDWORD(__len[1]) != 1)
                {
                  if (LODWORD(__len[1]) == 1)
                  {
                    do
                    {
                      *float v25 = v19;
                      v25 += HIDWORD(v37);
                      --v27;
                    }
                    while (v27);
                  }
                  else
                  {
                    int v28 = 0;
                    do
                    {
                      int v29 = LODWORD(__len[1]) - 1;
                      int v30 = v25;
                      do
                      {
                        *int v30 = v19;
                        v30 += v21;
                        --v29;
                      }
                      while (v29);
                      *int v30 = v19;
                      v25 += HIDWORD(v37);
                      ++v28;
                    }
                    while (v28 != v27);
                  }
                }
                if (LODWORD(__len[1]) != 1)
                {
                  do
                  {
                    *float v25 = v19;
                    v25 += v21;
                    --v26;
                  }
                  while (v26);
                }
                *float v25 = v19;
              }
              goto LABEL_63;
            }
LABEL_23:
            if (HIDWORD(v37) == LODWORD(__len[1]))
            {
              long long v22 = (void *)__len[0];
              if ((_BYTE)v38 && __len[0])
              {
                if (v35)
                {
                  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
                  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v34 + 88))(v34, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                long long v22 = (void *)__len[0];
              }
              size_t v23 = (HIDWORD(__len[1]) * HIDWORD(v37));
              int v24 = v19;
            }
            else
            {
              if (!LODWORD(__len[1]) || !HIDWORD(__len[1])) {
                goto LABEL_63;
              }
              __n128 v31 = (char *)__len[0];
              if ((_BYTE)v38 && __len[0])
              {
                if (v35)
                {
                  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
                  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v34 + 88))(v34, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                __n128 v31 = (char *)__len[0];
              }
              int v32 = HIDWORD(__len[1]) - 1;
              if (HIDWORD(__len[1]) != 1)
              {
                do
                {
                  memset(v31, v19, LODWORD(__len[1]));
                  v31 += HIDWORD(v37);
                  --v32;
                }
                while (v32);
              }
              long long v22 = v31;
              int v24 = v19;
              size_t v23 = LODWORD(__len[1]);
            }
            memset(v22, v24, v23);
LABEL_63:
            uint64_t v33 = v41;
            uint64_t v41 = 0;
            if (v33) {
              (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
            }
            if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            return sub_21B910F98((uint64_t)v39, a5);
          }
LABEL_31:
          uint64_t v41 = 0;
          uint64_t v21 = v37;
          if (v37 != 1) {
            goto LABEL_32;
          }
          goto LABEL_23;
        }
      }
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      uint64_t v18 = *a1;
      if (!*(unsigned char *)(*a1 + 9)) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v34 = *(void *)(a5 + 32);
      uint64_t v35 = 0;
      *(_OWORD *)__len = *(_OWORD *)(a5 + 48);
      uint64_t v37 = *(void *)(a5 + 64);
      __int16 v38 = *(_WORD *)(a5 + 72);
      uint64_t v18 = *a1;
      if (!*(unsigned char *)(*a1 + 9)) {
        goto LABEL_15;
      }
    }
LABEL_12:
    int v19 = *(unsigned __int8 *)(v18 + 8);
    uint64_t v20 = v34;
    if (!v34) {
      goto LABEL_31;
    }
    goto LABEL_16;
  }
  return sub_21B910F98((uint64_t)v39, a5);
}

void sub_21B910EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(void *)(v3 - 72);
  *(void *)(v3 - 72) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    sub_21B85E304((uint64_t)va);
    sub_21B903108(v2);
    _Unwind_Resume(a1);
  }
  sub_21B85E304((uint64_t)va);
  sub_21B903108(v2);
  _Unwind_Resume(a1);
}

void sub_21B910F58(_Unwind_Exception *a1)
{
  sub_21B903108(v1);
  _Unwind_Resume(a1);
}

void sub_21B910F6C(_Unwind_Exception *a1)
{
  sub_21B903108(v1);
  _Unwind_Resume(a1);
}

void sub_21B910F80(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B910F98(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unint64_t **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = **(void **)a1;
  unint64_t v7 = v6;
  if (*(void *)(a2 + 16) < v6)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 103, (uint64_t)"_num_used_patches <= num_allocated_patches", 42, (uint64_t)"Number of used patches must be equal or less than the number of pathces.", 72, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    unsigned int v4 = *(unint64_t **)a1;
    unint64_t v7 = **(void **)a1;
  }
  *(void *)(a2 + 8) = v6;
  if (*(unsigned char *)(*(void *)v5 + 40) && v7 >= *(void *)(*(void *)v5 + 32))
  {
    sub_21B907D98(a2, (uint64_t)v36);
    char v11 = *(unint64_t **)a1;
    unint64_t v12 = vcvtps_u32_f32((float)**(unint64_t **)a1 * 0.5);
    long long __p = operator new(0x10uLL);
    uint64_t v34 = __p;
    uint64_t v35 = (char *)__p + 16;
    if (*v11 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = *v11;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v16 = *(unsigned int *)(v14 + 32);
    unsigned int v15 = *(_DWORD *)(v14 + 36);
    BOOL v18 = v16 == 0;
    unint64_t v17 = v16 | ((unint64_t)v15 << 32);
    BOOL v18 = v18 || v15 == 0;
    BOOL v19 = v18 || v13 == 0;
    if (v19) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = v17;
    }
    if (v19) {
      int v21 = 0;
    }
    else {
      int v21 = v13;
    }
    unint64_t v26 = *(void *)v36;
    unint64_t v27 = v20;
    int v28 = v21;
    uint64_t v29 = *(void *)&v36[5];
    int v30 = v37;
    if (v21 * v37 != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      sub_21B912778(v31, (uint64_t *)&v26);
      uint64_t v22 = *(void *)(a1 + 16);
      unint64_t v26 = sub_21B8EC14C(*(unint64_t **)a1, 0, v13);
      unint64_t v27 = v23;
      sub_21B912048((uint64_t)&v25, (uint64_t)sub_21B9118C0, 0, v5, v22, (uint64_t)&v26, (uint64_t)v31);
    }
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (float *)v4[1];
  sub_21B904A20((uint64_t)v31, (long long *)a2);
  sub_21B9118C0(v5, v8, v7, v9, v31);
  float v10 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return kdebug_trace();
}

void sub_21B9117F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_21B911F64((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B91180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_21B911F64((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B911820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21B90308C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B911834(_Unwind_Exception *a1, atomic_ullong *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a2)
  {
    if (!atomic_fetch_add(a2 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*a2 + 16))(a2);
      sub_21B90308C((uint64_t)va);
      sub_21B911F64((void **)va1);
      _Unwind_Resume(a1);
    }
  }
  sub_21B90308C((uint64_t)va);
  sub_21B911F64((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9118C0(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, int *a5)
{
  sub_21B8DFD90(a2, &v22);
  uint64_t v10 = *(_DWORD **)a1;
  if (*(unsigned char *)(*(void *)a1 + 48)) {
    BOOL v11 = **(_DWORD **)a1 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11 || (*(void *)a5 & 3) != 0)
  {
    v17[0] = v10[6];
    v17[1] = v17[0];
    BOOL v18 = &unk_26CB9E428;
    sub_21B90C260(v17);
  }
  uint64_t v13 = *((void *)v10 + 9) + 8;
  BOOL v19 = &unk_26CB9E5A8;
  sub_21B90CFE4(v13, &v20);
  sub_21B913088(a2, a3, a4, a5, (uint64_t)&v19, *(_DWORD *)(*(void *)a1 + 4), *(void *)(*(void *)a1 + 12));
  uint64_t v14 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v22;
  uint64_t v22 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  return 1;
}

void sub_21B911EC4(_Unwind_Exception *a1)
{
  sub_21B90D0FC(v1 - 224);
  uint64_t v3 = *(void *)(v1 - 144);
  *(void *)(v1 - 144) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(a1);
}

void **sub_21B911F64(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v6 = (atomic_ullong *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6 && !atomic_fetch_add(v5 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
          (*(void (**)(atomic_ullong *))(*v5 + 16))(v5);
        }
      }
      while (v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_21B912000(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = MEMORY[0x21D495C80]();
    MEMORY[0x21D495F30](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_21B912048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 16);
  if (v8)
  {
    p_shared_owners = &v8->__shared_owners_;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_8:
  uint64_t v10 = *(std::__shared_weak_count **)(a7 + 40);
  if (v10)
  {
    BOOL v11 = &v10->__shared_owners_;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(v11, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(v11, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_15;
      }
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_15:
  operator new();
}

void sub_21B912764(_Unwind_Exception *a1)
{
}

void *sub_21B912778(void *a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 2);
  *a1 = v4;
  uint64_t v5 = *((unsigned int *)a2 + 4);
  a1[1] = v5;
  a1[2] = v5;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 3) * v4;
  BOOL v8 = v7 != 0;
  BOOL v10 = v5 == 0;
  v13[0] = v7;
  v13[1] = v5;
  uint64_t v9 = *((unsigned int *)a2 + 7);
  a1[3] = &unk_26CB96710;
  BOOL v10 = v10 || v7 == 0;
  uint64_t v11 = v9 << 32;
  if (v10) {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11 | v8;
  uint64_t v15 = v6;
  sub_21B892A50(&v15, v13, &v14, (uint64_t)(a1 + 4));
  if (*((_DWORD *)a2 + 2) != *((_DWORD *)a2 + 3)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 136, (uint64_t)"view.Shape(0) == view.Shape(1)", 30, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  return a1;
}

void sub_21B912878(_Unwind_Exception *a1)
{
  sub_21B85E304(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B91288C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_21B912960(uint64_t a1)
{
  sub_21B912B20(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B912998(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  uint64_t v2 = a1->~__assoc_sub_state_0;

  return ((uint64_t (*)(std::__assoc_sub_state *))v2)(a1);
}

void sub_21B9129F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(uint64_t (**)(void *, uint64_t, void, void, uint64_t))(a1 + 152);
  uint64_t v4 = (void *)(*(void *)(a1 + 168) + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, uint64_t, void, void, uint64_t))(*v4 + v3);
  }
  uint64_t v5 = v3(v4, a1 + 176, *(void *)(a1 + 232), *(void *)(a1 + 240), a1 + 248);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, uint64_t v6 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v6))
  {
    sub_21B907D30(2u);
  }
  *(void *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_21B912AB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex::unlock(v17);
  __cxa_begin_catch(a1);
  std::current_exception();
  v19.__ptr_ = v20;
  std::__assoc_sub_state::set_exception(v16, v19);
  std::exception_ptr::~exception_ptr(v20);
  __cxa_end_catch();
}

void sub_21B912B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void sub_21B912B20(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9E860;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

uint64_t sub_21B912C44(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void (**)(void *))(a1 + 8);
  uint64_t v6 = (void *)(*(void *)(a1 + 24) + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::exception_ptr v7 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    uint64_t v8 = MEMORY[0x21D495C80]();
    MEMORY[0x21D495F30](v8, 0x20C4093837F09);
  }
  MEMORY[0x21D495F30](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_21B912D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B908340((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_21B912D20(uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3)
    {
      std::mutex::~mutex((std::mutex *)(v3 + 72));
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(void **)(v3 + 32);
        if (v5 != v4)
        {
          do
          {
            uint64_t v7 = *(void *)(v5 - 16);
            *(void *)(v5 - 16) = 0;
            if (v7) {
              (*(void (**)(void))(v5 - 8))();
            }
            uint64_t v8 = *(std::__shared_weak_count **)(v5 - 56);
            if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
            v5 -= 96;
          }
          while (v5 != v4);
          uint64_t v6 = *(void **)(v3 + 32);
        }
        *(void *)(v3 + 40) = v4;
        operator delete(v6);
      }
      uint64_t v9 = *(void *)(v3 + 24);
      if (v9 == v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
      }
      else if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      MEMORY[0x21D495F30](v3, 0x1020C40A43346C3);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

uint64_t sub_21B912EB4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_21B912D20((uint64_t **)(result + 96), 0);
    uint64_t v2 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x21D495F30);
  }
  return result;
}

BOOL sub_21B912F3C(unint64_t a1, unint64_t a2, float *a3, uint64_t a4)
{
  float v7 = 1.0;
  if ((a4 & 0xFF00000000) != 0) {
    float v7 = *(float *)&a4;
  }
  float v8 = v7 * a3[3];
  __float2 v9 = __sincosf_stret(a3[2]);
  float v10 = *a3;
  float v11 = v8 * (float)(v9.__sinval - v9.__cosval);
  float v12 = *a3 + v11;
  BOOL result = 0;
  if (v12 >= 0.0)
  {
    float v14 = (float)a2 + -1.0;
    float v15 = a3[1];
    float v16 = (float)a1 + -1.0;
    float v17 = v8 * (float)((float)-v9.__cosval - v9.__sinval);
    if (v14 > (float)(v15 + v17) && v16 > v12 && (float)(v15 + v17) >= 0.0)
    {
      float v19 = v8 * (float)(v9.__cosval + v9.__sinval);
      BOOL result = 0;
      if ((float)(v10 + v19) >= 0.0)
      {
        float v20 = v15 + v11;
        if (v14 > v20 && v16 > (float)(v10 + v19) && v20 >= 0.0)
        {
          BOOL result = 0;
          if ((float)(v10 + v17) >= 0.0)
          {
            float v22 = v8 * (float)(v9.__cosval - v9.__sinval);
            BOOL v23 = v14 <= (float)(v15 + v22) || v16 <= (float)(v10 + v17);
            if (!v23 && (float)(v15 + v22) >= 0.0)
            {
              float v24 = v10 + v22;
              if (v24 >= 0.0)
              {
                BOOL v25 = v16 > v24;
                if ((float)(v15 + v19) < 0.0) {
                  BOOL v25 = 0;
                }
                return v14 > (float)(v15 + v19) && v25;
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_21B913088(uint64_t a1, uint64_t a2, float *a3, int *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v9 = (uint64_t)a4;
  int v78 = a6;
  int v13 = *a4;
  sub_21B907D98((uint64_t)a4, (uint64_t)&v57);
  sub_21B907D98(v9, (uint64_t)&v68);
  BOOL v16 = v58 == v13 && HIDWORD(v69) == v13 && *(_DWORD *)(v9 + 8) == a2 && *(_DWORD *)(a5 + 56) == v13;
  if ((!v16 || *(_DWORD *)(a5 + 60) != HIDWORD(v69))
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/src/SIMDCropper.cpp", 42, (uint64_t)"IsValidateSIMDCropperInputs( key_points.size(), patches.PatchSize(), {patches.View3D().Shape()[0], patches.View3D().Shape()[1], patches.NumberOfUsedPatches()}, norm.Size())", 172, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v17 = *(unsigned int *)(a1 + 36);
  if (v18 <= v17) {
    unsigned int v19 = *(_DWORD *)(a1 + 36);
  }
  else {
    unsigned int v19 = *(_DWORD *)(a1 + 32);
  }
  float v20 = (float)v19 - nextafterf((float)v19, -3.4028e38);
  unint64_t v54 = v17;
  long long v77 = 0uLL;
  *(float *)v21.i32 = (float)((float)v18 + -1.0) - v20;
  *(float *)v22.i32 = (float)((float)v17 + -1.0) - v20;
  int32x4_t v75 = vdupq_lane_s32(v22, 0);
  int32x4_t v76 = vdupq_lane_s32(v21, 0);
  if (a2)
  {
    unint64_t v23 = 0;
    unsigned int v53 = &a3[5 * a2];
    if ((a7 & 0xFF00000000) != 0) {
      float v24 = *(float *)&a7;
    }
    else {
      float v24 = 1.0;
    }
    uint64_t v47 = a7;
    unint64_t v48 = v18;
    uint64_t v49 = a1;
    uint64_t v50 = v9;
    do
    {
      sub_21B90E5D8((uint64_t *)v9, v23, &v68);
      float v55 = v24 * a3[3];
      __float2 v25 = __sincosf_stret(a3[2]);
      *(float32x2_t *)v26.i8 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v25.__sinval), LODWORD(v25.__cosval)), v55);
      *(float *)v27.i32 = -(float)(v25.__sinval * v55);
      int32x4_t v67 = vzip1q_s32(v26, vzip1q_s32(v27, v26));
      BOOL v66 = !sub_21B912F3C(v18, v54, a3, a7);
      uint64_t v57 = v9;
      float v58 = &v67;
      BOOL v59 = a3;
      int v60 = &v66;
      int v61 = &v78;
      uint64_t v62 = &v77;
      uint64_t v63 = &v76;
      float v64 = &v75;
      uint64_t v65 = a1;
      sub_21B90E738(a5, &v80);
      sub_21B8FC4C4((uint64_t)&v68, &v79);
      if (*(_DWORD *)(a5 + 32))
      {
        if (*(_DWORD *)(a5 + 36))
        {
          int v31 = *(_DWORD *)(a5 + 40);
          if (v31)
          {
            uint64_t v32 = *(unsigned int *)(a5 + 44);
            uint64_t v33 = *(unsigned int *)(a5 + 48);
            unsigned int v34 = v72;
            uint64_t v35 = v73;
            uint64_t v36 = *(void *)(a5 + 24);
            uint64_t v51 = *(unsigned int *)(a5 + 52);
            uint64_t v52 = v32;
            unsigned int v56 = v72;
            if (*(unsigned char *)(a5 + 72) && v36)
            {
              uint64_t v38 = *(void *)(a5 + 8);
              int v37 = *(std::__shared_weak_count **)(a5 + 16);
              if (v37)
              {
                atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              (*(void (**)(uint64_t, void, const char *))(*(void *)v38 + 88))(v38, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              uint64_t v36 = *(void *)(a5 + 24);
              a7 = v47;
              unsigned int v34 = v56;
              uint64_t v32 = v52;
            }
            uint64_t v39 = v71;
            if (v74 && v71)
            {
              uint64_t v41 = v69;
              uint64_t v40 = v70;
              if (v70)
              {
                atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v41 + 88))(v41, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              uint64_t v39 = v71;
              a7 = v47;
              unsigned int v34 = v56;
              uint64_t v32 = v52;
            }
            int32x4_t v42 = 0uLL;
            v81[0] = 0;
            long long v82 = 0u;
            v81[1] = v32 | (v33 << 32);
            LODWORD(v82) = v33;
            uint64_t v83 = v34;
            int v43 = v31 - 1;
            if (v31 != 1)
            {
              do
              {
                v81[0] = v36;
                *((void *)&v82 + 1) = v39;
                sub_21B913610((unint64_t)&v57, (uint64_t)v81, (uint64_t)&v82 + 8, v42, v28, v29, v30);
                v39 += v35;
                v36 += 4 * v51;
                --v43;
              }
              while (v43);
            }
            v81[0] = v36;
            *((void *)&v82 + 1) = v39;
            sub_21B913610((unint64_t)&v57, (uint64_t)v81, (uint64_t)&v82 + 8, v42, v28, v29, v30);
            a1 = v49;
            uint64_t v9 = v50;
            unint64_t v18 = v48;
          }
        }
      }
      uint64_t v44 = v79;
      uint64_t v79 = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      uint64_t v45 = v80;
      uint64_t v80 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
      uint64_t v46 = v70;
      if (v70)
      {
        if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      a3 += 5;
      ++v23;
    }
    while (a3 != v53);
  }
}

void sub_21B913558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v34 = *(void *)(v32 - 176);
  *(void *)(v32 - 176) = 0;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    uint64_t v35 = *(void *)(v32 - 168);
    *(void *)(v32 - 168) = 0;
    if (!v35)
    {
LABEL_3:
      sub_21B85E304((uint64_t)&a32);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v35 = *(void *)(v32 - 168);
    *(void *)(v32 - 168) = 0;
    if (!v35) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  sub_21B85E304((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_21B9135FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

unint64_t sub_21B913610(unint64_t result, uint64_t a2, uint64_t a3, int32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  if (**(void **)result)
  {
    unint64_t v9 = result;
    unint64_t v10 = 0;
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    float32x4_t v61 = v11;
    do
    {
      int v48 = *(_DWORD *)(a2 + 16);
      a4.i64[0] = *(void *)(*(void *)a2 + 4 * (v48 * v10));
      a5.i64[0] = *(void *)(*(void *)a2 + 4 * ((v10 + 1) * v48));
      a6.i64[0] = *(void *)(*(void *)a2 + 4 * ((v10 + 2) * v48));
      a7.i64[0] = *(void *)(*(void *)a2 + 4 * ((v10 + 3) * v48));
      int32x4_t v49 = vzip1q_s32(a4, (int32x4_t)a6);
      int32x4_t v50 = vzip1q_s32((int32x4_t)a5, (int32x4_t)a7);
      float32x4_t v51 = (float32x4_t)vzip1q_s32(v49, v50);
      float32x4_t v52 = (float32x4_t)vzip2q_s32(v49, v50);
      unsigned int v53 = *(float32x2_t **)(v9 + 8);
      unint64_t v54 = *(const float **)(v9 + 16);
      float32x4_t v55 = vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*v53)), v52, *v53, 1);
      float32x4_t v56 = vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(void *)&v53[1])), v52, v53[1], 1);
      float32x4_t v57 = vld1q_dup_f32(v54++);
      float32x4_t v15 = vaddq_f32(v55, v57);
      float32x4_t v58 = vld1q_dup_f32(v54);
      float32x4_t v16 = vaddq_f32(v56, v58);
      if (**(unsigned char **)(v9 + 24))
      {
        int v59 = **(_DWORD **)(v9 + 32);
        if (v59 == 2)
        {
          float32x4_t v65 = vaddq_f32(*(float32x4_t *)*(void *)(v9 + 48), *(float32x4_t *)*(void *)(v9 + 48));
          simd_float4 x = (simd_float4)v16;
          simd_float4 v64 = _simd_fmod_f4((simd_float4)v15, (simd_float4)v65);
          float32x4_t v62 = vaddq_f32(*(float32x4_t *)*(void *)(v9 + 56), *(float32x4_t *)*(void *)(v9 + 56));
          float32x4_t v12 = (float32x4_t)_simd_fmod_f4(x, (simd_float4)v62);
          float32x4_t v11 = v61;
          float32x4_t v13 = v12;
          float32x4_t v14 = vsubq_f32(v62, v12);
          float32x4_t v15 = vminnmq_f32((float32x4_t)v64, vsubq_f32(v65, (float32x4_t)v64));
        }
        else
        {
          if (v59 != 1) {
            goto LABEL_5;
          }
          float32x4_t v60 = *(float32x4_t *)*(void *)(v9 + 40);
          float32x4_t v15 = vminnmq_f32(vmaxnmq_f32(v15, v60), *(float32x4_t *)*(void *)(v9 + 48));
          float32x4_t v14 = *(float32x4_t *)*(void *)(v9 + 56);
          float32x4_t v13 = vmaxnmq_f32(v16, v60);
        }
        float32x4_t v16 = vminnmq_f32(v13, v14);
      }
LABEL_5:
      float32x4_t v17 = vminnmq_f32(vsubq_f32(v15, vrndmq_f32(v15)), v11);
      uint64_t v18 = *(void *)(v9 + 64);
      int v20 = *(_DWORD *)(v18 + 40);
      int v19 = *(_DWORD *)(v18 + 44);
      unsigned int v21 = v20 * v15.f32[0];
      unsigned int v22 = v19 * v16.f32[0];
      uint64_t v23 = *(void *)(v18 + 24);
      v24.i32[0] = v15.i32[1];
      LODWORD(v18) = v20 * v15.f32[1];
      unsigned int v25 = v19 * v16.f32[1];
      float v26 = v15.f32[2];
      unsigned int v27 = v20 * v15.f32[2];
      unsigned int v28 = v19 * v16.f32[2];
      float v29 = v15.f32[3];
      unsigned int v30 = v20 * v15.f32[3];
      unsigned int v31 = v19 * v16.f32[3];
      float32x4_t v32 = vminnmq_f32(vsubq_f32(v16, vrndmq_f32(v16)), v11);
      v33.i16[0] = *(unsigned __int8 *)(v23 + v22 + v21);
      v33.i16[1] = *(unsigned __int8 *)(v23 + v25 + v18);
      v33.i16[2] = *(unsigned __int8 *)(v23 + v28 + v27);
      v33.i16[3] = *(unsigned __int8 *)(v23 + v31 + v30);
      unsigned int v34 = (float)(v15.f32[0] + 1.0);
      float32x4_t v35 = vcvtq_f32_u32(vmovl_u16(v33));
      int v36 = v20 * v34;
      int v37 = (unsigned __int8 *)(v23 + v22 + v36);
      unsigned int v38 = v20 * (float)(*(float *)v24.i32 + 1.0);
      uint64_t v39 = (unsigned __int8 *)(v23 + v25 + v38);
      unsigned int v40 = v20 * (float)(v26 + 1.0);
      unsigned int v41 = v20 * (float)(v29 + 1.0);
      v24.i16[0] = *v37;
      v24.i16[1] = *v39;
      v24.i16[2] = *(unsigned __int8 *)(v23 + v28 + v40);
      v24.i16[3] = *(unsigned __int8 *)(v23 + v31 + v41);
      float32x4_t v42 = vcvtq_f32_u32(vmovl_u16(v24));
      BOOL result = v19 * (float)(v16.f32[0] + 1.0);
      unsigned int v43 = v19 * (float)(v16.f32[1] + 1.0);
      LODWORD(v37) = v19 * (float)(v16.f32[2] + 1.0);
      unsigned int v44 = v19 * (float)(v16.f32[3] + 1.0);
      v45.i16[0] = *(unsigned __int8 *)(v23 + result + v21);
      v45.i16[1] = *(unsigned __int8 *)(v23 + v43 + v18);
      v45.i16[2] = *(unsigned __int8 *)(v23 + v37 + v27);
      v45.i16[3] = *(unsigned __int8 *)(v23 + v44 + v30);
      a7 = vcvtq_f32_u32(vmovl_u16(v45));
      v46.i16[0] = *(unsigned __int8 *)(v23 + (result + v36));
      v46.i16[1] = *(unsigned __int8 *)(v23 + v43 + v38);
      v46.i16[2] = *(unsigned __int8 *)(v23 + v37 + v40);
      v46.i16[3] = *(unsigned __int8 *)(v23 + v44 + v41);
      float32x4_t v47 = vaddq_f32(vaddq_f32(vmulq_f32(v17, vsubq_f32(v42, v35)), v35), vmulq_f32(v32, vsubq_f32(a7, v35)));
      a5 = vmulq_f32(v17, v32);
      a6 = vsubq_f32(vsubq_f32(vcvtq_f32_u32(vmovl_u16(v46)), v42), a7);
      a4 = (int32x4_t)vrndaq_f32(vaddq_f32(v47, vmulq_f32(a5, vaddq_f32(a6, v35))));
      *(unsigned char *)(*(void *)a3 + (*(_DWORD *)(a3 + 8) * v10)) = (int)*(float *)a4.i32;
      *(unsigned char *)(*(void *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 1))) = (int)*(float *)&a4.i32[1];
      *(unsigned char *)(*(void *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 2))) = (int)*(float *)&a4.i32[2];
      *(unsigned char *)(*(void *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 3))) = (int)*(float *)&a4.i32[3];
      v10 += 4;
    }
    while (v10 < **(void **)v9);
  }
  return result;
}

uint64_t *sub_21B913A08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5F800))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F808, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C5F808))
    {
      sub_21B981B68((uint64_t)&v3);
      if (v5)
      {
        xmmword_267C5F810 = v3;
        unk_267C5F820 = v4;
      }
      else
      {
        byte_267C5F827 = 14;
        strcpy((char *)&xmmword_267C5F810, "com.apple.cv3d");
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5F810, &dword_21B831000);
      __cxa_guard_release(&qword_267C5F808);
    }
    if (byte_267C5F827 >= 0) {
      size_t v1 = byte_267C5F827;
    }
    else {
      size_t v1 = *((void *)&xmmword_267C5F810 + 1);
    }
    if (byte_267C5F827 >= 0) {
      uint64_t v2 = (char *)&xmmword_267C5F810;
    }
    else {
      uint64_t v2 = (char *)xmmword_267C5F810;
    }
    qword_267C5F828 = (uint64_t)os_log_create(v2, "tracing");
    sub_21B913C6C(&qword_267C5F830, v2, v1);
    sub_21B913C6C(qword_267C5F850, "tracing", 7uLL);
    __cxa_atexit((void (*)(void *))sub_21B913BFC, &qword_267C5F828, &dword_21B831000);
    __cxa_guard_release(&qword_267C5F800);
  }
  return &qword_267C5F828;
}

void sub_21B913B80(_Unwind_Exception *a1)
{
}

void sub_21B913BA4(_Unwind_Exception *a1)
{
  if (byte_267C5F848 && byte_267C5F847 < 0) {
    operator delete((void *)qword_267C5F830);
  }
  if (qword_267C5F828) {
    os_release((void *)qword_267C5F828);
  }
  __cxa_guard_abort(&qword_267C5F800);
  _Unwind_Resume(a1);
}

uint64_t sub_21B913BFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    uint64_t v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1) {
LABEL_7:
  }
    os_release(v2);
  return a1;
}

void *sub_21B913C6C(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  *((unsigned char *)__dst + 24) = 1;
  return __dst;
}

void *sub_21B913D20(void *a1, uint64_t a2, void *__src, size_t __len, long long *a5, long long *a6, void *a7, size_t a8, void *__srca, size_t __lena, uint64_t a11, _OWORD *a12)
{
  *a1 = a2;
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  if (__len >= 0x17)
  {
    size_t v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v22 = __len | 7;
    }
    size_t v23 = v22 + 1;
    int v19 = operator new(v22 + 1);
    a1[2] = __len;
    a1[3] = v23 | 0x8000000000000000;
    a1[1] = v19;
  }
  else
  {
    *((unsigned char *)a1 + 31) = __len;
    int v19 = a1 + 1;
    if (!__len)
    {
      *((unsigned char *)a1 + 8) = 0;
      *((unsigned char *)a1 + 32) = 0;
      int v20 = a1 + 4;
      *((unsigned char *)a1 + 56) = 0;
      if (*((unsigned char *)a5 + 24)) {
        goto LABEL_5;
      }
LABEL_11:
      *((unsigned char *)a1 + 64) = 0;
      uint16x4_t v24 = a1 + 8;
      *((unsigned char *)a1 + 88) = 0;
      if (!*((unsigned char *)a6 + 24)) {
        goto LABEL_19;
      }
      goto LABEL_15;
    }
  }
  memmove(v19, __src, __len);
  *((unsigned char *)v19 + __len) = 0;
  *((unsigned char *)a1 + 32) = 0;
  int v20 = a1 + 4;
  *((unsigned char *)a1 + 56) = 0;
  if (!*((unsigned char *)a5 + 24)) {
    goto LABEL_11;
  }
LABEL_5:
  if (*((char *)a5 + 23) < 0)
  {
    sub_21B846188(v20, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v21 = *a5;
    void v20[2] = *((void *)a5 + 2);
    *(_OWORD *)int v20 = v21;
  }
  *((unsigned char *)a1 + 56) = 1;
  *((unsigned char *)a1 + 64) = 0;
  uint16x4_t v24 = a1 + 8;
  *((unsigned char *)a1 + 88) = 0;
  if (*((unsigned char *)a6 + 24))
  {
LABEL_15:
    if (*((char *)a6 + 23) < 0)
    {
      sub_21B846188(v24, *(void **)a6, *((void *)a6 + 1));
    }
    else
    {
      long long v25 = *a6;
      void v24[2] = *((void *)a6 + 2);
      *(_OWORD *)uint16x4_t v24 = v25;
    }
    *((unsigned char *)a1 + 88) = 1;
  }
LABEL_19:
  if (a8 > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  if (a8 >= 0x17)
  {
    uint64_t v27 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a8 | 7) != 0x17) {
      uint64_t v27 = a8 | 7;
    }
    uint64_t v28 = v27 + 1;
    float v26 = operator new(v27 + 1);
    a1[13] = a8;
    a1[14] = v28 | 0x8000000000000000;
    a1[12] = v26;
    goto LABEL_26;
  }
  *((unsigned char *)a1 + 119) = a8;
  float v26 = a1 + 12;
  if (a8) {
LABEL_26:
  }
    memmove(v26, a7, a8);
  *((unsigned char *)v26 + a8) = 0;
  float v29 = a1 + 15;
  if (__lena > 0x7FFFFFFFFFFFFFF7) {
    sub_21B836090();
  }
  if (__lena >= 0x17)
  {
    size_t v30 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17) {
      size_t v30 = __lena | 7;
    }
    size_t v31 = v30 + 1;
    float v29 = operator new(v30 + 1);
    a1[16] = __lena;
    a1[17] = v31 | 0x8000000000000000;
    a1[15] = v29;
  }
  else
  {
    *((unsigned char *)a1 + 143) = __lena;
    if (!__lena) {
      goto LABEL_35;
    }
  }
  memmove(v29, __srca, __lena);
LABEL_35:
  *((unsigned char *)v29 + __lena) = 0;
  a1[18] = a11;
  *(_OWORD *)(a1 + 19) = *a12;
  return a1;
}

void sub_21B913FAC(_Unwind_Exception *exception_object)
{
  if (v1[88] && v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[56] && v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B91401C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F870, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F870))
  {
    return &unk_267C5BFD0;
  }
  __cxa_atexit((void (*)(void *))sub_21B914098, &unk_267C5BFD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F870);
  return &unk_267C5BFD0;
}

void sub_21B914098(std::mutex *this)
{
  uint64_t v2 = *(void **)this[1].__m_.__opaque;
  if (v2)
  {
    long long v3 = *(void **)&this[1].__m_.__opaque[8];
    uint64_t v4 = *(void **)this[1].__m_.__opaque;
    if (v3 != v2)
    {
      char v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        size_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        size_t v7 = v6 - 1;
        v6 -= 5;
        v5 -= 5;
      }
      while (v7 != v2);
      uint64_t v4 = *(void **)this[1].__m_.__opaque;
    }
    *(void *)&this[1].__m_.__opaque[8] = v2;
    operator delete(v4);
  }

  std::mutex::~mutex(this);
}

void sub_21B914178(void **a1, long long *a2)
{
  char v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    long long v6 = *a2;
    *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)char v5 = v6;
    size_t v7 = v5 + 20;
LABEL_3:
    a1[1] = v7;
    return;
  }
  size_t v8 = (char *)*a1;
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    sub_21B862A00();
  }
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v8) >> 2);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x666666666666666) {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 > 0xCCCCCCCCCCCCCCCLL) {
      sub_21B845A48();
    }
    float32x4_t v13 = (char *)operator new(20 * v12);
  }
  else
  {
    float32x4_t v13 = 0;
  }
  float32x4_t v14 = &v13[20 * v9];
  *(_OWORD *)float32x4_t v14 = *a2;
  *((_DWORD *)v14 + 4) = *((_DWORD *)a2 + 4);
  size_t v7 = v14 + 20;
  if (v5 != v8)
  {
    do
    {
      long long v15 = *(_OWORD *)(v5 - 20);
      *((_DWORD *)v14 - 1) = *((_DWORD *)v5 - 1);
      *(_OWORD *)(v14 - 20) = v15;
      v14 -= 20;
      v5 -= 20;
    }
    while (v5 != v8);
    char v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[20 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

uint64_t sub_21B9142CC(uint64_t a1, unint64_t a2)
{
  size_t v7 = &v8;
  unint64_t v8 = 0;
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 == -1) {
    sub_21B84C734();
  }
  unint64_t v9 = &v7;
  ((void (*)(unint64_t ***, uint64_t))off_26CB9E8B8[v2])(&v9, a1);
  if (v8 <= a2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 129, (uint64_t)"i < Size()", 10, (uint64_t)"Index is larger than descriptors count", 38, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5)
  {
    if (v5 != 1)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 135, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    if (*(void *)a1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      return 64;
    }
LABEL_11:
    abort();
  }
  return 0;
}

uint64_t sub_21B91442C(uint64_t a1, unint64_t a2)
{
  size_t v7 = &v8;
  unint64_t v8 = 0;
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 == -1) {
    sub_21B84C734();
  }
  unint64_t v9 = &v7;
  ((void (*)(unint64_t ***, uint64_t))off_26CB9E8B8[v2])(&v9, a1);
  if (v8 <= a2
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 141, (uint64_t)"i < Size()", 10, (uint64_t)"Index is larger than descriptors count", 38, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 != 3)
  {
    if (v5 != 2)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 147, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    if (*(void *)a1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      return 64;
    }
LABEL_13:
    abort();
  }
  if (!*(void *)a1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_13;
  }
  return 128;
}

uint64_t sub_21B9145D4(char **a1, uint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 10);
  if (v4)
  {
    if (v4 != *(_DWORD *)(a2 + 40) || a1[4] != *(char **)(a2 + 32)) {
      return 0;
    }
    int v5 = *((_DWORD *)a1 + 6);
    switch(v5)
    {
      case 3:
        if (*(_DWORD *)(a2 + 24) == 3)
        {
          unint64_t v11 = *(_OWORD **)a2;
          unint64_t v12 = *(_OWORD **)(a2 + 8);
          if (*(_OWORD **)a2 != v12)
          {
            float32x4_t v13 = a1[1];
            do
            {
              unint64_t v15 = (unint64_t)a1[2];
              if ((unint64_t)v13 < v15)
              {
                memcpy(v13, v11, 0x200uLL);
                float32x4_t v14 = v13 + 512;
              }
              else
              {
                float32x4_t v16 = *a1;
                uint64_t v17 = (v13 - *a1) >> 9;
                unint64_t v18 = v17 + 1;
                if ((unint64_t)(v17 + 1) >> 55) {
                  sub_21B846300();
                }
                uint64_t v19 = v15 - (void)v16;
                if (v19 >> 8 > v18) {
                  unint64_t v18 = v19 >> 8;
                }
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFE00) {
                  unint64_t v20 = 0x7FFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v20 = v18;
                }
                if (v20)
                {
                  if (v20 >> 55) {
                    sub_21B845A48();
                  }
                  long long v21 = (char *)operator new(v20 << 9);
                }
                else
                {
                  long long v21 = 0;
                }
                size_t v22 = &v21[512 * v17];
                memcpy(v22, v11, 0x200uLL);
                size_t v23 = v22;
                if (v13 != v16)
                {
                  do
                  {
                    v13 -= 512;
                    v23 -= 512;
                    memcpy(v23, v13, 0x200uLL);
                  }
                  while (v13 != v16);
                  float32x4_t v13 = *a1;
                }
                uint16x4_t v24 = &v21[512 * v20];
                float32x4_t v14 = v22 + 512;
                *a1 = v23;
                a1[1] = v22 + 512;
                a1[2] = v24;
                if (v13) {
                  operator delete(v13);
                }
              }
              a1[1] = v14;
              v11 += 32;
              float32x4_t v13 = v14;
            }
            while (v11 != v12);
          }
          return 1;
        }
        break;
      case 2:
        if (*(_DWORD *)(a2 + 24) == 2)
        {
          long long v25 = *(_OWORD **)a2;
          float v26 = *(_OWORD **)(a2 + 8);
          for (unsigned int i = a1; v25 != v26; v25 += 16)
            sub_21B8F37C4(&i, v25);
          return 1;
        }
        break;
      case 1:
        if (*(_DWORD *)(a2 + 24) == 1)
        {
          long long v6 = *(_OWORD **)a2;
          size_t v7 = *(_OWORD **)(a2 + 8);
          for (unsigned int i = a1; v6 != v7; v6 += 4)
            sub_21B8F3980(&i, v6);
          return 1;
        }
        break;
      default:
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 175, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_21B984AC4);
        abort();
    }
    sub_21B84C734();
  }
  uint64_t v9 = *((unsigned int *)a1 + 6);
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v9 == -1)
  {
    if (v10 == -1) {
      goto LABEL_17;
    }
LABEL_16:
    unsigned int i = a1;
    ((void (*)(char ***, char **, uint64_t))off_26CB9E918[v10])(&i, a1, a2);
    goto LABEL_17;
  }
  if (v10 != -1) {
    goto LABEL_16;
  }
  ((void (*)(char ***, char **))off_26CB9E8F8[v9])(&i, a1);
  *((_DWORD *)a1 + 6) = -1;
LABEL_17:
  a1[4] = *(char **)(a2 + 32);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  return 1;
}

void ***sub_21B9148B4(void ***result)
{
  ***BOOL result = 0;
  return result;
}

void ***sub_21B9148C4(void ***result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1]) {
    uint64_t v2 = 0;
  }
  ***BOOL result = v2;
  return result;
}

void ***sub_21B9148E0(void ***result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1]) {
    uint64_t v2 = 0;
  }
  ***BOOL result = v2;
  return result;
}

void ***sub_21B9148FC(void ***result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1]) {
    uint64_t v2 = 0;
  }
  ***BOOL result = v2;
  return result;
}

void ***sub_21B914918(void ***result, void *a2)
{
  ***BOOL result = a2[1] - *a2;
  return result;
}

uint64_t ***sub_21B914930(uint64_t ***result, void *a2)
{
  ***BOOL result = (uint64_t)(a2[1] - *a2) >> 6;
  return result;
}

uint64_t ***sub_21B91494C(uint64_t ***result, void *a2)
{
  ***BOOL result = (uint64_t)(a2[1] - *a2) >> 8;
  return result;
}

uint64_t ***sub_21B914968(uint64_t ***result, void *a2)
{
  ***BOOL result = (uint64_t)(a2[1] - *a2) >> 9;
  return result;
}

BOOL ***sub_21B914984(BOOL ***result, void *a2)
{
  ***BOOL result = *a2 == a2[1];
  return result;
}

BOOL ***sub_21B9149A0(BOOL ***result, void *a2)
{
  ***BOOL result = *a2 == a2[1];
  return result;
}

BOOL ***sub_21B9149BC(BOOL ***result, void *a2)
{
  ***BOOL result = *a2 == a2[1];
  return result;
}

BOOL ***sub_21B9149D8(BOOL ***result, void *a2)
{
  ***BOOL result = *a2 == a2[1];
  return result;
}

__n128 sub_21B9149F4(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26CB9E8F8[v5])(&v9, v4);
LABEL_7:
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return result;
  }
  size_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B914AC0(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26CB9E8F8[v5])(&v9, v4);
LABEL_7:
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  size_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B914B94(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26CB9E8F8[v5])(&v9, v4);
LABEL_7:
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  size_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21B914C68(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, uint64_t))off_26CB9E8F8[v5])(&v9, v4);
LABEL_7:
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 3;
    return result;
  }
  size_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void sub_21B914D3C(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    sub_21B917780((uint64_t)&v217, "Needs to be initialized with at least one config.");
    char v225 = 1;
    sub_21B916E2C(0x16u, &v217, (uint64_t)&__p);
    *(_OWORD *)a3 = __p;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    if (v234)
    {
      *(unsigned char *)(a3 + 40) = 0;
      int v69 = v228;
      if ((_BYTE)v228)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v227;
        *(void **)(a3 + 32) = v227[2];
        memset(v227, 0, sizeof(v227));
        *(unsigned char *)(a3 + 40) = 1;
      }
      *(unsigned char *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 104) = 0;
      if (v233)
      {
        uint64_t v70 = v230;
        *(void *)(a3 + 64) = *(void *)&v229[16];
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v229;
        *(void *)uint64_t v229 = 0;
        *(void *)&v229[8] = 0;
        *(void *)(a3 + 72) = v70;
        *(_OWORD *)(a3 + 80) = v231;
        *(void *)(a3 + 96) = v232;
        *(void *)&v229[16] = 0;
        long long v231 = 0uLL;
        uint64_t v232 = 0;
        *(unsigned char *)(a3 + 104) = 1;
      }
      *(unsigned char *)(a3 + 112) = 1;
      *(unsigned char *)(a3 + 120) = 0;
      if (v69 && SHIBYTE(v227[2]) < 0) {
        operator delete(v227[0]);
      }
      if (!v225) {
        return;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 120) = 0;
      if (!v225) {
        return;
      }
    }
    if (v224)
    {
      if (v223 < 0) {
        operator delete(v222);
      }
      if (v221 < 0) {
        operator delete(v220);
      }
    }
    if (v219 && v218 < 0)
    {
      unint64_t v133 = (char *)v217;
      goto LABEL_517;
    }
    return;
  }
  v240 = 0;
  long long v241 = 0uLL;
  sub_21B8465EC((uint64_t)&v240, a2);
  unint64_t v194 = a2;
  uint64_t v6 = 5 * a2;
  uint64_t v197 = &a1[v6];
  size_t v7 = a1;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      sub_21B846188(&__p, *(void **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v9 = *v7;
      v227[0] = *((void **)v7 + 2);
      long long __p = v9;
    }
    uint64_t v10 = (_OWORD *)v241;
    if ((unint64_t)v241 < *((void *)&v241 + 1))
    {
      long long v8 = __p;
      *(void **)(v241 + 16) = v227[0];
      *uint64_t v10 = v8;
      *(void *)&long long v241 = (char *)v10 + 24;
    }
    else
    {
      *(void *)&long long v241 = sub_21B84679C((void **)&v240, (uint64_t)&__p);
      if (SHIBYTE(v227[0]) < 0) {
        operator delete((void *)__p);
      }
    }
    v7 += 5;
    v6 -= 5;
  }
  while (v6 * 16);
  unint64_t v11 = (unint64_t)v240;
  unint64_t v235 = (unint64_t)v240;
  long long v236 = v241;
  long long __p = 0u;
  *(_OWORD *)int64_t v227 = 0u;
  LODWORD(v227[2]) = 1065353216;
  uint64_t v195 = (char *)v241;
  uint64_t v193 = a3;
  if (v240 != (char *)v241)
  {
    v192 = v240;
    unint64_t v12 = v240;
    while (1)
    {
      int v15 = v12[23];
      if (v15 >= 0) {
        float32x4_t v16 = (uint64_t *)v12;
      }
      else {
        float32x4_t v16 = *(uint64_t **)v12;
      }
      if (v15 >= 0) {
        unint64_t v17 = v12[23];
      }
      else {
        unint64_t v17 = *((void *)v12 + 1);
      }
      unint64_t v18 = sub_21B849E2C((uint64_t)&v240, v16, v17);
      unint64_t v19 = v18;
      unint64_t v20 = *((void *)&__p + 1);
      if (*((void *)&__p + 1))
      {
        uint8x8_t v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          unint64_t v11 = v18;
          if (v18 >= *((void *)&__p + 1)) {
            unint64_t v11 = v18 % *((void *)&__p + 1);
          }
        }
        else
        {
          unint64_t v11 = (*((void *)&__p + 1) - 1) & v18;
        }
        size_t v22 = *(uint64_t ***)(__p + 8 * v11);
        if (v22)
        {
          size_t v23 = *v22;
          if (*v22)
          {
            char v24 = v12[23];
            if (v24 >= 0) {
              uint64_t v25 = v12[23];
            }
            else {
              uint64_t v25 = *((void *)v12 + 1);
            }
            if (v24 >= 0) {
              float v26 = v12;
            }
            else {
              float v26 = *(char **)v12;
            }
            if (v21.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v32 = v23[1];
                if (v32 == v19)
                {
                  uint64_t v33 = *((unsigned __int8 *)v23 + 39);
                  if ((v33 & 0x80u) == 0) {
                    uint64_t v34 = *((unsigned __int8 *)v23 + 39);
                  }
                  else {
                    uint64_t v34 = v23[3];
                  }
                  if (v34 == v25)
                  {
                    float32x4_t v35 = (const void **)(v23 + 2);
                    if ((v33 & 0x80) != 0)
                    {
                      if (!memcmp(*v35, v26, v23[3])) {
                        goto LABEL_16;
                      }
                    }
                    else
                    {
                      if (!*((unsigned char *)v23 + 39)) {
                        goto LABEL_16;
                      }
                      int v36 = v26;
                      while (*(unsigned __int8 *)v35 == *v36)
                      {
                        float32x4_t v35 = (const void **)((char *)v35 + 1);
                        ++v36;
                        if (!--v33) {
                          goto LABEL_16;
                        }
                      }
                    }
                  }
                }
                else if ((v32 & (v20 - 1)) != v11)
                {
                  goto LABEL_70;
                }
                size_t v23 = (uint64_t *)*v23;
                if (!v23) {
                  goto LABEL_70;
                }
              }
            }
            do
            {
              unint64_t v27 = v23[1];
              if (v27 == v19)
              {
                uint64_t v28 = *((unsigned __int8 *)v23 + 39);
                if ((v28 & 0x80u) == 0) {
                  uint64_t v29 = *((unsigned __int8 *)v23 + 39);
                }
                else {
                  uint64_t v29 = v23[3];
                }
                if (v29 == v25)
                {
                  size_t v30 = (const void **)(v23 + 2);
                  if ((v28 & 0x80) != 0)
                  {
                    if (!memcmp(*v30, v26, v23[3])) {
                      goto LABEL_16;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v23 + 39)) {
                      goto LABEL_16;
                    }
                    size_t v31 = v26;
                    while (*(unsigned __int8 *)v30 == *v31)
                    {
                      size_t v30 = (const void **)((char *)v30 + 1);
                      ++v31;
                      if (!--v28) {
                        goto LABEL_16;
                      }
                    }
                  }
                }
              }
              else
              {
                if (v27 >= v20) {
                  v27 %= v20;
                }
                if (v27 != v11) {
                  break;
                }
              }
              size_t v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
        }
      }
LABEL_70:
      int v37 = operator new(0x28uLL);
      v240 = (char *)v37;
      *(void *)&long long v241 = v227;
      BYTE8(v241) = 0;
      void *v37 = 0;
      v37[1] = v19;
      unsigned int v38 = v37 + 2;
      if (v12[23] < 0)
      {
        sub_21B846188(v38, *(void **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v39 = *(_OWORD *)v12;
        v38[2] = *((void *)v12 + 2);
        *(_OWORD *)unsigned int v38 = v39;
      }
      BYTE8(v241) = 1;
      float v40 = (float)((unint64_t)v227[1] + 1);
      if (!v20 || (float)(*(float *)&v227[2] * (float)v20) < v40) {
        break;
      }
      float32x4_t v13 = *(void ***)(__p + 8 * v11);
      float32x4_t v14 = (void **)v240;
      if (v13) {
        goto LABEL_14;
      }
LABEL_76:
      *float32x4_t v14 = v227[0];
      v227[0] = v240;
      *(void *)(__p + 8 * v11) = v227;
      if (*(void *)v240)
      {
        unint64_t v41 = *(void *)(*(void *)v240 + 8);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v41 >= v20) {
            v41 %= v20;
          }
        }
        else
        {
          v41 &= v20 - 1;
        }
        *(void *)(__p + 8 * v41) = v240;
      }
LABEL_15:
      ++v227[1];
LABEL_16:
      v12 += 24;
      if (v12 == v195)
      {
        float32x4_t v65 = (void **)v227[0];
        simd_float4 v64 = v227[1];
        a3 = v193;
        if (v227[0])
        {
          do
          {
            uint64_t v68 = (void **)*v65;
            if (*((char *)v65 + 39) < 0) {
              operator delete(v65[2]);
            }
            operator delete(v65);
            float32x4_t v65 = v68;
          }
          while (v68);
        }
        BOOL v66 = (void *)__p;
        *(void *)&long long __p = 0;
        if (v66) {
          operator delete(v66);
        }
        unint64_t v11 = (unint64_t)v192;
        if (!v192)
        {
          unint64_t v71 = v194;
          goto LABEL_168;
        }
        int32x4_t v67 = v195;
        do
        {
          if (*(v67 - 1) < 0) {
            operator delete(*((void **)v67 - 3));
          }
          v67 -= 24;
        }
        while (v67 != v192);
        unint64_t v71 = v194;
        goto LABEL_166;
      }
    }
    BOOL v42 = (v20 & (v20 - 1)) != 0;
    if (v20 < 3) {
      BOOL v42 = 1;
    }
    unint64_t v43 = v42 | (2 * v20);
    unint64_t v44 = vcvtps_u32_f32(v40 / *(float *)&v227[2]);
    if (v43 <= v44) {
      size_t prime = v44;
    }
    else {
      size_t prime = v43;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v20 = *((void *)&__p + 1);
    if (prime <= *((void *)&__p + 1))
    {
      if (prime >= *((void *)&__p + 1)) {
        goto LABEL_128;
      }
      unint64_t v56 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
      if (*((void *)&__p + 1) < 3uLL
        || (uint8x8_t v57 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
      {
        unint64_t v56 = std::__next_prime(v56);
      }
      else
      {
        uint64_t v58 = 1 << -(char)__clz(v56 - 1);
        if (v56 >= 2) {
          unint64_t v56 = v58;
        }
      }
      if (prime <= v56) {
        size_t prime = v56;
      }
      if (prime >= v20)
      {
        unint64_t v20 = *((void *)&__p + 1);
        uint64_t v61 = *((void *)&__p + 1) - 1;
        if ((*((void *)&__p + 1) & (*((void *)&__p + 1) - 1)) != 0) {
          goto LABEL_138;
        }
        goto LABEL_13;
      }
      if (!prime)
      {
        float32x4_t v60 = (void *)__p;
        *(void *)&long long __p = 0;
        if (v60) {
          operator delete(v60);
        }
        unint64_t v20 = 0;
        *((void *)&__p + 1) = 0;
        uint64_t v61 = -1;
        goto LABEL_13;
      }
    }
    if (prime >> 61) {
      sub_21B845A48();
    }
    uint16x4_t v46 = operator new(8 * prime);
    float32x4_t v47 = (void *)__p;
    *(void *)&long long __p = v46;
    if (v47) {
      operator delete(v47);
    }
    uint64_t v48 = 0;
    *((void *)&__p + 1) = prime;
    do
      *(void *)(__p + 8 * v48++) = 0;
    while (prime != v48);
    int32x4_t v49 = (void **)v227[0];
    if (!v227[0])
    {
LABEL_137:
      unint64_t v20 = prime;
      uint64_t v61 = prime - 1;
      if ((prime & (prime - 1)) != 0)
      {
LABEL_138:
        if (v19 >= v20)
        {
          unint64_t v11 = v19 % v20;
          float32x4_t v13 = *(void ***)(__p + 8 * (v19 % v20));
          float32x4_t v14 = (void **)v240;
          if (!v13) {
            goto LABEL_76;
          }
        }
        else
        {
          unint64_t v11 = v19;
          float32x4_t v13 = *(void ***)(__p + 8 * v19);
          float32x4_t v14 = (void **)v240;
          if (!v13) {
            goto LABEL_76;
          }
        }
LABEL_14:
        *float32x4_t v14 = *v13;
        *float32x4_t v13 = v240;
        goto LABEL_15;
      }
LABEL_13:
      unint64_t v11 = v61 & v19;
      float32x4_t v13 = *(void ***)(__p + 8 * (v61 & v19));
      float32x4_t v14 = (void **)v240;
      if (v13) {
        goto LABEL_14;
      }
      goto LABEL_76;
    }
    size_t v50 = *((void *)v227[0] + 1);
    size_t v51 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v52 = v50 & v51;
      *(void *)(__p + 8 * v52) = v227;
      for (unsigned int i = *v49; *v49; unsigned int i = *v49)
      {
        size_t v54 = i[1] & v51;
        if (v54 == v52)
        {
          int32x4_t v49 = (void **)i;
        }
        else if (*(void *)(__p + 8 * v54))
        {
          *int32x4_t v49 = (void *)*i;
          uint64_t v55 = 8 * v54;
          *unsigned int i = **(void **)(__p + v55);
          **(void **)(__p + v55) = i;
        }
        else
        {
          *(void *)(__p + 8 * v54) = v49;
          int32x4_t v49 = (void **)i;
          size_t v52 = v54;
        }
      }
      goto LABEL_137;
    }
    if (v50 < prime)
    {
      *(void *)(__p + 8 * v50) = v227;
      int v59 = *v49;
      if (*v49) {
        goto LABEL_132;
      }
      goto LABEL_127;
    }
    v50 %= prime;
    *(void *)(__p + 8 * v50) = v227;
    int v59 = *v49;
    if (!*v49)
    {
LABEL_127:
      unint64_t v20 = prime;
LABEL_128:
      uint64_t v61 = v20 - 1;
      if ((v20 & (v20 - 1)) != 0) {
        goto LABEL_138;
      }
      goto LABEL_13;
    }
    while (1)
    {
LABEL_132:
      size_t v63 = v59[1];
      if (v63 >= prime) {
        v63 %= prime;
      }
      if (v63 == v50) {
        goto LABEL_131;
      }
      if (*(void *)(__p + 8 * v63))
      {
        *int32x4_t v49 = (void *)*v59;
        uint64_t v62 = 8 * v63;
        *int v59 = **(void **)(__p + v62);
        **(void **)(__p + v62) = v59;
        int v59 = v49;
LABEL_131:
        int32x4_t v49 = (void **)v59;
        int v59 = (void *)*v59;
        if (!v59) {
          goto LABEL_137;
        }
      }
      else
      {
        *(void *)(__p + 8 * v63) = v49;
        int32x4_t v49 = (void **)v59;
        int v59 = (void *)*v59;
        size_t v50 = v63;
        if (!v59) {
          goto LABEL_137;
        }
      }
    }
  }
  simd_float4 v64 = 0;
  unint64_t v71 = v194;
  if (v240) {
LABEL_166:
  }
    operator delete((void *)v11);
LABEL_168:
  if (v64 == (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v195[-v11] >> 3)))
  {
    v240 = 0;
    long long v241 = 0uLL;
    if (v71 > 0x492492492492492) {
      sub_21B846300();
    }
    uint64_t v72 = (uint64_t)&v227[1];
    v240 = (char *)operator new(56 * v71);
    *(void *)&long long v241 = v240;
    *((void *)&v241 + 1) = &v240[56 * v71];
    unsigned int v73 = a1;
    while (1)
    {
      sub_21B8F28C8((uint64_t)&__p, (uint64_t)v73 + 24);
      char v74 = (char *)v241;
      if ((unint64_t)v241 < *((void *)&v241 + 1))
      {
        *(void *)long long v241 = 0;
        *((void *)v74 + 1) = 0;
        *((void *)v74 + 2) = 0;
        *(_OWORD *)char v74 = __p;
        *((void **)v74 + 2) = v227[0];
        long long __p = 0uLL;
        v227[0] = 0;
        v74[24] = 0;
        v74[48] = 0;
        if (v229[0])
        {
          *((void *)v74 + 3) = 0;
          *((void *)v74 + 4) = 0;
          *((void *)v74 + 5) = 0;
          *(_OWORD *)(v74 + 24) = *(_OWORD *)&v227[1];
          *((void *)v74 + 5) = v228;
          v227[1] = 0;
          v227[2] = 0;
          uint64_t v228 = 0;
          v74[48] = 1;
        }
        int32x4_t v75 = v74 + 56;
        goto LABEL_196;
      }
      int32x4_t v76 = v240;
      uint64_t v77 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v241 - (void)v240) >> 3);
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) > 0x492492492492492) {
        sub_21B846300();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 3) > v78) {
        unint64_t v78 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 3);
      }
      unint64_t v79 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 3)) >= 0x249249249249249
          ? 0x492492492492492
          : v78;
      if (v79)
      {
        if (v79 > 0x492492492492492) {
          sub_21B845A48();
        }
        uint64_t v80 = operator new(56 * v79);
      }
      else
      {
        uint64_t v80 = 0;
      }
      uint64_t v81 = (char *)&v80[7 * v77];
      *(_OWORD *)uint64_t v81 = __p;
      *((void **)v81 + 2) = v227[0];
      v227[0] = 0;
      long long __p = 0uLL;
      v81[24] = 0;
      v81[48] = 0;
      if (v229[0])
      {
        *((void *)v81 + 5) = 0;
        *(_OWORD *)(v81 + 24) = *(_OWORD *)&v227[1];
        v80[7 * v77 + 5] = v228;
        v227[2] = 0;
        uint64_t v228 = 0;
        v227[1] = 0;
        v81[48] = 1;
      }
      int32x4_t v75 = v81 + 56;
      if (v74 != v76) {
        break;
      }
      v240 = v81;
      *(void *)&long long v241 = v81 + 56;
      *((void *)&v241 + 1) = &v80[7 * v79];
      if (v74) {
        goto LABEL_195;
      }
LABEL_196:
      *(void *)&long long v241 = v75;
      if (v229[0])
      {
        uint64_t v86 = (void **)v227[1];
        if (v227[1])
        {
          uint64_t v87 = (void **)v227[2];
          uint64_t v88 = v227[1];
          if (v227[2] != v227[1])
          {
            do
            {
              if (*((char *)v87 - 1) < 0) {
                operator delete(*(v87 - 3));
              }
              v87 -= 3;
            }
            while (v87 != v86);
            uint64_t v88 = v227[1];
          }
          v227[2] = v86;
          operator delete(v88);
        }
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v73 += 5;
      if (v73 == v197)
      {
        char v96 = v240;
        unint64_t v235 = (unint64_t)v240;
        uint64_t v196 = (char *)v241;
        long long v236 = v241;
        long long v241 = 0uLL;
        v240 = 0;
        *(void *)&long long __p = &v240;
        sub_21B919344((void ***)&__p);
        long long __p = 0u;
        *(_OWORD *)int64_t v227 = 0u;
        LODWORD(v227[2]) = 1065353216;
        if (v96 == v196)
        {
          uint64_t v131 = 0;
          int v132 = v96;
          goto LABEL_349;
        }
        while (2)
        {
          while (1)
          {
            v240 = v96;
            *(void *)&long long v241 = v96 + 24;
            unint64_t v237 = 0;
            sub_21B8F2698((uint64_t *)&v237, (uint64_t)&v240);
            unint64_t v97 = v237;
            unint64_t v98 = *((void *)&__p + 1);
            if (!*((void *)&__p + 1)) {
              break;
            }
            uint8x8_t v99 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
            v99.i16[0] = vaddlv_u8(v99);
            if (v99.u32[0] > 1uLL)
            {
              uint64_t v72 = v237;
              if (v237 >= *((void *)&__p + 1)) {
                uint64_t v72 = v237 % *((void *)&__p + 1);
              }
            }
            else
            {
              uint64_t v72 = (*((void *)&__p + 1) - 1) & v237;
            }
            long long v100 = *(void **)(__p + 8 * v72);
            if (!v100) {
              break;
            }
            uint64_t v101 = (void *)*v100;
            if (!*v100) {
              break;
            }
            if (v99.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v103 = v101[1];
                if (v103 == v97)
                {
                  v240 = (char *)(v101 + 2);
                  *(void *)&long long v241 = v101 + 5;
                  unint64_t v237 = (unint64_t)v96;
                  v238 = v96 + 24;
                  if (sub_21B91727C((uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v237)) {
                    goto LABEL_235;
                  }
                }
                else if ((v103 & (v98 - 1)) != v72)
                {
                  goto LABEL_257;
                }
                uint64_t v101 = (void *)*v101;
                if (!v101) {
                  goto LABEL_257;
                }
              }
            }
            while (1)
            {
              unint64_t v102 = v101[1];
              if (v102 == v97) {
                break;
              }
              if (v102 >= v98) {
                v102 %= v98;
              }
              if (v102 != v72) {
                goto LABEL_257;
              }
LABEL_246:
              uint64_t v101 = (void *)*v101;
              if (!v101) {
                goto LABEL_257;
              }
            }
            v240 = (char *)(v101 + 2);
            *(void *)&long long v241 = v101 + 5;
            unint64_t v237 = (unint64_t)v96;
            v238 = v96 + 24;
            if (!sub_21B91727C((uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v237)) {
              goto LABEL_246;
            }
LABEL_235:
            v96 += 56;
            if (v96 == v196) {
              goto LABEL_329;
            }
          }
LABEL_257:
          int v104 = (char *)operator new(0x48uLL);
          v240 = v104;
          *(void *)&long long v241 = v227;
          BYTE8(v241) = 0;
          *(void *)int v104 = 0;
          *((void *)v104 + 1) = v97;
          sub_21B8F28C8((uint64_t)(v104 + 16), (uint64_t)v96);
          BYTE8(v241) = 1;
          float v105 = (float)((unint64_t)v227[1] + 1);
          if (v98 && (float)(*(float *)&v227[2] * (float)v98) >= v105)
          {
            char v106 = *(void ***)(__p + 8 * v72);
            int v107 = (void **)v240;
            if (v106) {
              goto LABEL_260;
            }
LABEL_309:
            *int v107 = v227[0];
            v227[0] = v240;
            *(void *)(__p + 8 * v72) = v227;
            if (*(void *)v240)
            {
              unint64_t v128 = *(void *)(*(void *)v240 + 8);
              if ((v98 & (v98 - 1)) != 0)
              {
                if (v128 >= v98) {
                  v128 %= v98;
                }
              }
              else
              {
                v128 &= v98 - 1;
              }
              *(void *)(__p + 8 * v128) = v240;
            }
LABEL_328:
            ++v227[1];
            v96 += 56;
            if (v96 == v196)
            {
LABEL_329:
              uint64_t v131 = v227[1];
              char v96 = (char *)v235;
              int v132 = (char *)v236;
LABEL_349:
              uint64_t v134 = 0x6DB6DB6DB6DB6DB7 * ((v132 - v96) >> 3);
              sub_21B919C68((uint64_t)&__p);
              *(void *)&long long __p = &v235;
              sub_21B919344((void ***)&__p);
              if (v131 != (void *)v134)
              {
                sub_21B917780((uint64_t)v199, "Config values can not be repeated.");
                char v207 = 1;
                sub_21B916E2C(0x16u, (long long *)v199, (uint64_t)&__p);
                *(_OWORD *)uint64_t v193 = __p;
                *(unsigned char *)(v193 + 16) = 0;
                *(unsigned char *)(v193 + 112) = 0;
                if (v234)
                {
                  *(unsigned char *)(v193 + 40) = 0;
                  int v159 = v228;
                  if ((_BYTE)v228)
                  {
                    *(_OWORD *)(v193 + 16) = *(_OWORD *)v227;
                    *(void **)(v193 + 32) = v227[2];
                    memset(v227, 0, sizeof(v227));
                    *(unsigned char *)(v193 + 40) = 1;
                  }
                  *(unsigned char *)(v193 + 48) = 0;
                  *(unsigned char *)(v193 + 104) = 0;
                  if (v233)
                  {
                    uint64_t v160 = v230;
                    *(void *)(v193 + 64) = *(void *)&v229[16];
                    *(_OWORD *)(v193 + 48) = *(_OWORD *)v229;
                    *(void *)uint64_t v229 = 0;
                    *(void *)&v229[8] = 0;
                    *(void *)(v193 + 72) = v160;
                    *(_OWORD *)(v193 + 80) = v231;
                    *(void *)(v193 + 96) = v232;
                    *(void *)&v229[16] = 0;
                    long long v231 = 0uLL;
                    uint64_t v232 = 0;
                    *(unsigned char *)(v193 + 104) = 1;
                  }
                  *(unsigned char *)(v193 + 112) = 1;
                  *(unsigned char *)(v193 + 120) = 0;
                  if (v159 && SHIBYTE(v227[2]) < 0) {
                    operator delete(v227[0]);
                  }
                }
                else
                {
                  *(unsigned char *)(v193 + 120) = 0;
                }
                if (v207)
                {
                  if (v206)
                  {
                    if (v205 < 0) {
                      operator delete(v204);
                    }
                    if (v203 < 0) {
                      operator delete(v202);
                    }
                  }
                  if (v201 && v200 < 0)
                  {
                    unint64_t v133 = (char *)v199[0];
LABEL_517:
                    operator delete(v133);
                  }
                }
                return;
              }
              v240 = 0;
              long long v241 = 0uLL;
              if (v194 > 0x333333333333333) {
                sub_21B846300();
              }
              v240 = (char *)operator new(80 * v194);
              *(void *)&long long v241 = v240;
              *((void *)&v241 + 1) = &v240[80 * v194];
              uint64_t v135 = (uint64_t)&v229[8];
              while (1)
              {
                sub_21B8F28C8((uint64_t)&__p, (uint64_t)a1 + 24);
                if (*((char *)a1 + 23) < 0)
                {
                  sub_21B846188(&v229[8], *(void **)a1, *((void *)a1 + 1));
                }
                else
                {
                  long long v136 = *a1;
                  uint64_t v230 = *((void *)a1 + 2);
                  *(_OWORD *)&v229[8] = v136;
                }
                BOOL v137 = (char *)v241;
                if ((unint64_t)v241 < *((void *)&v241 + 1))
                {
                  *(void *)long long v241 = 0;
                  *((void *)v137 + 1) = 0;
                  *((void *)v137 + 2) = 0;
                  *(_OWORD *)BOOL v137 = __p;
                  *((void **)v137 + 2) = v227[0];
                  long long __p = 0uLL;
                  v227[0] = 0;
                  v137[24] = 0;
                  v137[48] = 0;
                  if (v229[0])
                  {
                    *((void *)v137 + 3) = 0;
                    *((void *)v137 + 4) = 0;
                    *((void *)v137 + 5) = 0;
                    *(_OWORD *)(v137 + 24) = *(_OWORD *)&v227[1];
                    *((void *)v137 + 5) = v228;
                    v227[1] = 0;
                    v227[2] = 0;
                    uint64_t v228 = 0;
                    v137[48] = 1;
                  }
                  long long v138 = *(_OWORD *)&v229[8];
                  *((void *)v137 + 9) = v230;
                  *(_OWORD *)(v137 + 56) = v138;
                  *(void *)&v229[16] = 0;
                  uint64_t v230 = 0;
                  *(void *)&v229[8] = 0;
                  *(void *)&long long v241 = v137 + 80;
                  if (!v229[0]) {
                    goto LABEL_407;
                  }
LABEL_399:
                  float32x4_t v156 = (void **)v227[1];
                  if (v227[1])
                  {
                    int32x2_t v157 = (void **)v227[2];
                    int64_t v158 = v227[1];
                    if (v227[2] != v227[1])
                    {
                      do
                      {
                        if (*((char *)v157 - 1) < 0) {
                          operator delete(*(v157 - 3));
                        }
                        v157 -= 3;
                      }
                      while (v157 != v156);
                      int64_t v158 = v227[1];
                    }
                    v227[2] = v156;
                    operator delete(v158);
                  }
                  goto LABEL_407;
                }
                v139 = v240;
                unint64_t v140 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v241 - (void)v240) >> 4) + 1;
                if (v140 > 0x333333333333333) {
                  sub_21B846300();
                }
                if (0x999999999999999ALL * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 4) > v140) {
                  unint64_t v140 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 4);
                }
                unint64_t v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v241 + 1) - (void)v240) >> 4) >= 0x199999999999999
                     ? 0x333333333333333
                     : v140;
                if (v141)
                {
                  if (v141 > 0x333333333333333) {
                    sub_21B845A48();
                  }
                  int v142 = (char *)operator new(80 * v141);
                }
                else
                {
                  int v142 = 0;
                }
                int v143 = &v142[16 * ((v137 - v139) >> 4)];
                *(_OWORD *)int v143 = __p;
                *((void **)v143 + 2) = v227[0];
                v227[0] = 0;
                long long __p = 0uLL;
                v143[24] = 0;
                v143[48] = 0;
                if (v229[0])
                {
                  *(_OWORD *)(v143 + 24) = *(_OWORD *)&v227[1];
                  *((void *)v143 + 5) = v228;
                  v227[2] = 0;
                  uint64_t v228 = 0;
                  v227[1] = 0;
                  v143[48] = 1;
                }
                int v144 = &v142[16 * ((v137 - v139) >> 4)];
                *(_OWORD *)(v144 + 56) = *(_OWORD *)&v229[8];
                *((void *)v144 + 9) = v230;
                *(void *)&v229[16] = 0;
                uint64_t v230 = 0;
                *(void *)&v229[8] = 0;
                int v145 = v143 + 80;
                if (v137 != v139) {
                  break;
                }
                v240 = &v142[16 * ((v137 - v139) >> 4)];
                *(void *)&long long v241 = v143 + 80;
                *((void *)&v241 + 1) = &v142[80 * v141];
                if (v137) {
                  goto LABEL_396;
                }
LABEL_397:
                *(void *)&long long v241 = v145;
                if (SHIBYTE(v230) < 0)
                {
                  operator delete(*(void **)&v229[8]);
                  if (v229[0]) {
                    goto LABEL_399;
                  }
                }
                else if (v229[0])
                {
                  goto LABEL_399;
                }
LABEL_407:
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                a1 += 5;
                if (a1 == v197)
                {
                  uint64_t v161 = (char *)v241;
                  long long __p = 0u;
                  *(_OWORD *)int64_t v227 = 0u;
                  LODWORD(v227[2]) = 1065353216;
                  uint64_t v198 = v240;
                  if (v240 == (char *)v241) {
                    goto LABEL_487;
                  }
                  char v162 = v240;
LABEL_424:
                  while (2)
                  {
                    v240 = v162;
                    *(void *)&long long v241 = v162 + 24;
                    unint64_t v235 = 0;
                    sub_21B8F2698((uint64_t *)&v235, (uint64_t)&v240);
                    unint64_t v163 = v235;
                    unint64_t v164 = *((void *)&__p + 1);
                    if (*((void *)&__p + 1))
                    {
                      uint8x8_t v165 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
                      v165.i16[0] = vaddlv_u8(v165);
                      if (v165.u32[0] > 1uLL)
                      {
                        uint64_t v135 = v235;
                        if (v235 >= *((void *)&__p + 1)) {
                          uint64_t v135 = v235 % *((void *)&__p + 1);
                        }
                      }
                      else
                      {
                        uint64_t v135 = (*((void *)&__p + 1) - 1) & v235;
                      }
                      unsigned int v166 = *(void **)(__p + 8 * v135);
                      if (v166)
                      {
                        int v167 = (void *)*v166;
                        if (*v166)
                        {
                          if (v165.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v169 = v167[1];
                              if (v169 == v163)
                              {
                                v240 = (char *)(v167 + 2);
                                *(void *)&long long v241 = v167 + 5;
                                unint64_t v235 = (unint64_t)v162;
                                *(void *)&long long v236 = v162 + 24;
                                if (sub_21B91727C((uint64_t)&v237, (uint64_t)&v240, (uint64_t)&v235)) {
                                  goto LABEL_423;
                                }
                              }
                              else if ((v169 & (v164 - 1)) != v135)
                              {
                                goto LABEL_445;
                              }
                              int v167 = (void *)*v167;
                              if (!v167) {
                                goto LABEL_445;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v168 = v167[1];
                            if (v168 == v163)
                            {
                              v240 = (char *)(v167 + 2);
                              *(void *)&long long v241 = v167 + 5;
                              unint64_t v235 = (unint64_t)v162;
                              *(void *)&long long v236 = v162 + 24;
                              if (sub_21B91727C((uint64_t)&v237, (uint64_t)&v240, (uint64_t)&v235))
                              {
LABEL_423:
                                v162 += 80;
                                if (v162 != v161) {
                                  goto LABEL_424;
                                }
LABEL_487:
                                *(unsigned char *)(sub_21B8F2178(v193, (uint64_t)&__p) + 120) = 1;
                                sub_21B8E5D7C((int)&__p, (void **)v227[0]);
                                unsigned int v186 = (void *)__p;
                                *(void *)&long long __p = 0;
                                if (v186) {
                                  operator delete(v186);
                                }
                                if (v198)
                                {
                                  if (v198 == v161)
                                  {
LABEL_491:
                                    unint64_t v133 = v198;
                                    goto LABEL_517;
                                  }
                                  while (2)
                                  {
                                    if (*(v161 - 1) < 0)
                                    {
                                      operator delete(*((void **)v161 - 3));
                                      if (!*(v161 - 32)) {
                                        goto LABEL_505;
                                      }
                                    }
                                    else if (!*(v161 - 32))
                                    {
                                      goto LABEL_505;
                                    }
                                    uint64_t v187 = *((void *)v161 - 7);
                                    if (v187)
                                    {
                                      uint64_t v188 = *((void *)v161 - 6);
                                      long long v189 = (void *)*((void *)v161 - 7);
                                      if (v188 != v187)
                                      {
                                        do
                                        {
                                          if (*(char *)(v188 - 1) < 0) {
                                            operator delete(*(void **)(v188 - 24));
                                          }
                                          v188 -= 24;
                                        }
                                        while (v188 != v187);
                                        long long v189 = (void *)*((void *)v161 - 7);
                                      }
                                      *((void *)v161 - 6) = v187;
                                      operator delete(v189);
                                    }
LABEL_505:
                                    int v190 = v161 - 80;
                                    int v191 = (void *)*((void *)v161 - 10);
                                    if (v191)
                                    {
                                      *((void *)v161 - 9) = v191;
                                      operator delete(v191);
                                    }
                                    v161 -= 80;
                                    if (v190 == v198) {
                                      goto LABEL_491;
                                    }
                                    continue;
                                  }
                                }
                                return;
                              }
                            }
                            else
                            {
                              if (v168 >= v164) {
                                v168 %= v164;
                              }
                              if (v168 != v135) {
                                break;
                              }
                            }
                            int v167 = (void *)*v167;
                          }
                          while (v167);
                        }
                      }
                    }
LABEL_445:
                    v170 = (char *)operator new(0x60uLL);
                    v240 = v170;
                    *(void *)&long long v241 = v227;
                    BYTE8(v241) = 0;
                    *(void *)v170 = 0;
                    *((void *)v170 + 1) = v163;
                    sub_21B8F28C8((uint64_t)(v170 + 16), (uint64_t)v162);
                    uint64_t v171 = v170 + 72;
                    if (v162[79] < 0)
                    {
                      sub_21B846188(v171, *((void **)v162 + 7), *((void *)v162 + 8));
                    }
                    else
                    {
                      long long v172 = *(_OWORD *)(v162 + 56);
                      *((void *)v170 + 11) = *((void *)v162 + 9);
                      *(_OWORD *)uint64_t v171 = v172;
                    }
                    BYTE8(v241) = 1;
                    float v173 = (float)((unint64_t)v227[1] + 1);
                    if (v164 && (float)(*(float *)&v227[2] * (float)v164) >= v173)
                    {
                      uint64_t v174 = *(char ***)(__p + 8 * v135);
                      uint64_t v175 = v240;
                      if (v174)
                      {
LABEL_451:
                        *(void *)uint64_t v175 = *v174;
                        unint64_t *v174 = v240;
                        goto LABEL_486;
                      }
                    }
                    else
                    {
                      BOOL v176 = (v164 & (v164 - 1)) != 0;
                      if (v164 < 3) {
                        BOOL v176 = 1;
                      }
                      unint64_t v177 = v176 | (2 * v164);
                      unint64_t v178 = vcvtps_u32_f32(v173 / *(float *)&v227[2]);
                      if (v177 <= v178) {
                        size_t v179 = v178;
                      }
                      else {
                        size_t v179 = v177;
                      }
                      if (v179 == 1)
                      {
                        size_t v179 = 2;
                      }
                      else if ((v179 & (v179 - 1)) != 0)
                      {
                        size_t v179 = std::__next_prime(v179);
                      }
                      size_t v180 = *((void *)&__p + 1);
                      if (v179 > *((void *)&__p + 1)) {
                        goto LABEL_462;
                      }
                      if (v179 < *((void *)&__p + 1))
                      {
                        unint64_t v181 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
                        if (*((void *)&__p + 1) < 3uLL
                          || (uint8x8_t v182 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)),
                              v182.i16[0] = vaddlv_u8(v182),
                              v182.u32[0] > 1uLL))
                        {
                          unint64_t v181 = std::__next_prime(v181);
                        }
                        else
                        {
                          uint64_t v183 = 1 << -(char)__clz(v181 - 1);
                          if (v181 >= 2) {
                            unint64_t v181 = v183;
                          }
                        }
                        if (v179 <= v181) {
                          size_t v179 = v181;
                        }
                        if (v179 < v180) {
LABEL_462:
                        }
                          sub_21B8491D4((uint64_t)&__p, v179);
                      }
                      unint64_t v164 = *((void *)&__p + 1);
                      uint64_t v184 = *((void *)&__p + 1) - 1;
                      if ((*((void *)&__p + 1) & (*((void *)&__p + 1) - 1)) != 0)
                      {
                        if (v163 >= *((void *)&__p + 1))
                        {
                          uint64_t v135 = v163 % *((void *)&__p + 1);
                          uint64_t v174 = *(char ***)(__p + 8 * (v163 % *((void *)&__p + 1)));
                          uint64_t v175 = v240;
                          if (v174) {
                            goto LABEL_451;
                          }
                        }
                        else
                        {
                          uint64_t v135 = v163;
                          uint64_t v174 = *(char ***)(__p + 8 * v163);
                          uint64_t v175 = v240;
                          if (v174) {
                            goto LABEL_451;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v135 = v184 & v163;
                        uint64_t v174 = *(char ***)(__p + 8 * (v184 & v163));
                        uint64_t v175 = v240;
                        if (v174) {
                          goto LABEL_451;
                        }
                      }
                    }
                    *(void **)uint64_t v175 = v227[0];
                    v227[0] = v240;
                    *(void *)(__p + 8 * v135) = v227;
                    if (*(void *)v240)
                    {
                      unint64_t v185 = *(void *)(*(void *)v240 + 8);
                      if ((v164 & (v164 - 1)) != 0)
                      {
                        if (v185 >= v164) {
                          v185 %= v164;
                        }
                      }
                      else
                      {
                        v185 &= v164 - 1;
                      }
                      *(void *)(__p + 8 * v185) = v240;
                    }
LABEL_486:
                    ++v227[1];
                    v162 += 80;
                    if (v162 != v161) {
                      continue;
                    }
                    goto LABEL_487;
                  }
                }
              }
              uint64_t v146 = 0;
              do
              {
                float v148 = &v143[v146];
                float v149 = &v137[v146];
                *((void *)v148 - 9) = 0;
                *((void *)v148 - 8) = 0;
                *((_OWORD *)v148 - 5) = *(_OWORD *)&v137[v146 - 80];
                *((void *)v148 - 8) = *(void *)&v137[v146 - 64];
                *((void *)v149 - 10) = 0;
                *((void *)v149 - 9) = 0;
                *((void *)v149 - 8) = 0;
                *(v148 - 56) = 0;
                *(v148 - 32) = 0;
                if (v137[v146 - 32])
                {
                  *((void *)v148 - 6) = 0;
                  *((void *)v148 - 5) = 0;
                  *(_OWORD *)(v148 - 56) = *(_OWORD *)(v149 - 56);
                  *((void *)v148 - 5) = *((void *)v149 - 5);
                  *((void *)v149 - 7) = 0;
                  *((void *)v149 - 6) = 0;
                  *((void *)v149 - 5) = 0;
                  *(v148 - 32) = 1;
                }
                long long v147 = *(_OWORD *)(v149 - 24);
                *((void *)v148 - 1) = *((void *)v149 - 1);
                *(_OWORD *)(v148 - 24) = v147;
                *((void *)v149 - 2) = 0;
                *((void *)v149 - 1) = 0;
                *((void *)v149 - 3) = 0;
                v146 -= 80;
              }
              while (&v137[v146] != v139);
              BOOL v137 = v240;
              int v150 = (void **)v241;
              v240 = &v143[v146];
              *(void *)&long long v241 = v143 + 80;
              *((void *)&v241 + 1) = &v142[80 * v141];
              if (v150 == (void **)v137)
              {
LABEL_395:
                if (!v137) {
                  goto LABEL_397;
                }
LABEL_396:
                operator delete(v137);
                goto LABEL_397;
              }
              while (1)
              {
                if (*((char *)v150 - 1) < 0)
                {
                  operator delete(*(v150 - 3));
                  if (*((unsigned char *)v150 - 32))
                  {
LABEL_385:
                    int v151 = (void **)*(v150 - 7);
                    if (v151)
                    {
                      uint64_t v152 = (void **)*(v150 - 6);
                      unint64_t v153 = *(v150 - 7);
                      if (v152 != v151)
                      {
                        do
                        {
                          if (*((char *)v152 - 1) < 0) {
                            operator delete(*(v152 - 3));
                          }
                          v152 -= 3;
                        }
                        while (v152 != v151);
                        unint64_t v153 = *(v150 - 7);
                      }
                      *(v150 - 6) = v151;
                      operator delete(v153);
                    }
                  }
                }
                else if (*((unsigned char *)v150 - 32))
                {
                  goto LABEL_385;
                }
                float32x4_t v154 = (char *)(v150 - 10);
                float32x4_t v155 = *(v150 - 10);
                if (v155)
                {
                  *(v150 - 9) = v155;
                  operator delete(v155);
                }
                v150 -= 10;
                if (v154 == v137) {
                  goto LABEL_395;
                }
              }
            }
            continue;
          }
          break;
        }
        BOOL v108 = (v98 & (v98 - 1)) != 0;
        if (v98 < 3) {
          BOOL v108 = 1;
        }
        unint64_t v109 = v108 | (2 * v98);
        unint64_t v110 = vcvtps_u32_f32(v105 / *(float *)&v227[2]);
        if (v109 <= v110) {
          size_t v111 = v110;
        }
        else {
          size_t v111 = v109;
        }
        if (v111 == 1)
        {
          size_t v111 = 2;
        }
        else if ((v111 & (v111 - 1)) != 0)
        {
          size_t v111 = std::__next_prime(v111);
        }
        unint64_t v98 = *((void *)&__p + 1);
        if (v111 <= *((void *)&__p + 1))
        {
          if (v111 >= *((void *)&__p + 1)) {
            goto LABEL_307;
          }
          unint64_t v122 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
          if (*((void *)&__p + 1) < 3uLL
            || (uint8x8_t v123 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)),
                v123.i16[0] = vaddlv_u8(v123),
                v123.u32[0] > 1uLL))
          {
            unint64_t v122 = std::__next_prime(v122);
          }
          else
          {
            uint64_t v124 = 1 << -(char)__clz(v122 - 1);
            if (v122 >= 2) {
              unint64_t v122 = v124;
            }
          }
          if (v111 <= v122) {
            size_t v111 = v122;
          }
          if (v111 < v98)
          {
            if (v111) {
              goto LABEL_271;
            }
            int v126 = (void *)__p;
            *(void *)&long long __p = 0;
            if (v126) {
              operator delete(v126);
            }
            unint64_t v98 = 0;
            *((void *)&__p + 1) = 0;
            uint64_t v127 = -1;
            goto LABEL_308;
          }
          unint64_t v98 = *((void *)&__p + 1);
          uint64_t v127 = *((void *)&__p + 1) - 1;
          if ((*((void *)&__p + 1) & (*((void *)&__p + 1) - 1)) == 0) {
            goto LABEL_308;
          }
          goto LABEL_320;
        }
LABEL_271:
        if (v111 >> 61) {
          sub_21B845A48();
        }
        float64x2_t v112 = operator new(8 * v111);
        uint64_t v113 = (void *)__p;
        *(void *)&long long __p = v112;
        if (v113) {
          operator delete(v113);
        }
        uint64_t v114 = 0;
        *((void *)&__p + 1) = v111;
        do
          *(void *)(__p + 8 * v114++) = 0;
        while (v111 != v114);
        uint64_t v115 = (void **)v227[0];
        if (!v227[0])
        {
LABEL_319:
          unint64_t v98 = v111;
          uint64_t v127 = v111 - 1;
          if ((v111 & (v111 - 1)) == 0) {
            goto LABEL_308;
          }
          goto LABEL_320;
        }
        size_t v116 = *((void *)v227[0] + 1);
        size_t v117 = v111 - 1;
        if ((v111 & (v111 - 1)) == 0)
        {
          size_t v118 = v116 & v117;
          *(void *)(__p + 8 * v118) = v227;
          for (uint64_t j = *v115; *v115; uint64_t j = *v115)
          {
            size_t v120 = j[1] & v117;
            if (v120 == v118)
            {
              uint64_t v115 = (void **)j;
            }
            else if (*(void *)(__p + 8 * v120))
            {
              *uint64_t v115 = (void *)*j;
              uint64_t v121 = 8 * v120;
              *uint64_t j = **(void **)(__p + v121);
              **(void **)(__p + v121) = j;
            }
            else
            {
              *(void *)(__p + 8 * v120) = v115;
              uint64_t v115 = (void **)j;
              size_t v118 = v120;
            }
          }
          goto LABEL_319;
        }
        if (v116 < v111)
        {
          *(void *)(__p + 8 * v116) = v227;
          int v125 = *v115;
          if (*v115) {
            goto LABEL_314;
          }
LABEL_306:
          unint64_t v98 = v111;
LABEL_307:
          uint64_t v127 = v98 - 1;
          if ((v98 & (v98 - 1)) == 0)
          {
LABEL_308:
            uint64_t v72 = v127 & v97;
            char v106 = *(void ***)(__p + 8 * (v127 & v97));
            int v107 = (void **)v240;
            if (!v106) {
              goto LABEL_309;
            }
            goto LABEL_260;
          }
LABEL_320:
          if (v97 >= v98)
          {
            uint64_t v72 = v97 % v98;
            char v106 = *(void ***)(__p + 8 * (v97 % v98));
            int v107 = (void **)v240;
            if (!v106) {
              goto LABEL_309;
            }
          }
          else
          {
            uint64_t v72 = v97;
            char v106 = *(void ***)(__p + 8 * v97);
            int v107 = (void **)v240;
            if (!v106) {
              goto LABEL_309;
            }
          }
LABEL_260:
          *int v107 = *v106;
          *char v106 = v240;
          goto LABEL_328;
        }
        v116 %= v111;
        *(void *)(__p + 8 * v116) = v227;
        int v125 = *v115;
        if (!*v115) {
          goto LABEL_306;
        }
        while (1)
        {
LABEL_314:
          size_t v130 = v125[1];
          if (v130 >= v111) {
            v130 %= v111;
          }
          if (v130 == v116) {
            goto LABEL_313;
          }
          if (*(void *)(__p + 8 * v130)) {
            break;
          }
          *(void *)(__p + 8 * v130) = v115;
          uint64_t v115 = (void **)v125;
          int v125 = (void *)*v125;
          size_t v116 = v130;
          if (!v125) {
            goto LABEL_319;
          }
        }
        *uint64_t v115 = (void *)*v125;
        uint64_t v129 = 8 * v130;
        *int v125 = **(void **)(__p + v129);
        **(void **)(__p + v129) = v125;
        int v125 = v115;
LABEL_313:
        uint64_t v115 = (void **)v125;
        int v125 = (void *)*v125;
        if (!v125) {
          goto LABEL_319;
        }
        goto LABEL_314;
      }
    }
    uint64_t v82 = 0;
    do
    {
      uint64_t v83 = &v81[v82];
      char v84 = &v74[v82];
      *((void *)v83 - 6) = 0;
      *((void *)v83 - 5) = 0;
      *(_OWORD *)(v83 - 56) = *(_OWORD *)&v74[v82 - 56];
      *((void *)v83 - 5) = *(void *)&v74[v82 - 40];
      *((void *)v84 - 7) = 0;
      *((void *)v84 - 6) = 0;
      *((void *)v84 - 5) = 0;
      *(v83 - 32) = 0;
      *(v83 - 8) = 0;
      if (v74[v82 - 8])
      {
        *((void *)v83 - 3) = 0;
        *((void *)v83 - 2) = 0;
        *((_OWORD *)v83 - 2) = *((_OWORD *)v84 - 2);
        *((void *)v83 - 2) = *((void *)v84 - 2);
        *((void *)v84 - 4) = 0;
        *((void *)v84 - 3) = 0;
        *((void *)v84 - 2) = 0;
        *(v83 - 8) = 1;
      }
      v82 -= 56;
    }
    while (&v74[v82] != v76);
    char v74 = v240;
    char v85 = (char *)v241;
    v240 = &v81[v82];
    *(void *)&long long v241 = v81 + 56;
    *((void *)&v241 + 1) = &v80[7 * v79];
    if (v85 == v74)
    {
      if (!v74) {
        goto LABEL_196;
      }
    }
    else
    {
      do
      {
        if (*(v85 - 8))
        {
          uint64_t v89 = *((void *)v85 - 4);
          if (v89)
          {
            uint64_t v90 = *((void *)v85 - 3);
            int v91 = (void *)*((void *)v85 - 4);
            if (v90 != v89)
            {
              do
              {
                if (*(char *)(v90 - 1) < 0) {
                  operator delete(*(void **)(v90 - 24));
                }
                v90 -= 24;
              }
              while (v90 != v89);
              int v91 = (void *)*((void *)v85 - 4);
            }
            *((void *)v85 - 3) = v89;
            operator delete(v91);
          }
        }
        unint64_t v92 = v85 - 56;
        int v93 = (void *)*((void *)v85 - 7);
        if (v93)
        {
          *((void *)v85 - 6) = v93;
          operator delete(v93);
        }
        v85 -= 56;
      }
      while (v92 != v74);
      if (!v74) {
        goto LABEL_196;
      }
    }
LABEL_195:
    operator delete(v74);
    goto LABEL_196;
  }
  sub_21B917780((uint64_t)&v208, "Config names can not be repeated.");
  char v216 = 1;
  sub_21B916E2C(0x16u, &v208, (uint64_t)&__p);
  *(_OWORD *)a3 = __p;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v234)
  {
    *(unsigned char *)(a3 + 40) = 0;
    int v94 = v228;
    if ((_BYTE)v228)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v227;
      *(void **)(a3 + 32) = v227[2];
      memset(v227, 0, sizeof(v227));
      *(unsigned char *)(a3 + 40) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v233)
    {
      uint64_t v95 = v230;
      *(void *)(a3 + 64) = *(void *)&v229[16];
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v229;
      *(void *)uint64_t v229 = 0;
      *(void *)&v229[8] = 0;
      *(void *)(a3 + 72) = v95;
      *(_OWORD *)(a3 + 80) = v231;
      *(void *)(a3 + 96) = v232;
      *(void *)&v229[16] = 0;
      long long v231 = 0uLL;
      uint64_t v232 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    *(unsigned char *)(a3 + 120) = 0;
    if (v94 && SHIBYTE(v227[2]) < 0) {
      operator delete(v227[0]);
    }
    if (!v216) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 120) = 0;
    if (!v216) {
      return;
    }
  }
  if (v215)
  {
    if (v214 < 0) {
      operator delete(v213);
    }
    if (v212 < 0) {
      operator delete(v211);
    }
  }
  if (v210 && v209 < 0)
  {
    unint64_t v133 = (char *)v208;
    goto LABEL_517;
  }
}

void sub_21B916AB4(void *a1)
{
  sub_21B917038((void **)(v1 - 120));
  sub_21B83DE50(a1);
}

void sub_21B916CE0(void *a1)
{
  sub_21B83A3DC((void **)(v1 - 120));
  sub_21B83DE50(a1);
}

void sub_21B916D8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  sub_21B83A3DC((void **)(v60 - 120));
  sub_21B83DE50(a1);
}

void sub_21B916E2C(unsigned int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_21B91758C(v7, a2);
  sub_21B91742C((uint64_t)&v16, a1, (long long *)v7);
  *(_OWORD *)a3 = v16;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v26)
  {
    *(unsigned char *)(a3 + 40) = 0;
    int v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(void *)(a3 + 32) = v18;
      uint64_t v18 = 0;
      long long __p = 0uLL;
      *(unsigned char *)(a3 + 40) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v25)
    {
      uint64_t v6 = v22;
      *(void *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      long long v20 = 0uLL;
      *(void *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(void *)(a3 + 96) = v24;
      uint64_t v21 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  if (v15)
  {
    if (!v14) {
      goto LABEL_13;
    }
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9) {
          return;
        }
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9) {
      return;
    }
LABEL_14:
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_21B916F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B916FA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 96)) {
    return a1;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(unsigned char *)(a1 + 24)) {
        return a1;
      }
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0) {
      goto LABEL_9;
    }
  }
LABEL_5:
  if (!*(unsigned char *)(a1 + 24)) {
    return a1;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void **sub_21B917038(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_20:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((unsigned char *)v3 - 32))
        {
LABEL_9:
          int v5 = (void **)*(v3 - 7);
          if (v5)
          {
            uint64_t v6 = (void **)*(v3 - 6);
            size_t v7 = *(v3 - 7);
            if (v6 != v5)
            {
              do
              {
                if (*((char *)v6 - 1) < 0) {
                  operator delete(*(v6 - 3));
                }
                v6 -= 3;
              }
              while (v6 != v5);
              size_t v7 = *(v3 - 7);
            }
            *(v3 - 6) = v5;
            operator delete(v7);
          }
        }
      }
      else if (*((unsigned char *)v3 - 32))
      {
        goto LABEL_9;
      }
      char v8 = v3 - 10;
      char v9 = *(v3 - 10);
      if (v9)
      {
        *(v3 - 9) = v9;
        operator delete(v9);
      }
      v3 -= 10;
      if (v8 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_20;
      }
    }
  }
  return a1;
}

double sub_21B917124@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 24);
  __n128 v14 = 0uLL;
  char v13 = 0;
  sub_21B8465EC((uint64_t)&v13, v4);
  for (unsigned int i = *(uint64_t **)(a1 + 16); i; unsigned int i = (uint64_t *)*i)
  {
    if (*((char *)i + 95) < 0)
    {
      sub_21B846188(__p, (void *)i[9], i[10]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(i + 9);
      uint64_t v16 = i[11];
    }
    unint64_t v12 = (_OWORD *)v14.n128_u64[0];
    if (v14.n128_u64[0] < v14.n128_u64[1])
    {
      long long v11 = *(_OWORD *)__p;
      *(void *)(v14.n128_u64[0] + 16) = v16;
      *unint64_t v12 = v11;
      v14.n128_u64[0] = (unint64_t)v12 + 24;
    }
    else
    {
      v14.n128_u64[0] = (unint64_t)sub_21B84679C(&v13, (uint64_t)__p);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  uint64_t v6 = v13;
  __n128 v7 = v14;
  *(__n128 *)(a2 + 8) = v14;
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.n128_u64[0] - (void)v6) >> 3));
  *(void *)a2 = v6;
  if ((void *)v7.n128_u64[0] == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  return sub_21B9178AC((unint64_t)v6, (const void **)v7.n128_u64[0], (uint64_t)__p, v9, 1, v7);
}

void sub_21B91722C(_Unwind_Exception *a1)
{
  sub_21B83A3DC(v1);
  _Unwind_Resume(a1);
}

void sub_21B917240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B83A3DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B917258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_21B83A3DC(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_21B91727C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = **(char ***)a2;
  long long v3 = *(char **)(*(void *)a2 + 8);
  int v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(void *)(*(void *)a3 + 8) - (void)v5) {
    return 0;
  }
  if (v4 != v3)
  {
    while (*(_DWORD *)v4 == *v5
         && *((_DWORD *)v4 + 1) == v5[1]
         && *((_DWORD *)v4 + 2) == v5[2]
         && *((_DWORD *)v4 + 3) == v5[3]
         && *((_DWORD *)v4 + 4) == v5[4])
    {
      v4 += 20;
      v5 += 5;
      if (v4 == v3) {
        goto LABEL_9;
      }
    }
    return 0;
  }
LABEL_9:
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  __n128 v7 = *(unsigned __int8 ****)(a3 + 8);
  if (*((unsigned char *)v6 + 24)) {
    BOOL v8 = *((unsigned char *)v7 + 24) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v11 = *v6;
    uint64_t v10 = v6[1];
    unint64_t v12 = *v7;
    if (v10 - *v6 == (char *)v7[1] - (char *)*v7)
    {
      if (v11 == v10) {
        return 1;
      }
      while (1)
      {
        uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
        if ((v13 & 0x80u) == 0) {
          __n128 v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
        }
        else {
          __n128 v14 = *(unsigned __int8 **)(v11 + 8);
        }
        char v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
        int v16 = (char)v15;
        if ((char)v15 < 0) {
          char v15 = v12[1];
        }
        if (v14 != v15) {
          break;
        }
        if (v16 >= 0) {
          unint64_t v17 = (unsigned __int8 *)v12;
        }
        else {
          unint64_t v17 = *v12;
        }
        if ((v13 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v11, v17, *(void *)(v11 + 8))) {
            return 0;
          }
        }
        else if (*(unsigned char *)(v11 + 23))
        {
          uint64_t v18 = 0;
          while (*(unsigned __int8 *)(v11 + v18) == v17[v18])
          {
            if (v13 == ++v18) {
              goto LABEL_20;
            }
          }
          return 0;
        }
LABEL_20:
        v11 += 24;
        v12 += 3;
        BOOL result = 1;
        if (v11 == v10) {
          return result;
        }
      }
    }
    return 0;
  }
  return (*((unsigned char *)v6 + 24) != 0) == (*((unsigned char *)v7 + 24) != 0);
}

uint64_t sub_21B91742C(uint64_t a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = std::generic_category();
  sub_21B91758C(__dst, a3);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v18) {
    return a1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(void *)(a1 + 32) = v10;
    __dst[1] = 0;
    uint64_t v10 = 0;
    __dst[0] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (!v17)
  {
    *(unsigned char *)(a1 + 112) = 1;
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  uint64_t v7 = v14;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v16;
  __p[1] = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(v12[0]);
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (!v11) {
    return a1;
  }
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__dst[0]);
  return a1;
}

unsigned char *sub_21B91758C(unsigned char *__dst, long long *a2)
{
  *long long __dst = 0;
  __dst[96] = 0;
  if (*((unsigned char *)a2 + 96))
  {
    *long long __dst = 0;
    __dst[24] = 0;
    if (*((unsigned char *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v4 = *a2;
        *((void *)__dst + 2) = *((void *)a2 + 2);
        *(_OWORD *)long long __dst = v4;
      }
      __dst[24] = 1;
    }
    sub_21B917648(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_21B917618(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  sub_21B916FA8(v1);
  _Unwind_Resume(a1);
}

char *sub_21B917648(char *__dst, long long *a2)
{
  *long long __dst = 0;
  __dst[56] = 0;
  if (*((unsigned char *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_21B846188(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)long long __dst = v4;
    }
    *((void *)__dst + 3) = *((void *)a2 + 3);
    int v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_21B846188(v5, *((void **)a2 + 4), *((void *)a2 + 5));
    }
    else
    {
      long long v6 = a2[2];
      *((void *)__dst + 6) = *((void *)a2 + 6);
      *(_OWORD *)int v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_21B9176E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_21B91771C(v1);
    _Unwind_Resume(a1);
  }
  sub_21B91771C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B91771C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56)) {
    return a1;
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_21B917780(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v5);
    *((unsigned char *)p_dst + v5) = 0;
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v9 = (void *)__dst;
    sub_21B846188((unsigned char *)a1, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(unsigned char *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 88) = 0;
    operator delete(v9);
    return a1;
  }
  HIBYTE(v12) = v4;
  p_dst = &__dst;
  if (v4) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v12) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void sub_21B917898(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_21B9178AC(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t v278 = *MEMORY[0x263EF8340];
LABEL_2:
  __s2 = a2 - 3;
  uint64_t v272 = a2;
  v262 = a2 - 9;
  v264 = a2 - 6;
  unint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v12 = (uint64_t)a2 - j;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    if (v7 || !v6)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return a6.n128_f64[0];
        case 2uLL:
          uint64_t v121 = (__n128 *)*(a2 - 3);
          size_t v120 = (__n128 *)(a2 - 3);
          __int16 v119 = v121;
          int v122 = v120[1].n128_i8[7];
          if (v122 >= 0) {
            uint8x8_t v123 = v120;
          }
          else {
            uint8x8_t v123 = v119;
          }
          if (v122 >= 0) {
            size_t v124 = v120[1].n128_u8[7];
          }
          else {
            size_t v124 = v120->n128_u64[1];
          }
          int v125 = *(char *)(a1 + 23);
          if (v125 >= 0) {
            int v126 = (const void *)a1;
          }
          else {
            int v126 = *(const void **)a1;
          }
          if (v125 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v124) {
            size_t v128 = v124;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v123, v126, v128);
          if (v129)
          {
            if ((v129 & 0x80000000) == 0) {
              return a6.n128_f64[0];
            }
          }
          else if (v124 >= v127)
          {
            return a6.n128_f64[0];
          }
          __n128 v258 = *(__n128 *)a1;
          int64_t v275 = *(void *)(a1 + 16);
          __n128 v274 = v258;
          __n128 v259 = *v120;
          *(void *)(a1 + 16) = v120[1].n128_u64[0];
          *(__n128 *)a1 = v259;
          a6 = v274;
          v120[1].n128_u64[0] = v275;
          *size_t v120 = a6;
          break;
        case 3uLL:
          a6.n128_u64[0] = sub_21B918A10((const void **)a1, (const void **)(a1 + 24), __s2).n128_u64[0];
          return a6.n128_f64[0];
        case 4uLL:
          a6.n128_u64[0] = sub_21B918F84(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), __s2).n128_u64[0];
          return a6.n128_f64[0];
        case 5uLL:
          a6.n128_u64[0] = sub_21B919130(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), __s2).n128_u64[0];
          return a6.n128_f64[0];
        default:
          JUMPOUT(0);
      }
      return a6.n128_f64[0];
    }
    if (v12 <= 575)
    {
      if (a5)
      {
        if ((const void **)a1 == a2) {
          return a6.n128_f64[0];
        }
        size_t v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return a6.n128_f64[0];
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (1)
        {
          size_t v179 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v180 = v179[2].n128_i8[15];
          if (v180 >= 0) {
            unint64_t v181 = v130;
          }
          else {
            unint64_t v181 = (const void *)v179[1].n128_u64[1];
          }
          if (v180 >= 0) {
            size_t v182 = v179[2].n128_u8[15];
          }
          else {
            size_t v182 = v179[2].n128_u64[0];
          }
          int v183 = v179[1].n128_i8[7];
          if (v183 >= 0) {
            uint64_t v184 = v179;
          }
          else {
            uint64_t v184 = (__n128 *)v179->n128_u64[0];
          }
          if (v183 >= 0) {
            size_t v185 = v179[1].n128_u8[7];
          }
          else {
            size_t v185 = v179->n128_u64[1];
          }
          if (v185 >= v182) {
            size_t v186 = v182;
          }
          else {
            size_t v186 = v185;
          }
          int v187 = memcmp(v181, v184, v186);
          if (v187)
          {
            if ((v187 & 0x80000000) == 0) {
              goto LABEL_353;
            }
          }
          else if (v182 >= v185)
          {
            goto LABEL_353;
          }
          __n128 v188 = *(__n128 *)v132;
          int64_t v275 = *(void *)(v132 + 16);
          __n128 v274 = v188;
          if (v275 >= 0) {
            long long v189 = &v274;
          }
          else {
            long long v189 = (__n128 *)v188.n128_u64[0];
          }
          if (v275 >= 0) {
            unint64_t v190 = HIBYTE(v275);
          }
          else {
            unint64_t v190 = v188.n128_u64[1];
          }
          *(void *)(v132 + 16) = v179[1].n128_u64[0];
          *(__n128 *)unint64_t v132 = *v179;
          v179[1].n128_u8[7] = 0;
          v179->n128_u8[0] = 0;
          unint64_t v178 = (__n128 *)a1;
          if (v179 == (__n128 *)a1) {
            goto LABEL_352;
          }
          uint64_t v191 = v131;
          while (1)
          {
            uint64_t v192 = a1 + v191;
            int v193 = *(char *)(a1 + v191 - 1);
            unint64_t v194 = v193 >= 0 ? (const void *)(a1 + v191 - 24) : *(const void **)(a1 + v191 - 24);
            unint64_t v195 = v193 >= 0 ? *(unsigned __int8 *)(a1 + v191 - 1) : *(void *)(a1 + v191 - 16);
            size_t v196 = v195 >= v190 ? v190 : v195;
            int v197 = memcmp(v189, v194, v196);
            if (!v197) {
              break;
            }
            if ((v197 & 0x80000000) == 0)
            {
              unint64_t v178 = (__n128 *)(a1 + v191);
              goto LABEL_351;
            }
LABEL_382:
            size_t v179 = (__n128 *)((char *)v179 - 24);
            *(_OWORD *)uint64_t v192 = *(_OWORD *)(a1 + v191 - 24);
            *(void *)(v192 + 16) = *(void *)(a1 + v191 - 8);
            *(unsigned char *)(v192 - 1) = 0;
            *(unsigned char *)(v192 - 24) = 0;
            v191 -= 24;
            if (!v191)
            {
              unint64_t v178 = (__n128 *)a1;
              goto LABEL_351;
            }
          }
          if (v190 < v195) {
            goto LABEL_382;
          }
          unint64_t v178 = v179;
LABEL_351:
          a2 = v272;
LABEL_352:
          a6 = v274;
          v178[1].n128_u64[0] = v275;
          *unint64_t v178 = a6;
LABEL_353:
          size_t v130 = (const void *)(v132 + 24);
          v131 += 24;
          if ((const void **)(v132 + 24) == a2) {
            return a6.n128_f64[0];
          }
        }
      }
      if ((const void **)a1 == a2) {
        return a6.n128_f64[0];
      }
      char v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return a6.n128_f64[0];
      }
LABEL_475:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        unint64_t v245 = v240;
      }
      else {
        unint64_t v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if ((v248 & 0x80000000) == 0) {
          goto LABEL_474;
        }
      }
      else if (v243 >= v246)
      {
        goto LABEL_474;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v275 = *(void *)(a1 + 16);
      __n128 v274 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v275 >= 0) {
        int64_t v250 = &v274;
      }
      else {
        int64_t v250 = (__n128 *)v274.n128_u64[0];
      }
      if (v275 >= 0) {
        size_t v251 = HIBYTE(v275);
      }
      else {
        size_t v251 = v274.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if ((v257 & 0x80000000) == 0)
          {
LABEL_473:
            a6 = v274;
            *(void *)(i - 8) = v275;
            *(__n128 *)(i - 24) = a6;
LABEL_474:
            char v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return a6.n128_f64[0];
            }
            goto LABEL_475;
          }
        }
        else if (v251 >= v255)
        {
          goto LABEL_473;
        }
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = a1 + 24 * (v13 >> 1);
    if ((unint64_t)v12 < 0xC01)
    {
      sub_21B918A10((const void **)v15, (const void **)a1, __s2);
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_28:
      uint64_t v28 = 0;
      __n128 v29 = *(__n128 *)a1;
      uint64_t v277 = *(void *)(a1 + 16);
      __n128 v276 = v29;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v277 >= 0) {
        size_t v30 = &v276;
      }
      else {
        size_t v30 = (__n128 *)v276.n128_u64[0];
      }
      if (v277 >= 0) {
        unint64_t v31 = HIBYTE(v277);
      }
      else {
        unint64_t v31 = v276.n128_u64[1];
      }
      while (1)
      {
        int v32 = *(char *)(a1 + v28 + 47);
        uint64_t v33 = v32 >= 0 ? (const void *)(a1 + v28 + 24) : *(const void **)(a1 + v28 + 24);
        unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v28 + 47) : *(void *)(a1 + v28 + 32);
        size_t v35 = v31 >= v34 ? v34 : v31;
        int v36 = memcmp(v33, v30, v35);
        if (v36) {
          break;
        }
        if (v34 >= v31) {
          goto LABEL_47;
        }
LABEL_35:
        v28 += 24;
      }
      if (v36 < 0) {
        goto LABEL_35;
      }
LABEL_47:
      unint64_t v37 = a1 + v28 + 24;
      unsigned int v38 = __s2;
      if (v28)
      {
        do
        {
          while (1)
          {
            long long v39 = v38;
            uint16x4_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
            float32x4_t v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
            unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
            size_t v49 = v31 >= v48 ? v48 : v31;
            int v50 = memcmp(v47, v30, v49);
            unsigned int v38 = v39 - 3;
            if (v50) {
              break;
            }
            if (v48 < v31) {
              goto LABEL_78;
            }
          }
        }
        while ((v50 & 0x80000000) == 0);
      }
      else
      {
        long long v39 = v272;
        if (v37 < (unint64_t)v272)
        {
          float v40 = __s2;
          do
          {
            while (1)
            {
              long long v39 = v40;
              unint64_t v41 = (const void *)*((unsigned __int8 *)v40 + 23);
              BOOL v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
              unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
              size_t v44 = v31 >= v43 ? v43 : v31;
              int v45 = memcmp(v42, v30, v44);
              float v40 = v39 - 3;
              if (!v45) {
                break;
              }
              if (v37 >= (unint64_t)v39 || v45 < 0) {
                goto LABEL_78;
              }
            }
          }
          while (v37 < (unint64_t)v39 && v43 >= v31);
        }
      }
LABEL_78:
      unint64_t j = v37;
      if (v37 < (unint64_t)v39)
      {
        size_t v51 = v39;
        do
        {
          __n128 v52 = *(__n128 *)j;
          int64_t v275 = *(void *)(j + 16);
          __n128 v274 = v52;
          long long v53 = *(_OWORD *)v51;
          *(void *)(j + 16) = v51[2];
          *(_OWORD *)unint64_t j = v53;
          __n128 v54 = v274;
          v51[2] = (const void *)v275;
          *(__n128 *)size_t v51 = v54;
          if (v277 >= 0) {
            uint64_t v55 = &v276;
          }
          else {
            uint64_t v55 = (__n128 *)v276.n128_u64[0];
          }
          if (v277 >= 0) {
            unint64_t v56 = HIBYTE(v277);
          }
          else {
            unint64_t v56 = v276.n128_u64[1];
          }
          unint64_t v57 = j + 24;
          do
          {
            while (1)
            {
              unint64_t j = v57;
              uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
              int v59 = (v58 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
              unint64_t v60 = (v58 & 0x80u) == 0 ? v58 : *(void *)(j + 8);
              size_t v61 = v56 >= v60 ? v60 : v56;
              int v62 = memcmp(v59, v55, v61);
              unint64_t v57 = j + 24;
              if (v62) {
                break;
              }
              if (v60 >= v56) {
                goto LABEL_100;
              }
            }
          }
          while (v62 < 0);
LABEL_100:
          size_t v63 = v51 - 3;
          do
          {
            while (1)
            {
              size_t v51 = v63;
              simd_float4 v64 = (const void *)*((unsigned __int8 *)v63 + 23);
              float32x4_t v65 = (char)v64 >= 0 ? v51 : (const void **)*v51;
              unint64_t v66 = (unint64_t)((char)v64 >= 0 ? v64 : v51[1]);
              size_t v67 = v56 >= v66 ? v66 : v56;
              int v68 = memcmp(v65, v55, v67);
              size_t v63 = v51 - 3;
              if (v68) {
                break;
              }
              if (v66 < v56) {
                goto LABEL_80;
              }
            }
          }
          while ((v68 & 0x80000000) == 0);
LABEL_80:
          ;
        }
        while (j < (unint64_t)v51);
      }
      int v69 = (__n128 *)(j - 24);
      if (j - 24 == a1)
      {
        a2 = v272;
        if (*(char *)(j - 1) < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        a2 = v272;
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        __n128 v70 = *v69;
        *(void *)(a1 + 16) = *(void *)(j - 8);
        *(__n128 *)a1 = v70;
        *(unsigned char *)(j - 1) = 0;
        *(unsigned char *)(j - 24) = 0;
      }
      __n128 v71 = v276;
      *(void *)(j - 8) = v277;
      *int v69 = v71;
      if (v37 < (unint64_t)v39)
      {
LABEL_123:
        sub_21B9178AC(a1, j - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v72 = sub_21B918C7C(a1, (const void **)(j - 24));
        if (sub_21B918C7C(j, a2))
        {
          a2 = (const void **)(j - 24);
          if (v72) {
            return a6.n128_f64[0];
          }
          goto LABEL_2;
        }
        if (!v72) {
          goto LABEL_123;
        }
      }
    }
    else
    {
      sub_21B918A10((const void **)a1, (const void **)v15, __s2);
      uint64_t v16 = 24 * v14;
      sub_21B918A10((const void **)(a1 + 24), (const void **)(v16 + a1 - 24), v264);
      sub_21B918A10((const void **)(a1 + 48), (const void **)(a1 + 24 + v16), v262);
      sub_21B918A10((const void **)(v16 + a1 - 24), (const void **)v15, (const void **)(a1 + 24 + v16));
      __n128 v17 = *(__n128 *)a1;
      int64_t v275 = *(void *)(a1 + 16);
      __n128 v274 = v17;
      uint64_t v18 = *(void *)(v15 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(void *)(a1 + 16) = v18;
      __n128 v19 = v274;
      *(void *)(v15 + 16) = v275;
      *(__n128 *)unint64_t v15 = v19;
      --a4;
      if (a5) {
        goto LABEL_28;
      }
LABEL_11:
      int v20 = *(char *)(a1 - 1);
      if (v20 >= 0) {
        uint64_t v21 = (const void *)(a1 - 24);
      }
      else {
        uint64_t v21 = *(const void **)(a1 - 24);
      }
      if (v20 >= 0) {
        size_t v22 = *(unsigned __int8 *)(a1 - 1);
      }
      else {
        size_t v22 = *(void *)(a1 - 16);
      }
      int v23 = *(char *)(a1 + 23);
      if (v23 >= 0) {
        uint64_t v24 = (const void *)a1;
      }
      else {
        uint64_t v24 = *(const void **)a1;
      }
      if (v23 >= 0) {
        size_t v25 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v25 = *(void *)(a1 + 8);
      }
      if (v25 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v25;
      }
      int v27 = memcmp(v21, v24, v26);
      if (v27)
      {
        if (v27 < 0) {
          goto LABEL_28;
        }
      }
      else if (v22 < v25)
      {
        goto LABEL_28;
      }
      __n128 v73 = *(__n128 *)a1;
      uint64_t v277 = *(void *)(a1 + 16);
      __n128 v276 = v73;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v277 >= 0) {
        char v74 = &v276;
      }
      else {
        char v74 = (__n128 *)v276.n128_u64[0];
      }
      if (v277 >= 0) {
        size_t v75 = HIBYTE(v277);
      }
      else {
        size_t v75 = v276.n128_u64[1];
      }
      size_t v76 = *((unsigned __int8 *)a2 - 1);
      uint64_t v77 = (const void **)*(a2 - 3);
      unint64_t v78 = *(a2 - 2);
      if ((v76 & 0x80u) == 0) {
        unint64_t v79 = __s2;
      }
      else {
        unint64_t v79 = v77;
      }
      if ((v76 & 0x80u) == 0) {
        size_t v80 = v76;
      }
      else {
        size_t v80 = (size_t)v78;
      }
      if (v80 >= v75) {
        size_t v81 = v75;
      }
      else {
        size_t v81 = v80;
      }
      __s1a = v74;
      int v82 = memcmp(v74, v79, v81);
      if (v82)
      {
        if ((v82 & 0x80000000) == 0) {
          goto LABEL_142;
        }
      }
      else if (v75 >= v80)
      {
LABEL_142:
        for (unint64_t j = a1 + 24; j < (unint64_t)v272; j += 24)
        {
          int v83 = *(char *)(j + 23);
          if (v83 >= 0) {
            char v84 = (const void *)j;
          }
          else {
            char v84 = *(const void **)j;
          }
          if (v83 >= 0) {
            size_t v85 = *(unsigned __int8 *)(j + 23);
          }
          else {
            size_t v85 = *(void *)(j + 8);
          }
          if (v85 >= v75) {
            size_t v86 = v75;
          }
          else {
            size_t v86 = v85;
          }
          int v87 = memcmp(__s1a, v84, v86);
          if (v87)
          {
            if (v87 < 0) {
              goto LABEL_172;
            }
          }
          else if (v75 < v85)
          {
            goto LABEL_172;
          }
        }
        goto LABEL_172;
      }
      unint64_t v88 = a1 + 24;
      do
      {
        while (1)
        {
          unint64_t j = v88;
          uint64_t v89 = *(unsigned __int8 *)(v88 + 23);
          uint64_t v90 = (v89 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
          size_t v91 = (v89 & 0x80u) == 0 ? v89 : *(void *)(j + 8);
          size_t v92 = v91 >= v75 ? v75 : v91;
          int v93 = memcmp(__s1a, v90, v92);
          unint64_t v88 = j + 24;
          if (v93) {
            break;
          }
          if (v75 < v91) {
            goto LABEL_172;
          }
        }
      }
      while ((v93 & 0x80000000) == 0);
LABEL_172:
      k = v272;
      if (j < (unint64_t)v272)
      {
        for (k = __s2; ; unint64_t v78 = k[1])
        {
          if ((v76 & 0x80u) == 0) {
            char v96 = k;
          }
          else {
            char v96 = v77;
          }
          if ((v76 & 0x80u) == 0) {
            size_t v97 = v76;
          }
          else {
            size_t v97 = (size_t)v78;
          }
          if (v97 >= v75) {
            size_t v98 = v75;
          }
          else {
            size_t v98 = v97;
          }
          int v99 = memcmp(__s1a, v96, v98);
          if (v99)
          {
            if ((v99 & 0x80000000) == 0) {
              break;
            }
          }
          else if (v75 >= v97)
          {
            break;
          }
          uint64_t v95 = (const void **)*(k - 3);
          k -= 3;
          uint64_t v77 = v95;
          size_t v76 = *((unsigned __int8 *)k + 23);
        }
      }
LABEL_220:
      while (j < (unint64_t)k)
      {
        __n128 v100 = *(__n128 *)j;
        int64_t v275 = *(void *)(j + 16);
        __n128 v274 = v100;
        long long v101 = *(_OWORD *)k;
        *(void *)(j + 16) = k[2];
        *(_OWORD *)unint64_t j = v101;
        __n128 v102 = v274;
        k[2] = (const void *)v275;
        *(__n128 *)k = v102;
        if (v277 >= 0) {
          uint64_t v103 = &v276;
        }
        else {
          uint64_t v103 = (__n128 *)v276.n128_u64[0];
        }
        if (v277 >= 0) {
          unint64_t v104 = HIBYTE(v277);
        }
        else {
          unint64_t v104 = v276.n128_u64[1];
        }
        unint64_t v105 = j + 24;
        do
        {
          while (1)
          {
            unint64_t j = v105;
            uint64_t v106 = *(unsigned __int8 *)(v105 + 23);
            int v107 = (v106 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
            unint64_t v108 = (v106 & 0x80u) == 0 ? v106 : *(void *)(j + 8);
            size_t v109 = v108 >= v104 ? v104 : v108;
            int v110 = memcmp(v103, v107, v109);
            unint64_t v105 = j + 24;
            if (v110) {
              break;
            }
            if (v104 < v108) {
              goto LABEL_207;
            }
          }
        }
        while ((v110 & 0x80000000) == 0);
LABEL_207:
        size_t v111 = k - 3;
        do
        {
          while (1)
          {
            k = v111;
            float64x2_t v112 = (const void *)*((unsigned __int8 *)v111 + 23);
            uint64_t v113 = (char)v112 >= 0 ? k : (const void **)*k;
            uint64_t v114 = (char)v112 >= 0 ? v112 : k[1];
            size_t v115 = (unint64_t)v114 >= v104 ? v104 : (size_t)v114;
            int v116 = memcmp(v103, v113, v115);
            size_t v111 = k - 3;
            if (v116) {
              break;
            }
            if (v104 >= (unint64_t)v114) {
              goto LABEL_220;
            }
          }
        }
        while (v116 < 0);
      }
      size_t v117 = (__n128 *)(j - 24);
      BOOL v6 = j - 24 >= a1;
      BOOL v7 = j - 24 == a1;
      if (j - 24 == a1)
      {
        a2 = v272;
        if (*(char *)(j - 1) < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        a2 = v272;
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        __n128 v118 = *v117;
        *(void *)(a1 + 16) = *(void *)(j - 8);
        *(__n128 *)a1 = v118;
        *(unsigned char *)(j - 1) = 0;
        *(unsigned char *)(j - 24) = 0;
      }
      a5 = 0;
      a6 = v276;
      *(void *)(j - 8) = v277;
      *size_t v117 = a6;
    }
  }
  if ((const void **)a1 == a2) {
    return a6.n128_f64[0];
  }
  int64_t v133 = (v13 - 2) >> 1;
  int64_t v134 = v133;
  unint64_t v263 = v12;
  do
  {
    int64_t v136 = v134;
    if (v133 < v134) {
      goto LABEL_267;
    }
    uint64_t v137 = (2 * v134) | 1;
    unint64_t v138 = a1 + 24 * v137;
    uint64_t v139 = 2 * v134 + 2;
    __s1b = (void *)v134;
    if (v139 >= (uint64_t)v13) {
      goto LABEL_287;
    }
    unint64_t v140 = (const void **)(v138 + 24);
    int v141 = *(char *)(v138 + 23);
    if (v141 >= 0) {
      int v142 = (const void *)(a1 + 24 * v137);
    }
    else {
      int v142 = *(const void **)v138;
    }
    if (v141 >= 0) {
      size_t v143 = *(unsigned __int8 *)(v138 + 23);
    }
    else {
      size_t v143 = *(void *)(v138 + 8);
    }
    int v144 = *(char *)(v138 + 47);
    if (v144 >= 0) {
      int v145 = (const void *)(v138 + 24);
    }
    else {
      int v145 = *(const void **)(v138 + 24);
    }
    if (v144 >= 0) {
      size_t v146 = *(unsigned __int8 *)(v138 + 47);
    }
    else {
      size_t v146 = *(void *)(v138 + 32);
    }
    if (v146 >= v143) {
      size_t v147 = v143;
    }
    else {
      size_t v147 = v146;
    }
    int v148 = memcmp(v142, v145, v147);
    if (v148)
    {
      a2 = v272;
      int64_t v136 = (int64_t)__s1b;
      if (v148 < 0) {
        goto LABEL_288;
      }
LABEL_287:
      unint64_t v140 = (const void **)(a1 + 24 * v137);
      uint64_t v139 = v137;
      goto LABEL_288;
    }
    BOOL v6 = v143 >= v146;
    a2 = v272;
    int64_t v136 = (int64_t)__s1b;
    if (v6) {
      goto LABEL_287;
    }
LABEL_288:
    unint64_t v149 = a1 + 24 * v136;
    int v150 = *((char *)v140 + 23);
    if (v150 >= 0) {
      int v151 = v140;
    }
    else {
      int v151 = *v140;
    }
    if (v150 >= 0) {
      size_t v152 = *((unsigned __int8 *)v140 + 23);
    }
    else {
      size_t v152 = (size_t)v140[1];
    }
    int v153 = *(char *)(v149 + 23);
    if (v153 >= 0) {
      float32x4_t v154 = (const void *)(a1 + 24 * v136);
    }
    else {
      float32x4_t v154 = *(const void **)v149;
    }
    if (v153 >= 0) {
      size_t v155 = *(unsigned __int8 *)(v149 + 23);
    }
    else {
      size_t v155 = *(void *)(v149 + 8);
    }
    if (v155 >= v152) {
      size_t v156 = v152;
    }
    else {
      size_t v156 = v155;
    }
    int v157 = memcmp(v151, v154, v156);
    if (v157)
    {
      int64_t v136 = (int64_t)__s1b;
      if (v157 < 0) {
        goto LABEL_267;
      }
    }
    else
    {
      int64_t v136 = (int64_t)__s1b;
      if (v152 < v155) {
        goto LABEL_267;
      }
    }
    __n128 v158 = *(__n128 *)v149;
    int64_t v275 = *(void *)(v149 + 16);
    __n128 v274 = v158;
    *(void *)(v149 + 8) = 0;
    *(void *)(v149 + 16) = 0;
    *(void *)unint64_t v149 = 0;
    long long v159 = *(_OWORD *)v140;
    *(void *)(v149 + 16) = v140[2];
    *(_OWORD *)unint64_t v149 = v159;
    *((unsigned char *)v140 + 23) = 0;
    *(unsigned char *)unint64_t v140 = 0;
    if (v133 >= v139)
    {
      uint64_t v160 = &v274;
      if (v275 < 0) {
        uint64_t v160 = (__n128 *)v274.n128_u64[0];
      }
      __s2a = v160;
      if (v275 >= 0) {
        size_t v161 = HIBYTE(v275);
      }
      else {
        size_t v161 = v274.n128_u64[1];
      }
      while (1)
      {
        uint64_t v163 = (2 * v139) | 1;
        unint64_t v164 = a1 + 24 * v163;
        uint64_t v139 = 2 * v139 + 2;
        if (v139 >= (uint64_t)v13) {
          goto LABEL_333;
        }
        uint64_t v135 = (const void **)(v164 + 24);
        int v165 = *(char *)(v164 + 23);
        unsigned int v166 = v165 >= 0 ? (const void *)(a1 + 24 * v163) : *(const void **)v164;
        unint64_t v167 = v165 >= 0 ? *(unsigned __int8 *)(v164 + 23) : *(void *)(v164 + 8);
        int v168 = *(char *)(v164 + 47);
        uint64_t v169 = v168 >= 0 ? (const void *)(v164 + 24) : *(const void **)(v164 + 24);
        unint64_t v170 = v168 >= 0 ? *(unsigned __int8 *)(v164 + 47) : *(void *)(v164 + 32);
        size_t v171 = v170 >= v167 ? v167 : v170;
        int v172 = memcmp(v166, v169, v171);
        if (v172) {
          break;
        }
        BOOL v6 = v167 >= v170;
        a2 = v272;
        int64_t v133 = (v13 - 2) >> 1;
        if (v6) {
          goto LABEL_333;
        }
LABEL_334:
        int v173 = *((char *)v135 + 23);
        if (v173 >= 0) {
          uint64_t v174 = v135;
        }
        else {
          uint64_t v174 = *v135;
        }
        if (v173 >= 0) {
          size_t v175 = *((unsigned __int8 *)v135 + 23);
        }
        else {
          size_t v175 = (size_t)v135[1];
        }
        if (v161 >= v175) {
          size_t v176 = v175;
        }
        else {
          size_t v176 = v161;
        }
        int v177 = memcmp(v174, __s2a, v176);
        if (v177)
        {
          if (v177 < 0) {
            goto LABEL_265;
          }
        }
        else if (v175 < v161)
        {
          goto LABEL_265;
        }
        long long v162 = *(_OWORD *)v135;
        v140[2] = v135[2];
        *(_OWORD *)unint64_t v140 = v162;
        *((unsigned char *)v135 + 23) = 0;
        *(unsigned char *)uint64_t v135 = 0;
        unint64_t v140 = v135;
        if (v133 < v139) {
          goto LABEL_266;
        }
      }
      a2 = v272;
      int64_t v133 = (v13 - 2) >> 1;
      if (v172 < 0) {
        goto LABEL_334;
      }
LABEL_333:
      uint64_t v135 = (const void **)(a1 + 24 * v163);
      uint64_t v139 = v163;
      goto LABEL_334;
    }
LABEL_265:
    uint64_t v135 = v140;
LABEL_266:
    a6 = v274;
    v135[2] = (const void *)v275;
    *(__n128 *)uint64_t v135 = a6;
    int64_t v136 = (int64_t)__s1b;
LABEL_267:
    int64_t v134 = v136 - 1;
  }
  while (v136);
  int64_t v198 = v263 / 0x18;
  do
  {
    if (v198 < 2) {
      goto LABEL_397;
    }
    uint64_t v273 = a2;
    uint64_t v201 = 0;
    __s1c = *(void **)a1;
    v276.n128_u64[0] = *(void *)(a1 + 8);
    *(unint64_t *)((char *)v276.n128_u64 + 7) = *(void *)(a1 + 15);
    char __s2b = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    unint64_t v202 = a1;
    do
    {
      uint64_t v203 = v202 + 24 * v201 + 24;
      uint64_t v204 = (2 * v201) | 1;
      uint64_t v201 = 2 * v201 + 2;
      if (v201 >= v198) {
        goto LABEL_420;
      }
      uint64_t v205 = v203 + 24;
      int v206 = *(char *)(v203 + 23);
      if (v206 >= 0) {
        char v207 = (const void *)v203;
      }
      else {
        char v207 = *(const void **)v203;
      }
      if (v206 >= 0) {
        size_t v208 = *(unsigned __int8 *)(v203 + 23);
      }
      else {
        size_t v208 = *(void *)(v203 + 8);
      }
      int v209 = *(char *)(v203 + 47);
      if (v209 >= 0) {
        char v210 = (const void *)(v203 + 24);
      }
      else {
        char v210 = *(const void **)(v203 + 24);
      }
      if (v209 >= 0) {
        size_t v211 = *(unsigned __int8 *)(v203 + 47);
      }
      else {
        size_t v211 = *(void *)(v203 + 32);
      }
      if (v211 >= v208) {
        size_t v212 = v208;
      }
      else {
        size_t v212 = v211;
      }
      int v213 = memcmp(v207, v210, v212);
      if (v213)
      {
        if (v213 < 0) {
          goto LABEL_421;
        }
LABEL_420:
        uint64_t v205 = v203;
        uint64_t v201 = v204;
        goto LABEL_421;
      }
      if (v208 >= v211) {
        goto LABEL_420;
      }
LABEL_421:
      if (*(char *)(v202 + 23) < 0) {
        operator delete(*(void **)v202);
      }
      a6 = *(__n128 *)v205;
      *(void *)(v202 + 16) = *(void *)(v205 + 16);
      *(__n128 *)unint64_t v202 = a6;
      *(unsigned char *)(v205 + 23) = 0;
      *(unsigned char *)uint64_t v205 = 0;
      unint64_t v202 = v205;
    }
    while (v201 <= (uint64_t)((unint64_t)(v198 - 2) >> 1));
    if ((const void **)v205 == a2 - 3)
    {
      *(void *)uint64_t v205 = __s1c;
      uint64_t v199 = *(uint64_t *)((char *)v276.n128_i64 + 7);
      *(void *)(v205 + 8) = v276.n128_u64[0];
      *(void *)(v205 + 15) = v199;
      *(unsigned char *)(v205 + 23) = __s2b;
      goto LABEL_397;
    }
    a6 = *(__n128 *)(a2 - 3);
    *(void *)(v205 + 16) = *(a2 - 1);
    *(__n128 *)uint64_t v205 = a6;
    *(a2 - 3) = __s1c;
    char v214 = (const void *)v276.n128_u64[0];
    *(const void **)((char *)a2 - 9) = *(const void **)((char *)v276.n128_u64 + 7);
    *(a2 - 2) = v214;
    *((unsigned char *)a2 - 1) = __s2b;
    uint64_t v215 = v205 - a1 + 24;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        uint64_t v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        uint64_t v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = *(char *)(v205 + 23);
      if (v222 >= 0) {
        char v223 = (const void *)v205;
      }
      else {
        char v223 = *(const void **)v205;
      }
      if (v222 >= 0) {
        size_t v224 = *(unsigned __int8 *)(v205 + 23);
      }
      else {
        size_t v224 = *(void *)(v205 + 8);
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0)
        {
LABEL_447:
          __n128 v227 = *(__n128 *)v205;
          int64_t v275 = *(void *)(v205 + 16);
          __n128 v274 = v227;
          *(void *)(v205 + 8) = 0;
          *(void *)(v205 + 16) = 0;
          *(void *)uint64_t v205 = 0;
          if (v275 >= 0) {
            uint64_t v228 = &v274;
          }
          else {
            uint64_t v228 = (__n128 *)v274.n128_u64[0];
          }
          if (v275 >= 0) {
            size_t v229 = HIBYTE(v275);
          }
          else {
            size_t v229 = v274.n128_u64[1];
          }
          long long v230 = *(_OWORD *)v218;
          *(void *)(v205 + 16) = *(void *)(v218 + 16);
          *(_OWORD *)uint64_t v205 = v230;
          *(unsigned char *)(v218 + 23) = 0;
          *(unsigned char *)unint64_t v218 = 0;
          if (v216 >= 2)
          {
            while (1)
            {
              unint64_t v232 = v217 - 1;
              unint64_t v217 = (v217 - 1) >> 1;
              unint64_t v233 = a1 + 24 * v217;
              int v234 = *(char *)(v233 + 23);
              if (v234 >= 0) {
                unint64_t v235 = (const void *)(a1 + 24 * v217);
              }
              else {
                unint64_t v235 = *(const void **)v233;
              }
              if (v234 >= 0) {
                size_t v236 = *(unsigned __int8 *)(v233 + 23);
              }
              else {
                size_t v236 = *(void *)(v233 + 8);
              }
              if (v229 >= v236) {
                size_t v237 = v236;
              }
              else {
                size_t v237 = v229;
              }
              int v238 = memcmp(v235, v228, v237);
              if (v238)
              {
                if ((v238 & 0x80000000) == 0) {
                  break;
                }
              }
              else if (v236 >= v229)
              {
                break;
              }
              long long v231 = *(_OWORD *)v233;
              *(void *)(v218 + 16) = *(void *)(v233 + 16);
              *(_OWORD *)unint64_t v218 = v231;
              *(unsigned char *)(v233 + 23) = 0;
              *(unsigned char *)unint64_t v233 = 0;
              unint64_t v218 = a1 + 24 * v217;
              if (v232 <= 1) {
                goto LABEL_469;
              }
            }
          }
          unint64_t v233 = v218;
LABEL_469:
          a6 = v274;
          *(void *)(v233 + 16) = v275;
          *(__n128 *)unint64_t v233 = a6;
          a2 = v273;
        }
      }
      else if (v221 < v224)
      {
        goto LABEL_447;
      }
    }
LABEL_397:
    a2 -= 3;
  }
  while ((unint64_t)v198-- > 2);
  return a6.n128_f64[0];
}

__n128 sub_21B918A10(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  int v9 = *((char *)a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *a1;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v11 = (size_t)a1[1];
  }
  if (v11 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v11;
  }
  int v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 >= v11) {
      goto LABEL_18;
    }
LABEL_31:
    int v20 = *((char *)a3 + 23);
    if (v20 >= 0) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = *a3;
    }
    if (v20 >= 0) {
      size_t v22 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v22 = (size_t)a3[1];
    }
    if (v8 >= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v8;
    }
    int v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        size_t v25 = a1[2];
        __n128 v26 = *(__n128 *)a1;
        int v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        int v28 = *((char *)a3 + 23);
        if (v28 >= 0) {
          __n128 v29 = a3;
        }
        else {
          __n128 v29 = *a3;
        }
        if (v28 >= 0) {
          size_t v30 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v30 = (size_t)a3[1];
        }
        int v31 = *((char *)a2 + 23);
        if (v31 >= 0) {
          int v32 = a2;
        }
        else {
          int v32 = *a2;
        }
        if (v31 >= 0) {
          size_t v33 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v33 = (size_t)a2[1];
        }
        if (v33 >= v30) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = v33;
        }
        int v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v30 >= v33)
        {
          return result;
        }
        float32x4_t v47 = a2[2];
        __n128 result = *(__n128 *)a2;
        size_t v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
LABEL_83:
        *(__n128 *)a3 = result;
        a3[2] = v47;
        return result;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    float32x4_t v47 = a1[2];
    __n128 result = *(__n128 *)a1;
    unint64_t v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
    goto LABEL_83;
  }
  if (v13 < 0) {
    goto LABEL_31;
  }
LABEL_18:
  int v14 = *((char *)a3 + 23);
  if (v14 >= 0) {
    unint64_t v15 = a3;
  }
  else {
    unint64_t v15 = *a3;
  }
  if (v14 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v8 >= v16) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v8;
  }
  int v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v16 >= v8)
  {
    return result;
  }
  int v36 = a2[2];
  long long v37 = *(_OWORD *)a2;
  unsigned int v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  int v39 = *((char *)a2 + 23);
  if (v39 >= 0) {
    float v40 = a2;
  }
  else {
    float v40 = *a2;
  }
  if (v39 >= 0) {
    size_t v41 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v41 = (size_t)a2[1];
  }
  int v42 = *((char *)a1 + 23);
  if (v42 >= 0) {
    unint64_t v43 = a1;
  }
  else {
    unint64_t v43 = *a1;
  }
  if (v42 >= 0) {
    size_t v44 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v44 = (size_t)a1[1];
  }
  if (v44 >= v41) {
    size_t v45 = v41;
  }
  else {
    size_t v45 = v44;
  }
  int v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if (v46 < 0) {
      goto LABEL_85;
    }
  }
  else if (v41 < v44)
  {
LABEL_85:
    int v50 = a1[2];
    __n128 result = *(__n128 *)a1;
    size_t v51 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v51;
    *(__n128 *)a2 = result;
    a2[2] = v50;
  }
  return result;
}

BOOL sub_21B918C7C(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        size_t v8 = a2 - 3;
      }
      else {
        size_t v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      if (v10 >= 0) {
        size_t v11 = (const void *)a1;
      }
      else {
        size_t v11 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v12 = *(void *)(a1 + 8);
      }
      if (v12 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v12;
      }
      int v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      int v39 = *(const void **)(a1 + 16);
      long long v40 = *(_OWORD *)a1;
      size_t v41 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v41;
      *(_OWORD *)int v6 = v40;
      v6[2] = v39;
      return 1;
    case 3uLL:
      sub_21B918A10((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_21B918F84(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_21B919130(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
      return 1;
    default:
      unint64_t v15 = (const void **)(a1 + 48);
      sub_21B918A10((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      size_t v16 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      int v42 = v2;
      break;
  }
  while (2)
  {
    int v21 = *((char *)v16 + 23);
    if (v21 >= 0) {
      size_t v22 = v16;
    }
    else {
      size_t v22 = *v16;
    }
    if (v21 >= 0) {
      size_t v23 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v23 = (size_t)v16[1];
    }
    int v24 = *((char *)v15 + 23);
    if (v24 >= 0) {
      size_t v25 = v15;
    }
    else {
      size_t v25 = *v15;
    }
    if (v24 >= 0) {
      size_t v26 = *((unsigned __int8 *)v15 + 23);
    }
    else {
      size_t v26 = (size_t)v15[1];
    }
    if (v26 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v26;
    }
    int v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    long long v43 = *(_OWORD *)v16;
    size_t v44 = v16[2];
    *(_OWORD *)size_t v16 = *(_OWORD *)v15;
    void v16[2] = v15[2];
    *((unsigned char *)v15 + 23) = 0;
    *(unsigned char *)unint64_t v15 = 0;
    uint64_t v19 = a1;
    if (v15 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v29 = v17;
    while (1)
    {
      uint64_t v30 = a1 + v29;
      int v31 = (_OWORD *)(a1 + v29 + 24);
      int v32 = SHIBYTE(v44) >= 0 ? &v43 : (long long *)v43;
      unint64_t v33 = SHIBYTE(v44) >= 0 ? HIBYTE(v44) : *((void *)&v43 + 1);
      int v34 = *(char *)(v30 + 47);
      int v35 = v34 >= 0 ? (const void *)(a1 + v29 + 24) : *(const void **)(a1 + v29 + 24);
      unint64_t v36 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 47) : *(void *)(v30 + 32);
      size_t v37 = v36 >= v33 ? v33 : v36;
      int v38 = memcmp(v32, v35, v37);
      if (!v38) {
        break;
      }
      if ((v38 & 0x80000000) == 0)
      {
        uint64_t v19 = (uint64_t)v15;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 3;
      *(_OWORD *)(v30 + 48) = *v31;
      *(void *)(v30 + 64) = *(void *)(a1 + v29 + 40);
      *(unsigned char *)(v30 + 47) = 0;
      *(unsigned char *)int v31 = 0;
      v29 -= 24;
      if (v29 == -48)
      {
        uint64_t v19 = a1;
        goto LABEL_23;
      }
    }
    if (v33 < v36) {
      goto LABEL_48;
    }
    uint64_t v19 = a1 + v29 + 48;
LABEL_23:
    uint64_t v2 = v42;
LABEL_24:
    long long v20 = v43;
    *(void *)(v19 + 16) = v44;
    *(_OWORD *)uint64_t v19 = v20;
    if (++v18 == 8) {
      return v16 + 3 == v2;
    }
LABEL_25:
    unint64_t v15 = v16;
    v17 += 24;
    v16 += 3;
    if (v16 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_21B918F84(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  sub_21B918A10((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *((char *)a3 + 23);
  if (v11 >= 0) {
    size_t v12 = a3;
  }
  else {
    size_t v12 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v13 = *((void *)a3 + 1);
  }
  if (v13 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v13;
  }
  int v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v10 >= v13)
  {
    return result;
  }
  uint64_t v17 = (const void *)*((void *)a3 + 2);
  long long v18 = *a3;
  uint64_t v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((void *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  int v20 = *((char *)a3 + 23);
  if (v20 >= 0) {
    int v21 = a3;
  }
  else {
    int v21 = *(const void **)a3;
  }
  if (v20 >= 0) {
    size_t v22 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v22 = *((void *)a3 + 1);
  }
  int v23 = *((char *)a2 + 23);
  if (v23 >= 0) {
    int v24 = a2;
  }
  else {
    int v24 = *(const void **)a2;
  }
  if (v23 >= 0) {
    size_t v25 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v25 = *((void *)a2 + 1);
  }
  if (v25 >= v22) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v25;
  }
  int v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v22 >= v25)
  {
    return result;
  }
  uint64_t v28 = *((void *)a2 + 2);
  long long v29 = *a2;
  uint64_t v30 = *((void *)a3 + 2);
  *a2 = *a3;
  *((void *)a2 + 2) = v30;
  *a3 = v29;
  *((void *)a3 + 2) = v28;
  int v31 = *((char *)a2 + 23);
  if (v31 >= 0) {
    int v32 = a2;
  }
  else {
    int v32 = *(const void **)a2;
  }
  if (v31 >= 0) {
    size_t v33 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v33 = *((void *)a2 + 1);
  }
  int v34 = *(char *)(a1 + 23);
  if (v34 >= 0) {
    int v35 = (const void *)a1;
  }
  else {
    int v35 = *(const void **)a1;
  }
  if (v34 >= 0) {
    size_t v36 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v36 = *(void *)(a1 + 8);
  }
  if (v36 >= v33) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v36;
  }
  int v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if (v38 < 0) {
      goto LABEL_58;
    }
  }
  else if (v33 < v36)
  {
LABEL_58:
    uint64_t v39 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v40 = *((void *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(void *)(a1 + 16) = v40;
    *a2 = (__int128)result;
    *((void *)a2 + 2) = v39;
  }
  return result;
}

__n128 sub_21B919130(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  sub_21B918F84(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a4 + 23);
  if (v13 >= 0) {
    size_t v14 = a4;
  }
  else {
    size_t v14 = *(long long **)a4;
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v15 = *((void *)a4 + 1);
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v12 >= v15)
  {
    return result;
  }
  uint64_t v19 = (const void *)*((void *)a4 + 2);
  long long v20 = *a4;
  int v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((void *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  int v22 = *((char *)a4 + 23);
  if (v22 >= 0) {
    int v23 = a4;
  }
  else {
    int v23 = *(long long **)a4;
  }
  if (v22 >= 0) {
    size_t v24 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v24 = *((void *)a4 + 1);
  }
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    size_t v26 = (const void *)a3;
  }
  else {
    size_t v26 = *(const void **)a3;
  }
  if (v25 >= 0) {
    size_t v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v27 = *(void *)(a3 + 8);
  }
  if (v27 >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v27;
  }
  int v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v24 >= v27)
  {
    return result;
  }
  uint64_t v30 = *(void *)(a3 + 16);
  long long v31 = *(_OWORD *)a3;
  uint64_t v32 = *((void *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(void *)(a3 + 16) = v32;
  *a4 = v31;
  *((void *)a4 + 2) = v30;
  int v33 = *(char *)(a3 + 23);
  if (v33 >= 0) {
    int v34 = (const void *)a3;
  }
  else {
    int v34 = *(const void **)a3;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v35 = *(void *)(a3 + 8);
  }
  int v36 = *(char *)(a2 + 23);
  if (v36 >= 0) {
    size_t v37 = (const void *)a2;
  }
  else {
    size_t v37 = *(const void **)a2;
  }
  if (v36 >= 0) {
    size_t v38 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v38 = *(void *)(a2 + 8);
  }
  if (v38 >= v35) {
    size_t v39 = v35;
  }
  else {
    size_t v39 = v38;
  }
  int v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v35 >= v38)
  {
    return result;
  }
  uint64_t v41 = *(void *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  uint64_t v43 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(void *)(a3 + 16) = v41;
  int v44 = *(char *)(a2 + 23);
  if (v44 >= 0) {
    size_t v45 = (const void *)a2;
  }
  else {
    size_t v45 = *(const void **)a2;
  }
  if (v44 >= 0) {
    size_t v46 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v46 = *(void *)(a2 + 8);
  }
  int v47 = *(char *)(a1 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v46) {
    size_t v50 = v46;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v46 >= v49)
  {
    return result;
  }
  uint64_t v52 = *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a1;
  uint64_t v53 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(void *)(a2 + 16) = v52;
  return result;
}

void sub_21B919344(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
        {
          uint64_t v6 = *((void *)v4 - 4);
          if (v6)
          {
            uint64_t v7 = *((void *)v4 - 3);
            int v8 = (void *)*((void *)v4 - 4);
            if (v7 != v6)
            {
              do
              {
                if (*(char *)(v7 - 1) < 0) {
                  operator delete(*(void **)(v7 - 24));
                }
                v7 -= 24;
              }
              while (v7 != v6);
              int v8 = (void *)*((void *)v4 - 4);
            }
            *((void *)v4 - 3) = v6;
            operator delete(v8);
          }
        }
        size_t v9 = v4 - 56;
        int v10 = (void *)*((void *)v4 - 7);
        if (v10)
        {
          *((void *)v4 - 6) = v10;
          operator delete(v10);
        }
        v4 -= 56;
      }
      while (v9 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_21B919438(_DWORD ***a1)
{
  return sub_21B919454(**a1, (char *)(*a1)[1]);
}

void sub_21B919444(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_21B919454(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26CB9E958[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    uint64_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21B919548(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  long long v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v13 = v3;
  *(void *)size_t v14 = v18[0];
  *(void *)&v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26CB9E958[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21B84C93C((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_21B919700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B919744(uint64_t a1, uint64_t a2)
{
  long long v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    __n128 result = sub_21B919840((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  __n128 result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21B919838(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21B919840(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21B846300();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_21B845A48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  int v21 = v8;
  int v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *uint64_t v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      int v13 = (void **)*a1;
      size_t v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  int v13 = (void **)*a1;
  size_t v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  size_t v14 = (void **)*a1;
  uint64_t v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21B919A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B846734((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21B919A54(void *a1, unint64_t a2)
{
  unint64_t v4 = a2 + 24;
  unint64_t v17 = (void *)a2;
  long long v18 = (void *)(a2 + 24);
  unint64_t v15 = 0;
  sub_21B8F2698((uint64_t *)&v15, (uint64_t)&v17);
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v15;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v15;
    if (v15 >= v5) {
      unint64_t v8 = v15 % v5;
    }
  }
  else
  {
    unint64_t v8 = (v5 - 1) & v15;
  }
  size_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  size_t v10 = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      unint64_t v11 = v5 - 1;
      while (1)
      {
        uint64_t v13 = v10[1];
        if (v6 == v13)
        {
          unint64_t v17 = v10 + 2;
          long long v18 = v10 + 5;
          unint64_t v15 = a2;
          unint64_t v16 = v4;
          if (sub_21B91727C((uint64_t)&v19, (uint64_t)&v17, (uint64_t)&v15)) {
            return v10;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        size_t v10 = (void *)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = v10[1];
      if (v6 == v12)
      {
        unint64_t v17 = v10 + 2;
        long long v18 = v10 + 5;
        unint64_t v15 = a2;
        unint64_t v16 = v4;
        if (sub_21B91727C((uint64_t)&v19, (uint64_t)&v17, (uint64_t)&v15)) {
          return v10;
        }
      }
      else
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      size_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t *sub_21B919BC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(unsigned char *)(v2 + 64))
      {
        uint64_t v3 = *(void *)(v2 + 40);
        if (v3)
        {
          uint64_t v4 = *(void *)(v2 + 48);
          unint64_t v5 = *(void **)(v2 + 40);
          if (v4 != v3)
          {
            do
            {
              if (*(char *)(v4 - 1) < 0) {
                operator delete(*(void **)(v4 - 24));
              }
              v4 -= 24;
            }
            while (v4 != v3);
            unint64_t v5 = *(void **)(v2 + 40);
          }
          *(void *)(v2 + 48) = v3;
          operator delete(v5);
        }
      }
      unint64_t v6 = *(void **)(v2 + 16);
      if (v6)
      {
        *(void *)(v2 + 24) = v6;
        operator delete(v6);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_21B919C68(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void *)*v2;
      if (*((unsigned char *)v2 + 64))
      {
        uint64_t v6 = v2[5];
        if (v6)
        {
          uint64_t v7 = v2[6];
          unint64_t v8 = (void *)v2[5];
          if (v7 != v6)
          {
            do
            {
              if (*(char *)(v7 - 1) < 0) {
                operator delete(*(void **)(v7 - 24));
              }
              v7 -= 24;
            }
            while (v7 != v6);
            unint64_t v8 = (void *)v2[5];
          }
          _DWORD v2[6] = v6;
          operator delete(v8);
        }
      }
      size_t v9 = (void *)v2[2];
      if (v9)
      {
        v2[3] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_21B919D2C(std::string *a1@<X8>)
{
  sub_21B91A174((std::string *)&v18[24], 256);
  int v2 = SHIBYTE(v19);
  if (v19 >= 0) {
    size_t v3 = HIBYTE(v19);
  }
  else {
    size_t v3 = *(void *)&v18[32];
  }
  unint64_t v4 = v3 + 46;
  if (v3 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v4 <= 0x16)
  {
    qmemcpy(v18, "CV3D_LearnedFeatures_Hardnet_Descriptor_Model/", sizeof(v18));
    unint64_t v5 = &v19;
LABEL_10:
    if (v2 >= 0) {
      uint64_t v7 = &v18[24];
    }
    else {
      uint64_t v7 = *(unsigned char **)&v18[24];
    }
    memmove(v5, v7, v3);
    goto LABEL_14;
  }
  uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v6 = v4 | 7;
  }
  *(void *)&v18[8] = v3 + 46;
  *(void *)&v18[16] = (v6 + 1) | 0x8000000000000000;
  *(void *)long long v18 = operator new(v6 + 1);
  qmemcpy(*(void **)v18, "CV3D_LearnedFeatures_Hardnet_Descriptor_Model/", 46);
  unint64_t v5 = (__int16 *)(*(void *)v18 + 46);
  if (v3) {
    goto LABEL_10;
  }
LABEL_14:
  *((unsigned char *)v5 + v3) = 0;
  sub_21B844260((uint64_t)v14);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_21B9AE730;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_21B97FE7C((uint64_t)&__p, (std::string::size_type)v18, v15, 1, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_21B91A560(v14, &v10);
    sub_21B836FF8("Failed to access model resource path: ", &v10, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(a1, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v12;
  }
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v15[0] = v8;
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](&v17);
  if ((v18[23] & 0x80000000) == 0)
  {
    if ((v2 & 0x80000000) == 0) {
      return;
    }
LABEL_28:
    operator delete(*(void **)&v18[24]);
    return;
  }
  operator delete(*(void **)v18);
  if (v2 < 0) {
    goto LABEL_28;
  }
}

void sub_21B91A094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      if (a28)
      {
        if (a27 < 0) {
          operator delete(a22);
        }
      }
      sub_21B844544((uint64_t)&a30);
      if (*(char *)(v35 - 73) < 0)
      {
        operator delete(*(void **)(v35 - 96));
        if ((v34 & 0x80000000) == 0) {
LABEL_13:
        }
          _Unwind_Resume(a1);
      }
      else if ((v34 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(*(void **)(v35 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_21B91A174(std::string *a1, int a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v33 = 32;
  int v34 = a2;
  int v31 = 8;
  int v32 = 64;
  uint64_t v29 = 0x700000003;
  unsigned int v30 = 0;
  sub_21B91AA18((unsigned int *)&v29, (unsigned int *)&v29 + 1, &v30, &v35);
  sub_21B84DF0C((uint64_t)v35, (uint64_t)v36, "_", 1uLL, &v28, v3, v4);
  uint64_t v5 = (uint64_t)v35;
  if (v35)
  {
    uint64_t v6 = (uint64_t)v36;
    uint64_t v7 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = v35;
    }
    int v36 = (void **)v5;
    operator delete(v7);
  }
  sub_21B91AB9C("p", &v33);
  uint64_t v8 = v26;
  if ((v26 & 0x80u) == 0) {
    size_t v9 = v25;
  }
  else {
    size_t v9 = (void **)v25[0];
  }
  if ((v26 & 0x80u) != 0) {
    uint64_t v8 = (uint64_t)v25[1];
  }
  uint64_t v35 = v9;
  int v36 = (void **)v8;
  sub_21B91ACDC(&v32, (std::string *)"u");
  unint64_t v10 = v24;
  if ((v24 & 0x80u) == 0) {
    unint64_t v11 = v23;
  }
  else {
    unint64_t v11 = (void **)v23[0];
  }
  if ((v24 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v23[1];
  }
  size_t v37 = v11;
  unint64_t v38 = v10;
  sub_21B91AB9C("u", &v31);
  unint64_t v12 = v22;
  if ((v22 & 0x80u) == 0) {
    char v13 = v21;
  }
  else {
    char v13 = (void **)v21[0];
  }
  if ((v22 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)v21[1];
  }
  size_t v39 = v13;
  unint64_t v40 = v12;
  std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  unint64_t v15 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
    unint64_t v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  uint64_t v41 = v15;
  std::string::size_type v42 = size;
  uint64_t v43 = "6aa24xpnhm";
  uint64_t v44 = 10;
  sub_21B91AB9C("b", &v34);
  unint64_t v16 = v20;
  if ((v20 & 0x80u) == 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  if ((v20 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)__p[1];
  }
  size_t v45 = v17;
  unint64_t v46 = v16;
  sub_21B84F40C((uint64_t)&v35, (uint64_t)&v47, "_", 1uLL, &v27);
  long long v18 = std::string::append(&v27, ".bundle", 7uLL);
  *a1 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if (((char)v20 & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v22 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_40;
    }
  }
  else if (((char)v20 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (((char)v22 & 0x80000000) == 0)
  {
LABEL_34:
    if (((char)v24 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v21[0]);
  if (((char)v24 & 0x80000000) == 0)
  {
LABEL_35:
    if (((char)v26 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v23[0]);
  if (((char)v26 & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_43:
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
LABEL_42:
  operator delete(v25[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_43;
  }
}

void sub_21B91A458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a40);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a28);
  if ((a45 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

_DWORD *sub_21B91A560@<X0>(_DWORD *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    unint64_t v4 = *((void *)result + 14);
    unint64_t v5 = *((void *)result + 9);
    if (v4 < v5)
    {
      *((void *)result + 14) = v5;
      unint64_t v4 = v5;
    }
    uint64_t v6 = (const void *)*((void *)result + 8);
    size_t v7 = v4 - (void)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    uint64_t v6 = (const void *)*((void *)result + 5);
    size_t v7 = *((void *)result + 7) - (void)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_16:
    }
      sub_21B836090();
  }
  if (v7 >= 0x17)
  {
    uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v8 = v7 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v9 | 0x8000000000000000;
    *(void *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7) {
      goto LABEL_4;
    }
  }
  __n128 result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

void sub_21B91A65C(std::string *a1@<X8>)
{
  sub_21B91A174((std::string *)&v19[24], 512);
  int v2 = v19[47];
  if (v19[47] >= 0) {
    size_t v3 = v19[47];
  }
  else {
    size_t v3 = *(void *)&v19[32];
  }
  unint64_t v4 = v3 + 49;
  if (v3 + 49 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v4 <= 0x16)
  {
    qmemcpy(v19, "CV3D_LearnedFeatures_AtuHardnet_Descriptor_Model/", sizeof(v19));
    unint64_t v5 = v20;
LABEL_10:
    if (v2 >= 0) {
      size_t v7 = &v19[24];
    }
    else {
      size_t v7 = *(unsigned char **)&v19[24];
    }
    memmove(v5, v7, v3);
    goto LABEL_14;
  }
  uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v6 = v4 | 7;
  }
  *(void *)&v19[8] = v3 + 49;
  *(void *)&v19[16] = (v6 + 1) | 0x8000000000000000;
  *(void *)__int16 v19 = operator new(v6 + 1);
  qmemcpy(*(void **)v19, "CV3D_LearnedFeatures_AtuHardnet_Descriptor_Model/", 49);
  unint64_t v5 = (unsigned char *)(*(void *)v19 + 49);
  if (v3) {
    goto LABEL_10;
  }
LABEL_14:
  v5[v3] = 0;
  sub_21B844260((uint64_t)v15);
  std::string __p = operator new(0x20uLL);
  long long v12 = xmmword_21B9AE730;
  strcpy((char *)__p, "com.apple.LearnedFeatures");
  sub_21B97FE7C((uint64_t)&__p, (std::string::size_type)v19, v16, 1, &v13);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (v14) {
      goto LABEL_16;
    }
LABEL_19:
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_23;
  }
  operator delete(__p);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_16:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(a1, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    int v8 = v14;
    int v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (v8 && v9 < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v13;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
LABEL_23:
  v15[0] = *MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](&v18);
  if ((v19[23] & 0x80000000) == 0)
  {
    if ((v2 & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(*(void **)&v19[24]);
    return;
  }
  operator delete(*(void **)v19);
  if (v2 < 0) {
    goto LABEL_29;
  }
}

void sub_21B91A994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  sub_21B844544((uint64_t)&a23);
  if (*(char *)(v26 - 73) < 0)
  {
    operator delete(*(void **)(v26 - 96));
    if ((v25 & 0x80000000) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_21B91AA18(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  sub_21B91AE5C(a1);
  sub_21B91AE5C(a2);
  sub_21B91AE5C(a3);
  sub_21B84C93C(a4, (uint64_t)&v7, 3uLL);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v8 & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(v7);
      return;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9);
  if (v8 < 0) {
    goto LABEL_7;
  }
}

void sub_21B91AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a9);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_21B91AB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (1)
  {
    if (*((char *)v9 - 1) < 0) {
      operator delete((void *)*(v9 - 3));
    }
    v9 -= 3;
    if (v9 == &a9) {
      JUMPOUT(0x21B91AB68);
    }
  }
}

uint64_t sub_21B91AB9C(char *__s, int *a2)
{
  int v5 = 0;
  sub_21B89F534(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  void v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1) {
    sub_21B84C734();
  }
  char v8 = v7;
  ((void (*)(void **, _DWORD *))off_26CB9E970[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v5 == -1) {
    sub_21B84C734();
  }
  v7[0] = &v6;
  uint64_t result = ((uint64_t (*)(void *, _DWORD *))off_26CB9E9A0[v5])(v7, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void *, _DWORD *))off_26CB9E988[v5])(v7, v4);
  }
  return result;
}

void sub_21B91AC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91ACB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_21B84C6D8((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B91ACA8);
}

uint64_t sub_21B91ACDC(int *a1, std::string *a2)
{
  int v5 = 0;
  std::to_string(&v6, *a1);
  char v8 = (std::string *)v4;
  int v9 = &v6;
  char v10 = v4;
  unint64_t v11 = &v6;
  char v12 = &v6;
  size_t v7 = &v8;
  ((void (*)(std::string ***, unsigned char *))off_26CB9E970[0])(&v7, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  char v8 = (std::string *)v4;
  int v9 = a2;
  char v10 = v4;
  unint64_t v11 = a2;
  char v12 = a2;
  if (v5 == -1) {
    sub_21B84C734();
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, unsigned char *))off_26CB9E9B8[v5])(&v6, v4);
  if (v5 == -1) {
    sub_21B84C734();
  }
  char v8 = &v6;
  uint64_t result = ((uint64_t (*)(std::string **, unsigned char *))off_26CB9E9A0[v5])(&v8, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(std::string **, unsigned char *))off_26CB9E988[v5])(&v8, v4);
  }
  return result;
}

void sub_21B91AE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91AE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_21B84C6D8((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B91AE28);
}

uint64_t sub_21B91AE5C(unsigned int *a1)
{
  int v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  void v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  std::string v6 = v5;
  ((void (*)(void **, unsigned char *))off_26CB9E970[0])(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == -1) {
    sub_21B84C734();
  }
  v5[0] = &v4;
  uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_26CB9E9A0[v3])(v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_26CB9E988[v3])(v5, v2);
  }
  return result;
}

void sub_21B91AF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91AF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_21B84C6D8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_21B91AF88(std::string *a1@<X8>)
{
  v58[19] = *MEMORY[0x263EF8340];
  int v43 = 64;
  int v44 = 32;
  int v41 = 256;
  int v42 = 32;
  *(void *)&v39[32] = 2;
  unsigned int v40 = 0;
  sub_21B91AA18((unsigned int *)&v39[32], (unsigned int *)&v39[36], &v40, &__p);
  sub_21B84DF0C((uint64_t)__p, (uint64_t)v46, "_", 1uLL, &v28, v2, v3);
  std::string v4 = (void **)__p;
  if (__p)
  {
    int v5 = v46;
    std::string v6 = __p;
    if (v46 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      std::string v6 = __p;
    }
    unint64_t v46 = v4;
    operator delete(v6);
  }
  sub_21B91AB9C("p", &v44);
  std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &v38;
  }
  else {
    char v8 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v38.__r_.__value_.__l.__size_;
  }
  std::string __p = v8;
  unint64_t v46 = (void **)size;
  sub_21B91ACDC(&v43, (std::string *)"f");
  std::string::size_type v9 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v10 = &v37;
  }
  else {
    char v10 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v37.__r_.__value_.__l.__size_;
  }
  uint64_t v47 = v10;
  uint64_t v48 = v9;
  sub_21B91B7B4("fp", &v42);
  unint64_t v11 = v36;
  if ((v36 & 0x80u) == 0) {
    char v12 = v35;
  }
  else {
    char v12 = (void **)v35[0];
  }
  if ((v36 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)v35[1];
  }
  size_t v49 = v12;
  unint64_t v50 = v11;
  std::string::size_type v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  unsigned __int8 v14 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v13 = v28.__r_.__value_.__l.__size_;
    unsigned __int8 v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  int v51 = v14;
  std::string::size_type v52 = v13;
  uint64_t v53 = "aspdesc";
  uint64_t v54 = 7;
  sub_21B91AB9C("b", &v41);
  unint64_t v15 = v34;
  if ((v34 & 0x80u) == 0) {
    unint64_t v16 = v33;
  }
  else {
    unint64_t v16 = (void **)v33[0];
  }
  if ((v34 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)v33[1];
  }
  uint64_t v55 = v16;
  unint64_t v56 = (void *)v15;
  sub_21B84F40C((uint64_t)&__p, (uint64_t)v57, "_", 1uLL, (std::string *)v39);
  char v32 = 7;
  strcpy(__s, ".bundle");
  char v17 = std::string::append((std::string *)v39, __s, 7uLL);
  std::string v30 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v39[23] & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v34 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_58;
    }
  }
  else if ((v39[23] & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*(void **)v39);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_34:
    if (((char)v36 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v33[0]);
  if (((char)v36 & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v35[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_61:
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_62;
  }
LABEL_60:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_61;
  }
LABEL_37:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_38;
  }
LABEL_62:
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_38:
  int v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = v30.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 35;
  if (v19 + 35 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    qmemcpy(v39, "CV3D_LearnedFeatures_AspDesc_Model/", 35);
    int v21 = &v39[35];
LABEL_47:
    if (v18 >= 0) {
      int v25 = &v30;
    }
    else {
      int v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v25, v19);
    goto LABEL_51;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  unsigned __int8 v24 = (char *)operator new(v22 + 1);
  *(void *)&v39[8] = v19 + 35;
  *(void *)&v39[16] = v23 | 0x8000000000000000;
  *(void *)size_t v39 = v24;
  qmemcpy(v24, "CV3D_LearnedFeatures_AspDesc_Model/", 35);
  int v21 = v24 + 35;
  if (v19) {
    goto LABEL_47;
  }
LABEL_51:
  v21[v19] = 0;
  sub_21B844260((uint64_t)&__p);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_21B9AE730;
  strcpy(v38.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_21B97FE7C((uint64_t)&v38, (std::string::size_type)v39, &v47, 1, &v28);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_21B91A560(&__p, &v37);
    sub_21B836FF8("Failed to access model resource path: ", &v37, &v38);
    std::runtime_error::runtime_error(exception, &v38);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(a1, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v28;
  }
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v26 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v47 = v26;
  uint64_t v48 = MEMORY[0x263F8C318] + 16;
  if ((v57[15] & 0x80000000) != 0) {
    operator delete(v56);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](v58);
  if ((v39[23] & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0) {
      return;
    }
LABEL_72:
    operator delete(v30.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v39);
  if (v18 < 0) {
    goto LABEL_72;
  }
}

void sub_21B91B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a42 < 0)
  {
    operator delete(a37);
    if ((v61 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v61)
  {
LABEL_8:
    if (a15 && a14 < 0) {
      operator delete(a9);
    }
    sub_21B844544((uint64_t)&a60);
    if (a54 < 0) {
      operator delete(a49);
    }
    if (v62 < 0) {
      operator delete(a16);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v60);
  goto LABEL_8;
}

uint64_t sub_21B91B7B4(char *__s, int *a2)
{
  int v5 = 0;
  sub_21B919454(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  void v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1) {
    sub_21B84C734();
  }
  char v8 = v7;
  ((void (*)(void **, _DWORD *))off_26CB9E9D0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v5 == -1) {
    sub_21B84C734();
  }
  v7[0] = &v6;
  uint64_t result = ((uint64_t (*)(void *, _DWORD *))off_26CB9EA00[v5])(v7, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void *, _DWORD *))off_26CB9E9E8[v5])(v7, v4);
  }
  return result;
}

void sub_21B91B8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91B8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_21B84C6D8((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B91B8C0);
}

void sub_21B91B8F4(std::string *a1@<X8>)
{
  v56[19] = *MEMORY[0x263EF8340];
  int v41 = 128;
  int v42 = 32;
  int v39 = 256;
  int v40 = 32;
  *(void *)&v37[32] = 2;
  unsigned int v38 = 0;
  sub_21B91AA18((unsigned int *)&v37[32], (unsigned int *)&v37[36], &v38, &__p);
  sub_21B84DF0C((uint64_t)__p, (uint64_t)v44, "_", 1uLL, &v28, v2, v3);
  std::string v4 = (void **)__p;
  if (__p)
  {
    int v5 = v44;
    std::string v6 = __p;
    if (v44 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      std::string v6 = __p;
    }
    int v44 = v4;
    operator delete(v6);
  }
  sub_21B91AB9C("p", &v42);
  std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &v36;
  }
  else {
    char v8 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  std::string __p = v8;
  int v44 = (void **)size;
  sub_21B91ACDC(&v41, (std::string *)"f");
  std::string::size_type v9 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v10 = &v35;
  }
  else {
    char v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v35.__r_.__value_.__l.__size_;
  }
  size_t v45 = v10;
  uint64_t v46 = v9;
  sub_21B91B7B4("fp", &v40);
  unint64_t v11 = v34;
  if ((v34 & 0x80u) == 0) {
    char v12 = v33;
  }
  else {
    char v12 = (void **)v33[0];
  }
  if ((v34 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)v33[1];
  }
  uint64_t v47 = v12;
  unint64_t v48 = v11;
  std::string::size_type v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  unsigned __int8 v14 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v13 = v28.__r_.__value_.__l.__size_;
    unsigned __int8 v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  size_t v49 = v14;
  std::string::size_type v50 = v13;
  int v51 = "aspctxdesc";
  uint64_t v52 = 10;
  sub_21B91AB9C("b", &v39);
  unint64_t v15 = v32;
  if ((v32 & 0x80u) == 0) {
    unint64_t v16 = v31;
  }
  else {
    unint64_t v16 = (void **)v31[0];
  }
  if ((v32 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)v31[1];
  }
  uint64_t v53 = v16;
  uint64_t v54 = (void *)v15;
  sub_21B84F40C((uint64_t)&__p, (uint64_t)v55, "_", 1uLL, (std::string *)v37);
  char v17 = std::string::append((std::string *)v37, ".espresso.net", 0xDuLL);
  std::string v30 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v37[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v37);
    if (((char)v32 & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v34 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_57;
    }
  }
  else if (((char)v32 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v31[0]);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v33[0]);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_59:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_60;
  }
LABEL_58:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
LABEL_36:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_37;
  }
LABEL_60:
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_37:
  int v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = v30.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = v19 + 38;
  if (v19 + 38 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v20 <= 0x16)
  {
    qmemcpy(v37, "CV3D_LearnedFeatures_AspCtxDesc_Model/", 38);
    int v21 = &v37[38];
LABEL_46:
    if (v18 >= 0) {
      int v25 = &v30;
    }
    else {
      int v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v25, v19);
    goto LABEL_50;
  }
  uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v22 = v20 | 7;
  }
  uint64_t v23 = v22 + 1;
  unsigned __int8 v24 = (char *)operator new(v22 + 1);
  *(void *)&v37[8] = v19 + 38;
  *(void *)&v37[16] = v23 | 0x8000000000000000;
  *(void *)std::string v37 = v24;
  qmemcpy(v24, "CV3D_LearnedFeatures_AspCtxDesc_Model/", 38);
  int v21 = v24 + 38;
  if (v19) {
    goto LABEL_46;
  }
LABEL_50:
  v21[v19] = 0;
  sub_21B844260((uint64_t)&__p);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_21B9AE730;
  strcpy(v36.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_21B97FE7C((uint64_t)&v36, (std::string::size_type)v37, &v45, 1, &v28);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_21B91A560(&__p, &v35);
    sub_21B836FF8("Failed to access model resource path: ", &v35, &v36);
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(a1, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v28;
  }
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v26 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  size_t v45 = v26;
  uint64_t v46 = MEMORY[0x263F8C318] + 16;
  if ((v55[15] & 0x80000000) != 0) {
    operator delete(v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D495E70](v56);
  if ((v37[23] & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0) {
      return;
    }
LABEL_70:
    operator delete(v30.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v37);
  if (v18 < 0) {
    goto LABEL_70;
  }
}

void sub_21B91BEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v56 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v56)
  {
LABEL_8:
    if (a15 && a14 < 0) {
      operator delete(a9);
    }
    sub_21B844544((uint64_t)&a55);
    if (a49 < 0) {
      operator delete(a44);
    }
    if (v57 < 0) {
      operator delete(a16);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

uint64_t sub_21B91C0C8(uint64_t a1, uint64_t a2, long long *a3, long long *a4, int *a5, uint64_t a6)
{
  long long v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((unsigned char *)a4 + 20))
  {
    long long v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    int v9 = *(_DWORD *)a3;
    int v10 = *((_DWORD *)a3 + 1);
    if (v10) {
      int v11 = *(_DWORD *)a3;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    int v12 = v10 * v9;
    int v13 = *((_DWORD *)a3 + 2);
    if (v13) {
      int v14 = v12;
    }
    else {
      int v14 = 0;
    }
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(void *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(void *)(a1 + 40) = a2;
  int v16 = *a5;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a6 + 56))
  {
    *(void *)(a1 + 56) = &unk_26CB95DA8;
    uint64_t v17 = *(void *)(a6 + 8);
    int v18 = *(std::__shared_weak_count **)(a6 + 16);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = *(void *)(a6 + 40);
      int v20 = *(_DWORD *)(a6 + 48);
      __int16 v21 = *(_WORD *)(a6 + 52);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v19 = *(void *)(a6 + 40);
      int v20 = *(_DWORD *)(a6 + 48);
      __int16 v21 = *(_WORD *)(a6 + 52);
    }
    *(void *)(a1 + 64) = v17;
    *(void *)(a1 + 72) = v18;
    uint64_t v22 = *(void *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(void *)(a1 + 80) = v22;
    *(void *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v20;
    *(_WORD *)(a1 + 108) = v21;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

uint64_t sub_21B91C248(uint64_t result)
{
  uint64_t v1 = result;
  int64x2_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B91C2C4(uint64_t result)
{
  uint64_t v1 = result;
  int64x2_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B91C340(uint64_t result)
{
  uint64_t v1 = result;
  int64x2_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B91C3BC(uint64_t a1, uint64_t a2, long long *a3, long long *a4, int *a5, uint64_t a6)
{
  long long v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((unsigned char *)a4 + 20))
  {
    long long v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    int v9 = *(_DWORD *)a3;
    int v10 = *((_DWORD *)a3 + 1);
    if (v10) {
      int v11 = *(_DWORD *)a3;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    int v12 = v10 * v9;
    int v13 = *((_DWORD *)a3 + 2);
    if (v13) {
      int v14 = v12;
    }
    else {
      int v14 = 0;
    }
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(void *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(void *)(a1 + 40) = a2;
  int v16 = *a5;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a6 + 56))
  {
    *(void *)(a1 + 56) = &unk_26CB954E0;
    uint64_t v17 = *(void *)(a6 + 8);
    int v18 = *(std::__shared_weak_count **)(a6 + 16);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = *(void *)(a6 + 40);
      int v20 = *(_DWORD *)(a6 + 48);
      __int16 v21 = *(_WORD *)(a6 + 52);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v19 = *(void *)(a6 + 40);
      int v20 = *(_DWORD *)(a6 + 48);
      __int16 v21 = *(_WORD *)(a6 + 52);
    }
    *(void *)(a1 + 64) = v17;
    *(void *)(a1 + 72) = v18;
    uint64_t v22 = *(void *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(void *)(a1 + 80) = v22;
    *(void *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v20;
    *(_WORD *)(a1 + 108) = v21;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

uint64_t sub_21B91C544(uint64_t result)
{
  uint64_t v1 = result;
  int64x2_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B91C5C0(uint64_t result)
{
  uint64_t v1 = result;
  int64x2_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B91C63C(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    sub_21B8540D8(a1, (uint64_t)&v94);
    unint64_t v12 = v97;
    int v13 = &v94[*(_DWORD *)v98 * a2 + *(_DWORD *)&v98[4] * a3];
    if (DWORD1(v95)) {
      BOOL v14 = HIDWORD(*(void *)((char *)&v95 + 4)) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = *(void *)((char *)&v95 + 4);
    }
    uint64_t v103 = (uint64_t)v13;
    unint64_t v104 = v15;
    unint64_t v105 = v97;
    if (HIDWORD(v15) * HIDWORD(v97) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0x10:
      case 0x11:
        uint64_t v106 = v13;
        int v94 = (char *)&unk_26CB95798;
        if (HIDWORD(v15)) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        unint64_t v17 = v12 & 0xFFFFFFFF00000000;
        if (v16) {
          unint64_t v17 = 0;
        }
        *(void *)unint64_t v108 = v17 | (v15 != 0);
        sub_21B904780(&v106, &v104, (uint64_t *)v108, (uint64_t)&v95);
        *a4 = &unk_26CB954E0;
        sub_21B8F2D38((uint64_t)&v94, (uint64_t)(a4 + 1));
        break;
      case 0x12:
        int v94 = (char *)&unk_26CB95AB8;
        BOOL v31 = v15 == 0;
        if (!HIDWORD(v15)) {
          BOOL v31 = 1;
        }
        BOOL v32 = !v31;
        if (v31) {
          unint64_t v33 = 0;
        }
        else {
          unint64_t v33 = v12 & 0xFFFFFFFF00000000;
        }
        uint64_t v34 = v33 | (2 * (v15 != 0));
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        if (v32) {
          unint64_t v35 = v15;
        }
        else {
          unint64_t v35 = 0;
        }
        *(void *)&v108[4] = v35;
        unint64_t v36 = v35;
        *(_DWORD *)unint64_t v108 = 2;
        unint64_t v37 = *(void *)v108;
        unint64_t v38 = HIDWORD(v35);
        *(_DWORD *)unint64_t v108 = 1;
        *(void *)&v108[4] = v34;
        uint64_t v39 = *(void *)v108;
        unint64_t v40 = HIDWORD(v33);
        if (HIDWORD(v35) * HIDWORD(v33) == -1
          && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        long long v95 = 0uLL;
        uint64_t v96 = (uint64_t)v13;
        unint64_t v97 = v37;
        *(_DWORD *)size_t v98 = v38;
        *(void *)&v98[4] = v39;
        int v99 = v40;
        unint64_t v100 = v36;
        uint64_t v101 = v34;
        __int16 v102 = 0;
        *a4 = &unk_26CB954E0;
        sub_21B91E03C((uint64_t)&v94, (uint64_t)(a4 + 1));
        break;
      case 0x14:
        int v94 = (char *)&unk_26CB9EB20;
        BOOL v41 = v15 == 0;
        if (!HIDWORD(v15)) {
          BOOL v41 = 1;
        }
        BOOL v42 = !v41;
        if (v41) {
          unint64_t v43 = 0;
        }
        else {
          unint64_t v43 = v12 & 0xFFFFFFFF00000000;
        }
        uint64_t v44 = v43 | (4 * (v15 != 0));
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        if (v42) {
          unint64_t v45 = v15;
        }
        else {
          unint64_t v45 = 0;
        }
        *(void *)&v108[4] = v45;
        unint64_t v46 = v45;
        *(_DWORD *)unint64_t v108 = 4;
        unint64_t v47 = *(void *)v108;
        unint64_t v48 = HIDWORD(v45);
        *(_DWORD *)unint64_t v108 = 1;
        *(void *)&v108[4] = v44;
        uint64_t v49 = *(void *)v108;
        unint64_t v50 = HIDWORD(v43);
        if (HIDWORD(v45) * HIDWORD(v43) == -1
          && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        long long v95 = 0uLL;
        uint64_t v96 = (uint64_t)v13;
        unint64_t v97 = v47;
        *(_DWORD *)size_t v98 = v48;
        *(void *)&v98[4] = v49;
        int v99 = v50;
        unint64_t v100 = v46;
        uint64_t v101 = v44;
        __int16 v102 = 0;
        *a4 = &unk_26CB954E0;
        sub_21B91DEE0((uint64_t)&v94, (uint64_t)(a4 + 1));
        break;
      case 0x18:
        int v94 = (char *)&unk_26CB9EA28;
        BOOL v21 = v15 == 0;
        if (!HIDWORD(v15)) {
          BOOL v21 = 1;
        }
        BOOL v22 = !v21;
        if (v21) {
          unint64_t v23 = 0;
        }
        else {
          unint64_t v23 = v12 & 0xFFFFFFFF00000000;
        }
        uint64_t v24 = v23 | (4 * (v15 != 0));
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        if (v22) {
          unint64_t v25 = v15;
        }
        else {
          unint64_t v25 = 0;
        }
        *(void *)&v108[4] = v25;
        unint64_t v26 = v25;
        *(_DWORD *)unint64_t v108 = 4;
        unint64_t v27 = *(void *)v108;
        unint64_t v28 = HIDWORD(v25);
        *(_DWORD *)unint64_t v108 = 1;
        *(void *)&v108[4] = v24;
        uint64_t v29 = *(void *)v108;
        unint64_t v30 = HIDWORD(v23);
        if (HIDWORD(v25) * HIDWORD(v23) == -1
          && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        long long v95 = 0uLL;
        uint64_t v96 = (uint64_t)v13;
        unint64_t v97 = v27;
        *(_DWORD *)size_t v98 = v28;
        *(void *)&v98[4] = v29;
        int v99 = v30;
        unint64_t v100 = v26;
        uint64_t v101 = v24;
        __int16 v102 = 0;
        *a4 = &unk_26CB954E0;
        sub_21B91DC3C((uint64_t)&v94, (uint64_t)(a4 + 1));
        break;
      default:
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 138, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_21B984AC4);
        abort();
    }
  }
  else
  {
    if ((v8 & 0x20) == 0)
    {
      if ((v8 & 0x40) == 0)
      {
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 164, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_21B984AC4);
        abort();
      }
      if (*(unsigned char *)(a1 + 112))
      {
        if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
        {
          uint64_t v9 = *(void *)(a1 + 64);
          int v10 = *(std::__shared_weak_count **)(a1 + 72);
          if (v10)
          {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          (*(void (**)(uint64_t, void, const char *))(*(void *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        }
        int v11 = (uint64_t *)(a1 + 96);
      }
      else
      {
        int v11 = (uint64_t *)(a1 + 40);
      }
      int v62 = 0;
      unint64_t v63 = 0;
      int v64 = *(_DWORD *)(a1 + 36) >> 2;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
      {
        unint64_t v63 = *(void *)(a1 + 4);
        int v62 = *(_DWORD *)(a1 + 16);
      }
      unint64_t v65 = *(unsigned int *)(a1 + 24);
      unint64_t v66 = *(unsigned int *)(a1 + 28);
      unsigned int v67 = *(_DWORD *)(a1 + 32);
      uint64_t v68 = *v11;
      if (v62 * v64 != -1
        || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
      {
        unint64_t v69 = v65 >> 2;
        unint64_t v70 = v66 >> 2;
        unint64_t v71 = v69 & 0xC0000000FFFFFFFFLL | ((unint64_t)(v66 >> 2) << 32);
        uint64_t v72 = v68 + 4 * ((v67 >> 2) * a2 + v64 * a3);
        BOOL v73 = !v63 || HIDWORD(v63) == 0;
        uint64_t v74 = v73 ? 0 : v63;
        uint64_t v103 = v72;
        unint64_t v104 = v74;
        unint64_t v105 = v71;
        if (v70 * HIDWORD(v74) != -1
          || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          unint64_t v75 = v70 << 32;
          int v76 = *(_DWORD *)(a1 + 48);
          if ((v76 - 64) < 2)
          {
            int v94 = (char *)&unk_26CB9CF98;
            if (HIDWORD(v74)) {
              BOOL v84 = v74 == 0;
            }
            else {
              BOOL v84 = 1;
            }
            if (v84) {
              unint64_t v75 = 0;
            }
            sub_21B91E984((uint64_t)&v95, v72, &v104, v75 | (v74 != 0));
            *a4 = &unk_26CB954E0;
            sub_21B8E28E8((uint64_t)&v94, (uint64_t)(a4 + 1));
          }
          else if (v76 == 68)
          {
            int v94 = (char *)&unk_26CB9EE08;
            BOOL v85 = v74 == 0;
            if (!HIDWORD(v74)) {
              BOOL v85 = 1;
            }
            if (v85) {
              unint64_t v75 = 0;
            }
            uint64_t v86 = v75 | (4 * (v74 != 0));
            uint64_t v106 = 0;
            uint64_t v107 = 0;
            if (v85) {
              unint64_t v87 = 0;
            }
            else {
              unint64_t v87 = v74;
            }
            *(void *)&v108[4] = v87;
            unint64_t v88 = v87;
            *(_DWORD *)unint64_t v108 = 4;
            unint64_t v89 = *(void *)v108;
            unint64_t v90 = HIDWORD(v87);
            *(_DWORD *)unint64_t v108 = 1;
            *(void *)&v108[4] = v86;
            unint64_t v91 = HIDWORD(v75);
            if (HIDWORD(v87) * HIDWORD(v75) == -1
              && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
            {
              abort();
            }
            long long v95 = 0uLL;
            uint64_t v96 = v72;
            unint64_t v97 = v89;
            *(_DWORD *)size_t v98 = v90;
            *(void *)&v98[4] = *(void *)v108;
            int v99 = v91;
            unint64_t v100 = v88;
            uint64_t v101 = v86;
            __int16 v102 = 0;
            *a4 = &unk_26CB954E0;
            sub_21B91E828((uint64_t)&v94, (uint64_t)(a4 + 1));
          }
          else
          {
            if (v76 != 72)
            {
              sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 162, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_21B984AC4);
              abort();
            }
            int v94 = (char *)&unk_26CB9ED10;
            BOOL v77 = v74 == 0;
            if (!HIDWORD(v74)) {
              BOOL v77 = 1;
            }
            if (v77) {
              unint64_t v75 = 0;
            }
            uint64_t v78 = v75 | (4 * (v74 != 0));
            uint64_t v106 = 0;
            uint64_t v107 = 0;
            if (v77) {
              unint64_t v79 = 0;
            }
            else {
              unint64_t v79 = v74;
            }
            *(void *)&v108[4] = v79;
            unint64_t v80 = v79;
            *(_DWORD *)unint64_t v108 = 4;
            unint64_t v81 = *(void *)v108;
            unint64_t v82 = HIDWORD(v79);
            *(_DWORD *)unint64_t v108 = 1;
            *(void *)&v108[4] = v78;
            unint64_t v83 = HIDWORD(v75);
            if (HIDWORD(v79) * HIDWORD(v75) == -1
              && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
            {
              abort();
            }
            long long v95 = 0uLL;
            uint64_t v96 = v72;
            unint64_t v97 = v81;
            *(_DWORD *)size_t v98 = v82;
            *(void *)&v98[4] = *(void *)v108;
            int v99 = v83;
            unint64_t v100 = v80;
            uint64_t v101 = v78;
            __int16 v102 = 0;
            *a4 = &unk_26CB954E0;
            sub_21B91E584((uint64_t)&v94, (uint64_t)(a4 + 1));
          }
          goto LABEL_136;
        }
      }
LABEL_140:
      abort();
    }
    if (*(unsigned char *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
      {
        uint64_t v18 = *(void *)(a1 + 64);
        uint64_t v19 = *(std::__shared_weak_count **)(a1 + 72);
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        (*(void (**)(uint64_t, void, const char *))(*(void *)v18 + 88))(v18, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
      int v20 = (uint64_t *)(a1 + 96);
    }
    else
    {
      int v20 = (uint64_t *)(a1 + 40);
    }
    int v51 = 0;
    unint64_t v52 = 0;
    int v53 = *(_DWORD *)(a1 + 36) >> 1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
    {
      unint64_t v52 = *(void *)(a1 + 4);
      int v51 = *(_DWORD *)(a1 + 16);
    }
    unint64_t v54 = *(unsigned int *)(a1 + 28);
    unsigned int v55 = *(_DWORD *)(a1 + 32);
    uint64_t v93 = *v20;
    if (v51 * v53 == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_140;
    }
    unint64_t v56 = v54 >> 1;
    BOOL v57 = !v52 || HIDWORD(v52) == 0;
    unint64_t v58 = v57 ? 0 : v52;
    if (v56 * HIDWORD(v58) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_140;
    }
    if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFE) != 0x20)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 148, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    int v94 = (char *)&unk_26CB9EC18;
    BOOL v59 = v58 != 0;
    BOOL v60 = v58 == 0;
    if (!HIDWORD(v58)) {
      BOOL v60 = 1;
    }
    if (v60) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = v56 << 32;
    }
    uint64_t v103 = 0;
    unint64_t v104 = 0;
    if (v60) {
      unint64_t v58 = 0;
    }
    if (HIDWORD(v58) * HIDWORD(v61) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v95 = 0uLL;
    uint64_t v96 = v93 + 2 * ((v55 >> 1) * a2 + v53 * a3);
    unint64_t v97 = v58;
    *(void *)size_t v98 = v61 | v59;
    *(_WORD *)&v98[8] = 0;
    *a4 = &unk_26CB954E0;
    sub_21B91E2E0((uint64_t)&v94, (uint64_t)(a4 + 1));
  }
LABEL_136:
  size_t v92 = (std::__shared_weak_count *)*((void *)&v95 + 1);
  if (*((void *)&v95 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_21B91D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C544((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C2C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84FB74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C248((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B8E0468((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B84BE64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91D51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C340((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B91D558(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return v1;
  }
  if (!*(unsigned char *)(a1 + 112)
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 171, (uint64_t)"buffer.image", 12, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    goto LABEL_28;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 40))(a1 + 56);
  if (v4)
  {
    int v13 = 0;
    BOOL v14 = 0;
    unint64_t v12 = &unk_26CBA1808;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 56))(v3, &v12);
    if (v13)
    {
      uint64_t v6 = *v13;
      int v5 = (std::__shared_weak_count *)v13[1];
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v6)
      {
        uint64_t v1 = sub_21B9758AC((uint64_t)&v12, 0);
        unint64_t v12 = &unk_26CBA1808;
        long long v7 = v14;
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return v1;
      }
    }
  }
  else
  {
    int v13 = 0;
    BOOL v14 = 0;
  }
  unint64_t v12 = &unk_26CBA1808;
  int v8 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!sub_21B93C80C(a1 + 56)) {
      goto LABEL_18;
    }
LABEL_17:
    if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 179, (uint64_t)"!img::HasIOSurface(*buffer.image)", 33, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))goto LABEL_18; {
LABEL_28:
    }
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (sub_21B93C80C(a1 + 56)) {
    goto LABEL_17;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 108) && *(void *)(a1 + 96))
  {
    uint64_t v9 = *(void *)(a1 + 64);
    int v10 = *(std::__shared_weak_count **)(a1 + 72);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    (*(void (**)(uint64_t, void, const char *))(*(void *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return *(void *)(a1 + 96);
}

void sub_21B91D880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21B91D894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21B91D8A8(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

BOOL sub_21B91D8B8(_DWORD *a1)
{
  unsigned int v1 = a1[3];
  unsigned int v2 = a1[4];
  BOOL v4 = v2 < 2 && v1 < 2;
  if (!v4)
  {
    BOOL v5 = 0;
    int v6 = a1[6];
    if (v6) {
      goto LABEL_9;
    }
    return 0;
  }
  BOOL v5 = a1[2] < 2u;
  int v6 = a1[6];
  if (!v6) {
    return 0;
  }
LABEL_9:
  int v7 = a1[1];
  BOOL v8 = v7 != 0;
  if (!v7) {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    unsigned int v9 = a1[7];
    BOOL v8 = v9 >= v7 * v6;
    if (v9 < v7 * v6) {
      LOBYTE(v4) = 1;
    }
    if (!v4)
    {
      unsigned int v10 = a1[2] * v9;
      unsigned int v11 = a1[8];
      BOOL v8 = v11 >= v10;
      if (v2 >= 2 && v11 >= v10) {
        return a1[9] >= v11 * v1;
      }
    }
  }
  return v8;
}

BOOL sub_21B91D960(_DWORD *a1, int a2)
{
  unsigned int v2 = a1[10];
  if (((v2 >> 1) & 1) + (v2 & 1) + ((v2 >> 2) & 1) + ((v2 >> 3) & 1) > 1
    || ((v2 >> 4) & 1) + ((v2 >> 5) & 1) + ((v2 >> 6) & 1) > 1)
  {
    return 0;
  }
  if (v2)
  {
    unint64_t v3 = 1;
    BOOL v4 = 1;
    if (a2 != 16) {
      goto LABEL_8;
    }
LABEL_15:
    unsigned int v7 = 1;
    int v8 = 2;
    int v9 = (v2 & 0x40) >> 4;
    if ((v2 & 0x40) == 0) {
      int v9 = 1;
    }
    if ((v2 & 0x20) == 0) {
      int v8 = v9;
    }
    if ((v2 & 0x10) == 0) {
      unsigned int v7 = v8;
    }
    if (!v4) {
      LODWORD(v3) = 1;
    }
    unint64_t v3 = v7 * (unint64_t)v3;
    int v6 = a1 + 6;
    if (v3 == 1) {
      return v3 <= *v6;
    }
LABEL_24:
    unsigned int v10 = a1[4];
    unsigned int v11 = a1[6] % v3;
    if (v10 > 1 || a1[3] > 1u)
    {
      if (!v11
        && !(a1[7] % v3)
        && !(a1[8] % v3)
        && (v10 < 2 || !(a1[9] % v3)))
      {
        return v3 <= *v6;
      }
    }
    else if (!v11 && (a1[2] <= 1u || !(a1[7] % v3)))
    {
      return v3 <= *v6;
    }
    return 0;
  }
  unint64_t v3 = 2;
  BOOL v4 = (v2 & 0xC) != 0;
  if ((v2 & 2) != 0) {
    BOOL v4 = 1;
  }
  else {
    unint64_t v3 = 4 * ((v2 & 0xC) != 0);
  }
  if (a2 == 16) {
    goto LABEL_15;
  }
LABEL_8:
  if ((v2 & 0x70) != 0)
  {
    uint64_t v5 = 0;
    if ((v2 & 0x10) != 0 || (v2 & 0x70) != a2) {
      return v5;
    }
  }
  if (v4)
  {
    int v6 = a1 + 6;
    if (v3 == 1) {
      return v3 <= *v6;
    }
    goto LABEL_24;
  }
  int v6 = a1 + 6;
  unint64_t v3 = 1;
  return v3 <= *v6;
}

void sub_21B91DAF4(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91DB80()
{
  return 29;
}

uint64_t sub_21B91DB88(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B91DB90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B91DBAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B91DC3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 29;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91DD98(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91DE24()
{
  return 25;
}

uint64_t sub_21B91DE2C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B91DE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B91DE50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B91DEE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 25;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91E03C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 5;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91E184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91E198(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91E224()
{
  return 3;
}

uint64_t sub_21B91E22C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B91E234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B91E250(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B91E2E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 2, a1 + 32, 2, a1 + 40, 2);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 3;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91E43C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91E4C8()
{
  return 32;
}

uint64_t sub_21B91E4D0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B91E4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B91E4F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B91E584(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 4);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 32;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91E6E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91E76C()
{
  return 28;
}

uint64_t sub_21B91E774(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B91E77C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_21B91E798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21B91E828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21B972E90((uint64_t)&v9, 3, a1 + 32, 3, a1 + 44, 4);
  uint64_t v6 = *(void *)(a1 + 24);
  __int16 v7 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 28;
  *(_WORD *)(a2 + 44) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v8 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21B91E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91E984(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = *(void *)a3;
  if (v5) {
    uint64_t v6 = 0;
  }
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = v6;
  uint64_t v9 = a4;
  if (HIDWORD(v6) * HIDWORD(a4) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  sub_21B8F681C(a1, &v10, &v8);
  __int16 v7 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B91EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21B83A360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B91EAA0(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = &unk_26CB9EF00;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_21B91EB00(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF00;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B91EB70(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B91EBEC(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF20;
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

void sub_21B91EC88(uint64_t a1)
{
  sub_21B8471D4((uint64_t)v4, (uint64_t *)(a1 + 8));
  sub_21B8E24C8((uint64_t)__p, a1 + 128);
  __p[4] = *(void **)(a1 + 160);
  __int16 v3 = *(_WORD *)(a1 + 168);
  sub_21B929384((uint64_t)v4);
}

void sub_21B91EE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a12)
  {
    if (__p)
    {
      operator delete(__p);
      sub_21B848B68((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  sub_21B848B68((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_21B91EE54()
{
}

uint64_t sub_21B91EE68(uint64_t a1, uint64_t *a2, long long *a3)
{
  *(void *)a1 = &unk_26CB9F080;
  sub_21B8471D4(a1 + 8, a2);
  *(void *)a1 = &unk_26CB9EF78;
  sub_21B8F1420((unsigned char *)(a1 + 128), a3);
  return a1;
}

void sub_21B91EEEC(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  sub_21B848B68(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_21B91EF04(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);
  return a1;
}

void sub_21B91EFA4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9EF78;
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
LABEL_7:
  *(void *)a1 = &unk_26CB9F080;
  sub_21B848B68(a1 + 8);

  JUMPOUT(0x21D495F30);
}

void sub_21B91F064(uint64_t a1)
{
  sub_21B8471D4((uint64_t)v3, (uint64_t *)(a1 + 8));
  sub_21B8F1420(&v2, (long long *)(a1 + 128));
  sub_21B838278((uint64_t)v3);
}

void sub_21B91F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91F218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B848B68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91F22C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = *(_DWORD *)(a1 + 120);
  if (v4 == 2)
  {
    sub_21B91F640(a2, a1);
  }
  else if (v4 == 1)
  {
    long long v11 = *(_OWORD *)(a1 + 16);
    long long v27 = *(_OWORD *)a1;
    *(_OWORD *)unint64_t v28 = v11;
    *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 32);
    int v29 = *(_DWORD *)(a1 + 48);
    LOBYTE(v30) = 0;
    char v38 = 0;
    if (*(unsigned char *)(a1 + 112))
    {
      unint64_t v30 = &unk_26CB954E0;
      uint64_t v12 = *(void *)(a1 + 64);
      int v13 = *(std::__shared_weak_count **)(a1 + 72);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *(void *)(a1 + 96);
        int v15 = *(_DWORD *)(a1 + 104);
        __int16 v16 = *(_WORD *)(a1 + 108);
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 96);
        int v15 = *(_DWORD *)(a1 + 104);
        __int16 v16 = *(_WORD *)(a1 + 108);
      }
      uint64_t v31 = v12;
      BOOL v32 = v13;
      uint64_t v33 = *(void *)(a1 + 80);
      int v18 = *(_DWORD *)(a1 + 88);
      unint64_t v17 = &v35;
      uint64_t v35 = v14;
      int v34 = v18;
      int v36 = v15;
      __int16 v37 = v16;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v13, a1);
        std::__shared_weak_count::__release_weak(v13);
      }
      char v38 = 1;
      if ((_BYTE)v37 && v35)
      {
        if (v32)
        {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v32->__on_zero_shared)(v32, v2);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        (*(void (**)(uint64_t, void, const char *))(*(void *)v31 + 88))(v31, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
    }
    else
    {
      unint64_t v17 = (uint64_t *)&v28[24];
    }
    int v26 = *(_DWORD *)v28;
    int v23 = 4 * *(_DWORD *)&v28[20];
    char v24 = 1;
    uint64_t v19 = *v17;
    long long v25 = v27;
    int32x4_t v22 = vshlq_n_s32(*(int32x4_t *)&v28[4], 2uLL);
    int v21 = v29;
    sub_21B91C3BC(a2, v19, &v25, (long long *)v22.i8, &v21, (uint64_t)&v30);
    if (v38)
    {
      int v20 = v32;
      if (v32)
      {
        if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  else
  {
    if (v4)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 104, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 112) = 0;
    if (*(unsigned char *)(a1 + 112))
    {
      *(void *)(a2 + 56) = &unk_26CB954E0;
      uint64_t v6 = *(void *)(a1 + 64);
      __int16 v7 = *(std::__shared_weak_count **)(a1 + 72);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = *(void *)(a1 + 96);
        int v9 = *(_DWORD *)(a1 + 104);
        __int16 v10 = *(_WORD *)(a1 + 108);
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 96);
        int v9 = *(_DWORD *)(a1 + 104);
        __int16 v10 = *(_WORD *)(a1 + 108);
      }
      *(void *)(a2 + 64) = v6;
      *(void *)(a2 + 72) = v7;
      *(void *)(a2 + 80) = *(void *)(a1 + 80);
      *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 88);
      *(void *)(a2 + 96) = v8;
      *(_DWORD *)(a2 + 104) = v9;
      *(_WORD *)(a2 + 108) = v10;
      if (v7)
      {
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, a1);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      *(unsigned char *)(a2 + 112) = 1;
    }
  }
}

void sub_21B91F618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B842A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91F640(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 48))
  {
    case 1:
      __int16 v10 = &unk_26CB95798;
      sub_21B84C04C(a2, (uint64_t)&v11);
      sub_21B922704(a1, (uint64_t)&v10);
      goto LABEL_19;
    case 3:
      uint64_t v6 = &unk_26CB9EC18;
      sub_21B924860(a2, (uint64_t)&v7);
      sub_21B922828((uint64_t)&v10, (uint64_t)&v6);
      sub_21B92294C(a1, (uint64_t)&v10);
      goto LABEL_12;
    case 4:
      uint64_t v6 = &unk_26CB9CF98;
      sub_21B924E5C(a2, (uint64_t)&v7);
      sub_21B922A78((uint64_t)&v10, (uint64_t)&v6);
      sub_21B92304C(a1, (uint64_t)&v10);
      goto LABEL_12;
    case 5:
      __int16 v10 = &unk_26CB95AB8;
      sub_21B84FD5C(a2, (uint64_t)&v11);
      int v22 = 2;
      uint64_t v23 = v15;
      uint64_t v24 = 0x100000001;
      *(void *)&long long v19 = v13;
      DWORD2(v19) = v14;
      HIDWORD(v19) = v14 * HIDWORD(v15);
      int v20 = v14 * HIDWORD(v15);
      char v21 = 1;
      int v18 = 18;
      uint64_t v6 = &unk_26CB954E0;
      sub_21B91E03C((uint64_t)&v10, (uint64_t)&v7);
      char v9 = 1;
      sub_21B91C3BC(a1, 0, (long long *)&v22, &v19, &v18, (uint64_t)&v6);
      if (v9)
      {
        uint64_t v3 = v8;
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      goto LABEL_19;
    case 0x19:
      __int16 v10 = &unk_26CB9EB20;
      sub_21B925458(a2, (uint64_t)&v11);
      sub_21B922B9C(a1, (uint64_t)&v10);
      goto LABEL_19;
    case 0x1C:
      uint64_t v6 = &unk_26CB9EE08;
      sub_21B925AD4(a2, (uint64_t)&v7);
      sub_21B922CC8((uint64_t)&v10, (uint64_t)&v6);
      sub_21B92304C(a1, (uint64_t)&v10);
      goto LABEL_12;
    case 0x1D:
      __int16 v10 = &unk_26CB9EA28;
      sub_21B926258(a2, (uint64_t)&v11);
      sub_21B922DF4(a1, (uint64_t)&v10);
LABEL_19:
      long long v5 = v12;
      if (v12) {
        goto LABEL_20;
      }
      return;
    case 0x20:
      uint64_t v6 = &unk_26CB9ED10;
      sub_21B9268D4(a2, (uint64_t)&v7);
      sub_21B922F20((uint64_t)&v10, (uint64_t)&v6);
      sub_21B92304C(a1, (uint64_t)&v10);
LABEL_12:
      if (v17)
      {
        int v4 = v16;
        if (v16)
        {
          if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
      long long v5 = v8;
      if (!v8) {
        return;
      }
LABEL_20:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return;
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 87, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B91FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B91C248((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B91FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91FACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B91FAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B91C2C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91FB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B84FB74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B91FB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B91FB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21B91FB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B91FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21B84BE64((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21B91FC18(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  int v8 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 120);
  if (v3 != -1)
  {
    ((void (*)(char *, unsigned char *, uint64_t))off_26CB9F058[v3])(&v5, v7, a2);
    int v8 = v3;
  }
  sub_21B9054E4(a1, (uint64_t)v7, 1uLL);
  if (v8 != -1) {
    ((void (*)(char *, unsigned char *))off_26CB9F040[v8])(&v6, v7);
  }
  return a1;
}

void sub_21B91FCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a2) {
    sub_21B83DE50(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B91FD30(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[1];
  unint64_t v6 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
  if ((v5 - *a2) >> 7 != v6)
  {
    v146.__r_.__value_.__s.__data_[0] = 3;
    v187.__r_.__value_.__r.__words[0] = v6;
    sub_21B84080C((unint64_t *)&v187);
    size_t v115 = std::string::insert((std::string *)v150, 0, "Expected ", 9uLL);
    long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    size_t v117 = std::string::append(&v163, " model inputs but received ", 0x1BuLL);
    long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    v149.__r_.__value_.__r.__words[0] = (a2[1] - *a2) >> 7;
    sub_21B84080C((unint64_t *)&v149);
    if (v176[23] >= 0) {
      __int16 v119 = v176;
    }
    else {
      __int16 v119 = *(const std::string::value_type **)v176;
    }
    if (v176[23] >= 0) {
      std::string::size_type v120 = v176[23];
    }
    else {
      std::string::size_type v120 = *(void *)&v176[8];
    }
    uint64_t v121 = std::string::append(&__p, v119, v120);
    long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    *(void *)&v206[16] = *((void *)&v121->__r_.__value_.__l + 2);
    *(_OWORD *)int v206 = v122;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    sub_21B858B90(a3, &v146);
  }
  if (v5 == *a2)
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    v206[23] = 0;
    v206[0] = 0;
    sub_21B858B90(a3, &__p);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *a2;
  std::string::size_type v123 = 0;
  LOBYTE(v124) = 0;
  int v137 = -1;
  uint64_t v9 = *(unsigned int *)(v8 + 120);
  if (v9 != -1)
  {
    ((void (*)(std::string *, long long *))off_26CB9F058[v9])(&__p, &v124);
    int v137 = v9;
  }
  if (*(unsigned char *)(v7 + 80))
  {
    v150[0] = 0;
    int v162 = -1;
    if (v9 == -1) {
      goto LABEL_13;
    }
    ((void (*)(std::string *, unsigned char *, long long *))off_26CB9F058[v9])(&__p, v150, &v124);
    int v162 = v9;
    if (v9 == 2)
    {
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB954E0;
      long long v20 = *(_OWORD *)&v150[8];
      if (*(void *)&v150[16])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v150[16] + 8), 1uLL, memory_order_relaxed);
        uint64_t v21 = *((void *)&v151 + 1);
        int v22 = v152;
        __int16 v23 = v153;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v21 = *((void *)&v151 + 1);
        int v22 = v152;
        __int16 v23 = v153;
      }
      *(_OWORD *)&v187.__r_.__value_.__r.__words[1] = v20;
      uint64_t v188 = *(void *)&v150[24];
      int v189 = v151;
      uint64_t v190 = v21;
      int v191 = v22;
      __int16 v192 = v23;
      if (*((void *)&v20 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v20 + 1) + 16))(*((void *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
      sub_21B91F640((uint64_t)v176, (uint64_t)&v187);
      v163.__r_.__value_.__r.__words[0] = v123;
      *(_OWORD *)&v163.__r_.__value_.__r.__words[1] = *(_OWORD *)v176;
      long long v164 = *(_OWORD *)&v176[16];
      long long v165 = v177;
      int v166 = v178;
      LOBYTE(v167) = 0;
      char v175 = 0;
      if (v186)
      {
        unint64_t v167 = &unk_26CB954E0;
        uint64_t v24 = v179;
        long long v25 = v180;
        if (v180)
        {
          atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v26 = v183;
          int v27 = v184;
          __int16 v28 = v185;
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v26 = v183;
          int v27 = v184;
          __int16 v28 = v185;
        }
        uint64_t v168 = v24;
        uint64_t v169 = v25;
        uint64_t v170 = v181;
        int v171 = v182;
        uint64_t v172 = v26;
        int v173 = v27;
        __int16 v174 = v28;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        char v175 = 1;
      }
      sub_21B923178(a3, v7, (uint64_t)&v163);
    }
    if (v9 != 1)
    {
      if (!v9)
      {
        *(void *)int v206 = v123;
        *(_OWORD *)&v206[8] = *(_OWORD *)v150;
        *(_OWORD *)&v206[24] = *(_OWORD *)&v150[16];
        *(_OWORD *)&v206[40] = v151;
        LODWORD(v207) = v152;
        LOBYTE(v208) = 0;
        char v216 = 0;
        if (v161)
        {
          size_t v208 = &unk_26CB954E0;
          __int16 v10 = v154;
          uint64_t v11 = v155;
          if (v155)
          {
            atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v12 = v158;
            int v13 = v159;
            __int16 v14 = v160;
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v12 = v158;
            int v13 = v159;
            __int16 v14 = v160;
          }
          int v209 = v10;
          char v210 = v11;
          uint64_t v211 = v156;
          LODWORD(v212) = v157;
          uint64_t v213 = v12;
          int v214 = v13;
          __int16 v215 = v14;
          if (v11)
          {
            if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          char v216 = 1;
        }
        sub_21B923178(a3, v7, (uint64_t)v206);
      }
LABEL_13:
      *(void *)a3 = &unk_26CB95650;
      *(unsigned char *)(a3 + 8) = 0;
      operator new();
    }
    __p.__r_.__value_.__r.__words[0] = v123;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v150;
    long long v194 = *(_OWORD *)&v150[16];
    long long v195 = v151;
    int v196 = v152;
    LOBYTE(v197) = 0;
    char v205 = 0;
    if (v161)
    {
      int v197 = &unk_26CB954E0;
      uint64_t v15 = v154;
      __int16 v16 = v155;
      if (v155)
      {
        atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v17 = v158;
        int v18 = v159;
        __int16 v19 = v160;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v17 = v158;
        int v18 = v159;
        __int16 v19 = v160;
      }
      int64_t v198 = v15;
      uint64_t v199 = v16;
      uint64_t v200 = v156;
      int v201 = v157;
      uint64_t v202 = v17;
      int v203 = v18;
      __int16 v204 = v19;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      char v205 = 1;
    }
    if (*(unsigned char *)(v7 + 76))
    {
      int v29 = (uint64_t *)(v7 + 72);
      unsigned int v30 = v194;
      if (*(_DWORD *)(v7 + 72) != v194)
      {
        int v34 = " is expected to have a batch-size of ";
        uint64_t v35 = " but has ";
        goto LABEL_97;
      }
    }
    if (*(unsigned char *)(v7 + 68))
    {
      int v29 = (uint64_t *)(v7 + 64);
      unsigned int v30 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
      if (*(_DWORD *)(v7 + 64) != HIDWORD(__p.__r_.__value_.__r.__words[2]))
      {
        int v34 = " is expected to have ";
        uint64_t v35 = " planes but has ";
        goto LABEL_97;
      }
    }
    uint64_t v31 = (int *)(v7 + 32);
    if (!*(unsigned char *)(v7 + 44)) {
      goto LABEL_82;
    }
    int v29 = (uint64_t *)(v7 + 40);
    if (!*(unsigned char *)(v7 + 36))
    {
      unsigned int v30 = 4 * DWORD2(v194);
      if (*(_DWORD *)v29 != 4 * DWORD2(v194))
      {
        int v34 = " of unspecified format (assumed to be Gray8) is expected to have ";
        uint64_t v35 = " color components but has an incompatible pixel byte stride of ";
        goto LABEL_97;
      }
      goto LABEL_82;
    }
    unsigned int v32 = *v31;
    if ((*v31 & 0xF) != 0 && (v32 & 0x70) != 0)
    {
      if (v32)
      {
        unsigned int v33 = 1;
        if ((v32 & 0x10) != 0) {
          goto LABEL_72;
        }
      }
      else
      {
        if ((v32 & 2) == 0)
        {
          if ((v32 & 0xC) == 0)
          {
            if ((DWORD2(v194) & 0x3FFFFFFF) != 0) {
              goto LABEL_196;
            }
            goto LABEL_82;
          }
          unsigned int v33 = 4;
          if ((v32 & 0x10) != 0) {
            goto LABEL_72;
          }
          goto LABEL_67;
        }
        unsigned int v33 = 2;
        if ((v32 & 0x10) != 0)
        {
LABEL_72:
          if (v33 != (unint64_t)(4 * DWORD2(v194))) {
            goto LABEL_194;
          }
          goto LABEL_82;
        }
      }
LABEL_67:
      if ((v32 & 0x20) == 0)
      {
        if ((v32 & 0x40) != 0)
        {
          if (((unint64_t)(v32 & 0x40) >> 4) * v33 == 4 * DWORD2(v194)) {
            goto LABEL_82;
          }
        }
        else if (!(4 * DWORD2(v194)))
        {
          goto LABEL_82;
        }
LABEL_194:
        if (v32)
        {
          unsigned int v110 = 1;
          goto LABEL_206;
        }
        if ((v32 & 2) != 0)
        {
          unsigned int v110 = 2;
          goto LABEL_206;
        }
LABEL_196:
        if ((v32 & 0xC) == 0) {
          goto LABEL_213;
        }
        unsigned int v110 = 4;
LABEL_206:
        if ((v32 & 0x10) != 0)
        {
          LODWORD(v114) = 1;
          goto LABEL_212;
        }
        if ((v32 & 0x20) != 0)
        {
          LODWORD(v114) = 2;
          goto LABEL_212;
        }
        unint64_t v113 = v32 & 0x40;
        if (v113)
        {
          unint64_t v114 = v113 >> 4;
LABEL_212:
          unint64_t v36 = v114 * (unint64_t)v110;
          char v38 = " is expected to have ";
          LOBYTE(v37) = 1;
LABEL_214:
          uint64_t v39 = " bytes per pixel but has an incompatible pixel byte stride of ";
LABEL_215:
          sub_21B923BB8(a3, __p.__r_.__value_.__r.__words[0], v38, *v29, v36, v37, v39, 4 * DWORD2(v194));
        }
LABEL_213:
        unint64_t v36 = 0;
        LOBYTE(v37) = 0;
        char v38 = " is expected to have ";
        goto LABEL_214;
      }
      if (2 * v33 != 4 * DWORD2(v194)) {
        goto LABEL_194;
      }
LABEL_82:
      if (*(unsigned char *)(v7 + 52)
        && (int v29 = (uint64_t *)(v7 + 48),
            unsigned int v30 = HIDWORD(__p.__r_.__value_.__r.__words[1]),
            *(_DWORD *)(v7 + 48) != HIDWORD(__p.__r_.__value_.__r.__words[1])))
      {
        int v34 = " is expected to have a width of ";
        uint64_t v35 = " but has width ";
      }
      else
      {
        if (!*(unsigned char *)(v7 + 60)
          || (int v29 = (uint64_t *)(v7 + 56),
              unsigned int v30 = __p.__r_.__value_.__r.__words[2],
              *(_DWORD *)(v7 + 56) == LODWORD(__p.__r_.__value_.__r.__words[2])))
        {
          if (!*(unsigned char *)(v7 + 36))
          {
            v187.__r_.__value_.__s.__data_[0] = 0;
            v176[23] = 0;
            v176[0] = 0;
            sub_21B858B90(a3, &v187);
          }
          int v40 = *v31;
          if (*v31)
          {
            uint64_t v108 = sub_21B926FDC(v31);
            if (v109)
            {
              unint64_t v43 = v108;
              uint64_t v44 = (4 * DWORD2(v194));
              if (v108 == v44) {
                goto LABEL_200;
              }
            }
            else
            {
              LODWORD(v44) = 4 * DWORD2(v194);
              unint64_t v43 = 1;
            }
          }
          else
          {
            if ((v40 & 2) == 0)
            {
              if ((v40 & 4) != 0)
              {
                uint64_t v41 = sub_21B926FDC(v31);
                unint64_t v43 = v42 ? v41 : 4;
                uint64_t v44 = (4 * DWORD2(v194));
                if (v43 != v44)
                {
                  goto LABEL_218;
                }
              }
LABEL_200:
              v187.__r_.__value_.__s.__data_[0] = 0;
              v176[23] = 0;
              v176[0] = 0;
              sub_21B858B90(a3, &v187);
            }
            uint64_t v111 = sub_21B926FDC(v31);
            uint64_t v44 = (4 * DWORD2(v194));
            if (v112)
            {
              unint64_t v43 = v111;
              if (v111 == v44) {
                goto LABEL_200;
              }
            }
            else
            {
              unint64_t v43 = 2;
            }
          }
LABEL_218:
          sub_21B9242BC(a3, __p.__r_.__value_.__r.__words[0], v45, v43, v44);
        }
        int v34 = " is expected to have a height of ";
        uint64_t v35 = " but has height ";
      }
LABEL_97:
      sub_21B9236C0(a3, __p.__r_.__value_.__r.__words[0], v34, *v29, v35, v30);
    }
    if ((v32 & 0x10) != 0)
    {
      char v38 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      unint64_t v36 = 1;
    }
    else
    {
      if ((v32 & 0x60) == 0) {
        goto LABEL_82;
      }
      if ((v32 & 0x20) == 0)
      {
        if (((v32 >> 4) & 4) == 4 * DWORD2(v194)) {
          goto LABEL_82;
        }
        unint64_t v36 = (unint64_t)(v32 & 0x40) >> 4;
        unsigned int v37 = (*v31 & 0x40u) >> 6;
        char v38 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
LABEL_78:
        uint64_t v39 = " bytes per value but has an incompatible pixel byte stride of ";
        goto LABEL_215;
      }
      char v38 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      unint64_t v36 = 2;
    }
    LOBYTE(v37) = 1;
    goto LABEL_78;
  }
  if (*(unsigned char *)(v7 + 120)) {
    BOOL v46 = v9 == 0;
  }
  else {
    BOOL v46 = 0;
  }
  if (v46)
  {
    uint64_t v47 = *(void *)(v7 + 112);
    if (!v47) {
      sub_21B846100();
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v47 + 48))(v206);
    if (v206[8])
    {
      sub_21B84080C(&v123);
      unint64_t v48 = std::string::insert(&v187, 0, "Failure verifying model input ", 0x1EuLL);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(void *)&v176[16] = *((void *)&v48->__r_.__value_.__l + 2);
      *(_OWORD *)size_t v176 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      unint64_t v50 = std::string::append((std::string *)v176, ": ", 2uLL);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      int v52 = *(char *)(*(void *)&v206[16] + 23);
      if (v52 >= 0) {
        int v53 = *(const std::string::value_type **)&v206[16];
      }
      else {
        int v53 = **(const std::string::value_type ***)&v206[16];
      }
      if (v52 >= 0) {
        std::string::size_type v54 = *(unsigned __int8 *)(*(void *)&v206[16] + 23);
      }
      else {
        std::string::size_type v54 = *(void *)(*(void *)&v206[16] + 8);
      }
      unsigned int v55 = std::string::append(&v163, v53, v54);
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      sub_21B858B90(a3, &v206[8]);
    }
    *(void *)int v206 = &unk_26CB95650;
    BOOL v57 = *(std::__shared_weak_count **)&v206[24];
    if (*(void *)&v206[24]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v206[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!*(unsigned char *)(v7 + 160)) {
    goto LABEL_189;
  }
  if (v137)
  {
    if (v137 != 2)
    {
      if (v137 == 1)
      {
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 286, (uint64_t)&unk_21B997215, 0, (uint64_t)"DataView32f verification not yet implemented", 44, (void (*)(void **))sub_21B984AC4);
        abort();
      }
      goto LABEL_189;
    }
    *(void *)int v206 = &unk_26CB954E0;
    uint64_t v58 = *((void *)&v124 + 1);
    BOOL v59 = (std::__shared_weak_count *)v125;
    if ((void)v125)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
      uint64_t v60 = *((void *)&v126 + 1);
      int v61 = v127;
      __int16 v62 = v128;
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v60 = *((void *)&v126 + 1);
      int v61 = v127;
      __int16 v62 = v128;
    }
    *(void *)&v206[8] = v58;
    *(void *)&v206[16] = v59;
    *(void *)&v206[24] = *((void *)&v125 + 1);
    *(_DWORD *)&v206[32] = v126;
    *(void *)&v206[40] = v60;
    *(_DWORD *)&v206[48] = v61;
    *(_WORD *)&v206[52] = v62;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    uint64_t v68 = *(void *)(v7 + 152);
    if (!v68) {
      sub_21B846100();
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v68 + 48))(&__p);
    if (__p.__r_.__value_.__s.__data_[8])
    {
      sub_21B84080C(&v123);
      unint64_t v69 = std::string::insert(&v149, 0, "Failure verifying model input ", 0x1EuLL);
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v187.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      unint64_t v71 = std::string::append(&v187, ", image: ", 9uLL);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      *(void *)&v176[16] = *((void *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)size_t v176 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      int v73 = *(char *)(__p.__r_.__value_.__r.__words[2] + 23);
      if (v73 >= 0) {
        uint64_t v74 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[2];
      }
      else {
        uint64_t v74 = *(const std::string::value_type **)__p.__r_.__value_.__r.__words[2];
      }
      if (v73 >= 0) {
        std::string::size_type v75 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[2] + 23);
      }
      else {
        std::string::size_type v75 = *(void *)(__p.__r_.__value_.__r.__words[2] + 8);
      }
      int v76 = std::string::append((std::string *)v176, v74, v75);
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      sub_21B858B90(a3, &__p.__r_.__value_.__s.__data_[8]);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB95650;
    uint64_t v78 = (std::__shared_weak_count *)v194;
    if ((void)v194 && !atomic_fetch_add((atomic_ullong *volatile)(v194 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    unint64_t v79 = *(std::__shared_weak_count **)&v206[16];
    if (!*(void *)&v206[16]
      || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v206[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_189:
      __p.__r_.__value_.__s.__data_[0] = 0;
      v206[23] = 0;
      v206[0] = 0;
      sub_21B858B90(a3, &__p);
    }
    goto LABEL_188;
  }
  *(_OWORD *)int v206 = v124;
  *(_OWORD *)&v206[16] = v125;
  *(_OWORD *)&v206[32] = v126;
  *(_DWORD *)&v206[48] = v127;
  LOBYTE(v207) = 0;
  LOBYTE(v214) = 0;
  if (v136)
  {
    char v207 = &unk_26CB954E0;
    unint64_t v63 = v129;
    int v64 = v130;
    if (v130)
    {
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v65 = v133;
      int v66 = v134;
      __int16 v67 = v135;
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v65 = v133;
      int v66 = v134;
      __int16 v67 = v135;
    }
    size_t v208 = v63;
    int v209 = v64;
    char v210 = v131;
    LODWORD(v211) = v132;
    uint64_t v212 = v65;
    LODWORD(v213) = v66;
    WORD2(v213) = v67;
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
    LOBYTE(v214) = 1;
  }
  uint64_t v80 = *(unsigned int *)&v206[12];
  if (!*(_DWORD *)&v206[12] || (uint64_t v81 = *(unsigned int *)&v206[16], !*(_DWORD *)&v206[16]))
  {
    if (!(_BYTE)v214) {
      goto LABEL_189;
    }
    goto LABEL_186;
  }
  unint64_t v82 = 0;
  uint64_t v83 = v7 + 152;
  unint64_t v148 = 0;
LABEL_151:
  unint64_t v84 = 0;
  while (1)
  {
    unint64_t v147 = v84;
    sub_21B91C63C((uint64_t)v206, v148, v84, &__p);
    if (!*(void *)v83) {
      sub_21B846100();
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)v83 + 48))(&v163);
    if (v163.__r_.__value_.__s.__data_[8])
    {
      sub_21B84080C(&v123);
      unint64_t v87 = std::string::insert(&v142, 0, "Failure verifying model input ", 0x1EuLL);
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      unint64_t v89 = std::string::append(&v143, ", image ", 8uLL);
      long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      sub_21B84080C(&v148);
      if ((v141 & 0x80u) == 0) {
        unint64_t v91 = v140;
      }
      else {
        unint64_t v91 = (void **)v140[0];
      }
      if ((v141 & 0x80u) == 0) {
        std::string::size_type v92 = v141;
      }
      else {
        std::string::size_type v92 = (std::string::size_type)v140[1];
      }
      uint64_t v93 = std::string::append(&v144, (const std::string::value_type *)v91, v92);
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      long long v95 = std::string::append(&v145, " of batch ", 0xAuLL);
      long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      sub_21B84080C(&v147);
      if ((v139 & 0x80u) == 0) {
        unint64_t v97 = v138;
      }
      else {
        unint64_t v97 = (void **)v138[0];
      }
      if ((v139 & 0x80u) == 0) {
        std::string::size_type v98 = v139;
      }
      else {
        std::string::size_type v98 = (std::string::size_type)v138[1];
      }
      int v99 = std::string::append(&v146, (const std::string::value_type *)v97, v98);
      long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      uint64_t v101 = std::string::append(&v149, ": ", 2uLL);
      long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v187.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      int v103 = *(char *)(v163.__r_.__value_.__r.__words[2] + 23);
      if (v103 >= 0) {
        unint64_t v104 = (const std::string::value_type *)v163.__r_.__value_.__r.__words[2];
      }
      else {
        unint64_t v104 = *(const std::string::value_type **)v163.__r_.__value_.__r.__words[2];
      }
      if (v103 >= 0) {
        std::string::size_type v105 = *(unsigned __int8 *)(v163.__r_.__value_.__r.__words[2] + 23);
      }
      else {
        std::string::size_type v105 = *(void *)(v163.__r_.__value_.__r.__words[2] + 8);
      }
      uint64_t v106 = std::string::append(&v187, v104, v105);
      long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      *(void *)&v176[16] = *((void *)&v106->__r_.__value_.__l + 2);
      *(_OWORD *)size_t v176 = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      sub_21B858B90(a3, &v163.__r_.__value_.__s.__data_[8]);
    }
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CB95650;
    BOOL v85 = (std::__shared_weak_count *)v164;
    if ((void)v164 && !atomic_fetch_add((atomic_ullong *volatile)(v164 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      uint64_t v86 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
LABEL_158:
        if (!atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
    }
    else
    {
      uint64_t v86 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2]) {
        goto LABEL_158;
      }
    }
    if (v81 == ++v84)
    {
      while (++v82 != v80)
      {
        uint64_t v81 = *(unsigned int *)&v206[16];
        unint64_t v148 = v82;
        if (*(_DWORD *)&v206[16]) {
          goto LABEL_151;
        }
      }
      if (!(_BYTE)v214) {
        goto LABEL_189;
      }
LABEL_186:
      unint64_t v79 = v209;
      if (!v209 || atomic_fetch_add(&v209->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_189;
      }
LABEL_188:
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
      goto LABEL_189;
    }
  }
}

void sub_21B921850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  sub_21B92363C((uint64_t)&STACK[0x3E0]);
  sub_21B8EB9EC((uint64_t)&STACK[0x220]);
  sub_21B921E44((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21B921B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_21B921B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_21B92363C(v29 - 224);
  sub_21B8EB9EC((uint64_t)&STACK[0x220]);
  sub_21B921E44((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21B921B78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    if (SLOBYTE(STACK[0x337]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x320]);
      if (SLOBYTE(STACK[0x3F7]) < 0)
      {
LABEL_8:
        operator delete((void *)STACK[0x3E0]);
        if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_12;
      }
LABEL_11:
      if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
      {
LABEL_9:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
LABEL_14:
        }
          _Unwind_Resume(a1);
LABEL_13:
        operator delete((void *)STACK[0x220]);
        _Unwind_Resume(a1);
      }
LABEL_12:
      operator delete((void *)STACK[0x2A0]);
      if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if (SLOBYTE(STACK[0x337]) < 0)
  {
    goto LABEL_5;
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    goto LABEL_8;
  }
  goto LABEL_11;
}

void sub_21B921C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_21B83D090((void *)(v29 - 224));
  sub_21B921E44((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21B921C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (SLOBYTE(STACK[0x3F7]) < 0)
  {
    operator delete((void *)STACK[0x3E0]);
    if (SLOBYTE(STACK[0x2B7]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x2A0]);
      if (SLOBYTE(STACK[0x337]) < 0)
      {
LABEL_8:
        operator delete((void *)STACK[0x320]);
        if ((SLOBYTE(STACK[0x3B7]) & 0x80000000) == 0)
        {
LABEL_12:
          sub_21B83D090((void *)(v29 - 224));
          sub_21B921E44((uint64_t)&a29);
          _Unwind_Resume(a1);
        }
LABEL_11:
        operator delete((void *)STACK[0x3A0]);
        goto LABEL_12;
      }
LABEL_10:
      if ((SLOBYTE(STACK[0x3B7]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (SLOBYTE(STACK[0x2B7]) < 0)
  {
    goto LABEL_5;
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_21B921CEC()
{
  if ((SLOBYTE(STACK[0x3B7]) & 0x80000000) == 0) {
    JUMPOUT(0x21B921CD4);
  }
  JUMPOUT(0x21B921CCCLL);
}

void sub_21B921CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_21B921D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 - 201) < 0)
  {
    operator delete(*(void **)(v29 - 224));
    sub_21B921E44((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21B921E34);
}

void sub_21B921D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 + 23) < 0) {
    operator delete(*(void **)v29);
  }
  MEMORY[0x21D495F30](v29, 0x1012C40EC159624);
  sub_21B8EB9EC((uint64_t)&STACK[0x220]);
  sub_21B921E44((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21B921D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_21B921D98()
{
  uint64_t v1 = LODWORD(STACK[0x298]);
  if (v1 != -1) {
    ((void (*)(uint64_t, unint64_t *))off_26CB9F040[v1])(v0 - 224, &STACK[0x220]);
  }
  JUMPOUT(0x21B921E34);
}

void sub_21B921DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_21B921DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  if (a45 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26CB9F040[a45])(v46 - 224, v45);
  }
  _Unwind_Resume(a1);
}

void sub_21B921E14()
{
}

uint64_t sub_21B921E44(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 128);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9F040[v2])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

void *sub_21B921EA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v3;
  v10[2] = *(_OWORD *)(a1 + 32);
  int v11 = *(_DWORD *)(a1 + 48);
  LOBYTE(v12) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v12 = &unk_26CB954E0;
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *(void *)(a1 + 96);
      int v7 = *(_DWORD *)(a1 + 104);
      __int16 v8 = *(_WORD *)(a1 + 108);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 96);
      int v7 = *(_DWORD *)(a1 + 104);
      __int16 v8 = *(_WORD *)(a1 + 108);
    }
    uint64_t v13 = v4;
    __int16 v14 = v5;
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(a1 + 88);
    uint64_t v17 = v6;
    int v18 = v7;
    __int16 v19 = v8;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    char v20 = 1;
  }
  int v21 = 0;
  uint64_t result = sub_21B91FC18(a2, (uint64_t)v10);
  if (v21 != -1) {
    return (void *)((uint64_t (*)(char *, _OWORD *))off_26CB9F040[v21])(&v22, v10);
  }
  return result;
}

void sub_21B921FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B922000@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v3;
  v10[2] = *(_OWORD *)(a1 + 32);
  int v11 = *(_DWORD *)(a1 + 48);
  LOBYTE(v12) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v12 = &unk_26CB954E0;
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *(void *)(a1 + 96);
      int v7 = *(_DWORD *)(a1 + 104);
      __int16 v8 = *(_WORD *)(a1 + 108);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 96);
      int v7 = *(_DWORD *)(a1 + 104);
      __int16 v8 = *(_WORD *)(a1 + 108);
    }
    uint64_t v13 = v4;
    __int16 v14 = v5;
    uint64_t v15 = *(void *)(a1 + 80);
    int v16 = *(_DWORD *)(a1 + 88);
    uint64_t v17 = v6;
    int v18 = v7;
    __int16 v19 = v8;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    char v20 = 1;
  }
  int v21 = 1;
  uint64_t result = sub_21B91FC18(a2, (uint64_t)v10);
  if (v21 != -1) {
    return (void *)((uint64_t (*)(char *, _OWORD *))off_26CB9F040[v21])(&v22, v10);
  }
  return result;
}

void sub_21B922150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B922164(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      int v11 = &unk_26CB95798;
      sub_21B84C04C(a1, (uint64_t)&v12);
      sub_21B922704((uint64_t)v16, (uint64_t)&v11);
      sub_21B921EA0((uint64_t)v16, a2);
      goto LABEL_18;
    case 3:
      __int16 v8 = &unk_26CB9EC18;
      sub_21B924860(a1, (uint64_t)&v9);
      sub_21B922828((uint64_t)&v11, (uint64_t)&v8);
      uint64_t v3 = sub_21B92294C((uint64_t)v16, (uint64_t)&v11);
      sub_21B921EA0(v3, a2);
      if (v18)
      {
        uint64_t v4 = v17;
        if (v17)
        {
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
      if (v15)
      {
        uint64_t v5 = v14;
        if (v14)
        {
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      uint64_t v6 = v10;
      if (!v10) {
        return;
      }
      goto LABEL_23;
    case 4:
      int v11 = &unk_26CB9CF98;
      sub_21B924E5C(a1, (uint64_t)&v12);
      sub_21B922A78((uint64_t)v16, (uint64_t)&v11);
      sub_21B922000((uint64_t)v16, a2);
      goto LABEL_18;
    case 0x19:
      int v11 = &unk_26CB9EB20;
      sub_21B925458(a1, (uint64_t)&v12);
      sub_21B922B9C((uint64_t)v16, (uint64_t)&v11);
      sub_21B921EA0((uint64_t)v16, a2);
      goto LABEL_18;
    case 0x1C:
      int v11 = &unk_26CB9EE08;
      sub_21B925AD4(a1, (uint64_t)&v12);
      sub_21B922CC8((uint64_t)v16, (uint64_t)&v11);
      sub_21B922000((uint64_t)v16, a2);
      goto LABEL_18;
    case 0x1D:
      int v11 = &unk_26CB9EA28;
      sub_21B926258(a1, (uint64_t)&v12);
      sub_21B922DF4((uint64_t)v16, (uint64_t)&v11);
      sub_21B921EA0((uint64_t)v16, a2);
      goto LABEL_18;
    case 0x20:
      int v11 = &unk_26CB9ED10;
      sub_21B9268D4(a1, (uint64_t)&v12);
      sub_21B922F20((uint64_t)v16, (uint64_t)&v11);
      sub_21B922000((uint64_t)v16, a2);
LABEL_18:
      if (v18)
      {
        int v7 = v17;
        if (v17)
        {
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      uint64_t v6 = v13;
      if (v13)
      {
LABEL_23:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      return;
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 340, (uint64_t)&unk_21B997215, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21B984AC4);
      abort();
  }
}

void sub_21B922524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_21B842A94(v2 - 136);
  sub_21B8FAE84((uint64_t)va1);
  sub_21B91C340((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B91C340((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21B842A94(v9 - 136);
  sub_21B84BE64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21B84BE64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922704(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  int v14 = 1;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  LODWORD(v11) = 1;
  *(void *)((char *)&v11 + 4) = v4;
  HIDWORD(v11) = HIDWORD(v4) * HIDWORD(v3);
  int v12 = HIDWORD(v4) * HIDWORD(v3);
  char v13 = 1;
  int v10 = 17;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B8F2D38(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B922828(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  int v14 = 1;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  LODWORD(v11) = 1;
  *(void *)((char *)&v11 + 4) = v4;
  HIDWORD(v11) = HIDWORD(v4) * HIDWORD(v3);
  int v12 = HIDWORD(v4) * HIDWORD(v3);
  char v13 = 1;
  int v10 = 33;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B91E2E0(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B92294C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v4 = (uint64_t *)(a2 + 96);
    if (*(unsigned char *)(a2 + 108)) {
      BOOL v5 = *(void *)(a2 + 96) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = *(void *)(a2 + 64);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a2 + 40);
  }
  uint64_t v8 = *v4;
  int v9 = 2 * *(_DWORD *)(a2 + 36);
  int32x4_t v12 = vaddq_s32(*(int32x4_t *)(a2 + 20), *(int32x4_t *)(a2 + 20));
  int v13 = v9;
  char v14 = 1;
  int v11 = *(_DWORD *)(a2 + 48);
  return sub_21B91C3BC(a1, v8, (long long *)a2, (long long *)v12.i8, &v11, a2 + 56);
}

void sub_21B922A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  int v14 = 1;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  LODWORD(v11) = 1;
  *(void *)((char *)&v11 + 4) = v4;
  HIDWORD(v11) = HIDWORD(v4) * HIDWORD(v3);
  int v12 = HIDWORD(v4) * HIDWORD(v3);
  char v13 = 1;
  int v10 = 65;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B8E28E8(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    BOOL v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B922B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  int v4 = *(_DWORD *)(a2 + 52);
  int v14 = 4;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  *(void *)&long long v11 = *(void *)(a2 + 44);
  DWORD2(v11) = v4;
  HIDWORD(v11) = v4 * HIDWORD(v3);
  int v12 = v4 * HIDWORD(v3);
  char v13 = 1;
  int v10 = 20;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B91DEE0(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    BOOL v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B844928((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  int v4 = *(_DWORD *)(a2 + 52);
  int v14 = 4;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  *(void *)&long long v11 = *(void *)(a2 + 44);
  DWORD2(v11) = v4;
  HIDWORD(v11) = v4 * HIDWORD(v3);
  int v12 = v4 * HIDWORD(v3);
  char v13 = 1;
  int v10 = 68;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B91E828(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    BOOL v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B844928((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  int v4 = *(_DWORD *)(a2 + 52);
  int v14 = 4;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  *(void *)&long long v11 = *(void *)(a2 + 44);
  DWORD2(v11) = v4;
  HIDWORD(v11) = v4 * HIDWORD(v3);
  int v12 = v4 * HIDWORD(v3);
  char v13 = 1;
  int v10 = 24;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B91DC3C(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    BOOL v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B922F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B844928((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B922F20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  int v4 = *(_DWORD *)(a2 + 52);
  int v14 = 4;
  uint64_t v15 = v3;
  uint64_t v16 = 0x100000001;
  *(void *)&long long v11 = *(void *)(a2 + 44);
  DWORD2(v11) = v4;
  HIDWORD(v11) = v4 * HIDWORD(v3);
  int v12 = v4 * HIDWORD(v3);
  char v13 = 1;
  int v10 = 72;
  uint64_t v6 = &unk_26CB954E0;
  sub_21B91E584(a2, (uint64_t)&v7);
  char v9 = 1;
  sub_21B91C3BC(a1, 0, (long long *)&v14, &v11, &v10, (uint64_t)&v6);
  if (v9)
  {
    BOOL v5 = v8;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21B923038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B844928((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B92304C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    int v4 = (uint64_t *)(a2 + 96);
    if (*(unsigned char *)(a2 + 108)) {
      BOOL v5 = *(void *)(a2 + 96) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = *(void *)(a2 + 64);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    int v4 = (uint64_t *)(a2 + 40);
  }
  uint64_t v8 = *v4;
  int v9 = 4 * *(_DWORD *)(a2 + 36);
  int32x4_t v12 = vshlq_n_s32(*(int32x4_t *)(a2 + 20), 2uLL);
  int v13 = v9;
  char v14 = 1;
  int v11 = *(_DWORD *)(a2 + 48);
  return sub_21B91C3BC(a1, v8, (long long *)a2, (long long *)v12.i8, &v11, a2 + 56);
}

void sub_21B923178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 76))
  {
    unsigned int v5 = *(_DWORD *)(a3 + 24);
    if (*(_DWORD *)(a2 + 72) != v5)
    {
      unint64_t v15 = *(void *)a3;
      uint64_t v16 = *(void *)(a2 + 72);
      uint64_t v17 = " is expected to have a batch-size of ";
      char v18 = " but has ";
      goto LABEL_65;
    }
  }
  if (*(unsigned char *)(a2 + 68))
  {
    unsigned int v5 = *(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(a2 + 64) != v5)
    {
      unint64_t v15 = *(void *)a3;
      uint64_t v16 = *(void *)(a2 + 64);
      uint64_t v17 = " is expected to have ";
      char v18 = " planes but has ";
      goto LABEL_65;
    }
  }
  uint64_t v6 = (int *)(a2 + 32);
  if (!*(unsigned char *)(a2 + 44)) {
    goto LABEL_50;
  }
  if (!*(unsigned char *)(a2 + 36))
  {
    unsigned int v5 = *(_DWORD *)(a3 + 32);
    if (*(_DWORD *)(a2 + 40) != v5)
    {
      unint64_t v15 = *(void *)a3;
      uint64_t v16 = *(void *)(a2 + 40);
      uint64_t v17 = " of unspecified format (assumed to be Gray8) is expected to have ";
      char v18 = " color components but has an incompatible pixel byte stride of ";
      goto LABEL_65;
    }
LABEL_50:
    if (*(unsigned char *)(a2 + 52) && (unsigned int v5 = *(_DWORD *)(a3 + 12), *(_DWORD *)(a2 + 48) != v5))
    {
      unint64_t v15 = *(void *)a3;
      uint64_t v16 = *(void *)(a2 + 48);
      uint64_t v17 = " is expected to have a width of ";
      char v18 = " but has width ";
    }
    else
    {
      if (!*(unsigned char *)(a2 + 60) || (unsigned int v5 = *(_DWORD *)(a3 + 16), *(_DWORD *)(a2 + 56) == v5))
      {
        if (!*(unsigned char *)(a2 + 36))
        {
          char v38 = 0;
          sub_21B858B90(a1, &v38);
        }
        int v25 = *v6;
        if ((*v6 & 1) == 0)
        {
          if ((v25 & 2) == 0)
          {
            if ((v25 & 4) != 0)
            {
              uint64_t v26 = sub_21B926FDC(v6);
              unint64_t v28 = v27 ? v26 : 4;
              uint64_t v29 = *(unsigned int *)(a3 + 32);
              if (v28 != v29)
              {
                goto LABEL_93;
              }
            }
LABEL_91:
            char v38 = 0;
            sub_21B858B90(a1, &v38);
          }
          uint64_t v33 = sub_21B926FDC(v6);
          if (v34) {
            unint64_t v28 = v33;
          }
          else {
            unint64_t v28 = 2;
          }
          uint64_t v29 = *(unsigned int *)(a3 + 32);
          if (v28 == v29) {
            goto LABEL_91;
          }
LABEL_93:
          unint64_t v37 = *(void *)a3;
          sub_21B9242BC(a1, v37, v30, v28, v29);
        }
        if ((v25 & 0x10) == 0)
        {
          if ((v25 & 0x20) != 0)
          {
            unint64_t v28 = 2;
            uint64_t v29 = *(unsigned int *)(a3 + 32);
            if (v29 == 2) {
              goto LABEL_91;
            }
LABEL_92:
            goto LABEL_93;
          }
          unint64_t v31 = v25 & 0x40;
          if (v31)
          {
            unint64_t v28 = v31 >> 4;
            uint64_t v29 = *(unsigned int *)(a3 + 32);
            if (v31 >> 4 == v29) {
              goto LABEL_91;
            }
            goto LABEL_92;
          }
        }
        unint64_t v28 = 1;
        uint64_t v29 = *(unsigned int *)(a3 + 32);
        if (v29 == 1) {
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      unint64_t v15 = *(void *)a3;
      uint64_t v16 = *(void *)(a2 + 56);
      uint64_t v17 = " is expected to have a height of ";
      char v18 = " but has height ";
    }
LABEL_65:
    sub_21B9236C0(a1, v15, v17, v16, v18, v5);
  }
  unsigned int v7 = *v6;
  if ((*v6 & 0xF) == 0 || (*v6 & 0x70) == 0)
  {
    if ((v7 & 0x10) != 0)
    {
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if (v10 == 1) {
        goto LABEL_50;
      }
      unint64_t v11 = *(void *)a3;
      uint64_t v12 = *(void *)(a2 + 40);
      unint64_t v13 = 1;
      LOBYTE(v14) = 1;
    }
    else
    {
      if ((v7 & 0x60) == 0) {
        goto LABEL_50;
      }
      int v9 = (v7 >> 4) & 4;
      if ((v7 & 0x20) != 0) {
        int v9 = 2;
      }
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if (v9 == v10) {
        goto LABEL_50;
      }
      unint64_t v11 = *(void *)a3;
      uint64_t v12 = *(void *)(a2 + 40);
      if ((v7 & 0x20) != 0) {
        unint64_t v13 = 2;
      }
      else {
        unint64_t v13 = (unint64_t)(v7 & 0x40) >> 4;
      }
      if ((v7 & 0x20) != 0) {
        LOBYTE(v14) = 1;
      }
      else {
        unsigned int v14 = (*v6 & 0x40u) >> 6;
      }
    }
    char v20 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
    int v21 = " bytes per value but has an incompatible pixel byte stride of ";
    uint64_t v22 = a1;
    unint64_t v23 = v11;
LABEL_36:
    sub_21B923BB8(v22, v23, v20, v12, v13, v14, v21, v10);
  }
  if (v7)
  {
    unsigned int v19 = 1;
    if ((v7 & 0x10) != 0) {
      goto LABEL_43;
    }
  }
  else
  {
    if ((v7 & 2) == 0)
    {
      if ((v7 & 0xC) == 0)
      {
        LODWORD(v10) = *(_DWORD *)(a3 + 32);
        if (v10)
        {
          unint64_t v24 = *(void *)a3;
          uint64_t v12 = *(void *)(a2 + 40);
LABEL_76:
          if ((v7 & 0xC) == 0) {
            goto LABEL_100;
          }
          unsigned int v32 = 4;
          if ((v7 & 0x10) != 0) {
            goto LABEL_97;
          }
LABEL_87:
          if ((v7 & 0x20) != 0)
          {
            LODWORD(v36) = 2;
            goto LABEL_99;
          }
          unint64_t v35 = v7 & 0x40;
          if (v35)
          {
            unint64_t v36 = v35 >> 4;
LABEL_99:
            unint64_t v13 = v36 * (unint64_t)v32;
            LOBYTE(v14) = 1;
            goto LABEL_101;
          }
LABEL_100:
          unint64_t v13 = 0;
          LOBYTE(v14) = 0;
LABEL_101:
          char v20 = " is expected to have ";
          int v21 = " bytes per pixel but has an incompatible pixel byte stride of ";
          uint64_t v22 = a1;
          unint64_t v23 = v24;
          goto LABEL_36;
        }
        goto LABEL_50;
      }
      unsigned int v19 = 4;
      if ((v7 & 0x10) != 0) {
        goto LABEL_43;
      }
      goto LABEL_38;
    }
    unsigned int v19 = 2;
    if ((v7 & 0x10) != 0)
    {
LABEL_43:
      uint64_t v10 = *(unsigned int *)(a3 + 32);
      if (v19 != v10) {
        goto LABEL_74;
      }
      goto LABEL_50;
    }
  }
LABEL_38:
  if ((v7 & 0x20) != 0)
  {
    uint64_t v10 = *(unsigned int *)(a3 + 32);
    if (2 * v19 != v10)
    {
LABEL_74:
      unint64_t v24 = *(void *)a3;
      uint64_t v12 = *(void *)(a2 + 40);
      if (v7)
      {
        unsigned int v32 = 1;
        if ((v7 & 0x10) == 0) {
          goto LABEL_87;
        }
      }
      else
      {
        if ((v7 & 2) == 0) {
          goto LABEL_76;
        }
        unsigned int v32 = 2;
        if ((v7 & 0x10) == 0) {
          goto LABEL_87;
        }
      }
LABEL_97:
      LODWORD(v36) = 1;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    uint64_t v10 = *(unsigned int *)(a3 + 32);
    if (((unint64_t)(v7 & 0x40) >> 4) * v19 != v10) {
      goto LABEL_74;
    }
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a3 + 32);
    if (v10) {
      goto LABEL_74;
    }
  }
  goto LABEL_50;
}

void sub_21B92361C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B92363C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 120))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 80);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_21B9236C0(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, const char *a5, unsigned int a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v16 = a2;
  uint64_t v17 = "Input ";
  unsigned int v14 = a5;
  unint64_t v15 = a3;
  unsigned int v13 = a6;
  char v12 = 3;
  int v19 = 0;
  sub_21B85AC74(v18, &v17);
  if (v19 == -1) {
    sub_21B84C734();
  }
  int v21 = &v20;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v19])(v22, &v21, v18);
  if (v19 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v19])(&v21, v18);
  }
  sub_21B84080C(&v16);
  int v19 = 0;
  if (v15) {
    sub_21B85AC74(v18, &v15);
  }
  else {
    sub_21B84CA68(v18, "nullptr");
  }
  if (v19 == -1) {
    sub_21B84C734();
  }
  int v21 = &v20;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v19])(&v26, &v21, v18);
  if (v19 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v19])(&v21, v18);
  }
  int v19 = 0;
  sub_21B924750((uint64_t)v18, a4, SBYTE4(a4));
  if (v19 == -1) {
    sub_21B84C734();
  }
  int v21 = &v20;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v19])(&v28, &v21, v18);
  if (v19 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v19])(&v21, v18);
  }
  int v19 = 0;
  if (v14) {
    sub_21B85AC74(v18, &v14);
  }
  else {
    sub_21B84CA68(v18, "nullptr");
  }
  if (v19 == -1) {
    sub_21B84C734();
  }
  int v21 = &v20;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v19])(&v30, &v21, v18);
  if (v19 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v19])(&v21, v18);
  }
  sub_21B91AE5C(&v13);
  sub_21B84C93C(v10, (uint64_t)v22, 6uLL);
  if (v33 < 0)
  {
    operator delete(v32);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((v31 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v28);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_31:
    operator delete(v22[0]);
LABEL_25:
    sub_21B84DF0C((uint64_t)v10[0], (uint64_t)v10[1], 0, 0, &__p, v8, v9);
    sub_21B858B90(a1, &v12);
  }
LABEL_30:
  operator delete(v24);
  if ((v23 & 0x80000000) == 0) {
    goto LABEL_25;
  }
  goto LABEL_31;
}

void sub_21B923A5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B923BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_21B84C6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B923BB8(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, unint64_t a5, char a6, const char *a7, unsigned int a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v21 = a2;
  uint64_t v22 = "Input ";
  int v19 = " color components with ";
  char v20 = a3;
  char v18 = a7;
  unsigned int v17 = a8;
  char v16 = 3;
  LODWORD(v27) = 0;
  sub_21B85AC74(v26, &v22);
  if (v27 == -1) {
    sub_21B84C734();
  }
  v23[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v27])(v30, v23, v26);
  if (v27 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v27])(v23, v26);
  }
  sub_21B84080C(&v21);
  LODWORD(v27) = 0;
  if (v20) {
    sub_21B85AC74(v26, &v20);
  }
  else {
    sub_21B84CA68(v26, "nullptr");
  }
  if (v27 == -1) {
    sub_21B84C734();
  }
  v23[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v27])(&v34, v23, v26);
  if (v27 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v27])(v23, v26);
  }
  LODWORD(v27) = 0;
  sub_21B924750((uint64_t)v26, a4, SBYTE4(a4));
  if (v27 == -1) {
    sub_21B84C734();
  }
  v23[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v27])(&v36, v23, v26);
  if (v27 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v27])(v23, v26);
  }
  LODWORD(v27) = 0;
  if (v19) {
    sub_21B85AC74(v26, &v19);
  }
  else {
    sub_21B84CA68(v26, "nullptr");
  }
  if (v27 == -1) {
    sub_21B84C734();
  }
  v23[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v27])(&v38, v23, v26);
  if (v27 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v27])(v23, v26);
  }
  int v24 = 0;
  if (a6)
  {
    std::to_string(&v25, a5);
    v26[0] = v23;
    v26[1] = &v25;
    uint64_t v26[2] = v23;
    char v27 = &v25;
    unint64_t v28 = &v25;
    if (v24 == -1) {
      sub_21B84C734();
    }
    char v29 = v26;
    ((void (*)(void **, void *))off_26CB9F010[v24])(&v29, v23);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_21B84CA68(v23, "nullopt");
  }
  if (v24 == -1) {
    sub_21B84C734();
  }
  v26[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v24])(&v40, v26, v23);
  if (v24 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v24])(v26, v23);
  }
  LODWORD(v27) = 0;
  if (v18) {
    sub_21B85AC74(v26, &v18);
  }
  else {
    sub_21B84CA68(v26, "nullptr");
  }
  if (v27 == -1) {
    sub_21B84C734();
  }
  v23[0] = &v25;
  ((void (*)(void **__return_ptr, void *, void *))off_26CB9F028[v27])(&v42, v23, v26);
  if (v27 != -1) {
    ((void (*)(void *, void *))off_26CB9EFE0[v27])(v23, v26);
  }
  sub_21B91AE5C(&v17);
  sub_21B84C93C(v14, (uint64_t)v30, 8uLL);
  if (v45 < 0)
  {
    operator delete(v44);
    if ((v43 & 0x80000000) == 0)
    {
LABEL_35:
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
  }
  else if ((v43 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v38);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_49:
    operator delete(v30[0]);
LABEL_41:
    sub_21B84DF0C((uint64_t)v14[0], (uint64_t)v14[1], 0, 0, &__p, v12, v13);
    sub_21B858B90(a1, &v16);
  }
LABEL_48:
  operator delete(v32);
  if ((v31 & 0x80000000) == 0) {
    goto LABEL_41;
  }
  goto LABEL_49;
}

void sub_21B9240F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B9242A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_21B9242BC(uint64_t a1, unint64_t a2, const char *a3, unint64_t a4, unsigned int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v15 = a2;
  char v16 = "Input ";
  unint64_t v13 = a4;
  unsigned int v14 = a3;
  int64x2_t v12 = " bytes per pixel but has incompatible pixel byte stride of ";
  unsigned int v11 = a5;
  char v10 = 3;
  int v18 = 0;
  sub_21B85AC74(v17, &v16);
  if (v18 == -1) {
    sub_21B84C734();
  }
  char v20 = &v19;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v18])(v21, &v20, v17);
  if (v18 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v18])(&v20, v17);
  }
  sub_21B84080C(&v15);
  int v18 = 0;
  if (v14) {
    sub_21B85AC74(v17, &v14);
  }
  else {
    sub_21B84CA68(v17, "nullptr");
  }
  if (v18 == -1) {
    sub_21B84C734();
  }
  char v20 = &v19;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v18])(&v25, &v20, v17);
  if (v18 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v18])(&v20, v17);
  }
  sub_21B84080C(&v13);
  int v18 = 0;
  if (v12) {
    sub_21B85AC74(v17, &v12);
  }
  else {
    sub_21B84CA68(v17, "nullptr");
  }
  if (v18 == -1) {
    sub_21B84C734();
  }
  char v20 = &v19;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F028[v18])(&v29, &v20, v17);
  if (v18 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9EFE0[v18])(&v20, v17);
  }
  sub_21B91AE5C(&v11);
  sub_21B84C93C(v8, (uint64_t)v21, 6uLL);
  if (v32 < 0)
  {
    operator delete(v31);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_25;
    }
  }
  else if ((v30 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v29);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v27);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v25);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    operator delete(v21[0]);
LABEL_22:
    sub_21B84DF0C((uint64_t)v8[0], (uint64_t)v8[1], 0, 0, &__p, v6, v7);
    sub_21B858B90(a1, &v10);
  }
LABEL_27:
  operator delete(v23);
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_22;
  }
  goto LABEL_28;
}

void sub_21B924600(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21B924750(uint64_t a1, unsigned int __val, char a3)
{
  if (a3)
  {
    std::to_string(&v6, __val);
    uint64_t v8 = a1;
    int8x16_t v9 = &v6;
    uint64_t v10 = a1;
    unsigned int v11 = &v6;
    int64x2_t v12 = &v6;
    uint64_t v4 = *(unsigned int *)(a1 + 24);
    if (v4 == -1) {
      sub_21B84C734();
    }
    int8x16_t v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_26CB9F010[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = a1;
    int8x16_t v9 = (std::string *)"nullopt";
    uint64_t v10 = a1;
    unsigned int v11 = (std::string *)"nullopt";
    int64x2_t v12 = (std::string *)"nullopt";
    uint64_t v5 = *(unsigned int *)(a1 + 24);
    if (v5 == -1) {
      sub_21B84C734();
    }
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_26CB9EFF8[v5])(&v6, a1);
  }
}

void sub_21B924844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B924860(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 3)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B924B14();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_21B924AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_21B924B14()
{
  uint64_t v0 = sub_21B924B90();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B924B90()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C048))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B885E44();
    sub_21B924DA0((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B924DA0((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C030, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C030, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C048);
          return &stru_267C5C030;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C030;
}

void sub_21B924CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C048);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C048);
  _Unwind_Resume(a1);
}

void sub_21B924DA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B924E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B924E5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 4)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B925110();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_21B9250C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_21B925110()
{
  uint64_t v0 = sub_21B92518C();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B92518C()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C068))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B885F48();
    sub_21B92539C((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B92539C((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C050, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C050, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C068);
          return &stru_267C5C050;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C050;
}

void sub_21B9252E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C068);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C068);
  _Unwind_Resume(a1);
}

void sub_21B92539C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B92543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B925458(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B92578C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      char v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      char v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_21B925740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_21B92578C()
{
  uint64_t v0 = sub_21B925808();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B925808()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C088))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B88645C();
    sub_21B925A18((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B925A18((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C070, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C070, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C088);
          return &stru_267C5C070;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C070;
}

void sub_21B925964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C088);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C088);
  _Unwind_Resume(a1);
}

void sub_21B925A18(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B925AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B925AD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 28)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B925E0C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      char v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      char v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_21B925DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_21B925E0C()
{
  uint64_t v0 = sub_21B925E88();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B925E88()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C0A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C0A8))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B926154();
    sub_21B926098((uint64_t)v1, (uint64_t)v8);
    uint64_t v2 = sub_21B84E510();
    sub_21B926098((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C090, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C090, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C0A8);
          return &stru_267C5C090;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C090;
}

void sub_21B925FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C0A8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C0A8);
  _Unwind_Resume(a1);
}

void sub_21B926098(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B926138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21B926154()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C0C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C0C8))
  {
    return &stru_267C5C0B0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C0B0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C0B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C0C8);
  return &stru_267C5C0B0;
}

void sub_21B926218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C0C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C0C8);
  _Unwind_Resume(a1);
}

void sub_21B926258(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 29)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B92658C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      char v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      char v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_21B926540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_21B92658C()
{
  uint64_t v0 = sub_21B926608();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B926608()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C0E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C0E8))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B8C9148();
    sub_21B926818((uint64_t)v1, (uint64_t)v8);
    char v2 = sub_21B84E510();
    sub_21B926818((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C0D0, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C0D0, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C0E8);
          return &stru_267C5C0D0;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C0D0;
}

void sub_21B926764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C0E8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C0E8);
  _Unwind_Resume(a1);
}

void sub_21B926818(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B9268B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B9268D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_21B926C0C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      char v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      char v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_21B926BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_21B926C0C()
{
  uint64_t v0 = sub_21B926C88();
  uint64_t v1 = sub_21B84E72C();
  sub_21B84C378("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_21B926C88()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C108))
  {
    sub_21B837058(v6, "ConstImageView");
    uint64_t v1 = sub_21B886664();
    sub_21B926E98((uint64_t)v1, (uint64_t)v8);
    char v2 = sub_21B84E510();
    sub_21B926E98((uint64_t)v2, (uint64_t)&__p);
    sub_21B84C93C(v5, (uint64_t)v8, 2uLL);
    sub_21B984180(v6, (uint64_t *)v5, &stru_267C5C0F0, v3, v4);
    sub_21B83A3DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C0F0, &dword_21B831000);
          __cxa_guard_release(&qword_267C5C108);
          return &stru_267C5C0F0;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267C5C0F0;
}

void sub_21B926DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5C108);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267C5C108);
  _Unwind_Resume(a1);
}

void sub_21B926E98(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B926F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21B926F54(_DWORD *a1)
{
  return ((*a1 >> 1) & 1) + (*a1 & 1) + ((*a1 >> 2) & 1) + ((*a1 >> 3) & 1u) <= 1
      && ((*a1 >> 4) & 1) + ((*a1 >> 5) & 1) + ((*a1 >> 6) & 1u) < 2;
}

uint64_t sub_21B926FA4(_DWORD *a1)
{
  if (*a1) {
    return 1;
  }
  if ((*a1 & 2) != 0) {
    return 2;
  }
  return 4 * ((*a1 & 0xC) != 0);
}

uint64_t sub_21B926FDC(int *a1)
{
  int v1 = *a1;
  if (*a1)
  {
    unsigned int v2 = 1;
    if ((v1 & 0x10) == 0) {
      goto LABEL_7;
    }
    return v2;
  }
  if ((v1 & 2) != 0)
  {
    unsigned int v2 = 2;
    if ((v1 & 0x10) == 0) {
      goto LABEL_7;
    }
    return v2;
  }
  if ((v1 & 0xC) == 0) {
    return 0;
  }
  unsigned int v2 = 4;
  if ((v1 & 0x10) != 0) {
    return v2;
  }
LABEL_7:
  if ((v1 & 0x20) != 0) {
    return 2 * v2;
  }
  unint64_t v3 = v1 & 0x40;
  if (v3) {
    return (v3 >> 4) * (unint64_t)v2;
  }
  return 0;
}

void *sub_21B927060(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26CB9F0A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21B9270D4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1;
  uint64_t v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      char v11 = v10;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v10);
      uint64_t v5 = v11;
      uint64_t v12 = v9;
      if (!v11) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v5 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
      char v11 = v5;
      uint64_t v12 = a1;
      if (!v5) {
        goto LABEL_9;
      }
    }
    if (v5 == v10)
    {
      unint64_t v14 = v13;
      (*(void (**)(void *, void *))(v10[0] + 24))(v10, v13);
LABEL_10:
      sub_21B9286D4(v7, a2);
      uint64_t v15 = v12;
      uint64_t v6 = &v15;
      if (v14)
      {
        if (v14 == v13)
        {
          unint64_t v17 = v16;
          (*(void (**)(void *, void *))(v13[0] + 24))(v13, v16);
LABEL_15:
          long long __p = *(_OWORD *)v7;
          uint64_t v19 = v8;
          v7[1] = 0;
          uint64_t v8 = 0;
          v7[0] = 0;
          operator new();
        }
        uint64_t v6 = &v12;
        unint64_t v17 = v14;
      }
      v6[4] = 0;
      goto LABEL_15;
    }
    uint64_t v5 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
  }
  else
  {
    char v11 = 0;
    uint64_t v12 = a1;
  }
LABEL_9:
  unint64_t v14 = v5;
  goto LABEL_10;
}

void sub_21B927D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, char *a11, char *a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char *__p,char *a35)
{
  if (!atomic_fetch_add(v38, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
  }
  char v39 = __p;
  if (__p)
  {
    int v40 = a35;
    char v41 = __p;
    if (a35 != __p)
    {
      do
      {
        char v42 = v40 - 128;
        uint64_t v43 = *((unsigned int *)v40 - 2);
        if (v43 != -1) {
          ((void (*)(char *, char *))off_26CB9F178[v43])(&a15, v40 - 128);
        }
        *((_DWORD *)v40 - 2) = -1;
        v40 -= 128;
      }
      while (v42 != v39);
      char v41 = __p;
    }
    a35 = v39;
    operator delete(v41);
  }
  if (a33 == v35)
  {
    (*(void (**)(uint64_t))(a30 + 32))(v35);
  }
  else if (a33)
  {
    (*(void (**)(void))(*(void *)a33 + 40))();
  }
  if (a11)
  {
    uint64_t v44 = a12;
    char v45 = a11;
    if (a12 != a11)
    {
      do
      {
        uint64_t v46 = v44 - 128;
        uint64_t v47 = *((unsigned int *)v44 - 2);
        if (v47 != -1) {
          ((void (*)(char *, char *))off_26CB9F178[v47])(&a15, v44 - 128);
        }
        *((_DWORD *)v44 - 2) = -1;
        v44 -= 128;
      }
      while (v46 != a11);
      char v45 = a11;
    }
    operator delete(v45);
  }
  if (a28 == v36)
  {
    (*(void (**)(uint64_t))(a25 + 32))(v36);
    sub_21B927F3C((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  if (a28)
  {
    (*(void (**)(void))(*(void *)a28 + 40))();
    sub_21B927F3C((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_21B927F3C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_21B927F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21B83DE50(a1);
}

uint64_t sub_21B927F3C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

void sub_21B927FD0()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Instance does not support view returns");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21B928018(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B92802C()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21B928074(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B928088()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21B9280D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B9280E4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9F140;
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 192);
    int8x16_t v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 128;
        uint64_t v6 = *(unsigned int *)(v3 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_26CB9F178[v6])(&v8, v3 - 128);
        }
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      int8x16_t v4 = *(void **)(a1 + 184);
    }
    *(void *)(a1 + 192) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void *)(a1 + 176);
  if (v7 == a1 + 152)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 152) + 32))(a1 + 152);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B928248(uint64_t a1)
{
  sub_21B9280E4(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B928280(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  std::__assoc_sub_state::__on_zero_shared(a1);
}

void sub_21B9282BC(std::__assoc_sub_state *a1)
{
}

void sub_21B9282F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v15.__ptr_ = v16;
  std::__assoc_sub_state::set_exception(v14, v15);
  std::exception_ptr::~exception_ptr(v16);
  __cxa_end_catch();
}

void sub_21B928328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_21B928344(void *a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)*a1 + 24))(v8);
  uint64_t v2 = a1[4];
  if (!v2) {
    sub_21B846100();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v8);
  if (v12)
  {
    uint64_t v3 = (char *)__p;
    if (__p)
    {
      int8x16_t v4 = v11;
      uint64_t v5 = __p;
      if (v11 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 6);
            if (v6)
            {
              if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        uint64_t v5 = __p;
      }
      char v11 = v3;
      operator delete(v5);
    }
  }
  v8[0] = &unk_26CB95650;
  uint64_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21B9284F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char *__p, char *a14, uint64_t a15, char a16)
{
  if (a16 && __p)
  {
    unint64_t v17 = a14;
    __int16 v18 = __p;
    if (a14 != __p)
    {
      do
      {
        if (*(v17 - 8))
        {
          uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 - 6);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
        v17 -= 120;
      }
      while (v17 != __p);
      __int16 v18 = __p;
    }
    operator delete(v18);
  }
  if (a12)
  {
    if (!atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B9285F8(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  int8x16_t v4 = *(void (**)(void *))(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (void *)(*(void *)(a1 + 24) + (v5 >> 1));
  if (v5) {
    int8x16_t v4 = *(void (**)(void *))(*v6 + v4);
  }
  v4(v6);
  uint64_t v7 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    uint64_t v8 = MEMORY[0x21D495C80]();
    MEMORY[0x21D495F30](v8, 0x20C4093837F09);
  }
  MEMORY[0x21D495F30](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_21B9286C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B908340((uint64_t **)va);
  _Unwind_Resume(a1);
}

void *sub_21B9286D4(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_21B846300();
    }
    uint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[128 * (v5 >> 7)];
    do
    {
      uint64_t v8 = &v6[v7];
      *uint64_t v8 = 0;
      *((_DWORD *)v8 + 30) = -1;
      uint64_t v9 = *(unsigned int *)(v3 + v7 + 120);
      if (v9 != -1)
      {
        ((void (*)(char *, char *))off_26CB9F190[v9])(v11, &v6[v7]);
        *((_DWORD *)v8 + 30) = v9;
      }
      v7 += 128;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_21B9287C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  unint64_t v16 = (char *)*v14;
  if (*v14)
  {
    unint64_t v17 = (char *)v14[1];
    __int16 v18 = *v14;
    if (v17 != v16)
    {
      do
      {
        uint64_t v19 = v17 - 128;
        uint64_t v20 = *((unsigned int *)v17 - 2);
        if (v20 != -1) {
          ((void (*)(char *, char *))off_26CB9F178[v20])(&a11, v17 - 128);
        }
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v19 != v16);
      __int16 v18 = *v14;
    }
    v14[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B9288C4(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9F1B8;
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 192);
    uint64_t v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 128;
        uint64_t v6 = *(unsigned int *)(v3 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_26CB9F178[v6])(&v8, v3 - 128);
        }
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 184);
    }
    *(void *)(a1 + 192) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void *)(a1 + 176);
  if (v7 == a1 + 152)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 152) + 32))(a1 + 152);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_21B928A28(uint64_t a1)
{
  sub_21B9288C4(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B928A60(std::__assoc_sub_state *a1)
{
}

void sub_21B928A98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v15.__ptr_ = v16;
  std::__assoc_sub_state::set_exception(v14, v15);
  std::exception_ptr::~exception_ptr(v16);
  __cxa_end_catch();
}

void sub_21B928ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void *sub_21B928AE8(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  if (*a2)
  {
    if (!v5) {
      goto LABEL_8;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Model.cpp", 38, (uint64_t)"p_blueprint != nullptr", 22, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_10;
    }
    if (!a1[2])
    {
LABEL_8:
      if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))return a1; {
LABEL_10:
      }
      abort();
    }
  }
  return a1;
}

void sub_21B928BC8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_21B83A360(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B928C0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL sub_21B928CB8(unsigned int a1)
{
  sub_21B835F34(__p);
  BOOL v2 = sub_21B928D38((uint64_t)__p, a1);
  if (v6 && v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_21B928D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21B928D38(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_21B846188(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
  }
  if (v16 >= 0) {
    uint64_t v4 = HIBYTE(v16);
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  if (v4 >= 1)
  {
    char v5 = __p;
    if (v16 < 0) {
      char v5 = (void **)__p[0];
    }
    if (*(unsigned char *)v5 == 104)
    {
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1])
        {
          char v6 = (char *)__p[0] + 1;
          std::string::size_type v7 = (std::string::size_type)__p[1] - 1;
          if ((unint64_t)__p[1] - 1 < 0x7FFFFFFFFFFFFFF8)
          {
LABEL_16:
            if (v7 >= 0x17)
            {
              uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v7 | 7) != 0x17) {
                uint64_t v10 = v7 | 7;
              }
              uint64_t v11 = v10 + 1;
              p_dst = (std::string *)operator new(v10 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
              p_dst = &__dst;
              if (!v7)
              {
LABEL_26:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                unsigned int v12 = std::stoi(&__dst, 0, 10);
                unsigned int v13 = v12;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  BOOL v3 = v13 >= a2;
                  if ((v16 & 0x8000000000000000) == 0) {
                    return v3;
                  }
                }
                else
                {
                  BOOL v3 = v12 >= a2;
                  if ((v16 & 0x8000000000000000) == 0) {
                    return v3;
                  }
                }
                goto LABEL_20;
              }
            }
            memmove(p_dst, v6, v7);
            goto LABEL_26;
          }
LABEL_31:
          sub_21B836090();
        }
      }
      else if (HIBYTE(v16))
      {
        char v6 = (char *)__p + 1;
        std::string::size_type v7 = HIBYTE(v16) - 1;
        if (v7 < 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_16;
        }
        goto LABEL_31;
      }
      sub_21B846058();
    }
  }
  BOOL v3 = 0;
  if (v16 < 0) {
LABEL_20:
  }
    operator delete(__p[0]);
  return v3;
}

void sub_21B928EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_21B928F3C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  unint64_t v13 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 48) - v4) >> 3) <= a2)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  sub_21B84080C(&v13);
  char v6 = std::string::insert(&v11, 0, "input__", 7uLL);
  std::string::size_type v7 = (long long *)(v4 + 168 * a2);
  char v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  int v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((unsigned char *)v7 + 24))
  {
    *(void *)&__dst[0] = v8;
    *((void *)&__dst[0] + 1) = v14[0];
    *(void *)((char *)__dst + 15) = *(void *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(void *)(a3 + 16) = *(void *)&__dst[1];
    memset(__dst, 0, 24);
    *(unsigned char *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_21B846188(__dst, *(void **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v10 = *v7;
    *(void *)&__dst[1] = *((void *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(void *)(a3 + 16) = *(void *)&__dst[1];
  memset(__dst, 0, 24);
  *(unsigned char *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_21B929100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16 < 0) {
    operator delete(v15);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B92913C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  unint64_t v13 = a2;
  uint64_t v4 = *(void *)(a1 + 64);
  if (a2 >= (*(void *)(a1 + 72) - v4) >> 5)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  sub_21B84080C(&v13);
  char v6 = std::string::insert(&v11, 0, "output__", 8uLL);
  std::string::size_type v7 = (long long *)(v4 + 32 * a2);
  char v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  int v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((unsigned char *)v7 + 24))
  {
    *(void *)&__dst[0] = v8;
    *((void *)&__dst[0] + 1) = v14[0];
    *(void *)((char *)__dst + 15) = *(void *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(void *)(a3 + 16) = *(void *)&__dst[1];
    memset(__dst, 0, 24);
    *(unsigned char *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_21B846188(__dst, *(void **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v10 = *v7;
    *(void *)&__dst[1] = *((void *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(void *)(a3 + 16) = *(void *)&__dst[1];
  memset(__dst, 0, 24);
  *(unsigned char *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_21B9292E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16 < 0) {
    operator delete(v15);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B929320()
{
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_21B863A18(v0, (uint64_t)".", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_21B863A18(v1, (uint64_t)".", 1);

  return std::ostream::operator<<();
}

void sub_21B929384(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 39) < 0)
  {
    sub_21B846188(v1, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v1 = *(_OWORD *)(a1 + 16);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  LODWORD(v3) = 0;
  sub_21B85912C();
}

void sub_21B92AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  uint64_t v52 = *a9;
  *a9 = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_21B83D090(&a11);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  sub_21B83804C((void *)(v50 - 176));
  sub_21B83804C((void *)(v50 - 136));
  sub_21B83D258((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_21B92B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B92B4F0(void *a1, const void **a2, uint64_t a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  unint64_t v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v5 > 0x16)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    *(void *)&__p[8] = v4 + 35;
    *(void *)&__p[16] = (v10 + 1) | 0x8000000000000000;
    *(void *)long long __p = operator new(v10 + 1);
    int v9 = (unsigned char *)(*(void *)__p + 35);
    qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
    if (!v4)
    {
LABEL_14:
      v9[v4] = 0;
      unsigned int v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[32] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      int v16 = (const std::string::value_type *)a2[3];
      std::exception_ptr v15 = a2 + 3;
      unint64_t v14 = v16;
      int v17 = *((char *)v15 + 23);
      if (v17 >= 0) {
        __int16 v18 = (const std::string::value_type *)v15;
      }
      else {
        __int16 v18 = v14;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v15[1];
      }
      uint64_t v20 = std::string::append((std::string *)&__p[32], v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = std::string::append(&v31, ". ", 2uLL);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        std::string v25 = (const std::string::value_type *)a3;
      }
      else {
        std::string v25 = *(const std::string::value_type **)a3;
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(a3 + 8);
      }
      char v27 = std::string::append(&v32, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v34 = v27->__r_.__value_.__r.__words[2];
      long long v33 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_28:
          if ((SHIBYTE(v30) & 0x80000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v31.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30) & 0x80000000) == 0)
      {
LABEL_29:
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_30;
        }
LABEL_34:
        operator delete(*(void **)__p);
LABEL_30:
        *a1 = 0;
        v32.__r_.__value_.__s.__data_[0] = 5;
        sub_21B858B90((uint64_t)(a1 + 1), &v32);
      }
LABEL_33:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  else
  {
    int v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
  }
  if (v3 >= 0) {
    std::string v11 = a2;
  }
  else {
    std::string v11 = *a2;
  }
  memmove(v9, v11, v4);
  goto LABEL_14;
}

void sub_21B92B74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v38 = *v35;
  *uint64_t v35 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_21B92B828(std::string *a1, uint64_t a2)
{
  uint64_t v13 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    int v15 = 0;
    sub_21B936870();
  }
  *((unsigned char *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  int v3 = std::string::append(&v11, "Last Error: ", 0xCuLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  int v15 = 0;
  if (last_error) {
    sub_21B85AC74(v14, &last_error);
  }
  else {
    sub_21B84CA68(v14, "nullptr");
  }
  if (v15 == -1) {
    sub_21B84C734();
  }
  int v17 = &v16;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_26CB9F290[v15])(__p, &v17, v14);
  if (v15 != -1) {
    ((void (*)(char **, _DWORD *))off_26CB9F278[v15])(&v17, v14);
  }
  if ((v10 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v6 = v10;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  std::string::size_type v7 = std::string::append(&v12, (const std::string::value_type *)v5, v6);
  *a1 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_21B92BAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B92BB94(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x186186186186187) {
      sub_21B846300();
    }
    long long v4 = (char *)operator new(168 * a2);
    *a1 = v4;
    a1[2] = &v4[168 * a2];
    size_t v5 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21B92BC48(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B92BC64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 72) - *(void *)(a2 + 64);
  if (v3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v3 >> 5;
    do
    {
      unint64_t v29 = v5;
      sub_21B92913C(a2, v5, (uint64_t)&v30);
      long long v27 = v30;
      uint64_t v28 = v31;
      if (espresso_network_bind_buffer())
      {
        char v25 = 5;
        sub_21B84080C(&v29);
        std::string::size_type v7 = std::string::insert(&v19, 0, "Unable to bind buffer #", 0x17uLL);
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        int v9 = std::string::append(&v20, " (named '", 9uLL);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v21.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (v28 >= 0) {
          std::string v11 = (const std::string::value_type *)&v27;
        }
        else {
          std::string v11 = (const std::string::value_type *)v27;
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = *((void *)&v27 + 1);
        }
        uint64_t v13 = std::string::append(&v21, v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        int v15 = std::string::append(&v22, "'). ", 4uLL);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        int v17 = std::string::append(&v23, "Status code: ", 0xDuLL);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        int v32 = 0;
        sub_21B936870();
      }
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)v27);
      }
      ++v5;
    }
    while (v6 != v5);
  }
  LOBYTE(v27) = 0;
  HIBYTE(v31) = 0;
  LOBYTE(v30) = 0;
  sub_21B858B90(a1, &v27);
}

void sub_21B92C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (*(char *)(v68 - 169) < 0)
  {
    operator delete(*(void **)(v68 - 192));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v68 - 201) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v68 - 201) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a68 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v68 - 224));
  if ((a68 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a63);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a61 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a61 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a56);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(v68 - 137) & 0x80000000) == 0) {
LABEL_26:
    }
      _Unwind_Resume(a1);
LABEL_25:
    operator delete(*(void **)(v68 - 160));
    goto LABEL_26;
  }
LABEL_24:
  operator delete(a22);
  if ((*(char *)(v68 - 137) & 0x80000000) == 0) {
    goto LABEL_26;
  }
  goto LABEL_25;
}

void sub_21B92C35C()
{
}

void sub_21B92C7B8(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::string v11 = *v7;
  if (*v7)
  {
    v8[11] = v11;
    operator delete(v11);
  }
  std::string::size_type v12 = *a3;
  if (*a3)
  {
    v8[8] = v12;
    operator delete(v12);
  }
  uint64_t v13 = v8[1];
  *long long v8 = &unk_26CB9F0A8;
  v8[1] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_21B92CA4C((uint64_t)va);
  sub_21B83A360(v9 - 104);
  MEMORY[0x21D495F30](v8, 0x10E1C400ECEF657);
  _Unwind_Resume(a1);
}

uint64_t sub_21B92C878(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26CB9F598;
  void v6[3] = &unk_26CB9F080;
  sub_21B8471D4((uint64_t)(v6 + 4), a2);
  void v6[3] = &unk_26CB9EF20;
  uint64_t result = sub_21B8E24C8((uint64_t)(v6 + 19), a3);
  v6[23] = *(void *)(a3 + 32);
  *((_WORD *)v6 + 96) = *(_WORD *)(a3 + 40);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_21B92C954(_Unwind_Exception *a1)
{
  *long long v4 = v2;
  sub_21B848B68(v3);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_21B92C978(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_21B92C990(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v5 >> 3) >= 0x186186186186187) {
      sub_21B846300();
    }
    uint64_t v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    std::string::size_type v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_21B92CA30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B92CA4C(uint64_t a1)
{
  sub_21B936ADC(*(void **)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21B92CA98(void *lpsrc@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  int64_t v5 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    std::string::size_type v7 = *(const void **)(a2 + 8);
    if (!v7) {
      goto LABEL_19;
    }
    long long v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_26CB9F0F0, (const struct __class_type_info *)&unk_26CB9EF38, 0);
    if (v8)
    {
      uint64_t v9 = v8[31];
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = v8[31];
      }
      else {
        uint64_t v10 = *((void *)v8 + 2);
      }
      uint64_t v11 = v6[31];
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *((void *)v6 + 2);
      }
      if (v10 != v11) {
        goto LABEL_19;
      }
      uint64_t v13 = (const void **)(v8 + 8);
      if (v12 >= 0) {
        long long v14 = v6 + 8;
      }
      else {
        long long v14 = (unsigned __int8 *)*((void *)v6 + 1);
      }
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*v13, v14, *((void *)v8 + 2))) {
          goto LABEL_19;
        }
      }
      else if (v8[31])
      {
        while (*(unsigned __int8 *)v13 == *v14)
        {
          uint64_t v13 = (const void **)((char *)v13 + 1);
          ++v14;
          if (!--v9) {
            goto LABEL_46;
          }
        }
LABEL_19:
        int v15 = (const void **)(v6 + 8);
        sub_21B8471D4((uint64_t)&v59[24], (uint64_t *)(*(void *)(a2 + 128) + 8));
        if (v63)
        {
          uint64_t v16 = v61;
          uint64_t v17 = v62;
          if (v61 != v62)
          {
            unsigned __int8 v18 = v6[31];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v6[31];
            }
            else {
              uint64_t v19 = *((void *)v6 + 2);
            }
            if ((v18 & 0x80u) == 0) {
              std::string v20 = v6 + 8;
            }
            else {
              std::string v20 = (unsigned __int8 *)*((void *)v6 + 1);
            }
            while (1)
            {
              uint64_t v21 = *(unsigned __int8 *)(v16 + 23);
              if ((v21 & 0x80u) == 0) {
                uint64_t v22 = *(unsigned __int8 *)(v16 + 23);
              }
              else {
                uint64_t v22 = *(void *)(v16 + 8);
              }
              if (v22 == v19)
              {
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v16, v20, *(void *)(v16 + 8))) {
                    break;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v16 + 23)) {
                    break;
                  }
                  uint64_t v23 = 0;
                  while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
                  {
                    if (v21 == ++v23) {
                      goto LABEL_38;
                    }
                  }
                }
              }
              v16 += 24;
              if (v16 == v17) {
                goto LABEL_69;
              }
            }
          }
LABEL_38:
          if (v16 != v17)
          {
            if (espresso_plan_build_clean())
            {
              LOBYTE(v58) = 5;
              int v24 = (char)v6[31];
              if (v24 >= 0) {
                size_t v25 = v6[31];
              }
              else {
                size_t v25 = *((void *)v6 + 2);
              }
              unint64_t v26 = v25 + 54;
              if (v25 + 54 > 0x7FFFFFFFFFFFFFF7) {
                sub_21B836090();
              }
              if (v26 > 0x16)
              {
                uint64_t v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17) {
                  uint64_t v32 = v26 | 7;
                }
                *(void *)&v59[8] = v25 + 54;
                *(void *)&v59[16] = (v32 + 1) | 0x8000000000000000;
                *(void *)BOOL v59 = operator new(v32 + 1);
                qmemcpy(*(void **)v59, "Unable to build clean the plan for the configuration '", 54);
                long long v27 = (__int16 *)(*(void *)v59 + 54);
                if (!v25)
                {
LABEL_61:
                  *((unsigned char *)v27 + v25) = 0;
                  std::string::size_type v34 = std::string::append((std::string *)v59, "'.", 2uLL);
                  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                  std::string::size_type v57 = v34->__r_.__value_.__r.__words[2];
                  *(_OWORD *)long long __p = v35;
                  v34->__r_.__value_.__l.__size_ = 0;
                  v34->__r_.__value_.__r.__words[2] = 0;
                  v34->__r_.__value_.__r.__words[0] = 0;
                  sub_21B858B90(a3, &v58);
                }
              }
              else
              {
                qmemcpy(v59, "Unable to build clean the plan for the configuration '", sizeof(v59));
                long long v27 = &v60;
              }
              if (v24 >= 0) {
                long long v33 = v15;
              }
              else {
                long long v33 = *v15;
              }
              memmove(v27, v33, v25);
              goto LABEL_61;
            }
            if (espresso_network_select_configuration())
            {
              LOBYTE(v58) = 5;
              int v28 = (char)v6[31];
              if (v28 >= 0) {
                size_t v29 = v6[31];
              }
              else {
                size_t v29 = *((void *)v6 + 2);
              }
              unint64_t v30 = v29 + 43;
              if (v29 + 43 > 0x7FFFFFFFFFFFFFF7) {
                sub_21B836090();
              }
              if (v30 > 0x16)
              {
                uint64_t v48 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v30 | 7) != 0x17) {
                  uint64_t v48 = v30 | 7;
                }
                *(void *)&v59[8] = v29 + 43;
                *(void *)&v59[16] = (v48 + 1) | 0x8000000000000000;
                *(void *)BOOL v59 = operator new(v48 + 1);
                qmemcpy(*(void **)v59, "Unable to change network configuration to '", 43);
                uint64_t v31 = (unsigned char *)(*(void *)v59 + 43);
                if (!v29)
                {
LABEL_90:
                  v31[v29] = 0;
                  uint64_t v50 = std::string::append((std::string *)v59, "'.", 2uLL);
                  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
                  std::string::size_type v57 = v50->__r_.__value_.__r.__words[2];
                  *(_OWORD *)long long __p = v51;
                  v50->__r_.__value_.__l.__size_ = 0;
                  v50->__r_.__value_.__r.__words[2] = 0;
                  v50->__r_.__value_.__r.__words[0] = 0;
                  sub_21B858B90(a3, &v58);
                }
              }
              else
              {
                qmemcpy(v59, "Unable to change network configuration to '", 43);
                uint64_t v31 = &v59[43];
              }
              if (v28 >= 0) {
                long long v49 = v15;
              }
              else {
                long long v49 = *v15;
              }
              memmove(v31, v49, v29);
              goto LABEL_90;
            }
            if (!espresso_plan_build())
            {
              sub_21B938BF0((uint64_t *)(a2 + 104));
              long long v58 = *(_OWORD *)(a2 + 32);
              sub_21B92BC64((uint64_t)__p, (uint64_t)&v59[24]);
            }
            LOBYTE(v58) = 5;
            int v36 = (char)v6[31];
            if (v36 >= 0) {
              size_t v37 = v6[31];
            }
            else {
              size_t v37 = *((void *)v6 + 2);
            }
            unint64_t v38 = v37 + 44;
            if (v37 + 44 > 0x7FFFFFFFFFFFFFF7) {
              sub_21B836090();
            }
            if (v38 > 0x16)
            {
              uint64_t v52 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17) {
                uint64_t v52 = v38 | 7;
              }
              *(void *)&v59[8] = v37 + 44;
              *(void *)&v59[16] = (v52 + 1) | 0x8000000000000000;
              *(void *)BOOL v59 = operator new(v52 + 1);
              qmemcpy(*(void **)v59, "Unable to build plan for the configuration '", 44);
              char v39 = (unsigned char *)(*(void *)v59 + 44);
              if (!v37)
              {
LABEL_99:
                v39[v37] = 0;
                std::string::size_type v54 = std::string::append((std::string *)v59, "'.", 2uLL);
                long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
                std::string::size_type v57 = v54->__r_.__value_.__r.__words[2];
                *(_OWORD *)long long __p = v55;
                v54->__r_.__value_.__l.__size_ = 0;
                v54->__r_.__value_.__r.__words[2] = 0;
                v54->__r_.__value_.__r.__words[0] = 0;
                sub_21B858B90(a3, &v58);
              }
            }
            else
            {
              qmemcpy(v59, "Unable to build plan for the configuration '", 44);
              char v39 = &v59[44];
            }
            if (v36 >= 0) {
              int v53 = v15;
            }
            else {
              int v53 = *v15;
            }
            memmove(v39, v53, v37);
            goto LABEL_99;
          }
        }
LABEL_69:
        LOBYTE(v58) = 3;
        int v40 = (char)v6[31];
        if (v40 >= 0) {
          size_t v41 = v6[31];
        }
        else {
          size_t v41 = *((void *)v6 + 2);
        }
        unint64_t v42 = v41 + 46;
        if (v41 + 46 > 0x7FFFFFFFFFFFFFF7) {
          sub_21B836090();
        }
        if (v42 > 0x16)
        {
          uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17) {
            uint64_t v44 = v42 | 7;
          }
          *(void *)&v59[8] = v41 + 46;
          *(void *)&v59[16] = (v44 + 1) | 0x8000000000000000;
          *(void *)BOOL v59 = operator new(v44 + 1);
          qmemcpy(*(void **)v59, "Unable to find the name of the configuration '", 46);
          uint64_t v43 = (unsigned char *)(*(void *)v59 + 46);
          if (!v41)
          {
LABEL_82:
            v43[v41] = 0;
            uint64_t v46 = std::string::append((std::string *)v59, "'.", 2uLL);
            long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            std::string::size_type v57 = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)long long __p = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            sub_21B858B90(a3, &v58);
          }
        }
        else
        {
          qmemcpy(v59, "Unable to find the name of the configuration '", 46);
          uint64_t v43 = &v59[46];
        }
        if (v40 >= 0) {
          char v45 = v15;
        }
        else {
          char v45 = *v15;
        }
        memmove(v43, v45, v41);
        goto LABEL_82;
      }
LABEL_46:
      LOBYTE(__p[0]) = 0;
      *(void *)&v59[24] = operator new(0x38uLL);
      *(_OWORD *)&v59[32] = xmmword_21B9B2020;
      strcpy(*(char **)&v59[24], "The model is already running in this configuration");
      sub_21B858B90(a3, __p);
    }
  }
  __cxa_bad_cast();
}

void sub_21B92D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_21B83D090(&a11);
  sub_21B848B68((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_21B92D374(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void sub_21B92D37C()
{
}

void sub_21B92D41C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_21B92D440(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_21B92D450(uint64_t a1)
{
  *(void *)a1 = &unk_26CB9F200;
  espresso_plan_destroy();
  espresso_context_destroy();
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2 != (void *)(a1 + 112))
  {
    do
    {
      if (*((unsigned char *)v2 + 112) && *((unsigned char *)v2 + 72)) {
        free((void *)v2[5]);
      }
      long long v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != (void *)(a1 + 112));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_21B936ADC(*(void **)(a1 + 112));
  long long v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  int64_t v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26CB9F0A8;
  *(void *)(a1 + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_21B92D5CC(uint64_t a1)
{
  sub_21B92D450(a1);

  JUMPOUT(0x21D495F30);
}

void sub_21B92D604(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (*(unsigned char *)(v2 + 152))
  {
    long long v4 = *(unsigned char **)(v2 + 128);
    uint64_t v3 = *(unsigned char **)(v2 + 136);
    if (0x6DB6DB6DB6DB6DB7 * ((v3 - v4) >> 2) == (a2[1] - *a2) >> 7)
    {
      if (v4 != v3)
      {
        if (!v4[25] || !v4[12] && !v4[20] && !v4[24])
        {
          uint64_t v5 = *a2;
          BOOL v10 = 0;
          LOBYTE(v11) = 0;
          int v12 = -1;
          uint64_t v6 = *(unsigned int *)(v5 + 120);
          if (v6 != -1)
          {
            ((void (*)(uint64_t *, long long *))off_26CB9F4F0[v6])(&v8, &v11);
            int v12 = v6;
          }
          if (v4[25])
          {
            sub_21B91F22C((uint64_t)&v11, (uint64_t)&v13);
            if (v16)
            {
              std::string::size_type v7 = v15;
              if (v15)
              {
                if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
              LOBYTE(v8) = 0;
              HIBYTE(v14) = 0;
              LOBYTE(v13) = 0;
              sub_21B858B90((uint64_t)&v9, &v8);
            }
            LOBYTE(v8) = 3;
            uint64_t v13 = (char *)operator new(0x40uLL);
            long long v14 = xmmword_21B9B2050;
            strcpy(v13, "Use direct bind requires CVPixelBuffer backed image (CVImage).");
            sub_21B858B90((uint64_t)&v9, &v8);
          }
          LOBYTE(v8) = 0;
          HIBYTE(v14) = 0;
          LOBYTE(v13) = 0;
          sub_21B858B90((uint64_t)&v9, &v8);
        }
        LOBYTE(v8) = 3;
        uint64_t v13 = (char *)operator new(0x50uLL);
        long long v14 = xmmword_21B9B2040;
        strcpy(v13, "Espresso inputs cannot have pre processing arguments and use direct bind.");
        sub_21B858B90((uint64_t)&v9, &v8);
      }
      LOBYTE(v8) = 0;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      sub_21B858B90((uint64_t)&v9, &v8);
    }
    LOBYTE(v13) = 3;
    BOOL v10 = (char *)operator new(0x38uLL);
    long long v11 = xmmword_21B9B2030;
    strcpy(v10, "Num of Espresso inputs do not match data inputs.");
    sub_21B858B90((uint64_t)&v9, &v13);
  }
  LOBYTE(v13) = 0;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  sub_21B858B90((uint64_t)&v9, &v13);
}

void sub_21B92DE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54)
{
  sub_21B840244(&a28);
  sub_21B83D090(v54);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_21B83D090(&a18);
  sub_21B83D090(&a22);
  _Unwind_Resume(a1);
}

void sub_21B92E008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(*(void *)(a2 + 128) + 56) == *(void *)(*(void *)(a2 + 128) + 48))
  {
    v22.__r_.__value_.__s.__data_[0] = 0;
    v25[7] = 0;
    LOBYTE(__p[0]) = 0;
    sub_21B858B90(a1, &v22);
  }
  unint64_t v20 = 0;
  sub_21B91F22C(*a3, (uint64_t)&v15);
  unsigned int v3 = v19;
  if (((v19 >> 1) & 1) + (v19 & 1) + ((v19 >> 2) & 1) + ((v19 >> 3) & 1) > 1
    || ((v19 >> 4) & 1) + ((v19 >> 5) & 1) + ((v19 >> 6) & 1) >= 2)
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 651, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_37;
    }
    unsigned int v3 = v19;
  }
  *(_OWORD *)&v25[4] = v17;
  unsigned int v26 = v18;
  *(_OWORD *)long long __p = v15;
  *(_DWORD *)size_t v25 = v16;
  unsigned int v27 = v3;
  BOOL v6 = v16 < 2 && HIDWORD(v15) < 2;
  if (v6)
  {
    BOOL v7 = LODWORD(__p[1]) < 2;
    int v8 = *(_DWORD *)&v25[8];
    if (!*(_DWORD *)&v25[8])
    {
LABEL_31:
      if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 652, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))goto LABEL_32; {
LABEL_37:
      }
      abort();
    }
  }
  else
  {
    BOOL v7 = 0;
    int v8 = *(_DWORD *)&v25[8];
    if (!*(_DWORD *)&v25[8]) {
      goto LABEL_31;
    }
  }
  BOOL v9 = HIDWORD(__p[0]) == 0;
  if (!HIDWORD(__p[0])) {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_25;
  }
  BOOL v9 = *(_DWORD *)&v25[12] < (HIDWORD(__p[0]) * v8);
  if (*(_DWORD *)&v25[12] < (HIDWORD(__p[0]) * v8)) {
    LOBYTE(v6) = 1;
  }
  if (v6
    || (BOOL v9 = *(_DWORD *)&v25[16] < (LODWORD(__p[1]) * *(_DWORD *)&v25[12]), v16 < 2)
    || *(_DWORD *)&v25[16] < (LODWORD(__p[1]) * *(_DWORD *)&v25[12]))
  {
LABEL_25:
    if (v9) {
      goto LABEL_31;
    }
  }
  else if (v26 < *(_DWORD *)&v25[16] * HIDWORD(v15))
  {
    goto LABEL_31;
  }
  if (sub_21B91D960(__p, 16))
  {
LABEL_32:
    if ((v19 & 0xF) != 0 && (v19 & 0x70) != 0)
    {
      *(void *)a1 = &unk_26CB95650;
      *(unsigned char *)(a1 + 8) = 0;
      operator new();
    }
    LOBYTE(v23) = 3;
    sub_21B84080C(&v20);
    BOOL v10 = std::string::insert(&v21, 0, "Invalid input: The given view for input ", 0x28uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = std::string::append(&v22, " requires both a color format and type definition in its format flags.", 0x46uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)size_t v25 = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_21B858B90(a1, &v23);
  }
  goto LABEL_31;
}

void sub_21B935724(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  sub_21B842A94((uint64_t)&STACK[0x2F0]);
  sub_21B83D090((void *)STACK[0x218]);
  sub_21B842A94((uint64_t)&STACK[0x388]);
  _Unwind_Resume(a1);
}

void sub_21B935CF8(int64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[10].i32[0] != 65568
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 692, (uint64_t)"results.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32", 53, (uint64_t)"EspressoBufferToConstDataView32f currently expects FLOAT32 storage. Other buffer types not yet implemented.", 107, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  unint64_t v4 = a1[7].u64[1];
  if (HIDWORD(v4)
    || (unint64_t v5 = a1[5].u64[0], HIDWORD(v5))
    || (unint64_t v6 = a1[5].u64[1], HIDWORD(v6))
    || (unint64_t v7 = a1[6].u64[0], HIDWORD(v7))
    || (unint64_t v8 = a1[6].u64[1], HIDWORD(v8)))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CBA1D90;
    __cxa_throw(exception, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v9 = a1->i64[0];
  *(void *)&long long v19 = __PAIR64__(v5, v4);
  *((void *)&v19 + 1) = __PAIR64__(v7, v6);
  int v20 = v8;
  uint64_t v10 = a1[9].i64[0];
  LODWORD(v16) = 1;
  DWORD1(v16) = v4;
  *((int32x2_t *)&v16 + 1) = vmovn_s64(a1[8]);
  int v17 = v10;
  char v18 = 1;
  v13[0] = 0;
  char v15 = 0;
  sub_21B91C3BC(a2, v9, &v19, &v16, (int *)"@", (uint64_t)v13);
  if (v15)
  {
    long long v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_21B935EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B935EB8(uint64_t a1, uint64_t *a2)
{
}

void sub_21B936290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21B83D090(v9);
  sub_21B840310((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B9362AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  sub_21B840708(&a17);
  sub_21B83D090(v17);
  sub_21B840310((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21B936300()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_21B936348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_21B93635C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1 && *(_DWORD *)(a1 + 12) == 1;
}

BOOL sub_21B936370(uint64_t a1)
{
  uint64_t v1 = 4;
  if (*(_DWORD *)(a1 + 48) != 65) {
    uint64_t v1 = 1;
  }
  return v1 == *(unsigned int *)(a1 + 24);
}

void sub_21B936390(uint64_t a1, int64x2_t *a2)
{
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  memset(v38, 0, sizeof(v38));
  LODWORD(v39) = 16;
  unsigned int v44 = 0;
  __int32 v3 = a2[10].i32[0];
  if (v3 != 262152)
  {
    if (v3 != 65568)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 723, (uint64_t)&unk_21B997215, 0, (uint64_t)"EspressoBufferToConstDataView32f requires FLOAT32 or UINT8 storage", 66, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    unint64_t v4 = a2[7].u64[1];
    if (HIDWORD(v4)
      || (unint64_t v5 = a2[5].u64[0], HIDWORD(v5))
      || (unint64_t v6 = a2[5].u64[1], HIDWORD(v6))
      || (unint64_t v7 = a2[6].u64[0], HIDWORD(v7))
      || (unint64_t v8 = a2[6].u64[1], HIDWORD(v8)))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &unk_26CBA1D90;
      __cxa_throw(exception, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
    }
    uint64_t v9 = a2->i64[0];
    int64x2_t v10 = a2[8];
    uint64_t v11 = a2[9].i64[0];
    *(void *)&long long v51 = __PAIR64__(v5, v4);
    *((void *)&v51 + 1) = __PAIR64__(v7, v6);
    int v52 = v8;
    LODWORD(v48) = 1;
    DWORD1(v48) = v4;
    *((int32x2_t *)&v48 + 1) = vmovn_s64(v10);
    int v49 = v11;
    char v50 = 1;
    v45[0] = 0;
    char v47 = 0;
    sub_21B91C0C8((uint64_t)&v31, v9, &v51, &v48, (int *)"@", (uint64_t)v45);
    if (v47)
    {
      int v12 = v46;
      if (v46)
      {
        if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    long long v13 = v32;
    *(_OWORD *)a1 = v31;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v33;
    *(_DWORD *)(a1 + 48) = v34;
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    if (v37)
    {
      *(void *)(a1 + 56) = &unk_26CB95DA8;
      long long v14 = v35;
      long long v15 = v36[0];
      long long v35 = 0uLL;
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v36 + 14);
      *(unsigned char *)(a1 + 112) = 1;
    }
    *(_DWORD *)(a1 + 120) = 1;
    uint64_t v16 = v44;
    if (v44 == -1) {
      return;
    }
LABEL_28:
    ((void (*)(long long *, _OWORD *))off_26CB9F4C8[v16])(&v31, v38);
    return;
  }
  unint64_t v17 = a2[7].u64[1];
  if (HIDWORD(v17)
    || (unint64_t v18 = a2[5].u64[0], HIDWORD(v18))
    || (unint64_t v19 = a2[5].u64[1], HIDWORD(v19))
    || (unint64_t v20 = a2[6].u64[0], HIDWORD(v20))
    || (unint64_t v21 = a2[6].u64[1], HIDWORD(v21)))
  {
    unint64_t v30 = __cxa_allocate_exception(8uLL);
    *unint64_t v30 = &unk_26CBA1D90;
    __cxa_throw(v30, (struct type_info *)&unk_26CBA1DA8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v22 = a2->i64[0];
  int64x2_t v23 = a2[8];
  uint64_t v24 = a2[9].i64[0];
  *(void *)&long long v51 = __PAIR64__(v18, v17);
  *((void *)&v51 + 1) = __PAIR64__(v20, v19);
  int v52 = v21;
  LODWORD(v48) = 1;
  DWORD1(v48) = v17;
  *((int32x2_t *)&v48 + 1) = vmovn_s64(v23);
  int v49 = v24;
  char v50 = 1;
  v45[0] = 0;
  char v47 = 0;
  sub_21B91C0C8((uint64_t)&v31, v22, &v51, &v48, &dword_21B9B0F68, (uint64_t)v45);
  if (v47)
  {
    size_t v25 = v46;
    if (v46)
    {
      if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  long long v26 = v32;
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v26;
  *(_OWORD *)(a1 + 32) = v33;
  *(_DWORD *)(a1 + 48) = v34;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (v37)
  {
    *(void *)(a1 + 56) = &unk_26CB95DA8;
    long long v27 = v35;
    long long v28 = v36[0];
    long long v35 = 0uLL;
    *(_OWORD *)(a1 + 64) = v27;
    *(_OWORD *)(a1 + 80) = v28;
    *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v36 + 14);
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v16 = v44;
  if (v44 != -1) {
    goto LABEL_28;
  }
}

void sub_21B9367B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_21B844928(v17 - 144);
  sub_21B936814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B9367D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_21B936814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B9367EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_21B936814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B936800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_21B936814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B936814(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CB9F4C8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_21B936870()
{
}

void sub_21B936A5C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_21B936A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B936AC4()
{
}

void sub_21B936ADC(void *a1)
{
  if (a1)
  {
    sub_21B936ADC(*a1);
    sub_21B936ADC(a1[1]);
    if (*((unsigned char *)a1 + 112)
      && *((unsigned char *)a1 + 104)
      && (a1[10] = &unk_26CB99920, (uint64_t v2 = (std::__shared_weak_count *)a1[12]) != 0)
      && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      __int32 v3 = a1;
    }
    else
    {
      __int32 v3 = a1;
    }
    operator delete(v3);
  }
}

uint64_t sub_21B936BC0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21B936C3C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_21B936CC0(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  sub_21B878C94(a3, &pixelBuffer);
  if (CVPixelBufferGetIOSurface(pixelBuffer)
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_21B984AC4))
  {
    if (**(unsigned char **)a2 && **(_DWORD **)(a2 + 8) == 1) {
      int v8 = espresso_network_bind_direct_cvpixelbuffer();
    }
    else {
      int v8 = espresso_network_bind_input_cvpixelbuffer();
    }
    sub_21B936F1C(a1, *(unint64_t ****)(a2 + 40), v8);
  }
  abort();
}

void sub_21B936E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B936E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21B936EA0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21B936F1C(uint64_t a1, unint64_t ***a2, int a3)
{
  if (a3)
  {
    char v4 = **a2;
    char v10 = 5;
    sub_21B84080C(v4);
    unint64_t v5 = std::string::insert(&v7, 0, "Failed to bind buffer created for Espresso Model input ", 0x37uLL);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_21B858B90(a1, &v10);
  }
  *(void *)a1 = &unk_26CB95650;
  *(unsigned char *)(a1 + 8) = 0;
  operator new();
}

void sub_21B93706C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  MEMORY[0x21D495F30](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_21B9370A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_21B9370EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B937178()
{
  return 25;
}

uint64_t sub_21B937180(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21B937188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_21B9371A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

double sub_21B937234(char *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5F878))
  {
    sub_21B837058(v30, "ConstImageView");
    uint64_t v24 = sub_21B88645C();
    sub_21B9376F0((uint64_t)&v32, (uint64_t)v24);
    size_t v25 = sub_21B84F840();
    sub_21B9376F0((uint64_t)&v35, (uint64_t)v25);
    sub_21B84C93C(v29, (uint64_t)&v32, 2uLL);
    sub_21B984180(v30, (uint64_t *)v29, (std::string *)&qword_267C5F888, v26, v27);
    sub_21B83A3DC(v29);
    if (SHIBYTE(v37) < 0)
    {
      operator delete(v35);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
      {
LABEL_39:
        if ((v31 & 0x80000000) == 0)
        {
LABEL_40:
          __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F888, &dword_21B831000);
          __cxa_guard_release(&qword_267C5F878);
          goto LABEL_2;
        }
LABEL_44:
        operator delete(v30[0]);
        goto LABEL_40;
      }
    }
    else if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(v32);
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }
LABEL_2:
  char v4 = sub_21B925808();
  long long v32 = "Attempting to create an ";
  uint64_t v33 = 24;
  unint64_t v5 = &qword_267C5F888;
  unint64_t v6 = byte_267C5F89F;
  if (byte_267C5F89F < 0)
  {
    unint64_t v6 = unk_267C5F890;
    unint64_t v5 = (uint64_t *)qword_267C5F888;
  }
  int v34 = (const char *)v5;
  long long v35 = (void *)v6;
  int v36 = " from an ";
  uint64_t v37 = 9;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v8 = v4;
  }
  else {
    int v8 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  v38[0] = v8;
  v38[1] = size;
  sub_21B84F40C((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    char v10 = *(std::__shared_weak_count **)(a2 + 16);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9);
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v32 = p_p;
    uint64_t v33 = v14;
    int v34 = " but the other image contains an incompatible buffer type ";
    long long v35 = (void *)58;
    int v36 = (const char *)v12;
    uint64_t v37 = v13;
    sub_21B84F40C((uint64_t)&v32, (uint64_t)v38, 0, 0, (std::string *)a1);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_19;
    }
    return result;
  }
  int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v18 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v19 = v18 + 46;
  if (v18 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v19 <= 0x16)
  {
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *(void *)a1 = 0;
    unint64_t v20 = a1;
    a1[23] = v19;
LABEL_30:
    if (v17 >= 0) {
      int64x2_t v23 = &__p;
    }
    else {
      int64x2_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, v23, v18);
    goto LABEL_34;
  }
  uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v21 = v19 | 7;
  }
  uint64_t v22 = v21 + 1;
  unint64_t v20 = (char *)operator new(v21 + 1);
  *((void *)a1 + 1) = v19;
  *((void *)a1 + 2) = v22 | 0x8000000000000000;
  *(void *)a1 = v20;
  a1 = v20;
  if (v18) {
    goto LABEL_30;
  }
LABEL_34:
  strcpy(&v20[v18], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v17 & 0x80) != 0) {
LABEL_19:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B937610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5F878);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_267C5F878);
  _Unwind_Resume(a1);
}

void sub_21B9376C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B9376F0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B937790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B9377AC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B937838()
{
  return 3;
}

uint64_t sub_21B937840(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21B937848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21B972E90(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_21B937864(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

double sub_21B9378F4(char *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5F880))
  {
    sub_21B837058(v30, "ConstImageView");
    uint64_t v24 = sub_21B885E44();
    sub_21B937DB0((uint64_t)&v32, (uint64_t)v24);
    size_t v25 = sub_21B84F840();
    sub_21B937DB0((uint64_t)&v35, (uint64_t)v25);
    sub_21B84C93C(v29, (uint64_t)&v32, 2uLL);
    sub_21B984180(v30, (uint64_t *)v29, (std::string *)&qword_267C5F8A0, v26, v27);
    sub_21B83A3DC(v29);
    if (SHIBYTE(v37) < 0)
    {
      operator delete(v35);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
      {
LABEL_39:
        if ((v31 & 0x80000000) == 0)
        {
LABEL_40:
          __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267C5F8A0, &dword_21B831000);
          __cxa_guard_release(&qword_267C5F880);
          goto LABEL_2;
        }
LABEL_44:
        operator delete(v30[0]);
        goto LABEL_40;
      }
    }
    else if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(v32);
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }
LABEL_2:
  char v4 = sub_21B924B90();
  long long v32 = "Attempting to create an ";
  uint64_t v33 = 24;
  unint64_t v5 = &qword_267C5F8A0;
  unint64_t v6 = byte_267C5F8B7;
  if (byte_267C5F8B7 < 0)
  {
    unint64_t v6 = unk_267C5F8A8;
    unint64_t v5 = (uint64_t *)qword_267C5F8A0;
  }
  int v34 = (const char *)v5;
  long long v35 = (void *)v6;
  int v36 = " from an ";
  uint64_t v37 = 9;
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v8 = v4;
  }
  else {
    int v8 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  v38[0] = v8;
  v38[1] = size;
  sub_21B84F40C((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    char v10 = *(std::__shared_weak_count **)(a2 + 16);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9);
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v32 = p_p;
    uint64_t v33 = v14;
    int v34 = " but the other image contains an incompatible buffer type ";
    long long v35 = (void *)58;
    int v36 = (const char *)v12;
    uint64_t v37 = v13;
    sub_21B84F40C((uint64_t)&v32, (uint64_t)v38, 0, 0, (std::string *)a1);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_19;
    }
    return result;
  }
  int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v18 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v19 = v18 + 46;
  if (v18 + 46 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21B836090();
  }
  if (v19 <= 0x16)
  {
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *(void *)a1 = 0;
    unint64_t v20 = a1;
    a1[23] = v19;
LABEL_30:
    if (v17 >= 0) {
      int64x2_t v23 = &__p;
    }
    else {
      int64x2_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, v23, v18);
    goto LABEL_34;
  }
  uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v21 = v19 | 7;
  }
  uint64_t v22 = v21 + 1;
  unint64_t v20 = (char *)operator new(v21 + 1);
  *((void *)a1 + 1) = v19;
  *((void *)a1 + 2) = v22 | 0x8000000000000000;
  *(void *)a1 = v20;
  a1 = v20;
  if (v18) {
    goto LABEL_30;
  }
LABEL_34:
  strcpy(&v20[v18], " but the other image does not contain a buffer");
  double result = *(double *)"contain a buffer";
  if ((v17 & 0x80) != 0) {
LABEL_19:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_21B937CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267C5F880);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_267C5F880);
  _Unwind_Resume(a1);
}

void sub_21B937D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B937DB0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    sub_21B846188(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_21B983920(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_21B997215, 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21B937E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21B937E6C(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  if (a1[11])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      int64x2_t v26 = __src;
      int8x16_t v27 = __dst;
      uint64_t v11 = __dst;
      uint64_t v12 = __src;
      if (a1[8]) {
        break;
      }
LABEL_3:
      sub_21B9380E0(a1, a2, a3, v12, v11);
      __src = &v26[4 * a1[12]];
      std::string __dst = &v27[4 * a1[13]];
      int v10 = v25 + 1;
      if ((v25 + 1) >= a1[11]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    uint64_t v12 = v26;
    uint64_t v11 = v27;
    while (1)
    {
      int v14 = a1[3];
      int v15 = a1[4];
      *(void *)a2 = v12;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 24) = v15;
      unsigned int v16 = a1[5];
      int v17 = v11;
      size_t v18 = v12;
      if (v16)
      {
        int v19 = 0;
        size_t v18 = v12;
        int v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          uint64_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          unint64_t v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += 4 * a1[6];
          v17 += 4 * a1[7];
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        unint64_t v20 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, 4 * v21);
        unsigned int v16 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      uint64_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += 4 * a1[9];
      v11 += 4 * a1[10];
      if (++v13 >= a1[8]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    int v17 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, 4 * v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B9380E0(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v23;
    }
    while (v23 < a1[8]);
  }

  return sub_21B9380E0(a1, a2, a3, __src, __dst);
}

_DWORD *sub_21B9380E0(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  unint64_t v5 = __dst;
  unint64_t v6 = __src;
  int v9 = result[3];
  int v10 = result[4];
  *(void *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  unsigned int v11 = result[5];
  if (v11)
  {
    uint64_t v12 = result;
    int v13 = 0;
    while (1)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 16) = v5;
      uint64_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      double result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    double result = *(_DWORD **)(a2 + 16);
LABEL_4:
    double result = memmove(result, v6, 4 * v14);
    unsigned int v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  uint64_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    unint64_t v5 = *(char **)(a2 + 16);
  }

  return memmove(v5, v6, 4 * v15);
}

float sub_21B938280(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v3 = a1[8];
  int v4 = a1[5];
  if (v3)
  {
    int v5 = a1[2];
    uint64_t v6 = a1[9];
    uint64_t v7 = a1[10];
    if (v4)
    {
      uint64_t v8 = a1[6];
      uint64_t v9 = a1[7];
      if (!v5)
      {
        do
        {
          long long v48 = a3;
          int v49 = a2;
          int v50 = v4;
          do
          {
            *long long v48 = *v49;
            v49 += v8;
            v48 += v9;
            --v50;
          }
          while (v50);
          *long long v48 = *v49;
          a2 += v6;
          a3 += v7;
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_32;
      }
      int v10 = 0;
      uint64_t v11 = 4 * v6;
      uint64_t v12 = v8;
      uint64_t v13 = 4 * a1[3];
      uint64_t v14 = 4 * v7;
      uint64_t v15 = v9;
      uint64_t v16 = 4 * a1[4];
      int v17 = &a2[v12];
      size_t v18 = &a3[v15];
      do
      {
        int v19 = 0;
        unint64_t v20 = v18;
        uint64_t v21 = v17;
        uint64_t v22 = a3;
        unsigned int v23 = a2;
        do
        {
          uint64_t v24 = v21;
          int v25 = v20;
          int64x2_t v26 = v22;
          int8x16_t v27 = v23;
          int v28 = v5;
          do
          {
            *int64x2_t v26 = *v27;
            int8x16_t v27 = (_DWORD *)((char *)v27 + v13);
            int64x2_t v26 = (_DWORD *)((char *)v26 + v16);
            --v28;
          }
          while (v28);
          *int64x2_t v26 = *v27;
          unsigned int v23 = (_DWORD *)((char *)v23 + v12 * 4);
          uint64_t v22 = (_DWORD *)((char *)v22 + v15 * 4);
          ++v19;
          uint64_t v21 = &v24[v12];
          unint64_t v20 = &v25[v15];
        }
        while (v19 != v4);
        int v29 = v5;
        do
        {
          *int v25 = *v24;
          uint64_t v24 = (_DWORD *)((char *)v24 + v13);
          int v25 = (_DWORD *)((char *)v25 + v16);
          --v29;
        }
        while (v29);
        *int v25 = *v24;
        a2 = (_DWORD *)((char *)a2 + v11);
        a3 = (_DWORD *)((char *)a3 + v14);
        ++v10;
        int v17 = (_DWORD *)((char *)v17 + v11);
        size_t v18 = (_DWORD *)((char *)v18 + v14);
      }
      while (v10 != v3);
LABEL_14:
      uint64_t v8 = a1[6];
      uint64_t v9 = a1[7];
      if (v5)
      {
        int v30 = 0;
        uint64_t v31 = 4 * v8;
        uint64_t v32 = 4 * a1[3];
        uint64_t v33 = 4 * v9;
        uint64_t v34 = 4 * a1[4];
        do
        {
          long long v35 = a3;
          int v36 = a2;
          int v37 = v5;
          do
          {
            *long long v35 = *v36;
            int v36 = (_DWORD *)((char *)v36 + v32);
            long long v35 = (_DWORD *)((char *)v35 + v34);
            --v37;
          }
          while (v37);
          *long long v35 = *v36;
          a2 = (_DWORD *)((char *)a2 + v31);
          a3 = (_DWORD *)((char *)a3 + v33);
          ++v30;
        }
        while (v30 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a3 = *a2;
        a2 += v8;
        a3 += v9;
        --v4;
      }
      while (v4);
      goto LABEL_35;
    }
    if (!v5)
    {
      do
      {
        *a3 = *a2;
        a2 += v6;
        a3 += v7;
        --v3;
      }
      while (v3);
      goto LABEL_35;
    }
    int v38 = 0;
    uint64_t v39 = 4 * v6;
    uint64_t v40 = 4 * a1[3];
    uint64_t v41 = 4 * v7;
    uint64_t v42 = 4 * a1[4];
    do
    {
      uint64_t v43 = a3;
      unsigned int v44 = a2;
      int v45 = v5;
      do
      {
        *uint64_t v43 = *v44;
        unsigned int v44 = (_DWORD *)((char *)v44 + v40);
        uint64_t v43 = (_DWORD *)((char *)v43 + v42);
        --v45;
      }
      while (v45);
      *uint64_t v43 = *v44;
      a2 = (_DWORD *)((char *)a2 + v39);
      a3 = (_DWORD *)((char *)a3 + v41);
      ++v38;
    }
    while (v38 != v3);
  }
  else
  {
    int v5 = a1[2];
    if (v4) {
      goto LABEL_14;
    }
  }
LABEL_25:
  if (v5)
  {
    uint64_t v46 = 4 * a1[3];
    uint64_t v47 = 4 * a1[4];
    do
    {
      *a3 = *a2;
      a2 = (_DWORD *)((char *)a2 + v46);
      a3 = (_DWORD *)((char *)a3 + v47);
      --v5;
    }
    while (v5);
  }
LABEL_35:
  float result = *(float *)a2;
  *a3 = *a2;
  return result;
}

_DWORD *sub_21B938520(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  if (a1[11])
  {
    int v10 = 0;
    while (1)
    {
      int v25 = v10;
      int64x2_t v26 = __src;
      int8x16_t v27 = __dst;
      uint64_t v11 = __dst;
      uint64_t v12 = __src;
      if (a1[8]) {
        break;
      }
LABEL_3:
      sub_21B938794(a1, a2, a3, v12, v11);
      __src = &v26[a1[12]];
      std::string __dst = &v27[a1[13]];
      int v10 = v25 + 1;
      if ((v25 + 1) >= a1[11]) {
        goto LABEL_22;
      }
    }
    int v13 = 0;
    uint64_t v12 = __src;
    uint64_t v11 = v27;
    while (1)
    {
      int v14 = a1[3];
      int v15 = a1[4];
      *(void *)a2 = v12;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 24) = v15;
      unsigned int v16 = a1[5];
      int v17 = v11;
      size_t v18 = v12;
      if (v16)
      {
        int v19 = 0;
        size_t v18 = v12;
        int v17 = v11;
        while (1)
        {
          *(void *)a2 = v18;
          *(void *)(a2 + 16) = v17;
          size_t v21 = *a3;
          if (!v18)
          {
            if (v21) {
              break;
            }
          }
          unint64_t v20 = v17;
          if (v21) {
            goto LABEL_12;
          }
LABEL_13:
          v18 += a1[6];
          v17 += a1[7];
          if (++v19 >= v16) {
            goto LABEL_18;
          }
        }
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_28;
        }
        unint64_t v20 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v20, v18, v21);
        unsigned int v16 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(void *)a2 = v18;
      *(void *)(a2 + 16) = v17;
      size_t v22 = *a3;
      if (!v18)
      {
        if (v22) {
          break;
        }
      }
      if (v22) {
        goto LABEL_7;
      }
LABEL_8:
      v12 += a1[9];
      v11 += a1[10];
      if (++v13 >= a1[8]) {
        goto LABEL_3;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_28:
      abort();
    }
    int v17 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v17, v18, v22);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    unsigned int v23 = 0;
    do
    {
      sub_21B938794(a1, a2, a3, __src, __dst);
      __src += a1[9];
      __dst += a1[10];
      ++v23;
    }
    while (v23 < a1[8]);
  }

  return sub_21B938794(a1, a2, a3, __src, __dst);
}

_DWORD *sub_21B938794(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  int v5 = __dst;
  uint64_t v6 = __src;
  int v9 = result[3];
  int v10 = result[4];
  *(void *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  unsigned int v11 = result[5];
  if (v11)
  {
    uint64_t v12 = result;
    int v13 = 0;
    while (1)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 16) = v5;
      size_t v14 = *a3;
      if (!v6)
      {
        if (v14) {
          break;
        }
      }
      float result = v5;
      if (v14) {
        goto LABEL_4;
      }
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11) {
        goto LABEL_10;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_19;
    }
    float result = *(_DWORD **)(a2 + 16);
LABEL_4:
    float result = memmove(result, v6, v14);
    unsigned int v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  size_t v15 = *a3;
  if (v6 || !v15)
  {
    if (!v15) {
      return result;
    }
  }
  else
  {
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
LABEL_19:
      abort();
    }
    int v5 = *(char **)(a2 + 16);
  }

  return memmove(v5, v6, v15);
}

void sub_21B938934(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_21B9389B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_21B938A40()
{
}

__n128 sub_21B938A54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26CB9F518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21B938AA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CB9F518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21B938AD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21B938AD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_21B938B48()
{
  return &unk_26CB9F578;
}

void sub_21B938B54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9F598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21B938B74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CB9F598;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D495F30);
}

uint64_t sub_21B938BC8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21B938BF0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v1 = *a1;
    uint64_t v2 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v2 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    unint64_t i = *(void *)(v1 + 8) ? *(void **)(v1 + 8) : (void *)v1;
    if (i)
    {
      int v4 = (void *)i[2];
      if (v4)
      {
        int v5 = (void *)*v4;
        if ((void *)*v4 == i)
        {
          *int v4 = 0;
          while (1)
          {
            uint64_t v7 = (void *)v4[1];
            if (!v7) {
              break;
            }
            do
            {
              int v4 = v7;
              uint64_t v7 = (void *)*v7;
            }
            while (v7);
          }
        }
        else
        {
          for (v4[1] = 0; v5; int v5 = (void *)v4[1])
          {
            do
            {
              int v4 = v5;
              int v5 = (void *)*v5;
            }
            while (v5);
          }
        }
        sub_21B936ADC(i);
        uint64_t v6 = (void *)v4[2];
        for (i = v4; v6; uint64_t v6 = (void *)v6[2])
          unint64_t i = v6;
      }
      sub_21B936ADC(i);
    }
  }
}

uint64_t sub_21B938CC4(int a1, char a2)
{
  unsigned int v3 = a1 - 1;
  uint64_t result = 1;
  if (v3 >= 2 && (a2 & 1) == 0)
  {
    if (a1 != 3)
    {
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 62, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unexpected device type", 22, (void (*)(void **))sub_21B984AC4);
      abort();
    }
    return 2;
  }
  return result;
}

uint64_t sub_21B938D34(int a1)
{
  switch(a1)
  {
    case 1:
      break;
    case 3:
      break;
    case 2:
      break;
    default:
      sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_21B984AC4);
      abort();
  }
  return espresso_create_context();
}

uint64_t sub_21B938DE4(char a1)
{
  unsigned int v2 = (unsigned __int16)off_26CBA1C70();
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  if ((_BYTE)v2)
  {
    unsigned int v3 = (char *)operator new(4uLL);
    *(_DWORD *)unsigned int v3 = 1;
    int v4 = v3 + 4;
    if (a1) {
      goto LABEL_5;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
    if (a1)
    {
LABEL_5:
      int v5 = v4;
      int64_t v6 = v4 - v3;
      uint64_t v7 = (v4 - v3) >> 2;
      unint64_t v8 = v7 + 1;
      if (!((unint64_t)(v7 + 1) >> 62)) {
        goto LABEL_6;
      }
LABEL_37:
      sub_21B846300();
    }
  }
  uint64_t v13 = v4 - v3;
  uint64_t v14 = (v4 - v3) >> 2;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62) {
    sub_21B846300();
  }
  if (v13 >> 1 > v15) {
    unint64_t v15 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 >> 62) {
      sub_21B845A48();
    }
    int v17 = (char *)operator new(4 * v16);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v20 = &v17[4 * v14];
  *(_DWORD *)unint64_t v20 = 2;
  size_t v21 = v20 + 4;
  int v10 = v20;
  if (v4 != v3)
  {
    unint64_t v22 = (v4 - v3 - 4) & 0xFFFFFFFFFFFFFFFCLL;
    int v10 = &v17[v13 - v22 - 4];
    memcpy(v10, &v4[-v22 - 4], v22 + 4);
  }
  int v5 = &v17[4 * v16];
  if (v3) {
    operator delete(v3);
  }
  if (v21 < v5)
  {
    *((_DWORD *)v20 + 1) = 3;
    uint64_t v11 = (uint64_t)(v20 + 8);
    goto LABEL_44;
  }
  unsigned int v3 = v10;
  int v4 = v20 + 4;
  int64_t v6 = v21 - v10;
  uint64_t v7 = (v21 - v10) >> 2;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 62) {
    goto LABEL_37;
  }
LABEL_6:
  if ((v5 - v3) >> 1 > v8) {
    unint64_t v8 = (v5 - v3) >> 1;
  }
  if ((unint64_t)(v5 - v3) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    if (v8 >> 62) {
      sub_21B845A48();
    }
    int v9 = (char *)operator new(4 * v8);
    int v10 = &v9[4 * v7];
    *(_DWORD *)int v10 = 3;
    uint64_t v11 = (uint64_t)(v10 + 4);
    int64_t v12 = v4 - v3;
    if (v4 == v3) {
      goto LABEL_42;
    }
  }
  else
  {
    int v9 = 0;
    int v10 = (char *)(4 * v7);
    *(_DWORD *)(4 * v7) = 3;
    uint64_t v11 = 4 * v7 + 4;
    int64_t v12 = v4 - v3;
    if (v4 == v3) {
      goto LABEL_42;
    }
  }
  unint64_t v18 = v12 - 4;
  if (v18 < 0x2C)
  {
    int v19 = v4;
    goto LABEL_41;
  }
  if ((unint64_t)(v4 - v9 - v6) < 0x20)
  {
    int v19 = v4;
    do
    {
LABEL_41:
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v10 - 1) = v29;
      v10 -= 4;
    }
    while (v19 != v3);
    goto LABEL_42;
  }
  uint64_t v23 = (v18 >> 2) + 1;
  uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
  int v19 = &v4[-v24];
  v10 -= v24;
  int v25 = &v9[4 * v7 - 16];
  int64x2_t v26 = v4 - 16;
  uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v28 = *(_OWORD *)v26;
    *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
    *(_OWORD *)int v25 = v28;
    v25 -= 32;
    v26 -= 32;
    v27 -= 8;
  }
  while (v27);
  if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_41;
  }
LABEL_42:
  if (v3) {
    operator delete(v3);
  }
LABEL_44:
  if (v10 == (char *)v11)
  {
    uint64_t context = 0;
  }
  else
  {
    int v30 = v10;
    do
    {
      int v31 = *(_DWORD *)v30;
      if (*(_DWORD *)v30 != 1 && v31 != 3 && v31 != 2)
      {
        sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)&unk_21B997215, 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_21B984AC4);
        abort();
      }
      uint64_t context = espresso_create_context();
      if (context) {
        break;
      }
      v30 += 4;
    }
    while (v30 != (char *)v11);
  }
  operator delete(v10);
  return context;
}

void sub_21B939174(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B9391A0(uint64_t result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  if (a2)
  {
    uint64_t v32 = 0;
    e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
    unsigned int v2 = (const char *)MEMORY[0x21D496190]();
    size_t v3 = strlen(v2);
    if (v3 > 0x7FFFFFFFFFFFFFF7) {
      sub_21B836090();
    }
    std::string::size_type v4 = v3;
    if (v3 >= 0x17)
    {
      uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v6 = v3 | 7;
      }
      uint64_t v7 = v6 + 1;
      p_dst = (std::string *)operator new(v6 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        unint64_t v8 = std::string::insert(&__dst, 0, "EspressoStreamPool: Failed to create e5rt stream operation with options.  Return code: ", 0x57uLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        int v10 = std::string::append(&v28, ". Last error message: ", 0x16uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        last_error_message = (const char *)e5rt_get_last_error_message();
        size_t v13 = strlen(last_error_message);
        if (v13 > 0x7FFFFFFFFFFFFFF7) {
          sub_21B836090();
        }
        size_t v14 = v13;
        if (v13 >= 0x17)
        {
          uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17) {
            uint64_t v16 = v13 | 7;
          }
          uint64_t v17 = v16 + 1;
          p_p = operator new(v16 + 1);
          size_t v25 = v14;
          int64_t v26 = v17 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v26) = v13;
          p_p = &__p;
          if (!v13)
          {
LABEL_22:
            *((unsigned char *)p_p + v14) = 0;
            if (v26 >= 0) {
              unint64_t v18 = (const std::string::value_type *)&__p;
            }
            else {
              unint64_t v18 = (const std::string::value_type *)__p;
            }
            if (v26 >= 0) {
              std::string::size_type v19 = HIBYTE(v26);
            }
            else {
              std::string::size_type v19 = v25;
            }
            unint64_t v20 = std::string::append(&v29, v18, v19);
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            int64_t v31 = v20->__r_.__value_.__r.__words[2];
            long long v30 = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v26) < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_30:
                if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_31;
                }
                goto LABEL_42;
              }
            }
            else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_30;
            }
            operator delete(v29.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_31:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_33;
              }
              goto LABEL_32;
            }
LABEL_42:
            operator delete(v28.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_33:
              if (v31 >= 0) {
                unint64_t v22 = &v30;
              }
              else {
                unint64_t v22 = (long long *)v30;
              }
              if (v31 >= 0) {
                uint64_t v23 = HIBYTE(v31);
              }
              else {
                uint64_t v23 = *((void *)&v30 + 1);
              }
              sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2StreamPool.cpp", 76, (uint64_t)&unk_21B997215, 0, (uint64_t)v22, v23, (void (*)(void **))sub_21B984AC4);
              abort();
            }
LABEL_32:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_33;
          }
        }
        memmove(p_p, last_error_message, v14);
        goto LABEL_22;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_13;
  }
  return result;
}

void sub_21B939A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  sub_21B93A100(a11);
  uint64_t v40 = *a10;
  if (*a10)
  {
    do
    {
      uint64_t v41 = (void *)*v40;
      operator delete(v40);
      uint64_t v40 = v41;
    }
    while (v41);
  }
  uint64_t v42 = *v37;
  const void *v37 = 0;
  if (v42) {
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B939BE0(uint64_t a1)
{
  for (unint64_t i = *(void **)(a1 + 16); i; unint64_t i = (void *)*i)
  {
    if (i[2]) {
      e5rt_execution_stream_release();
    }
    if (i[4]) {
      e5rt_execution_stream_operation_release();
    }
  }
  sub_21B93A100(a1 + 40);
  size_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    do
    {
      std::string::size_type v4 = (void *)*v3;
      operator delete(v3);
      size_t v3 = v4;
    }
    while (v4);
  }
  int v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

unint64_t sub_21B939C78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = *(void *)(*(void *)(v5 + (((unint64_t)(v6 + v2 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v6 + v2 - 1) & 0x1FF));
  if (v4 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v4 - v5) << 6) - 1;
  }
  *(void *)(a1 + 80) = v2 - 1;
  if ((unint64_t)(v8 - (v2 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v4 - 8));
    *(void *)(a1 + 56) -= 8;
  }
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v9 >> 47) ^ v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v1 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12) {
        unint64_t v1 = v11 % v12;
      }
    }
    else
    {
      unint64_t v1 = (v12 - 1) & v11;
    }
    unint64_t v15 = *(void ***)(*(void *)a1 + 8 * v1);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == v11)
            {
              if (v16[2] == v7) {
                goto LABEL_68;
              }
            }
            else if ((v18 & (v12 - 1)) != v1)
            {
              goto LABEL_29;
            }
            uint64_t v16 = (void *)*v16;
            if (!v16) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v11)
          {
            if (v16[2] == v7) {
              goto LABEL_68;
            }
          }
          else
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
            if (v17 != v1) {
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_29:
  uint64_t v16 = operator new(0x28uLL);
  *uint64_t v16 = 0;
  v16[1] = v11;
  void v16[2] = v7;
  void v16[3] = 1;
  v16[4] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_41;
    }
    if (prime < v12)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v12) {
LABEL_41:
      }
        sub_21B8491D4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v28 = v12 - 1;
    if ((v12 & (v12 - 1)) == 0)
    {
      unint64_t v1 = v28 & v11;
      uint64_t v29 = *(void *)a1;
      long long v30 = *(void **)(*(void *)a1 + 8 * (v28 & v11));
      if (!v30) {
        goto LABEL_60;
      }
LABEL_58:
      *uint64_t v16 = *v30;
      goto LABEL_66;
    }
    if (v11 >= v12)
    {
      unint64_t v1 = v11 % v12;
      uint64_t v29 = *(void *)a1;
      long long v30 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
      if (v30) {
        goto LABEL_58;
      }
      goto LABEL_60;
    }
    unint64_t v1 = v11;
  }
  uint64_t v29 = *(void *)a1;
  long long v30 = *(void **)(*(void *)a1 + 8 * v1);
  if (v30) {
    goto LABEL_58;
  }
LABEL_60:
  *uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v29 + 8 * v1) = a1 + 16;
  if (!*v16) {
    goto LABEL_67;
  }
  unint64_t v31 = *(void *)(*v16 + 8);
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v31 >= v12) {
      v31 %= v12;
    }
  }
  else
  {
    v31 &= v12 - 1;
  }
  long long v30 = (void *)(*(void *)a1 + 8 * v31);
LABEL_66:
  *long long v30 = v16;
LABEL_67:
  ++*(void *)(a1 + 24);
LABEL_68:
  *((unsigned char *)v16 + 24) = 0;
  sub_21B93A8A4((void *)a1, v7);
  return v7;
}

void sub_21B93A02C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21B93A040(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_21B93A8A4(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (!*((unsigned char *)v4 + 24))
    {
      e5rt_execution_stream_reset();
      uint64_t v6 = a1[7];
      uint64_t v7 = a1[6];
      if (v6 == v7) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = ((v6 - v7) << 6) - 1;
      }
      uint64_t v9 = a1[10];
      unint64_t v10 = v9 + a1[9];
      if (v8 == v10)
      {
        sub_21B93A1C8(a1 + 5);
        uint64_t v7 = a1[6];
        uint64_t v9 = a1[10];
        unint64_t v10 = a1[9] + v9;
      }
      *(void *)(*(void *)(v7 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)) = a2;
      a1[10] = v9 + 1;
      *((unsigned char *)v5 + 24) = 1;
    }
  }
}

uint64_t sub_21B93A100(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  size_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      size_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21B93A1C8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v6 = (void *)a1[1];
    unint64_t v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)unint64_t v5 = v8;
      goto LABEL_95;
    }
    uint64_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      size_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      unint64_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    unint64_t v5 = v42;
    if (!v43)
    {
      unint64_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        std::string::size_type v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          long long v95 = (long long *)(v6 + 3);
          long long v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *long long v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    long long v100 = v9;
LABEL_93:
    operator delete(v100);
    unint64_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  uint64_t v18 = (char *)a1[2];
  unint64_t v17 = (char *)a1[3];
  float v20 = (char *)*a1;
  float v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    unint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      long long v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      int v73 = v47;
      if (v18 != v19)
      {
        int v73 = &v47[8 * v22];
        uint64_t v74 = &v72[8 * v70];
        std::string::size_type v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        int v76 = &v72[8 * v70];
        uint64_t v74 = v76;
        std::string::size_type v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v74 = &v47[v78];
        std::string::size_type v75 = &v19[v78];
        unint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)uint64_t v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    unint64_t v84 = (char *)a1[1];
    unint64_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    BOOL v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      long long v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        unint64_t v84 = (char *)a1[1];
      }
      unint64_t v5 = &v90[v91];
      uint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      unint64_t v104 = (char *)operator new(8 * v101);
      std::string::size_type v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      unint64_t v5 = v105;
      if (!v43)
      {
        unint64_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          char v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            char v112 = &v84[v111];
            unint64_t v113 = (long long *)(v84 + 16);
            unint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            unint64_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      long long v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_21B845A48();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  unint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  long long v30 = v29;
  unint64_t v31 = &v28[8 * v22];
  uint64_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_21B845A48();
      }
      unint64_t v31 = (char *)operator new(8 * v48);
      uint64_t v32 = &v31[8 * v48];
      operator delete(v28);
      int v49 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      unint64_t v28 = v31;
      *(void *)unint64_t v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_21B845A48();
            }
            long long v55 = (char *)operator new(8 * v54);
            unint64_t v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            int v50 = &v55[8 * v56];
            int v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              int v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              BOOL v59 = &v55[8 * v56];
              __int16 v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              BOOL v59 = &v55[8 * v56];
              __int16 v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              BOOL v59 = &v50[v63];
              __int16 v60 = &v31[v63];
              int v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)BOOL v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            uint64_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            int v36 = &v34[8 * (v53 >> 1)];
            int v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              unint64_t v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              unint64_t v28 = v31;
            }
          }
        }
        else
        {
          int v50 = v31;
          int v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        long long v35 = v50 - 8;
        uint64_t v34 = v36;
        unint64_t v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)unint64_t v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  long long v35 = v31;
  int v36 = v34;
LABEL_26:
  int v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_21B93A844(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21B93A860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21B93A874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21B93A88C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21B93A8A4(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_21B93A9B4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_21B91FD30(v10 + 8, a2, (uint64_t)&v14);
  char v11 = v15;
  if (v15)
  {
    *(void *)a5 = &unk_26CB95650;
    *(unsigned char *)(a5 + 8) = v11;
    uint64_t v12 = v17;
    *(void *)(a5 + 16) = v16;
    *(void *)(a5 + 24) = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a5 + 32) = 0;
    *(unsigned char *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
  }
  size_t v14 = &unk_26CB95650;
  uint64_t v13 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21B93AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21B93AB48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_21B922164(a2, &__p);
  sub_21B93A9B4(a1, (uint64_t *)&__p, a3, a4, a5);
  uint64_t v9 = (char *)__p;
  if (__p)
  {
    uint64_t v10 = v15;
    char v11 = __p;
    if (v15 != __p)
    {
      do
      {
        uint64_t v12 = v10 - 128;
        uint64_t v13 = *((unsigned int *)v10 - 2);
        if (v13 != -1) {
          ((void (*)(char *, char *))off_26CB9F5D8[v13])(&v16, v10 - 128);
        }
        *((_DWORD *)v10 - 2) = -1;
        v10 -= 128;
      }
      while (v12 != v9);
      char v11 = __p;
    }
    char v15 = v9;
    operator delete(v11);
  }
}

void sub_21B93AC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_21B93AC30(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_21B91FD30(v10 + 8, a2, (uint64_t)&v14);
  char v11 = v15;
  if (v15)
  {
    *(void *)a5 = &unk_26CB95650;
    *(unsigned char *)(a5 + 8) = v11;
    uint64_t v12 = v17;
    *(void *)(a5 + 16) = v16;
    *(void *)(a5 + 24) = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a5 + 32) = 0;
    *(unsigned char *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2, a3, a4);
  }
  size_t v14 = &unk_26CB95650;
  uint64_t v13 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21B93ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21B93ADC4(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 24);
  int v5 = *(_DWORD *)(a2 + 4);
  uint64_t result = (void *)sub_21B8540D8(a2, (uint64_t)&__src);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v34))) & 1) == 0 && v35)
  {
    size_t v7 = (v5 * v4);
    __int32 v8 = v34.i32[2] - 1;
    uint64_t v9 = v36;
    uint64_t v10 = v37;
    char v11 = (char *)__src;
    int v31 = v35 - 1;
    __int32 v32 = v34.i32[3] - 1;
    if (v35 != 1)
    {
      uint64_t v30 = v38;
      if (v34.i32[3] == 1)
      {
        if (v34.i32[2] == 1)
        {
          if (!v7) {
            return result;
          }
          do
          {
            uint64_t result = memmove(v3, v11, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v11 += v30;
            --v31;
          }
          while (v31);
        }
        else
        {
          if (!v7) {
            return result;
          }
          int v18 = 0;
          do
          {
            __int32 v19 = v8;
            float v20 = v11;
            do
            {
              memmove(v3, v20, v7);
              unint64_t v3 = &a1[3][(void)v3];
              v20 += v9;
              --v19;
            }
            while (v19);
            uint64_t result = memmove(v3, v20, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v11 += v30;
            ++v18;
          }
          while (v18 != v31);
        }
      }
      else if (v34.i32[2] == 1)
      {
        if (!v7) {
          return result;
        }
        int v21 = 0;
        do
        {
          __int32 v22 = v32;
          uint64_t v23 = v11;
          do
          {
            memmove(v3, v23, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v23 += v10;
            --v22;
          }
          while (v22);
          uint64_t result = memmove(v3, v23, v7);
          unint64_t v3 = &a1[3][(void)v3];
          v11 += v30;
          ++v21;
        }
        while (v21 != v31);
      }
      else
      {
        if (!v7) {
          return result;
        }
        int v12 = 0;
        do
        {
          int v28 = v12;
          int v13 = 0;
          uint64_t v29 = v11;
          size_t v14 = v11;
          do
          {
            __int32 v15 = v8;
            uint64_t v16 = v14;
            do
            {
              memmove(v3, v16, v7);
              unint64_t v3 = &a1[3][(void)v3];
              v16 += v9;
              --v15;
            }
            while (v15);
            memmove(v3, v16, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v14 += v10;
            ++v13;
          }
          while (v13 != v32);
          __int32 v17 = v8;
          do
          {
            memmove(v3, v14, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v14 += v9;
            --v17;
          }
          while (v17);
          uint64_t result = memmove(v3, v14, v7);
          unint64_t v3 = &a1[3][(void)v3];
          char v11 = &v29[v30];
          int v12 = v28 + 1;
        }
        while (v28 + 1 != v31);
      }
    }
    __int32 v24 = v32;
    if (v32)
    {
      if (v8)
      {
        if (!v7) {
          return result;
        }
        for (int i = 0; i != v32; ++i)
        {
          __int32 v26 = v8;
          unint64_t v27 = v11;
          do
          {
            memmove(v3, v27, v7);
            unint64_t v3 = &a1[3][(void)v3];
            v27 += v9;
            --v26;
          }
          while (v26);
          uint64_t result = memmove(v3, v27, v7);
          unint64_t v3 = &a1[3][(void)v3];
          v11 += v10;
        }
      }
      else
      {
        if (!v7) {
          return result;
        }
        do
        {
          uint64_t result = memmove(v3, v11, v7);
          unint64_t v3 = &a1[3][(void)v3];
          v11 += v10;
          --v24;
        }
        while (v24);
      }
    }
    if (v8)
    {
      if (!v7) {
        return result;
      }
      do
      {
        uint64_t result = memmove(v3, v11, v7);
        unint64_t v3 = &a1[3][(void)v3];
        v11 += v9;
        --v8;
      }
      while (v8);
    }
    if (v7) {
      return memmove(v3, v11, v7);
    }
  }
  return result;
}

std::string *sub_21B93B12C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C128, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C128))
  {
    return &stru_267C5C110;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C110);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C110, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C128);
  return &stru_267C5C110;
}

void sub_21B93B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C128);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C128);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B230()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C148, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C148))
  {
    return &stru_267C5C130;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C130);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C130, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C148);
  return &stru_267C5C130;
}

void sub_21B93B2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C148);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C148);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B334()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C168, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C168))
  {
    return &stru_267C5C150;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C150);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C150, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C168);
  return &stru_267C5C150;
}

void sub_21B93B3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C168);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B438()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C188, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C188))
  {
    return &stru_267C5C170;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C170);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C170, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C188);
  return &stru_267C5C170;
}

void sub_21B93B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C188);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B53C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C1A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C1A8))
  {
    return &stru_267C5C190;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C190);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C190, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C1A8);
  return &stru_267C5C190;
}

void sub_21B93B600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C1A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C1A8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B640()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C1C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C1C8))
  {
    return &stru_267C5C1B0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four8u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C1B0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C1B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C1C8);
  return &stru_267C5C1B0;
}

void sub_21B93B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C1C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C1C8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B744()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C1E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C1E8))
  {
    return &stru_267C5C1D0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C1D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C1D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C1E8);
  return &stru_267C5C1D0;
}

void sub_21B93B808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C1E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C1E8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B848()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C208, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C208))
  {
    return &stru_267C5C1F0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C1F0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C1F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C208);
  return &stru_267C5C1F0;
}

void sub_21B93B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C208);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C208);
  _Unwind_Resume(a1);
}

std::string *sub_21B93B94C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C228, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C228))
  {
    return &stru_267C5C210;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C210);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C210, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C228);
  return &stru_267C5C210;
}

void sub_21B93BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C228);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C228);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BA50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C248, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C248))
  {
    return &stru_267C5C230;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C230);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C230, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C248);
  return &stru_267C5C230;
}

void sub_21B93BB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C248);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C248);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BB54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C268, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C268))
  {
    return &stru_267C5C250;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C250);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C250, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C268);
  return &stru_267C5C250;
}

void sub_21B93BC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C268);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C268);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BC58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C288, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C288))
  {
    return &stru_267C5C270;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C270);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C270, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C288);
  return &stru_267C5C270;
}

void sub_21B93BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C288);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C288);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BD5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C2A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C2A8))
  {
    return &stru_267C5C290;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C290);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C290, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C2A8);
  return &stru_267C5C290;
}

void sub_21B93BE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C2A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C2A8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BE60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C2C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C2C8))
  {
    return &stru_267C5C2B0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C2B0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C2B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C2C8);
  return &stru_267C5C2B0;
}

void sub_21B93BF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C2C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C2C8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93BF64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C2E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C2E8))
  {
    return &stru_267C5C2D0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C2D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C2D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C2E8);
  return &stru_267C5C2D0;
}

void sub_21B93C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C2E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C2E8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C068()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C308, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C308))
  {
    return &stru_267C5C2F0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C2F0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C2F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C308);
  return &stru_267C5C2F0;
}

void sub_21B93C12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C308);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C308);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C16C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C328, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C328))
  {
    return &stru_267C5C310;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C310);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C310, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C328);
  return &stru_267C5C310;
}

void sub_21B93C230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C328);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C270()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C348, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C348))
  {
    return &stru_267C5C330;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16u]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C330);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C330, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C348);
  return &stru_267C5C330;
}

void sub_21B93C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C348);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C374()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C368, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C368))
  {
    return &stru_267C5C350;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C350);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C350, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C368);
  return &stru_267C5C350;
}

void sub_21B93C438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C368);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C368);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C478()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C388, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C388))
  {
    return &stru_267C5C370;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C370);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C370, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C388);
  return &stru_267C5C370;
}

void sub_21B93C53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C388);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C388);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C57C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C3A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C3A8))
  {
    return &stru_267C5C390;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C390);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C390, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C3A8);
  return &stru_267C5C390;
}

void sub_21B93C640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C3A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C3A8);
  _Unwind_Resume(a1);
}

std::string *sub_21B93C680()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C3C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C3C8))
  {
    return &stru_267C5C3B0;
  }
  sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb32f]", __p);
  sub_21B98430C((uint64_t)__p, &stru_267C5C3B0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C3B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C3C8);
  return &stru_267C5C3B0;
}

void sub_21B93C744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C3C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C3C8);
  _Unwind_Resume(a1);
}

void *sub_21B93C784(void *a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x29)
  {
    sub_21B863A18(a1, (uint64_t)"Invalid Format (", 16);
    a1 = (void *)std::ostream::operator<<();
    int v4 = ")";
    uint64_t v5 = 1;
  }
  else
  {
    unint64_t v3 = &(&off_2643B8AC0)[2 * v2];
    int v4 = *v3;
    uint64_t v5 = (uint64_t)v3[1];
  }
  return sub_21B863A18(a1, (uint64_t)v4, v5);
}

BOOL sub_21B93C80C(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v2)
  {
    __int32 v8 = 0;
    uint64_t v9 = 0;
    size_t v7 = &unk_26CBA1808;
    (*(void (**)(uint64_t, void **))(*(void *)v1 + 56))(v1, &v7);
    if (!v8)
    {
      uint64_t v4 = 0;
      size_t v7 = &unk_26CBA1808;
      uint64_t v5 = v9;
      if (!v9) {
        return v4 != 0;
      }
      goto LABEL_9;
    }
    uint64_t v4 = *v8;
    unint64_t v3 = (std::__shared_weak_count *)v8[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        size_t v7 = &unk_26CBA1808;
        uint64_t v5 = v9;
        if (!v9) {
          return v4 != 0;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    __int32 v8 = 0;
    uint64_t v9 = 0;
  }
  size_t v7 = &unk_26CBA1808;
  uint64_t v5 = v9;
  if (!v9) {
    return v4 != 0;
  }
LABEL_9:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v4 != 0;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4 != 0;
}

void sub_21B93C9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21B974934((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B93CA00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = &unk_26CBA1808;
  if (v4) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 56))(result, a2);
  }
  return result;
}

void sub_21B93CAC0(_Unwind_Exception *a1)
{
  sub_21B974934(v1);
  _Unwind_Resume(a1);
}

void sub_21B93CAD8()
{
}

uint64_t sub_21B93CAEC()
{
  return 1;
}

long long *sub_21B93CAF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C3E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C3E8))
  {
    uint64_t v1 = sub_21B93CBDC();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C3D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C3E0 = *((void *)v1 + 2);
      xmmword_267C5C3D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C3D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C3E8);
  }
  if (byte_267C5C3E7 >= 0) {
    return &xmmword_267C5C3D0;
  }
  else {
    return (long long *)xmmword_267C5C3D0;
  }
}

void sub_21B93CBC4(_Unwind_Exception *a1)
{
}

long long *sub_21B93CBDC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C408, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C408))
  {
    return &xmmword_267C5C3F0;
  }
  uint64_t v1 = sub_21B93CCC4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C3F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C400 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C3F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C3F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C408);
  return &xmmword_267C5C3F0;
}

void sub_21B93CCAC(_Unwind_Exception *a1)
{
}

std::string *sub_21B93CCC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C428, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C428))
  {
    return &stru_267C5C410;
  }
  sub_21B93CDC0((uint64_t)__p);
  sub_21B89E0F0(__p, &stru_267C5C410);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C410, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C428);
  return &stru_267C5C410;
}

void sub_21B93CD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C428);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C428);
  _Unwind_Resume(a1);
}

void sub_21B93CDC0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C448))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_267C5C430);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C430, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C448);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C468))
  {
    size_t v3 = sub_21B89E324(qword_267C5C430, "<", 0);
    sub_21B89E21C(qword_267C5C430, 0, v3, qword_267C5C450);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C450, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C468);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C488, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C488))
  {
    sub_21B9840C8((uint64_t)qword_267C5C450, (uint64_t)&xmmword_267C5C470);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C470, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C488);
  }
  if (byte_267C5C487 < 0)
  {
    long long v2 = xmmword_267C5C470;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C470;
    *(void *)(a1 + 16) = unk_267C5C480;
  }
}

void sub_21B93CF88(_Unwind_Exception *a1)
{
}

void sub_21B93CFA0(_Unwind_Exception *a1)
{
}

void sub_21B93CFB8(_Unwind_Exception *a1)
{
}

void sub_21B93CFD4()
{
}

uint64_t sub_21B93CFE8()
{
  return 2;
}

long long *sub_21B93CFF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C4A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C4A8))
  {
    uint64_t v1 = sub_21B93D0D8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C490, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C4A0 = *((void *)v1 + 2);
      xmmword_267C5C490 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C490, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C4A8);
  }
  if (byte_267C5C4A7 >= 0) {
    return &xmmword_267C5C490;
  }
  else {
    return (long long *)xmmword_267C5C490;
  }
}

void sub_21B93D0C0(_Unwind_Exception *a1)
{
}

long long *sub_21B93D0D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C4C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C4C8))
  {
    return &xmmword_267C5C4B0;
  }
  uint64_t v1 = sub_21B93D1C0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C4B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C4C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C4B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C4B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C4C8);
  return &xmmword_267C5C4B0;
}

void sub_21B93D1A8(_Unwind_Exception *a1)
{
}

std::string *sub_21B93D1C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C4E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C4E8))
  {
    return &stru_267C5C4D0;
  }
  sub_21B93D2BC((uint64_t)__p);
  sub_21B89E41C(__p, &stru_267C5C4D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C4D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C4E8);
  return &stru_267C5C4D0;
}

void sub_21B93D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C4E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C4E8);
  _Unwind_Resume(a1);
}

void sub_21B93D2BC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C508))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16u>]", qword_267C5C4F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C4F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C508);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C528))
  {
    size_t v3 = sub_21B89E324(qword_267C5C4F0, "<", 0);
    sub_21B89E21C(qword_267C5C4F0, 0, v3, qword_267C5C510);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C510, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C528);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C548, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C548))
  {
    sub_21B9840C8((uint64_t)qword_267C5C510, (uint64_t)&xmmword_267C5C530);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C530, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C548);
  }
  if (byte_267C5C547 < 0)
  {
    long long v2 = xmmword_267C5C530;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C530;
    *(void *)(a1 + 16) = unk_267C5C540;
  }
}

void sub_21B93D484(_Unwind_Exception *a1)
{
}

void sub_21B93D49C(_Unwind_Exception *a1)
{
}

void sub_21B93D4B4(_Unwind_Exception *a1)
{
}

void sub_21B93D4D0()
{
}

uint64_t sub_21B93D4E4()
{
  return 3;
}

long long *sub_21B93D4F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C568, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C568))
  {
    uint64_t v1 = sub_21B93D5D4();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C550, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C560 = *((void *)v1 + 2);
      xmmword_267C5C550 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C550, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C568);
  }
  if (byte_267C5C567 >= 0) {
    return &xmmword_267C5C550;
  }
  else {
    return (long long *)xmmword_267C5C550;
  }
}

void sub_21B93D5BC(_Unwind_Exception *a1)
{
}

long long *sub_21B93D5D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C588, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C588))
  {
    return &xmmword_267C5C570;
  }
  uint64_t v1 = sub_21B93D6BC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C570, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C580 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C570 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C570, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C588);
  return &xmmword_267C5C570;
}

void sub_21B93D6A4(_Unwind_Exception *a1)
{
}

std::string *sub_21B93D6BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C5A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C5A8))
  {
    return &stru_267C5C590;
  }
  sub_21B93D7B8((uint64_t)__p);
  sub_21B89E548(__p, &stru_267C5C590);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C590, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C5A8);
  return &stru_267C5C590;
}

void sub_21B93D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C5A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C5A8);
  _Unwind_Resume(a1);
}

void sub_21B93D7B8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C5C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C5C8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16f>]", qword_267C5C5B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C5B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C5C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C5E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C5E8))
  {
    size_t v3 = sub_21B89E324(qword_267C5C5B0, "<", 0);
    sub_21B89E21C(qword_267C5C5B0, 0, v3, qword_267C5C5D0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C5D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C5E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C608))
  {
    sub_21B9840C8((uint64_t)qword_267C5C5D0, (uint64_t)&xmmword_267C5C5F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C5F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C608);
  }
  if (byte_267C5C607 < 0)
  {
    long long v2 = xmmword_267C5C5F0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C5F0;
    *(void *)(a1 + 16) = unk_267C5C600;
  }
}

void sub_21B93D980(_Unwind_Exception *a1)
{
}

void sub_21B93D998(_Unwind_Exception *a1)
{
}

void sub_21B93D9B0(_Unwind_Exception *a1)
{
}

void sub_21B93D9CC()
{
}

uint64_t sub_21B93D9E0()
{
  return 5;
}

long long *sub_21B93D9EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C628, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C628))
  {
    uint64_t v1 = sub_21B93DAD0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C610, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C620 = *((void *)v1 + 2);
      xmmword_267C5C610 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C610, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C628);
  }
  if (byte_267C5C627 >= 0) {
    return &xmmword_267C5C610;
  }
  else {
    return (long long *)xmmword_267C5C610;
  }
}

void sub_21B93DAB8(_Unwind_Exception *a1)
{
}

long long *sub_21B93DAD0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C648, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C648))
  {
    return &xmmword_267C5C630;
  }
  uint64_t v1 = sub_21B93DBB8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C630, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C640 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C630 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C630, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C648);
  return &xmmword_267C5C630;
}

void sub_21B93DBA0(_Unwind_Exception *a1)
{
}

std::string *sub_21B93DBB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C668, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C668))
  {
    return &stru_267C5C650;
  }
  sub_21B93DCB4((uint64_t)__p);
  sub_21B89E7A0(__p, &stru_267C5C650);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C650, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C668);
  return &stru_267C5C650;
}

void sub_21B93DC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C668);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C668);
  _Unwind_Resume(a1);
}

void sub_21B93DCB4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C688))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two8u>]", qword_267C5C670);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C670, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C688);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C6A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C6A8))
  {
    size_t v3 = sub_21B89E324(qword_267C5C670, "<", 0);
    sub_21B89E21C(qword_267C5C670, 0, v3, qword_267C5C690);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C690, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C6A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C6C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C6C8))
  {
    sub_21B9840C8((uint64_t)qword_267C5C690, (uint64_t)&xmmword_267C5C6B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C6B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C6C8);
  }
  if (byte_267C5C6C7 < 0)
  {
    long long v2 = xmmword_267C5C6B0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C6B0;
    *(void *)(a1 + 16) = unk_267C5C6C0;
  }
}

void sub_21B93DE7C(_Unwind_Exception *a1)
{
}

void sub_21B93DE94(_Unwind_Exception *a1)
{
}

void sub_21B93DEAC(_Unwind_Exception *a1)
{
}

void sub_21B93DEC8()
{
}

uint64_t sub_21B93DEDC()
{
  return 6;
}

long long *sub_21B93DEE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C6E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C6E8))
  {
    uint64_t v1 = sub_21B93DFCC();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C6D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C6E0 = *((void *)v1 + 2);
      xmmword_267C5C6D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C6D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C6E8);
  }
  if (byte_267C5C6E7 >= 0) {
    return &xmmword_267C5C6D0;
  }
  else {
    return (long long *)xmmword_267C5C6D0;
  }
}

void sub_21B93DFB4(_Unwind_Exception *a1)
{
}

long long *sub_21B93DFCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C708, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C708))
  {
    return &xmmword_267C5C6F0;
  }
  uint64_t v1 = sub_21B93E0B4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C6F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C700 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C6F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C6F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C708);
  return &xmmword_267C5C6F0;
}

void sub_21B93E09C(_Unwind_Exception *a1)
{
}

std::string *sub_21B93E0B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C728, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C728))
  {
    return &stru_267C5C710;
  }
  sub_21B93E2DC((uint64_t)__p);
  sub_21B93E1B0(__p, &stru_267C5C710);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C710, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C728);
  return &stru_267C5C710;
}

void sub_21B93E170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C728);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C728);
  _Unwind_Resume(a1);
}

void sub_21B93E1B0(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B12C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B93E2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B93E2DC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C748))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16u>]", qword_267C5C730);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C730, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C748);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C768))
  {
    size_t v3 = sub_21B89E324(qword_267C5C730, "<", 0);
    sub_21B89E21C(qword_267C5C730, 0, v3, qword_267C5C750);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C750, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C768);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C788, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C788))
  {
    sub_21B9840C8((uint64_t)qword_267C5C750, (uint64_t)&xmmword_267C5C770);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C770, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C788);
  }
  if (byte_267C5C787 < 0)
  {
    long long v2 = xmmword_267C5C770;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C770;
    *(void *)(a1 + 16) = unk_267C5C780;
  }
}

void sub_21B93E4A4(_Unwind_Exception *a1)
{
}

void sub_21B93E4BC(_Unwind_Exception *a1)
{
}

void sub_21B93E4D4(_Unwind_Exception *a1)
{
}

void sub_21B93E4F0()
{
}

uint64_t sub_21B93E504()
{
  return 7;
}

long long *sub_21B93E510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C7A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C7A8))
  {
    uint64_t v1 = sub_21B93E5F4();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C790, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C7A0 = *((void *)v1 + 2);
      xmmword_267C5C790 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C790, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C7A8);
  }
  if (byte_267C5C7A7 >= 0) {
    return &xmmword_267C5C790;
  }
  else {
    return (long long *)xmmword_267C5C790;
  }
}

void sub_21B93E5DC(_Unwind_Exception *a1)
{
}

long long *sub_21B93E5F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C7C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C7C8))
  {
    return &xmmword_267C5C7B0;
  }
  uint64_t v1 = sub_21B93E6DC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C7B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C7C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C7B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C7B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C7C8);
  return &xmmword_267C5C7B0;
}

void sub_21B93E6C4(_Unwind_Exception *a1)
{
}

std::string *sub_21B93E6DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C7E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C7E8))
  {
    return &stru_267C5C7D0;
  }
  sub_21B93E7D8((uint64_t)__p);
  sub_21B89E8CC(__p, &stru_267C5C7D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C7D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C7E8);
  return &stru_267C5C7D0;
}

void sub_21B93E798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C7E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C7E8);
  _Unwind_Resume(a1);
}

void sub_21B93E7D8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C808))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16f>]", qword_267C5C7F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C7F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C808);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C828, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C828))
  {
    size_t v3 = sub_21B89E324(qword_267C5C7F0, "<", 0);
    sub_21B89E21C(qword_267C5C7F0, 0, v3, qword_267C5C810);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C810, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C828);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C848))
  {
    sub_21B9840C8((uint64_t)qword_267C5C810, (uint64_t)&xmmword_267C5C830);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C830, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C848);
  }
  if (byte_267C5C847 < 0)
  {
    long long v2 = xmmword_267C5C830;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C830;
    *(void *)(a1 + 16) = unk_267C5C840;
  }
}

void sub_21B93E9A0(_Unwind_Exception *a1)
{
}

void sub_21B93E9B8(_Unwind_Exception *a1)
{
}

void sub_21B93E9D0(_Unwind_Exception *a1)
{
}

void sub_21B93E9EC()
{
}

uint64_t sub_21B93EA00()
{
  return 9;
}

long long *sub_21B93EA0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C868, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C868))
  {
    uint64_t v1 = sub_21B93EAF0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C850, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C860 = *((void *)v1 + 2);
      xmmword_267C5C850 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C850, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C868);
  }
  if (byte_267C5C867 >= 0) {
    return &xmmword_267C5C850;
  }
  else {
    return (long long *)xmmword_267C5C850;
  }
}

void sub_21B93EAD8(_Unwind_Exception *a1)
{
}

long long *sub_21B93EAF0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C888, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C888))
  {
    return &xmmword_267C5C870;
  }
  uint64_t v1 = sub_21B93EBD8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C870, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C880 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C870 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C870, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C888);
  return &xmmword_267C5C870;
}

void sub_21B93EBC0(_Unwind_Exception *a1)
{
}

std::string *sub_21B93EBD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C8A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C8A8))
  {
    return &stru_267C5C890;
  }
  sub_21B93EE00((uint64_t)__p);
  sub_21B93ECD4(__p, &stru_267C5C890);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C890, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C8A8);
  return &stru_267C5C890;
}

void sub_21B93EC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C8A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C8A8);
  _Unwind_Resume(a1);
}

void sub_21B93ECD4(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B230();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B93EDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B93EE00(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C8C8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three8u>]", qword_267C5C8B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C8B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C8C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C8E8))
  {
    size_t v3 = sub_21B89E324(qword_267C5C8B0, "<", 0);
    sub_21B89E21C(qword_267C5C8B0, 0, v3, qword_267C5C8D0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C8D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C8E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C908))
  {
    sub_21B9840C8((uint64_t)qword_267C5C8D0, (uint64_t)&xmmword_267C5C8F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C8F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C908);
  }
  if (byte_267C5C907 < 0)
  {
    long long v2 = xmmword_267C5C8F0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C8F0;
    *(void *)(a1 + 16) = unk_267C5C900;
  }
}

void sub_21B93EFC8(_Unwind_Exception *a1)
{
}

void sub_21B93EFE0(_Unwind_Exception *a1)
{
}

void sub_21B93EFF8(_Unwind_Exception *a1)
{
}

void sub_21B93F014()
{
}

uint64_t sub_21B93F028()
{
  return 10;
}

long long *sub_21B93F034()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C928))
  {
    uint64_t v1 = sub_21B93F118();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C910, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C920 = *((void *)v1 + 2);
      xmmword_267C5C910 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C910, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C928);
  }
  if (byte_267C5C927 >= 0) {
    return &xmmword_267C5C910;
  }
  else {
    return (long long *)xmmword_267C5C910;
  }
}

void sub_21B93F100(_Unwind_Exception *a1)
{
}

long long *sub_21B93F118()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C948, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C948))
  {
    return &xmmword_267C5C930;
  }
  uint64_t v1 = sub_21B93F200();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C930, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5C940 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C930 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C930, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C948);
  return &xmmword_267C5C930;
}

void sub_21B93F1E8(_Unwind_Exception *a1)
{
}

std::string *sub_21B93F200()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C968, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5C968))
  {
    return &stru_267C5C950;
  }
  sub_21B93F428((uint64_t)__p);
  sub_21B93F2FC(__p, &stru_267C5C950);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5C950, &dword_21B831000);
  __cxa_guard_release(&qword_267C5C968);
  return &stru_267C5C950;
}

void sub_21B93F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5C968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5C968);
  _Unwind_Resume(a1);
}

void sub_21B93F2FC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B334();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B93F3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B93F428(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C988))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16u>]", qword_267C5C970);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C970, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C988);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C9A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C9A8))
  {
    size_t v3 = sub_21B89E324(qword_267C5C970, "<", 0);
    sub_21B89E21C(qword_267C5C970, 0, v3, qword_267C5C990);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5C990, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C9A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C9C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C9C8))
  {
    sub_21B9840C8((uint64_t)qword_267C5C990, (uint64_t)&xmmword_267C5C9B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C9B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C9C8);
  }
  if (byte_267C5C9C7 < 0)
  {
    long long v2 = xmmword_267C5C9B0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5C9B0;
    *(void *)(a1 + 16) = unk_267C5C9C0;
  }
}

void sub_21B93F5F0(_Unwind_Exception *a1)
{
}

void sub_21B93F608(_Unwind_Exception *a1)
{
}

void sub_21B93F620(_Unwind_Exception *a1)
{
}

void sub_21B93F63C()
{
}

uint64_t sub_21B93F650()
{
  return 11;
}

long long *sub_21B93F65C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5C9E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5C9E8))
  {
    uint64_t v1 = sub_21B93F740();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5C9D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5C9E0 = *((void *)v1 + 2);
      xmmword_267C5C9D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C9D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5C9E8);
  }
  if (byte_267C5C9E7 >= 0) {
    return &xmmword_267C5C9D0;
  }
  else {
    return (long long *)xmmword_267C5C9D0;
  }
}

void sub_21B93F728(_Unwind_Exception *a1)
{
}

long long *sub_21B93F740()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CA08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CA08))
  {
    return &xmmword_267C5C9F0;
  }
  uint64_t v1 = sub_21B93F828();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5C9F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CA00 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5C9F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5C9F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CA08);
  return &xmmword_267C5C9F0;
}

void sub_21B93F810(_Unwind_Exception *a1)
{
}

std::string *sub_21B93F828()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CA28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CA28))
  {
    return &stru_267C5CA10;
  }
  sub_21B93FA50((uint64_t)__p);
  sub_21B93F924(__p, &stru_267C5CA10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CA10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CA28);
  return &stru_267C5CA10;
}

void sub_21B93F8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CA28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CA28);
  _Unwind_Resume(a1);
}

void sub_21B93F924(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B438();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B93FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B93FA50(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CA48))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16f>]", qword_267C5CA30);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CA30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CA48);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CA68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CA68))
  {
    size_t v3 = sub_21B89E324(qword_267C5CA30, "<", 0);
    sub_21B89E21C(qword_267C5CA30, 0, v3, qword_267C5CA50);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CA50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CA68);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CA88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CA88))
  {
    sub_21B9840C8((uint64_t)qword_267C5CA50, (uint64_t)&xmmword_267C5CA70);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CA70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CA88);
  }
  if (byte_267C5CA87 < 0)
  {
    long long v2 = xmmword_267C5CA70;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CA70;
    *(void *)(a1 + 16) = unk_267C5CA80;
  }
}

void sub_21B93FC18(_Unwind_Exception *a1)
{
}

void sub_21B93FC30(_Unwind_Exception *a1)
{
}

void sub_21B93FC48(_Unwind_Exception *a1)
{
}

void sub_21B93FC64()
{
}

uint64_t sub_21B93FC78()
{
  return 12;
}

long long *sub_21B93FC84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CAA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CAA8))
  {
    uint64_t v1 = sub_21B93FD68();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CA90, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CAA0 = *((void *)v1 + 2);
      xmmword_267C5CA90 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CA90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CAA8);
  }
  if (byte_267C5CAA7 >= 0) {
    return &xmmword_267C5CA90;
  }
  else {
    return (long long *)xmmword_267C5CA90;
  }
}

void sub_21B93FD50(_Unwind_Exception *a1)
{
}

long long *sub_21B93FD68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CAC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CAC8))
  {
    return &xmmword_267C5CAB0;
  }
  uint64_t v1 = sub_21B93FE50();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CAB0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CAC0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CAB0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CAB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CAC8);
  return &xmmword_267C5CAB0;
}

void sub_21B93FE38(_Unwind_Exception *a1)
{
}

std::string *sub_21B93FE50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CAE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CAE8))
  {
    return &stru_267C5CAD0;
  }
  sub_21B940078((uint64_t)__p);
  sub_21B93FF4C(__p, &stru_267C5CAD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CAD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CAE8);
  return &stru_267C5CAD0;
}

void sub_21B93FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CAE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CAE8);
  _Unwind_Resume(a1);
}

void sub_21B93FF4C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B53C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B94004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B940078(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CB08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CB08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three32f>]", qword_267C5CAF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CAF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CB08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CB28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CB28))
  {
    size_t v3 = sub_21B89E324(qword_267C5CAF0, "<", 0);
    sub_21B89E21C(qword_267C5CAF0, 0, v3, qword_267C5CB10);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CB10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CB28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CB48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CB48))
  {
    sub_21B9840C8((uint64_t)qword_267C5CB10, (uint64_t)&xmmword_267C5CB30);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CB30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CB48);
  }
  if (byte_267C5CB47 < 0)
  {
    long long v2 = xmmword_267C5CB30;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CB30;
    *(void *)(a1 + 16) = unk_267C5CB40;
  }
}

void sub_21B940240(_Unwind_Exception *a1)
{
}

void sub_21B940258(_Unwind_Exception *a1)
{
}

void sub_21B940270(_Unwind_Exception *a1)
{
}

void sub_21B94028C()
{
}

uint64_t sub_21B9402A0()
{
  return 13;
}

long long *sub_21B9402AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CB68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CB68))
  {
    uint64_t v1 = sub_21B940390();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CB50, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CB60 = *((void *)v1 + 2);
      xmmword_267C5CB50 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CB50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CB68);
  }
  if (byte_267C5CB67 >= 0) {
    return &xmmword_267C5CB50;
  }
  else {
    return (long long *)xmmword_267C5CB50;
  }
}

void sub_21B940378(_Unwind_Exception *a1)
{
}

long long *sub_21B940390()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CB88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CB88))
  {
    return &xmmword_267C5CB70;
  }
  uint64_t v1 = sub_21B940478();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CB70, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CB80 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CB70 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CB70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CB88);
  return &xmmword_267C5CB70;
}

void sub_21B940460(_Unwind_Exception *a1)
{
}

std::string *sub_21B940478()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CBA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CBA8))
  {
    return &stru_267C5CB90;
  }
  sub_21B9406A0((uint64_t)__p);
  sub_21B940574(__p, &stru_267C5CB90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CB90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CBA8);
  return &stru_267C5CB90;
}

void sub_21B940534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CBA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CBA8);
  _Unwind_Resume(a1);
}

void sub_21B940574(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B640();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B940674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9406A0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CBC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CBC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four8u>]", qword_267C5CBB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CBB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CBC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CBE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CBE8))
  {
    size_t v3 = sub_21B89E324(qword_267C5CBB0, "<", 0);
    sub_21B89E21C(qword_267C5CBB0, 0, v3, qword_267C5CBD0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CBD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CBE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CC08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CC08))
  {
    sub_21B9840C8((uint64_t)qword_267C5CBD0, (uint64_t)&xmmword_267C5CBF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CBF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CC08);
  }
  if (byte_267C5CC07 < 0)
  {
    long long v2 = xmmword_267C5CBF0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CBF0;
    *(void *)(a1 + 16) = unk_267C5CC00;
  }
}

void sub_21B940868(_Unwind_Exception *a1)
{
}

void sub_21B940880(_Unwind_Exception *a1)
{
}

void sub_21B940898(_Unwind_Exception *a1)
{
}

void sub_21B9408B4()
{
}

uint64_t sub_21B9408C8()
{
  return 14;
}

long long *sub_21B9408D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CC28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CC28))
  {
    uint64_t v1 = sub_21B9409B8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CC10, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CC20 = *((void *)v1 + 2);
      xmmword_267C5CC10 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CC10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CC28);
  }
  if (byte_267C5CC27 >= 0) {
    return &xmmword_267C5CC10;
  }
  else {
    return (long long *)xmmword_267C5CC10;
  }
}

void sub_21B9409A0(_Unwind_Exception *a1)
{
}

long long *sub_21B9409B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CC48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CC48))
  {
    return &xmmword_267C5CC30;
  }
  uint64_t v1 = sub_21B940AA0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CC30, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CC40 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CC30 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CC30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CC48);
  return &xmmword_267C5CC30;
}

void sub_21B940A88(_Unwind_Exception *a1)
{
}

std::string *sub_21B940AA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CC68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CC68))
  {
    return &stru_267C5CC50;
  }
  sub_21B940CC8((uint64_t)__p);
  sub_21B940B9C(__p, &stru_267C5CC50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CC50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CC68);
  return &stru_267C5CC50;
}

void sub_21B940B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CC68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CC68);
  _Unwind_Resume(a1);
}

void sub_21B940B9C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B744();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B940C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B940CC8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CC88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CC88))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16u>]", qword_267C5CC70);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CC70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CC88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CCA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CCA8))
  {
    size_t v3 = sub_21B89E324(qword_267C5CC70, "<", 0);
    sub_21B89E21C(qword_267C5CC70, 0, v3, qword_267C5CC90);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CC90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CCA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CCC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CCC8))
  {
    sub_21B9840C8((uint64_t)qword_267C5CC90, (uint64_t)&xmmword_267C5CCB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CCB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CCC8);
  }
  if (byte_267C5CCC7 < 0)
  {
    long long v2 = xmmword_267C5CCB0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CCB0;
    *(void *)(a1 + 16) = unk_267C5CCC0;
  }
}

void sub_21B940E90(_Unwind_Exception *a1)
{
}

void sub_21B940EA8(_Unwind_Exception *a1)
{
}

void sub_21B940EC0(_Unwind_Exception *a1)
{
}

void sub_21B940EDC()
{
}

uint64_t sub_21B940EF0()
{
  return 15;
}

long long *sub_21B940EFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CCE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CCE8))
  {
    uint64_t v1 = sub_21B940FE0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CCD0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CCE0 = *((void *)v1 + 2);
      xmmword_267C5CCD0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CCD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CCE8);
  }
  if (byte_267C5CCE7 >= 0) {
    return &xmmword_267C5CCD0;
  }
  else {
    return (long long *)xmmword_267C5CCD0;
  }
}

void sub_21B940FC8(_Unwind_Exception *a1)
{
}

long long *sub_21B940FE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CD08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CD08))
  {
    return &xmmword_267C5CCF0;
  }
  uint64_t v1 = sub_21B9410C8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CCF0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CD00 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CCF0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CCF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CD08);
  return &xmmword_267C5CCF0;
}

void sub_21B9410B0(_Unwind_Exception *a1)
{
}

std::string *sub_21B9410C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CD28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CD28))
  {
    return &stru_267C5CD10;
  }
  sub_21B9412F0((uint64_t)__p);
  sub_21B9411C4(__p, &stru_267C5CD10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CD10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CD28);
  return &stru_267C5CD10;
}

void sub_21B941184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CD28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CD28);
  _Unwind_Resume(a1);
}

void sub_21B9411C4(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B848();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B9412C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9412F0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CD48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CD48))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16f>]", qword_267C5CD30);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CD30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CD48);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CD68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CD68))
  {
    size_t v3 = sub_21B89E324(qword_267C5CD30, "<", 0);
    sub_21B89E21C(qword_267C5CD30, 0, v3, qword_267C5CD50);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CD50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CD68);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CD88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CD88))
  {
    sub_21B9840C8((uint64_t)qword_267C5CD50, (uint64_t)&xmmword_267C5CD70);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CD70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CD88);
  }
  if (byte_267C5CD87 < 0)
  {
    long long v2 = xmmword_267C5CD70;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CD70;
    *(void *)(a1 + 16) = unk_267C5CD80;
  }
}

void sub_21B9414B8(_Unwind_Exception *a1)
{
}

void sub_21B9414D0(_Unwind_Exception *a1)
{
}

void sub_21B9414E8(_Unwind_Exception *a1)
{
}

void sub_21B941504()
{
}

uint64_t sub_21B941518()
{
  return 16;
}

long long *sub_21B941524()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CDA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CDA8))
  {
    uint64_t v1 = sub_21B941608();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CD90, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CDA0 = *((void *)v1 + 2);
      xmmword_267C5CD90 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CD90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CDA8);
  }
  if (byte_267C5CDA7 >= 0) {
    return &xmmword_267C5CD90;
  }
  else {
    return (long long *)xmmword_267C5CD90;
  }
}

void sub_21B9415F0(_Unwind_Exception *a1)
{
}

long long *sub_21B941608()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CDC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CDC8))
  {
    return &xmmword_267C5CDB0;
  }
  uint64_t v1 = sub_21B9416F0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CDB0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CDC0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CDB0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CDB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CDC8);
  return &xmmword_267C5CDB0;
}

void sub_21B9416D8(_Unwind_Exception *a1)
{
}

std::string *sub_21B9416F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CDE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CDE8))
  {
    return &stru_267C5CDD0;
  }
  sub_21B941918((uint64_t)__p);
  sub_21B9417EC(__p, &stru_267C5CDD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CDD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CDE8);
  return &stru_267C5CDD0;
}

void sub_21B9417AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CDE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CDE8);
  _Unwind_Resume(a1);
}

void sub_21B9417EC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93B94C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B9418EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B941918(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CE08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CE08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four32f>]", qword_267C5CDF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CDF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CE08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CE28))
  {
    size_t v3 = sub_21B89E324(qword_267C5CDF0, "<", 0);
    sub_21B89E21C(qword_267C5CDF0, 0, v3, qword_267C5CE10);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CE10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CE28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CE48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CE48))
  {
    sub_21B9840C8((uint64_t)qword_267C5CE10, (uint64_t)&xmmword_267C5CE30);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CE30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CE48);
  }
  if (byte_267C5CE47 < 0)
  {
    long long v2 = xmmword_267C5CE30;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CE30;
    *(void *)(a1 + 16) = unk_267C5CE40;
  }
}

void sub_21B941AE0(_Unwind_Exception *a1)
{
}

void sub_21B941AF8(_Unwind_Exception *a1)
{
}

void sub_21B941B10(_Unwind_Exception *a1)
{
}

void sub_21B941B2C()
{
}

uint64_t sub_21B941B40()
{
  return 17;
}

long long *sub_21B941B4C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CE68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CE68))
  {
    uint64_t v1 = sub_21B941C30();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CE50, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CE60 = *((void *)v1 + 2);
      xmmword_267C5CE50 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CE50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CE68);
  }
  if (byte_267C5CE67 >= 0) {
    return &xmmword_267C5CE50;
  }
  else {
    return (long long *)xmmword_267C5CE50;
  }
}

void sub_21B941C18(_Unwind_Exception *a1)
{
}

long long *sub_21B941C30()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CE88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CE88))
  {
    return &xmmword_267C5CE70;
  }
  uint64_t v1 = sub_21B941D18();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CE70, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CE80 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CE70 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CE70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CE88);
  return &xmmword_267C5CE70;
}

void sub_21B941D00(_Unwind_Exception *a1)
{
}

std::string *sub_21B941D18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CEA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CEA8))
  {
    return &stru_267C5CE90;
  }
  sub_21B941E14((uint64_t)__p);
  sub_21B8DC544(__p, &stru_267C5CE90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CE90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CEA8);
  return &stru_267C5CE90;
}

void sub_21B941DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CEA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CEA8);
  _Unwind_Resume(a1);
}

void sub_21B941E14(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CEC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CEC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr8u>]", qword_267C5CEB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CEB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CEC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CEE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CEE8))
  {
    size_t v3 = sub_21B89E324(qword_267C5CEB0, "<", 0);
    sub_21B89E21C(qword_267C5CEB0, 0, v3, qword_267C5CED0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CED0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CEE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CF08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CF08))
  {
    sub_21B9840C8((uint64_t)qword_267C5CED0, (uint64_t)&xmmword_267C5CEF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CEF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CF08);
  }
  if (byte_267C5CF07 < 0)
  {
    long long v2 = xmmword_267C5CEF0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CEF0;
    *(void *)(a1 + 16) = unk_267C5CF00;
  }
}

void sub_21B941FDC(_Unwind_Exception *a1)
{
}

void sub_21B941FF4(_Unwind_Exception *a1)
{
}

void sub_21B94200C(_Unwind_Exception *a1)
{
}

void sub_21B942028()
{
}

uint64_t sub_21B94203C()
{
  return 18;
}

long long *sub_21B942048()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CF28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CF28))
  {
    uint64_t v1 = sub_21B94212C();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CF10, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CF20 = *((void *)v1 + 2);
      xmmword_267C5CF10 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CF10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CF28);
  }
  if (byte_267C5CF27 >= 0) {
    return &xmmword_267C5CF10;
  }
  else {
    return (long long *)xmmword_267C5CF10;
  }
}

void sub_21B942114(_Unwind_Exception *a1)
{
}

long long *sub_21B94212C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CF48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CF48))
  {
    return &xmmword_267C5CF30;
  }
  uint64_t v1 = sub_21B942214();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CF30, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5CF40 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CF30 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CF30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CF48);
  return &xmmword_267C5CF30;
}

void sub_21B9421FC(_Unwind_Exception *a1)
{
}

std::string *sub_21B942214()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CF68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5CF68))
  {
    return &stru_267C5CF50;
  }
  sub_21B94243C((uint64_t)__p);
  sub_21B942310(__p, &stru_267C5CF50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5CF50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5CF68);
  return &stru_267C5CF50;
}

void sub_21B9422D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5CF68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5CF68);
  _Unwind_Resume(a1);
}

void sub_21B942310(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BA50();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B942410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B94243C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CF88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CF88))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16u>]", qword_267C5CF70);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CF70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CF88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CFA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CFA8))
  {
    size_t v3 = sub_21B89E324(qword_267C5CF70, "<", 0);
    sub_21B89E21C(qword_267C5CF70, 0, v3, qword_267C5CF90);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5CF90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CFA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CFC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CFC8))
  {
    sub_21B9840C8((uint64_t)qword_267C5CF90, (uint64_t)&xmmword_267C5CFB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CFB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CFC8);
  }
  if (byte_267C5CFC7 < 0)
  {
    long long v2 = xmmword_267C5CFB0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5CFB0;
    *(void *)(a1 + 16) = unk_267C5CFC0;
  }
}

void sub_21B942604(_Unwind_Exception *a1)
{
}

void sub_21B94261C(_Unwind_Exception *a1)
{
}

void sub_21B942634(_Unwind_Exception *a1)
{
}

void sub_21B942650()
{
}

uint64_t sub_21B942664()
{
  return 19;
}

long long *sub_21B942670()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5CFE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5CFE8))
  {
    uint64_t v1 = sub_21B942754();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5CFD0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5CFE0 = *((void *)v1 + 2);
      xmmword_267C5CFD0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CFD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5CFE8);
  }
  if (byte_267C5CFE7 >= 0) {
    return &xmmword_267C5CFD0;
  }
  else {
    return (long long *)xmmword_267C5CFD0;
  }
}

void sub_21B94273C(_Unwind_Exception *a1)
{
}

long long *sub_21B942754()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D008, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D008))
  {
    return &xmmword_267C5CFF0;
  }
  uint64_t v1 = sub_21B94283C();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5CFF0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D000 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5CFF0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5CFF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D008);
  return &xmmword_267C5CFF0;
}

void sub_21B942824(_Unwind_Exception *a1)
{
}

std::string *sub_21B94283C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D028, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D028))
  {
    return &stru_267C5D010;
  }
  sub_21B942A64((uint64_t)__p);
  sub_21B942938(__p, &stru_267C5D010);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D010, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D028);
  return &stru_267C5D010;
}

void sub_21B9428F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D028);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D028);
  _Unwind_Resume(a1);
}

void sub_21B942938(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BB54();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B942A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B942A64(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D048))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16f>]", qword_267C5D030);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D030, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D048);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D068))
  {
    size_t v3 = sub_21B89E324(qword_267C5D030, "<", 0);
    sub_21B89E21C(qword_267C5D030, 0, v3, qword_267C5D050);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D050, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D068);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D088))
  {
    sub_21B9840C8((uint64_t)qword_267C5D050, (uint64_t)&xmmword_267C5D070);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D070, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D088);
  }
  if (byte_267C5D087 < 0)
  {
    long long v2 = xmmword_267C5D070;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D070;
    *(void *)(a1 + 16) = unk_267C5D080;
  }
}

void sub_21B942C2C(_Unwind_Exception *a1)
{
}

void sub_21B942C44(_Unwind_Exception *a1)
{
}

void sub_21B942C5C(_Unwind_Exception *a1)
{
}

void sub_21B942C78()
{
}

uint64_t sub_21B942C8C()
{
  return 20;
}

long long *sub_21B942C98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D0A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D0A8))
  {
    uint64_t v1 = sub_21B942D7C();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D090, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D0A0 = *((void *)v1 + 2);
      xmmword_267C5D090 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D090, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D0A8);
  }
  if (byte_267C5D0A7 >= 0) {
    return &xmmword_267C5D090;
  }
  else {
    return (long long *)xmmword_267C5D090;
  }
}

void sub_21B942D64(_Unwind_Exception *a1)
{
}

long long *sub_21B942D7C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D0C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D0C8))
  {
    return &xmmword_267C5D0B0;
  }
  uint64_t v1 = sub_21B942E64();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D0B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D0C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D0B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D0B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D0C8);
  return &xmmword_267C5D0B0;
}

void sub_21B942E4C(_Unwind_Exception *a1)
{
}

std::string *sub_21B942E64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D0E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D0E8))
  {
    return &stru_267C5D0D0;
  }
  sub_21B94308C((uint64_t)__p);
  sub_21B942F60(__p, &stru_267C5D0D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D0D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D0E8);
  return &stru_267C5D0D0;
}

void sub_21B942F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D0E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D0E8);
  _Unwind_Resume(a1);
}

void sub_21B942F60(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BC58();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B943060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B94308C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D108))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr32f>]", qword_267C5D0F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D0F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D108);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D128, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D128))
  {
    size_t v3 = sub_21B89E324(qword_267C5D0F0, "<", 0);
    sub_21B89E21C(qword_267C5D0F0, 0, v3, qword_267C5D110);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D110, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D128);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D148))
  {
    sub_21B9840C8((uint64_t)qword_267C5D110, (uint64_t)&xmmword_267C5D130);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D130, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D148);
  }
  if (byte_267C5D147 < 0)
  {
    long long v2 = xmmword_267C5D130;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D130;
    *(void *)(a1 + 16) = unk_267C5D140;
  }
}

void sub_21B943254(_Unwind_Exception *a1)
{
}

void sub_21B94326C(_Unwind_Exception *a1)
{
}

void sub_21B943284(_Unwind_Exception *a1)
{
}

void sub_21B9432A0()
{
}

uint64_t sub_21B9432B4()
{
  return 21;
}

long long *sub_21B9432C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D168))
  {
    uint64_t v1 = sub_21B9433A4();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D150, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D160 = *((void *)v1 + 2);
      xmmword_267C5D150 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D150, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D168);
  }
  if (byte_267C5D167 >= 0) {
    return &xmmword_267C5D150;
  }
  else {
    return (long long *)xmmword_267C5D150;
  }
}

void sub_21B94338C(_Unwind_Exception *a1)
{
}

long long *sub_21B9433A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D188, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D188))
  {
    return &xmmword_267C5D170;
  }
  uint64_t v1 = sub_21B94348C();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D170, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D180 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D170 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D170, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D188);
  return &xmmword_267C5D170;
}

void sub_21B943474(_Unwind_Exception *a1)
{
}

std::string *sub_21B94348C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D1A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D1A8))
  {
    return &stru_267C5D190;
  }
  sub_21B943588((uint64_t)__p);
  sub_21B89EB24(__p, &stru_267C5D190);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D190, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D1A8);
  return &stru_267C5D190;
}

void sub_21B943548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D1A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D1A8);
  _Unwind_Resume(a1);
}

void sub_21B943588(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D1C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D1C8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_267C5D1B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D1B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D1C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D1E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D1E8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D1B0, "<", 0);
    sub_21B89E21C(qword_267C5D1B0, 0, v3, qword_267C5D1D0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D1D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D1E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D208))
  {
    sub_21B9840C8((uint64_t)qword_267C5D1D0, (uint64_t)&xmmword_267C5D1F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D1F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D208);
  }
  if (byte_267C5D207 < 0)
  {
    long long v2 = xmmword_267C5D1F0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D1F0;
    *(void *)(a1 + 16) = unk_267C5D200;
  }
}

void sub_21B943750(_Unwind_Exception *a1)
{
}

void sub_21B943768(_Unwind_Exception *a1)
{
}

void sub_21B943780(_Unwind_Exception *a1)
{
}

void sub_21B94379C()
{
}

uint64_t sub_21B9437B0()
{
  return 22;
}

long long *sub_21B9437BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D228))
  {
    uint64_t v1 = sub_21B9438A0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D210, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D220 = *((void *)v1 + 2);
      xmmword_267C5D210 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D210, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D228);
  }
  if (byte_267C5D227 >= 0) {
    return &xmmword_267C5D210;
  }
  else {
    return (long long *)xmmword_267C5D210;
  }
}

void sub_21B943888(_Unwind_Exception *a1)
{
}

long long *sub_21B9438A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D248, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D248))
  {
    return &xmmword_267C5D230;
  }
  uint64_t v1 = sub_21B943988();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D230, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D240 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D230 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D230, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D248);
  return &xmmword_267C5D230;
}

void sub_21B943970(_Unwind_Exception *a1)
{
}

std::string *sub_21B943988()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D268, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D268))
  {
    return &stru_267C5D250;
  }
  sub_21B943A84((uint64_t)__p);
  sub_21B89EC50(__p, &stru_267C5D250);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D250, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D268);
  return &stru_267C5D250;
}

void sub_21B943A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D268);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D268);
  _Unwind_Resume(a1);
}

void sub_21B943A84(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D288))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16u>]", qword_267C5D270);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D270, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D288);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D2A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D2A8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D270, "<", 0);
    sub_21B89E21C(qword_267C5D270, 0, v3, qword_267C5D290);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D290, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D2A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D2C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D2C8))
  {
    sub_21B9840C8((uint64_t)qword_267C5D290, (uint64_t)&xmmword_267C5D2B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D2B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D2C8);
  }
  if (byte_267C5D2C7 < 0)
  {
    long long v2 = xmmword_267C5D2B0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D2B0;
    *(void *)(a1 + 16) = unk_267C5D2C0;
  }
}

void sub_21B943C4C(_Unwind_Exception *a1)
{
}

void sub_21B943C64(_Unwind_Exception *a1)
{
}

void sub_21B943C7C(_Unwind_Exception *a1)
{
}

void sub_21B943C98()
{
}

uint64_t sub_21B943CAC()
{
  return 23;
}

long long *sub_21B943CB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D2E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D2E8))
  {
    uint64_t v1 = sub_21B943D9C();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D2D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D2E0 = *((void *)v1 + 2);
      xmmword_267C5D2D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D2D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D2E8);
  }
  if (byte_267C5D2E7 >= 0) {
    return &xmmword_267C5D2D0;
  }
  else {
    return (long long *)xmmword_267C5D2D0;
  }
}

void sub_21B943D84(_Unwind_Exception *a1)
{
}

long long *sub_21B943D9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D308, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D308))
  {
    return &xmmword_267C5D2F0;
  }
  uint64_t v1 = sub_21B943E84();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D2F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D300 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D2F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D2F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D308);
  return &xmmword_267C5D2F0;
}

void sub_21B943E6C(_Unwind_Exception *a1)
{
}

std::string *sub_21B943E84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D328, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D328))
  {
    return &stru_267C5D310;
  }
  sub_21B9440AC((uint64_t)__p);
  sub_21B943F80(__p, &stru_267C5D310);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D310, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D328);
  return &stru_267C5D310;
}

void sub_21B943F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D328);
  _Unwind_Resume(a1);
}

void sub_21B943F80(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BD5C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B944080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9440AC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D348))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16f>]", qword_267C5D330);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D330, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D348);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D368))
  {
    size_t v3 = sub_21B89E324(qword_267C5D330, "<", 0);
    sub_21B89E21C(qword_267C5D330, 0, v3, qword_267C5D350);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D350, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D368);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D388))
  {
    sub_21B9840C8((uint64_t)qword_267C5D350, (uint64_t)&xmmword_267C5D370);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D370, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D388);
  }
  if (byte_267C5D387 < 0)
  {
    long long v2 = xmmword_267C5D370;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D370;
    *(void *)(a1 + 16) = unk_267C5D380;
  }
}

void sub_21B944274(_Unwind_Exception *a1)
{
}

void sub_21B94428C(_Unwind_Exception *a1)
{
}

void sub_21B9442A4(_Unwind_Exception *a1)
{
}

void sub_21B9442C0()
{
}

uint64_t sub_21B9442D4()
{
  return 24;
}

long long *sub_21B9442E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D3A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D3A8))
  {
    uint64_t v1 = sub_21B9443C4();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D390, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D3A0 = *((void *)v1 + 2);
      xmmword_267C5D390 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D390, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D3A8);
  }
  if (byte_267C5D3A7 >= 0) {
    return &xmmword_267C5D390;
  }
  else {
    return (long long *)xmmword_267C5D390;
  }
}

void sub_21B9443AC(_Unwind_Exception *a1)
{
}

long long *sub_21B9443C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D3C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D3C8))
  {
    return &xmmword_267C5D3B0;
  }
  uint64_t v1 = sub_21B9444AC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D3B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D3C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D3B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D3B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D3C8);
  return &xmmword_267C5D3B0;
}

void sub_21B944494(_Unwind_Exception *a1)
{
}

std::string *sub_21B9444AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D3E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D3E8))
  {
    return &stru_267C5D3D0;
  }
  sub_21B9446D4((uint64_t)__p);
  sub_21B9445A8(__p, &stru_267C5D3D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D3D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D3E8);
  return &stru_267C5D3D0;
}

void sub_21B944568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D3E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D3E8);
  _Unwind_Resume(a1);
}

void sub_21B9445A8(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BE60();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B9446A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9446D4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D408))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb32f>]", qword_267C5D3F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D3F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D408);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D428))
  {
    size_t v3 = sub_21B89E324(qword_267C5D3F0, "<", 0);
    sub_21B89E21C(qword_267C5D3F0, 0, v3, qword_267C5D410);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D410, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D428);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D448))
  {
    sub_21B9840C8((uint64_t)qword_267C5D410, (uint64_t)&xmmword_267C5D430);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D430, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D448);
  }
  if (byte_267C5D447 < 0)
  {
    long long v2 = xmmword_267C5D430;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D430;
    *(void *)(a1 + 16) = unk_267C5D440;
  }
}

void sub_21B94489C(_Unwind_Exception *a1)
{
}

void sub_21B9448B4(_Unwind_Exception *a1)
{
}

void sub_21B9448CC(_Unwind_Exception *a1)
{
}

void sub_21B9448E8()
{
}

uint64_t sub_21B9448FC()
{
  return 25;
}

long long *sub_21B944908()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D468))
  {
    uint64_t v1 = sub_21B9449EC();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D450, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D460 = *((void *)v1 + 2);
      xmmword_267C5D450 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D450, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D468);
  }
  if (byte_267C5D467 >= 0) {
    return &xmmword_267C5D450;
  }
  else {
    return (long long *)xmmword_267C5D450;
  }
}

void sub_21B9449D4(_Unwind_Exception *a1)
{
}

long long *sub_21B9449EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D488, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D488))
  {
    return &xmmword_267C5D470;
  }
  uint64_t v1 = sub_21B944AD4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D470, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D480 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D470 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D470, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D488);
  return &xmmword_267C5D470;
}

void sub_21B944ABC(_Unwind_Exception *a1)
{
}

std::string *sub_21B944AD4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D4A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D4A8))
  {
    return &stru_267C5D490;
  }
  sub_21B944BD0((uint64_t)__p);
  sub_21B89ED7C(__p, &stru_267C5D490);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D490, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D4A8);
  return &stru_267C5D490;
}

void sub_21B944B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D4A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D4A8);
  _Unwind_Resume(a1);
}

void sub_21B944BD0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D4C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D4C8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra8u>]", qword_267C5D4B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D4B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D4C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D4E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D4E8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D4B0, "<", 0);
    sub_21B89E21C(qword_267C5D4B0, 0, v3, qword_267C5D4D0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D4D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D4E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D508))
  {
    sub_21B9840C8((uint64_t)qword_267C5D4D0, (uint64_t)&xmmword_267C5D4F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D4F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D508);
  }
  if (byte_267C5D507 < 0)
  {
    long long v2 = xmmword_267C5D4F0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D4F0;
    *(void *)(a1 + 16) = unk_267C5D500;
  }
}

void sub_21B944D98(_Unwind_Exception *a1)
{
}

void sub_21B944DB0(_Unwind_Exception *a1)
{
}

void sub_21B944DC8(_Unwind_Exception *a1)
{
}

void sub_21B944DE4()
{
}

uint64_t sub_21B944DF8()
{
  return 26;
}

long long *sub_21B944E04()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D528))
  {
    uint64_t v1 = sub_21B944EE8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D510, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D520 = *((void *)v1 + 2);
      xmmword_267C5D510 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D510, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D528);
  }
  if (byte_267C5D527 >= 0) {
    return &xmmword_267C5D510;
  }
  else {
    return (long long *)xmmword_267C5D510;
  }
}

void sub_21B944ED0(_Unwind_Exception *a1)
{
}

long long *sub_21B944EE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D548, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D548))
  {
    return &xmmword_267C5D530;
  }
  uint64_t v1 = sub_21B944FD0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D530, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D540 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D530 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D530, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D548);
  return &xmmword_267C5D530;
}

void sub_21B944FB8(_Unwind_Exception *a1)
{
}

std::string *sub_21B944FD0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D568, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D568))
  {
    return &stru_267C5D550;
  }
  sub_21B9451F8((uint64_t)__p);
  sub_21B9450CC(__p, &stru_267C5D550);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D550, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D568);
  return &stru_267C5D550;
}

void sub_21B94508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D568);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D568);
  _Unwind_Resume(a1);
}

void sub_21B9450CC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93BF64();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B9451CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9451F8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D588))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16u>]", qword_267C5D570);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D570, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D588);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D5A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D5A8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D570, "<", 0);
    sub_21B89E21C(qword_267C5D570, 0, v3, qword_267C5D590);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D590, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D5A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D5C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D5C8))
  {
    sub_21B9840C8((uint64_t)qword_267C5D590, (uint64_t)&xmmword_267C5D5B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D5B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D5C8);
  }
  if (byte_267C5D5C7 < 0)
  {
    long long v2 = xmmword_267C5D5B0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D5B0;
    *(void *)(a1 + 16) = unk_267C5D5C0;
  }
}

void sub_21B9453C0(_Unwind_Exception *a1)
{
}

void sub_21B9453D8(_Unwind_Exception *a1)
{
}

void sub_21B9453F0(_Unwind_Exception *a1)
{
}

void sub_21B94540C()
{
}

uint64_t sub_21B945420()
{
  return 27;
}

long long *sub_21B94542C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D5E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D5E8))
  {
    uint64_t v1 = sub_21B945510();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D5D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D5E0 = *((void *)v1 + 2);
      xmmword_267C5D5D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D5D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D5E8);
  }
  if (byte_267C5D5E7 >= 0) {
    return &xmmword_267C5D5D0;
  }
  else {
    return (long long *)xmmword_267C5D5D0;
  }
}

void sub_21B9454F8(_Unwind_Exception *a1)
{
}

long long *sub_21B945510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D608, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D608))
  {
    return &xmmword_267C5D5F0;
  }
  uint64_t v1 = sub_21B9455F8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D5F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D600 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D5F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D5F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D608);
  return &xmmword_267C5D5F0;
}

void sub_21B9455E0(_Unwind_Exception *a1)
{
}

std::string *sub_21B9455F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D628, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D628))
  {
    return &stru_267C5D610;
  }
  sub_21B945820((uint64_t)__p);
  sub_21B9456F4(__p, &stru_267C5D610);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D610, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D628);
  return &stru_267C5D610;
}

void sub_21B9456B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D628);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D628);
  _Unwind_Resume(a1);
}

void sub_21B9456F4(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C068();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B9457F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B945820(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D648, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D648))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16f>]", qword_267C5D630);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D630, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D648);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D668))
  {
    size_t v3 = sub_21B89E324(qword_267C5D630, "<", 0);
    sub_21B89E21C(qword_267C5D630, 0, v3, qword_267C5D650);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D650, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D668);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D688))
  {
    sub_21B9840C8((uint64_t)qword_267C5D650, (uint64_t)&xmmword_267C5D670);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D670, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D688);
  }
  if (byte_267C5D687 < 0)
  {
    long long v2 = xmmword_267C5D670;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D670;
    *(void *)(a1 + 16) = unk_267C5D680;
  }
}

void sub_21B9459E8(_Unwind_Exception *a1)
{
}

void sub_21B945A00(_Unwind_Exception *a1)
{
}

void sub_21B945A18(_Unwind_Exception *a1)
{
}

void sub_21B945A34()
{
}

uint64_t sub_21B945A48()
{
  return 28;
}

long long *sub_21B945A54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D6A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D6A8))
  {
    uint64_t v1 = sub_21B945B38();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D690, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D6A0 = *((void *)v1 + 2);
      xmmword_267C5D690 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D690, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D6A8);
  }
  if (byte_267C5D6A7 >= 0) {
    return &xmmword_267C5D690;
  }
  else {
    return (long long *)xmmword_267C5D690;
  }
}

void sub_21B945B20(_Unwind_Exception *a1)
{
}

long long *sub_21B945B38()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D6C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D6C8))
  {
    return &xmmword_267C5D6B0;
  }
  uint64_t v1 = sub_21B945C20();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D6B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D6C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D6B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D6B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D6C8);
  return &xmmword_267C5D6B0;
}

void sub_21B945C08(_Unwind_Exception *a1)
{
}

std::string *sub_21B945C20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D6E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D6E8))
  {
    return &stru_267C5D6D0;
  }
  sub_21B945E48((uint64_t)__p);
  sub_21B945D1C(__p, &stru_267C5D6D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D6D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D6E8);
  return &stru_267C5D6D0;
}

void sub_21B945CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D6E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D6E8);
  _Unwind_Resume(a1);
}

void sub_21B945D1C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B926154();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B945E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B945E48(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D708, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D708))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra32f>]", qword_267C5D6F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D6F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D708);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D728))
  {
    size_t v3 = sub_21B89E324(qword_267C5D6F0, "<", 0);
    sub_21B89E21C(qword_267C5D6F0, 0, v3, qword_267C5D710);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D710, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D728);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D748))
  {
    sub_21B9840C8((uint64_t)qword_267C5D710, (uint64_t)&xmmword_267C5D730);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D730, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D748);
  }
  if (byte_267C5D747 < 0)
  {
    long long v2 = xmmword_267C5D730;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D730;
    *(void *)(a1 + 16) = unk_267C5D740;
  }
}

void sub_21B946010(_Unwind_Exception *a1)
{
}

void sub_21B946028(_Unwind_Exception *a1)
{
}

void sub_21B946040(_Unwind_Exception *a1)
{
}

void sub_21B94605C()
{
}

uint64_t sub_21B946070()
{
  return 29;
}

long long *sub_21B94607C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D768))
  {
    uint64_t v1 = sub_21B946160();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D750, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D760 = *((void *)v1 + 2);
      xmmword_267C5D750 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D750, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D768);
  }
  if (byte_267C5D767 >= 0) {
    return &xmmword_267C5D750;
  }
  else {
    return (long long *)xmmword_267C5D750;
  }
}

void sub_21B946148(_Unwind_Exception *a1)
{
}

long long *sub_21B946160()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D788, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D788))
  {
    return &xmmword_267C5D770;
  }
  uint64_t v1 = sub_21B946248();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D770, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D780 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D770 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D770, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D788);
  return &xmmword_267C5D770;
}

void sub_21B946230(_Unwind_Exception *a1)
{
}

std::string *sub_21B946248()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D7A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D7A8))
  {
    return &stru_267C5D790;
  }
  sub_21B946344((uint64_t)__p);
  sub_21B8DC670(__p, &stru_267C5D790);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D790, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D7A8);
  return &stru_267C5D790;
}

void sub_21B946304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D7A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D7A8);
  _Unwind_Resume(a1);
}

void sub_21B946344(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D7C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D7C8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_267C5D7B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D7B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D7C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D7E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D7E8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D7B0, "<", 0);
    sub_21B89E21C(qword_267C5D7B0, 0, v3, qword_267C5D7D0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D7D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D7E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D808))
  {
    sub_21B9840C8((uint64_t)qword_267C5D7D0, (uint64_t)&xmmword_267C5D7F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D7F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D808);
  }
  if (byte_267C5D807 < 0)
  {
    long long v2 = xmmword_267C5D7F0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D7F0;
    *(void *)(a1 + 16) = unk_267C5D800;
  }
}

void sub_21B94650C(_Unwind_Exception *a1)
{
}

void sub_21B946524(_Unwind_Exception *a1)
{
}

void sub_21B94653C(_Unwind_Exception *a1)
{
}

void sub_21B946558()
{
}

uint64_t sub_21B94656C()
{
  return 30;
}

long long *sub_21B946578()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D828, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D828))
  {
    uint64_t v1 = sub_21B94665C();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D810, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D820 = *((void *)v1 + 2);
      xmmword_267C5D810 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D810, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D828);
  }
  if (byte_267C5D827 >= 0) {
    return &xmmword_267C5D810;
  }
  else {
    return (long long *)xmmword_267C5D810;
  }
}

void sub_21B946644(_Unwind_Exception *a1)
{
}

long long *sub_21B94665C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D848, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D848))
  {
    return &xmmword_267C5D830;
  }
  uint64_t v1 = sub_21B946744();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D830, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D840 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D830 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D830, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D848);
  return &xmmword_267C5D830;
}

void sub_21B94672C(_Unwind_Exception *a1)
{
}

std::string *sub_21B946744()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D868, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D868))
  {
    return &stru_267C5D850;
  }
  sub_21B94696C((uint64_t)__p);
  sub_21B946840(__p, &stru_267C5D850);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D850, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D868);
  return &stru_267C5D850;
}

void sub_21B946800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D868);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D868);
  _Unwind_Resume(a1);
}

void sub_21B946840(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C16C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B946940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B94696C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D888))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16u>]", qword_267C5D870);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D870, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D888);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D8A8))
  {
    size_t v3 = sub_21B89E324(qword_267C5D870, "<", 0);
    sub_21B89E21C(qword_267C5D870, 0, v3, qword_267C5D890);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D890, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D8A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D8C8))
  {
    sub_21B9840C8((uint64_t)qword_267C5D890, (uint64_t)&xmmword_267C5D8B0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D8B0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D8C8);
  }
  if (byte_267C5D8C7 < 0)
  {
    long long v2 = xmmword_267C5D8B0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D8B0;
    *(void *)(a1 + 16) = unk_267C5D8C0;
  }
}

void sub_21B946B34(_Unwind_Exception *a1)
{
}

void sub_21B946B4C(_Unwind_Exception *a1)
{
}

void sub_21B946B64(_Unwind_Exception *a1)
{
}

void sub_21B946B80()
{
}

uint64_t sub_21B946B94()
{
  return 31;
}

long long *sub_21B946BA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D8E8))
  {
    uint64_t v1 = sub_21B946C84();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D8D0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D8E0 = *((void *)v1 + 2);
      xmmword_267C5D8D0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D8D0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D8E8);
  }
  if (byte_267C5D8E7 >= 0) {
    return &xmmword_267C5D8D0;
  }
  else {
    return (long long *)xmmword_267C5D8D0;
  }
}

void sub_21B946C6C(_Unwind_Exception *a1)
{
}

long long *sub_21B946C84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D908, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D908))
  {
    return &xmmword_267C5D8F0;
  }
  uint64_t v1 = sub_21B946D6C();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D8F0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D900 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D8F0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D8F0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D908);
  return &xmmword_267C5D8F0;
}

void sub_21B946D54(_Unwind_Exception *a1)
{
}

std::string *sub_21B946D6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D928, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D928))
  {
    return &stru_267C5D910;
  }
  sub_21B946E68((uint64_t)__p);
  sub_21B89EEA8(__p, &stru_267C5D910);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D910, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D928);
  return &stru_267C5D910;
}

void sub_21B946E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D928);
  _Unwind_Resume(a1);
}

void sub_21B946E68(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D948))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_267C5D930);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D930, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D948);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D968))
  {
    size_t v3 = sub_21B89E324(qword_267C5D930, "<", 0);
    sub_21B89E21C(qword_267C5D930, 0, v3, qword_267C5D950);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D950, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D968);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D988))
  {
    sub_21B9840C8((uint64_t)qword_267C5D950, (uint64_t)&xmmword_267C5D970);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D970, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D988);
  }
  if (byte_267C5D987 < 0)
  {
    long long v2 = xmmword_267C5D970;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5D970;
    *(void *)(a1 + 16) = unk_267C5D980;
  }
}

void sub_21B947030(_Unwind_Exception *a1)
{
}

void sub_21B947048(_Unwind_Exception *a1)
{
}

void sub_21B947060(_Unwind_Exception *a1)
{
}

void sub_21B94707C()
{
}

uint64_t sub_21B947090()
{
  return 32;
}

long long *sub_21B94709C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D9A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5D9A8))
  {
    uint64_t v1 = sub_21B947180();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5D990, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5D9A0 = *((void *)v1 + 2);
      xmmword_267C5D990 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D990, &dword_21B831000);
    __cxa_guard_release(&qword_267C5D9A8);
  }
  if (byte_267C5D9A7 >= 0) {
    return &xmmword_267C5D990;
  }
  else {
    return (long long *)xmmword_267C5D990;
  }
}

void sub_21B947168(_Unwind_Exception *a1)
{
}

long long *sub_21B947180()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D9C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D9C8))
  {
    return &xmmword_267C5D9B0;
  }
  uint64_t v1 = sub_21B947268();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5D9B0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5D9C0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5D9B0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5D9B0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D9C8);
  return &xmmword_267C5D9B0;
}

void sub_21B947250(_Unwind_Exception *a1)
{
}

std::string *sub_21B947268()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5D9E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5D9E8))
  {
    return &stru_267C5D9D0;
  }
  sub_21B947364((uint64_t)__p);
  sub_21B89EFD4(__p, &stru_267C5D9D0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5D9D0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5D9E8);
  return &stru_267C5D9D0;
}

void sub_21B947324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5D9E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5D9E8);
  _Unwind_Resume(a1);
}

void sub_21B947364(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DA08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_267C5D9F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5D9F0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DA08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DA28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DA28))
  {
    size_t v3 = sub_21B89E324(qword_267C5D9F0, "<", 0);
    sub_21B89E21C(qword_267C5D9F0, 0, v3, qword_267C5DA10);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DA10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DA28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DA48))
  {
    sub_21B9840C8((uint64_t)qword_267C5DA10, (uint64_t)&xmmword_267C5DA30);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DA30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DA48);
  }
  if (byte_267C5DA47 < 0)
  {
    long long v2 = xmmword_267C5DA30;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DA30;
    *(void *)(a1 + 16) = unk_267C5DA40;
  }
}

void sub_21B94752C(_Unwind_Exception *a1)
{
}

void sub_21B947544(_Unwind_Exception *a1)
{
}

void sub_21B94755C(_Unwind_Exception *a1)
{
}

void sub_21B947578()
{
}

uint64_t sub_21B94758C()
{
  return 33;
}

long long *sub_21B947598()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DA68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DA68))
  {
    uint64_t v1 = sub_21B94767C();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DA50, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DA60 = *((void *)v1 + 2);
      xmmword_267C5DA50 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DA50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DA68);
  }
  if (byte_267C5DA67 >= 0) {
    return &xmmword_267C5DA50;
  }
  else {
    return (long long *)xmmword_267C5DA50;
  }
}

void sub_21B947664(_Unwind_Exception *a1)
{
}

long long *sub_21B94767C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DA88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DA88))
  {
    return &xmmword_267C5DA70;
  }
  uint64_t v1 = sub_21B947764();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DA70, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DA80 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DA70 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DA70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DA88);
  return &xmmword_267C5DA70;
}

void sub_21B94774C(_Unwind_Exception *a1)
{
}

std::string *sub_21B947764()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DAA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DAA8))
  {
    return &stru_267C5DA90;
  }
  sub_21B947860((uint64_t)__p);
  sub_21B8DC79C(__p, &stru_267C5DA90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DA90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DAA8);
  return &stru_267C5DA90;
}

void sub_21B947820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DAA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DAA8);
  _Unwind_Resume(a1);
}

void sub_21B947860(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DAC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DAC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr8u>]", qword_267C5DAB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DAB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DAC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DAE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DAE8))
  {
    size_t v3 = sub_21B89E324(qword_267C5DAB0, "<", 0);
    sub_21B89E21C(qword_267C5DAB0, 0, v3, qword_267C5DAD0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DAD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DAE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DB08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DB08))
  {
    sub_21B9840C8((uint64_t)qword_267C5DAD0, (uint64_t)&xmmword_267C5DAF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DAF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DB08);
  }
  if (byte_267C5DB07 < 0)
  {
    long long v2 = xmmword_267C5DAF0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DAF0;
    *(void *)(a1 + 16) = unk_267C5DB00;
  }
}

void sub_21B947A28(_Unwind_Exception *a1)
{
}

void sub_21B947A40(_Unwind_Exception *a1)
{
}

void sub_21B947A58(_Unwind_Exception *a1)
{
}

void sub_21B947A74()
{
}

uint64_t sub_21B947A88()
{
  return 34;
}

long long *sub_21B947A94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DB28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DB28))
  {
    uint64_t v1 = sub_21B947B78();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DB10, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DB20 = *((void *)v1 + 2);
      xmmword_267C5DB10 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DB10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DB28);
  }
  if (byte_267C5DB27 >= 0) {
    return &xmmword_267C5DB10;
  }
  else {
    return (long long *)xmmword_267C5DB10;
  }
}

void sub_21B947B60(_Unwind_Exception *a1)
{
}

long long *sub_21B947B78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DB48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DB48))
  {
    return &xmmword_267C5DB30;
  }
  uint64_t v1 = sub_21B947C60();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DB30, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DB40 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DB30 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DB30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DB48);
  return &xmmword_267C5DB30;
}

void sub_21B947C48(_Unwind_Exception *a1)
{
}

std::string *sub_21B947C60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DB68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DB68))
  {
    return &stru_267C5DB50;
  }
  sub_21B947E88((uint64_t)__p);
  sub_21B947D5C(__p, &stru_267C5DB50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DB50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DB68);
  return &stru_267C5DB50;
}

void sub_21B947D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DB68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DB68);
  _Unwind_Resume(a1);
}

void sub_21B947D5C(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C270();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B947E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B947E88(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DB88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DB88))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16u>]", qword_267C5DB70);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DB70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DB88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DBA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DBA8))
  {
    size_t v3 = sub_21B89E324(qword_267C5DB70, "<", 0);
    sub_21B89E21C(qword_267C5DB70, 0, v3, qword_267C5DB90);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DB90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DBA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DBC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DBC8))
  {
    sub_21B9840C8((uint64_t)qword_267C5DB90, (uint64_t)&xmmword_267C5DBB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DBB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DBC8);
  }
  if (byte_267C5DBC7 < 0)
  {
    long long v2 = xmmword_267C5DBB0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DBB0;
    *(void *)(a1 + 16) = unk_267C5DBC0;
  }
}

void sub_21B948050(_Unwind_Exception *a1)
{
}

void sub_21B948068(_Unwind_Exception *a1)
{
}

void sub_21B948080(_Unwind_Exception *a1)
{
}

void sub_21B94809C()
{
}

uint64_t sub_21B9480B0()
{
  return 35;
}

long long *sub_21B9480BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DBE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DBE8))
  {
    uint64_t v1 = sub_21B9481A0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DBD0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DBE0 = *((void *)v1 + 2);
      xmmword_267C5DBD0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DBD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DBE8);
  }
  if (byte_267C5DBE7 >= 0) {
    return &xmmword_267C5DBD0;
  }
  else {
    return (long long *)xmmword_267C5DBD0;
  }
}

void sub_21B948188(_Unwind_Exception *a1)
{
}

long long *sub_21B9481A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DC08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DC08))
  {
    return &xmmword_267C5DBF0;
  }
  uint64_t v1 = sub_21B948288();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DBF0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DC00 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DBF0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DBF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DC08);
  return &xmmword_267C5DBF0;
}

void sub_21B948270(_Unwind_Exception *a1)
{
}

std::string *sub_21B948288()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DC28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DC28))
  {
    return &stru_267C5DC10;
  }
  sub_21B9484B0((uint64_t)__p);
  sub_21B948384(__p, &stru_267C5DC10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DC10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DC28);
  return &stru_267C5DC10;
}

void sub_21B948344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DC28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DC28);
  _Unwind_Resume(a1);
}

void sub_21B948384(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C374();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B948484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B9484B0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DC48))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16f>]", qword_267C5DC30);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DC30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DC48);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DC68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DC68))
  {
    size_t v3 = sub_21B89E324(qword_267C5DC30, "<", 0);
    sub_21B89E21C(qword_267C5DC30, 0, v3, qword_267C5DC50);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DC50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DC68);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DC88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DC88))
  {
    sub_21B9840C8((uint64_t)qword_267C5DC50, (uint64_t)&xmmword_267C5DC70);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DC70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DC88);
  }
  if (byte_267C5DC87 < 0)
  {
    long long v2 = xmmword_267C5DC70;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DC70;
    *(void *)(a1 + 16) = unk_267C5DC80;
  }
}

void sub_21B948678(_Unwind_Exception *a1)
{
}

void sub_21B948690(_Unwind_Exception *a1)
{
}

void sub_21B9486A8(_Unwind_Exception *a1)
{
}

void sub_21B9486C4()
{
}

uint64_t sub_21B9486D8()
{
  return 36;
}

long long *sub_21B9486E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DCA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DCA8))
  {
    uint64_t v1 = sub_21B9487C8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DC90, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DCA0 = *((void *)v1 + 2);
      xmmword_267C5DC90 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DC90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DCA8);
  }
  if (byte_267C5DCA7 >= 0) {
    return &xmmword_267C5DC90;
  }
  else {
    return (long long *)xmmword_267C5DC90;
  }
}

void sub_21B9487B0(_Unwind_Exception *a1)
{
}

long long *sub_21B9487C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DCC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DCC8))
  {
    return &xmmword_267C5DCB0;
  }
  uint64_t v1 = sub_21B9488B0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DCB0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DCC0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DCB0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DCB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DCC8);
  return &xmmword_267C5DCB0;
}

void sub_21B948898(_Unwind_Exception *a1)
{
}

std::string *sub_21B9488B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DCE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DCE8))
  {
    return &stru_267C5DCD0;
  }
  sub_21B948AD8((uint64_t)__p);
  sub_21B9489AC(__p, &stru_267C5DCD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DCD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DCE8);
  return &stru_267C5DCD0;
}

void sub_21B94896C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DCE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DCE8);
  _Unwind_Resume(a1);
}

void sub_21B9489AC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C478();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B948AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B948AD8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DD08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DD08))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr32f>]", qword_267C5DCF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DCF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DD08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DD28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DD28))
  {
    size_t v3 = sub_21B89E324(qword_267C5DCF0, "<", 0);
    sub_21B89E21C(qword_267C5DCF0, 0, v3, qword_267C5DD10);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DD10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DD28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DD48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DD48))
  {
    sub_21B9840C8((uint64_t)qword_267C5DD10, (uint64_t)&xmmword_267C5DD30);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DD30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DD48);
  }
  if (byte_267C5DD47 < 0)
  {
    long long v2 = xmmword_267C5DD30;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DD30;
    *(void *)(a1 + 16) = unk_267C5DD40;
  }
}

void sub_21B948CA0(_Unwind_Exception *a1)
{
}

void sub_21B948CB8(_Unwind_Exception *a1)
{
}

void sub_21B948CD0(_Unwind_Exception *a1)
{
}

void sub_21B948CEC()
{
}

uint64_t sub_21B948D00()
{
  return 37;
}

long long *sub_21B948D0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DD68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DD68))
  {
    uint64_t v1 = sub_21B948DF0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DD50, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DD60 = *((void *)v1 + 2);
      xmmword_267C5DD50 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DD50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DD68);
  }
  if (byte_267C5DD67 >= 0) {
    return &xmmword_267C5DD50;
  }
  else {
    return (long long *)xmmword_267C5DD50;
  }
}

void sub_21B948DD8(_Unwind_Exception *a1)
{
}

long long *sub_21B948DF0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DD88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DD88))
  {
    return &xmmword_267C5DD70;
  }
  uint64_t v1 = sub_21B948ED8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DD70, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DD80 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DD70 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DD70, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DD88);
  return &xmmword_267C5DD70;
}

void sub_21B948EC0(_Unwind_Exception *a1)
{
}

std::string *sub_21B948ED8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DDA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DDA8))
  {
    return &stru_267C5DD90;
  }
  sub_21B948FD4((uint64_t)__p);
  sub_21B89F100(__p, &stru_267C5DD90);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DD90, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DDA8);
  return &stru_267C5DD90;
}

void sub_21B948F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DDA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DDA8);
  _Unwind_Resume(a1);
}

void sub_21B948FD4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DDC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DDC8))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb8u>]", qword_267C5DDB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DDB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DDC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DDE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DDE8))
  {
    size_t v3 = sub_21B89E324(qword_267C5DDB0, "<", 0);
    sub_21B89E21C(qword_267C5DDB0, 0, v3, qword_267C5DDD0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DDD0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DDE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DE08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DE08))
  {
    sub_21B9840C8((uint64_t)qword_267C5DDD0, (uint64_t)&xmmword_267C5DDF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DDF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DE08);
  }
  if (byte_267C5DE07 < 0)
  {
    long long v2 = xmmword_267C5DDF0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DDF0;
    *(void *)(a1 + 16) = unk_267C5DE00;
  }
}

void sub_21B94919C(_Unwind_Exception *a1)
{
}

void sub_21B9491B4(_Unwind_Exception *a1)
{
}

void sub_21B9491CC(_Unwind_Exception *a1)
{
}

void sub_21B9491E8()
{
}

uint64_t sub_21B9491FC()
{
  return 38;
}

long long *sub_21B949208()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DE28))
  {
    uint64_t v1 = sub_21B9492EC();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DE10, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DE20 = *((void *)v1 + 2);
      xmmword_267C5DE10 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DE10, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DE28);
  }
  if (byte_267C5DE27 >= 0) {
    return &xmmword_267C5DE10;
  }
  else {
    return (long long *)xmmword_267C5DE10;
  }
}

void sub_21B9492D4(_Unwind_Exception *a1)
{
}

long long *sub_21B9492EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DE48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DE48))
  {
    return &xmmword_267C5DE30;
  }
  uint64_t v1 = sub_21B9493D4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DE30, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DE40 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DE30 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DE30, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DE48);
  return &xmmword_267C5DE30;
}

void sub_21B9493BC(_Unwind_Exception *a1)
{
}

std::string *sub_21B9493D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DE68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DE68))
  {
    return &stru_267C5DE50;
  }
  sub_21B9494D0((uint64_t)__p);
  sub_21B89F22C(__p, &stru_267C5DE50);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DE50, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DE68);
  return &stru_267C5DE50;
}

void sub_21B949490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DE68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DE68);
  _Unwind_Resume(a1);
}

void sub_21B9494D0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DE88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DE88))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16u>]", qword_267C5DE70);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DE70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DE88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DEA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DEA8))
  {
    size_t v3 = sub_21B89E324(qword_267C5DE70, "<", 0);
    sub_21B89E21C(qword_267C5DE70, 0, v3, qword_267C5DE90);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DE90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DEA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DEC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DEC8))
  {
    sub_21B9840C8((uint64_t)qword_267C5DE90, (uint64_t)&xmmword_267C5DEB0);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DEB0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DEC8);
  }
  if (byte_267C5DEC7 < 0)
  {
    long long v2 = xmmword_267C5DEB0;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DEB0;
    *(void *)(a1 + 16) = unk_267C5DEC0;
  }
}

void sub_21B949698(_Unwind_Exception *a1)
{
}

void sub_21B9496B0(_Unwind_Exception *a1)
{
}

void sub_21B9496C8(_Unwind_Exception *a1)
{
}

void sub_21B9496E4()
{
}

uint64_t sub_21B9496F8()
{
  return 39;
}

long long *sub_21B949704()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DEE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DEE8))
  {
    uint64_t v1 = sub_21B9497E8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DED0, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DEE0 = *((void *)v1 + 2);
      xmmword_267C5DED0 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DED0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DEE8);
  }
  if (byte_267C5DEE7 >= 0) {
    return &xmmword_267C5DED0;
  }
  else {
    return (long long *)xmmword_267C5DED0;
  }
}

void sub_21B9497D0(_Unwind_Exception *a1)
{
}

long long *sub_21B9497E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DF08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DF08))
  {
    return &xmmword_267C5DEF0;
  }
  uint64_t v1 = sub_21B9498D0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DEF0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DF00 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DEF0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DEF0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DF08);
  return &xmmword_267C5DEF0;
}

void sub_21B9498B8(_Unwind_Exception *a1)
{
}

std::string *sub_21B9498D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DF28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DF28))
  {
    return &stru_267C5DF10;
  }
  sub_21B949AF8((uint64_t)__p);
  sub_21B9499CC(__p, &stru_267C5DF10);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DF10, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DF28);
  return &stru_267C5DF10;
}

void sub_21B94998C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DF28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DF28);
  _Unwind_Resume(a1);
}

void sub_21B9499CC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C57C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B949ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B949AF8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DF48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DF48))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16f>]", qword_267C5DF30);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DF30, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DF48);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DF68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DF68))
  {
    size_t v3 = sub_21B89E324(qword_267C5DF30, "<", 0);
    sub_21B89E21C(qword_267C5DF30, 0, v3, qword_267C5DF50);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DF50, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DF68);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DF88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DF88))
  {
    sub_21B9840C8((uint64_t)qword_267C5DF50, (uint64_t)&xmmword_267C5DF70);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DF70, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DF88);
  }
  if (byte_267C5DF87 < 0)
  {
    long long v2 = xmmword_267C5DF70;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5DF70;
    *(void *)(a1 + 16) = unk_267C5DF80;
  }
}

void sub_21B949CC0(_Unwind_Exception *a1)
{
}

void sub_21B949CD8(_Unwind_Exception *a1)
{
}

void sub_21B949CF0(_Unwind_Exception *a1)
{
}

void sub_21B949D0C()
{
}

uint64_t sub_21B949D20()
{
  return 40;
}

long long *sub_21B949D2C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DFA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5DFA8))
  {
    uint64_t v1 = sub_21B949E10();
    if (*((char *)v1 + 23) < 0)
    {
      sub_21B846188(&xmmword_267C5DF90, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      unk_267C5DFA0 = *((void *)v1 + 2);
      xmmword_267C5DF90 = v2;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DF90, &dword_21B831000);
    __cxa_guard_release(&qword_267C5DFA8);
  }
  if (byte_267C5DFA7 >= 0) {
    return &xmmword_267C5DF90;
  }
  else {
    return (long long *)xmmword_267C5DF90;
  }
}

void sub_21B949DF8(_Unwind_Exception *a1)
{
}

long long *sub_21B949E10()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DFC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DFC8))
  {
    return &xmmword_267C5DFB0;
  }
  uint64_t v1 = sub_21B949EF8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(&xmmword_267C5DFB0, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267C5DFC0 = v1->__r_.__value_.__r.__words[2];
    xmmword_267C5DFB0 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5DFB0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DFC8);
  return &xmmword_267C5DFB0;
}

void sub_21B949EE0(_Unwind_Exception *a1)
{
}

std::string *sub_21B949EF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5DFE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5DFE8))
  {
    return &stru_267C5DFD0;
  }
  sub_21B94A120((uint64_t)__p);
  sub_21B949FF4(__p, &stru_267C5DFD0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267C5DFD0, &dword_21B831000);
  __cxa_guard_release(&qword_267C5DFE8);
  return &stru_267C5DFD0;
}

void sub_21B949FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C5DFE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C5DFE8);
  _Unwind_Resume(a1);
}

void sub_21B949FF4(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v4 = sub_21B93C680();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21B846188(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21B84C93C(&__p, (uint64_t)__dst, 1uLL);
  sub_21B984180(a1, (uint64_t *)&__p, a2, v6, v7);
  __int32 v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21B94A0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21B94A120(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E008))
  {
    sub_21B983E50("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb32f>]", qword_267C5DFF0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5DFF0, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E008);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E028))
  {
    size_t v3 = sub_21B89E324(qword_267C5DFF0, "<", 0);
    sub_21B89E21C(qword_267C5DFF0, 0, v3, qword_267C5E010);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267C5E010, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E028);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5E048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C5E048))
  {
    sub_21B9840C8((uint64_t)qword_267C5E010, (uint64_t)&xmmword_267C5E030);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267C5E030, &dword_21B831000);
    __cxa_guard_release(&qword_267C5E048);
  }
  if (byte_267C5E047 < 0)
  {
    long long v2 = xmmword_267C5E030;
    sub_21B846188((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267C5E030;
    *(void *)(a1 + 16) = unk_267C5E040;
  }
}

void sub_21B94A2E8(_Unwind_Exception *a1)
{
}

void sub_21B94A300(_Unwind_Exception *a1)
{
}

void sub_21B94A318(_Unwind_Exception *a1)
{
}

void sub_21B94A330(uint64_t a1, uint64_t a2)
{
  long long v2 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_21B94A434(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_21B94A468(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94A4BC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94A538()
{
}

void sub_21B94A5BC(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_21B94A5E0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  long long v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0900, 0);
  if (!v5)
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v37, lpsrc, 1);
    uint64_t v18 = *(void *)(v37[0] + 16);
    *(_OWORD *)unint64_t v39 = *(_OWORD *)v37[0];
    *(void *)&v39[16] = v18;
    v37[0] = 0;
    MEMORY[0x21D495F30]();
    uint64_t v19 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v20 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v20 = 1;
    }
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(void *)(a1 + 16);
    if (v20) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v21;
    }
    if (HIDWORD(v23) * HIDWORD(v22) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      v37[0] = v19;
      v37[1] = v23;
      _OWORD v37[2] = v22;
      v38[0] = (size_t)v39;
      v38[1] = (size_t)v37;
      sub_21B892E98(v38);
      return;
    }
    goto LABEL_63;
  }
  int64x2_t v6 = (_OWORD *)(a1 + 8);
  int8x16_t v7 = (unsigned int *)(v5 + 8);
  __int32 v8 = *(unsigned char **)(a1 + 48);
  if (v8
    && (size_t v9 = *v7, v9 == *(_DWORD *)v6)
    && (int v10 = *((_DWORD *)v5 + 3), v10 == *(_DWORD *)(a1 + 12))
    && (uint64_t v11 = *((unsigned int *)v5 + 4), v11 == *(_DWORD *)(a1 + 16))
    && (uint64_t v12 = *((unsigned int *)v5 + 5), v12 == *(_DWORD *)(a1 + 20)))
  {
    if (v11 == 1)
    {
      if (v12 == v9)
      {
        size_t v9 = (v10 * v9);
        int v13 = (const void *)*((void *)v5 + 6);
        if (v9) {
          BOOL v14 = v13 == 0;
        }
        else {
          BOOL v14 = 0;
        }
        if (!v14)
        {
          if (!v9) {
            return;
          }
          goto LABEL_47;
        }
        if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          __int32 v8 = *(unsigned char **)(a1 + 48);
LABEL_47:
          unint64_t v33 = v8;
          int32x4_t v34 = v13;
LABEL_52:
          memmove(v33, v34, v9);
          return;
        }
      }
      else
      {
        if (!v9 || !v10) {
          return;
        }
        uint64_t v30 = (char *)*((void *)v5 + 6);
        int v31 = v10 - 1;
        if (v10 != 1)
        {
          uint64_t v32 = 0;
          do
          {
            if (!&v30[v32]
              && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              goto LABEL_63;
            }
            memmove(&v8[v32], &v30[v32], v9);
            v32 += v12;
            --v31;
          }
          while (v31);
          v30 += v32;
          v8 += v32;
        }
        if (v30
          || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          unint64_t v33 = v8;
          int32x4_t v34 = v30;
          goto LABEL_52;
        }
      }
LABEL_63:
      abort();
    }
    if (v9 && v10)
    {
      int v24 = v9 - 1;
      unint64_t v25 = (unsigned char *)*((void *)v5 + 6);
      int v26 = v10 - 1;
      if (v26)
      {
        if (v9 == 1)
        {
          uint64_t v35 = 0;
          do
          {
            v8[v35] = v25[v35];
            v35 += v12;
            --v26;
          }
          while (v26);
          v25 += v35;
          v8 += v35;
        }
        else
        {
          for (int i = 0; i != v26; ++i)
          {
            uint64_t v28 = 0;
            int v29 = v9 - 1;
            do
            {
              v8[v28] = v25[v28];
              v28 += v11;
              --v29;
            }
            while (v29);
            v8[v28] = v25[v28];
            v25 += v12;
            v8 += v12;
          }
        }
      }
      if (v9 != 1)
      {
        uint64_t v36 = 0;
        do
        {
          v8[v36] = v25[v36];
          v36 += v11;
          --v24;
        }
        while (v24);
        v25 += v36;
        v8 += v36;
      }
      *__int32 v8 = *v25;
    }
  }
  else
  {
    long long v15 = *(_OWORD *)v7;
    *(_OWORD *)&v39[12] = *(_OWORD *)(v5 + 20);
    *(_OWORD *)unint64_t v39 = v15;
    sub_21B9641A8((uint64_t)v40, (uint64_t)(v5 + 40));
    *int64x2_t v6 = *(_OWORD *)v39;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v39[12];
    *(_OWORD *)(a1 + 64) = v41;
    *(void *)(a1 + 40) = v40[0];
    uint64_t v16 = *(void **)(a1 + 48);
    if (v16) {
      free(v16);
    }
    uint64_t v17 = v40[2];
    *(void *)(a1 + 48) = v40[1];
    *(void *)(a1 + 56) = v17;
  }
}

uint64_t sub_21B94AA24(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_21B94AA2C(uint64_t a1, int a2)
{
  if (a2 == 1
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94AB2C(uint64_t a1, int a2)
{
  if (a2 == 1
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94AC2C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_21B94AC60(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94ACB4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94AD30()
{
}

void sub_21B94ADB4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_21B94ADD8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0918, 0);
  if (!v5)
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v43, lpsrc, 2);
    uint64_t v19 = *(void *)(v43[0] + 16);
    *(_OWORD *)int64_t v44 = *(_OWORD *)v43[0];
    *(void *)&v44[16] = v19;
    v43[0] = 0;
    MEMORY[0x21D495F30]();
    uint64_t v20 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v21 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = *(void *)(a1 + 16);
    if (v21) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v22;
    }
    if (HIDWORD(v24) * HIDWORD(v23) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      v43[0] = v20;
      v43[1] = v24;
      v43[2] = v23;
      sub_21B8943FC((uint64_t *)v44, (uint64_t)v43);
      return;
    }
    goto LABEL_62;
  }
  int v6 = (_DWORD *)(a1 + 8);
  int8x16_t v7 = (unsigned int *)(v5 + 8);
  __int32 v8 = *(_WORD **)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = *v7;
    if (v9 == *v6)
    {
      int v10 = *((_DWORD *)v5 + 3);
      if (v10 == *(_DWORD *)(a1 + 12))
      {
        uint64_t v11 = *((unsigned int *)v5 + 4);
        if (v11 == *(_DWORD *)(a1 + 16))
        {
          uint64_t v12 = *((unsigned int *)v5 + 5);
          if (v12 == *(_DWORD *)(a1 + 20))
          {
            if (v11 == 1)
            {
              if (v12 == v9)
              {
                uint64_t v13 = (v10 * v9);
                BOOL v14 = (const void *)*((void *)v5 + 6);
                if (v13) {
                  BOOL v15 = v14 == 0;
                }
                else {
                  BOOL v15 = 0;
                }
                if (!v15)
                {
                  if (!v13) {
                    return;
                  }
                  goto LABEL_50;
                }
                if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  __int32 v8 = *(_WORD **)(a1 + 48);
LABEL_50:
                  size_t v39 = 2 * v13;
                  uint64_t v40 = v8;
                  long long v41 = v14;
LABEL_55:
                  memmove(v40, v41, v39);
                  return;
                }
              }
              else
              {
                if (!v9 || !v10) {
                  return;
                }
                int32x4_t v34 = (char *)*((void *)v5 + 6);
                size_t v35 = 2 * v9;
                int v36 = v10 - 1;
                if (v10 != 1)
                {
                  uint64_t v37 = 0;
                  uint64_t v38 = 2 * v12;
                  do
                  {
                    if (!&v34[v37]
                      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                    {
                      goto LABEL_62;
                    }
                    memmove((char *)v8 + v37, &v34[v37], v35);
                    v37 += v38;
                    --v36;
                  }
                  while (v36);
                  v34 += v37;
                  __int32 v8 = (_WORD *)((char *)v8 + v37);
                }
                if (v34
                  || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  uint64_t v40 = v8;
                  long long v41 = v34;
                  size_t v39 = v35;
                  goto LABEL_55;
                }
              }
LABEL_62:
              abort();
            }
            if (!v9 || !v10) {
              return;
            }
            int v25 = v9 - 1;
            int v26 = (_WORD *)*((void *)v5 + 6);
            int v27 = v10 - 1;
            if (v27)
            {
              if (!v25)
              {
                uint64_t v42 = 0;
                do
                {
                  v8[v42] = v26[v42];
                  v42 += v12;
                  --v27;
                }
                while (v27);
                int v26 = (_WORD *)((char *)v26 + v42 * 2);
                __int32 v8 = (_WORD *)((char *)v8 + v42 * 2);
LABEL_61:
                *__int32 v8 = *v26;
                return;
              }
              int v28 = 0;
              uint64_t v29 = 2 * v12;
              do
              {
                uint64_t v30 = 0;
                int v31 = v25;
                do
                {
                  v8[v30] = v26[v30];
                  v30 += v11;
                  --v31;
                }
                while (v31);
                v8[v30] = v26[v30];
                int v26 = (_WORD *)((char *)v26 + v29);
                __int32 v8 = (_WORD *)((char *)v8 + v29);
                ++v28;
              }
              while (v28 != v27);
            }
            if (v25)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 2 * v11;
              do
              {
                *(_WORD *)((char *)v8 + v32) = *(_WORD *)((char *)v26 + v32);
                v32 += v33;
                --v25;
              }
              while (v25);
              int v26 = (_WORD *)((char *)v26 + v32);
              __int32 v8 = (_WORD *)((char *)v8 + v32);
            }
            goto LABEL_61;
          }
        }
      }
    }
  }
  long long v16 = *(_OWORD *)v7;
  *(_OWORD *)&v44[12] = *(_OWORD *)(v5 + 20);
  *(_OWORD *)int64_t v44 = v16;
  sub_21B964540((uint64_t)v45, (uint64_t)(v5 + 40));
  *(_OWORD *)int v6 = *(_OWORD *)v44;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)&v44[12];
  *(_OWORD *)(a1 + 64) = v46;
  *(void *)(a1 + 40) = v45[0];
  uint64_t v17 = *(void **)(a1 + 48);
  if (v17) {
    free(v17);
  }
  uint64_t v18 = v45[2];
  *(void *)(a1 + 48) = v45[1];
  *(void *)(a1 + 56) = v18;
}

uint64_t sub_21B94B230(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_21B94B238(uint64_t a1, int a2)
{
  if (a2 == 2
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94B338(uint64_t a1, int a2)
{
  if (a2 == 2
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94B438(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    int v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(void *)(a1 + 72) >> 33) != -1) {
      goto LABEL_11;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 48);
    if (v2) {
LABEL_11:
    }
      free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_21B94B4E0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    int v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(void *)(a1 + 72) >> 33) != -1) {
      goto LABEL_11;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 48);
    if (v2) {
LABEL_11:
    }
      free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94B5A8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94B624()
{
}

void sub_21B94B6A8(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

__int16 sub_21B94B6CC@<H0>(uint64_t a1@<X0>, uint64_t *lpsrc@<X1>)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0930, 0);
  if (!v5)
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v76, lpsrc, 3);
    uint64_t v21 = *(void *)(v76[0] + 16);
    *(_OWORD *)uint64_t v78 = *(_OWORD *)v76[0];
    *(void *)&v78[16] = v21;
    v76[0] = 0;
    MEMORY[0x21D495F30]();
    uint64_t v22 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v23 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v23 = 1;
    }
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v25 = *(void *)(a1 + 16);
    if (v23) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v24;
    }
    if (HIDWORD(v26) * HIDWORD(v25) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      v76[0] = v22;
      v76[1] = v26;
      v76[2] = v25;
      v77[0] = (uint64_t)v78;
      v77[1] = (uint64_t)v76;
      LOWORD(v6) = sub_21B895CE4(v77);
      return v6;
    }
    goto LABEL_93;
  }
  int8x16_t v7 = (_OWORD *)(a1 + 8);
  __int32 v8 = (unsigned int *)(v5 + 8);
  uint64_t v9 = *(_WORD **)(a1 + 48);
  if (!v9
    || (uint64_t v10 = *v8, v10 != *(_DWORD *)v7)
    || (int v11 = *((_DWORD *)v5 + 3), v11 != *(_DWORD *)(a1 + 12))
    || (uint64_t v12 = *((unsigned int *)v5 + 4), v12 != *(_DWORD *)(a1 + 16))
    || (uint64_t v13 = *((unsigned int *)v5 + 5), v13 != *(_DWORD *)(a1 + 20)))
  {
    long long v17 = *(_OWORD *)v8;
    *(_OWORD *)&v78[12] = *(_OWORD *)(v5 + 20);
    *(_OWORD *)uint64_t v78 = v17;
    sub_21B9649A8((uint64_t)v79, (uint64_t)(v5 + 40));
    *int8x16_t v7 = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v78[12];
    LOWORD(v6) = v80;
    *(_OWORD *)(a1 + 64) = v80;
    uint64_t v18 = *(void **)(a1 + 48);
    if (v18)
    {
      if (*(_DWORD *)(a1 + 68)) {
        BOOL v19 = *(_DWORD *)(a1 + 64) == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19) {
        int v20 = 0;
      }
      else {
        int v20 = *(_DWORD *)(a1 + 68);
      }
      if (v20 * (*(void *)(a1 + 72) >> 33) == -1)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        uint64_t v18 = *(void **)(a1 + 48);
        *(void *)(a1 + 40) = v79[0];
        if (!v18) {
          goto LABEL_37;
        }
      }
      else
      {
        *(void *)(a1 + 40) = v79[0];
      }
      free(v18);
    }
    else
    {
      *(void *)(a1 + 40) = v79[0];
    }
LABEL_37:
    uint64_t v27 = v79[2];
    *(void *)(a1 + 48) = v79[1];
    *(void *)(a1 + 56) = v27;
    return v6;
  }
  if (v12 != 1)
  {
    if (v10 && v11)
    {
      int v28 = v10 - 1;
      uint64_t v29 = (_WORD *)*((void *)v5 + 6);
      uint64_t v30 = 2 * v12;
      int v31 = v11 - 1;
      if (v31)
      {
        if (v10 == 1)
        {
          uint64_t v61 = 0;
          uint64_t v62 = 2 * v13;
          do
          {
            *(_WORD *)((char *)v9 + v61) = *(_WORD *)((char *)v29 + v61);
            v61 += v62;
            --v31;
          }
          while (v31);
          uint64_t v29 = (_WORD *)((char *)v29 + v61);
          uint64_t v9 = (_WORD *)((char *)v9 + v61);
        }
        else
        {
          int v32 = 0;
          uint64_t v33 = 2 * v13;
          do
          {
            uint64_t v34 = 0;
            int v35 = v10 - 1;
            do
            {
              *(_WORD *)((char *)v9 + v34) = *(_WORD *)((char *)v29 + v34);
              v34 += v30;
              --v35;
            }
            while (v35);
            *(_WORD *)((char *)v9 + v34) = *(_WORD *)((char *)v29 + v34);
            uint64_t v29 = (_WORD *)((char *)v29 + v33);
            uint64_t v9 = (_WORD *)((char *)v9 + v33);
            ++v32;
          }
          while (v32 != v31);
        }
      }
      if (v10 != 1)
      {
        uint64_t v63 = 0;
        do
        {
          *(_WORD *)((char *)v9 + v63) = *(_WORD *)((char *)v29 + v63);
          v63 += v30;
          --v28;
        }
        while (v28);
        uint64_t v29 = (_WORD *)((char *)v29 + v63);
        uint64_t v9 = (_WORD *)((char *)v9 + v63);
      }
      LOWORD(v6) = *v29;
      *uint64_t v9 = *v29;
    }
    return v6;
  }
  if (v13 != v10)
  {
    if (!v10 || !v11) {
      return v6;
    }
    uint64_t v36 = *((void *)v5 + 6);
    int v37 = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v42 = *(_WORD **)(a1 + 48);
      uint64_t v43 = *((void *)v5 + 6);
LABEL_82:
      if (v43
        || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        unint64_t v64 = (v10 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v64 < 0xF || (unint64_t)v42 - v43 < 0x20)
        {
          long long v67 = v42;
          uint64_t v68 = (__int16 *)v43;
        }
        else
        {
          unint64_t v65 = v64 + 1;
          unint64_t v66 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
          long long v67 = &v42[v66];
          uint64_t v68 = (__int16 *)(v43 + 2 * v66);
          unint64_t v69 = (long long *)(v43 + 16);
          unint64_t v70 = v42 + 8;
          unint64_t v71 = v66;
          do
          {
            long long v6 = *(v69 - 1);
            long long v72 = *v69;
            *(v70 - 1) = v6;
            _OWORD *v70 = v72;
            v69 += 2;
            v70 += 2;
            v71 -= 16;
          }
          while (v71);
          if (v65 == v66) {
            return v6;
          }
        }
        do
        {
          __int16 v73 = *v68++;
          LOWORD(v6) = v73;
          *v67++ = v73;
        }
        while (v68 != (__int16 *)(v43 + 2 * v10));
        return v6;
      }
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v39 = 2 * v13;
      unint64_t v40 = (v10 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v41 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v75 = v41;
      uint64_t v42 = v9;
      uint64_t v43 = *((void *)v5 + 6);
      while (v43
           || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        int64_t v44 = v42;
        unint64_t v45 = (__int16 *)v43;
        if (v40 < 0xF) {
          goto LABEL_98;
        }
        int64_t v44 = v42;
        unint64_t v45 = (__int16 *)v43;
        if ((unint64_t)v9 + v39 * v38 - v39 * v38 - v36 < 0x20) {
          goto LABEL_98;
        }
        uint64_t v46 = 0;
        int64_t v44 = &v42[v75];
        unint64_t v45 = (__int16 *)(v43 + v75 * 2);
        unint64_t v47 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          unint64_t v48 = &v42[v46];
          long long v49 = *(_OWORD *)(v43 + v46 * 2 + 16);
          *unint64_t v48 = *(_OWORD *)(v43 + v46 * 2);
          v48[1] = v49;
          v46 += 16;
          v47 -= 16;
        }
        while (v47);
        if (v40 + 1 != v41)
        {
LABEL_98:
          do
          {
            __int16 v50 = *v45++;
            *v44++ = v50;
          }
          while (v45 != (__int16 *)(v43 + 2 * v10));
        }
        v43 += v39;
        uint64_t v42 = (_WORD *)((char *)v42 + v39);
        if (++v38 == v37) {
          goto LABEL_82;
        }
      }
    }
    goto LABEL_93;
  }
  uint64_t v14 = (v11 * v10);
  uint64_t v15 = *((void *)v5 + 6);
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    if (!v14) {
      return v6;
    }
    goto LABEL_64;
  }
  if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
LABEL_93:
    abort();
  }
  uint64_t v9 = *(_WORD **)(a1 + 48);
LABEL_64:
  unint64_t v51 = (v14 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v51 < 0xF || (unint64_t)v9 - v15 < 0x20)
  {
    unint64_t v54 = v9;
    long long v55 = (__int16 *)v15;
    do
    {
LABEL_71:
      __int16 v60 = *v55++;
      LOWORD(v6) = v60;
      *v54++ = v60;
    }
    while (v55 != (__int16 *)(v15 + 2 * v14));
    return v6;
  }
  unint64_t v52 = v51 + 1;
  unint64_t v53 = (v51 + 1) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v54 = &v9[v53];
  long long v55 = (__int16 *)(v15 + 2 * v53);
  unint64_t v56 = (long long *)(v15 + 16);
  int64_t v57 = v9 + 8;
  unint64_t v58 = v53;
  do
  {
    long long v6 = *(v56 - 1);
    long long v59 = *v56;
    *(v57 - 1) = v6;
    *int64_t v57 = v59;
    v56 += 2;
    v57 += 2;
    v58 -= 16;
  }
  while (v58);
  if (v52 != v53) {
    goto LABEL_71;
  }
  return v6;
}

void sub_21B94BCE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,int a25,uint64_t a26)
{
}

uint64_t sub_21B94BD78(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_21B94BD80(uint64_t a1, int a2)
{
  if (a2 == 3
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94BE80(uint64_t a1, int a2)
{
  if (a2 == 3
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94BF80(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_21B94BFB4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94C008())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94C084()
{
}

void sub_21B94C108(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_21B94C12C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9CD90, 0);
  if (!v5)
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v43, lpsrc, 4);
    uint64_t v19 = *(void *)(v43[0] + 16);
    *(_OWORD *)int64_t v44 = *(_OWORD *)v43[0];
    *(void *)&v44[16] = v19;
    v43[0] = 0;
    MEMORY[0x21D495F30]();
    uint64_t v20 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v21 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = *(void *)(a1 + 16);
    if (v21) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v22;
    }
    if (HIDWORD(v24) * HIDWORD(v23) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      v43[0] = v20;
      v43[1] = v24;
      v43[2] = v23;
      sub_21B897A38((uint64_t)v44, (uint64_t)v43);
      return;
    }
    goto LABEL_62;
  }
  int v6 = (_DWORD *)(a1 + 8);
  int8x16_t v7 = (unsigned int *)(v5 + 8);
  __int32 v8 = *(_DWORD **)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = *v7;
    if (v9 == *v6)
    {
      int v10 = *((_DWORD *)v5 + 3);
      if (v10 == *(_DWORD *)(a1 + 12))
      {
        uint64_t v11 = *((unsigned int *)v5 + 4);
        if (v11 == *(_DWORD *)(a1 + 16))
        {
          uint64_t v12 = *((unsigned int *)v5 + 5);
          if (v12 == *(_DWORD *)(a1 + 20))
          {
            if (v11 == 1)
            {
              if (v12 == v9)
              {
                uint64_t v13 = (v10 * v9);
                uint64_t v14 = (const void *)*((void *)v5 + 6);
                if (v13) {
                  BOOL v15 = v14 == 0;
                }
                else {
                  BOOL v15 = 0;
                }
                if (!v15)
                {
                  if (!v13) {
                    return;
                  }
                  goto LABEL_50;
                }
                if (!sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  __int32 v8 = *(_DWORD **)(a1 + 48);
LABEL_50:
                  size_t v39 = 4 * v13;
                  unint64_t v40 = v8;
                  unint64_t v41 = v14;
LABEL_55:
                  memmove(v40, v41, v39);
                  return;
                }
              }
              else
              {
                if (!v9 || !v10) {
                  return;
                }
                uint64_t v34 = (char *)*((void *)v5 + 6);
                size_t v35 = 4 * v9;
                int v36 = v10 - 1;
                if (v10 != 1)
                {
                  uint64_t v37 = 0;
                  uint64_t v38 = 4 * v12;
                  do
                  {
                    if (!&v34[v37]
                      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                    {
                      goto LABEL_62;
                    }
                    memmove((char *)v8 + v37, &v34[v37], v35);
                    v37 += v38;
                    --v36;
                  }
                  while (v36);
                  v34 += v37;
                  __int32 v8 = (_DWORD *)((char *)v8 + v37);
                }
                if (v34
                  || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
                {
                  unint64_t v40 = v8;
                  unint64_t v41 = v34;
                  size_t v39 = v35;
                  goto LABEL_55;
                }
              }
LABEL_62:
              abort();
            }
            if (!v9 || !v10) {
              return;
            }
            int v25 = v9 - 1;
            uint64_t v26 = (_DWORD *)*((void *)v5 + 6);
            int v27 = v10 - 1;
            if (v27)
            {
              if (!v25)
              {
                uint64_t v42 = 0;
                do
                {
                  v8[v42] = v26[v42];
                  v42 += v12;
                  --v27;
                }
                while (v27);
                uint64_t v26 = (_DWORD *)((char *)v26 + v42 * 4);
                __int32 v8 = (_DWORD *)((char *)v8 + v42 * 4);
LABEL_61:
                *__int32 v8 = *v26;
                return;
              }
              int v28 = 0;
              uint64_t v29 = 4 * v12;
              do
              {
                uint64_t v30 = 0;
                int v31 = v25;
                do
                {
                  v8[v30] = v26[v30];
                  v30 += v11;
                  --v31;
                }
                while (v31);
                v8[v30] = v26[v30];
                uint64_t v26 = (_DWORD *)((char *)v26 + v29);
                __int32 v8 = (_DWORD *)((char *)v8 + v29);
                ++v28;
              }
              while (v28 != v27);
            }
            if (v25)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 4 * v11;
              do
              {
                *(_DWORD *)((char *)v8 + v32) = *(_DWORD *)((char *)v26 + v32);
                v32 += v33;
                --v25;
              }
              while (v25);
              uint64_t v26 = (_DWORD *)((char *)v26 + v32);
              __int32 v8 = (_DWORD *)((char *)v8 + v32);
            }
            goto LABEL_61;
          }
        }
      }
    }
  }
  long long v16 = *(_OWORD *)v7;
  *(_OWORD *)&v44[12] = *(_OWORD *)(v5 + 20);
  *(_OWORD *)int64_t v44 = v16;
  sub_21B964BF4((uint64_t)v45, (uint64_t)(v5 + 40));
  *(_OWORD *)int v6 = *(_OWORD *)v44;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)&v44[12];
  *(_OWORD *)(a1 + 64) = v46;
  *(void *)(a1 + 40) = v45[0];
  long long v17 = *(void **)(a1 + 48);
  if (v17) {
    free(v17);
  }
  uint64_t v18 = v45[2];
  *(void *)(a1 + 48) = v45[1];
  *(void *)(a1 + 56) = v18;
}

uint64_t sub_21B94C584(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_21B94C58C(uint64_t a1, int a2)
{
  if (a2 == 4
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94C68C(uint64_t a1, int a2)
{
  if (a2 == 4
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94C78C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B94C7C0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94C814())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94C890()
{
}

void sub_21B94C924(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B94C948(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0948, 0);
  if (v5)
  {
    int v6 = *(unsigned char **)(a1 + 72);
    if (!v6 || *(void *)(v5 + 12) != *(void *)(a1 + 12) || *((void *)v5 + 3) != *(void *)(a1 + 24))
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      long long v8 = *(_OWORD *)(v5 + 24);
      long long v9 = *(_OWORD *)(v5 + 40);
      uint64_t v66 = *((void *)v5 + 7);
      long long v64 = v8;
      long long v65 = v9;
      long long v63 = v7;
      sub_21B964FB4((uint64_t)v67, (uint64_t)(v5 + 64));
      long long v10 = v64;
      *(_OWORD *)(a1 + 8) = v63;
      *(_OWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 40) = v65;
      *(void *)(a1 + 56) = v66;
      *(_OWORD *)(a1 + 88) = v68;
      *(void *)(a1 + 104) = v69;
      *(void *)(a1 + 64) = v67[0];
      uint64_t v11 = *(void **)(a1 + 72);
      if (v11) {
        free(v11);
      }
      uint64_t v12 = v67[2];
      *(void *)(a1 + 72) = v67[1];
      *(void *)(a1 + 80) = v12;
      return;
    }
    if (*((_DWORD *)v5 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v5 + 2))
      {
        int v24 = *((_DWORD *)v5 + 3);
        if (v24)
        {
          int v25 = *((_DWORD *)v5 + 4);
          if (v25)
          {
            int v26 = v24 - 1;
            uint64_t v27 = *((unsigned int *)v5 + 6);
            uint64_t v28 = *(unsigned int *)(a1 + 24);
            uint64_t v29 = (unsigned char *)*((void *)v5 + 9);
            int v30 = v25 - 1;
            if (v30)
            {
              uint64_t v31 = *(unsigned int *)(a1 + 28);
              uint64_t v32 = *((unsigned int *)v5 + 7);
              if (v26)
              {
                int v33 = 0;
                uint64_t v34 = v29 + 1;
                size_t v35 = v6 + 1;
                do
                {
                  int v36 = v35;
                  uint64_t v37 = v34;
                  int v38 = v26;
                  do
                  {
                    *(v36 - 1) = *(v37 - 1);
                    *int v36 = *v37;
                    v37 += v27;
                    v36 += v28;
                    --v38;
                  }
                  while (v38);
                  *(v36 - 1) = *(v37 - 1);
                  *int v36 = *v37;
                  v29 += v32;
                  v6 += v31;
                  ++v33;
                  v34 += v32;
                  v35 += v31;
                }
                while (v33 != v30);
              }
              else
              {
                do
                {
                  *int v6 = *v29;
                  v6[1] = v29[1];
                  v29 += v32;
                  v6 += v31;
                  --v30;
                }
                while (v30);
              }
            }
            for (; v26; --v26)
            {
              *int v6 = *v29;
              v6[1] = v29[1];
              v29 += v27;
              v6 += v28;
            }
            *int v6 = *v29;
            v6[1] = v29[1];
          }
        }
      }
      return;
    }
    size_t v39 = (char *)*((unsigned int *)v5 + 6);
    uint64_t v40 = *(unsigned int *)(a1 + 24);
    size_t v41 = *((unsigned int *)v5 + 2);
    if (v39 != v40 || v39 != v41)
    {
      int v44 = *((_DWORD *)v5 + 3);
      int v43 = *((_DWORD *)v5 + 4);
      if (v41) {
        BOOL v45 = v44 == 0;
      }
      else {
        BOOL v45 = 1;
      }
      if (v45 || v43 == 0) {
        return;
      }
      int v47 = v44 - 1;
      unint64_t v48 = (char *)*((void *)v5 + 9);
      int v61 = v43 - 1;
      if (v43 != 1)
      {
        uint64_t v60 = *(unsigned int *)(a1 + 28);
        uint64_t v59 = *((unsigned int *)v5 + 7);
        if (v44 == 1)
        {
          while (v48
               || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            memmove(v6, v48, v41);
            v48 += v59;
            v6 += v60;
            if (!--v61) {
              goto LABEL_85;
            }
          }
        }
        else
        {
          int v49 = 0;
          while (1)
          {
            int v50 = 0;
            unint64_t v51 = v48;
            unint64_t v52 = v6;
            do
            {
              while (v51)
              {
                memmove(v52, v51, v41);
                unint64_t v51 = &v39[(void)v51];
                v52 += v40;
                if (++v50 == v47) {
                  goto LABEL_49;
                }
              }
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                goto LABEL_90;
              }
              memcpy(v52, 0, v41);
              v52 += v40;
              ++v50;
              unint64_t v51 = v39;
            }
            while (v50 != v47);
            unint64_t v51 = v39;
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              break;
            }
LABEL_49:
            memmove(v52, v51, v41);
            v48 += v59;
            v6 += v60;
            if (++v49 == v61) {
              goto LABEL_85;
            }
          }
        }
        goto LABEL_90;
      }
LABEL_85:
      if (v47)
      {
        while (v48
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v48, v41);
          unint64_t v48 = &v39[(void)v48];
          v6 += v40;
          if (!--v47) {
            goto LABEL_91;
          }
        }
        goto LABEL_90;
      }
LABEL_91:
      if (v48) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }
    uint64_t v53 = *((unsigned int *)v5 + 7);
    uint64_t v54 = *(unsigned int *)(a1 + 28);
    int v55 = *((_DWORD *)v5 + 3);
    size_t v41 = (v55 * v39);
    if (v53 == v54 && v53 == v41)
    {
      size_t v41 = (*((_DWORD *)v5 + 4) * v53);
      unint64_t v48 = (char *)*((void *)v5 + 9);
      if (v41) {
        BOOL v56 = v48 == 0;
      }
      else {
        BOOL v56 = 0;
      }
      if (v56)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_90;
        }
        int v6 = *(unsigned char **)(a1 + 72);
        goto LABEL_93;
      }
    }
    else
    {
      if (!v39) {
        return;
      }
      if (!v55) {
        return;
      }
      int v57 = *((_DWORD *)v5 + 4);
      if (!v57) {
        return;
      }
      unint64_t v48 = (char *)*((void *)v5 + 9);
      int v58 = v57 - 1;
      if (v57 != 1)
      {
        if (!v41) {
          return;
        }
        while (v48
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v48, v41);
          v48 += v53;
          v6 += v54;
          if (!--v58) {
            goto LABEL_77;
          }
        }
LABEL_90:
        abort();
      }
LABEL_77:
      if (v41 && !v48)
      {
LABEL_92:
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_90;
        }
        goto LABEL_93;
      }
    }
    if (!v41) {
      return;
    }
LABEL_93:
    memmove(v6, v48, v41);
    return;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v70, lpsrc, 5);
  long long v14 = *(_OWORD *)(v70 + 16);
  long long v13 = *(_OWORD *)(v70 + 32);
  long long v63 = *(_OWORD *)v70;
  long long v64 = v14;
  long long v65 = v13;
  *(void *)&long long v70 = 0;
  MEMORY[0x21D495F30]();
  uint64_t v15 = *(void *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v16 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  unint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  if (v16) {
    unint64_t v17 = 0;
  }
  *(void *)((char *)&v70 + 4) = v17;
  unint64_t v19 = v17;
  LODWORD(v70) = 2;
  uint64_t v20 = v70;
  unint64_t v21 = HIDWORD(v17);
  LODWORD(v70) = 1;
  *(void *)((char *)&v70 + 4) = v18;
  uint64_t v22 = v70;
  if (HIDWORD(v18) * HIDWORD(v17) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  *(void *)&long long v70 = v15;
  *((void *)&v70 + 1) = v20;
  int v71 = v21;
  uint64_t v72 = v22;
  int v73 = HIDWORD(v18);
  unint64_t v74 = v19;
  uint64_t v75 = v18;
  v62[0] = (size_t)&v63;
  v62[1] = (size_t)&v70;
  sub_21B8933A8(v62);
}

uint64_t sub_21B94D0F8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B94D100(uint64_t a1, int a2)
{
  if (a2 == 5
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94D28C(uint64_t a1, int a2)
{
  if (a2 == 5
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94D418(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B94D44C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94D4A0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94D51C()
{
}

void sub_21B94D5B0(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B94D5D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0960, 0);
  if (v5)
  {
    int v6 = *(_WORD **)(a1 + 72);
    if (!v6 || *(void *)(v5 + 12) != *(void *)(a1 + 12) || *((void *)v5 + 3) != *(void *)(a1 + 24))
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      long long v8 = *(_OWORD *)(v5 + 24);
      long long v9 = *(_OWORD *)(v5 + 40);
      uint64_t v100 = *((void *)v5 + 7);
      long long v98 = v8;
      long long v99 = v9;
      long long v97 = v7;
      sub_21B965784((uint64_t)v101, (uint64_t)(v5 + 64));
      long long v10 = v98;
      *(_OWORD *)(a1 + 8) = v97;
      *(_OWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 40) = v99;
      *(void *)(a1 + 56) = v100;
      *(_OWORD *)(a1 + 88) = v102;
      *(void *)(a1 + 104) = v103;
      *(void *)(a1 + 64) = v101[0];
      uint64_t v11 = *(void **)(a1 + 72);
      if (v11) {
        free(v11);
      }
      uint64_t v12 = v101[2];
      *(void *)(a1 + 72) = v101[1];
      *(void *)(a1 + 80) = v12;
      return;
    }
    if (*((_DWORD *)v5 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v5 + 2)) {
        return;
      }
      int v44 = *((_DWORD *)v5 + 3);
      if (!v44) {
        return;
      }
      int v45 = *((_DWORD *)v5 + 4);
      if (!v45) {
        return;
      }
      int v46 = v44 - 1;
      uint64_t v47 = *((unsigned int *)v5 + 6);
      uint64_t v48 = *(unsigned int *)(a1 + 24);
      int v49 = (_WORD *)*((void *)v5 + 9);
      int v50 = v45 - 1;
      if (v50)
      {
        uint64_t v51 = *(unsigned int *)(a1 + 28);
        uint64_t v52 = *((unsigned int *)v5 + 7);
        if (!v46)
        {
          do
          {
            *int v6 = *v49;
            v6[1] = v49[1];
            v49 += v52;
            v6 += v51;
            --v50;
          }
          while (v50);
LABEL_145:
          *int v6 = *v49;
          v6[1] = v49[1];
          return;
        }
        int v53 = 0;
        uint64_t v54 = v49 + 1;
        int v55 = v6 + 1;
        do
        {
          BOOL v56 = v55;
          int v57 = v54;
          int v58 = v46;
          do
          {
            *(v56 - 1) = *(v57 - 1);
            *BOOL v56 = *v57;
            v57 += v47;
            v56 += v48;
            --v58;
          }
          while (v58);
          *(v56 - 1) = *(v57 - 1);
          *BOOL v56 = *v57;
          v49 += v52;
          v6 += v51;
          ++v53;
          v54 += v52;
          v55 += v51;
        }
        while (v53 != v50);
      }
      for (; v46; --v46)
      {
        *int v6 = *v49;
        v6[1] = v49[1];
        v49 += v47;
        v6 += v48;
      }
      goto LABEL_145;
    }
    uint64_t v60 = *((unsigned int *)v5 + 6);
    uint64_t v61 = *(unsigned int *)(a1 + 24);
    uint64_t v62 = *((unsigned int *)v5 + 2);
    if (v60 == v61 && v60 == v62)
    {
      uint64_t v73 = *((unsigned int *)v5 + 7);
      uint64_t v74 = *(unsigned int *)(a1 + 28);
      int v75 = *((_DWORD *)v5 + 3);
      uint64_t v76 = (v75 * v60);
      if (v73 == v74 && v73 == v76)
      {
        uint64_t v77 = (*((_DWORD *)v5 + 4) * v73);
        uint64_t v78 = (const void *)*((void *)v5 + 9);
        if (v77) {
          BOOL v79 = v78 == 0;
        }
        else {
          BOOL v79 = 0;
        }
        if (v79)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_160;
          }
          int v6 = *(_WORD **)(a1 + 72);
        }
        else if (!v77)
        {
          return;
        }
        size_t v84 = 2 * v77;
        BOOL v85 = v6;
        uint64_t v86 = v78;
        goto LABEL_164;
      }
      if (!v60) {
        return;
      }
      if (!v75) {
        return;
      }
      int v80 = *((_DWORD *)v5 + 4);
      if (!v80) {
        return;
      }
      long long v67 = (char *)*((void *)v5 + 9);
      size_t v68 = 2 * v76;
      int v81 = v80 - 1;
      if (v80 != 1)
      {
        if (!v76) {
          return;
        }
        uint64_t v82 = 2 * v73;
        uint64_t v83 = 2 * v74;
        while (v67
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v67, 2 * v76);
          v67 += v82;
          int v6 = (_WORD *)((char *)v6 + v83);
          if (!--v81) {
            goto LABEL_146;
          }
        }
LABEL_160:
        abort();
      }
LABEL_146:
      if (!v76 || v67)
      {
        if (!v76) {
          return;
        }
LABEL_163:
        BOOL v85 = v6;
        uint64_t v86 = v67;
        size_t v84 = v68;
LABEL_164:
        memmove(v85, v86, v84);
        return;
      }
    }
    else
    {
      if (!v62) {
        return;
      }
      int v64 = *((_DWORD *)v5 + 3);
      if (!v64) {
        return;
      }
      int v65 = *((_DWORD *)v5 + 4);
      if (!v65) {
        return;
      }
      int v66 = v64 - 1;
      long long v67 = (char *)*((void *)v5 + 9);
      size_t v68 = 2 * v62;
      int v96 = v65 - 1;
      if (v65 != 1)
      {
        if (v64 == 1)
        {
          uint64_t v87 = 2 * *((unsigned int *)v5 + 7);
          uint64_t v88 = 2 * *(unsigned int *)(a1 + 28);
          while (v67
               || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            memmove(v6, v67, v68);
            v67 += v87;
            int v6 = (_WORD *)((char *)v6 + v88);
            if (!--v96) {
              goto LABEL_155;
            }
          }
        }
        else
        {
          int v69 = 0;
          uint64_t v90 = *((unsigned int *)v5 + 7);
          uint64_t v92 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            int v94 = v69;
            int v70 = 0;
            int v71 = v67;
            uint64_t v72 = (char *)v6;
            do
            {
              while (v71)
              {
                memmove(v72, v71, v68);
                v71 += 2 * v60;
                v72 += 2 * v61;
                if (++v70 == v66) {
                  goto LABEL_91;
                }
              }
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                goto LABEL_160;
              }
              memcpy(v72, 0, v68);
              v72 += 2 * v61;
              ++v70;
              int v71 = (char *)(2 * v60);
            }
            while (v70 != v66);
            int v71 = (char *)(2 * v60);
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              break;
            }
LABEL_91:
            memmove(v72, v71, v68);
            v67 += 2 * v90;
            v6 += v92;
            int v69 = v94 + 1;
            if (v94 + 1 == v96) {
              goto LABEL_155;
            }
          }
        }
        goto LABEL_160;
      }
LABEL_155:
      if (v66)
      {
        while (v67
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v67, v68);
          v67 += 2 * v60;
          v6 += v61;
          if (!--v66) {
            goto LABEL_161;
          }
        }
        goto LABEL_160;
      }
LABEL_161:
      if (v67) {
        goto LABEL_163;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_160;
    }
    goto LABEL_163;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v97, lpsrc, 6);
  long long v13 = *(_WORD **)v97;
  uint64_t v15 = *(unsigned int *)(v97 + 8);
  int v14 = *(_DWORD *)(v97 + 12);
  int v17 = *(_DWORD *)(v97 + 16);
  int v16 = *(_DWORD *)(v97 + 20);
  uint64_t v18 = *(unsigned int *)(v97 + 24);
  uint64_t v91 = *(unsigned int *)(v97 + 28);
  *(void *)&long long v97 = 0;
  MEMORY[0x21D495F30]();
  unint64_t v19 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v20 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v20 = 1;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  if (v20) {
    HIDWORD(v21) = 0;
  }
  LODWORD(v97) = 1;
  *(void *)((char *)&v97 + 4) = *(void *)(a1 + 40);
  unint64_t v22 = v97;
  uint64_t v89 = HIDWORD(*(void *)((char *)&v97 + 4));
  if (DWORD2(v97) * HIDWORD(v21) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  if (v16 != 1 || v22 != 1)
  {
    if (!v15 || !v14 || !v17) {
      return;
    }
    int v28 = v14 - 1;
    unint64_t v29 = HIDWORD(v22);
    int v30 = v17 - 1;
    if (v17 != 1)
    {
      if (v14 == 1)
      {
        do
        {
          *unint64_t v19 = *v13;
          v19[1] = v13[1];
          v13 += v91;
          v19 += v89;
          --v30;
        }
        while (v30);
LABEL_102:
        *unint64_t v19 = *v13;
        v19[1] = v13[1];
        return;
      }
      int v31 = 0;
      uint64_t v32 = v13 + 1;
      int v33 = v19 + 1;
      do
      {
        uint64_t v34 = v33;
        size_t v35 = v32;
        int v36 = v14 - 1;
        do
        {
          *(v34 - 1) = *(v35 - 1);
          *uint64_t v34 = *v35;
          v35 += v18;
          v34 += v29;
          --v36;
        }
        while (v36);
        *(v34 - 1) = *(v35 - 1);
        *uint64_t v34 = *v35;
        v13 += v91;
        v19 += v89;
        ++v31;
        v32 += v91;
        v33 += v89;
      }
      while (v31 != v30);
    }
    if (v14 != 1)
    {
      uint64_t v37 = 2 * v29;
      do
      {
        *unint64_t v19 = *v13;
        v19[1] = v13[1];
        v13 += v18;
        unint64_t v19 = (_WORD *)((char *)v19 + v37);
        --v28;
      }
      while (v28);
    }
    goto LABEL_102;
  }
  unint64_t v23 = HIDWORD(v22);
  if (v18 != v15 || v18 != HIDWORD(v22))
  {
    if (!v15 || !v14 || !v17) {
      return;
    }
    int v38 = v14 - 1;
    size_t v26 = 2 * v15;
    int v95 = v17 - 1;
    if (v17 != 1)
    {
      if (v38)
      {
        int v39 = 0;
        while (1)
        {
          int v93 = v39;
          int v40 = 0;
          size_t v41 = (char *)v13;
          uint64_t v42 = (char *)v19;
          do
          {
            while (v41)
            {
              memmove(v42, v41, v26);
              v41 += 2 * v18;
              v42 += 2 * v23;
              if (++v40 == v38) {
                goto LABEL_53;
              }
            }
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              abort();
            }
            memcpy(v42, 0, v26);
            v42 += 2 * v23;
            ++v40;
            size_t v41 = (char *)(2 * v18);
          }
          while (v40 != v38);
          size_t v41 = (char *)(2 * v18);
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            break;
          }
LABEL_53:
          memmove(v42, v41, v26);
          v13 += v91;
          v19 += v89;
          int v39 = v93 + 1;
          if (v93 + 1 == v95) {
            goto LABEL_120;
          }
        }
      }
      else
      {
        while (v13
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v19, v13, v26);
          v13 += v91;
          v19 += v89;
          if (!--v95) {
            goto LABEL_120;
          }
        }
      }
      abort();
    }
LABEL_120:
    while (v38)
    {
      if (!v13
        && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
      memmove(v19, v13, v26);
      v13 += v18;
      v19 += v23;
      --v38;
    }
    if (!v13
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
LABEL_130:
    memmove(v19, v13, v26);
    return;
  }
  uint64_t v24 = (v14 * v15);
  if (v91 == v24 && v91 == v89)
  {
    uint64_t v59 = (v91 * v17);
    if (v13 || !v59)
    {
      if (!v59) {
        return;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    memmove(v19, v13, 2 * v59);
    return;
  }
  if (v15 && v14 && v17)
  {
    size_t v26 = 2 * v24;
    int v27 = v17 - 1;
    if (v17 != 1)
    {
      if (!v24) {
        return;
      }
      do
      {
        if (!v13
          && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          abort();
        }
        memmove(v19, v13, 2 * v24);
        v13 += v91;
        v19 += v89;
        --v27;
      }
      while (v27);
    }
    if (!v24 || v13)
    {
      if (!v24) {
        return;
      }
    }
    else if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    goto LABEL_130;
  }
}

uint64_t sub_21B94E2E4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B94E2EC(uint64_t a1, int a2)
{
  if (a2 == 6
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94E478(uint64_t a1, int a2)
{
  if (a2 == 6
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94E604(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B94E6B4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94E784())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94E800()
{
}

void sub_21B94E894(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

__int16 sub_21B94E8B8@<H0>(uint64_t a1@<X0>, uint64_t *lpsrc@<X1>)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0978, 0);
  if (v5)
  {
    long long v7 = *(_WORD **)(a1 + 72);
    if (!v7 || *(void *)(v5 + 12) != *(void *)(a1 + 12) || *((void *)v5 + 3) != *(void *)(a1 + 24))
    {
      long long v8 = *(_OWORD *)(v5 + 8);
      long long v9 = *(_OWORD *)(v5 + 24);
      long long v10 = *(_OWORD *)(v5 + 40);
      uint64_t v170 = *((void *)v5 + 7);
      long long v168 = v9;
      long long v169 = v10;
      long long v167 = v8;
      sub_21B966078((uint64_t)v171, (uint64_t)(v5 + 64));
      long long v11 = v168;
      *(_OWORD *)(a1 + 8) = v167;
      *(_OWORD *)(a1 + 24) = v11;
      *(_OWORD *)(a1 + 40) = v169;
      *(void *)(a1 + 56) = v170;
      LOWORD(v6) = v172;
      *(_OWORD *)(a1 + 88) = v172;
      *(void *)(a1 + 104) = v173;
      uint64_t v12 = *(void **)(a1 + 72);
      if (v12)
      {
        if (*(_DWORD *)(a1 + 96)) {
          BOOL v13 = *(_DWORD *)(a1 + 92) == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13 || *(_DWORD *)(a1 + 88) == 0) {
          int v15 = 0;
        }
        else {
          int v15 = *(_DWORD *)(a1 + 96);
        }
        if (v15 * (*(_DWORD *)(a1 + 108) >> 1) == -1)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
          {
            abort();
          }
          uint64_t v12 = *(void **)(a1 + 72);
          *(void *)(a1 + 64) = v171[0];
          if (!v12) {
            goto LABEL_29;
          }
        }
        else
        {
          *(void *)(a1 + 64) = v171[0];
        }
        free(v12);
      }
      else
      {
        *(void *)(a1 + 64) = v171[0];
      }
LABEL_29:
      uint64_t v26 = v171[2];
      *(void *)(a1 + 72) = v171[1];
      *(void *)(a1 + 80) = v26;
      return v6;
    }
    if (*((_DWORD *)v5 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v5 + 2))
      {
        int v28 = *((_DWORD *)v5 + 3);
        if (v28)
        {
          int v29 = *((_DWORD *)v5 + 4);
          if (v29)
          {
            int v30 = v28 - 1;
            int v31 = (_WORD *)*((void *)v5 + 9);
            uint64_t v32 = 2 * *((unsigned int *)v5 + 6);
            uint64_t v33 = 2 * *(unsigned int *)(a1 + 24);
            int v34 = v29 - 1;
            if (v34)
            {
              uint64_t v35 = *(unsigned int *)(a1 + 28);
              uint64_t v36 = *((unsigned int *)v5 + 7);
              if (v30)
              {
                int v37 = 0;
                int v38 = v31 + 1;
                int v39 = v7 + 1;
                do
                {
                  int v40 = v39;
                  size_t v41 = v38;
                  int v42 = v30;
                  do
                  {
                    *(v40 - 1) = *(v41 - 1);
                    *int v40 = *v41;
                    size_t v41 = (_WORD *)((char *)v41 + v32);
                    int v40 = (_WORD *)((char *)v40 + v33);
                    --v42;
                  }
                  while (v42);
                  *(v40 - 1) = *(v41 - 1);
                  *int v40 = *v41;
                  v31 += v36;
                  v7 += v35;
                  ++v37;
                  v38 += v36;
                  v39 += v35;
                }
                while (v37 != v34);
              }
              else
              {
                uint64_t v113 = 2 * v36;
                uint64_t v114 = 2 * v35;
                do
                {
                  *long long v7 = *v31;
                  v7[1] = v31[1];
                  int v31 = (_WORD *)((char *)v31 + v113);
                  long long v7 = (_WORD *)((char *)v7 + v114);
                  --v34;
                }
                while (v34);
              }
            }
            for (; v30; --v30)
            {
              *long long v7 = *v31;
              v7[1] = v31[1];
              int v31 = (_WORD *)((char *)v31 + v32);
              long long v7 = (_WORD *)((char *)v7 + v33);
            }
            *long long v7 = *v31;
            LOWORD(v6) = v31[1];
            v7[1] = v6;
          }
        }
      }
      return v6;
    }
    uint64_t v43 = *((unsigned int *)v5 + 6);
    uint64_t v44 = *(unsigned int *)(a1 + 24);
    uint64_t v45 = *((unsigned int *)v5 + 2);
    if (v43 != v44 || v43 != v45)
    {
      int v48 = *((_DWORD *)v5 + 3);
      int v47 = *((_DWORD *)v5 + 4);
      if (v45) {
        BOOL v49 = v48 == 0;
      }
      else {
        BOOL v49 = 1;
      }
      if (v49 || v47 == 0) {
        return v6;
      }
      int v51 = v48 - 1;
      uint64_t v52 = *((void *)v5 + 9);
      uint64_t v53 = 2 * v44;
      int v158 = v47 - 1;
      uint64_t v163 = *((unsigned int *)v5 + 2);
      int v162 = v48 - 1;
      uint64_t v154 = *((unsigned int *)v5 + 6);
      if (v47 == 1)
      {
        int v58 = *(_WORD **)(a1 + 72);
LABEL_123:
        if (v51)
        {
          uint64_t v116 = 0;
          uint64_t v117 = 2 * v154;
          unint64_t v118 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v119 = (v118 + 1) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v120 = v119;
          uint64_t v121 = v58;
          uint64_t v122 = v52;
          while (1)
          {
            if (!v52)
            {
              BOOL v123 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
              int v51 = v162;
              uint64_t v45 = v163;
              if (v123) {
                goto LABEL_151;
              }
            }
            long long v124 = v121;
            long long v125 = (__int16 *)v52;
            if (v118 < 0xF) {
              goto LABEL_167;
            }
            long long v124 = v121;
            long long v125 = (__int16 *)v52;
            if ((unint64_t)v58 + v53 * v116 - v122 - v117 * v116 < 0x20) {
              goto LABEL_167;
            }
            uint64_t v126 = 0;
            long long v124 = &v121[v120];
            long long v125 = (__int16 *)(v52 + v120 * 2);
            unint64_t v127 = (v118 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              __int16 v128 = &v121[v126];
              long long v129 = *(_OWORD *)(v52 + v126 * 2 + 16);
              _OWORD *v128 = *(_OWORD *)(v52 + v126 * 2);
              v128[1] = v129;
              v126 += 16;
              v127 -= 16;
            }
            while (v127);
            if (v118 + 1 != v119)
            {
LABEL_167:
              do
              {
                __int16 v130 = *v125++;
                *v124++ = v130;
              }
              while (v125 != (__int16 *)(v52 + 2 * v45));
            }
            v52 += v117;
            uint64_t v121 = (_WORD *)((char *)v121 + v53);
            if (++v116 == v51) {
              goto LABEL_136;
            }
          }
        }
        uint64_t v121 = v58;
LABEL_136:
        if (!v52)
        {
          BOOL v131 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          uint64_t v45 = v163;
          if (v131) {
LABEL_151:
          }
            abort();
        }
        unint64_t v132 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v132 < 0xF || (unint64_t)v121 - v52 < 0x20)
        {
          __int16 v135 = v121;
          char v136 = (__int16 *)v52;
        }
        else
        {
          unint64_t v133 = v132 + 1;
          unint64_t v134 = (v132 + 1) & 0xFFFFFFFFFFFFFFF0;
          __int16 v135 = &v121[v134];
          char v136 = (__int16 *)(v52 + 2 * v134);
          int v137 = (long long *)(v52 + 16);
          unint64_t v138 = v121 + 8;
          unint64_t v139 = v134;
          do
          {
            long long v6 = *(v137 - 1);
            long long v140 = *v137;
            *(v138 - 1) = v6;
            *unint64_t v138 = v140;
            v137 += 2;
            v138 += 2;
            v139 -= 16;
          }
          while (v139);
          if (v133 == v134) {
            return v6;
          }
        }
        do
        {
          __int16 v141 = *v136++;
          LOWORD(v6) = v141;
          *v135++ = v141;
        }
        while (v136 != (__int16 *)(v52 + 2 * v45));
        return v6;
      }
      uint64_t v161 = 0;
      unint64_t v54 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v159 = 2 * *((unsigned int *)v5 + 7);
      uint64_t v160 = 2 * *(unsigned int *)(a1 + 28);
      uint64_t v55 = 2 * v43;
      unint64_t v165 = v54 + 1;
      unint64_t v56 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v57 = v56;
      uint64_t v155 = *((void *)v5 + 9);
      uint64_t v156 = v7;
      int v58 = v7;
      while (1)
      {
        uint64_t v59 = v58;
        uint64_t v60 = v52;
        if (v51)
        {
          uint64_t v61 = 0;
          uint64_t v59 = v58;
          uint64_t v60 = v52;
          do
          {
            if (!v60)
            {
              BOOL v62 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
              int v51 = v162;
              uint64_t v45 = v163;
              if (v62) {
                goto LABEL_151;
              }
            }
            long long v63 = v59;
            int v64 = (__int16 *)v60;
            if (v54 < 0xF) {
              goto LABEL_168;
            }
            long long v63 = v59;
            int v64 = (__int16 *)v60;
            if ((unint64_t)v156 + v160 * v161 + v53 * v61 - v155 - v159 * v161 - v55 * v61 < 0x20) {
              goto LABEL_168;
            }
            uint64_t v65 = 0;
            long long v63 = &v59[v57];
            int v64 = (__int16 *)(v60 + v57 * 2);
            unint64_t v66 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v67 = &v59[v65];
              long long v68 = *(_OWORD *)(v60 + v65 * 2 + 16);
              *long long v67 = *(_OWORD *)(v60 + v65 * 2);
              v67[1] = v68;
              v65 += 16;
              v66 -= 16;
            }
            while (v66);
            if (v165 != v56)
            {
LABEL_168:
              do
              {
                __int16 v69 = *v64++;
                *v63++ = v69;
              }
              while (v64 != (__int16 *)(v60 + 2 * v45));
            }
            v60 += v55;
            uint64_t v59 = (_WORD *)((char *)v59 + v53);
          }
          while (++v61 != v51);
        }
        if (!v60)
        {
          BOOL v70 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
          int v51 = v162;
          uint64_t v45 = v163;
          if (v70) {
            goto LABEL_151;
          }
        }
        if (v54 < 0xF || (unint64_t)v59 - v60 < 0x20)
        {
          int v71 = v59;
          uint64_t v72 = (__int16 *)v60;
        }
        else
        {
          int v71 = &v59[v57];
          uint64_t v72 = (__int16 *)(v60 + v57 * 2);
          uint64_t v73 = (long long *)(v60 + 16);
          uint64_t v74 = v59 + 8;
          unint64_t v75 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *uint64_t v74 = v76;
            v73 += 2;
            v74 += 2;
            v75 -= 16;
          }
          while (v75);
          if (v165 == v56) {
            goto LABEL_58;
          }
        }
        do
        {
          __int16 v77 = *v72++;
          *v71++ = v77;
        }
        while (v72 != (__int16 *)(v60 + 2 * v45));
LABEL_58:
        v52 += v159;
        int v58 = (_WORD *)((char *)v58 + v160);
        if (++v161 == v158) {
          goto LABEL_123;
        }
      }
    }
    uint64_t v78 = *((unsigned int *)v5 + 7);
    uint64_t v79 = *(unsigned int *)(a1 + 28);
    int v80 = *((_DWORD *)v5 + 3);
    uint64_t v81 = (v80 * v43);
    if (v78 == v79 && v78 == v81)
    {
      uint64_t v82 = (*((_DWORD *)v5 + 4) * v78);
      uint64_t v83 = *((void *)v5 + 9);
      if (v82) {
        BOOL v84 = v83 == 0;
      }
      else {
        BOOL v84 = 0;
      }
      if (v84)
      {
        if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          goto LABEL_151;
        }
        long long v7 = *(_WORD **)(a1 + 72);
      }
      else if (!v82)
      {
        return v6;
      }
      unint64_t v104 = (v82 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v104 < 0xF || (unint64_t)v7 - v83 < 0x20)
      {
        unint64_t v107 = v7;
        uint64_t v108 = (__int16 *)v83;
      }
      else
      {
        unint64_t v105 = v104 + 1;
        unint64_t v106 = (v104 + 1) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v107 = &v7[v106];
        uint64_t v108 = (__int16 *)(v83 + 2 * v106);
        char v109 = (long long *)(v83 + 16);
        uint64_t v110 = v7 + 8;
        unint64_t v111 = v106;
        do
        {
          long long v6 = *(v109 - 1);
          long long v112 = *v109;
          *(v110 - 1) = v6;
          *uint64_t v110 = v112;
          v109 += 2;
          v110 += 2;
          v111 -= 16;
        }
        while (v111);
        if (v105 == v106) {
          return v6;
        }
      }
      do
      {
        __int16 v115 = *v108++;
        LOWORD(v6) = v115;
        *v107++ = v115;
      }
      while (v108 != (__int16 *)(v83 + 2 * v82));
      return v6;
    }
    if (v43)
    {
      if (v80)
      {
        int v85 = *((_DWORD *)v5 + 4);
        if (v85)
        {
          uint64_t v86 = *((void *)v5 + 9);
          int v87 = v85 - 1;
          uint64_t v164 = v81;
          if (v85 == 1)
          {
            uint64_t v88 = *(void *)(a1 + 72);
            uint64_t v95 = *((void *)v5 + 9);
          }
          else
          {
            if (!v81) {
              return v6;
            }
            uint64_t v88 = *(void *)(a1 + 72);
            uint64_t v89 = 0;
            uint64_t v90 = 2 * v79;
            uint64_t v91 = 2 * v78;
            unint64_t v92 = (v81 - 1) & 0x7FFFFFFFFFFFFFFFLL;
            unint64_t v93 = (v92 + 1) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v94 = 2 * v93;
            int v157 = v7;
            uint64_t v95 = *((void *)v5 + 9);
            do
            {
              if (!v95)
              {
                BOOL v96 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
                uint64_t v81 = v164;
                if (v96) {
                  goto LABEL_151;
                }
              }
              long long v97 = (_WORD *)v88;
              long long v98 = (__int16 *)v95;
              if (v92 < 0xF) {
                goto LABEL_169;
              }
              long long v97 = (_WORD *)v88;
              long long v98 = (__int16 *)v95;
              if ((unint64_t)v157 + v90 * v89 - v86 - v91 * v89 < 0x20) {
                goto LABEL_169;
              }
              uint64_t v99 = 0;
              long long v97 = (_WORD *)(v88 + v94);
              long long v98 = (__int16 *)(v95 + v94);
              unint64_t v100 = (v92 + 1) & 0xFFFFFFFFFFFFFFF0;
              do
              {
                unint64_t v101 = (_OWORD *)(v88 + v99);
                long long v6 = *(_OWORD *)(v95 + v99);
                long long v102 = *(_OWORD *)(v95 + v99 + 16);
                *unint64_t v101 = v6;
                v101[1] = v102;
                v99 += 32;
                v100 -= 16;
              }
              while (v100);
              if (v92 + 1 != v93)
              {
LABEL_169:
                do
                {
                  __int16 v103 = *v98++;
                  LOWORD(v6) = v103;
                  *v97++ = v103;
                }
                while (v98 != (__int16 *)(v95 + 2 * v81));
              }
              v95 += v91;
              v88 += v90;
              ++v89;
            }
            while (v89 != v87);
          }
          if (!v81 || v95)
          {
            if (!v81) {
              return v6;
            }
          }
          else
          {
            BOOL v142 = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4);
            uint64_t v81 = v164;
            if (v142) {
              goto LABEL_151;
            }
          }
          unint64_t v143 = (v81 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v143 < 0xF || (unint64_t)(v88 - v95) < 0x20)
          {
            std::string v146 = (_WORD *)v88;
            unint64_t v147 = (__int16 *)v95;
          }
          else
          {
            unint64_t v144 = v143 + 1;
            unint64_t v145 = (v143 + 1) & 0xFFFFFFFFFFFFFFF0;
            std::string v146 = (_WORD *)(v88 + 2 * v145);
            unint64_t v147 = (__int16 *)(v95 + 2 * v145);
            unint64_t v148 = (long long *)(v95 + 16);
            std::string v149 = (_OWORD *)(v88 + 16);
            unint64_t v150 = v145;
            do
            {
              long long v6 = *(v148 - 1);
              long long v151 = *v148;
              *(v149 - 1) = v6;
              _OWORD *v149 = v151;
              v148 += 2;
              v149 += 2;
              v150 -= 16;
            }
            while (v150);
            if (v144 == v145) {
              return v6;
            }
          }
          do
          {
            __int16 v152 = *v147++;
            LOWORD(v6) = v152;
            *v146++ = v152;
          }
          while (v147 != (__int16 *)(v95 + 2 * v81));
        }
      }
    }
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v174, lpsrc, 7);
    long long v17 = *(_OWORD *)(v174 + 16);
    long long v16 = *(_OWORD *)(v174 + 32);
    long long v167 = *(_OWORD *)v174;
    long long v168 = v17;
    long long v169 = v16;
    *(void *)&long long v174 = 0;
    MEMORY[0x21D495F30]();
    uint64_t v18 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v19 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v19 = 1;
    }
    unint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 40);
    if (v19) {
      unint64_t v20 = 0;
    }
    *(void *)((char *)&v174 + 4) = v20;
    unint64_t v22 = v20;
    LODWORD(v174) = 2;
    uint64_t v23 = v174;
    unint64_t v24 = HIDWORD(v20);
    LODWORD(v174) = 1;
    *(void *)((char *)&v174 + 4) = v21;
    uint64_t v25 = v174;
    if (HIDWORD(v21) * HIDWORD(v20) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v174 = v18;
    *((void *)&v174 + 1) = v23;
    int v175 = v24;
    uint64_t v176 = v25;
    int v177 = HIDWORD(v21);
    unint64_t v178 = v22;
    uint64_t v179 = v21;
    v166[0] = (uint64_t)&v167;
    v166[1] = (uint64_t)&v174;
    LOWORD(v6) = sub_21B896778(v166);
  }
  return v6;
}

void sub_21B94F450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,int a34,int a35,int a36,int a37,unsigned int a38)
{
  int v39 = a31;
  if (a31)
  {
    int v40 = a35;
    if (a35) {
      BOOL v41 = a34 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41 || a33 == 0) {
      int v40 = 0;
    }
    if (v40 * (a38 >> 1) == -1)
    {
      if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
      {
        abort();
      }
      int v39 = a31;
    }
    free(v39);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21B94F4E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21B83DE50(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21B94F4FC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B94F504(uint64_t a1, int a2)
{
  if (a2 == 7
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B94F690(uint64_t a1, int a2)
{
  if (a2 == 7
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B94F81C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B94F850(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B94F8A4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B94F920()
{
}

void sub_21B94F9B4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B94F9D8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CB9E3F0, 0);
  if (v5)
  {
    long long v6 = *(_DWORD **)(a1 + 72);
    if (!v6 || *(void *)(v5 + 12) != *(void *)(a1 + 12) || *((void *)v5 + 3) != *(void *)(a1 + 24))
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      long long v8 = *(_OWORD *)(v5 + 24);
      long long v9 = *(_OWORD *)(v5 + 40);
      uint64_t v76 = *((void *)v5 + 7);
      long long v74 = v8;
      long long v75 = v9;
      long long v73 = v7;
      sub_21B9664A8((uint64_t)v77, (uint64_t)(v5 + 64));
      long long v10 = v74;
      *(_OWORD *)(a1 + 8) = v73;
      *(_OWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 40) = v75;
      *(void *)(a1 + 56) = v76;
      *(_OWORD *)(a1 + 88) = v78;
      *(void *)(a1 + 104) = v79;
      *(void *)(a1 + 64) = v77[0];
      long long v11 = *(void **)(a1 + 72);
      if (v11) {
        free(v11);
      }
      uint64_t v12 = v77[2];
      *(void *)(a1 + 72) = v77[1];
      *(void *)(a1 + 80) = v12;
      return;
    }
    if (*((_DWORD *)v5 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v5 + 2)) {
        return;
      }
      int v24 = *((_DWORD *)v5 + 3);
      if (!v24) {
        return;
      }
      int v25 = *((_DWORD *)v5 + 4);
      if (!v25) {
        return;
      }
      int v26 = v24 - 1;
      uint64_t v27 = *((unsigned int *)v5 + 6);
      uint64_t v28 = *(unsigned int *)(a1 + 24);
      int v29 = (_DWORD *)*((void *)v5 + 9);
      int v30 = v25 - 1;
      if (v30)
      {
        uint64_t v31 = *(unsigned int *)(a1 + 28);
        uint64_t v32 = *((unsigned int *)v5 + 7);
        if (!v26)
        {
          do
          {
            *long long v6 = *v29;
            v6[1] = v29[1];
            v29 += v32;
            v6 += v31;
            --v30;
          }
          while (v30);
LABEL_73:
          *long long v6 = *v29;
          v6[1] = v29[1];
          return;
        }
        int v33 = 0;
        int v34 = v29 + 1;
        uint64_t v35 = v6 + 1;
        do
        {
          uint64_t v36 = v35;
          int v37 = v34;
          int v38 = v26;
          do
          {
            *(v36 - 1) = *(v37 - 1);
            *uint64_t v36 = *v37;
            v37 += v27;
            v36 += v28;
            --v38;
          }
          while (v38);
          *(v36 - 1) = *(v37 - 1);
          *uint64_t v36 = *v37;
          v29 += v32;
          v6 += v31;
          ++v33;
          v34 += v32;
          v35 += v31;
        }
        while (v33 != v30);
      }
      for (; v26; --v26)
      {
        *long long v6 = *v29;
        v6[1] = v29[1];
        v29 += v27;
        v6 += v28;
      }
      goto LABEL_73;
    }
    uint64_t v39 = *((unsigned int *)v5 + 6);
    uint64_t v40 = *(unsigned int *)(a1 + 24);
    uint64_t v41 = *((unsigned int *)v5 + 2);
    if (v39 == v40 && v39 == v41)
    {
      uint64_t v52 = *((unsigned int *)v5 + 7);
      uint64_t v53 = *(unsigned int *)(a1 + 28);
      int v54 = *((_DWORD *)v5 + 3);
      uint64_t v55 = (v54 * v39);
      if (v52 == v53 && v52 == v55)
      {
        uint64_t v56 = (*((_DWORD *)v5 + 4) * v52);
        uint64_t v57 = (const void *)*((void *)v5 + 9);
        if (v56) {
          BOOL v58 = v57 == 0;
        }
        else {
          BOOL v58 = 0;
        }
        if (v58)
        {
          if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            goto LABEL_88;
          }
          long long v6 = *(_DWORD **)(a1 + 72);
        }
        else if (!v56)
        {
          return;
        }
        size_t v63 = 4 * v56;
        int v64 = v6;
        uint64_t v65 = v57;
        goto LABEL_92;
      }
      if (!v39) {
        return;
      }
      if (!v54) {
        return;
      }
      int v59 = *((_DWORD *)v5 + 4);
      if (!v59) {
        return;
      }
      int v46 = (char *)*((void *)v5 + 9);
      size_t v47 = 4 * v55;
      int v60 = v59 - 1;
      if (v59 != 1)
      {
        if (!v55) {
          return;
        }
        uint64_t v61 = 4 * v52;
        uint64_t v62 = 4 * v53;
        while (v46
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v46, 4 * v55);
          v46 += v61;
          long long v6 = (_DWORD *)((char *)v6 + v62);
          if (!--v60) {
            goto LABEL_74;
          }
        }
LABEL_88:
        abort();
      }
LABEL_74:
      if (!v55 || v46)
      {
        if (!v55) {
          return;
        }
LABEL_91:
        int v64 = v6;
        uint64_t v65 = v46;
        size_t v63 = v47;
LABEL_92:
        memmove(v64, v65, v63);
        return;
      }
    }
    else
    {
      if (!v41) {
        return;
      }
      int v43 = *((_DWORD *)v5 + 3);
      if (!v43) {
        return;
      }
      int v44 = *((_DWORD *)v5 + 4);
      if (!v44) {
        return;
      }
      int v45 = v43 - 1;
      int v46 = (char *)*((void *)v5 + 9);
      size_t v47 = 4 * v41;
      int v71 = v44 - 1;
      if (v44 != 1)
      {
        if (v43 == 1)
        {
          uint64_t v66 = 4 * *((unsigned int *)v5 + 7);
          uint64_t v67 = 4 * *(unsigned int *)(a1 + 28);
          while (v46
               || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
          {
            memmove(v6, v46, v47);
            v46 += v66;
            long long v6 = (_DWORD *)((char *)v6 + v67);
            if (!--v71) {
              goto LABEL_83;
            }
          }
        }
        else
        {
          int v48 = 0;
          uint64_t v68 = *((unsigned int *)v5 + 7);
          uint64_t v69 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            int v70 = v48;
            int v49 = 0;
            int v50 = v46;
            int v51 = (char *)v6;
            do
            {
              while (v50)
              {
                memmove(v51, v50, v47);
                v50 += 4 * v39;
                v51 += 4 * v40;
                if (++v49 == v45) {
                  goto LABEL_43;
                }
              }
              if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
              {
                goto LABEL_88;
              }
              memcpy(v51, 0, v47);
              v51 += 4 * v40;
              ++v49;
              int v50 = (char *)(4 * v39);
            }
            while (v49 != v45);
            int v50 = (char *)(4 * v39);
            if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
            {
              break;
            }
LABEL_43:
            memmove(v51, v50, v47);
            v46 += 4 * v68;
            v6 += v69;
            int v48 = v70 + 1;
            if (v70 + 1 == v71) {
              goto LABEL_83;
            }
          }
        }
        goto LABEL_88;
      }
LABEL_83:
      if (v45)
      {
        while (v46
             || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
        {
          memmove(v6, v46, v47);
          v46 += 4 * v39;
          v6 += v40;
          if (!--v45) {
            goto LABEL_89;
          }
        }
        goto LABEL_88;
      }
LABEL_89:
      if (v46) {
        goto LABEL_91;
      }
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
    {
      goto LABEL_88;
    }
    goto LABEL_91;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v80, lpsrc, 8);
  long long v14 = *(_OWORD *)(v80 + 16);
  long long v13 = *(_OWORD *)(v80 + 32);
  long long v73 = *(_OWORD *)v80;
  long long v74 = v14;
  long long v75 = v13;
  *(void *)&long long v80 = 0;
  MEMORY[0x21D495F30]();
  uint64_t v15 = *(void *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v16 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  unint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  if (v16) {
    unint64_t v17 = 0;
  }
  *(void *)((char *)&v80 + 4) = v17;
  unint64_t v19 = v17;
  LODWORD(v80) = 2;
  uint64_t v20 = v80;
  unint64_t v21 = HIDWORD(v17);
  LODWORD(v80) = 1;
  *(void *)((char *)&v80 + 4) = v18;
  uint64_t v22 = v80;
  if (HIDWORD(v18) * HIDWORD(v17) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  *(void *)&long long v80 = v15;
  *((void *)&v80 + 1) = v20;
  int v81 = v21;
  uint64_t v82 = v22;
  int v83 = HIDWORD(v18);
  unint64_t v84 = v19;
  uint64_t v85 = v18;
  v72[0] = (uint64_t)&v73;
  v72[1] = (uint64_t)&v80;
  sub_21B89861C(v72);
}

uint64_t sub_21B9501E4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B9501EC(uint64_t a1, int a2)
{
  if (a2 == 8
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B950378(uint64_t a1, int a2)
{
  if (a2 == 8
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B950504(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B950538(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95058C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B950608()
{
}

void sub_21B95069C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9506C0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0990, 0);
  if (v5)
  {
    return sub_21B96DBD4(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 9);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x21D495F30]();
    long long v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_21B8934C4(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      unint64_t v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *long long v9 = *v21;
            v9[1] = v21[1];
            v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          int v26 = (unsigned char *)(v29 + 2);
          do
          {
            uint64_t v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *long long v9 = *v21;
      v9[1] = v21[1];
      v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_21B950A1C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B950A24(uint64_t a1, int a2)
{
  if (a2 == 9
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B950BB0(uint64_t a1, int a2)
{
  if (a2 == 9
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B950D3C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B950D70(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B950DC4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B950E40()
{
}

void sub_21B950ED4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B950EF8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA09A8, 0);
  if (v5)
  {
    return sub_21B96E1C4(a1 + 8, v5 + 2);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 10);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x21D495F30]();
  long long v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_21B894E9C(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    unint64_t v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v9 = *v21;
          v9[1] = v21[1];
          v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        int v26 = (_WORD *)result;
        uint64_t v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        long long v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B951274(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95127C(uint64_t a1, int a2)
{
  if (a2 == 10
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B951408(uint64_t a1, int a2)
{
  if (a2 == 10
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B951594(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 64);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_21B951644(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B9516F4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B9517C4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B951840()
{
}

void sub_21B9518D4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B9518F8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA09C0, 0);
  if (v5)
  {
    sub_21B96E814(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 11);
    uint64_t v7 = v22;
    long long v8 = *(_OWORD *)(v22 + 16);
    v21[0] = *(_OWORD *)v22;
    v21[1] = v8;
    v21[2] = *(_OWORD *)(v22 + 32);
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v9, v10, v11, v12);
    uint64_t v13 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v14 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    unint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    if (v14) {
      unint64_t v15 = 0;
    }
    LODWORD(v22) = 3;
    *(void *)((char *)&v22 + 4) = v15;
    unint64_t v17 = v15;
    uint64_t v18 = v22;
    unint64_t v19 = HIDWORD(v15);
    LODWORD(v22) = 1;
    *(void *)((char *)&v22 + 4) = v16;
    uint64_t v20 = v22;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v22 = v13;
    *((void *)&v22 + 1) = v18;
    int v23 = v19;
    uint64_t v24 = v20;
    int v25 = HIDWORD(v16);
    unint64_t v26 = v17;
    uint64_t v27 = v16;
    *(void *)&double result = sub_21B96F264((uint64_t)v21, (uint64_t)&v22);
  }
  return result;
}

uint64_t sub_21B951B18(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B951B20(uint64_t a1, int a2)
{
  if (a2 == 11
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B951CAC(uint64_t a1, int a2)
{
  if (a2 == 11
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B951E38(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B951E6C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B951EC0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B951F3C()
{
}

void sub_21B951FD0(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B951FF4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA09D8, 0);
  if (v5)
  {
    sub_21B96FB70(a1 + 8, v5 + 2);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 12);
  long long v7 = *(_OWORD *)(v33 + 16);
  long long v30 = *(_OWORD *)v33;
  long long v31 = v7;
  long long v32 = *(_OWORD *)(v33 + 32);
  *(void *)&long long v33 = 0;
  MEMORY[0x21D495F30]();
  long long v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v9 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  if (v9) {
    unint64_t v10 = 0;
  }
  LODWORD(v33) = 3;
  *(void *)((char *)&v33 + 4) = v10;
  unint64_t v12 = v10;
  uint64_t v13 = v33;
  unint64_t v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(void *)((char *)&v33 + 4) = v11;
  unint64_t v15 = v33;
  unint64_t v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v13;
  int v34 = v14;
  unint64_t v35 = v15;
  int v36 = HIDWORD(v11);
  unint64_t v37 = v12;
  unint64_t v38 = v11;
  if (v15 == 1 && DWORD1(v31) == 1)
  {
    sub_21B9701C0(&v30, (char **)&v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v17 = HIDWORD(v15);
    int v18 = HIDWORD(v30) - 1;
    uint64_t v19 = DWORD2(v31);
    uint64_t v20 = (float *)v30;
    int v21 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_29:
        *long long v8 = *v20;
        v8[1] = v20[1];
        float result = v20[2];
        v8[2] = result;
        return result;
      }
      int v23 = 0;
      uint64_t v24 = v8 + 2;
      int v25 = (_DWORD *)(v30 + 8);
      do
      {
        unint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      uint64_t v29 = 4 * v17;
      do
      {
        *long long v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        long long v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B952368(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B952370(uint64_t a1, int a2)
{
  if (a2 == 12
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B9524FC(uint64_t a1, int a2)
{
  if (a2 == 12
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B952688(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B9526BC(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B952710())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95278C()
{
}

void sub_21B952820(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B952844(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA09F0, 0);
  if (v5)
  {
    sub_21B970698(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 13);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B8934C4(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        uint64_t v22 = &v21;
        sub_21B893EEC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B952AB8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B952AC0(uint64_t a1, int a2)
{
  if (a2 == 13
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B952C4C(uint64_t a1, int a2)
{
  if (a2 == 13
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B952DD8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B952E0C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B952E60())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B952EDC()
{
}

void sub_21B952F70(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B952F94(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A08, 0);
  if (v5)
  {
    sub_21B970CB0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 14);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B894E9C(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        uint64_t v22 = &v21;
        sub_21B8957AC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B953208(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B953210(uint64_t a1, int a2)
{
  if (a2 == 14
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95339C(uint64_t a1, int a2)
{
  if (a2 == 14
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B953528(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 64);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_21B9535D8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B953688(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B953758())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B9537D4()
{
}

void sub_21B953868(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B95388C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A20, 0);
  if (v5)
  {
    sub_21B971328(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 15);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    _OWORD v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_21B897400(v23);
  }
  return result;
}

uint64_t sub_21B953AB4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B953ABC(uint64_t a1, int a2)
{
  if (a2 == 15
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B953C48(uint64_t a1, int a2)
{
  if (a2 == 15
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B953DD4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B953E08(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B953E5C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B953ED8()
{
}

void sub_21B953F6C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B953F90(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A38, 0);
  if (v5)
  {
    sub_21B971DA0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 16);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_21B898758(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_21B898FA4((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_21B954204(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95420C(uint64_t a1, int a2)
{
  if (a2 == 16
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B954398(uint64_t a1, int a2)
{
  if (a2 == 16
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B954524(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B954558(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B9545AC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B954628()
{
}

void sub_21B9546BC(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9546E0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A50, 0);
  if (v5)
  {
    return sub_21B96DBD4(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 17);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x21D495F30]();
    long long v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_21B8934C4(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      uint64_t v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *long long v9 = *v21;
            v9[1] = v21[1];
            v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          uint64_t v26 = (unsigned char *)(v29 + 2);
          do
          {
            int v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *long long v9 = *v21;
      v9[1] = v21[1];
      v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_21B954A3C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B954A44(uint64_t a1, int a2)
{
  if (a2 == 17
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B954BD0(uint64_t a1, int a2)
{
  if (a2 == 17
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B954D5C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B954D90(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B954DE4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B954E60()
{
}

void sub_21B954EF4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B954F18(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A68, 0);
  if (v5)
  {
    return sub_21B96E1C4(a1 + 8, v5 + 2);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 18);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x21D495F30]();
  long long v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_21B894E9C(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    uint64_t v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v9 = *v21;
          v9[1] = v21[1];
          v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        uint64_t v26 = (_WORD *)result;
        int v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *long long v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        long long v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B955294(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95529C(uint64_t a1, int a2)
{
  if (a2 == 18
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B955428(uint64_t a1, int a2)
{
  if (a2 == 18
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B9555B4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B955664(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B955734())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B9557B0()
{
}

void sub_21B955844(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B955868(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A80, 0);
  if (v5)
  {
    sub_21B96E814(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 19);
    uint64_t v7 = v22;
    long long v8 = *(_OWORD *)(v22 + 16);
    v21[0] = *(_OWORD *)v22;
    v21[1] = v8;
    uint64_t v21[2] = *(_OWORD *)(v22 + 32);
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v9, v10, v11, v12);
    uint64_t v13 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v14 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    unint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    if (v14) {
      unint64_t v15 = 0;
    }
    LODWORD(v22) = 3;
    *(void *)((char *)&v22 + 4) = v15;
    unint64_t v17 = v15;
    uint64_t v18 = v22;
    unint64_t v19 = HIDWORD(v15);
    LODWORD(v22) = 1;
    *(void *)((char *)&v22 + 4) = v16;
    uint64_t v20 = v22;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v22 = v13;
    *((void *)&v22 + 1) = v18;
    int v23 = v19;
    uint64_t v24 = v20;
    int v25 = HIDWORD(v16);
    unint64_t v26 = v17;
    uint64_t v27 = v16;
    *(void *)&double result = sub_21B96F264((uint64_t)v21, (uint64_t)&v22);
  }
  return result;
}

uint64_t sub_21B955A88(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B955A90(uint64_t a1, int a2)
{
  if (a2 == 19
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B955C1C(uint64_t a1, int a2)
{
  if (a2 == 19
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B955DA8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B955DDC(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B955E30())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B955EAC()
{
}

void sub_21B955F40(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B955F64(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0A98, 0);
  if (v5)
  {
    sub_21B96FB70(a1 + 8, v5 + 2);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 20);
  long long v7 = *(_OWORD *)(v33 + 16);
  long long v30 = *(_OWORD *)v33;
  long long v31 = v7;
  long long v32 = *(_OWORD *)(v33 + 32);
  *(void *)&long long v33 = 0;
  MEMORY[0x21D495F30]();
  long long v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v9 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  if (v9) {
    unint64_t v10 = 0;
  }
  LODWORD(v33) = 3;
  *(void *)((char *)&v33 + 4) = v10;
  unint64_t v12 = v10;
  uint64_t v13 = v33;
  unint64_t v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(void *)((char *)&v33 + 4) = v11;
  unint64_t v15 = v33;
  unint64_t v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v13;
  int v34 = v14;
  unint64_t v35 = v15;
  int v36 = HIDWORD(v11);
  unint64_t v37 = v12;
  unint64_t v38 = v11;
  if (v15 == 1 && DWORD1(v31) == 1)
  {
    sub_21B9701C0(&v30, (char **)&v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v17 = HIDWORD(v15);
    int v18 = HIDWORD(v30) - 1;
    uint64_t v19 = DWORD2(v31);
    uint64_t v20 = (float *)v30;
    int v21 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_29:
        *long long v8 = *v20;
        v8[1] = v20[1];
        float result = v20[2];
        v8[2] = result;
        return result;
      }
      int v23 = 0;
      uint64_t v24 = v8 + 2;
      int v25 = (_DWORD *)(v30 + 8);
      do
      {
        unint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      uint64_t v29 = 4 * v17;
      do
      {
        *long long v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        long long v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B9562D8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B9562E0(uint64_t a1, int a2)
{
  if (a2 == 20
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95646C(uint64_t a1, int a2)
{
  if (a2 == 20
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B9565F8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95662C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B956680())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B9566FC()
{
}

void sub_21B956790(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B9567B4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0AB0, 0);
  if (v5)
  {
    return sub_21B96DBD4(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 21);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x21D495F30]();
    BOOL v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_21B8934C4(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      int v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *BOOL v9 = *v21;
            v9[1] = v21[1];
            v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          unint64_t v26 = (unsigned char *)(v29 + 2);
          do
          {
            uint64_t v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *BOOL v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *BOOL v9 = *v21;
      v9[1] = v21[1];
      v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_21B956B10(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B956B18(uint64_t a1, int a2)
{
  if (a2 == 21
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B956CA4(uint64_t a1, int a2)
{
  if (a2 == 21
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B956E30(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B956E64(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B956EB8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B956F34()
{
}

void sub_21B956FC8(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_21B956FEC(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0AC8, 0);
  if (v5)
  {
    return sub_21B96E1C4(a1 + 8, v5 + 2);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 22);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x21D495F30]();
  BOOL v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_21B894E9C(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    int v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *BOOL v9 = *v21;
          v9[1] = v21[1];
          v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *BOOL v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        unint64_t v26 = (_WORD *)result;
        uint64_t v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *BOOL v9 = *v21;
        v9[1] = v21[1];
        v9[2] = v21[2];
        v21 += v20;
        BOOL v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B957368(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B957370(uint64_t a1, int a2)
{
  if (a2 == 22
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B9574FC(uint64_t a1, int a2)
{
  if (a2 == 22
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B957688(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B957738(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B957808())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B957884()
{
}

void sub_21B957918(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B95793C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0AE0, 0);
  if (v5)
  {
    sub_21B96E814(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 23);
    uint64_t v7 = v22;
    long long v8 = *(_OWORD *)(v22 + 16);
    v21[0] = *(_OWORD *)v22;
    v21[1] = v8;
    uint64_t v21[2] = *(_OWORD *)(v22 + 32);
    *(void *)&long long v22 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v9, v10, v11, v12);
    uint64_t v13 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v14 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    unint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    if (v14) {
      unint64_t v15 = 0;
    }
    LODWORD(v22) = 3;
    *(void *)((char *)&v22 + 4) = v15;
    unint64_t v17 = v15;
    uint64_t v18 = v22;
    unint64_t v19 = HIDWORD(v15);
    LODWORD(v22) = 1;
    *(void *)((char *)&v22 + 4) = v16;
    uint64_t v20 = v22;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v22 = v13;
    *((void *)&v22 + 1) = v18;
    int v23 = v19;
    uint64_t v24 = v20;
    int v25 = HIDWORD(v16);
    unint64_t v26 = v17;
    uint64_t v27 = v16;
    *(void *)&double result = sub_21B96F264((uint64_t)v21, (uint64_t)&v22);
  }
  return result;
}

uint64_t sub_21B957B5C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B957B64(uint64_t a1, int a2)
{
  if (a2 == 23
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B957CF0(uint64_t a1, int a2)
{
  if (a2 == 23
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B957E7C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B957EB0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B957F04())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B957F80()
{
}

void sub_21B958014(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B958038(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0AF8, 0);
  if (v5)
  {
    sub_21B96FB70(a1 + 8, v5 + 2);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 24);
  long long v7 = *(_OWORD *)(v33 + 16);
  long long v30 = *(_OWORD *)v33;
  long long v31 = v7;
  long long v32 = *(_OWORD *)(v33 + 32);
  *(void *)&long long v33 = 0;
  MEMORY[0x21D495F30]();
  long long v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v9 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  if (v9) {
    unint64_t v10 = 0;
  }
  LODWORD(v33) = 3;
  *(void *)((char *)&v33 + 4) = v10;
  unint64_t v12 = v10;
  uint64_t v13 = v33;
  unint64_t v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(void *)((char *)&v33 + 4) = v11;
  unint64_t v15 = v33;
  unint64_t v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
  {
    abort();
  }
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v13;
  int v34 = v14;
  unint64_t v35 = v15;
  int v36 = HIDWORD(v11);
  unint64_t v37 = v12;
  unint64_t v38 = v11;
  if (v15 == 1 && DWORD1(v31) == 1)
  {
    sub_21B9701C0(&v30, (char **)&v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v17 = HIDWORD(v15);
    int v18 = HIDWORD(v30) - 1;
    uint64_t v19 = DWORD2(v31);
    uint64_t v20 = (float *)v30;
    int v21 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *long long v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_29:
        *long long v8 = *v20;
        v8[1] = v20[1];
        float result = v20[2];
        v8[2] = result;
        return result;
      }
      int v23 = 0;
      uint64_t v24 = v8 + 2;
      int v25 = (_DWORD *)(v30 + 8);
      do
      {
        unint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      uint64_t v29 = 4 * v17;
      do
      {
        *long long v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        long long v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_21B9583AC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B9583B4(uint64_t a1, int a2)
{
  if (a2 == 24
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B958540(uint64_t a1, int a2)
{
  if (a2 == 24
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B9586CC(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B958700(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B958754())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B9587D0()
{
}

void sub_21B958864(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B958888(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B10, 0);
  if (v5)
  {
    sub_21B970698(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 25);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B8934C4(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        uint64_t v22 = &v21;
        sub_21B893EEC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B958AFC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B958B04(uint64_t a1, int a2)
{
  if (a2 == 25
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B958C90(uint64_t a1, int a2)
{
  if (a2 == 25
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B958E1C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B958E50(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B958EA4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B958F20()
{
}

void sub_21B958FB4(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B958FD8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B28, 0);
  if (v5)
  {
    sub_21B970CB0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 26);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B894E9C(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        uint64_t v22 = &v21;
        sub_21B8957AC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B95924C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B959254(uint64_t a1, int a2)
{
  if (a2 == 26
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B9593E0(uint64_t a1, int a2)
{
  if (a2 == 26
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95956C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95961C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B9596EC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B959768()
{
}

void sub_21B9597FC(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B959820(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B40, 0);
  if (v5)
  {
    sub_21B971328(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 27);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    _OWORD v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_21B897400(v23);
  }
  return result;
}

uint64_t sub_21B959A48(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B959A50(uint64_t a1, int a2)
{
  if (a2 == 27
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B959BDC(uint64_t a1, int a2)
{
  if (a2 == 27
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B959D68(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B959D9C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B959DF0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B959E6C()
{
}

void sub_21B959F00(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B959F24(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B58, 0);
  if (v5)
  {
    sub_21B971DA0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 28);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_21B898758(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_21B898FA4((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_21B95A198(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95A1A0(uint64_t a1, int a2)
{
  if (a2 == 28
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95A32C(uint64_t a1, int a2)
{
  if (a2 == 28
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95A4B8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95A4EC(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95A540())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95A5BC()
{
}

void sub_21B95A650(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B95A674(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B70, 0);
  if (v5)
  {
    sub_21B970698(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 29);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B8934C4(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_21B893EEC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B95A8E8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95A8F0(uint64_t a1, int a2)
{
  if (a2 == 29
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95AA7C(uint64_t a1, int a2)
{
  if (a2 == 29
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95AC08(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95AC3C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95AC90())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95AD0C()
{
}

void sub_21B95ADA0(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B95ADC4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0B88, 0);
  if (v5)
  {
    sub_21B970CB0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 30);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B894E9C(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_21B8957AC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B95B038(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95B040(uint64_t a1, int a2)
{
  if (a2 == 30
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95B1CC(uint64_t a1, int a2)
{
  if (a2 == 30
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95B358(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95B408(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    long long v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95B4D8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95B554()
{
}

void sub_21B95B5E8(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_21B95B60C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  int v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0BA0, 0);
  if (v5)
  {
    sub_21B971328(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 31);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    _OWORD v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_21B897400(v23);
  }
  return result;
}

uint64_t sub_21B95B834(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95B83C(uint64_t a1, int a2)
{
  if (a2 == 31
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95B9C8(uint64_t a1, int a2)
{
  if (a2 == 31
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95BB54(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95BB88(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95BBDC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95BC58()
{
}

void sub_21B95BCEC(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_21B95BD10(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0BB8, 0);
  if (v5)
  {
    sub_21B971DA0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 32);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x21D495F30](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_21B898758(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_21B898FA4((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_21B95BF84(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95BF8C(uint64_t a1, int a2)
{
  if (a2 == 32
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95C118(uint64_t a1, int a2)
{
  if (a2 == 32
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95C2A4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95C2D8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95C32C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95C3A8()
{
}

void sub_21B95C43C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B95C460(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0BD0, 0);
  if (v5)
  {
    sub_21B970698(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 33);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B8934C4(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_21B893EEC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B95C6D4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95C6DC(uint64_t a1, int a2)
{
  if (a2 == 33
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95C868(uint64_t a1, int a2)
{
  if (a2 == 33
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_21B95C9F4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_21B95CA28(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x21D495F30);
}

uint64_t (***sub_21B95CA7C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C5F8B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267C5F8B8))
  {
    return off_26AD08F40;
  }
  __cxa_atexit((void (*)(void *))nullsub_123, off_26AD08F40, &dword_21B831000);
  __cxa_guard_release(&qword_267C5F8B8);
  return off_26AD08F40;
}

void sub_21B95CAF8()
{
}

void sub_21B95CB8C(_Unwind_Exception *a1)
{
  MEMORY[0x21D495F30](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_21B95CBB0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26CBA1760, (const struct __class_type_info *)&unk_26CBA0BE8, 0);
  if (v5)
  {
    sub_21B970CB0(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 34);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x21D495F30](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_21B894E9C(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_21B8957AC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_21B95CE24(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_21B95CE2C(uint64_t a1, int a2)
{
  if (a2 == 34
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}

void sub_21B95CFB8(uint64_t a1, int a2)
{
  if (a2 == 34
    || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_21B997215, 0, (void (*)(void **))sub_21B984AC4))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_21B9845F0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21B984AC4))
    {
      operator new();
    }
  }
  abort();
}