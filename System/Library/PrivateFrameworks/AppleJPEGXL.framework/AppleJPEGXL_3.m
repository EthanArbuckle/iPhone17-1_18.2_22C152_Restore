void sub_2484A47C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  void *v11;

  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484A47F0(uint64_t a1)
{
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float sub_2484A48B8(float *a1, float *a2, int *a3)
{
  float v3 = 0.0;
  float v4 = 0.0;
  if ((unint64_t)((char *)a2 - (char *)a1) >= 9) {
    float v4 = (float)((float)(a1[2] + (float)((float)(a1[1] + (float)(*a1 + (float)*a3)) + (float)a3[1])) + (float)a3[2])
  }
       * 0.40333;
  float v5 = 0.0;
  if (a2 != a1)
  {
    unint64_t v6 = 0;
    unint64_t v7 = a2 - a1;
    float v8 = 0.0;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    float v9 = 0.0;
    float v10 = 0.0;
    do
    {
      float v11 = a1[v6];
      int v12 = a3[v6];
      float v13 = (float)v12;
      if (v6 == 1) {
        float v14 = 5.0;
      }
      else {
        float v14 = 2.0;
      }
      if (!v6) {
        float v14 = 3.0;
      }
      if (v6 <= 2 && (float)(v11 + v13) >= v4)
      {
        float v14 = v14 + flt_248550D58[v6];
        if (v6 == 2 && v4 * 1.22 > (float)(a1[2] + (float)a3[2])) {
          float v14 = v14 + -0.5;
        }
      }
      float v8 = v8 + (float)((float)((float)((float)(v11 - v13) * (float)(v11 - v13)) * v14) * v14);
      if (v6 == 1) {
        int v15 = 5;
      }
      else {
        int v15 = 1;
      }
      if (!v6) {
        int v15 = 3;
      }
      float v10 = v10 + (float)(v11 * (float)v15);
      float v9 = v9 + (float)(v12 * v15);
      ++v6;
    }
    while (v7 != v6);
    float v3 = v8 * 4.0;
    float v5 = v10 - v9;
  }
  return v3 + (float)(v5 * v5);
}

uint64_t sub_2484A4A14(int a1, int a2)
{
  if (a1 < 0) {
    return -sub_2484A4A14(-a1);
  }
  if (a2 >= 0) {
    int v2 = a2;
  }
  else {
    int v2 = a2 + 1;
  }
  return ((a1 + (v2 >> 1)) / a2);
}

uint64_t sub_2484A4A50(uint64_t *a1, unsigned int a2, unsigned int a3, int *a4, _DWORD *a5, int a6, int a7, int *a8, uint64_t a9, uint64_t a10)
{
  v17 = a1;
  uint64_t v490 = *MEMORY[0x263EF8340];
  if (sub_24842D168(a1, a2, a3)) {
    return 1;
  }
  int v427 = a6;
  v437 = a4;
  uint64_t v19 = a2;
  v20 = (void *)(*v17 + ((unint64_t)a2 << 6));
  unsigned int v21 = a2;
  unint64_t v23 = v20[5];
  unint64_t v22 = v20[6];
  unsigned int v438 = v21;
  unsigned int v24 = a3 - v21;
  unsigned int v25 = v24 + 1;
  unsigned int v485 = v24 + 1;
  unint64_t v433 = v23;
  v434 = v17;
  v430 = a8;
  unint64_t v417 = v22;
  if (v24 || (a7 & 1) != 0)
  {
    long long v480 = 0u;
    long long v481 = 0u;
    long long v478 = 0u;
    long long v479 = 0u;
    int v482 = 8;
    uint64_t v483 = 0;
    char v484 = 1;
    int v423 = a7;
    if (a7)
    {
      sub_24842A0C4((uint64_t)v441, v23, v22, *((_DWORD *)v17 + 16), v25);
      uint64_t v18 = v445;
      if (v445)
      {
        sub_24840A478((uint64_t)v441);
LABEL_488:
        *(void *)v441 = (char *)&v479 + 8;
        sub_2483FDBFC((void ***)v441);
        *(void *)v441 = &v478;
        sub_2483FDCBC((void ***)v441);
        return v18;
      }
      v486[0] = *(_OWORD *)v441;
      memset(v441, 0, sizeof(v441));
      *(_OWORD *)((char *)&v486[1] + 8) = *(_OWORD *)&v441[24];
      *(void *)&v486[1] = *(void *)&v441[16];
      *((void *)&v486[2] + 1) = *(void *)v442;
      *(void *)v442 = 0;
      long long v487 = *(_OWORD *)&v442[8];
      long long v488 = v443;
      char v489 = (char)v444;
      sub_24842A35C((uint64_t)&v478, (uint64_t)v486);
      *(void *)&long long v461 = (char *)&v486[1] + 8;
      sub_2483FDBFC((void ***)&v461);
      *(void *)&long long v461 = v486;
      sub_2483FDCBC((void ***)&v461);
      unint64_t v86 = v485;
      v17 = v434;
      if (v485)
      {
        unint64_t v87 = 0;
        do
        {
          v88 = (unsigned int *)(*v434 + ((v87 + v19) << 6));
          if (v88[1]) {
            BOOL v89 = *v88 == 0;
          }
          else {
            BOOL v89 = 1;
          }
          if (!v89)
          {
            unint64_t v90 = 0;
            uint64_t v91 = v478 + (v87 << 6);
            uint64_t v93 = *(void *)(v91 + 16);
            v92 = *(char **)(v91 + 24);
            do
            {
              memcpy(v92, (const void *)(*((void *)v88 + 3) + *((void *)v88 + 2) * v90++), 4 * *v88);
              v92 += v93;
            }
            while (v90 < v88[1]);
            unint64_t v86 = v485;
            unint64_t v22 = v417;
            a7 = v423;
          }
          ++v87;
        }
        while (v87 < v86);
      }
      sub_24840A478((uint64_t)v441);
      unsigned int v25 = v485;
    }
    *a5 = 0;
    unint64_t v477 = 0;
    v476 = 0;
    v475 = (uint64_t *)&v476;
    v473 = 0;
    v472 = 0;
    v474 = 0;
    sub_2483F23D8(&v470, v25);
    sub_24842DF64(v469, v485);
    unsigned int v415 = a3;
    v435 = a5;
    if (v485)
    {
      size_t v94 = 8 * v485;
      v95 = operator new(v94);
      bzero(v95, v94);
      a7 = v423;
    }
    else
    {
      v95 = 0;
    }
    v436 = v95;
    v468[1] = 0;
    v468[0] = 0;
    v467 = (uint64_t *)v468;
    if (!a7) {
      goto LABEL_242;
    }
    int v96 = *((_DWORD *)v17 + 16);
    *(void *)&v441[8] = 0;
    *(void *)&v441[16] = 0;
    *(void *)v441 = &v441[8];
    if (v96 <= 8) {
      LOBYTE(v96) = 8;
    }
    int v97 = 3 << (v96 - 8);
    uint64_t v98 = *(void *)(a10 + 8);
    uint64_t v99 = *(void *)(a10 + 16);
    if (v99 != v98)
    {
      unint64_t v100 = 0;
      int v424 = v22 * v23;
      do
      {
        DWORD2(v486[0]) = 0;
        *(void *)&v486[0] = 0;
        int v101 = sub_2484A4A14(*(_DWORD *)(v98 + 4 * v100), v97);
        LODWORD(v486[0]) = v101;
        int v102 = sub_2484A4A14(*(_DWORD *)(*(void *)(a10 + 32) + 4 * v100), v97);
        DWORD1(v486[0]) = v102;
        int v103 = sub_2484A4A14(*(_DWORD *)(*(void *)(a10 + 56) + 4 * v100), v97);
        DWORD2(v486[0]) = v103;
        if (v101) {
          BOOL v104 = 0;
        }
        else {
          BOOL v104 = v102 == 0;
        }
        if (v104 && v103 == 0)
        {
          v95 = v436;
        }
        else
        {
          double v106 = *(double *)(*(void *)(a10 + 80) + 8 * v100);
          v107 = *(uint64_t **)&v441[8];
          v108 = (uint64_t **)&v441[8];
          v109 = (uint64_t **)&v441[8];
          if (*(void *)&v441[8])
          {
LABEL_116:
            while (2)
            {
              uint64_t v110 = 0;
              v109 = (uint64_t **)v107;
              unint64_t v23 = v433;
              do
              {
                int v111 = *(_DWORD *)((char *)v486 + v110);
                int v112 = *(_DWORD *)((char *)v109 + v110 + 32);
                if (v111 < v112)
                {
                  v107 = *v109;
                  v108 = v109;
                  if (*v109) {
                    goto LABEL_116;
                  }
                  goto LABEL_134;
                }
                BOOL v113 = v112 < v111 || v110 == 8;
                v110 += 4;
              }
              while (!v113);
              uint64_t v114 = 0;
              while (1)
              {
                int v115 = *(_DWORD *)((char *)v109 + v114 + 32);
                int v116 = *(_DWORD *)((char *)v486 + v114);
                if (v115 < v116) {
                  break;
                }
                BOOL v117 = v116 < v115 || v114 == 8;
                v114 += 4;
                if (v117)
                {
                  v119 = v109;
                  goto LABEL_138;
                }
              }
              v108 = v109 + 1;
              v107 = v109[1];
              if (v107) {
                continue;
              }
              break;
            }
          }
LABEL_134:
          v119 = operator new(0x38uLL);
          v119[4] = *(void *)&v486[0];
          *((_DWORD *)v119 + 10) = DWORD2(v486[0]);
          v119[6] = 0;
          void *v119 = 0;
          v119[1] = 0;
          v119[2] = v109;
          *v108 = v119;
          v118 = v119;
          if (**(void **)v441)
          {
            *(void *)v441 = **(void **)v441;
            v118 = *v108;
          }
          sub_2484510EC(*(uint64_t **)&v441[8], v118);
          ++*(void *)&v441[16];
          uint64_t v98 = *(void *)(a10 + 8);
          uint64_t v99 = *(void *)(a10 + 16);
          unint64_t v23 = v433;
LABEL_138:
          v95 = v436;
          *((double *)v119 + 6) = sqrt(sqrt(v106)) + *((double *)v119 + 6);
        }
        ++v100;
      }
      while (v100 < (v99 - v98) >> 2);
      v120 = *(unsigned char **)v441;
      if (*(unsigned char **)v441 == &v441[8])
      {
        v134 = 0;
        uint64_t v138 = 0;
        v17 = v434;
        unint64_t v22 = v417;
        goto LABEL_170;
      }
      do
      {
        uint64_t v121 = *((void *)v120 + 4);
        int v122 = *((_DWORD *)v120 + 10);
        v123 = (int *)operator new(0xCuLL);
        *(void *)v123 = v121;
        v123[2] = v122;
        v124 = operator new(0xCuLL);
        *(void *)v124 = 0;
        *((_DWORD *)v124 + 2) = 0;
        *(float *)&uint64_t v121 = sqrtf(sub_2484A48B8((float *)v124, (float *)v124 + 3, v123)) + 1.0;
        operator delete(v124);
        *((double *)v120 + 6) = *((double *)v120 + 6) * (float)((float)(1.0 / (float)v424) * *(float *)&v121);
        operator delete(v123);
        v125 = (void *)*((void *)v120 + 1);
        if (v125)
        {
          do
          {
            v126 = v125;
            v125 = (void *)*v125;
          }
          while (v125);
        }
        else
        {
          do
          {
            v126 = (unsigned char *)*((void *)v120 + 2);
            BOOL v89 = *(void *)v126 == (void)v120;
            v120 = v126;
          }
          while (!v89);
        }
        v120 = v126;
        v95 = v436;
      }
      while (v126 != &v441[8]);
      v127 = *(unsigned char **)v441;
      v17 = v434;
      unint64_t v22 = v417;
      if (*(unsigned char **)v441 != &v441[8])
      {
        unint64_t v128 = 0;
        v129 = *(unsigned char **)v441;
        do
        {
          unint64_t v130 = v128;
          v131 = (void *)*((void *)v129 + 1);
          if (v131)
          {
            do
            {
              v132 = v131;
              v131 = (void *)*v131;
            }
            while (v131);
          }
          else
          {
            do
            {
              v132 = (unsigned char *)*((void *)v129 + 2);
              BOOL v89 = *(void *)v132 == (void)v129;
              v129 = v132;
            }
            while (!v89);
          }
          unint64_t v128 = v130 + 1;
          v129 = v132;
        }
        while (v132 != &v441[8]);
        if (v130 > 0xAAAAAAAAAAAAAA9) {
          sub_2483E92E8();
        }
        v133 = operator new(24 * v128);
        v134 = v133;
        do
        {
          uint64_t v135 = *((void *)v127 + 4);
          v134[2] = *((_DWORD *)v127 + 10);
          *(void *)v134 = v135;
          *((void *)v134 + 2) = *((void *)v127 + 6);
          v136 = (void *)*((void *)v127 + 1);
          if (v136)
          {
            do
            {
              v137 = v136;
              v136 = (void *)*v136;
            }
            while (v136);
          }
          else
          {
            do
            {
              v137 = (unsigned char *)*((void *)v127 + 2);
              BOOL v89 = *(void *)v137 == (void)v127;
              v127 = v137;
            }
            while (!v89);
          }
          v134 += 6;
          v127 = v137;
        }
        while (v137 != &v441[8]);
        uint64_t v138 = (uint64_t)v133;
        goto LABEL_170;
      }
    }
    v134 = 0;
    uint64_t v138 = 0;
LABEL_170:
    unint64_t v139 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v134 - v138) >> 3));
    if (v134 == (_DWORD *)v138) {
      uint64_t v140 = 0;
    }
    else {
      uint64_t v140 = v139;
    }
    sub_2484AAEF0(v138, (double *)v134, v140, 1);
    if (v134 != (_DWORD *)v138)
    {
      uint64_t v141 = v138;
      v431 = v134;
      do
      {
        if (*(void *)(a10 + 112) - *(void *)(a10 + 104) > 0x1FCuLL || *(double *)(v141 + 16) < 17.0) {
          break;
        }
        for (uint64_t i = 0; i != 3; ++i)
        {
          uint64_t v144 = a10 + 24 * i;
          unint64_t v147 = *(void *)(v144 + 120);
          v146 = (void *)(v144 + 120);
          unint64_t v145 = v147;
          int v148 = *(_DWORD *)(v141 + 4 * i) * v97;
          v150 = (int **)(v146 - 1);
          v149 = (int *)*(v146 - 1);
          if ((unint64_t)v149 >= v147)
          {
            v152 = (void **)(v146 - 2);
            v153 = (int *)*(v146 - 2);
            uint64_t v154 = v149 - v153;
            unint64_t v155 = v154 + 1;
            if ((unint64_t)(v154 + 1) >> 62) {
              sub_2483E92E8();
            }
            uint64_t v156 = v145 - (void)v153;
            if (v156 >> 1 > v155) {
              unint64_t v155 = v156 >> 1;
            }
            BOOL v265 = (unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v157 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v265) {
              unint64_t v157 = v155;
            }
            if (v157)
            {
              unint64_t v157 = (unint64_t)sub_2483E9300(v157);
              v149 = *v150;
              v153 = (int *)*v152;
            }
            else
            {
              uint64_t v158 = 0;
            }
            v159 = (int *)(v157 + 4 * v154);
            int *v159 = v148;
            v151 = v159 + 1;
            while (v149 != v153)
            {
              int v160 = *--v149;
              *--v159 = v160;
            }
            *v152 = v159;
            *v150 = v151;
            void *v146 = v157 + 4 * v158;
            if (v153) {
              operator delete(v153);
            }
            v17 = v434;
          }
          else
          {
            int *v149 = v148;
            v151 = v149 + 1;
          }
          *v150 = v151;
        }
        v141 += 24;
        unint64_t v23 = v433;
        v95 = v436;
      }
      while ((_DWORD *)v141 != v431);
      v134 = (_DWORD *)v138;
      unint64_t v22 = v417;
    }
    a7 = v423;
    if (v134) {
      operator delete(v134);
    }
    sub_2484510A0(*(void **)&v441[8]);
    _DWORD *v435 = (*(void *)(a10 + 112) - *(void *)(a10 + 104)) >> 2;
    *(void *)&v441[8] = 0;
    *(void *)&v441[16] = 0;
    *(void *)v441 = &v441[8];
    v161 = (int **)&v441[8];
    if (v22 >= 3)
    {
      uint64_t v162 = 1;
      uint64_t v163 = 2;
      while (1)
      {
        uint64_t v164 = v162;
        uint64_t v162 = v163;
        uint64_t v165 = v485;
        if (v485)
        {
          uint64_t v166 = *v17;
          unsigned int v167 = v438;
          v168 = v95;
          do
          {
            *v168++ = *(void *)(v166 + ((unint64_t)v167 << 6) + 24)
                    + *(void *)(v166 + ((unint64_t)v167 << 6) + 16) * v164;
            ++v167;
            --v165;
          }
          while (v165);
        }
        if (v23 >= 3) {
          break;
        }
LABEL_226:
        uint64_t v163 = v162 + 1;
        unint64_t v22 = v417;
        if (v162 + 1 >= v417)
        {
          v161 = *(int ***)v441;
          a7 = v423;
          goto LABEL_228;
        }
      }
      uint64_t v169 = 2;
      uint64_t v170 = 1;
      while (1)
      {
        uint64_t v171 = v169;
        v172 = (int *)v470;
        if (v485)
        {
          for (unint64_t j = 0; j < v485; ++j)
          {
            v172[j] = *(_DWORD *)(*((void *)v95 + j) + 4 * v170);
            unint64_t v174 = v485;
          }
          v172 = (int *)v470;
        }
        else
        {
          unint64_t v174 = 0;
        }
        unint64_t v175 = 0;
        if (!v174) {
          goto LABEL_220;
        }
        while (1)
        {
          unint64_t v176 = 0;
          v177 = (int *)((char *)&unk_248550D64 + 8 * v175);
          uint64_t v178 = *v177;
          uint64_t v179 = v164 + v177[1];
          uint64_t v180 = v170 + v178;
          do
          {
            int v181 = *(_DWORD *)(*(void *)(*v17 + ((unint64_t)(v19 + v176) << 6) + 24)
                             + *(void *)(*v17 + ((unint64_t)(v19 + v176) << 6) + 16) * v179
                             + 4 * v180);
            int v182 = v172[v176++];
          }
          while (v176 < v174 && v181 == v182);
          if (v175 > 2 || v181 != v182) {
            break;
          }
          while (1)
          {
            ++v175;
            if (v174) {
              break;
            }
LABEL_220:
            if (v175 >= 3) {
              goto LABEL_224;
            }
          }
        }
        if (v181 == v182)
        {
LABEL_224:
          v183 = sub_2484A6FB8((uint64_t **)v441, v172, v471, (uint64_t)&v470);
          ++v183[7];
        }
        uint64_t v169 = v171 + 1;
        uint64_t v170 = v171;
        if (v171 + 1 >= v23) {
          goto LABEL_226;
        }
      }
    }
LABEL_228:
    if (v161 != (int **)&v441[8])
    {
      unint64_t v184 = (unint64_t)(float)((float)((float)(unint64_t)(v17[6] * v17[7]) * 0.01) + 5.0);
      do
      {
        if ((unint64_t)v161[7] > v184)
        {
          sub_2484A7184(&v475, v161[4], v161[5], v161[4], (uint64_t)v161[5]);
          v185 = v473;
          if (v473 >= v474)
          {
            v186 = (void **)sub_2484A72F8(&v472, (uint64_t)(v161 + 4));
          }
          else
          {
            *v473 = 0;
            v185[1] = 0;
            v185[2] = 0;
            sub_2483F2450(v185, v161[4], (uint64_t)v161[5], v161[5] - v161[4]);
            v186 = v185 + 3;
          }
          a7 = v423;
          v473 = v186;
        }
        v187 = v161[1];
        if (v187)
        {
          do
          {
            v188 = (int **)v187;
            v187 = *(int **)v187;
          }
          while (v187);
        }
        else
        {
          do
          {
            v188 = (int **)v161[2];
            BOOL v89 = *v188 == (int *)v161;
            v161 = v188;
          }
          while (!v89);
        }
        v161 = v188;
      }
      while (v188 != (int **)&v441[8]);
    }
    sub_2484A7128(*(void **)&v441[8]);
LABEL_242:
    if (v22)
    {
      for (unint64_t k = 0; k < v22; ++k)
      {
        uint64_t v190 = v485;
        if (v485)
        {
          uint64_t v191 = *v17;
          unsigned int v192 = v438;
          v193 = v95;
          do
          {
            *v193++ = *(void *)(v191 + ((unint64_t)v192 << 6) + 24)
                    + *(void *)(v191 + ((unint64_t)v192 << 6) + 16) * k;
            ++v192;
            --v190;
          }
          while (v190);
        }
        if (v23)
        {
          uint64_t v194 = 0;
          while (!a7 || v477 < *v437)
          {
            if (v485)
            {
              unint64_t v195 = 0;
              v196 = v470;
              do
              {
                v196[v195] = *(_DWORD *)(*((void *)v95 + v195) + 4 * v194);
                ++v195;
              }
              while (v195 < v485);
            }
            if (sub_2484A7184(&v475, (int *)v470, v471, v470, (uint64_t)v471))
            {
              v197 = v473;
              if (v473 >= v474)
              {
                v198 = (void **)sub_2484A72F8(&v472, (uint64_t)&v470);
              }
              else
              {
                *v473 = 0;
                v197[1] = 0;
                v197[2] = 0;
                sub_2483F2450(v197, v470, (uint64_t)v471, ((char *)v471 - (unsigned char *)v470) >> 2);
                v198 = v197 + 3;
              }
              a7 = v423;
              v473 = v198;
            }
            if (v477 > *v437)
            {
              uint64_t v18 = 1;
              goto LABEL_481;
            }
            if (++v194 == v23) {
              break;
            }
          }
        }
      }
    }
    uint64_t v199 = (*v435 + v477);
    int *v437 = v199;
    uint64_t v200 = v485;
    sub_2484017B8((uint64_t)v441, v199, v485);
    uint64_t v18 = *(unsigned int *)v442;
    if (*(_DWORD *)v442)
    {
      v95 = v436;
    }
    else
    {
      long long v461 = *(_OWORD *)v441;
      uint64_t v462 = *(void *)&v441[16];
      long long v463 = *(_OWORD *)&v441[24];
      uint64_t v464 = v199;
      uint64_t v465 = v200;
      uint64_t v466 = -1;
      uint64_t v459 = *(void *)&v441[16] >> 2;
      uint64_t v460 = *(void *)&v441[24];
      unint64_t v201 = *(void *)(*v434 + (v19 << 6) + 16);
      int v202 = *((_DWORD *)v434 + 16);
      if (v202 >= 24) {
        int v202 = 24;
      }
      int v458 = v202;
      if (v423 && *v435)
      {
        unint64_t v203 = 0;
        uint64_t v204 = 4 * (*(void *)&v441[16] >> 2);
        v205 = *(_DWORD **)&v441[24];
        do
        {
          uint64_t v206 = 0;
          v207 = v205;
          do
          {
            _DWORD *v207 = *(_DWORD *)(*(void *)(a10 + 104 + v206) + 4 * v203);
            v206 += 24;
            v207 = (_DWORD *)((char *)v207 + v204);
          }
          while (v206 != 72);
          ++v203;
          ++v205;
        }
        while (v203 < *v435);
      }
      if (v427 && v485 >= 3)
      {
        unint64_t v208 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v473 - v472));
        if (v473 == v472) {
          uint64_t v209 = 0;
        }
        else {
          uint64_t v209 = v208;
        }
        sub_2484A740C(v472, (unint64_t)v473, v209, 1);
      }
      v210 = v472;
      v211 = v473;
      if (v472 != v473)
      {
        uint64_t v212 = 0;
        do
        {
          memset(v441, 0, 24);
          sub_2483F2450(v441, *v210, (uint64_t)v210[1], ((unsigned char *)v210[1] - (unsigned char *)*v210) >> 2);
          v213 = *(int **)v441;
          if (v485)
          {
            unint64_t v214 = 0;
            uint64_t v216 = v459;
            uint64_t v215 = v460;
            uint64_t v217 = v212;
            do
            {
              *(_DWORD *)(v215 + 4 * (v217 + *v435)) = v213[v214++];
              v217 += v216;
            }
            while (v214 < v485);
          }
          sub_2484A6FB8(&v467, v213, *(int **)&v441[8], (uint64_t)v441)[7] = v212;
          if (v213) {
            operator delete(v213);
          }
          ++v212;
          v210 += 3;
        }
        while (v210 != v211);
      }
      unint64_t v425 = v201;
      int64x2_t v456 = 0uLL;
      unint64_t v457 = 0;
      if (v485)
      {
        unint64_t v218 = 0;
        unint64_t v219 = 0;
        v220 = (_OWORD *)(a9 + 8);
        do
        {
          if (v218 >= v457)
          {
            unint64_t v222 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v218 - v456.i64[0]) >> 3);
            unint64_t v223 = v222 + 1;
            if (v222 + 1 > 0x8AD8F2FBA93868) {
              sub_2483E92E8();
            }
            if (0x97DD49C34115B1E6 * ((uint64_t)(v457 - v456.i64[0]) >> 3) > v223) {
              unint64_t v223 = 0x97DD49C34115B1E6 * ((uint64_t)(v457 - v456.i64[0]) >> 3);
            }
            if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(v457 - v456.i64[0]) >> 3) >= 0x456C797DD49C34) {
              unint64_t v224 = 0x8AD8F2FBA93868;
            }
            else {
              unint64_t v224 = v223;
            }
            *(void *)&v486[2] = &v457;
            if (v224)
            {
              if (v224 > 0x8AD8F2FBA93868) {
                sub_2483E9338();
              }
              v225 = (char *)operator new(472 * v224);
            }
            else
            {
              v225 = 0;
            }
            *(void *)&v486[0] = v225;
            *((void *)&v486[0] + 1) = &v225[472 * v222];
            *(void *)&v486[1] = *((void *)&v486[0] + 1);
            *((void *)&v486[1] + 1) = &v225[472 * v224];
            *(void *)v441 = &unk_26FC66948;
            long long v226 = *(_OWORD *)(a9 + 24);
            *(_OWORD *)&v441[8] = *v220;
            *(_OWORD *)&v441[24] = v226;
            *(_OWORD *)v442 = *(_OWORD *)(a9 + 40);
            sub_248428438(*((uint64_t *)&v486[0] + 1), (uint64_t)v441, v433);
            uint64_t v227 = *((void *)&v486[0] + 1);
            unint64_t v218 = *(void *)&v486[1] + 472;
            *(void *)&v486[1] += 472;
            uint64_t v229 = v456.i64[1];
            uint64_t v228 = v456.i64[0];
            if (v456.i64[1] == v456.i64[0])
            {
              int64x2_t v251 = vdupq_n_s64(v456.u64[1]);
            }
            else
            {
              do
              {
                uint64_t v230 = v227 - 472;
                uint64_t v231 = v229 - 472;
                long long v232 = *(_OWORD *)(v229 - 472);
                long long v233 = *(_OWORD *)(v229 - 456);
                *(void *)(v230 + 32) = *(void *)(v229 - 440);
                *(_OWORD *)uint64_t v230 = v232;
                *(_OWORD *)(v230 + 16) = v233;
                uint64_t v234 = -96;
                do
                {
                  v235 = (void *)(v227 + v234 - 336);
                  uint64_t v236 = v229 + v234 - 336;
                  *(void *)(v227 + v234 - 328) = 0;
                  void *v235 = 0;
                  v235[2] = 0;
                  *(_OWORD *)v235 = *(_OWORD *)v236;
                  *(void *)(v227 + v234 - 320) = *(void *)(v229 + v234 - 320);
                  *(void *)(v229 + v234 - 328) = 0;
                  *(void *)uint64_t v236 = 0;
                  *(void *)(v236 + 16) = 0;
                  v234 += 24;
                }
                while (v234);
                *(void *)(v227 - 336) = 0;
                *(void *)(v227 - 328) = 0;
                *(void *)(v227 - 320) = 0;
                *(_OWORD *)(v227 - 336) = *(_OWORD *)(v229 - 336);
                *(void *)(v227 - 320) = *(void *)(v229 - 320);
                *(void *)(v229 - 336) = 0;
                *(void *)(v229 - 328) = 0;
                *(void *)(v229 - 320) = 0;
                *(void *)(v227 - 312) = &unk_26FC66948;
                long long v237 = *(_OWORD *)(v229 - 304);
                long long v238 = *(_OWORD *)(v229 - 288);
                *(_OWORD *)(v227 - 272) = *(_OWORD *)(v229 - 272);
                *(_OWORD *)(v227 - 288) = v238;
                *(_OWORD *)(v227 - 304) = v237;
                long long v239 = *(_OWORD *)(v229 - 144);
                long long v241 = *(_OWORD *)(v229 - 192);
                long long v240 = *(_OWORD *)(v229 - 176);
                *(_OWORD *)(v227 - 160) = *(_OWORD *)(v229 - 160);
                *(_OWORD *)(v227 - 144) = v239;
                *(_OWORD *)(v227 - 192) = v241;
                *(_OWORD *)(v227 - 176) = v240;
                long long v242 = *(_OWORD *)(v229 - 80);
                long long v244 = *(_OWORD *)(v229 - 128);
                long long v243 = *(_OWORD *)(v229 - 112);
                *(_OWORD *)(v227 - 96) = *(_OWORD *)(v229 - 96);
                *(_OWORD *)(v227 - 80) = v242;
                *(_OWORD *)(v227 - 128) = v244;
                *(_OWORD *)(v227 - 112) = v243;
                long long v245 = *(_OWORD *)(v229 - 16);
                long long v247 = *(_OWORD *)(v229 - 64);
                long long v246 = *(_OWORD *)(v229 - 48);
                *(_OWORD *)(v227 - 32) = *(_OWORD *)(v229 - 32);
                *(_OWORD *)(v227 - 16) = v245;
                *(_OWORD *)(v227 - 64) = v247;
                *(_OWORD *)(v227 - 48) = v246;
                long long v248 = *(_OWORD *)(v229 - 256);
                long long v249 = *(_OWORD *)(v229 - 240);
                long long v250 = *(_OWORD *)(v229 - 208);
                *(_OWORD *)(v227 - 224) = *(_OWORD *)(v229 - 224);
                *(_OWORD *)(v227 - 208) = v250;
                *(_OWORD *)(v227 - 256) = v248;
                *(_OWORD *)(v227 - 240) = v249;
                v227 -= 472;
                v229 -= 472;
              }
              while (v231 != v228);
              int64x2_t v251 = v456;
              unint64_t v218 = *(void *)&v486[1];
              uint64_t v227 = v230;
            }
            v456.i64[0] = v227;
            v456.i64[1] = v218;
            *(int64x2_t *)((char *)v486 + 8) = v251;
            unint64_t v252 = v457;
            unint64_t v457 = *((void *)&v486[1] + 1);
            *((void *)&v486[1] + 1) = v252;
            *(void *)&v486[0] = v251.i64[0];
            sub_2484A9A00((uint64_t)v486);
          }
          else
          {
            *(void *)v441 = &unk_26FC66948;
            long long v221 = *(_OWORD *)(a9 + 24);
            *(_OWORD *)&v441[8] = *v220;
            *(_OWORD *)&v441[24] = v221;
            *(_OWORD *)v442 = *(_OWORD *)(a9 + 40);
            sub_248428438(v218, (uint64_t)v441, v433);
            v218 += 472;
          }
          v456.i64[1] = v218;
          ++v219;
          unint64_t v253 = v485;
        }
        while (v219 < v485);
      }
      else
      {
        unint64_t v253 = 0;
      }
      sub_2484A9458(v455, v253);
      v254 = (char **)v434;
      *(void *)&long long v488 = 0;
      long long v487 = 0u;
      memset(v486, 0, sizeof(v486));
      unint64_t v255 = v433;
      v256 = v437;
      v257 = (unsigned char *)a10;
      if (v423)
      {
        uint64_t v258 = 0;
        unint64_t v259 = v485;
        do
        {
          v260 = (char **)v486 + 3 * v258;
          v261 = v260 + 1;
          v262 = v260[1];
          v263 = *v260;
          unint64_t v264 = 0xAAAAAAAAAAAAAAABLL * ((v262 - *v260) >> 3);
          BOOL v265 = v259 >= v264;
          unint64_t v266 = v259 - v264;
          if (v259 <= v264)
          {
            unint64_t v255 = v433;
            v257 = (unsigned char *)a10;
            if (!v265)
            {
              v283 = &v263[24 * v259];
              if (v262 != v283)
              {
                v284 = v260[1];
                do
                {
                  v286 = (void *)*((void *)v284 - 3);
                  v284 -= 24;
                  v285 = v286;
                  if (v286)
                  {
                    *((void *)v262 - 2) = v285;
                    operator delete(v285);
                  }
                  v262 = v284;
                }
                while (v284 != v283);
              }
              *v261 = v283;
            }
          }
          else
          {
            v267 = (char *)v486 + 24 * v258;
            uint64_t v270 = *((void *)v267 + 2);
            v269 = v267 + 16;
            uint64_t v268 = v270;
            if (0xAAAAAAAAAAAAAAABLL * ((v270 - (uint64_t)v262) >> 3) >= v266)
            {
              bzero(v262, 24 * ((24 * v266 - 24) / 0x18) + 24);
              *v261 = &v262[24 * ((24 * v266 - 24) / 0x18) + 24];
              unint64_t v255 = v433;
              v257 = (unsigned char *)a10;
            }
            else
            {
              v428 = v269;
              unint64_t v271 = 0xAAAAAAAAAAAAAAABLL * ((v268 - (uint64_t)v263) >> 3);
              if (2 * v271 > v259) {
                unint64_t v259 = 2 * v271;
              }
              if (v271 >= 0x555555555555555) {
                unint64_t v272 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v272 = v259;
              }
              if (v272 > 0xAAAAAAAAAAAAAAALL) {
                sub_2483E9338();
              }
              v273 = (char *)operator new(24 * v272);
              v274 = &v273[24 * v264];
              v275 = &v273[24 * v272];
              size_t v276 = 24 * ((24 * v266 - 24) / 0x18) + 24;
              bzero(v274, v276);
              v277 = &v274[v276];
              if (v262 == v263)
              {
                *v260 = v274;
                *v261 = v277;
                *(void *)v428 = v275;
                unint64_t v255 = v433;
                v257 = (unsigned char *)a10;
              }
              else
              {
                do
                {
                  *((void *)v274 - 3) = 0;
                  *((void *)v274 - 2) = 0;
                  v274 -= 24;
                  *((void *)v274 + 2) = 0;
                  long long v278 = *(_OWORD *)(v262 - 24);
                  v262 -= 24;
                  *(_OWORD *)v274 = v278;
                  *((void *)v274 + 2) = *((void *)v262 + 2);
                  *(void *)v262 = 0;
                  *((void *)v262 + 1) = 0;
                  *((void *)v262 + 2) = 0;
                }
                while (v262 != v263);
                v279 = *v260;
                v262 = *v261;
                *v260 = v274;
                *v261 = v277;
                *(void *)v428 = v275;
                unint64_t v255 = v433;
                v257 = (unsigned char *)a10;
                if (v262 != v279)
                {
                  v280 = v262;
                  do
                  {
                    v282 = (void *)*((void *)v280 - 3);
                    v280 -= 24;
                    v281 = v282;
                    if (v282)
                    {
                      *((void *)v262 - 2) = v281;
                      operator delete(v281);
                    }
                    v262 = v280;
                  }
                  while (v280 != v279);
                  v262 = v279;
                }
              }
              if (v262) {
                operator delete(v262);
              }
            }
          }
          if (v485)
          {
            uint64_t v287 = 0;
            unint64_t v288 = 0;
            v254 = (char **)v434;
            v256 = v437;
            do
            {
              sub_2484479D0((char **)&(*v260)[v287], v433 + 4);
              ++v288;
              unint64_t v259 = v485;
              v287 += 24;
            }
            while (v288 < v485);
          }
          else
          {
            unint64_t v259 = 0;
            v254 = (char **)v434;
            v256 = v437;
          }
          ++v258;
        }
        while (v258 != 3);
      }
      if (!v417) {
        goto LABEL_471;
      }
      uint64_t v289 = 0;
      BOOL v422 = 0;
      uint64_t v426 = v425 >> 2;
      unint64_t v416 = v255 + 2;
      uint64_t v290 = v19 << 6;
      v291 = v436;
      do
      {
        if (v485)
        {
          unint64_t v292 = 0;
          uint64_t v293 = 8 * v485;
          do
          {
            v291[v292 / 8] = *(void *)&(*v254)[8 * v292 + 24 + v290]
                           + *(void *)&(*v254)[8 * v292 + 16 + v290] * v289;
            if (v423) {
              *(void *)((char *)v455[0] + v292) = *(void *)(v478 + 8 * v292 + 24)
            }
                                                  + *(void *)(v478 + 8 * v292 + 16) * v289;
            v292 += 8;
          }
          while (v293 != v292);
        }
        uint64_t v432 = v289;
        if (v433)
        {
          uint64_t v429 = 0;
          uint64_t v294 = 0;
          uint64_t v421 = *(void *)&(*v254)[64 * v19 + 24] + *(void *)&(*v254)[64 * v19 + 16] * v289;
          if (v289) {
            unint64_t v295 = 0;
          }
          else {
            unint64_t v295 = v416;
          }
          uint64_t v418 = (v289 << 63 >> 63) & v416;
          unint64_t v419 = v295;
          v296 = v257;
          do
          {
            if (v423)
            {
              int v454 = 0;
              unsigned __int8 v453 = 0;
              float v452 = INFINITY;
              *(_DWORD *)v441 = 0;
              sub_2483E9224(v451, v485, v441);
              *(_DWORD *)v441 = 0;
              sub_2483E9224(v450, v485, v441);
              sub_2483F23D8(v449, v485);
              sub_2483F23D8(__p, v485);
              uint64_t v298 = 0;
              char v299 = 1;
              do
              {
                char v439 = v299;
                if (v485)
                {
                  unint64_t v300 = 0;
                  LOBYTE(v297) = *(unsigned char *)a10;
                  double v301 = dbl_248550D88[v298] * (double)v297;
                  v302 = *(uint64_t **)&v486[0];
                  v303 = (float *)v469[0];
                  v304 = v470;
                  do
                  {
                    uint64_t v305 = *v302;
                    v302 += 3;
                    float v306 = (double)*(int *)(*((void *)v436 + v300) + 4 * v294)
                         + v301 * *(float *)(v305 + 4 * (v294 + 2));
                    v303[v300] = v306;
                    uint64_t v307 = llroundf(v306);
                    uint64_t v308 = -1 << *((_DWORD *)v434 + 16);
                    if (v307 >= ~v308) {
                      int v309 = ~v308;
                    }
                    else {
                      int v309 = v307;
                    }
                    if (v307 >= 0) {
                      int v310 = v309;
                    }
                    else {
                      int v310 = 0;
                    }
                    v304[v300++] = v310;
                  }
                  while (v300 < v485);
                  if (v485)
                  {
                    uint64_t v311 = 0;
                    unint64_t v312 = 0;
                    do
                    {
                      sub_24847C8BC((uint64_t)v441, v433, *((void *)v455[0] + v312) + 4 * v294, v426, v294, v432, *v430, v456.i64[0] + v311);
                      *((_DWORD *)__p[0] + v312++) = *(_DWORD *)&v441[8];
                      v311 += 472;
                    }
                    while (v312 < v485);
                  }
                }
                *(void *)v441 = &v485;
                *(void *)&v441[8] = v449;
                v256 = v437;
                *(void *)&v441[16] = &v460;
                *(void *)&v441[24] = v437;
                *(void *)&v441[32] = &v459;
                *(void *)v442 = &v458;
                *(void *)&v442[8] = v435;
                *(void *)&v442[16] = __p;
                *(void *)&long long v443 = v469;
                *((void *)&v443 + 1) = &v452;
                v444 = &v454;
                v445 = &v453;
                v446 = v451;
                v447 = v450;
                int v313 = *v437;
                if (*v437 >= -142)
                {
                  int v314 = -143;
                  do
                  {
                    sub_2484A94E8((unsigned int **)v441, v314++);
                    int v313 = *v437;
                  }
                  while (v314 < *v437);
                }
                int v315 = sub_2484A985C((char *)v470, (char *)v471, v313, v458, 0);
                sub_2484A94E8((unsigned int **)v441, v315);
                int v316 = sub_2484A985C((char *)v470, (char *)v471, *v437, v458, 1);
                sub_2484A94E8((unsigned int **)v441, v316);
                char v299 = 0;
                uint64_t v298 = 1;
              }
              while ((v439 & 1) != 0);
              int v317 = v454;
              BOOL v422 = (v453 | v422) != 0;
              v318 = (void *)a10;
              v291 = v436;
              if (!*(unsigned char *)a10)
              {
                int v420 = v454;
                for (uint64_t m = 0; m != 3; ++m)
                {
                  v320 = &v318[3 * m];
                  unint64_t v323 = v320[3];
                  v322 = v320 + 3;
                  unint64_t v321 = v323;
                  v324 = v450[0];
                  v326 = (char **)(v322 - 1);
                  v325 = (char *)*(v322 - 1);
                  if ((unint64_t)v325 >= v323)
                  {
                    v440 = (void **)(v322 - 2);
                    v328 = (char *)*(v322 - 2);
                    uint64_t v329 = (v325 - v328) >> 2;
                    unint64_t v330 = v329 + 1;
                    if ((unint64_t)(v329 + 1) >> 62) {
                      sub_2483E92E8();
                    }
                    uint64_t v331 = v321 - (void)v328;
                    if (v331 >> 1 > v330) {
                      unint64_t v330 = v331 >> 1;
                    }
                    BOOL v265 = (unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v332 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v265) {
                      unint64_t v332 = v330;
                    }
                    if (v332)
                    {
                      unint64_t v332 = (unint64_t)sub_2483E9300(v332);
                      v325 = *v326;
                      v328 = (char *)*v440;
                    }
                    else
                    {
                      uint64_t v333 = 0;
                    }
                    v334 = (char *)(v332 + 4 * v329);
                    *(_DWORD *)v334 = v324[m];
                    v327 = v334 + 4;
                    while (v325 != v328)
                    {
                      int v335 = *((_DWORD *)v325 - 1);
                      v325 -= 4;
                      *((_DWORD *)v334 - 1) = v335;
                      v334 -= 4;
                    }
                    *v440 = v334;
                    *v326 = v327;
                    void *v322 = v332 + 4 * v333;
                    if (v328) {
                      operator delete(v328);
                    }
                    v318 = (void *)a10;
                    v291 = v436;
                  }
                  else
                  {
                    *(_DWORD *)v325 = *((_DWORD *)v450[0] + m);
                    v327 = v325 + 4;
                    v291 = v436;
                  }
                  *v326 = v327;
                }
                double v336 = v452;
                v338 = (double *)v318[11];
                unint64_t v337 = v318[12];
                if ((unint64_t)v338 >= v337)
                {
                  v342 = (double *)v318[10];
                  uint64_t v343 = v338 - v342;
                  unint64_t v344 = v343 + 1;
                  if ((unint64_t)(v343 + 1) >> 61) {
                    sub_2483E92E8();
                  }
                  uint64_t v345 = v337 - (void)v342;
                  if (v345 >> 2 > v344) {
                    unint64_t v344 = v345 >> 2;
                  }
                  if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v346 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v346 = v344;
                  }
                  if (v346)
                  {
                    if (v346 >> 61) {
                      sub_2483E9338();
                    }
                    v347 = v318;
                    v348 = (char *)operator new(8 * v346);
                    v318 = v347;
                  }
                  else
                  {
                    v348 = 0;
                  }
                  v349 = (double *)&v348[8 * v343];
                  double *v349 = v336;
                  v339 = v349 + 1;
                  while (v338 != v342)
                  {
                    uint64_t v350 = *((void *)v338-- - 1);
                    *((void *)v349-- - 1) = v350;
                  }
                  v318[10] = v349;
                  v318[11] = v339;
                  v318[12] = &v348[8 * v346];
                  if (v342)
                  {
                    v351 = v318;
                    operator delete(v342);
                    v318 = v351;
                  }
                  v291 = v436;
                }
                else
                {
                  double *v338 = v336;
                  v339 = v338 + 1;
                }
                int v317 = v420;
                v318[11] = v339;
                v256 = v437;
              }
              v352 = v318;
              float v353 = 0.0;
              v254 = (char **)v434;
              if (!v485) {
                goto LABEL_429;
              }
              unint64_t v354 = 0;
              uint64_t v355 = v456.i64[0];
              v356 = (int *)v451[0];
              uint64_t v357 = v419 + v294;
              v358 = v455[0];
              v359 = (uint64_t *)(v456.i64[0] + 40);
              uint64_t v360 = v456.i64[0];
              do
              {
                uint64_t v361 = 0;
                uint64_t v362 = 8 * v356[v354];
                *(_DWORD *)(*(void *)(v355 + 472 * v354 + 136) + 4 * v357) = *(_DWORD *)(v355 + 472 * v354 + 32)
                                                                             - v362;
                v363 = v359;
                do
                {
                  uint64_t v364 = *(void *)(v360 + v361) - v362;
                  if (v364 < 0) {
                    uint64_t v364 = v362 - *(void *)(v360 + v361);
                  }
                  unint64_t v365 = (unint64_t)(v364 + 3) >> 3;
                  uint64_t v366 = *v363;
                  v363 += 3;
                  *(_DWORD *)(v366 + 4 * v357) = v365;
                  *(_DWORD *)(v366 + 4 * (v294 + v418 + 1)) += v365;
                  v361 += 8;
                }
                while (v361 != 32);
                *(_DWORD *)(v358[v354] + 4 * v294) = v356[v354];
                ++v354;
                uint64_t v367 = v485;
                v359 += 59;
                v360 += 472;
              }
              while (v354 < v485);
              if (v485)
              {
                float v353 = 0.0;
                v368 = (float *)v469[0];
                uint64_t v369 = v485;
                do
                {
                  float v370 = *v368++;
                  float v371 = v370;
                  int v372 = *v356++;
                  float v353 = v353 + (float)((float)(v371 - (float)v372) * (float)(v371 - (float)v372));
                  --v369;
                }
                while (v369);
                char v373 = 0;
              }
              else
              {
LABEL_429:
                uint64_t v367 = 0;
                char v373 = 1;
              }
              float v374 = sqrtf(v353);
              char v375 = v458;
              if (v458 <= 8) {
                char v375 = 8;
              }
              int v376 = 38 << (v375 - 8);
              if (v374 <= (float)v376) {
                float v377 = 1.0;
              }
              else {
                float v377 = (float)v376 / v374;
              }
              if ((v373 & 1) == 0)
              {
                uint64_t v378 = 0;
                v379 = (float *)v469[0];
                v380 = (int *)v451[0];
                uint64_t v381 = *(void *)&v486[0];
                uint64_t v382 = *((void *)&v486[1] + 1);
                uint64_t v383 = v487;
                do
                {
                  uint64_t v384 = 0;
                  float v385 = v379[v378] - (float)v380[v378];
                  float v386 = 0.0;
                  do
                  {
                    float v387 = *(float *)(*(void *)(*((void *)v486 + 3 * *(int *)((char *)&unk_248550D98 + v384))
                                                + 24 * v378)
                                    + 4 * (v294 + *(int *)((char *)&unk_248550D98 + v384 + 4)));
                    if (((LODWORD(v387) ^ COERCE_UNSIGNED_INT(v379[v378] - (float)v380[v378])) & 0x80000000) == 0) {
                      float v387 = -0.0;
                    }
                    float v386 = v386 + v387;
                    v384 += 8;
                  }
                  while (v384 != 88);
                  uint64_t v388 = 0;
                  float v389 = fabsf(v385) / (fabsf(v386) + 0.001);
                  if (v389 > 1.0) {
                    float v389 = 1.0;
                  }
                  do
                  {
                    uint64_t v390 = *(void *)(*((void *)v486 + 3 * *(int *)((char *)&unk_248550D98 + v388)) + 24 * v378);
                    uint64_t v391 = v294 + *(int *)((char *)&unk_248550D98 + v388 + 4);
                    float v392 = *(float *)(v390 + 4 * v391);
                    if ((LODWORD(v392) ^ LODWORD(v385)) < 0)
                    {
                      float v385 = v385 + (float)(v389 * v392);
                      *(float *)(v390 + 4 * v391) = (float)(1.0 - v389) * v392;
                    }
                    v388 += 8;
                  }
                  while (v388 != 88);
                  uint64_t v393 = 0;
                  uint64_t v394 = *(void *)(v381 + 24 * v378);
                  float v395 = (float)(v377 * v385) * 0.0714285714;
                  *(float *)(v394 + 4 * (v294 + 3)) = *(float *)(v394 + 4 * (v294 + 3)) + (float)(v395 * 2.0);
                  *(float *)(v394 + 4 * (v294 + 4)) = *(float *)(v394 + 4 * (v294 + 4)) + v395;
                  uint64_t v396 = *(void *)(v382 + 24 * v378);
                  *(float *)(v396 + 4 * v294) = *(float *)(v396 + 4 * v294) + v395;
                  uint64_t v397 = *(void *)(v383 + 24 * v378) + v429;
                  uint64_t v398 = v396 + v429;
                  do
                  {
                    *(float *)(v398 + v393) = *(float *)(v398 + v393) + v395;
                    *(float *)(v397 + v393) = *(float *)(v397 + v393) + v395;
                    v393 += 4;
                  }
                  while (v393 != 20);
                  ++v378;
                }
                while (v378 != v367);
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v449[0])
              {
                v449[1] = v449[0];
                operator delete(v449[0]);
              }
              if (v450[0])
              {
                v450[1] = v450[0];
                operator delete(v450[0]);
              }
              if (v451[0])
              {
                v451[1] = v451[0];
                operator delete(v451[0]);
              }
              v296 = v352;
            }
            else
            {
              if (v485)
              {
                unint64_t v340 = 0;
                v341 = v470;
                do
                {
                  v341[v340] = *(_DWORD *)(v291[v340] + 4 * v294);
                  ++v340;
                }
                while (v340 < v485);
              }
              int v317 = *((_DWORD *)sub_2484A6FB8(&v467, (int *)v470, v471, (uint64_t)&v470) + 14);
            }
            if (*v296) {
              *(_DWORD *)(v421 + 4 * v294) = v317;
            }
            ++v294;
            v429 += 4;
          }
          while (v294 != v433);
        }
        else
        {
          v296 = v257;
        }
        v257 = v296;
        if (v423 && v485)
        {
          uint64_t v399 = 0;
          uint64_t v400 = 24 * v485;
          do
          {
            v401 = (void *)(*(void *)&v486[0] + v399);
            v402 = (void *)(*((void *)&v486[1] + 1) + v399);
            uint64_t v403 = *(void *)(*(void *)&v486[0] + v399);
            void *v401 = *(void *)(*((void *)&v486[1] + 1) + v399);
            void *v402 = v403;
            uint64_t v404 = v401[1];
            v401[1] = v402[1];
            v402[1] = v404;
            uint64_t v405 = v401[2];
            v401[2] = v402[2];
            v402[2] = v405;
            v406 = (void *)(*((void *)&v486[1] + 1) + v399);
            v407 = (void *)(v487 + v399);
            uint64_t v408 = *(void *)(*((void *)&v486[1] + 1) + v399);
            void *v406 = *(void *)(v487 + v399);
            void *v407 = v408;
            uint64_t v409 = v406[1];
            v406[1] = v407[1];
            v407[1] = v409;
            uint64_t v410 = v406[2];
            v406[2] = v407[2];
            v407[2] = v410;
            uint64_t v411 = *(void *)(v487 + v399 + 8) - *(void *)(v487 + v399);
            if (v411 >= 1) {
              bzero(*(void **)(v487 + v399), 4 * (((unint64_t)v411 >> 2) - ((unint64_t)v411 > 3)) + 4);
            }
            v399 += 24;
          }
          while (v400 != v399);
        }
        uint64_t v289 = v432 + 1;
        uint64_t v290 = v19 << 6;
      }
      while (v432 + 1 != v417);
      if (!v422) {
LABEL_471:
      }
        int *v430 = 0;
      if (*v257)
      {
        ++v254[9];
        sub_24842B084((uint64_t)v254, (uint64_t)&(*v254)[64 * v19 + 64], (uint64_t)&(*v254)[64 * (unint64_t)v415 + 64]);
        sub_24842BAB8(v254, *v254, &v461);
      }
      *v256 -= *v435;
      uint64_t v412 = 48;
      v95 = v436;
      do
      {
        *(void *)v441 = (char *)v486 + v412;
        sub_2483EA640((void ***)v441);
        v412 -= 24;
      }
      while (v412 != -24);
      if (v455[0])
      {
        v455[1] = v455[0];
        operator delete(v455[0]);
      }
      *(void *)v441 = &v456;
      sub_2484A9928((void ***)v441);
      uint64_t v413 = v463;
      *(void *)&long long v463 = 0;
      if (v413)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v413 - 24));
        free(*(void **)(v413 - 32));
      }
      uint64_t v18 = 0;
    }
LABEL_481:
    sub_2484A7128(v468[0]);
    if (v95) {
      operator delete(v95);
    }
    if (v469[0])
    {
      v469[1] = v469[0];
      operator delete(v469[0]);
    }
    if (v470)
    {
      v471 = (int *)v470;
      operator delete(v470);
    }
    *(void *)v441 = &v472;
    sub_2483F87EC((void ***)v441);
    sub_2484A7128(v476);
    goto LABEL_488;
  }
  if (!*a4) {
    return 1;
  }
  memset(v486, 0, 24);
  if (v22)
  {
    uint64_t v26 = 0;
    uint64_t v28 = v20[2];
    v27 = (int *)v20[3];
    int v29 = 0x7FFFFFFF;
    signed int v30 = 0x80000000;
    do
    {
      v31 = v27;
      for (unint64_t n = v23; n; --n)
      {
        int v34 = *v31++;
        signed int v33 = v34;
        if (v34 < v29) {
          int v29 = v33;
        }
        if (v33 > v30) {
          signed int v30 = v33;
        }
      }
      ++v26;
      v27 = (int *)((char *)v27 + v28);
    }
    while (v26 != v22);
  }
  else
  {
    signed int v30 = 0x80000000;
    int v29 = 0x7FFFFFFF;
  }
  uint64_t v35 = v30 - (uint64_t)v29;
  uint64_t v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) <= 0x10000)
  {
    *(_DWORD *)v441 = 0;
    sub_2483F1FEC((char **)v486, v35 + 1, v441);
    signed int v65 = 0;
    if (v22)
    {
      uint64_t v66 = 0;
      uint64_t v68 = *(void *)(*v17 + (v19 << 6) + 16);
      v67 = *(int **)(*v17 + (v19 << 6) + 24);
      uint64_t v69 = *(void *)&v486[0];
      uint64_t v18 = 1;
      do
      {
        if (v23)
        {
          v70 = v67;
          unint64_t v71 = v23;
          do
          {
            uint64_t v72 = *v70++;
            uint64_t v73 = v72 - v29;
            if (!*(_DWORD *)(v69 + 4 * v73))
            {
              *(_DWORD *)(v69 + 4 * v73) = 1;
              if (v65 >= *v437) {
                goto LABEL_166;
              }
              ++v65;
            }
            --v71;
          }
          while (v71);
        }
        ++v66;
        v67 = (int *)((char *)v67 + v68);
      }
      while (v66 != v22);
    }
    sub_2484017B8((uint64_t)&v478, v65, 1u);
    uint64_t v18 = DWORD2(v480);
    if (!DWORD2(v480))
    {
      *(_OWORD *)v441 = v478;
      uint64_t v74 = *((void *)&v479 + 1);
      *(_OWORD *)&v441[16] = v479;
      *(void *)&v441[32] = v480;
      *(void *)v442 = v65;
      *(void *)&v442[8] = 1;
      *(void *)&v442[16] = -1;
      int *v437 = v65;
      if (v36)
      {
        int v75 = 0;
        v76 = *(_DWORD **)&v486[0];
        int v77 = v29;
        do
        {
          if (*v76)
          {
            *(_DWORD *)(v74 + 4 * v75) = v77;
            _DWORD *v76 = v75++;
          }
          ++v77;
          ++v76;
          --v36;
        }
        while (v36);
      }
      v78 = (char *)*v434;
      if (v22)
      {
        uint64_t v79 = 0;
        uint64_t v81 = *(void *)&v78[64 * v19 + 16];
        v80 = *(_DWORD **)&v78[64 * v19 + 24];
        uint64_t v82 = *(void *)&v486[0];
        do
        {
          v83 = v80;
          for (unint64_t ii = v23; ii; --ii)
          {
            _DWORD *v83 = *(_DWORD *)(v82 + 4 * (*v83 - v29));
            ++v83;
          }
          ++v79;
          v80 = (_DWORD *)((char *)v80 + v81);
        }
        while (v79 != v22);
      }
      int *v430 = 0;
      ++v434[9];
      sub_24842BAB8(v434, v78, (long long *)v441);
      uint64_t v85 = *(void *)&v441[24];
      *(void *)&v441[24] = 0;
      if (v85)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v85 - 24));
        free(*(void **)(v85 - 32));
      }
      uint64_t v18 = 0;
    }
  }
  else
  {
    *((void *)&v461 + 1) = 0;
    uint64_t v462 = 0;
    *(void *)&long long v461 = (char *)&v461 + 8;
    signed int v37 = 0;
    if (v22)
    {
      unint64_t v38 = 0;
      if (v23 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v23;
      }
      unint64_t v40 = v23;
      do
      {
        if (v40)
        {
          uint64_t v41 = 0;
          unint64_t v42 = *(void *)(*v17 + (v19 << 6) + 24) + *(void *)(*v17 + (v19 << 6) + 16) * v38;
          while (1)
          {
            v43 = (void *)&v461 + 1;
            v44 = (void *)&v461 + 1;
            if (*((void *)&v461 + 1))
            {
              int v45 = *(_DWORD *)(v42 + 4 * v41);
              uint64_t v46 = *((void *)&v461 + 1);
              while (1)
              {
                while (1)
                {
                  v44 = (void *)v46;
                  int v47 = *(_DWORD *)(v46 + 28);
                  if (v45 >= v47) {
                    break;
                  }
                  uint64_t v46 = *v44;
                  v43 = v44;
                  if (!*v44) {
                    goto LABEL_36;
                  }
                }
                if (v47 >= v45) {
                  break;
                }
                uint64_t v46 = v44[1];
                if (!v46)
                {
                  v43 = v44 + 1;
                  goto LABEL_36;
                }
              }
            }
            else
            {
LABEL_36:
              v48 = operator new(0x20uLL);
              v48[7] = *(_DWORD *)(v42 + 4 * v41);
              *(void *)v48 = 0;
              *((void *)v48 + 1) = 0;
              *((void *)v48 + 2) = v44;
              void *v43 = v48;
              if (*(void *)v461)
              {
                *(void *)&long long v461 = *(void *)v461;
                v48 = (_DWORD *)*v43;
              }
              sub_2484510EC(*((uint64_t **)&v461 + 1), (uint64_t *)v48);
              ++v462;
              if (v37 >= *v437)
              {
                uint64_t v18 = 1;
                goto LABEL_165;
              }
              ++v37;
            }
            if (++v41 == v39)
            {
              unint64_t v23 = v433;
              v17 = v434;
              unint64_t v40 = v433;
              break;
            }
          }
        }
        ++v38;
      }
      while (v38 < v417);
    }
    sub_2484017B8((uint64_t)&v478, v37, 1u);
    uint64_t v18 = DWORD2(v480);
    if (!DWORD2(v480))
    {
      *(_OWORD *)v441 = v478;
      uint64_t v49 = *((void *)&v479 + 1);
      *(_OWORD *)&v441[16] = v479;
      *(void *)&v441[32] = v480;
      *(void *)v442 = v37;
      *(void *)&v442[8] = 1;
      *(void *)&v442[16] = -1;
      int *v437 = v37;
      v50 = (long long *)v461;
      if ((long long *)v461 != (long long *)((char *)&v461 + 8))
      {
        uint64_t v51 = 0;
        do
        {
          *(_DWORD *)(v49 + 4 * v51) = *((_DWORD *)v50 + 7);
          v52 = (long long *)*((void *)v50 + 1);
          if (v52)
          {
            do
            {
              v53 = v52;
              v52 = *(long long **)v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              v53 = (long long *)*((void *)v50 + 2);
              BOOL v89 = *(void *)v53 == (void)v50;
              v50 = v53;
            }
            while (!v89);
          }
          ++v51;
          v50 = v53;
        }
        while (v53 != (long long *)((char *)&v461 + 8));
      }
      v54 = (char *)*v434;
      if (v417)
      {
        uint64_t v55 = 0;
        uint64_t v57 = *(void *)&v54[64 * v19 + 16];
        uint64_t v56 = *(void *)&v54[64 * v19 + 24];
        do
        {
          if (v23)
          {
            uint64_t v58 = 0;
            uint64_t v59 = v56 + v57 * v55;
            do
            {
              uint64_t v60 = 0;
              do
              {
                uint64_t v61 = v60;
                int v62 = *(_DWORD *)(v49 + 4 * v60++);
              }
              while (*(_DWORD *)(v59 + 4 * v58) != v62 && v61 < *v437);
              *(_DWORD *)(v59 + 4 * v58++) = v61;
            }
            while (v58 != v23);
          }
          ++v55;
        }
        while (v55 != v417);
      }
      int *v430 = 0;
      ++v434[9];
      sub_24842BAB8(v434, v54, (long long *)v441);
      uint64_t v64 = *(void *)&v441[24];
      *(void *)&v441[24] = 0;
      if (v64)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v64 - 24));
        free(*(void **)(v64 - 32));
      }
      uint64_t v18 = 0;
    }
LABEL_165:
    sub_2484510A0(*((void **)&v461 + 1));
  }
LABEL_166:
  if (*(void *)&v486[0]) {
    operator delete(*(void **)&v486[0]);
  }
  return v18;
}

void sub_2484A6CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a32 - 24));
    free(*(void **)(a32 - 32));
  }
  sub_2484510A0(a68);
  v70 = *(void **)(v68 - 240);
  if (v70) {
    operator delete(v70);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2484A6FB8(uint64_t **a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (!v6)
  {
    float v8 = a1 + 1;
LABEL_28:
    v20 = (uint64_t *)operator new(0x40uLL);
    v20[5] = 0;
    v20[6] = 0;
    v20[4] = 0;
    sub_2483F2450(v20 + 4, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    v20[7] = 0;
    uint64_t *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v8;
    void *v7 = v20;
    unsigned int v21 = (uint64_t *)**a1;
    unint64_t v22 = v20;
    if (v21)
    {
      *a1 = v21;
      unint64_t v22 = *v7;
    }
    sub_2484510EC(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v20;
  }
  while (1)
  {
    while (1)
    {
      float v8 = (uint64_t **)v6;
      float v9 = (uint64_t *)v6[4];
      float v10 = v8[5];
      if (v9 == v10) {
        break;
      }
      float v11 = (uint64_t *)((char *)v9 + 4);
      int v12 = a2;
      while (v12 != a3)
      {
        int v13 = *v12;
        int v14 = *((_DWORD *)v11 - 1);
        if (*v12 < v14) {
          break;
        }
        ++v12;
        BOOL v15 = v14 < v13 || v11 == v10;
        float v11 = (uint64_t *)((char *)v11 + 4);
        if (v15) {
          goto LABEL_11;
        }
      }
      unint64_t v6 = *v8;
      unint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_28;
      }
    }
LABEL_11:
    if (a2 == a3) {
      break;
    }
    v16 = a2 + 1;
    while (v9 != v10)
    {
      int v17 = *(_DWORD *)v9;
      int v18 = *(v16 - 1);
      if (*(_DWORD *)v9 < v18) {
        break;
      }
      float v9 = (uint64_t *)((char *)v9 + 4);
      if (v18 < v17 || v16++ == a3) {
        goto LABEL_25;
      }
    }
    unint64_t v7 = v8 + 1;
    unint64_t v6 = v8[1];
    if (!v6) {
      goto LABEL_28;
    }
  }
LABEL_25:
  if (!v8) {
    goto LABEL_28;
  }
  return (uint64_t *)v8;
}

void sub_2484A7114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2484A7128(void *a1)
{
  if (a1)
  {
    sub_2484A7128(*a1);
    sub_2484A7128(a1[1]);
    int v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_2484A7184(uint64_t **a1, int *a2, int *a3, const void *a4, uint64_t a5)
{
  float v9 = a1 + 1;
  float v8 = a1[1];
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        float v10 = (uint64_t **)v8;
        float v11 = (uint64_t *)v8[4];
        int v12 = v10[5];
        if (v11 == v12) {
          break;
        }
        int v13 = (uint64_t *)((char *)v11 + 4);
        int v14 = a2;
        while (v14 != a3)
        {
          int v15 = *v14;
          int v16 = *((_DWORD *)v13 - 1);
          if (*v14 < v16) {
            break;
          }
          ++v14;
          BOOL v17 = v16 < v15 || v13 == v12;
          int v13 = (uint64_t *)((char *)v13 + 4);
          if (v17) {
            goto LABEL_11;
          }
        }
        float v8 = *v10;
        float v9 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
LABEL_11:
      if (a2 == a3) {
        break;
      }
      int v18 = a2 + 1;
      while (v11 != v12)
      {
        int v19 = *(_DWORD *)v11;
        int v20 = *(v18 - 1);
        if (*(_DWORD *)v11 < v20) {
          break;
        }
        float v11 = (uint64_t *)((char *)v11 + 4);
        if (v20 < v19 || v18++ == a3) {
          goto LABEL_25;
        }
      }
      float v9 = v10 + 1;
      float v8 = v10[1];
      if (!v8) {
        goto LABEL_28;
      }
    }
LABEL_25:
    if (v10) {
      return 0;
    }
  }
  else
  {
    float v10 = a1 + 1;
  }
LABEL_28:
  unint64_t v23 = (uint64_t *)operator new(0x38uLL);
  v23[5] = 0;
  v23[6] = 0;
  v23[4] = 0;
  sub_2483F2450(v23 + 4, a4, a5, (a5 - (uint64_t)a4) >> 2);
  *unint64_t v23 = 0;
  v23[1] = 0;
  v23[2] = (uint64_t)v10;
  *float v9 = v23;
  unsigned int v24 = (uint64_t *)**a1;
  if (v24)
  {
    *a1 = v24;
    unint64_t v23 = *v9;
  }
  sub_2484510EC(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

void sub_2484A72E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2484A72F8(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2483E92E8();
  }
  unint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  int v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_2483F8ED4(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  float v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  int v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *float v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_2483F2450(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v13 += 3;
  sub_2483F8F1C(a1, v12);
  uint64_t v10 = a1[1];
  sub_2483F8F8C((uint64_t)v12);
  return v10;
}

void sub_2484A73F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2483F8F8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2484A740C(void **a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v192 = a2 - 24;
    uint64_t v189 = a2 - 48;
    uint64_t v187 = a2 - 72;
    unint64_t v9 = (unint64_t)a1;
    unint64_t v200 = a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v11 = a2 - v9;
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              uint64_t v215 = 0;
              uint64_t v216 = 0;
              uint64_t v217 = 0;
              sub_2483F2450(&v215, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 2);
              uint64_t v212 = 0;
              v213 = 0;
              uint64_t v214 = 0;
              sub_2483F2450(&v212, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
              unint64_t v86 = v215;
              float v87 = (float)((float)((float)((float)v215[1] * 0.587) + (float)((float)*v215 * 0.299))
                          + (float)((float)v215[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v216 - (char *)v215) >= 0xD) {
                float v87 = v87 * (float)((float)v215[3] + 1.0);
              }
              float v88 = (float)((float)((float)((float)v212[1] * 0.587) + (float)((float)*v212 * 0.299))
                          + (float)((float)v212[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v213 - (char *)v212) >= 0xD) {
                float v88 = v88 * (float)((float)v212[3] + 1.0);
              }
              v213 = v212;
              operator delete(v212);
              uint64_t v216 = v86;
              operator delete(v86);
              if (v87 < v88)
              {
                BOOL v89 = *(const void **)v9;
                *(void *)unint64_t v9 = *(void *)(a2 - 24);
                *(void *)(a2 - 24) = v89;
                uint64_t v90 = *(void *)(v9 + 8);
                *(void *)(v9 + 8) = *(void *)(a2 - 16);
                *(void *)(a2 - 16) = v90;
                uint64_t v91 = *(void *)(v9 + 16);
                *(void *)(v9 + 16) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v91;
              }
              break;
            case 3uLL:
              sub_2484A9A50(v9, v9 + 24, v192);
              break;
            case 4uLL:
              sub_2484AA074(v9, v9 + 24, v9 + 48, v192);
              break;
            case 5uLL:
              sub_2484AA460(v9, v9 + 24, v9 + 48, v9 + 72, v192);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v11 <= 575)
        {
          if (a4)
          {
            if (v9 != a2)
            {
              unint64_t v92 = v9 + 24;
              if (v9 + 24 != a2)
              {
                uint64_t v93 = 0;
                unint64_t v94 = v9;
                do
                {
                  unint64_t v95 = v92;
                  long long v245 = 0;
                  long long v246 = 0;
                  uint64_t v247 = 0;
                  sub_2483F2450(&v245, *(const void **)(v94 + 24), *(void *)(v94 + 32), (uint64_t)(*(void *)(v94 + 32) - *(void *)(v94 + 24)) >> 2);
                  long long v242 = 0;
                  long long v243 = 0;
                  uint64_t v244 = 0;
                  sub_2483F2450(&v242, *(const void **)v94, *(void *)(v94 + 8), (uint64_t)(*(void *)(v94 + 8) - *(void *)v94) >> 2);
                  int v96 = v245;
                  float v97 = (float)((float)((float)((float)v96[1] * 0.587) + (float)((float)*v96 * 0.299))
                              + (float)((float)v245[2] * 0.114))
                      + 0.1;
                  if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
                    float v97 = v97 * (float)((float)v245[3] + 1.0);
                  }
                  float v98 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                              + (float)((float)v242[2] * 0.114))
                      + 0.1;
                  if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
                    float v98 = v98 * (float)((float)v242[3] + 1.0);
                  }
                  long long v243 = v242;
                  operator delete(v242);
                  long long v246 = v96;
                  operator delete(v96);
                  if (v97 < v98)
                  {
                    uint64_t v99 = 0;
                    unint64_t v100 = *(const void **)v95;
                    long long v101 = *(_OWORD *)(v94 + 32);
                    *(void *)(v95 + 8) = 0;
                    *(void *)(v95 + 16) = 0;
                    *(void *)unint64_t v95 = 0;
                    long long v204 = v101;
                    uint64_t v102 = v101;
                    unint64_t v103 = (uint64_t)(v101 - (void)v100) >> 2;
                    for (uint64_t i = v93; ; i -= 24)
                    {
                      v105 = (char *)v10 + i;
                      if (v99)
                      {
                        *((void *)v105 + 4) = v99;
                        operator delete(v99);
                        *((void *)v105 + 3) = 0;
                        *((void *)v105 + 4) = 0;
                        *((void *)v105 + 5) = 0;
                      }
                      *(_OWORD *)(v105 + 24) = *(_OWORD *)v105;
                      *((void *)v105 + 5) = *((void *)v105 + 2);
                      *((void *)v105 + 1) = 0;
                      *((void *)v105 + 2) = 0;
                      *(void *)v105 = 0;
                      if (!i)
                      {
                        v109 = (char *)v10;
                        goto LABEL_148;
                      }
                      long long v239 = 0;
                      long long v240 = 0;
                      uint64_t v241 = 0;
                      sub_2483F2450(&v239, v100, v102, v103);
                      uint64_t v236 = 0;
                      long long v237 = 0;
                      uint64_t v238 = 0;
                      sub_2483F2450(&v236, *(const void **)((char *)v10 + i - 24), *(void *)((char *)v10 + i - 16), (uint64_t)(*(void *)((char *)v10 + i - 16) - *(void *)((char *)v10 + i - 24)) >> 2);
                      double v106 = v239;
                      float v107 = (float)((float)((float)((float)v106[1] * 0.587) + (float)((float)*v106 * 0.299))
                                   + (float)((float)v106[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
                        float v107 = v107 * (float)((float)v239[3] + 1.0);
                      }
                      float v108 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                                   + (float)((float)v236[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
                        float v108 = v108 * (float)((float)v236[3] + 1.0);
                      }
                      long long v237 = v236;
                      operator delete(v236);
                      long long v240 = v106;
                      operator delete(v106);
                      if (v107 >= v108) {
                        break;
                      }
                      uint64_t v99 = *(void **)v105;
                    }
                    v109 = (char *)v10 + i;
LABEL_148:
                    uint64_t v110 = *(void **)v109;
                    a2 = v200;
                    if (*(void *)v109)
                    {
                      *((void *)v109 + 1) = v110;
                      operator delete(v110);
                      *(void *)v109 = 0;
                      *((void *)v109 + 1) = 0;
                      *((void *)v109 + 2) = 0;
                    }
                    *(void *)v109 = v100;
                    *(_OWORD *)(v109 + 8) = v204;
                  }
                  unint64_t v92 = v95 + 24;
                  v93 += 24;
                  unint64_t v94 = v95;
                }
                while (v95 + 24 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            unint64_t v170 = v9 + 24;
            if (v9 + 24 != a2)
            {
              do
              {
                uint64_t v171 = (void *)v170;
                long long v245 = 0;
                long long v246 = 0;
                uint64_t v247 = 0;
                sub_2483F2450(&v245, (const void *)v10[3], v10[4], (uint64_t)(v10[4] - v10[3]) >> 2);
                long long v242 = 0;
                long long v243 = 0;
                uint64_t v244 = 0;
                sub_2483F2450(&v242, (const void *)*v10, v10[1], (uint64_t)(v10[1] - *v10) >> 2);
                v172 = v245;
                float v173 = (float)((float)((float)((float)v172[1] * 0.587) + (float)((float)*v172 * 0.299))
                             + (float)((float)v245[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
                  float v173 = v173 * (float)((float)v245[3] + 1.0);
                }
                float v174 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                             + (float)((float)v242[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
                  float v174 = v174 * (float)((float)v242[3] + 1.0);
                }
                long long v243 = v242;
                operator delete(v242);
                long long v246 = v172;
                operator delete(v172);
                if (v173 < v174)
                {
                  unint64_t v175 = (const void *)*v171;
                  long long v176 = *((_OWORD *)v10 + 2);
                  v171[1] = 0;
                  v171[2] = 0;
                  *uint64_t v171 = 0;
                  long long v205 = v176;
                  uint64_t v177 = v176;
                  unint64_t v178 = (uint64_t)(v176 - (void)v175) >> 2;
                  do
                  {
                    uint64_t v179 = (void *)v10[3];
                    if (v179)
                    {
                      v10[4] = v179;
                      operator delete(v179);
                      v10[3] = 0;
                      v10[4] = 0;
                      v10[5] = 0;
                    }
                    *(_OWORD *)(v10 + 3) = *(_OWORD *)v10;
                    v10[5] = v10[2];
                    v10[1] = 0;
                    v10[2] = 0;
                    *uint64_t v10 = 0;
                    long long v239 = 0;
                    long long v240 = 0;
                    uint64_t v241 = 0;
                    sub_2483F2450(&v239, v175, v177, v178);
                    uint64_t v236 = 0;
                    long long v237 = 0;
                    uint64_t v238 = 0;
                    uint64_t v180 = (const void *)*(v10 - 3);
                    uint64_t v181 = *(v10 - 2);
                    v10 -= 3;
                    sub_2483F2450(&v236, v180, v181, (v181 - (uint64_t)v180) >> 2);
                    int v182 = v239;
                    float v183 = (float)((float)((float)((float)v182[1] * 0.587) + (float)((float)*v182 * 0.299))
                                 + (float)((float)v182[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
                      float v183 = v183 * (float)((float)v239[3] + 1.0);
                    }
                    float v184 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                                 + (float)((float)v236[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
                      float v184 = v184 * (float)((float)v236[3] + 1.0);
                    }
                    long long v237 = v236;
                    operator delete(v236);
                    long long v240 = v182;
                    operator delete(v182);
                  }
                  while (v183 < v184);
                  v185 = v10 + 3;
                  v186 = (void *)v10[3];
                  if (v186)
                  {
                    v10[4] = v186;
                    operator delete(v186);
                    void *v185 = 0;
                    v10[4] = 0;
                    v10[5] = 0;
                  }
                  void *v185 = v175;
                  *((_OWORD *)v10 + 2) = v205;
                  a2 = v200;
                }
                unint64_t v170 = (unint64_t)(v171 + 3);
                uint64_t v10 = v171;
              }
              while (v171 + 3 != (void *)a2);
            }
          }
          return;
        }
        unint64_t v203 = (void **)v9;
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v111 = (v12 - 2) >> 1;
            int64_t v112 = v111;
            do
            {
              int64_t v113 = v112;
              if (v111 >= v112)
              {
                int64_t v190 = v112;
                uint64_t v114 = (2 * v112) | 1;
                int v115 = (const void **)&v10[3 * v114];
                uint64_t v116 = 2 * v112 + 2;
                if (v116 < (uint64_t)v12)
                {
                  long long v245 = 0;
                  long long v246 = 0;
                  uint64_t v247 = 0;
                  sub_2483F2450(&v245, *v115, v10[3 * v114 + 1], (uint64_t)(v10[3 * v114 + 1] - (void)*v115) >> 2);
                  long long v242 = 0;
                  long long v243 = 0;
                  uint64_t v244 = 0;
                  sub_2483F2450(&v242, v115[3], (uint64_t)v115[4], ((unsigned char *)v115[4] - (unsigned char *)v115[3]) >> 2);
                  BOOL v117 = v245;
                  float v118 = (float)((float)((float)((float)v117[1] * 0.587) + (float)((float)*v117 * 0.299))
                               + (float)((float)v245[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
                    float v118 = v118 * (float)((float)v245[3] + 1.0);
                  }
                  float v119 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                               + (float)((float)v242[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
                    float v119 = v119 * (float)((float)v242[3] + 1.0);
                  }
                  long long v243 = v242;
                  operator delete(v242);
                  long long v246 = v117;
                  operator delete(v117);
                  if (v118 < v119)
                  {
                    v115 += 3;
                    uint64_t v114 = v116;
                  }
                }
                int64_t v113 = v190;
                v120 = (const void **)&v10[3 * v190];
                long long v239 = 0;
                long long v240 = 0;
                uint64_t v241 = 0;
                sub_2483F2450(&v239, *v115, (uint64_t)v115[1], ((unsigned char *)v115[1] - (unsigned char *)*v115) >> 2);
                uint64_t v236 = 0;
                long long v237 = 0;
                uint64_t v238 = 0;
                sub_2483F2450(&v236, *v120, (uint64_t)v120[1], ((unsigned char *)v120[1] - (unsigned char *)*v120) >> 2);
                uint64_t v121 = v239;
                float v122 = (float)((float)((float)((float)v121[1] * 0.587) + (float)((float)*v121 * 0.299))
                             + (float)((float)v239[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
                  float v122 = v122 * (float)((float)v239[3] + 1.0);
                }
                float v123 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                             + (float)((float)v236[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
                  float v123 = v123 * (float)((float)v236[3] + 1.0);
                }
                long long v237 = v236;
                operator delete(v236);
                long long v240 = v121;
                operator delete(v121);
                if (v122 >= v123)
                {
                  v124 = *v120;
                  long long v125 = *(_OWORD *)(v120 + 1);
                  v120[1] = 0;
                  v120[2] = 0;
                  unsigned char *v120 = 0;
                  long long v188 = v125;
                  uint64_t v197 = v125;
                  unint64_t v193 = (uint64_t)(v125 - (void)v124) >> 2;
                  while (1)
                  {
                    v126 = v115;
                    v127 = (void *)*v120;
                    if (*v120)
                    {
                      v120[1] = v127;
                      operator delete(v127);
                      unsigned char *v120 = 0;
                      v120[1] = 0;
                      v120[2] = 0;
                    }
                    *(_OWORD *)v120 = *(_OWORD *)v115;
                    v120[2] = v115[2];
                    *int v115 = 0;
                    v115[1] = 0;
                    v115[2] = 0;
                    if ((uint64_t)((v12 - 2) >> 1) < v114) {
                      break;
                    }
                    uint64_t v128 = 2 * v114;
                    uint64_t v129 = (2 * v114) | 1;
                    uint64_t v114 = v129;
                    int v115 = (const void **)&v10[3 * v129];
                    uint64_t v130 = v128 + 2;
                    if (v128 + 2 < (uint64_t)v12)
                    {
                      long long v233 = 0;
                      uint64_t v234 = 0;
                      uint64_t v235 = 0;
                      sub_2483F2450(&v233, *v115, v10[3 * v129 + 1], (uint64_t)(v10[3 * v129 + 1] - (void)*v115) >> 2);
                      uint64_t v230 = 0;
                      uint64_t v231 = 0;
                      uint64_t v232 = 0;
                      sub_2483F2450(&v230, v115[3], (uint64_t)v115[4], ((unsigned char *)v115[4] - (unsigned char *)v115[3]) >> 2);
                      v131 = v233;
                      float v132 = (float)((float)((float)((float)v233[1] * 0.587) + (float)((float)*v233 * 0.299))
                                   + (float)((float)v233[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v234 - (char *)v233) >= 0xD) {
                        float v132 = v132 * (float)((float)v233[3] + 1.0);
                      }
                      float v133 = (float)((float)((float)((float)v230[1] * 0.587) + (float)((float)*v230 * 0.299))
                                   + (float)((float)v230[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v231 - (char *)v230) >= 0xD) {
                        float v133 = v133 * (float)((float)v230[3] + 1.0);
                      }
                      uint64_t v231 = v230;
                      operator delete(v230);
                      uint64_t v234 = v131;
                      operator delete(v131);
                      if (v132 < v133)
                      {
                        v115 += 3;
                        uint64_t v114 = v130;
                      }
                    }
                    uint64_t v227 = 0;
                    uint64_t v228 = 0;
                    uint64_t v229 = 0;
                    sub_2483F2450(&v227, *v115, (uint64_t)v115[1], ((unsigned char *)v115[1] - (unsigned char *)*v115) >> 2);
                    unint64_t v224 = 0;
                    v225 = 0;
                    uint64_t v226 = 0;
                    sub_2483F2450(&v224, v124, v197, v193);
                    uint64_t v10 = v203;
                    v134 = v227;
                    float v135 = (float)((float)((float)((float)v227[1] * 0.587) + (float)((float)*v227 * 0.299))
                                 + (float)((float)v227[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v228 - (char *)v227) >= 0xD) {
                      float v135 = v135 * (float)((float)v227[3] + 1.0);
                    }
                    float v136 = (float)((float)((float)((float)v224[1] * 0.587) + (float)((float)*v224 * 0.299))
                                 + (float)((float)v224[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v225 - (char *)v224) >= 0xD) {
                      float v136 = v136 * (float)((float)v224[3] + 1.0);
                    }
                    v225 = v224;
                    operator delete(v224);
                    uint64_t v228 = v134;
                    operator delete(v134);
                    v120 = v126;
                    if (v135 < v136)
                    {
                      v137 = (void *)*v126;
                      if (*v126)
                      {
                        v126[1] = v137;
                        operator delete(v137);
                        unsigned char *v126 = 0;
                        v126[1] = 0;
                        v126[2] = 0;
                      }
                      break;
                    }
                  }
                  unsigned char *v126 = v124;
                  *(_OWORD *)(v126 + 1) = v188;
                  int64_t v113 = v190;
                }
              }
              int64_t v112 = v113 - 1;
              int64_t v111 = (v12 - 2) >> 1;
            }
            while (v113);
            int64_t v138 = v11 / 0x18uLL;
            unint64_t v139 = v200;
            do
            {
              unint64_t v201 = v139;
              uint64_t v140 = 0;
              uint64_t v141 = (const void *)*v10;
              uint64_t v194 = (const void *)v10[2];
              v198 = (const void *)v10[1];
              v10[2] = 0;
              v142 = (void **)v10;
              *uint64_t v10 = 0;
              v10[1] = 0;
              do
              {
                uint64_t v143 = v140 + 1;
                uint64_t v144 = (const void **)&v142[3 * v140 + 3];
                uint64_t v145 = 2 * v140;
                uint64_t v140 = (2 * v140) | 1;
                uint64_t v146 = v145 + 2;
                if (v145 + 2 < v138)
                {
                  long long v245 = 0;
                  long long v246 = 0;
                  uint64_t v247 = 0;
                  sub_2483F2450(&v245, *v144, (uint64_t)v142[3 * v143 + 1], ((unsigned char *)v142[3 * v143 + 1] - (unsigned char *)*v144) >> 2);
                  long long v242 = 0;
                  long long v243 = 0;
                  uint64_t v244 = 0;
                  sub_2483F2450(&v242, v144[3], (uint64_t)v144[4], ((unsigned char *)v144[4] - (unsigned char *)v144[3]) >> 2);
                  unint64_t v147 = v245;
                  float v148 = (float)((float)((float)((float)v147[1] * 0.587) + (float)((float)*v147 * 0.299))
                               + (float)((float)v147[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
                    float v148 = v148 * (float)((float)v245[3] + 1.0);
                  }
                  float v149 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                               + (float)((float)v242[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
                    float v149 = v149 * (float)((float)v242[3] + 1.0);
                  }
                  long long v243 = v242;
                  operator delete(v242);
                  long long v246 = v147;
                  operator delete(v147);
                  if (v148 < v149)
                  {
                    v144 += 3;
                    uint64_t v140 = v146;
                  }
                }
                v150 = *v142;
                if (*v142)
                {
                  v142[1] = v150;
                  operator delete(v150);
                  *v142 = 0;
                  v142[1] = 0;
                  v142[2] = 0;
                }
                *(_OWORD *)v142 = *(_OWORD *)v144;
                v142[2] = (void *)v144[2];
                *uint64_t v144 = 0;
                v144[1] = 0;
                v144[2] = 0;
                v142 = (void **)v144;
              }
              while (v140 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
              unint64_t v151 = v201 - 24;
              v152 = (void *)*v144;
              if (v144 == (const void **)(v201 - 24))
              {
                uint64_t v10 = v203;
                if (v152)
                {
                  v144[1] = v152;
                  operator delete(v152);
                  *uint64_t v144 = 0;
                  v144[1] = 0;
                  v144[2] = 0;
                }
                *uint64_t v144 = v141;
                v144[1] = v198;
                v144[2] = v194;
              }
              else
              {
                if (v152)
                {
                  v144[1] = v152;
                  operator delete(v152);
                  *uint64_t v144 = 0;
                  v144[1] = 0;
                  v144[2] = 0;
                }
                *(_OWORD *)uint64_t v144 = *(_OWORD *)(v201 - 24);
                v144[2] = *(const void **)(v201 - 8);
                *(void *)(v201 - 24) = v141;
                *(void *)(v201 - 16) = v198;
                *(void *)(v201 - 8) = v194;
                uint64_t v153 = (char *)v144 - (char *)v203 + 24;
                if (v153 >= 25)
                {
                  unint64_t v154 = (v153 / 0x18uLL - 2) >> 1;
                  unint64_t v155 = (const void **)&v203[3 * v154];
                  long long v245 = 0;
                  long long v246 = 0;
                  uint64_t v247 = 0;
                  sub_2483F2450(&v245, *v155, (uint64_t)v155[1], ((unsigned char *)v155[1] - (unsigned char *)*v155) >> 2);
                  long long v242 = 0;
                  long long v243 = 0;
                  uint64_t v244 = 0;
                  sub_2483F2450(&v242, *v144, (uint64_t)v144[1], ((unsigned char *)v144[1] - (unsigned char *)*v144) >> 2);
                  uint64_t v156 = v245;
                  float v157 = (float)((float)((float)((float)v156[1] * 0.587) + (float)((float)*v156 * 0.299))
                               + (float)((float)v156[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
                    float v157 = v157 * (float)((float)v245[3] + 1.0);
                  }
                  float v158 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                               + (float)((float)v242[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
                    float v158 = v158 * (float)((float)v242[3] + 1.0);
                  }
                  long long v243 = v242;
                  operator delete(v242);
                  long long v246 = v156;
                  operator delete(v156);
                  if (v157 < v158)
                  {
                    unint64_t v159 = v201 - 24;
                    int v160 = *v144;
                    long long v161 = *(_OWORD *)(v144 + 1);
                    v144[1] = 0;
                    v144[2] = 0;
                    *uint64_t v144 = 0;
                    long long v199 = v161;
                    uint64_t v162 = v161;
                    unint64_t v202 = (uint64_t)(v161 - (void)v160) >> 2;
                    while (1)
                    {
                      uint64_t v163 = v155;
                      uint64_t v164 = (void *)*v144;
                      if (*v144)
                      {
                        v144[1] = v164;
                        operator delete(v164);
                        *uint64_t v144 = 0;
                        v144[1] = 0;
                        v144[2] = 0;
                      }
                      *(_OWORD *)uint64_t v144 = *(_OWORD *)v155;
                      v144[2] = v155[2];
                      *unint64_t v155 = 0;
                      v155[1] = 0;
                      v155[2] = 0;
                      if (!v154) {
                        break;
                      }
                      unint64_t v154 = (v154 - 1) >> 1;
                      unint64_t v155 = (const void **)&v203[3 * v154];
                      long long v239 = 0;
                      long long v240 = 0;
                      uint64_t v241 = 0;
                      sub_2483F2450(&v239, *v155, (uint64_t)v155[1], ((unsigned char *)v155[1] - (unsigned char *)*v155) >> 2);
                      uint64_t v236 = 0;
                      long long v237 = 0;
                      uint64_t v238 = 0;
                      sub_2483F2450(&v236, v160, v162, v202);
                      uint64_t v165 = v239;
                      float v166 = (float)((float)((float)((float)v165[1] * 0.587) + (float)((float)*v165 * 0.299))
                                   + (float)((float)v165[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
                        float v166 = v166 * (float)((float)v239[3] + 1.0);
                      }
                      float v167 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                                   + (float)((float)v236[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
                        float v167 = v167 * (float)((float)v236[3] + 1.0);
                      }
                      long long v237 = v236;
                      operator delete(v236);
                      long long v240 = v165;
                      operator delete(v165);
                      uint64_t v144 = v163;
                      if (v166 >= v167)
                      {
                        v168 = (void *)*v163;
                        if (*v163)
                        {
                          v163[1] = v168;
                          operator delete(v168);
                          *uint64_t v163 = 0;
                          v163[1] = 0;
                          v163[2] = 0;
                        }
                        break;
                      }
                    }
                    *uint64_t v163 = v160;
                    *(_OWORD *)(v163 + 1) = v199;
                    unint64_t v151 = v159;
                  }
                }
                uint64_t v10 = v203;
              }
              unint64_t v139 = v151;
            }
            while (v138-- > 2);
          }
          return;
        }
        unint64_t v13 = v12 >> 1;
        unint64_t v14 = (_OWORD *)(v9 + 24 * (v12 >> 1));
        if ((unint64_t)v11 >= 0xC01)
        {
          sub_2484A9A50(v9, v9 + 24 * (v12 >> 1), v192);
          uint64_t v15 = 3 * v13;
          unint64_t v16 = v9 + 24 * v13;
          sub_2484A9A50(v9 + 24, v16 - 24, v189);
          sub_2484A9A50(v9 + 48, v9 + 24 + 8 * v15, v187);
          sub_2484A9A50(v16 - 24, (uint64_t)v14, v9 + 24 + 8 * v15);
          long long v17 = *(_OWORD *)v9;
          *(_OWORD *)unint64_t v9 = *v14;
          *unint64_t v14 = v17;
          uint64_t v18 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = v18;
        }
        else
        {
          sub_2484A9A50(v9 + 24 * (v12 >> 1), v9, v192);
        }
        --a3;
        if (a4) {
          break;
        }
        uint64_t v209 = 0;
        v210 = 0;
        uint64_t v211 = 0;
        sub_2483F2450(&v209, *(const void **)(v9 - 24), *(void *)(v9 - 16), (uint64_t)(*(void *)(v9 - 16) - *(void *)(v9 - 24)) >> 2);
        uint64_t v206 = 0;
        v207 = 0;
        uint64_t v208 = 0;
        sub_2483F2450(&v206, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
        int v19 = v209;
        float v20 = (float)((float)((float)((float)v209[1] * 0.587) + (float)((float)*v209 * 0.299))
                    + (float)((float)v209[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v210 - (char *)v209) >= 0xD) {
          float v20 = v20 * (float)((float)v209[3] + 1.0);
        }
        float v21 = (float)((float)((float)((float)v206[1] * 0.587) + (float)((float)*v206 * 0.299))
                    + (float)((float)v206[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v207 - (char *)v206) >= 0xD) {
          float v21 = v21 * (float)((float)v206[3] + 1.0);
        }
        v207 = v206;
        operator delete(v206);
        v210 = v19;
        operator delete(v19);
        if (v20 < v21) {
          break;
        }
        uint64_t v59 = *(const void **)v9;
        long long v60 = *(_OWORD *)(v9 + 8);
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)unint64_t v9 = 0;
        long long v245 = 0;
        long long v246 = 0;
        uint64_t v247 = 0;
        long long v196 = v60;
        uint64_t v61 = v60;
        unint64_t v62 = (uint64_t)(v60 - (void)v59) >> 2;
        sub_2483F2450(&v245, v59, v60, v62);
        long long v242 = 0;
        long long v243 = 0;
        uint64_t v244 = 0;
        sub_2483F2450(&v242, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 2);
        v63 = v245;
        float v64 = (float)((float)((float)((float)v63[1] * 0.587) + (float)((float)*v63 * 0.299))
                    + (float)((float)v63[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
          float v64 = v64 * (float)((float)v245[3] + 1.0);
        }
        float v65 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                    + (float)((float)v242[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
          float v65 = v65 * (float)((float)v242[3] + 1.0);
        }
        long long v243 = v242;
        operator delete(v242);
        long long v246 = v63;
        operator delete(v63);
        if (v64 >= v65)
        {
          for (v9 += 24; v9 < a2; v9 += 24)
          {
            long long v239 = 0;
            long long v240 = 0;
            uint64_t v241 = 0;
            sub_2483F2450(&v239, v59, v61, v62);
            uint64_t v236 = 0;
            long long v237 = 0;
            uint64_t v238 = 0;
            sub_2483F2450(&v236, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
            v83 = v239;
            float v84 = (float)((float)((float)((float)v83[1] * 0.587) + (float)((float)*v83 * 0.299))
                        + (float)((float)v83[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
              float v84 = v84 * (float)((float)v239[3] + 1.0);
            }
            float v85 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                        + (float)((float)v236[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
              float v85 = v85 * (float)((float)v236[3] + 1.0);
            }
            long long v237 = v236;
            operator delete(v236);
            long long v240 = v83;
            operator delete(v83);
            if (v84 < v85) {
              break;
            }
          }
        }
        else
        {
          do
          {
            long long v239 = 0;
            long long v240 = 0;
            uint64_t v241 = 0;
            sub_2483F2450(&v239, v59, v61, v62);
            uint64_t v236 = 0;
            long long v237 = 0;
            uint64_t v238 = 0;
            sub_2483F2450(&v236, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
            uint64_t v66 = v239;
            float v67 = (float)((float)((float)((float)v66[1] * 0.587) + (float)((float)*v66 * 0.299))
                        + (float)((float)v66[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
              float v67 = v67 * (float)((float)v239[3] + 1.0);
            }
            float v68 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                        + (float)((float)v236[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
              float v68 = v68 * (float)((float)v236[3] + 1.0);
            }
            v9 += 24;
            long long v237 = v236;
            operator delete(v236);
            long long v240 = v66;
            operator delete(v66);
          }
          while (v67 >= v68);
        }
        uint64_t v69 = (void *)a2;
        if (v9 < a2)
        {
          uint64_t v69 = (void *)a2;
          do
          {
            long long v233 = 0;
            uint64_t v234 = 0;
            uint64_t v235 = 0;
            sub_2483F2450(&v233, v59, v61, v62);
            uint64_t v230 = 0;
            uint64_t v231 = 0;
            uint64_t v232 = 0;
            sub_2483F2450(&v230, (const void *)*(v69 - 3), *(v69 - 2), (uint64_t)(*(v69 - 2) - *(v69 - 3)) >> 2);
            v70 = v233;
            float v71 = (float)((float)((float)((float)v233[1] * 0.587) + (float)((float)*v233 * 0.299))
                        + (float)((float)v233[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v234 - (char *)v233) >= 0xD) {
              float v71 = v71 * (float)((float)v233[3] + 1.0);
            }
            float v72 = (float)((float)((float)((float)v230[1] * 0.587) + (float)((float)*v230 * 0.299))
                        + (float)((float)v230[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v231 - (char *)v230) >= 0xD) {
              float v72 = v72 * (float)((float)v230[3] + 1.0);
            }
            v69 -= 3;
            uint64_t v231 = v230;
            operator delete(v230);
            uint64_t v234 = v70;
            operator delete(v70);
          }
          while (v71 < v72);
        }
        while (v9 < (unint64_t)v69)
        {
          uint64_t v73 = *(const void **)v9;
          *(void *)unint64_t v9 = *v69;
          *uint64_t v69 = v73;
          uint64_t v74 = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = v69[1];
          v69[1] = v74;
          uint64_t v75 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = v69[2];
          v69[2] = v75;
          do
          {
            uint64_t v227 = 0;
            uint64_t v228 = 0;
            uint64_t v229 = 0;
            sub_2483F2450(&v227, v59, v61, v62);
            unint64_t v224 = 0;
            v225 = 0;
            uint64_t v226 = 0;
            sub_2483F2450(&v224, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
            v76 = v227;
            float v77 = (float)((float)((float)((float)v227[1] * 0.587) + (float)((float)*v227 * 0.299))
                        + (float)((float)v227[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v228 - (char *)v227) >= 0xD) {
              float v77 = v77 * (float)((float)v227[3] + 1.0);
            }
            float v78 = (float)((float)((float)((float)v224[1] * 0.587) + (float)((float)*v224 * 0.299))
                        + (float)((float)v224[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v225 - (char *)v224) >= 0xD) {
              float v78 = v78 * (float)((float)v224[3] + 1.0);
            }
            v9 += 24;
            v225 = v224;
            operator delete(v224);
            uint64_t v228 = v76;
            operator delete(v76);
          }
          while (v77 >= v78);
          do
          {
            long long v221 = 0;
            unint64_t v222 = 0;
            uint64_t v223 = 0;
            sub_2483F2450(&v221, v59, v61, v62);
            unint64_t v218 = 0;
            unint64_t v219 = 0;
            uint64_t v220 = 0;
            sub_2483F2450(&v218, (const void *)*(v69 - 3), *(v69 - 2), (uint64_t)(*(v69 - 2) - *(v69 - 3)) >> 2);
            uint64_t v79 = v221;
            float v80 = (float)((float)((float)((float)v221[1] * 0.587) + (float)((float)*v221 * 0.299))
                        + (float)((float)v221[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v222 - (char *)v221) >= 0xD) {
              float v80 = v80 * (float)((float)v221[3] + 1.0);
            }
            float v81 = (float)((float)((float)((float)v218[1] * 0.587) + (float)((float)*v218 * 0.299))
                        + (float)((float)v218[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v219 - (char *)v218) >= 0xD) {
              float v81 = v81 * (float)((float)v218[3] + 1.0);
            }
            v69 -= 3;
            unint64_t v219 = v218;
            operator delete(v218);
            unint64_t v222 = v79;
            operator delete(v79);
          }
          while (v80 < v81);
        }
        uint64_t v82 = *v203;
        BOOL v4 = v9 - 24 >= (unint64_t)v203;
        BOOL v5 = v9 - 24 == (void)v203;
        if ((void **)(v9 - 24) == v203)
        {
          if (!v82) {
            goto LABEL_108;
          }
          *(void *)(v9 - 16) = v82;
          operator delete(v82);
        }
        else
        {
          if (v82)
          {
            v203[1] = v82;
            operator delete(v82);
            *unint64_t v203 = 0;
            v203[1] = 0;
            v203[2] = 0;
          }
          *(_OWORD *)unint64_t v203 = *(_OWORD *)(v9 - 24);
          v203[2] = *(void **)(v9 - 8);
        }
        *(void *)(v9 - 24) = 0;
        *(void *)(v9 - 16) = 0;
        *(void *)(v9 - 8) = 0;
LABEL_108:
        a4 = 0;
        *(void *)(v9 - 24) = v59;
        *(_OWORD *)(v9 - 16) = v196;
      }
      unint64_t v22 = *(const void **)v9;
      long long v23 = *(_OWORD *)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      unint64_t v24 = v9;
      long long v195 = v23;
      uint64_t v25 = v23;
      unint64_t v26 = (uint64_t)(v23 - (void)v22) >> 2;
      do
      {
        long long v245 = 0;
        long long v246 = 0;
        uint64_t v247 = 0;
        v27 = *(const void **)(v24 + 24);
        uint64_t v28 = *(void *)(v24 + 32);
        v24 += 24;
        sub_2483F2450(&v245, v27, v28, (v28 - (uint64_t)v27) >> 2);
        long long v242 = 0;
        long long v243 = 0;
        uint64_t v244 = 0;
        sub_2483F2450(&v242, v22, v25, v26);
        int v29 = v245;
        float v30 = (float)((float)((float)((float)v29[1] * 0.587) + (float)((float)*v29 * 0.299))
                    + (float)((float)v29[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v246 - (char *)v245) >= 0xD) {
          float v30 = v30 * (float)((float)v245[3] + 1.0);
        }
        float v31 = (float)((float)((float)((float)v242[1] * 0.587) + (float)((float)*v242 * 0.299))
                    + (float)((float)v242[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v243 - (char *)v242) >= 0xD) {
          float v31 = v31 * (float)((float)v242[3] + 1.0);
        }
        long long v243 = v242;
        operator delete(v242);
        long long v246 = v29;
        operator delete(v29);
      }
      while (v30 < v31);
      v32 = (void *)a2;
      if ((void **)(v24 - 24) == v203)
      {
        v32 = (void *)a2;
        if (v24 < a2)
        {
          unint64_t v38 = v192;
          do
          {
            long long v239 = 0;
            long long v240 = 0;
            uint64_t v241 = 0;
            sub_2483F2450(&v239, *(const void **)v38, *(void *)(v38 + 8), (uint64_t)(*(void *)(v38 + 8) - *(void *)v38) >> 2);
            uint64_t v236 = 0;
            long long v237 = 0;
            uint64_t v238 = 0;
            sub_2483F2450(&v236, v22, v25, v26);
            uint64_t v39 = v239;
            float v40 = (float)((float)((float)((float)v39[1] * 0.587) + (float)((float)*v39 * 0.299))
                        + (float)((float)v39[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
              float v40 = v40 * (float)((float)v239[3] + 1.0);
            }
            float v41 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                        + (float)((float)v236[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
              float v41 = v41 * (float)((float)v236[3] + 1.0);
            }
            long long v237 = v236;
            operator delete(v236);
            long long v240 = v39;
            operator delete(v39);
            unint64_t v42 = v38 - 24;
            if (v24 >= v38) {
              break;
            }
            v38 -= 24;
          }
          while (v40 >= v41);
          v32 = (void *)(v42 + 24);
        }
      }
      else
      {
        do
        {
          long long v239 = 0;
          long long v240 = 0;
          uint64_t v241 = 0;
          signed int v33 = (const void *)*(v32 - 3);
          uint64_t v34 = *(v32 - 2);
          v32 -= 3;
          sub_2483F2450(&v239, v33, v34, (v34 - (uint64_t)v33) >> 2);
          uint64_t v236 = 0;
          long long v237 = 0;
          uint64_t v238 = 0;
          sub_2483F2450(&v236, v22, v25, v26);
          uint64_t v35 = v239;
          float v36 = (float)((float)((float)((float)v35[1] * 0.587) + (float)((float)*v35 * 0.299))
                      + (float)((float)v35[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v240 - (char *)v239) >= 0xD) {
            float v36 = v36 * (float)((float)v239[3] + 1.0);
          }
          float v37 = (float)((float)((float)((float)v236[1] * 0.587) + (float)((float)*v236 * 0.299))
                      + (float)((float)v236[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v237 - (char *)v236) >= 0xD) {
            float v37 = v37 * (float)((float)v236[3] + 1.0);
          }
          long long v237 = v236;
          operator delete(v236);
          long long v240 = v35;
          operator delete(v35);
        }
        while (v36 >= v37);
      }
      unint64_t v9 = v24;
      if (v24 < (unint64_t)v32)
      {
        v43 = v32;
        do
        {
          v44 = *(const void **)v9;
          *(void *)unint64_t v9 = *v43;
          void *v43 = v44;
          uint64_t v45 = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = v43[1];
          v43[1] = v45;
          uint64_t v46 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = v43[2];
          v43[2] = v46;
          do
          {
            long long v233 = 0;
            uint64_t v234 = 0;
            uint64_t v235 = 0;
            int v47 = *(const void **)(v9 + 24);
            uint64_t v48 = *(void *)(v9 + 32);
            v9 += 24;
            sub_2483F2450(&v233, v47, v48, (v48 - (uint64_t)v47) >> 2);
            uint64_t v230 = 0;
            uint64_t v231 = 0;
            uint64_t v232 = 0;
            sub_2483F2450(&v230, v22, v25, v26);
            uint64_t v49 = v233;
            float v50 = (float)((float)((float)((float)v233[1] * 0.587) + (float)((float)*v233 * 0.299))
                        + (float)((float)v233[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v234 - (char *)v233) >= 0xD) {
              float v50 = v50 * (float)((float)v233[3] + 1.0);
            }
            float v51 = (float)((float)((float)((float)v230[1] * 0.587) + (float)((float)*v230 * 0.299))
                        + (float)((float)v230[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v231 - (char *)v230) >= 0xD) {
              float v51 = v51 * (float)((float)v230[3] + 1.0);
            }
            uint64_t v231 = v230;
            operator delete(v230);
            uint64_t v234 = v49;
            operator delete(v49);
          }
          while (v50 < v51);
          do
          {
            uint64_t v227 = 0;
            uint64_t v228 = 0;
            uint64_t v229 = 0;
            v52 = (const void *)*(v43 - 3);
            uint64_t v53 = *(v43 - 2);
            v43 -= 3;
            sub_2483F2450(&v227, v52, v53, (v53 - (uint64_t)v52) >> 2);
            unint64_t v224 = 0;
            v225 = 0;
            uint64_t v226 = 0;
            sub_2483F2450(&v224, v22, v25, v26);
            v54 = v227;
            float v55 = (float)((float)((float)((float)v227[1] * 0.587) + (float)((float)*v227 * 0.299))
                        + (float)((float)v227[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v228 - (char *)v227) >= 0xD) {
              float v55 = v55 * (float)((float)v227[3] + 1.0);
            }
            float v56 = (float)((float)((float)((float)v224[1] * 0.587) + (float)((float)*v224 * 0.299))
                        + (float)((float)v224[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v225 - (char *)v224) >= 0xD) {
              float v56 = v56 * (float)((float)v224[3] + 1.0);
            }
            v225 = v224;
            operator delete(v224);
            uint64_t v228 = v54;
            operator delete(v54);
          }
          while (v55 >= v56);
        }
        while (v9 < (unint64_t)v43);
      }
      a1 = v203;
      uint64_t v57 = *v203;
      if ((void **)(v9 - 24) == v203)
      {
        a2 = v200;
        if (!v57) {
          goto LABEL_59;
        }
        *(void *)(v9 - 16) = v57;
        operator delete(v57);
      }
      else
      {
        if (v57)
        {
          v203[1] = v57;
          operator delete(v57);
          *unint64_t v203 = 0;
          v203[1] = 0;
          v203[2] = 0;
        }
        *(_OWORD *)unint64_t v203 = *(_OWORD *)(v9 - 24);
        v203[2] = *(void **)(v9 - 8);
        a2 = v200;
      }
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
LABEL_59:
      *(void *)(v9 - 24) = v22;
      *(_OWORD *)(v9 - 16) = v195;
      if (v24 < (unint64_t)v32) {
        goto LABEL_62;
      }
      BOOL v58 = sub_2484AA978((uint64_t)v203, v9 - 24);
      if (sub_2484AA978(v9, a2)) {
        break;
      }
      if (!v58)
      {
LABEL_62:
        sub_2484A740C(v203, v9 - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    a2 = v9 - 24;
    if (!v58) {
      continue;
    }
    break;
  }
}

void sub_2484A930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  v54 = *(void **)(v52 - 176);
  if (v54) {
    operator delete(v54);
  }
  if (v51) {
    operator delete(v51);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2484A9458(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_2483E92E8();
    }
    BOOL v4 = (char *)sub_2483F04AC(a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2484A94CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484A94E8(unsigned int **a1, int a2)
{
  BOOL v4 = *a1;
  if (**a1)
  {
    char v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = a1[1];
    uint64_t v8 = a1[3];
    unsigned int v9 = ~a2 % 0x8Fu;
    uint64_t v10 = &dword_248553038[3 * ((v9 + 1) >> 1)];
    uint64_t v11 = v9 & 1;
    unint64_t v12 = *(int **)v7;
    unint64_t v13 = (int *)a1[5];
    unint64_t v14 = (int *)a1[6];
    uint64_t v15 = (_DWORD *)(*(void *)a1[2] + 4 * a2);
    uint64_t v16 = 4 * (int)*a1[4];
    while (1)
    {
      int v17 = *v13;
      if (a2 < 0) {
        break;
      }
      int v18 = *v8 + 64;
      if (a2 >= (int)*v8 && a2 < v18)
      {
        if (v6 <= 2)
        {
          if ((int)(a2 - *v8) >> v5 <= 0) {
            int v24 = -(-((int)(a2 - *v8) >> v5) & 3);
          }
          else {
            int v24 = ((int)(a2 - *v8) >> v5) & 3;
          }
          unint64_t v25 = (unint64_t)(((uint64_t)v24 << v17) - v24) >> 2;
          if (v17 <= 3) {
            LOBYTE(v17) = 3;
          }
          LODWORD(v21) = (1 << (v17 - 3)) + v25;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      int v20 = a2 - v18;
      if (a2 >= v18)
      {
        if (v6 <= 2)
        {
          int v26 = v20 / 25;
          if (v6 == 1) {
            v20 /= 5;
          }
          if (v6 == 2) {
            int v20 = v26;
          }
          unint64_t v21 = (unint64_t)(((uint64_t)(v20 % 5) << v17) - v20 % 5) >> 2;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      LODWORD(v21) = *v15;
LABEL_24:
      v12[v6] = v21;
      if (*v14 > a2) {
        v12[v6] = *(_DWORD *)(*(void *)a1[7] + 4 * v6) + v21;
      }
      ++v6;
      v5 += 2;
      uint64_t v15 = (_DWORD *)((char *)v15 + v16);
      if (v6 >= *v4) {
        goto LABEL_34;
      }
    }
    if (v6 <= 2)
    {
      BOOL v22 = __OFSUB__(v17, 8);
      int v23 = v17 - 8;
      if ((v23 < 0) ^ v22 | (v23 == 0)) {
        LOBYTE(v23) = 0;
      }
      LODWORD(v21) = (dword_248553398[v11] * v10[v6]) << v23;
      goto LABEL_24;
    }
LABEL_23:
    LODWORD(v21) = 0;
    goto LABEL_24;
  }
  unint64_t v13 = (int *)a1[5];
  unint64_t v7 = a1[1];
LABEL_34:
  double v27 = 32.0
      / (double)(1 << ((2 * *(unsigned char *)v13 - 16) & ~((2 * *v13 - 16) >> 31)));
  uint64_t v28 = *(int **)v7;
  float v29 = v27 * sub_2484A48B8(*(float **)a1[8], *((float **)a1[8] + 1), *(int **)v7);
  if (a2 == -1)
  {
    int v30 = -1023934464;
    goto LABEL_39;
  }
  if (a2 < 0)
  {
    float v31 = (float)(-2 * a2);
    goto LABEL_45;
  }
  if ((int)*a1[6] > a2)
  {
    int v30 = 1132068864;
LABEL_39:
    float v31 = *(float *)&v30;
    goto LABEL_45;
  }
  int v32 = *a1[3];
  float v31 = 150.0;
  float v33 = 256.0;
  if (v32 + 64 > a2) {
    float v33 = 70.0;
  }
  if (v32 <= a2) {
    float v31 = v33;
  }
LABEL_45:
  float v34 = v31 + v29;
  uint64_t v35 = (float *)a1[9];
  if (v34 < *v35)
  {
    float v36 = (BOOL *)a1[11];
    *a1[10] = a2;
    int v37 = *a1[6];
    *uint64_t v35 = v34;
    *float v36 = v37 > a2;
    unint64_t v38 = (int **)a1[12];
    uint64_t v39 = *v38;
    *unint64_t v38 = v28;
    *(void *)unint64_t v7 = v39;
    float v40 = v38[1];
    v38[1] = (int *)*((void *)v7 + 1);
    *((void *)v7 + 1) = v40;
    float v41 = v38[2];
    v38[2] = (int *)*((void *)v7 + 2);
    *((void *)v7 + 2) = v41;
    unint64_t v42 = *a1;
    if (**a1)
    {
      unint64_t v43 = 0;
      uint64_t v44 = *(void *)a1[8];
      uint64_t v45 = *(void *)a1[7];
      uint64_t v46 = *(void *)a1[13];
      do
      {
        *(_DWORD *)(v46 + 4 * v43) = (int)(float)(*(float *)(v44 + 4 * v43) - (float)*(int *)(v45 + 4 * v43));
        ++v43;
      }
      while (v43 < *v42);
    }
  }
}

uint64_t sub_2484A985C(char *a1, char *a2, int a3, int a4, char a5)
{
  uint64_t v5 = a2 - a1;
  int v6 = 0;
  if (a5)
  {
    if (a2 != a1)
    {
      unint64_t v7 = v5 >> 2;
      int v8 = 1;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      do
      {
        int v9 = *(_DWORD *)a1;
        a1 += 4;
        v6 += ((1 << (a4 - 1)) + 4 * v9) / ~(-1 << a4) * v8;
        v8 *= 5;
        --v7;
      }
      while (v7);
    }
    return (a3 + v6 + 64);
  }
  else
  {
    if (a2 != a1)
    {
      unint64_t v11 = v5 >> 2;
      if (a4 <= 3) {
        char v12 = 3;
      }
      else {
        char v12 = a4;
      }
      int v13 = -1 << (v12 - 3);
      int v14 = 1;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      do
      {
        int v15 = *(_DWORD *)a1;
        a1 += 4;
        int v16 = ((1 << (a4 - 1)) + 4 * ((v15 + v13) & ~((v15 + v13) >> 31))) / ~(-1 << a4);
        if (v16 >= 3) {
          int v16 = 3;
        }
        v6 += v16 * v14;
        v14 *= 4;
        --v11;
      }
      while (v11);
    }
    return (v6 + a3);
  }
}

void sub_2484A9928(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 472;
        sub_2484A99AC(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2484A99AC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    uint64_t v4 = *(void **)(a1 + i + 112);
    if (v4)
    {
      *(void *)(a1 + i + 120) = v4;
      operator delete(v4);
    }
  }
}

uint64_t sub_2484A9A00(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 472;
    sub_2484A99AC(i - 472);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2484A9A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  sub_2483F2450(&v61, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  BOOL v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  sub_2483F2450(&v58, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  int v6 = v61;
  float v7 = (float)((float)((float)((float)v6[1] * 0.587) + (float)((float)*v6 * 0.299)) + (float)((float)v6[2] * 0.114))
     + 0.1;
  if ((unint64_t)((char *)v62 - (char *)v61) >= 0xD) {
    float v7 = v7 * (float)((float)v61[3] + 1.0);
  }
  float v8 = (float)((float)((float)((float)v58[1] * 0.587) + (float)((float)*v58 * 0.299)) + (float)((float)v58[2] * 0.114))
     + 0.1;
  if ((unint64_t)((char *)v59 - (char *)v58) >= 0xD) {
    float v8 = v8 * (float)((float)v58[3] + 1.0);
  }
  uint64_t v59 = v58;
  operator delete(v58);
  unint64_t v62 = v6;
  operator delete(v6);
  if (v7 >= v8)
  {
    float v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_2483F2450(&v55, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    sub_2483F2450(&v52, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    int v15 = v55;
    float v16 = (float)((float)((float)((float)v55[1] * 0.587) + (float)((float)*v55 * 0.299)) + (float)((float)v55[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v56 - (void)v55) >= 0xD) {
      float v16 = v16 * (float)((float)v55[3] + 1.0);
    }
    float v17 = (float)((float)((float)((float)v52[1] * 0.587) + (float)((float)*v52 * 0.299)) + (float)((float)v52[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v53 - (void)v52) >= 0xD) {
      float v17 = v17 * (float)((float)v52[3] + 1.0);
    }
    operator delete(v52);
    operator delete(v15);
    if (v16 < v17)
    {
      int v18 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      uint64_t v19 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v19;
      unint64_t v21 = (uint64_t *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v20;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      sub_2483F2450(&v49, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      sub_2483F2450(&v46, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      BOOL v22 = v49;
      float v23 = (float)((float)((float)((float)v49[1] * 0.587) + (float)((float)*v49 * 0.299))
                  + (float)((float)v49[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v50 - (void)v49) >= 0xD) {
        float v23 = v23 * (float)((float)v49[3] + 1.0);
      }
      float v24 = (float)((float)((float)((float)v46[1] * 0.587) + (float)((float)*v46 * 0.299))
                  + (float)((float)v46[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v47 - (void)v46) >= 0xD) {
        float v24 = v24 * (float)((float)v46[3] + 1.0);
      }
      operator delete(v46);
      operator delete(v22);
      if (v23 < v24)
      {
        unint64_t v25 = *(const void **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v25;
        uint64_t v26 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v26;
        int v13 = (uint64_t *)(a1 + 16);
LABEL_30:
        uint64_t v33 = *v13;
        *int v13 = *v21;
        *unint64_t v21 = v33;
      }
    }
  }
  else
  {
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    sub_2483F2450(&v43, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    float v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    sub_2483F2450(&v40, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    int v9 = v43;
    float v10 = (float)((float)((float)((float)v43[1] * 0.587) + (float)((float)*v43 * 0.299)) + (float)((float)v43[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v44 - (void)v43) >= 0xD) {
      float v10 = v10 * (float)((float)v43[3] + 1.0);
    }
    float v11 = (float)((float)((float)((float)v40[1] * 0.587) + (float)((float)*v40 * 0.299)) + (float)((float)v40[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v41 - (void)v40) >= 0xD) {
      float v11 = v11 * (float)((float)v40[3] + 1.0);
    }
    operator delete(v40);
    operator delete(v9);
    int v13 = (uint64_t *)(a1 + 16);
    char v12 = *(const void **)a1;
    if (v10 < v11)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v12;
      uint64_t v14 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)(a3 + 8);
LABEL_29:
      *(void *)(a3 + 8) = v14;
      unint64_t v21 = (uint64_t *)(a3 + 16);
      goto LABEL_30;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v12;
    uint64_t v27 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v27;
    int v13 = (uint64_t *)(a2 + 16);
    uint64_t v28 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v28;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v37 = 0;
    sub_2483F2450(&v37, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    float v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    sub_2483F2450(&v34, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    float v29 = v37;
    float v30 = (float)((float)((float)((float)v37[1] * 0.587) + (float)((float)*v37 * 0.299)) + (float)((float)v37[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v38 - (void)v37) >= 0xD) {
      float v30 = v30 * (float)((float)v37[3] + 1.0);
    }
    float v31 = (float)((float)((float)((float)v34[1] * 0.587) + (float)((float)*v34 * 0.299)) + (float)((float)v34[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v35 - (void)v34) >= 0xD) {
      float v31 = v31 * (float)((float)v34[3] + 1.0);
    }
    operator delete(v34);
    operator delete(v29);
    if (v30 < v31)
    {
      int v32 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v32;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      goto LABEL_29;
    }
  }
}

void sub_2484AA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484AA074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2484A9A50(a1, a2, a3);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  sub_2483F2450(&v41, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  sub_2483F2450(&v38, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  float v8 = v41;
  float v9 = (float)((float)((float)((float)v41[1] * 0.587) + (float)((float)*v41 * 0.299)) + (float)((float)v41[2] * 0.114))
     + 0.1;
  if ((unint64_t)(v42 - (void)v41) >= 0xD) {
    float v9 = v9 * (float)((float)v41[3] + 1.0);
  }
  float v10 = (float)((float)((float)((float)v38[1] * 0.587) + (float)((float)*v38 * 0.299)) + (float)((float)v38[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v39 - (void)v38) >= 0xD) {
    float v10 = v10 * (float)((float)v38[3] + 1.0);
  }
  operator delete(v38);
  operator delete(v8);
  if (v9 < v10)
  {
    float v11 = *(const void **)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v12;
    uint64_t v13 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v13;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
    sub_2483F2450(&v35, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    sub_2483F2450(&v32, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v14 = v35;
    float v15 = (float)((float)((float)((float)v35[1] * 0.587) + (float)((float)*v35 * 0.299)) + (float)((float)v35[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v36 - (void)v35) >= 0xD) {
      float v15 = v15 * (float)((float)v35[3] + 1.0);
    }
    float v16 = (float)((float)((float)((float)v32[1] * 0.587) + (float)((float)*v32 * 0.299)) + (float)((float)v32[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v33 - (void)v32) >= 0xD) {
      float v16 = v16 * (float)((float)v32[3] + 1.0);
    }
    operator delete(v32);
    operator delete(v14);
    if (v15 < v16)
    {
      float v17 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v17;
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v18;
      uint64_t v19 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v19;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      float v29 = 0;
      sub_2483F2450(&v29, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      sub_2483F2450(&v26, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      uint64_t v20 = v29;
      float v21 = (float)((float)((float)((float)v29[1] * 0.587) + (float)((float)*v29 * 0.299))
                  + (float)((float)v29[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v30 - (void)v29) >= 0xD) {
        float v21 = v21 * (float)((float)v29[3] + 1.0);
      }
      float v22 = (float)((float)((float)((float)v26[1] * 0.587) + (float)((float)*v26 * 0.299))
                  + (float)((float)v26[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v27 - (void)v26) >= 0xD) {
        float v22 = v22 * (float)((float)v26[3] + 1.0);
      }
      operator delete(v26);
      operator delete(v20);
      if (v21 < v22)
      {
        float v23 = *(const void **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v23;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v24;
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v25;
      }
    }
  }
}

void sub_2484AA418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484AA460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2484AA074(a1, a2, a3, a4);
  float v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  sub_2483F2450(&v55, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  sub_2483F2450(&v52, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  float v10 = v55;
  float v11 = (float)((float)((float)((float)v10[1] * 0.587) + (float)((float)*v10 * 0.299)) + (float)((float)v10[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v56 - (void)v55) >= 0xD) {
    float v11 = v11 * (float)((float)v55[3] + 1.0);
  }
  float v12 = (float)((float)((float)((float)v52[1] * 0.587) + (float)((float)*v52 * 0.299)) + (float)((float)v52[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v53 - (void)v52) >= 0xD) {
    float v12 = v12 * (float)((float)v52[3] + 1.0);
  }
  operator delete(v52);
  operator delete(v10);
  if (v11 < v12)
  {
    uint64_t v13 = *(const void **)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v14;
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v15;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
    sub_2483F2450(&v49, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    sub_2483F2450(&v46, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    float v16 = v49;
    float v17 = (float)((float)((float)((float)v49[1] * 0.587) + (float)((float)*v49 * 0.299)) + (float)((float)v49[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v50 - (void)v49) >= 0xD) {
      float v17 = v17 * (float)((float)v49[3] + 1.0);
    }
    float v18 = (float)((float)((float)((float)v46[1] * 0.587) + (float)((float)*v46 * 0.299)) + (float)((float)v46[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v47 - (void)v46) >= 0xD) {
      float v18 = v18 * (float)((float)v46[3] + 1.0);
    }
    operator delete(v46);
    operator delete(v16);
    if (v17 < v18)
    {
      uint64_t v19 = *(const void **)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v19;
      uint64_t v20 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v20;
      uint64_t v21 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v21;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v43 = 0;
      sub_2483F2450(&v43, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      sub_2483F2450(&v40, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      float v22 = v43;
      float v23 = (float)((float)((float)((float)v43[1] * 0.587) + (float)((float)*v43 * 0.299))
                  + (float)((float)v43[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v44 - (void)v43) >= 0xD) {
        float v23 = v23 * (float)((float)v43[3] + 1.0);
      }
      float v24 = (float)((float)((float)((float)v40[1] * 0.587) + (float)((float)*v40 * 0.299))
                  + (float)((float)v40[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v41 - (void)v40) >= 0xD) {
        float v24 = v24 * (float)((float)v40[3] + 1.0);
      }
      operator delete(v40);
      operator delete(v22);
      if (v23 < v24)
      {
        uint64_t v25 = *(const void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v25;
        uint64_t v26 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v26;
        uint64_t v27 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v27;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        sub_2483F2450(&v37, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        sub_2483F2450(&v34, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
        uint64_t v28 = v37;
        float v29 = (float)((float)((float)((float)v37[1] * 0.587) + (float)((float)*v37 * 0.299))
                    + (float)((float)v37[2] * 0.114))
            + 0.1;
        if ((unint64_t)(v38 - (void)v37) >= 0xD) {
          float v29 = v29 * (float)((float)v37[3] + 1.0);
        }
        float v30 = (float)((float)((float)((float)v34[1] * 0.587) + (float)((float)*v34 * 0.299))
                    + (float)((float)v34[2] * 0.114))
            + 0.1;
        if ((unint64_t)(v35 - (void)v34) >= 0xD) {
          float v30 = v30 * (float)((float)v34[3] + 1.0);
        }
        operator delete(v34);
        operator delete(v28);
        if (v29 < v30)
        {
          uint64_t v31 = *(const void **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v31;
          uint64_t v32 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v32;
          uint64_t v33 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v33;
        }
      }
    }
  }
}

void sub_2484AA91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2484AA978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      sub_2483F2450(&v51, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 2);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      sub_2483F2450(&v48, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      int v6 = v51;
      float v7 = (float)((float)((float)((float)v51[1] * 0.587) + (float)((float)*v51 * 0.299))
                 + (float)((float)v51[2] * 0.114))
         + 0.1;
      if ((unint64_t)(v52 - (void)v51) >= 0xD) {
        float v7 = v7 * (float)((float)v51[3] + 1.0);
      }
      float v8 = (float)((float)((float)((float)v48[1] * 0.587) + (float)((float)*v48 * 0.299))
                 + (float)((float)v48[2] * 0.114))
         + 0.1;
      if ((unint64_t)(v49 - (void)v48) >= 0xD) {
        float v8 = v8 * (float)((float)v48[3] + 1.0);
      }
      operator delete(v48);
      operator delete(v6);
      if (v7 < v8)
      {
        float v9 = *(const void **)a1;
        *(void *)a1 = *(void *)(v2 - 24);
        *(void *)(v2 - 24) = v9;
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(v2 - 16);
        *(void *)(v2 - 16) = v10;
        uint64_t v11 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(v2 - 8);
        *(void *)(v2 - 8) = v11;
      }
      return 1;
    case 3uLL:
      sub_2484A9A50(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_2484AA074(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_2484AA460(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v12 = a1 + 48;
      sub_2484A9A50(a1, a1 + 24, a1 + 48);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == v2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v33 = v2;
      break;
  }
  while (1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    sub_2483F2450(&v45, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    sub_2483F2450(&v42, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2);
    float v16 = v45;
    float v17 = (float)((float)((float)((float)v45[1] * 0.587) + (float)((float)*v45 * 0.299)) + (float)((float)v45[2] * 0.114))
        + 0.1;
    if ((unint64_t)((char *)v46 - (char *)v45) >= 0xD) {
      float v17 = v17 * (float)((float)v45[3] + 1.0);
    }
    float v18 = (float)((float)((float)((float)v42[1] * 0.587) + (float)((float)*v42 * 0.299)) + (float)((float)v42[2] * 0.114))
        + 0.1;
    if ((unint64_t)((char *)v43 - (char *)v42) >= 0xD) {
      float v18 = v18 * (float)((float)v42[3] + 1.0);
    }
    uint64_t v43 = v42;
    operator delete(v42);
    uint64_t v46 = v16;
    operator delete(v16);
    if (v17 < v18)
    {
      int v35 = v15;
      uint64_t v19 = 0;
      uint64_t v20 = *(const void **)v13;
      long long v21 = *(_OWORD *)(v13 + 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      long long v34 = v21;
      uint64_t v22 = v21;
      unint64_t v23 = (uint64_t)(v21 - (void)v20) >> 2;
      for (uint64_t i = v14; ; i -= 24)
      {
        uint64_t v25 = a1 + i;
        uint64_t v26 = (void *)(a1 + i + 72);
        if (v19)
        {
          *(void *)(v25 + 80) = v19;
          operator delete(v19);
          *uint64_t v26 = 0;
          *(void *)(a1 + i + 80) = 0;
          *(void *)(a1 + i + 88) = 0;
        }
        uint64_t v27 = (void **)(v25 + 48);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)(v25 + 48);
        *(void *)(v25 + 88) = *(void *)(v25 + 64);
        *(void *)(v25 + 48) = 0;
        *(void *)(v25 + 56) = 0;
        *(void *)(v25 + 64) = 0;
        if (i == -48)
        {
          uint64_t v31 = a1;
          goto LABEL_28;
        }
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        sub_2483F2450(&v39, v20, v22, v23);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        sub_2483F2450(&v36, *(const void **)(a1 + i + 24), *(void *)(a1 + i + 32), (uint64_t)(*(void *)(a1 + i + 32) - *(void *)(a1 + i + 24)) >> 2);
        uint64_t v28 = v39;
        float v29 = (float)((float)((float)((float)v39[1] * 0.587) + (float)((float)*v39 * 0.299))
                    + (float)((float)v39[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v40 - (char *)v39) >= 0xD) {
          float v29 = v29 * (float)((float)v39[3] + 1.0);
        }
        float v30 = (float)((float)((float)((float)v36[1] * 0.587) + (float)((float)*v36 * 0.299))
                    + (float)((float)v36[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v37 - (char *)v36) >= 0xD) {
          float v30 = v30 * (float)((float)v36[3] + 1.0);
        }
        uint64_t v37 = v36;
        operator delete(v36);
        uint64_t v40 = v28;
        operator delete(v28);
        if (v29 >= v30) {
          break;
        }
        uint64_t v19 = *v27;
      }
      uint64_t v31 = a1 + i + 48;
LABEL_28:
      uint64_t v2 = v33;
      uint64_t v32 = *(void **)v31;
      if (*(void *)v31)
      {
        *(void *)(v31 + 8) = v32;
        operator delete(v32);
        *(void *)uint64_t v31 = 0;
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
      }
      *(void *)uint64_t v31 = v20;
      *(_OWORD *)(v31 + 8) = v34;
      int v15 = v35 + 1;
      if (v35 == 7) {
        return v13 + 24 == v33;
      }
    }
    uint64_t v12 = v13;
    v14 += 24;
    v13 += 24;
    if (v13 == v2) {
      return 1;
    }
  }
}

void sub_2484AAE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484AAEF0(uint64_t result, double *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 3;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                double v51 = *(a2 - 1);
                double v52 = *(double *)(v11 + 16);
                if (v51 > v52)
                {
                  for (uint64_t i = 0; i != 12; i += 4)
                  {
                    int v54 = *(_DWORD *)(v11 + i);
                    *(_DWORD *)(v11 + i) = *(_DWORD *)((char *)v10 + i);
                    *(_DWORD *)((char *)v10 + i) = v54;
                  }
                  *(double *)(v11 + 16) = v51;
                  *(a2 - 1) = v52;
                }
                break;
              case 3uLL:
                BOOL result = sub_2484AB83C(v11, v11 + 24, (uint64_t)(a2 - 3));
                break;
              case 4uLL:
                BOOL result = sub_2484AB948(v11, v11 + 24, v11 + 48, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                BOOL result = sub_2484ABA28(v11, v11 + 24, v11 + 48, v11 + 72, (uint64_t)(a2 - 3));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 575)
          {
            float v55 = (double *)(v11 + 24);
            BOOL v57 = (double *)v11 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                uint64_t v59 = (double *)v11;
                do
                {
                  double v60 = v59[5];
                  double v61 = v59[2];
                  uint64_t v59 = v55;
                  if (v60 > v61)
                  {
                    long long v103 = *(_OWORD *)v55;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = v11 + v62;
                      *(void *)(v63 + 24) = *(void *)(v11 + v62);
                      *(_DWORD *)(v63 + 32) = *(_DWORD *)(v11 + v62 + 8);
                      *(void *)(v63 + 40) = *(void *)(v11 + v62 + 16);
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if (v60 <= *(double *)(v63 - 8))
                      {
                        uint64_t v64 = v11 + v62 + 24;
                        goto LABEL_90;
                      }
                    }
                    uint64_t v64 = v11;
LABEL_90:
                    *(_DWORD *)(v64 + 8) = DWORD2(v103);
                    *(void *)uint64_t v64 = v103;
                    *(double *)(v64 + 16) = v60;
                  }
                  float v55 = v59 + 3;
                  v58 += 24;
                }
                while (v59 + 3 != a2);
              }
            }
            else if (!v57)
            {
              unint64_t v94 = v11 + 16;
              do
              {
                double v95 = *(double *)(v9 + 40);
                double v96 = *(double *)(v9 + 16);
                unint64_t v9 = (unint64_t)v55;
                if (v95 > v96)
                {
                  long long v106 = *(_OWORD *)v55;
                  unint64_t v97 = v94;
                  do
                  {
                    unint64_t v98 = v97 - 16;
                    *(void *)(v97 + 8) = *(void *)(v97 - 16);
                    *(_DWORD *)(v97 + 16) = *(_DWORD *)(v97 - 8);
                    *(void *)(v97 + 24) = *(void *)v97;
                    double v99 = *(double *)(v97 - 24);
                    v97 -= 24;
                  }
                  while (v95 > v99);
                  *(_DWORD *)(v98 + 8) = DWORD2(v106);
                  *(void *)unint64_t v98 = v106;
                  *(double *)(v98 + 16) = v95;
                }
                float v55 = (double *)(v9 + 24);
                v94 += 24;
              }
              while ((double *)(v9 + 24) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((double *)v11 != a2)
            {
              int64_t v65 = (v13 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unint64_t v69 = v11 + 24 * v68;
                  if (2 * v67 + 2 < (uint64_t)v13 && *(double *)(v11 + 24 * v68 + 16) > *(double *)(v69 + 40))
                  {
                    v69 += 24;
                    uint64_t v68 = 2 * v67 + 2;
                  }
                  double v70 = *(double *)(v11 + 24 * v67 + 16);
                  if (*(double *)(v69 + 16) <= v70)
                  {
                    unint64_t v71 = v11 + 24 * v67;
                    long long v104 = *(_OWORD *)v71;
                    do
                    {
                      unint64_t v72 = v71;
                      unint64_t v71 = v69;
                      uint64_t v73 = *(void *)v69;
                      *(_DWORD *)(v72 + 8) = *(_DWORD *)(v71 + 8);
                      *(void *)unint64_t v72 = v73;
                      *(void *)(v72 + 16) = *(void *)(v71 + 16);
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v74 = (2 * v68) | 1;
                      unint64_t v69 = v11 + 24 * v74;
                      uint64_t v75 = 2 * v68 + 2;
                      if (v75 < (uint64_t)v13 && *(double *)(v11 + 24 * v74 + 16) > *(double *)(v69 + 40))
                      {
                        v69 += 24;
                        uint64_t v74 = v75;
                      }
                      uint64_t v68 = v74;
                    }
                    while (*(double *)(v69 + 16) <= v70);
                    *(_DWORD *)(v71 + 8) = DWORD2(v104);
                    *(void *)unint64_t v71 = v104;
                    *(double *)(v71 + 16) = v70;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              int64_t v76 = v12 / 0x18uLL;
              do
              {
                uint64_t v77 = 0;
                float v78 = a2;
                long long v100 = *(_OWORD *)v11;
                uint64_t v79 = *(void *)(v11 + 16);
                uint64_t v80 = v76 - 2;
                if (v76 < 2) {
                  uint64_t v80 = v76 - 1;
                }
                uint64_t v81 = v80 >> 1;
                unint64_t v82 = v11;
                do
                {
                  unint64_t v83 = v82;
                  uint64_t v84 = v77 + 1;
                  v82 += 24 * (v77 + 1);
                  uint64_t v85 = 2 * v77;
                  uint64_t v77 = (2 * v77) | 1;
                  int64_t v86 = v85 + 2;
                  if (v86 < v76 && *(double *)(v83 + 24 * v84 + 16) > *(double *)(v82 + 40))
                  {
                    v82 += 24;
                    uint64_t v77 = v86;
                  }
                  BOOL result = *(void *)v82;
                  *(_DWORD *)(v83 + 8) = *(_DWORD *)(v82 + 8);
                  *(void *)unint64_t v83 = result;
                  *(void *)(v83 + 16) = *(void *)(v82 + 16);
                }
                while (v77 <= v81);
                a2 -= 3;
                if ((double *)v82 == v78 - 3)
                {
                  *(_DWORD *)(v82 + 8) = DWORD2(v100);
                  *(void *)unint64_t v82 = v100;
                  *(void *)(v82 + 16) = v79;
                }
                else
                {
                  double v87 = *a2;
                  *(_DWORD *)(v82 + 8) = *((_DWORD *)v78 - 4);
                  *(double *)unint64_t v82 = v87;
                  *(double *)(v82 + 16) = *(v78 - 1);
                  *((_DWORD *)v78 - 4) = DWORD2(v100);
                  *(void *)a2 = v100;
                  *((void *)v78 - 1) = v79;
                  uint64_t v88 = v82 - v11 + 24;
                  if (v88 >= 25)
                  {
                    unint64_t v89 = (unint64_t)(-2 - 0x5555555555555555 * (v88 >> 3)) >> 1;
                    double v90 = *(double *)(v82 + 16);
                    if (*(double *)(v11 + 24 * v89 + 16) > v90)
                    {
                      long long v105 = *(_OWORD *)v82;
                      do
                      {
                        unint64_t v91 = v82;
                        unint64_t v82 = v11 + 24 * v89;
                        uint64_t v92 = *(void *)v82;
                        *(_DWORD *)(v91 + 8) = *(_DWORD *)(v82 + 8);
                        *(void *)unint64_t v91 = v92;
                        *(void *)(v91 + 16) = *(void *)(v82 + 16);
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                      }
                      while (*(double *)(v11 + 24 * v89 + 16) > v90);
                      *(_DWORD *)(v82 + 8) = DWORD2(v105);
                      *(void *)unint64_t v82 = v105;
                      *(double *)(v82 + 16) = v90;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = v11 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_2484AB83C(v9, v9 + 24 * (v13 >> 1), (uint64_t)(a2 - 3));
            sub_2484AB83C(v9 + 24, v9 + 24 * v14 - 24, (uint64_t)(a2 - 6));
            sub_2484AB83C(v9 + 48, v9 + 24 + 24 * v14, (uint64_t)(a2 - 9));
            BOOL result = sub_2484AB83C(v9 + 24 * v14 - 24, v15, v9 + 24 + 24 * v14);
            for (uint64_t j = 0; j != 12; j += 4)
            {
              int v17 = *(_DWORD *)(v9 + j);
              *(_DWORD *)(v9 + j) = *(_DWORD *)(v15 + j);
              *(_DWORD *)(v15 + j) = v17;
            }
            unint64_t v18 = v9 + 24 * v14;
            uint64_t v19 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = *(void *)(v18 + 16);
            *(void *)(v18 + 16) = v19;
          }
          else
          {
            BOOL result = sub_2484AB83C(v9 + 24 * (v13 >> 1), v9, (uint64_t)(a2 - 3));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(v9 + 16);
          if (*(double *)(v9 - 8) > v20) {
            goto LABEL_15;
          }
          long long v102 = *(_OWORD *)v9;
          if (v20 <= *(a2 - 1))
          {
            unint64_t v39 = v9 + 24;
            do
            {
              unint64_t v11 = v39;
              if (v39 >= (unint64_t)a2) {
                break;
              }
              double v40 = *(double *)(v39 + 16);
              v39 += 24;
            }
            while (v20 <= v40);
          }
          else
          {
            unint64_t v37 = v9;
            do
            {
              unint64_t v11 = v37 + 24;
              double v38 = *(double *)(v37 + 40);
              v37 += 24;
            }
            while (v20 <= v38);
          }
          uint64_t v41 = a2;
          if (v11 < (unint64_t)a2)
          {
            uint64_t v42 = a2;
            do
            {
              uint64_t v41 = v42 - 3;
              double v43 = *(v42 - 1);
              v42 -= 3;
            }
            while (v20 > v43);
          }
          while (v11 < (unint64_t)v41)
          {
            for (uint64_t k = 0; k != 12; k += 4)
            {
              int v45 = *(_DWORD *)(v11 + k);
              *(_DWORD *)(v11 + k) = *(_DWORD *)((char *)v41 + k);
              *(_DWORD *)((char *)v41 + k) = v45;
            }
            uint64_t v46 = *(void *)(v11 + 16);
            *(double *)(v11 + 16) = v41[2];
            *((void *)v41 + 2) = v46;
            do
            {
              double v47 = *(double *)(v11 + 40);
              v11 += 24;
            }
            while (v20 <= v47);
            do
            {
              double v48 = *(v41 - 1);
              v41 -= 3;
            }
            while (v20 > v48);
          }
          uint64_t v49 = (uint64_t *)(v11 - 24);
          BOOL v4 = v11 - 24 >= v9;
          BOOL v5 = v11 - 24 == v9;
          if (v11 - 24 != v9)
          {
            uint64_t v50 = *v49;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 16);
            *(void *)unint64_t v9 = v50;
            *(void *)(v9 + 16) = *(void *)(v11 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v11 - 16) = DWORD2(v102);
          *uint64_t v49 = v102;
          *(double *)(v11 - 8) = v20;
        }
        double v20 = *(double *)(v9 + 16);
LABEL_15:
        long long v101 = *(_OWORD *)v9;
        unint64_t v21 = v9;
        do
        {
          unint64_t v22 = v21;
          v21 += 24;
        }
        while (*(double *)(v22 + 40) > v20);
        unint64_t v23 = a2;
        if (v22 == v9)
        {
          uint64_t v26 = a2;
          while (v21 < (unint64_t)v26)
          {
            float v24 = v26 - 3;
            double v27 = *(v26 - 1);
            v26 -= 3;
            if (v27 > v20) {
              goto LABEL_25;
            }
          }
          float v24 = v26;
        }
        else
        {
          do
          {
            float v24 = v23 - 3;
            double v25 = *(v23 - 1);
            v23 -= 3;
          }
          while (v25 <= v20);
        }
LABEL_25:
        unint64_t v11 = v21;
        if (v21 < (unint64_t)v24)
        {
          unint64_t v28 = (unint64_t)v24;
          do
          {
            for (uint64_t m = 0; m != 12; m += 4)
            {
              int v30 = *(_DWORD *)(v11 + m);
              *(_DWORD *)(v11 + m) = *(_DWORD *)(v28 + m);
              *(_DWORD *)(v28 + m) = v30;
            }
            uint64_t v31 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = *(void *)(v28 + 16);
            *(void *)(v28 + 16) = v31;
            do
            {
              double v32 = *(double *)(v11 + 40);
              v11 += 24;
            }
            while (v32 > v20);
            do
            {
              double v33 = *(double *)(v28 - 8);
              v28 -= 24;
            }
            while (v33 <= v20);
          }
          while (v11 < v28);
        }
        long long v34 = (uint64_t *)(v11 - 24);
        if (v11 - 24 != v9)
        {
          uint64_t v35 = *v34;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 16);
          *(void *)unint64_t v9 = v35;
          *(void *)(v9 + 16) = *(void *)(v11 - 8);
        }
        *(_DWORD *)(v11 - 16) = DWORD2(v101);
        *long long v34 = v101;
        *(double *)(v11 - 8) = v20;
        if (v21 >= (unint64_t)v24) {
          break;
        }
LABEL_38:
        BOOL result = sub_2484AAEF0(v9, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v36 = sub_2484ABB4C(v9, v11 - 24);
      BOOL result = sub_2484ABB4C(v11, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_38;
      }
    }
    a2 = (double *)(v11 - 24);
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t sub_2484AB83C(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)(a2 + 16);
  double v4 = *(double *)(result + 16);
  double v5 = *(double *)(a3 + 16);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        int v13 = *(_DWORD *)(a2 + i);
        *(_DWORD *)(a2 + i) = *(_DWORD *)(a3 + i);
        *(_DWORD *)(a3 + i) = v13;
      }
      *(double *)(a2 + 16) = v5;
      *(double *)(a3 + 16) = v3;
      double v14 = *(double *)(a2 + 16);
      double v15 = *(double *)(result + 16);
      if (v14 > v15)
      {
        for (uint64_t j = 0; j != 12; j += 4)
        {
          int v17 = *(_DWORD *)(result + j);
          *(_DWORD *)(result + j) = *(_DWORD *)(a2 + j);
          *(_DWORD *)(a2 + j) = v17;
        }
        *(double *)(result + 16) = v14;
        *(double *)(a2 + 16) = v15;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5 > v3)
    {
      do
      {
        int v7 = *(_DWORD *)(result + v6);
        *(_DWORD *)(result + v6) = *(_DWORD *)(a3 + v6);
        *(_DWORD *)(a3 + v6) = v7;
        v6 += 4;
      }
      while (v6 != 12);
      *(double *)(result + 16) = v5;
      goto LABEL_10;
    }
    do
    {
      int v8 = *(_DWORD *)(result + v6);
      *(_DWORD *)(result + v6) = *(_DWORD *)(a2 + v6);
      *(_DWORD *)(a2 + v6) = v8;
      v6 += 4;
    }
    while (v6 != 12);
    *(double *)(result + 16) = v3;
    *(double *)(a2 + 16) = v4;
    double v9 = *(double *)(a3 + 16);
    if (v9 > v4)
    {
      for (uint64_t k = 0; k != 12; k += 4)
      {
        int v11 = *(_DWORD *)(a2 + k);
        *(_DWORD *)(a2 + k) = *(_DWORD *)(a3 + k);
        *(_DWORD *)(a3 + k) = v11;
      }
      *(double *)(a2 + 16) = v9;
LABEL_10:
      *(double *)(a3 + 16) = v4;
    }
  }
  return result;
}

uint64_t sub_2484AB948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_2484AB83C(a1, a2, a3);
  double v9 = *(double *)(a4 + 16);
  double v10 = *(double *)(a3 + 16);
  if (v9 > v10)
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      int v12 = *(_DWORD *)(a3 + i);
      *(_DWORD *)(a3 + i) = *(_DWORD *)(a4 + i);
      *(_DWORD *)(a4 + i) = v12;
    }
    *(double *)(a3 + 16) = v9;
    *(double *)(a4 + 16) = v10;
    double v13 = *(double *)(a3 + 16);
    double v14 = *(double *)(a2 + 16);
    if (v13 > v14)
    {
      for (uint64_t j = 0; j != 12; j += 4)
      {
        int v16 = *(_DWORD *)(a2 + j);
        *(_DWORD *)(a2 + j) = *(_DWORD *)(a3 + j);
        *(_DWORD *)(a3 + j) = v16;
      }
      *(double *)(a2 + 16) = v13;
      *(double *)(a3 + 16) = v14;
      double v17 = *(double *)(a2 + 16);
      double v18 = *(double *)(a1 + 16);
      if (v17 > v18)
      {
        for (uint64_t k = 0; k != 12; k += 4)
        {
          int v20 = *(_DWORD *)(a1 + k);
          *(_DWORD *)(a1 + k) = *(_DWORD *)(a2 + k);
          *(_DWORD *)(a2 + k) = v20;
        }
        *(double *)(a1 + 16) = v17;
        *(double *)(a2 + 16) = v18;
      }
    }
  }
  return result;
}

uint64_t sub_2484ABA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_2484AB948(a1, a2, a3, a4);
  double v11 = *(double *)(a5 + 16);
  double v12 = *(double *)(a4 + 16);
  if (v11 > v12)
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      int v14 = *(_DWORD *)(a4 + i);
      *(_DWORD *)(a4 + i) = *(_DWORD *)(a5 + i);
      *(_DWORD *)(a5 + i) = v14;
    }
    *(double *)(a4 + 16) = v11;
    *(double *)(a5 + 16) = v12;
    double v15 = *(double *)(a4 + 16);
    double v16 = *(double *)(a3 + 16);
    if (v15 > v16)
    {
      for (uint64_t j = 0; j != 12; j += 4)
      {
        int v18 = *(_DWORD *)(a3 + j);
        *(_DWORD *)(a3 + j) = *(_DWORD *)(a4 + j);
        *(_DWORD *)(a4 + j) = v18;
      }
      *(double *)(a3 + 16) = v15;
      *(double *)(a4 + 16) = v16;
      double v19 = *(double *)(a3 + 16);
      double v20 = *(double *)(a2 + 16);
      if (v19 > v20)
      {
        for (uint64_t k = 0; k != 12; k += 4)
        {
          int v22 = *(_DWORD *)(a2 + k);
          *(_DWORD *)(a2 + k) = *(_DWORD *)(a3 + k);
          *(_DWORD *)(a3 + k) = v22;
        }
        *(double *)(a2 + 16) = v19;
        *(double *)(a3 + 16) = v20;
        double v23 = *(double *)(a2 + 16);
        double v24 = *(double *)(a1 + 16);
        if (v23 > v24)
        {
          for (uint64_t m = 0; m != 12; m += 4)
          {
            int v26 = *(_DWORD *)(a1 + m);
            *(_DWORD *)(a1 + m) = *(_DWORD *)(a2 + m);
            *(_DWORD *)(a2 + m) = v26;
          }
          *(double *)(a1 + 16) = v23;
          *(double *)(a2 + 16) = v24;
        }
      }
    }
  }
  return result;
}

BOOL sub_2484ABB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = *(double *)(a2 - 8);
      double v7 = *(double *)(a1 + 16);
      if (v6 > v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = a2 - 24;
        do
        {
          int v10 = *(_DWORD *)(a1 + v8);
          *(_DWORD *)(a1 + v8) = *(_DWORD *)(v9 + v8);
          *(_DWORD *)(v9 + v8) = v10;
          v8 += 4;
        }
        while (v8 != 12);
        *(double *)(a1 + 16) = v6;
        *(double *)(a2 - 8) = v7;
        return 1;
      }
      return result;
    case 3uLL:
      sub_2484AB83C(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_2484AB948(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_2484ABA28(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      sub_2484AB83C(a1, a1 + 24, a1 + 48);
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 16);
    if (v15 > *(double *)(v11 + 16))
    {
      long long v19 = *(_OWORD *)v12;
      uint64_t v16 = v13;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 72) = *(void *)(a1 + v16 + 48);
        *(_DWORD *)(v17 + 80) = *(_DWORD *)(a1 + v16 + 56);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v15 <= *(double *)(v17 + 40))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_14;
        }
      }
      uint64_t v18 = a1;
LABEL_14:
      *(void *)uint64_t v18 = v19;
      *(_DWORD *)(v18 + 8) = DWORD2(v19);
      *(double *)(v18 + 16) = v15;
      if (++v14 == 8) {
        return v12 + 24 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_2484ABD60(uint64_t a1)
{
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    double v3 = *(void **)(a1 + i + 152);
    if (v3)
    {
      *(void *)(a1 + i + 160) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    double v6 = *(void **)(a1 + j + 56);
    if (v6)
    {
      *(void *)(a1 + j + 64) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

BOOL sub_2484ABDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484AC014, sub_2484ABE8C, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_2484ABE8C((uint64_t)v6, i);
  return 0;
}

uint64_t sub_2484ABE8C(uint64_t a1, int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *v2[1];
  int v4 = *(_DWORD *)v2[2];
  uint64_t v5 = **v2;
  double v6 = (int *)(*(void *)(v5 + ((v3 + v4 % 3) << 6) + 24) + *(void *)(v5 + ((v3 + v4 % 3) << 6) + 16) * a2);
  double v7 = (int *)(*(void *)(v5 + ((v3 + (v4 + v4 / 3 + 1) % 3) << 6) + 24)
             + *(void *)(v5 + ((v3 + (v4 + v4 / 3 + 1) % 3) << 6) + 16) * a2);
  int v8 = ((unint64_t)(1431655765 * v4) >> 32) - v4;
  uint64_t result = (v8 >> 1);
  int v10 = (int *)(*(void *)(v5 + ((v3 + (int)(v4 + result + (v8 >> 31) + 2) % 3) << 6) + 24)
              + *(void *)(v5 + ((v3 + (int)(v4 + result + (v8 >> 31) + 2) % 3) << 6) + 16) * a2);
  uint64_t v11 = (void *)(v5 + (v3 << 6));
  uint64_t v12 = (_DWORD *)(v11[3] + v11[2] * a2);
  uint64_t v13 = (int *)(v11[11] + v11[10] * a2);
  int v14 = (int *)(v11[19] + v11[18] * a2);
  uint64_t v15 = *v2[4];
  if (*(_DWORD *)v2[3] == 6)
  {
    for (; v15; --v15)
    {
      int v17 = *v6++;
      int v16 = v17;
      int v19 = *v7++;
      int v18 = v19;
      int v20 = *v10++;
      int v21 = v16 - v20;
      *v13++ = v21;
      int v22 = v20 + (v21 >> 1);
      int v23 = v18 - v22;
      *v14++ = v23;
      *v12++ = v22 + (v23 >> 1);
    }
  }
  else if (v15)
  {
    double v25 = v2[5];
    double v24 = v2[6];
    do
    {
      int v27 = *v6++;
      int v26 = v27;
      int v28 = *v7++;
      LODWORD(result) = v28;
      int v30 = *v10++;
      int v29 = v30;
      unsigned int v31 = result - ((v30 + v26) >> 1);
      if (*(_DWORD *)v25 == 1) {
        LODWORD(result) = result - v26;
      }
      if (*(_DWORD *)v25 == 2) {
        uint64_t result = v31;
      }
      else {
        uint64_t result = result;
      }
      if (*(_DWORD *)v24) {
        int v32 = v26;
      }
      else {
        int v32 = 0;
      }
      *v12++ = v26;
      *v13++ = result;
      *v14++ = v29 - v32;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_2484AC014(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t JxlResizableParallelRunner(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, void), uint64_t a5, int a6)
{
  if (a5 + 1 == a6)
  {
    uint64_t result = a3(a2, 1);
    if (result) {
      return result;
    }
    a4(a2, a5, 0);
    return 0;
  }
  uint64_t v12 = (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
  unint64_t v13 = (a6 - a5);
  if (v12 + 1 < v13) {
    uint64_t v14 = v12 + 1;
  }
  else {
    uint64_t v14 = (a6 - a5);
  }
  uint64_t result = a3(a2, v14);
  if (!result)
  {
    std::mutex::lock((std::mutex *)(a1 + 120));
    *(void *)(a1 + 216) = (v13 - 1);
    atomic_store(a5, (unsigned int *)(a1 + 184));
    *(_DWORD *)(a1 + 188) = a6;
    *(void *)(a1 + 192) = a4;
    *(void *)(a1 + 200) = a2;
    *(unsigned char *)(a1 + 232) = 1;
    ++*(void *)(a1 + 224);
    std::condition_variable::notify_all((std::condition_variable *)a1);
    std::mutex::unlock((std::mutex *)(a1 + 120));
    sub_2484AC178(a1);
    do
    {
      v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 120);
      v16.__owns_ = 1;
      std::mutex::lock((std::mutex *)(a1 + 120));
      uint64_t v15 = *(void *)(a1 + 224);
      if (v15) {
        std::condition_variable::wait((std::condition_variable *)(a1 + 48), &v16);
      }
      if (v16.__owns_) {
        std::mutex::unlock(v16.__m_);
      }
    }
    while (v15);
    return 0;
  }
  return result;
}

void sub_2484AC178(uint64_t a1)
{
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 184), 1u);
  for (unsigned int i = *(_DWORD *)(a1 + 188); add < i; unsigned int i = *(_DWORD *)(a1 + 188))
  {
    (*(void (**)(void))(a1 + 192))(*(void *)(a1 + 200));
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 184), 1u);
  }
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v4 = *(void *)(a1 + 224);
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = --v4;
  if (!v4) {
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 48));
  }

  std::mutex::unlock((std::mutex *)(a1 + 120));
}

void JxlResizableParallelRunnerCreate()
{
}

void sub_2484AC29C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    unint64_t v4 = a2 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  *(void *)(a1 + 208) = v4;
  std::condition_variable::notify_all((std::condition_variable *)a1);
  std::mutex::unlock(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  unint64_t v7 = *(void *)(a1 + 104);
  unint64_t v8 = (uint64_t)(v7 - v6) >> 3;
  if (v8 < v4)
  {
    unint64_t v9 = *(void *)(a1 + 112);
    if (v7 < v9) {
      sub_2484AC584();
    }
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = (uint64_t)(v7 - v10) >> 3;
    if (!((unint64_t)(v11 + 1) >> 61))
    {
      uint64_t v12 = v9 - v10;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v40 = a1 + 112;
      if (v14) {
        unint64_t v14 = (unint64_t)sub_2483F04AC(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v37 = v14;
      *(void *)&long long v38 = v14 + 8 * v11;
      *((void *)&v38 + 1) = v38;
      unint64_t v39 = v14 + 8 * v15;
      sub_2484AC584();
    }
LABEL_39:
    sub_2483E92E8();
  }
  if (v8 > v4)
  {
    uint64_t v16 = 8 * a2 - 8 * (a2 != 0);
    unint64_t v17 = v4;
    do
    {
      std::thread::join((std::thread *)(v6 + v16));
      ++v17;
      uint64_t v6 = *(void *)(a1 + 96);
      int v18 = *(std::thread **)(a1 + 104);
      uint64_t v19 = (uint64_t)v18 - v6;
      v16 += 8;
    }
    while (v17 < ((uint64_t)v18 - v6) >> 3);
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = v4 - (v19 >> 3);
    if (v4 <= v19 >> 3)
    {
      if (v4 < v19 >> 3)
      {
        BOOL v36 = (std::thread *)(v6 + 8 * v4);
        while (v18 != v36)
          std::thread::~thread(--v18);
        *(void *)(a1 + 104) = v36;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 112);
      if (v21 <= (v22 - (uint64_t)v18) >> 3)
      {
        bzero(*(void **)(a1 + 104), 8 * v21);
        *(void *)(a1 + 104) = &v18[v21];
      }
      else
      {
        if (v4 >> 61) {
          goto LABEL_39;
        }
        uint64_t v40 = a1 + 112;
        uint64_t v23 = v22 - v6;
        uint64_t v24 = v23 >> 2;
        if (v23 >> 2 <= v4) {
          uint64_t v24 = v4;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        int v26 = (char *)sub_2483F04AC(v25);
        int v28 = *(void **)(a1 + 96);
        int v27 = *(void **)(a1 + 104);
        int v29 = &v26[8 * v20];
        unsigned int v31 = &v26[8 * v30];
        unint64_t v39 = (unint64_t)v31;
        bzero(v29, 8 * v21);
        int v32 = &v29[8 * v21];
        *((void *)&v38 + 1) = v32;
        if (v27 != v28)
        {
          do
          {
            uint64_t v33 = *--v27;
            *((void *)v29 - 1) = v33;
            v29 -= 8;
            void *v27 = 0;
          }
          while (v27 != v28);
          int v32 = (char *)*((void *)&v38 + 1);
          unsigned int v31 = (char *)v39;
        }
        long long v34 = *(_OWORD *)(a1 + 96);
        *(void *)(a1 + 96) = v29;
        *(void *)(a1 + 104) = v32;
        long long v38 = v34;
        unint64_t v35 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v31;
        unint64_t v39 = v35;
        unint64_t v37 = v34;
        sub_2484AC684((uint64_t)&v37);
      }
    }
  }
}

void sub_2484AC564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 104) = v13;
  _Unwind_Resume(exception_object);
}

void sub_2484AC584()
{
}

uint64_t sub_2484AC684(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_2484AC6D4(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2484AC724(v2);
    MEMORY[0x24C579F90](v2, 0x1020C4062D53EE8);
  }
  return a1;
}

uint64_t sub_2484AC724(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x24C579E50]();
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_2484AC774(uint64_t *a1)
{
  unint64_t v7 = (const void **)a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *v7;
  int *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = (uint64_t)v7[1];
  unint64_t v4 = (unint64_t)v7[2];
  do
  {
    while (1)
    {
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 120);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)(v3 + 120));
      if (*(void *)(v3 + 208) <= v4)
      {
        int v5 = 1;
      }
      else if (*(unsigned char *)(v3 + 232) && *(void *)(v3 + 216) > v4)
      {
        int v5 = 0;
        ++*(void *)(v3 + 224);
      }
      else
      {
        std::condition_variable::wait((std::condition_variable *)v3, &__lk);
        int v5 = 2;
      }
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      if (v5) {
        break;
      }
      sub_2484AC178(v3);
    }
  }
  while (v5 == 2);
  sub_2484AC6D4((uint64_t **)&v7);
  return 0;
}

void sub_2484AC870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484AC6D4((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t JxlResizableParallelRunnerDestroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_2484AC29C(result, 0);
    std::mutex::~mutex((std::mutex *)(v1 + 120));
    uint64_t v2 = (void **)(v1 + 96);
    sub_2484AC918(&v2);
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)v1);
    JUMPOUT(0x24C579F90);
  }
  return result;
}

void sub_2484AC918(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::thread *)**a1;
  if (v2)
  {
    unint64_t v4 = (std::thread *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t JxlResizableParallelRunnerSuggestThreads(uint64_t a1, uint64_t a2)
{
  LODWORD(result) = std::thread::hardware_concurrency();
  if ((unint64_t)(a2 * a1) >> 16 >= result) {
    return result;
  }
  else {
    return (unint64_t)(a2 * a1) >> 16;
  }
}

uint64_t JxlThreadParallelRunner(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, void), uint64_t a5, unsigned int a6)
{
  if (a5 > a6) {
    return 0xFFFFFFFFLL;
  }
  if (a5 == a6) {
    return 0;
  }
  uint64_t v8 = a5;
  unsigned int v12 = *(_DWORD *)(a1 + 48);
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v6 = a3(a2, v13);
  if (!v6)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      uint64_t v6 = 0xFFFFFFFFLL;
      if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 56), 1u))
      {
        *(void *)(a1 + 240) = a4;
        *(void *)(a1 + 248) = a2;
        *(_DWORD *)(a1 + 320) = 0;
        std::mutex::lock((std::mutex *)(a1 + 64));
        *(void *)(a1 + 232) = a6 | (unint64_t)(v8 << 32);
        std::mutex::unlock((std::mutex *)(a1 + 64));
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 184));
        sub_2484ACF60(a1);
        if (atomic_fetch_add((atomic_uint *volatile)(a1 + 56), 0xFFFFFFFF) == 1) {
          return 0;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      if (v8 >= a6) {
        return 0;
      }
      do
      {
        a4(a2, v8, 0);
        uint64_t v6 = 0;
        uint64_t v8 = (v8 + 1);
      }
      while (a6 != v8);
    }
  }
  return v6;
}

uint64_t JxlThreadParallelRunnerCreate(uint64_t *a1, int a2)
{
  if (!a1)
  {
    uint64_t v6 = sub_2484ACE40;
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v4 = sub_2484ACE38;
    goto LABEL_10;
  }
  uint64_t v3 = a1[1];
  unint64_t v4 = (void (*)(int, void *))a1[2];
  if ((v3 == 0) != (v4 == 0)) {
    return 0;
  }
  uint64_t v7 = *a1;
  if (v3) {
    uint64_t v6 = (void *(*)(int, size_t))a1[1];
  }
  else {
    uint64_t v6 = sub_2484ACE40;
  }
  if (!v4) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v8 = (uint64_t)v6(v7, 392);
  uint64_t v5 = v8;
  if (v8)
  {
    *(void *)(v8 + 24) = 0;
    unint64_t v9 = (int64x2_t *)(v8 + 24);
    *(void *)(v8 + 40) = 0;
    *(void *)(v8 + 32) = 0;
    if (a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = a2;
    }
    *(_DWORD *)(v8 + 48) = a2;
    *(_DWORD *)(v8 + 52) = v10;
    *(_DWORD *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = 850045863;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(void *)(v8 + 128) = 1018212795;
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 184) = 1018212795;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_OWORD *)(v8 + 164) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(void *)(v8 + 224) = 0;
    *(_DWORD *)(v8 + 320) = 0;
    if (a2)
    {
      uint64_t v30 = v8 + 40;
      uint64_t v11 = (char *)sub_2483F04AC(a2);
      unint64_t v14 = *(void **)(v5 + 24);
      uint64_t v13 = *(void **)(v5 + 32);
      if (v13 == v14)
      {
        int64x2_t v17 = vdupq_n_s64((unint64_t)v13);
        uint64_t v15 = v11;
      }
      else
      {
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = *--v13;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
          *uint64_t v13 = 0;
        }
        while (v13 != v14);
        int64x2_t v17 = *v9;
      }
      *(void *)(v5 + 24) = v15;
      *(void *)(v5 + 32) = v11;
      int64x2_t v28 = v17;
      unint64_t v18 = *(void *)(v5 + 40);
      *(void *)(v5 + 40) = &v11[8 * v12];
      unint64_t v29 = v18;
      unint64_t v27 = v17.i64[0];
      sub_2484AC684((uint64_t)&v27);
      a2 = *(_DWORD *)(v5 + 48);
    }
    *(void *)(v5 + 232) = -2;
    if (a2)
    {
      unint64_t v19 = *(void *)(v5 + 32);
      unint64_t v20 = *(void *)(v5 + 40);
      if (v19 < v20) {
        sub_2484AD1D8();
      }
      uint64_t v21 = (uint64_t)(v19 - v9->i64[0]) >> 3;
      if (!((unint64_t)(v21 + 1) >> 61))
      {
        uint64_t v22 = v20 - v9->i64[0];
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        uint64_t v30 = v5 + 40;
        if (v24) {
          unint64_t v24 = (unint64_t)sub_2483F04AC(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t v27 = v24;
        v28.i64[0] = v24 + 8 * v21;
        v28.i64[1] = v28.i64[0];
        unint64_t v29 = v24 + 8 * v25;
        sub_2484AD1D8();
      }
      sub_2483E92E8();
    }
    *(void *)uint64_t v5 = v7;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v4;
  }
  return v5;
}

void sub_2484ACDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::condition_variable *a10, std::mutex *a11, uint64_t a12, uint64_t a13, char a14)
{
  std::condition_variable::~condition_variable(v14);
  std::condition_variable::~condition_variable(a10);
  std::mutex::~mutex(a11);
  sub_2484AC918((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_2484ACE38(int a1, void *a2)
{
}

void *sub_2484ACE40(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BDDFC5AuLL);
}

uint64_t JxlThreadParallelRunnerDestroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(result + 16);
    if (*(_DWORD *)(result + 48))
    {
      std::mutex::lock((std::mutex *)(result + 64));
      *(void *)(v1 + 232) = -4;
      std::mutex::unlock((std::mutex *)(v1 + 64));
      std::condition_variable::notify_all((std::condition_variable *)(v1 + 184));
    }
    uint64_t v3 = *(std::thread **)(v1 + 24);
    unint64_t v4 = *(std::thread **)(v1 + 32);
    while (v3 != v4)
      std::thread::join(v3++);
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 184));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 128));
    std::mutex::~mutex((std::mutex *)(v1 + 64));
    uint64_t v6 = (void **)(v1 + 24);
    sub_2484AC918(&v6);
    return v5(v2, v1);
  }
  return result;
}

uint64_t JxlThreadParallelRunnerDefaultNumWorkerThreads()
{
  return std::thread::hardware_concurrency();
}

void sub_2484ACF60(uint64_t a1)
{
  uint64_t m = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(_DWORD *)(a1 + 176) == (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)
  {
    *(_DWORD *)(a1 + 176) = 0;
    *(void *)(a1 + 232) = -2;
LABEL_6:
    std::mutex::unlock(m);
    return;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 128), &v4);
  while (*(_DWORD *)(a1 + 176) != (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  BOOL owns = v4.__owns_;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 232) = -2;
  if (owns)
  {
    uint64_t m = v4.__m_;
    goto LABEL_6;
  }
}

void sub_2484AD008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (std::mutex *)(a1 + 64);
  unint64_t v18 = (std::condition_variable *)(a1 + 128);
  std::unique_lock<std::mutex> v4 = (std::condition_variable *)(a1 + 184);
  uint64_t v5 = (int)a2;
  do
  {
    __lk.__m_ = v3;
    __lk.__owns_ = 1;
    std::mutex::lock(v3);
    int v6 = *(_DWORD *)(a1 + 176) + 1;
    *(_DWORD *)(a1 + 176) = v6;
    if (v6 == *(_DWORD *)(a1 + 52)) {
      std::condition_variable::notify_one(v18);
    }
    do
    {
      std::condition_variable::wait(v4, &__lk);
      uint64_t v7 = *(void *)(a1 + 232);
    }
    while (v7 == -2);
    if (v7 == -4)
    {
      char v8 = 0;
    }
    else if (v7 == -3)
    {
      sub_2484AD194((uint64_t)&__lk);
      (*(void (**)(void, uint64_t, uint64_t))(a1 + 240))(*(void *)(a1 + 248), a2, v5);
      char v8 = 1;
    }
    else
    {
      sub_2484AD194((uint64_t)&__lk);
      unsigned int v9 = v7 - HIDWORD(v7);
      unsigned int v10 = 4 * *(_DWORD *)(a1 + 48);
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(a1 + 320);
        BOOL v12 = v9 >= v11;
        unsigned int v13 = v9 - v11;
        if (!v12) {
          unsigned int v13 = 0;
        }
        unsigned int v14 = v10 > v13 ? 1 : v13 / v10;
        uint64_t v15 = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 320), v14, memory_order_relaxed) + HIDWORD(v7);
        unsigned int v16 = v15 + v14 >= v7 ? v7 : v15 + v14;
        if (v15 >= v16) {
          break;
        }
        do
        {
          (*(void (**)(void, uint64_t, uint64_t))(a1 + 240))(*(void *)(a1 + 248), v15, v5);
          uint64_t v15 = (v15 + 1);
        }
        while (v15 < v16);
      }
      char v8 = 1;
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
  while ((v8 & 1) != 0);
}

void sub_2484AD174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484AD194(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_2484AD1D8();
  }
}

void sub_2484AD1D8()
{
}

void sub_2484AD2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484AC724((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2484AD2F8(uint64_t **result)
{
  uint64_t v1 = *result;
  *unint64_t result = 0;
  if (v1)
  {
    sub_2484AC724(v1);
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_2484AD358(uint64_t a1)
{
  uint64_t v5 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(unsigned int *)(a1 + 24));
  sub_2484AD2F8(&v5);
  return 0;
}

void sub_2484AD3B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484AD2F8((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_2484AD3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    int v5 = a2;
    v7[0] = sub_2483F1794;
    v7[1] = a3;
    if (*(void *)a1)
    {
      (*(void (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), float32x4_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_2484AE654, sub_2484AE264, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (unsigned int i = 2; i != v5; ++i)
        sub_2484AE264((uint64_t)v7, i);
    }
  }
}

uint64_t sub_2484AD46C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    int v5 = a2;
    v7[0] = sub_2483F1794;
    v7[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(void *)(result + 8), v7, sub_2484AE23C, sub_2484ADDA4, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (unsigned int i = 2; i != v5; ++i)
        unint64_t result = sub_2484ADDA4((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_2484AD514(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    int v5 = a2;
    v7[0] = sub_2483F1794;
    v7[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(void *)(result + 8), v7, sub_2484ADD7C, sub_2484ADA04, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (unsigned int i = 2; i != v5; ++i)
        unint64_t result = sub_2484ADA04((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_2484AD5BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    int v5 = a2;
    v7[0] = sub_2483F1794;
    v7[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(void *)(result + 8), v7, sub_2484AD9DC, sub_2484AD664, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (unsigned int i = 2; i != v5; ++i)
        unint64_t result = sub_2484AD664((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_2484AD664(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = **v2;
  uint64_t v4 = v2[1][3];
  uint64_t v5 = v2[1][2] * ((*v2)[1] + a2);
  uint64_t v6 = v4 + v5 + 4 * v3;
  unint64_t v7 = (*v2)[2];
  char v8 = (float32x4_t *)v2[3];
  uint64_t v9 = *v2[2];
  uint64_t v10 = *(void *)(*v2[4] + 24);
  uint64_t result = *(void *)(*v2[4] + 16) * a2;
  uint64_t v12 = v10 + result;
  uint64_t v13 = v6 - 8 * v9;
  uint64_t v14 = v6 - 4 * v9;
  uint64_t v15 = v6 + 4 * v9;
  uint64_t v16 = v6 + 8 * v9;
  float32x4_t v17 = *v8;
  float32x4_t v18 = v8[1];
  float32x4_t v19 = v8[2];
  float32x4_t v20 = v8[3];
  float32x4_t v21 = v8[4];
  float32x4_t v22 = v8[5];
  int8x16_t v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  int8x16_t v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  *(float32x4_t *)(v10 + result) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v6), v18, vaddq_f32(*(float32x4_t *)(v6 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v23))), v19, vaddq_f32(*(float32x4_t *)(v6 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v14),
                                             v18,
                                             vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v23))), v19, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v15), v18, vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v23))), v19, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))))), v22, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v13), v18, vaddq_f32(*(float32x4_t *)(v13 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v23))), v19, vaddq_f32(*(float32x4_t *)(v13 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v23))), v19, vaddq_f32(
                                           *(float32x4_t *)(v16 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24)))));
  if (v7 >= 0xA)
  {
    uint64_t v26 = 0;
    uint64_t v27 = result + v10 + 16;
    uint64_t v28 = v5 + 4 * v3;
    uint64_t v29 = v28 - 4 * v9 + v4 + 24;
    uint64_t v30 = v28 + 8 * v9 + v4 + 12;
    uint64_t result = v28 + 4 * v9 + v4 + 24;
    uint64_t v31 = v28 - 8 * v9 + v4 + 12;
    for (unint64_t i = 10; i <= v7; i += 4)
    {
      *(float32x4_t *)(v27 + v26) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v6 + v26 + 16)), v18, vaddq_f32(*(float32x4_t *)(v6 + v26 + 12), *(float32x4_t *)(v6 + v26 + 20))), v19, vaddq_f32(*(float32x4_t *)(v6 + v26 + 8), *(float32x4_t *)(v6 + v26 + 24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v29 + v26 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v29 + v26 - 12),
                                                *(float32x4_t *)(v29 + v26 - 4))),
                                            v19,
                                            vaddq_f32(*(float32x4_t *)(v29 + v26 - 16), *(float32x4_t *)(v29 + v26))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(result + v26 - 8)), v18, vaddq_f32(*(float32x4_t *)(result + v26 - 12), *(float32x4_t *)(result + v26 - 4))), v19, vaddq_f32(*(float32x4_t *)(result + v26 - 16), *(float32x4_t *)(result + v26))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v31 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v31 + v26), *(float32x4_t *)(v31 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v31 + v26 - 4), *(float32x4_t *)(v31 + v26 + 12))),
                                        vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v30 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v30 + v26), *(float32x4_t *)(v30 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v30 + v26 - 4), *(float32x4_t *)(v30 + v26 + 12)))));
      v26 += 16;
    }
    unint64_t v25 = i - 6;
  }
  else
  {
    unint64_t v25 = 4;
  }
  if (v25 < v7)
  {
    do
    {
      float v33 = 0.0;
      for (uint64_t j = -2; j != 3; ++j)
      {
        if (j >= 0) {
          uint64_t v35 = j;
        }
        else {
          uint64_t v35 = -j;
        }
        for (uint64_t k = -2; k != 3; ++k)
        {
          if (k >= 0) {
            uint64_t v37 = k;
          }
          else {
            uint64_t v37 = -k;
          }
          uint64_t v38 = k + v25;
          if ((uint64_t)(k + v25) < 0 || v38 >= (uint64_t)v7)
          {
            unint64_t v39 = (unint64_t)v38 >> 63;
            do
            {
              uint64_t v40 = ~v38;
              if (v39) {
                uint64_t v41 = 0;
              }
              else {
                uint64_t v41 = 2 * v7;
              }
              uint64_t v38 = v41 + v40;
              unint64_t v39 = (unint64_t)v38 >> 63;
            }
            while (v38 < 0 || v38 >= (uint64_t)v7);
          }
          uint64_t result = 16 * v37;
          float v33 = v33
              + (float)((float)(*(float *)((char *)v8->f32 + result) * *(float *)(v6 + 4 * j * v9 + 4 * v38))
                      * v8[v35 + 3].f32[0]);
        }
      }
      *(float *)(v12 + 4 * v25++) = v33;
    }
    while (v25 != v7);
  }
  return result;
}

uint64_t sub_2484AD9DC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_2484ADA04(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = **v2;
  uint64_t v4 = v2[1][3];
  uint64_t v5 = v2[1][2] * ((*v2)[1] + a2);
  uint64_t v6 = v4 + v5 + 4 * v3;
  unint64_t v7 = (*v2)[2];
  char v8 = (float32x4_t *)v2[3];
  uint64_t v9 = *v2[2];
  uint64_t v10 = *(void *)(*v2[4] + 24);
  uint64_t result = *(void *)(*v2[4] + 16) * a2;
  uint64_t v12 = v10 + result;
  uint64_t v13 = v6 - 8 * v9;
  uint64_t v14 = v6 - 4 * v9;
  uint64_t v15 = v6 + 4 * v9;
  uint64_t v16 = v6 + 8 * v9;
  float32x4_t v17 = *v8;
  float32x4_t v18 = v8[1];
  float32x4_t v19 = v8[2];
  float32x4_t v20 = v8[3];
  float32x4_t v21 = v8[4];
  float32x4_t v22 = v8[5];
  int8x16_t v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  int8x16_t v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  *(float32x4_t *)(v10 + result) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v6), v18, vaddq_f32(*(float32x4_t *)(v6 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v23))), v19, vaddq_f32(*(float32x4_t *)(v6 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v14),
                                             v18,
                                             vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v23))), v19, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v15), v18, vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v23))), v19, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))))), v22, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v13), v18, vaddq_f32(*(float32x4_t *)(v13 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v23))), v19, vaddq_f32(*(float32x4_t *)(v13 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v23))), v19, vaddq_f32(
                                           *(float32x4_t *)(v16 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24)))));
  if (v7 >= 0xA)
  {
    uint64_t v26 = 0;
    uint64_t v27 = result + v10 + 16;
    uint64_t v28 = v5 + 4 * v3;
    uint64_t v29 = v28 - 4 * v9 + v4 + 24;
    uint64_t v30 = v28 + 8 * v9 + v4 + 12;
    uint64_t result = v28 + 4 * v9 + v4 + 24;
    uint64_t v31 = v28 - 8 * v9 + v4 + 12;
    for (unint64_t i = 10; i <= v7; i += 4)
    {
      *(float32x4_t *)(v27 + v26) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v6 + v26 + 16)), v18, vaddq_f32(*(float32x4_t *)(v6 + v26 + 12), *(float32x4_t *)(v6 + v26 + 20))), v19, vaddq_f32(*(float32x4_t *)(v6 + v26 + 8), *(float32x4_t *)(v6 + v26 + 24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v29 + v26 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v29 + v26 - 12),
                                                *(float32x4_t *)(v29 + v26 - 4))),
                                            v19,
                                            vaddq_f32(*(float32x4_t *)(v29 + v26 - 16), *(float32x4_t *)(v29 + v26))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(result + v26 - 8)), v18, vaddq_f32(*(float32x4_t *)(result + v26 - 12), *(float32x4_t *)(result + v26 - 4))), v19, vaddq_f32(*(float32x4_t *)(result + v26 - 16), *(float32x4_t *)(result + v26))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v31 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v31 + v26), *(float32x4_t *)(v31 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v31 + v26 - 4), *(float32x4_t *)(v31 + v26 + 12))),
                                        vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v30 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v30 + v26), *(float32x4_t *)(v30 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v30 + v26 - 4), *(float32x4_t *)(v30 + v26 + 12)))));
      v26 += 16;
    }
    unint64_t v25 = i - 6;
  }
  else
  {
    unint64_t v25 = 4;
  }
  if (v25 < v7)
  {
    do
    {
      float v33 = 0.0;
      for (uint64_t j = -2; j != 3; ++j)
      {
        if (j >= 0) {
          uint64_t v35 = j;
        }
        else {
          uint64_t v35 = -j;
        }
        for (uint64_t k = -2; k != 3; ++k)
        {
          if (k >= 0) {
            uint64_t v37 = k;
          }
          else {
            uint64_t v37 = -k;
          }
          uint64_t v38 = k + v25;
          if ((uint64_t)(k + v25) < 0 || v38 >= (uint64_t)v7)
          {
            unint64_t v39 = (unint64_t)v38 >> 63;
            do
            {
              uint64_t v40 = ~v38;
              if (v39) {
                uint64_t v41 = 0;
              }
              else {
                uint64_t v41 = 2 * v7;
              }
              uint64_t v38 = v41 + v40;
              unint64_t v39 = (unint64_t)v38 >> 63;
            }
            while (v38 < 0 || v38 >= (uint64_t)v7);
          }
          uint64_t result = 16 * v37;
          float v33 = v33
              + (float)((float)(*(float *)((char *)v8->f32 + result) * *(float *)(v6 + 4 * j * v9 + 4 * v38))
                      * v8[v35 + 3].f32[0]);
        }
      }
      *(float *)(v12 + 4 * v25++) = v33;
    }
    while (v25 != v7);
  }
  return result;
}

uint64_t sub_2484ADD7C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_2484ADDA4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = a2;
  uint64_t v4 = **v2;
  uint64_t v5 = v2[1][3];
  uint64_t v6 = v2[1][2] * ((*v2)[1] + a2);
  uint64_t v7 = v5 + v6 + 4 * v4;
  unint64_t v8 = (*v2)[2];
  uint64_t v9 = (float32x4_t *)v2[3];
  uint64_t v10 = *v2[2];
  uint64_t v11 = *(void *)(*v2[4] + 24);
  uint64_t v12 = *(void *)(*v2[4] + 16) * v3;
  uint64_t v13 = v11 + v12;
  uint64_t v14 = v7 - 8 * v10;
  uint64_t v15 = v7 - 4 * v10;
  uint64_t v16 = v7 + 4 * v10;
  uint64_t v17 = v7 + 8 * v10;
  float32x4_t v19 = *v9;
  float32x4_t v18 = v9[1];
  float32x4_t v20 = v9[2];
  float32x4_t v21 = v9[3];
  float32x4_t v23 = v9[4];
  float32x4_t v22 = v9[5];
  int8x16_t v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  int8x16_t v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  *(float32x4_t *)(v11 + v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v7), v18, vaddq_f32(*(float32x4_t *)(v7 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v24))), v20, vaddq_f32(*(float32x4_t *)(v7 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v25)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v15),
                                          v18,
                                          vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))), v20, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24))), v20, vaddq_f32(*(float32x4_t *)(v16 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v25))))), v22, vaddq_f32(
                                    vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v14), v18, vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), v20, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v17), v18, vaddq_f32(*(float32x4_t *)(v17 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v24))), v20, vaddq_f32(
                                        *(float32x4_t *)(v17 + 8),
                                        (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v25)))));
  if (v8 >= 0xA)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v12 + v11;
    uint64_t v30 = v6 + 4 * v4;
    uint64_t v31 = v29 + 16;
    uint64_t v32 = v30 + 24;
    uint64_t v33 = v5 + v30 + 24 - 4 * v10;
    uint64_t v34 = v30 + 4 * v10 + v5 + 24;
    uint64_t v35 = v30 + 8 * v10 + v5 + 12;
    uint64_t v36 = v5 + v32 - 8 * v10;
    for (unint64_t i = 10; i <= v8; i += 4)
    {
      *(float32x4_t *)(v31 + v28) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + v28 + 16)), v18, vaddq_f32(*(float32x4_t *)(v7 + v28 + 12), *(float32x4_t *)(v7 + v28 + 20))), v20, vaddq_f32(*(float32x4_t *)(v7 + v28 + 8), *(float32x4_t *)(v7 + v28 + 24)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v33 + v28 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v33 + v28 - 12),
                                                *(float32x4_t *)(v33 + v28 - 4))),
                                            v20,
                                            vaddq_f32(*(float32x4_t *)(v33 + v28 - 16), *(float32x4_t *)(v33 + v28))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v34 + v28 - 8)), v18, vaddq_f32(*(float32x4_t *)(v34 + v28 - 12), *(float32x4_t *)(v34 + v28 - 4))), v20, vaddq_f32(*(float32x4_t *)(v34 + v28 - 16), *(float32x4_t *)(v34 + v28))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v36 + v28 - 8)), v18, vaddq_f32(*(float32x4_t *)(v36 + v28 - 12), *(float32x4_t *)(v36 + v28 - 4))), v20, vaddq_f32(*(float32x4_t *)(v36 + v28 - 16), *(float32x4_t *)(v36 + v28))), vmlaq_f32(vmlaq_f32(
                                            vmulq_f32(v19, *(float32x4_t *)(v35 + v28 + 4)),
                                            v18,
                                            vaddq_f32(*(float32x4_t *)(v35 + v28), *(float32x4_t *)(v35 + v28 + 8))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v35 + v28 - 4), *(float32x4_t *)(v35 + v28 + 12)))));
      v28 += 16;
    }
    uint64_t v27 = i - 6;
    unint64_t v26 = i - 2;
  }
  else
  {
    unint64_t v26 = 8;
    uint64_t v27 = 4;
  }
  uint64_t result = v27;
  int8x16_t v39 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD010, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  float32x4_t v40 = vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v7 + 4 * v27 - 4), *(float32x4_t *)(v7 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v7 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v7 + 4 * v8 - 16), v39)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v15 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v15 + 4 * v27 - 4), *(float32x4_t *)(v15 + 4 * v8 - 16))), v20,
              vaddq_f32(*(float32x4_t *)(v15 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v8 - 16), v39))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v16 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v16 + 4 * v27 - 4), *(float32x4_t *)(v16 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v16 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v8 - 16), v39)))));
  *(float32x4_t *)(v13 + 4 * v27) = vmlaq_f32(v40, v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v14 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v14 + 4 * v27 - 4), *(float32x4_t *)(v14 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v14 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v8 - 16), v39))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v17 + 4 * v27)), v18, vaddq_f32(
                                              *(float32x4_t *)(v17 + 4 * v27 - 4),
                                              *(float32x4_t *)(v17 + 4 * v8 - 16))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v17 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v8 - 16), v39)))));
  if (v26 < v8)
  {
    do
    {
      float v41 = 0.0;
      for (uint64_t j = -2; j != 3; ++j)
      {
        if (j >= 0) {
          uint64_t v43 = j;
        }
        else {
          uint64_t v43 = -j;
        }
        for (uint64_t k = -2; k != 3; ++k)
        {
          if (k >= 0) {
            uint64_t v45 = k;
          }
          else {
            uint64_t v45 = -k;
          }
          uint64_t v46 = k + v26;
          if ((uint64_t)(k + v26) < 0 || v46 >= (uint64_t)v8)
          {
            unint64_t v47 = (unint64_t)v46 >> 63;
            do
            {
              uint64_t v48 = ~v46;
              if (v47) {
                uint64_t v49 = 0;
              }
              else {
                uint64_t v49 = 2 * v8;
              }
              uint64_t v46 = v49 + v48;
              unint64_t v47 = (unint64_t)v46 >> 63;
            }
            while (v46 < 0 || v46 >= (uint64_t)v8);
          }
          uint64_t result = 4 * v45;
          float v41 = v41 + (float)((float)(v9->f32[result] * *(float *)(v7 + 4 * j * v10 + 4 * v46)) * v9[v43 + 3].f32[0]);
        }
      }
      *(float *)(v13 + 4 * v26++) = v41;
    }
    while (v26 != v8);
  }
  return result * 4;
}

uint64_t sub_2484AE23C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

float32x4_t sub_2484AE264(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = a2;
  uint64_t v4 = **v2;
  uint64_t v5 = v2[1][3];
  uint64_t v6 = v2[1][2] * ((*v2)[1] + a2);
  uint64_t v7 = v5 + v6 + 4 * v4;
  unint64_t v8 = (*v2)[2];
  uint64_t v9 = (float32x4_t *)v2[3];
  uint64_t v10 = *v2[2];
  uint64_t v11 = *(void *)(*v2[4] + 24);
  uint64_t v12 = *(void *)(*v2[4] + 16) * v3;
  uint64_t v13 = v11 + v12;
  uint64_t v14 = v7 - 8 * v10;
  uint64_t v15 = v7 - 4 * v10;
  uint64_t v16 = v7 + 4 * v10;
  uint64_t v17 = v7 + 8 * v10;
  float32x4_t v19 = *v9;
  float32x4_t v18 = v9[1];
  float32x4_t v20 = v9[2];
  float32x4_t v21 = v9[3];
  float32x4_t v23 = v9[4];
  float32x4_t v22 = v9[5];
  int8x16_t v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  int8x16_t v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  *(float32x4_t *)(v11 + v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v7), v18, vaddq_f32(*(float32x4_t *)(v7 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v24))), v20, vaddq_f32(*(float32x4_t *)(v7 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v25)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v15),
                                          v18,
                                          vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))), v20, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24))), v20, vaddq_f32(*(float32x4_t *)(v16 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v25))))), v22, vaddq_f32(
                                    vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v14), v18, vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), v20, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v17), v18, vaddq_f32(*(float32x4_t *)(v17 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v24))), v20, vaddq_f32(
                                        *(float32x4_t *)(v17 + 8),
                                        (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v25)))));
  if (v8 >= 0xA)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v6 + 4 * v4;
    uint64_t v29 = v28 - 4 * v10;
    uint64_t v30 = v28 + 8 * v10;
    uint64_t v31 = v28 + 4 * v10;
    uint64_t v32 = v28 - 8 * v10;
    uint64_t v33 = v12 + v11 + 16;
    uint64_t v34 = v29 + v5 + 24;
    uint64_t v35 = v30 + v5 + 12;
    uint64_t v36 = v31 + v5 + 24;
    uint64_t v37 = v32 + v5 + 12;
    for (unint64_t i = 10; i <= v8; i += 4)
    {
      *(float32x4_t *)(v33 + v27) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + v27 + 16)), v18, vaddq_f32(*(float32x4_t *)(v7 + v27 + 12), *(float32x4_t *)(v7 + v27 + 20))), v20, vaddq_f32(*(float32x4_t *)(v7 + v27 + 8), *(float32x4_t *)(v7 + v27 + 24)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v34 + v27 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v34 + v27 - 12),
                                                *(float32x4_t *)(v34 + v27 - 4))),
                                            v20,
                                            vaddq_f32(*(float32x4_t *)(v34 + v27 - 16), *(float32x4_t *)(v34 + v27))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v36 + v27 - 8)), v18, vaddq_f32(*(float32x4_t *)(v36 + v27 - 12), *(float32x4_t *)(v36 + v27 - 4))), v20, vaddq_f32(*(float32x4_t *)(v36 + v27 - 16), *(float32x4_t *)(v36 + v27))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v37 + v27 + 4)), v18, vaddq_f32(*(float32x4_t *)(v37 + v27), *(float32x4_t *)(v37 + v27 + 8))), v20, vaddq_f32(*(float32x4_t *)(v37 + v27 - 4), *(float32x4_t *)(v37 + v27 + 12))), vmlaq_f32(vmlaq_f32(
                                            vmulq_f32(v19, *(float32x4_t *)(v35 + v27 + 4)),
                                            v18,
                                            vaddq_f32(*(float32x4_t *)(v35 + v27), *(float32x4_t *)(v35 + v27 + 8))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v35 + v27 - 4), *(float32x4_t *)(v35 + v27 + 12)))));
      v27 += 16;
    }
    uint64_t v26 = i - 6;
  }
  else
  {
    uint64_t v26 = 4;
  }
  int8x16_t v39 = (float32x4_t *)(v7 + 4 * v26);
  int8x16_t v40 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD020, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  int8x16_t v41 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD010, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
  float32x4_t v42 = vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *v39), v18, vaddq_f32(*(float32x4_t *)((char *)v39 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v39, v41))), v20, vaddq_f32(*(float32x4_t *)((char *)v39 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v39, v40)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v15 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v15 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v26), v41))), v20,
              vaddq_f32(*(float32x4_t *)(v15 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v26), v40))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v16 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v16 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v26), v41))), v20, vaddq_f32(*(float32x4_t *)(v16 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v26), v40)))));
  float32x4_t result = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v14 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v14 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v26), v41))), v20, vaddq_f32(*(float32x4_t *)(v14 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v26), v40))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v17 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v17 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v26), v41))), v20,
               vaddq_f32(*(float32x4_t *)(v17 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v26), v40))));
  *(float32x4_t *)(v13 + 4 * v26) = vmlaq_f32(v42, v22, result);
  return result;
}

uint64_t sub_2484AE654(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

unint64_t sub_2484AE67C(unint64_t result, uint64_t *a2, float32x4_t *a3, uint64_t *a4, void *a5)
{
  unint64_t v8 = (void *)result;
  if ((unint64_t)a2[2] >= 6)
  {
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] & 3;
    uint64_t v493 = v12;
    if (v13 == 2)
    {
      if (v12 < 1) {
        return result;
      }
      uint64_t v68 = 0;
      unint64_t v70 = *(void *)(result + 16);
      unint64_t v69 = *(void *)(result + 24);
      unint64_t v71 = v70 >> 2;
      unint64_t v72 = v69 + v70 * (v12 - 1);
      unint64_t v73 = v72 + 4 * (v70 >> 2);
      unint64_t v74 = v69 - 4 * v71;
      float32x4_t v75 = *a3;
      float32x4_t v76 = a3[1];
      float32x4_t v77 = a3[2];
      float32x4_t v78 = a3[3];
      float32x4_t v79 = a3[4];
      float32x4_t v80 = a3[5];
      int8x16_t v81 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
      int8x16_t v82 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
      uint64_t v83 = 1;
      if (v12 != 1) {
        uint64_t v83 = 2;
      }
      do
      {
        uint64_t v84 = *a2;
        uint64_t v85 = a2[1] + v68;
        uint64_t v87 = v8[2];
        uint64_t v86 = v8[3];
        float32x4_t result = v86 + v87 * v85 + 4 * *a2;
        unint64_t v88 = a2[2];
        unint64_t v89 = (float32x4_t *)(a5[3] + a5[2] * v68);
        unint64_t v90 = result - 8 * v71;
        unint64_t v91 = v73 + v72 - v90;
        if (v72 >= v90) {
          unint64_t v91 = result - 8 * v71;
        }
        BOOL v35 = v69 >= v90;
        unint64_t v92 = v69 - v90;
        BOOL v36 = v92 != 0 && v35;
        unint64_t v93 = v74 + v92;
        if (v36) {
          unint64_t v94 = v93;
        }
        else {
          unint64_t v94 = v91;
        }
        unint64_t v95 = result - 4 * v71;
        unint64_t v96 = v73 + v72 - v95;
        if (v72 >= v95) {
          unint64_t v96 = result - 4 * v71;
        }
        BOOL v35 = v69 >= v95;
        unint64_t v97 = v69 - v95;
        BOOL v36 = v97 != 0 && v35;
        unint64_t v98 = v74 + v97;
        if (v36) {
          unint64_t v96 = v98;
        }
        unint64_t v99 = result + 4 * v71;
        unint64_t v100 = v73 + v72 - v99;
        if (v72 >= v99) {
          unint64_t v100 = result + 4 * v71;
        }
        BOOL v35 = v69 >= v99;
        unint64_t v101 = v69 - v99;
        BOOL v36 = v101 != 0 && v35;
        unint64_t v102 = v74 + v101;
        if (v36) {
          unint64_t v100 = v102;
        }
        unint64_t v103 = result + 8 * v71;
        unint64_t v104 = v73 + v72 - v103;
        if (v72 >= v103) {
          unint64_t v104 = result + 8 * v71;
        }
        BOOL v35 = v69 >= v103;
        unint64_t v105 = v69 - v103;
        BOOL v36 = v105 != 0 && v35;
        unint64_t v106 = v74 + v105;
        if (v36) {
          unint64_t v104 = v106;
        }
        *unint64_t v89 = vmlaq_f32(vmlaq_f32(vmulq_f32(v78, vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)result), v76, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v81))), v77, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v82)))), v79, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v96), v76, vaddq_f32(*(float32x4_t *)(v96 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v96, v81))), v77, vaddq_f32(*(float32x4_t *)(v96 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v96, v82))),
                     vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v100), v76, vaddq_f32(*(float32x4_t *)(v100 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v100, v81))), v77, vaddq_f32(*(float32x4_t *)(v100 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v100, v82))))), v80, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v94), v76, vaddq_f32(*(float32x4_t *)(v94 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v94, v81))), v77, vaddq_f32(*(float32x4_t *)(v94 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v94, v82))), vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v104), v76,
                       vaddq_f32(*(float32x4_t *)(v104 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v104, v81))),
                     v77,
                     vaddq_f32(*(float32x4_t *)(v104 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v104, v82)))));
        if (v88 >= 0xA)
        {
          float v108 = v89 + 1;
          v109 = (float32x4_t *)(v86 + v87 * v85 + 4 * v84 + 24);
          uint64_t v110 = (float32x4_t *)(v96 + 24);
          unint64_t v111 = v104 + 12;
          int64_t v112 = (float32x4_t *)(v100 + 24);
          unint64_t v113 = v94 + 12;
          unint64_t v114 = 10;
          do
          {
            *v108++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v78, vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v109 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v109 - 12), *(float32x4_t *)((char *)v109 - 4))), v77, vaddq_f32(v109[-1], *v109))), v79, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v110 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v110 - 12), *(float32x4_t *)((char *)v110 - 4))), v77, vaddq_f32(v110[-1], *v110)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v112 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v112 - 12), *(float32x4_t *)((char *)v112 - 4))), v77, vaddq_f32(v112[-1], *v112)))), v80, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)(v113 + 4)), v76, vaddq_f32(*(float32x4_t *)v113, *(float32x4_t *)(v113 + 8))), v77, vaddq_f32(*(float32x4_t *)(v113 - 4), *(float32x4_t *)(v113 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)(v111 + 4)), v76,
                              vaddq_f32(*(float32x4_t *)v111, *(float32x4_t *)(v111 + 8))),
                            v77,
                            vaddq_f32(*(float32x4_t *)(v111 - 4), *(float32x4_t *)(v111 + 12)))));
            v114 += 4;
            ++v109;
            ++v110;
            v111 += 16;
            ++v112;
            v113 += 16;
          }
          while (v114 <= v88);
          unint64_t v107 = v114 - 6;
        }
        else
        {
          unint64_t v107 = 4;
        }
        if (v107 < v88)
        {
          do
          {
            float v115 = 0.0;
            for (uint64_t i = -2; i != 3; ++i)
            {
              if (i >= 0) {
                uint64_t v117 = i;
              }
              else {
                uint64_t v117 = -i;
              }
              float v118 = a3[v117 + 3].f32[0];
              unint64_t v119 = result + 4 * i * v71;
              unint64_t v120 = v73 + v72 - v119;
              if (v72 >= v119) {
                unint64_t v120 = result + 4 * i * v71;
              }
              BOOL v35 = v69 >= v119;
              unint64_t v121 = v69 - v119;
              BOOL v36 = v121 != 0 && v35;
              unint64_t v122 = v74 + v121;
              if (!v36) {
                unint64_t v122 = v120;
              }
              for (uint64_t j = -2; j != 3; ++j)
              {
                if (j >= 0) {
                  uint64_t v124 = j;
                }
                else {
                  uint64_t v124 = -j;
                }
                uint64_t v125 = j + v107;
                if ((uint64_t)(j + v107) < 0 || v125 >= (uint64_t)v88)
                {
                  unint64_t v126 = (unint64_t)v125 >> 63;
                  do
                  {
                    uint64_t v127 = ~v125;
                    if (v126) {
                      uint64_t v128 = 0;
                    }
                    else {
                      uint64_t v128 = 2 * v88;
                    }
                    uint64_t v125 = v128 + v127;
                    unint64_t v126 = (unint64_t)v125 >> 63;
                  }
                  while (v125 < 0 || v125 >= (uint64_t)v88);
                }
                float v115 = v115 + (float)((float)(a3[v124].f32[0] * *(float *)(v122 + 4 * v125)) * v118);
              }
            }
            v89->f32[v107++] = v115;
          }
          while (v107 != v88);
        }
        ++v68;
      }
      while (v68 != v83);
      if (v12 < 5)
      {
        if (v12 < 3) {
          return result;
        }
      }
      else
      {
        int8x16_t v486 = v82;
        int8x16_t v490 = v81;
        v505 = (void *)(v8[2] >> 2);
        v506[0] = a5;
        v497 = a2;
        v498 = v8;
        v499 = (uint64_t *)&v505;
        unint64_t v500 = (unint64_t)a3;
        v501 = (float32x4_t **)v506;
        if (a4)
        {
          uint64_t v129 = a4;
        }
        else
        {
          uint64_t v494 = 0;
          v495 = &v494;
          uint64_t v129 = &v494;
        }
        sub_2484AD514((uint64_t)v129, (v12 - 2), (uint64_t)&v497);
        int8x16_t v82 = v486;
        int8x16_t v81 = v490;
      }
      uint64_t v305 = v12 - 2;
      unint64_t v307 = v8[2];
      unint64_t v306 = v8[3];
      unint64_t v308 = v307 >> 2;
      unint64_t v309 = v306 + (a2[3] - 1) * v307;
      uint64_t v310 = -(uint64_t)(v307 >> 2);
      unint64_t v311 = v309 + 4 * v308;
      unint64_t v312 = v306 - 4 * v308;
      float32x4_t v313 = *a3;
      float32x4_t v314 = a3[1];
      float32x4_t v315 = a3[2];
      float32x4_t v316 = a3[3];
      float32x4_t v317 = a3[4];
      float32x4_t v318 = a3[5];
      do
      {
        uint64_t v319 = *a2;
        uint64_t v320 = a2[1] + v305;
        uint64_t v322 = v8[2];
        uint64_t v321 = v8[3];
        uint64_t v323 = v321 + v322 * v320 + 4 * *a2;
        float32x4_t result = a2[2];
        v324 = (float32x4_t *)(a5[3] + a5[2] * v305);
        unint64_t v325 = v323 + 8 * v310;
        uint64_t v326 = v311 + v309 - v325;
        if (v309 >= v325) {
          uint64_t v326 = v323 + 8 * v310;
        }
        BOOL v35 = v306 >= v325;
        unint64_t v327 = v306 - v325;
        BOOL v36 = v327 != 0 && v35;
        uint64_t v328 = v312 + v327;
        if (v36) {
          uint64_t v326 = v328;
        }
        unint64_t v329 = v323 + 4 * v310;
        uint64_t v330 = v311 + v309 - v329;
        if (v309 >= v329) {
          uint64_t v330 = v323 + 4 * v310;
        }
        BOOL v35 = v306 >= v329;
        unint64_t v331 = v306 - v329;
        BOOL v36 = v331 != 0 && v35;
        uint64_t v332 = v312 + v331;
        if (v36) {
          uint64_t v330 = v332;
        }
        unint64_t v333 = v323 + 4 * v308;
        uint64_t v334 = v311 + v309 - v333;
        if (v309 >= v333) {
          uint64_t v334 = v323 + 4 * v308;
        }
        BOOL v35 = v306 >= v333;
        unint64_t v335 = v306 - v333;
        BOOL v36 = v335 != 0 && v35;
        uint64_t v336 = v312 + v335;
        if (v36) {
          uint64_t v334 = v336;
        }
        unint64_t v337 = v323 + 8 * v308;
        uint64_t v338 = v311 + v309 - v337;
        if (v309 >= v337) {
          uint64_t v338 = v323 + 8 * v308;
        }
        BOOL v35 = v306 >= v337;
        unint64_t v339 = v306 - v337;
        BOOL v36 = v339 != 0 && v35;
        uint64_t v340 = v312 + v339;
        if (v36) {
          uint64_t v338 = v340;
        }
        float32x4_t *v324 = vmlaq_f32(vmlaq_f32(vmulq_f32(v316, vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v323), v314, vaddq_f32(*(float32x4_t *)(v323 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v323, v81))), v315, vaddq_f32(*(float32x4_t *)(v323 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v323, v82)))), v317, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v330), v314, vaddq_f32(*(float32x4_t *)(v330 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v330, v81))), v315, vaddq_f32(*(float32x4_t *)(v330 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v330, v82))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v334), v314, vaddq_f32(*(float32x4_t *)(v334 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v334, v81))), v315, vaddq_f32(*(float32x4_t *)(v334 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v334, v82))))), v318, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v326), v314, vaddq_f32(*(float32x4_t *)(v326 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v326, v81))), v315, vaddq_f32(*(float32x4_t *)(v326 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v326, v82))), vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v338), v314,
                        vaddq_f32(*(float32x4_t *)(v338 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v338, v81))),
                      v315,
                      vaddq_f32(*(float32x4_t *)(v338 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v338, v82)))));
        if (result >= 0xA)
        {
          v342 = v324 + 1;
          uint64_t v343 = (float32x4_t *)(v321 + v322 * v320 + 4 * v319 + 24);
          unint64_t v344 = (float32x4_t *)(v330 + 24);
          uint64_t v345 = v338 + 12;
          unint64_t v346 = (float32x4_t *)(v334 + 24);
          uint64_t v347 = v326 + 12;
          unint64_t v348 = 10;
          do
          {
            *v342++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v316, vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v343 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v343 - 12), *(float32x4_t *)((char *)v343 - 4))), v315, vaddq_f32(v343[-1], *v343))), v317, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v344 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v344 - 12), *(float32x4_t *)((char *)v344 - 4))), v315, vaddq_f32(v344[-1], *v344)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v346 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v346 - 12), *(float32x4_t *)((char *)v346 - 4))), v315, vaddq_f32(v346[-1], *v346)))), v318, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)(v347 + 4)), v314, vaddq_f32(*(float32x4_t *)v347, *(float32x4_t *)(v347 + 8))), v315, vaddq_f32(*(float32x4_t *)(v347 - 4), *(float32x4_t *)(v347 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)(v345 + 4)), v314,
                              vaddq_f32(*(float32x4_t *)v345, *(float32x4_t *)(v345 + 8))),
                            v315,
                            vaddq_f32(*(float32x4_t *)(v345 - 4), *(float32x4_t *)(v345 + 12)))));
            v348 += 4;
            ++v343;
            ++v344;
            v345 += 16;
            ++v346;
            v347 += 16;
          }
          while (v348 <= result);
          unint64_t v341 = v348 - 6;
        }
        else
        {
          unint64_t v341 = 4;
        }
        if (v341 < result)
        {
          do
          {
            float v349 = 0.0;
            for (uint64_t k = -2; k != 3; ++k)
            {
              if (k >= 0) {
                uint64_t v351 = k;
              }
              else {
                uint64_t v351 = -k;
              }
              float v352 = a3[v351 + 3].f32[0];
              unint64_t v353 = v323 + 4 * k * v308;
              uint64_t v354 = v311 + v309 - v353;
              if (v309 >= v353) {
                uint64_t v354 = v323 + 4 * k * v308;
              }
              BOOL v35 = v306 >= v353;
              unint64_t v355 = v306 - v353;
              BOOL v36 = v355 != 0 && v35;
              uint64_t v356 = v312 + v355;
              if (!v36) {
                uint64_t v356 = v354;
              }
              for (uint64_t m = -2; m != 3; ++m)
              {
                if (m >= 0) {
                  uint64_t v358 = m;
                }
                else {
                  uint64_t v358 = -m;
                }
                uint64_t v359 = m + v341;
                if ((uint64_t)(m + v341) < 0 || v359 >= (uint64_t)result)
                {
                  unint64_t v360 = (unint64_t)v359 >> 63;
                  do
                  {
                    uint64_t v361 = ~v359;
                    if (v360) {
                      uint64_t v362 = 0;
                    }
                    else {
                      uint64_t v362 = 2 * result;
                    }
                    uint64_t v359 = v362 + v361;
                    unint64_t v360 = (unint64_t)v359 >> 63;
                  }
                  while (v359 < 0 || v359 >= (uint64_t)result);
                }
                float v349 = v349 + (float)((float)(a3[v358].f32[0] * *(float *)(v356 + 4 * v359)) * v352);
              }
            }
            v324->f32[v341++] = v349;
          }
          while (v341 != result);
        }
        ++v305;
      }
      while (v305 < v12);
    }
    else if (v13 == 1)
    {
      if (v12 < 1) {
        return result;
      }
      uint64_t v130 = 0;
      unint64_t v132 = *(void *)(result + 16);
      unint64_t v131 = *(void *)(result + 24);
      unint64_t v133 = v132 >> 2;
      unint64_t v134 = v131 + v132 * (v12 - 1);
      unint64_t v135 = v134 + 4 * (v132 >> 2);
      unint64_t v136 = v131 - 4 * v133;
      float32x4_t v137 = *a3;
      float32x4_t v138 = a3[1];
      float32x4_t v139 = a3[2];
      float32x4_t v140 = a3[3];
      float32x4_t v141 = a3[4];
      float32x4_t v142 = a3[5];
      int8x16_t v143 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
      int8x16_t v144 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
      int8x16_t v145 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD010, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
      uint64_t v146 = 1;
      if (v12 != 1) {
        uint64_t v146 = 2;
      }
      do
      {
        uint64_t v147 = *a2;
        uint64_t v148 = a2[1] + v130;
        uint64_t v150 = v8[2];
        uint64_t v149 = v8[3];
        float32x4_t result = v149 + v150 * v148 + 4 * *a2;
        unint64_t v151 = a2[2];
        v152 = (float32x4_t *)(a5[3] + a5[2] * v130);
        unint64_t v153 = result - 8 * v133;
        unint64_t v154 = v135 + v134 - v153;
        if (v134 >= v153) {
          unint64_t v154 = result - 8 * v133;
        }
        BOOL v35 = v131 >= v153;
        unint64_t v155 = v131 - v153;
        BOOL v36 = v155 != 0 && v35;
        unint64_t v156 = v136 + v155;
        if (!v36) {
          unint64_t v156 = v154;
        }
        unint64_t v157 = result - 4 * v133;
        unint64_t v158 = v135 + v134 - v157;
        if (v134 >= v157) {
          unint64_t v158 = result - 4 * v133;
        }
        BOOL v35 = v131 >= v157;
        unint64_t v159 = v131 - v157;
        BOOL v36 = v159 != 0 && v35;
        unint64_t v160 = v136 + v159;
        if (v36) {
          unint64_t v161 = v160;
        }
        else {
          unint64_t v161 = v158;
        }
        unint64_t v162 = result + 4 * v133;
        unint64_t v163 = v135 + v134 - v162;
        if (v134 >= v162) {
          unint64_t v163 = result + 4 * v133;
        }
        BOOL v35 = v131 >= v162;
        unint64_t v164 = v131 - v162;
        BOOL v36 = v164 != 0 && v35;
        unint64_t v165 = v136 + v164;
        if (v36) {
          unint64_t v163 = v165;
        }
        unint64_t v166 = result + 8 * v133;
        unint64_t v167 = v135 + v134 - v166;
        if (v134 >= v166) {
          unint64_t v167 = result + 8 * v133;
        }
        BOOL v35 = v131 >= v166;
        unint64_t v168 = v131 - v166;
        BOOL v36 = v168 != 0 && v35;
        unint64_t v169 = v136 + v168;
        if (!v36) {
          unint64_t v169 = v167;
        }
        float32x4_t *v152 = vmlaq_f32(vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)result), v138, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v143))), v139, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v144)))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v161), v138, vaddq_f32(*(float32x4_t *)(v161 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v161, v143))), v139, vaddq_f32(*(float32x4_t *)(v161 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v161, v144))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v163), v138, vaddq_f32(*(float32x4_t *)(v163 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v163, v143))), v139, vaddq_f32(*(float32x4_t *)(v163 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v163, v144))))), v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v156), v138, vaddq_f32(*(float32x4_t *)(v156 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v156, v143))), v139, vaddq_f32(*(float32x4_t *)(v156 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v156, v144))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v169), v138,
                        vaddq_f32(*(float32x4_t *)(v169 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v169, v143))),
                      v139,
                      vaddq_f32(*(float32x4_t *)(v169 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v169, v144)))));
        if (v151 >= 0xA)
        {
          v172 = v152 + 1;
          float v173 = (float32x4_t *)(v149 + v150 * v148 + 4 * v147 + 24);
          unint64_t v174 = v169 + 12;
          unint64_t v175 = (float32x4_t *)(v161 + 24);
          long long v176 = (float32x4_t *)(v163 + 24);
          unint64_t v177 = v156 + 12;
          unint64_t v178 = 10;
          do
          {
            *v172++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v173 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v173 - 12), *(float32x4_t *)((char *)v173 - 4))), v139, vaddq_f32(v173[-1], *v173))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v175 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v175 - 12), *(float32x4_t *)((char *)v175 - 4))), v139, vaddq_f32(v175[-1], *v175)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v176 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v176 - 12), *(float32x4_t *)((char *)v176 - 4))), v139, vaddq_f32(v176[-1], *v176)))), v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v177 + 4)), v138, vaddq_f32(*(float32x4_t *)v177, *(float32x4_t *)(v177 + 8))), v139, vaddq_f32(*(float32x4_t *)(v177 - 4), *(float32x4_t *)(v177 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v174 + 4)), v138,
                              vaddq_f32(*(float32x4_t *)v174, *(float32x4_t *)(v174 + 8))),
                            v139,
                            vaddq_f32(*(float32x4_t *)(v174 - 4), *(float32x4_t *)(v174 + 12)))));
            v178 += 4;
            ++v173;
            v174 += 16;
            ++v175;
            ++v176;
            v177 += 16;
          }
          while (v178 <= v151);
          uint64_t v170 = v178 - 6;
          unint64_t v171 = v178 - 2;
          uint64_t v12 = v493;
        }
        else
        {
          uint64_t v170 = 4;
          unint64_t v171 = 8;
        }
        float32x4_t v179 = vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(result + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(result + 4 * v170 - 4), *(float32x4_t *)(result + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(result + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(result + 4 * v151 - 16), v145)))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v161 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v161 + 4 * v170 - 4), *(float32x4_t *)(v161 + 4 * v151 - 16))), v139,
                     vaddq_f32(*(float32x4_t *)(v161 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v161 + 4 * v151 - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v163 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v163 + 4 * v170 - 4), *(float32x4_t *)(v163 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v163 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v163 + 4 * v151 - 16), v145)))));
        *(float32x4_t *)((char *)v152 + 4 * v170) = vmlaq_f32(v179, v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v156 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v156 + 4 * v170 - 4), *(float32x4_t *)(v156 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v156 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v156 + 4 * v151 - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v169 + 4 * v170)),
                                                            v138,
                                                            vaddq_f32(*(float32x4_t *)(v169 + 4 * v170 - 4), *(float32x4_t *)(v169 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v169 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v169 + 4 * v151 - 16), v145)))));
        if (v171 < v151)
        {
          do
          {
            float v180 = 0.0;
            for (uint64_t n = -2; n != 3; ++n)
            {
              if (n >= 0) {
                uint64_t v182 = n;
              }
              else {
                uint64_t v182 = -n;
              }
              float v183 = a3[v182 + 3].f32[0];
              unint64_t v184 = result + 4 * n * v133;
              unint64_t v185 = v135 + v134 - v184;
              if (v134 >= v184) {
                unint64_t v185 = result + 4 * n * v133;
              }
              BOOL v35 = v131 >= v184;
              unint64_t v186 = v131 - v184;
              BOOL v36 = v186 != 0 && v35;
              unint64_t v187 = v136 + v186;
              if (!v36) {
                unint64_t v187 = v185;
              }
              for (uint64_t ii = -2; ii != 3; ++ii)
              {
                if (ii >= 0) {
                  uint64_t v189 = ii;
                }
                else {
                  uint64_t v189 = -ii;
                }
                uint64_t v190 = ii + v171;
                if ((uint64_t)(ii + v171) < 0 || v190 >= (uint64_t)v151)
                {
                  unint64_t v191 = (unint64_t)v190 >> 63;
                  do
                  {
                    uint64_t v192 = ~v190;
                    if (v191) {
                      uint64_t v193 = 0;
                    }
                    else {
                      uint64_t v193 = 2 * v151;
                    }
                    uint64_t v190 = v193 + v192;
                    unint64_t v191 = (unint64_t)v190 >> 63;
                  }
                  while (v190 < 0 || v190 >= (uint64_t)v151);
                }
                float v180 = v180 + (float)((float)(a3[v189].f32[0] * *(float *)(v187 + 4 * v190)) * v183);
              }
            }
            v152->f32[v171++] = v180;
          }
          while (v171 != v151);
        }
        ++v130;
      }
      while (v130 != v146);
      if (v12 < 5)
      {
        if (v12 < 3) {
          return result;
        }
      }
      else
      {
        int8x16_t v484 = v145;
        int8x16_t v487 = v144;
        int8x16_t v491 = v143;
        v505 = (void *)(v8[2] >> 2);
        v506[0] = a5;
        v497 = a2;
        v498 = v8;
        v499 = (uint64_t *)&v505;
        unint64_t v500 = (unint64_t)a3;
        v501 = (float32x4_t **)v506;
        if (a4)
        {
          uint64_t v194 = a4;
        }
        else
        {
          uint64_t v494 = 0;
          v495 = &v494;
          uint64_t v194 = &v494;
        }
        sub_2484AD46C((uint64_t)v194, (v12 - 2), (uint64_t)&v497);
        uint64_t v12 = v493;
        int8x16_t v144 = v487;
        int8x16_t v143 = v491;
        int8x16_t v145 = v484;
      }
      uint64_t v363 = v12 - 2;
      unint64_t v365 = v8[2];
      unint64_t v364 = v8[3];
      unint64_t v366 = v365 >> 2;
      unint64_t v367 = v364 + (a2[3] - 1) * v365;
      uint64_t v368 = -(uint64_t)(v365 >> 2);
      unint64_t v369 = v367 + 4 * v366;
      unint64_t v370 = v364 - 4 * v366;
      float32x4_t v371 = *a3;
      float32x4_t v372 = a3[1];
      float32x4_t v373 = a3[2];
      float32x4_t v374 = a3[3];
      float32x4_t v375 = a3[4];
      float32x4_t v376 = a3[5];
      do
      {
        uint64_t v377 = *a2;
        uint64_t v378 = a2[1] + v363;
        uint64_t v380 = v8[2];
        uint64_t v379 = v8[3];
        uint64_t v381 = v379 + v380 * v378 + 4 * *a2;
        float32x4_t result = a2[2];
        uint64_t v382 = (float32x4_t *)(a5[3] + a5[2] * v363);
        unint64_t v383 = v381 + 8 * v368;
        uint64_t v384 = v369 + v367 - v383;
        if (v367 >= v383) {
          uint64_t v384 = v381 + 8 * v368;
        }
        BOOL v35 = v364 >= v383;
        unint64_t v385 = v364 - v383;
        BOOL v36 = v385 != 0 && v35;
        uint64_t v386 = v370 + v385;
        if (!v36) {
          uint64_t v386 = v384;
        }
        unint64_t v387 = v381 + 4 * v368;
        uint64_t v388 = v369 + v367 - v387;
        if (v367 >= v387) {
          uint64_t v388 = v381 + 4 * v368;
        }
        BOOL v35 = v364 >= v387;
        unint64_t v389 = v364 - v387;
        BOOL v36 = v389 != 0 && v35;
        uint64_t v390 = v370 + v389;
        if (v36) {
          uint64_t v391 = v390;
        }
        else {
          uint64_t v391 = v388;
        }
        unint64_t v392 = v381 + 4 * v366;
        uint64_t v393 = v369 + v367 - v392;
        if (v367 >= v392) {
          uint64_t v393 = v381 + 4 * v366;
        }
        BOOL v35 = v364 >= v392;
        unint64_t v394 = v364 - v392;
        BOOL v36 = v394 != 0 && v35;
        uint64_t v395 = v370 + v394;
        if (v36) {
          uint64_t v393 = v395;
        }
        unint64_t v396 = v381 + 8 * v366;
        uint64_t v397 = v369 + v367 - v396;
        if (v367 >= v396) {
          uint64_t v397 = v381 + 8 * v366;
        }
        BOOL v35 = v364 >= v396;
        unint64_t v398 = v364 - v396;
        BOOL v36 = v398 != 0 && v35;
        uint64_t v399 = v370 + v398;
        if (!v36) {
          uint64_t v399 = v397;
        }
        *uint64_t v382 = vmlaq_f32(vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v381), v372, vaddq_f32(*(float32x4_t *)(v381 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v381, v143))), v373, vaddq_f32(*(float32x4_t *)(v381 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v381, v144)))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v391), v372, vaddq_f32(*(float32x4_t *)(v391 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v391, v143))), v373, vaddq_f32(*(float32x4_t *)(v391 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v391, v144))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v393), v372, vaddq_f32(*(float32x4_t *)(v393 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v393, v143))), v373, vaddq_f32(*(float32x4_t *)(v393 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v393, v144))))), v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v386), v372, vaddq_f32(*(float32x4_t *)(v386 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v386, v143))), v373, vaddq_f32(*(float32x4_t *)(v386 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v386, v144))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v399), v372,
                        vaddq_f32(*(float32x4_t *)(v399 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v399, v143))),
                      v373,
                      vaddq_f32(*(float32x4_t *)(v399 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v399, v144)))));
        if (result >= 0xA)
        {
          v402 = v382 + 1;
          uint64_t v403 = (float32x4_t *)(v379 + v380 * v378 + 4 * v377 + 24);
          uint64_t v404 = v399 + 12;
          uint64_t v405 = (float32x4_t *)(v391 + 24);
          v406 = (float32x4_t *)(v393 + 24);
          uint64_t v407 = v386 + 12;
          unint64_t v408 = 10;
          do
          {
            *v402++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v403 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v403 - 12), *(float32x4_t *)((char *)v403 - 4))), v373, vaddq_f32(v403[-1], *v403))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v405 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v405 - 12), *(float32x4_t *)((char *)v405 - 4))), v373, vaddq_f32(v405[-1], *v405)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v406 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v406 - 12), *(float32x4_t *)((char *)v406 - 4))), v373, vaddq_f32(v406[-1], *v406)))), v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v407 + 4)), v372, vaddq_f32(*(float32x4_t *)v407, *(float32x4_t *)(v407 + 8))), v373, vaddq_f32(*(float32x4_t *)(v407 - 4), *(float32x4_t *)(v407 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v404 + 4)), v372,
                              vaddq_f32(*(float32x4_t *)v404, *(float32x4_t *)(v404 + 8))),
                            v373,
                            vaddq_f32(*(float32x4_t *)(v404 - 4), *(float32x4_t *)(v404 + 12)))));
            v408 += 4;
            ++v403;
            v404 += 16;
            ++v405;
            ++v406;
            v407 += 16;
          }
          while (v408 <= result);
          uint64_t v400 = v408 - 6;
          unint64_t v401 = v408 - 2;
        }
        else
        {
          uint64_t v400 = 4;
          unint64_t v401 = 8;
        }
        float32x4_t v409 = vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v381 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v381 + 4 * v400 - 4), *(float32x4_t *)(v381 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v381 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v381 + 4 * result - 16), v145)))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v391 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v391 + 4 * v400 - 4), *(float32x4_t *)(v391 + 4 * result - 16))), v373,
                     vaddq_f32(*(float32x4_t *)(v391 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v391 + 4 * result - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v393 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v393 + 4 * v400 - 4), *(float32x4_t *)(v393 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v393 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v393 + 4 * result - 16), v145)))));
        *(float32x4_t *)((char *)v382 + 4 * v400) = vmlaq_f32(v409, v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v386 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v386 + 4 * v400 - 4), *(float32x4_t *)(v386 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v386 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v386 + 4 * result - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v399 + 4 * v400)),
                                                            v372,
                                                            vaddq_f32(*(float32x4_t *)(v399 + 4 * v400 - 4), *(float32x4_t *)(v399 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v399 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v399 + 4 * result - 16), v145)))));
        if (v401 < result)
        {
          do
          {
            float v410 = 0.0;
            for (juint64_t j = -2; jj != 3; ++jj)
            {
              if (jj >= 0) {
                uint64_t v412 = jj;
              }
              else {
                uint64_t v412 = -jj;
              }
              float v413 = a3[v412 + 3].f32[0];
              unint64_t v414 = v381 + 4 * jj * v366;
              uint64_t v415 = v369 + v367 - v414;
              if (v367 >= v414) {
                uint64_t v415 = v381 + 4 * jj * v366;
              }
              BOOL v35 = v364 >= v414;
              unint64_t v416 = v364 - v414;
              BOOL v36 = v416 != 0 && v35;
              uint64_t v417 = v370 + v416;
              if (!v36) {
                uint64_t v417 = v415;
              }
              for (kuint64_t k = -2; kk != 3; ++kk)
              {
                if (kk >= 0) {
                  uint64_t v419 = kk;
                }
                else {
                  uint64_t v419 = -kk;
                }
                uint64_t v420 = kk + v401;
                if ((uint64_t)(kk + v401) < 0 || v420 >= (uint64_t)result)
                {
                  unint64_t v421 = (unint64_t)v420 >> 63;
                  do
                  {
                    uint64_t v422 = ~v420;
                    if (v421) {
                      uint64_t v423 = 0;
                    }
                    else {
                      uint64_t v423 = 2 * result;
                    }
                    uint64_t v420 = v423 + v422;
                    unint64_t v421 = (unint64_t)v420 >> 63;
                  }
                  while (v420 < 0 || v420 >= (uint64_t)result);
                }
                float v410 = v410 + (float)((float)(a3[v419].f32[0] * *(float *)(v417 + 4 * v420)) * v413);
              }
            }
            v382->f32[v401++] = v410;
          }
          while (v401 != result);
        }
        ++v363;
      }
      while (v363 < v12);
    }
    else
    {
      uint64_t v14 = v12 - 1;
      if (v13)
      {
        if (v12 < 1) {
          return result;
        }
        uint64_t v195 = 0;
        unint64_t v197 = *(void *)(result + 16);
        unint64_t v196 = *(void *)(result + 24);
        unint64_t v198 = v197 >> 2;
        unint64_t v199 = v196 + v197 * v14;
        unint64_t v200 = v199 + 4 * (v197 >> 2);
        unint64_t v201 = v196 - 4 * v198;
        float32x4_t v202 = *a3;
        float32x4_t v203 = a3[1];
        float32x4_t v204 = a3[2];
        float32x4_t v205 = a3[3];
        float32x4_t v206 = a3[4];
        float32x4_t v207 = a3[5];
        int8x16_t v208 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        int8x16_t v209 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        uint64_t v210 = 1;
        if (v12 != 1) {
          uint64_t v210 = 2;
        }
        do
        {
          uint64_t v211 = *a2;
          uint64_t v212 = a2[1] + v195;
          uint64_t v214 = v8[2];
          uint64_t v213 = v8[3];
          float32x4_t result = v213 + v214 * v212 + 4 * *a2;
          unint64_t v215 = a2[2];
          uint64_t v216 = (float32x4_t *)(a5[3] + a5[2] * v195);
          unint64_t v217 = result - 8 * v198;
          unint64_t v218 = v200 + v199 - v217;
          if (v199 >= v217) {
            unint64_t v218 = result - 8 * v198;
          }
          BOOL v35 = v196 >= v217;
          unint64_t v219 = v196 - v217;
          BOOL v36 = v219 != 0 && v35;
          unint64_t v220 = v201 + v219;
          if (v36) {
            unint64_t v221 = v220;
          }
          else {
            unint64_t v221 = v218;
          }
          unint64_t v222 = result - 4 * v198;
          unint64_t v223 = v200 + v199 - v222;
          if (v199 >= v222) {
            unint64_t v223 = result - 4 * v198;
          }
          BOOL v35 = v196 >= v222;
          unint64_t v224 = v196 - v222;
          BOOL v36 = v224 != 0 && v35;
          unint64_t v225 = v201 + v224;
          if (v36) {
            unint64_t v223 = v225;
          }
          unint64_t v226 = result + 4 * v198;
          unint64_t v227 = v200 + v199 - v226;
          if (v199 >= v226) {
            unint64_t v227 = result + 4 * v198;
          }
          BOOL v35 = v196 >= v226;
          unint64_t v228 = v196 - v226;
          BOOL v36 = v228 != 0 && v35;
          unint64_t v229 = v201 + v228;
          if (v36) {
            unint64_t v227 = v229;
          }
          unint64_t v230 = result + 8 * v198;
          unint64_t v231 = v200 + v199 - v230;
          if (v199 >= v230) {
            unint64_t v231 = result + 8 * v198;
          }
          BOOL v35 = v196 >= v230;
          unint64_t v232 = v196 - v230;
          BOOL v36 = v232 != 0 && v35;
          unint64_t v233 = v201 + v232;
          if (v36) {
            unint64_t v231 = v233;
          }
          *uint64_t v216 = vmlaq_f32(vmlaq_f32(vmulq_f32(v205, vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)result), v203, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v208))), v204, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v209)))), v206, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v223), v203, vaddq_f32(*(float32x4_t *)(v223 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v223, v208))), v204, vaddq_f32(*(float32x4_t *)(v223 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v223, v209))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v227), v203, vaddq_f32(*(float32x4_t *)(v227 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v227, v208))), v204, vaddq_f32(*(float32x4_t *)(v227 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v227, v209))))), v207, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v221), v203, vaddq_f32(*(float32x4_t *)(v221 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v221, v208))), v204, vaddq_f32(*(float32x4_t *)(v221 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v221, v209))), vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v231), v203,
                          vaddq_f32(*(float32x4_t *)(v231 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v231, v208))),
                        v204,
                        vaddq_f32(*(float32x4_t *)(v231 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v231, v209)))));
          if (v215 >= 0xA)
          {
            uint64_t v235 = v216 + 1;
            uint64_t v236 = (float32x4_t *)(v213 + v214 * v212 + 4 * v211 + 24);
            long long v237 = (float32x4_t *)(v223 + 24);
            unint64_t v238 = v231 + 12;
            long long v239 = (float32x4_t *)(v227 + 24);
            unint64_t v240 = v221 + 12;
            unint64_t v241 = 10;
            do
            {
              *v235++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v205, vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v236 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v236 - 12), *(float32x4_t *)((char *)v236 - 4))), v204, vaddq_f32(v236[-1], *v236))), v206, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v237 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v237 - 12), *(float32x4_t *)((char *)v237 - 4))), v204, vaddq_f32(v237[-1], *v237)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v239 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v239 - 12), *(float32x4_t *)((char *)v239 - 4))), v204, vaddq_f32(v239[-1], *v239)))), v207, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)(v240 + 4)), v203, vaddq_f32(*(float32x4_t *)v240, *(float32x4_t *)(v240 + 8))), v204, vaddq_f32(*(float32x4_t *)(v240 - 4), *(float32x4_t *)(v240 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)(v238 + 4)), v203,
                                vaddq_f32(*(float32x4_t *)v238, *(float32x4_t *)(v238 + 8))),
                              v204,
                              vaddq_f32(*(float32x4_t *)(v238 - 4), *(float32x4_t *)(v238 + 12)))));
              v241 += 4;
              ++v236;
              ++v237;
              v238 += 16;
              ++v239;
              v240 += 16;
            }
            while (v241 <= v215);
            unint64_t v234 = v241 - 6;
          }
          else
          {
            unint64_t v234 = 4;
          }
          if (v234 < v215)
          {
            do
            {
              float v242 = 0.0;
              for (muint64_t m = -2; mm != 3; ++mm)
              {
                if (mm >= 0) {
                  uint64_t v244 = mm;
                }
                else {
                  uint64_t v244 = -mm;
                }
                float v245 = a3[v244 + 3].f32[0];
                unint64_t v246 = result + 4 * mm * v198;
                unint64_t v247 = v200 + v199 - v246;
                if (v199 >= v246) {
                  unint64_t v247 = result + 4 * mm * v198;
                }
                BOOL v35 = v196 >= v246;
                unint64_t v248 = v196 - v246;
                BOOL v36 = v248 != 0 && v35;
                unint64_t v249 = v201 + v248;
                if (!v36) {
                  unint64_t v249 = v247;
                }
                for (nuint64_t n = -2; nn != 3; ++nn)
                {
                  if (nn >= 0) {
                    uint64_t v251 = nn;
                  }
                  else {
                    uint64_t v251 = -nn;
                  }
                  uint64_t v252 = nn + v234;
                  if ((uint64_t)(nn + v234) < 0 || v252 >= (uint64_t)v215)
                  {
                    unint64_t v253 = (unint64_t)v252 >> 63;
                    do
                    {
                      uint64_t v254 = ~v252;
                      if (v253) {
                        uint64_t v255 = 0;
                      }
                      else {
                        uint64_t v255 = 2 * v215;
                      }
                      uint64_t v252 = v255 + v254;
                      unint64_t v253 = (unint64_t)v252 >> 63;
                    }
                    while (v252 < 0 || v252 >= (uint64_t)v215);
                  }
                  float v242 = v242 + (float)((float)(a3[v251].f32[0] * *(float *)(v249 + 4 * v252)) * v245);
                }
              }
              v216->f32[v234++] = v242;
            }
            while (v234 != v215);
          }
          ++v195;
        }
        while (v195 != v210);
        if (v12 < 5)
        {
          if (v12 < 3) {
            return result;
          }
        }
        else
        {
          int8x16_t v488 = v209;
          int8x16_t v492 = v208;
          v505 = (void *)(v8[2] >> 2);
          v506[0] = a5;
          v497 = a2;
          v498 = v8;
          v499 = (uint64_t *)&v505;
          unint64_t v500 = (unint64_t)a3;
          v501 = (float32x4_t **)v506;
          if (a4)
          {
            v256 = a4;
          }
          else
          {
            uint64_t v494 = 0;
            v495 = &v494;
            v256 = &v494;
          }
          sub_2484AD5BC((uint64_t)v256, (v12 - 2), (uint64_t)&v497);
          int8x16_t v209 = v488;
          int8x16_t v208 = v492;
        }
        uint64_t v424 = v12 - 2;
        unint64_t v426 = v8[2];
        unint64_t v425 = v8[3];
        unint64_t v427 = v426 >> 2;
        unint64_t v428 = v425 + (a2[3] - 1) * v426;
        uint64_t v429 = -(uint64_t)(v426 >> 2);
        unint64_t v430 = v428 + 4 * v427;
        unint64_t v431 = v425 - 4 * v427;
        float32x4_t v432 = *a3;
        float32x4_t v433 = a3[1];
        float32x4_t v434 = a3[2];
        float32x4_t v435 = a3[3];
        float32x4_t v436 = a3[4];
        float32x4_t v437 = a3[5];
        do
        {
          uint64_t v438 = *a2;
          uint64_t v439 = a2[1] + v424;
          uint64_t v441 = v8[2];
          uint64_t v440 = v8[3];
          uint64_t v442 = v440 + v441 * v439 + 4 * *a2;
          float32x4_t result = a2[2];
          long long v443 = (float32x4_t *)(a5[3] + a5[2] * v424);
          unint64_t v444 = v442 + 8 * v429;
          uint64_t v445 = v430 + v428 - v444;
          if (v428 >= v444) {
            uint64_t v445 = v442 + 8 * v429;
          }
          BOOL v35 = v425 >= v444;
          unint64_t v446 = v425 - v444;
          BOOL v36 = v446 != 0 && v35;
          uint64_t v447 = v431 + v446;
          if (v36) {
            uint64_t v445 = v447;
          }
          unint64_t v448 = v442 + 4 * v429;
          uint64_t v449 = v430 + v428 - v448;
          if (v428 >= v448) {
            uint64_t v449 = v442 + 4 * v429;
          }
          BOOL v35 = v425 >= v448;
          unint64_t v450 = v425 - v448;
          BOOL v36 = v450 != 0 && v35;
          uint64_t v451 = v431 + v450;
          if (v36) {
            uint64_t v449 = v451;
          }
          unint64_t v452 = v442 + 4 * v427;
          uint64_t v453 = v430 + v428 - v452;
          if (v428 >= v452) {
            uint64_t v453 = v442 + 4 * v427;
          }
          BOOL v35 = v425 >= v452;
          unint64_t v454 = v425 - v452;
          BOOL v36 = v454 != 0 && v35;
          uint64_t v455 = v431 + v454;
          if (v36) {
            uint64_t v453 = v455;
          }
          unint64_t v456 = v442 + 8 * v427;
          uint64_t v457 = v430 + v428 - v456;
          if (v428 >= v456) {
            uint64_t v457 = v442 + 8 * v427;
          }
          BOOL v35 = v425 >= v456;
          unint64_t v458 = v425 - v456;
          BOOL v36 = v458 != 0 && v35;
          uint64_t v459 = v431 + v458;
          if (v36) {
            uint64_t v457 = v459;
          }
          *long long v443 = vmlaq_f32(vmlaq_f32(vmulq_f32(v435, vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v442), v433, vaddq_f32(*(float32x4_t *)(v442 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v442, v208))), v434, vaddq_f32(*(float32x4_t *)(v442 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v442, v209)))), v436, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v449), v433, vaddq_f32(*(float32x4_t *)(v449 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v449, v208))), v434, vaddq_f32(*(float32x4_t *)(v449 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v449, v209))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v453), v433, vaddq_f32(*(float32x4_t *)(v453 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v453, v208))), v434, vaddq_f32(*(float32x4_t *)(v453 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v453, v209))))), v437, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v445), v433, vaddq_f32(*(float32x4_t *)(v445 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v445, v208))), v434, vaddq_f32(*(float32x4_t *)(v445 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v445, v209))), vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v457), v433,
                          vaddq_f32(*(float32x4_t *)(v457 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v457, v208))),
                        v434,
                        vaddq_f32(*(float32x4_t *)(v457 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v457, v209)))));
          if (result >= 0xA)
          {
            long long v461 = v443 + 1;
            uint64_t v462 = (float32x4_t *)(v440 + v441 * v439 + 4 * v438 + 24);
            long long v463 = (float32x4_t *)(v449 + 24);
            uint64_t v464 = v457 + 12;
            uint64_t v465 = (float32x4_t *)(v453 + 24);
            uint64_t v466 = v445 + 12;
            unint64_t v467 = 10;
            do
            {
              *v461++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v435, vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v462 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v462 - 12), *(float32x4_t *)((char *)v462 - 4))), v434, vaddq_f32(v462[-1], *v462))), v436, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v463 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v463 - 12), *(float32x4_t *)((char *)v463 - 4))), v434, vaddq_f32(v463[-1], *v463)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v465 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v465 - 12), *(float32x4_t *)((char *)v465 - 4))), v434, vaddq_f32(v465[-1], *v465)))), v437, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)(v466 + 4)), v433, vaddq_f32(*(float32x4_t *)v466, *(float32x4_t *)(v466 + 8))), v434, vaddq_f32(*(float32x4_t *)(v466 - 4), *(float32x4_t *)(v466 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)(v464 + 4)), v433,
                                vaddq_f32(*(float32x4_t *)v464, *(float32x4_t *)(v464 + 8))),
                              v434,
                              vaddq_f32(*(float32x4_t *)(v464 - 4), *(float32x4_t *)(v464 + 12)))));
              v467 += 4;
              ++v462;
              ++v463;
              v464 += 16;
              ++v465;
              v466 += 16;
            }
            while (v467 <= result);
            unint64_t v460 = v467 - 6;
          }
          else
          {
            unint64_t v460 = 4;
          }
          if (v460 < result)
          {
            do
            {
              float v468 = 0.0;
              for (uint64_t i1 = -2; i1 != 3; ++i1)
              {
                if (i1 >= 0) {
                  uint64_t v470 = i1;
                }
                else {
                  uint64_t v470 = -i1;
                }
                float v471 = a3[v470 + 3].f32[0];
                unint64_t v472 = v442 + 4 * i1 * v427;
                uint64_t v473 = v430 + v428 - v472;
                if (v428 >= v472) {
                  uint64_t v473 = v442 + 4 * i1 * v427;
                }
                BOOL v35 = v425 >= v472;
                unint64_t v474 = v425 - v472;
                BOOL v36 = v474 != 0 && v35;
                uint64_t v475 = v431 + v474;
                if (!v36) {
                  uint64_t v475 = v473;
                }
                for (uint64_t i2 = -2; i2 != 3; ++i2)
                {
                  if (i2 >= 0) {
                    uint64_t v477 = i2;
                  }
                  else {
                    uint64_t v477 = -i2;
                  }
                  uint64_t v478 = i2 + v460;
                  if ((uint64_t)(i2 + v460) < 0 || v478 >= (uint64_t)result)
                  {
                    unint64_t v479 = (unint64_t)v478 >> 63;
                    do
                    {
                      uint64_t v480 = ~v478;
                      if (v479) {
                        uint64_t v481 = 0;
                      }
                      else {
                        uint64_t v481 = 2 * result;
                      }
                      uint64_t v478 = v481 + v480;
                      unint64_t v479 = (unint64_t)v478 >> 63;
                    }
                    while (v478 < 0 || v478 >= (uint64_t)result);
                  }
                  float v468 = v468 + (float)((float)(a3[v477].f32[0] * *(float *)(v475 + 4 * v478)) * v471);
                }
              }
              v443->f32[v460++] = v468;
            }
            while (v460 != result);
          }
          ++v424;
        }
        while (v424 < v12);
      }
      else
      {
        if (v12 < 1) {
          return result;
        }
        uint64_t v15 = 0;
        unint64_t v17 = *(void *)(result + 16);
        unint64_t v16 = *(void *)(result + 24);
        unint64_t v18 = v17 >> 2;
        unint64_t v19 = v16 + v17 * v14;
        unint64_t v20 = v19 + 4 * (v17 >> 2);
        unint64_t v21 = v16 - 4 * v18;
        int8x16_t v22 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DCFE0, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        int8x16_t v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD000, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        int8x16_t v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD020, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        int8x16_t v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2484DD010, (int8x16_t)xmmword_2484DCFD0), 2uLL), (int8x16_t)xmmword_2484DCFF0);
        uint64_t v26 = 1;
        if (v12 != 1) {
          uint64_t v26 = 2;
        }
        do
        {
          uint64_t v27 = *a2;
          uint64_t v28 = a2[1] + v15;
          uint64_t v30 = v8[2];
          uint64_t v29 = v8[3];
          uint64_t v31 = v29 + v30 * v28 + 4 * *a2;
          unint64_t v32 = a2[2];
          float32x4_t result = a5[3] + a5[2] * v15;
          unint64_t v33 = v31 - 8 * v18;
          uint64_t v34 = v20 + v19 - v33;
          if (v19 >= v33) {
            uint64_t v34 = v31 - 8 * v18;
          }
          BOOL v35 = v16 >= v33;
          unint64_t v37 = v16 - v33;
          BOOL v36 = v37 != 0 && v35;
          uint64_t v38 = v21 + v37;
          if (!v36) {
            uint64_t v38 = v34;
          }
          unint64_t v39 = v31 - 4 * v18;
          uint64_t v40 = v20 + v19 - v39;
          if (v19 >= v39) {
            uint64_t v40 = v31 - 4 * v18;
          }
          BOOL v35 = v16 >= v39;
          unint64_t v41 = v16 - v39;
          BOOL v36 = v41 != 0 && v35;
          uint64_t v42 = v21 + v41;
          if (v36) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = v40;
          }
          unint64_t v44 = v31 + 4 * v18;
          uint64_t v45 = v20 + v19 - v44;
          if (v19 >= v44) {
            uint64_t v45 = v31 + 4 * v18;
          }
          BOOL v35 = v16 >= v44;
          unint64_t v46 = v16 - v44;
          BOOL v36 = v46 != 0 && v35;
          uint64_t v47 = v21 + v46;
          if (v36) {
            uint64_t v45 = v47;
          }
          unint64_t v48 = v31 + 8 * v18;
          uint64_t v49 = v20 + v19 - v48;
          if (v19 >= v48) {
            uint64_t v49 = v31 + 8 * v18;
          }
          BOOL v35 = v16 >= v48;
          unint64_t v50 = v16 - v48;
          BOOL v36 = v50 != 0 && v35;
          uint64_t v51 = v21 + v50;
          if (!v36) {
            uint64_t v51 = v49;
          }
          float32x4_t v53 = *a3;
          float32x4_t v52 = a3[1];
          float32x4_t v54 = a3[2];
          float32x4_t v55 = a3[3];
          float32x4_t v57 = a3[4];
          float32x4_t v56 = a3[5];
          *(float32x4_t *)float32x4_t result = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v31), v52, vaddq_f32(*(float32x4_t *)(v31 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v31, v22))), v54, vaddq_f32(*(float32x4_t *)(v31 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v31, v23)))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v43),
                                             v52,
                                             vaddq_f32(*(float32x4_t *)(v43 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v43, v22))), v54, vaddq_f32(*(float32x4_t *)(v43 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v43, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v45), v52, vaddq_f32(*(float32x4_t *)(v45 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v45, v22))), v54, vaddq_f32(*(float32x4_t *)(v45 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v45, v23))))), v56, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v38), v52, vaddq_f32(*(float32x4_t *)(v38 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v38, v22))), v54, vaddq_f32(*(float32x4_t *)(v38 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v38, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v51), v52, vaddq_f32(*(float32x4_t *)(v51 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v51, v22))), v54, vaddq_f32(
                                           *(float32x4_t *)(v51 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v51, v23)))));
          if (v32 >= 0xA)
          {
            uint64_t v59 = (float32x4_t *)(result + 16);
            double v60 = (float32x4_t *)(v29 + v30 * v28 + 4 * v27 + 24);
            double v61 = (float32x4_t *)(v43 + 24);
            uint64_t v62 = v51 + 12;
            uint64_t v63 = (float32x4_t *)(v45 + 24);
            uint64_t v64 = v38 + 12;
            unint64_t v65 = 10;
            do
            {
              *v59++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v60 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v60 - 12), *(float32x4_t *)((char *)v60 - 4))), v54, vaddq_f32(v60[-1], *v60))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v61 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v61 - 12), *(float32x4_t *)((char *)v61 - 4))), v54, vaddq_f32(v61[-1], *v61)),
                             vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v63 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v63 - 12), *(float32x4_t *)((char *)v63 - 4))), v54, vaddq_f32(v63[-1], *v63)))), v56, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v64 + 4)), v52, vaddq_f32(*(float32x4_t *)v64, *(float32x4_t *)(v64 + 8))), v54, vaddq_f32(*(float32x4_t *)(v64 - 4), *(float32x4_t *)(v64 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v62 + 4)), v52,
                               vaddq_f32(*(float32x4_t *)v62, *(float32x4_t *)(v62 + 8))),
                             v54,
                             vaddq_f32(*(float32x4_t *)(v62 - 4), *(float32x4_t *)(v62 + 12)))));
              v65 += 4;
              ++v60;
              ++v61;
              v62 += 16;
              ++v63;
              v64 += 16;
            }
            while (v65 <= v32);
            uint64_t v58 = v65 - 6;
            uint64_t v12 = v493;
          }
          else
          {
            uint64_t v58 = 4;
          }
          int64_t v66 = (float32x4_t *)(v31 + 4 * v58);
          *(float32x4_t *)(result + 4 * v58) = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *v66), v52, vaddq_f32(*(float32x4_t *)((char *)v66 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v66, v25))), v54, vaddq_f32(*(float32x4_t *)((char *)v66 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v66, v24)))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v43 + 4 * v58)),
                                                         v52,
                                                         vaddq_f32(*(float32x4_t *)(v43 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v43 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v43 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v43 + 4 * v58), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v45 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v45 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v45 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v45 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v45 + 4 * v58), v24))))), v56, vaddq_f32(
                                                   vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v38 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v38 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v38 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v38 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v38 + 4 * v58), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v51 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v51 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v51 + 4 * v58), v25))), v54, vaddq_f32(
                                                       *(float32x4_t *)(v51 + 4 * v58 - 8),
                                                       (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v51 + 4 * v58), v24)))));
          ++v15;
        }
        while (v15 != v26);
        if (v12 < 5)
        {
          if (v12 < 3) {
            return result;
          }
        }
        else
        {
          int8x16_t v482 = v25;
          int8x16_t v483 = v24;
          int8x16_t v485 = v23;
          int8x16_t v489 = v22;
          v505 = (void *)(v8[2] >> 2);
          v506[0] = a5;
          v497 = a2;
          v498 = v8;
          v499 = (uint64_t *)&v505;
          unint64_t v500 = (unint64_t)a3;
          v501 = (float32x4_t **)v506;
          if (a4)
          {
            int64_t v67 = a4;
          }
          else
          {
            uint64_t v494 = 0;
            v495 = &v494;
            int64_t v67 = &v494;
          }
          sub_2484AD3C4((uint64_t)v67, (v12 - 2), (uint64_t)&v497);
          uint64_t v12 = v493;
          int8x16_t v23 = v485;
          int8x16_t v22 = v489;
          int8x16_t v25 = v482;
          int8x16_t v24 = v483;
        }
        uint64_t v257 = v12 - 2;
        unint64_t v259 = v8[2];
        unint64_t v258 = v8[3];
        unint64_t v260 = v259 >> 2;
        uint64_t v261 = -(uint64_t)(v259 >> 2);
        unint64_t v262 = v258 + (a2[3] - 1) * v259;
        unint64_t v263 = v262 + 4 * v260;
        unint64_t v264 = v258 - 4 * v260;
        do
        {
          uint64_t v265 = *a2;
          uint64_t v266 = a2[1] + v257;
          uint64_t v268 = v8[2];
          uint64_t v267 = v8[3];
          uint64_t v269 = v267 + v268 * v266 + 4 * *a2;
          unint64_t v270 = a2[2];
          unint64_t v271 = (float32x4_t *)(a5[3] + a5[2] * v257);
          unint64_t v272 = v269 + 8 * v261;
          uint64_t v273 = v263 + v262 - v272;
          if (v262 >= v272) {
            uint64_t v273 = v269 + 8 * v261;
          }
          BOOL v35 = v258 >= v272;
          unint64_t v274 = v258 - v272;
          BOOL v36 = v274 != 0 && v35;
          uint64_t v275 = v264 + v274;
          if (!v36) {
            uint64_t v275 = v273;
          }
          unint64_t v276 = v269 + 4 * v261;
          uint64_t v277 = v263 + v262 - v276;
          if (v262 >= v276) {
            uint64_t v277 = v269 + 4 * v261;
          }
          BOOL v35 = v258 >= v276;
          unint64_t v278 = v258 - v276;
          BOOL v36 = v278 != 0 && v35;
          uint64_t v279 = v264 + v278;
          if (v36) {
            uint64_t v280 = v279;
          }
          else {
            uint64_t v280 = v277;
          }
          unint64_t v281 = v269 + 4 * v260;
          uint64_t v282 = v263 + v262 - v281;
          if (v262 >= v281) {
            uint64_t v282 = v269 + 4 * v260;
          }
          BOOL v35 = v258 >= v281;
          unint64_t v283 = v258 - v281;
          BOOL v36 = v283 != 0 && v35;
          uint64_t v284 = v264 + v283;
          if (v36) {
            uint64_t v282 = v284;
          }
          unint64_t v285 = v269 + 8 * v260;
          uint64_t v286 = v263 + v262 - v285;
          if (v262 >= v285) {
            uint64_t v286 = v269 + 8 * v260;
          }
          BOOL v35 = v258 >= v285;
          unint64_t v287 = v258 - v285;
          BOOL v36 = v287 != 0 && v35;
          uint64_t v288 = v264 + v287;
          if (!v36) {
            uint64_t v288 = v286;
          }
          float32x4_t v290 = *a3;
          float32x4_t v289 = a3[1];
          float32x4_t v291 = a3[2];
          float32x4_t v292 = a3[3];
          float32x4_t v294 = a3[4];
          float32x4_t v293 = a3[5];
          *unint64_t v271 = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v269), v289, vaddq_f32(*(float32x4_t *)(v269 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v269, v22))), v291, vaddq_f32(*(float32x4_t *)(v269 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v269, v23)))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v280), v289, vaddq_f32(*(float32x4_t *)(v280 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v280, v22))), v291, vaddq_f32(*(float32x4_t *)(v280 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v280, v23))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v282), v289, vaddq_f32(*(float32x4_t *)(v282 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v282, v22))), v291, vaddq_f32(*(float32x4_t *)(v282 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v282, v23))))), v293, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v275), v289, vaddq_f32(*(float32x4_t *)(v275 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v275, v22))), v291, vaddq_f32(*(float32x4_t *)(v275 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v275, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v288), v289,
                          vaddq_f32(*(float32x4_t *)(v288 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v288, v22))),
                        v291,
                        vaddq_f32(*(float32x4_t *)(v288 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v288, v23)))));
          if (v270 >= 0xA)
          {
            v296 = v271 + 1;
            unint64_t v297 = (float32x4_t *)(v267 + v268 * v266 + 4 * v265 + 24);
            uint64_t v298 = (float32x4_t *)(v280 + 24);
            uint64_t v299 = v288 + 12;
            unint64_t v300 = (float32x4_t *)(v282 + 24);
            uint64_t v301 = v275 + 12;
            unint64_t v302 = 10;
            do
            {
              *v296++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v297 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v297 - 12), *(float32x4_t *)((char *)v297 - 4))), v291, vaddq_f32(v297[-1], *v297))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v298 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v298 - 12), *(float32x4_t *)((char *)v298 - 4))), v291, vaddq_f32(v298[-1], *v298)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v300 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v300 - 12), *(float32x4_t *)((char *)v300 - 4))), v291, vaddq_f32(v300[-1], *v300)))), v293, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v301 + 4)), v289, vaddq_f32(*(float32x4_t *)v301, *(float32x4_t *)(v301 + 8))), v291, vaddq_f32(*(float32x4_t *)(v301 - 4), *(float32x4_t *)(v301 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v299 + 4)), v289,
                                vaddq_f32(*(float32x4_t *)v299, *(float32x4_t *)(v299 + 8))),
                              v291,
                              vaddq_f32(*(float32x4_t *)(v299 - 4), *(float32x4_t *)(v299 + 12)))));
              v302 += 4;
              ++v297;
              ++v298;
              v299 += 16;
              ++v300;
              v301 += 16;
            }
            while (v302 <= v270);
            uint64_t v295 = v302 - 6;
          }
          else
          {
            uint64_t v295 = 4;
          }
          v303 = (float32x4_t *)(v269 + 4 * v295);
          float32x4_t v304 = vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v275 + 4 * v295)), v289, vaddq_f32(*(float32x4_t *)(v275 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v275 + 4 * v295), v25))), v291, vaddq_f32(*(float32x4_t *)(v275 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v275 + 4 * v295), v24)));
          float32x4_t result = v288 + 4 * v295;
          *(float32x4_t *)((char *)v271 + 4 * v295) = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *v303), v289, vaddq_f32(*(float32x4_t *)((char *)v303 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v303, v25))), v291, vaddq_f32(*(float32x4_t *)((char *)v303 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v303, v24)))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v280 + 4 * v295)),
                                                                v289,
                                                                vaddq_f32(*(float32x4_t *)(v280 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v280 + 4 * v295), v25))), v291, vaddq_f32(*(float32x4_t *)(v280 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v280 + 4 * v295), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v282 + 4 * v295)), v289, vaddq_f32(*(float32x4_t *)(v282 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v282 + 4 * v295), v25))),
                                                              v291,
                                                              vaddq_f32(*(float32x4_t *)(v282 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v282 + 4 * v295), v24))))), v293, vaddq_f32(v304, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)result), v289, vaddq_f32(*(float32x4_t *)(result - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v25))), v291, vaddq_f32(*(float32x4_t *)(result - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v24)))));
          ++v257;
        }
        while (v257 < v12);
      }
    }
  }
  else
  {
    uint64_t v494 = 0;
    v495 = 0;
    *(void *)&long long v9 = *a5;
    *((void *)&v9 + 1) = HIDWORD(*a5);
    long long v496 = v9;
    v504 = a3;
    v505 = a5;
    v503 = a3 + 3;
    uint64_t v10 = *((unsigned int *)a2 + 6);
    v497 = &v494;
    v498 = &v505;
    v499 = a2;
    unint64_t v500 = result;
    v501 = &v504;
    v502 = &v503;
    if (a4)
    {
      uint64_t v11 = a4;
    }
    else
    {
      v506[0] = 0;
      v506[1] = v506;
      uint64_t v11 = v506;
    }
    return sub_2484B0A24((uint64_t)v11, v10, (uint64_t)&v497);
  }
  return result;
}

uint64_t sub_2484B0A24(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v3 = a2;
    v5[0] = sub_2483F1794;
    v5[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))result)(*(void *)(result + 8), v5, sub_2484B0BD0, sub_2484B0AC0, 0, a2);
    }
    else
    {
      for (unsigned int i = 0; i != v3; ++i)
        float32x4_t result = sub_2484B0AC0((uint64_t)v5, i);
    }
  }
  return result;
}

uint64_t sub_2484B0AC0(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(void **)(v2 + 16);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(**(void **)(v2 + 8) + 24)
       + *(void *)(**(void **)(v2 + 8) + 16) * (*(void *)(*(void *)v2 + 8) + a2)
       + 4 * **(void **)v2;
    uint64_t v7 = *(unsigned int **)(v2 + 24);
    uint64_t v8 = **(void **)(v2 + 32);
    uint64_t v9 = **(void **)(v2 + 40);
    unint64_t v10 = *v7;
    unint64_t v11 = v7[1];
    uint64_t v14 = v7 + 4;
    uint64_t v13 = *((void *)v7 + 2);
    uint64_t v12 = *((void *)v14 + 1);
    unint64_t v16 = v3;
    uint64_t v15 = *v3;
    float32x4_t result = 2 * v10;
    uint64_t v17 = v16[1] + a2;
    do
    {
      float v18 = 0.0;
      for (uint64_t i = -2; i != 3; ++i)
      {
        if ((int)i >= 0) {
          int v20 = i;
        }
        else {
          int v20 = -(int)i;
        }
        for (uint64_t j = v17 + i; j >= v11; uint64_t j = v23 + v22)
        {
          uint64_t v22 = ~j;
          if (j >= 0) {
            uint64_t v23 = 2 * v11;
          }
          else {
            uint64_t v23 = 0;
          }
        }
        float v24 = *(float *)(v9 + 4 * (4 * v20));
        uint64_t v25 = v12 + j * v13;
        for (uint64_t k = -2; k != 3; ++k)
        {
          if ((int)k >= 0) {
            int v27 = k;
          }
          else {
            int v27 = -(int)k;
          }
          for (uint64_t m = v5 + v15 + k; m >= v10; uint64_t m = v30 + v29)
          {
            uint64_t v29 = ~m;
            if (m >= 0) {
              uint64_t v30 = 2 * v10;
            }
            else {
              uint64_t v30 = 0;
            }
          }
          float v18 = v18 + (float)((float)(*(float *)(v8 + 4 * (4 * v27)) * *(float *)(v25 + 4 * m)) * v24);
        }
      }
      *(float *)(v6 + 4 * v5++) = v18;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t sub_2484B0BD0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_2484B0BF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a5;
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  v9[0] = a2;
  v9[1] = a1;
  v9[2] = a3;
  v9[3] = a6;
  v9[4] = &v10;
  if (a4)
  {
    uint64_t v8 = a4;
  }
  else
  {
    v11[0] = 0;
    v11[1] = v11;
    uint64_t v8 = v11;
  }
  sub_2484B0C54((uint64_t)v8, v7, (uint64_t)v9);
}

void sub_2484B0C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v3 = a2;
    v5[0] = sub_2483F1794;
    v5[1] = a3;
    if (*(void *)a1)
    {
      (*(void (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v5, sub_2484B1330, sub_2484B0CF0, 0, a2);
    }
    else
    {
      for (unsigned int i = 0; i != v3; ++i)
        sub_2484B0CF0((uint64_t)v5, i);
    }
  }
}

void sub_2484B0CF0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unint64_t **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  int64_t v5 = *(void *)(*(void *)v2 + 8) + a2;
  if (v5 < 2 || v5 >= *(unsigned int *)(v4 + 4) - 2)
  {
    unint64_t v21 = *(float32x4_t **)(v2 + 16);
    int v20 = *(uint64_t **)(v2 + 24);
    uint64_t v23 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v24 = *(void *)(**(void **)(v2 + 32) + 24);
    uint64_t v108 = v23;
    uint64_t v110 = v24;
    uint64_t v106 = *(void *)(**(void **)(v2 + 32) + 16) * (v22 + a2);
    uint64_t v25 = v24 + v106 + 4 * v23;
    unint64_t v26 = *v3;
    unint64_t v27 = v3[2] + *v3;
    if (v27 >= 4) {
      unint64_t v28 = 4;
    }
    else {
      unint64_t v28 = v3[2] + *v3;
    }
    unint64_t v29 = v28 - v26;
    if (v28 <= v26)
    {
      unint64_t v29 = 0;
    }
    else
    {
      uint64_t v30 = (float *)(v24 + v106 + 4 * v23);
      do
        *v30++ = sub_2484B1358((unsigned int *)v4, v26++, v5, v21->f32);
      while (v28 != v26);
    }
    if (v26 + 6 <= v27)
    {
      float32x4_t v32 = *v21;
      float32x4_t v33 = v21[1];
      float32x4_t v34 = v21[2];
      float32x4_t v35 = v21[3];
      float32x4_t v37 = v21[4];
      float32x4_t v36 = v21[5];
      unint64_t v38 = *(unsigned int *)(v4 + 4);
      uint64_t v40 = *(void *)(v4 + 16);
      uint64_t v39 = *(void *)(v4 + 24);
      BOOL v42 = v5 < 2 || v5 - 2 >= (uint64_t)v38;
      BOOL v43 = v5 + 2 >= (uint64_t)v38 || v5 < -2;
      BOOL v44 = v5 > (uint64_t)v38 || v5 < 1;
      BOOL v45 = v5 + 1 >= (uint64_t)v38 || v5 < -1;
      do
      {
        uint64_t v46 = v5;
        if (v5 >= v38)
        {
          uint64_t v46 = v5;
          do
          {
            uint64_t v47 = ~v46;
            if (v46 >= 0) {
              uint64_t v48 = 2 * v38;
            }
            else {
              uint64_t v48 = 0;
            }
            uint64_t v46 = v48 + v47;
          }
          while (v46 >= v38);
        }
        unint64_t v49 = v5 - 2;
        if (v42)
        {
          LOBYTE(v50) = v5 < 2;
          unint64_t v49 = v5 - 2;
          do
          {
            unint64_t v51 = ~v49;
            if (v50) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = 2 * v38;
            }
            unint64_t v49 = v52 + v51;
            unint64_t v50 = v49 >> 63;
          }
          while (v49 >= v38);
        }
        unint64_t v53 = v5 + 2;
        if (v43)
        {
          LOBYTE(v54) = v5 < -2;
          unint64_t v53 = v5 + 2;
          do
          {
            unint64_t v55 = ~v53;
            if (v54) {
              uint64_t v56 = 0;
            }
            else {
              uint64_t v56 = 2 * v38;
            }
            unint64_t v53 = v56 + v55;
            unint64_t v54 = v53 >> 63;
          }
          while (v53 >= v38);
        }
        unint64_t v57 = v5 - 1;
        if (v44)
        {
          LOBYTE(v58) = v5 < 1;
          unint64_t v57 = v5 - 1;
          do
          {
            unint64_t v59 = ~v57;
            if (v58) {
              uint64_t v60 = 0;
            }
            else {
              uint64_t v60 = 2 * v38;
            }
            unint64_t v57 = v60 + v59;
            unint64_t v58 = v57 >> 63;
          }
          while (v57 >= v38);
        }
        unint64_t v61 = v5 + 1;
        if (v45)
        {
          LOBYTE(v62) = v5 < -1;
          unint64_t v61 = v5 + 1;
          do
          {
            unint64_t v63 = ~v61;
            if (v62) {
              uint64_t v64 = 0;
            }
            else {
              uint64_t v64 = 2 * v38;
            }
            unint64_t v61 = v64 + v63;
            unint64_t v62 = v61 >> 63;
          }
          while (v61 >= v38);
        }
        unint64_t v31 = v26 + 4;
        unint64_t v65 = (_OWORD *)(v39 + v46 * v40 + 4 * v26);
        float32x4_t v66 = *(float32x4_t *)((char *)v65 - 8);
        float32x4_t v67 = *(float32x4_t *)((char *)v65 + 8);
        float32x4_t v68 = *(float32x4_t *)((char *)v65 - 4);
        float32x4_t v69 = *(float32x4_t *)((char *)v65 + 4);
        float32x4_t v70 = *(float32x4_t *)v65;
        unint64_t v71 = (_OWORD *)(v39 + v49 * v40 + 4 * v26);
        float32x4_t v72 = *(float32x4_t *)((char *)v71 - 8);
        float32x4_t v73 = *(float32x4_t *)((char *)v71 + 8);
        float32x4_t v74 = *(float32x4_t *)((char *)v71 - 4);
        float32x4_t v75 = *(float32x4_t *)((char *)v71 + 4);
        float32x4_t v76 = *(float32x4_t *)v71;
        uint64_t v77 = v39 + v53 * v40 + 4 * v26;
        uint64_t v78 = v39 + v57 * v40 + 4 * v26;
        float32x4_t v79 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v34, vaddq_f32(v66, v67)), vaddq_f32(vmulq_f32(v33, vaddq_f32(v68, v69)), vmulq_f32(v32, v70))), vaddq_f32(vmulq_f32(v37, vaddq_f32(v72, v73)), vaddq_f32(vmulq_f32(v36, vaddq_f32(v74, v75)), vmulq_f32(v34, v76)))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v78 - 8), *(float32x4_t *)(v78 + 8))), vaddq_f32(vmulq_f32(v35, vaddq_f32(*(float32x4_t *)(v78 - 4), *(float32x4_t *)(v78 + 4))), vmulq_f32(v33, *(float32x4_t *)v78))));
        uint64_t v80 = v39 + v61 * v40 + 4 * v26;
        *(float32x4_t *)(v25 + 4 * v29) = vaddq_f32(v79, vaddq_f32(vaddq_f32(vmulq_f32(v37, vaddq_f32(*(float32x4_t *)(v77 - 8), *(float32x4_t *)(v77 + 8))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v77 - 4), *(float32x4_t *)(v77 + 4))), vmulq_f32(v34, *(float32x4_t *)v77))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v80 - 8), *(float32x4_t *)(v80 + 8))), vaddq_f32(vmulq_f32(v35, vaddq_f32(*(float32x4_t *)(v80 - 4), *(float32x4_t *)(v80 + 4))),
                                                  vmulq_f32(v33, *(float32x4_t *)v80)))));
        v29 += 4;
        unint64_t v81 = v26 + 10;
        v26 += 4;
      }
      while (v81 <= v27);
    }
    else
    {
      unint64_t v31 = v26;
    }
    if (v31 < v27)
    {
      int8x16_t v82 = (float *)(v110 + v106 + 4 * v29 + 4 * v108);
      do
        *v82++ = sub_2484B1358((unsigned int *)v4, v31++, v5, v21->f32);
      while (v27 != v31);
    }
  }
  else
  {
    uint64_t v7 = *(float32x4_t **)(v2 + 16);
    uint64_t v6 = *(uint64_t **)(v2 + 24);
    uint64_t v8 = *v6;
    uint64_t v9 = v6[1] + a2;
    uint64_t v12 = (uint64_t *)(**(void **)(v2 + 32) + 16);
    uint64_t v10 = *v12;
    uint64_t v11 = v12[1];
    uint64_t v13 = *v12 * v9;
    unint64_t v14 = *v3;
    unint64_t v15 = v3[2] + *v3;
    if (v15 >= 4) {
      unint64_t v16 = 4;
    }
    else {
      unint64_t v16 = v3[2] + *v3;
    }
    unint64_t v17 = v16 - v14;
    if (v16 <= v14)
    {
      unint64_t v17 = 0;
      uint64_t v19 = *v3;
    }
    else
    {
      uint64_t v107 = *v6;
      uint64_t v109 = v11;
      uint64_t v105 = v10 * v9;
      float v18 = (float *)(v11 + v13 + 4 * v8);
      uint64_t v19 = *v3;
      do
        *v18++ = sub_2484B14A0((unsigned int *)v4, v19++, v5, v7->f32);
      while (v16 != v19);
      uint64_t v8 = v107;
      uint64_t v11 = v109;
      uint64_t v13 = v105;
    }
    if (v19 + 6 <= v15)
    {
      uint64_t v84 = 0;
      uint64_t v85 = *(void *)(v4 + 16);
      uint64_t v86 = *(void *)(v4 + 24);
      if (v14 <= v16) {
        unint64_t v87 = v16;
      }
      else {
        unint64_t v87 = v14;
      }
      uint64_t v88 = v13 + 4 * v8 + 4 * v87;
      uint64_t v89 = v85 * (v5 - 1);
      uint64_t v90 = v11 + v88 - 4 * v14;
      float32x4_t v91 = *v7;
      float32x4_t v92 = v7[1];
      float32x4_t v93 = v7[2];
      float32x4_t v94 = v7[3];
      float32x4_t v96 = v7[4];
      float32x4_t v95 = v7[5];
      uint64_t v97 = v85 * v5 + 4 * v19;
      uint64_t v98 = v86 + v97;
      uint64_t v99 = v86 + v85 * (v5 - 2) + 4 * v19;
      uint64_t v100 = v86 + v85 * (v5 + 2) + 4 * v19;
      uint64_t v101 = v97 + v85 + v86 - 8;
      uint64_t v102 = v89 + 4 * v19 + v86 + 8;
      do
      {
        *(float32x4_t *)(v90 + v84) = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v93, vaddq_f32(*(float32x4_t *)(v98 + v84 - 8), *(float32x4_t *)(v98 + v84 + 8))), vaddq_f32(vmulq_f32(v92, vaddq_f32(*(float32x4_t *)(v98 + v84 - 4), *(float32x4_t *)(v98 + v84 + 4))), vmulq_f32(v91, *(float32x4_t *)(v98 + v84)))), vaddq_f32(vmulq_f32(v96, vaddq_f32(
                                                  *(float32x4_t *)(v99 + v84 - 8),
                                                  *(float32x4_t *)(v99 + v84 + 8))),
                                              vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v99 + v84 - 4), *(float32x4_t *)(v99 + v84 + 4))), vmulq_f32(v93, *(float32x4_t *)(v99 + v84))))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v102 + v84 - 16), *(float32x4_t *)(v102 + v84))), vaddq_f32(vmulq_f32(v94, vaddq_f32(*(float32x4_t *)(v102 + v84 - 12), *(float32x4_t *)(v102 + v84 - 4))), vmulq_f32(v92, *(float32x4_t *)(v102 + v84 - 8))))), vaddq_f32(vaddq_f32(
                                            vmulq_f32(v96, vaddq_f32(*(float32x4_t *)(v100 + v84 - 8), *(float32x4_t *)(v100 + v84 + 8))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v100 + v84 - 4), *(float32x4_t *)(v100 + v84 + 4))), vmulq_f32(v93, *(float32x4_t *)(v100 + v84)))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v101 + v84), *(float32x4_t *)(v101 + v84 + 16))), vaddq_f32(vmulq_f32(v94, vaddq_f32(
                                                  *(float32x4_t *)(v101 + v84 + 4),
                                                  *(float32x4_t *)(v101 + v84 + 12))),
                                              vmulq_f32(v92, *(float32x4_t *)(v101 + v84 + 8))))));
        unint64_t v83 = v19 + 4;
        v17 += 4;
        v84 += 16;
        unint64_t v103 = v19 + 10;
        v19 += 4;
      }
      while (v103 <= v15);
    }
    else
    {
      unint64_t v83 = v19;
    }
    if (v83 < v15)
    {
      unint64_t v104 = (float *)(v11 + v13 + 4 * v17 + 4 * v8);
      do
        *v104++ = sub_2484B14A0((unsigned int *)v4, v83++, v5, v7->f32);
      while (v15 != v83);
    }
  }
}

uint64_t sub_2484B1330(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

float sub_2484B1358(unsigned int *a1, uint64_t a2, int64_t a3, float *a4)
{
  float v6 = a4[4];
  float v7 = a4[8];
  float v8 = a4[12];
  float v9 = a4[20];
  float v10 = a4[16];
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  float v15 = sub_2484B16DC(v13, v14, a2, a3, v11, v12, *a4, v6, v7);
  float v16 = v15 + sub_2484B16DC(v13, v14, a2, a3 - 2, v11, v12, v7, v9, v10);
  float v17 = sub_2484B16DC(v13, v14, a2, a3 + 2, v11, v12, v7, v9, v10);
  float v18 = v16 + sub_2484B16DC(v13, v14, a2, a3 - 1, v11, v12, v6, v8, v9);
  return v18 + (float)(v17 + sub_2484B16DC(v13, v14, a2, a3 + 1, v11, v12, v6, v8, v9));
}

float sub_2484B14A0(unsigned int *a1, uint64_t a2, uint64_t a3, float *a4)
{
  float v6 = a4[4];
  float v7 = a4[8];
  float v8 = a4[12];
  float v9 = a4[20];
  float v10 = a4[16];
  uint64_t v11 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = *((void *)a1 + 3);
  float v14 = sub_2484B15D4(v12, v13, a2, a3, v11, *a4, v6, v7);
  float v15 = v14 + sub_2484B15D4(v12, v13, a2, a3 - 2, v11, v7, v9, v10);
  float v16 = sub_2484B15D4(v12, v13, a2, a3 + 2, v11, v7, v9, v10);
  float v17 = v15 + sub_2484B15D4(v12, v13, a2, a3 - 1, v11, v6, v8, v9);
  return v17 + (float)(v16 + sub_2484B15D4(v12, v13, a2, a3 + 1, v11, v6, v8, v9));
}

float sub_2484B15D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7, float a8)
{
  uint64_t v8 = a3 - 2;
  LOBYTE(v9) = a3 < 2;
  if (a3 < 2) {
    goto LABEL_3;
  }
  while (v8 >= a5)
  {
    do
    {
LABEL_3:
      uint64_t v10 = ~v8;
      if (v9) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = 2 * a5;
      }
      uint64_t v8 = v11 + v10;
      unint64_t v9 = (unint64_t)v8 >> 63;
    }
    while (v8 < 0);
  }
  uint64_t v12 = a2 + a1 * a4;
  uint64_t v13 = a3 + 2;
  LOBYTE(v14) = a3 < -2;
  if (a3 < -2) {
    goto LABEL_10;
  }
  while (v13 >= a5)
  {
    do
    {
LABEL_10:
      uint64_t v15 = ~v13;
      if (v14) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = 2 * a5;
      }
      uint64_t v13 = v16 + v15;
      unint64_t v14 = (unint64_t)v13 >> 63;
    }
    while (v13 < 0);
  }
  uint64_t v17 = a3 - 1;
  LOBYTE(v18) = a3 < 1;
  if (a3 < 1 || a3 > a5)
  {
    do
    {
      uint64_t v19 = ~v17;
      if (v18) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = 2 * a5;
      }
      uint64_t v17 = v20 + v19;
      unint64_t v18 = (unint64_t)v17 >> 63;
    }
    while (v17 < 0 || v17 >= a5);
  }
  float v21 = *(float *)(v12 + 4 * v8);
  float v22 = *(float *)(v12 + 4 * v13);
  uint64_t v23 = a3 + 1;
  LOBYTE(v13) = a3 < -1;
  if (a3 < -1) {
    goto LABEL_24;
  }
  while (v23 >= a5)
  {
    do
    {
LABEL_24:
      uint64_t v24 = ~v23;
      if (v13) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = 2 * a5;
      }
      uint64_t v23 = v25 + v24;
      uint64_t v13 = (unint64_t)v23 >> 63;
    }
    while (v23 < 0);
  }
  return (float)((float)(v21 + v22) * a8)
       + (float)((float)((float)(*(float *)(v12 + 4 * v17) + *(float *)(v12 + 4 * v23)) * a7)
               + (float)(*(float *)(v12 + 4 * a3) * a6));
}

float sub_2484B16DC(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, float a7, float a8, float a9)
{
  if (a4 < 0 || a4 >= a6)
  {
    unint64_t v9 = (unint64_t)a4 >> 63;
    do
    {
      uint64_t v10 = ~a4;
      if (v9) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = 2 * a6;
      }
      a4 = v11 + v10;
      BOOL v12 = v11 + v10 < 0;
      unint64_t v9 = (unint64_t)(v11 + v10) >> 63;
    }
    while (v12 || a4 >= a6);
  }
  uint64_t v13 = a3 - 2;
  LOBYTE(v14) = a3 < 2;
  if (a3 < 2) {
    goto LABEL_11;
  }
  while (v13 >= a5)
  {
    do
    {
LABEL_11:
      uint64_t v15 = ~v13;
      if (v14) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = 2 * a5;
      }
      uint64_t v13 = v16 + v15;
      unint64_t v14 = (unint64_t)v13 >> 63;
    }
    while (v13 < 0);
  }
  uint64_t v17 = a2 + a4 * a1;
  uint64_t v18 = a3 + 2;
  LOBYTE(v19) = a3 < -2;
  if (a3 < -2) {
    goto LABEL_18;
  }
  while (v18 >= a5)
  {
    do
    {
LABEL_18:
      uint64_t v20 = ~v18;
      if (v19) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = 2 * a5;
      }
      uint64_t v18 = v21 + v20;
      unint64_t v19 = (unint64_t)v18 >> 63;
    }
    while (v18 < 0);
  }
  uint64_t v22 = a3 - 1;
  LOBYTE(v23) = a3 < 1;
  if (a3 < 1 || a3 > a5)
  {
    do
    {
      uint64_t v24 = ~v22;
      if (v23) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = 2 * a5;
      }
      uint64_t v22 = v25 + v24;
      unint64_t v23 = (unint64_t)v22 >> 63;
    }
    while (v22 < 0 || v22 >= a5);
  }
  float v26 = *(float *)(v17 + 4 * v13);
  float v27 = *(float *)(v17 + 4 * v18);
  uint64_t v28 = a3 + 1;
  LOBYTE(v18) = a3 < -1;
  if (a3 < -1) {
    goto LABEL_32;
  }
  while (v28 >= a5)
  {
    do
    {
LABEL_32:
      uint64_t v29 = ~v28;
      if (v18) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = 2 * a5;
      }
      uint64_t v28 = v30 + v29;
      uint64_t v18 = (unint64_t)v28 >> 63;
    }
    while (v28 < 0);
  }
  return (float)((float)(v26 + v27) * a9)
       + (float)((float)((float)(*(float *)(v17 + 4 * v22) + *(float *)(v17 + 4 * v28)) * a8)
               + (float)(*(float *)(v17 + 4 * a3) * a7));
}

BOOL sub_2484B1818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484B19C4, sub_2484B18C8, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484B18C8((uint64_t)v6, i);
  return 0;
}

uint64_t sub_2484B18C8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = a2;
  uint64_t v4 = *v2[1];
  uint64_t v5 = **v2;
  float v6 = (void *)(v5 + (v4 << 6));
  uint64_t v7 = v6[3] + v6[2] * a2;
  uint64_t v8 = v6[11] + v6[10] * a2;
  uint64_t v9 = v6[19] + v6[18] * v3;
  LODWORD(v6) = *(_DWORD *)v2[2];
  uint64_t v10 = *(void *)(v5 + ((v4 + (int)v6 % 3) << 6) + 24) + *(void *)(v5 + ((v4 + (int)v6 % 3) << 6) + 16) * v3;
  uint64_t v11 = *(void *)(v5 + ((v4 + ((int)v6 + (int)v6 / 3 + 1) % 3) << 6) + 24)
      + *(void *)(v5 + ((v4 + ((int)v6 + (int)v6 / 3 + 1) % 3) << 6) + 16) * v3;
  LODWORD(v6) = v6
              + ((int)(((unint64_t)(1431655765 * (int)v6) >> 32) - v6) >> 1)
              + ((((unint64_t)(1431655765 * (int)v6) >> 32) - v6) >> 31)
              + 2;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))*(&off_26FC66AD0
                                                                                                + *(int *)v2[3]))(v7, v8, v9, v10, v11, *(void *)(v5 + ((v4 + (int)v6 % 3) << 6) + 24) + *(void *)(v5 + ((v4 + (int)v6 % 3) << 6) + 16) * v3, *v2[4]);
}

uint64_t sub_2484B19C4(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

int32x4_t *sub_2484B19EC(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v22 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      int32x4_t v14 = *v8++;
      int32x4_t v15 = v14;
      int32x4_t v16 = *v9++;
      int32x4_t v17 = v16;
      int32x4_t v18 = *v10++;
      int32x4_t v19 = vsubq_s32(v15, vshrq_n_s32(v18, 1uLL));
      int32x4_t v20 = vaddq_s32(v19, v18);
      int32x4_t v21 = vsubq_s32(v19, vshrq_n_s32(v17, 1uLL));
      *v11++ = vaddq_s32(v21, v17);
      *v12++ = v20;
      unint64_t v22 = v7 + 4;
      *v13++ = v21;
      unint64_t v23 = v7 + 7;
      v7 += 4;
    }
    while (v23 < a7);
  }
  uint64_t v24 = a7 - v22;
  if (a7 > v22)
  {
    uint64_t v25 = 0;
    float v26 = &a6->i8[4 * v22];
    float v27 = &a5->i8[4 * v22];
    uint64_t v28 = &a4->i8[4 * v22];
    uint64_t v29 = &a3->i8[4 * v22];
    uint64_t v30 = &a2->i8[4 * v22];
    unint64_t v31 = &result->i8[4 * v22];
    do
    {
      int v32 = *(_DWORD *)&v30[4 * v25];
      int v33 = *(_DWORD *)&v29[4 * v25];
      int v34 = *(_DWORD *)&v31[4 * v25] - (v33 >> 1);
      float32x4_t result = (int32x4_t *)(v34 + v33);
      int v35 = v34 - (v32 >> 1);
      *(_DWORD *)&v28[4 * v25] = v35 + v32;
      *(_DWORD *)&v27[4 * v25] = result;
      *(_DWORD *)&v26[4 * v25++] = v35;
    }
    while (v24 != v25);
  }
  return result;
}

int32x4_t *sub_2484B1AB8(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v20 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      int32x4_t v14 = *v8++;
      int32x4_t v15 = v14;
      int32x4_t v16 = *v9++;
      int32x4_t v17 = v16;
      int32x4_t v18 = *v10++;
      int32x4_t v19 = vaddq_s32(v18, v15);
      *v11++ = v15;
      *v12++ = vsraq_n_s32(v17, vaddq_s32(v19, v15), 1uLL);
      unint64_t v20 = v7 + 4;
      *v13++ = v19;
      unint64_t v21 = v7 + 7;
      v7 += 4;
    }
    while (v21 < a7);
  }
  uint64_t v22 = a7 - v20;
  if (a7 > v20)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &a6->i8[4 * v20];
    uint64_t v25 = &a5->i8[4 * v20];
    float v26 = &a4->i8[4 * v20];
    float v27 = &a3->i8[4 * v20];
    uint64_t v28 = &a2->i8[4 * v20];
    uint64_t v29 = &result->i8[4 * v20];
    do
    {
      int v30 = *(_DWORD *)&v29[4 * v23];
      float32x4_t result = (int32x4_t *)(*(_DWORD *)&v27[4 * v23] + v30);
      int v31 = *(_DWORD *)&v28[4 * v23] + (((int)result + v30) >> 1);
      *(_DWORD *)&v26[4 * v23] = v30;
      *(_DWORD *)&v25[4 * v23] = v31;
      *(_DWORD *)&v24[4 * v23++] = result;
    }
    while (v22 != v23);
  }
  return result;
}

int32x4_t *sub_2484B1B74(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      int32x4_t v14 = *v8++;
      int32x4_t v15 = v14;
      int32x4_t v16 = *v9++;
      int32x4_t v17 = v16;
      int32x4_t v18 = *v10++;
      *v11++ = v15;
      *v12++ = vsraq_n_s32(v17, vaddq_s32(v18, v15), 1uLL);
      unint64_t v19 = v7 + 4;
      *v13++ = v18;
      unint64_t v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  uint64_t v21 = a7 - v19;
  if (a7 > v19)
  {
    uint64_t v22 = 0;
    uint64_t v23 = &a6->i8[4 * v19];
    uint64_t v24 = &a5->i8[4 * v19];
    uint64_t v25 = &a4->i8[4 * v19];
    float v26 = &a3->i8[4 * v19];
    float v27 = &a2->i8[4 * v19];
    uint64_t v28 = &result->i8[4 * v19];
    do
    {
      int v29 = *(_DWORD *)&v28[4 * v22];
      float32x4_t result = (int32x4_t *)*(unsigned int *)&v26[4 * v22];
      int v30 = *(_DWORD *)&v27[4 * v22] + (((int)result + v29) >> 1);
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_2484B1C28(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      int32x4_t v14 = *v8++;
      int32x4_t v15 = v14;
      int32x4_t v16 = *v9++;
      int32x4_t v17 = v16;
      int32x4_t v18 = *v10++;
      unint64_t v19 = v7 + 4;
      *v11++ = v15;
      *v12++ = vaddq_s32(v17, v15);
      *v13++ = vaddq_s32(v18, v15);
      unint64_t v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  uint64_t v21 = a7 - v19;
  if (a7 > v19)
  {
    uint64_t v22 = 0;
    uint64_t v23 = &a6->i8[4 * v19];
    uint64_t v24 = &a5->i8[4 * v19];
    uint64_t v25 = &a4->i8[4 * v19];
    float v26 = &a3->i8[4 * v19];
    float v27 = &a2->i8[4 * v19];
    uint64_t v28 = &result->i8[4 * v19];
    do
    {
      int v29 = *(_DWORD *)&v28[4 * v22];
      float32x4_t result = (int32x4_t *)(*(_DWORD *)&v26[4 * v22] + v29);
      int v30 = *(_DWORD *)&v27[4 * v22] + v29;
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_2484B1CDC(int32x4_t *result, int32x4_t *a2, long long *a3, int32x4_t *a4, int32x4_t *a5, _OWORD *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      int32x4_t v14 = *v8++;
      int32x4_t v15 = v14;
      int32x4_t v16 = *v9++;
      int32x4_t v17 = v16;
      long long v18 = *v10++;
      *v11++ = v15;
      *v12++ = vaddq_s32(v17, v15);
      unint64_t v19 = v7 + 4;
      *v13++ = v18;
      unint64_t v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  uint64_t v21 = a7 - v19;
  if (a7 > v19)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (char *)a6 + 4 * v19;
    uint64_t v24 = &a5->i8[4 * v19];
    uint64_t v25 = &a4->i8[4 * v19];
    float v26 = (char *)a3 + 4 * v19;
    float v27 = &a2->i8[4 * v19];
    uint64_t v28 = &result->i8[4 * v19];
    do
    {
      int v29 = *(_DWORD *)&v28[4 * v22];
      float32x4_t result = (int32x4_t *)*(unsigned int *)&v26[4 * v22];
      int v30 = *(_DWORD *)&v27[4 * v22] + v29;
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_2484B1D88(int32x4_t *result, long long *a2, int32x4_t *a3, int32x4_t *a4, _OWORD *a5, int32x4_t *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v14 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      unint64_t v14 = v7 + 4;
      int32x4_t v15 = *v8++;
      int32x4_t v16 = v15;
      long long v17 = *v9++;
      long long v18 = v17;
      int32x4_t v19 = *v10++;
      *v11++ = v16;
      *v12++ = v18;
      *v13++ = vaddq_s32(v19, v16);
      unint64_t v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  uint64_t v21 = a7 - v14;
  if (a7 > v14)
  {
    uint64_t v22 = 0;
    uint64_t v23 = &a6->i8[4 * v14];
    uint64_t v24 = (char *)a5 + 4 * v14;
    uint64_t v25 = &a4->i8[4 * v14];
    float v26 = &a3->i8[4 * v14];
    float v27 = (char *)a2 + 4 * v14;
    uint64_t v28 = &result->i8[4 * v14];
    do
    {
      int v29 = *(_DWORD *)&v28[4 * v22];
      int v30 = *(_DWORD *)&v27[4 * v22];
      float32x4_t result = (int32x4_t *)(*(_DWORD *)&v26[4 * v22] + v29);
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = result;
    }
    while (v21 != v22);
  }
  return result;
}

long long *sub_2484B1E34(long long *result, long long *a2, long long *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, unint64_t a7)
{
  if (a7 < 4)
  {
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a4;
    BOOL v12 = a5;
    uint64_t v13 = a6;
    do
    {
      long long v14 = *v8++;
      long long v15 = v14;
      long long v16 = *v9++;
      long long v17 = v16;
      long long v18 = *v10++;
      *v11++ = v15;
      *v12++ = v17;
      unint64_t v19 = v7 + 4;
      *v13++ = v18;
      unint64_t v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  uint64_t v21 = a7 - v19;
  if (a7 > v19)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (char *)a6 + 4 * v19;
    uint64_t v24 = (char *)a5 + 4 * v19;
    uint64_t v25 = (char *)a4 + 4 * v19;
    float v26 = (char *)a3 + 4 * v19;
    float v27 = (char *)a2 + 4 * v19;
    uint64_t v28 = (char *)result + 4 * v19;
    do
    {
      int v29 = *(_DWORD *)&v27[4 * v22];
      float32x4_t result = (long long *)*(unsigned int *)&v26[4 * v22];
      *(_DWORD *)&v25[4 * v22] = *(_DWORD *)&v28[4 * v22];
      *(_DWORD *)&v24[4 * v22] = v29;
      *(_DWORD *)&v23[4 * v22++] = result;
    }
    while (v21 != v22);
  }
  return result;
}

uint64_t sub_2484B1ED8(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 456);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  unint64_t v3 = *(void *)(a1 + 112) / *(void *)(a1 + 128);
  unint64_t v4 = __clz(v3) ^ 0x3F;
  if ((v3 & (v3 - 1)) != 0) {
    unint64_t v5 = v4 + 1;
  }
  else {
    unint64_t v5 = v4;
  }
  *(void *)(a1 + 472) = v5;
  float v6 = *(uint64_t **)(a1 + 32);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v9 = v7 - *v6;
  if (v7 == *v6)
  {
    unint64_t v28 = 0;
    unint64_t v27 = 0;
    *uint64_t v2 = 0;
    unint64_t v12 = v9 >> 4;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = v9 >> 4;
    unint64_t v13 = 1 << v5;
    unint64_t v14 = v13 - 1;
    if (v12 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v12;
    }
    long long v16 = (uint64_t *)(v8 + 8);
    long long v17 = (uint64_t *)(**(void **)(a1 + 56) + 8);
    uint64_t v18 = v15;
    do
    {
      if (v11 <= (v14 + (*(v17 - 1) << *(v16 - 1))) / v13) {
        unint64_t v11 = (v14 + (*(v17 - 1) << *(v16 - 1))) / v13;
      }
      *(void *)(a1 + 456) = v11;
      uint64_t v20 = *v17;
      v17 += 2;
      uint64_t v19 = v20;
      uint64_t v21 = *v16;
      v16 += 2;
      unint64_t v22 = (v14 + (v19 << v21)) / v13;
      if (v10 <= v22) {
        unint64_t v10 = v22;
      }
      *(void *)(a1 + 464) = v10;
      --v18;
    }
    while (v18);
    uint64_t v23 = (void *)(v8 + 8);
    uint64_t v24 = v15;
    do
    {
      unint64_t v25 = *(v23 - 1);
      if (v25 >= v5)
      {
        unint64_t v11 = (v11 + (1 << (v25 - v5)) - 1) / (1 << (v25 - v5)) * (1 << (v25 - v5));
        *uint64_t v2 = v11;
      }
      if (*v23 >= v5)
      {
        unint64_t v10 = (v10 + (1 << (*v23 - v5)) - 1) / (1 << (*v23 - v5)) * (1 << (*v23 - v5));
        *(void *)(a1 + 464) = v10;
      }
      v23 += 2;
      --v24;
    }
    while (v24);
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    *uint64_t v2 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      unint64_t v29 = sub_2484B2BF0(a1, v26);
      if (v29 > v28) {
        unint64_t v28 = v29;
      }
      if (v30 > v27) {
        unint64_t v27 = v30;
      }
      ++v26;
    }
    while (v15 != v26);
  }
  *(void *)(a1 + 504) = (v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 512) = v27;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 3) < v12)
  {
    sub_2484B2D7C(a1 + 256, v12);
    sub_2484B2D7C(a1 + 280, (v6[1] - *v6) >> 4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
  }
  if (v7 == v8)
  {
LABEL_52:
    long long v61 = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 416) = v61;
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 208);
    long long v62 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a1 + 352) = v62;
    long long v63 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 384) = v63;
    long long v64 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 320) = v64;
    operator new[]();
  }
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 8;
  while (1)
  {
    unint64_t v34 = sub_2484B2BF0(a1, v32);
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)(a1 + 160);
    uint64_t v38 = *(void *)(a1 + 120);
    int v39 = 1 << *(_DWORD *)(v8 + v33 - 8);
    unint64_t v40 = (*(void *)(a1 + 112) + v39 - 1) / (unint64_t)v39;
    int v41 = *(_DWORD *)(v8 + v33);
    uint64_t v42 = (2 * *(void *)(a1 + 168) - 2) * v36;
    BOOL v43 = (_DWORD *)(*(void *)(a1 + 256) + v31);
    if (v40 != *v43 || v42 != v43[1])
    {
      int v66 = *(_DWORD *)(v8 + v33);
      unint64_t v44 = v34;
      sub_2483EA250((uint64_t)__p, v40, v42);
      uint64_t v45 = v71;
      if (v71) {
        return v45;
      }
      uint64_t v46 = v69;
      uint64_t v69 = 0;
      uint64_t v47 = v70;
      uint64_t v48 = *(void *)(a1 + 256) + v31;
      *(void *)(v48 + 16) = v68;
      *(_OWORD *)uint64_t v48 = *(_OWORD *)__p;
      uint64_t v49 = *(void *)(v48 + 24);
      *(void *)(v48 + 24) = v46;
      if (v49)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v49 - 24));
        free(*(void **)(v49 - 32));
        unsigned int v50 = v71;
        *(void *)(v48 + 32) = v47;
        if (v50)
        {
LABEL_41:
          unint64_t v34 = v44;
          LOBYTE(v41) = v66;
          goto LABEL_42;
        }
      }
      else
      {
        *(void *)(v48 + 32) = v47;
      }
      uint64_t v51 = v69;
      uint64_t v69 = 0;
      if (v51)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v51 - 24));
        free(*(void **)(v51 - 32));
      }
      goto LABEL_41;
    }
LABEL_42:
    uint64_t v52 = (2 * v37 - 2) * v34;
    unint64_t v53 = (_DWORD *)(*(void *)(a1 + 280) + v31);
    unint64_t v54 = (v38 + (1 << v41) - 1) / (unint64_t)(1 << v41);
    if (v52 == *v53 && v54 == v53[1]) {
      goto LABEL_51;
    }
    sub_2483EA250((uint64_t)__p, v52, v54);
    uint64_t v45 = v71;
    if (v71) {
      return v45;
    }
    uint64_t v55 = v69;
    uint64_t v69 = 0;
    uint64_t v56 = v70;
    uint64_t v57 = *(void *)(a1 + 280) + v31;
    *(void *)(v57 + 16) = v68;
    *(_OWORD *)uint64_t v57 = *(_OWORD *)__p;
    uint64_t v58 = *(void *)(v57 + 24);
    *(void *)(v57 + 24) = v55;
    if (!v58)
    {
      *(void *)(v57 + 32) = v56;
LABEL_49:
      uint64_t v60 = v69;
      uint64_t v69 = 0;
      if (v60)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v60 - 24));
        free(*(void **)(v60 - 32));
      }
      goto LABEL_51;
    }
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v58 - 24));
    free(*(void **)(v58 - 32));
    unsigned int v59 = v71;
    *(void *)(v57 + 32) = v56;
    if (!v59) {
      goto LABEL_49;
    }
LABEL_51:
    ++v32;
    uint64_t v8 = *v6;
    v31 += 40;
    v33 += 16;
    if (v32 >= (v6[1] - *v6) >> 4) {
      goto LABEL_52;
    }
  }
}

void sub_2484B2BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_2484B2BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(**(void **)(a1 + 32) + 16 * a2);
  return ((unint64_t)((*(void *)(a1 + 456) << *(void *)(a1 + 472)) + (1 << *v2) - 1) >> *v2)
       + *(void *)(**(void **)(a1 + 56) + 16 * a2);
}

void sub_2484B2C50(char **a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v16 = &v4[32 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 5)
  {
    bzero(a1[1], 32 * v6);
    long long v16 = &v3[32 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 59) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 4;
  if (v8 >> 4 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 59) {
    sub_2483E9338();
  }
  unint64_t v11 = (char *)operator new(32 * v10);
  unint64_t v12 = &v11[32 * v5];
  unint64_t v13 = &v11[32 * v10];
  bzero(v12, 32 * v6);
  unint64_t v14 = &v12[32 * v6];
  if (v3 != v4)
  {
    do
    {
      long long v15 = *((_OWORD *)v3 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v3 - 2);
      *((_OWORD *)v12 - 1) = v15;
      v12 -= 32;
      v3 -= 32;
    }
    while (v3 != v4);
    unint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void sub_2484B2D7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      for (unint64_t i = v3 + 40 * a2; v4 != i; v4 -= 40)
        sub_2483E8DDC((uint64_t *)(v4 - 16));
      *(void *)(a1 + 8) = i;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v16 = 40 * ((40 * v6 - 40) / 0x28) + 40;
      bzero(*(void **)(a1 + 8), v16);
      *(void *)(a1 + 8) = v4 + v16;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        sub_2483E92E8();
      }
      v17[4] = a1 + 16;
      unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x333333333333333) {
        unint64_t v10 = 0x666666666666666;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)sub_248403444(v10);
      unint64_t v12 = &v11[40 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[40 * v13];
      size_t v14 = 40 * ((40 * v6 - 40) / 0x28) + 40;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      sub_24843F914((uint64_t *)a1, v17);
      sub_24841F7CC((uint64_t)v17);
    }
  }
}

uint64_t sub_2484B2F00(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  *(unsigned char *)(a1 + 248) = a3;
  unint64_t v112 = a2;
  if (a3) {
    a2 = *(void *)(a1 + 192);
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 3);
  if (v5 < a2)
  {
    unint64_t v6 = (void *)(a1 + 480);
    uint64_t v110 = a1 + 496;
    unint64_t v113 = a2;
    while (1)
    {
      unint64_t v8 = *(void **)(a1 + 488);
      unint64_t v7 = *(void *)(a1 + 496);
      if ((unint64_t)v8 >= v7)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *v6) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_112:
        }
          sub_2483E92E8();
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v6) >> 3);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        uint64_t v13 = (char *)(v12 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11);
        uint64_t v118 = v110;
        if (v13) {
          uint64_t v13 = (char *)sub_2483F8ED4((unint64_t)v13);
        }
        else {
          uint64_t v14 = 0;
        }
        long long v15 = &v13[24 * v10];
        *(void *)&long long v115 = v13;
        *((void *)&v115 + 1) = v15;
        uint64_t v117 = &v13[24 * v14];
        *(void *)long long v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = 0;
        uint64_t v116 = v15 + 24;
        sub_2483F8F1C((void *)(a1 + 480), &v115);
        uint64_t v9 = *(void **)(a1 + 488);
        sub_2484B37D8((uint64_t)&v115);
      }
      else
      {
        *unint64_t v8 = 0;
        v8[1] = 0;
        uint64_t v9 = v8 + 3;
        v8[2] = 0;
      }
      *(void *)(a1 + 488) = v9;
      sub_2484B2D7C(*(void *)(a1 + 480) + 24 * v5, (v4[1] - *v4) >> 4);
      if (v4[1] != *v4) {
        break;
      }
LABEL_27:
      if (++v5 == v113) {
        goto LABEL_28;
      }
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    while (1)
    {
      unint64_t v19 = *(void *)(a1 + 208) << *(void *)(a1 + 472);
      sub_2483EA250((uint64_t)&v115, (v19 >> *(void *)(**(void **)(a1 + 32) + v16)) + 2 * *(_DWORD *)(a1 + 504), (v19 >> *(void *)(**(void **)(a1 + 32) + v16 + 8)) + 2 * *(_DWORD *)(a1 + 512));
      uint64_t result = v119;
      if (v119) {
        return result;
      }
      uint64_t v21 = v117;
      uint64_t v22 = v118;
      uint64_t v117 = 0;
      uint64_t v23 = *(void *)(*v6 + 24 * v5) + v17;
      *(_OWORD *)uint64_t v23 = v115;
      uint64_t v24 = *(void *)(v23 + 24);
      *(void *)(v23 + 16) = v116;
      *(void *)(v23 + 24) = v21;
      if (!v24) {
        break;
      }
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v24 - 24));
      free(*(void **)(v24 - 32));
      unsigned int v25 = v119;
      *(void *)(v23 + 32) = v22;
      if (!v25) {
        goto LABEL_24;
      }
LABEL_26:
      ++v18;
      v17 += 40;
      v16 += 16;
      if (v18 >= (v4[1] - *v4) >> 4) {
        goto LABEL_27;
      }
    }
    *(void *)(v23 + 32) = v22;
LABEL_24:
    uint64_t v26 = v117;
    uint64_t v117 = 0;
    if (v26)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v26 - 3));
      free(*((void **)v26 - 4));
    }
    goto LABEL_26;
  }
LABEL_28:
  unint64_t v27 = *(void **)(a1 + 528);
  unint64_t v28 = *(void **)(a1 + 520);
  unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v27 - v28);
  unint64_t v30 = v112 - v29;
  if (v112 > v29)
  {
    uint64_t v31 = *(void *)(a1 + 536);
    if (0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v27) >> 3) >= v30)
    {
      bzero(*(void **)(a1 + 528), 24 * ((24 * v30 - 24) / 0x18) + 24);
      *(void *)(a1 + 528) = &v27[3 * ((24 * v30 - 24) / 0x18) + 3];
      goto LABEL_52;
    }
    if (v112 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v28) >> 3);
    uint64_t v33 = 2 * v32;
    if (2 * v32 <= v112) {
      uint64_t v33 = v112;
    }
    if (v32 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E9338();
    }
    uint64_t v35 = 3 * v34;
    uint64_t v36 = (char *)operator new(24 * v34);
    uint64_t v37 = &v36[8 * (v27 - v28)];
    uint64_t v38 = &v36[8 * v35];
    size_t v39 = 24 * ((24 * v30 - 24) / 0x18) + 24;
    bzero(v37, v39);
    unint64_t v40 = &v37[v39];
    if (v27 == v28)
    {
      *(void *)(a1 + 520) = v37;
      *(void *)(a1 + 528) = v40;
      *(void *)(a1 + 536) = v38;
      if (!v27) {
        goto LABEL_52;
      }
    }
    else
    {
      do
      {
        int v41 = v37;
        *((void *)v37 - 1) = 0;
        long long v42 = *(_OWORD *)(v27 - 3);
        v27 -= 3;
        *(_OWORD *)(v37 - 24) = v42;
        v37 -= 24;
        *((void *)v41 - 1) = v27[2];
        void *v27 = 0;
        v27[1] = 0;
        v27[2] = 0;
      }
      while (v27 != v28);
      BOOL v43 = *(void **)(a1 + 520);
      unint64_t v27 = *(void **)(a1 + 528);
      *(void *)(a1 + 520) = v37;
      *(void *)(a1 + 528) = v40;
      *(void *)(a1 + 536) = v38;
      if (v27 != v43)
      {
        do
        {
          v27 -= 3;
          *(void *)&long long v115 = v27;
          sub_2484B3838((void ***)&v115);
        }
        while (v27 != v43);
        unint64_t v27 = v43;
      }
      if (!v27) {
        goto LABEL_52;
      }
    }
    operator delete(v27);
    goto LABEL_52;
  }
  if (v112 < v29)
  {
    unint64_t v44 = &v28[3 * v112];
    while (v27 != v44)
    {
      v27 -= 3;
      *(void *)&long long v115 = v27;
      sub_2484B3838((void ***)&v115);
    }
    *(void *)(a1 + 528) = v44;
  }
LABEL_52:
  char v45 = *(_DWORD *)(a1 + 472);
  unint64_t v46 = *(void *)(a1 + 208) << v45;
  uint64_t v47 = ((2 * *(void *)(a1 + 504)) << v45) + 32;
  if (v112)
  {
    uint64_t v48 = 0;
    unsigned int v114 = v47 + v46;
    uint64_t v49 = *v4;
    uint64_t v50 = v4[1];
    unint64_t v109 = v46;
    int v111 = v47;
    while (1)
    {
      uint64_t v51 = *(void *)(a1 + 520);
      uint64_t v52 = (uint64_t *)(v51 + 24 * v48);
      uint64_t v53 = v50 - v49;
      unint64_t v54 = (char **)(v52 + 1);
      uint64_t v55 = (char *)v52[1];
      unint64_t v56 = (v50 - v49) >> 4;
      uint64_t v57 = *v52;
      unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v55[-*v52] >> 3);
      unint64_t v59 = v56 - v58;
      if (v56 <= v58)
      {
        if (v56 < v58)
        {
          uint64_t v69 = (char *)(v57 + 24 * v56);
          while (v55 != v69)
          {
            v55 -= 24;
            *(void *)&long long v115 = v55;
            sub_2483F77FC((void ***)&v115);
          }
          void *v54 = v69;
        }
      }
      else
      {
        uint64_t v60 = v51 + 24 * v48;
        uint64_t v63 = *(void *)(v60 + 16);
        uint64_t v61 = v60 + 16;
        uint64_t v62 = v63;
        if (0xAAAAAAAAAAAAAAABLL * ((v63 - (uint64_t)v55) >> 3) >= v59)
        {
          bzero(v55, 24 * ((24 * v59 - 24) / 0x18) + 24);
          void *v54 = &v55[24 * ((24 * v59 - 24) / 0x18) + 24];
        }
        else
        {
          if (v53 < 0) {
            goto LABEL_112;
          }
          uint64_t v118 = v61;
          unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v57) >> 3);
          if (2 * v64 > v56) {
            unint64_t v56 = 2 * v64;
          }
          unint64_t v65 = v64 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v56;
          int v66 = (char *)sub_2483F8ED4(v65);
          float32x4_t v67 = &v66[24 * v58];
          *(void *)&long long v115 = v66;
          *((void *)&v115 + 1) = v67;
          uint64_t v117 = &v66[24 * v68];
          bzero(v67, 24 * ((24 * v59 - 24) / 0x18) + 24);
          uint64_t v116 = &v67[24 * ((24 * v59 - 24) / 0x18) + 24];
          sub_2483F8F1C(v52, &v115);
          sub_2484B37D8((uint64_t)&v115);
        }
      }
      uint64_t v49 = v4[1];
      if (v49 != *v4) {
        break;
      }
      uint64_t v50 = v4[1];
LABEL_88:
      ++v48;
      LODWORD(v47) = v111;
      unint64_t v46 = v109;
      if (v48 == v112) {
        goto LABEL_89;
      }
    }
    unint64_t v70 = 0;
    while (1)
    {
      sub_2484B2D7C(*(void *)(*(void *)(a1 + 520) + 24 * v48) + 24 * v70, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
      uint64_t v71 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
      if (v71) {
        break;
      }
LABEL_85:
      ++v70;
      uint64_t v49 = *v4;
      uint64_t v50 = v4[1];
      if (v70 >= (v50 - *v4) >> 4) {
        goto LABEL_88;
      }
    }
    uint64_t v72 = 0;
    uint64_t v73 = (v71 >> 3) - 1;
    uint64_t v74 = 40 * (v71 >> 3);
    while (1)
    {
      uint64_t v75 = *(void *)(*(void *)(a1 + 8) + 8 * v73);
      if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v75 + 24))(v75, v70) == 2)
      {
        uint64_t v76 = *(void *)(*(void *)(a1 + 8) + 8 * v73);
        unint64_t v77 = 2 * v72 + (1 << *(_DWORD *)(v76 + 32));
        unint64_t v78 = __clz(v77) ^ 0x3F;
        if ((v77 & (v77 - 1)) != 0) {
          char v79 = v78 + 1;
        }
        else {
          char v79 = v78;
        }
        uint64_t v72 = *(void *)(v76 + 16);
        sub_2483EA250((uint64_t)&v115, v114, 1 << v79);
        uint64_t result = v119;
        if (v119) {
          return result;
        }
        uint64_t v80 = v117;
        uint64_t v81 = v118;
        uint64_t v117 = 0;
        uint64_t v82 = *(void *)(*(void *)(*(void *)(a1 + 520) + 24 * v48) + 24 * v70) + v74;
        *(_OWORD *)(v82 - 40) = v115;
        uint64_t v83 = *(void *)(v82 - 16);
        *(void *)(v82 - 24) = v116;
        *(void *)(v82 - 16) = v80;
        if (!v83)
        {
          *(void *)(v82 - 8) = v81;
LABEL_82:
          uint64_t v85 = v117;
          uint64_t v117 = 0;
          if (v85)
          {
            atomic_fetch_add(&qword_26931BDF8, -*((void *)v85 - 3));
            free(*((void **)v85 - 4));
          }
          goto LABEL_84;
        }
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v83 - 24));
        free(*(void **)(v83 - 32));
        unsigned int v84 = v119;
        *(void *)(v82 - 8) = v81;
        if (!v84) {
          goto LABEL_82;
        }
      }
LABEL_84:
      --v73;
      v74 -= 40;
      if (v73 == -1) {
        goto LABEL_85;
      }
    }
  }
LABEL_89:
  if (*(void *)(a1 + 720) != (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)
  {
    int64x2_t v86 = *(int64x2_t *)(a1 + 96);
    int64x2_t v87 = *(int64x2_t *)(a1 + 704);
    int32x2_t v88 = *(int32x2_t *)(a1 + 696);
    v89.i64[0] = v88.i32[0];
    v89.i64[1] = v88.i32[1];
    int64x2_t v90 = (int64x2_t)vandq_s8(v89, (int8x16_t)vcgtzq_s64((int64x2_t)v89));
    int64x2_t v91 = vaddw_s32(v86, v88);
    int64x2_t v92 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v91, v87), (int8x16_t)v87, (int8x16_t)v91);
    int64x2_t v93 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v90, v86), v92), vandq_s8((int8x16_t)vsubq_s64(v92, v90), (int8x16_t)vcgtq_s64(v92, v90)), (int8x16_t)v86);
    int32x2_t v94 = vmovn_s64(vceqzq_s64(v93));
    if ((v94.i8[0] | v94.i8[4])) {
      unint64_t v95 = 0;
    }
    else {
      unint64_t v95 = v90.i64[0];
    }
    uint64_t v96 = v93.i64[0];
    if ((v94.i8[0] | v94.i8[4])) {
      uint64_t v96 = 0;
    }
    unint64_t v97 = v87.i64[0] - (v95 + v96);
    if (v46 > v97) {
      unint64_t v97 = v46;
    }
    int v98 = v95 <= v97 ? v97 : v95;
    uint64_t v99 = (void *)(a1 + 544);
    unint64_t v100 = v112;
    sub_2484B2D7C((uint64_t)v99, v112);
    if (v112)
    {
      uint64_t v101 = 0;
      unsigned int v102 = v98 + v47;
      while (1)
      {
        sub_2483EA250((uint64_t)&v115, v102, (v4[1] - *v4) >> 4);
        uint64_t result = v119;
        if (v119) {
          return result;
        }
        unint64_t v103 = v117;
        uint64_t v117 = 0;
        uint64_t v104 = v118;
        uint64_t v105 = *v99 + v101;
        *(void *)(v105 + 16) = v116;
        *(_OWORD *)uint64_t v105 = v115;
        uint64_t v106 = *(void *)(v105 + 24);
        *(void *)(v105 + 24) = v103;
        if (!v106) {
          break;
        }
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v106 - 24));
        free(*(void **)(v106 - 32));
        unsigned int v107 = v119;
        *(void *)(v105 + 32) = v104;
        if (!v107) {
          goto LABEL_107;
        }
LABEL_109:
        v101 += 40;
        if (!--v100) {
          return 0;
        }
      }
      *(void *)(v105 + 32) = v104;
LABEL_107:
      uint64_t v108 = v117;
      uint64_t v117 = 0;
      if (v108)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)v108 - 3));
        free(*((void **)v108 - 4));
      }
      goto LABEL_109;
    }
  }
  return 0;
}

uint64_t sub_2484B37D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    sub_2483F77FC(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2484B3838(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        sub_2483F77FC(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2484B38CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v506 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 248)) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a3;
  }
  uint64_t v4 = (uint64_t *)(*(void *)(a1 + 480) + 24 * v3);
  uint64_t v5 = v4[1];
  float v468 = v4;
  v469 = v4 + 1;
  uint64_t v6 = *v4;
  uint64_t v467 = a1;
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + 40 * v7;
      unint64_t v9 = *(void *)(a1 + 160);
      unint64_t v10 = a2 / v9;
      unint64_t v441 = a2 / v9 * v9;
      unint64_t v11 = (uint64_t *)(**(void **)(a1 + 32) + 16 * v7);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      unint64_t v14 = *(void *)(a1 + 208) << *(void *)(a1 + 472);
      unint64_t v15 = (v14 >> v13) * (a2 % v9);
      unint64_t v432 = a2 % v9;
      unint64_t v445 = a2 % v9 + 1;
      unint64_t v16 = (v14 >> v13) * v445;
      unint64_t v17 = (*(void *)(a1 + 96) + (1 << v13) - 1) / (unint64_t)(1 << v13);
      if (v17 >= v16) {
        unint64_t v17 = v16;
      }
      unint64_t v452 = v17;
      unint64_t v455 = a2 / v9;
      unint64_t v435 = v14 >> v12;
      unint64_t v438 = v10 + 1;
      unint64_t v18 = (v14 >> v12) * (v10 + 1);
      unint64_t v19 = (*(void *)(a1 + 104) + (1 << v12) - 1) / (unint64_t)(1 << v12);
      if (v19 >= v18) {
        unint64_t v19 = v18;
      }
      unint64_t v449 = v19;
      uint64_t v462 = v7;
      unint64_t v20 = sub_2484B2BF0(a1, v7);
      unint64_t v22 = v15;
      unint64_t v458 = v20;
      uint64_t v23 = v21;
      unint64_t v470 = v15;
      if (v9 <= a2 && v452 != v15 && v21)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *(void *)(v467 + 504);
        uint64_t v26 = *(void *)(v467 + 512);
        uint64_t v27 = v21 * (2 * v455 - 1);
        uint64_t v28 = *(void *)(v467 + 256) + 40 * v462;
        uint64_t v29 = *(void *)(v28 + 16);
        uint64_t v30 = *(void *)(v28 + 24);
        size_t v31 = 4 * (v452 - v22);
        uint64_t v32 = v21;
        do
        {
          memcpy((void *)(v30 + (v24 + v27) * v29 + 4 * v22), (const void *)(*(void *)(v8 + 24) + *(void *)(v8 + 16) * v26 + 4 * v25), v31);
          unint64_t v22 = v470;
          ++v24;
          ++v26;
          --v32;
        }
        while (v32);
      }
      uint64_t v33 = v435 * v455;
      if (v438 < *(void *)(v467 + 168) && v452 != v22 && v23)
      {
        uint64_t v34 = 0;
        uint64_t v35 = *(void *)(v467 + 504);
        uint64_t v36 = 2 * v455 * v23;
        uint64_t v37 = *(void *)(v467 + 256) + 40 * v462;
        uint64_t v39 = *(void *)(v37 + 16);
        uint64_t v38 = *(void *)(v37 + 24);
        unint64_t v40 = v449 - (v33 + v23) + *(void *)(v467 + 512);
        size_t v41 = 4 * (v452 - v22);
        do
        {
          memcpy((void *)(v38 + (v34 + v36) * v39 + 4 * v22), (const void *)(*(void *)(v8 + 24) + *(void *)(v8 + 16) * (v40 + v34) + 4 * v35), v41);
          unint64_t v22 = v470;
          ++v34;
          --v23;
        }
        while (v23);
      }
      if (a2 != v441 && v458 && v449 != v33)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *(void *)(v467 + 504);
        uint64_t v44 = *(void *)(v467 + 512);
        uint64_t v45 = *(void *)(v467 + 280) + 40 * v462;
        uint64_t v46 = *(void *)(v45 + 16);
        uint64_t v47 = *(void *)(v45 + 24);
        if (v449 - v33 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v449 - v33;
        }
        do
        {
          memcpy((void *)(v47 + (v42 + v33) * v46 + 4 * v458 * (2 * v432 - 1)), (const void *)(*(void *)(v8 + 24) + *(void *)(v8 + 16) * v44 + 4 * v43), 4 * v458);
          ++v42;
          ++v44;
          --v48;
        }
        while (v48);
      }
      if (v445 < *(void *)(v467 + 160) && v458 && v449 != v33)
      {
        uint64_t v49 = 0;
        uint64_t v50 = *(void *)(v467 + 512);
        unint64_t v51 = v452 - (v470 + v458) + *(void *)(v467 + 504);
        uint64_t v52 = *(void *)(v467 + 280) + 40 * v462;
        uint64_t v53 = *(void *)(v52 + 16);
        uint64_t v54 = *(void *)(v52 + 24);
        if (v449 - v33 <= 1) {
          uint64_t v55 = 1;
        }
        else {
          uint64_t v55 = v449 - v33;
        }
        do
        {
          memcpy((void *)(v54 + (v49 + v33) * v53 + 8 * v432 * v458), (const void *)(*(void *)(v8 + 24) + *(void *)(v8 + 16) * v50 + 4 * v51), 4 * v458);
          ++v49;
          ++v50;
          --v55;
        }
        while (v55);
      }
      a1 = v467;
      uint64_t v7 = v462 + 1;
      uint64_t v6 = *v468;
    }
    while (v462 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((*v469 - *v468) >> 3));
  }
  unint64_t v56 = *(void *)(a1 + 160);
  unint64_t v57 = a2 / v56 * v56;
  unint64_t v411 = a2 % v56;
  unint64_t v412 = a2 / v56;
  if (*(void *)(a1 + 720) == (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) {
    goto LABEL_77;
  }
  uint64_t v58 = *(void *)(v467 + 208) << *(void *)(v467 + 472);
  uint64_t v59 = *(void *)(v467 + 96);
  uint64_t v60 = *(void *)(v467 + 104);
  uint64_t v61 = *(void *)(v467 + 704);
  uint64_t v62 = *(void *)(v467 + 712);
  uint64_t v63 = *(int *)(v467 + 696);
  uint64_t v64 = *(int *)(v467 + 700);
  uint64_t v65 = v63 + v58 * v411;
  uint64_t v66 = v64 + v58 * v412;
  uint64_t v67 = v63 & ~(v63 >> 63);
  uint64_t v68 = v64 & ~(v64 >> 63);
  uint64_t v69 = v59 + v63;
  if (v61 < v69) {
    uint64_t v69 = *(void *)(v467 + 704);
  }
  uint64_t v70 = v60 + v64;
  if (v62 < v70) {
    uint64_t v70 = *(void *)(v467 + 712);
  }
  uint64_t v71 = v69 - v67;
  if (v69 <= v67) {
    uint64_t v71 = 0;
  }
  if (v67 + v59 > v69) {
    uint64_t v59 = v71;
  }
  uint64_t v72 = v70 - v68;
  if (v70 <= v68) {
    uint64_t v72 = 0;
  }
  if (v68 + v60 > v70) {
    uint64_t v60 = v72;
  }
  if (v65 <= v67) {
    uint64_t v73 = v67;
  }
  else {
    uint64_t v73 = v65;
  }
  if (v66 <= v68) {
    uint64_t v74 = v68;
  }
  else {
    uint64_t v74 = v66;
  }
  uint64_t v75 = v65 + v58;
  if (v59 + v67 < v65 + v58) {
    uint64_t v75 = v59 + v67;
  }
  uint64_t v76 = v66 + v58;
  if (v60 + v68 < v66 + v58) {
    uint64_t v76 = v60 + v68;
  }
  uint64_t v77 = v75 - v73;
  if (v75 <= v73) {
    uint64_t v77 = 0;
  }
  if (v73 + v58 <= v75) {
    uint64_t v78 = *(void *)(v467 + 208) << *(void *)(v467 + 472);
  }
  else {
    uint64_t v78 = v77;
  }
  uint64_t v79 = v76 - v74;
  if (v76 <= v74) {
    uint64_t v79 = 0;
  }
  uint64_t v80 = v74 + v58 <= v76 ? *(void *)(v467 + 208) << *(void *)(v467 + 472) : v79;
  if (a2
    || v59 && v60
    || (v482[1] = 0,
        v482[0] = 0,
        v482[2] = v61,
        v482[3] = v62,
        uint64_t v81 = sub_2484B5980((void *)v467, a3, v482),
        !v81))
  {
    BOOL v82 = !v78 || v80 == 0;
    if (v82) {
      goto LABEL_77;
    }
    if (v56 <= a2
      || a2 != v57
      || (v481[0] = 0,
          v481[1] = 0,
          v481[2] = v73,
          v481[3] = v74,
          uint64_t v81 = sub_2484B5980((void *)v467, a3, v481),
          !v81))
    {
      if (v56 <= a2
        || (v480[0] = v73,
            v480[1] = 0,
            v480[2] = v78,
            v480[3] = v74,
            uint64_t v81 = sub_2484B5980((void *)v467, a3, v480),
            !v81))
      {
        uint64_t v144 = v80 + v74;
        if (a2 == v57)
        {
          v479[0] = 0;
          v479[1] = v74;
          v479[2] = v73;
          v479[3] = v80;
          uint64_t v81 = sub_2484B5980((void *)v467, a3, v479);
          if (v81) {
            return v81;
          }
          unint64_t v145 = v412 + 1;
          if (v412 + 1 == *(void *)(v467 + 168))
          {
            uint64_t v146 = *(void *)(v467 + 712) - v144;
            v478[0] = 0;
            v478[1] = v80 + v74;
            v478[2] = v73;
            v478[3] = v146;
            uint64_t v81 = sub_2484B5980((void *)v467, a3, v478);
            if (v81) {
              return v81;
            }
          }
        }
        else
        {
          unint64_t v145 = v412 + 1;
        }
        if (v145 != *(void *)(v467 + 168)
          || (uint64_t v403 = *(void *)(v467 + 712) - v144,
              v477[0] = v73,
              v477[1] = v80 + v74,
              v477[2] = v78,
              v477[3] = v403,
              uint64_t v81 = sub_2484B5980((void *)v467, a3, v477),
              !v81))
        {
          uint64_t v404 = v78 + v73;
          uint64_t v405 = *(void *)(v467 + 160);
          unint64_t v406 = v411 + 1;
          if (v56 > a2 && v406 == v405)
          {
            uint64_t v407 = *(void *)(v467 + 704) - v404;
            v476[0] = v404;
            v476[1] = 0;
            v476[2] = v407;
            v476[3] = v74;
            uint64_t v81 = sub_2484B5980((void *)v467, a3, v476);
            if (v81) {
              return v81;
            }
            uint64_t v405 = *(void *)(v467 + 160);
          }
          if (v406 != v405
            || (uint64_t v408 = *(void *)(v467 + 704) - v404,
                v475[0] = v404,
                v475[1] = v74,
                v475[2] = v408,
                v475[3] = v80,
                uint64_t v81 = sub_2484B5980((void *)v467, a3, v475),
                !v81))
          {
            if (v145 != *(void *)(v467 + 168)
              || v406 != *(void *)(v467 + 160)
              || (uint64_t v409 = *(void *)(v467 + 704) - v404,
                  uint64_t v410 = *(void *)(v467 + 712) - v144,
                  v474[0] = v404,
                  v474[1] = v80 + v74,
                  v474[2] = v409,
                  v474[3] = v410,
                  uint64_t v81 = sub_2484B5980((void *)v467, a3, v474),
                  !v81))
            {
LABEL_77:
              long long v494 = 0u;
              long long v495 = 0u;
              long long v492 = 0u;
              long long v493 = 0u;
              long long v490 = 0u;
              long long v491 = 0u;
              uint64_t v83 = v467;
              uint64_t v84 = *(void *)(v467 + 464);
              unint64_t v85 = *(void *)(v467 + 376);
              unint64_t v86 = *(void *)(v467 + 384);
              unint64_t v87 = a2 / v86;
              unint64_t v88 = a2 % v86;
              unint64_t v89 = *(void *)(v467 + 432);
              unint64_t v90 = v89 * (a2 % v86);
              unint64_t v91 = v89 * (a2 / v86);
              unint64_t v92 = v89 >> 3;
              unint64_t v93 = *(void *)(v467 + 368);
              unint64_t v94 = v93 - (v90 >> 3);
              if (v93 < v90 >> 3) {
                unint64_t v94 = 0;
              }
              if ((v90 >> 3) + (v89 >> 3) <= v93) {
                unint64_t v94 = v89 >> 3;
              }
              unint64_t v95 = (v91 >> 3) + (v89 >> 3);
              unint64_t v96 = v85 - (v91 >> 3);
              if (v85 < v91 >> 3) {
                unint64_t v96 = 0;
              }
              if (v95 <= v85) {
                unint64_t v97 = v92;
              }
              else {
                unint64_t v97 = v96;
              }
              uint64_t v98 = v86 + 1;
              unint64_t v99 = v88 + v87 * (v86 + 1);
              uint64_t v100 = *(void *)(v467 + 456);
              int v101 = atomic_fetch_or((atomic_uchar *volatile)(*(void *)(v467 + 448) + v99), 4u);
              unint64_t v102 = v87 + 1;
              unint64_t v103 = v88 + (v87 + 1) * v98;
              int v104 = atomic_fetch_or((atomic_uchar *volatile)(v99 + *(void *)(v467 + 448) + 1), 8u);
              unsigned __int8 v105 = atomic_fetch_or((atomic_uchar *volatile)(v103 + *(void *)(v467 + 448) + 1), 1u);
              int v106 = atomic_fetch_or((atomic_uchar *volatile)(*(void *)(v467 + 448) + v103), 2u);
              unint64_t v107 = v94 + (v90 >> 3);
              uint64_t v108 = *(void *)(v467 + 384);
              unint64_t v109 = v88 + 1;
              if (v90 > 7)
              {
                unint64_t v112 = v90 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v110 = (char *)(v112 - v100);
                unint64_t v113 = (char *)(v112 + v100);
                int v111 = *(char **)(v467 + 304);
                if (v113 < v111) {
                  int v111 = v113;
                }
              }
              else
              {
                uint64_t v110 = 0;
                int v111 = 0;
              }
              int v114 = v101 | 4;
              uint64_t v115 = *(void *)(v467 + 392);
              uint64_t v116 = 8 * v107;
              long long v496 = v110;
              v497 = v111;
              if (v108 == v109)
              {
                unint64_t v117 = *(void *)(v467 + 304);
                uint64_t v118 = (char *)v117;
              }
              else
              {
                uint64_t v118 = (char *)(v116 - v100);
                unint64_t v117 = *(void *)(v467 + 304);
              }
              unsigned int v119 = v468;
              unint64_t v120 = v469;
              unint64_t v121 = v97 + (v91 >> 3);
              unint64_t v122 = v116 + v100;
              if (v116 + v100 >= v117) {
                unint64_t v122 = v117;
              }
              v498 = v118;
              unint64_t v499 = v122;
              if (v91 >= 8)
              {
                unint64_t v125 = v91 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v123 = v125 - v84;
                unint64_t v126 = v125 + v84;
                unint64_t v124 = *(void *)(v467 + 312);
                if (v126 < v124) {
                  unint64_t v124 = v126;
                }
              }
              else
              {
                unint64_t v123 = 0;
                unint64_t v124 = 0;
              }
              uint64_t v127 = 8 * v121;
              if (v115 == v102)
              {
                unint64_t v128 = *(void *)(v467 + 312);
                unint64_t v129 = v128;
              }
              else
              {
                unint64_t v129 = v127 - v84;
                unint64_t v128 = *(void *)(v467 + 312);
              }
              unint64_t v130 = v127 + v84;
              if (v130 >= v128) {
                unint64_t v130 = v128;
              }
              uint64_t v500 = 0x100000000;
              LOBYTE(v501) = 0;
              if (v114 == 15) {
                LOBYTE(v500) = 1;
              }
              if ((v104 & 0xFFFFFFF7) == 7) {
                BYTE6(v500) = 1;
              }
              if ((v105 & 0xFE) == 0xE) {
                LOBYTE(v501) = 1;
              }
              if ((v106 & 0xFFFFFFFD) == 0xD)
              {
                BYTE2(v500) = 1;
                if ((v114 & 2) != 0) {
                  goto LABEL_112;
                }
              }
              else if ((v114 & 2) != 0)
              {
LABEL_112:
                BYTE3(v500) = 1;
                if ((v114 & 8) != 0) {
                  goto LABEL_113;
                }
                goto LABEL_118;
              }
              if ((v114 & 8) != 0)
              {
LABEL_113:
                BYTE1(v500) = 1;
                if ((v104 & 4) != 0) {
                  goto LABEL_114;
                }
                goto LABEL_119;
              }
LABEL_118:
              if ((v104 & 4) != 0)
              {
LABEL_114:
                HIBYTE(v500) = 1;
                if ((v106 & 4) == 0) {
                  goto LABEL_121;
                }
                goto LABEL_120;
              }
LABEL_119:
              if ((v106 & 4) == 0)
              {
LABEL_121:
                uint64_t v131 = 0;
                *(int64x2_t *)v503 = vdupq_n_s64(3uLL);
                *(_OWORD *)&v503[16] = *(_OWORD *)v503;
                long long v504 = *(_OWORD *)v503;
                do
                {
                  uint64_t v132 = 0;
                  unint64_t v133 = (unint64_t)&v503[16 * v131];
                  do
                  {
                    if (*((unsigned char *)&v500 + 3 * v132 + v131))
                    {
                      uint64_t v134 = *(void *)v133;
                      if (*(void *)v133 == 3) {
                        uint64_t v134 = v132;
                      }
                      *(void *)unint64_t v133 = v134;
                      *(void *)(v133 | 8) = ++v132;
                    }
                    else
                    {
                      ++v132;
                    }
                  }
                  while (v132 != 3);
                  ++v131;
                }
                while (v131 != 3);
                long long v135 = v504;
                unint64_t v136 = (&v496)[*(void *)v503];
                float32x4_t v137 = (&v496)[*(void *)&v503[8]];
                if (*(void *)v503 == *(void *)&v503[16] && *(void *)&v503[8] == *(void *)&v503[24])
                {
                  if (*(_OWORD *)v503 == v504)
                  {
                    uint64_t v138 = v137 - v136;
                    if (v137 != v136 && v130 != v123)
                    {
                      *(void *)&long long v490 = (&v496)[*(void *)v503];
                      float32x4_t v140 = &v490;
                      uint64_t v413 = 1;
LABEL_178:
                      *((void *)v140 + 1) = v123;
                      *((void *)v140 + 2) = v138;
                      *((void *)v140 + 3) = v130 - v123;
                      goto LABEL_180;
                    }
                    return 0;
                  }
                  if (v137 == v136 || v129 == v123)
                  {
                    uint64_t v413 = 0;
                  }
                  else
                  {
                    *(void *)&long long v490 = (&v496)[*(void *)v503];
                    *((void *)&v490 + 1) = v123;
                    *(void *)&long long v491 = v137 - v136;
                    *((void *)&v491 + 1) = v129 - v123;
                    uint64_t v413 = 1;
                  }
                }
                else
                {
                  uint64_t v141 = v137 - v136;
                  BOOL v143 = v137 == v136 || v124 == v123;
                  if (*(_OWORD *)&v503[16] == v504)
                  {
                    if (v143)
                    {
                      uint64_t v413 = 0;
                    }
                    else
                    {
                      *(void *)&long long v490 = (&v496)[*(void *)v503];
                      *((void *)&v490 + 1) = v123;
                      *(void *)&long long v491 = v141;
                      *((void *)&v491 + 1) = v124 - v123;
                      uint64_t v413 = 1;
                    }
                    v152 = (&v496)[*(void *)&v503[16]];
                    unint64_t v153 = (&v496)[*(void *)&v503[24]];
                    uint64_t v138 = v153 - v152;
                    if (v153 != v152 && v130 != v124)
                    {
                      float32x4_t v140 = &v490 + 2 * v413;
                      *(void *)float32x4_t v140 = v152;
                      ++v413;
                      unint64_t v123 = v124;
                      goto LABEL_178;
                    }
                    goto LABEL_179;
                  }
                  if (v143)
                  {
                    uint64_t v413 = 0;
                  }
                  else
                  {
                    *(void *)&long long v490 = (&v496)[*(void *)v503];
                    *((void *)&v490 + 1) = v123;
                    *(void *)&long long v491 = v141;
                    *((void *)&v491 + 1) = v124 - v123;
                    uint64_t v413 = 1;
                  }
                  uint64_t v148 = (&v496)[*(void *)&v503[16]];
                  uint64_t v149 = (char *)((&v496)[*(void *)&v503[24]] - v148);
                  if (v149) {
                    BOOL v150 = v129 == v124;
                  }
                  else {
                    BOOL v150 = 1;
                  }
                  if (!v150)
                  {
                    unint64_t v151 = &v490 + 2 * v413;
                    *(void *)unint64_t v151 = v148;
                    *((void *)v151 + 1) = v124;
                    *((void *)v151 + 2) = v149;
                    *((void *)v151 + 3) = v129 - v124;
                    ++v413;
                  }
                }
                unint64_t v154 = (&v496)[(void)v135];
                unint64_t v155 = (&v496)[*((void *)&v135 + 1)];
                uint64_t v138 = v155 - v154;
                if (v155 != v154 && v130 != v129)
                {
                  float32x4_t v140 = &v490 + 2 * v413;
                  *(void *)float32x4_t v140 = v154;
                  ++v413;
                  unint64_t v123 = v129;
                  goto LABEL_178;
                }
LABEL_179:
                if (v413)
                {
LABEL_180:
                  uint64_t v156 = 0;
                  while (1)
                  {
                    uint64_t v416 = v156;
                    unint64_t v157 = &v490 + 2 * v156;
                    uint64_t v158 = *v119;
                    uint64_t v159 = *(void *)v157;
                    uint64_t v420 = *(void *)v157;
                    if (*v120 == *v119)
                    {
                      uint64_t v221 = *((void *)v157 + 2);
                      uint64_t v421 = *((void *)v157 + 1);
                      uint64_t v222 = *((void *)v157 + 3);
                    }
                    else
                    {
                      uint64_t v160 = 0;
                      uint64_t v415 = *((void *)v157 + 2);
                      uint64_t v421 = *((void *)v157 + 1);
                      uint64_t v414 = *((void *)v157 + 3);
                      uint64_t v418 = v415 + v159;
                      do
                      {
                        uint64_t v439 = v158 + 40 * v160;
                        unint64_t v161 = *(void *)(v83 + 160);
                        unint64_t v162 = a2 / v161;
                        unint64_t v163 = a2 % v161;
                        unint64_t v164 = (uint64_t *)(**(void **)(v83 + 32) + 16 * v160);
                        uint64_t v166 = *v164;
                        uint64_t v165 = v164[1];
                        uint64_t v167 = *(void *)(v83 + 472);
                        unint64_t v168 = *(void *)(v83 + 208) << v167;
                        unint64_t v429 = v163;
                        unint64_t v446 = (v168 >> v166) * v163;
                        unint64_t v169 = (v168 >> v166) + v446;
                        int v471 = 1 << v166;
                        uint64_t v170 = (1 << v166) - 1;
                        uint64_t v171 = *(void *)(v83 + 104);
                        unint64_t v172 = v170 + *(void *)(v83 + 96);
                        unint64_t v173 = v172 / v471;
                        if (v173 >= v169) {
                          unint64_t v174 = v169;
                        }
                        else {
                          unint64_t v174 = v172 / v471;
                        }
                        unint64_t v436 = v174;
                        unint64_t v425 = v162;
                        unint64_t v175 = (v168 >> v165) * v162;
                        int v463 = 1 << v165;
                        uint64_t v176 = (1 << v165) - 1;
                        uint64_t v177 = v83;
                        unint64_t v178 = (v176 + v171) / (unint64_t)(1 << v165);
                        if (v178 >= (v168 >> v165) + v175) {
                          unint64_t v179 = (v168 >> v165) + v175;
                        }
                        else {
                          unint64_t v179 = (v176 + v171) / (unint64_t)v463;
                        }
                        unint64_t v433 = v179;
                        float v180 = (uint64_t *)(**(void **)(v177 + 56) + 16 * v160);
                        uint64_t v181 = *v180;
                        uint64_t v459 = v180[1];
                        uint64_t v453 = v160;
                        unint64_t v442 = sub_2484B2BF0(v177, v160);
                        uint64_t v183 = v182;
                        unint64_t v184 = v170 + (v420 << v167);
                        if (v184 >= v471) {
                          unint64_t v185 = v184 / v471 - v181;
                        }
                        else {
                          unint64_t v185 = 0;
                        }
                        unint64_t v186 = (v170 + (v418 << v167)) / (unint64_t)v471 + v181;
                        if (v173 < v186) {
                          unint64_t v186 = v173;
                        }
                        unint64_t v450 = v186;
                        unint64_t v187 = v176 + (v421 << v167);
                        if (v187 >= v463) {
                          unint64_t v188 = v187 / v463 - v459;
                        }
                        else {
                          unint64_t v188 = 0;
                        }
                        unint64_t v189 = (v176 + ((v414 + v421) << v167)) / (unint64_t)v463 + v459;
                        if (v178 < v189) {
                          unint64_t v189 = v178;
                        }
                        unint64_t v456 = v189;
                        unint64_t v422 = v175;
                        unint64_t v427 = v188 - v175;
                        unint64_t v472 = v185;
                        if (v188 < v175 && v450 != v185 && v182)
                        {
                          uint64_t v190 = 0;
                          uint64_t v464 = v182 * (2 * v425 - 2);
                          uint64_t v460 = v185 - v446 + *(void *)(v467 + 504);
                          uint64_t v191 = *(void *)(v467 + 512) - v182;
                          uint64_t v192 = *(void *)(v467 + 256) + 40 * v453;
                          uint64_t v194 = *(void *)(v439 + 16);
                          uint64_t v193 = *(void *)(v439 + 24);
                          size_t v195 = 4 * (v450 - v185);
                          uint64_t v196 = v193 + v194 * v191;
                          uint64_t v197 = v182;
                          do
                          {
                            memcpy((void *)(v193 + (v191 + v190) * v194 + 4 * v460), (const void *)(*(void *)(v192 + 24) + *(void *)(v192 + 16) * (v190 + v464) + 4 * v185), v195);
                            unint64_t v185 = v472;
                            ++v190;
                            v196 += v194;
                            --v197;
                          }
                          while (v197);
                        }
                        if (v456 > v433 && v450 != v185 && v183)
                        {
                          uint64_t v198 = 0;
                          uint64_t v199 = v183 * ((2 * v425) | 1);
                          uint64_t v200 = v185 - v446 + *(void *)(v467 + 504);
                          uint64_t v201 = *(void *)(v467 + 256) + 40 * v453;
                          uint64_t v203 = *(void *)(v439 + 16);
                          uint64_t v202 = *(void *)(v439 + 24);
                          unint64_t v204 = v433 - v422 + *(void *)(v467 + 512);
                          size_t v205 = 4 * (v450 - v185);
                          do
                          {
                            memcpy((void *)(v202 + (v204 + v198) * v203 + 4 * v200), (const void *)(*(void *)(v201 + 24) + *(void *)(v201 + 16) * (v198 + v199) + 4 * v185), v205);
                            unint64_t v185 = v472;
                            ++v198;
                            --v183;
                          }
                          while (v183);
                        }
                        if (v185 < v446 && v442 && v456 != v188)
                        {
                          uint64_t v206 = 0;
                          unint64_t v207 = v456 - v188;
                          unint64_t v208 = *(void *)(v467 + 504) - v442;
                          uint64_t v209 = *(void *)(v467 + 280) + 40 * v453;
                          uint64_t v211 = *(void *)(v439 + 16);
                          uint64_t v210 = *(void *)(v439 + 24);
                          unint64_t v212 = v427 + *(void *)(v467 + 512);
                          unint64_t v213 = v188;
                          do
                          {
                            memcpy((void *)(v210 + (v212 + v206++) * v211 + 4 * v208), (const void *)(*(void *)(v209 + 24)+ *(void *)(v209 + 16) * v213+++ 4 * v442 * (2 * v429 - 2)), 4 * v442);
                            --v207;
                          }
                          while (v207);
                        }
                        if (v450 > v436 && v442 && v456 != v188)
                        {
                          uint64_t v214 = 0;
                          unint64_t v215 = v456 - v188;
                          unint64_t v216 = v436 - v446 + *(void *)(v467 + 504);
                          uint64_t v217 = *(void *)(v467 + 280) + 40 * v453;
                          uint64_t v219 = *(void *)(v439 + 16);
                          uint64_t v218 = *(void *)(v439 + 24);
                          unint64_t v220 = v427 + *(void *)(v467 + 512);
                          do
                          {
                            memcpy((void *)(v218 + (v220 + v214++) * v219 + 4 * v216), (const void *)(*(void *)(v217 + 24)+ *(void *)(v217 + 16) * v188+++ 4 * v442 * ((2 * v429) | 1)), 4 * v442);
                            --v215;
                          }
                          while (v215);
                        }
                        uint64_t v160 = v453 + 1;
                        unsigned int v119 = v468;
                        uint64_t v158 = *v468;
                        uint64_t v83 = v467;
                      }
                      while (v453 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((*v469 - *v468) >> 3));
                      uint64_t v159 = v420;
                      uint64_t v222 = v414;
                      uint64_t v221 = v415;
                    }
                    uint64_t v465 = *(void *)(v83 + 208);
                    uint64_t v447 = *(void *)(v83 + 504);
                    uint64_t v451 = *(void *)(v83 + 512);
                    uint64_t v500 = 0;
                    uint64_t v501 = 0;
                    uint64_t v502 = 0;
                    sub_2484B2C50((char **)&v500, (uint64_t)(*(void *)(v83 + 16) - *(void *)(v83 + 8)) >> 3);
                    uint64_t v223 = *(void *)(v83 + 472);
                    uint64_t v224 = 1 << v223;
                    unint64_t v225 = v159 * v224;
                    unint64_t v226 = v421 * v224;
                    uint64_t v227 = v221 << v223;
                    uint64_t v228 = v222 << v223;
                    unint64_t v229 = *(void *)(v83 + 96);
                    unint64_t v230 = *(void *)(v83 + 104);
                    if (v229 >= v227 + v225) {
                      unint64_t v231 = v227 + v225;
                    }
                    else {
                      unint64_t v231 = *(void *)(v83 + 96);
                    }
                    if (v230 >= v228 + v226) {
                      unint64_t v232 = v228 + v226;
                    }
                    else {
                      unint64_t v232 = *(void *)(v83 + 104);
                    }
                    BOOL v329 = v231 >= v225;
                    unint64_t v233 = v231 - v225;
                    if (!v329) {
                      unint64_t v233 = 0;
                    }
                    if (v227 + v225 <= v229) {
                      unint64_t v234 = v227;
                    }
                    else {
                      unint64_t v234 = v233;
                    }
                    uint64_t v235 = v232 - v226;
                    if (v232 < v226) {
                      uint64_t v235 = 0;
                    }
                    if (v228 + v226 <= v230) {
                      uint64_t v236 = v228;
                    }
                    else {
                      uint64_t v236 = v235;
                    }
                    uint64_t v237 = *(void *)(v83 + 8);
                    uint64_t v238 = *(void *)(v83 + 16);
                    unint64_t v239 = (v238 - v237) >> 3;
                    if (v238 != v237)
                    {
                      unint64_t v240 = *(uint64_t **)(v83 + 32);
                      unint64_t v241 = *(int **)(v83 + 568);
                      if (v239 <= 1) {
                        uint64_t v242 = 1;
                      }
                      else {
                        uint64_t v242 = (v238 - v237) >> 3;
                      }
                      long long v243 = (char *)(v500 + 16);
                      do
                      {
                        uint64_t v245 = *v241++;
                        uint64_t v244 = v245;
                        uint64_t v246 = *v240;
                        v240 += 3;
                        unint64_t v247 = (uint64_t *)(v246 + 16 * v244);
                        uint64_t v249 = *v247;
                        uint64_t v248 = v247[1];
                        *((void *)v243 - 2) = v225 / (1 << v249);
                        *((void *)v243 - 1) = v226 / (1 << v248);
                        *(void *)long long v243 = (v234 + ~(-1 << v249)) >> v249;
                        *((void *)v243 + 1) = (unint64_t)(v236 + ~(-1 << v248)) >> v248;
                        v243 += 32;
                        --v242;
                      }
                      while (v242);
                    }
                    if (*(void *)(v83 + 720) == v239)
                    {
                      uint64_t v250 = 0;
                      int v251 = 0;
                      uint64_t v252 = (uint64_t *)(v467 + 104);
                      unint64_t v253 = (uint64_t *)(v467 + 96);
                    }
                    else
                    {
                      uint64_t v250 = *(int *)(v83 + 696);
                      int v251 = *(_DWORD *)(v83 + 700);
                      uint64_t v252 = (uint64_t *)(v467 + 712);
                      unint64_t v253 = (uint64_t *)(v467 + 704);
                    }
                    uint64_t v254 = *v253;
                    uint64_t v255 = v250 + v225;
                    uint64_t v256 = (v250 + v225) & ~((uint64_t)(v250 + v225) >> 63);
                    uint64_t v257 = v234 + v225 + v250;
                    if (v254 < v257) {
                      uint64_t v257 = v254;
                    }
                    uint64_t v457 = v257 - v256;
                    uint64_t v461 = v256;
                    if (v257 <= v256)
                    {
                      uint64_t v81 = 0;
                      unint64_t v120 = v469;
                    }
                    else
                    {
                      uint64_t v454 = v250;
                      uint64_t v434 = *v252;
                      uint64_t v437 = *(void *)(v83 + 504);
                      uint64_t v443 = *(void *)(v83 + 512);
                      uint64_t v428 = *(void *)(v83 + 472);
                      unint64_t v430 = *(void **)(v83 + 32);
                      uint64_t v258 = *(void *)(v83 + 520);
                      uint64_t v486 = 0;
                      int64x2_t v485 = 0uLL;
                      uint64_t v259 = *v469;
                      uint64_t v260 = *v119;
                      long long v496 = 0;
                      v497 = 0;
                      v498 = 0;
                      uint64_t v261 = v259 - v260;
                      unint64_t v426 = v226;
                      int v423 = v251;
                      uint64_t v419 = v255;
                      if (v261)
                      {
                        unint64_t v262 = 0xCCCCCCCCCCCCCCCDLL * (v261 >> 3);
                        if (v262 > 0xAAAAAAAAAAAAAAALL) {
                          sub_2483E92E8();
                        }
                        unint64_t v263 = (char *)operator new(0x3333333333333338 * (v261 >> 3));
                        long long v496 = v263;
                        v498 = &v263[24 * v262];
                        bzero(v263, 24 * ((24 * v262 - 24) / 0x18) + 24);
                        v497 = &v263[24 * ((24 * v262 - 24) / 0x18) + 24];
                      }
                      else
                      {
                        unint64_t v263 = 0;
                      }
                      unint64_t v264 = v239 + 1;
                      if (v239 != -1)
                      {
                        if (v264 > 0xAAAAAAAAAAAAAAALL) {
                          sub_2483E92E8();
                        }
                        *(void *)&long long v504 = &v486;
                        uint64_t v265 = operator new(24 * v264);
                        *(void *)v503 = v265;
                        *(void *)&v503[8] = v265;
                        uint64_t v266 = &v265[3 * v264];
                        *(void *)&v503[16] = v265;
                        *(void *)&v503[24] = v266;
                        uint64_t v267 = 24 * v239 + 24;
                        do
                        {
                          sub_2484B5BE4(v265, (uint64_t)&v496);
                          v265 += 3;
                          v267 -= 24;
                        }
                        while (v267);
                        *(void *)&v503[16] = v266;
                        uint64_t v268 = (void *)v485.i64[1];
                        uint64_t v269 = (void *)v485.i64[0];
                        uint64_t v270 = *(void *)&v503[8];
                        if (v485.i64[1] == v485.i64[0])
                        {
                          int64x2_t v272 = vdupq_n_s64(v485.u64[1]);
                        }
                        else
                        {
                          do
                          {
                            *(void *)(v270 - 24) = 0;
                            *(void *)(v270 - 16) = 0;
                            v270 -= 24;
                            *(void *)(v270 + 16) = 0;
                            long long v271 = *(_OWORD *)(v268 - 3);
                            v268 -= 3;
                            *(_OWORD *)uint64_t v270 = v271;
                            *(void *)(v270 + 16) = v268[2];
                            *uint64_t v268 = 0;
                            v268[1] = 0;
                            v268[2] = 0;
                          }
                          while (v268 != v269);
                          int64x2_t v272 = v485;
                          uint64_t v266 = *(void **)&v503[16];
                        }
                        v485.i64[0] = v270;
                        v485.i64[1] = (uint64_t)v266;
                        *(int64x2_t *)&v503[8] = v272;
                        uint64_t v273 = v486;
                        uint64_t v486 = *(void *)&v503[24];
                        *(void *)&v503[24] = v273;
                        *(void *)v503 = v272.i64[0];
                        sub_2483F8F8C((uint64_t)v503);
                        unsigned int v119 = v468;
                      }
                      uint64_t v440 = v236;
                      if (v263) {
                        operator delete(v263);
                      }
                      uint64_t v274 = *v469;
                      uint64_t v275 = *v119;
                      if (v238 == v237)
                      {
                        uint64_t v279 = *v469;
                      }
                      else
                      {
                        uint64_t v276 = 0;
                        uint64_t v277 = (void *)(v258 + 24 * a3);
                        if (v239 <= 1) {
                          uint64_t v278 = 1;
                        }
                        else {
                          uint64_t v278 = v239;
                        }
                        uint64_t v279 = *v469;
                        do
                        {
                          uint64_t v280 = v276 + 1;
                          BOOL v82 = v279 == v275;
                          uint64_t v279 = v275;
                          if (!v82)
                          {
                            uint64_t v281 = 0;
                            unint64_t v282 = 0;
                            do
                            {
                              uint64_t v283 = *(void *)(*(void *)(v467 + 8) + 8 * v276);
                              if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v283 + 24))(v283, v282) == 2)
                              {
                                uint64_t v284 = *(void *)(*v277 + v281) + 40 * v276;
                                uint64_t v285 = *(void *)(v485.i64[0] + 24 * v280) + v281;
                                *(_DWORD *)(v285 + 8) = *(_DWORD *)(v284 + 4) - 1;
                                *(void *)uint64_t v285 = *(void *)(v284 + 24);
                                *(void *)(v285 + 16) = *(void *)(v284 + 16) >> 2;
                              }
                              ++v282;
                              uint64_t v274 = *v469;
                              uint64_t v275 = *v468;
                              v281 += 24;
                            }
                            while (v282 < 0xCCCCCCCCCCCCCCCDLL * ((*v469 - *v468) >> 3));
                            uint64_t v279 = *v469;
                          }
                          ++v276;
                        }
                        while (v280 != v278);
                      }
                      uint64_t v286 = v279 - v275;
                      if (v286)
                      {
                        uint64_t v287 = v286 / 40;
                        if ((unint64_t)(v286 / 40) <= 1) {
                          uint64_t v287 = 1;
                        }
                        uint64_t v288 = *(void *)v485.i64[0] + 8;
                        float32x4_t v289 = (void *)(v275 + 24);
                        float32x4_t v290 = (int *)(*v430 + 8);
                        do
                        {
                          char v291 = *(v290 - 2);
                          int v292 = *v290;
                          v290 += 4;
                          unint64_t v293 = *(v289 - 1);
                          *(void *)(v288 - 8) = *v289
                                                + v293
                                                * ((uint64_t)((v451 - v465 * v412 + v421 + -(int)v443) * (1 << v428))
                                                 / (1 << v292)
                                                 + (int)v443)
                                                + 4
                                                * ((int)v437
                                                 - 16
                                                 + (uint64_t)((v420 + v447 - v465 * v411 + -(int)v437) * (1 << v428))
                                                 / (1 << v291));
                          *(void *)(v288 + 8) = v293 >> 2;
                          *(_DWORD *)uint64_t v288 = -1;
                          v288 += 24;
                          v289 += 5;
                          --v287;
                        }
                        while (v287);
                      }
                      uint64_t v294 = *(void *)(v467 + 688);
                      v497 = 0;
                      v498 = 0;
                      long long v496 = 0;
                      *(void *)v503 = &v496;
                      v503[8] = 0;
                      unint64_t v295 = v294 + 1;
                      v296 = v468;
                      if (v294 == -1) {
                        goto LABEL_288;
                      }
                      if (v295 > 0xAAAAAAAAAAAAAAALL) {
                        sub_2483E92E8();
                      }
                      unint64_t v297 = (char *)operator new(24 * v295);
                      long long v496 = v297;
                      v498 = &v297[24 * v295];
                      size_t v298 = 24 * ((24 * v295 - 24) / 0x18) + 24;
                      bzero(v297, v298);
                      v497 = &v297[v298];
                      if (v294)
                      {
LABEL_288:
                        unint64_t v299 = 0;
                        do
                        {
                          unint64_t v300 = (uint64_t *)&v496[24 * v299];
                          uint64_t v301 = (*v469 - *v296) >> 3;
                          unint64_t v302 = v300 + 1;
                          v303 = (char *)v300[1];
                          unint64_t v304 = 0xCCCCCCCCCCCCCCCDLL * v301;
                          uint64_t v305 = *v300;
                          unint64_t v306 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v303[-*v300] >> 3);
                          unint64_t v307 = v304 - v306;
                          if (v304 <= v306)
                          {
                            if (v304 < v306)
                            {
                              float32x4_t v317 = (char *)(v305 + 24 * v304);
                              if (v303 != v317)
                              {
                                float32x4_t v318 = (char *)v300[1];
                                do
                                {
                                  uint64_t v320 = (void *)*((void *)v318 - 3);
                                  v318 -= 24;
                                  uint64_t v319 = v320;
                                  if (v320)
                                  {
                                    *((void *)v303 - 2) = v319;
                                    operator delete(v319);
                                  }
                                  v303 = v318;
                                }
                                while (v318 != v317);
                              }
                              void *v302 = v317;
                            }
                          }
                          else
                          {
                            unint64_t v308 = &v496[24 * v299];
                            uint64_t v311 = *((void *)v308 + 2);
                            unint64_t v309 = v308 + 16;
                            uint64_t v310 = v311;
                            if (0xAAAAAAAAAAAAAAABLL * ((v311 - (uint64_t)v303) >> 3) >= v307)
                            {
                              bzero(v303, 24 * ((24 * v307 - 24) / 0x18) + 24);
                              void *v302 = &v303[24 * ((24 * v307 - 24) / 0x18) + 24];
                            }
                            else
                            {
                              if (v304 > 0xAAAAAAAAAAAAAAALL) {
                                sub_2483E92E8();
                              }
                              *(void *)&long long v504 = v309;
                              unint64_t v312 = 0xAAAAAAAAAAAAAAABLL * ((v310 - v305) >> 3);
                              if (2 * v312 > v304) {
                                unint64_t v304 = 2 * v312;
                              }
                              if (v312 >= 0x555555555555555) {
                                unint64_t v313 = 0xAAAAAAAAAAAAAAALL;
                              }
                              else {
                                unint64_t v313 = v304;
                              }
                              float32x4_t v314 = (char *)sub_2483F8ED4(v313);
                              float32x4_t v315 = &v314[24 * v306];
                              *(void *)v503 = v314;
                              *(void *)&v503[8] = v315;
                              *(void *)&v503[24] = &v314[24 * v316];
                              bzero(v315, 24 * ((24 * v307 - 24) / 0x18) + 24);
                              *(void *)&v503[16] = &v315[24 * ((24 * v307 - 24) / 0x18) + 24];
                              sub_2483F8F1C(v300, v503);
                              sub_2483F8F8C((uint64_t)v503);
                            }
                          }
                          ++v299;
                          v296 = v468;
                          unint64_t v321 = *(void *)(v467 + 688);
                        }
                        while (v299 < v321);
                        unint64_t v297 = v496;
                        uint64_t v274 = *v469;
                        uint64_t v275 = *v468;
                      }
                      else
                      {
                        unint64_t v321 = 0;
                      }
                      sub_248408C04(&__p, 1uLL);
                      uint64_t v322 = (v274 - v275) >> 3;
                      uint64_t v323 = &v297[24 * v321];
                      v324 = v323 + 8;
                      unint64_t v325 = (void *)*((void *)v323 + 1);
                      unint64_t v326 = 0xCCCCCCCCCCCCCCCDLL * v322;
                      uint64_t v327 = *(void *)v323;
                      unint64_t v328 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v325 - *(void *)v323) >> 3);
                      BOOL v329 = v326 >= v328;
                      unint64_t v330 = v326 - v328;
                      if (v326 <= v328)
                      {
                        unint64_t v120 = v469;
                        int v339 = v440;
                        if (!v329)
                        {
                          uint64_t v345 = (void *)(v327 + 24 * v326);
                          if (v325 != v345)
                          {
                            unint64_t v346 = (void *)*((void *)v323 + 1);
                            do
                            {
                              unint64_t v348 = (void *)*(v346 - 3);
                              v346 -= 3;
                              uint64_t v347 = v348;
                              if (v348)
                              {
                                *(v325 - 2) = v347;
                                operator delete(v347);
                              }
                              unint64_t v325 = v346;
                            }
                            while (v346 != v345);
                          }
                          void *v324 = v345;
                        }
                      }
                      else
                      {
                        unint64_t v331 = &v297[24 * v321];
                        uint64_t v334 = *((void *)v331 + 2);
                        uint64_t v332 = v331 + 16;
                        uint64_t v333 = v334;
                        if (0xAAAAAAAAAAAAAAABLL * ((v334 - (uint64_t)v325) >> 3) >= v330)
                        {
                          float v349 = &v325[3 * v330];
                          uint64_t v350 = 24 * v326 - 8 * (((uint64_t)v325 - *(void *)v323) >> 3);
                          unint64_t v120 = v469;
                          int v339 = v440;
                          do
                          {
                            void *v325 = 0;
                            v325[1] = 0;
                            v325[2] = 0;
                            sub_248409DFC(v325, __p, (uint64_t)v484, (v484 - (unsigned char *)__p) >> 3);
                            v325 += 3;
                            v350 -= 24;
                          }
                          while (v350);
                          void *v324 = v349;
                        }
                        else
                        {
                          if (v326 > 0xAAAAAAAAAAAAAAALL) {
                            sub_2483E92E8();
                          }
                          *(void *)&long long v504 = v332;
                          unint64_t v335 = 0xAAAAAAAAAAAAAAABLL * ((v333 - v327) >> 3);
                          uint64_t v336 = 2 * v335;
                          if (2 * v335 <= v326) {
                            uint64_t v336 = v326;
                          }
                          if (v335 >= 0x555555555555555) {
                            unint64_t v337 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v337 = v336;
                          }
                          uint64_t v338 = (char *)sub_2483F8ED4(v337);
                          int v339 = v440;
                          uint64_t v340 = &v338[24 * v328];
                          *(void *)v503 = v338;
                          *(void *)&v503[8] = v340;
                          *(void *)&v503[16] = v340;
                          *(void *)&v503[24] = &v338[24 * v341];
                          uint64_t v342 = 3 * v326;
                          uint64_t v343 = &v338[24 * v326];
                          uint64_t v344 = 8 * v342 - 24 * v328;
                          unint64_t v120 = v469;
                          do
                          {
                            *(void *)uint64_t v340 = 0;
                            *((void *)v340 + 1) = 0;
                            *((void *)v340 + 2) = 0;
                            sub_248409DFC(v340, __p, (uint64_t)v484, (v484 - (unsigned char *)__p) >> 3);
                            v340 += 24;
                            v344 -= 24;
                          }
                          while (v344);
                          *(void *)&v503[16] = v343;
                          sub_2483F8F1C(v323, v503);
                          sub_2483F8F8C((uint64_t)v503);
                        }
                      }
                      if (__p)
                      {
                        int8x16_t v484 = __p;
                        operator delete(__p);
                      }
                      uint64_t v351 = *v120;
                      uint64_t v352 = *v468;
                      sub_248408C04(v503, 8uLL);
                      sub_248408C7C(&__p, 0xCCCCCCCCCCCCCCCDLL * ((v351 - v352) >> 3), (uint64_t)v503);
                      uint64_t v353 = a3;
                      if (*(void *)v503)
                      {
                        *(void *)&v503[8] = *(void *)v503;
                        operator delete(*(void **)v503);
                      }
                      uint64_t v354 = *(int **)(v467 + 640);
                      unint64_t v355 = *(int **)(v467 + 648);
                      if (v354 != v355)
                      {
                        uint64_t v356 = v354 + 1;
                        if (v354 + 1 != v355)
                        {
                          int v357 = *v354;
                          uint64_t v358 = v354 + 1;
                          do
                          {
                            int v360 = *v358++;
                            int v359 = v360;
                            BOOL v361 = v357 < v360;
                            if (v357 <= v360) {
                              int v357 = v359;
                            }
                            if (v361) {
                              uint64_t v354 = v356;
                            }
                            uint64_t v356 = v358;
                          }
                          while (v358 != v355);
                        }
                      }
                      uint64_t v81 = 0;
                      int v362 = *v354;
                      int v448 = v362;
                      int v444 = v362 + v339;
                      if (v362 + v339 > -v362)
                      {
                        int v363 = -v362;
                        uint64_t v431 = v426 + v423;
                        do
                        {
                          unint64_t v364 = *(void *)(v467 + 688);
                          int v466 = v363;
                          uint64_t v365 = (v363 - v448);
                          if (v364)
                          {
                            uint64_t v366 = 0;
                            unint64_t v367 = v468;
                            while (1)
                            {
                              int v368 = *(_DWORD *)(*(void *)(v467 + 640) + 4 * v366);
                              int v369 = v368 + v365;
                              int v370 = *(_DWORD *)(*(void *)(*(void *)(v467 + 32) + 24 * v366)
                                               + 16 * *(int *)(*(void *)(v467 + 568) + 4 * v366)
                                               + 8);
                              int v371 = (v368 + v365) & ~(-1 << v370);
                              int v372 = -v368;
                              if (v371) {
                                BOOL v373 = 1;
                              }
                              else {
                                BOOL v373 = v369 < v372;
                              }
                              if (!v373)
                              {
                                int v374 = v369 >> v370;
                                uint64_t v375 = v500;
                                uint64_t v376 = *(void *)(v500 + 32 * v366 + 8) + v374;
                                if (v376 >= 0 && v376 < *(void *)(*(void *)(v467 + 592) + 32 * v366 + 24))
                                {
                                  int v489 = v374;
                                  uint64_t v488 = v366;
                                  uint64_t v377 = *(void *)(v467 + 8);
                                  uint64_t v378 = *(void *)(v377 + 8 * v366);
                                  uint64_t v487 = *(void *)(v378 + 16);
                                  uint64_t v379 = *(void *)(v378 + 32);
                                  *(void *)v503 = &v489;
                                  *(void *)&v503[8] = &v487;
                                  *(void *)&v503[16] = &v500;
                                  *(void *)&v503[24] = &v488;
                                  *(void *)&long long v504 = v467;
                                  *((void *)&v504 + 1) = &v496;
                                  v505 = &v485;
                                  if (*v120 == *v367)
                                  {
                                    uint64_t v394 = v467;
                                  }
                                  else
                                  {
                                    uint64_t v473 = v376;
                                    unint64_t v380 = 0;
                                    do
                                    {
                                      uint64_t v381 = *(void *)(*(void *)(v467 + 8) + 8 * v488);
                                      int v382 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v381
                                                                                                  + 24))(v381, v380);
                                      if (v382)
                                      {
                                        uint64_t v383 = v488;
                                        uint64_t v384 = *(void *)&v496[24 * v488] + 24 * v380;
                                        unint64_t v385 = (2 * v487) | 1;
                                        if (v385 == (uint64_t)(*(void *)(v384 + 8) - *(void *)v384) >> 3)
                                        {
                                          uint64_t v386 = 2 * v487;
                                          if (2 * v487 >= 1)
                                          {
                                            uint64_t v387 = 0;
                                            do
                                            {
                                              uint64_t v388 = (void *)(*(void *)(*(void *)&v496[24 * v383] + 24 * v380)
                                                              + 8 * v387);
                                              *uint64_t v388 = v388[1];
                                              ++v387;
                                            }
                                            while (v386 != v387);
                                          }
                                          sub_2484B5C7C((unsigned int **)v503, v380, v386);
                                        }
                                        else
                                        {
                                          sub_2484B5EF4((char **)v384, v385);
                                          if ((v487 & 0x8000000000000000) == 0)
                                          {
                                            uint64_t v389 = 0;
                                            do
                                              sub_2484B5C7C((unsigned int **)v503, v380, v389++);
                                            while (v389 < ((2 * v487) | 1));
                                          }
                                        }
                                        unint64_t v120 = v469;
                                        if (v382 == 2)
                                        {
                                          uint64_t v390 = 0;
                                          int v391 = v489 << v379;
                                          int v392 = v488 + 1;
                                          do
                                          {
                                            uint64_t v393 = *(void *)(v485.i64[0] + 24 * v392) + 24 * v380;
                                            *(void *)(*((void *)__p + 3 * v380) + 8 * v390) = *(void *)v393
                                                                                                + 4
                                                                                                * *(void *)(v393 + 16)
                                                                                                * (*(_DWORD *)(v393 + 8) & (v391 + (int)v390));
                                            ++v390;
                                          }
                                          while (1 << v379 != v390);
                                        }
                                      }
                                      ++v380;
                                    }
                                    while (v380 < 0xCCCCCCCCCCCCCCCDLL * ((*v120 - *v367) >> 3));
                                    uint64_t v394 = v467;
                                    uint64_t v377 = *(void *)(v467 + 8);
                                    uint64_t v375 = v500;
                                    uint64_t v353 = a3;
                                    uint64_t v376 = v473;
                                  }
                                  uint64_t v81 = (*(uint64_t (**)(void, char *, void **, void, void, void, uint64_t, uint64_t))(**(void **)(v377 + 8 * v366) + 16))(*(void *)(v377 + 8 * v366), &v496[24 * v366], &__p, *(int *)(*(void *)(v394 + 664) + 4 * v366), *(void *)(v375 + 32 * v366 + 16), *(void *)(v375 + 32 * v366), v376, v353);
                                  if (v81) {
                                    goto LABEL_387;
                                  }
                                  unint64_t v367 = v468;
                                  unint64_t v364 = *(void *)(v467 + 688);
                                }
                              }
                              if (++v366 >= v364) {
                                goto LABEL_373;
                              }
                            }
                          }
                          unint64_t v367 = v468;
LABEL_373:
                          if (*v120 != *v367)
                          {
                            uint64_t v395 = 0;
                            unint64_t v396 = 0;
                            do
                            {
                              uint64_t v397 = *(void *)(v485.i64[0]
                                               + 24
                                               * *(int *)(*(void *)(*(void *)(v467 + 616) + 24 * v364) + 4 * v396)
                                               + 24)
                                   + v395;
                              **(void **)(*(void *)&v496[24 * v364] + v395) = *(void *)v397
                                                                                + 4
                                                                                * *(void *)(v397 + 16)
                                                                                * (int)(*(_DWORD *)(v397 + 8) & v365)
                                                                                + 4 * (-v419 & (v419 >> 63));
                              ++v396;
                              v395 += 24;
                            }
                            while (v396 < 0xCCCCCCCCCCCCCCCDLL * ((*v120 - *v367) >> 3));
                          }
                          if ((v365 & 0x80000000) == 0 && v440 > v365)
                          {
                            uint64_t v398 = v431 + v365;
                            if (v431 + v365 >= 0 && v398 < v434)
                            {
                              while (1)
                              {
                                uint64_t v399 = *(void *)(v467 + 8);
                                if (v364 >= (*(void *)(v467 + 16) - v399) >> 3) {
                                  break;
                                }
                                uint64_t v401 = v423;
                                uint64_t v400 = v454;
                                if (v364 >= *(void *)(v467 + 720))
                                {
                                  uint64_t v400 = 0;
                                  uint64_t v401 = 0;
                                }
                                uint64_t v81 = (*(uint64_t (**)(void, char *, void **, void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v399 + 8 * v364) + 16))(*(void *)(v399 + 8 * v364), &v496[24 * *(void *)(v467 + 688)], &__p, 0, v457, v461 - v400, v398 - v401, v353);
                                if (v81) {
                                  goto LABEL_387;
                                }
                                ++v364;
                              }
                            }
                          }
                          int v363 = v466 + 1;
                        }
                        while (v466 + 1 != v444);
                        uint64_t v81 = 0;
                      }
LABEL_387:
                      *(void *)v503 = &__p;
                      sub_2483EA640((void ***)v503);
                      *(void *)v503 = &v496;
                      sub_2484B6000((void ***)v503);
                      sub_2484B6094((void **)&v485);
                      uint64_t v83 = v467;
                      unsigned int v119 = v468;
                    }
                    if (v500)
                    {
                      uint64_t v501 = v500;
                      operator delete((void *)v500);
                    }
                    if (v81) {
                      return v81;
                    }
                    uint64_t v156 = v416 + 1;
                    if (v416 + 1 == v413) {
                      return 0;
                    }
                  }
                }
                return 0;
              }
LABEL_120:
              BYTE5(v500) = 1;
              goto LABEL_121;
            }
          }
        }
      }
    }
  }
  return v81;
}

void sub_2484B5874(_Unwind_Exception *a1)
{
}

uint64_t sub_2484B5980(void *a1, uint64_t a2, void *a3)
{
  if (!a3[2]) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)a1[4];
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  unint64_t v9 = (v7 - *v6) >> 4;
  sub_248408C04(&__p, 1uLL);
  sub_248408C7C(v22, v9, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
  __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v7 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9;
    }
    do
    {
      **(void **)(v22[0] + v10) = *(void *)(a1[68] + 40 * a2 + 24) + *(void *)(a1[68] + 40 * a2 + 16) * v11++;
      v10 += 24;
    }
    while (v12 != v11);
  }
  if (a3[3])
  {
    unint64_t v13 = 0;
    uint64_t v14 = a1[1];
    do
    {
      uint64_t v15 = *(void *)(v14 + 8 * a1[90] - 8);
      (*(void (**)(uint64_t, void *, void, void, unint64_t))(*(void *)v15 + 72))(v15, v22, a3[2], *a3, a3[1] + v13);
      for (unint64_t i = a1[90]; ; ++i)
      {
        uint64_t v14 = a1[1];
        if (i >= (a1[2] - v14) >> 3) {
          break;
        }
        uint64_t v17 = (*(uint64_t (**)(void, void *, void **, void, void, void, unint64_t, uint64_t))(**(void **)(v14 + 8 * i) + 16))(*(void *)(v14 + 8 * i), v22, &__p, 0, a3[2], *a3, a3[1] + v13, a2);
        if (v17) {
          goto LABEL_17;
        }
      }
      ++v13;
    }
    while (v13 < a3[3]);
  }
  uint64_t v17 = 0;
LABEL_17:
  p_p = &__p;
  sub_2483EA640(&p_p);
  __p = v22;
  sub_2483EA640((void ***)&__p);
  return v17;
}

void sub_2484B5B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2484B5B94(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2483E92E8();
  }
  uint64_t v3 = 3 * a2;
  uint64_t result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void *sub_2484B5BE4(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v3 = *(const void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  int64_t v4 = v2 - *(void *)a2;
  if (v2 != *(void *)a2)
  {
    uint64_t v5 = result;
    sub_2484B5B94(result, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
    uint64_t v6 = (char *)v5[1];
    uint64_t result = memmove(v6, v3, v4);
    v5[1] = &v6[8 * (v4 >> 3)];
  }
  return result;
}

void sub_2484B5C60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_2484B5C7C(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = **a1 + a3 - *(void *)a1[1];
  int64_t v4 = a1[4];
  uint64_t v5 = *(void *)a1[3];
  uint64_t v6 = *(void *)(*(void *)a1[2] + 32 * v5 + 8);
  uint64_t v7 = *(void *)(*((void *)v4 + 74) + 32 * v5 + 24);
  if (!v6 && ((v3 & 0x80000000) != 0 || **a1 + a3 - *a1[1] >= v7))
  {
    uint64_t v6 = (int)v3;
    if (((v3 << 32) & 0x8000000000000000) != 0 || (int)v3 >= v7)
    {
      uint64_t v39 = (v3 >> 31) & 1;
      do
      {
        uint64_t v40 = ~v6;
        if (v39) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = 2 * v7;
        }
        uint64_t v6 = v41 + v40;
        uint64_t v39 = (unint64_t)v6 >> 63;
      }
      while (v6 < 0 || v6 >= v7);
    }
  }
  else
  {
    uint64_t v8 = v6 + (int)v3;
    LODWORD(v6) = ~v8 - v6 + 2 * v7;
    if (v8 < v7) {
      LODWORD(v6) = **a1 + a3 - *a1[1];
    }
  }
  uint64_t v9 = 3 * v5;
  uint64_t v10 = *(void *)(*(void *)a1[6] + 24 * *(int *)(*(void *)(*((void *)v4 + 77) + 8 * v9) + 4 * a2) + 24)
      + 24 * a2;
  *(void *)(*(void *)(*(void *)(*(void *)a1[5] + 8 * v9) + 24 * a2) + 8 * a3) = *(void *)v10
                                                                                      + 4
                                                                                      * *(void *)(v10 + 16)
                                                                                      * (int)(*(_DWORD *)(v10 + 8) & v6);
  uint64_t v11 = *(void *)a1[3];
  uint64_t v12 = *(void *)(*(void *)(*(void *)(*(void *)a1[5] + 24 * v11) + 24 * a2) + 8 * a3);
  uint64_t v13 = *(void *)(*(void *)(*((void *)v4 + 1) + 8 * v11) + 8);
  uint64_t v14 = (uint64_t *)(*(void *)a1[2] + 32 * v11);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[2];
  uint64_t v17 = *(void *)(*((void *)v4 + 74) + 32 * v11 + 16);
  if (*v14) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v13 <= 0;
  }
  int v19 = !v18;
  if (v17 <= v13)
  {
    if (v19)
    {
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = ~v29;
        LOBYTE(v31) = 1;
        do
        {
          uint64_t v32 = ~v30;
          if (v31) {
            uint64_t v33 = 0;
          }
          else {
            uint64_t v33 = 2 * v17;
          }
          uint64_t v30 = v33 + v32;
          unint64_t v31 = (unint64_t)v30 >> 63;
        }
        while (v30 < 0 || v30 >= v17);
        float result = *(float *)(v12 + 4 * v30 + 64);
        *(float *)(v12 + 4 * (15 - v29++)) = result;
      }
      while (v29 != v13);
    }
    if (v15 + v13 + v16 >= v17 && v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v35 = i + v17;
        unint64_t v36 = (unint64_t)(i + v17) >> 63;
        do
        {
          uint64_t v37 = ~v35;
          if (v36) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = 2 * v17;
          }
          uint64_t v35 = v38 + v37;
          unint64_t v36 = (unint64_t)v35 >> 63;
        }
        while (v35 < 0 || v35 >= v17);
        float result = *(float *)(v12 + 4 * (v35 - v15) + 64);
        *(float *)(v12 + 4 * (v17 - v15 + 16 + i)) = result;
      }
    }
  }
  else
  {
    if (v19)
    {
      unint64_t v20 = (float *)(v12 + 60);
      uint64_t v21 = (float *)(v12 + 64);
      uint64_t v22 = v13;
      do
      {
        float v23 = *v21++;
        float result = v23;
        *v20-- = v23;
        --v22;
      }
      while (v22);
    }
    if (v15 + v13 + v16 >= v17 && v13 >= 1)
    {
      uint64_t v25 = v12 - 4 * v15 + 4 * v17;
      uint64_t v26 = (float *)(v25 + 64);
      uint64_t v27 = (float *)(v25 + 60);
      do
      {
        float v28 = *v27--;
        float result = v28;
        *v26++ = v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void sub_2484B5EF4(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  int64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    int v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)sub_2483F04AC(v10);
  uint64_t v12 = &v11[8 * v5];
  uint64_t v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  uint64_t v15 = &v12[8 * v6];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_2484B6000(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        sub_2483EA640(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_2484B6094(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    int64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        unint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      int64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2484B6104(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  uint64_t v5 = **(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v7 = v6 - v5;
  if (v7)
  {
    if ((unint64_t)v7 >= 0x6666666666666661) {
      sub_2483E92E8();
    }
    uint64_t v11 = v7 >> 4;
    uint64_t v12 = (unint64_t *)sub_248403444(v7 >> 4);
    *a4 = v12;
    a4[2] = &v12[5 * v13];
    size_t v14 = 40 * ((40 * v11 - 40) / 0x28uLL) + 40;
    bzero(v12, v14);
    a4[1] = (unint64_t *)((char *)v12 + v14);
    uint64_t v15 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v16 - *v15;
    if (v16 != *v15)
    {
      unint64_t v19 = *(void *)(a1 + 160);
      unint64_t v20 = a2 / v19;
      uint64_t v21 = a2 / v19 * v19 - a2;
      if (*(unsigned char *)(a1 + 248)) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = a3;
      }
      unint64_t v23 = *(void *)(*(void *)(a1 + 480) + 24 * v22);
      unint64_t v24 = v18 >> 4;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      uint64_t v25 = v12 + 2;
      uint64_t v26 = (void *)(v17 + 8);
      do
      {
        unint64_t v27 = *(void *)(a1 + 504);
        unint64_t v28 = *(void *)(a1 + 512);
        unint64_t v29 = *(void *)(a1 + 208) << *(void *)(a1 + 472);
        uint64_t v30 = *(v26 - 1);
        unint64_t v31 = v29 >> v30;
        unint64_t v32 = v29 >> *v26;
        unint64_t v33 = (*(void *)(a1 + 96) + (1 << v30) - 1) / (unint64_t)(1 << v30) + v21 * v31 + v27;
        unint64_t v34 = (*(void *)(a1 + 104) + (1 << *v26) - 1) / (unint64_t)(1 << *v26) - v32 * v20 + v28;
        unint64_t v35 = v33 - v27;
        if (v33 < v27) {
          unint64_t v35 = 0;
        }
        if (v31 + v27 <= v33) {
          unint64_t v36 = v31;
        }
        else {
          unint64_t v36 = v35;
        }
        unint64_t v37 = (*(void *)(a1 + 104) + (1 << *v26) - 1) / (unint64_t)(1 << *v26) - v32 * v20;
        if (v34 < v28) {
          unint64_t v37 = 0;
        }
        if (v32 + v28 > v34) {
          unint64_t v32 = v37;
        }
        *(v25 - 2) = v23;
        *(v25 - 1) = v27;
        *uint64_t v25 = v28;
        v25[1] = v36;
        v25[2] = v32;
        v23 += 40;
        v25 += 5;
        v26 += 2;
        --v24;
      }
      while (v24);
    }
  }
}

uint64_t sub_2484B62B0(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 384);
  unint64_t v3 = a2 / v2;
  unint64_t v4 = a2 % v2++;
  unint64_t v5 = v4 + v3 * v2;
  atomic_fetch_and((atomic_uchar *volatile)(*(void *)(result + 448) + v5), 0xFBu);
  unint64_t v6 = v5 + v2;
  atomic_fetch_and((atomic_uchar *volatile)(v5 + *(void *)(result + 448) + 1), 0xF7u);
  atomic_fetch_and((atomic_uchar *volatile)(*(void *)(result + 448) + v6), 0xFDu);
  atomic_fetch_and((atomic_uchar *volatile)(v6 + *(void *)(result + 448) + 1), 0xFEu);
  return result;
}

void sub_2484B6314(uint64_t a1)
{
  sub_2484B634C(a1);

  JUMPOUT(0x24C579F90);
}

uint64_t sub_2484B634C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(void *)(a1 + 672) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 640);
  if (v3)
  {
    *(void *)(a1 + 648) = v3;
    operator delete(v3);
  }
  uint64_t v11 = (void **)(a1 + 616);
  sub_2483F87EC(&v11);
  unint64_t v4 = *(void **)(a1 + 592);
  if (v4)
  {
    *(void *)(a1 + 600) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 568);
  if (v5)
  {
    *(void *)(a1 + 576) = v5;
    operator delete(v5);
  }
  uint64_t v11 = (void **)(a1 + 544);
  sub_2483F77FC(&v11);
  unint64_t v6 = *(void ***)(a1 + 520);
  if (v6)
  {
    uint64_t v7 = *(void ***)(a1 + 528);
    uint64_t v8 = *(void **)(a1 + 520);
    if (v7 != v6)
    {
      do
      {
        v7 -= 3;
        uint64_t v11 = v7;
        sub_2484B3838(&v11);
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 520);
    }
    *(void *)(a1 + 528) = v6;
    operator delete(v8);
  }
  uint64_t v11 = (void **)(a1 + 480);
  sub_2484B3838(&v11);
  uint64_t v9 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  if (v9) {
    MEMORY[0x24C579F70](v9, 0x1000C8077774924);
  }
  uint64_t v11 = (void **)(a1 + 280);
  sub_2483F77FC(&v11);
  uint64_t v11 = (void **)(a1 + 256);
  sub_2483F77FC(&v11);

  return sub_2484B647C(a1);
}

uint64_t sub_2484B647C(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65F90;
  unint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)(a1 + 56);
  sub_2483EA640(&v4);
  unint64_t v4 = (void **)(a1 + 32);
  sub_2483EA640(&v4);
  unint64_t v4 = (void **)(a1 + 8);
  sub_2483F7884(&v4);
  return a1;
}

uint64_t sub_2484B6504()
{
  return 0;
}

void sub_2484B651C(char **a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v9 = v4 - (void)*a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_2483E9338();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    size_t v14 = &v12[8 * v11];
    uint64_t v15 = *a2;
    *a2 = 0;
    *(void *)uint64_t v13 = v15;
    uint64_t v7 = v13 + 8;
    uint64_t v16 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v13 - 1) = v18;
        v13 -= 8;
      }
      while (v17 != v16);
      uint64_t v17 = *a1;
      unint64_t v19 = a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while (v19 != v17)
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        uint64_t v20 = v21;
        *(void *)unint64_t v19 = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    *(void *)unint64_t v5 = v6;
    uint64_t v7 = v5 + 8;
  }
  a1[1] = v7;
}

void sub_2484B6658(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v18 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    uint64_t v18 = &v4[16 * v6];
LABEL_19:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_2483F3EB0(v10);
  uint64_t v12 = &v11[16 * v5];
  size_t v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[16 * v6];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_2484B6770(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)a1[1];
  uint64_t v7 = (void *)a1[2];
  while (v6 != v7)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 48))(*v6, a2);
    if (result) {
      return result;
    }
    ++v6;
  }
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40);

  return v9(a1, a2, a3);
}

uint64_t sub_2484B683C(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 248);
  if (*(void *)(a1 + 248) != *(void *)(a1 + 256)) {
    return 0;
  }
  uint64_t v4 = **(void **)(a1 + 32);
  if (*(void *)(*(void *)(a1 + 32) + 8) == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = (_DWORD *)(v4 + v5);
    unint64_t v8 = 1 << v7[2];
    sub_2483EA250((uint64_t)&v20, (*(void *)(a1 + 96) + (1 << *v7) - 1) / (unint64_t)(1 << *v7) + 32, (*(void *)(a1 + 104) + v8 - 1) / v8 + 32);
    uint64_t result = v24;
    if (v24) {
      break;
    }
    uint64_t v10 = v22;
    uint64_t v9 = v23;
    uint64_t v22 = 0;
    unint64_t v11 = *(void *)(a1 + 256);
    unint64_t v12 = *(void *)(a1 + 264);
    if (v11 >= v12)
    {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - *v1) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x666666666666666) {
        sub_2483E92E8();
      }
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v1) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x333333333333333) {
        unint64_t v17 = 0x666666666666666;
      }
      else {
        unint64_t v17 = v15;
      }
      v25[4] = a1 + 264;
      if (v17) {
        unint64_t v17 = (unint64_t)sub_248403444(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = v17 + 40 * v14;
      v25[0] = v17;
      v25[1] = v19;
      v25[3] = v17 + 40 * v18;
      *(_OWORD *)unint64_t v19 = v20;
      *(void *)(v19 + 16) = v21;
      *(void *)(v19 + 24) = v10;
      *(void *)(v19 + 32) = v9;
      v25[2] = v19 + 40;
      sub_24843F914(v1, v25);
      unint64_t v13 = *(void *)(a1 + 256);
      sub_24841F7CC((uint64_t)v25);
    }
    else
    {
      *(_OWORD *)unint64_t v11 = v20;
      *(void *)(v11 + 16) = v21;
      *(void *)(v11 + 24) = v10;
      *(void *)(v11 + 32) = v9;
      unint64_t v13 = v11 + 40;
      *(void *)(a1 + 256) = v11 + 40;
    }
    *(void *)(a1 + 256) = v13;
    ++v6;
    uint64_t v4 = **(void **)(a1 + 32);
    v5 += 16;
    if (v6 >= (*(void *)(*(void *)(a1 + 32) + 8) - v4) >> 4) {
      return 0;
    }
  }
  return result;
}

void sub_2484B6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (!v15 || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v15 - 24)), free(*(void **)(v15 - 32)), !a15))
  {
    if (a13)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
      free(*(void **)(a13 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484B6A78(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 256) - *(void *)(a1 + 248);
  if (v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v5 / 40;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
      sub_2484B7B04((unint64_t *)&v189, v3, a2, v7++);
    while (v9 != v7);
  }
  uint64_t v10 = *(unsigned __int8 **)(v3 + 224);
  unint64_t v11 = *(unsigned __int8 **)(v3 + 232);
  unint64_t v12 = v10 + 1;
  if (v10 != v11 && v12 != v11)
  {
    unsigned __int8 v14 = *v10;
    uint64_t v15 = v10 + 1;
    do
    {
      unsigned int v17 = *v15++;
      unsigned __int8 v16 = v17;
      if (v17 < v14)
      {
        unsigned __int8 v14 = v16;
        uint64_t v10 = v12;
      }
      unint64_t v12 = v15;
    }
    while (v15 != v11);
  }
  unint64_t v18 = *v10;
  unint64_t v19 = *(void *)(v3 + 272);
  if (v19 < v18)
  {
    *(void *)(v3 + 272) = v19 + 1;
    uint64_t v20 = *(void *)(v3 + 8);
    if (*(void *)(v3 + 16) != v20)
    {
      unint64_t v21 = 0;
      unint64_t v162 = (uint64x2_t *)(v3 + 80);
      uint64_t v163 = v3 + 264;
      uint64x2_t v164 = (uint64x2_t)vdupq_n_s64(0xFFFFFFFFFFFFFFE0);
      uint64_t v180 = v3;
      do
      {
        sub_24845CCAC(v195, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 256) - *(void *)(v3 + 248)) >> 3));
        uint64_t v22 = *(void *)(v3 + 256) - *(void *)(v3 + 248);
        unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3);
        if (v22)
        {
          if (v23 >> 61) {
            sub_2483E92E8();
          }
          unsigned int v24 = operator new(0x6666666666666668 * (v22 >> 3));
          bzero(v24, 8 * v23);
        }
        else
        {
          unsigned int v24 = 0;
        }
        sub_2484837E0(v194, v23);
        uint64_t v25 = *(uint32x2_t **)(v3 + 248);
        uint64_t v26 = *(void *)(v3 + 256) - (void)v25;
        if (v26)
        {
          unint64_t v27 = v26 / 40;
          unint64_t v28 = (uint64x2_t *)v194[0];
          if (v27 <= 1) {
            unint64_t v27 = 1;
          }
          do
          {
            uint32x2_t v29 = *v25;
            v25 += 5;
            *v28++ = vaddw_u32(v164, v29);
            --v27;
          }
          while (v27);
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          do
          {
            if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v20 + 8 * v21) + 24))(*(void *)(v20 + 8 * v21), v31) == 2)
            {
              sub_2483EA250((uint64_t)&v189, *(void *)(v3 + 112) + 160, *(_DWORD *)(v3 + 120) + 32);
              if (v193)
              {
                unsigned int v175 = v193;
                int v91 = 1;
                goto LABEL_102;
              }
              uint64_t v33 = v190;
              uint64_t v32 = v191;
              uint64_t v191 = 0;
              uint64_t v34 = v192;
              uint64_t v35 = v195[0] + v30;
              *(_OWORD *)uint64_t v35 = v189;
              uint64_t v36 = *(void *)(v35 + 24);
              *(void *)(v35 + 16) = v33;
              *(void *)(v35 + 24) = v32;
              if (v36)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v36 - 24));
                free(*(void **)(v36 - 32));
                LODWORD(v36) = v193;
              }
              *(void *)(v35 + 32) = v34;
              unint64_t v37 = (int32x2_t *)(v195[0] + v30);
              *unint64_t v37 = vadd_s32(vmovn_s64((int64x2_t)vshlq_u64(*((uint64x2_t *)v194[0] + v31), *(uint64x2_t *)(*(void *)(v20 + 8 * v21) + 24))), (int32x2_t)0x2000000020);
              *((void *)v24 + v31) = v37;
              if (!v36)
              {
                uint64_t v38 = v191;
                uint64_t v191 = 0;
                if (v38)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v38 - 24));
                  free(*(void **)(v38 - 32));
                }
              }
              uint64_t v3 = v180;
            }
            ++v31;
            uint64_t v40 = *(void *)(v3 + 248);
            uint64_t v39 = *(void *)(v3 + 256);
            v30 += 40;
          }
          while (v31 < 0xCCCCCCCCCCCCCCCDLL * ((v39 - v40) >> 3));
          if (v39 == v40)
          {
            unint64_t v168 = 0;
            unint64_t v169 = 0;
            unint64_t v86 = 0;
          }
          else
          {
            unint64_t v41 = 0;
            do
            {
              if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v20 + 8 * v21) + 24))(*(void *)(v20 + 8 * v21), v41) == 2)
              {
                uint64_t v42 = (uint64_t *)((char *)v194[0] + 16 * v41);
                uint64_t v43 = v42[1];
                uint64_t v44 = *(void *)(v20 + 8 * v21);
                if (v43)
                {
                  uint64_t v45 = 0;
                  uint64_t v47 = *(void *)(*v4 + 40 * v41 + 16);
                  uint64_t v46 = *(void *)(*v4 + 40 * v41 + 24);
                  uint64_t v48 = *(void *)(v44 + 8);
                  do
                  {
                    if (v48)
                    {
                      uint64_t v49 = 0;
                      uint64_t v50 = v46 + v47 * (v45 + 16);
                      uint64_t v51 = v50 + 64;
                      uint64_t v52 = v50 + 60;
                      uint64_t v53 = *v42;
                      uint64_t v54 = 2 * *v42;
                      do
                      {
                        uint64_t v55 = ~v49;
                        if ((v49 & 0x8000000000000000) == 0 || v53 <= v55)
                        {
                          LOBYTE(v56) = v49 >= 0;
                          do
                          {
                            uint64_t v57 = ~v55;
                            if (v56) {
                              uint64_t v58 = 0;
                            }
                            else {
                              uint64_t v58 = v54;
                            }
                            uint64_t v55 = v58 + v57;
                            unint64_t v56 = (unint64_t)v55 >> 63;
                          }
                          while (v55 < 0 || v55 >= v53);
                        }
                        *(_DWORD *)(v52 - 4 * v49++) = *(_DWORD *)(v51 + 4 * v55);
                      }
                      while (v49 != v48);
                      for (uint64_t i = 0; i != v48; ++i)
                      {
                        uint64_t v60 = v53 + i;
                        if (v53 + i < 0 || v60 >= v53)
                        {
                          unint64_t v61 = (unint64_t)v60 >> 63;
                          do
                          {
                            uint64_t v62 = ~v60;
                            if (v61) {
                              uint64_t v63 = 0;
                            }
                            else {
                              uint64_t v63 = v54;
                            }
                            uint64_t v60 = v63 + v62;
                            unint64_t v61 = (unint64_t)v60 >> 63;
                          }
                          while (v60 < 0 || v60 >= v53);
                        }
                        *(_DWORD *)(v51 + 4 * v53 + 4 * i) = *(_DWORD *)(v51 + 4 * v60);
                      }
                    }
                    ++v45;
                  }
                  while (v45 != v43);
                }
                if (*(int *)(v44 + 16) >= 1)
                {
                  uint64_t v64 = 0;
                  do
                  {
                    uint64_t v67 = *(void *)(v44 + 8);
                    uint64_t v68 = ~v64;
                    uint64_t v69 = *((void *)v194[0] + 2 * v41 + 1);
                    LOBYTE(v70) = 1;
                    do
                    {
                      uint64_t v71 = ~v68;
                      if (v70) {
                        uint64_t v72 = 0;
                      }
                      else {
                        uint64_t v72 = 2 * v69;
                      }
                      uint64_t v68 = v72 + v71;
                      unint64_t v70 = (unint64_t)v68 >> 63;
                    }
                    while (v68 < 0 || v68 >= v69);
                    uint64_t v65 = *(void *)(*v4 + 40 * v41 + 24);
                    uint64_t v66 = *(void *)(*v4 + 40 * v41 + 16);
                    memcpy((void *)(v65 + v66 * (15 - v64++) - 4 * v67 + 64), (const void *)(v65 + (v68 + 16) * v66 - 4 * v67 + 64), 4 * *((void *)v194[0] + 2 * v41) + 8 * v67);
                    uint64_t v44 = *(void *)(v20 + 8 * v21);
                    uint64_t v73 = *(void *)(v44 + 16);
                  }
                  while (v64 < (int)v73);
                  if ((int)v73 >= 1)
                  {
                    uint64_t v74 = 0;
                    do
                    {
                      uint64_t v75 = (char *)v194[0] + 16 * v41;
                      uint64_t v76 = v75[1];
                      uint64_t v77 = *v4 + 40 * v41;
                      uint64_t v78 = v76 + v74;
                      uint64_t v79 = *(void *)(v77 + 16);
                      if (v76 + v74 < 0 || (uint64_t v80 = v79 * (v76 + v74 + 16), v78 >= v76))
                      {
                        unint64_t v81 = (unint64_t)v78 >> 63;
                        do
                        {
                          uint64_t v82 = ~v78;
                          if (v81) {
                            uint64_t v83 = 0;
                          }
                          else {
                            uint64_t v83 = 2 * v76;
                          }
                          uint64_t v78 = v83 + v82;
                          unint64_t v81 = (unint64_t)v78 >> 63;
                        }
                        while (v78 < 0 || v78 >= v76);
                        uint64_t v80 = (v78 + 16) * v79;
                      }
                      memcpy((void *)(*(void *)(v77 + 24) + v79 * (v76 + v74++ + 16) + 64 - 4 * *(void *)(v44 + 8)), (const void *)(*(void *)(v77 + 24) + v80 - 4 * *(void *)(v44 + 8) + 64), 4 * *v75 + 8 * *(void *)(v44 + 8));
                      uint64_t v44 = *(void *)(v20 + 8 * v21);
                    }
                    while (v74 < *(int *)(v44 + 16));
                  }
                }
              }
              ++v41;
              uint64_t v85 = *(void *)(v3 + 248);
              uint64_t v84 = *(void *)(v3 + 256);
              unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * ((v84 - v85) >> 3);
            }
            while (v41 < v86);
            if (v84 == v85)
            {
              unint64_t v168 = 0;
              unint64_t v169 = 0;
            }
            else
            {
              uint64_t v87 = 0;
              unint64_t v88 = 0;
              unint64_t v168 = 0;
              unint64_t v169 = 0;
              do
              {
                if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v20 + 8 * v21) + 24))(*(void *)(v20 + 8 * v21), v88))
                {
                  unint64_t v89 = v169;
                  if (*(void *)((char *)v194[0] + v87 + 8) > v169) {
                    unint64_t v89 = *(void *)((char *)v194[0] + v87 + 8);
                  }
                  unint64_t v90 = v168;
                  if (*(void *)((char *)v194[0] + v87) > v168) {
                    unint64_t v90 = *(void *)((char *)v194[0] + v87);
                  }
                  unint64_t v168 = v90;
                  unint64_t v169 = v89;
                }
                ++v88;
                unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 256) - *(void *)(v3 + 248)) >> 3);
                v87 += 16;
              }
              while (v88 < v86);
            }
          }
        }
        else
        {
          unint64_t v168 = 0;
          unint64_t v169 = 0;
          unint64_t v86 = 0;
        }
        sub_2484B7BC8(v188, v86);
        sub_2484B7BC8(v187, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 256) - *(void *)(v3 + 248)) >> 3));
        unsigned int v92 = (*(uint64_t (**)(void, void **))(**(void **)(v20 + 8 * v21) + 40))(*(void *)(v20 + 8 * v21), v194);
        if (v92)
        {
          unsigned int v175 = v92;
        }
        else
        {
          if (v169)
          {
            uint64_t v93 = 0;
            uint64_t v94 = *(void *)(*(void *)(v20 + 8 * v21) + 16);
            BOOL v167 = 1;
            int v176 = v94;
            unint64_t v177 = (int)((2 * v94) | 1);
            uint64_t v173 = -*(_DWORD *)(*(void *)(v20 + 8 * v21) + 16);
            if ((int)v94 >= 0) {
              int v95 = *(void *)(*(void *)(v20 + 8 * v21) + 16);
            }
            else {
              int v95 = -(int)v94;
            }
            int v171 = v95 + v94 + 1;
            uint64_t v96 = 8 * (int)v94;
            while (1)
            {
              if (*(void *)(v3 + 256) != *(void *)(v3 + 248))
              {
                unint64_t v97 = 0;
                do
                {
                  if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v20 + 8 * v21) + 24))(*(void *)(v20 + 8 * v21), v97))
                  {
                    sub_2484B5EF4((char **)(v188[0] + 24 * v97), v177);
                    if ((v176 & 0x80000000) == 0)
                    {
                      int v98 = v171;
                      uint64_t v99 = v173;
                      do
                      {
                        *(void *)(*(void *)(v188[0] + 24 * v97) + v96 + 8 * v99) = *(void *)(*v4 + 40 * v97 + 24)
                                                                                     + *(void *)(*v4 + 40 * v97 + 16)
                                                                                     * (v93 + v99 + 16);
                        ++v99;
                        --v98;
                      }
                      while (v98);
                    }
                  }
                  ++v97;
                  uint64_t v101 = *(void *)(v3 + 248);
                  uint64_t v100 = *(void *)(v3 + 256);
                }
                while (v97 < 0xCCCCCCCCCCCCCCCDLL * ((v100 - v101) >> 3));
                if (v100 != v101)
                {
                  unint64_t v102 = 0;
                  do
                  {
                    if (*((void *)v24 + v102))
                    {
                      sub_2484B5EF4((char **)(v187[0] + 24 * v102), 1 << *(_DWORD *)(*(void *)(v20 + 8 * v21) + 32));
                      uint64_t v103 = *(void *)(v187[0] + 24 * v102);
                      if (*(void *)(v187[0] + 24 * v102 + 8) != v103)
                      {
                        unint64_t v104 = 0;
                        do
                        {
                          *(void *)(v103 + 8 * v104) = *(void *)(*((void *)v24 + v102) + 24)
                                                       + *(void *)(*((void *)v24 + v102) + 16)
                                                       * (v104
                                                        + (v93 << *(void *)(*(void *)(v20 + 8 * v21) + 32))
                                                        + 16);
                          ++v104;
                          uint64_t v103 = *(void *)(v187[0] + 24 * v102);
                        }
                        while (v104 < (*(void *)(v187[0] + 24 * v102 + 8) - v103) >> 3);
                      }
                    }
                    ++v102;
                  }
                  while (v102 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 256) - *(void *)(v3 + 248)) >> 3));
                }
              }
              unsigned int v105 = (*(uint64_t (**)(void, void *, void *, void, unint64_t, void, uint64_t, uint64_t))(**(void **)(v20 + 8 * v21) + 16))(*(void *)(v20 + 8 * v21), v188, v187, 0, v168, 0, v93, a3);
              if (v105) {
                break;
              }
              BOOL v167 = ++v93 < v169;
              if (v93 == v169)
              {
                unsigned int v175 = 0;
                int v91 = 0;
                goto LABEL_133;
              }
            }
            unsigned int v175 = v105;
            int v91 = 1;
LABEL_133:
            if (v167) {
              goto LABEL_101;
            }
          }
          else
          {
            unsigned int v175 = 0;
          }
          uint64_t v106 = *(void *)(v3 + 256);
          if (v106 == *(void *)(v3 + 248))
          {
            unint64_t v114 = 0;
          }
          else
          {
            uint64_t v107 = 0;
            unint64_t v108 = 0;
            do
            {
              if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v20 + 8 * v21) + 24))(*(void *)(v20 + 8 * v21), v108) == 2)
              {
                uint64_t v109 = v195[0] + v107;
                uint64_t v110 = *v4 + v107;
                long long v111 = *(_OWORD *)(v195[0] + v107);
                *(void *)(v110 + 16) = *(void *)(v195[0] + v107 + 16);
                *(_OWORD *)uint64_t v110 = v111;
                uint64_t v112 = *(void *)(v109 + 24);
                *(void *)(v109 + 24) = 0;
                uint64_t v113 = *(void *)(v110 + 24);
                *(void *)(v110 + 24) = v112;
                if (v113)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v113 - 24));
                  free(*(void **)(v113 - 32));
                }
                *(void *)(v110 + 32) = *(void *)(v109 + 32);
                uint64_t v3 = v180;
              }
              ++v108;
              uint64_t v106 = *(void *)(v3 + 248);
              unint64_t v114 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v3 + 256) - v106) >> 3);
              v107 += 40;
            }
            while (v108 < v114);
          }
          if (v114)
          {
            uint64_t v115 = *(void *)(v3 + 32);
            if (-1 - 0x5555555555555555 * ((*(void *)(v3 + 40) - v115) >> 3) >= v21 + 1) {
              uint64_t v116 = v21 + 1;
            }
            else {
              uint64_t v116 = -1 - 0x5555555555555555 * ((*(void *)(v3 + 40) - v115) >> 3);
            }
            uint64_t v117 = *(void *)(v115 + 24 * v116);
            uint64_t v118 = *(void *)(v3 + 96) - 1;
            uint64_t v119 = *(void *)(v3 + 104) - 1;
            unint64_t v120 = (_DWORD *)(v106 + 4);
            unint64_t v121 = (int *)(v117 + 8);
            do
            {
              unint64_t v122 = (v118 + (1 << *(v121 - 2))) / (unint64_t)(1 << *(v121 - 2));
              int v123 = *v121;
              v121 += 4;
              *(v120 - 1) = v122 + 32;
              _DWORD *v120 = (v119 + (1 << v123)) / (unint64_t)(1 << v123) + 32;
              v120 += 10;
              --v114;
            }
            while (v114);
          }
          if (!(*(unsigned int (**)(void))(**(void **)(v20 + 8 * v21) + 56))(*(void *)(v20 + 8 * v21)))
          {
            int v91 = 0;
            goto LABEL_101;
          }
          unint64_t v185 = 0;
          unint64_t v186 = 0;
          (*(void (**)(void, unint64_t *, unint64_t *, int *))(**(void **)(v20 + 8 * v21)
                                                                                        + 64))(*(void *)(v20 + 8 * v21), &v186, &v185, &v183);
          sub_24840383C(v162, v186, v185, 0, 0, 0, 0, 1uLL);
          uint64_t v181 = *(void *)(v3 + 248);
          long long v182 = *(_OWORD *)(v3 + 256);
          unint64_t v124 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v182 - v181) >> 3);
          v4[1] = 0;
          v4[2] = 0;
          *uint64_t v4 = 0;
          sub_24844C760(v4, v124);
          if ((void)v182 == v181)
          {
LABEL_167:
            unint64_t v137 = v185;
            if (v185)
            {
              uint64_t v138 = 0;
              do
              {
                uint64_t v178 = v138;
                if (*(void *)(v3 + 256) != *(void *)(v3 + 248))
                {
                  uint64_t v139 = 0;
                  uint64_t v140 = 0;
                  unint64_t v141 = 0;
                  do
                  {
                    sub_2484B5EF4((char **)(v187[0] + v140), 1uLL);
                    **(void **)(v187[0] + v140) = *(void *)(*(void *)(v180 + 248) + v139 + 24)
                                                  + *(void *)(*(void *)(v180 + 248) + v139 + 16) * (v178 + 16);
                    ++v141;
                    v140 += 24;
                    v139 += 40;
                  }
                  while (v141 < 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(void *)(v180 + 256) - *(void *)(v180 + 248)) >> 3));
                }
                (*(void (**)(void, void *, unint64_t, void, uint64_t))(**(void **)(v20 + 8 * v21)
                                                                                            + 72))(*(void *)(v20 + 8 * v21), v187, v186, 0, v178);
                uint64_t v138 = v178 + 1;
                unint64_t v137 = v185;
                uint64_t v3 = v180;
              }
              while (v178 + 1 < v185);
            }
            uint64_t v142 = v183 & ~(v183 >> 31);
            uint64_t v143 = v184 & ~(v184 >> 31);
            if (v169 + (v184 & (v184 >> 31)) + v143 <= v137) {
              unint64_t v144 = v169 + (v184 & (v184 >> 31));
            }
            else {
              unint64_t v144 = v137 - v143;
            }
            if (v183 >= 0) {
              uint64_t v145 = 16;
            }
            else {
              uint64_t v145 = 16 - v183;
            }
            if (v184 >= 0) {
              uint64_t v146 = 16;
            }
            else {
              uint64_t v146 = 16 - v142;
            }
            uint64_t v147 = *(void *)(v3 + 248);
            uint64_t v148 = *(void *)(v3 + 256);
            if (v148 != v147)
            {
              unint64_t v149 = 0;
              unint64_t v150 = v168 + (v183 & (v183 >> 31));
              if (v150 + v142 > v186) {
                unint64_t v150 = v186 - v142;
              }
              if (v150) {
                BOOL v151 = v144 == 0;
              }
              else {
                BOOL v151 = 1;
              }
              char v152 = v151;
              size_t v153 = 4 * v150;
              uint64_t v154 = 4 * v142 + 64;
              uint64_t v170 = v143 + 16;
              uint64_t v165 = v24;
              char v172 = v152;
              do
              {
                if ((v152 & 1) == 0)
                {
                  unint64_t v155 = 0;
                  unint64_t v174 = v149;
                  uint64_t v156 = v147 + 40 * v149;
                  uint64_t v157 = v181 + 40 * v149;
                  uint64_t v179 = *(void *)(v156 + 16);
                  uint64_t v158 = *(void *)(v156 + 24) + v170 * v179;
                  do
                  {
                    uint64_t v159 = v145;
                    uint64_t v160 = v146;
                    memcpy((void *)(v158 + v154), (const void *)(*(void *)(v157 + 24) + *(void *)(v157 + 16) * (v146 + v155) + 4 * v145), v153);
                    uint64_t v146 = v160;
                    uint64_t v145 = v159;
                    ++v155;
                    v158 += v179;
                  }
                  while (v155 < v144);
                  uint64_t v3 = v180;
                  uint64_t v147 = *(void *)(v180 + 248);
                  uint64_t v148 = *(void *)(v180 + 256);
                  unsigned int v24 = v165;
                  unint64_t v149 = v174;
                  char v152 = v172;
                }
                ++v149;
              }
              while (v149 < 0xCCCCCCCCCCCCCCCDLL * ((v148 - v147) >> 3));
            }
            *(void *)&long long v189 = &v181;
            sub_2483F77FC((void ***)&v189);
            int v91 = 0;
            goto LABEL_101;
          }
          uint64_t v125 = 0;
          while (1)
          {
            sub_2483EA250((uint64_t)&v189, v186 + 32, v185 + 32);
            if (v193) {
              break;
            }
            uint64_t v126 = v191;
            uint64_t v127 = v192;
            uint64_t v191 = 0;
            unint64_t v128 = *(void *)(v3 + 256);
            unint64_t v129 = *(void *)(v3 + 264);
            if (v128 >= v129)
            {
              unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v128 - *v4) >> 3);
              unint64_t v132 = v131 + 1;
              if (v131 + 1 > 0x666666666666666) {
                sub_2483E92E8();
              }
              unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v129 - *v4) >> 3);
              if (2 * v133 > v132) {
                unint64_t v132 = 2 * v133;
              }
              if (v133 >= 0x333333333333333) {
                unint64_t v134 = 0x666666666666666;
              }
              else {
                unint64_t v134 = v132;
              }
              v196[4] = v163;
              if (v134) {
                unint64_t v134 = (unint64_t)sub_248403444(v134);
              }
              else {
                uint64_t v135 = 0;
              }
              unint64_t v136 = v134 + 40 * v131;
              v196[0] = v134;
              v196[1] = v136;
              v196[3] = v134 + 40 * v135;
              *(_OWORD *)unint64_t v136 = v189;
              *(void *)(v136 + 16) = v190;
              *(void *)(v136 + 24) = v126;
              *(void *)(v136 + 32) = v127;
              v196[2] = v136 + 40;
              sub_24843F914(v4, v196);
              uint64_t v3 = v180;
              unint64_t v130 = *(void *)(v180 + 256);
              sub_24841F7CC((uint64_t)v196);
            }
            else
            {
              *(_OWORD *)unint64_t v128 = v189;
              *(void *)(v128 + 16) = v190;
              *(void *)(v128 + 24) = v126;
              *(void *)(v128 + 32) = v127;
              unint64_t v130 = v128 + 40;
              *(void *)(v3 + 256) = v128 + 40;
            }
            *(void *)(v3 + 256) = v130;
            if (++v125 >= 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v182 - v181) >> 3))
            {
              unsigned int v175 = 0;
              goto LABEL_167;
            }
          }
          unsigned int v175 = v193;
          *(void *)&long long v189 = &v181;
          sub_2483F77FC((void ***)&v189);
        }
        int v91 = 1;
LABEL_101:
        *(void *)&long long v189 = v187;
        sub_2483EA640((void ***)&v189);
        *(void *)&long long v189 = v188;
        sub_2483EA640((void ***)&v189);
LABEL_102:
        if (v194[0])
        {
          v194[1] = v194[0];
          operator delete(v194[0]);
        }
        if (v24) {
          operator delete(v24);
        }
        *(void *)&long long v189 = v195;
        sub_2483F77FC((void ***)&v189);
        if (v91) {
          return v175;
        }
        ++v21;
        uint64_t v20 = *(void *)(v3 + 8);
      }
      while (v21 < (*(void *)(v3 + 16) - v20) >> 3);
    }
  }
  return 0;
}

void sub_2484B79E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = (void **)&a23;
  sub_2483F77FC(&a35);
  a35 = (void **)&a29;
  sub_2483EA640(&a35);
  a35 = (void **)&a32;
  sub_2483EA640(&a35);
  uint64_t v38 = *(void **)(v36 - 192);
  if (v38)
  {
    *(void *)(v36 - 184) = v38;
    operator delete(v38);
  }
  if (v35) {
    operator delete(v35);
  }
  a35 = (void **)(v36 - 168);
  sub_2483F77FC(&a35);
  _Unwind_Resume(a1);
}

unint64_t *sub_2484B7B04(unint64_t *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 112) / *(void *)(a2 + 128);
  unint64_t v5 = __clz(v4) ^ 0x3F;
  if ((v4 & (v4 - 1)) != 0) {
    char v6 = v5 + 1;
  }
  else {
    char v6 = v5;
  }
  unint64_t v7 = *(void *)(a2 + 160);
  unint64_t v8 = a3 / v7;
  unint64_t v9 = *(void *)(a2 + 208) << v6;
  uint64_t v10 = (uint64_t *)(**(void **)(a2 + 32) + 16 * a4);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  unint64_t v13 = v9 >> v12;
  unint64_t v14 = v9 >> v11;
  unint64_t v15 = v13 * (a3 % v7) + 16;
  unint64_t v16 = v14 * v8 + 16;
  unint64_t v17 = (*(void *)(a2 + 96) + (1 << v12) - 1) / (unint64_t)(1 << v12) + 16;
  unint64_t v18 = (*(void *)(a2 + 104) + (1 << v11) - 1) / (unint64_t)(1 << v11) + 16;
  *uint64_t result = v15;
  result[1] = v16;
  unint64_t v19 = v15 + v13;
  BOOL v20 = v17 >= v15;
  unint64_t v21 = v17 - v15;
  if (!v20) {
    unint64_t v21 = 0;
  }
  if (v19 <= v17) {
    unint64_t v21 = v13;
  }
  unint64_t v22 = v16 + v14;
  BOOL v20 = v18 >= v16;
  unint64_t v23 = v18 - v16;
  if (!v20) {
    unint64_t v23 = 0;
  }
  if (v22 > v18) {
    unint64_t v14 = v23;
  }
  result[2] = v21;
  result[3] = v14;
  return result;
}

void *sub_2484B7BC8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_248409DAC(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2484B7C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2484B7C6C(uint64_t a1@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a1 + 248);
  if (*(void *)(a1 + 256) != v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v4 + 40 * v9;
      sub_2484B7B04((unint64_t *)&v23, a1, a2, v9);
      uint64_t v11 = a3[2];
      if (v8 >= v11)
      {
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v8 - v7) >> 3) + 1;
        if (v13 > 0x666666666666666) {
          sub_2483E92E8();
        }
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v11 - v7) >> 3);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x333333333333333) {
          unint64_t v15 = 0x666666666666666;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)sub_248403444(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
        *(void *)unint64_t v17 = v10;
        long long v18 = v24;
        *(_OWORD *)(v17 + 8) = v23;
        *(_OWORD *)(v17 + 24) = v18;
        unint64_t v19 = *a3;
        if (v8 == *a3)
        {
          unint64_t v7 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
        }
        else
        {
          unint64_t v20 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
          do
          {
            unint64_t v7 = v20 - 40;
            long long v21 = *(_OWORD *)(v8 - 5);
            long long v22 = *(_OWORD *)(v8 - 3);
            *(void *)(v20 - 8) = *(v8 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            v8 -= 5;
            v20 -= 40;
          }
          while (v8 != v19);
        }
        unint64_t v8 = (void *)(v17 + 40);
        *a3 = (void *)v7;
        a3[1] = (void *)(v17 + 40);
        a3[2] = (void *)(v15 + 40 * v16);
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unint64_t v8 = v10;
        long long v12 = v23;
        *(_OWORD *)(v8 + 3) = v24;
        *(_OWORD *)(v8 + 1) = v12;
        v8 += 5;
      }
      a3[1] = v8;
      ++v9;
      uint64_t v4 = *(void *)(a1 + 248);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 256) - v4) >> 3));
  }
}

void sub_2484B7E1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484B7E3C(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66108;
  unint64_t v2 = (void **)(a1 + 248);
  sub_2483F77FC(&v2);
  sub_2484B647C(a1);

  JUMPOUT(0x24C579F90);
}

uint64_t sub_2484B7EB8(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66108;
  uint64_t v3 = (void **)(a1 + 248);
  sub_2483F77FC(&v3);

  return sub_2484B647C(a1);
}

const char *sub_2484B7F20()
{
  return "Blending";
}

void sub_2484B7F2C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[12];
  size_t v10 = 4 * a3;
  if ((*(_DWORD *)(v9 + 96) || (unint64_t v13 = *(_DWORD **)(v9 + 416), v13 != *(_DWORD **)(v9 + 424)) && *v13)
    && (*(_DWORD *)(v9 + 100) || (uint64_t v14 = *(void *)(v9 + 416), v14 != *(void *)(v9 + 424)) && *(_DWORD *)(v14 + 4)))
  {
    uint64_t v11 = 0;
    for (uint64_t i = 120; i != 240; i += 40)
    {
      memcpy((void *)(*(void *)(*(void *)(*a2 + v11) + 8 * a1[2]) + 64), (const void *)(*(void *)(a1[12] + i) + *(void *)(a1[12] + 112) * a5 + 4 * a4), v10);
      v11 += 24;
    }
  }
  else
  {
    for (uint64_t j = 0; j != 72; j += 24)
      bzero((void *)(*(void *)(*(void *)(*a2 + j) + 8 * a1[2]) + 64), v10);
  }
  if (*(void *)(a1[19] + 8) != *(void *)a1[19])
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 72;
    do
    {
      uint64_t v19 = a1[6] + 456 * *(unsigned int *)(*(void *)(a1[5] + 344) + v16 + 20);
      uint64_t v20 = v19 + 2376;
      if ((*(_DWORD *)(v19 + 2472) || (long long v22 = *(_DWORD **)(v19 + 2792), v22 != *(_DWORD **)(v20 + 424)) && *v22)
        && ((uint64_t v21 = *(void *)(v20 + 416), *(_DWORD *)(v20 + 100))
         || v21 != *(void *)(v20 + 424) && *(_DWORD *)(v21 + 4)))
      {
        memcpy((void *)(*(void *)(*(void *)(*a2 + v18) + 8 * a1[2]) + 64), (const void *)(*(void *)(v21 + v16 + 24) + *(void *)(v21 + v16 + 16) * a5 + 4 * a4), v10);
      }
      else
      {
        bzero((void *)(*(void *)(*(void *)(*a2 + v18) + 8 * a1[2]) + 64), v10);
      }
      ++v17;
      v16 += 40;
      v18 += 24;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1[19] + 8) - *(void *)a1[19]) >> 5));
  }
}

void *sub_2484B8128(void *result, void *a2, void *a3, void *a4)
{
  *a2 = result[14];
  *a3 = result[15];
  *a4 = *(void *)(result[5] + 296);
  return result;
}

uint64_t sub_2484B8148()
{
  return 1;
}

uint64_t sub_2484B8150()
{
  return 0;
}

uint64_t sub_2484B8158()
{
  return 0;
}

uint64_t sub_2484B8160(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_2484B8168()
{
  return 1;
}

uint64_t sub_2484B8170(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 40);
  int64_t v8 = *(int *)(v7 + 296);
  uint64_t v9 = v8 + a6;
  uint64_t v10 = v8 + a6 + a5;
  if (v10 < 1) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 112);
  if ((uint64_t)v13 <= v8) {
    return v12;
  }
  uint64_t v14 = *(int *)(v7 + 300) + a7;
  if (v14 < 0) {
    return v12;
  }
  if (v14 >= *(void *)(a1 + 120)) {
    return 0;
  }
  uint64_t v16 = v9 & ~(v9 >> 63);
  if (v9 >= 0) {
    uint64_t v10 = a5;
  }
  if (v10 + v16 <= v13) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = (v13 - v16) & ~((uint64_t)(v13 - v16) >> 63);
  }
  sub_24840F00C(v35, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  sub_248408C04(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v19 = *(uint64_t **)(a1 + 152);
  if (0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 5) + 3 < v18) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 5) + 3;
  }
  if (v18)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v23 = *(void *)(a1 + 16);
    while (1)
    {
      *((void *)__p[0] + v22) = *(void *)(*(void *)(*a2 + v20) + 8 * v23) + 4 * ((v9 >> 63) & -(int)v9) + 64;
      if (v22 > 2)
      {
        uint64_t v26 = *(void *)(a1 + 48) + 456 * *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 344) + v21 - 100);
        uint64_t v27 = v26 + 2376;
        if (!*(_DWORD *)(v26 + 2472) && ((unint64_t v31 = *(_DWORD **)(v26 + 2792), v31 == *(_DWORD **)(v27 + 424)) || !*v31)
          || (uint64_t v28 = *(void *)(v27 + 416), !*(_DWORD *)(v27 + 100))
          && (v28 == *(void *)(v27 + 424) || !*(_DWORD *)(v28 + 4)))
        {
LABEL_33:
          uint64_t v29 = *(void *)(a1 + 160);
          goto LABEL_34;
        }
        uint64_t v25 = *(void *)(v28 + v21 - 96) + *(void *)(v28 + v21 - 104) * v14;
      }
      else
      {
        uint64_t v24 = *(void *)(a1 + 96);
        if (!*(_DWORD *)(v24 + 96))
        {
          uint64_t v30 = *(_DWORD **)(v24 + 416);
          if (v30 == *(_DWORD **)(v24 + 424) || !*v30) {
            goto LABEL_33;
          }
        }
        if (!*(_DWORD *)(v24 + 100))
        {
          uint64_t v32 = *(void *)(v24 + 416);
          if (v32 == *(void *)(v24 + 424) || !*(_DWORD *)(v32 + 4)) {
            goto LABEL_33;
          }
        }
        uint64_t v25 = *(void *)(v24 + v21 + 120) + *(void *)(v24 + 112) * v14;
      }
      uint64_t v29 = v25 + 4 * v16;
LABEL_34:
      *((void *)v35[0] + v22++) = v29;
      v21 += 40;
      v20 += 24;
      if (v18 == v22)
      {
        uint64_t v19 = *(uint64_t **)(a1 + 152);
        break;
      }
    }
  }
  uint64_t v12 = sub_2483E9B38((void *)v35[0], (void *)__p[0], (void *)__p[0], 0, v17, *(unsigned __int8 **)(a1 + 128), *(void *)(a1 + 128) + 12, v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  return v12;
}

void sub_2484B83FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484B8430(void *a1)
{
  *a1 = &unk_26FC663A8;
  unint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_2484B84B0(void *a1)
{
  *a1 = &unk_26FC663A8;
  unint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  return a1;
}

const char *sub_2484B8510()
{
  return "VChromaUps";
}

uint64_t sub_2484B8524()
{
  return 0;
}

uint64_t sub_2484B852C()
{
  return 0;
}

uint64_t sub_2484B8534(uint64_t a1, uint64_t a2)
{
  return 2 * (*(void *)(a1 + 40) == a2);
}

uint64_t sub_2484B8548(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v6 = -(uint64_t)v5;
  uint64_t v7 = v5 + a5;
  if (v7 > v6)
  {
    int64_t v8 = (uint64_t *)(*(void *)(*a2 + 24 * *(void *)(a1 + 40)) + 8 * *(void *)(a1 + 16));
    uint64_t v10 = *(v8 - 1);
    uint64_t v9 = *v8;
    uint64_t v11 = *(void **)(*a3 + 24 * *(void *)(a1 + 40));
    unint64_t v12 = 64 - 16 * ((unint64_t)(a4 + 3) >> 2);
    unint64_t v13 = (float32x4_t *)(v11[1] + v12);
    uint64_t v14 = (float32x4_t *)(*v11 + v12);
    unint64_t v15 = (float32x4_t *)(v8[1] + v12);
    uint64_t v16 = (float32x4_t *)(v9 + v12);
    uint64_t v17 = (float32x4_t *)(v10 + v12);
    __asm
    {
      FMOV            V0.4S, #0.75
      FMOV            V1.4S, #0.25
    }
    do
    {
      float32x4_t v24 = *v17++;
      float32x4_t v25 = v24;
      float32x4_t v26 = *v16++;
      float32x4_t v27 = v26;
      float32x4_t v28 = *v15++;
      float32x4_t v29 = vmulq_f32(v27, _Q0);
      *v14++ = vmlaq_f32(v29, _Q1, v25);
      *v13++ = vmlaq_f32(v29, _Q1, v28);
      v6 += 4;
    }
    while (v6 < v7);
  }
  return 0;
}

void sub_2484B85EC()
{
}

const char *sub_2484B8604()
{
  return "HChromaUps";
}

uint64_t sub_2484B8610(uint64_t a1, uint64_t a2)
{
  return 2 * (*(void *)(a1 + 40) == a2);
}

uint64_t sub_2484B8624(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4 + 3;
  unint64_t v6 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v7 = -(uint64_t)v6;
  uint64_t v8 = v6 + a5;
  if (v8 > v7)
  {
    unint64_t v9 = v5 >> 2;
    uint64_t v10 = (float32x4_t *)(*(void *)(*(void *)(*a2 + 24 * *(void *)(a1 + 40)) + 8 * *(void *)(a1 + 16))
                        - 16 * (v5 >> 2)
                        + 68);
    uint64_t v11 = (int32x4_t *)(**(void **)(*a3 + 24 * *(void *)(a1 + 40)) - 32 * v9 + 80);
    __asm
    {
      FMOV            V0.4S, #0.75
      FMOV            V1.4S, #0.25
    }
    do
    {
      float32x4_t v18 = vmulq_f32(*(float32x4_t *)((char *)v10 - 4), _Q0);
      float32x4_t v19 = *(float32x4_t *)((char *)v10 - 8);
      float32x4_t v20 = *v10++;
      float32x2x2_t v21 = (float32x2x2_t)vmlaq_f32(v18, _Q1, v19);
      int32x4_t v22 = (int32x4_t)vmlaq_f32(v18, _Q1, v20);
      i32 = (float *)v11[-1].i32;
      vst2_f32(i32, v21);
      *uint64_t v11 = vzip2q_s32((int32x4_t)v21, v22);
      v11 += 2;
      v7 += 4;
    }
    while (v7 < v8);
  }
  return 0;
}

void sub_2484B86BC()
{
}

const char *sub_2484B86D4()
{
  return "EPF0";
}

uint64_t sub_2484B86E0(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

uint64_t sub_2484B86F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = 0;
  v77[12] = *MEMORY[0x263EF8340];
  v77[0] = &v65;
  v77[1] = &v64;
  v77[2] = &v63;
  v77[3] = &v62;
  v77[4] = &v61;
  v77[5] = &v60;
  v77[6] = &v59;
  v77[7] = &v58;
  v77[8] = &v57;
  v77[9] = &v56;
  v77[10] = &v55;
  v77[11] = &v54;
  uint64_t v8 = *(void *)(*(void *)(a1 + 184) + 24) + *(void *)(*(void *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  v9.i32[1] = 1073374822;
  double v10 = *(float *)(a1 + 148) * 1.65;
  *(float *)&double v10 = v10;
  *(float *)v9.i32 = *(float *)(a1 + 156) * *(float *)&v10;
  int32x4_t v73 = vdupq_lane_s32(*(int32x2_t *)&v10, 0);
  __int32 v72 = v9.i32[0];
  int v74 = LODWORD(v10);
  int v75 = LODWORD(v10);
  __int32 v76 = v9.i32[0];
  v71[0] = vdupq_lane_s32(v9, 0);
  v71[1] = v71[0];
  uint64_t v11 = *a2;
  uint64_t v12 = 8 * *(void *)(a1 + 16) - 24;
  unint64_t v13 = v69;
  do
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v11 + 24 * v7) + v12;
    do
    {
      v13[v14] = *(void *)(v15 + v14 * 8) + 64;
      ++v14;
    }
    while (v14 != 7);
    ++v7;
    v13 += 7;
  }
  while (v7 != 3);
  unint64_t v16 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  float32x4_t v18 = &v72;
  if (_ZF) {
    float32x4_t v18 = (__int32 *)v71;
  }
  uint64_t v19 = -(uint64_t)v16;
  uint64_t v20 = v16 + a5;
  if (v20 > v19)
  {
    uint64_t v21 = v70[0];
    uint64_t v22 = v70[7];
    uint64_t v23 = v70[14];
    __asm { FMOV            V3.4S, #1.0 }
    do
    {
      float v28 = *(float *)(v8 + (((unint64_t)(v19 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      uint64_t v29 = 0;
      if (v28 >= -3.9052)
      {
        float32x4_t v32 = *(float32x4_t *)&v18[((_BYTE)v19 + (_BYTE)a6) & 7];
        do
        {
          uint64_t v33 = (void *)v77[v29];
          *uint64_t v33 = 0;
          v33[1] = 0;
          ++v29;
        }
        while (v29 != 12);
        for (uint64_t i = 0; i != 3; ++i)
        {
          uint64_t v35 = 0;
          float v36 = *(float *)(a1 + 4 * i + 120);
          do
          {
            uint64_t v37 = 0;
            long long v66 = 0uLL;
            long long v67 = 0uLL;
            uint64_t v68 = 0x100000000;
            DWORD2(v66) = -1;
            *(void *)((char *)&v67 + 4) = 0x1FFFFFFFFLL;
            uint64_t v38 = (int *)((char *)&unk_248550F04 + 8 * v35);
            float32x4_t v39 = 0uLL;
            int v40 = *v38;
            uint64_t v41 = v38[1];
            do
            {
              uint64_t v42 = 4 * *(int *)((char *)&v66 + v37 + 4);
              float32x4_t v39 = vaddq_f32(v39, vabdq_f32(*(float32x4_t *)(v69[7 * i + 3 + *(_DWORD *)((char *)&v66 + v37)] + 4 * v19 + v42), *(float32x4_t *)(v69[7 * i + 3 + *(_DWORD *)((char *)&v66 + v37) + v40] + 4 * v19 + 4 * v41 + v42)));
              v37 += 8;
            }
            while (v37 != 40);
            *(float32x4_t *)v77[v35] = vmlaq_n_f32(*(float32x4_t *)v77[v35], v39, v36);
            ++v35;
          }
          while (v35 != 12);
        }
        uint64_t v43 = 0;
        float32x4_t v44 = *(float32x4_t *)(v21 + 4 * v19);
        float32x4_t v45 = vmulq_n_f32(v32, v28);
        float32x4_t v46 = *(float32x4_t *)(v22 + 4 * v19);
        float32x4_t v47 = *(float32x4_t *)(v23 + 4 * v19);
        float32x4_t v48 = _Q3;
        do
        {
          uint64_t v49 = &v69[*(int *)((char *)&unk_248550F04 + v43 * 8)];
          uint64_t v50 = 4 * (v19 + *(int *)((char *)&unk_248550F04 + v43 * 8 + 4));
          float32x4_t v51 = vmaxnmq_f32(vmlaq_f32(_Q3, v45, *(float32x4_t *)v77[v43]), (float32x4_t)0);
          float32x4_t v48 = vaddq_f32(v48, v51);
          float32x4_t v44 = vmlaq_f32(v44, *(float32x4_t *)(v49[3] + v50), v51);
          float32x4_t v46 = vmlaq_f32(v46, *(float32x4_t *)(v49[10] + v50), v51);
          float32x4_t v47 = vmlaq_f32(v47, *(float32x4_t *)(v49[17] + v50), v51);
          ++v43;
        }
        while (v43 != 12);
        float32x4_t v52 = vdivq_f32(_Q3, v48);
        *(float32x4_t *)(***(void ***)a3 + 4 * v19 + 64) = vmulq_f32(v44, v52);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 24) + 4 * v19 + 64) = vmulq_f32(v52, v46);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 48) + 4 * v19 + 64) = vmulq_f32(v52, v47);
      }
      else
      {
        uint64_t v30 = v70;
        do
        {
          uint64_t v31 = *v30;
          v30 += 7;
          *(_OWORD *)(**(void **)(*(void *)a3 + v29 * 8) + 4 * v19 + 64) = *(_OWORD *)(v31 + 4 * v19);
          v29 += 3;
        }
        while (v29 != 9);
      }
      v19 += 4;
    }
    while (v19 < v20);
  }
  return 0;
}

void sub_2484B8AB4()
{
}

const char *sub_2484B8ACC()
{
  return "EPF1";
}

uint64_t sub_2484B8AD8(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

uint64_t sub_2484B8AE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, double a8)
{
  uint64_t v8 = 0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(*(void *)(a1 + 184) + 24) + *(void *)(*(void *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  *(float *)&a8 = *(float *)(a1 + 156) * 1.65;
  int32x4_t v87 = vdupq_n_s32(0x3FD33333u);
  uint64_t v88 = v87.i64[0];
  int v86 = LODWORD(a8);
  int v89 = LODWORD(a8);
  v85[0] = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  v85[1] = v85[0];
  uint64_t v10 = *a2;
  uint64_t v11 = 8 * *(void *)(a1 + 16) - 16;
  uint64_t v12 = &v82;
  do
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(v10 + 24 * v8) + v11;
    do
    {
      *(void *)&v12[v13] = *(void *)(v14 + v13) + 64;
      v13 += 8;
    }
    while (v13 != 40);
    ++v8;
    v12 += 40;
  }
  while (v8 != 3);
  unint64_t v15 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  uint64_t v17 = &v86;
  if (_ZF) {
    uint64_t v17 = (int *)v85;
  }
  uint64_t v18 = -(uint64_t)v15;
  uint64_t v19 = v15 + a5;
  if (v19 > v18)
  {
    uint64_t v21 = v83;
    uint64_t v20 = v84[0];
    uint64_t v23 = v84[9];
    uint64_t v22 = v84[10];
    uint64_t v25 = v84[4];
    uint64_t v24 = v84[5];
    uint64_t v26 = v84[1];
    uint64_t v27 = v84[6];
    uint64_t v28 = a1 + 120;
    uint64_t v29 = v84[11];
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      float v34 = *(float *)(v9 + (((unint64_t)(v18 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      uint64_t v35 = 0;
      if (v34 >= -3.9052)
      {
        float32x4_t v38 = 0uLL;
        float32x4_t v39 = v84;
        float32x4_t v40 = 0uLL;
        float32x4_t v41 = 0uLL;
        float32x4_t v42 = 0uLL;
        do
        {
          uint64_t v43 = *(v39 - 1) + 4 * v18;
          float32x4_t v44 = *(float32x4_t *)v43;
          float32x4_t v45 = vabdq_f32(*(float32x4_t *)(*(v39 - 2) + 4 * v18), *(float32x4_t *)v43);
          float32x4_t v46 = *(float32x4_t *)(v43 - 4);
          float32x4_t v47 = vabdq_f32(v46, *(float32x4_t *)v43);
          float32x4_t v48 = *(float32x4_t *)(v43 + 4);
          float32x4_t v49 = vabdq_f32(v48, *(float32x4_t *)v43);
          uint64_t v50 = *v39 + 4 * v18;
          float32x4_t v51 = *(float32x4_t *)(v50 - 4);
          float32x4_t v52 = vaddq_f32(v45, vabdq_f32(v46, v51));
          float32x4_t v53 = *(float32x4_t *)v50;
          float32x4_t v54 = vabdq_f32(v51, *(float32x4_t *)v50);
          float32x4_t v55 = vaddq_f32(vaddq_f32(v47, vabdq_f32(*(float32x4_t *)(v50 - 8), v51)), v54);
          float32x4_t v56 = vaddq_f32(v49, v54);
          float32x4_t v57 = vabdq_f32(*(float32x4_t *)v50, v44);
          float32x4_t v58 = *(float32x4_t *)(v50 + 4);
          float32x4_t v59 = vaddq_f32(vaddq_f32(v52, v57), vabdq_f32(v48, v58));
          float32x4_t v60 = vabdq_f32(*(float32x4_t *)v50, v58);
          float32x4_t v61 = vaddq_f32(v55, v60);
          float32x4_t v62 = vaddq_f32(vaddq_f32(v56, v60), vabdq_f32(*(float32x4_t *)(v50 + 8), v58));
          uint64_t v63 = v39[1] + 4 * v18;
          float32x4_t v64 = *(float32x4_t *)(v63 - 4);
          float32x4_t v65 = vabdq_f32(v53, *(float32x4_t *)v63);
          float32x4_t v66 = vaddq_f32(v59, v65);
          float32x4_t v67 = vaddq_f32(vaddq_f32(v57, vabdq_f32(v64, v51)), v65);
          float32x4_t v68 = vaddq_f32(v61, vabdq_f32(v64, *(float32x4_t *)v63));
          float32x4_t v69 = *(float32x4_t *)(v63 + 4);
          float32x4_t v70 = vaddq_f32(v62, vabdq_f32(v69, *(float32x4_t *)v63));
          float32x4_t v71 = vaddq_f32(vaddq_f32(v67, vabdq_f32(v69, v58)), vabdq_f32(*(float32x4_t *)(v39[2] + 4 * v18), *(float32x4_t *)v63));
          v69.i32[0] = *(_DWORD *)(v28 + v35);
          float32x4_t v38 = vmlaq_n_f32(v38, v66, v69.f32[0]);
          float32x4_t v40 = vmlaq_n_f32(v40, v68, v69.f32[0]);
          float32x4_t v41 = vmlaq_n_f32(v41, v70, v69.f32[0]);
          float32x4_t v42 = vmlaq_n_f32(v42, v71, v69.f32[0]);
          v35 += 4;
          v39 += 5;
        }
        while (v35 != 12);
        float32x4_t v72 = vmulq_n_f32(*(float32x4_t *)&v17[((_BYTE)v18 + (_BYTE)a6) & 7], v34);
        float32x4_t v73 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v38), (float32x4_t)0);
        float32x4_t v74 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v40), (float32x4_t)0);
        float32x4_t v75 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v41), (float32x4_t)0);
        float32x4_t v76 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v42), (float32x4_t)0);
        float32x4_t v77 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v20 + 4 * v18), *(float32x4_t *)(v21 + 4 * v18), v73), *(float32x4_t *)(v20 + 4 * v18 - 4), v74), *(float32x4_t *)(v20 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v26 + 4 * v18), v76);
        float32x4_t v78 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v24 + 4 * v18), *(float32x4_t *)(v25 + 4 * v18), v73), *(float32x4_t *)(v24 + 4 * v18 - 4), v74), *(float32x4_t *)(v24 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v27 + 4 * v18), v76);
        float32x4_t v79 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v22 + 4 * v18), *(float32x4_t *)(v23 + 4 * v18), v73), *(float32x4_t *)(v22 + 4 * v18 - 4), v74), *(float32x4_t *)(v22 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v29 + 4 * v18), v76);
        float32x4_t v80 = vdivq_f32(_Q0, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v73, _Q0), v74), v75), v76));
        *(float32x4_t *)(***(void ***)a3 + 4 * v18 + 64) = vmulq_f32(v77, v80);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 24) + 4 * v18 + 64) = vmulq_f32(v78, v80);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 48) + 4 * v18 + 64) = vmulq_f32(v79, v80);
      }
      else
      {
        float v36 = v84;
        do
        {
          uint64_t v37 = *v36;
          v36 += 5;
          *(_OWORD *)(**(void **)(*(void *)a3 + v35) + 4 * v18 + 64) = *(_OWORD *)(v37 + 4 * v18);
          v35 += 24;
        }
        while (v35 != 72);
      }
      v18 += 4;
    }
    while (v18 < v19);
  }
  return 0;
}

void sub_2484B8EC8()
{
}

const char *sub_2484B8EE0()
{
  return "EPF2";
}

uint64_t sub_2484B8EEC(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

uint64_t sub_2484B8EFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, double a8, double a9)
{
  uint64_t v9 = 0;
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(*(void *)(a1 + 184) + 24) + *(void *)(*(void *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  double v11 = *(float *)(a1 + 152) * 1.65;
  *(float *)&double v11 = v11;
  *(float *)&a9 = *(float *)(a1 + 156) * *(float *)&v11;
  int v81 = LODWORD(a9);
  int32x4_t v82 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
  int v83 = LODWORD(v11);
  int v84 = LODWORD(v11);
  int v85 = LODWORD(a9);
  v80[0] = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v80[1] = v80[0];
  uint64_t v12 = *a2;
  uint64_t v13 = 8 * *(void *)(a1 + 16) - 8;
  uint64_t v14 = &v78;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(v12 + 24 * v9) + v13;
    do
    {
      v14[v15] = *(void *)(v16 + v15 * 8) + 64;
      ++v15;
    }
    while (v15 != 3);
    ++v9;
    v14 += 3;
  }
  while (v9 != 3);
  unint64_t v17 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  uint64_t v19 = &v81;
  if (_ZF) {
    uint64_t v19 = (int *)v80;
  }
  uint64_t v20 = -(uint64_t)v17;
  uint64_t v21 = v17 + a5;
  if (v21 > v20)
  {
    uint64_t v23 = v78;
    uint64_t v22 = v79[0];
    uint64_t v25 = v79[5];
    uint64_t v24 = v79[6];
    uint64_t v26 = v79[1];
    uint64_t v27 = v79[2];
    uint64_t v28 = v79[3];
    uint64_t v29 = v79[4];
    uint64_t v30 = v79[7];
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      float v35 = *(float *)(v10 + (((unint64_t)(v20 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      uint64_t v36 = 4 * v20;
      if (v35 >= -3.9052)
      {
        float32x4_t v38 = *(float32x4_t *)(v22 + 4 * v20);
        float32x4_t v39 = *(float32x4_t *)(v28 + 4 * v20);
        float32x4_t v40 = *(float32x4_t *)(v24 + 4 * v20);
        float32x4_t v41 = *(float32x4_t *)(v23 + 4 * v20);
        float32x4_t v42 = vmulq_n_f32(*(float32x4_t *)&v19[((_BYTE)v20 + (_BYTE)a6) & 7], v35);
        float32x4_t v43 = *(float32x4_t *)(v27 + 4 * v20);
        float32x4_t v44 = *(float32x4_t *)(v25 + 4 * v20);
        float v45 = *(float *)(a1 + 120);
        float v46 = *(float *)(a1 + 124);
        float v47 = *(float *)(a1 + 128);
        float32x4_t v48 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vabdq_f32(v41, v38), v45), vabdq_f32(v43, v39), v46), vabdq_f32(v44, v40), v47)), (float32x4_t)0);
        float32x4_t v49 = *(float32x4_t *)(v22 + v36 - 4);
        float32x4_t v50 = *(float32x4_t *)(v28 + v36 - 4);
        float32x4_t v51 = *(float32x4_t *)(v24 + v36 - 4);
        float32x4_t v52 = vabdq_f32(v49, v38);
        float32x4_t v53 = *(float32x4_t *)(v22 + (v36 | 4));
        float32x4_t v54 = *(float32x4_t *)(v26 + 4 * v20);
        float32x4_t v55 = vabdq_f32(v53, v38);
        float32x4_t v56 = vabdq_f32(v54, v38);
        float32x4_t v57 = vmlaq_f32(v38, v41, v48);
        float32x4_t v58 = *(float32x4_t *)(v28 + (v36 | 4));
        float32x4_t v59 = vabdq_f32(v50, v39);
        float32x4_t v60 = vabdq_f32(v58, v39);
        float32x4_t v61 = *(float32x4_t *)(v29 + 4 * v20);
        float32x4_t v62 = vabdq_f32(v61, v39);
        float32x4_t v63 = vmlaq_f32(v39, v43, v48);
        float32x4_t v64 = vabdq_f32(v51, v40);
        float32x4_t v65 = *(float32x4_t *)(v24 + (v36 | 4));
        float32x4_t v66 = *(float32x4_t *)(v30 + 4 * v20);
        float32x4_t v67 = vabdq_f32(v65, v40);
        float32x4_t v68 = vabdq_f32(v66, v40);
        float32x4_t v69 = vmlaq_f32(v40, v44, v48);
        float32x4_t v70 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v52, v45), v59, v46), v64, v47)), (float32x4_t)0);
        float32x4_t v71 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v55, v45), v60, v46), v67, v47)), (float32x4_t)0);
        float32x4_t v72 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v56, v45), v62, v46), v68, v47)), (float32x4_t)0);
        float32x4_t v73 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v57, v49, v70), v53, v71), v54, v72);
        float32x4_t v74 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v63, v50, v70), v58, v71), v61, v72);
        float32x4_t v75 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v69, v51, v70), v65, v71), v66, v72);
        float32x4_t v76 = vdivq_f32(_Q0, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v48, _Q0), v70), v71), v72));
        *(float32x4_t *)(***(void ***)a3 + 4 * v20 + 64) = vmulq_f32(v73, v76);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 24) + 4 * v20 + 64) = vmulq_f32(v74, v76);
        *(float32x4_t *)(**(void **)(*(void *)a3 + 48) + 4 * v20 + 64) = vmulq_f32(v75, v76);
      }
      else
      {
        for (uint64_t i = 0; i != 9; i += 3)
          *(_OWORD *)(**(void **)(*(void *)a3 + i * 8) + 4 * v20 + 64) = *(_OWORD *)(v79[i] + 4 * v20);
      }
      v20 += 4;
    }
    while (v20 < v21);
  }
  return 0;
}

void sub_2484B9238()
{
}

void sub_2484B9250(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 312))
  {
    int v2 = *(_DWORD *)(a2 + 320);
    if (v2 <= 12)
    {
      if (v2 == 1) {
        operator new();
      }
      if (v2 == 8) {
        operator new();
      }
    }
    else
    {
      switch(v2)
      {
        case 13:
          operator new();
        case 16:
          operator new();
        case 18:
          float v3 = log2f(*(float *)(a2 + 864) / 1000.0);
          powf(1.111, -v3);
          operator new();
      }
    }
  }
  operator new();
}

const char *sub_2484B94F0()
{
  return "FromLinear";
}

BOOL sub_2484B94FC(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484B9508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    double v11 = (int32x4_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
    int32x4_t v13 = vdupq_n_s32(0xC0D55555);
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    __asm { FMOV            V18.4S, #1.0 }
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    do
    {
      float v34 = *(float *)(a1 + 40);
      int32x4_t v35 = vaddq_s32(*v11, v13);
      float32x4_t v36 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v35, v14)), _Q3);
      float32x4_t v37 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v36, vmlaq_f32(v21, v20, v36)), vmlaq_f32(v25, v36, vmlaq_f32(v23, v22, v36))), vcvtq_f32_s32(vshrq_n_s32(v35, 0x17uLL))), v34);
      float32x4_t v38 = vrndmq_f32(v37);
      float32x4_t v39 = vsubq_f32(v37, v38);
      int8x16_t v40 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v39, vmlaq_f32(v28, v39, vaddq_f32(v39, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v38), 0x17uLL), _Q18)), vmlaq_f32(v33, v39, vmlaq_f32(v32, v39, vmlaq_f32(v31, v30, v39)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v11));
      int32x4_t v41 = vaddq_s32(*v10, v13);
      float32x4_t v42 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v41, v14)), _Q3);
      float32x4_t v43 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v42, vmlaq_f32(v21, v20, v42)), vmlaq_f32(v25, v42, vmlaq_f32(v23, v22, v42))), vcvtq_f32_s32(vshrq_n_s32(v41, 0x17uLL))), v34);
      float32x4_t v44 = vrndmq_f32(v43);
      float32x4_t v45 = vsubq_f32(v43, v44);
      int8x16_t v46 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v45, vmlaq_f32(v28, v45, vaddq_f32(v45, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v44), 0x17uLL), _Q18)), vmlaq_f32(v33, v45, vmlaq_f32(v32, v45, vmlaq_f32(v31, v30, v45)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v10));
      int32x4_t v47 = vaddq_s32(*v9, v13);
      float32x4_t v48 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v47, v14)), _Q3);
      float32x4_t v49 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v48, vmlaq_f32(v21, v20, v48)), vmlaq_f32(v25, v48, vmlaq_f32(v23, v22, v48))), vcvtq_f32_s32(vshrq_n_s32(v47, 0x17uLL))), v34);
      float32x4_t v50 = vrndmq_f32(v49);
      float32x4_t v51 = vsubq_f32(v49, v50);
      int8x16_t v52 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v51, vmlaq_f32(v28, v51, vaddq_f32(v51, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v50), 0x17uLL), _Q18)), vmlaq_f32(v33, v51, vmlaq_f32(v32, v51, vmlaq_f32(v31, v30, v51)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v9));
      *v11++ = (int32x4_t)v40;
      *v10++ = (int32x4_t)v46;
      *v9++ = (int32x4_t)v52;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484B9808()
{
}

const char *sub_2484B9820()
{
  return "FromLinear";
}

BOOL sub_2484B982C(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484B9838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    double v11 = (int32x4_t *)(v7 + v8);
    __asm { FMOV            V0.4S, #4.5 }
    int32x4_t v17 = vdupq_n_s32(0xC0D55555);
    v18.i64[0] = 0x7F0000007FLL;
    v18.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3EE66666u);
    __asm { FMOV            V19.4S, #1.0 }
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x3F8CAC08u);
    float32x4_t v36 = (float32x4_t)vdupq_n_s32(0xBDCAC083);
    float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x3C9374BCu);
    do
    {
      int32x4_t v38 = vaddq_s32(*v11, v17);
      int32x4_t v39 = vshrq_n_s32(v38, 0x17uLL);
      float32x4_t v40 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v38, v18)), _Q3);
      float32x4_t v41 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v40, vmlaq_f32(v21, v20, v40)), vmlaq_f32(v25, v40, vmlaq_f32(v23, v22, v40))), vcvtq_f32_s32(v39)), v26);
      float32x4_t v42 = vrndmq_f32(v41);
      float32x4_t v43 = vsubq_f32(v41, v42);
      int8x16_t v44 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v11), (int8x16_t)vmulq_f32(*(float32x4_t *)v11, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v43, vmlaq_f32(v29, v43, vaddq_f32(v43, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v42), 0x17uLL), _Q19)), vmlaq_f32(v34, v43, vmlaq_f32(v33, v43, vmlaq_f32(v32, v31, v43))))));
      int32x4_t v45 = vaddq_s32(*v10, v17);
      int32x4_t v46 = vshrq_n_s32(v45, 0x17uLL);
      float32x4_t v47 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v45, v18)), _Q3);
      float32x4_t v48 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v47, vmlaq_f32(v21, v20, v47)), vmlaq_f32(v25, v47, vmlaq_f32(v23, v22, v47))), vcvtq_f32_s32(v46)), v26);
      float32x4_t v49 = vrndmq_f32(v48);
      float32x4_t v50 = vsubq_f32(v48, v49);
      int8x16_t v51 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v10), (int8x16_t)vmulq_f32(*(float32x4_t *)v10, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v50, vmlaq_f32(v29, v50, vaddq_f32(v50, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v49), 0x17uLL), _Q19)), vmlaq_f32(v34, v50, vmlaq_f32(v33, v50, vmlaq_f32(v32, v31, v50))))));
      int32x4_t v52 = vaddq_s32(*v9, v17);
      int32x4_t v53 = vshrq_n_s32(v52, 0x17uLL);
      float32x4_t v54 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v52, v18)), _Q3);
      float32x4_t v55 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v54, vmlaq_f32(v21, v20, v54)), vmlaq_f32(v25, v54, vmlaq_f32(v23, v22, v54))), vcvtq_f32_s32(v53)), v26);
      float32x4_t v56 = vrndmq_f32(v55);
      float32x4_t v57 = vsubq_f32(v55, v56);
      int8x16_t v58 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v9), (int8x16_t)vmulq_f32(*(float32x4_t *)v9, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v57, vmlaq_f32(v29, v57, vaddq_f32(v57, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v56), 0x17uLL), _Q19)), vmlaq_f32(v34, v57, vmlaq_f32(v33, v57, vmlaq_f32(v32, v31, v57))))));
      *v11++ = (int32x4_t)v44;
      *v10++ = (int32x4_t)v51;
      *v9++ = (int32x4_t)v58;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484B9B90()
{
}

const char *sub_2484B9BA8()
{
  return "FromLinear";
}

BOOL sub_2484B9BB4(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484B9BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (float32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    double v11 = (int8x16_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0xBE91C020);
    __asm
    {
      FMOV            V1.4S, #3.0
      FMOV            V2.4S, #12.0
    }
    int32x4_t v19 = vdupq_n_s32(0xC0D55555);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3DFDDD65u);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3F0F564Fu);
    __asm { FMOV            V21.4S, #-1.0 }
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3DAAAAABu);
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    __asm { FMOV            V17.4S, #1.0 }
    float32x4_t v63 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    int32x4_t v64 = _Q17;
    float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v36 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
    do
    {
      float32x4_t v39 = *(float32x4_t *)v11;
      float32x4_t v40 = *(float32x4_t *)v10;
      float32x4_t v41 = *v9;
      if (*(unsigned char *)(a1 + 44))
      {
        int32x4_t v42 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v41, *(float *)(a1 + 56)), v40, *(float *)(a1 + 52)), v39, *(float *)(a1 + 48));
        int32x4_t v43 = vaddq_s32(v42, v19);
        int32x4_t v44 = vshrq_n_s32(v43, 0x17uLL);
        float32x4_t v45 = vaddq_f32((float32x4_t)vsubq_s32(v42, (int32x4_t)vandq_s8((int8x16_t)v43, v20)), _Q21);
        float32x4_t v46 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v25, v45, vmlaq_f32(v22, v21, v45)), vmlaq_f32(v26, v45, vmlaq_f32(v24, v23, v45))), vcvtq_f32_s32(v44)), *(float *)(a1 + 40));
        float32x4_t v47 = vrndmq_f32(v46);
        float32x4_t v48 = vsubq_f32(v46, v47);
        float32x4_t v49 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v33, v48, vmlaq_f32(v62, v48, vaddq_f32(v48, v63))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v47), 0x17uLL), v64)), vmlaq_f32(v37, v48, vmlaq_f32(v36, v48, vmlaq_f32(v35, v34, v48)))), v38);
        float32x4_t v39 = vmulq_f32(v39, v49);
        float32x4_t v40 = vmulq_f32(v40, v49);
        float32x4_t v41 = vmulq_f32(v41, v49);
      }
      int32x4_t v50 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      int32x4_t v51 = vaddq_s32(v50, v19);
      float32x4_t v52 = vaddq_f32((float32x4_t)vsubq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)v51, v20)), _Q21);
      int8x16_t v53 = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v52, vmlaq_f32(v22, v21, v52)), vmlaq_f32(v26, v52, vmlaq_f32(v24, v23, v52))), vcvtq_f32_s32(vshrq_n_s32(v51, 0x17uLL))))), (int8x16_t)v39);
      int32x4_t v54 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      int32x4_t v55 = vaddq_s32(v54, v19);
      float32x4_t v56 = vaddq_f32((float32x4_t)vsubq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)v55, v20)), _Q21);
      int8x16_t v57 = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v56, vmlaq_f32(v22, v21, v56)), vmlaq_f32(v26, v56, vmlaq_f32(v24, v23, v56))), vcvtq_f32_s32(vshrq_n_s32(v55, 0x17uLL))))), (int8x16_t)v40);
      int32x4_t v58 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      int32x4_t v59 = vaddq_s32(v58, v19);
      float32x4_t v60 = vaddq_f32((float32x4_t)vsubq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)v59, v20)), _Q21);
      *v11++ = v53;
      *v10++ = v57;
      *(int8x16_t *)v9++ = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v60, vmlaq_f32(v22, v21, v60)),
                                                vmlaq_f32(v26, v60, vmlaq_f32(v24, v23, v60))),
                                              vcvtq_f32_s32(vshrq_n_s32(v59, 0x17uLL))))),
                             (int8x16_t)v41);
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484B9F60()
{
}

const char *sub_2484B9F78()
{
  return "FromLinear";
}

BOOL sub_2484B9F84(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484B9F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    double v11 = (int8x16_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0xC84A65A6);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xC72B7AD7);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x43074838u);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x467B5314u);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3EC6B81Cu);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x44B8B702u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x37257B02u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x4206DFEEu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x42418990u);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x43154069u);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x41CF3BC3u);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x42E01F14u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x425CE93Au);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x42B94632u);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0xBF8C4274);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x41A1562Eu);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3C5D697Du);
    v32.i64[0] = 0x8000000080000000;
    v32.i64[1] = 0x8000000080000000;
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x3F8196D9u);
    do
    {
      v34.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      float v35 = *(float *)(a1 + 40);
      float32x4_t v36 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      int8x16_t v37 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v36, vmlaq_f32(v19, v36, vmlaq_f32(v17, v36, vmlaq_f32(v14, v13, v36)))), vmlaq_f32(v22, v36, vmlaq_f32(v20, v36, vmlaq_f32(v18, v36, vmlaq_f32(v16, v15, v36))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v36, vmlaq_f32(v29, v36, vmlaq_f32(v27, v36, vmlaq_f32(v24, v23, v36)))), vmlaq_f32(v33, v36, vmlaq_f32(v30, v36, vmlaq_f32(v28, v36, vmlaq_f32(v26, v25, v36)))))), *v11);
      v34.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      float32x4_t v38 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      int8x16_t v39 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v38, vmlaq_f32(v19, v38, vmlaq_f32(v17, v38, vmlaq_f32(v14, v13, v38)))), vmlaq_f32(v22, v38, vmlaq_f32(v20, v38, vmlaq_f32(v18, v38, vmlaq_f32(v16, v15, v38))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v38, vmlaq_f32(v29, v38, vmlaq_f32(v27, v38, vmlaq_f32(v24, v23, v38)))), vmlaq_f32(v33, v38, vmlaq_f32(v30, v38, vmlaq_f32(v28, v38, vmlaq_f32(v26, v25, v38)))))), *v10);
      v34.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      float32x4_t v40 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      int8x16_t v41 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v40, vmlaq_f32(v19, v40, vmlaq_f32(v17, v40, vmlaq_f32(v14, v13, v40)))), vmlaq_f32(v22, v40, vmlaq_f32(v20, v40, vmlaq_f32(v18, v40, vmlaq_f32(v16, v15, v40))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v40, vmlaq_f32(v29, v40, vmlaq_f32(v27, v40, vmlaq_f32(v24, v23, v40)))), vmlaq_f32(v33, v40, vmlaq_f32(v30, v40, vmlaq_f32(v28, v40, vmlaq_f32(v26, v25, v40)))))), *v9);
      *v11++ = v37;
      *v10++ = v39;
      *v9++ = v41;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BA31C()
{
}

const char *sub_2484BA334()
{
  return "FromLinear";
}

BOOL sub_2484BA340(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BA34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    double v11 = (int8x16_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x414EB852u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3F3C3A32u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3FBCB2C2u);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3CC6A52Au);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3F6D0463u);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3EC7E073u);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3FAB9FE4u);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3BAD40B5u);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3E9B7A50u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0xBA069D6D);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3C24949Bu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    do
    {
      v25.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      float32x4_t v26 = vsqrtq_f32(v25);
      int8x16_t v27 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v26, vmlaq_f32(v19, v26, vmlaq_f32(v17, v26, vmlaq_f32(v14, v13, v26)))), vmlaq_f32(v22, v26, vmlaq_f32(v20, v26, vmlaq_f32(v18, v26, vmlaq_f32(v16, v15, v26))))), (int8x16_t)vmulq_f32(v25, v12)), *v11);
      v25.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      float32x4_t v28 = vsqrtq_f32(v25);
      int8x16_t v29 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v28, vmlaq_f32(v19, v28, vmlaq_f32(v17, v28, vmlaq_f32(v14, v13, v28)))), vmlaq_f32(v22, v28, vmlaq_f32(v20, v28, vmlaq_f32(v18, v28, vmlaq_f32(v16, v15, v28))))), (int8x16_t)vmulq_f32(v25, v12)), *v10);
      v25.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      float32x4_t v30 = vsqrtq_f32(v25);
      int8x16_t v31 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v30, vmlaq_f32(v19, v30, vmlaq_f32(v17, v30, vmlaq_f32(v14, v13, v30)))), vmlaq_f32(v22, v30, vmlaq_f32(v20, v30, vmlaq_f32(v18, v30, vmlaq_f32(v16, v15, v30))))), (int8x16_t)vmulq_f32(v25, v12)), *v9);
      *v11++ = v27;
      *v10++ = v29;
      *v9++ = v31;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BA570()
{
}

const char *sub_2484BA588()
{
  return "FromLinear";
}

BOOL sub_2484BA594(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BA5A0()
{
  return 0;
}

void sub_2484BA5A8()
{
}

const char *sub_2484BA5C0()
{
  return "Gab";
}

uint64_t sub_2484BA5CC(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

uint64_t sub_2484BA5DC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = -(uint64_t)((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = a5 + a4;
  unint64_t v8 = (4 * (a4 + 3)) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v9 = 64 - v8;
  unint64_t v10 = 68 - v8;
  do
  {
    if (v7 > v6)
    {
      double v11 = (uint64_t *)(*(void *)(*a2 + 24 * v5) + 8 * *(void *)(a1 + 16));
      uint64_t v12 = *(v11 - 1);
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      uint64_t v15 = a1 + 12 * v5;
      float32x4_t v16 = (const float *)(v15 + 40);
      float32x4_t v17 = vld1q_dup_f32(v16);
      float32x4_t v18 = (float32x4_t *)(**(void **)(*a3 + 24 * v5) + v9);
      float v19 = *(float *)(v15 + 44);
      float v20 = *(float *)(v15 + 48);
      float32x4_t v21 = (float32x4_t *)(v12 + v10);
      float32x4_t v22 = (float32x4_t *)(v14 + v10);
      float32x4_t v23 = (float32x4_t *)(v13 + v10);
      uint64_t v24 = v6;
      do
      {
        float32x4_t v25 = *(float32x4_t *)((char *)v21 - 4);
        float32x4_t v26 = *(float32x4_t *)((char *)v21 - 8);
        float32x4_t v27 = *v21++;
        float32x4_t v28 = v27;
        float32x4_t v29 = *(float32x4_t *)((char *)v23 - 4);
        float32x4_t v30 = *(float32x4_t *)((char *)v23 - 8);
        float32x4_t v31 = *v23++;
        float32x4_t v32 = v31;
        float32x4_t v33 = *(float32x4_t *)((char *)v22 - 4);
        float32x4_t v34 = *(float32x4_t *)((char *)v22 - 8);
        float32x4_t v35 = *v22++;
        *v18++ = vmlaq_n_f32(vmlaq_n_f32(vmulq_f32(v17, v29), vaddq_f32(vaddq_f32(v30, v32), vaddq_f32(v25, v33)), v19), vaddq_f32(vaddq_f32(v26, v28), vaddq_f32(v34, v35)), v20);
        v24 += 4;
      }
      while (v24 < v7);
    }
    ++v5;
  }
  while (v5 != 3);
  return 0;
}

void sub_2484BA6CC()
{
}

const char *sub_2484BA6E4()
{
  return "AddNoise";
}

uint64_t sub_2484BA6F0(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 56) <= a2) {
    return 3;
  }
  else {
    return a2 < 3;
  }
}

uint64_t sub_2484BA70C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v6 = (_OWORD *)a1[5];
  do
  {
    float v7 = fabsf(*(float *)((char *)v6 + v5));
    _ZF = v7 > 0.001 || v5 == 28;
    v5 += 4;
  }
  while (!_ZF);
  if (v7 > 0.001)
  {
    uint64_t v9 = 0;
    long long v10 = v6[1];
    v85[0] = *v6;
    v85[1] = v10;
    double v11 = &v84;
    do
    {
      int v12 = *(_DWORD *)((char *)v85 + v9);
      v11->i16[0] = v12;
      v11[-1].i8[0] = BYTE2(v12);
      v11[-1].i8[1] = HIBYTE(v12);
      v9 += 4;
      double v11 = (int8x16_t *)((char *)v11 + 2);
    }
    while (v9 != 32);
    if (((a5 + 3) & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      unint64_t v13 = 0;
      uint64_t v14 = a1[2];
      uint64_t v15 = *(float32x4_t **)(*(void *)(*(void *)a2 + 48) + 8 * v14);
      float32x4_t v16 = (float *)a1[6];
      float32x4_t v17 = (void *)(*(void *)a2 + 24 * a1[7]);
      float32x4_t v18 = *(float32x4_t **)(*v17 + 8 * v14);
      float v19 = *(float32x4_t **)(v17[3] + 8 * v14);
      float v20 = *(float32x4_t **)(v17[6] + 8 * v14);
      float32x4_t v21 = (float32x4_t *)(*(void *)(**(void **)a2 + 8 * v14) + 64);
      float32x4_t v22 = (float32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v14) + 64);
      float32x4_t v23 = v15 + 4;
      uint64_t v24 = v18 + 4;
      float32x4_t v25 = v19 + 4;
      float32x4_t v26 = v20 + 4;
      float v27 = v16[25];
      float v28 = v16[27] + (float)(v27 * 0.0);
      float v29 = v16[26] + (float)(v27 * 0.0);
      int8x16_t v31 = v83;
      int8x16_t v30 = v84;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      __asm
      {
        FMOV            V5.4S, #6.0
        FMOV            V7.4S, #7.0
        FMOV            V16.4S, #1.0
      }
      int32x4_t v39 = vdupq_n_s32(0x202u);
      v40.i64[0] = 0x10000000100;
      v40.i64[1] = 0x10000000100;
      int32x4_t v41 = vdupq_n_s32(0x2020000u);
      v42.i64[0] = 0x100000001000000;
      v42.i64[1] = 0x100000001000000;
      v43.i64[0] = 0xFFFF0000FFFF0000;
      v43.i64[1] = 0xFFFF0000FFFF0000;
      int32x4_t v44 = vdupq_n_s32(0x302u);
      int32x4_t v45 = vdupq_n_s32(0x3020000u);
      float32x4_t v46 = (float32x4_t)vdupq_n_s32(0x3E6147AEu);
      float32x4_t v47 = (float32x4_t)vdupq_n_s32(0x3F7E0000u);
      v48.i64[0] = 0x3C0000003C000000;
      v48.i64[1] = 0x3C0000003C000000;
      do
      {
        float32x4_t v49 = vmaxnmq_f32(vmulq_f32(vmulq_f32(vsubq_f32(*v22, *v21), v32), _Q5), (float32x4_t)0);
        float32x4_t v50 = vrndmq_f32(v49);
        int8x16_t v51 = (int8x16_t)vsubq_f32(v49, v50);
        int8x16_t v52 = (int8x16_t)vcgeq_f32(v49, _Q7);
        float32x4_t v53 = (float32x4_t)vbslq_s8(v52, (int8x16_t)_Q5, (int8x16_t)v50);
        float32x4_t v54 = (float32x4_t)vbslq_s8(v52, (int8x16_t)_Q16, v51);
        int32x4_t v55 = vcvtq_s32_f32(v53);
        int32x4_t v56 = vmulq_s32(v55, v39);
        int32x4_t v57 = vmulq_s32(v55, v41);
        float32x4_t v58 = (float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v57, v42)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v56, v40)));
        float32x4_t v59 = vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v58, v54, vsubq_f32((float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v57, v45)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v56, v44))), v58)), _Q16), (float32x4_t)0);
        float32x4_t v60 = vmaxnmq_f32(vmulq_f32(vmulq_f32(vaddq_f32(*v21, *v22), v32), _Q5), (float32x4_t)0);
        float32x4_t v61 = vrndmq_f32(v60);
        int8x16_t v62 = (int8x16_t)vsubq_f32(v60, v61);
        int8x16_t v63 = (int8x16_t)vcgeq_f32(v60, _Q7);
        float32x4_t v64 = (float32x4_t)vbslq_s8(v63, (int8x16_t)_Q5, (int8x16_t)v61);
        float32x4_t v65 = (float32x4_t)vbslq_s8(v63, (int8x16_t)_Q16, v62);
        int32x4_t v66 = vcvtq_s32_f32(v64);
        int32x4_t v67 = vmulq_s32(v66, v39);
        int32x4_t v68 = vmulq_s32(v66, v41);
        float32x4_t v69 = (float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v68, v42)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v67, v40)));
        float32x4_t v70 = vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v69, v65, vsubq_f32((float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v68, v45)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v67, v44))), v69)), _Q16), (float32x4_t)0);
        float32x4_t v71 = *v24++;
        float32x4_t v72 = vmulq_f32(v71, v46);
        float32x4_t v73 = *v25++;
        float32x4_t v74 = vmulq_f32(v73, v46);
        float32x4_t v75 = *v26++;
        float32x4_t v76 = vmulq_f32(vmulq_f32(v75, v46), v47);
        float32x4_t v77 = vmulq_f32(v70, vmlaq_f32(v76, v48, v72));
        float32x4_t v78 = vmulq_f32(v59, vmlaq_f32(v76, v48, v74));
        float32x4_t v79 = vaddq_f32(v77, v78);
        float32x4_t v80 = vaddq_f32(*v22, v79);
        float32x4_t v81 = vmlaq_n_f32(*v23, v79, v28);
        *float32x4_t v21 = vaddq_f32(*v21, vmlaq_n_f32(vsubq_f32(v77, v78), v79, v29));
        ++v21;
        *v22++ = v80;
        *v23++ = v81;
        v13 += 4;
      }
      while (v13 < ((a5 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
  return 0;
}

void sub_2484BA9F0()
{
}

const char *sub_2484BAA08()
{
  return "ConvNoise";
}

uint64_t sub_2484BAA14(uint64_t a1, unint64_t a2)
{
  return 2 * (*(void *)(a1 + 40) <= a2);
}

uint64_t sub_2484BAA28(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a1 + 40);
  if (v5 <= 0xFFFFFFFFFFFFFFFCLL)
  {
    uint64_t v6 = -(uint64_t)((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v7 = a5 + a4;
    unint64_t v8 = (4 * (a4 + 3)) & 0xFFFFFFFFFFFFFFF0 ^ 0xFFFFFFFFFFFFFFF8;
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0xC075C28F);
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3E23D70Au);
    unint64_t v11 = *(void *)(a1 + 40);
    do
    {
      uint64_t v12 = 0;
      uint64_t v29 = 0;
      long long v27 = 0uLL;
      long long v28 = 0uLL;
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(*a2 + 24 * v11);
      uint64_t v15 = 0xFFFFFFFE00000000;
      do
      {
        *(void *)((char *)&v27 + v12) = *(void *)(v14 + 8 * (v13 + (v15 >> 32))) + 64;
        v12 += 8;
        v15 += 0x100000000;
      }
      while (v12 != 40);
      if (v7 > v6)
      {
        uint64_t v16 = **(void **)(*a3 + 24 * v11) + 64;
        uint64_t v17 = v29 + v8;
        uint64_t v18 = v28;
        unint64_t v19 = *((void *)&v28 + 1) + v8;
        unint64_t v20 = *((void *)&v27 + 1) + v8;
        uint64_t v21 = v27 + v8;
        uint64_t v22 = v6;
        do
        {
          uint64_t v23 = 0;
          float32x4_t v25 = 0uLL;
          do
          {
            float32x4_t v25 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v25, *(float32x4_t *)(v21 + v23)), *(float32x4_t *)(v20 + v23)), *(float32x4_t *)(v19 + v23)), *(float32x4_t *)(v17 + v23));
            v23 += 4;
          }
          while (v23 != 20);
          uint64_t v24 = v18 + 4 * v22;
          *(float32x4_t *)(v16 + 4 * v22) = vmlaq_f32(vmulq_f32(*(float32x4_t *)v24, v9), v10, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v25, *(float32x4_t *)(v24 - 8)), *(float32x4_t *)(v24 - 4)), *(float32x4_t *)(v24 + 4)), *(float32x4_t *)(v24 + 8)));
          v22 += 4;
          v17 += 16;
          v19 += 16;
          v20 += 16;
          v21 += 16;
        }
        while (v22 < v7);
        unint64_t v5 = *(void *)(a1 + 40);
      }
      ++v11;
    }
    while (v11 < v5 + 3);
  }
  return 0;
}

void sub_2484BABE8()
{
}

const char *sub_2484BAC00()
{
  return "Patches";
}

BOOL sub_2484BAC0C(uint64_t a1, unint64_t a2)
{
  return *(void *)(a1 + 48) > a2;
}

uint64_t sub_2484BAC1C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a6) {
    unint64_t v12 = a6 - a4;
  }
  else {
    unint64_t v12 = 0;
  }
  sub_248408C04(v46, a1[6]);
  uint64_t v13 = a1[6];
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = a1[2];
    do
    {
      *((void *)v46[0] + v15++) = *(void *)(*(void *)(*a2 + v14) + 8 * v16) + 4 * v12 - 4 * a6 + 64;
      v14 += 24;
    }
    while (v13 != v15);
  }
  uint64_t v17 = (void *)a1[5];
  uint64_t v18 = v46[0];
  uint64_t v44 = *(unsigned int *)(*(void *)*v17 + 320);
  sub_24840F00C(v49, v44 + 3);
  sub_24840EC5C((uint64_t)&v47, v17, a7);
  unint64_t v19 = v48;
  __p = v47;
  if (v47 == v48)
  {
LABEL_25:
    if (__p) {
      operator delete(__p);
    }
    uint64_t v41 = 0;
  }
  else
  {
    unint64_t v20 = a5 + a4 + a6;
    uint64_t v21 = v47;
    while (1)
    {
      uint64_t v22 = *v21;
      uint64_t v23 = v17[1];
      uint64_t v24 = (unint64_t *)(v23 + 24 * *v21);
      unint64_t v25 = v24[2];
      uint64_t v26 = v17[4];
      long long v27 = (uint64_t *)(v26 + 40 * v25);
      unint64_t v28 = *v24;
      unint64_t v29 = v27[3] + *v24;
      if (*v24 < v20 && v29 >= v12)
      {
        uint64_t v31 = 0;
        uint64_t v32 = v22 * (v44 + 1);
        uint64_t v33 = *v27;
        float32x4_t v35 = (uint64_t *)(v26 + 40 * v25 + 8);
        uint64_t v34 = *v35;
        unint64_t v36 = v35[1] + a7 - *(void *)(v23 + 24 * v22 + 8);
        uint64_t v37 = -(uint64_t)v28;
        uint64_t v38 = 456 * v33 + 2496;
        do
        {
          *(void *)((char *)v49[0] + v31) = *(void *)(*v17 + v38)
                                            + *(void *)(*v17 + 456 * v33 + 2488) * v36
                                            + 4 * v34
                                            + 4 * v12
                                            - 4 * v28;
          v31 += 8;
          v38 += 40;
        }
        while (v31 != 24);
        if (v28 <= v12) {
          unint64_t v28 = v12;
        }
        if (v20 < v29) {
          unint64_t v29 = v20;
        }
        if (v44)
        {
          uint64_t v39 = 0;
          uint64_t v40 = 24;
          do
          {
            *(void *)((char *)v49[0] + v40) = *(void *)(*(void *)(*v17 + 456 * v33 + 2792) + v39 + 24)
                                              + *(void *)(*(void *)(*v17 + 456 * v33 + 2792) + v39 + 16) * v36
                                              + 4 * v34
                                              + 4 * v12
                                              + 4 * v37;
            v39 += 40;
            v40 += 8;
          }
          while (40 * v44 != v39);
        }
        uint64_t v41 = sub_2483E9B38(v18, (void *)v49[0], v18, v28 - v12, v29 - v28, (unsigned __int8 *)(v17[7] + 12 * v32), v17[7] + 12 * v32 + 12, (uint64_t *)(*(void *)*v17 + 328));
        if (v41) {
          break;
        }
      }
      if (++v21 == v19) {
        goto LABEL_25;
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return v41;
}

void sub_2484BAED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484BAF24()
{
}

const char *sub_2484BAF3C()
{
  return "Splines";
}

BOOL sub_2484BAF48(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BAF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[7];
  if (v9 != v8[8])
  {
    float32x4_t v10 = *(void **)a2;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(*(void *)(*(void *)a2 + 48) + 8 * v11) + 64;
    uint64_t v13 = *(void *)(*(void *)(*(void *)a2 + 24) + 8 * v11) + 64;
    uint64_t v14 = (void (__cdecl *)(_Unwind_Exception *))(*(void *)(*v10 + 8 * v11) + 64);
    v16[0] = a6;
    v16[1] = a7;
    v16[2] = a5;
    v16[3] = 1;
    sub_248430CC8(v14, v13, v12, v16, 1, v9, v8[10], v8[13]);
  }
  return 0;
}

void sub_2484BAFD4()
{
}

const char *sub_2484BAFEC()
{
  return "Spot";
}

uint64_t sub_2484BAFF8(uint64_t a1, unint64_t a2)
{
  if (a2 < 3) {
    return 1;
  }
  if (*(void *)(a1 + 40) == a2) {
    return 3;
  }
  return 0;
}

uint64_t sub_2484BB01C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = a1[6];
  float v7 = *(float *)(v6 + 12);
  uint64_t v8 = *a2;
  uint64_t v9 = a1[2];
  uint64_t v10 = 64 - 4 * a4;
  uint64_t v11 = (float *)(*(void *)(*(void *)(*a2 + 24 * a1[5]) + 8 * v9) + v10);
  do
  {
    if (a5 + a4 > -a4)
    {
      uint64_t v12 = (float *)(*(void *)(*(void *)(v8 + 24 * v5) + 8 * v9) + v10);
      uint64_t v13 = v11;
      uint64_t v14 = a5 + 2 * a4;
      do
      {
        float v15 = *v13++;
        *uint64_t v12 = (float)((float)(1.0 - (float)(v7 * v15)) * *v12) + (float)((float)(v7 * v15) * *(float *)(v6 + 4 * v5));
        ++v12;
        --v14;
      }
      while (v14);
    }
    ++v5;
  }
  while (v5 != 3);
  return 0;
}

void sub_2484BB0B8()
{
}

const char *sub_2484BB0D0()
{
  return "ToLinear";
}

BOOL sub_2484BB0DC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 41) == 0;
}

BOOL sub_2484BB0EC(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BB0F8()
{
  return 0;
}

void sub_2484BB100()
{
}

const char *sub_2484BB118()
{
  return "ToLinear";
}

BOOL sub_2484BB124(uint64_t a1)
{
  return *(unsigned char *)(a1 + 44) == 0;
}

BOOL sub_2484BB134(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BB140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    uint64_t v11 = (int32x4_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
    int32x4_t v13 = vdupq_n_s32(0xC0D55555);
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    __asm { FMOV            V18.4S, #1.0 }
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    do
    {
      float v34 = *(float *)(a1 + 40);
      int32x4_t v35 = vaddq_s32(*v11, v13);
      float32x4_t v36 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v35, v14)), _Q3);
      float32x4_t v37 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v36, vmlaq_f32(v21, v20, v36)), vmlaq_f32(v25, v36, vmlaq_f32(v23, v22, v36))), vcvtq_f32_s32(vshrq_n_s32(v35, 0x17uLL))), v34);
      float32x4_t v38 = vrndmq_f32(v37);
      float32x4_t v39 = vsubq_f32(v37, v38);
      int8x16_t v40 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v39, vmlaq_f32(v28, v39, vaddq_f32(v39, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v38), 0x17uLL), _Q18)), vmlaq_f32(v33, v39, vmlaq_f32(v32, v39, vmlaq_f32(v31, v30, v39)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v11));
      int32x4_t v41 = vaddq_s32(*v10, v13);
      float32x4_t v42 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v41, v14)), _Q3);
      float32x4_t v43 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v42, vmlaq_f32(v21, v20, v42)), vmlaq_f32(v25, v42, vmlaq_f32(v23, v22, v42))), vcvtq_f32_s32(vshrq_n_s32(v41, 0x17uLL))), v34);
      float32x4_t v44 = vrndmq_f32(v43);
      float32x4_t v45 = vsubq_f32(v43, v44);
      int8x16_t v46 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v45, vmlaq_f32(v28, v45, vaddq_f32(v45, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v44), 0x17uLL), _Q18)), vmlaq_f32(v33, v45, vmlaq_f32(v32, v45, vmlaq_f32(v31, v30, v45)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v10));
      int32x4_t v47 = vaddq_s32(*v9, v13);
      float32x4_t v48 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v47, v14)), _Q3);
      float32x4_t v49 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v48, vmlaq_f32(v21, v20, v48)), vmlaq_f32(v25, v48, vmlaq_f32(v23, v22, v48))), vcvtq_f32_s32(vshrq_n_s32(v47, 0x17uLL))), v34);
      float32x4_t v50 = vrndmq_f32(v49);
      float32x4_t v51 = vsubq_f32(v49, v50);
      int8x16_t v52 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v51, vmlaq_f32(v28, v51, vaddq_f32(v51, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v50), 0x17uLL), _Q18)), vmlaq_f32(v33, v51, vmlaq_f32(v32, v51, vmlaq_f32(v31, v30, v51)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v9));
      *v11++ = (int32x4_t)v40;
      *v10++ = (int32x4_t)v46;
      *v9++ = (int32x4_t)v52;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BB440()
{
}

const char *sub_2484BB458()
{
  return "ToLinear";
}

BOOL sub_2484BB464(uint64_t a1)
{
  return *(unsigned char *)(a1 + 41) == 0;
}

BOOL sub_2484BB474(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BB480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (float32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (float32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    uint64_t v11 = (float32x4_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3E638E39u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3F68F065u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3DB87CDBu);
    int32x4_t v15 = vdupq_n_s32(0xC0D55555);
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V5.4S, #-1.0 }
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x400E38E4u);
    __asm { FMOV            V21.4S, #1.0 }
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x3DA5E354u);
    do
    {
      int32x4_t v38 = (int32x4_t)vmlaq_f32(v14, v13, *v11);
      int32x4_t v39 = vaddq_s32(v38, v15);
      float32x4_t v40 = vaddq_f32((float32x4_t)vsubq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)v39, v16)), _Q5);
      float32x4_t v41 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v40, vmlaq_f32(v23, v22, v40)), vmlaq_f32(v27, v40, vmlaq_f32(v25, v24, v40))), vcvtq_f32_s32(vshrq_n_s32(v39, 0x17uLL))), v28);
      float32x4_t v42 = vrndmq_f32(v41);
      float32x4_t v43 = vsubq_f32(v41, v42);
      int8x16_t v44 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v11), (int8x16_t)vmulq_f32(*v11, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v43, vmlaq_f32(v31, v43, vaddq_f32(v43, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v42), 0x17uLL), _Q21)), vmlaq_f32(v36, v43, vmlaq_f32(v35, v43, vmlaq_f32(v34, v33, v43)))));
      int32x4_t v45 = (int32x4_t)vmlaq_f32(v14, v13, *v10);
      int32x4_t v46 = vaddq_s32(v45, v15);
      float32x4_t v47 = vaddq_f32((float32x4_t)vsubq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)v46, v16)), _Q5);
      float32x4_t v48 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v47, vmlaq_f32(v23, v22, v47)), vmlaq_f32(v27, v47, vmlaq_f32(v25, v24, v47))), vcvtq_f32_s32(vshrq_n_s32(v46, 0x17uLL))), v28);
      float32x4_t v49 = vrndmq_f32(v48);
      float32x4_t v50 = vsubq_f32(v48, v49);
      int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v10), (int8x16_t)vmulq_f32(*v10, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v50, vmlaq_f32(v31, v50, vaddq_f32(v50, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v49), 0x17uLL), _Q21)), vmlaq_f32(v36, v50, vmlaq_f32(v35, v50, vmlaq_f32(v34, v33, v50)))));
      int32x4_t v52 = (int32x4_t)vmlaq_f32(v14, v13, *v9);
      int32x4_t v53 = vaddq_s32(v52, v15);
      float32x4_t v54 = vaddq_f32((float32x4_t)vsubq_s32(v52, (int32x4_t)vandq_s8((int8x16_t)v53, v16)), _Q5);
      float32x4_t v55 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v54, vmlaq_f32(v23, v22, v54)), vmlaq_f32(v27, v54, vmlaq_f32(v25, v24, v54))), vcvtq_f32_s32(vshrq_n_s32(v53, 0x17uLL))), v28);
      float32x4_t v56 = vrndmq_f32(v55);
      float32x4_t v57 = vsubq_f32(v55, v56);
      int8x16_t v58 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v9), (int8x16_t)vmulq_f32(*v9, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v57, vmlaq_f32(v31, v57, vaddq_f32(v57, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v56), 0x17uLL), _Q21)), vmlaq_f32(v36, v57, vmlaq_f32(v35, v57, vmlaq_f32(v34, v33, v57)))));
      *v11++ = (float32x4_t)v44;
      *v10++ = (float32x4_t)v51;
      *v9++ = (float32x4_t)v58;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BB7E0()
{
}

const char *sub_2484BB7F8()
{
  return "ToLinear";
}

BOOL sub_2484BB804(uint64_t a1)
{
  return *(unsigned char *)(a1 + 60) == 0;
}

BOOL sub_2484BB814(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BB820(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v64[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = -a7;
  uint64_t v58 = a8 + a7;
  if (a8 + a7 > -a7)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v56 = *(void *)(*(void *)(*(void *)a2 + 24) + 8 * v10) + 64;
    uint64_t v57 = *(void *)(**(void **)a2 + 8 * v10) + 64;
    uint64_t v55 = *(void *)(*(void *)(*(void *)a2 + 48) + 8 * v10) + 64;
    __asm { FMOV            V0.4S, #-1.0 }
    float32x4_t v53 = _Q0;
    int32x4_t v54 = vdupq_n_s32(0xC0D55555);
    float32x4_t v51 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v52 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v49 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v50 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v47 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    float32x4_t v48 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v45 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    int32x4_t v46 = _Q1;
    float32x4_t v43 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    float32x4_t v44 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    float32x4_t v41 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    float32x4_t v42 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    float32x4_t v39 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    do
    {
      uint64_t v18 = 0;
      unint64_t v19 = (float32x4_t *)(v57 + 4 * v8);
      int8x16_t v62 = *(int8x16_t *)v19;
      float32x4_t v20 = (float32x4_t *)(v56 + 4 * v8);
      float32x4_t v61 = *v20;
      float32x4_t v21 = (float32x4_t *)(v55 + 4 * v8);
      float32x4_t v60 = *v21;
      v64[0] = &v62;
      v64[1] = &v61;
      v64[2] = &v60;
      do
      {
        uint64_t v22 = 0;
        float32x4_t v23 = (int8x16_t *)v64[v18];
        int8x16_t v24 = *v23;
        int8x16_t v63 = *v23;
        do
        {
          a5.i32[0] = v63.i32[v22];
          v24.i32[0] = 0;
          if (*(float *)a5.i32 != 0.0)
          {
            double v25 = fabs(*(float *)a5.i32);
            if (v25 <= 0.5)
            {
              *(double *)v24.i64 = *(float *)a5.i32 * *(float *)a5.i32 * 0.333333333;
            }
            else
            {
              int8x16_t v59 = a5;
              *(double *)v24.i64 = exp((v25 + -0.559910729) * 5.59181631);
              a5 = v59;
              v17.i64[0] = 0x8000000080000000;
              v17.i64[1] = 0x8000000080000000;
              *(double *)v24.i64 = (*(double *)v24.i64 + 0.28466892) * 0.0833333333;
            }
            *(float *)v24.i32 = *(double *)v24.i64;
            int8x16_t v24 = vbslq_s8(v17, v24, a5);
          }
          v63.i32[v22++] = v24.i32[0];
        }
        while (v22 != 4);
        *float32x4_t v23 = v63;
        ++v18;
      }
      while (v18 != 3);
      float32x4_t v26 = v61;
      a5 = v62;
      float32x4_t v27 = v60;
      if (*(unsigned char *)(a1 + 44))
      {
        int32x4_t v28 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v60, *(float *)(a1 + 56)), v61, *(float *)(a1 + 52)), (float32x4_t)v62, *(float *)(a1 + 48));
        int32x4_t v29 = vaddq_s32(v28, v54);
        int32x4_t v30 = vshrq_n_s32(v29, 0x17uLL);
        v31.i64[0] = 0x7F0000007FLL;
        v31.i64[1] = 0x7F0000007FLL;
        float32x4_t v32 = vaddq_f32((float32x4_t)vsubq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)v29, v31)), v53);
        float32x4_t v33 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v48, v32, vmlaq_f32(v51, v52, v32)), vmlaq_f32(v47, v32, vmlaq_f32(v49, v50, v32))), vcvtq_f32_s32(v30)), *(float *)(a1 + 40));
        float32x4_t v34 = vrndmq_f32(v33);
        float32x4_t v35 = vsubq_f32(v33, v34);
        float32x4_t v36 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v43, v35, vmlaq_f32(v44, v35, vaddq_f32(v35, v45))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v34), 0x17uLL), v46)), vmlaq_f32(v39, v35, vmlaq_f32(v40, v35, vmlaq_f32(v41, v42, v35)))), v38);
        a5 = (int8x16_t)vmulq_f32((float32x4_t)v62, v36);
        float32x4_t v26 = vmulq_f32(v61, v36);
        float32x4_t v27 = vmulq_f32(v60, v36);
      }
      *unint64_t v19 = (float32x4_t)a5;
      float32x4_t *v20 = v26;
      *float32x4_t v21 = v27;
      v8 += 4;
    }
    while (v8 < v58);
  }
  return 0;
}

void sub_2484BBBD8()
{
}

const char *sub_2484BBBF0()
{
  return "ToLinear";
}

BOOL sub_2484BBBFC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 48) == 0;
}

BOOL sub_2484BBC0C(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BBC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    uint64_t v11 = (int8x16_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3F0CCF16u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x40295064u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x402B570Bu);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0xC207A1AD);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3F3D150Au);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x432E5D5Bu);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0xBBCC536D);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0xC3D65E50);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3989DFFFu);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x43D2ACD0u);
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    do
    {
      v23.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v23.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v23.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      float32x4_t v24 = vmlaq_f32(v23, v23, v23);
      float v25 = *(float *)(a1 + 44);
      int8x16_t v26 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v24, vmlaq_f32(v18, v24, vmlaq_f32(v16, v24, vmlaq_f32(v13, v12, v24)))), vmlaq_f32(v21, v24, vmlaq_f32(v19, v24, vmlaq_f32(v17, v24, vmlaq_f32(v15, v14, v24))))), v25), *v11);
      v24.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v24.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v24.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      float32x4_t v27 = vmlaq_f32(v24, v24, v24);
      int8x16_t v28 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v27, vmlaq_f32(v18, v27, vmlaq_f32(v16, v27, vmlaq_f32(v13, v12, v27)))), vmlaq_f32(v21, v27, vmlaq_f32(v19, v27, vmlaq_f32(v17, v27, vmlaq_f32(v15, v14, v27))))), v25), *v10);
      v27.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v27.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v27.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      float32x4_t v29 = vmlaq_f32(v27, v27, v27);
      int8x16_t v30 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v29, vmlaq_f32(v18, v29, vmlaq_f32(v16, v29, vmlaq_f32(v13, v12, v29)))), vmlaq_f32(v21, v29, vmlaq_f32(v19, v29, vmlaq_f32(v17, v29, vmlaq_f32(v15, v14, v29))))), v25), *v9);
      *v11++ = v26;
      *v10++ = v28;
      *v9++ = v30;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BBE10()
{
}

const char *sub_2484BBE28()
{
  return "ToLinear";
}

BOOL sub_2484BBE34(uint64_t a1)
{
  return *(unsigned char *)(a1 + 41) == 0;
}

BOOL sub_2484BBE44(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BBE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -a4;
  if (a5 + a4 > -a4)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6);
    uint64_t v8 = 64 - 4 * a4;
    uint64_t v9 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + v8);
    uint64_t v10 = (int8x16_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + v8);
    uint64_t v11 = (int8x16_t *)(v7 + v8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    do
    {
      v25.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      int8x16_t v26 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v11);
      v25.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      int8x16_t v27 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v10);
      v25.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      int8x16_t v28 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v9);
      *v11++ = v26;
      *v10++ = v27;
      *v9++ = v28;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

void sub_2484BC068()
{
}

const char *sub_2484BC080()
{
  return "ToLinear";
}

BOOL sub_2484BC08C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 41) == 0;
}

BOOL sub_2484BC09C(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BC0A8()
{
  return 0;
}

void sub_2484BC0B0()
{
}

uint64_t sub_2484BC0C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FC65EC8;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 21);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = a1 + 32;
  *(void *)(a1 + 21) = v5;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2483F01FC((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  long long v7 = *(_OWORD *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 72);
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(v6 + 72) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(v6 + 56) = v9;
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 80) = &unk_26FC66920;
  *(void *)(v6 + 88) = *(void *)(a2 + 120);
  *(void *)(v6 + 96) = &unk_26FC66170;
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 136);
  *(void *)(v6 + 120) = &unk_26FC66920;
  *(void *)(v6 + 128) = *(void *)(a2 + 160);
  *(void *)(v6 + 136) = &unk_26FC66920;
  *(void *)(v6 + 144) = *(void *)(a2 + 176);
  *(void *)(v6 + 152) = &unk_26FC66920;
  *(void *)(v6 + 160) = *(void *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v11 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v6 + 194) = *(_OWORD *)(a2 + 226);
  *(_OWORD *)(v6 + 184) = v11;
  *(_OWORD *)(v6 + 168) = v10;
  *(void *)(v6 + 216) = &unk_26FC65EC8;
  *(_WORD *)(v6 + 224) = *(_WORD *)(a2 + 256);
  uint64_t v12 = *(void *)(a2 + 264);
  *(void *)(v6 + 237) = *(void *)(a2 + 269);
  *(void *)(v6 + 232) = v12;
  *(void *)(v6 + 256) = 0;
  *(void *)(v6 + 264) = 0;
  *(void *)(v6 + 248) = 0;
  sub_2483F01FC((void *)(v6 + 248), *(const void **)(a2 + 280), *(void *)(a2 + 288), *(void *)(a2 + 288) - *(void *)(a2 + 280));
  long long v13 = *(_OWORD *)(a2 + 304);
  long long v14 = *(_OWORD *)(a2 + 320);
  long long v15 = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 336) = v15;
  *(_OWORD *)(a1 + 304) = v13;
  *(void *)(a1 + 360) = &unk_26FC66920;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = &unk_26FC66170;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 400) = &unk_26FC66920;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = &unk_26FC66920;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = &unk_26FC66920;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = &unk_26FC65EC8;
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  uint64_t v16 = *(void *)(a2 + 464);
  *(void *)(a1 + 469) = *(void *)(a2 + 469);
  *(void *)(a1 + 464) = v16;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  sub_2483F01FC((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), *(void *)(a2 + 488) - *(void *)(a2 + 480));
  long long v17 = *(_OWORD *)(a2 + 504);
  long long v18 = *(_OWORD *)(a2 + 520);
  long long v19 = *(_OWORD *)(a2 + 536);
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = v19;
  *(_OWORD *)(a1 + 520) = v18;
  *(_OWORD *)(a1 + 504) = v17;
  *(void *)(a1 + 560) = &unk_26FC66920;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = &unk_26FC66170;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(void *)(a1 + 600) = &unk_26FC66920;
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = &unk_26FC66920;
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = &unk_26FC66920;
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  memcpy((void *)(a1 + 648), (const void *)(a2 + 648), 0x120uLL);
  return a1;
}

void sub_2484BC4D0(_Unwind_Exception *exception_object)
{
  *uint64_t v5 = v3;
  long long v7 = *v4;
  if (*v4)
  {
    v1[36] = v7;
    operator delete(v7);
  }
  void *v1 = v2;
  long long v8 = (void *)v1[4];
  if (v8)
  {
    v1[5] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_2484BC50C()
{
  return "ToneMapping";
}

BOOL sub_2484BC518(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BC524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 976) || *(void *)(a1 + 984))
  {
    uint64_t v5 = -a4;
    if (a5 + a4 > -a4)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(**(void **)a2 + 8 * v6) + 64;
      uint64_t v8 = *(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + 64;
      uint64_t v9 = *(void *)(*(void *)(*(void *)a2 + 48) + 8 * v6) + 64;
      float32x4_t v98 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
      int32x4_t v99 = vdupq_n_s32(0xC0D55555);
      float32x4_t v96 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
      float32x4_t v97 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
      float32x4_t v10 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
      __asm { FMOV            V0.4S, #-1.0 }
      float32x4_t v94 = _Q0;
      float32x4_t v95 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
      float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
      __asm { FMOV            V5.4S, #1.0 }
      float32x4_t v93 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
      float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x424379A1u);
      float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
      float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
      float32x4_t v21 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
      float32x4_t v22 = (float32x4_t)vdupq_n_s32(0xC19B8831);
      float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
      float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
      float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
      float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
      float32x4_t v27 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
      float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      v30.i64[0] = 0x4000000040000000;
      v30.i64[1] = 0x4000000040000000;
      v31.i64[0] = 0xC0000000C0000000;
      v31.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        float32x4_t v32 = (float32x4_t *)(v7 + 4 * v5);
        float32x4_t v33 = *v32;
        float32x4_t v34 = (float32x4_t *)(v8 + 4 * v5);
        float32x4_t v35 = *v34;
        float32x4_t v36 = (float32x4_t *)(v9 + 4 * v5);
        float32x4_t v37 = *v36;
        uint64_t v38 = *(void *)(a1 + 976);
        if (!v38 && !*(void *)(a1 + 984)) {
          goto LABEL_23;
        }
        float v39 = *(float *)(a1 + 992);
        float32x4_t v40 = vmulq_n_f32(v33, v39);
        float32x4_t v41 = vmulq_n_f32(v35, v39);
        float32x4_t v101 = v41;
        float32x4_t v102 = v40;
        float32x4_t v42 = vmulq_n_f32(v37, v39);
        float32x4_t v100 = v42;
        if (!v38) {
          break;
        }
        uint64_t v43 = 0;
        float32x4_t v44 = (const float *)(v38 + 28);
        float32x4_t v45 = vld1q_dup_f32(v44);
        int32x4_t v46 = (const float *)(v38 + 12);
        float32x4_t v47 = vld1q_dup_f32(v46);
        float32x4_t v48 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, *(float *)(v38 + 24)), v41, *(float *)(v38 + 20)), v40, *(float *)(v38 + 16)), *(float *)(v38 + 4));
        float32x4_t v49 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32((float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), *(float *)(v38 + 72))));
        int8x16_t v50 = (int8x16_t)vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x37257B02u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EC6B81Cu), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x43074838u), v49, vmlaq_f32(v28, v27, v49)))), vmlaq_f32((float32x4_t)vdupq_n_s32(0x4206DFEEu), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x44B8B702u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x467B5314u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC72B7AD7), (float32x4_t)vdupq_n_s32(0xC84A65A6),
                                   v49)))));
        int8x16_t v51 = (int8x16_t)vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3C5D697Du), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF8C4274), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x425CE93Au), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x43154069u), (float32x4_t)vdupq_n_s32(0x42418990u), v49)))), vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F8196D9u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x41A1562Eu), v49,
                               vmlaq_f32((float32x4_t)vdupq_n_s32(0x42B94632u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x42E01F14u), (float32x4_t)vdupq_n_s32(0x41CF3BC3u), v49)))));
        float32x4_t v52 = vminnmq_f32(vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v29, vbslq_s8((int8x16_t)vcgtq_f32(v26, (float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), v50, v51), (int8x16_t)v48), v45), *(float *)(v38 + 40)), _Q5);
        v51.i32[0] = *(_DWORD *)(v38 + 52);
        float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0);
        float32x4_t v54 = vmulq_n_f32(vsubq_f32(v52, v53), *(float *)(v38 + 56));
        float32x4_t v55 = vmulq_f32(v54, v54);
        float32x4_t v56 = vmulq_f32(v54, v55);
        __asm { FMOV            V7.4S, #-3.0 }
        float32x4_t v58 = vmlaq_f32(_Q5, _Q7, v55);
        __asm { FMOV            V7.4S, #3.0 }
        float32x4_t v60 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v53, v52), (int8x16_t)v52, (int8x16_t)vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(vmlaq_f32(vmulq_f32(v55, _Q7), v31, v56), *(float *)(v38 + 48)), vsubq_f32(_Q5, v53), vaddq_f32(v56, vmlaq_f32(v54, v31, v55))), vmlaq_f32(v58, v30, v56), *(float *)v51.i32));
        float32x4_t v61 = vsubq_f32(_Q5, v60);
        float32x4_t v62 = vmulq_f32(v61, v61);
        int8x16_t v63 = (int8x16_t)vmlaq_n_f32(v45, vmlaq_n_f32(v60, vmulq_f32(v62, v62), *(float *)(v38 + 44)), *(float *)(v38 + 36));
        float32x4_t v64 = vmlaq_f32((float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        float32x4_t v65 = vminnmq_f32(v47, vmaxnmq_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3989DFFFu), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBBCC536D), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3D150Au), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x40295064u), (float32x4_t)vdupq_n_s32(0x3F0CCF16u), v64)))),
                                                vmlaq_f32((float32x4_t)vdupq_n_s32(0x43D2ACD0u), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC3D65E50), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x432E5D5Bu), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC207A1AD), (float32x4_t)vdupq_n_s32(0x402B570Bu), v64))))), *(float *)(v38 + 76)), v63), (float32x4_t)0));
        float32x4_t v66 = (float32x4_t)vdupq_n_s32(0x358637BDu);
        int8x16_t v67 = (int8x16_t)vmulq_n_f32(v65, *(float *)(v38 + 64));
        float32x4_t v68 = vmulq_n_f32(vdivq_f32(v65, vmaxnmq_f32(v48, v66)), *(float *)(v38 + 60));
        uint64_t v103 = &v102;
        unint64_t v104 = &v101;
        unsigned int v105 = &v100;
        do
        {
          **(int8x16_t **)((char *)&v103 + v43) = vbslq_s8((int8x16_t)vcgeq_f32(v66, v48), v67, (int8x16_t)vmulq_f32(v68, **(float32x4_t **)((char *)&v103 + v43)));
          v43 += 8;
        }
        while (v43 != 24);
        if (!*(void *)(a1 + 976))
        {
          uint64_t v69 = *(void *)(a1 + 984);
          goto LABEL_14;
        }
LABEL_16:
        uint64_t v79 = 0;
        float32x4_t v80 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v100, *(float *)(a1 + 900)), v101, *(float *)(a1 + 896)), v102, *(float *)(a1 + 892));
        uint64_t v103 = &v102;
        unint64_t v104 = &v101;
        unsigned int v105 = &v100;
        float32x4_t v81 = 0uLL;
        float32x4_t v82 = 0uLL;
        do
        {
          int8x16_t v83 = *(float32x4_t **)((char *)&v103 + v79);
          float32x4_t v84 = vsubq_f32(*v83, v80);
          float32x4_t v85 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v84), (int8x16_t)_Q5, (int8x16_t)vdivq_f32(_Q5, v84));
          float32x4_t v86 = vmulq_f32(*v83, v85);
          float32x4_t v81 = (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v84), (int8x16_t)v81, (int8x16_t)vmaxnmq_f32(v81, v86));
          float32x4_t v82 = vmaxnmq_f32(v82, (float32x4_t)vbslq_s8((int8x16_t)vclezq_f32(v84), (int8x16_t)v81, (int8x16_t)vsubq_f32(v86, v85)));
          v79 += 8;
        }
        while (v79 != 24);
        uint64_t v87 = 0;
        float32x4_t v88 = vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v82, v25, vsubq_f32(v81, v82)), (float32x4_t)0), _Q5);
        uint64_t v103 = &v102;
        unint64_t v104 = &v101;
        unsigned int v105 = &v100;
        do
        {
          **(float32x4_t **)((char *)&v103 + v87) = vmlaq_f32(**(float32x4_t **)((char *)&v103 + v87), vsubq_f32(v80, **(float32x4_t **)((char *)&v103 + v87)), v88);
          v87 += 8;
        }
        while (v87 != 24);
        uint64_t v89 = 0;
        float32x4_t v90 = vdivq_f32(_Q5, vmaxnmq_f32(vmaxnmq_f32(v102, _Q5), vmaxnmq_f32(v101, v100)));
        uint64_t v103 = &v102;
        unint64_t v104 = &v101;
        unsigned int v105 = &v100;
        do
        {
          **(float32x4_t **)((char *)&v103 + v89) = vmulq_f32(v90, **(float32x4_t **)((char *)&v103 + v89));
          v89 += 8;
        }
        while (v89 != 24);
LABEL_22:
        float v91 = *(float *)(a1 + 996);
        float32x4_t v33 = vmulq_n_f32(v102, v91);
        float32x4_t v35 = vmulq_n_f32(v101, v91);
        float32x4_t v37 = vmulq_n_f32(v100, v91);
LABEL_23:
        float32x4_t *v32 = v33;
        *float32x4_t v34 = v35;
        *float32x4_t v36 = v37;
        v5 += 4;
        if (v5 >= a5 + a4) {
          return 0;
        }
      }
      uint64_t v69 = *(void *)(a1 + 984);
      if (*(unsigned char *)(v69 + 4))
      {
        int32x4_t v70 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, *(float *)(v69 + 16)), v41, *(float *)(v69 + 12)), v40, *(float *)(v69 + 8));
        int32x4_t v71 = vaddq_s32(v70, v99);
        int32x4_t v72 = vshrq_n_s32(v71, 0x17uLL);
        v73.i64[0] = 0x7F0000007FLL;
        v73.i64[1] = 0x7F0000007FLL;
        float32x4_t v74 = vaddq_f32((float32x4_t)vsubq_s32(v70, (int32x4_t)vandq_s8((int8x16_t)v71, v73)), v94);
        float32x4_t v75 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v10, v74, vmlaq_f32(v97, v98, v74)), vmlaq_f32(v16, v74, vmlaq_f32(v95, v96, v74))), vcvtq_f32_s32(v72)), *(float *)v69);
        float32x4_t v76 = vrndmq_f32(v75);
        float32x4_t v77 = vsubq_f32(v75, v76);
        float32x4_t v78 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v19, v77, vmlaq_f32(v18, v77, vaddq_f32(v77, v93))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v76), 0x17uLL), (int32x4_t)_Q5)), vmlaq_f32(v23, v77, vmlaq_f32(v22, v77, vmlaq_f32(v21, v20, v77)))), v24);
        float32x4_t v101 = vmulq_f32(v41, v78);
        float32x4_t v102 = vmulq_f32(v40, v78);
        float32x4_t v100 = vmulq_f32(v42, v78);
      }
LABEL_14:
      if (!*(unsigned char *)(v69 + 4) || *(float *)v69 >= 0.0) {
        goto LABEL_22;
      }
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_2484BCC80(void *a1)
{
  *a1 = &unk_26FC664E0;
  uint64_t v2 = a1[123];
  a1[123] = 0;
  if (v2) {
    MEMORY[0x24C579F90](v2, 0x1000C402A459A87);
  }
  uint64_t v3 = a1[122];
  a1[122] = 0;
  if (v3) {
    MEMORY[0x24C579F90](v3, 0x1000C40B33851A5);
  }
  a1[61] = &unk_26FC65EC8;
  uint64_t v4 = (void *)a1[65];
  if (v4)
  {
    a1[66] = v4;
    operator delete(v4);
  }
  a1[36] = &unk_26FC65EC8;
  uint64_t v5 = (void *)a1[40];
  if (v5)
  {
    a1[41] = v5;
    operator delete(v5);
  }
  a1[5] = &unk_26FC65EC8;
  uint64_t v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_2484BCDB0(void *a1)
{
  *a1 = &unk_26FC664E0;
  uint64_t v2 = a1[123];
  a1[123] = 0;
  if (v2) {
    MEMORY[0x24C579F90](v2, 0x1000C402A459A87);
  }
  uint64_t v3 = a1[122];
  a1[122] = 0;
  if (v3) {
    MEMORY[0x24C579F90](v3, 0x1000C40B33851A5);
  }
  a1[61] = &unk_26FC65EC8;
  uint64_t v4 = (void *)a1[65];
  if (v4)
  {
    a1[66] = v4;
    operator delete(v4);
  }
  a1[36] = &unk_26FC65EC8;
  uint64_t v5 = (void *)a1[40];
  if (v5)
  {
    a1[41] = v5;
    operator delete(v5);
  }
  a1[5] = &unk_26FC65EC8;
  uint64_t v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  return a1;
}

const char *sub_2484BCEC0()
{
  return "Upsample";
}

uint64_t sub_2484BCECC(uint64_t a1, uint64_t a2)
{
  return 2 * (*(void *)(a1 + 40) == a2);
}

uint64_t sub_2484BCEE0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a1 + 24);
  switch(v5)
  {
    case 3:
      uint64_t v32 = 0;
      uint64_t v113 = &v112;
      unint64_t v114 = &v111;
      uint64_t v115 = &v110;
      uint64_t v116 = &v109;
      *(void *)&long long v117 = &v108;
      *((void *)&v117 + 1) = &v107;
      *(void *)&long long v118 = &v106;
      *((void *)&v118 + 1) = &v105;
      do
      {
        if (a5 >= 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = *(void *)(*(void *)(*a3 + 24 * *(void *)(a1 + 40)) + 8 * v32) + 64;
          unsigned int v35 = v32 & 3;
          if ((v32 & 4) != 0) {
            unsigned int v35 = v32 & 3 ^ 3;
          }
          uint64_t v36 = 56;
          do
          {
            for (uint64_t i = 0; i != 8; ++i)
            {
              uint64_t v38 = *(void *)(*a2 + 24 * *(void *)(a1 + 40));
              uint64_t v39 = *(void *)(a1 + 16);
              float32x4_t v40 = *(float32x4_t *)(*(void *)(v38 + 8 * v39) + 4 * v33 + 64);
              unsigned int v41 = i & 3;
              if ((i & 4) != 0) {
                unsigned int v41 = i & 3 ^ 3;
              }
              uint64_t v42 = -2;
              float32x4_t v43 = 0uLL;
              float32x4_t v44 = *(float32x4_t *)(*(void *)(v38 + 8 * v39) + 4 * v33 + 64);
              do
              {
                if ((v32 & 4) != 0) {
                  uint64_t v45 = -v42;
                }
                else {
                  uint64_t v45 = v42;
                }
                uint64_t v46 = v45 + 2;
                float32x4_t v47 = (_OWORD *)(*(void *)(v38 + 8 * (v39 + (int)v42)) + v36);
                uint64_t v48 = -2;
                for (uint64_t j = 2; j != -3; --j)
                {
                  float32x4_t v50 = *(float32x4_t *)v47;
                  float32x4_t v47 = (_OWORD *)((char *)v47 + 4);
                  float32x4_t v51 = v50;
                  if ((i & 4) != 0) {
                    uint64_t v52 = j;
                  }
                  else {
                    uint64_t v52 = v48;
                  }
                  float32x4_t v43 = vmlaq_n_f32(v43, v51, *(float *)(a1 + 400 * v35 + 100 * v41 + 20 * v46 + 4 * v52 + 56));
                  float32x4_t v40 = vminnmq_f32(v51, v40);
                  float32x4_t v44 = vmaxnmq_f32(v51, v44);
                  ++v48;
                }
                ++v42;
              }
              while (v42 != 3);
              *(float32x4_t *)*(&v113 + i) = vminnmq_f32(vmaxnmq_f32(v40, v43), v44);
            }
            int32x4_t v53 = vzip1q_s32(v112, v108);
            int32x4_t v54 = vzip1q_s32(v111, v107);
            int32x4_t v55 = vzip1q_s32(v110, v106);
            float32x4_t v56 = (int32x4_t *)(v34 + 32 * v33);
            int32x4_t v57 = vzip1q_s32(v109, v105);
            int32x4_t v58 = vzip2q_s32(v112, v108);
            int32x4_t v59 = vzip2q_s32(v111, v107);
            int32x4_t v60 = vzip2q_s32(v110, v106);
            int32x4_t v61 = vzip2q_s32(v109, v105);
            float32x2x2_t v62 = (float32x2x2_t)vzip1q_s32(v53, v55);
            int32x4_t v63 = vzip1q_s32(v54, v57);
            float32x2x2_t v64 = (float32x2x2_t)vzip2q_s32(v53, v55);
            int32x4_t v65 = vzip2q_s32(v54, v57);
            float32x2x2_t v66 = (float32x2x2_t)vzip1q_s32(v58, v60);
            int32x4_t v67 = vzip1q_s32(v59, v61);
            float32x2x2_t v68 = (float32x2x2_t)vzip2q_s32(v58, v60);
            int32x4_t v69 = vzip2q_s32(v59, v61);
            int32x4_t v70 = (float *)v56;
            vst2_f32(v70, v62);
            v70 += 4;
            *(int32x4_t *)int32x4_t v70 = vzip2q_s32((int32x4_t)v62, v63);
            i32 = (float *)v56[2].i32;
            vst2_f32(i32, v64);
            v56[3] = vzip2q_s32((int32x4_t)v64, v65);
            int32x4_t v72 = (float *)v56[4].i32;
            vst2_f32(v72, v66);
            int8x16_t v73 = (float *)v56[6].i32;
            vst2_f32(v73, v68);
            v56[5] = vzip2q_s32((int32x4_t)v66, v67);
            v56[7] = vzip2q_s32((int32x4_t)v68, v69);
            v33 += 4;
            v36 += 16;
          }
          while (v33 < a5);
        }
        ++v32;
      }
      while (v32 != 8);
      break;
    case 2:
      uint64_t v74 = 0;
      long long v117 = 0u;
      long long v118 = 0u;
      uint64_t v113 = &v112;
      unint64_t v114 = &v111;
      uint64_t v115 = &v110;
      uint64_t v116 = &v109;
      do
      {
        if (a5 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = *(void *)(*(void *)(*a3 + 24 * *(void *)(a1 + 40)) + 8 * v74) + 64;
          uint64_t v77 = 56;
          do
          {
            for (uint64_t k = 0; k != 4; ++k)
            {
              uint64_t v79 = *(void *)(a1 + 16);
              uint64_t v80 = *(void *)(*a2 + 24 * *(void *)(a1 + 40));
              float32x4_t v81 = *(float32x4_t *)(*(void *)(v80 + 8 * v79) + 4 * v75 + 64);
              uint64_t v82 = -2;
              float32x4_t v83 = 0uLL;
              float32x4_t v84 = v81;
              do
              {
                if ((v74 & 2) != 0) {
                  uint64_t v85 = -v82;
                }
                else {
                  uint64_t v85 = v82;
                }
                uint64_t v86 = v85 + 2;
                uint64_t v87 = (_OWORD *)(*(void *)(v80 + 8 * (v79 + (int)v82)) + v77);
                uint64_t v88 = -2;
                for (uint64_t m = 2; m != -3; --m)
                {
                  float32x4_t v90 = *(float32x4_t *)v87;
                  uint64_t v87 = (_OWORD *)((char *)v87 + 4);
                  float32x4_t v91 = v90;
                  if ((k & 2) != 0) {
                    uint64_t v92 = m;
                  }
                  else {
                    uint64_t v92 = v88;
                  }
                  float32x4_t v83 = vmlaq_n_f32(v83, v91, *(float *)(a1+ 400 * (v74 & 1 ^ ((unint64_t)(v74 & 2) >> 1))+ 100 * (k & 1 ^ ((unint64_t)(k & 2) >> 1))+ 20 * v86+ 4 * v92+ 56));
                  float32x4_t v81 = vminnmq_f32(v91, v81);
                  float32x4_t v84 = vmaxnmq_f32(v91, v84);
                  ++v88;
                }
                ++v82;
              }
              while (v82 != 3);
              *(float32x4_t *)*(&v113 + k) = vminnmq_f32(vmaxnmq_f32(v81, v83), v84);
            }
            int32x4_t v94 = v111;
            int32x4_t v93 = v112;
            int32x4_t v96 = v109;
            int32x4_t v95 = v110;
            float32x4_t v97 = (int32x4_t *)(v76 + 16 * v75);
            float32x2x2_t v98 = (float32x2x2_t)vzip1q_s32(v112, v110);
            int32x4_t v99 = vzip1q_s32(v111, v109);
            float32x4_t v100 = (float *)v97;
            vst2_f32(v100, v98);
            v100 += 4;
            float32x2x2_t v101 = (float32x2x2_t)vzip2q_s32(v93, v95);
            int32x4_t v102 = vzip2q_s32(v94, v96);
            uint64_t v103 = (float *)v97[2].i32;
            vst2_f32(v103, v101);
            *(int32x4_t *)float32x4_t v100 = vzip2q_s32((int32x4_t)v98, v99);
            v97[3] = vzip2q_s32((int32x4_t)v101, v102);
            v75 += 4;
            v77 += 16;
          }
          while (v75 < a5);
        }
        ++v74;
      }
      while (v74 != 4);
      break;
    case 1:
      uint64_t v6 = 0;
      uint64_t v113 = &v112;
      unint64_t v114 = &v111;
      char v7 = 1;
      do
      {
        char v8 = v7;
        if (a5 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(*(void *)(*a3 + 24 * *(void *)(a1 + 40)) + 8 * v6) + 64;
          uint64_t v11 = 56;
          do
          {
            uint64_t v12 = 0;
            char v13 = 1;
            do
            {
              uint64_t v14 = *(void *)(a1 + 16);
              uint64_t v15 = *(void *)(*a2 + 24 * *(void *)(a1 + 40));
              char v16 = v13;
              float32x4_t v17 = *(float32x4_t *)(*(void *)(v15 + 8 * v14) + 4 * v9 + 64);
              uint64_t v18 = -2;
              float32x4_t v19 = 0uLL;
              float32x4_t v20 = v17;
              do
              {
                if (v8) {
                  uint64_t v21 = v18;
                }
                else {
                  uint64_t v21 = -v18;
                }
                uint64_t v22 = v21 + 2;
                float32x4_t v23 = (_OWORD *)(*(void *)(v15 + 8 * (v14 + (int)v18)) + v11);
                uint64_t v24 = -2;
                for (uint64_t n = 2; n != -3; --n)
                {
                  float32x4_t v26 = *(float32x4_t *)v23;
                  float32x4_t v23 = (_OWORD *)((char *)v23 + 4);
                  float32x4_t v27 = v26;
                  if (v16) {
                    uint64_t v28 = v24;
                  }
                  else {
                    uint64_t v28 = n;
                  }
                  float32x4_t v19 = vmlaq_n_f32(v19, v27, *(float *)(a1 + 48 + 20 * v22 + 4 * v28 + 8));
                  float32x4_t v17 = vminnmq_f32(v27, v17);
                  float32x4_t v20 = vmaxnmq_f32(v27, v20);
                  ++v24;
                }
                ++v18;
              }
              while (v18 != 3);
              char v13 = 0;
              *(float32x4_t *)*(&v113 + v12) = vminnmq_f32(vmaxnmq_f32(v17, v19), v20);
              uint64_t v12 = 1;
            }
            while ((v16 & 1) != 0);
            int32x4_t v30 = v111;
            int32x4_t v29 = v112;
            float32x4_t v31 = (float *)(v10 + 8 * v9);
            vst2_f32(v31, *(float32x2x2_t *)((char *)&v30 - 8));
            v31 += 4;
            *(int32x4_t *)float32x4_t v31 = vzip2q_s32(v29, v30);
            v9 += 4;
            v11 += 16;
          }
          while (v9 < a5);
        }
        char v7 = 0;
        uint64_t v6 = 1;
      }
      while ((v8 & 1) != 0);
      break;
  }
  return 0;
}

void sub_2484BD424()
{
}

void sub_2484BD43C()
{
}

void sub_2484BD574(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2483E8DDC(--v4);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const char *sub_2484BD5F8()
{
  return "WritePixelCB";
}

uint64_t sub_2484BD604(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 64))
  {
    uint64_t v4 = (*(uint64_t (**)(void, unint64_t, uint64_t))(a1 + 56))(*(void *)(a1 + 80), a2, 1024);
    *(void *)(a1 + 88) = v4;
    if (!v4) {
      return 1;
    }
  }
  else if (!*(void *)(a1 + 96))
  {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 192);
  while (v5 != v6)
  {
    if (*(void *)(v5 + 8))
    {
      uint64_t v7 = (*(uint64_t (**)(void, unint64_t, uint64_t))v5)(*(void *)(v5 + 24), a2, 1024);
      *(void *)(v5 + 32) = v7;
      if (!v7) {
        return 1;
      }
    }
    else if (!*(void *)(v5 + 40))
    {
      return 1;
    }
    v5 += 96;
  }
  sub_2484BD7B8((long long *)(a1 + 256), a2);
  uint64_t v9 = *(unint64_t **)(a1 + 256);
  for (uint64_t i = *(unint64_t **)(a1 + 264); v9 != i; ++v9)
  {
    unint64_t v11 = sub_2484D7BCC(*(void *)(a1 + 120) << 12, (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
    unint64_t v12 = *v9;
    *uint64_t v9 = v11;
    if (v12)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
      free(*(void **)(v12 - 32));
    }
  }
  if (*(unsigned char *)(a1 + 161) && *(unsigned char *)(a1 + 160) && *(unsigned char *)(a1 + 162) || *(unsigned char *)(a1 + 176))
  {
    sub_2484BD7B8((long long *)(a1 + 232), *(void *)(a1 + 120) * a2);
    uint64_t v14 = *(unint64_t **)(a1 + 232);
    for (uint64_t j = *(unint64_t **)(a1 + 240); v14 != j; ++v14)
    {
      unint64_t v15 = sub_2484D7BCC(4096, (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
      unint64_t v16 = *v14;
      *uint64_t v14 = v15;
      if (v16)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v16 - 24));
        free(*(void **)(v16 - 32));
      }
    }
  }
  return 0;
}

void sub_2484BD7B8(long long *a1, unint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = (uint64_t *)*((void *)a1 + 1);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unint64_t v16 = &v4[a2];
      while (v3 != v16)
        sub_2483E8DDC(--v3);
      *((void *)a1 + 1) = v16;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *((void *)a1 + 2);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*((void **)a1 + 1), 8 * v6);
      *((void *)a1 + 1) = &v3[v6];
    }
    else
    {
      if (a2 >> 61) {
        sub_2483E92E8();
      }
      uint64_t v8 = v7 - (void)v4;
      uint64_t v9 = v8 >> 2;
      if (v8 >> 2 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 61) {
        sub_2483E9338();
      }
      unint64_t v11 = (char *)operator new(8 * v10);
      unint64_t v12 = &v11[8 * v5];
      char v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      uint64_t v14 = &v12[8 * v6];
      while (v3 != v4)
      {
        uint64_t v15 = *--v3;
        *uint64_t v3 = 0;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }
      long long v17 = *a1;
      *(void *)a1 = v12;
      *((void *)a1 + 1) = v14;
      *((void *)a1 + 2) = v13;
      uint64_t v18 = (uint64_t *)*((void *)&v17 + 1);
      float32x4_t v19 = (uint64_t *)v17;
      while (v18 != v19)
        sub_2483E8DDC(--v18);
      if (v19)
      {
        operator delete(v19);
      }
    }
  }
}

uint64_t sub_2484BD91C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 152) > a2 || *(unsigned char *)(a1 + 161) && *(void *)(a1 + 168) == a2) {
    return 3;
  }
  for (uint64_t i = *(void *)(a1 + 184); i != *(void *)(a1 + 192); i += 96)
  {
    if (*(void *)(i + 88) == a2) {
      return 3;
    }
  }
  return 0;
}

uint64_t sub_2484BD96C(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, size_t a8)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a1 + 48);
  if (v8 > a7)
  {
    unint64_t v10 = *(void *)(a1 + 40);
    BOOL v11 = v10 > a6;
    unint64_t v12 = v10 - a6;
    if (v11)
    {
      uint64_t v13 = v8 + ~a7;
      if (*(unsigned char *)(a1 + 177)) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = a7;
      }
      if (v12 >= a5) {
        unint64_t v12 = a5;
      }
      if (v12)
      {
        unint64_t v16 = 0;
        uint64_t v43 = a1 + 56;
        unint64_t v44 = v12;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v41 = _Q0;
        float32x4_t v42 = (float32x4_t)vdupq_n_s32(0x32800000u);
        do
        {
          if (v12 - v16 >= 0x400) {
            unint64_t v22 = 1024;
          }
          else {
            unint64_t v22 = v12 - v16;
          }
          v23.i64[0] = 0;
          memset(__dst, 0, sizeof(__dst));
          uint64_t v24 = *(void *)(a1 + 152);
          if (v24)
          {
            float32x4_t v25 = *a2;
            uint64_t v26 = *(void *)(a1 + 16);
            float32x4_t v27 = __dst;
            uint64_t v28 = *(void *)(a1 + 152);
            do
            {
              uint64_t v29 = *v25;
              v25 += 3;
              *v27++ = *(void *)(v29 + 8 * v26) + 4 * v16 + 64;
              --v28;
            }
            while (v28);
          }
          if (*(unsigned char *)(a1 + 161))
          {
            *((void *)__dst + v24) = *(void *)((*a2)[3 * *(void *)(a1 + 168)] + 8 * *(void *)(a1 + 16))
                                     + 4 * v16
                                     + 64;
            if (*(unsigned char *)(a1 + 160) && *(unsigned char *)(a1 + 162))
            {
              v23.i64[0] = 0;
              memset(__src, 0, sizeof(__src));
              unint64_t v30 = *(void *)(a1 + 120);
              if (v30)
              {
                unint64_t v31 = 0;
                unint64_t v32 = v22;
                do
                {
                  uint64_t v33 = *(void **)(*(void *)(a1 + 232) + 8 * (v31 + v30 * a8));
                  *((void *)__src + v31) = v33;
                  memcpy(v33, *((const void **)__dst + v31++), 4 * v22);
                  unint64_t v30 = *(void *)(a1 + 120);
                }
                while (v31 < v30);
              }
              else
              {
                unint64_t v32 = v22;
              }
              unint64_t v22 = v32;
              if (v32)
              {
                unint64_t v34 = 0;
                unint64_t v35 = *(void *)(a1 + 152);
                do
                {
                  if (v35)
                  {
                    unint64_t v36 = 0;
                    float32x4_t v23 = vdivq_f32(v41, vmaxnmq_f32(*(float32x4_t *)(*((void *)__src + v35) + 4 * v34), v42));
                    do
                    {
                      *(float32x4_t *)(*((void *)__src + v36) + 4 * v34) = vmulq_f32(v23, *(float32x4_t *)(*((void *)__src + v36)+ 4 * v34));
                      ++v36;
                      unint64_t v35 = *(void *)(a1 + 152);
                    }
                    while (v36 < v35);
                  }
                  v34 += 4;
                }
                while (v34 < v32);
                unint64_t v30 = *(void *)(a1 + 120);
              }
              if (v30) {
                memcpy(__dst, __src, 8 * v30);
              }
            }
          }
          else
          {
            *((void *)__dst + v24) = *(void *)(a1 + 208);
          }
          sub_2484BDC4C((unsigned char *)a1, v43, a8, v14, v16 + a6, v22, (const void **)__dst, *(double *)v23.i64);
          uint64_t v38 = *(void *)(a1 + 184);
          uint64_t v39 = *(void *)(a1 + 192);
          while (v38 != v39)
          {
            *(void *)&__dst[0] = *(void *)((*a2)[3 * *(void *)(v38 + 88)] + 8 * *(void *)(a1 + 16))
                                 + 4 * v16
                                 + 64;
            sub_2484BDC4C((unsigned char *)a1, v38, a8, v14, v16 + a6, v22, (const void **)__dst, v37);
            v38 += 96;
          }
          v16 += 1024;
          unint64_t v12 = v44;
        }
        while (v16 < v44);
      }
    }
  }
  return 0;
}

unsigned char *sub_2484BDC4C(unsigned char *result, uint64_t a2, size_t __n, uint64_t a4, unint64_t a5, unint64_t a6, const void **__dst, double a8)
{
  uint64_t v14 = result;
  uint64_t v119 = *MEMORY[0x263EF8340];
  if (result[176])
  {
    HIDWORD(a8) = 0;
    memset(&v118, 0, 32);
    unint64_t v15 = *(void *)(a2 + 64);
    if (v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
      {
        uint64_t result = *(unsigned char **)(*((void *)v14 + 29) + 8 * (i + *((void *)v14 + 15) * __n));
        v118.i64[i] = (uint64_t)result;
        long long v17 = __dst[i];
        if (result != v17)
        {
          uint64_t result = memcpy(result, v17, 4 * a6);
          unint64_t v15 = *(void *)(a2 + 64);
        }
      }
    }
    if (a6 >= 2)
    {
      uint64_t v18 = 0;
      do
      {
        if (v15)
        {
          unint64_t v19 = ~v18 + a6;
          float32x4_t v20 = (uint64_t *)&v118;
          unint64_t v21 = v15;
          do
          {
            uint64_t v22 = *v20++;
            int v23 = *(_DWORD *)(v22 + 4 * v18);
            *(_DWORD *)(v22 + 4 * v18) = *(_DWORD *)(v22 + 4 * v19);
            *(_DWORD *)(v22 + 4 * v19) = v23;
            --v21;
          }
          while (v21);
        }
        ++v18;
      }
      while (v18 != a6 >> 1);
    }
    if (v15) {
      uint64_t result = memcpy(__dst, &v118, 8 * v15);
    }
    a5 = *((void *)v14 + 5) - (a5 + a6);
  }
  int v24 = *(_DWORD *)(a2 + 76);
  switch(v24)
  {
    case 0:
      float32x4_t v25 = *(int16x8_t **)(*((void *)v14 + 32) + 8 * __n);
      uint64_t v30 = *(void *)(a2 + 64);
      switch(v30)
      {
        case 1:
          memcpy(*(void **)(*((void *)v14 + 32) + 8 * __n), *__dst, 4 * a6);
          break;
        case 2:
          if (a6)
          {
            uint64_t v41 = 0;
            unint64_t v42 = 0;
            uint64_t v43 = *(float **)(*((void *)v14 + 32) + 8 * __n);
            do
            {
              v123.val[0] = *(float32x4_t *)((char *)*__dst + v41);
              v123.val[1] = *(float32x4_t *)((char *)__dst[1] + v41);
              vst2q_f32(v43, v123);
              v43 += 8;
              v42 += 4;
              v41 += 16;
            }
            while (v42 < a6);
          }
          break;
        case 3:
          if (a6)
          {
            uint64_t v31 = 0;
            unint64_t v32 = 0;
            uint64_t v33 = *(float **)(*((void *)v14 + 32) + 8 * __n);
            do
            {
              v127.val[0] = *(float32x4_t *)((char *)*__dst + v31);
              v127.val[1] = *(float32x4_t *)((char *)__dst[1] + v31);
              v127.val[2] = *(float32x4_t *)((char *)__dst[2] + v31);
              vst3q_f32(v33, v127);
              v33 += 12;
              v32 += 4;
              v31 += 16;
            }
            while (v32 < a6);
          }
          break;
        default:
          if (a6)
          {
            uint64_t v44 = 0;
            unint64_t v45 = 0;
            uint64_t v46 = *(float **)(*((void *)v14 + 32) + 8 * __n);
            do
            {
              v131.val[0] = *(float32x4_t *)((char *)*__dst + v44);
              v131.val[1] = *(float32x4_t *)((char *)__dst[1] + v44);
              v131.val[2] = *(float32x4_t *)((char *)__dst[2] + v44);
              v131.val[3] = *(float32x4_t *)((char *)__dst[3] + v44);
              vst4q_f32(v46, v131);
              v46 += 16;
              v45 += 4;
              v44 += 16;
            }
            while (v45 < a6);
          }
          break;
      }
      if (*(unsigned char *)(a2 + 72))
      {
        unint64_t v47 = *(void *)(a2 + 64) * a6;
        if (v47)
        {
          uint64_t v48 = (unsigned int *)v25;
          do
          {
            unsigned int *v48 = bswap32(*v48);
            ++v48;
            --v47;
          }
          while (v47);
        }
      }
      uint64_t result = *(unsigned char **)(a2 + 32);
      if (!v14[178])
      {
        if (result) {
          goto LABEL_121;
        }
        uint64_t v50 = *(void *)(a2 + 56);
        uint64_t v51 = *(void *)(a2 + 40);
        uint64_t v52 = 4 * *(void *)(a2 + 64);
        goto LABEL_129;
      }
      if (result)
      {
        if (a6)
        {
          uint64_t v49 = 0;
          do
          {
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void, size_t, uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 8))(*(void *)(a2 + 32), __n, a4, a5, 1, (uint64_t)v25->i64 + 4 * v49);
            v49 += *(void *)(a2 + 64);
            ++a5;
            --a6;
          }
          while (a6);
        }
      }
      else if (a6)
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        size_t v55 = 4 * *(void *)(a2 + 64);
        size_t v56 = v55 * a4 + *(void *)(a2 + 56) * a5;
        do
        {
          uint64_t result = memcpy((void *)(*(void *)(a2 + 40) + v56 + *(void *)(a2 + 56) * v54++), (char *)v25 + 4 * v53, v55);
          v53 += *(void *)(a2 + 64);
        }
        while (a6 != v54);
      }
      break;
    case 2:
      float32x4_t v25 = *(int16x8_t **)(*((void *)v14 + 32) + 8 * __n);
      *(float *)&a8 = (float)~(-1 << *(_DWORD *)(a2 + 80));
      float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
      switch(*(void *)(a2 + 64))
      {
        case 1:
          if (a6)
          {
            uint64_t v35 = 0;
            unint64_t v36 = 0;
            do
            {
              int32x4_t v37 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v35), *(float *)&a8), *(float32x4_t *)((char *)&unk_248551470+ 4 * (((_BYTE)a5 + (_BYTE)v36) & 7 | (16 * (a4 & 7))))), (float32x4_t)0), v34));
              *(int16x4_t *)v37.i8 = vqmovun_s32(v37);
              v25->i32[v36 / 4] = vqmovn_u16((uint16x8_t)v37).u32[0];
              v36 += 4;
              v35 += 16;
            }
            while (v36 < a6);
          }
          break;
        case 2:
          if (a6)
          {
            uint64_t v66 = 0;
            unint64_t v67 = 0;
            float32x2x2_t v68 = *(void **)(*((void *)v14 + 32) + 8 * __n);
            do
            {
              float32x4_t v69 = *(float32x4_t *)((char *)&unk_248551470 + 4 * (((_BYTE)a5 + (_BYTE)v67) & 7 | (16 * (a4 & 7))));
              int32x4_t v70 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v66), *(float *)&a8), v69), (float32x4_t)0), v34));
              uint16x8_t v71 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v70), v70);
              float32x4_t v72 = vminnmq_f32(vmaxnmq_f32(vaddq_f32(v69, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v66), *(float *)&a8)), (float32x4_t)0), v34);
              *(uint8x8_t *)v69.f32 = vqmovn_u16(v71);
              int32x4_t v73 = vcvtnq_s32_f32(v72);
              uint8x8_t v74 = vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v73), v73));
              vst2_s8(v118.i8, (int8x8x2_t)v69);
              *v68++ = v118.i64[0];
              v67 += 4;
              v66 += 16;
            }
            while (v67 < a6);
          }
          break;
        case 3:
          if (a6)
          {
            uint64_t v75 = 0;
            unint64_t v76 = 0;
            uint64_t v77 = *(void *)(*((void *)v14 + 32) + 8 * __n);
            do
            {
              float32x4_t v78 = *(float32x4_t *)((char *)&unk_248551470 + 4 * (((_BYTE)a5 + (_BYTE)v76) & 7 | (16 * (a4 & 7))));
              int32x4_t v79 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v75), *(float *)&a8), v78), (float32x4_t)0), v34));
              uint16x8_t v80 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v79), v79);
              int32x4_t v81 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v78, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v75), *(float *)&a8)), (float32x4_t)0), v34));
              v126.val[0] = (int8x8_t)vqmovn_u16(v80);
              v126.val[1] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v81), v81));
              int32x4_t v82 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v78, vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v75), *(float *)&a8)), (float32x4_t)0), v34));
              v126.val[2] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v82), v82));
              vst3_s8(v118.i8, v126);
              *(void *)uint64_t v77 = v118.i64[0];
              *(_DWORD *)(v77 + 8) = v118.i32[2];
              v76 += 4;
              v77 += 12;
              v75 += 16;
            }
            while (v76 < a6);
          }
          break;
        case 4:
          if (a6)
          {
            unint64_t v83 = 0;
            unint64_t v84 = 0;
            do
            {
              float32x4_t v85 = *(float32x4_t *)((char *)&unk_248551470 + 4 * (((_BYTE)a5 + (_BYTE)v84) & 7 | (16 * (a4 & 7))));
              int32x4_t v86 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v83), *(float *)&a8), v85), (float32x4_t)0), v34));
              uint16x8_t v87 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v86), v86);
              int32x4_t v88 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v130.val[0] = (int8x8_t)vqmovn_u16(v87);
              v130.val[1] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v88), v88));
              int32x4_t v89 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v130.val[2] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v89), v89));
              int32x4_t v90 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[3] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v130.val[3] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v90), v90));
              vst4_s8(v118.i8, v130);
              v25[v83 / 0x10] = v118;
              v84 += 4;
              v83 += 16;
            }
            while (v84 < a6);
          }
          break;
        default:
          break;
      }
      uint64_t result = *(unsigned char **)(a2 + 32);
      if (!v14[178])
      {
        if (result) {
          goto LABEL_121;
        }
        uint64_t v92 = *(void *)(a2 + 64);
        int32x4_t v93 = (void *)(*(void *)(a2 + 40) + v92 * a5 + *(void *)(a2 + 56) * a4);
        size_t v94 = v92 * a6;
        goto LABEL_130;
      }
      if (result)
      {
        if (a6)
        {
          uint64_t v91 = 0;
          do
          {
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void, size_t, uint64_t, unint64_t, uint64_t, __int8 *))(a2 + 8))(*(void *)(a2 + 32), __n, a4, a5, 1, &v25->i8[v91]);
            v91 += *(void *)(a2 + 64);
            ++a5;
            --a6;
          }
          while (a6);
        }
      }
      else if (a6)
      {
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        size_t v97 = *(void *)(a2 + 64);
        size_t v98 = v97 * a4 + *(void *)(a2 + 56) * a5;
        do
        {
          uint64_t result = memcpy((void *)(*(void *)(a2 + 40) + v98 + *(void *)(a2 + 56) * v96++), &v25->i8[v95], v97);
          v95 += *(void *)(a2 + 64);
        }
        while (a6 != v96);
      }
      break;
    case 3:
    case 5:
      float32x4_t v25 = *(int16x8_t **)(*((void *)v14 + 32) + 8 * __n);
      if (v24 == 3)
      {
        *(float *)&a8 = (float)~(-1 << *(_DWORD *)(a2 + 80));
        float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        switch(*(void *)(a2 + 64))
        {
          case 1:
            if (a6)
            {
              uint64_t v27 = 0;
              unint64_t v28 = 0;
              uint64_t v29 = *(int16x4_t **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                *v29++ = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v27), *(float *)&a8), (float32x4_t)0), v26)));
                v28 += 4;
                v27 += 16;
              }
              while (v28 < a6);
            }
            break;
          case 2:
            if (a6)
            {
              uint64_t v57 = 0;
              unint64_t v58 = 0;
              do
              {
                v122.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v57 * 16), *(float *)&a8), (float32x4_t)0), v26)));
                v122.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v57 * 16), *(float *)&a8), (float32x4_t)0), v26)));
                i16 = v25[v57].i16;
                vst2_s16(i16, v122);
                v58 += 4;
                ++v57;
              }
              while (v58 < a6);
            }
            break;
          case 3:
            if (a6)
            {
              uint64_t v60 = 0;
              unint64_t v61 = 0;
              float32x2x2_t v62 = *(__int16 **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                v124.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v60), *(float *)&a8), (float32x4_t)0), v26)));
                v124.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v60), *(float *)&a8), (float32x4_t)0), v26)));
                v124.val[2] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v60), *(float *)&a8), (float32x4_t)0), v26)));
                vst3_s16(v62, v124);
                v62 += 12;
                v61 += 4;
                v60 += 16;
              }
              while (v61 < a6);
            }
            break;
          case 4:
            if (a6)
            {
              uint64_t v63 = 0;
              unint64_t v64 = 0;
              int32x4_t v65 = *(__int16 **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                v128.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v128.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v128.val[2] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v128.val[3] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[3] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                vst4_s16(v65, v128);
                v65 += 16;
                v64 += 4;
                v63 += 16;
              }
              while (v64 < a6);
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(void *)(a2 + 64))
        {
          case 1:
            if (a6)
            {
              uint64_t v38 = 0;
              unint64_t v39 = 0;
              float32x4_t v40 = *(float16x4_t **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                *v40++ = vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v38));
                v39 += 4;
                v38 += 16;
              }
              while (v39 < a6);
            }
            break;
          case 2:
            if (a6)
            {
              uint64_t v99 = 0;
              unint64_t v100 = 0;
              do
              {
                v121.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v99 * 16));
                v121.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v99 * 16));
                float32x2x2_t v101 = v25[v99].i16;
                vst2_s16(v101, v121);
                v100 += 4;
                ++v99;
              }
              while (v100 < a6);
            }
            break;
          case 3:
            if (a6)
            {
              uint64_t v102 = 0;
              unint64_t v103 = 0;
              unint64_t v104 = *(__int16 **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                v125.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v102));
                v125.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v102));
                v125.val[2] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[2] + v102));
                vst3_s16(v104, v125);
                v104 += 12;
                v103 += 4;
                v102 += 16;
              }
              while (v103 < a6);
            }
            break;
          case 4:
            if (a6)
            {
              uint64_t v105 = 0;
              unint64_t v106 = 0;
              int32x4_t v107 = *(__int16 **)(*((void *)v14 + 32) + 8 * __n);
              do
              {
                v129.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v105));
                v129.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v105));
                v129.val[2] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[2] + v105));
                v129.val[3] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[3] + v105));
                vst4_s16(v107, v129);
                v107 += 16;
                v106 += 4;
                v105 += 16;
              }
              while (v106 < a6);
            }
            break;
          default:
            break;
        }
      }
      if (*(unsigned char *)(a2 + 72))
      {
        unint64_t v108 = *(void *)(a2 + 64) * a6;
        if (v108)
        {
          unint64_t v109 = 0;
          v110.i64[0] = 0x7000700070007;
          v110.i64[1] = 0x7000700070007;
          int32x4_t v111 = v25;
          do
          {
            *(int8x16_t *)int32x4_t v111 = vorrq_s8((int8x16_t)vshlq_n_s16(*v111, 8uLL), (int8x16_t)vshlq_u16(*(uint16x8_t *)v111, v110));
            ++v111;
            v109 += 8;
          }
          while (v109 < v108);
        }
      }
      uint64_t result = *(unsigned char **)(a2 + 32);
      if (v14[178])
      {
        if (result)
        {
          if (a6)
          {
            uint64_t v112 = 0;
            do
            {
              uint64_t result = (unsigned char *)(*(uint64_t (**)(void, size_t, uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 8))(*(void *)(a2 + 32), __n, a4, a5, 1, (uint64_t)v25->i64 + 2 * v112);
              v112 += *(void *)(a2 + 64);
              ++a5;
              --a6;
            }
            while (a6);
          }
        }
        else if (a6)
        {
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          size_t v116 = 2 * *(void *)(a2 + 64);
          size_t v117 = v116 * a4 + *(void *)(a2 + 56) * a5;
          do
          {
            uint64_t result = memcpy((void *)(*(void *)(a2 + 40) + v117 + *(void *)(a2 + 56) * v115++), (char *)v25 + 2 * v114, v116);
            v114 += *(void *)(a2 + 64);
          }
          while (a6 != v115);
        }
      }
      else if (result)
      {
LABEL_121:
        uint64_t v113 = *(uint64_t (**)(void))(a2 + 8);
        uint64_t result = (unsigned char *)v113();
      }
      else
      {
        uint64_t v50 = *(void *)(a2 + 56);
        uint64_t v51 = *(void *)(a2 + 40);
        uint64_t v52 = 2 * *(void *)(a2 + 64);
LABEL_129:
        int32x4_t v93 = (void *)(v51 + v52 * a5 + v50 * a4);
        size_t v94 = v52 * a6;
LABEL_130:
        uint64_t result = memcpy(v93, v25, v94);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2484BE8E4(uint64_t a1)
{
  sub_2484BE91C(a1);

  JUMPOUT(0x24C579F90);
}

uint64_t sub_2484BE91C(uint64_t a1)
{
  *(void *)a1 = &unk_26FC64380;
  if (*(void *)(a1 + 88)) {
    (*(void (**)(void))(a1 + 72))();
  }
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 192);
  while (v2 != v3)
  {
    if (*(void *)(v2 + 32)) {
      (*(void (**)(void))(v2 + 16))();
    }
    v2 += 96;
  }
  uint64_t v7 = (void **)(a1 + 256);
  sub_2484BD574(&v7);
  uint64_t v7 = (void **)(a1 + 232);
  sub_2484BD574(&v7);
  uint64_t v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(void *)(a1 + 216) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(void *)(a1 + 192) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2484BE9EC()
{
}

const char *sub_2484BEB8C()
{
  return "WriteIB";
}

uint64_t sub_2484BEB98(uint64_t a1, void *a2)
{
  sub_2483F0C3C((uint64_t)v34, *(void *)*a2, *(void *)(*a2 + 8));
  uint64_t v4 = v35;
  if (!v35)
  {
    sub_2483F0E78((uint64_t)v33, (uint64_t)v34);
    sub_24841F728(*(void *)(a1 + 40), (uint64_t)v33, a1 + 48);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(v5 + 416);
    uint64_t v6 = *(void *)(v5 + 424);
    if (v6 != v7)
    {
      do
      {
        uint64_t v8 = v6 - 40;
        sub_2483E8DDC((uint64_t *)(v6 - 16));
        uint64_t v6 = v8;
      }
      while (v8 != v7);
    }
    *(void *)(v5 + 424) = v7;
    uint64_t v9 = *a2;
    if (a2[1] - *a2 < 0x31uLL)
    {
LABEL_20:
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v11 = 3;
      while (1)
      {
        sub_2483EA250((uint64_t)&v28, *(void *)(v9 + v10 + 48), *(void *)(v9 + v10 + 56));
        uint64_t v4 = v32;
        if (v32) {
          break;
        }
        uint64_t v13 = v30;
        uint64_t v12 = v31;
        uint64_t v30 = 0;
        uint64_t v14 = *(uint64_t **)(a1 + 40);
        unint64_t v16 = v14[53];
        unint64_t v15 = v14[54];
        if (v16 >= v15)
        {
          uint64_t v18 = v14[52];
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 3);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x666666666666666) {
            sub_2483E92E8();
          }
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 3);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x333333333333333) {
            unint64_t v22 = 0x666666666666666;
          }
          else {
            unint64_t v22 = v20;
          }
          v36[4] = v14 + 54;
          if (v22) {
            unint64_t v22 = (unint64_t)sub_248403444(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = v22 + 40 * v19;
          v36[0] = v22;
          v36[1] = v24;
          v36[3] = v22 + 40 * v23;
          *(_OWORD *)unint64_t v24 = v28;
          *(void *)(v24 + 16) = v29;
          *(void *)(v24 + 24) = v13;
          *(void *)(v24 + 32) = v12;
          v36[2] = v24 + 40;
          sub_24843F914(v14 + 52, v36);
          uint64_t v17 = v14[53];
          sub_24841F7CC((uint64_t)v36);
        }
        else
        {
          *(_OWORD *)unint64_t v16 = v28;
          *(void *)(v16 + 16) = v29;
          *(void *)(v16 + 24) = v13;
          *(void *)(v16 + 32) = v12;
          uint64_t v17 = v16 + 40;
          v14[53] = v16 + 40;
        }
        v14[53] = v17;
        ++v11;
        uint64_t v9 = *a2;
        v10 += 16;
        if (v11 >= (uint64_t)(a2[1] - *a2) >> 4) {
          goto LABEL_20;
        }
      }
    }
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)&v33[i]);
    if (!v35)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v34[j]);
    }
  }
  return v4;
}

void sub_2484BEDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a16 + i));
  if (!a46)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a31 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484BEE7C()
{
  return 3;
}

uint64_t sub_2484BEE84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = -a4;
  size_t v13 = 4 * a5 + 8 * a4;
  for (uint64_t i = 120; i != 240; i += 40)
  {
    memcpy((void *)(*(void *)(*(void *)(a1 + 40) + i) + *(void *)(*(void *)(a1 + 40) + 112) * a7 + 4 * a6 + 4 * v12), (const void *)(*(void *)(*(void *)(*a2 + v11) + 8 * *(void *)(a1 + 16)) + 4 * v12 + 64), v13);
    v11 += 24;
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 416);
  if (*(void *)(*(void *)(a1 + 40) + 424) != v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 72;
    do
    {
      memcpy((void *)(*(void *)(v15 + v16 + 24) + *(void *)(v15 + v16 + 16) * a7 + 4 * a6 + 4 * v12), (const void *)(*(void *)(*(void *)(*a2 + v18) + 8 * *(void *)(a1 + 16)) + 4 * v12 + 64), v13);
      ++v17;
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 416);
      v18 += 24;
      v16 += 40;
    }
    while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 40) + 424) - v15) >> 3));
  }
  return 0;
}

void sub_2484BEFB0(void *a1)
{
  *a1 = &unk_26FC65E60;
  a1[6] = &unk_26FC65EC8;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_2484BF040(void *a1)
{
  *a1 = &unk_26FC65E60;
  a1[6] = &unk_26FC65EC8;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

const char *sub_2484BF0B0()
{
  return "WriteI3F";
}

uint64_t sub_2484BF0BC(uint64_t a1, uint64_t a2)
{
  sub_2483F0C3C((uint64_t)v7, **(void **)a2, *(void *)(*(void *)a2 + 8));
  uint64_t result = v8;
  if (!v8)
  {
    sub_2483F0E78((uint64_t)v6, (uint64_t)v7);
    sub_2483F7944(*(void *)(a1 + 40), (uint64_t)v6);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)&v6[i]);
    if (!v8)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v7[j]);
    }
    return 0;
  }
  return result;
}

uint64_t sub_2484BF160(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t sub_2484BF170(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = -a4;
  size_t v13 = 4 * a5 + 8 * a4;
  for (uint64_t i = 24; i != 144; i += 40)
  {
    memcpy((void *)(*(void *)(*(void *)(a1 + 40) + i) + *(void *)(*(void *)(a1 + 40) + 16) * a7 + 4 * a6 + 4 * v12), (const void *)(*(void *)(*(void *)(*a2 + v11) + 8 * *(void *)(a1 + 16)) + 4 * v12 + 64), v13);
    v11 += 24;
  }
  return 0;
}

void sub_2484BF214()
{
}

const char *sub_2484BF22C()
{
  return "XYB";
}

BOOL sub_2484BF238(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BF244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(**(void **)a2 + 8 * v5);
  uint64_t v7 = *(void *)(*(void *)(*(void *)a2 + 24) + 8 * v5);
  uint64_t v8 = *(void *)(*(void *)(*(void *)a2 + 48) + 8 * v5);
  uint64_t v9 = -a4;
  uint64_t v10 = a5 + a4;
  if (*(unsigned char *)(a1 + 232))
  {
    if (a5 + a4 > -a4)
    {
      uint64_t v11 = 64 - 4 * a4;
      uint64_t v12 = (float32x4_t *)(v8 + v11);
      size_t v13 = (float32x4_t *)(v7 + v11);
      uint64_t v14 = (float32x4_t *)(v6 + v11);
      float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3C7C1620u);
      float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x41B7F760u);
      float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3F976C8Cu);
      float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3E8E2F4Cu);
      float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3FC0462Bu);
      do
      {
        float32x4_t v20 = vmulq_f32(vaddq_f32(*v13, (float32x4_t)0), v17);
        float32x4_t v21 = vmulq_f32(vaddq_f32(vsubq_f32(*v12, *v13), v18), v19);
        *uint64_t v14 = vmulq_f32(vaddq_f32(*v14, v15), v16);
        ++v14;
        *v13++ = v20;
        *v12++ = v21;
        v9 += 4;
      }
      while (v9 < v10);
    }
  }
  else if (a5 + a4 > -a4)
  {
    uint64_t v22 = 64 - 4 * a4;
    uint64_t v23 = (float32x4_t *)(v8 + v22);
    unint64_t v24 = (float32x4_t *)(v7 + v22);
    float32x4_t v25 = (float32x4_t *)(v6 + v22);
    do
    {
      int32x4_t v26 = *(int32x4_t *)(a1 + 184);
      uint64_t v27 = (const float *)(a1 + 200);
      float32x4_t v28 = vld1q_dup_f32(v27);
      float32x4_t v29 = vsubq_f32(vaddq_f32(*v25, *v24), v28);
      uint64_t v30 = (const float *)(a1 + 204);
      float32x4_t v31 = vld1q_dup_f32(v30);
      float32x4_t v32 = vsubq_f32(vsubq_f32(*v24, *v25), v31);
      uint64_t v33 = (const float *)(a1 + 208);
      float32x4_t v34 = vld1q_dup_f32(v33);
      float32x4_t v35 = vsubq_f32(*v23, v34);
      float32x4_t v36 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0), v29, vmulq_f32(v29, v29));
      float32x4_t v37 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), v32, vmulq_f32(v32, v32));
      float32x4_t v38 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(v26, 2), v35, vmulq_f32(v35, v35));
      float32x4_t v39 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 88), v36), v37, *(float32x4_t *)(a1 + 104)), v38, *(float32x4_t *)(a1 + 120));
      float32x4_t v40 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 136), v36), v37, *(float32x4_t *)(a1 + 152)), v38, *(float32x4_t *)(a1 + 168));
      *v25++ = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 40), v36), v37, *(float32x4_t *)(a1 + 56)), v38, *(float32x4_t *)(a1 + 72));
      *v24++ = v39;
      *v23++ = v40;
      v9 += 4;
    }
    while (v9 < v10);
  }
  return 0;
}

void sub_2484BF3F4()
{
}

const char *sub_2484BF40C()
{
  return "YCbCr";
}

BOOL sub_2484BF418(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2484BF424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(float32x4_t **)(*(void *)(*(void *)a2 + 48) + 8 * v6);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3F008081u);
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0x3FB374BCu);
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0xBEB032A1);
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0xBF36D1A2);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3FE2D0E5u);
    size_t v13 = (float32x4_t *)(*(void *)(**(void **)a2 + 8 * v6) + 64);
    uint64_t v14 = (float32x4_t *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v6) + 64);
    float32x4_t v15 = v7 + 4;
    do
    {
      float32x4_t v16 = vaddq_f32(*v14, v8);
      float32x4_t v17 = vmlaq_f32(v16, v9, *v15);
      float32x4_t v18 = vmlaq_f32(vmlaq_f32(v16, v10, *v13), v11, *v15);
      float32x4_t v19 = vmlaq_f32(v16, v12, *v13);
      *v13++ = v17;
      *v14++ = v18;
      *v15++ = v19;
      v5 += 4;
    }
    while (v5 < a5);
  }
  return 0;
}

void sub_2484BF4DC()
{
}

uint64_t *sub_2484BF4F4(void *a1, unsigned int a2)
{
  uint64_t v4 = a1 + 239;
  sub_2484BFB04((uint64_t)(a1 + 239), 4 * (a1[248] - a1[247]) + 1000);
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[239];
  uint64_t v7 = a1[241];
  uint64_t v8 = a1[243];
  ++a1[242];
  *(void *)(v6 + v7) = v8;
  unint64_t v9 = a1[242];
  uint64_t v10 = v9 & 7;
  uint64_t v11 = a1[243] >> (v9 & 0xF8);
  unint64_t v12 = a1[241] + (v9 >> 3);
  a1[241] = v12;
  uint64_t v13 = a1[239];
  a1[243] = v11;
  a1[242] = v10 + 2;
  *(void *)(v13 + v12) = v11;
  unint64_t v14 = a1[242];
  uint64_t v15 = v14 & 7;
  uint64_t v16 = a1[243] >> (v14 & 0xF8);
  unint64_t v17 = a1[241] + (v14 >> 3);
  a1[241] = v17;
  uint64_t v18 = a1[239];
  uint64_t v19 = v16 | (1 << v15);
  a1[243] = v19;
  a1[242] = v15 + 1;
  *(void *)(v18 + v17) = v19;
  unint64_t v20 = a1[242];
  uint64_t v21 = v20 & 7;
  uint64_t v22 = a1[243] >> (v20 & 0xF8);
  unint64_t v23 = a1[241] + (v20 >> 3);
  a1[241] = v23;
  uint64_t v24 = a1[239];
  a1[243] = v22;
  a1[242] = v21 + 2;
  *(void *)(v24 + v23) = v22;
  unint64_t v25 = a1[242];
  uint64_t v26 = v25 & 7;
  uint64_t v27 = a1[243] >> (v25 & 0xF8);
  unint64_t v28 = a1[241] + (v25 >> 3);
  a1[241] = v28;
  uint64_t v29 = a1[239];
  a1[243] = v27;
  a1[242] = v26 + 1;
  *(void *)(v29 + v28) = v27;
  unint64_t v30 = a1[242];
  uint64_t v31 = v30 & 7;
  uint64_t v32 = a1[243] >> (v30 & 0xF8);
  unint64_t v33 = a1[241] + (v30 >> 3);
  a1[241] = v33;
  uint64_t v34 = a1[239];
  a1[243] = v32;
  a1[242] = v31 + 2;
  *(void *)(v34 + v33) = v32;
  unint64_t v35 = a1[242];
  uint64_t v36 = v35 & 7;
  uint64_t v37 = a1[243] >> (v35 & 0xF8);
  unint64_t v38 = a1[241] + (v35 >> 3);
  a1[241] = v38;
  if (v5 == 4 || v5 == 2)
  {
    uint64_t v39 = a1[239];
    a1[243] = v37;
    a1[242] = v36 + 2;
    *(void *)(v39 + v38) = v37;
    unint64_t v40 = a1[242];
    uint64_t v36 = v40 & 7;
    uint64_t v37 = a1[243] >> (v40 & 0xF8);
    unint64_t v38 = a1[241] + (v40 >> 3);
    a1[241] = v38;
  }
  uint64_t v41 = a1[239];
  uint64_t v42 = v37 | (1 << v36);
  a1[243] = v42;
  a1[242] = v36 + 2;
  *(void *)(v41 + v38) = v42;
  unint64_t v43 = a1[242];
  uint64_t v44 = v43 & 7;
  uint64_t v45 = a1[243] >> (v43 & 0xF8);
  unint64_t v46 = a1[241] + (v43 >> 3);
  a1[241] = v46;
  uint64_t v47 = a1[239];
  a1[243] = v45;
  a1[242] = v44 + 2;
  *(void *)(v47 + v46) = v45;
  unint64_t v48 = a1[242];
  uint64_t v49 = v48 & 7;
  uint64_t v50 = a1[243] >> (v48 & 0xF8);
  unint64_t v51 = a1[241] + (v48 >> 3);
  a1[241] = v51;
  uint64_t v52 = a1[239];
  a1[243] = v50;
  a1[242] = v49 + 1;
  *(void *)(v52 + v51) = v50;
  unint64_t v53 = a1[242];
  uint64_t v54 = v53 & 7;
  uint64_t v55 = a1[243] >> (v53 & 0xF8);
  unint64_t v56 = a1[241] + (v53 >> 3);
  a1[241] = v56;
  uint64_t v57 = a1[239];
  a1[243] = v55;
  a1[242] = v54 + 2;
  *(void *)(v57 + v56) = v55;
  unint64_t v58 = a1[242];
  uint64_t v59 = v58 & 7;
  uint64_t v60 = a1[243] >> (v58 & 0xF8);
  unint64_t v61 = a1[241] + (v58 >> 3);
  a1[241] = v61;
  if (v5 == 4 || v5 == 2)
  {
    uint64_t v62 = a1[239];
    a1[243] = v60;
    a1[242] = v59 + 2;
    *(void *)(v62 + v61) = v60;
    unint64_t v63 = a1[242];
    uint64_t v59 = v63 & 7;
    uint64_t v60 = a1[243] >> (v63 & 0xF8);
    unint64_t v61 = a1[241] + (v63 >> 3);
    a1[241] = v61;
  }
  uint64_t v64 = a1[239];
  unint64_t v65 = v60 | ((unint64_t)a2 << v59);
  a1[243] = v65;
  a1[242] = v59 + 1;
  *(void *)(v64 + v61) = v65;
  unint64_t v66 = a1[242];
  uint64_t v67 = v66 & 7;
  uint64_t v68 = a1[243] >> (v66 & 0xF8);
  a1[243] = v68;
  unint64_t v69 = a1[241] + (v66 >> 3);
  a1[241] = v69;
  if (!a2)
  {
    uint64_t v70 = a1[239];
    a1[242] = v67 + 2;
    *(void *)(v70 + v69) = v68;
    unint64_t v71 = a1[242];
    uint64_t v67 = v71 & 7;
    uint64_t v68 = a1[243] >> (v71 & 0xF8);
    a1[243] = v68;
    unint64_t v69 = a1[241] + (v71 >> 3);
    a1[241] = v69;
  }
  uint64_t v72 = a1[239];
  a1[242] = v67 + 2;
  *(void *)(v72 + v69) = v68;
  unint64_t v73 = a1[242];
  uint64_t v74 = v73 & 7;
  uint64_t v75 = a1[243] >> (v73 & 0xF8);
  unint64_t v76 = a1[241] + (v73 >> 3);
  a1[241] = v76;
  uint64_t v77 = a1[239];
  a1[243] = v75;
  a1[242] = v74 + 1;
  *(void *)(v77 + v76) = v75;
  unint64_t v78 = a1[242];
  uint64_t v79 = v78 & 7;
  uint64_t v80 = a1[243] >> (v78 & 0xF8);
  unint64_t v81 = a1[241] + (v78 >> 3);
  a1[241] = v81;
  uint64_t v82 = a1[239];
  a1[243] = v80;
  a1[242] = v79 + 1;
  *(void *)(v82 + v81) = v80;
  unint64_t v83 = a1[242];
  uint64_t v84 = v83 & 7;
  uint64_t v85 = a1[243] >> (v83 & 0xF8);
  unint64_t v86 = a1[241] + (v83 >> 3);
  a1[241] = v86;
  uint64_t v87 = a1[239];
  a1[243] = v85;
  a1[242] = v84 + 2;
  *(void *)(v87 + v86) = v85;
  unint64_t v88 = a1[242];
  uint64_t v89 = v88 & 7;
  uint64_t v90 = a1[243] >> (v88 & 0xF8);
  unint64_t v91 = a1[241] + (v88 >> 3);
  a1[241] = v91;
  uint64_t v92 = a1[239];
  a1[243] = v90;
  a1[242] = v89 + 2;
  *(void *)(v92 + v91) = v90;
  unint64_t v93 = a1[242];
  uint64_t v94 = v93 & 7;
  uint64_t v95 = a1[243] >> (v93 & 0xF8);
  unint64_t v96 = a1[241] + (v93 >> 3);
  a1[241] = v96;
  uint64_t v97 = a1[239];
  a1[243] = v95;
  a1[242] = v94 + 2;
  *(void *)(v97 + v96) = v95;
  unint64_t v98 = a1[242];
  uint64_t v99 = v98 & 7;
  uint64_t v100 = a1[243] >> (v98 & 0xF8);
  unint64_t v101 = a1[241] + (v98 >> 3);
  a1[241] = v101;
  uint64_t v102 = a1[239];
  a1[243] = v100;
  a1[242] = v99 + 1;
  *(void *)(v102 + v101) = v100;
  unint64_t v103 = a1[242];
  a1[242] = v103 & 7;
  a1[243] >>= v103 & 0xF8;
  a1[241] += v103 >> 3;
  sub_2484BFB54(v4);
  uint64_t v104 = a1[247];
  if (a1[248] != v104)
  {
    unint64_t v105 = 0;
    do
    {
      unint64_t v106 = *(void *)(v104 + 8 * v105);
      uint64_t v107 = 1;
      while (v107 != 4)
      {
        unint64_t v108 = qword_248551720[v107++];
        if (v108 > v106)
        {
          uint64_t v109 = v107 - 2;
          goto LABEL_16;
        }
      }
      uint64_t v109 = 3;
LABEL_16:
      uint64_t v110 = a1[239];
      uint64_t v111 = a1[241];
      uint64_t v112 = a1[242];
      uint64_t v113 = a1[243] | (v109 << v112);
      a1[243] = v113;
      a1[242] = v112 + 2;
      *(void *)(v110 + v111) = v113;
      unint64_t v114 = a1[242];
      uint64_t v115 = v114 & 7;
      uint64_t v116 = a1[243] >> (v114 & 0xF8);
      unint64_t v117 = a1[241] + (v114 >> 3);
      a1[241] = v117;
      uint64_t v118 = (LODWORD(qword_248551700[v109]) - 2);
      unint64_t v119 = v106 - qword_248551720[v109];
      uint64_t v120 = a1[239];
      uint64_t v121 = (v119 << v115) | v116;
      a1[243] = v121;
      a1[242] = v118 + v115;
      *(void *)(v120 + v117) = v121;
      unint64_t v122 = a1[242];
      a1[242] = v122 & 7;
      a1[243] >>= v122 & 0xF8;
      a1[241] += v122 >> 3;
      ++v105;
      uint64_t v104 = a1[247];
    }
    while (v105 < (a1[248] - v104) >> 3);
  }

  return sub_2484BFB54(v4);
}

uint64_t sub_2484BFB04(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = malloc_type_malloc((a2 >> 3) + 64, 0x8F06D546uLL);
  uint64_t result = *(void *)a1;
  *(void *)a1 = v3;
  if (result) {
    return (*(uint64_t (**)(void))(a1 + 8))();
  }
  return result;
}

uint64_t *sub_2484BFB54(uint64_t *result)
{
  uint64_t v1 = result[3];
  if (v1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = result[2];
    uint64_t v4 = result[4];
    result[3] = (8 - v1) + v1;
    *(void *)(v2 + v3) = v4;
    uint64_t v6 = result[2];
    unint64_t v5 = result[3];
    unint64_t v7 = (unint64_t)result[4] >> (v5 & 0xF8);
    result[3] = v5 & 7;
    result[4] = v7;
    result[2] = v6 + (v5 >> 3);
  }
  return result;
}

char *sub_2484BFBA0(char *result, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  while (a2)
  {
    sub_24848807C(&__dst, a3, 1uLL, a2);
    uint64_t v6 = __dst;
    uint64_t v8 = (char *)__dst;
    long long v9 = v12;
    uint64_t v10 = v13;
    __dst = 0;
    *(void *)&long long v12 = 0;
    if (a2 >= (unint64_t)v9) {
      size_t v7 = v9;
    }
    else {
      size_t v7 = a2;
    }
    if (v7)
    {
      memcpy(v6, v5, v7);
      v8 += v7;
      *(void *)&long long v9 = v9 - v7;
      *((void *)&v9 + 1) += v7;
      v5 += v7;
      a2 -= v7;
    }
    uint64_t result = (char *)sub_24845C478(&v8);
    if (v14)
    {
      if (!v7) {
        return result;
      }
    }
    else
    {
      uint64_t result = (char *)sub_24845C478(&__dst);
      if (!v7) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_2484BFC70(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 1976);
    if (v2)
    {
      *(void *)(v1 + 1984) = v2;
      operator delete(v2);
    }
    unint64_t v5 = (void **)(v1 + 1952);
    sub_2484BFD18(&v5);
    uint64_t v3 = *(void *)(v1 + 1912);
    *(void *)(v1 + 1912) = 0;
    if (v3) {
      (*(void (**)(void))(v1 + 1920))();
    }
    uint64_t v4 = *(void **)(v1 + 1888);
    if (v4)
    {
      *(void *)(v1 + 1896) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x24C579F90);
  }
  return result;
}

void sub_2484BFD18(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_2484BFD6C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2484BFD6C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 160)
  {
    uint64_t v5 = 0;
    uint64_t v6 = i;
    do
    {
      uint64_t result = *(void *)(v6 + v5 - 40);
      *(void *)(v6 + v5 - 40) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(void))(v6 + v5 - 32))();
      }
      v5 -= 40;
    }
    while (v5 != -160);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void sub_2484BFDEC(long long *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7)
{
  unint64_t v8 = a3;
  uint64_t v9 = a2;
  v240[107] = *MEMORY[0x263EF8340];
  if (a5 <= 8)
  {
    long long v10 = a1[1];
    long long v222 = *a1;
    long long v223 = v10;
    long long v224 = a1[2];
    *(void *)&long long v221 = a2;
    *((void *)&v221 + 1) = a5;
    *((void *)&v220 + 1) = a3;
    uint64_t v212 = a4;
    HIBYTE(v218) = a6 != 0;
    sub_2483E9AC0(&v219, 0x10000uLL);
    sub_2484C26C8((char **)&__p);
    *(_WORD *)__p = 0;
    BOOL v11 = *((void *)&v221 + 1) != 8 || a7 == 0;
    int v12 = v11;
    BYTE14(v218) = v12;
    int v13 = v12 ^ 1;
    if (v8 && (v12 & 1) == 0)
    {
      unint64_t v14 = 0;
      char v15 = v12;
      do
      {
        if (v8 - v14 >= 0x100) {
          unint64_t v16 = 256;
        }
        else {
          unint64_t v16 = v8 - v14;
        }
        if (v9 && !v15)
        {
          unint64_t v17 = 0;
          do
          {
            if (v9 - v17 >= 0x100) {
              unint64_t v18 = 256;
            }
            else {
              unint64_t v18 = v9 - v17;
            }
            v238[0] = 0;
            uint64_t v19 = ((uint64_t (*)(void, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v223)(v222, v17, v14, v18, v16, v238);
            if (v16 && !BYTE14(v218))
            {
              unint64_t v20 = 1;
              do
              {
                uint64_t v21 = (__int32 *)(v19 + (unint64_t)v238[0] * (v20 - 1));
                uint64_t v22 = v212;
                if (v212 == 1)
                {
                  int v23 = sub_2484C2714(v19 + (unint64_t)v238[0] * (v20 - 1), v18, v219);
                  BYTE14(v218) = v23;
                  uint64_t v22 = 1;
                }
                else
                {
                  int v23 = 0;
                }
                if (v22 == 2)
                {
                  int v23 = sub_2484C2884(v21, v18, v219);
                  BYTE14(v218) = v23;
                  uint64_t v22 = v212;
                }
                if (v22 == 3)
                {
                  int v23 = sub_2484C29F8(v21, v18, v219);
                  BYTE14(v218) = v23;
                  uint64_t v22 = v212;
                }
                if (v22 == 4)
                {
                  int v23 = sub_2484C2B74((uint64_t)v21, v18, v219);
                  BYTE14(v218) = v23;
                }
                if (v20 >= v16) {
                  break;
                }
                ++v20;
              }
              while (!v23);
            }
            (*((void (**)(void, uint64_t))&v224 + 1))(v222, v19);
            v17 += 256;
            uint64_t v9 = v221;
            LOBYTE(v12) = BYTE14(v218);
          }
          while (v17 < (unint64_t)v221 && BYTE14(v218) == 0);
          unint64_t v8 = *((void *)&v220 + 1);
          char v15 = BYTE14(v218);
        }
        v14 += 256;
        int v13 = v15 == 0;
        if (v14 >= v8) {
          break;
        }
        BOOL v11 = v15 == 0;
        char v15 = 0;
      }
      while (v11);
    }
    if (v13)
    {
      uint64_t v25 = 0;
      unsigned __int8 v26 = 0;
      char v27 = 0;
      int v28 = 0;
      uint64_t v29 = v219;
      unsigned __int8 v30 = -1;
      while (1)
      {
        int v31 = *(_DWORD *)(v29 + v25);
        if (v31)
        {
          *(_DWORD *)(v29 + 4 * v28) = v31;
          LOBYTE(v31) = v31 != BYTE1(v31) || v31 != BYTE2(v31);
          v27 |= v31;
          if (BYTE1(v31) < v30) {
            unsigned __int8 v30 = BYTE1(v31);
          }
          if (BYTE1(v31) > v26) {
            unsigned __int8 v26 = BYTE1(v31);
          }
          int v33 = v28 + 1;
          if (v28 >= 511)
          {
            int v12 = 1;
            BYTE14(v218) = 1;
            if (v27) {
              goto LABEL_134;
            }
LABEL_297:
            int v34 = 1;
            int v28 = v33;
            if ((float)((float)v33 * 1.4) > (float)(v26 - v30))
            {
              BYTE14(v218) = 1;
              int v12 = 1;
              goto LABEL_134;
            }
LABEL_132:
            if (!(_BYTE)v12)
            {
              v238[0] = (unsigned int **)&v212;
              unint64_t v94 = 126 - 2 * __clz(v28);
              uint64_t v95 = v28 ? v94 : 0;
              sub_2484C2CBC(v219, (unsigned int *)(v219 + 4 * v28), v238, v95, 1);
              if (v28 >= 1)
              {
                unint64_t v96 = (int *)v219;
                uint64_t v97 = __p;
                uint64_t v98 = v28;
                while (1)
                {
                  int v100 = *v96++;
                  int v99 = v100;
                  if (!v100) {
                    break;
                  }
                  int v12 = v34 + 1;
                  v97[(-1640531535 * v99) >> 16] = v34++;
                  if (!--v98) {
                    goto LABEL_134;
                  }
                }
              }
            }
            int v12 = v34;
LABEL_134:
            unint64_t v71 = (unint64_t)(v221 + 255) >> 8;
            unint64_t v72 = (unint64_t)(*((void *)&v220 + 1) + 255) >> 8;
            bzero(&v239, 0x260uLL);
            bzero(v238, 0x420uLL);
            BOOL v74 = v71 == 1 && v72 == 1;
            BYTE13(v218) = v74;
            v213[0] = (uint64_t)&v220 + 8;
            v213[1] = (uint64_t)&v221;
            v214[0] = (uint64_t)&v222;
            v214[1] = (uint64_t)&v239;
            v215[0] = (uint64_t)v238;
            v215[1] = (uint64_t)&v218 + 13;
            *(void *)&long long v216 = (char *)&v218 + 14;
            *((void *)&v216 + 1) = (char *)&v221 + 8;
            *(void *)&long long v217 = &v212;
            *((void *)&v217 + 1) = (char *)&v218 + 15;
            *(void *)&long long v218 = &__p;
            if (a7)
            {
              if (v72 * v71)
              {
                unint64_t v75 = 0;
                do
                {
                  unint64_t v76 = *((void *)&v220 + 1) - ((v75 / v71) << 8);
                  if (v76 >= 0x100) {
                    unint64_t v76 = 256;
                  }
                  sub_2484C4418((uint64_t)v213, v75 % v71, v75 / v71, v76 >> 6);
                  ++v75;
                }
                while (v72 * v71 != v75);
              }
            }
            else
            {
              sub_2484C4418((uint64_t)v213, (v71 - 1) >> 1, (v72 - 1) >> 1, 4 * v72 * v71);
            }
            long long v231 = xmmword_248551908;
            long long v232 = unk_248551918;
            long long v233 = xmmword_248551928;
            long long v227 = xmmword_2485518C8;
            long long v228 = unk_2485518D8;
            long long v229 = xmmword_2485518E8;
            long long v230 = unk_2485518F8;
            long long v225 = xmmword_2485518A8;
            long long v226 = unk_2485518B8;
            int v77 = BYTE14(v218);
            if (BYTE14(v218)) {
              BOOL v78 = (unint64_t)v212 > 2;
            }
            else {
              BOOL v78 = 0;
            }
            BOOL v79 = v78 || BYTE14(v218) == 0;
            uint64_t v234 = 1;
            BOOL v80 = !v79 && v12 <= 255;
            uint64_t v81 = 2;
            if (!v80) {
              uint64_t v81 = 3;
            }
            if ((unint64_t)(v81 + *((void *)&v221 + 1)) <= 0x12) {
              bzero((char *)&v225 + 8 * v81 + 8 * *((void *)&v221 + 1), 152 - 8 * (v81 + *((void *)&v221 + 1)));
            }
            uint64_t v82 = 0;
            unint64_t v83 = &v239;
            do
            {
              for (uint64_t i = 0; i != 19; ++i)
                v83->i64[i] = *(void *)((char *)&v225 + i * 8) + (v83->i64[i] << 8);
              ++v82;
              unint64_t v83 = (int64x2_t *)((char *)v83 + 152);
            }
            while (v82 != 4);
            if (!v77)
            {
              unsigned int v85 = (2 * (v12 - 1)) ^ ((v12 - 1) >> 31);
              unsigned int v86 = 33 - __clz(v85);
              if (v85) {
                uint64_t v87 = v86;
              }
              else {
                uint64_t v87 = 1;
              }
              unint64_t v88 = &v239;
              uint64_t v89 = v87;
              do
              {
                uint64_t v90 = v88->i64[0];
                if (v88->i64[0] <= 1uLL) {
                  uint64_t v90 = 1;
                }
                v88->i64[0] = v90;
                unint64_t v88 = (int64x2_t *)((char *)v88 + 8);
                --v89;
              }
              while (v89);
              if (v87 <= 9) {
                memset_pattern16((char *)&v239 + 8 * v87, &xmmword_2484DCB90, 80 - 8 * v87);
              }
            }
            uint64_t v91 = 0;
            for (uint64_t j = v238; ; j += 33)
            {
              for (uint64_t k = 0; k != 33; ++k)
                j[k] = (unsigned int **)(qword_248551940[k] + ((void)j[k] << 8));
              if (++v91 == 4) {
                operator new();
              }
            }
          }
          ++v28;
        }
        v25 += 4;
        if (v25 == 0x40000)
        {
          if ((v27 & 1) == 0)
          {
            int v33 = v28;
            goto LABEL_297;
          }
          int v34 = 1;
          goto LABEL_132;
        }
      }
    }
    int v28 = 0;
    int v34 = 0;
    goto LABEL_132;
  }
  if (a5 <= 0xD)
  {
    long long v35 = a1[1];
    long long v222 = *a1;
    long long v223 = v35;
    long long v224 = a1[2];
    *(void *)&long long v221 = a2;
    *((void *)&v221 + 1) = a5;
    *((void *)&v220 + 1) = a3;
    uint64_t v212 = a4;
    HIBYTE(v218) = a6 != 0;
    sub_2483E9AC0(&v219, 0x10000uLL);
    sub_2484C26C8((char **)&__p);
    *(_WORD *)__p = 0;
    int v37 = *((void *)&v221 + 1) != 8 || a7 == 0;
    BYTE14(v218) = v37;
    int v38 = v37 ^ 1;
    if (v8 && (v37 & 1) == 0)
    {
      unint64_t v39 = 0;
      char v40 = v37;
      do
      {
        if (v8 - v39 >= 0x100) {
          unint64_t v41 = 256;
        }
        else {
          unint64_t v41 = v8 - v39;
        }
        if (v9 && !v40)
        {
          unint64_t v42 = 0;
          do
          {
            if (v9 - v42 >= 0x100) {
              unint64_t v43 = 256;
            }
            else {
              unint64_t v43 = v9 - v42;
            }
            v238[0] = 0;
            uint64_t v44 = ((uint64_t (*)(void, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v223)(v222, v42, v39, v43, v41, v238);
            if (v41 && !BYTE14(v218))
            {
              unint64_t v45 = 1;
              do
              {
                unint64_t v46 = (__int32 *)(v44 + (unint64_t)v238[0] * (v45 - 1));
                uint64_t v47 = v212;
                if (v212 == 1)
                {
                  int v48 = sub_2484C2714(v44 + (unint64_t)v238[0] * (v45 - 1), v43, v219);
                  BYTE14(v218) = v48;
                  uint64_t v47 = 1;
                }
                else
                {
                  int v48 = 0;
                }
                if (v47 == 2)
                {
                  int v48 = sub_2484C2884(v46, v43, v219);
                  BYTE14(v218) = v48;
                  uint64_t v47 = v212;
                }
                if (v47 == 3)
                {
                  int v48 = sub_2484C29F8(v46, v43, v219);
                  BYTE14(v218) = v48;
                  uint64_t v47 = v212;
                }
                if (v47 == 4)
                {
                  int v48 = sub_2484C2B74((uint64_t)v46, v43, v219);
                  BYTE14(v218) = v48;
                }
                if (v45 >= v41) {
                  break;
                }
                ++v45;
              }
              while (!v48);
            }
            (*((void (**)(void, uint64_t))&v224 + 1))(v222, v44);
            v42 += 256;
            uint64_t v9 = v221;
            LOBYTE(v37) = BYTE14(v218);
          }
          while (v42 < (unint64_t)v221 && BYTE14(v218) == 0);
          unint64_t v8 = *((void *)&v220 + 1);
          char v40 = BYTE14(v218);
        }
        v39 += 256;
        int v38 = v40 == 0;
        if (v39 >= v8) {
          break;
        }
        BOOL v11 = v40 == 0;
        char v40 = 0;
      }
      while (v11);
    }
    if (v38)
    {
      uint64_t v50 = 0;
      unsigned __int8 v51 = 0;
      char v52 = 0;
      int v53 = 0;
      uint64_t v54 = v219;
      unsigned __int8 v55 = -1;
      while (1)
      {
        int v56 = *(_DWORD *)(v54 + v50);
        if (v56)
        {
          *(_DWORD *)(v54 + 4 * v53) = v56;
          LOBYTE(v56) = v56 != BYTE1(v56) || v56 != BYTE2(v56);
          v52 |= v56;
          if (BYTE1(v56) < v55) {
            unsigned __int8 v55 = BYTE1(v56);
          }
          if (BYTE1(v56) > v51) {
            unsigned __int8 v51 = BYTE1(v56);
          }
          int v58 = v53 + 1;
          if (v53 >= 511)
          {
            int v37 = 1;
            BYTE14(v218) = 1;
            if (v52) {
              goto LABEL_248;
            }
LABEL_358:
            int v59 = 1;
            int v53 = v58;
            if ((float)((float)v58 * 1.4) > (float)(v51 - v55))
            {
              BYTE14(v218) = 1;
              int v37 = 1;
              goto LABEL_248;
            }
LABEL_246:
            if (!(_BYTE)v37)
            {
              v238[0] = (unsigned int **)&v212;
              unint64_t v153 = 126 - 2 * __clz(v53);
              uint64_t v154 = v53 ? v153 : 0;
              sub_2484C5664(v219, (unsigned int *)(v219 + 4 * v53), v238, v154, 1);
              if (v53 >= 1)
              {
                unint64_t v155 = (int *)v219;
                uint64_t v156 = __p;
                uint64_t v157 = v53;
                while (1)
                {
                  int v159 = *v155++;
                  int v158 = v159;
                  if (!v159) {
                    break;
                  }
                  int v37 = v59 + 1;
                  v156[(-1640531535 * v158) >> 16] = v59++;
                  if (!--v157) {
                    goto LABEL_248;
                  }
                }
              }
            }
            int v37 = v59;
LABEL_248:
            unint64_t v126 = (unint64_t)(v221 + 255) >> 8;
            unint64_t v127 = (unint64_t)(*((void *)&v220 + 1) + 255) >> 8;
            bzero(&v239, 0x260uLL);
            bzero(v238, 0x420uLL);
            BOOL v133 = v126 == 1 && v127 == 1;
            BYTE13(v218) = v133;
            v213[0] = (uint64_t)&v220 + 8;
            v213[1] = (uint64_t)&v221;
            v214[0] = (uint64_t)&v222;
            v214[1] = (uint64_t)&v239;
            v215[0] = (uint64_t)v238;
            v215[1] = (uint64_t)&v218 + 13;
            *(void *)&long long v216 = (char *)&v218 + 14;
            *((void *)&v216 + 1) = (char *)&v221 + 8;
            *(void *)&long long v217 = &v212;
            *((void *)&v217 + 1) = (char *)&v218 + 15;
            *(void *)&long long v218 = &__p;
            if (a7)
            {
              if (v127 * v126)
              {
                unint64_t v134 = 0;
                do
                {
                  unint64_t v135 = *((void *)&v220 + 1) - ((v134 / v126) << 8);
                  if (v135 >= 0x100) {
                    unint64_t v135 = 256;
                  }
                  sub_2484C6DC0((uint64_t)v213, v134 % v126, v134 / v126, v135 >> 6, v128, v129, v130, v131, v198, v199, v200, v201, v202, v203, v204, v205, v207, (uint64_t)v208, (uint64_t)v209,
                    v210,
                    v211,
                    v212,
                    v213[0],
                    v213[1],
                    v214[0],
                    v214[1],
                    v215[0],
                    v215[1],
                    v216,
                    v217,
                    v218,
                    v219,
                    v220,
                    v221,
                    v222,
                    *((uint64_t *)&v222 + 1),
                    v223,
                    *((uint64_t *)&v223 + 1),
                    v224,
                    *((uint64_t *)&v224 + 1),
                    v225,
                    *((uint64_t *)&v225 + 1));
                  ++v134;
                }
                while (v127 * v126 != v134);
              }
            }
            else
            {
              sub_2484C6DC0((uint64_t)v213, (v126 - 1) >> 1, (v127 - 1) >> 1, 4 * v127 * v126, v128, v129, v130, v131, v198, v199, v200, v201, v202, v203, v204, v205, v207, (uint64_t)v208, (uint64_t)v209,
                v210,
                v211,
                v212,
                v213[0],
                v213[1],
                v214[0],
                v214[1],
                v215[0],
                v215[1],
                v216,
                v217,
                v218,
                v219,
                v220,
                v221,
                v222,
                *((uint64_t *)&v222 + 1),
                v223,
                *((uint64_t *)&v223 + 1),
                v224,
                *((uint64_t *)&v224 + 1),
                v225,
                *((uint64_t *)&v225 + 1));
            }
            long long v231 = xmmword_248551908;
            long long v232 = unk_248551918;
            long long v233 = xmmword_248551928;
            long long v227 = xmmword_2485518C8;
            long long v228 = unk_2485518D8;
            long long v229 = xmmword_2485518E8;
            long long v230 = unk_2485518F8;
            long long v225 = xmmword_2485518A8;
            long long v226 = unk_2485518B8;
            int v136 = BYTE14(v218);
            if (BYTE14(v218)) {
              BOOL v137 = (unint64_t)v212 > 2;
            }
            else {
              BOOL v137 = 0;
            }
            BOOL v138 = v137 || BYTE14(v218) == 0;
            uint64_t v234 = 1;
            BOOL v139 = !v138 && v37 <= 255;
            uint64_t v140 = 2;
            if (!v139) {
              uint64_t v140 = 3;
            }
            if ((unint64_t)(v140 + *((void *)&v221 + 1)) <= 0x12) {
              bzero((char *)&v225 + 8 * v140 + 8 * *((void *)&v221 + 1), 152 - 8 * (v140 + *((void *)&v221 + 1)));
            }
            uint64_t v141 = 0;
            uint64_t v142 = &v239;
            do
            {
              for (uint64_t m = 0; m != 19; ++m)
                v142->i64[m] = *(void *)((char *)&v225 + m * 8) + (v142->i64[m] << 8);
              ++v141;
              uint64_t v142 = (int64x2_t *)((char *)v142 + 152);
            }
            while (v141 != 4);
            if (!v136)
            {
              unsigned int v144 = (2 * (v37 - 1)) ^ ((v37 - 1) >> 31);
              unsigned int v145 = 33 - __clz(v144);
              if (v144) {
                uint64_t v146 = v145;
              }
              else {
                uint64_t v146 = 1;
              }
              uint64_t v147 = &v239;
              uint64_t v148 = v146;
              do
              {
                uint64_t v149 = v147->i64[0];
                if (v147->i64[0] <= 1uLL) {
                  uint64_t v149 = 1;
                }
                v147->i64[0] = v149;
                uint64_t v147 = (int64x2_t *)((char *)v147 + 8);
                --v148;
              }
              while (v148);
              if (v146 <= 9) {
                memset_pattern16((char *)&v239 + 8 * v146, &xmmword_2484DCB90, 80 - 8 * v146);
              }
            }
            uint64_t v150 = 0;
            BOOL v151 = v238;
            do
            {
              for (uint64_t n = 0; n != 33; ++n)
                v151[n] = (unsigned int **)(qword_248551940[n] + ((void)v151[n] << 8));
              ++v150;
              v151 += 33;
            }
            while (v150 != 4);
            operator new();
          }
          ++v53;
        }
        v50 += 4;
        if (v50 == 0x40000)
        {
          if ((v52 & 1) == 0)
          {
            int v58 = v53;
            goto LABEL_358;
          }
          int v59 = 1;
          goto LABEL_246;
        }
      }
    }
    int v53 = 0;
    int v59 = 0;
    goto LABEL_246;
  }
  if (a5 == 14)
  {
    long long v60 = a1[1];
    long long v222 = *a1;
    long long v223 = v60;
    long long v224 = a1[2];
    *(void *)&long long v221 = a3;
    *((void *)&v221 + 1) = a2;
    *((void *)&v220 + 1) = a4;
    HIBYTE(v218) = a6 != 0;
    sub_2483E9AC0(&v219, 0x10000uLL);
    sub_2484C26C8((char **)&__p);
    *(_WORD *)__p = 0;
    BYTE14(v218) = 1;
    unint64_t v61 = (unint64_t)(v9 + 255) >> 8;
    unint64_t v62 = (v8 + 255) >> 8;
    bzero(&v239, 0x260uLL);
    bzero(v238, 0x420uLL);
    BOOL v68 = v61 == 1 && v62 == 1;
    BYTE13(v218) = v68;
    v213[0] = (uint64_t)&v221;
    v213[1] = (uint64_t)&v221 + 8;
    v214[0] = (uint64_t)&v222;
    v214[1] = (uint64_t)&v239;
    v215[0] = (uint64_t)v238;
    v215[1] = (uint64_t)&v218 + 13;
    *(void *)&long long v216 = (char *)&v218 + 14;
    *((void *)&v216 + 1) = &v212;
    *(void *)&long long v217 = (char *)&v220 + 8;
    *((void *)&v217 + 1) = (char *)&v218 + 15;
    *(void *)&long long v218 = &__p;
    unint64_t v206 = (v8 + 255) >> 8;
    if (a7)
    {
      if (v62 * v61)
      {
        unint64_t v69 = 0;
        do
        {
          unint64_t v70 = v221 - ((v69 / v61) << 8);
          if (v70 >= 0x100) {
            unint64_t v70 = 256;
          }
          sub_2484C7414((uint64_t)v213, v69 % v61, v69 / v61, v70 >> 6, v63, v64, v65, v66, v198, v199, v200, v201, v202, v203, v204, v206, v207, (uint64_t)v208, (uint64_t)v209,
            v210,
            v211,
            v212,
            v213[0],
            v213[1],
            v214[0],
            v214[1],
            v215[0],
            v215[1],
            v216,
            v217,
            v218,
            v219,
            v220,
            v221,
            v222,
            *((uint64_t *)&v222 + 1),
            v223,
            *((uint64_t *)&v223 + 1),
            v224,
            *((uint64_t *)&v224 + 1),
            v225,
            *((uint64_t *)&v225 + 1));
          ++v69;
        }
        while (v62 * v61 != v69);
      }
    }
    else
    {
      sub_2484C7414((uint64_t)v213, (v61 - 1) >> 1, (v62 - 1) >> 1, 4 * v62 * v61, v63, v64, v65, v66, v198, v199, v200, v201, v202, v203, v204, v206, v207, (uint64_t)v208, (uint64_t)v209,
        v210,
        v211,
        v212,
        v213[0],
        v213[1],
        v214[0],
        v214[1],
        v215[0],
        v215[1],
        v216,
        v217,
        v218,
        v219,
        v220,
        v221,
        v222,
        *((uint64_t *)&v222 + 1),
        v223,
        *((uint64_t *)&v223 + 1),
        v224,
        *((uint64_t *)&v224 + 1),
        v225,
        *((uint64_t *)&v225 + 1));
    }
    uint64_t v170 = 0;
    long long v229 = xmmword_2485518E8;
    long long v230 = unk_2485518F8;
    long long v231 = xmmword_248551908;
    long long v232 = unk_248551918;
    long long v225 = xmmword_2485518A8;
    long long v226 = unk_2485518B8;
    long long v227 = xmmword_2485518C8;
    long long v228 = unk_2485518D8;
    int v171 = BYTE14(v218);
    long long v233 = 1uLL;
    char v172 = &v239;
    uint64_t v234 = 0;
    do
    {
      for (uint64_t ii = 0; ii != 19; ++ii)
        v172->i64[ii] = *(void *)((char *)&v225 + ii * 8) + (v172->i64[ii] << 8);
      ++v170;
      char v172 = (int64x2_t *)((char *)v172 + 152);
    }
    while (v170 != 4);
    if (!v171)
    {
      int8x16_t v174 = (int8x16_t)vcgtq_u64((uint64x2_t)v239, (uint64x2_t)vdupq_n_s64(1uLL));
      int64x2_t v239 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v239, v174), (int64x2_t)vmvnq_s8(v174));
      memset_pattern16(v240, &xmmword_2484DCB90, 0x40uLL);
    }
    uint64_t v175 = 0;
    int v176 = v238;
    do
    {
      for (juint64_t j = 0; jj != 33; ++jj)
        v176[jj] = (unsigned int **)(qword_248551940[jj] + ((void)v176[jj] << 8));
      ++v175;
      v176 += 33;
    }
    while (v175 != 4);
    operator new();
  }
  long long v101 = a1[1];
  *(_OWORD *)unint64_t v213 = *a1;
  *(_OWORD *)uint64_t v214 = v101;
  *(_OWORD *)unint64_t v215 = a1[2];
  unint64_t v237 = a5;
  *(void *)&long long v221 = a3;
  *((void *)&v221 + 1) = a2;
  *((void *)&v220 + 1) = a4;
  LOBYTE(v212) = a6 != 0;
  sub_2483E9AC0(&v236, 0x10000uLL);
  sub_2484C26C8((char **)&v219);
  *(_WORD *)long long v219 = 0;
  int v103 = v237 != 8 || a7 == 0;
  HIBYTE(v218) = v103;
  int v104 = v103 ^ 1;
  if (v8 && (v103 & 1) == 0)
  {
    unint64_t v105 = 0;
    char v106 = v103;
    do
    {
      if (v8 - v105 >= 0x100) {
        unint64_t v107 = 256;
      }
      else {
        unint64_t v107 = v8 - v105;
      }
      if (v9 && !v106)
      {
        unint64_t v108 = 0;
        do
        {
          if (v9 - v108 >= 0x100) {
            unint64_t v109 = 256;
          }
          else {
            unint64_t v109 = v9 - v108;
          }
          v238[0] = 0;
          uint64_t v110 = ((uint64_t (*)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v214[0])(v213[0], v108, v105, v109, v107, v238);
          if (v107 && !HIBYTE(v218))
          {
            unint64_t v111 = 1;
            do
            {
              uint64_t v112 = (__int32 *)(v110 + (unint64_t)v238[0] * (v111 - 1));
              uint64_t v113 = *((void *)&v220 + 1);
              if (*((void *)&v220 + 1) == 1)
              {
                int v114 = sub_2484C2714(v110 + (unint64_t)v238[0] * (v111 - 1), v109, v236);
                HIBYTE(v218) = v114;
                uint64_t v113 = *((void *)&v220 + 1);
              }
              else
              {
                int v114 = 0;
              }
              if (v113 == 2)
              {
                int v114 = sub_2484C2884(v112, v109, v236);
                HIBYTE(v218) = v114;
                uint64_t v113 = *((void *)&v220 + 1);
              }
              if (v113 == 3)
              {
                int v114 = sub_2484C29F8(v112, v109, v236);
                HIBYTE(v218) = v114;
                uint64_t v113 = *((void *)&v220 + 1);
              }
              if (v113 == 4)
              {
                int v114 = sub_2484C2B74((uint64_t)v112, v109, v236);
                HIBYTE(v218) = v114;
              }
              if (v111 >= v107) {
                break;
              }
              ++v111;
            }
            while (!v114);
          }
          ((void (*)(uint64_t, uint64_t))v215[1])(v213[0], v110);
          v108 += 256;
          uint64_t v9 = *((void *)&v221 + 1);
          LOBYTE(v103) = HIBYTE(v218);
        }
        while (v108 < *((void *)&v221 + 1) && HIBYTE(v218) == 0);
        unint64_t v8 = v221;
        char v106 = HIBYTE(v218);
      }
      v105 += 256;
      int v104 = v106 == 0;
      if (v105 >= v8) {
        break;
      }
      BOOL v11 = v106 == 0;
      char v106 = 0;
    }
    while (v11);
  }
  if (v104)
  {
    uint64_t v116 = 0;
    unsigned __int8 v117 = 0;
    char v118 = 0;
    int v119 = 0;
    unint64_t v120 = v236;
    unsigned __int8 v121 = -1;
    while (1)
    {
      int v122 = *(_DWORD *)(v120 + v116);
      if (v122)
      {
        *(_DWORD *)(v120 + 4 * v119) = v122;
        LOBYTE(v122) = v122 != BYTE1(v122) || v122 != BYTE2(v122);
        v118 |= v122;
        if (BYTE1(v122) < v121) {
          unsigned __int8 v121 = BYTE1(v122);
        }
        if (BYTE1(v122) > v117) {
          unsigned __int8 v117 = BYTE1(v122);
        }
        int v124 = v119 + 1;
        if (v119 >= 511)
        {
          int v103 = 1;
          HIBYTE(v218) = 1;
          if (v118) {
            goto LABEL_310;
          }
LABEL_371:
          int v125 = 1;
          int v119 = v124;
          if ((float)((float)v124 * 1.4) > (float)(v117 - v121))
          {
            HIBYTE(v218) = 1;
            int v103 = 1;
            goto LABEL_310;
          }
LABEL_308:
          if (!(_BYTE)v103)
          {
            v238[0] = (unsigned int **)&v220 + 1;
            unint64_t v191 = 126 - 2 * __clz(v119);
            uint64_t v192 = v119 ? v191 : 0;
            sub_2484C7A68(v236, (unsigned int *)(v236 + 4 * v119), v238, v192, 1);
            if (v119 >= 1)
            {
              unsigned int v193 = (int *)v236;
              uint64_t v194 = v219;
              uint64_t v195 = v119;
              while (1)
              {
                int v197 = *v193++;
                int v196 = v197;
                if (!v197) {
                  break;
                }
                int v103 = v125 + 1;
                *(_WORD *)(v194 + 2 * ((-1640531535 * v196) >> 16)) = v125++;
                if (!--v195) {
                  goto LABEL_310;
                }
              }
            }
          }
          int v103 = v125;
LABEL_310:
          unint64_t v160 = (unint64_t)(*((void *)&v221 + 1) + 255) >> 8;
          unint64_t v161 = (unint64_t)(v221 + 255) >> 8;
          bzero(&v239, 0x260uLL);
          bzero(v238, 0x420uLL);
          BOOL v167 = v160 == 1 && v161 == 1;
          BYTE14(v218) = v167;
          *(void *)&long long v225 = &v221;
          *((void *)&v225 + 1) = (char *)&v221 + 8;
          *(void *)&long long v226 = v213;
          *((void *)&v226 + 1) = &v239;
          *(void *)&long long v227 = v238;
          *((void *)&v227 + 1) = (char *)&v218 + 14;
          *(void *)&long long v228 = (char *)&v218 + 15;
          *((void *)&v228 + 1) = &v237;
          *(void *)&long long v229 = (char *)&v220 + 8;
          *((void *)&v229 + 1) = &v212;
          *(void *)&long long v230 = &v219;
          if (a7)
          {
            if (v161 * v160)
            {
              unint64_t v168 = 0;
              do
              {
                unint64_t v169 = v221 - ((v168 / v160) << 8);
                if (v169 >= 0x100) {
                  unint64_t v169 = 256;
                }
                sub_2484C91C4((uint64_t)&v225, v168 % v160, v168 / v160, v169 >> 6, v162, v163, v164, v165, v198, (uint64_t)v199, (int)v200, SHIDWORD(v200), v201, (uint64_t)v202, v203, v204, v205, v207, v208,
                  v209,
                  v210,
                  v211,
                  v212,
                  v213[0],
                  v213[1],
                  v214[0],
                  v214[1],
                  v215[0],
                  v215[1],
                  (uint64_t *)v216,
                  *((uint64_t *)&v216 + 1),
                  v217,
                  *((uint64_t *)&v217 + 1),
                  v218,
                  *((uint64_t *)&v218 + 1),
                  v219,
                  *((uint64_t *)&v219 + 1),
                  v220,
                  v221,
                  v222,
                  v223,
                  v224,
                  v225,
                  v226,
                  v227,
                  v228,
                  *((uint64_t *)&v228 + 1),
                  v229,
                  *((uint64_t *)&v229 + 1));
                ++v168;
              }
              while (v161 * v160 != v168);
            }
          }
          else
          {
            sub_2484C91C4((uint64_t)&v225, (v160 - 1) >> 1, (v161 - 1) >> 1, 4 * v161 * v160, v162, v163, v164, v165, v198, (uint64_t)v199, (int)v200, SHIDWORD(v200), v201, (uint64_t)v202, v203, v204, v205, v207, v208,
              v209,
              v210,
              v211,
              v212,
              v213[0],
              v213[1],
              v214[0],
              v214[1],
              v215[0],
              v215[1],
              (uint64_t *)v216,
              *((uint64_t *)&v216 + 1),
              v217,
              *((uint64_t *)&v217 + 1),
              v218,
              *((uint64_t *)&v218 + 1),
              v219,
              *((uint64_t *)&v219 + 1),
              v220,
              v221,
              v222,
              v223,
              v224,
              v225,
              v226,
              v227,
              v228,
              *((uint64_t *)&v228 + 1),
              v229,
              *((uint64_t *)&v229 + 1));
          }
          uint64_t v178 = 0;
          uint64_t v179 = &v239;
          int v180 = HIBYTE(v218);
          do
          {
            for (kuint64_t k = 0; kk != 19; ++kk)
              v179->i64[kk] = *(void *)((char *)&xmmword_2485518A8 + kk * 8) + (v179->i64[kk] << 8);
            ++v178;
            uint64_t v179 = (int64x2_t *)((char *)v179 + 152);
          }
          while (v178 != 4);
          if (!v180)
          {
            unsigned int v182 = (2 * (v103 - 1)) ^ ((v103 - 1) >> 31);
            unsigned int v183 = 33 - __clz(v182);
            if (v182) {
              uint64_t v184 = v183;
            }
            else {
              uint64_t v184 = 1;
            }
            unint64_t v185 = &v239;
            uint64_t v186 = v184;
            do
            {
              uint64_t v187 = v185->i64[0];
              if (v185->i64[0] <= 1uLL) {
                uint64_t v187 = 1;
              }
              v185->i64[0] = v187;
              unint64_t v185 = (int64x2_t *)((char *)v185 + 8);
              --v186;
            }
            while (v186);
            if (v184 <= 9) {
              memset_pattern16((char *)&v239 + 8 * v184, &xmmword_2484DCB90, 80 - 8 * v184);
            }
          }
          uint64_t v188 = 0;
          long long v189 = v238;
          do
          {
            for (muint64_t m = 0; mm != 33; ++mm)
              v189[mm] = (unsigned int **)(qword_248551940[mm] + ((void)v189[mm] << 8));
            ++v188;
            v189 += 33;
          }
          while (v188 != 4);
          operator new();
        }
        ++v119;
      }
      v116 += 4;
      if (v116 == 0x40000)
      {
        if ((v118 & 1) == 0)
        {
          int v124 = v119;
          goto LABEL_371;
        }
        int v125 = 1;
        goto LABEL_308;
      }
    }
  }
  int v119 = 0;
  int v125 = 0;
  goto LABEL_308;
}

void sub_2484C25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a69) {
    operator delete(a69);
  }
  _Unwind_Resume(a1);
}

char **sub_2484C26C8(char **a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x20000uLL);
  *a1 = v2;
  uint64_t v3 = v2 + 0x20000;
  a1[2] = v2 + 0x20000;
  bzero(v2, 0x20000uLL);
  a1[1] = v3;
  return a1;
}

uint64_t sub_2484C2714(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2 < 8)
  {
    unint64_t v4 = 0;
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    unint64_t v4 = 0;
    v5.i64[0] = 0xFF000000FFLL;
    v5.i64[1] = 0xFF000000FFLL;
    int32x4_t v6 = vdupq_n_s32(0x9E3779B1);
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = 0;
      int8x16_t v23 = 0uLL;
      int8x16_t v24 = 0uLL;
      do
      {
        v23.i32[v8] = *(_DWORD *)(v7 + v8);
        ++v8;
      }
      while (v8 != 8);
      uint64_t v9 = 0;
      int8x16_t v23 = vandq_s8(v23, v5);
      int8x16_t v24 = vandq_s8(v24, v5);
      do
      {
        *(uint32x4_t *)&v22[v9] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v23 + v9), v6), 0x10uLL);
        v9 += 16;
      }
      while (v9 != 32);
      for (uint64_t i = 0; i != 8; ++i)
      {
        int v11 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[i * 4]);
        if (v11) {
          LOBYTE(v11) = v23.i32[i] != v11;
        }
        v3 |= v11;
      }
      for (uint64_t j = 0; j != 8; ++j)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[j * 4]) = v23.i32[j];
      v4 += 8;
      v7 += 8;
    }
    while ((v4 | 7) < a2);
  }
  uint64_t v13 = a2 - v4;
  if (a2 > v4)
  {
    unint64_t v14 = (unsigned __int8 *)(a1 + v4);
    do
    {
      int v16 = *v14++;
      int v15 = v16;
      unsigned int v17 = (-1640531535 * v16) >> 16;
      int v18 = *(_DWORD *)(a3 + 4 * v17);
      if (v18) {
        BOOL v19 = v18 == v15;
      }
      else {
        BOOL v19 = 1;
      }
      char v20 = !v19;
      v3 |= v20;
      *(_DWORD *)(a3 + 4 * v17) = v15;
      --v13;
    }
    while (v13);
  }
  return v3 & 1;
}

uint64_t sub_2484C2884(__int32 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a2 < 8)
  {
    unint64_t v4 = 0;
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    unint64_t v4 = 0;
    v5.i64[0] = 0xFFFF0000FFFFLL;
    v5.i64[1] = 0xFFFF0000FFFFLL;
    int32x4_t v6 = vdupq_n_s32(0x9E3779B1);
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = 0;
      int8x16_t v25 = 0uLL;
      int8x16_t v26 = 0uLL;
      uint64_t v9 = v7;
      do
      {
        __int32 v10 = *v9;
        uint64_t v9 = (__int32 *)((char *)v9 + 2);
        v25.i32[v8++] = v10;
      }
      while (v8 != 8);
      uint64_t v11 = 0;
      int8x16_t v25 = vandq_s8(v25, v5);
      int8x16_t v26 = vandq_s8(v26, v5);
      do
      {
        *(uint32x4_t *)&v24[v11] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v25 + v11), v6), 0x10uLL);
        v11 += 16;
      }
      while (v11 != 32);
      for (uint64_t i = 0; i != 8; ++i)
      {
        int v13 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[i * 4]);
        if (v13) {
          LOBYTE(v13) = v25.i32[i] != v13;
        }
        v3 |= v13;
      }
      for (uint64_t j = 0; j != 8; ++j)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[j * 4]) = v25.i32[j];
      v4 += 8;
      v7 += 4;
    }
    while ((v4 | 7) < a2);
  }
  unint64_t v15 = a2 - v4;
  if (a2 > v4)
  {
    int v16 = (unsigned __int16 *)&a1[v4 / 2];
    do
    {
      int v18 = *v16++;
      int v17 = v18;
      unsigned int v19 = (-1640531535 * v18) >> 16;
      int v20 = *(_DWORD *)(a3 + 4 * v19);
      if (v20) {
        BOOL v21 = v20 == v17;
      }
      else {
        BOOL v21 = 1;
      }
      char v22 = !v21;
      v3 |= v22;
      *(_DWORD *)(a3 + 4 * v19) = v17;
      --v15;
    }
    while (v15);
  }
  return v3 & 1;
}

uint64_t sub_2484C29F8(int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a2 < 8)
  {
    unint64_t v4 = 0;
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    unint64_t v4 = 0;
    int32x4_t v5 = vdupq_n_s32(0x9E3779B1);
    int32x4_t v6 = a1;
    do
    {
      uint64_t v7 = 0;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      uint64_t v8 = v6;
      do
      {
        int v9 = *v8;
        uint64_t v8 = (int *)((char *)v8 + 3);
        *(_DWORD *)((char *)&v25 + v7) = v9;
        v7 += 4;
      }
      while (v7 != 32);
      uint64_t v10 = 0;
      v25 &= __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      v26 &= __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      do
      {
        *(uint32x4_t *)&v24[v10] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v25 + v10), v5), 0x10uLL);
        v10 += 16;
      }
      while (v10 != 32);
      for (uint64_t i = 0; i != 32; i += 4)
      {
        int v12 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[i]);
        if (v12) {
          LOBYTE(v12) = *(_DWORD *)((char *)&v25 + i) != v12;
        }
        v3 |= v12;
      }
      for (uint64_t j = 0; j != 32; j += 4)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[j]) = *(_DWORD *)((char *)&v25 + j);
      v4 += 8;
      v6 += 6;
    }
    while ((v4 | 7) < a2);
  }
  uint64_t v14 = a2 - v4;
  if (a2 > v4)
  {
    unint64_t v15 = (unsigned __int16 *)&a1[3 * v4 / 4];
    do
    {
      int v16 = *((unsigned __int8 *)v15 + 2);
      int v17 = *v15;
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + 3);
      int v18 = v17 | (v16 << 16);
      unsigned int v19 = (-1640531535 * v18) >> 16;
      int v20 = *(_DWORD *)(a3 + 4 * v19);
      if (v20) {
        BOOL v21 = v20 == v18;
      }
      else {
        BOOL v21 = 1;
      }
      char v22 = !v21;
      v3 |= v22;
      *(_DWORD *)(a3 + 4 * v19) = v18;
      --v14;
    }
    while (v14);
  }
  return v3 & 1;
}

uint64_t sub_2484C2B74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a2 < 8)
  {
    unint64_t v5 = 0;
    char v4 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = 0;
    unint64_t v5 = 0;
    int32x4_t v6 = vdupq_n_s32(0x9E3779B1);
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = (_OWORD *)(a1 + 32 * v3);
      long long v9 = v8[1];
      v23[0] = *v8;
      v23[1] = v9;
      do
      {
        *(uint32x4_t *)&v22[v7 * 16] = vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)v23[v7], v6), 0x10uLL);
        ++v7;
      }
      while (v7 != 2);
      for (uint64_t i = 0; i != 32; i += 4)
      {
        int v11 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[i]);
        if (v11) {
          LOBYTE(v11) = *(_DWORD *)((char *)v23 + i) != v11;
        }
        v4 |= v11;
      }
      for (uint64_t j = 0; j != 32; j += 4)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[j]) = *(_DWORD *)((char *)v23 + j);
      v5 += 8;
      ++v3;
    }
    while ((v5 | 7) < a2);
  }
  uint64_t v13 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v14 = (int *)(a1 + 4 * v5);
    do
    {
      int v16 = *v14++;
      int v15 = v16;
      unsigned int v17 = (-1640531535 * v16) >> 16;
      int v18 = *(_DWORD *)(a3 + 4 * v17);
      if (v18) {
        BOOL v19 = v15 == v18;
      }
      else {
        BOOL v19 = 1;
      }
      char v20 = !v19;
      v4 |= v20;
      *(_DWORD *)(a3 + 4 * v17) = v15;
      --v13;
    }
    while (v13);
  }
  return v4 & 1;
}

unint64_t sub_2484C2CBC(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  int v11 = (unsigned int *)result;
LABEL_2:
  int v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    int v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    unint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v103 = *v12;
          if (*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12)
          {
            unsigned int v104 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
              || ((int v105 = *v13,
                   float v106 = (float)((float)((float)((float)BYTE1(*v12) * 0.587)
                                        + (float)((float)*v12 * 0.299))
                                + (float)((float)BYTE2(*v12) * 0.114))
                        + 0.01,
                   **a3 != (unsigned int *)4)
                ? (float v107 = (float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                + (float)((float)BYTE2(v104) * 0.114))
                        + 0.01)
                : (float v106 = v106 * (float)HIBYTE(v103),
                   float v107 = (float)((float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                        + (float)((float)BYTE2(v104) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v104)),
                  v106 < v107))
            {
              *uint64_t v13 = v103;
              *int v12 = v104;
            }
          }
          break;
        case 3uLL:
          unint64_t v108 = *a3;
          uint64_t result = (unint64_t)sub_2484CA404(v13, v13 + 1, a2 - 1, v108);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)sub_2484CA890(v13, v13 + 1, v13 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)sub_2484CABF0(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v129 = (v15 - 2) >> 1;
        int v130 = *a3;
        int64_t v131 = v129;
        while (2)
        {
          int64_t v132 = v131;
          if (v129 >= v131)
          {
            uint64_t v133 = (2 * v131) | 1;
            unint64_t v134 = &v13[v133];
            if (2 * v132 + 2 < (uint64_t)v15)
            {
              unint64_t v135 = v134 + 1;
              if (*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              {
                unsigned int v136 = *v135;
                if (!(*v135 & 0xFF000000 | (BYTE2(*v135) << 16) | (BYTE1(*v135) << 8) | *v135)
                  || ((float v137 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                            + (float)((float)*v134 * 0.299))
                                    + (float)((float)BYTE2(*v134) * 0.114))
                            + 0.01,
                       float v138 = (float)*v135,
                       float v139 = (float)BYTE1(v136),
                       *v130 == (unsigned int *)4)
                    ? (float v137 = v137 * (float)HIBYTE(*v134),
                       float v140 = (float)((float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                            + (float)((float)BYTE2(v136) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v136))
                    : (float v140 = (float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                    + (float)((float)BYTE2(v136) * 0.114))
                            + 0.01),
                      v137 < v140))
                {
                  ++v134;
                  uint64_t v133 = 2 * v132 + 2;
                }
              }
            }
            unsigned int v141 = *v134;
            unsigned int v142 = v13[v132];
            if (!(*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              || (uint64_t result = v142 >> 8,
                  v13[v132] & 0xFF000000 | (BYTE2(v13[v132]) << 16) | (BYTE1(v13[v132]) << 8) | v13[v132])
              && ((uint64_t result = BYTE1(v142),
                   int v143 = v13[v132],
                   float v144 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                        + (float)((float)*v134 * 0.299))
                                + (float)((float)BYTE2(*v134) * 0.114))
                        + 0.01,
                   *v130 == (unsigned int *)4)
                ? (float v144 = v144 * (float)HIBYTE(v141),
                   float v145 = (float)((float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                        + (float)((float)BYTE2(v142) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v142))
                : (float v145 = (float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                + (float)((float)BYTE2(v142) * 0.114))
                        + 0.01),
                  v144 >= v145))
            {
              v13[v132] = v141;
              if (v129 >= v133)
              {
                uint64_t v146 = *a3;
                while (1)
                {
                  uint64_t v147 = 2 * v133;
                  uint64_t v133 = (2 * v133) | 1;
                  uint64_t result = (unint64_t)&v13[v133];
                  uint64_t v148 = v147 + 2;
                  if (v148 < (uint64_t)v15)
                  {
                    uint64_t v149 = (unsigned int *)(result + 4);
                    if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                    {
                      unsigned int v150 = *v149;
                      if (!(*v149 & 0xFF000000 | (BYTE2(*v149) << 16) | (BYTE1(*v149) << 8) | *v149)
                        || ((int v151 = *v149,
                             float v152 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                  + (float)((float)*(_DWORD *)result * 0.299))
                                          + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                  + 0.01,
                             *v146 == (unsigned int *)4)
                          ? (float v152 = v152 * (float)HIBYTE(*(_DWORD *)result),
                             float v153 = (float)((float)((float)((float)((float)BYTE1(v150) * 0.587)
                                                          + (float)((float)v151 * 0.299))
                                                  + (float)((float)BYTE2(v150) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v150))
                          : (float v153 = (float)((float)((float)((float)BYTE1(v150) * 0.587) + (float)((float)v151 * 0.299))
                                          + (float)((float)BYTE2(v150) * 0.114))
                                  + 0.01),
                            v152 < v153))
                      {
                        result += 4;
                        uint64_t v133 = v148;
                      }
                    }
                  }
                  unsigned int v154 = *(_DWORD *)result;
                  if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                  {
                    if (!(v142 & 0xFF000000 | (BYTE2(v142) << 16) | (BYTE1(v142) << 8) | v142)) {
                      break;
                    }
                    float v155 = (float)HIBYTE(v154);
                    if (*v146 != (unsigned int *)4) {
                      float v155 = 1.0;
                    }
                    float v156 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                 + (float)((float)*(_DWORD *)result * 0.299))
                                         + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                 + 0.01)
                         * v155;
                    float v157 = *v146 == (unsigned int *)4 ? (float)HIBYTE(v142) : 1.0;
                    if (v156 < (float)((float)((float)((float)((float)((float)BYTE1(v142) * 0.587)
                                                              + (float)((float)v142 * 0.299))
                                                      + (float)((float)BYTE2(v142) * 0.114))
                                              + 0.01)
                                      * v157))
                      break;
                  }
                  unsigned int *v134 = v154;
                  unint64_t v134 = (unsigned int *)result;
                  if (v129 < v133) {
                    goto LABEL_225;
                  }
                }
              }
              uint64_t result = (unint64_t)v134;
LABEL_225:
              *(_DWORD *)uint64_t result = v142;
            }
          }
          int64_t v131 = v132 - 1;
          if (v132) {
            continue;
          }
          break;
        }
        uint64_t v158 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v159 = 0;
          unsigned int v160 = *v13;
          unint64_t v161 = *a3;
          int v162 = v13;
          do
          {
            int v163 = v162;
            v162 += v159 + 1;
            uint64_t v164 = 2 * v159;
            uint64_t v159 = (2 * v159) | 1;
            uint64_t v165 = v164 + 2;
            if (v165 < v158)
            {
              uint64_t v166 = v162 + 1;
              uint64_t result = *v162 >> 8;
              if (*v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (BYTE1(*v162) << 8) | *v162)
              {
                uint64_t result = *v166;
                if (!(*v166 & 0xFF000000 | (BYTE2(*v166) << 16) | (BYTE1(*v166) << 8) | *v166)
                  || ((int v167 = BYTE2(result),
                       float v168 = (float)((float)((float)((float)BYTE1(*v162) * 0.587)
                                            + (float)((float)*v162 * 0.299))
                                    + (float)((float)BYTE2(*v162) * 0.114))
                            + 0.01,
                       float v169 = (float)*v166,
                       float v170 = (float)BYTE1(result),
                       *v161 != (unsigned int *)4)
                    ? (float v171 = (float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                    + (float)((float)BYTE2(result) * 0.114))
                            + 0.01)
                    : (uint64_t result = BYTE3(result),
                       float v168 = v168 * (float)HIBYTE(*v162),
                       float v171 = (float)((float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                            + (float)((float)v167 * 0.114))
                                    + 0.01)
                            * (float)(int)result),
                      v168 < v171))
                {
                  ++v162;
                  uint64_t v159 = v165;
                }
              }
            }
            *int v163 = *v162;
          }
          while (v159 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
          if (v162 == --a2)
          {
            *int v162 = v160;
          }
          else
          {
            *int v162 = *a2;
            *a2 = v160;
            uint64_t v172 = (char *)v162 - (char *)v13 + 4;
            if (v172 >= 5)
            {
              unint64_t v173 = ((unint64_t)v172 >> 2) - 2;
              unint64_t v174 = v173 >> 1;
              uint64_t v175 = &v13[v173 >> 1];
              unsigned int v176 = *v175;
              if (*v175 & 0xFF000000 | (BYTE2(*v175) << 16) | (BYTE1(*v175) << 8) | *v175)
              {
                unsigned int v177 = *v162;
                int v178 = HIBYTE(*v162);
                uint64_t result = BYTE2(*v162);
                int v179 = BYTE1(*v162);
                int v180 = *v162;
                unsigned int v181 = *v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (v179 << 8) | v180;
                if (!v181
                  || ((float v182 = (float)((float)((float)((float)BYTE1(*v175) * 0.587)
                                            + (float)((float)*v175 * 0.299))
                                    + (float)((float)BYTE2(*v175) * 0.114))
                            + 0.01,
                       float v183 = (float)v180,
                       float v184 = (float)v179,
                       *v161 != (unsigned int *)4)
                    ? (float v185 = (float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                    + (float)((float)(int)result * 0.114))
                            + 0.01)
                    : (float v182 = v182 * (float)HIBYTE(v176),
                       float v185 = (float)((float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                            + (float)((float)(int)result * 0.114))
                                    + 0.01)
                            * (float)v178),
                      v182 < v185))
                {
                  *int v162 = v176;
                  if (v173 >= 2)
                  {
                    uint64_t v188 = *a3;
                    float v189 = (float)((float)((float)((float)v179 * 0.587) + (float)((float)v180 * 0.299))
                                 + (float)((float)(int)result * 0.114))
                         + 0.01;
                    float v190 = (float)v178;
                    while (1)
                    {
                      unint64_t v191 = v174 - 1;
                      unint64_t v174 = (v174 - 1) >> 1;
                      uint64_t v186 = &v13[v174];
                      unsigned int v192 = *v186;
                      uint64_t result = HIWORD(*v186);
                      if (!(*v186 & 0xFF000000 | (BYTE2(*v186) << 16) | (BYTE1(*v186) << 8) | *v186)) {
                        break;
                      }
                      if (v181)
                      {
                        uint64_t result = BYTE2(v192);
                        float v193 = (float)HIBYTE(v192);
                        if (*v188 != (unsigned int *)4) {
                          float v193 = 1.0;
                        }
                        float v194 = (float)((float)((float)((float)((float)BYTE1(*v186) * 0.587)
                                                     + (float)((float)*v186 * 0.299))
                                             + (float)((float)BYTE2(*v186) * 0.114))
                                     + 0.01)
                             * v193;
                        float v195 = *v188 == (unsigned int *)4 ? v190 : 1.0;
                        if (v194 >= (float)(v189 * v195)) {
                          break;
                        }
                      }
                      *uint64_t v175 = v192;
                      uint64_t v175 = &v13[v174];
                      if (v191 <= 1) {
                        goto LABEL_249;
                      }
                    }
                  }
                  uint64_t v186 = v175;
LABEL_249:
                  unsigned int *v186 = v177;
                }
              }
            }
          }
        }
        while (v158-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unsigned int v17 = &v13[v15 >> 1];
    int v18 = *a3;
    if ((unint64_t)v14 >= 0x201)
    {
      sub_2484CA404(v11, &v11[v15 >> 1], a2 - 1, v18);
      sub_2484CA404(v11 + 1, v17 - 1, a2 - 2, *a3);
      sub_2484CA404(v11 + 2, &v11[v16 + 1], a2 - 3, *a3);
      uint64_t result = (unint64_t)sub_2484CA404(v17 - 1, v17, &v11[v16 + 1], *a3);
      unsigned int v19 = *v11;
      *int v11 = *v17;
      unsigned int *v17 = v19;
    }
    else
    {
      uint64_t result = (unint64_t)sub_2484CA404(&v11[v15 >> 1], v11, a2 - 1, v18);
    }
    unsigned int v20 = *v11;
    int v21 = HIBYTE(*v11);
    --a4;
    if (a5)
    {
LABEL_17:
      int v31 = v11 + 1;
      unsigned int v30 = v11[1];
      if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
        goto LABEL_39;
      }
      int v32 = BYTE2(v30);
      int v33 = BYTE1(v30);
      int v34 = v30;
      unsigned int v35 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
      uint64_t v36 = *a3;
      float v37 = (float)((float)((float)((float)BYTE1(*v11) * 0.587)
                          + (float)((float)*v11 * 0.299))
                  + (float)((float)BYTE2(*v11) * 0.114))
          + 0.01;
      while (1)
      {
        int v38 = v31;
        if (v35)
        {
          float v39 = (float)HIBYTE(v30);
          if (*v36 != (unsigned int *)4) {
            float v39 = 1.0;
          }
          float v40 = (float)((float)((float)((float)((float)v33 * 0.587) + (float)((float)v34 * 0.299))
                              + (float)((float)v32 * 0.114))
                      + 0.01)
              * v39;
          float v41 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
          if (v40 >= (float)(v37 * v41)) {
            break;
          }
        }
        ++v31;
        unsigned int v30 = v38[1];
        int v32 = BYTE2(v30);
        int v33 = BYTE1(v30);
        int v34 = v30;
        unint64_t v42 = v38;
        if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
          goto LABEL_29;
        }
      }
      unint64_t v42 = v31 - 1;
LABEL_29:
      uint64_t i = a2 - 1;
      if (v42 == v11)
      {
LABEL_39:
        if (v31 < a2)
        {
          for (uint64_t i = a2 - 1; ; --i)
          {
            if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
            {
              if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11)) {
                goto LABEL_52;
              }
              float v47 = (float)HIBYTE(*i);
              if (**a3 == (unsigned int *)4)
              {
                float v48 = (float)v21;
              }
              else
              {
                float v47 = 1.0;
                float v48 = 1.0;
              }
              if (v31 >= i
                || (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                 + (float)((float)*i * 0.299))
                                         + (float)((float)BYTE2(*i) * 0.114))
                                 + 0.01)
                         * v47) < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                                + (float)((float)*v11 * 0.299))
                                                        + (float)((float)BYTE2(*v11) * 0.114))
                                                + 0.01)
                                        * v48))
              {
                goto LABEL_52;
              }
            }
            else if (v31 >= i)
            {
              goto LABEL_52;
            }
          }
        }
        uint64_t i = a2;
      }
      else
      {
        while (1)
        {
          if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
          {
            if (!v35) {
              break;
            }
            float v44 = (float)HIBYTE(*i);
            if (*v36 != (unsigned int *)4) {
              float v44 = 1.0;
            }
            float v45 = (float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                        + (float)((float)*i * 0.299))
                                + (float)((float)BYTE2(*i) * 0.114))
                        + 0.01)
                * v44;
            float v46 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
            if (v45 < (float)(v37 * v46)) {
              break;
            }
          }
          --i;
        }
      }
LABEL_52:
      uint64_t v13 = v31;
      if (v31 < i)
      {
        unsigned int v49 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
        float v50 = (float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                    + (float)((float)*v11 * 0.299))
                            + (float)((float)BYTE2(*v11) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v51 = *i;
        uint64_t v13 = v31;
        char v52 = i;
        do
        {
          *uint64_t v13 = v51;
          unsigned int *v52 = v30;
          unsigned int v53 = v13[1];
          ++v13;
          unsigned int v30 = v53;
          uint64_t v54 = *a3;
          if (v53 & 0xFF000000 | (BYTE2(v53) << 16) | (BYTE1(v53) << 8) | v53)
          {
            int v55 = BYTE2(v30);
            int v56 = BYTE1(v30);
            int v57 = v30;
            do
            {
              if (v49)
              {
                float v58 = (float)HIBYTE(v30);
                if (*v54 != (unsigned int *)4) {
                  float v58 = 1.0;
                }
                float v59 = (float)((float)((float)((float)((float)v56 * 0.587) + (float)((float)v57 * 0.299))
                                    + (float)((float)v55 * 0.114))
                            + 0.01)
                    * v58;
                float v60 = *v54 == (unsigned int *)4
                    ? v50
                    : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01;
                if (v59 >= v60) {
                  break;
                }
              }
              unsigned int v61 = v13[1];
              ++v13;
              unsigned int v30 = v61;
              int v55 = BYTE2(v61);
              int v56 = BYTE1(v61);
              int v57 = v61;
            }
            while (v61 & 0xFF000000 | (BYTE2(v61) << 16) | (BYTE1(v61) << 8) | v61);
          }
          do
          {
            do
            {
              unsigned int v62 = *--v52;
              unsigned int v51 = v62;
            }
            while (!(v62 & 0xFF000000 | (BYTE2(v62) << 16) | (BYTE1(v62) << 8) | v62));
            if (!v49) {
              break;
            }
            float v63 = (float)HIBYTE(v51);
            if (*v54 != (unsigned int *)4) {
              float v63 = 1.0;
            }
            float v64 = (float)((float)((float)((float)((float)BYTE1(v51) * 0.587)
                                        + (float)((float)v51 * 0.299))
                                + (float)((float)BYTE2(v51) * 0.114))
                        + 0.01)
                * v63;
            float v65 = *v54 == (unsigned int *)4
                ? v50
                : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                        + (float)((float)BYTE2(v20) * 0.114))
                + 0.01;
          }
          while (v64 >= v65);
        }
        while (v13 < v52);
      }
      int v66 = v13 - 1;
      if (v13 - 1 != v11) {
        *int v11 = *v66;
      }
      *int v66 = v20;
      if (v31 < i)
      {
LABEL_78:
        uint64_t result = sub_2484C2CBC(v11, v13 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v67 = sub_2484CD32C(v11, v13 - 1, a3);
        uint64_t result = sub_2484CD32C(v13, a2, a3);
        if (result)
        {
          a2 = v13 - 1;
          if (v67) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v67) {
          goto LABEL_78;
        }
      }
    }
    else
    {
      unsigned int v22 = *(v11 - 1);
      int v23 = *v11;
      unsigned int v24 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | v23;
      if (v22 & 0xFF000000 | (BYTE2(v22) << 16) | (BYTE1(v22) << 8) | v22)
      {
        if (!v24) {
          goto LABEL_17;
        }
        uint64_t result = v22;
        long long v25 = (unint64_t *)*a3;
        float v26 = (float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v22 * 0.299))
                    + (float)((float)BYTE2(v22) * 0.114))
            + 0.01;
        float v27 = (float)v23;
        float v28 = (float)BYTE1(v20);
        if (**a3 == (unsigned int *)4)
        {
          float v26 = v26 * (float)HIBYTE(v22);
          float v29 = (float)((float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
                      + 0.01)
              * (float)v21;
        }
        else
        {
          float v29 = (float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
              + 0.01;
        }
        if (v26 < v29) {
          goto LABEL_17;
        }
      }
      else
      {
        if (!v24)
        {
          char v75 = 1;
          goto LABEL_98;
        }
        long long v25 = (unint64_t *)*a3;
      }
      unsigned int v68 = *v12;
      float v69 = (float)BYTE1(v20);
      if (!(*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12))
      {
        float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
            + 0.01;
LABEL_88:
        unint64_t v76 = v11 + 1;
        do
        {
          uint64_t v13 = v76;
          unsigned int v77 = *v76;
          if (!(v77 & 0xFF000000 | (BYTE2(v77) << 16) | (BYTE1(v77) << 8) | v77)) {
            break;
          }
          float v78 = (float)HIBYTE(v77);
          if (*v25 == 4) {
            float v79 = (float)v21;
          }
          else {
            float v79 = 1.0;
          }
          float v80 = v70 * v79;
          if (*v25 != 4) {
            float v78 = 1.0;
          }
          float v81 = (float)((float)((float)((float)((float)BYTE1(v77) * 0.587) + (float)((float)v77 * 0.299))
                              + (float)((float)BYTE2(v77) * 0.114))
                      + 0.01)
              * v78;
          unint64_t v76 = v13 + 1;
        }
        while (v80 >= v81);
LABEL_96:
        char v75 = 0;
        goto LABEL_109;
      }
      uint64_t result = *v25;
      float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
          + 0.01;
      float v71 = (float)*v12;
      float v72 = (float)BYTE1(v68);
      if (*v25 == 4)
      {
        float v73 = v70 * (float)v21;
        float v74 = (float)((float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114))
                    + 0.01)
            * (float)HIBYTE(v68);
      }
      else
      {
        float v74 = (float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114)) + 0.01;
        float v73 = v70;
      }
      if (v73 < v74) {
        goto LABEL_88;
      }
      char v75 = 0;
LABEL_98:
      uint64_t v13 = v11 + 1;
      if (v11 + 1 < a2)
      {
        uint64_t v82 = *a3;
        do
        {
          if ((v75 & 1) == 0)
          {
            unsigned int v83 = *v13;
            uint64_t result = *v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13;
            if (!result) {
              goto LABEL_96;
            }
            uint64_t result = *v13;
            float v84 = (float)HIBYTE(v83);
            if (*v82 == (unsigned int *)4) {
              float v85 = (float)v21;
            }
            else {
              float v85 = 1.0;
            }
            float v86 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v85;
            if (*v82 != (unsigned int *)4) {
              float v84 = 1.0;
            }
            if (v86 < (float)((float)((float)((float)((float)((float)BYTE1(v83) * 0.587)
                                                     + (float)((float)(int)result * 0.299))
                                             + (float)((float)BYTE2(v83) * 0.114))
                                     + 0.01)
                             * v84))
              goto LABEL_96;
          }
          ++v13;
        }
        while (v13 < a2);
      }
LABEL_109:
      if (v13 < a2) {
        uint64_t j = a2 - 1;
      }
      else {
        uint64_t j = a2;
      }
      if (v13 < a2 && (v75 & 1) == 0)
      {
        unint64_t v88 = *a3;
        for (uint64_t j = a2 - 1; ; --j)
        {
          unsigned int v89 = *j;
          if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
          {
            uint64_t result = BYTE1(v89);
            float v90 = (float)HIBYTE(v89);
            if (*v88 == (unsigned int *)4) {
              float v91 = (float)v21;
            }
            else {
              float v91 = 1.0;
            }
            float v92 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v91;
            if (*v88 != (unsigned int *)4) {
              float v90 = 1.0;
            }
            if (v92 >= (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                      + (float)((float)*j * 0.299))
                                              + (float)((float)BYTE2(*j) * 0.114))
                                      + 0.01)
                              * v90))
              break;
          }
        }
      }
      if (v13 < j)
      {
        float v93 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v94 = *v13;
        unsigned int v95 = *j;
        do
        {
          *v13++ = v95;
          *uint64_t j = v94;
          unint64_t v96 = (unint64_t *)*a3;
          if (v75) {
            goto LABEL_133;
          }
          while (1)
          {
            unsigned int v94 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)) {
              break;
            }
            float v97 = (float)HIBYTE(v94);
            if (*v96 == 4) {
              float v98 = v93;
            }
            else {
              float v98 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
            if (*v96 != 4) {
              float v97 = 1.0;
            }
            if (v98 < (float)((float)((float)((float)((float)((float)BYTE1(*v13) * 0.587)
                                                     + (float)((float)*v13 * 0.299))
                                             + (float)((float)BYTE2(*v13) * 0.114))
                                     + 0.01)
                             * v97))
              break;
            do
LABEL_133:
              ++v13;
            while ((v75 & 1) != 0);
          }
          do
          {
            do
            {
              unsigned int v99 = *--j;
              unsigned int v95 = v99;
            }
            while (!(v99 & 0xFF000000 | (BYTE2(v99) << 16) | (BYTE1(v99) << 8) | v99));
            uint64_t result = *v96;
            float v100 = (float)HIBYTE(v95);
            if (*v96 == 4) {
              float v101 = v93;
            }
            else {
              float v101 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                           + (float)((float)BYTE2(v20) * 0.114))
                   + 0.01;
            if (*v96 != 4) {
              float v100 = 1.0;
            }
          }
          while (v101 < (float)((float)((float)((float)((float)((float)BYTE1(v95) * 0.587)
                                                       + (float)((float)v95 * 0.299))
                                               + (float)((float)BYTE2(v95) * 0.114))
                                       + 0.01)
                               * v100));
        }
        while (v13 < j);
      }
      uint64_t v102 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *int v11 = *v102;
      }
      a5 = 0;
      *uint64_t v102 = v20;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v13 == a2) {
      return result;
    }
    int v196 = v13 + 1;
    if (v13 + 1 == a2) {
      return result;
    }
    int v197 = *a3;
    while (1)
    {
      uint64_t v198 = v11;
      int v11 = v196;
      unsigned int v199 = v198[1];
      if (v199 & 0xFF000000 | (BYTE2(v199) << 16) | (BYTE1(v199) << 8) | v199)
      {
        int v200 = HIBYTE(v199);
        int v201 = v198[1];
        unsigned int v202 = *v198;
        if (!(*v198 & 0xFF000000 | (BYTE2(*v198) << 16) | (BYTE1(*v198) << 8) | *v198))
        {
          float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
LABEL_274:
          unint64_t v206 = *a3;
          float v207 = (float)v200;
          do
          {
            do
            {
              unint64_t v208 = v198;
              unsigned int v209 = v202;
              unsigned int v210 = *--v198;
              unsigned int v202 = v210;
              v198[2] = v209;
            }
            while (!(v210 & 0xFF000000 | (BYTE2(v210) << 16) | (BYTE1(v210) << 8) | v210));
            uint64_t result = (unint64_t)*v206;
            float v211 = (float)HIBYTE(v202);
            if (*v206 == (unsigned int *)4) {
              float v212 = v207;
            }
            else {
              float v212 = 1.0;
            }
            float v213 = v203 * v212;
            if (*v206 != (unsigned int *)4) {
              float v211 = 1.0;
            }
          }
          while (v213 < (float)((float)((float)((float)((float)((float)BYTE1(v202) * 0.587)
                                                       + (float)((float)v202 * 0.299))
                                               + (float)((float)BYTE2(v202) * 0.114))
                                       + 0.01)
                               * v211));
          *unint64_t v208 = v199;
          goto LABEL_283;
        }
        uint64_t result = *v198;
        float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                     + (float)((float)BYTE2(v199) * 0.114))
             + 0.01;
        if (*v197 == (unsigned int *)4)
        {
          float v204 = v203 * (float)v200;
          float v205 = (float)((float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                               + (float)((float)BYTE2(v202) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v202);
        }
        else
        {
          float v205 = (float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                       + (float)((float)BYTE2(v202) * 0.114))
               + 0.01;
          float v204 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
        }
        if (v204 < v205) {
          goto LABEL_274;
        }
      }
LABEL_283:
      int v196 = v11 + 1;
      if (v11 + 1 == a2) {
        return result;
      }
    }
  }
  if (v13 != a2)
  {
    unint64_t v109 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v110 = 0;
      unint64_t v111 = *a3;
      uint64_t v112 = v13;
      do
      {
        uint64_t v113 = v112;
        uint64_t v112 = v109;
        unsigned int v114 = v113[1];
        if (v114 & 0xFF000000 | (BYTE2(v114) << 16) | (BYTE1(v114) << 8) | v114)
        {
          int v115 = HIBYTE(v114);
          int v116 = v113[1];
          unsigned int v117 = *v113;
          uint64_t result = HIWORD(*v113);
          if (!(*v113 & 0xFF000000 | (BYTE2(*v113) << 16) | (BYTE1(*v113) << 8) | *v113)
            || ((uint64_t result = BYTE2(v117),
                 int v118 = *v113,
                 float v119 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                              + (float)((float)BYTE2(v114) * 0.114))
                      + 0.01,
                 *v111 != (unsigned int *)4)
              ? (float v120 = (float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                              + (float)((float)BYTE2(v117) * 0.114))
                      + 0.01)
              : (float v119 = v119 * (float)v115,
                 float v120 = (float)((float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                                      + (float)((float)BYTE2(v117) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v117)),
                v119 < v120))
          {
            v113[1] = v117;
            unsigned __int8 v121 = v13;
            if (v113 != v13)
            {
              int v122 = *a3;
              float v123 = (float)v115;
              uint64_t v124 = v110;
              while (1)
              {
                unsigned int v125 = *(unsigned int *)((char *)v13 + v124 - 4);
                uint64_t result = v125 & 0xFF000000 | (BYTE2(v125) << 16) | (BYTE1(v125) << 8) | v125;
                if (result)
                {
                  uint64_t result = *(unsigned int *)((char *)v13 + v124 - 4);
                  float v126 = (float)HIBYTE(v125);
                  if (*v122 == (unsigned int *)4) {
                    float v127 = v123;
                  }
                  else {
                    float v127 = 1.0;
                  }
                  float v128 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                                       + (float)((float)BYTE2(v114) * 0.114))
                               + 0.01)
                       * v127;
                  if (*v122 != (unsigned int *)4) {
                    float v126 = 1.0;
                  }
                  if (v128 >= (float)((float)((float)((float)((float)((float)BYTE1(v125) * 0.587)
                                                             + (float)((float)(int)result * 0.299))
                                                     + (float)((float)BYTE2(v125) * 0.114))
                                             + 0.01)
                                     * v126))
                    break;
                }
                *(unsigned int *)((char *)v13 + v124) = v125;
                v124 -= 4;
                if (!v124)
                {
                  unsigned __int8 v121 = v13;
                  goto LABEL_185;
                }
              }
              unsigned __int8 v121 = (unsigned int *)((char *)v13 + v124);
            }
LABEL_185:
            *unsigned __int8 v121 = v114;
          }
        }
        unint64_t v109 = v112 + 1;
        v110 += 4;
      }
      while (v112 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2484C4418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if ((unint64_t)(**(void **)a1 - (a3 << 8)) >= 0x100) {
    uint64_t v7 = 256;
  }
  else {
    uint64_t v7 = **(void **)a1 - (a3 << 8);
  }
  BOOL v6 = *(void **)(a1 + 8);
  if ((unint64_t)(*v6 - (a2 << 8)) >= 0x100) {
    uint64_t v8 = 256;
  }
  else {
    uint64_t v8 = *v6 - (a2 << 8);
  }
  uint64_t v76 = 0;
  uint64_t v74 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 16) + 16))(**(void **)(a1 + 16), a2 << 8, a3 << 8, v8, v7, &v76);
  uint64_t v9 = (v7 - a4) & ~((v7 - a4) >> 63);
  uint64_t v10 = (int)(v9 >> 1);
  int v11 = v7 - ((unint64_t)v9 >> 1);
  if (v11 >= (int)a4) {
    int v11 = a4;
  }
  unint64_t v12 = v8 & 0x1F0;
  uint64_t v13 = v76;
  uint64_t v72 = v10;
  uint64_t v73 = v11;
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v16 = **(void **)(a1 + 64);
  if (**(unsigned char **)(a1 + 48))
  {
    for (uint64_t i = 1; i != 9; i += 2)
      v80[i] = 0;
    if (v16)
    {
      int v18 = (uint64_t *)v81;
      unsigned int v19 = v80;
      unint64_t v20 = v16;
      do
      {
        *unsigned int v19 = v18;
        v19 += 2;
        *int v18 = v15;
        v18[1] = v14;
        v18 += 2;
        v14 += 264;
        v15 += 152;
        --v20;
      }
      while (v20);
      sub_2484CB468(&__p, v16);
    }
    else
    {
      __p = 0;
      float v78 = 0;
      uint64_t v79 = 0;
    }
    if (v73 != -1)
    {
      uint64_t v29 = 0;
      unsigned int v30 = (const char *)(v74 + v13 * v72);
      uint64_t v70 = -(uint64_t)(v8 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v71 = v13;
      int v31 = 1;
      while (1)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        int v32 = (const char *)(v74 + (v29 + v72) * v13);
        memset(v82, 0, sizeof(v82));
        int v75 = v31;
        if (!v16) {
          break;
        }
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        unsigned int v35 = (char *)__p + 704 * (v31 & 1) + 64;
        uint64_t v36 = (char *)__p + 704 * (v29 & 1) + 64;
        float v37 = v36;
        int v38 = v35;
        do
        {
          *((void *)&v83 + v34) = &v36[v33 + (v37 & 0x3E)];
          *((void *)v82 + v34++) = &v35[v33 + (v38 & 0x3E)];
          v38 += 1408;
          v33 += 1408;
          v37 += 1408;
        }
        while (v16 != v34);
        switch(v16)
        {
          case 1uLL:
            uint64_t v43 = v83;
            if (v12)
            {
              uint64_t v44 = 0;
              float v45 = (uint16x8_t *)v83;
              do
              {
                *v45++ = vmovl_u8(*(uint8x8_t *)&v30[v44]);
                unint64_t v46 = v44 + 8;
                unint64_t v47 = v44 + 16;
                v44 += 8;
              }
              while (v47 <= v12);
            }
            else
            {
              unint64_t v46 = 0;
            }
            if (v46 < v12)
            {
              do
              {
                *(_WORD *)(v43 + 2 * v46) = v30[v46];
                ++v46;
              }
              while (v12 != v46);
            }
            break;
          case 2uLL:
            long long v48 = v83;
            if (v12)
            {
              uint64_t v49 = 0;
              float v50 = v30;
              char v52 = (uint16x8_t *)*((void *)&v83 + 1);
              unsigned int v51 = (uint16x8_t *)v83;
              do
              {
                int8x8x2_t v86 = vld2_s8(v50);
                v50 += 16;
                *v51++ = vmovl_u8((uint8x8_t)v86.val[0]);
                *v52++ = vmovl_u8((uint8x8_t)v86.val[1]);
                unint64_t v53 = v49 + 8;
                unint64_t v54 = v49 + 16;
                v49 += 8;
              }
              while (v54 <= v12);
            }
            else
            {
              unint64_t v53 = 0;
            }
            if (v53 < v12)
            {
              unint64_t v66 = v70 + v53;
              uint64_t v67 = 2 * v53;
              do
              {
                *(_WORD *)(v48 + v67) = v30[v67];
                *(_WORD *)(*((void *)&v48 + 1) + v67) = v30[v67 + 1];
                v67 += 2;
              }
              while (!__CFADD__(v66++, 1));
            }
            break;
          case 3uLL:
            sub_2484CD1A8(v32, v12, (int16x8_t *)v83, *((_OWORD **)&v83 + 1), (_OWORD *)v84);
LABEL_44:
            for (uint64_t j = 0; j != v16; ++j)
            {
              while (!v29)
              {
                *(_WORD *)(*((void *)&v83 + j) - 2) = 0;
                *(_WORD *)(*((void *)v82 + j++) - 2) = 0;
                if (j == v16) {
                  goto LABEL_51;
                }
              }
              int v56 = (_WORD *)*((void *)v82 + j);
              *(_WORD *)(*((void *)&v83 + j) - 2) = *v56;
              *(v56 - 1) = *v56;
            }
            int v57 = v80;
            float v58 = (uint64_t *)v82;
            float v59 = (uint64_t *)&v83;
            unint64_t v60 = v16;
            do
            {
              uint64_t v62 = *v59++;
              uint64_t v61 = v62;
              uint64_t v63 = v62 - 2;
              uint64_t v64 = *v58++;
              sub_2484CA1AC(v57, v61, v63, v64, v64 - 2, v12);
              v57 += 2;
              --v60;
            }
            while (v60);
            goto LABEL_51;
          default:
            float v41 = (_OWORD *)*((void *)&v83 + 1);
            unint64_t v42 = (int16x8_t *)v83;
            float v39 = (uint16x8_t *)*((void *)&v84 + 1);
            float v40 = (_OWORD *)v84;
            goto LABEL_42;
        }
LABEL_43:
        if (v16) {
          goto LABEL_44;
        }
LABEL_51:
        int v31 = v75 + 1;
        uint64_t v13 = v71;
        v30 += v71;
        if (v29++ == v73) {
          goto LABEL_64;
        }
      }
      float v39 = 0;
      float v40 = 0;
      float v41 = 0;
      unint64_t v42 = 0;
LABEL_42:
      sub_2484CD260(v32, v12, v42, v41, v40, v39);
      goto LABEL_43;
    }
LABEL_64:
    if (__p)
    {
      float v78 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unsigned int v21 = **(unsigned __int8 **)(a1 + 40);
    uint64_t v22 = **(void **)(a1 + 80);
    for (uint64_t k = 1; k != 9; k += 2)
      v80[k] = 0;
    if (v16)
    {
      uint64_t v24 = v15 + 152 * v21;
      uint64_t v25 = v14 + 264 * v21;
      float v26 = (uint64_t *)v81;
      float v27 = v80;
      unint64_t v28 = v16;
      do
      {
        const float *v27 = v26;
        v27 += 2;
        *float v26 = v24;
        v26[1] = v25;
        v26 += 2;
        --v28;
      }
      while (v28);
    }
    sub_2484C98A4(v74, v72, v8 & 0x1F0, v73 + 1, v13, v22, v16, v80);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 16) + 40))(**(void **)(a1 + 16), v74);
}

void sub_2484C48D4(void *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v87[33] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  if (!a2)
  {
    uint64_t v13 = 0;
    char v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
LABEL_18:
    uint64_t v26 = -254;
    char v25 = 1;
    goto LABEL_19;
  }
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  do
  {
    uint64_t v12 = *v9++;
    uint64_t v11 = v12;
    if (v12)
    {
      v87[v8] = v11;
      v86[v8] = *a3;
      v85[v8++] = *a4;
    }
    ++a4;
    ++a3;
    --v10;
  }
  while (v10);
  char v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v13 = 0;
  if (!v8) {
    goto LABEL_18;
  }
  unint64_t v14 = 0;
  uint64_t v15 = v85;
  unint64_t v16 = v86;
  unsigned int v17 = v87;
  unint64_t v18 = 255;
  uint64_t v19 = v8;
  do
  {
    uint64_t v21 = *v17++;
    uint64_t v20 = v21;
    if (*v16 <= 1u) {
      unint64_t v22 = 1;
    }
    else {
      unint64_t v22 = *v16;
    }
    *v16++ = v22;
    unsigned int v24 = *v15++;
    unint64_t v23 = v24;
    v13 += v20;
    if (v14 <= v24) {
      unint64_t v14 = v23;
    }
    if (v18 >= v22) {
      unint64_t v18 = v22;
    }
    --v19;
  }
  while (v19);
  char v25 = 0;
  uint64_t v26 = v14 - v18 + 1;
LABEL_19:
  uint64_t v27 = v26 * v13;
  if ((unint64_t)(v26 * v13) >= 0x7FFFFFFF)
  {
    unint64_t v31 = (1 << v26);
    uint64_t v32 = (v31 + 1);
    unint64_t v33 = (v8 + 1) * v32;
    if (v33 >> 61) {
      sub_2483E92E8();
    }
    unsigned int v30 = sub_2483F04AC((v8 + 1) * v32);
    uint64_t v34 = 0;
    do
      v30[v34++] = v27;
    while (v33 != v34);
    *unsigned int v30 = 0;
    if ((v25 & 1) == 0)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 8 * (int)v32;
      do
      {
        uint64_t v62 = v86[v60];
        uint64_t v63 = v85[v60];
        if (v62 <= v63)
        {
          uint64_t v64 = v60 + 1;
          do
          {
            uint64_t v65 = (1 << (v26 - v62));
            if (v65 <= v31)
            {
              uint64_t v66 = v32 - v65;
              uint64_t v67 = v87[v60] * v62;
              unsigned int v68 = (void *)((char *)&v30[v65] + v61 * (v60 + 1));
              float v69 = (void *)((char *)v30 + v61 * v60);
              do
              {
                uint64_t v70 = *v69++;
                uint64_t v71 = v67 + v70;
                if (*v68 < (unint64_t)(v67 + v70)) {
                  uint64_t v71 = *v68;
                }
                *v68++ = v71;
                --v66;
              }
              while (v66);
            }
            BOOL v50 = v62++ == v63;
          }
          while (!v50);
        }
        else
        {
          uint64_t v64 = v60 + 1;
        }
        uint64_t v60 = v64;
      }
      while (v64 != v8);
      do
      {
        while (1)
        {
          uint64_t v72 = v8--;
          uint64_t v73 = v86[v8];
          uint64_t v74 = v85[v8];
          if (v73 <= v74) {
            break;
          }
LABEL_72:
          if (!v8) {
            goto LABEL_26;
          }
        }
        unint64_t v75 = v31 + v72 * (int)v32;
        uint64_t v76 = v74 + 1;
        char v77 = v26 - v73;
        while (1)
        {
          unint64_t v78 = (1 << v77);
          BOOL v58 = v31 >= v78;
          unint64_t v79 = v31 - v78;
          if (v58 && v30[v75] == v30[v79 + v8 * (int)v32] + v87[v8] * v73) {
            break;
          }
          ++v73;
          --v77;
          if (v76 == v73) {
            goto LABEL_72;
          }
        }
        *((unsigned char *)&v82 + v8) = v73;
        unint64_t v31 = v79;
      }
      while (v8);
    }
  }
  else
  {
    int v81 = v26 * v13;
    unint64_t v28 = (1 << v26);
    uint64_t v29 = (v28 + 1);
    sub_2484431AC(v80, v29 + v29 * v8, &v81);
    unsigned int v30 = (void *)v80[0];
    *(_DWORD *)v80[0] = 0;
    if ((v25 & 1) == 0)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 4 * (int)v29;
      do
      {
        unsigned int v40 = v86[v38];
        unsigned int v41 = v85[v38];
        if (v40 <= v41)
        {
          uint64_t v42 = v38 + 1;
          do
          {
            uint64_t v43 = (1 << (v26 - v40));
            if (v43 <= v28)
            {
              int v44 = v40 * LODWORD(v87[v38]);
              uint64_t v45 = v29 - v43;
              unint64_t v46 = (int *)((char *)v30 + 4 * v43 + v39 * (v38 + 1));
              unint64_t v47 = (int *)((char *)v30 + v39 * v38);
              do
              {
                int v48 = *v47++;
                int v49 = v48 + v44;
                if (*v46 < (v48 + v44)) {
                  int v49 = *v46;
                }
                *v46++ = v49;
                --v45;
              }
              while (v45);
            }
            BOOL v50 = v40++ == v41;
          }
          while (!v50);
        }
        else
        {
          uint64_t v42 = v38 + 1;
        }
        uint64_t v38 = v42;
      }
      while (v42 != v8);
      do
      {
        while (1)
        {
          uint64_t v51 = v8--;
          uint64_t v52 = v86[v8];
          uint64_t v53 = v85[v8];
          if (v52 <= v53) {
            break;
          }
LABEL_50:
          if (!v8) {
            goto LABEL_21;
          }
        }
        unint64_t v54 = v28 + v51 * (int)v29;
        uint64_t v55 = v53 + 1;
        char v56 = v26 - v52;
        while (1)
        {
          unint64_t v57 = (1 << v56);
          BOOL v58 = v28 >= v57;
          unint64_t v59 = v28 - v57;
          if (v58 && *((unsigned int *)v30 + v59 + v8 * (int)v29) + v87[v8] * v52 == *((_DWORD *)v30 + v54)) {
            break;
          }
          ++v52;
          --v56;
          if (v55 == v52) {
            goto LABEL_50;
          }
        }
        *((unsigned char *)&v82 + v8) = v52;
        unint64_t v28 = v59;
      }
      while (v8);
    }
LABEL_21:
    v80[1] = v30;
  }
LABEL_26:
  operator delete(v30);
  if (v6)
  {
    uint64_t v35 = 0;
    do
    {
      *a5 = 0;
      if (*v7++)
      {
        char v37 = *((unsigned char *)&v82 + v35++);
        *a5 = v37;
      }
      ++a5;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_2484C4D48(unsigned __int8 *a1, unsigned char *a2, uint64_t a3, unsigned __int8 *a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v11 = a1;
  v25[2] = *MEMORY[0x263EF8340];
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v12 = a4;
  uint64_t v13 = a6;
  if (a3)
  {
    unint64_t v14 = a1;
    uint64_t v15 = a3;
    do
    {
      unsigned int v16 = *v14++;
      ++*((unsigned char *)v25 + v16);
      --v15;
    }
    while (v15);
    uint64_t v12 = a4;
    uint64_t v13 = a6;
  }
  do
  {
    unsigned int v17 = *v12++;
    ++*((unsigned char *)v25 + v17);
    --v13;
  }
  while (v13);
  uint64_t v18 = 0;
  memset(v24, 0, sizeof(v24));
  do
  {
    LOWORD(v13) = 2 * ((v13 & 0xFFFE) + *((unsigned __int8 *)v25 + v18));
    *((_WORD *)v24 + ++v18) = v13;
  }
  while (v18 != 15);
  if (a3)
  {
    do
    {
      unsigned int v19 = *v11++;
      unsigned int v20 = *((unsigned __int16 *)v24 + v19);
      *((_WORD *)v24 + v19) = v20 + 1;
      *a2++ = sub_2484CD15C(v19, v20);
      --v9;
    }
    while (v9);
  }
  do
  {
    unsigned int v21 = *v8++;
    unsigned int v22 = *((unsigned __int16 *)v24 + v21);
    *((_WORD *)v24 + v21) = v22 + 1;
    uint64_t result = sub_2484CD15C(v21, v22);
    *a5++ = result;
    --v6;
  }
  while (v6);
  return result;
}

void *sub_2484C4EA0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL) {
      sub_2483E92E8();
    }
    char v4 = operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    BOOL v5 = &v4[10 * a2];
    a1[2] = v5;
    do
    {
      uint64_t v6 = 0;
      v4[8] = 0uLL;
      v4[9] = 0uLL;
      v4[6] = 0uLL;
      v4[7] = 0uLL;
      v4[4] = 0uLL;
      v4[5] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *char v4 = 0uLL;
      v4[1] = 0uLL;
      do
      {
        uint64_t v7 = (void *)((char *)v4 + v6);
        uint64_t v8 = MEMORY[0x263EF88C0];
        void *v7 = 0;
        v7[1] = v8;
        v7[2] = 0;
        v7[3] = 0;
        v7[4] = 0;
        v6 += 40;
      }
      while (v6 != 160);
      v4 += 10;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2484C4F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *sub_2484C4F84(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  char v8 = a1;
  uint64_t result = (uint64_t *)sub_2484CBE6C(a1, a2, a3, a5, a6);
  uint64_t v10 = *a6;
  uint64_t v11 = a6[2];
  uint64_t v12 = a6[3];
  if (a4 < 3)
  {
    uint64_t v29 = a6[4];
    a6[3] = v12 + 2;
    *(void *)(v10 + v11) = v29;
  }
  else
  {
    uint64_t v13 = a6[4] | (1 << v12);
    a6[3] = v12 + 2;
    a6[4] = v13;
    *(void *)(v10 + v11) = v13;
    unint64_t v14 = a6[3];
    unint64_t v15 = v14 & 7;
    unint64_t v16 = (unint64_t)a6[4] >> (v14 & 0xF8);
    uint64_t v17 = a6[2] + (v14 >> 3);
    uint64_t v18 = *a6;
    a6[2] = v17;
    a6[3] = v15 + 2;
    a6[4] = v16;
    *(void *)(v18 + v17) = v16;
    unint64_t v19 = a6[3];
    unint64_t v20 = v19 & 7;
    unint64_t v21 = (unint64_t)a6[4] >> (v19 & 0xF8);
    uint64_t v22 = a6[2] + (v19 >> 3);
    uint64_t v23 = *a6;
    a6[2] = v22;
    a6[3] = v20 + 5;
    a6[4] = v21;
    *(void *)(v23 + v22) = v21;
    unint64_t v24 = a6[3];
    unint64_t v25 = v24 & 7;
    unint64_t v26 = (unint64_t)a6[4] >> (v24 & 0xF8);
    uint64_t v27 = a6[2] + (v24 >> 3);
    uint64_t v28 = *a6;
    a6[2] = v27;
    a6[3] = v25 + 2;
    a6[4] = v26;
    *(void *)(v28 + v27) = v26;
  }
  uint64_t v31 = a6[2];
  unint64_t v30 = a6[3];
  unint64_t v32 = (unint64_t)a6[4] >> (v30 & 0xF8);
  a6[3] = v30 & 7;
  a6[4] = v32;
  a6[2] = v31 + (v30 >> 3);
  if ((v8 & 1) == 0)
  {
    return sub_2484BFB54(a6);
  }
  return result;
}

uint64_t *sub_2484C50CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  int v9 = MEMORY[0x270FA5388]();
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  unint64_t v15 = v14;
  uint64_t v17 = (_OWORD *)v16;
  unint64_t v19 = v18;
  char v20 = v9;
  STACK[0x2218] = *MEMORY[0x263EF8340];
  sub_2484CBE6C(v9, v21, v22, v16, v10);
  uint64_t v23 = *v11;
  uint64_t v24 = v11[2];
  uint64_t v25 = v11[3];
  uint64_t v26 = v11[4] | (1 << v25);
  v11[3] = v25 + 2;
  v11[4] = v26;
  *(void *)(v23 + v24) = v26;
  unint64_t v27 = v11[3];
  unint64_t v28 = v27 & 7;
  unint64_t v29 = (unint64_t)v11[4] >> (v27 & 0xF8);
  uint64_t v30 = v11[2] + (v27 >> 3);
  uint64_t v31 = *v11;
  uint64_t v32 = v29 | (1 << v28);
  void v11[2] = v30;
  v11[3] = v28 + 2;
  v11[4] = v32;
  *(void *)(v31 + v30) = v32;
  unint64_t v33 = v11[3];
  unint64_t v34 = v33 & 7;
  unint64_t v35 = (unint64_t)v11[4] >> (v33 & 0xF8);
  uint64_t v36 = v11[2] + (v33 >> 3);
  uint64_t v37 = *v11;
  void v11[2] = v36;
  v11[3] = v34 + 5;
  v11[4] = v35;
  *(void *)(v37 + v36) = v35;
  unint64_t v38 = v11[3];
  unint64_t v39 = v38 & 7;
  unint64_t v40 = (unint64_t)v11[4] >> (v38 & 0xF8);
  uint64_t v41 = v11[2] + (v38 >> 3);
  void v11[2] = v41;
  switch(v19)
  {
    case 4uLL:
      uint64_t v42 = *v11;
      uint64_t v43 = 2;
LABEL_7:
      v40 |= v43 << v39;
      goto LABEL_8;
    case 3uLL:
      uint64_t v42 = *v11;
      uint64_t v43 = 1;
      goto LABEL_7;
    case 1uLL:
      uint64_t v42 = *v11;
LABEL_8:
      v11[3] = v39 + 2;
      v11[4] = v40;
      *(void *)(v42 + v41) = v40;
      goto LABEL_10;
  }
  uint64_t v44 = *v11;
  uint64_t v45 = v40 | (3 << v39);
  v11[3] = v39 + 2;
  v11[4] = v45;
  *(void *)(v44 + v41) = v45;
  unint64_t v46 = v11[3];
  unint64_t v47 = v46 & 7;
  unint64_t v48 = (unint64_t)v11[4] >> (v46 & 0xF8);
  uint64_t v49 = v11[2] + (v46 >> 3);
  uint64_t v50 = *v11;
  uint64_t v51 = v48 | ((v19 - 1) << v47);
  void v11[2] = v49;
  v11[3] = v47 + 13;
  v11[4] = v51;
  *(void *)(v50 + v49) = v51;
LABEL_10:
  uint64_t v53 = v11[2];
  unint64_t v52 = v11[3];
  unint64_t v54 = v52 & 7;
  unint64_t v55 = (unint64_t)v11[4] >> (v52 & 0xF8);
  v11[4] = v55;
  uint64_t v56 = v53 + (v52 >> 3);
  void v11[2] = v56;
  uint64_t v57 = *v11;
  if (v13 > 0xFF)
  {
    uint64_t v62 = v55 | (1 << v54);
    v11[3] = v54 + 2;
    v11[4] = v62;
    *(void *)(v57 + v56) = v62;
    unint64_t v63 = v11[3];
    unint64_t v64 = v63 & 7;
    unint64_t v65 = (unint64_t)v11[4] >> (v63 & 0xF8);
    uint64_t v66 = v11[2] + (v63 >> 3);
    uint64_t v67 = *v11;
    uint64_t v68 = v65 | ((v13 - 256) << v64);
    void v11[2] = v66;
    v11[3] = v64 + 10;
    v11[4] = v68;
    *(void *)(v67 + v66) = v68;
  }
  else
  {
    v11[3] = v54 + 2;
    *(void *)(v57 + v56) = v55;
    unint64_t v58 = v11[3];
    uint64_t v59 = v11[2] + (v58 >> 3);
    uint64_t v60 = *v11;
    unint64_t v61 = ((unint64_t)v11[4] >> (v58 & 0xF8)) | (v13 << (v58 & 7));
    void v11[2] = v59;
    v11[3] = v58 & 7 | 8;
    v11[4] = v61;
    *(void *)(v60 + v59) = v61;
  }
  unint64_t v69 = v11[3];
  unint64_t v70 = (unint64_t)v11[4] >> (v69 & 0xF8);
  uint64_t v71 = v11[2] + (v69 >> 3);
  uint64_t v72 = *v11;
  void v11[2] = v71;
  v11[3] = (v69 & 7) + 2;
  v11[4] = v70;
  *(void *)(v72 + v71) = v70;
  unint64_t v73 = v11[3];
  unint64_t v74 = (unint64_t)v11[4] >> (v73 & 0xF8);
  unint64_t v75 = v73 & 7;
  uint64_t v76 = v11[2] + (v73 >> 3);
  uint64_t v77 = *v11;
  void v11[2] = v76;
  v11[3] = v75 + 4;
  v11[4] = v74;
  *(void *)(v77 + v76) = v74;
  uint64_t v79 = v11[2];
  unint64_t v78 = v11[3];
  unint64_t v80 = (unint64_t)v11[4] >> (v78 & 0xF8);
  v11[3] = v78 & 7;
  v11[4] = v80;
  void v11[2] = v79 + (v78 >> 3);
  float v98 = &STACK[0x2140];
  uint64_t v99 = 0;
  STACK[0x2148] = (unint64_t)v11;
  STACK[0x2140] = (unint64_t)v17;
  long long v81 = *(_OWORD *)((char *)v17 + 19);
  *(_OWORD *)&STACK[0x2180] = *v17;
  *(_OWORD *)&STACK[0x21C0] = v81;
  bzero(&v100, 0x2100uLL);
  if (v13)
  {
    char v84 = (unsigned __int8 *)(*v15 + 1);
    uint64_t v85 = &v100;
    unint64_t v86 = v13;
    do
    {
      __int16 v87 = *v84;
      __int16 v88 = v84[1];
      __int16 v89 = v84[2];
      *((_WORD *)v85 + 17) = *(v84 - 1);
      *((_WORD *)v85 + 1073) = v87;
      *((_WORD *)v85 + 2129) = v88;
      *((_WORD *)v85 + 3185) = v89;
      uint64_t v85 = (uint64_t *)((char *)v85 + 2);
      v84 += 4;
      --v86;
    }
    while (v86);
    __int16 v90 = a9;
    HIWORD(vars8) = 0;
    sub_2484CCB5C((uint64_t)&v98, (uint64_t)&a9, (uint64_t)&vars8 + 6, (uint64_t)&vars8 + 6, (uint64_t)&vars8 + 6, v13, v82, v83);
  }
  else
  {
    __int16 v90 = 0;
  }
  LOWORD(STACK[0x89E]) = v90;
  HIWORD(vars8) = v90;
  if (v19 <= 1
    || (sub_2484CCB5C((uint64_t)&v98, (uint64_t)&STACK[0x8A0], (uint64_t)&STACK[0x89E], (uint64_t)&a9, (uint64_t)&vars8 + 6, v13, v82, v83), __int16 v93 = STACK[0x8A0], LOWORD(STACK[0x10DE]) = STACK[0x8A0], LOWORD(STACK[0x89E]) = v93, v19 == 2))
  {
    LOWORD(STACK[0x10DE]) = STACK[0x10E0];
  }
  else
  {
    sub_2484CCB5C((uint64_t)&v98, (uint64_t)&STACK[0x10E0], (uint64_t)&STACK[0x10DE], (uint64_t)&STACK[0x8A0], (uint64_t)&STACK[0x89E], v13, v91, v92);
    __int16 v97 = STACK[0x10E0];
    LOWORD(STACK[0x191E]) = STACK[0x10E0];
    LOWORD(STACK[0x10DE]) = v97;
    if (v19 >= 4) {
      sub_2484CCB5C((uint64_t)&v98, (uint64_t)&STACK[0x1920], (uint64_t)&STACK[0x191E], (uint64_t)&STACK[0x10E0], (uint64_t)&STACK[0x10DE], v13, v95, v96);
    }
  }
  uint64_t result = (uint64_t *)sub_2484CCE4C((unsigned __int8 *)*v98, (uint64_t *)v98[1], v99);
  if ((v20 & 1) == 0) {
    return sub_2484BFB54(v11);
  }
  return result;
}

unint64_t sub_2484C5584(unint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5)
{
  *a4 = result;
  uint64_t v5 = 1;
  unint64_t v6 = 3;
  while (v5 != 4)
  {
    unint64_t v7 = qword_248551720[v5++];
    if (v7 > result)
    {
      unint64_t v6 = v5 - 2;
      break;
    }
  }
  while (1)
  {
    unint64_t v10 = ((unint64_t)(12 * a3 + 7) >> 3) + 1 + result;
    uint64_t v11 = 1;
    while (v11 != 4)
    {
      unint64_t v12 = qword_248551720[v11++];
      if (v12 > v10)
      {
        unint64_t v13 = v11 - 2;
        goto LABEL_16;
      }
    }
    unint64_t v13 = 3;
LABEL_16:
    if (v13 <= v6) {
      break;
    }
    uint64_t v8 = 1;
    while (v8 != 4)
    {
      unint64_t v9 = qword_248551720[v8++];
      if (v9 > v10)
      {
        unint64_t v6 = v8 - 2;
        goto LABEL_10;
      }
    }
    unint64_t v6 = 3;
LABEL_10:
    uint64_t result = qword_248551720[v6];
    *a4 = result;
  }
  *a5 = result + ((unint64_t)(24 * a3 + 12 * a2 + qword_248551700[v6] + 19) >> 3) + 5;
  return result;
}

unint64_t sub_2484C5664(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
LABEL_2:
  unint64_t v12 = a2 - 1;
  unint64_t v13 = v11;
  while (1)
  {
    uint64_t v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    unint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v103 = *v12;
          if (*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12)
          {
            unsigned int v104 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
              || ((int v105 = *v13,
                   float v106 = (float)((float)((float)((float)BYTE1(*v12) * 0.587)
                                        + (float)((float)*v12 * 0.299))
                                + (float)((float)BYTE2(*v12) * 0.114))
                        + 0.01,
                   **a3 != (unsigned int *)4)
                ? (float v107 = (float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                + (float)((float)BYTE2(v104) * 0.114))
                        + 0.01)
                : (float v106 = v106 * (float)HIBYTE(v103),
                   float v107 = (float)((float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                        + (float)((float)BYTE2(v104) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v104)),
                  v106 < v107))
            {
              *unint64_t v13 = v103;
              *unint64_t v12 = v104;
            }
          }
          break;
        case 3uLL:
          unint64_t v108 = *a3;
          uint64_t result = (unint64_t)sub_2484CA404(v13, v13 + 1, a2 - 1, v108);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)sub_2484CA890(v13, v13 + 1, v13 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)sub_2484CABF0(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v129 = (v15 - 2) >> 1;
        int v130 = *a3;
        int64_t v131 = v129;
        while (2)
        {
          int64_t v132 = v131;
          if (v129 >= v131)
          {
            uint64_t v133 = (2 * v131) | 1;
            unint64_t v134 = &v13[v133];
            if (2 * v132 + 2 < (uint64_t)v15)
            {
              unint64_t v135 = v134 + 1;
              if (*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              {
                unsigned int v136 = *v135;
                if (!(*v135 & 0xFF000000 | (BYTE2(*v135) << 16) | (BYTE1(*v135) << 8) | *v135)
                  || ((float v137 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                            + (float)((float)*v134 * 0.299))
                                    + (float)((float)BYTE2(*v134) * 0.114))
                            + 0.01,
                       float v138 = (float)*v135,
                       float v139 = (float)BYTE1(v136),
                       *v130 == (unsigned int *)4)
                    ? (float v137 = v137 * (float)HIBYTE(*v134),
                       float v140 = (float)((float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                            + (float)((float)BYTE2(v136) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v136))
                    : (float v140 = (float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                    + (float)((float)BYTE2(v136) * 0.114))
                            + 0.01),
                      v137 < v140))
                {
                  ++v134;
                  uint64_t v133 = 2 * v132 + 2;
                }
              }
            }
            unsigned int v141 = *v134;
            unsigned int v142 = v13[v132];
            if (!(*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              || (uint64_t result = v142 >> 8,
                  v13[v132] & 0xFF000000 | (BYTE2(v13[v132]) << 16) | (BYTE1(v13[v132]) << 8) | v13[v132])
              && ((uint64_t result = BYTE1(v142),
                   int v143 = v13[v132],
                   float v144 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                        + (float)((float)*v134 * 0.299))
                                + (float)((float)BYTE2(*v134) * 0.114))
                        + 0.01,
                   *v130 == (unsigned int *)4)
                ? (float v144 = v144 * (float)HIBYTE(v141),
                   float v145 = (float)((float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                        + (float)((float)BYTE2(v142) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v142))
                : (float v145 = (float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                + (float)((float)BYTE2(v142) * 0.114))
                        + 0.01),
                  v144 >= v145))
            {
              v13[v132] = v141;
              if (v129 >= v133)
              {
                uint64_t v146 = *a3;
                while (1)
                {
                  uint64_t v147 = 2 * v133;
                  uint64_t v133 = (2 * v133) | 1;
                  uint64_t result = (unint64_t)&v13[v133];
                  uint64_t v148 = v147 + 2;
                  if (v148 < (uint64_t)v15)
                  {
                    uint64_t v149 = (unsigned int *)(result + 4);
                    if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                    {
                      unsigned int v150 = *v149;
                      if (!(*v149 & 0xFF000000 | (BYTE2(*v149) << 16) | (BYTE1(*v149) << 8) | *v149)
                        || ((int v151 = *v149,
                             float v152 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                  + (float)((float)*(_DWORD *)result * 0.299))
                                          + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                  + 0.01,
                             *v146 == (unsigned int *)4)
                          ? (float v152 = v152 * (float)HIBYTE(*(_DWORD *)result),
                             float v153 = (float)((float)((float)((float)((float)BYTE1(v150) * 0.587)
                                                          + (float)((float)v151 * 0.299))
                                                  + (float)((float)BYTE2(v150) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v150))
                          : (float v153 = (float)((float)((float)((float)BYTE1(v150) * 0.587) + (float)((float)v151 * 0.299))
                                          + (float)((float)BYTE2(v150) * 0.114))
                                  + 0.01),
                            v152 < v153))
                      {
                        result += 4;
                        uint64_t v133 = v148;
                      }
                    }
                  }
                  unsigned int v154 = *(_DWORD *)result;
                  if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                  {
                    if (!(v142 & 0xFF000000 | (BYTE2(v142) << 16) | (BYTE1(v142) << 8) | v142)) {
                      break;
                    }
                    float v155 = (float)HIBYTE(v154);
                    if (*v146 != (unsigned int *)4) {
                      float v155 = 1.0;
                    }
                    float v156 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                 + (float)((float)*(_DWORD *)result * 0.299))
                                         + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                 + 0.01)
                         * v155;
                    float v157 = *v146 == (unsigned int *)4 ? (float)HIBYTE(v142) : 1.0;
                    if (v156 < (float)((float)((float)((float)((float)((float)BYTE1(v142) * 0.587)
                                                              + (float)((float)v142 * 0.299))
                                                      + (float)((float)BYTE2(v142) * 0.114))
                                              + 0.01)
                                      * v157))
                      break;
                  }
                  unsigned int *v134 = v154;
                  unint64_t v134 = (unsigned int *)result;
                  if (v129 < v133) {
                    goto LABEL_225;
                  }
                }
              }
              uint64_t result = (unint64_t)v134;
LABEL_225:
              *(_DWORD *)uint64_t result = v142;
            }
          }
          int64_t v131 = v132 - 1;
          if (v132) {
            continue;
          }
          break;
        }
        uint64_t v158 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v159 = 0;
          unsigned int v160 = *v13;
          unint64_t v161 = *a3;
          int v162 = v13;
          do
          {
            int v163 = v162;
            v162 += v159 + 1;
            uint64_t v164 = 2 * v159;
            uint64_t v159 = (2 * v159) | 1;
            uint64_t v165 = v164 + 2;
            if (v165 < v158)
            {
              uint64_t v166 = v162 + 1;
              uint64_t result = *v162 >> 8;
              if (*v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (BYTE1(*v162) << 8) | *v162)
              {
                uint64_t result = *v166;
                if (!(*v166 & 0xFF000000 | (BYTE2(*v166) << 16) | (BYTE1(*v166) << 8) | *v166)
                  || ((int v167 = BYTE2(result),
                       float v168 = (float)((float)((float)((float)BYTE1(*v162) * 0.587)
                                            + (float)((float)*v162 * 0.299))
                                    + (float)((float)BYTE2(*v162) * 0.114))
                            + 0.01,
                       float v169 = (float)*v166,
                       float v170 = (float)BYTE1(result),
                       *v161 != (unsigned int *)4)
                    ? (float v171 = (float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                    + (float)((float)BYTE2(result) * 0.114))
                            + 0.01)
                    : (uint64_t result = BYTE3(result),
                       float v168 = v168 * (float)HIBYTE(*v162),
                       float v171 = (float)((float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                            + (float)((float)v167 * 0.114))
                                    + 0.01)
                            * (float)(int)result),
                      v168 < v171))
                {
                  ++v162;
                  uint64_t v159 = v165;
                }
              }
            }
            *int v163 = *v162;
          }
          while (v159 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
          if (v162 == --a2)
          {
            *int v162 = v160;
          }
          else
          {
            *int v162 = *a2;
            *a2 = v160;
            uint64_t v172 = (char *)v162 - (char *)v13 + 4;
            if (v172 >= 5)
            {
              unint64_t v173 = ((unint64_t)v172 >> 2) - 2;
              unint64_t v174 = v173 >> 1;
              uint64_t v175 = &v13[v173 >> 1];
              unsigned int v176 = *v175;
              if (*v175 & 0xFF000000 | (BYTE2(*v175) << 16) | (BYTE1(*v175) << 8) | *v175)
              {
                unsigned int v177 = *v162;
                int v178 = HIBYTE(*v162);
                uint64_t result = BYTE2(*v162);
                int v179 = BYTE1(*v162);
                int v180 = *v162;
                unsigned int v181 = *v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (v179 << 8) | v180;
                if (!v181
                  || ((float v182 = (float)((float)((float)((float)BYTE1(*v175) * 0.587)
                                            + (float)((float)*v175 * 0.299))
                                    + (float)((float)BYTE2(*v175) * 0.114))
                            + 0.01,
                       float v183 = (float)v180,
                       float v184 = (float)v179,
                       *v161 != (unsigned int *)4)
                    ? (float v185 = (float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                    + (float)((float)(int)result * 0.114))
                            + 0.01)
                    : (float v182 = v182 * (float)HIBYTE(v176),
                       float v185 = (float)((float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                            + (float)((float)(int)result * 0.114))
                                    + 0.01)
                            * (float)v178),
                      v182 < v185))
                {
                  *int v162 = v176;
                  if (v173 >= 2)
                  {
                    uint64_t v188 = *a3;
                    float v189 = (float)((float)((float)((float)v179 * 0.587) + (float)((float)v180 * 0.299))
                                 + (float)((float)(int)result * 0.114))
                         + 0.01;
                    float v190 = (float)v178;
                    while (1)
                    {
                      unint64_t v191 = v174 - 1;
                      unint64_t v174 = (v174 - 1) >> 1;
                      uint64_t v186 = &v13[v174];
                      unsigned int v192 = *v186;
                      uint64_t result = HIWORD(*v186);
                      if (!(*v186 & 0xFF000000 | (BYTE2(*v186) << 16) | (BYTE1(*v186) << 8) | *v186)) {
                        break;
                      }
                      if (v181)
                      {
                        uint64_t result = BYTE2(v192);
                        float v193 = (float)HIBYTE(v192);
                        if (*v188 != (unsigned int *)4) {
                          float v193 = 1.0;
                        }
                        float v194 = (float)((float)((float)((float)((float)BYTE1(*v186) * 0.587)
                                                     + (float)((float)*v186 * 0.299))
                                             + (float)((float)BYTE2(*v186) * 0.114))
                                     + 0.01)
                             * v193;
                        float v195 = *v188 == (unsigned int *)4 ? v190 : 1.0;
                        if (v194 >= (float)(v189 * v195)) {
                          break;
                        }
                      }
                      *uint64_t v175 = v192;
                      uint64_t v175 = &v13[v174];
                      if (v191 <= 1) {
                        goto LABEL_249;
                      }
                    }
                  }
                  uint64_t v186 = v175;
LABEL_249:
                  unsigned int *v186 = v177;
                }
              }
            }
          }
        }
        while (v158-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v13[v15 >> 1];
    unint64_t v18 = *a3;
    if ((unint64_t)v14 >= 0x201)
    {
      sub_2484CA404(v11, &v11[v15 >> 1], a2 - 1, v18);
      sub_2484CA404(v11 + 1, v17 - 1, a2 - 2, *a3);
      sub_2484CA404(v11 + 2, &v11[v16 + 1], a2 - 3, *a3);
      uint64_t result = (unint64_t)sub_2484CA404(v17 - 1, v17, &v11[v16 + 1], *a3);
      unsigned int v19 = *v11;
      *uint64_t v11 = *v17;
      unsigned int *v17 = v19;
    }
    else
    {
      uint64_t result = (unint64_t)sub_2484CA404(&v11[v15 >> 1], v11, a2 - 1, v18);
    }
    unsigned int v20 = *v11;
    int v21 = HIBYTE(*v11);
    --a4;
    if (a5)
    {
LABEL_17:
      uint64_t v31 = v11 + 1;
      unsigned int v30 = v11[1];
      if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
        goto LABEL_39;
      }
      int v32 = BYTE2(v30);
      int v33 = BYTE1(v30);
      int v34 = v30;
      unsigned int v35 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
      uint64_t v36 = *a3;
      float v37 = (float)((float)((float)((float)BYTE1(*v11) * 0.587)
                          + (float)((float)*v11 * 0.299))
                  + (float)((float)BYTE2(*v11) * 0.114))
          + 0.01;
      while (1)
      {
        unint64_t v38 = v31;
        if (v35)
        {
          float v39 = (float)HIBYTE(v30);
          if (*v36 != (unsigned int *)4) {
            float v39 = 1.0;
          }
          float v40 = (float)((float)((float)((float)((float)v33 * 0.587) + (float)((float)v34 * 0.299))
                              + (float)((float)v32 * 0.114))
                      + 0.01)
              * v39;
          float v41 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
          if (v40 >= (float)(v37 * v41)) {
            break;
          }
        }
        ++v31;
        unsigned int v30 = v38[1];
        int v32 = BYTE2(v30);
        int v33 = BYTE1(v30);
        int v34 = v30;
        uint64_t v42 = v38;
        if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
          goto LABEL_29;
        }
      }
      uint64_t v42 = v31 - 1;
LABEL_29:
      uint64_t i = a2 - 1;
      if (v42 == v11)
      {
LABEL_39:
        if (v31 < a2)
        {
          for (uint64_t i = a2 - 1; ; --i)
          {
            if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
            {
              if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11)) {
                goto LABEL_52;
              }
              float v47 = (float)HIBYTE(*i);
              if (**a3 == (unsigned int *)4)
              {
                float v48 = (float)v21;
              }
              else
              {
                float v47 = 1.0;
                float v48 = 1.0;
              }
              if (v31 >= i
                || (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                 + (float)((float)*i * 0.299))
                                         + (float)((float)BYTE2(*i) * 0.114))
                                 + 0.01)
                         * v47) < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                                + (float)((float)*v11 * 0.299))
                                                        + (float)((float)BYTE2(*v11) * 0.114))
                                                + 0.01)
                                        * v48))
              {
                goto LABEL_52;
              }
            }
            else if (v31 >= i)
            {
              goto LABEL_52;
            }
          }
        }
        uint64_t i = a2;
      }
      else
      {
        while (1)
        {
          if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
          {
            if (!v35) {
              break;
            }
            float v44 = (float)HIBYTE(*i);
            if (*v36 != (unsigned int *)4) {
              float v44 = 1.0;
            }
            float v45 = (float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                        + (float)((float)*i * 0.299))
                                + (float)((float)BYTE2(*i) * 0.114))
                        + 0.01)
                * v44;
            float v46 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
            if (v45 < (float)(v37 * v46)) {
              break;
            }
          }
          --i;
        }
      }
LABEL_52:
      unint64_t v13 = v31;
      if (v31 < i)
      {
        unsigned int v49 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
        float v50 = (float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                    + (float)((float)*v11 * 0.299))
                            + (float)((float)BYTE2(*v11) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v51 = *i;
        unint64_t v13 = v31;
        unint64_t v52 = i;
        do
        {
          *unint64_t v13 = v51;
          unsigned int *v52 = v30;
          unsigned int v53 = v13[1];
          ++v13;
          unsigned int v30 = v53;
          unint64_t v54 = *a3;
          if (v53 & 0xFF000000 | (BYTE2(v53) << 16) | (BYTE1(v53) << 8) | v53)
          {
            int v55 = BYTE2(v30);
            int v56 = BYTE1(v30);
            int v57 = v30;
            do
            {
              if (v49)
              {
                float v58 = (float)HIBYTE(v30);
                if (*v54 != (unsigned int *)4) {
                  float v58 = 1.0;
                }
                float v59 = (float)((float)((float)((float)((float)v56 * 0.587) + (float)((float)v57 * 0.299))
                                    + (float)((float)v55 * 0.114))
                            + 0.01)
                    * v58;
                float v60 = *v54 == (unsigned int *)4
                    ? v50
                    : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01;
                if (v59 >= v60) {
                  break;
                }
              }
              unsigned int v61 = v13[1];
              ++v13;
              unsigned int v30 = v61;
              int v55 = BYTE2(v61);
              int v56 = BYTE1(v61);
              int v57 = v61;
            }
            while (v61 & 0xFF000000 | (BYTE2(v61) << 16) | (BYTE1(v61) << 8) | v61);
          }
          do
          {
            do
            {
              unsigned int v62 = *--v52;
              unsigned int v51 = v62;
            }
            while (!(v62 & 0xFF000000 | (BYTE2(v62) << 16) | (BYTE1(v62) << 8) | v62));
            if (!v49) {
              break;
            }
            float v63 = (float)HIBYTE(v51);
            if (*v54 != (unsigned int *)4) {
              float v63 = 1.0;
            }
            float v64 = (float)((float)((float)((float)((float)BYTE1(v51) * 0.587)
                                        + (float)((float)v51 * 0.299))
                                + (float)((float)BYTE2(v51) * 0.114))
                        + 0.01)
                * v63;
            float v65 = *v54 == (unsigned int *)4
                ? v50
                : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                        + (float)((float)BYTE2(v20) * 0.114))
                + 0.01;
          }
          while (v64 >= v65);
        }
        while (v13 < v52);
      }
      uint64_t v66 = v13 - 1;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v66;
      }
      *uint64_t v66 = v20;
      if (v31 < i)
      {
LABEL_78:
        uint64_t result = sub_2484C5664(v11, v13 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v67 = sub_2484CBA60(v11, v13 - 1, a3);
        uint64_t result = sub_2484CBA60(v13, a2, a3);
        if (result)
        {
          a2 = v13 - 1;
          if (v67) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v67) {
          goto LABEL_78;
        }
      }
    }
    else
    {
      unsigned int v22 = *(v11 - 1);
      int v23 = *v11;
      unsigned int v24 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | v23;
      if (v22 & 0xFF000000 | (BYTE2(v22) << 16) | (BYTE1(v22) << 8) | v22)
      {
        if (!v24) {
          goto LABEL_17;
        }
        uint64_t result = v22;
        uint64_t v25 = (unint64_t *)*a3;
        float v26 = (float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v22 * 0.299))
                    + (float)((float)BYTE2(v22) * 0.114))
            + 0.01;
        float v27 = (float)v23;
        float v28 = (float)BYTE1(v20);
        if (**a3 == (unsigned int *)4)
        {
          float v26 = v26 * (float)HIBYTE(v22);
          float v29 = (float)((float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
                      + 0.01)
              * (float)v21;
        }
        else
        {
          float v29 = (float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
              + 0.01;
        }
        if (v26 < v29) {
          goto LABEL_17;
        }
      }
      else
      {
        if (!v24)
        {
          char v75 = 1;
          goto LABEL_98;
        }
        uint64_t v25 = (unint64_t *)*a3;
      }
      unsigned int v68 = *v12;
      float v69 = (float)BYTE1(v20);
      if (!(*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12))
      {
        float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
            + 0.01;
LABEL_88:
        uint64_t v76 = v11 + 1;
        do
        {
          unint64_t v13 = v76;
          unsigned int v77 = *v76;
          if (!(v77 & 0xFF000000 | (BYTE2(v77) << 16) | (BYTE1(v77) << 8) | v77)) {
            break;
          }
          float v78 = (float)HIBYTE(v77);
          if (*v25 == 4) {
            float v79 = (float)v21;
          }
          else {
            float v79 = 1.0;
          }
          float v80 = v70 * v79;
          if (*v25 != 4) {
            float v78 = 1.0;
          }
          float v81 = (float)((float)((float)((float)((float)BYTE1(v77) * 0.587) + (float)((float)v77 * 0.299))
                              + (float)((float)BYTE2(v77) * 0.114))
                      + 0.01)
              * v78;
          uint64_t v76 = v13 + 1;
        }
        while (v80 >= v81);
LABEL_96:
        char v75 = 0;
        goto LABEL_109;
      }
      uint64_t result = *v25;
      float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
          + 0.01;
      float v71 = (float)*v12;
      float v72 = (float)BYTE1(v68);
      if (*v25 == 4)
      {
        float v73 = v70 * (float)v21;
        float v74 = (float)((float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114))
                    + 0.01)
            * (float)HIBYTE(v68);
      }
      else
      {
        float v74 = (float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114)) + 0.01;
        float v73 = v70;
      }
      if (v73 < v74) {
        goto LABEL_88;
      }
      char v75 = 0;
LABEL_98:
      unint64_t v13 = v11 + 1;
      if (v11 + 1 < a2)
      {
        uint64_t v82 = *a3;
        do
        {
          if ((v75 & 1) == 0)
          {
            unsigned int v83 = *v13;
            uint64_t result = *v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13;
            if (!result) {
              goto LABEL_96;
            }
            uint64_t result = *v13;
            float v84 = (float)HIBYTE(v83);
            if (*v82 == (unsigned int *)4) {
              float v85 = (float)v21;
            }
            else {
              float v85 = 1.0;
            }
            float v86 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v85;
            if (*v82 != (unsigned int *)4) {
              float v84 = 1.0;
            }
            if (v86 < (float)((float)((float)((float)((float)((float)BYTE1(v83) * 0.587)
                                                     + (float)((float)(int)result * 0.299))
                                             + (float)((float)BYTE2(v83) * 0.114))
                                     + 0.01)
                             * v84))
              goto LABEL_96;
          }
          ++v13;
        }
        while (v13 < a2);
      }
LABEL_109:
      if (v13 < a2) {
        uint64_t j = a2 - 1;
      }
      else {
        uint64_t j = a2;
      }
      if (v13 < a2 && (v75 & 1) == 0)
      {
        __int16 v88 = *a3;
        for (uint64_t j = a2 - 1; ; --j)
        {
          unsigned int v89 = *j;
          if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
          {
            uint64_t result = BYTE1(v89);
            float v90 = (float)HIBYTE(v89);
            if (*v88 == (unsigned int *)4) {
              float v91 = (float)v21;
            }
            else {
              float v91 = 1.0;
            }
            float v92 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v91;
            if (*v88 != (unsigned int *)4) {
              float v90 = 1.0;
            }
            if (v92 >= (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                      + (float)((float)*j * 0.299))
                                              + (float)((float)BYTE2(*j) * 0.114))
                                      + 0.01)
                              * v90))
              break;
          }
        }
      }
      if (v13 < j)
      {
        float v93 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v94 = *v13;
        unsigned int v95 = *j;
        do
        {
          *v13++ = v95;
          *uint64_t j = v94;
          uint64_t v96 = (unint64_t *)*a3;
          if (v75) {
            goto LABEL_133;
          }
          while (1)
          {
            unsigned int v94 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)) {
              break;
            }
            float v97 = (float)HIBYTE(v94);
            if (*v96 == 4) {
              float v98 = v93;
            }
            else {
              float v98 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
            if (*v96 != 4) {
              float v97 = 1.0;
            }
            if (v98 < (float)((float)((float)((float)((float)((float)BYTE1(*v13) * 0.587)
                                                     + (float)((float)*v13 * 0.299))
                                             + (float)((float)BYTE2(*v13) * 0.114))
                                     + 0.01)
                             * v97))
              break;
            do
LABEL_133:
              ++v13;
            while ((v75 & 1) != 0);
          }
          do
          {
            do
            {
              unsigned int v99 = *--j;
              unsigned int v95 = v99;
            }
            while (!(v99 & 0xFF000000 | (BYTE2(v99) << 16) | (BYTE1(v99) << 8) | v99));
            uint64_t result = *v96;
            float v100 = (float)HIBYTE(v95);
            if (*v96 == 4) {
              float v101 = v93;
            }
            else {
              float v101 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                           + (float)((float)BYTE2(v20) * 0.114))
                   + 0.01;
            if (*v96 != 4) {
              float v100 = 1.0;
            }
          }
          while (v101 < (float)((float)((float)((float)((float)((float)BYTE1(v95) * 0.587)
                                                       + (float)((float)v95 * 0.299))
                                               + (float)((float)BYTE2(v95) * 0.114))
                                       + 0.01)
                               * v100));
        }
        while (v13 < j);
      }
      uint64_t v102 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v102;
      }
      a5 = 0;
      *uint64_t v102 = v20;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v13 == a2) {
      return result;
    }
    int v196 = v13 + 1;
    if (v13 + 1 == a2) {
      return result;
    }
    int v197 = *a3;
    while (1)
    {
      uint64_t v198 = v11;
      uint64_t v11 = v196;
      unsigned int v199 = v198[1];
      if (v199 & 0xFF000000 | (BYTE2(v199) << 16) | (BYTE1(v199) << 8) | v199)
      {
        int v200 = HIBYTE(v199);
        int v201 = v198[1];
        unsigned int v202 = *v198;
        if (!(*v198 & 0xFF000000 | (BYTE2(*v198) << 16) | (BYTE1(*v198) << 8) | *v198))
        {
          float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
LABEL_274:
          unint64_t v206 = *a3;
          float v207 = (float)v200;
          do
          {
            do
            {
              unint64_t v208 = v198;
              unsigned int v209 = v202;
              unsigned int v210 = *--v198;
              unsigned int v202 = v210;
              v198[2] = v209;
            }
            while (!(v210 & 0xFF000000 | (BYTE2(v210) << 16) | (BYTE1(v210) << 8) | v210));
            uint64_t result = (unint64_t)*v206;
            float v211 = (float)HIBYTE(v202);
            if (*v206 == (unsigned int *)4) {
              float v212 = v207;
            }
            else {
              float v212 = 1.0;
            }
            float v213 = v203 * v212;
            if (*v206 != (unsigned int *)4) {
              float v211 = 1.0;
            }
          }
          while (v213 < (float)((float)((float)((float)((float)((float)BYTE1(v202) * 0.587)
                                                       + (float)((float)v202 * 0.299))
                                               + (float)((float)BYTE2(v202) * 0.114))
                                       + 0.01)
                               * v211));
          *unint64_t v208 = v199;
          goto LABEL_283;
        }
        uint64_t result = *v198;
        float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                     + (float)((float)BYTE2(v199) * 0.114))
             + 0.01;
        if (*v197 == (unsigned int *)4)
        {
          float v204 = v203 * (float)v200;
          float v205 = (float)((float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                               + (float)((float)BYTE2(v202) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v202);
        }
        else
        {
          float v205 = (float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                       + (float)((float)BYTE2(v202) * 0.114))
               + 0.01;
          float v204 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
        }
        if (v204 < v205) {
          goto LABEL_274;
        }
      }
LABEL_283:
      int v196 = v11 + 1;
      if (v11 + 1 == a2) {
        return result;
      }
    }
  }
  if (v13 != a2)
  {
    unint64_t v109 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v110 = 0;
      unint64_t v111 = *a3;
      uint64_t v112 = v13;
      do
      {
        uint64_t v113 = v112;
        uint64_t v112 = v109;
        unsigned int v114 = v113[1];
        if (v114 & 0xFF000000 | (BYTE2(v114) << 16) | (BYTE1(v114) << 8) | v114)
        {
          int v115 = HIBYTE(v114);
          int v116 = v113[1];
          unsigned int v117 = *v113;
          uint64_t result = HIWORD(*v113);
          if (!(*v113 & 0xFF000000 | (BYTE2(*v113) << 16) | (BYTE1(*v113) << 8) | *v113)
            || ((uint64_t result = BYTE2(v117),
                 int v118 = *v113,
                 float v119 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                              + (float)((float)BYTE2(v114) * 0.114))
                      + 0.01,
                 *v111 != (unsigned int *)4)
              ? (float v120 = (float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                              + (float)((float)BYTE2(v117) * 0.114))
                      + 0.01)
              : (float v119 = v119 * (float)v115,
                 float v120 = (float)((float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                                      + (float)((float)BYTE2(v117) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v117)),
                v119 < v120))
          {
            v113[1] = v117;
            unsigned __int8 v121 = v13;
            if (v113 != v13)
            {
              int v122 = *a3;
              float v123 = (float)v115;
              uint64_t v124 = v110;
              while (1)
              {
                unsigned int v125 = *(unsigned int *)((char *)v13 + v124 - 4);
                uint64_t result = v125 & 0xFF000000 | (BYTE2(v125) << 16) | (BYTE1(v125) << 8) | v125;
                if (result)
                {
                  uint64_t result = *(unsigned int *)((char *)v13 + v124 - 4);
                  float v126 = (float)HIBYTE(v125);
                  if (*v122 == (unsigned int *)4) {
                    float v127 = v123;
                  }
                  else {
                    float v127 = 1.0;
                  }
                  float v128 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                                       + (float)((float)BYTE2(v114) * 0.114))
                               + 0.01)
                       * v127;
                  if (*v122 != (unsigned int *)4) {
                    float v126 = 1.0;
                  }
                  if (v128 >= (float)((float)((float)((float)((float)((float)BYTE1(v125) * 0.587)
                                                             + (float)((float)(int)result * 0.299))
                                                     + (float)((float)BYTE2(v125) * 0.114))
                                             + 0.01)
                                     * v126))
                    break;
                }
                *(unsigned int *)((char *)v13 + v124) = v125;
                v124 -= 4;
                if (!v124)
                {
                  unsigned __int8 v121 = v13;
                  goto LABEL_185;
                }
              }
              unsigned __int8 v121 = (unsigned int *)((char *)v13 + v124);
            }
LABEL_185:
            *unsigned __int8 v121 = v114;
          }
        }
        unint64_t v109 = v112 + 1;
        v110 += 4;
      }
      while (v112 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2484C6DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  a42 = *MEMORY[0x263EF8340];
  if ((unint64_t)(**(void **)a1 - (a3 << 8)) >= 0x100) {
    uint64_t v45 = 256;
  }
  else {
    uint64_t v45 = **(void **)a1 - (a3 << 8);
  }
  float v44 = *(void **)(a1 + 8);
  if ((unint64_t)(*v44 - (a2 << 8)) >= 0x100) {
    uint64_t v46 = 256;
  }
  else {
    uint64_t v46 = *v44 - (a2 << 8);
  }
  a9 = 0;
  uint64_t vars0 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 16) + 16))(**(void **)(a1 + 16), a2 << 8, a3 << 8, v46, v45, &a9);
  uint64_t v47 = (v45 - a4) & ~((v45 - a4) >> 63);
  uint64_t v48 = (int)(v47 >> 1);
  int v49 = v45 - ((unint64_t)v47 >> 1);
  if (v49 >= (int)a4) {
    int v49 = a4;
  }
  unint64_t v50 = v46 & 0x1F0;
  uint64_t v127 = a9;
  uint64_t v128 = v48;
  uint64_t v129 = v49;
  uint64_t v52 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 32);
  unint64_t v53 = **(void **)(a1 + 64);
  if (**(unsigned char **)(a1 + 48))
  {
    int v126 = **(unsigned __int8 **)(a1 + 72);
    for (uint64_t i = 1; i != 9; i += 2)
      (&a13)[i] = 0;
    if (v53)
    {
      int v55 = &a21;
      int v56 = &a13;
      unint64_t v57 = v53;
      do
      {
        *int v56 = (uint64_t *)v55;
        v56 += 2;
        *(void *)int v55 = v52;
        *((void *)v55 + 1) = v51;
        v55 += 16;
        v51 += 264;
        v52 += 152;
        --v57;
      }
      while (v57);
      sub_2484CB468(&__p, v53);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if (v129 != -1)
    {
      uint64_t v66 = 0;
      uint64_t v67 = 1;
      long long v68 = 0uLL;
      do
      {
        a31 = v68;
        a32 = v68;
        float v69 = (int8x16_t *)(vars0 + (v66 + v128) * v127);
        a29 = v68;
        a30 = v68;
        uint64_t vars8 = v67;
        if (v53)
        {
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          float v72 = &__p[704 * (v67 & 1) + 64];
          float v73 = &__p[704 * (v66 & 1) + 64];
          float v74 = v73;
          char v75 = v72;
          do
          {
            *((void *)&a31 + v71) = &v73[v70 + (v74 & 0x3E)];
            *((void *)&a29 + v71++) = &v72[v70 + (v75 & 0x3E)];
            v75 += 1408;
            v70 += 1408;
            v74 += 1408;
          }
          while (v53 != v71);
          switch(v53)
          {
            case 1uLL:
              if (v126) {
                sub_2484CB538(v69, v50, (int8x16_t *)a31);
              }
              else {
                sub_2484CB5A8((long long *)v69->i8, v50, (_OWORD *)a31);
              }
              goto LABEL_47;
            case 2uLL:
              if (v126) {
                sub_2484CB60C(v69->i16, v50, (int8x16_t *)a31, *((int8x16_t **)&a31 + 1));
              }
              else {
                sub_2484CB69C(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1));
              }
              goto LABEL_47;
            case 3uLL:
              if (v126) {
                sub_2484CB714(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              }
              else {
                sub_2484CB7EC(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              }
LABEL_47:
              long long v68 = 0uLL;
              int8x16_t v80 = (int8x16_t)xmmword_2484DD030;
              v81.i64[0] = 0x8000800080008;
              v81.i64[1] = 0x8000800080008;
LABEL_48:
              for (uint64_t j = 0; j != v53; ++j)
              {
                while (!v66)
                {
                  *(_WORD *)(*((void *)&a31 + j) - 2) = 0;
                  *(_WORD *)(*((void *)&a29 + j++) - 2) = 0;
                  if (j == v53) {
                    goto LABEL_100;
                  }
                }
                unsigned int v83 = (_WORD *)*((void *)&a29 + j);
                *(_WORD *)(*((void *)&a31 + j) - 2) = *v83;
                *(v83 - 1) = *v83;
              }
              uint64_t v84 = 0;
              while ((v46 & 0x1F0) == 0)
              {
LABEL_99:
                if (++v84 == v53) {
                  goto LABEL_100;
                }
              }
              unint64_t v85 = 0;
              uint64_t v86 = *((void *)&a31 + v84);
              uint64_t v87 = *((void *)&a29 + v84);
              __int16 v88 = &(&a13)[2 * v84];
              unsigned int v89 = v88[1];
              unint64_t v90 = v46 & 0x1F0;
              while (2)
              {
                uint64_t v91 = 0;
                unint64_t v92 = 0;
                unint64_t v93 = v90 - 16;
                if (v90 >= 0x10) {
                  uint64_t v94 = 16;
                }
                else {
                  uint64_t v94 = v90;
                }
                a33 = v68;
                a34 = v68;
                char v95 = 1;
                do
                {
                  int16x8_t v96 = *(int16x8_t *)(v86 - 2 + 2 * v85 + 2 * v91);
                  int16x8_t v97 = *(int16x8_t *)(v87 + 2 * v85 + 2 * v91);
                  int16x8_t v98 = *(int16x8_t *)(v87 - 2 + 2 * v85 + 2 * v91);
                  int16x8_t v99 = vsubq_s16(v96, v98);
                  int8x16_t v100 = (int8x16_t)vsubq_s16(v97, v98);
                  int16x8_t v101 = vsubq_s16(*(int16x8_t *)(v86 + 2 * v85 + 2 * v91), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v99, v100)), (int8x16_t)vaddq_s16(v99, v97), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v100, (int8x16_t)vsubq_s16(v96, v97))), (int8x16_t)v97, (int8x16_t)v96)));
                  char v102 = v95;
                  int16x8_t v103 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v101, v101), (int8x16_t)vcltzq_s16(v101));
                  uint16x8_t v104 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v103), v81, v80);
                  v104.i16[0] = vminvq_u16(v104);
                  *(long long *)((char *)&a33 + 2 * v91) = (__int128)v103;
                  if (v92 == v91) {
                    uint64_t v105 = v104.u32[0];
                  }
                  else {
                    uint64_t v105 = 0;
                  }
                  v92 += v105;
                  uint64_t v91 = 8;
                  char v95 = 0;
                }
                while ((v102 & 1) != 0);
                unint64_t v106 = v50 - v85;
                if (v50 - v85 >= 0x10) {
                  unint64_t v106 = 16;
                }
                float v107 = v89;
                if (v92 >= v106) {
                  unint64_t v108 = v106;
                }
                else {
                  unint64_t v108 = v92;
                }
                if (v92 < v106)
                {
LABEL_73:
                  unint64_t v109 = (unint64_t)v107 + v108;
                  if (v109 >= 8)
                  {
                    unint64_t v111 = (void *)**v88;
                    uint64_t v110 = (*v88)[1];
                    ++*v111;
                    unsigned int v112 = v109 - 8;
                    unsigned int v113 = 43 - __clz(v112);
                    if (!v112) {
                      unsigned int v113 = 12;
                    }
                    if (v112 >= 0x10) {
                      unsigned int v112 = v113;
                    }
                    ++*(void *)(v110 + 8 * v112);
                    if (v92 < v106)
                    {
                      if (v90 >= v92) {
                        unint64_t v90 = v92;
                      }
                      if (v90 >= 0x10) {
                        unint64_t v90 = 16;
                      }
                      unint64_t v114 = v94 - v90;
                      int v115 = (unsigned __int16 *)((unint64_t)&a33 | (2 * v90));
                      do
                      {
                        unsigned int v116 = *v115++;
                        uint64_t v117 = 32 - __clz(v116);
                        if (v116) {
                          uint64_t v118 = v117;
                        }
                        else {
                          uint64_t v118 = 0;
                        }
                        ++v111[v118];
                        --v114;
                      }
                      while (v114);
                    }
                    unsigned int v89 = 0;
                    goto LABEL_97;
                  }
                  if (v106)
                  {
                    uint64_t v119 = **v88;
                    float v120 = &a33;
                    do
                    {
                      unsigned int v121 = *(unsigned __int16 *)v120;
                      float v120 = (long long *)((char *)v120 + 2);
                      uint64_t v122 = 32 - __clz(v121);
                      if (v121) {
                        uint64_t v123 = v122;
                      }
                      else {
                        uint64_t v123 = 0;
                      }
                      ++*(void *)(v119 + 8 * v123);
                      --v94;
                    }
                    while (v94);
                  }
                }
                else
                {
                  if (!v89 && v108 < 8)
                  {
                    float v107 = 0;
                    goto LABEL_73;
                  }
                  unsigned int v89 = (uint64_t *)((char *)v89 + v108);
LABEL_97:
                  v88[1] = v89;
                }
                v85 += 16;
                unint64_t v90 = v93;
                if (v85 >= v50) {
                  goto LABEL_99;
                }
                continue;
              }
          }
          float v78 = (int16x8_t *)*((void *)&a31 + 1);
          float v79 = (int16x8_t *)a31;
          uint64_t v76 = (int8x16_t *)*((void *)&a32 + 1);
          unsigned int v77 = (int16x8_t *)a32;
        }
        else
        {
          uint64_t v76 = 0;
          unsigned int v77 = 0;
          float v78 = 0;
          float v79 = 0;
        }
        if (v126) {
          sub_2484CB8A4(v69->i16, v50, v79, v78, v77, v76);
        }
        else {
          sub_2484CB998(v69->i16, v50, v79, v78, v77, (int16x8_t *)v76);
        }
        long long v68 = 0uLL;
        int8x16_t v80 = (int8x16_t)xmmword_2484DD030;
        v81.i64[0] = 0x8000800080008;
        v81.i64[1] = 0x8000800080008;
        if (v53) {
          goto LABEL_48;
        }
LABEL_100:
        uint64_t v67 = (vars8 + 1);
      }
      while (v66++ != v129);
    }
    if (__p)
    {
      a11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unsigned int v58 = **(unsigned __int8 **)(a1 + 40);
    uint64_t v59 = **(void **)(a1 + 80);
    for (uint64_t k = 1; k != 9; k += 2)
      (&a13)[k] = 0;
    if (v53)
    {
      uint64_t v61 = v52 + 152 * v58;
      uint64_t v62 = v51 + 264 * v58;
      float v63 = &a21;
      float v64 = &a13;
      unint64_t v65 = v53;
      do
      {
        *float v64 = (uint64_t *)v63;
        v64 += 2;
        *(void *)float v63 = v61;
        *((void *)v63 + 1) = v62;
        v63 += 16;
        --v65;
      }
      while (v65);
    }
    sub_2484C98A4(vars0, v128, v46 & 0x1F0, v129 + 1, v127, v59, v53, &a13);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 16) + 40))(**(void **)(a1 + 16), vars0);
}

uint64_t sub_2484C7414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  a42 = *MEMORY[0x263EF8340];
  if ((unint64_t)(**(void **)a1 - (a3 << 8)) >= 0x100) {
    uint64_t v45 = 256;
  }
  else {
    uint64_t v45 = **(void **)a1 - (a3 << 8);
  }
  float v44 = *(void **)(a1 + 8);
  if ((unint64_t)(*v44 - (a2 << 8)) >= 0x100) {
    uint64_t v46 = 256;
  }
  else {
    uint64_t v46 = *v44 - (a2 << 8);
  }
  a9 = 0;
  uint64_t vars0 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 16) + 16))(**(void **)(a1 + 16), a2 << 8, a3 << 8, v46, v45, &a9);
  uint64_t v47 = (v45 - a4) & ~((v45 - a4) >> 63);
  uint64_t v48 = (int)(v47 >> 1);
  int v49 = v45 - ((unint64_t)v47 >> 1);
  if (v49 >= (int)a4) {
    int v49 = a4;
  }
  unint64_t v50 = v46 & 0x1F0;
  uint64_t v127 = a9;
  uint64_t v128 = v48;
  uint64_t v129 = v49;
  uint64_t v52 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 32);
  unint64_t v53 = **(void **)(a1 + 64);
  if (**(unsigned char **)(a1 + 48))
  {
    int v126 = **(unsigned __int8 **)(a1 + 72);
    for (uint64_t i = 1; i != 9; i += 2)
      (&a13)[i] = 0;
    if (v53)
    {
      int v55 = &a21;
      int v56 = &a13;
      unint64_t v57 = v53;
      do
      {
        *int v56 = (uint64_t *)v55;
        v56 += 2;
        *(void *)int v55 = v52;
        *((void *)v55 + 1) = v51;
        v55 += 16;
        v51 += 264;
        v52 += 152;
        --v57;
      }
      while (v57);
      sub_2484CB468(&__p, v53);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if (v129 != -1)
    {
      uint64_t v66 = 0;
      uint64_t v67 = 1;
      long long v68 = 0uLL;
      do
      {
        a31 = v68;
        a32 = v68;
        float v69 = (int8x16_t *)(vars0 + (v66 + v128) * v127);
        a29 = v68;
        a30 = v68;
        uint64_t vars8 = v67;
        if (v53)
        {
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          float v72 = &__p[704 * (v67 & 1) + 64];
          float v73 = &__p[704 * (v66 & 1) + 64];
          float v74 = v73;
          char v75 = v72;
          do
          {
            *((void *)&a31 + v71) = &v73[v70 + (v74 & 0x3E)];
            *((void *)&a29 + v71++) = &v72[v70 + (v75 & 0x3E)];
            v75 += 1408;
            v70 += 1408;
            v74 += 1408;
          }
          while (v53 != v71);
          switch(v53)
          {
            case 1uLL:
              if (v126) {
                sub_2484CB538(v69, v50, (int8x16_t *)a31);
              }
              else {
                sub_2484CB5A8((long long *)v69->i8, v50, (_OWORD *)a31);
              }
              goto LABEL_47;
            case 2uLL:
              if (v126) {
                sub_2484CB60C(v69->i16, v50, (int8x16_t *)a31, *((int8x16_t **)&a31 + 1));
              }
              else {
                sub_2484CB69C(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1));
              }
              goto LABEL_47;
            case 3uLL:
              if (v126) {
                sub_2484CB714(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              }
              else {
                sub_2484CB7EC(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              }
LABEL_47:
              long long v68 = 0uLL;
              int8x16_t v80 = (int8x16_t)xmmword_2484DD030;
              v81.i64[0] = 0x8000800080008;
              v81.i64[1] = 0x8000800080008;
LABEL_48:
              for (uint64_t j = 0; j != v53; ++j)
              {
                while (!v66)
                {
                  *(_WORD *)(*((void *)&a31 + j) - 2) = 0;
                  *(_WORD *)(*((void *)&a29 + j++) - 2) = 0;
                  if (j == v53) {
                    goto LABEL_100;
                  }
                }
                unsigned int v83 = (_WORD *)*((void *)&a29 + j);
                *(_WORD *)(*((void *)&a31 + j) - 2) = *v83;
                *(v83 - 1) = *v83;
              }
              uint64_t v84 = 0;
              while ((v46 & 0x1F0) == 0)
              {
LABEL_99:
                if (++v84 == v53) {
                  goto LABEL_100;
                }
              }
              unint64_t v85 = 0;
              uint64_t v86 = *((void *)&a31 + v84);
              uint64_t v87 = *((void *)&a29 + v84);
              __int16 v88 = &(&a13)[2 * v84];
              unsigned int v89 = v88[1];
              unint64_t v90 = v46 & 0x1F0;
              while (2)
              {
                uint64_t v91 = 0;
                unint64_t v92 = 0;
                unint64_t v93 = v90 - 16;
                if (v90 >= 0x10) {
                  uint64_t v94 = 16;
                }
                else {
                  uint64_t v94 = v90;
                }
                a33 = v68;
                a34 = v68;
                char v95 = 1;
                do
                {
                  int16x8_t v96 = *(int16x8_t *)(v86 - 2 + 2 * v85 + 2 * v91);
                  int16x8_t v97 = *(int16x8_t *)(v87 + 2 * v85 + 2 * v91);
                  int16x8_t v98 = *(int16x8_t *)(v87 - 2 + 2 * v85 + 2 * v91);
                  int16x8_t v99 = vsubq_s16(v96, v98);
                  int8x16_t v100 = (int8x16_t)vsubq_s16(v97, v98);
                  int16x8_t v101 = vsubq_s16(*(int16x8_t *)(v86 + 2 * v85 + 2 * v91), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v99, v100)), (int8x16_t)vaddq_s16(v99, v97), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v100, (int8x16_t)vsubq_s16(v96, v97))), (int8x16_t)v97, (int8x16_t)v96)));
                  char v102 = v95;
                  int16x8_t v103 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v101, v101), (int8x16_t)vcltzq_s16(v101));
                  uint16x8_t v104 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v103), v81, v80);
                  v104.i16[0] = vminvq_u16(v104);
                  *(long long *)((char *)&a33 + 2 * v91) = (__int128)v103;
                  if (v92 == v91) {
                    uint64_t v105 = v104.u32[0];
                  }
                  else {
                    uint64_t v105 = 0;
                  }
                  v92 += v105;
                  uint64_t v91 = 8;
                  char v95 = 0;
                }
                while ((v102 & 1) != 0);
                unint64_t v106 = v50 - v85;
                if (v50 - v85 >= 0x10) {
                  unint64_t v106 = 16;
                }
                float v107 = v89;
                if (v92 >= v106) {
                  unint64_t v108 = v106;
                }
                else {
                  unint64_t v108 = v92;
                }
                if (v92 < v106)
                {
LABEL_73:
                  unint64_t v109 = (unint64_t)v107 + v108;
                  if (v109 >= 8)
                  {
                    unint64_t v111 = (void *)**v88;
                    uint64_t v110 = (*v88)[1];
                    ++*v111;
                    unsigned int v112 = v109 - 8;
                    unsigned int v113 = 43 - __clz(v112);
                    if (!v112) {
                      unsigned int v113 = 12;
                    }
                    if (v112 >= 0x10) {
                      unsigned int v112 = v113;
                    }
                    ++*(void *)(v110 + 8 * v112);
                    if (v92 < v106)
                    {
                      if (v90 >= v92) {
                        unint64_t v90 = v92;
                      }
                      if (v90 >= 0x10) {
                        unint64_t v90 = 16;
                      }
                      unint64_t v114 = v94 - v90;
                      int v115 = (unsigned __int16 *)((unint64_t)&a33 | (2 * v90));
                      do
                      {
                        unsigned int v116 = *v115++;
                        uint64_t v117 = 32 - __clz(v116);
                        if (v116) {
                          uint64_t v118 = v117;
                        }
                        else {
                          uint64_t v118 = 0;
                        }
                        ++v111[v118];
                        --v114;
                      }
                      while (v114);
                    }
                    unsigned int v89 = 0;
                    goto LABEL_97;
                  }
                  if (v106)
                  {
                    uint64_t v119 = **v88;
                    float v120 = &a33;
                    do
                    {
                      unsigned int v121 = *(unsigned __int16 *)v120;
                      float v120 = (long long *)((char *)v120 + 2);
                      uint64_t v122 = 32 - __clz(v121);
                      if (v121) {
                        uint64_t v123 = v122;
                      }
                      else {
                        uint64_t v123 = 0;
                      }
                      ++*(void *)(v119 + 8 * v123);
                      --v94;
                    }
                    while (v94);
                  }
                }
                else
                {
                  if (!v89 && v108 < 8)
                  {
                    float v107 = 0;
                    goto LABEL_73;
                  }
                  unsigned int v89 = (uint64_t *)((char *)v89 + v108);
LABEL_97:
                  v88[1] = v89;
                }
                v85 += 16;
                unint64_t v90 = v93;
                if (v85 >= v50) {
                  goto LABEL_99;
                }
                continue;
              }
          }
          float v78 = (int16x8_t *)*((void *)&a31 + 1);
          float v79 = (int16x8_t *)a31;
          uint64_t v76 = (int8x16_t *)*((void *)&a32 + 1);
          unsigned int v77 = (int16x8_t *)a32;
        }
        else
        {
          uint64_t v76 = 0;
          unsigned int v77 = 0;
          float v78 = 0;
          float v79 = 0;
        }
        if (v126) {
          sub_2484CB8A4(v69->i16, v50, v79, v78, v77, v76);
        }
        else {
          sub_2484CB998(v69->i16, v50, v79, v78, v77, (int16x8_t *)v76);
        }
        long long v68 = 0uLL;
        int8x16_t v80 = (int8x16_t)xmmword_2484DD030;
        v81.i64[0] = 0x8000800080008;
        v81.i64[1] = 0x8000800080008;
        if (v53) {
          goto LABEL_48;
        }
LABEL_100:
        uint64_t v67 = (vars8 + 1);
      }
      while (v66++ != v129);
    }
    if (__p)
    {
      a11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unsigned int v58 = **(unsigned __int8 **)(a1 + 40);
    uint64_t v59 = **(void **)(a1 + 80);
    for (uint64_t k = 1; k != 9; k += 2)
      (&a13)[k] = 0;
    if (v53)
    {
      uint64_t v61 = v52 + 152 * v58;
      uint64_t v62 = v51 + 264 * v58;
      float v63 = &a21;
      float v64 = &a13;
      unint64_t v65 = v53;
      do
      {
        *float v64 = (uint64_t *)v63;
        v64 += 2;
        *(void *)float v63 = v61;
        *((void *)v63 + 1) = v62;
        v63 += 16;
        --v65;
      }
      while (v65);
    }
    sub_2484C98A4(vars0, v128, v46 & 0x1F0, v129 + 1, v127, v59, v53, &a13);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 16) + 40))(**(void **)(a1 + 16), vars0);
}

unint64_t sub_2484C7A68(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
LABEL_2:
  unint64_t v12 = a2 - 1;
  unint64_t v13 = v11;
  while (1)
  {
    uint64_t v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    unint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v103 = *v12;
          if (*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12)
          {
            unsigned int v104 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
              || ((int v105 = *v13,
                   float v106 = (float)((float)((float)((float)BYTE1(*v12) * 0.587)
                                        + (float)((float)*v12 * 0.299))
                                + (float)((float)BYTE2(*v12) * 0.114))
                        + 0.01,
                   **a3 != (unsigned int *)4)
                ? (float v107 = (float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                + (float)((float)BYTE2(v104) * 0.114))
                        + 0.01)
                : (float v106 = v106 * (float)HIBYTE(v103),
                   float v107 = (float)((float)((float)((float)((float)BYTE1(v104) * 0.587) + (float)((float)v105 * 0.299))
                                        + (float)((float)BYTE2(v104) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v104)),
                  v106 < v107))
            {
              *unint64_t v13 = v103;
              *unint64_t v12 = v104;
            }
          }
          break;
        case 3uLL:
          unint64_t v108 = *a3;
          uint64_t result = (unint64_t)sub_2484CA404(v13, v13 + 1, a2 - 1, v108);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)sub_2484CA890(v13, v13 + 1, v13 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)sub_2484CABF0(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v129 = (v15 - 2) >> 1;
        int v130 = *a3;
        int64_t v131 = v129;
        while (2)
        {
          int64_t v132 = v131;
          if (v129 >= v131)
          {
            uint64_t v133 = (2 * v131) | 1;
            unint64_t v134 = &v13[v133];
            if (2 * v132 + 2 < (uint64_t)v15)
            {
              unint64_t v135 = v134 + 1;
              if (*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              {
                unsigned int v136 = *v135;
                if (!(*v135 & 0xFF000000 | (BYTE2(*v135) << 16) | (BYTE1(*v135) << 8) | *v135)
                  || ((float v137 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                            + (float)((float)*v134 * 0.299))
                                    + (float)((float)BYTE2(*v134) * 0.114))
                            + 0.01,
                       float v138 = (float)*v135,
                       float v139 = (float)BYTE1(v136),
                       *v130 == (unsigned int *)4)
                    ? (float v137 = v137 * (float)HIBYTE(*v134),
                       float v140 = (float)((float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                            + (float)((float)BYTE2(v136) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v136))
                    : (float v140 = (float)((float)((float)(v139 * 0.587) + (float)(v138 * 0.299))
                                    + (float)((float)BYTE2(v136) * 0.114))
                            + 0.01),
                      v137 < v140))
                {
                  ++v134;
                  uint64_t v133 = 2 * v132 + 2;
                }
              }
            }
            unsigned int v141 = *v134;
            unsigned int v142 = v13[v132];
            if (!(*v134 & 0xFF000000 | (BYTE2(*v134) << 16) | (BYTE1(*v134) << 8) | *v134)
              || (uint64_t result = v142 >> 8,
                  v13[v132] & 0xFF000000 | (BYTE2(v13[v132]) << 16) | (BYTE1(v13[v132]) << 8) | v13[v132])
              && ((uint64_t result = BYTE1(v142),
                   int v143 = v13[v132],
                   float v144 = (float)((float)((float)((float)BYTE1(*v134) * 0.587)
                                        + (float)((float)*v134 * 0.299))
                                + (float)((float)BYTE2(*v134) * 0.114))
                        + 0.01,
                   *v130 == (unsigned int *)4)
                ? (float v144 = v144 * (float)HIBYTE(v141),
                   float v145 = (float)((float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                        + (float)((float)BYTE2(v142) * 0.114))
                                + 0.01)
                        * (float)HIBYTE(v142))
                : (float v145 = (float)((float)((float)((float)BYTE1(v142) * 0.587) + (float)((float)v143 * 0.299))
                                + (float)((float)BYTE2(v142) * 0.114))
                        + 0.01),
                  v144 >= v145))
            {
              v13[v132] = v141;
              if (v129 >= v133)
              {
                uint64_t v146 = *a3;
                while (1)
                {
                  uint64_t v147 = 2 * v133;
                  uint64_t v133 = (2 * v133) | 1;
                  uint64_t result = (unint64_t)&v13[v133];
                  uint64_t v148 = v147 + 2;
                  if (v148 < (uint64_t)v15)
                  {
                    uint64_t v149 = (unsigned int *)(result + 4);
                    if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                    {
                      unsigned int v150 = *v149;
                      if (!(*v149 & 0xFF000000 | (BYTE2(*v149) << 16) | (BYTE1(*v149) << 8) | *v149)
                        || ((int v151 = *v149,
                             float v152 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                  + (float)((float)*(_DWORD *)result * 0.299))
                                          + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                  + 0.01,
                             *v146 == (unsigned int *)4)
                          ? (float v152 = v152 * (float)HIBYTE(*(_DWORD *)result),
                             float v153 = (float)((float)((float)((float)((float)BYTE1(v150) * 0.587)
                                                          + (float)((float)v151 * 0.299))
                                                  + (float)((float)BYTE2(v150) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v150))
                          : (float v153 = (float)((float)((float)((float)BYTE1(v150) * 0.587) + (float)((float)v151 * 0.299))
                                          + (float)((float)BYTE2(v150) * 0.114))
                                  + 0.01),
                            v152 < v153))
                      {
                        result += 4;
                        uint64_t v133 = v148;
                      }
                    }
                  }
                  unsigned int v154 = *(_DWORD *)result;
                  if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                  {
                    if (!(v142 & 0xFF000000 | (BYTE2(v142) << 16) | (BYTE1(v142) << 8) | v142)) {
                      break;
                    }
                    float v155 = (float)HIBYTE(v154);
                    if (*v146 != (unsigned int *)4) {
                      float v155 = 1.0;
                    }
                    float v156 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                 + (float)((float)*(_DWORD *)result * 0.299))
                                         + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                 + 0.01)
                         * v155;
                    float v157 = *v146 == (unsigned int *)4 ? (float)HIBYTE(v142) : 1.0;
                    if (v156 < (float)((float)((float)((float)((float)((float)BYTE1(v142) * 0.587)
                                                              + (float)((float)v142 * 0.299))
                                                      + (float)((float)BYTE2(v142) * 0.114))
                                              + 0.01)
                                      * v157))
                      break;
                  }
                  unsigned int *v134 = v154;
                  unint64_t v134 = (unsigned int *)result;
                  if (v129 < v133) {
                    goto LABEL_225;
                  }
                }
              }
              uint64_t result = (unint64_t)v134;
LABEL_225:
              *(_DWORD *)uint64_t result = v142;
            }
          }
          int64_t v131 = v132 - 1;
          if (v132) {
            continue;
          }
          break;
        }
        uint64_t v158 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v159 = 0;
          unsigned int v160 = *v13;
          unint64_t v161 = *a3;
          int v162 = v13;
          do
          {
            int v163 = v162;
            v162 += v159 + 1;
            uint64_t v164 = 2 * v159;
            uint64_t v159 = (2 * v159) | 1;
            uint64_t v165 = v164 + 2;
            if (v165 < v158)
            {
              uint64_t v166 = v162 + 1;
              uint64_t result = *v162 >> 8;
              if (*v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (BYTE1(*v162) << 8) | *v162)
              {
                uint64_t result = *v166;
                if (!(*v166 & 0xFF000000 | (BYTE2(*v166) << 16) | (BYTE1(*v166) << 8) | *v166)
                  || ((int v167 = BYTE2(result),
                       float v168 = (float)((float)((float)((float)BYTE1(*v162) * 0.587)
                                            + (float)((float)*v162 * 0.299))
                                    + (float)((float)BYTE2(*v162) * 0.114))
                            + 0.01,
                       float v169 = (float)*v166,
                       float v170 = (float)BYTE1(result),
                       *v161 != (unsigned int *)4)
                    ? (float v171 = (float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                    + (float)((float)BYTE2(result) * 0.114))
                            + 0.01)
                    : (uint64_t result = BYTE3(result),
                       float v168 = v168 * (float)HIBYTE(*v162),
                       float v171 = (float)((float)((float)((float)(v170 * 0.587) + (float)(v169 * 0.299))
                                            + (float)((float)v167 * 0.114))
                                    + 0.01)
                            * (float)(int)result),
                      v168 < v171))
                {
                  ++v162;
                  uint64_t v159 = v165;
                }
              }
            }
            *int v163 = *v162;
          }
          while (v159 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
          if (v162 == --a2)
          {
            *int v162 = v160;
          }
          else
          {
            *int v162 = *a2;
            *a2 = v160;
            uint64_t v172 = (char *)v162 - (char *)v13 + 4;
            if (v172 >= 5)
            {
              unint64_t v173 = ((unint64_t)v172 >> 2) - 2;
              unint64_t v174 = v173 >> 1;
              uint64_t v175 = &v13[v173 >> 1];
              unsigned int v176 = *v175;
              if (*v175 & 0xFF000000 | (BYTE2(*v175) << 16) | (BYTE1(*v175) << 8) | *v175)
              {
                unsigned int v177 = *v162;
                int v178 = HIBYTE(*v162);
                uint64_t result = BYTE2(*v162);
                int v179 = BYTE1(*v162);
                int v180 = *v162;
                unsigned int v181 = *v162 & 0xFF000000 | (BYTE2(*v162) << 16) | (v179 << 8) | v180;
                if (!v181
                  || ((float v182 = (float)((float)((float)((float)BYTE1(*v175) * 0.587)
                                            + (float)((float)*v175 * 0.299))
                                    + (float)((float)BYTE2(*v175) * 0.114))
                            + 0.01,
                       float v183 = (float)v180,
                       float v184 = (float)v179,
                       *v161 != (unsigned int *)4)
                    ? (float v185 = (float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                    + (float)((float)(int)result * 0.114))
                            + 0.01)
                    : (float v182 = v182 * (float)HIBYTE(v176),
                       float v185 = (float)((float)((float)((float)(v184 * 0.587) + (float)(v183 * 0.299))
                                            + (float)((float)(int)result * 0.114))
                                    + 0.01)
                            * (float)v178),
                      v182 < v185))
                {
                  *int v162 = v176;
                  if (v173 >= 2)
                  {
                    uint64_t v188 = *a3;
                    float v189 = (float)((float)((float)((float)v179 * 0.587) + (float)((float)v180 * 0.299))
                                 + (float)((float)(int)result * 0.114))
                         + 0.01;
                    float v190 = (float)v178;
                    while (1)
                    {
                      unint64_t v191 = v174 - 1;
                      unint64_t v174 = (v174 - 1) >> 1;
                      uint64_t v186 = &v13[v174];
                      unsigned int v192 = *v186;
                      uint64_t result = HIWORD(*v186);
                      if (!(*v186 & 0xFF000000 | (BYTE2(*v186) << 16) | (BYTE1(*v186) << 8) | *v186)) {
                        break;
                      }
                      if (v181)
                      {
                        uint64_t result = BYTE2(v192);
                        float v193 = (float)HIBYTE(v192);
                        if (*v188 != (unsigned int *)4) {
                          float v193 = 1.0;
                        }
                        float v194 = (float)((float)((float)((float)((float)BYTE1(*v186) * 0.587)
                                                     + (float)((float)*v186 * 0.299))
                                             + (float)((float)BYTE2(*v186) * 0.114))
                                     + 0.01)
                             * v193;
                        float v195 = *v188 == (unsigned int *)4 ? v190 : 1.0;
                        if (v194 >= (float)(v189 * v195)) {
                          break;
                        }
                      }
                      *uint64_t v175 = v192;
                      uint64_t v175 = &v13[v174];
                      if (v191 <= 1) {
                        goto LABEL_249;
                      }
                    }
                  }
                  uint64_t v186 = v175;
LABEL_249:
                  unsigned int *v186 = v177;
                }
              }
            }
          }
        }
        while (v158-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v13[v15 >> 1];
    unint64_t v18 = *a3;
    if ((unint64_t)v14 >= 0x201)
    {
      sub_2484CA404(v11, &v11[v15 >> 1], a2 - 1, v18);
      sub_2484CA404(v11 + 1, v17 - 1, a2 - 2, *a3);
      sub_2484CA404(v11 + 2, &v11[v16 + 1], a2 - 3, *a3);
      uint64_t result = (unint64_t)sub_2484CA404(v17 - 1, v17, &v11[v16 + 1], *a3);
      unsigned int v19 = *v11;
      *uint64_t v11 = *v17;
      unsigned int *v17 = v19;
    }
    else
    {
      uint64_t result = (unint64_t)sub_2484CA404(&v11[v15 >> 1], v11, a2 - 1, v18);
    }
    unsigned int v20 = *v11;
    int v21 = HIBYTE(*v11);
    --a4;
    if (a5)
    {
LABEL_17:
      uint64_t v31 = v11 + 1;
      unsigned int v30 = v11[1];
      if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
        goto LABEL_39;
      }
      int v32 = BYTE2(v30);
      int v33 = BYTE1(v30);
      int v34 = v30;
      unsigned int v35 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
      uint64_t v36 = *a3;
      float v37 = (float)((float)((float)((float)BYTE1(*v11) * 0.587)
                          + (float)((float)*v11 * 0.299))
                  + (float)((float)BYTE2(*v11) * 0.114))
          + 0.01;
      while (1)
      {
        unint64_t v38 = v31;
        if (v35)
        {
          float v39 = (float)HIBYTE(v30);
          if (*v36 != (unsigned int *)4) {
            float v39 = 1.0;
          }
          float v40 = (float)((float)((float)((float)((float)v33 * 0.587) + (float)((float)v34 * 0.299))
                              + (float)((float)v32 * 0.114))
                      + 0.01)
              * v39;
          float v41 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
          if (v40 >= (float)(v37 * v41)) {
            break;
          }
        }
        ++v31;
        unsigned int v30 = v38[1];
        int v32 = BYTE2(v30);
        int v33 = BYTE1(v30);
        int v34 = v30;
        uint64_t v42 = v38;
        if (!(v30 & 0xFF000000 | (BYTE2(v30) << 16) | (BYTE1(v30) << 8) | v30)) {
          goto LABEL_29;
        }
      }
      uint64_t v42 = v31 - 1;
LABEL_29:
      uint64_t i = a2 - 1;
      if (v42 == v11)
      {
LABEL_39:
        if (v31 < a2)
        {
          for (uint64_t i = a2 - 1; ; --i)
          {
            if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
            {
              if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11)) {
                goto LABEL_52;
              }
              float v47 = (float)HIBYTE(*i);
              if (**a3 == (unsigned int *)4)
              {
                float v48 = (float)v21;
              }
              else
              {
                float v47 = 1.0;
                float v48 = 1.0;
              }
              if (v31 >= i
                || (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                 + (float)((float)*i * 0.299))
                                         + (float)((float)BYTE2(*i) * 0.114))
                                 + 0.01)
                         * v47) < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                                + (float)((float)*v11 * 0.299))
                                                        + (float)((float)BYTE2(*v11) * 0.114))
                                                + 0.01)
                                        * v48))
              {
                goto LABEL_52;
              }
            }
            else if (v31 >= i)
            {
              goto LABEL_52;
            }
          }
        }
        uint64_t i = a2;
      }
      else
      {
        while (1)
        {
          if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
          {
            if (!v35) {
              break;
            }
            float v44 = (float)HIBYTE(*i);
            if (*v36 != (unsigned int *)4) {
              float v44 = 1.0;
            }
            float v45 = (float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                        + (float)((float)*i * 0.299))
                                + (float)((float)BYTE2(*i) * 0.114))
                        + 0.01)
                * v44;
            float v46 = *v36 == (unsigned int *)4 ? (float)v21 : 1.0;
            if (v45 < (float)(v37 * v46)) {
              break;
            }
          }
          --i;
        }
      }
LABEL_52:
      unint64_t v13 = v31;
      if (v31 < i)
      {
        unsigned int v49 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(v20) << 8) | *v11;
        float v50 = (float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                    + (float)((float)*v11 * 0.299))
                            + (float)((float)BYTE2(*v11) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v51 = *i;
        unint64_t v13 = v31;
        uint64_t v52 = i;
        do
        {
          *unint64_t v13 = v51;
          unsigned int *v52 = v30;
          unsigned int v53 = v13[1];
          ++v13;
          unsigned int v30 = v53;
          unint64_t v54 = *a3;
          if (v53 & 0xFF000000 | (BYTE2(v53) << 16) | (BYTE1(v53) << 8) | v53)
          {
            int v55 = BYTE2(v30);
            int v56 = BYTE1(v30);
            int v57 = v30;
            do
            {
              if (v49)
              {
                float v58 = (float)HIBYTE(v30);
                if (*v54 != (unsigned int *)4) {
                  float v58 = 1.0;
                }
                float v59 = (float)((float)((float)((float)((float)v56 * 0.587) + (float)((float)v57 * 0.299))
                                    + (float)((float)v55 * 0.114))
                            + 0.01)
                    * v58;
                float v60 = *v54 == (unsigned int *)4
                    ? v50
                    : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01;
                if (v59 >= v60) {
                  break;
                }
              }
              unsigned int v61 = v13[1];
              ++v13;
              unsigned int v30 = v61;
              int v55 = BYTE2(v61);
              int v56 = BYTE1(v61);
              int v57 = v61;
            }
            while (v61 & 0xFF000000 | (BYTE2(v61) << 16) | (BYTE1(v61) << 8) | v61);
          }
          do
          {
            do
            {
              unsigned int v62 = *--v52;
              unsigned int v51 = v62;
            }
            while (!(v62 & 0xFF000000 | (BYTE2(v62) << 16) | (BYTE1(v62) << 8) | v62));
            if (!v49) {
              break;
            }
            float v63 = (float)HIBYTE(v51);
            if (*v54 != (unsigned int *)4) {
              float v63 = 1.0;
            }
            float v64 = (float)((float)((float)((float)((float)BYTE1(v51) * 0.587)
                                        + (float)((float)v51 * 0.299))
                                + (float)((float)BYTE2(v51) * 0.114))
                        + 0.01)
                * v63;
            float v65 = *v54 == (unsigned int *)4
                ? v50
                : (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                        + (float)((float)BYTE2(v20) * 0.114))
                + 0.01;
          }
          while (v64 >= v65);
        }
        while (v13 < v52);
      }
      uint64_t v66 = v13 - 1;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v66;
      }
      *uint64_t v66 = v20;
      if (v31 < i)
      {
LABEL_78:
        uint64_t result = sub_2484C7A68(v11, v13 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v67 = sub_2484CB05C(v11, v13 - 1, a3);
        uint64_t result = sub_2484CB05C(v13, a2, a3);
        if (result)
        {
          a2 = v13 - 1;
          if (v67) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v67) {
          goto LABEL_78;
        }
      }
    }
    else
    {
      unsigned int v22 = *(v11 - 1);
      int v23 = *v11;
      unsigned int v24 = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | v23;
      if (v22 & 0xFF000000 | (BYTE2(v22) << 16) | (BYTE1(v22) << 8) | v22)
      {
        if (!v24) {
          goto LABEL_17;
        }
        uint64_t result = v22;
        uint64_t v25 = (unint64_t *)*a3;
        float v26 = (float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v22 * 0.299))
                    + (float)((float)BYTE2(v22) * 0.114))
            + 0.01;
        float v27 = (float)v23;
        float v28 = (float)BYTE1(v20);
        if (**a3 == (unsigned int *)4)
        {
          float v26 = v26 * (float)HIBYTE(v22);
          float v29 = (float)((float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
                      + 0.01)
              * (float)v21;
        }
        else
        {
          float v29 = (float)((float)((float)(v28 * 0.587) + (float)(v27 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
              + 0.01;
        }
        if (v26 < v29) {
          goto LABEL_17;
        }
      }
      else
      {
        if (!v24)
        {
          char v75 = 1;
          goto LABEL_98;
        }
        uint64_t v25 = (unint64_t *)*a3;
      }
      unsigned int v68 = *v12;
      float v69 = (float)BYTE1(v20);
      if (!(*v12 & 0xFF000000 | (BYTE2(*v12) << 16) | (BYTE1(*v12) << 8) | *v12))
      {
        float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
            + 0.01;
LABEL_88:
        uint64_t v76 = v11 + 1;
        do
        {
          unint64_t v13 = v76;
          unsigned int v77 = *v76;
          if (!(v77 & 0xFF000000 | (BYTE2(v77) << 16) | (BYTE1(v77) << 8) | v77)) {
            break;
          }
          float v78 = (float)HIBYTE(v77);
          if (*v25 == 4) {
            float v79 = (float)v21;
          }
          else {
            float v79 = 1.0;
          }
          float v80 = v70 * v79;
          if (*v25 != 4) {
            float v78 = 1.0;
          }
          float v81 = (float)((float)((float)((float)((float)BYTE1(v77) * 0.587) + (float)((float)v77 * 0.299))
                              + (float)((float)BYTE2(v77) * 0.114))
                      + 0.01)
              * v78;
          uint64_t v76 = v13 + 1;
        }
        while (v80 >= v81);
LABEL_96:
        char v75 = 0;
        goto LABEL_109;
      }
      uint64_t result = *v25;
      float v70 = (float)((float)((float)(v69 * 0.587) + (float)((float)v23 * 0.299)) + (float)((float)BYTE2(v20) * 0.114))
          + 0.01;
      float v71 = (float)*v12;
      float v72 = (float)BYTE1(v68);
      if (*v25 == 4)
      {
        float v73 = v70 * (float)v21;
        float v74 = (float)((float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114))
                    + 0.01)
            * (float)HIBYTE(v68);
      }
      else
      {
        float v74 = (float)((float)((float)(v72 * 0.587) + (float)(v71 * 0.299)) + (float)((float)BYTE2(v68) * 0.114)) + 0.01;
        float v73 = v70;
      }
      if (v73 < v74) {
        goto LABEL_88;
      }
      char v75 = 0;
LABEL_98:
      unint64_t v13 = v11 + 1;
      if (v11 + 1 < a2)
      {
        uint64_t v82 = *a3;
        do
        {
          if ((v75 & 1) == 0)
          {
            unsigned int v83 = *v13;
            uint64_t result = *v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13;
            if (!result) {
              goto LABEL_96;
            }
            uint64_t result = *v13;
            float v84 = (float)HIBYTE(v83);
            if (*v82 == (unsigned int *)4) {
              float v85 = (float)v21;
            }
            else {
              float v85 = 1.0;
            }
            float v86 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v85;
            if (*v82 != (unsigned int *)4) {
              float v84 = 1.0;
            }
            if (v86 < (float)((float)((float)((float)((float)((float)BYTE1(v83) * 0.587)
                                                     + (float)((float)(int)result * 0.299))
                                             + (float)((float)BYTE2(v83) * 0.114))
                                     + 0.01)
                             * v84))
              goto LABEL_96;
          }
          ++v13;
        }
        while (v13 < a2);
      }
LABEL_109:
      if (v13 < a2) {
        uint64_t j = a2 - 1;
      }
      else {
        uint64_t j = a2;
      }
      if (v13 < a2 && (v75 & 1) == 0)
      {
        __int16 v88 = *a3;
        for (uint64_t j = a2 - 1; ; --j)
        {
          unsigned int v89 = *j;
          if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
          {
            uint64_t result = BYTE1(v89);
            float v90 = (float)HIBYTE(v89);
            if (*v88 == (unsigned int *)4) {
              float v91 = (float)v21;
            }
            else {
              float v91 = 1.0;
            }
            float v92 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                                + (float)((float)BYTE2(v20) * 0.114))
                        + 0.01)
                * v91;
            if (*v88 != (unsigned int *)4) {
              float v90 = 1.0;
            }
            if (v92 >= (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                      + (float)((float)*j * 0.299))
                                              + (float)((float)BYTE2(*j) * 0.114))
                                      + 0.01)
                              * v90))
              break;
          }
        }
      }
      if (v13 < j)
      {
        float v93 = (float)((float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
                            + (float)((float)BYTE2(v20) * 0.114))
                    + 0.01)
            * (float)v21;
        unsigned int v94 = *v13;
        unsigned int v95 = *j;
        do
        {
          *v13++ = v95;
          *uint64_t j = v94;
          int16x8_t v96 = (unint64_t *)*a3;
          if (v75) {
            goto LABEL_133;
          }
          while (1)
          {
            unsigned int v94 = *v13;
            if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)) {
              break;
            }
            float v97 = (float)HIBYTE(v94);
            if (*v96 == 4) {
              float v98 = v93;
            }
            else {
              float v98 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
            if (*v96 != 4) {
              float v97 = 1.0;
            }
            if (v98 < (float)((float)((float)((float)((float)((float)BYTE1(*v13) * 0.587)
                                                     + (float)((float)*v13 * 0.299))
                                             + (float)((float)BYTE2(*v13) * 0.114))
                                     + 0.01)
                             * v97))
              break;
            do
LABEL_133:
              ++v13;
            while ((v75 & 1) != 0);
          }
          do
          {
            do
            {
              unsigned int v99 = *--j;
              unsigned int v95 = v99;
            }
            while (!(v99 & 0xFF000000 | (BYTE2(v99) << 16) | (BYTE1(v99) << 8) | v99));
            uint64_t result = *v96;
            float v100 = (float)HIBYTE(v95);
            if (*v96 == 4) {
              float v101 = v93;
            }
            else {
              float v101 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v23 * 0.299))
            }
                           + (float)((float)BYTE2(v20) * 0.114))
                   + 0.01;
            if (*v96 != 4) {
              float v100 = 1.0;
            }
          }
          while (v101 < (float)((float)((float)((float)((float)((float)BYTE1(v95) * 0.587)
                                                       + (float)((float)v95 * 0.299))
                                               + (float)((float)BYTE2(v95) * 0.114))
                                       + 0.01)
                               * v100));
        }
        while (v13 < j);
      }
      char v102 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v102;
      }
      a5 = 0;
      *char v102 = v20;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v13 == a2) {
      return result;
    }
    int v196 = v13 + 1;
    if (v13 + 1 == a2) {
      return result;
    }
    int v197 = *a3;
    while (1)
    {
      uint64_t v198 = v11;
      uint64_t v11 = v196;
      unsigned int v199 = v198[1];
      if (v199 & 0xFF000000 | (BYTE2(v199) << 16) | (BYTE1(v199) << 8) | v199)
      {
        int v200 = HIBYTE(v199);
        int v201 = v198[1];
        unsigned int v202 = *v198;
        if (!(*v198 & 0xFF000000 | (BYTE2(*v198) << 16) | (BYTE1(*v198) << 8) | *v198))
        {
          float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
LABEL_274:
          unint64_t v206 = *a3;
          float v207 = (float)v200;
          do
          {
            do
            {
              unint64_t v208 = v198;
              unsigned int v209 = v202;
              unsigned int v210 = *--v198;
              unsigned int v202 = v210;
              v198[2] = v209;
            }
            while (!(v210 & 0xFF000000 | (BYTE2(v210) << 16) | (BYTE1(v210) << 8) | v210));
            uint64_t result = (unint64_t)*v206;
            float v211 = (float)HIBYTE(v202);
            if (*v206 == (unsigned int *)4) {
              float v212 = v207;
            }
            else {
              float v212 = 1.0;
            }
            float v213 = v203 * v212;
            if (*v206 != (unsigned int *)4) {
              float v211 = 1.0;
            }
          }
          while (v213 < (float)((float)((float)((float)((float)((float)BYTE1(v202) * 0.587)
                                                       + (float)((float)v202 * 0.299))
                                               + (float)((float)BYTE2(v202) * 0.114))
                                       + 0.01)
                               * v211));
          *unint64_t v208 = v199;
          goto LABEL_283;
        }
        uint64_t result = *v198;
        float v203 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                     + (float)((float)BYTE2(v199) * 0.114))
             + 0.01;
        if (*v197 == (unsigned int *)4)
        {
          float v204 = v203 * (float)v200;
          float v205 = (float)((float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                               + (float)((float)BYTE2(v202) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v202);
        }
        else
        {
          float v205 = (float)((float)((float)((float)BYTE1(v202) * 0.587) + (float)((float)(int)result * 0.299))
                       + (float)((float)BYTE2(v202) * 0.114))
               + 0.01;
          float v204 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)v201 * 0.299))
                       + (float)((float)BYTE2(v199) * 0.114))
               + 0.01;
        }
        if (v204 < v205) {
          goto LABEL_274;
        }
      }
LABEL_283:
      int v196 = v11 + 1;
      if (v11 + 1 == a2) {
        return result;
      }
    }
  }
  if (v13 != a2)
  {
    unint64_t v109 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v110 = 0;
      unint64_t v111 = *a3;
      unsigned int v112 = v13;
      do
      {
        unsigned int v113 = v112;
        unsigned int v112 = v109;
        unsigned int v114 = v113[1];
        if (v114 & 0xFF000000 | (BYTE2(v114) << 16) | (BYTE1(v114) << 8) | v114)
        {
          int v115 = HIBYTE(v114);
          int v116 = v113[1];
          unsigned int v117 = *v113;
          uint64_t result = HIWORD(*v113);
          if (!(*v113 & 0xFF000000 | (BYTE2(*v113) << 16) | (BYTE1(*v113) << 8) | *v113)
            || ((uint64_t result = BYTE2(v117),
                 int v118 = *v113,
                 float v119 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                              + (float)((float)BYTE2(v114) * 0.114))
                      + 0.01,
                 *v111 != (unsigned int *)4)
              ? (float v120 = (float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                              + (float)((float)BYTE2(v117) * 0.114))
                      + 0.01)
              : (float v119 = v119 * (float)v115,
                 float v120 = (float)((float)((float)((float)((float)BYTE1(v117) * 0.587) + (float)((float)v118 * 0.299))
                                      + (float)((float)BYTE2(v117) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v117)),
                v119 < v120))
          {
            v113[1] = v117;
            unsigned int v121 = v13;
            if (v113 != v13)
            {
              uint64_t v122 = *a3;
              float v123 = (float)v115;
              uint64_t v124 = v110;
              while (1)
              {
                unsigned int v125 = *(unsigned int *)((char *)v13 + v124 - 4);
                uint64_t result = v125 & 0xFF000000 | (BYTE2(v125) << 16) | (BYTE1(v125) << 8) | v125;
                if (result)
                {
                  uint64_t result = *(unsigned int *)((char *)v13 + v124 - 4);
                  float v126 = (float)HIBYTE(v125);
                  if (*v122 == (unsigned int *)4) {
                    float v127 = v123;
                  }
                  else {
                    float v127 = 1.0;
                  }
                  float v128 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v116 * 0.299))
                                       + (float)((float)BYTE2(v114) * 0.114))
                               + 0.01)
                       * v127;
                  if (*v122 != (unsigned int *)4) {
                    float v126 = 1.0;
                  }
                  if (v128 >= (float)((float)((float)((float)((float)((float)BYTE1(v125) * 0.587)
                                                             + (float)((float)(int)result * 0.299))
                                                     + (float)((float)BYTE2(v125) * 0.114))
                                             + 0.01)
                                     * v126))
                    break;
                }
                *(unsigned int *)((char *)v13 + v124) = v125;
                v124 -= 4;
                if (!v124)
                {
                  unsigned int v121 = v13;
                  goto LABEL_185;
                }
              }
              unsigned int v121 = (unsigned int *)((char *)v13 + v124);
            }
LABEL_185:
            *unsigned int v121 = v114;
          }
        }
        unint64_t v109 = v112 + 1;
        v110 += 4;
      }
      while (v112 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2484C91C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v50 = a1;
  a49 = *MEMORY[0x263EF8340];
  if ((unint64_t)(**(void **)a1 - (a3 << 8)) >= 0x100) {
    uint64_t v52 = 256;
  }
  else {
    uint64_t v52 = **(void **)a1 - (a3 << 8);
  }
  unsigned int v51 = *(void **)(a1 + 8);
  if ((unint64_t)(*v51 - (a2 << 8)) >= 0x100) {
    uint64_t v53 = 256;
  }
  else {
    uint64_t v53 = *v51 - (a2 << 8);
  }
  a18 = 0;
  uint64_t v150 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 16) + 16))(**(void **)(a1 + 16), a2 << 8, a3 << 8, v53, v52, &a18);
  uint64_t v54 = (v52 - a4) & ~((v52 - a4) >> 63);
  uint64_t v55 = (int)(v54 >> 1);
  int v56 = v52 - ((unint64_t)v54 >> 1);
  if (v56 >= (int)a4) {
    int v56 = a4;
  }
  unint64_t v57 = v53 & 0x1F0;
  uint64_t v58 = a18;
  uint64_t v148 = v55;
  uint64_t v149 = v56;
  float v60 = *(uint64_t **)(v50 + 24);
  float v59 = *(uint64_t **)(v50 + 32);
  unint64_t v61 = **(void **)(v50 + 64);
  if (**(unsigned char **)(v50 + 48))
  {
    int v147 = **(unsigned __int8 **)(v50 + 72);
    for (uint64_t i = 8; i != 72; i += 16)
      *(void *)(&a22 + i) = 0;
    uint64_t v145 = v50;
    if (v61)
    {
      float v63 = &a30;
      float v64 = &a22;
      unint64_t v65 = v61;
      do
      {
        *(void *)float v64 = v63;
        v64 += 16;
        char *v63 = v60;
        v63[1] = v59;
        v63 += 2;
        v59 += 33;
        v60 += 19;
        --v65;
      }
      while (v65);
      sub_2484C9AC8(&__p, v61);
    }
    else
    {
      __p = 0;
      a20 = 0;
      a21 = 0;
    }
    if (v149 != -1)
    {
      uint64_t v74 = v58;
      uint64_t v75 = 0;
      uint64_t v76 = (uint16x8_t *)(v150 + v58 * v148);
      int v77 = 1;
      long long v78 = 0uLL;
      int8x16_t v79 = (int8x16_t)xmmword_2484DCBC0;
      v80.i64[0] = 0x400000004;
      v80.i64[1] = 0x400000004;
      long long vars0 = xmmword_2484DCBC0;
      while (1)
      {
        a40 = v78;
        a41 = v78;
        float v81 = (int8x16_t *)(v150 + (v75 + v148) * v74);
        a38 = v78;
        a39 = v78;
        int v151 = v77;
        uint64_t v152 = (uint64_t)v76;
        if (!v61) {
          break;
        }
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        float v84 = &__p[1344 * (v77 & 1) + 128];
        float v85 = &__p[1344 * (v75 & 1) + 128];
        float v86 = v85;
        uint64_t v87 = v84;
        do
        {
          *((void *)&a40 + v83) = &v85[v82 + (v86 & 0x3C)];
          *((void *)&a38 + v83++) = &v84[v82 + (v87 & 0x3C)];
          v87 += 2688;
          v82 += 2688;
          v86 += 2688;
        }
        while (v61 != v83);
        if (v61 != 1)
        {
          if (v61 == 2)
          {
            if (v147) {
              sub_2484C9C18(v81->i16, v57, (uint32x4_t *)a40, *((uint32x4_t **)&a40 + 1));
            }
            else {
              sub_2484C9CC8(v81->i16, v57, (uint32x4_t *)a40, *((uint32x4_t **)&a40 + 1));
            }
            goto LABEL_51;
          }
          if (v61 == 3)
          {
            if (v147) {
              sub_2484C9D58(v81->i16, v57, (int32x4_t *)a40, *((int32x4_t **)&a40 + 1), (int16x8_t *)a41);
            }
            else {
              sub_2484C9E5C(v81->i16, v57, (int32x4_t *)a40, *((int32x4_t **)&a40 + 1), (int16x8_t *)a41);
            }
LABEL_51:
            int v77 = v151;
            uint64_t v76 = (uint16x8_t *)v152;
            long long v78 = 0uLL;
            int8x16_t v79 = (int8x16_t)xmmword_2484DCBC0;
            v80.i64[0] = 0x400000004;
            v80.i64[1] = 0x400000004;
            goto LABEL_52;
          }
          float v90 = (int32x4_t *)*((void *)&a40 + 1);
          float v91 = (int32x4_t *)a40;
          __int16 v88 = (uint32x4_t *)*((void *)&a41 + 1);
          unsigned int v89 = (int16x8_t *)a41;
          goto LABEL_39;
        }
        uint64_t v92 = a40;
        if (v147)
        {
          sub_2484C9B98(v81, v57, (uint32x4_t *)a40);
          v80.i64[0] = 0x400000004;
          v80.i64[1] = 0x400000004;
          int8x16_t v79 = (int8x16_t)xmmword_2484DCBC0;
          long long v78 = 0uLL;
          int v77 = v151;
          uint64_t v76 = (uint16x8_t *)v152;
LABEL_52:
          for (uint64_t j = 0; j != v61; ++j)
          {
            while (!v75)
            {
              *(_DWORD *)(*((void *)&a40 + j) - 4) = 0;
              *(_DWORD *)(*((void *)&a38 + j++) - 4) = 0;
              if (j == v61) {
                goto LABEL_103;
              }
            }
            float v100 = (_DWORD *)*((void *)&a38 + j);
            *(_DWORD *)(*((void *)&a40 + j) - 4) = *v100;
            *(v100 - 1) = *v100;
          }
          uint64_t v101 = 0;
          while ((v53 & 0x1F0) == 0)
          {
LABEL_102:
            if (++v101 == v61) {
              goto LABEL_103;
            }
          }
          unint64_t v102 = 0;
          uint64_t v103 = *((void *)&a40 + v101);
          uint64_t v104 = *((void *)&a38 + v101);
          int v105 = &a22 + 16 * v101;
          uint64_t v106 = *((void *)v105 + 1);
          unint64_t v107 = v53 & 0x1F0;
          while (2)
          {
            uint64_t v108 = 0;
            unint64_t v109 = 0;
            unint64_t v110 = v107 - 16;
            a44 = v78;
            a45 = v78;
            if (v107 >= 0x10) {
              uint64_t v111 = 16;
            }
            else {
              uint64_t v111 = v107;
            }
            a42 = v78;
            a43 = v78;
            unint64_t v112 = -4;
            do
            {
              v112 += 4;
              int32x4_t v113 = *(int32x4_t *)(v103 + v108 - 4);
              int32x4_t v114 = *(int32x4_t *)(v104 + v108);
              int32x4_t v115 = *(int32x4_t *)(v104 + v108 - 4);
              int32x4_t v116 = vsubq_s32(v113, v115);
              int8x16_t v117 = (int8x16_t)vsubq_s32(v114, v115);
              int32x4_t v118 = vsubq_s32(*(int32x4_t *)(v103 + v108), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)veorq_s8((int8x16_t)v116, v117)), (int8x16_t)vaddq_s32(v116, v114), vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)veorq_s8(v117, (int8x16_t)vsubq_s32(v113, v114))), (int8x16_t)v114, (int8x16_t)v113)));
              int32x4_t v119 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v118, v118), (int8x16_t)vcltzq_s32(v118));
              *(long long *)((char *)&a42 + v108) = (__int128)v119;
              uint64_t v120 = vminvq_u32((uint32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v119), v80, v79));
              if (v112 != v109) {
                uint64_t v120 = 0;
              }
              v109 += v120;
              v108 += 16;
            }
            while (v112 < 0xC);
            unint64_t v121 = v57 - v102;
            if (v57 - v102 >= 0x10) {
              unint64_t v121 = 16;
            }
            uint64_t v122 = v106;
            if (v109 >= v121) {
              unint64_t v123 = v121;
            }
            else {
              unint64_t v123 = v109;
            }
            if (v109 < v121)
            {
LABEL_76:
              unint64_t v124 = v122 + v123;
              if (v124 >= 8)
              {
                float v126 = **(void ***)v105;
                uint64_t v125 = *(void *)(*(void *)v105 + 8);
                ++*v126;
                unsigned int v127 = v124 - 8;
                unsigned int v128 = 43 - __clz(v127);
                if (!v127) {
                  unsigned int v128 = 12;
                }
                if (v127 >= 0x10) {
                  unsigned int v127 = v128;
                }
                ++*(void *)(v125 + 8 * v127);
                if (v109 < v121)
                {
                  if (v107 >= v109) {
                    unint64_t v107 = v109;
                  }
                  if (v107 >= 0x10) {
                    unint64_t v107 = 16;
                  }
                  unint64_t v129 = v111 - v107;
                  int v130 = (unsigned int *)&a42 + v107;
                  do
                  {
                    unsigned int v131 = *v130++;
                    unsigned int v132 = 32 - __clz(v131);
                    if (v131) {
                      unsigned int v133 = v132;
                    }
                    else {
                      unsigned int v133 = 0;
                    }
                    ++v126[v133];
                    --v129;
                  }
                  while (v129);
                }
                uint64_t v106 = 0;
                goto LABEL_100;
              }
              if (v121)
              {
                uint64_t v134 = **(void **)v105;
                unint64_t v135 = (unsigned int *)&a42;
                do
                {
                  unsigned int v136 = *v135++;
                  unsigned int v137 = 32 - __clz(v136);
                  if (v136) {
                    unsigned int v138 = v137;
                  }
                  else {
                    unsigned int v138 = 0;
                  }
                  ++*(void *)(v134 + 8 * v138);
                  --v111;
                }
                while (v111);
              }
            }
            else
            {
              if (!v106 && v123 < 8)
              {
                uint64_t v122 = 0;
                goto LABEL_76;
              }
              v106 += v123;
LABEL_100:
              *((void *)v105 + 1) = v106;
            }
            v102 += 16;
            v104 += 64;
            v103 += 64;
            unint64_t v107 = v110;
            if (v102 >= v57) {
              goto LABEL_102;
            }
            continue;
          }
        }
        if ((v53 & 0x1F0) != 0)
        {
          uint64_t v93 = 0;
          unsigned int v94 = (uint32x4_t *)(a40 + 16);
          unsigned int v95 = v76;
          do
          {
            uint16x8_t v96 = *v95++;
            v94[-1] = vmovl_u16(*(uint16x4_t *)v96.i8);
            *unsigned int v94 = vmovl_high_u16(v96);
            unint64_t v97 = v93 + 8;
            unint64_t v98 = v93 + 16;
            v94 += 2;
            v93 += 8;
          }
          while (v98 <= v57);
        }
        else
        {
          unint64_t v97 = 0;
        }
        if (v97 < v57)
        {
          unint64_t v140 = v97 - (v53 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v141 = v97;
          unsigned int v142 = (_DWORD *)(v92 + 4 * v97);
          do
            *v142++ = v76->u16[v141++];
          while (!__CFADD__(v140++, 1));
        }
LABEL_43:
        if (v61) {
          goto LABEL_52;
        }
LABEL_103:
        ++v77;
        uint64_t v74 = v58;
        uint64_t v76 = (uint16x8_t *)((char *)v76 + v58);
        if (v75++ == v149) {
          goto LABEL_112;
        }
      }
      __int16 v88 = 0;
      unsigned int v89 = 0;
      float v90 = 0;
      float v91 = 0;
LABEL_39:
      if (v147) {
        sub_2484C9F38(v81->i16, v57, v91, v90, v89, v88);
      }
      else {
        sub_2484CA068(v81->i16, v57, v91, v90, (int32x4_t *)v89, v88);
      }
      int v77 = v151;
      uint64_t v76 = (uint16x8_t *)v152;
      long long v78 = 0uLL;
      int8x16_t v79 = (int8x16_t)xmmword_2484DCBC0;
      v80.i64[0] = 0x400000004;
      v80.i64[1] = 0x400000004;
      goto LABEL_43;
    }
LABEL_112:
    if (__p)
    {
      a20 = __p;
      operator delete(__p);
    }
    uint64_t v50 = v145;
  }
  else
  {
    unsigned int v66 = **(unsigned __int8 **)(v50 + 40);
    uint64_t v67 = **(void **)(v50 + 80);
    for (uint64_t k = 1; k != 9; k += 2)
      (&a30)[k] = 0;
    if (v61)
    {
      float v69 = &v60[19 * v66];
      float v70 = &v59[33 * v66];
      float v71 = &a42;
      float v72 = &a30;
      unint64_t v73 = v61;
      do
      {
        *float v72 = (uint64_t *)v71;
        v72 += 2;
        *(void *)float v71 = v69;
        *((void *)v71++ + 1) = v70;
        --v73;
      }
      while (v73);
    }
    sub_2484C98A4(v150, v148, v53 & 0x1F0, v149 + 1, v58, v67, v61, &a30);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v50 + 16) + 40))(**(void **)(v50 + 16), v150);
}

void sub_2484C98A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8)
{
  sub_2484CA160((char **)__p);
  if (a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (int *)(a1 + a5 * a2);
    uint64_t v18 = a7 - 1;
    do
    {
      unint64_t v19 = ((v16 & 1u) << 7) | ((unint64_t)(v16 & 1) << 9);
      unsigned int v20 = __p[0];
      switch(v18)
      {
        case 0:
          if (a3)
          {
            uint64_t v21 = 0;
            do
            {
              *(_WORD *)((char *)&v20[v21 + 32] + v19) = *(_WORD *)(a6
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int8 *)v17 + v21)) >> 16));
              ++v21;
            }
            while (a3 != v21);
          }
          break;
        case 1:
          if (a3)
          {
            uint64_t v22 = 0;
            do
            {
              *(_WORD *)((char *)&v20[v22 + 32] + v19) = *(_WORD *)(a6
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int16 *)v17 + v22)) >> 16));
              ++v22;
            }
            while (a3 != v22);
          }
          break;
        case 2:
          if (a3)
          {
            uint64_t v23 = 0;
            unsigned int v24 = (char *)__p[0] + v19 + 64;
            unint64_t v25 = a3;
            do
            {
              *v24++ = *(_WORD *)(a6
                                + 2
                                * ((-1640531535
                                                * (*(unsigned __int16 *)((char *)v17 + v23) | (*((unsigned __int8 *)v17
                                                                                               + v23
                                                                                               + 2) << 16))) >> 16));
              v23 += 3;
              --v25;
            }
            while (v25);
          }
          break;
        case 3:
          if (a3)
          {
            float v26 = (char *)__p[0] + v19 + 64;
            float v27 = v17;
            unint64_t v28 = a3;
            do
            {
              int v29 = *v27++;
              *v26++ = *(_WORD *)(a6 + 2 * ((-1640531535 * v29) >> 16));
              --v28;
            }
            while (v28);
          }
          break;
        default:
          break;
      }
      unsigned int v30 = (char *)v20 + v19;
      if (v16)
      {
        uint64_t v31 = (char *)&v20[320 * !(v16 & 1)];
        __int16 v33 = *((_WORD *)v31 + 32);
        uint64_t v32 = (uint64_t)(v31 + 64);
        *((_WORD *)v30 + 31) = v33;
        uint64_t v34 = (uint64_t)(v30 + 62);
        *((_WORD *)v31 + 31) = v33;
        uint64_t v35 = (uint64_t)(v31 + 62);
      }
      else
      {
        *((_WORD *)v30 + 31) = 0;
        uint64_t v32 = (uint64_t)(v30 + 62);
        v20[351] = 0;
        uint64_t v34 = (uint64_t)(v30 + 62);
        uint64_t v35 = (uint64_t)(v30 + 62);
      }
      sub_2484CA1AC(a8, (uint64_t)(v30 + 64), v34, v32, v35, a3);
      ++v16;
      uint64_t v17 = (int *)((char *)v17 + a5);
    }
    while (v16 != a4);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void *sub_2484C9AC8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x18618618618619) {
      sub_2483E92E8();
    }
    char v4 = (char *)operator new(2688 * a2);
    *a1 = v4;
    a1[2] = &v4[2688 * a2];
    size_t v5 = 2688 * ((((2688 * a2 - 2688) >> 7) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 2688;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2484C9B7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t *sub_2484C9B98(int8x16_t *result, unint64_t a2, uint32x4_t *a3)
{
  if (a2 >= 8)
  {
    uint64_t v4 = 0;
    size_t v5 = a3 + 1;
    BOOL v6 = result;
    do
    {
      int8x16_t v7 = *v6++;
      int8x16_t v8 = vrev16q_s8(v7);
      v5[-1] = vmovl_u16(*(uint16x4_t *)v8.i8);
      *size_t v5 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
      unint64_t v3 = v4 + 8;
      unint64_t v9 = v4 + 16;
      v5 += 2;
      v4 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v10 = a2 - v3;
  if (a2 > v3)
  {
    uint64_t v11 = (unsigned int *)a3 + v3;
    uint64_t v12 = (uint64_t)result->i64 + 2 * v3 + 1;
    do
    {
      *v11++ = bswap32(*(unsigned __int16 *)(v12 - 1)) >> 16;
      v12 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_2484C9C18(const __int16 *result, unint64_t a2, uint32x4_t *a3, uint32x4_t *a4)
{
  if (a2 >= 8)
  {
    uint64_t v5 = 0;
    BOOL v6 = a4 + 1;
    int8x16_t v7 = a3 + 1;
    int8x16_t v8 = result;
    do
    {
      int16x8x2_t v16 = vld2q_s16(v8);
      v8 += 16;
      int8x16_t v9 = vrev16q_s8((int8x16_t)v16.val[0]);
      v16.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v16.val[1]);
      v7[-1] = vmovl_u16(*(uint16x4_t *)v9.i8);
      uint32x4_t *v7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
      unint64_t v4 = v5 + 8;
      unint64_t v10 = v5 + 16;
      v6[-1] = vmovl_u16(*(uint16x4_t *)v16.val[0].i8);
      *BOOL v6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v16.val[0], (int8x16_t)v16.val[0], 8uLL));
      v6 += 2;
      v7 += 2;
      v5 += 8;
    }
    while (v10 <= a2);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v11 = a2 - v4;
  if (a2 > v4)
  {
    uint64_t v12 = (unsigned int *)a4 + v4;
    unint64_t v13 = (unsigned int *)a3 + v4;
    uint64_t v14 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      unsigned int v15 = bswap32(*(unsigned __int16 *)(v14 + 1));
      *v13++ = bswap32(*(unsigned __int16 *)(v14 - 1)) >> 16;
      *v12++ = HIWORD(v15);
      v14 += 4;
      --v11;
    }
    while (v11);
  }
  return result;
}

const __int16 *sub_2484C9CC8(const __int16 *result, unint64_t a2, uint32x4_t *a3, uint32x4_t *a4)
{
  if (a2 >= 8)
  {
    uint64_t v5 = 0;
    BOOL v6 = a4 + 1;
    int8x16_t v7 = a3 + 1;
    int8x16_t v8 = result;
    do
    {
      int16x8x2_t v15 = vld2q_s16(v8);
      v8 += 16;
      v7[-1] = vmovl_u16(*(uint16x4_t *)v15.val[0].i8);
      uint32x4_t *v7 = vmovl_high_u16((uint16x8_t)v15.val[0]);
      unint64_t v4 = v5 + 8;
      unint64_t v9 = v5 + 16;
      v6[-1] = vmovl_u16(*(uint16x4_t *)v15.val[1].i8);
      *BOOL v6 = vmovl_high_u16((uint16x8_t)v15.val[1]);
      v6 += 2;
      v7 += 2;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v10 = a2 - v4;
  if (a2 > v4)
  {
    uint64_t v11 = &a4->i32[v4];
    uint64_t v12 = &a3->i32[v4];
    uint64_t v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      __int32 v14 = *(unsigned __int16 *)(v13 + 1);
      *v12++ = *(unsigned __int16 *)(v13 - 1);
      *v11++ = v14;
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_2484C9D58(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5)
{
  if (a2 >= 8)
  {
    uint64_t v6 = 0;
    int8x16_t v7 = a5 + 1;
    int8x16_t v8 = a4 + 1;
    unint64_t v9 = a3 + 1;
    uint64_t v10 = result;
    do
    {
      int16x8x3_t v27 = vld3q_s16(v10);
      v10 += 24;
      uint16x8_t v11 = (uint16x8_t)vrev16q_s8((int8x16_t)v27.val[0]);
      int8x16_t v12 = vrev16q_s8((int8x16_t)v27.val[1]);
      v27.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v27.val[2]);
      v27.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v12.i8);
      v27.val[2] = (int16x8_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
      int32x4_t v13 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v27.val[0].i8);
      int32x4_t v14 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.val[0].i8), v13, 1uLL);
      v27.val[1] = (int16x8_t)vsubq_s32((int32x4_t)v27.val[1], v14);
      int32x4_t v15 = (int32x4_t)vsubl_high_u16(v11, (uint16x8_t)v27.val[0]);
      v27.val[0] = (int16x8_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v15, 1uLL), (uint16x8_t)v27.val[0]);
      v27.val[2] = (int16x8_t)vsubq_s32((int32x4_t)v27.val[2], (int32x4_t)v27.val[0]);
      v9[-1] = vsraq_n_s32(v14, (int32x4_t)v27.val[1], 1uLL);
      v8[-1] = v13;
      v7[-1] = v27.val[1];
      *unint64_t v9 = vsraq_n_s32((int32x4_t)v27.val[0], (int32x4_t)v27.val[2], 1uLL);
      v9 += 2;
      *int8x16_t v8 = v15;
      v8 += 2;
      unint64_t v5 = v6 + 8;
      unint64_t v16 = v6 + 16;
      int16x8_t *v7 = v27.val[2];
      v7 += 2;
      v6 += 8;
    }
    while (v16 <= a2);
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v17 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v18 = &a5->i32[v5];
    unint64_t v19 = &a4->i32[v5];
    unsigned int v20 = &a3->i32[v5];
    uint64_t v21 = &result[3 * v5 + 1];
    do
    {
      unsigned int v22 = bswap32(*(unsigned __int16 *)v21);
      unsigned int v23 = bswap32(*((unsigned __int16 *)v21 + 1));
      signed int v24 = (bswap32(*((unsigned __int16 *)v21 - 1)) >> 16) - HIWORD(v23);
      *v19++ = v24;
      int v25 = (v24 >> 1) + HIWORD(v23);
      int v26 = HIWORD(v22) - v25;
      *v18++ = v26;
      *v20++ = v25 + (v26 >> 1);
      v21 += 3;
      --v17;
    }
    while (v17);
  }
  return result;
}

const __int16 *sub_2484C9E5C(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5)
{
  if (a2 >= 8)
  {
    uint64_t v6 = 0;
    int8x16_t v7 = a5 + 1;
    int8x16_t v8 = a4 + 1;
    unint64_t v9 = a3 + 1;
    uint64_t v10 = result;
    do
    {
      int16x8x3_t v26 = vld3q_s16(v10);
      v10 += 24;
      int32x4_t v11 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v26.val[0].i8, *(uint16x4_t *)v26.val[2].i8);
      int32x4_t v12 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.val[2].i8), v11, 1uLL);
      int32x4_t v13 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.val[1].i8), v12);
      int32x4_t v14 = (int32x4_t)vsubl_high_u16((uint16x8_t)v26.val[0], (uint16x8_t)v26.val[2]);
      v26.val[0] = (int16x8_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v14, 1uLL), (uint16x8_t)v26.val[2]);
      v26.val[1] = (int16x8_t)vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v26.val[1]), (int32x4_t)v26.val[0]);
      v9[-1] = vsraq_n_s32(v12, v13, 1uLL);
      v8[-1] = v11;
      v7[-1] = (int16x8_t)v13;
      *unint64_t v9 = vsraq_n_s32((int32x4_t)v26.val[0], (int32x4_t)v26.val[1], 1uLL);
      v9 += 2;
      *int8x16_t v8 = v14;
      v8 += 2;
      unint64_t v5 = v6 + 8;
      unint64_t v15 = v6 + 16;
      int16x8_t *v7 = v26.val[1];
      v7 += 2;
      v6 += 8;
    }
    while (v15 <= a2);
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v16 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v17 = &a5->i32[v5];
    uint64_t v18 = &a4->i32[v5];
    unint64_t v19 = &a3->i32[v5];
    unsigned int v20 = &result[3 * v5 + 1];
    do
    {
      int v21 = *(unsigned __int16 *)v20;
      int v22 = *((unsigned __int16 *)v20 + 1);
      int v23 = *((unsigned __int16 *)v20 - 1) - v22;
      *v18++ = v23;
      int v24 = v22 + (v23 >> 1);
      int v25 = v21 - v24;
      *v17++ = v25;
      *v19++ = v24 + (v25 >> 1);
      v20 += 3;
      --v16;
    }
    while (v16);
  }
  return result;
}

const __int16 *sub_2484C9F38(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5, uint32x4_t *a6)
{
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    int8x16_t v8 = a6 + 1;
    unint64_t v9 = a3 + 1;
    uint64_t v10 = a5 + 1;
    int32x4_t v11 = a4 + 1;
    int32x4_t v12 = result;
    do
    {
      int16x8x4_t v32 = vld4q_s16(v12);
      v12 += 32;
      uint16x8_t v13 = (uint16x8_t)vrev16q_s8((int8x16_t)v32.val[0]);
      int8x16_t v14 = vrev16q_s8((int8x16_t)v32.val[1]);
      uint16x8_t v15 = (uint16x8_t)vrev16q_s8((int8x16_t)v32.val[2]);
      v32.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v32.val[3]);
      v32.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v14.i8);
      v32.val[2] = (int16x8_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      int32x4_t v16 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v15.i8);
      v32.val[3] = (int16x8_t)vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8), v16, 1uLL);
      v32.val[1] = (int16x8_t)vsubq_s32((int32x4_t)v32.val[1], (int32x4_t)v32.val[3]);
      int32x4_t v17 = (int32x4_t)vsubl_high_u16(v13, v15);
      int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v17, 1uLL), v15);
      v32.val[2] = (int16x8_t)vsubq_s32((int32x4_t)v32.val[2], v18);
      v9[-1] = vsraq_n_s32((int32x4_t)v32.val[3], (int32x4_t)v32.val[1], 1uLL);
      v11[-1] = v16;
      v10[-1] = v32.val[1];
      *unint64_t v9 = vsraq_n_s32(v18, (int32x4_t)v32.val[2], 1uLL);
      v9 += 2;
      *int32x4_t v11 = v17;
      v11 += 2;
      *uint64_t v10 = v32.val[2];
      v10 += 2;
      v8[-1] = vmovl_u16(*(uint16x4_t *)v32.val[0].i8);
      *int8x16_t v8 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v32.val[0], (int8x16_t)v32.val[0], 8uLL));
      unint64_t v6 = v7 + 8;
      unint64_t v19 = v7 + 16;
      v8 += 2;
      v7 += 8;
    }
    while (v19 <= a2);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v20 = a2 - v6;
  if (a2 > v6)
  {
    int v21 = (unsigned int *)a6 + v6;
    int v22 = &a5->i32[v6];
    int v23 = &a4->i32[v6];
    uint64_t v24 = (uint64_t)&result[4 * v6 + 1] + 1;
    int v25 = &a3->i32[v6];
    do
    {
      unsigned int v26 = bswap32(*(unsigned __int16 *)(v24 - 1));
      unsigned int v27 = bswap32(*(unsigned __int16 *)(v24 + 1));
      unsigned int v28 = bswap32(*(unsigned __int16 *)(v24 + 3));
      signed int v29 = (bswap32(*(unsigned __int16 *)(v24 - 3)) >> 16) - HIWORD(v27);
      *v23++ = v29;
      int v30 = (v29 >> 1) + HIWORD(v27);
      int v31 = HIWORD(v26) - v30;
      *v22++ = v31;
      *v25++ = v30 + (v31 >> 1);
      *v21++ = HIWORD(v28);
      v24 += 8;
      --v20;
    }
    while (v20);
  }
  return result;
}

const __int16 *sub_2484CA068(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, uint32x4_t *a6)
{
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    int8x16_t v8 = a6 + 1;
    unint64_t v9 = a3 + 1;
    uint64_t v10 = a5 + 1;
    int32x4_t v11 = a4 + 1;
    int32x4_t v12 = result;
    do
    {
      int16x8x4_t v32 = vld4q_s16(v12);
      v12 += 32;
      int32x4_t v13 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v32.val[0].i8, *(uint16x4_t *)v32.val[2].i8);
      int32x4_t v14 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.val[2].i8), v13, 1uLL);
      int32x4_t v15 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.val[1].i8), v14);
      int32x4_t v16 = (int32x4_t)vsubl_high_u16((uint16x8_t)v32.val[0], (uint16x8_t)v32.val[2]);
      int32x4_t v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v16, 1uLL), (uint16x8_t)v32.val[2]);
      int32x4_t v18 = vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v32.val[1]), v17);
      v9[-1] = vsraq_n_s32(v14, v15, 1uLL);
      v11[-1] = v13;
      v10[-1] = v15;
      *unint64_t v9 = vsraq_n_s32(v17, v18, 1uLL);
      v9 += 2;
      *int32x4_t v11 = v16;
      v11 += 2;
      *uint64_t v10 = v18;
      v10 += 2;
      v8[-1] = vmovl_u16(*(uint16x4_t *)v32.val[3].i8);
      *int8x16_t v8 = vmovl_high_u16((uint16x8_t)v32.val[3]);
      unint64_t v6 = v7 + 8;
      unint64_t v19 = v7 + 16;
      v8 += 2;
      v7 += 8;
    }
    while (v19 <= a2);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v20 = a2 - v6;
  if (a2 > v6)
  {
    int v21 = &a6->i32[v6];
    int v22 = &a5->i32[v6];
    int v23 = &a4->i32[v6];
    uint64_t v24 = (uint64_t)&result[4 * v6 + 1] + 1;
    int v25 = &a3->i32[v6];
    do
    {
      int v26 = *(unsigned __int16 *)(v24 - 1);
      int v27 = *(unsigned __int16 *)(v24 + 1);
      __int32 v28 = *(unsigned __int16 *)(v24 + 3);
      int v29 = *(unsigned __int16 *)(v24 - 3) - v27;
      *v23++ = v29;
      int v30 = v27 + (v29 >> 1);
      int v31 = v26 - v30;
      *v22++ = v31;
      *v25++ = v30 + (v31 >> 1);
      *v21++ = v28;
      v24 += 8;
      --v20;
    }
    while (v20);
  }
  return result;
}

char **sub_2484CA160(char **a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x500uLL);
  *a1 = v2;
  unint64_t v3 = v2 + 1280;
  a1[2] = v2 + 1280;
  bzero(v2, 0x500uLL);
  a1[1] = v3;
  return a1;
}

uint64_t **sub_2484CA1AC(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a6)
  {
    unint64_t v6 = 0;
    uint64_t v7 = result[1];
    v8.i64[0] = 0x8000800080008;
    v8.i64[1] = 0x8000800080008;
    unint64_t v9 = a6;
    do
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      unint64_t v12 = v9 - 16;
      if (v9 >= 0x10) {
        uint64_t v13 = 16;
      }
      else {
        uint64_t v13 = v9;
      }
      memset(v44, 0, sizeof(v44));
      char v14 = 1;
      do
      {
        int16x8_t v15 = *(int16x8_t *)(a3 + 2 * v6 + 2 * v10);
        int16x8_t v16 = *(int16x8_t *)(a4 + 2 * v6 + 2 * v10);
        int16x8_t v17 = *(int16x8_t *)(a5 + 2 * v6 + 2 * v10);
        int16x8_t v18 = vsubq_s16(v15, v17);
        int8x16_t v19 = (int8x16_t)vsubq_s16(v16, v17);
        int16x8_t v20 = vsubq_s16(*(int16x8_t *)(a2 + 2 * v6 + 2 * v10), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v18, v19)), (int8x16_t)vaddq_s16(v18, v16), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v19, (int8x16_t)vsubq_s16(v15, v16))), (int8x16_t)v16, (int8x16_t)v15)));
        char v21 = v14;
        int16x8_t v22 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v20, v20), (int8x16_t)vcltzq_s16(v20));
        uint16x8_t v23 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v22), v8, (int8x16_t)xmmword_2484DD030);
        v23.i16[0] = vminvq_u16(v23);
        v44[v10 / 8] = v22;
        if (v11 == v10) {
          uint64_t v24 = v23.u32[0];
        }
        else {
          uint64_t v24 = 0;
        }
        v11 += v24;
        unint64_t v10 = 8;
        char v14 = 0;
      }
      while ((v21 & 1) != 0);
      unint64_t v25 = a6 - v6;
      if (a6 - v6 >= 0x10) {
        unint64_t v25 = 16;
      }
      int v26 = v7;
      if (v11 >= v25) {
        unint64_t v27 = v25;
      }
      else {
        unint64_t v27 = v11;
      }
      if (v11 >= v25)
      {
        if (v27 > 7 || v7 != 0)
        {
          uint64_t v7 = (uint64_t *)((char *)v7 + v27);
          goto LABEL_39;
        }
        int v26 = 0;
      }
      unint64_t v29 = (unint64_t)v26 + v27;
      if (v29 < 8)
      {
        if (v25)
        {
          uint64_t v39 = **result;
          float v40 = (unsigned __int16 *)v44;
          do
          {
            unsigned int v41 = *v40++;
            uint64_t v42 = 32 - __clz(v41);
            if (v41) {
              uint64_t v43 = v42;
            }
            else {
              uint64_t v43 = 0;
            }
            ++*(void *)(v39 + 8 * v43);
            --v13;
          }
          while (v13);
        }
        goto LABEL_46;
      }
      int v30 = (void *)**result;
      uint64_t v31 = (*result)[1];
      ++*v30;
      unsigned int v32 = v29 - 8;
      unsigned int v33 = 43 - __clz(v32);
      if (!v32) {
        unsigned int v33 = 12;
      }
      if (v32 >= 0x10) {
        unsigned int v32 = v33;
      }
      ++*(void *)(v31 + 8 * v32);
      if (v11 < v25)
      {
        if (v9 >= v11) {
          unint64_t v9 = v11;
        }
        if (v9 >= 0x10) {
          unint64_t v9 = 16;
        }
        unint64_t v34 = v13 - v9;
        uint64_t v35 = (unsigned __int16 *)((unint64_t)v44 | (2 * v9));
        do
        {
          unsigned int v36 = *v35++;
          uint64_t v37 = 32 - __clz(v36);
          if (v36) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 0;
          }
          ++v30[v38];
          --v34;
        }
        while (v34);
      }
      uint64_t v7 = 0;
LABEL_39:
      result[1] = v7;
LABEL_46:
      v6 += 16;
      unint64_t v9 = v12;
    }
    while (v6 < a6);
  }
  return result;
}

unsigned int *sub_2484CA404(unsigned int *result, unsigned int *a2, unsigned int *a3, void *a4)
{
  unsigned int v4 = *a2;
  int v5 = HIBYTE(*a2);
  int v6 = BYTE2(*a2);
  int v7 = BYTE1(*a2);
  int v8 = *a2;
  unsigned int v9 = *a2 & 0xFF000000 | (v6 << 16) | (v7 << 8) | v8;
  if (!v9) {
    goto LABEL_10;
  }
  unsigned int v10 = *result;
  int v11 = HIBYTE(*result);
  int v12 = BYTE2(*result);
  int v13 = BYTE1(*result);
  int v14 = *result;
  unsigned int v15 = *result & 0xFF000000 | (v12 << 16) | (v13 << 8) | v14;
  if (!v15) {
    goto LABEL_7;
  }
  float v16 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114)) + 0.01;
  if (*a4 == 4)
  {
    float v16 = v16 * (float)v5;
    float v17 = (float)((float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                        + (float)((float)v12 * 0.114))
                + 0.01)
        * (float)v11;
  }
  else
  {
    float v17 = (float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299)) + (float)((float)v12 * 0.114))
        + 0.01;
  }
  if (v16 >= v17)
  {
LABEL_10:
    unsigned int v21 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      if (!v9
        || ((float v22 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                 + (float)((float)*a3 * 0.299))
                         + (float)((float)BYTE2(*a3) * 0.114))
                 + 0.01,
             *a4 != 4)
          ? (float v23 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114))
                 + 0.01)
          : (float v22 = v22 * (float)HIBYTE(v21),
             float v23 = (float)((float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299))
                                 + (float)((float)v6 * 0.114))
                         + 0.01)
                 * (float)v5),
            v22 < v23))
      {
        *a2 = v21;
        *a3 = v4;
        unsigned int v27 = *a2;
        if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
        {
          unsigned int v28 = *result;
          if (!(*result & 0xFF000000 | (BYTE2(*result) << 16) | (BYTE1(*result) << 8) | *result)
            || ((int v29 = *result,
                 float v30 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                     + (float)((float)*a2 * 0.299))
                             + (float)((float)BYTE2(*a2) * 0.114))
                     + 0.01,
                 *a4 != 4)
              ? (float v31 = (float)((float)((float)((float)BYTE1(v28) * 0.587) + (float)((float)v29 * 0.299))
                             + (float)((float)BYTE2(v28) * 0.114))
                     + 0.01)
              : (float v30 = v30 * (float)HIBYTE(v27),
                 float v31 = (float)((float)((float)((float)((float)BYTE1(v28) * 0.587) + (float)((float)v29 * 0.299))
                                     + (float)((float)BYTE2(v28) * 0.114))
                             + 0.01)
                     * (float)HIBYTE(v28)),
                v30 < v31))
          {
            *uint64_t result = v27;
            *a2 = v28;
          }
        }
      }
    }
  }
  else
  {
LABEL_7:
    unsigned int v18 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      float v19 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                          + (float)((float)*a3 * 0.299))
                  + (float)((float)BYTE2(*a3) * 0.114))
          + 0.01;
      if (*a4 == 4)
      {
        float v19 = v19 * (float)HIBYTE(v18);
        float v20 = (float)((float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299))
                            + (float)((float)v6 * 0.114))
                    + 0.01)
            * (float)v5;
      }
      else
      {
        float v20 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114))
            + 0.01;
      }
      if (v19 < v20)
      {
        *uint64_t result = v18;
LABEL_30:
        *a3 = v10;
        return result;
      }
    }
    *uint64_t result = v4;
    *a2 = v10;
    unsigned int v24 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      if (!v15
        || ((float v25 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                 + (float)((float)*a3 * 0.299))
                         + (float)((float)BYTE2(*a3) * 0.114))
                 + 0.01,
             *a4 != 4)
          ? (float v26 = (float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                         + (float)((float)v12 * 0.114))
                 + 0.01)
          : (float v25 = v25 * (float)HIBYTE(v24),
             float v26 = (float)((float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                                 + (float)((float)v12 * 0.114))
                         + 0.01)
                 * (float)v11),
            v25 < v26))
      {
        *a2 = v24;
        goto LABEL_30;
      }
    }
  }
  return result;
}

unsigned int *sub_2484CA890(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void **a5)
{
  uint64_t result = sub_2484CA404(a1, a2, a3, *a5);
  unsigned int v11 = *a4;
  if (*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
  {
    unsigned int v12 = *a3;
    if (!(*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
      || ((int v13 = *a3,
           float v14 = (float)((float)((float)((float)BYTE1(*a4) * 0.587)
                               + (float)((float)*a4 * 0.299))
                       + (float)((float)BYTE2(*a4) * 0.114))
               + 0.01,
           **a5 != 4)
        ? (float v15 = (float)((float)((float)((float)BYTE1(v12) * 0.587) + (float)((float)v13 * 0.299))
                       + (float)((float)BYTE2(v12) * 0.114))
               + 0.01)
        : (float v14 = v14 * (float)HIBYTE(v11),
           float v15 = (float)((float)((float)((float)((float)BYTE1(v12) * 0.587) + (float)((float)v13 * 0.299))
                               + (float)((float)BYTE2(v12) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v12)),
          v14 < v15))
    {
      *a3 = v11;
      *a4 = v12;
      unsigned int v16 = *a3;
      if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
      {
        unsigned int v17 = *a2;
        if (!(*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
          || ((int v18 = *a2,
               float v19 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                   + (float)((float)*a3 * 0.299))
                           + (float)((float)BYTE2(*a3) * 0.114))
                   + 0.01,
               **a5 != 4)
            ? (float v20 = (float)((float)((float)((float)BYTE1(v17) * 0.587) + (float)((float)v18 * 0.299))
                           + (float)((float)BYTE2(v17) * 0.114))
                   + 0.01)
            : (float v19 = v19 * (float)HIBYTE(v16),
               float v20 = (float)((float)((float)((float)((float)BYTE1(v17) * 0.587) + (float)((float)v18 * 0.299))
                                   + (float)((float)BYTE2(v17) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v17)),
              v19 < v20))
        {
          *a2 = v16;
          *a3 = v17;
          unsigned int v21 = *a2;
          if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
          {
            unsigned int v22 = *a1;
            if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
              || ((int v23 = *a1,
                   float v24 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                       + (float)((float)*a2 * 0.299))
                               + (float)((float)BYTE2(*a2) * 0.114))
                       + 0.01,
                   **a5 != 4)
                ? (float v25 = (float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v23 * 0.299))
                               + (float)((float)BYTE2(v22) * 0.114))
                       + 0.01)
                : (float v24 = v24 * (float)HIBYTE(v21),
                   float v25 = (float)((float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v23 * 0.299))
                                       + (float)((float)BYTE2(v22) * 0.114))
                               + 0.01)
                       * (float)HIBYTE(v22)),
                  v24 < v25))
            {
              *a1 = v21;
              *a2 = v22;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int *sub_2484CABF0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void **a6)
{
  uint64_t result = sub_2484CA890(a1, a2, a3, a4, a6);
  unsigned int v13 = *a5;
  if (*a5 & 0xFF000000 | (BYTE2(*a5) << 16) | (BYTE1(*a5) << 8) | *a5)
  {
    unsigned int v14 = *a4;
    if (!(*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
      || ((int v15 = *a4,
           float v16 = (float)((float)((float)((float)BYTE1(*a5) * 0.587)
                               + (float)((float)*a5 * 0.299))
                       + (float)((float)BYTE2(*a5) * 0.114))
               + 0.01,
           **a6 != 4)
        ? (float v17 = (float)((float)((float)((float)BYTE1(v14) * 0.587) + (float)((float)v15 * 0.299))
                       + (float)((float)BYTE2(v14) * 0.114))
               + 0.01)
        : (float v16 = v16 * (float)HIBYTE(v13),
           float v17 = (float)((float)((float)((float)((float)BYTE1(v14) * 0.587) + (float)((float)v15 * 0.299))
                               + (float)((float)BYTE2(v14) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v14)),
          v16 < v17))
    {
      *a4 = v13;
      *a5 = v14;
      unsigned int v18 = *a4;
      if (*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
      {
        unsigned int v19 = *a3;
        if (!(*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
          || ((int v20 = *a3,
               float v21 = (float)((float)((float)((float)BYTE1(*a4) * 0.587)
                                   + (float)((float)*a4 * 0.299))
                           + (float)((float)BYTE2(*a4) * 0.114))
                   + 0.01,
               **a6 != 4)
            ? (float v22 = (float)((float)((float)((float)BYTE1(v19) * 0.587) + (float)((float)v20 * 0.299))
                           + (float)((float)BYTE2(v19) * 0.114))
                   + 0.01)
            : (float v21 = v21 * (float)HIBYTE(v18),
               float v22 = (float)((float)((float)((float)((float)BYTE1(v19) * 0.587) + (float)((float)v20 * 0.299))
                                   + (float)((float)BYTE2(v19) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v19)),
              v21 < v22))
        {
          *a3 = v18;
          *a4 = v19;
          unsigned int v23 = *a3;
          if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
          {
            unsigned int v24 = *a2;
            if (!(*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
              || ((int v25 = *a2,
                   float v26 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                       + (float)((float)*a3 * 0.299))
                               + (float)((float)BYTE2(*a3) * 0.114))
                       + 0.01,
                   **a6 != 4)
                ? (float v27 = (float)((float)((float)((float)BYTE1(v24) * 0.587) + (float)((float)v25 * 0.299))
                               + (float)((float)BYTE2(v24) * 0.114))
                       + 0.01)
                : (float v26 = v26 * (float)HIBYTE(v23),
                   float v27 = (float)((float)((float)((float)((float)BYTE1(v24) * 0.587) + (float)((float)v25 * 0.299))
                                       + (float)((float)BYTE2(v24) * 0.114))
                               + 0.01)
                       * (float)HIBYTE(v24)),
                  v26 < v27))
            {
              *a2 = v23;
              *a3 = v24;
              unsigned int v28 = *a2;
              if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
              {
                unsigned int v29 = *a1;
                if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
                  || ((int v30 = *a1,
                       float v31 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                           + (float)((float)*a2 * 0.299))
                                   + (float)((float)BYTE2(*a2) * 0.114))
                           + 0.01,
                       **a6 != 4)
                    ? (float v32 = (float)((float)((float)((float)BYTE1(v29) * 0.587) + (float)((float)v30 * 0.299))
                                   + (float)((float)BYTE2(v29) * 0.114))
                           + 0.01)
                    : (float v31 = v31 * (float)HIBYTE(v28),
                       float v32 = (float)((float)((float)((float)((float)BYTE1(v29) * 0.587) + (float)((float)v30 * 0.299))
                                           + (float)((float)BYTE2(v29) * 0.114))
                                   + 0.01)
                           * (float)HIBYTE(v29)),
                      v31 < v32))
                {
                  *a1 = v28;
                  *a2 = v29;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2484CB05C(unsigned int *a1, unsigned int *a2, void **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        unsigned int v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((int v10 = *a1,
               float v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (float v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (float v11 = v11 * (float)HIBYTE(v8),
               float v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_2484CA404(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_2484CA890(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2484CABF0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v13 = a1 + 2;
      sub_2484CA404(a1, a1 + 1, a1 + 2, *a3);
      unsigned int v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      float v17 = *a3;
      break;
  }
  while (1)
  {
    unsigned int v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      int v19 = HIBYTE(v18);
      int v20 = *v14;
      unsigned int v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((float v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             float v23 = (float)*v13,
             float v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (float v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (float v22 = v22 * (float)v19,
             float v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *unsigned int v14 = v21;
        float v26 = a1;
        if (v13 != a1)
        {
          float v27 = (float)v20;
          unsigned int v28 = *a3;
          float v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          float v30 = (float)v19;
          uint64_t v31 = v15;
          while (1)
          {
            unsigned int v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              float v33 = (float)HIBYTE(v32);
              if (*v28 == 4) {
                float v34 = v30;
              }
              else {
                float v34 = 1.0;
              }
              float v35 = v29 * v34;
              if (*v28 != 4) {
                float v33 = 1.0;
              }
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              float v26 = a1;
              goto LABEL_26;
            }
          }
          float v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *float v26 = v18;
        if (++v16 == 8) {
          return v14 + 1 == a2;
        }
      }
    }
    unsigned int v13 = v14;
    v15 += 4;
    if (++v14 == a2) {
      return 1;
    }
  }
}

void *sub_2484CB468(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8CLL) {
      sub_2483E92E8();
    }
    unsigned int v4 = (char *)operator new(1408 * a2);
    *a1 = v4;
    a1[2] = &v4[1408 * a2];
    size_t v5 = 1408 * ((1408 * a2 - 1408) / 0x580) + 1408;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2484CB51C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t *sub_2484CB538(int8x16_t *result, unint64_t a2, int8x16_t *a3)
{
  if (a2 >= 8)
  {
    uint64_t v4 = 0;
    size_t v5 = result;
    uint64_t v6 = a3;
    do
    {
      int8x16_t v7 = *v5++;
      *v6++ = vrev16q_s8(v7);
      unint64_t v3 = v4 + 8;
      unint64_t v8 = v4 + 16;
      v4 += 8;
    }
    while (v8 <= a2);
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v9 = a2 - v3;
  if (a2 > v3)
  {
    int v10 = &a3->i16[v3];
    uint64_t v11 = (uint64_t)result->i64 + 2 * v3 + 1;
    do
    {
      *v10++ = bswap32(*(unsigned __int16 *)(v11 - 1)) >> 16;
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

long long *sub_2484CB5A8(long long *result, unint64_t a2, _OWORD *a3)
{
  if (a2 >= 8)
  {
    uint64_t v4 = 0;
    size_t v5 = result;
    uint64_t v6 = a3;
    do
    {
      long long v7 = *v5++;
      *v6++ = v7;
      unint64_t v3 = v4 + 8;
      unint64_t v8 = v4 + 16;
      v4 += 8;
    }
    while (v8 <= a2);
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v9 = a2 - v3;
  if (a2 > v3)
  {
    int v10 = (_WORD *)a3 + v3;
    uint64_t v11 = (uint64_t)result + 2 * v3 + 1;
    do
    {
      *v10++ = *(_WORD *)(v11 - 1);
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

const __int16 *sub_2484CB60C(const __int16 *result, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  if (a2 >= 8)
  {
    uint64_t v5 = 0;
    uint64_t v6 = result;
    long long v7 = a3;
    unint64_t v8 = a4;
    do
    {
      int16x8x2_t v15 = vld2q_s16(v6);
      v6 += 16;
      *v7++ = vrev16q_s8((int8x16_t)v15.val[0]);
      *v8++ = vrev16q_s8((int8x16_t)v15.val[1]);
      unint64_t v4 = v5 + 8;
      unint64_t v9 = v5 + 16;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v10 = a2 - v4;
  if (a2 > v4)
  {
    uint64_t v11 = &a4->i16[v4];
    float v12 = &a3->i16[v4];
    uint64_t v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      unsigned int v14 = bswap32(*(unsigned __int16 *)(v13 + 1));
      *v12++ = bswap32(*(unsigned __int16 *)(v13 - 1)) >> 16;
      *v11++ = HIWORD(v14);
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_2484CB69C(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  if (a2 >= 8)
  {
    uint64_t v5 = 0;
    uint64_t v6 = result;
    long long v7 = a3;
    unint64_t v8 = a4;
    do
    {
      int16x8x2_t v15 = vld2q_s16(v6);
      v6 += 16;
      *v7++ = v15.val[0];
      *v8++ = v15.val[1];
      unint64_t v4 = v5 + 8;
      unint64_t v9 = v5 + 16;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v10 = a2 - v4;
  if (a2 > v4)
  {
    uint64_t v11 = &a4->i16[v4];
    float v12 = &a3->i16[v4];
    uint64_t v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      __int16 v14 = *(_WORD *)(v13 + 1);
      *v12++ = *(_WORD *)(v13 - 1);
      *v11++ = v14;
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_2484CB714(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5)
{
  if (a2 >= 8)
  {
    uint64_t v6 = 0;
    long long v7 = result;
    unint64_t v8 = a3;
    unint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      int16x8x3_t v23 = vld3q_s16(v7);
      v7 += 24;
      int16x8_t v11 = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[0]);
      int16x8_t v12 = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[1]);
      v23.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[2]);
      v23.val[1] = vsubq_s16(v11, v23.val[0]);
      v23.val[0] = vsraq_n_s16(v23.val[0], v23.val[1], 1uLL);
      v23.val[2] = vsubq_s16(v12, v23.val[0]);
      *v8++ = vsraq_n_s16(v23.val[0], v23.val[2], 1uLL);
      *v9++ = v23.val[1];
      *v10++ = v23.val[2];
      unint64_t v5 = v6 + 8;
      unint64_t v13 = v6 + 16;
      v6 += 8;
    }
    while (v13 <= a2);
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v14 = a2 - v5;
  if (a2 > v5)
  {
    int16x8x2_t v15 = &a5->i16[v5];
    int v16 = &a4->i16[v5];
    float v17 = &a3->i16[v5];
    unsigned int v18 = &result[3 * v5 + 1];
    do
    {
      unsigned int v19 = bswap32(*(unsigned __int16 *)v18);
      unsigned int v20 = bswap32(*((unsigned __int16 *)v18 + 1));
      unsigned int v21 = (bswap32(*((unsigned __int16 *)v18 - 1)) >> 16) - HIWORD(v20);
      *v16++ = v21;
      int v22 = ((__int16)v21 >> 1) + HIWORD(v20);
      *v15++ = HIWORD(v19) - v22;
      *v17++ = v22 + ((__int16)(HIWORD(v19) - v22) >> 1);
      v18 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

const __int16 *sub_2484CB7EC(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5)
{
  if (a2 >= 8)
  {
    uint64_t v6 = 0;
    long long v7 = result;
    unint64_t v8 = a3;
    unint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      int16x8x3_t v24 = vld3q_s16(v7);
      v7 += 24;
      int16x8_t v11 = vsubq_s16(v24.val[0], v24.val[2]);
      v24.val[2] = vsraq_n_s16(v24.val[2], v11, 1uLL);
      int16x8_t v12 = vsubq_s16(v24.val[1], v24.val[2]);
      *v8++ = vsraq_n_s16(v24.val[2], v12, 1uLL);
      *v9++ = v11;
      *v10++ = v12;
      unint64_t v5 = v6 + 8;
      unint64_t v13 = v6 + 16;
      v6 += 8;
    }
    while (v13 <= a2);
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v14 = a2 - v5;
  if (a2 > v5)
  {
    int16x8x2_t v15 = &a5->i16[v5];
    int v16 = &a4->i16[v5];
    float v17 = &a3->i16[v5];
    unsigned int v18 = &result[3 * v5 + 1];
    do
    {
      __int16 v19 = *v18;
      int v20 = *((unsigned __int16 *)v18 + 1);
      __int16 v21 = *(v18 - 1) - v20;
      *v16++ = v21;
      int v22 = v20 + (v21 >> 1);
      __int16 v23 = v19 - v22;
      *v15++ = v23;
      *v17++ = v22 + (v23 >> 1);
      v18 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

const __int16 *sub_2484CB8A4(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5, int8x16_t *a6)
{
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    unint64_t v8 = result;
    unint64_t v9 = a3;
    uint64_t v10 = a4;
    int16x8_t v11 = a5;
    int16x8_t v12 = a6;
    do
    {
      int16x8x4_t v29 = vld4q_s16(v8);
      v8 += 32;
      int16x8_t v13 = (int16x8_t)vrev16q_s8((int8x16_t)v29.val[1]);
      int16x8_t v14 = (int16x8_t)vrev16q_s8((int8x16_t)v29.val[2]);
      v29.val[1] = vsubq_s16((int16x8_t)vrev16q_s8((int8x16_t)v29.val[0]), v14);
      int16x8_t v15 = vsraq_n_s16(v14, v29.val[1], 1uLL);
      v29.val[2] = vsubq_s16(v13, v15);
      *v9++ = vsraq_n_s16(v15, v29.val[2], 1uLL);
      *v10++ = v29.val[1];
      *v11++ = v29.val[2];
      *v12++ = vrev16q_s8((int8x16_t)v29.val[3]);
      unint64_t v6 = v7 + 8;
      unint64_t v16 = v7 + 16;
      v7 += 8;
    }
    while (v16 <= a2);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v17 = a2 - v6;
  if (a2 > v6)
  {
    unsigned int v18 = &a6->i16[v6];
    __int16 v19 = &a5->i16[v6];
    int v20 = &a4->i16[v6];
    uint64_t v21 = (uint64_t)&result[4 * v6 + 1] + 1;
    int v22 = &a3->i16[v6];
    do
    {
      unsigned int v23 = bswap32(*(unsigned __int16 *)(v21 - 1));
      unsigned int v24 = bswap32(*(unsigned __int16 *)(v21 + 1));
      unsigned int v25 = bswap32(*(unsigned __int16 *)(v21 + 3));
      unsigned int v26 = (bswap32(*(unsigned __int16 *)(v21 - 3)) >> 16) - HIWORD(v24);
      *v20++ = v26;
      int v27 = ((__int16)v26 >> 1) + HIWORD(v24);
      unsigned int v28 = HIWORD(v23) - v27;
      *v19++ = v28;
      *v22++ = v27 + ((__int16)v28 >> 1);
      *v18++ = HIWORD(v25);
      v21 += 8;
      --v17;
    }
    while (v17);
  }
  return result;
}

const __int16 *sub_2484CB998(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5, int16x8_t *a6)
{
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    unint64_t v8 = result;
    unint64_t v9 = a3;
    uint64_t v10 = a4;
    int16x8_t v11 = a5;
    int16x8_t v12 = a6;
    do
    {
      int16x8x4_t v28 = vld4q_s16(v8);
      v8 += 32;
      int16x8_t v13 = vsubq_s16(v28.val[0], v28.val[2]);
      v28.val[2] = vsraq_n_s16(v28.val[2], v13, 1uLL);
      int16x8_t v14 = vsubq_s16(v28.val[1], v28.val[2]);
      *v9++ = vsraq_n_s16(v28.val[2], v14, 1uLL);
      *v10++ = v13;
      *v11++ = v14;
      *v12++ = v28.val[3];
      unint64_t v6 = v7 + 8;
      unint64_t v15 = v7 + 16;
      v7 += 8;
    }
    while (v15 <= a2);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v16 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v17 = &a6->i16[v6];
    unsigned int v18 = &a5->i16[v6];
    __int16 v19 = &a4->i16[v6];
    uint64_t v20 = (uint64_t)&result[4 * v6 + 1] + 1;
    uint64_t v21 = &a3->i16[v6];
    do
    {
      __int16 v22 = *(_WORD *)(v20 - 1);
      int v23 = *(unsigned __int16 *)(v20 + 1);
      __int16 v24 = *(_WORD *)(v20 + 3);
      __int16 v25 = *(_WORD *)(v20 - 3) - v23;
      BOOL result = (const __int16 *)v25;
      *v19++ = v25;
      int v26 = v23 + ((int)result >> 1);
      __int16 v27 = v22 - v26;
      *v18++ = v27;
      *v21++ = v26 + (v27 >> 1);
      *v17++ = v24;
      v20 += 8;
      --v16;
    }
    while (v16);
  }
  return result;
}

BOOL sub_2484CBA60(unsigned int *a1, unsigned int *a2, void **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        unsigned int v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((int v10 = *a1,
               float v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (float v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (float v11 = v11 * (float)HIBYTE(v8),
               float v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_2484CA404(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_2484CA890(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2484CABF0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int16x8_t v13 = a1 + 2;
      sub_2484CA404(a1, a1 + 1, a1 + 2, *a3);
      int16x8_t v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = *a3;
      break;
  }
  while (1)
  {
    unsigned int v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      int v19 = HIBYTE(v18);
      int v20 = *v14;
      unsigned int v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((float v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             float v23 = (float)*v13,
             float v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (float v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (float v22 = v22 * (float)v19,
             float v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *int16x8_t v14 = v21;
        int v26 = a1;
        if (v13 != a1)
        {
          float v27 = (float)v20;
          int16x8x4_t v28 = *a3;
          float v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          float v30 = (float)v19;
          uint64_t v31 = v15;
          while (1)
          {
            unsigned int v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              float v33 = (float)HIBYTE(v32);
              if (*v28 == 4) {
                float v34 = v30;
              }
              else {
                float v34 = 1.0;
              }
              float v35 = v29 * v34;
              if (*v28 != 4) {
                float v33 = 1.0;
              }
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              int v26 = a1;
              goto LABEL_26;
            }
          }
          int v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *int v26 = v18;
        if (++v16 == 8) {
          return v14 + 1 == a2;
        }
      }
    }
    int16x8_t v13 = v14;
    v15 += 4;
    if (++v14 == a2) {
      return 1;
    }
  }
}

uint64_t sub_2484CBE6C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  if (a1) {
    unint64_t v7 = 16 * a2 * a3 + 100000;
  }
  else {
    unint64_t v7 = 100000;
  }
  sub_2484BFB04((uint64_t)a5, v7);
  uint64_t v8 = 0;
  uint64_t v9 = *a5;
  uint64_t v10 = a5[2];
  uint64_t v11 = a5[3];
  uint64_t v12 = a5[4] | (1 << v11);
  a5[3] = v11 + 1;
  a5[4] = v12;
  *(void *)(v9 + v10) = v12;
  unint64_t v13 = a5[3];
  uint64_t v14 = v13 & 7;
  unint64_t v15 = (unint64_t)a5[4] >> (v13 & 0xF8);
  unint64_t v16 = a5[2] + (v13 >> 3);
  uint64_t v17 = *a5;
  uint64_t v18 = v15 | (1 << v14);
  a5[2] = v16;
  a5[3] = v14 + 1;
  a5[4] = v18;
  *(void *)(v17 + v16) = v18;
  unint64_t v19 = a5[3];
  uint64_t v20 = v19 & 7;
  unint64_t v21 = (unint64_t)a5[4] >> (v19 & 0xF8);
  unint64_t v22 = a5[2] + (v19 >> 3);
  uint64_t v23 = *a5;
  a5[2] = v22;
  a5[3] = v20 + 1;
  a5[4] = v21;
  *(void *)(v23 + v22) = v21;
  unint64_t v24 = a5[3];
  uint64_t v25 = v24 & 7;
  unint64_t v26 = (unint64_t)a5[4] >> (v24 & 0xF8);
  unint64_t v27 = a5[2] + (v24 >> 3);
  uint64_t v28 = *a5;
  uint64_t v29 = v26 | (1 << v25);
  a5[2] = v27;
  a5[3] = v25 + 1;
  a5[4] = v29;
  *(void *)(v28 + v27) = v29;
  unint64_t v30 = a5[3];
  uint64_t v31 = v30 & 7;
  unint64_t v32 = (unint64_t)a5[4] >> (v30 & 0xF8);
  unint64_t v33 = a5[2] + (v30 >> 3);
  uint64_t v34 = *a5;
  a5[2] = v33;
  a5[3] = v31 + 2;
  a5[4] = v32;
  *(void *)(v34 + v33) = v32;
  unint64_t v35 = a5[3];
  uint64_t v36 = v35 & 7;
  unint64_t v37 = (unint64_t)a5[4] >> (v35 & 0xF8);
  unint64_t v38 = a5[2] + (v35 >> 3);
  uint64_t v39 = *a5;
  uint64_t v40 = v37 | (1 << v36);
  a5[2] = v38;
  a5[3] = v36 + 1;
  a5[4] = v40;
  *(void *)(v39 + v38) = v40;
  unint64_t v41 = a5[3];
  uint64_t v42 = v41 & 7;
  unint64_t v43 = (unint64_t)a5[4] >> (v41 & 0xF8);
  unint64_t v44 = a5[2] + (v41 >> 3);
  uint64_t v45 = *a5;
  a5[2] = v44;
  a5[3] = v42 + 4;
  a5[4] = v43;
  *(void *)(v45 + v44) = v43;
  unint64_t v46 = a5[3];
  uint64_t v47 = v46 & 7;
  unint64_t v48 = (unint64_t)a5[4] >> (v46 & 0xF8);
  unint64_t v49 = a5[2] + (v46 >> 3);
  uint64_t v50 = *a5;
  uint64_t v51 = v48 | (35 << v47);
  a5[2] = v49;
  a5[3] = v47 + 6;
  a5[4] = v51;
  *(void *)(v50 + v49) = v51;
  unint64_t v52 = a5[3];
  uint64_t v53 = v52 & 7;
  unint64_t v54 = (unint64_t)a5[4] >> (v52 & 0xF8);
  unint64_t v55 = a5[2] + (v52 >> 3);
  uint64_t v56 = *a5;
  uint64_t v57 = v54 | (1 << v53);
  a5[2] = v55;
  a5[3] = v53 + 2;
  a5[4] = v57;
  *(void *)(v56 + v55) = v57;
  unint64_t v58 = a5[3];
  unint64_t v59 = a5[2] + (v58 >> 3);
  uint64_t v60 = ((unint64_t)a5[4] >> (v58 & 0xF8)) | (3 << (v58 & 7));
  uint64_t v61 = *a5;
  a5[2] = v59;
  a5[3] = (v58 & 7) + 2;
  a5[4] = v60;
  *(void *)(v61 + v59) = v60;
  unint64_t v62 = a5[3];
  unint64_t v63 = (unint64_t)a5[4] >> (v62 & 0xF8);
  uint64_t v64 = v62 & 7;
  unint64_t v65 = a5[2] + (v62 >> 3);
  uint64_t v66 = *a5;
  a5[2] = v65;
  a5[3] = v64 + 2;
  a5[4] = v63;
  *(void *)(v66 + v65) = v63;
  unint64_t v67 = a5[3];
  unint64_t v68 = (unint64_t)a5[4] >> (v67 & 0xF8);
  uint64_t v69 = v67 & 7;
  unint64_t v70 = a5[2] + (v67 >> 3);
  uint64_t v71 = *a5;
  uint64_t v72 = v68 | (1 << v69);
  a5[2] = v70;
  a5[3] = v69 + 2;
  a5[4] = v72;
  *(void *)(v71 + v70) = v72;
  unint64_t v73 = a5[3];
  uint64_t v74 = v73 & 7;
  unint64_t v75 = (unint64_t)a5[4] >> (v73 & 0xF8);
  unint64_t v76 = a5[2] + (v73 >> 3);
  uint64_t v77 = *a5;
  uint64_t v78 = v75 | (2 << v74);
  a5[2] = v76;
  a5[3] = v74 + 2;
  a5[4] = v78;
  *(void *)(v77 + v76) = v78;
  unint64_t v79 = a5[3];
  uint64_t v80 = v79 & 7;
  unint64_t v81 = (unint64_t)a5[4] >> (v79 & 0xF8);
  unint64_t v82 = a5[2] + (v79 >> 3);
  uint64_t v83 = *a5;
  uint64_t v84 = v81 | (3 << v80);
  a5[2] = v82;
  a5[3] = v80 + 2;
  a5[4] = v84;
  *(void *)(v83 + v82) = v84;
  unint64_t v85 = a5[3];
  uint64_t v86 = v85 & 7;
  unint64_t v87 = (unint64_t)a5[4] >> (v85 & 0xF8);
  unint64_t v88 = a5[2] + (v85 >> 3);
  uint64_t v89 = *a5;
  a5[2] = v88;
  a5[3] = v86 + 1;
  a5[4] = v87;
  *(void *)(v89 + v88) = v87;
  unint64_t v90 = a5[3];
  uint64_t v91 = v90 & 7;
  unint64_t v92 = (unint64_t)a5[4] >> (v90 & 0xF8);
  unint64_t v93 = a5[2] + (v90 >> 3);
  a5[2] = v93;
  do
  {
    uint64_t v94 = dword_248551784[v8];
    uint64_t v95 = *a5;
    unint64_t v96 = v92 | ((unint64_t)byte_248551778[v94] << v91);
    a5[3] = v91 + byte_24855177E[v94];
    a5[4] = v96;
    *(void *)(v95 + v93) = v96;
    uint64_t v98 = a5[2];
    unint64_t v97 = a5[3];
    uint64_t v91 = v97 & 7;
    unint64_t v92 = (unint64_t)a5[4] >> (v97 & 0xF8);
    a5[3] = v91;
    a5[4] = v92;
    unint64_t v93 = v98 + (v97 >> 3);
    a5[2] = v93;
    ++v8;
  }
  while (v8 != 26);
  uint64_t v99 = *a5;
  uint64_t v100 = v92 | (1 << v91);
  a5[3] = v91 + 1;
  a5[4] = v100;
  *(void *)(v99 + v93) = v100;
  unint64_t v101 = a5[3];
  uint64_t v102 = v101 & 7;
  unint64_t v103 = (unint64_t)a5[4] >> (v101 & 0xF8);
  unint64_t v104 = a5[2] + (v101 >> 3);
  uint64_t v105 = *a5;
  a5[2] = v104;
  a5[3] = v102 + 2;
  a5[4] = v103;
  *(void *)(v105 + v104) = v103;
  unint64_t v106 = a5[3];
  uint64_t v107 = v106 & 7;
  unint64_t v108 = (unint64_t)a5[4] >> (v106 & 0xF8);
  unint64_t v109 = a5[2] + (v106 >> 3);
  uint64_t v110 = *a5;
  uint64_t v111 = v108 | (10 << v107);
  a5[2] = v109;
  a5[3] = v107 + 4;
  a5[4] = v111;
  *(void *)(v110 + v109) = v111;
  unint64_t v112 = a5[3];
  uint64_t v113 = v112 & 7;
  unint64_t v114 = (unint64_t)a5[4] >> (v112 & 0xF8);
  unint64_t v115 = a5[2] + (v112 >> 3);
  uint64_t v116 = *a5;
  uint64_t v117 = 4;
  uint64_t v118 = v114 | (4 << v113);
  a5[2] = v115;
  a5[3] = v113 + 4;
  a5[4] = v118;
  *(void *)(v116 + v115) = v118;
  unint64_t v119 = a5[3];
  uint64_t v120 = v119 & 7;
  unint64_t v121 = (unint64_t)a5[4] >> (v119 & 0xF8);
  unint64_t v122 = a5[2] + (v119 >> 3);
  uint64_t v123 = *a5;
  a5[2] = v122;
  a5[3] = v120 + 3;
  a5[4] = v121;
  *(void *)(v123 + v122) = v121;
  unint64_t v124 = a5[3];
  uint64_t v125 = v124 & 7;
  unint64_t v126 = (unint64_t)a5[4] >> (v124 & 0xF8);
  unint64_t v127 = a5[2] + (v124 >> 3);
  uint64_t v128 = *a5;
  a5[2] = v127;
  a5[3] = v125 + 3;
  a5[4] = v126;
  *(void *)(v128 + v127) = v126;
  unint64_t v129 = a5[3];
  uint64_t v130 = v129 & 7;
  unint64_t v131 = (unint64_t)a5[4] >> (v129 & 0xF8);
  unint64_t v132 = a5[2] + (v129 >> 3);
  uint64_t v133 = *a5;
  uint64_t v134 = v131 | (1 << v130);
  a5[2] = v132;
  a5[3] = v130 + 1;
  a5[4] = v134;
  *(void *)(v133 + v132) = v134;
  unint64_t v135 = a5[3];
  uint64_t v136 = v135 & 7;
  unint64_t v137 = (unint64_t)a5[4] >> (v135 & 0xF8);
  unint64_t v138 = a5[2] + (v135 >> 3);
  uint64_t v139 = *a5;
  uint64_t v140 = v137 | (3 << v136);
  a5[2] = v138;
  a5[3] = v136 + 2;
  a5[4] = v140;
  *(void *)(v139 + v138) = v140;
  unint64_t v141 = a5[3];
  uint64_t v142 = v141 & 7;
  unint64_t v143 = (unint64_t)a5[4] >> (v141 & 0xF8);
  unint64_t v144 = a5[2] + (v141 >> 3);
  uint64_t v145 = *a5;
  uint64_t v146 = v143 | (4 << v142);
  a5[2] = v144;
  a5[3] = v142 + 3;
  a5[4] = v146;
  *(void *)(v145 + v144) = v146;
  unint64_t v147 = a5[3];
  uint64_t v148 = v147 & 7;
  unint64_t v149 = (unint64_t)a5[4] >> (v147 & 0xF8);
  unint64_t v150 = a5[2] + (v147 >> 3);
  uint64_t v151 = *a5;
  uint64_t v152 = v149 | (3 << v148);
  a5[2] = v150;
  a5[3] = v148 + 3;
  a5[4] = v152;
  *(void *)(v151 + v150) = v152;
  unint64_t v153 = a5[3];
  uint64_t v154 = v153 & 7;
  unint64_t v155 = (unint64_t)a5[4] >> (v153 & 0xF8);
  unint64_t v156 = a5[2] + (v153 >> 3);
  uint64_t v157 = *a5;
  uint64_t v158 = v155 | (2 << v154);
  a5[2] = v156;
  a5[3] = v154 + 3;
  a5[4] = v158;
  *(void *)(v157 + v156) = v158;
  unint64_t v159 = a5[3];
  uint64_t v160 = v159 & 7;
  unint64_t v161 = (unint64_t)a5[4] >> (v159 & 0xF8);
  unint64_t v162 = a5[2] + (v159 >> 3);
  uint64_t v163 = *a5;
  uint64_t v164 = v161 | (1 << v160);
  a5[2] = v162;
  a5[3] = v160 + 3;
  a5[4] = v164;
  *(void *)(v163 + v162) = v164;
  unint64_t v165 = a5[3];
  uint64_t v166 = v165 & 7;
  unint64_t v167 = (unint64_t)a5[4] >> (v165 & 0xF8);
  unint64_t v168 = a5[2] + (v165 >> 3);
  uint64_t v169 = *a5;
  a5[2] = v168;
  a5[3] = v166 + 3;
  a5[4] = v167;
  *(void *)(v169 + v168) = v167;
  unint64_t v170 = a5[3];
  uint64_t v171 = v170 & 7;
  unint64_t v172 = (unint64_t)a5[4] >> (v170 & 0xF8);
  unint64_t v173 = a5[2] + (v170 >> 3);
  uint64_t v174 = *a5;
  uint64_t v175 = v172 | (1 << v171);
  a5[2] = v173;
  a5[3] = v171 + 1;
  a5[4] = v175;
  *(void *)(v174 + v173) = v175;
  unint64_t v176 = a5[3];
  uint64_t v177 = v176 & 7;
  unint64_t v178 = (unint64_t)a5[4] >> (v176 & 0xF8);
  unint64_t v179 = a5[2] + (v176 >> 3);
  uint64_t v180 = *a5;
  a5[2] = v179;
  a5[3] = v177 + 4;
  a5[4] = v178;
  *(void *)(v180 + v179) = v178;
  uint64_t v182 = a5[2];
  unint64_t v181 = a5[3];
  uint64_t v183 = v181 & 7;
  unint64_t v184 = (unint64_t)a5[4] >> (v181 & 0xF8);
  a5[4] = v184;
  uint64_t v185 = v182 + (v181 >> 3);
  a5[2] = v185;
  do
  {
    uint64_t v186 = *a5;
    a5[3] = v183 + 4;
    *(void *)(v186 + v185) = v184;
    uint64_t v188 = a5[2];
    unint64_t v187 = a5[3];
    unint64_t v184 = (unint64_t)a5[4] >> (v187 & 0xF8);
    uint64_t v183 = v187 & 7;
    a5[3] = v183;
    a5[4] = v184;
    uint64_t v185 = v188 + (v187 >> 3);
    a5[2] = v185;
    --v117;
  }
  while (v117);
  uint64_t v189 = *a5;
  uint64_t v190 = v184 | (1 << v183);
  a5[3] = v183 + 5;
  a5[4] = v190;
  *(void *)(v189 + v185) = v190;
  unint64_t v191 = a5[3];
  uint64_t v192 = v191 & 7;
  unint64_t v193 = (unint64_t)a5[4] >> (v191 & 0xF8);
  unint64_t v194 = a5[2] + (v191 >> 3);
  a5[2] = v194;
  uint64_t v195 = 4;
  do
  {
    uint64_t v196 = *a5;
    uint64_t v197 = v193 | (1 << v192);
    a5[3] = v192 + 1;
    a5[4] = v197;
    *(void *)(v196 + v194) = v197;
    unint64_t v198 = a5[3];
    uint64_t v199 = v198 & 7;
    unint64_t v200 = (unint64_t)a5[4] >> (v198 & 0xF8);
    unint64_t v201 = a5[2] + (v198 >> 3);
    uint64_t v202 = *a5;
    uint64_t v203 = v200 | (8 << v199);
    a5[2] = v201;
    a5[3] = v199 + 4;
    a5[4] = v203;
    *(void *)(v202 + v201) = v203;
    unint64_t v204 = a5[3];
    unint64_t v205 = a5[2] + (v204 >> 3);
    uint64_t v206 = *a5;
    uint64_t v207 = ((unint64_t)a5[4] >> (v204 & 0xF8)) | (256 << (v204 & 7));
    a5[2] = v205;
    a5[3] = v204 & 7 | 8;
    a5[4] = v207;
    *(void *)(v206 + v205) = v207;
    uint64_t v209 = a5[2];
    unint64_t v208 = a5[3];
    uint64_t v192 = v208 & 7;
    unint64_t v193 = (unint64_t)a5[4] >> (v208 & 0xF8);
    a5[3] = v192;
    a5[4] = v193;
    unint64_t v194 = v209 + (v208 >> 3);
    a5[2] = v194;
    --v195;
  }
  while (v195);
  uint64_t v210 = 0;
  uint64_t v211 = *a5;
  uint64_t v212 = v193 | (1 << v192);
  a5[3] = v192 + 2;
  a5[4] = v212;
  *(void *)(v211 + v194) = v212;
  unint64_t v213 = a5[3];
  uint64_t v214 = v213 & 7;
  unint64_t v215 = (unint64_t)a5[4] >> (v213 & 0xF8);
  unint64_t v216 = a5[2] + (v213 >> 3);
  uint64_t v217 = *a5;
  a5[2] = v216;
  a5[3] = v214 + 2;
  a5[4] = v215;
  *(void *)(v217 + v216) = v215;
  unint64_t v218 = a5[3];
  uint64_t v219 = v218 & 7;
  unint64_t v220 = (unint64_t)a5[4] >> (v218 & 0xF8);
  unint64_t v221 = a5[2] + (v218 >> 3);
  uint64_t v222 = *a5;
  uint64_t v223 = v220 | (1 << v219);
  a5[2] = v221;
  a5[3] = v219 + 1;
  a5[4] = v223;
  *(void *)(v222 + v221) = v223;
  unint64_t v224 = a5[3];
  LOBYTE(v222) = v224 & 0xF8;
  unint64_t v225 = a5[2] + (v224 >> 3);
  unint64_t v226 = (unint64_t)a5[4] >> v222;
  a5[3] &= 7uLL;
  a5[4] = v226;
  a5[2] = v225;
  do
  {
    uint64_t v227 = 0;
    memset(v326, 0, sizeof(v326));
    uint64_t v327 = 0;
    uint64_t v328 = 67;
    do
      ++*((void *)v326 + *(unsigned __int8 *)(a4 + v227++));
    while (v227 != 19);
    uint64_t v319 = v210;
    for (uint64_t i = 38; i != 71; ++i)
      ++*((void *)v326 + *(unsigned __int8 *)(a4 + i));
    v324[0] = 0;
    v324[1] = 0;
    __int16 v325 = 0;
    v322[0] = 0;
    v322[1] = 0;
    __int16 v323 = 0;
    sub_2484C48D4(v326, 18, v322, byte_2485517EC, v324);
    uint64_t v229 = *a5;
    uint64_t v230 = a5[2];
    uint64_t v231 = a5[4];
    a5[3] += 2;
    *(void *)(v229 + v230) = v231;
    uint64_t v233 = a5[2];
    unint64_t v232 = a5[3];
    uint64_t v234 = v232 & 7;
    unint64_t v235 = (unint64_t)a5[4] >> (v232 & 0xF8);
    a5[3] = v234;
    a5[4] = v235;
    uint64_t v236 = v233 + (v232 >> 3);
    a5[2] = v236;
    uint64_t v237 = 18;
    uint64_t v238 = 0x11u;
    do
    {
      uint64_t v239 = v238;
      uint64_t v240 = v237;
      int v241 = *((unsigned __int8 *)v324 + byte_2485517FE[v238--]);
      --v237;
    }
    while (!v241);
    if (v239 != -1)
    {
      uint64_t v242 = byte_2485517FE;
      do
      {
        unsigned int v243 = *v242++;
        uint64_t v244 = *((unsigned __int8 *)v324 + v243);
        uint64_t v245 = byte_248551810[v244];
        uint64_t v246 = *a5;
        unint64_t v247 = ((unint64_t)byte_248551816[v244] << v234) | v235;
        a5[3] = v234 + v245;
        a5[4] = v247;
        *(void *)(v246 + v236) = v247;
        uint64_t v249 = a5[2];
        unint64_t v248 = a5[3];
        uint64_t v234 = v248 & 7;
        unint64_t v235 = (unint64_t)a5[4] >> (v248 & 0xF8);
        a5[3] = v234;
        a5[4] = v235;
        uint64_t v236 = v249 + (v248 >> 3);
        a5[2] = v236;
        --v240;
      }
      while (v240);
    }
    int v321 = 0;
    memset(v320, 0, sizeof(v320));
    uint64_t result = sub_2484C4D48(0, 0, 0, (unsigned __int8 *)v324, v320, 18);
    for (uint64_t j = 0; j != 19; ++j)
    {
      uint64_t v252 = *(unsigned __int8 *)(a4 + j);
      uint64_t v253 = *((unsigned __int8 *)v324 + v252);
      uint64_t v254 = *a5;
      unint64_t v255 = ((unint64_t)*((unsigned __int16 *)v320 + v252) << v234) | v235;
      a5[3] = v234 + v253;
      a5[4] = v255;
      *(void *)(v254 + v236) = v255;
      uint64_t v257 = a5[2];
      unint64_t v256 = a5[3];
      uint64_t v234 = v256 & 7;
      unint64_t v235 = (unint64_t)a5[4] >> (v256 & 0xF8);
      a5[3] = v234;
      a5[4] = v235;
      uint64_t v236 = v257 + (v256 >> 3);
      a5[2] = v236;
    }
    uint64_t v258 = 33;
    uint64_t v259 = 70;
    do
    {
      uint64_t v260 = v259;
      uint64_t v261 = v258;
      int v262 = *(unsigned __int8 *)(a4 + v259--);
      --v258;
    }
    while (!v262);
    uint64_t v263 = HIBYTE(v325);
    uint64_t v264 = HIWORD(v321);
    uint64_t v265 = *a5;
    unint64_t v266 = ((unint64_t)HIWORD(v321) << v234) | v235;
    a5[3] = v234 + HIBYTE(v325);
    a5[4] = v266;
    *(void *)(v265 + v236) = v266;
    unint64_t v267 = a5[3];
    uint64_t v268 = v267 & 7;
    unint64_t v269 = (unint64_t)a5[4] >> (v267 & 0xF8);
    unint64_t v270 = a5[2] + (v267 >> 3);
    uint64_t v271 = *a5;
    uint64_t v272 = v269 | (2 << v268);
    a5[2] = v270;
    a5[3] = v268 + 3;
    a5[4] = v272;
    *(void *)(v271 + v270) = v272;
    unint64_t v273 = a5[3];
    uint64_t v274 = v273 & 7;
    unint64_t v275 = (unint64_t)a5[4] >> (v273 & 0xF8);
    unint64_t v276 = a5[2] + (v273 >> 3);
    uint64_t v277 = *a5;
    uint64_t v278 = v275 | (v264 << v274);
    a5[2] = v276;
    a5[3] = v274 + v263;
    a5[4] = v278;
    *(void *)(v277 + v276) = v278;
    unint64_t v279 = a5[3];
    uint64_t v280 = v279 & 7;
    unint64_t v281 = (unint64_t)a5[4] >> (v279 & 0xF8);
    unint64_t v282 = a5[2] + (v279 >> 3);
    uint64_t v283 = *a5;
    a5[2] = v282;
    a5[3] = v280 + 3;
    a5[4] = v281;
    *(void *)(v283 + v282) = v281;
    unint64_t v284 = a5[3];
    uint64_t v285 = v284 & 7;
    unint64_t v286 = (unint64_t)a5[4] >> (v284 & 0xF8);
    unint64_t v287 = a5[2] + (v284 >> 3);
    uint64_t v288 = *a5;
    uint64_t v289 = v286 | (v264 << v285);
    a5[2] = v287;
    a5[3] = v285 + v263;
    a5[4] = v289;
    *(void *)(v288 + v287) = v289;
    unint64_t v290 = a5[3];
    uint64_t v291 = v290 & 7;
    unint64_t v292 = (unint64_t)a5[4] >> (v290 & 0xF8);
    unint64_t v293 = a5[2] + (v290 >> 3);
    uint64_t v294 = *a5;
    uint64_t v295 = v292 | (2 << v291);
    a5[2] = v293;
    a5[3] = v291 + 3;
    a5[4] = v295;
    *(void *)(v294 + v293) = v295;
    uint64_t v297 = a5[2];
    unint64_t v296 = a5[3];
    uint64_t v298 = v296 & 7;
    unint64_t v299 = (unint64_t)a5[4] >> (v296 & 0xF8);
    a5[3] = v298;
    a5[4] = v299;
    uint64_t v300 = v297 + (v296 >> 3);
    a5[2] = v300;
    if (v260 == 37)
    {
      uint64_t v302 = v319;
    }
    else
    {
      uint64_t v301 = 38;
      uint64_t v302 = v319;
      do
      {
        uint64_t v303 = *(unsigned __int8 *)(a4 + v301);
        uint64_t v304 = *a5;
        unint64_t v305 = ((unint64_t)*((unsigned __int16 *)v320 + v303) << v298) | v299;
        a5[3] = v298 + *((unsigned __int8 *)v324 + v303);
        a5[4] = v305;
        *(void *)(v304 + v300) = v305;
        uint64_t v307 = a5[2];
        unint64_t v306 = a5[3];
        uint64_t v298 = v306 & 7;
        unint64_t v299 = (unint64_t)a5[4] >> (v306 & 0xF8);
        a5[3] = v298;
        a5[4] = v299;
        uint64_t v300 = v307 + (v306 >> 3);
        a5[2] = v300;
        ++v301;
        --v261;
      }
      while (v261);
    }
    uint64_t v210 = v302 + 1;
    a4 += 440;
  }
  while (v210 != 4);
  uint64_t v308 = *a5;
  uint64_t v309 = v299 | (1 << v298);
  a5[3] = v298 + 1;
  a5[4] = v309;
  *(void *)(v308 + v300) = v309;
  unint64_t v310 = a5[3];
  uint64_t v311 = v310 & 7;
  unint64_t v312 = (unint64_t)a5[4] >> (v310 & 0xF8);
  unint64_t v313 = a5[2] + (v310 >> 3);
  uint64_t v314 = *a5;
  uint64_t v315 = v312 | (1 << v311);
  a5[2] = v313;
  a5[3] = v311 + 1;
  a5[4] = v315;
  *(void *)(v314 + v313) = v315;
  uint64_t v317 = a5[2];
  unint64_t v316 = a5[3];
  unint64_t v318 = (unint64_t)a5[4] >> (v316 & 0xF8);
  a5[3] = v316 & 7;
  a5[4] = v318;
  a5[2] = v317 + (v316 >> 3);
  return result;
}

uint64_t sub_2484CCB5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    unint64_t v13 = (int8x16_t **)result;
    unint64_t v14 = 0;
    int8x16_t v15 = (int8x16_t)xmmword_2484DD030;
    v16.i64[0] = 0x8000800080008;
    v16.i64[1] = 0x8000800080008;
    long long v74 = xmmword_2484DD030;
    while (1)
    {
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      memset(var10, 0, sizeof(var10));
      char v19 = 1;
      do
      {
        int16x8_t v20 = *(int16x8_t *)(a3 + 2 * v14 + 2 * v17);
        int16x8_t v21 = *(int16x8_t *)(a4 + 2 * v14 + 2 * v17);
        int16x8_t v22 = *(int16x8_t *)(a5 + 2 * v14 + 2 * v17);
        int16x8_t v23 = vsubq_s16(v20, v22);
        int8x16_t v24 = (int8x16_t)vsubq_s16(v21, v22);
        int8x16_t v25 = (int8x16_t)vaddq_s16(v23, v21);
        int8x16_t v26 = (int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v24, (int8x16_t)vsubq_s16(v20, v21)));
        int16x8_t v27 = (int16x8_t)veorq_s8((int8x16_t)v23, v24);
        int8x16_t v28 = vbslq_s8(v26, (int8x16_t)v21, (int8x16_t)v20);
        int8x16_t v29 = (int8x16_t)vcltzq_s16(v27);
        int16x8_t v30 = vsubq_s16(*(int16x8_t *)(a2 + 2 * v14 + 2 * v17), (int16x8_t)vbslq_s8(v29, v25, v28));
        char v31 = v19;
        int16x8_t v32 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v30, v30), (int8x16_t)vcltzq_s16(v30));
        uint16x8_t v33 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v32), v16, v15);
        v33.i16[0] = vminvq_u16(v33);
        var10[v17 / 8] = v32;
        if (v18 == v17) {
          uint64_t v34 = v33.u32[0];
        }
        else {
          uint64_t v34 = 0;
        }
        v18 += v34;
        unint64_t v17 = 8;
        char v19 = 0;
      }
      while ((v31 & 1) != 0);
      if (a6 - v14 >= 0x10) {
        unint64_t v35 = 16;
      }
      else {
        unint64_t v35 = a6 - v14;
      }
      uint64_t v36 = v13[1];
      if (v18 >= v35) {
        unint64_t v37 = v35;
      }
      else {
        unint64_t v37 = v18;
      }
      if (v18 < v35) {
        goto LABEL_21;
      }
      if (v37 <= 7 && v36 == 0) {
        break;
      }
      v13[1] = (int8x16_t *)((char *)v36 + v37);
LABEL_37:
      v14 += 16;
      if (v14 >= a6) {
        return result;
      }
    }
    uint64_t v36 = 0;
LABEL_21:
    unint64_t v39 = (unint64_t)v36->u64 + v37;
    uint64_t v40 = *v13;
    unint64_t v41 = v39 - 8;
    if (v39 < 8)
    {
      uint64_t result = sub_2484CCF60((uint64_t)var10, v35, 0, (void *)v40->i64[1], v40[4], v40[8], a5, a6, a7, a8, v29, (int8x16_t)v27, (int8x16_t)v23, v26, v25, v69, v70, v71, v72,
                 (uint64x2_t)v15,
                 v73,
                 v74,
                 *((uint64_t *)&v74 + 1));
      v16.i64[0] = 0x8000800080008;
      v16.i64[1] = 0x8000800080008;
      int8x16_t v15 = (int8x16_t)v74;
    }
    else
    {
      unint64_t v43 = (unsigned __int8 *)v40->i64[0];
      uint64_t v42 = (unsigned __int8 *)v40->i64[1];
      if (v41 > 0x1F)
      {
        unsigned int v54 = 31 - __clz(v41);
        if (!v41) {
          unsigned int v54 = 0;
        }
        LODWORD(v55) = v54 + 12;
        BOOL v56 = v41 >= 0x10;
        if (v41 >= 0x10) {
          uint64_t v55 = v55;
        }
        else {
          uint64_t v55 = v41;
        }
        if (v41 < 0x10) {
          unsigned int v54 = 0;
        }
        LODWORD(v41) = (-1 << v54) + v41;
        if (v56) {
          unint64_t v41 = v41;
        }
        else {
          unint64_t v41 = 0;
        }
        int v57 = v43[v55 + 38];
        unint64_t v58 = (v41 << v57) | *(unsigned __int16 *)&v43[2 * v55 + 72];
        int v59 = *v43;
        unint64_t v60 = (v58 << v59) | v43[19];
        uint64_t v61 = v54 + v59 + v57;
        uint64_t v62 = *(void *)v42;
        uint64_t v47 = v42 + 16;
        uint64_t v63 = *((void *)v42 + 2);
        unint64_t v49 = (unint64_t *)(v42 + 24);
        uint64_t v64 = *((void *)v42 + 3);
        uint64_t v65 = *((void *)v42 + 4);
        uint64_t v51 = v42 + 32;
        unint64_t v66 = v65 | (v60 << v64);
        *uint64_t v51 = v66;
        *unint64_t v49 = v64 + v61;
        *(void *)(v62 + v63) = v66;
      }
      else
      {
        uint64_t v44 = v43[v41 + 400];
        uint64_t v45 = *(void *)&v43[8 * v41 + 144];
        uint64_t v46 = *(void *)v42;
        uint64_t v47 = v42 + 16;
        uint64_t v48 = *((void *)v42 + 2);
        unint64_t v49 = (unint64_t *)(v42 + 24);
        uint64_t v50 = *((void *)v42 + 3);
        uint64_t v52 = *((void *)v42 + 4);
        uint64_t v51 = v42 + 32;
        uint64_t v53 = v52 | (v45 << v50);
        *uint64_t v51 = v53;
        *unint64_t v49 = v50 + v44;
        *(void *)(v46 + v48) = v53;
      }
      unint64_t v67 = *v49;
      unint64_t v68 = *v49 & 0xFFFFFFFFFFFFFFF8;
      *v49 &= 7uLL;
      *v51 >>= v68;
      *v47 += v67 >> 3;
      uint64_t result = sub_2484CCF60((uint64_t)var10, v35, v37, (void *)v40->i64[1], v40[4], v40[8], a5, a6, a7, a8, v29, (int8x16_t)v27, (int8x16_t)v23, v26, v25, v69, v70, v71, v72,
                 (uint64x2_t)v15,
                 v73,
                 v74,
                 *((uint64_t *)&v74 + 1));
      v13[1] = 0;
      int8x16_t v15 = (int8x16_t)v74;
      v16.i64[0] = 0x8000800080008;
      v16.i64[1] = 0x8000800080008;
    }
    goto LABEL_37;
  }
  return result;
}

unsigned __int8 *sub_2484CCE4C(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 - 8;
    if ((unint64_t)(a3 - 8) > 0x1F)
    {
      unsigned int v14 = 31 - __clz(v3);
      if (a3 == 8) {
        unsigned int v14 = 0;
      }
      LODWORD(v15) = v14 + 12;
      BOOL v16 = v3 >= 0x10;
      if (v3 >= 0x10) {
        uint64_t v15 = v15;
      }
      else {
        uint64_t v15 = v3;
      }
      if (v3 < 0x10) {
        unsigned int v14 = 0;
      }
      LODWORD(v3) = (-1 << v14) + v3;
      if (v16) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = 0;
      }
      int v17 = result[v15 + 38];
      uint64_t v18 = (v3 << v17) | *(unsigned __int16 *)&result[2 * v15 + 72];
      int v19 = *result;
      uint64_t v20 = (v18 << v19) | result[19];
      uint64_t v21 = v14 + v19 + v17;
      uint64_t v22 = *a2;
      unint64_t v7 = a2 + 2;
      uint64_t v23 = a2[2];
      uint64_t v9 = (unint64_t *)(a2 + 3);
      uint64_t v24 = a2[3];
      uint64_t v25 = a2[4];
      uint64_t v11 = a2 + 4;
      uint64_t v26 = v25 | (v20 << v24);
      *uint64_t v11 = v26;
      *uint64_t v9 = v24 + v21;
      *(void *)(v22 + v23) = v26;
    }
    else
    {
      uint64_t v4 = result[v3 + 400];
      uint64_t v5 = *(void *)&result[8 * v3 + 144];
      uint64_t v6 = *a2;
      unint64_t v7 = a2 + 2;
      uint64_t v8 = a2[2];
      uint64_t v9 = (unint64_t *)(a2 + 3);
      uint64_t v10 = a2[3];
      uint64_t v12 = a2[4];
      uint64_t v11 = a2 + 4;
      uint64_t v13 = v12 | (v5 << v10);
      *uint64_t v11 = v13;
      *uint64_t v9 = v10 + v4;
      *(void *)(v6 + v8) = v13;
    }
    unint64_t v27 = *v9;
    unint64_t v28 = *v9 & 0xFFFFFFFFFFFFFFF8;
    *v9 &= 7uLL;
    *uint64_t v11 = (unint64_t)*v11 >> v28;
    *v7 += v27 >> 3;
  }
  return result;
}

uint64_t sub_2484CCF60(uint64_t result, unint64_t a2, unint64_t a3, void *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64x2_t a20,uint64x2_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v23 = 0;
  a23 = *MEMORY[0x263EF8340];
  char v24 = 1;
  v25.i64[0] = 0x10001000100010;
  v25.i64[1] = 0x10001000100010;
  v26.i64[0] = 0x1000100010001;
  v26.i64[1] = 0x1000100010001;
  v27.i64[0] = 0xFFFF0000FFFFLL;
  v27.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    char v28 = v24;
    int16x8_t v29 = *(int16x8_t *)(result + 2 * v23);
    uint16x8_t v30 = (uint16x8_t)vsubq_s16(v25, vclzq_s16(v29));
    int16x8_t v31 = (int16x8_t)vqsubq_u16(v30, v26);
    uint16x8_t v32 = vqsubq_u16((uint16x8_t)v29, vshlq_u16(v26, (uint16x8_t)v31));
    unsigned long long v33 = *(_OWORD *)&v30 | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    int16x8_t v34 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v33);
    int8x16_t v35 = vqtbl1q_s8(a6, (int8x16_t)v33);
    unint64_t v36 = a2 - v23;
    if (a2 < v23) {
      unint64_t v36 = 0;
    }
    unint64_t v37 = a3 - v23;
    if (a3 < v23) {
      unint64_t v37 = 0;
    }
    unint64_t v38 = (int8x16_t *)((char *)&vars0 + 4 * v23);
    int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_u16(v32, (uint16x8_t)v34), v35);
    int8x16_t v40 = (int8x16_t)vaddq_s16(v31, v34);
    if (v36 >= 8) {
      unint64_t v36 = 8;
    }
    int8x16_t v41 = *(int8x16_t *)((char *)&unk_24855181C - 2 * v36 + 16);
    if (v37 >= 8) {
      uint64_t v42 = 8;
    }
    else {
      uint64_t v42 = v37;
    }
    int8x16_t v43 = vandq_s8(v41, *(int8x16_t *)((char *)&unk_24855183C - 2 * v42 + 16));
    int8x16_t v44 = vandq_s8(v43, v40);
    int8x16_t v45 = vandq_s8(v43, v39);
    uint32x4_t v46 = (uint32x4_t)vandq_s8(v44, v27);
    *(uint32x4_t *)unint64_t v38 = vsraq_n_u32(v46, (uint32x4_t)v44, 0x10uLL);
    v38[1] = vorrq_s8(vandq_s8(v45, v27), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v45, 0x10uLL), v46));
    unint64_t v23 = 8;
    char v24 = 0;
  }
  while ((v28 & 1) != 0);
  uint64_t v47 = 0;
  v48.i64[0] = 0xFFFFFFFFLL;
  v48.i64[1] = 0xFFFFFFFFLL;
  uint64x2_t v49 = (uint64x2_t)vandq_s8(vars0, v48);
  uint64x2_t v50 = (uint64x2_t)vandq_s8(a12, v48);
  a20 = vsraq_n_u64(v49, (uint64x2_t)vars0, 0x20uLL);
  a21 = vsraq_n_u64(v50, (uint64x2_t)a12, 0x20uLL);
  a14 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a11, 0x20uLL), v49), vandq_s8(a11, v48));
  a15 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a13, 0x20uLL), v50), vandq_s8(a13, v48));
  unint64_t v51 = a4[3];
  do
  {
    unint64_t v52 = a14.u64[v47];
    unint64_t v53 = a4[4] | (v52 << v51);
    a4[4] = v53;
    *(void *)(*a4 + a4[2]) = v53;
    uint64_t v54 = a4[3];
    unint64_t v51 = a20.i64[v47] + v54;
    a4[3] = v51;
    if (v51 >= 0x40)
    {
      a4[3] = v51 - 64;
      a4[4] = v52 >> -(char)v54;
      a4[2] += 8;
      LOBYTE(v51) = v51 - 64;
    }
    ++v47;
  }
  while (v47 != 4);
  *(void *)(*a4 + a4[2]) = a4[4];
  uint64_t v56 = a4[2];
  unint64_t v55 = a4[3];
  a4[4] >>= v55 & 0xF8;
  a4[2] = v56 + (v55 >> 3);
  a4[3] = v55 & 7;
  return result;
}

uint64_t sub_2484CD15C(char a1, unsigned int a2)
{
  return (unsigned __int16)((*(_WORD *)&asc_24855174C[2 * (a2 >> 4) + 12] << 8) | (*(_WORD *)&asc_24855174C[2 * (a2 & 0xF) + 12] << 12) | (16 * *(_WORD *)&asc_24855174C[2 * ((a2 >> 8) & 0xF) + 12]) | *(_WORD *)&asc_24855174C[2 * (a2 >> 12) + 12]) >> (16 - a1);
}

const char *sub_2484CD1A8(const char *result, unint64_t a2, int16x8_t *a3, _OWORD *a4, _OWORD *a5)
{
  if (a2 >= 8)
  {
    uint64_t v6 = 0;
    unint64_t v7 = result;
    uint64_t v8 = a3;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      int8x8x3_t v23 = vld3_s8(v7);
      v7 += 24;
      *(uint16x8_t *)v23.val[0].i8 = vsubl_u8((uint8x8_t)v23.val[0], (uint8x8_t)v23.val[2]);
      int16x8_t v11 = vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v23.val[2]), *(int16x8_t *)v23.val[0].i8, 1uLL);
      *(int16x8_t *)v23.val[1].i8 = vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v23.val[1]), v11);
      *v8++ = vsraq_n_s16(v11, *(int16x8_t *)v23.val[1].i8, 1uLL);
      *v9++ = *(_OWORD *)v23.val[0].i8;
      *v10++ = *(_OWORD *)v23.val[1].i8;
      unint64_t v5 = v6 + 8;
      unint64_t v12 = v6 + 16;
      v6 += 8;
    }
    while (v12 <= a2);
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v13 = a2 - v5;
  if (a2 > v5)
  {
    unsigned int v14 = (_WORD *)a5 + v5;
    uint64_t v15 = (_WORD *)a4 + v5;
    BOOL v16 = &a3->i16[v5];
    int v17 = &result[3 * v5 + 1];
    do
    {
      int v18 = *(unsigned __int8 *)v17;
      int v19 = *((unsigned __int8 *)v17 + 1);
      int v20 = *((unsigned __int8 *)v17 - 1) - v19;
      *v15++ = v20;
      int v21 = v19 + (v20 >> 1);
      unsigned int v22 = v18 - v21;
      *v14++ = v22;
      *v16++ = v21 + (v22 >> 1);
      v17 += 3;
      --v13;
    }
    while (v13);
  }
  return result;
}

const char *sub_2484CD260(const char *result, unint64_t a2, int16x8_t *a3, _OWORD *a4, _OWORD *a5, uint16x8_t *a6)
{
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    uint64_t v9 = a3;
    uint64_t v10 = a4;
    int16x8_t v11 = a5;
    unint64_t v12 = a6;
    do
    {
      int8x8x4_t v27 = vld4_s8(v8);
      v8 += 32;
      *(uint16x8_t *)v27.val[0].i8 = vsubl_u8((uint8x8_t)v27.val[0], (uint8x8_t)v27.val[2]);
      int16x8_t v13 = vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[2]), *(int16x8_t *)v27.val[0].i8, 1uLL);
      *(int16x8_t *)v27.val[1].i8 = vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[1]), v13);
      *v9++ = vsraq_n_s16(v13, *(int16x8_t *)v27.val[1].i8, 1uLL);
      *v10++ = *(_OWORD *)v27.val[0].i8;
      *v11++ = *(_OWORD *)v27.val[1].i8;
      *v12++ = vmovl_u8((uint8x8_t)v27.val[3]);
      unint64_t v6 = v7 + 8;
      unint64_t v14 = v7 + 16;
      v7 += 8;
    }
    while (v14 <= a2);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v15 = a2 - v6;
  if (a2 > v6)
  {
    BOOL v16 = &a6->i16[v6];
    int v17 = (_WORD *)a5 + v6;
    int v18 = (_WORD *)a4 + v6;
    int v19 = &result[4 * v6 + 1];
    int v20 = &a3->i16[v6];
    do
    {
      int v21 = *(unsigned __int8 *)v19;
      int v22 = *((unsigned __int8 *)v19 + 1);
      __int16 v23 = *((unsigned __int8 *)v19 + 2);
      int v24 = *((unsigned __int8 *)v19 - 1) - v22;
      *v18++ = v24;
      int v25 = v22 + (v24 >> 1);
      unsigned int v26 = v21 - v25;
      *v17++ = v26;
      *v20++ = v25 + (v26 >> 1);
      *v16++ = v23;
      v19 += 4;
      --v15;
    }
    while (v15);
  }
  return result;
}

BOOL sub_2484CD32C(unsigned int *a1, unsigned int *a2, void **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        unsigned int v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((int v10 = *a1,
               float v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (float v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (float v11 = v11 * (float)HIBYTE(v8),
               float v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_2484CA404(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_2484CA890(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2484CABF0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int16x8_t v13 = a1 + 2;
      sub_2484CA404(a1, a1 + 1, a1 + 2, *a3);
      unint64_t v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      int v17 = *a3;
      break;
  }
  while (1)
  {
    unsigned int v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      int v19 = HIBYTE(v18);
      int v20 = *v14;
      unsigned int v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((float v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             float v23 = (float)*v13,
             float v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (float v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (float v22 = v22 * (float)v19,
             float v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *unint64_t v14 = v21;
        unsigned int v26 = a1;
        if (v13 != a1)
        {
          float v27 = (float)v20;
          char v28 = *a3;
          float v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          float v30 = (float)v19;
          uint64_t v31 = v15;
          while (1)
          {
            unsigned int v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              float v33 = (float)HIBYTE(v32);
              if (*v28 == 4) {
                float v34 = v30;
              }
              else {
                float v34 = 1.0;
              }
              float v35 = v29 * v34;
              if (*v28 != 4) {
                float v33 = 1.0;
              }
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              unsigned int v26 = a1;
              goto LABEL_26;
            }
          }
          unsigned int v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *unsigned int v26 = v18;
        if (++v16 == 8) {
          return v14 + 1 == a2;
        }
      }
    }
    int16x8_t v13 = v14;
    v15 += 4;
    if (++v14 == a2) {
      return 1;
    }
  }
}

void sub_2484CD738(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4), void *a5)
{
  if (a4) {
    unsigned int v8 = a4;
  }
  else {
    unsigned int v8 = sub_2484D1C24;
  }
  uint64_t v151 = v8;
  unsigned int v9 = *(void **)(a1 + 104);
  if ((unint64_t)v9 > 8)
  {
    if ((unint64_t)v9 > 0xD)
    {
      if (v9 == (void *)14)
      {
        unint64_t v173 = (void *)a1;
        if (!*(unsigned char *)(a1 + 2048))
        {
          uint64_t v34 = *(void *)(a1 + 1984) - *(void *)(a1 + 1976);
          BOOL v56 = v34 == 8;
          BOOL v35 = v34 != 8;
          char v36 = v56;
          char v171 = v36;
          BOOL v37 = a5 != 0;
          int v38 = v37 && v35;
          BOOL v56 = !v37 || !v35;
          BOOL v170 = v37 && v35;
          uint64_t v39 = *(void *)(a1 + 72);
          unint64_t v40 = v39 * *(void *)(a1 + 64);
          if (v56) {
            unint64_t v41 = v39 * *(void *)(a1 + 64);
          }
          else {
            unint64_t v41 = 16;
          }
          if (v38)
          {
            uint64_t v42 = a5[5];
            uint64_t v43 = *(void *)(a1 + 2000) + v42;
            int8x16_t v44 = (void *)a5[9];
            if (v44)
            {
              int8x16_t v45 = (void (*)(void, uint64_t))v44[3];
              if (v45)
              {
                v45(*v44, v43);
                a5[7] = v43;
              }
            }
            a5[5] = v43;
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v172 = 0;
          if (v40)
          {
            uint64_t v149 = v42;
            for (uint64_t i = 0; (unint64_t)i < v40; v172 = i)
            {
              for (uint64_t j = 0; j != 220; j += 55)
              {
                uint64_t v100 = &v158[j];
                *((_WORD *)v100 + 132) = 0;
                *(_OWORD *)(v100 + 31) = 0uLL;
                *(_OWORD *)(v100 + 29) = 0uLL;
                *(_OWORD *)(v100 + 27) = 0uLL;
                *(_OWORD *)(v100 + 25) = 0uLL;
                *((_OWORD *)v100 + 8) = 0uLL;
                *((_OWORD *)v100 + 9) = 0uLL;
                *((_OWORD *)v100 + 10) = 0uLL;
                *((_OWORD *)v100 + 11) = 0uLL;
                *(void *)((char *)v100 + 191) = 0;
                *((_OWORD *)v100 + 17) = 0uLL;
                *((_OWORD *)v100 + 18) = 0uLL;
                *((_OWORD *)v100 + 19) = 0uLL;
                *((_OWORD *)v100 + 20) = 0uLL;
                *((_OWORD *)v100 + 21) = 0uLL;
                *((_OWORD *)v100 + 22) = 0uLL;
                *((_OWORD *)v100 + 23) = 0uLL;
                *((_OWORD *)v100 + 24) = 0uLL;
                *((_OWORD *)v100 + 25) = 0uLL;
                *((_OWORD *)v100 + 26) = 0uLL;
                *((_OWORD *)v100 + 27) = 0uLL;
                *((_OWORD *)v100 + 28) = 0uLL;
                *((_OWORD *)v100 + 29) = 0uLL;
                *((_OWORD *)v100 + 30) = 0uLL;
                *((_OWORD *)v100 + 31) = 0uLL;
                *((_OWORD *)v100 + 32) = 0uLL;
                *((_OWORD *)v100 + 33) = 0uLL;
                *((_OWORD *)v100 + 34) = 0uLL;
              }
              unint64_t v101 = v40 - (void)i;
              if (v101 >= v41) {
                unint64_t v102 = v41;
              }
              else {
                unint64_t v102 = v101;
              }
              long long v160 = 0uLL;
              long long v161 = 0uLL;
              unint64_t v162 = (void (*)(void))MEMORY[0x263EF88C0];
              long long v163 = 0uLL;
              memset(v164, 0, sizeof(v164));
              long long v165 = 0uLL;
              long long v166 = 0uLL;
              long long v167 = 0uLL;
              memset(v168, 0, sizeof(v168));
              if (v170)
              {
                sub_2484C4EA0(&v153, v102);
                if (v164[1])
                {
                  sub_2484BFD6C((uint64_t)&v164[1], v164[1]);
                  operator delete((void *)v164[1]);
                }
                *(_OWORD *)&v164[1] = v153;
                v164[3] = v154;
                uint64_t v154 = 0;
                long long v153 = 0uLL;
                v174[0] = (void **)&v153;
                sub_2484BFD18(v174);
              }
              *(void *)&long long v153 = &v172;
              *((void *)&v153 + 1) = &v173;
              uint64_t v154 = &v171;
              unint64_t v155 = &v170;
              unint64_t v156 = v158;
              uint64_t v157 = (uint64_t *)&v169;
              v151(a3, (uint64_t)&v153, (uint64_t (*)(uint64_t, uint64_t))&sub_2484CFDA4, v102);
              if (v170)
              {
                uint64_t v159 = v173[12];
                *((void *)&v167 + 1) = 1;
                sub_2484CE68C(v158, (uint64_t)a5);
              }
              if ((void)v165)
              {
                *((void *)&v165 + 1) = v165;
                operator delete((void *)v165);
              }
              *(void *)&long long v153 = &v164[1];
              sub_2484BFD18((void ***)&v153);
              uint64_t v103 = *((void *)&v161 + 1);
              *((void *)&v161 + 1) = 0;
              if (v103) {
                v162();
              }
              if ((void)v160)
              {
                *((void *)&v160 + 1) = v160;
                operator delete((void *)v160);
              }
              uint64_t i = (void *)((char *)v172 + v41);
            }
            LOBYTE(v38) = v170;
            uint64_t v42 = v149;
          }
          if ((_BYTE)v38)
          {
            uint64_t v104 = a5[5];
            uint64_t v105 = (void *)a5[9];
            if (v105)
            {
              unint64_t v106 = (void (*)(void, uint64_t))v105[3];
              if (v106)
              {
                v106(*v105, v42);
                a5[7] = v42;
              }
            }
            a5[5] = v42;
            sub_2484CEA58(v173 + 244);
            uint64_t v107 = v173[12];
            BOOL v109 = v107 == 2 || v107 == 4;
            unint64_t v110 = sub_2484CEC48((uint64_t)(v173 + 247), v173[250], v173[251], v109, a2);
            if (v110)
            {
              unint64_t v111 = v110;
              do
              {
                unint64_t v112 = (uint64_t *)v173[244];
                uint64_t v113 = *v112;
                uint64_t v114 = v112[2];
                uint64_t v115 = v112[4];
                v112[3] += 8;
                *(void *)(v113 + v114) = v115;
                uint64_t v117 = v112[2];
                unint64_t v116 = v112[3];
                unint64_t v118 = (unint64_t)v112[4] >> (v116 & 0xF8);
                v112[3] = v116 & 7;
                v112[4] = v118;
                v112[2] = v117 + (v116 >> 3);
                --v111;
              }
              while (v111);
            }
            unint64_t v119 = v173;
            *(void *)v173[247] += v110;
            sub_2484BF4F4(v119, a2);
            uint64_t v120 = v173;
            sub_2484BFBA0((char *)v173[239], v173[241], (uint64_t)a5);
            sub_2484BFBA0(*(char **)v120[244], *(void *)(v120[244] + 16), (uint64_t)a5);
            unint64_t v121 = (void *)a5[9];
            if (v121)
            {
              unint64_t v122 = (void (*)(void, uint64_t))v121[3];
              if (v122)
              {
                v122(*v121, v104);
                a5[7] = v104;
              }
            }
            a5[5] = v104;
          }
          else if (a5)
          {
            sub_2484BF4F4(v173, a2);
            sub_2484CE68C(v173, (uint64_t)a5);
          }
          uint64_t v146 = v173;
          goto LABEL_210;
        }
      }
      else
      {
        unint64_t v172 = (void *)a1;
        unint64_t v173 = v9;
        if (!*(unsigned char *)(a1 + 2048))
        {
          uint64_t v86 = *(void *)(a1 + 1984) - *(void *)(a1 + 1976);
          BOOL v56 = v86 == 8;
          BOOL v87 = v86 != 8;
          char v88 = v56;
          char v171 = v88;
          BOOL v89 = a5 != 0;
          int v90 = v89 && v87;
          BOOL v56 = !v89 || !v87;
          BOOL v170 = v89 && v87;
          uint64_t v91 = *(void *)(a1 + 72);
          unint64_t v92 = v91 * *(void *)(a1 + 64);
          if (v56) {
            unint64_t v93 = v91 * *(void *)(a1 + 64);
          }
          else {
            unint64_t v93 = 16;
          }
          if (v90)
          {
            uint64_t v94 = a5[5];
            uint64_t v95 = *(void *)(a1 + 2000) + v94;
            unint64_t v96 = (void *)a5[9];
            if (v96)
            {
              unint64_t v97 = (void (*)(void, uint64_t))v96[3];
              if (v97)
              {
                v97(*v96, v95);
                a5[7] = v95;
              }
            }
            a5[5] = v95;
          }
          else
          {
            uint64_t v94 = 0;
          }
          unint64_t v169 = 0;
          if (v92)
          {
            uint64_t v150 = v94;
            for (k = 0; k < v92; unint64_t v169 = k)
            {
              for (uint64_t m = 0; m != 220; m += 55)
              {
                uint64_t v125 = &v158[m];
                *((_WORD *)v125 + 132) = 0;
                *(_OWORD *)(v125 + 31) = 0uLL;
                *(_OWORD *)(v125 + 29) = 0uLL;
                *(_OWORD *)(v125 + 27) = 0uLL;
                *(_OWORD *)(v125 + 25) = 0uLL;
                *((_OWORD *)v125 + 8) = 0uLL;
                *((_OWORD *)v125 + 9) = 0uLL;
                *((_OWORD *)v125 + 10) = 0uLL;
                *((_OWORD *)v125 + 11) = 0uLL;
                *(void *)((char *)v125 + 191) = 0;
                *((_OWORD *)v125 + 17) = 0uLL;
                *((_OWORD *)v125 + 18) = 0uLL;
                *((_OWORD *)v125 + 19) = 0uLL;
                *((_OWORD *)v125 + 20) = 0uLL;
                *((_OWORD *)v125 + 21) = 0uLL;
                *((_OWORD *)v125 + 22) = 0uLL;
                *((_OWORD *)v125 + 23) = 0uLL;
                *((_OWORD *)v125 + 24) = 0uLL;
                *((_OWORD *)v125 + 25) = 0uLL;
                *((_OWORD *)v125 + 26) = 0uLL;
                *((_OWORD *)v125 + 27) = 0uLL;
                *((_OWORD *)v125 + 28) = 0uLL;
                *((_OWORD *)v125 + 29) = 0uLL;
                *((_OWORD *)v125 + 30) = 0uLL;
                *((_OWORD *)v125 + 31) = 0uLL;
                *((_OWORD *)v125 + 32) = 0uLL;
                *((_OWORD *)v125 + 33) = 0uLL;
                *((_OWORD *)v125 + 34) = 0uLL;
              }
              unint64_t v126 = v92 - k;
              if (v126 >= v93) {
                unint64_t v127 = v93;
              }
              else {
                unint64_t v127 = v126;
              }
              long long v160 = 0uLL;
              long long v161 = 0uLL;
              unint64_t v162 = (void (*)(void))MEMORY[0x263EF88C0];
              long long v163 = 0uLL;
              memset(v164, 0, sizeof(v164));
              long long v165 = 0uLL;
              long long v166 = 0uLL;
              long long v167 = 0uLL;
              memset(v168, 0, sizeof(v168));
              if (v170)
              {
                sub_2484C4EA0(&v153, v127);
                if (v164[1])
                {
                  sub_2484BFD6C((uint64_t)&v164[1], v164[1]);
                  operator delete((void *)v164[1]);
                }
                *(_OWORD *)&v164[1] = v153;
                v164[3] = v154;
                uint64_t v154 = 0;
                long long v153 = 0uLL;
                v174[0] = (void **)&v153;
                sub_2484BFD18(v174);
              }
              *(void *)&long long v153 = &v169;
              *((void *)&v153 + 1) = &v172;
              uint64_t v154 = &v171;
              unint64_t v155 = &v170;
              unint64_t v156 = v158;
              uint64_t v157 = (uint64_t *)&v173;
              v151(a3, (uint64_t)&v153, (uint64_t (*)(uint64_t, uint64_t))&sub_2484CED6C, v127);
              if (v170)
              {
                uint64_t v159 = v172[12];
                *((void *)&v167 + 1) = 1;
                sub_2484CE68C(v158, (uint64_t)a5);
              }
              if ((void)v165)
              {
                *((void *)&v165 + 1) = v165;
                operator delete((void *)v165);
              }
              *(void *)&long long v153 = &v164[1];
              sub_2484BFD18((void ***)&v153);
              uint64_t v128 = *((void *)&v161 + 1);
              *((void *)&v161 + 1) = 0;
              if (v128) {
                v162();
              }
              if ((void)v160)
              {
                *((void *)&v160 + 1) = v160;
                operator delete((void *)v160);
              }
              unint64_t k = v169 + v93;
            }
            LOBYTE(v90) = v170;
            uint64_t v94 = v150;
          }
          if ((_BYTE)v90)
          {
            uint64_t v52 = a5[5];
            unint64_t v129 = (void *)a5[9];
            if (v129)
            {
              uint64_t v130 = (void (*)(void, uint64_t))v129[3];
              if (v130)
              {
                v130(*v129, v94);
                a5[7] = v94;
              }
            }
            a5[5] = v94;
            sub_2484CEA58(v172 + 244);
            uint64_t v131 = v172[12];
            BOOL v133 = v131 == 2 || v131 == 4;
            unint64_t v58 = sub_2484CEC48((uint64_t)(v172 + 247), v172[250], v172[251], v133, a2);
            if (v58)
            {
              unint64_t v134 = v58;
              do
              {
                unint64_t v135 = (uint64_t *)v172[244];
                uint64_t v136 = *v135;
                uint64_t v137 = v135[2];
                uint64_t v138 = v135[4];
                v135[3] += 8;
                *(void *)(v136 + v137) = v138;
                uint64_t v140 = v135[2];
                unint64_t v139 = v135[3];
                unint64_t v141 = (unint64_t)v135[4] >> (v139 & 0xF8);
                v135[3] = v139 & 7;
                v135[4] = v141;
                v135[2] = v140 + (v139 >> 3);
                --v134;
              }
              while (v134);
            }
            goto LABEL_203;
          }
          goto LABEL_207;
        }
      }
    }
    else
    {
      unint64_t v172 = (void *)a1;
      unint64_t v173 = v9;
      if (!*(unsigned char *)(a1 + 2048))
      {
        uint64_t v22 = *(void *)(a1 + 1984) - *(void *)(a1 + 1976);
        BOOL v56 = v22 == 8;
        BOOL v23 = v22 != 8;
        char v24 = v56;
        char v171 = v24;
        BOOL v25 = a5 != 0;
        int v26 = v25 && v23;
        BOOL v56 = !v25 || !v23;
        BOOL v170 = v25 && v23;
        uint64_t v27 = *(void *)(a1 + 72);
        unint64_t v28 = v27 * *(void *)(a1 + 64);
        if (v56) {
          unint64_t v29 = v27 * *(void *)(a1 + 64);
        }
        else {
          unint64_t v29 = 16;
        }
        if (v26)
        {
          uint64_t v30 = a5[5];
          uint64_t v31 = *(void *)(a1 + 2000) + v30;
          unsigned int v32 = (void *)a5[9];
          if (v32)
          {
            float v33 = (void (*)(void, uint64_t))v32[3];
            if (v33)
            {
              v33(*v32, v31);
              a5[7] = v31;
            }
          }
          a5[5] = v31;
        }
        else
        {
          uint64_t v30 = 0;
        }
        unint64_t v169 = 0;
        if (v28)
        {
          uint64_t v148 = v30;
          for (unint64_t n = 0; n < v28; v169 = n)
          {
            for (uint64_t ii = 0; ii != 220; ii += 55)
            {
              uint64_t v69 = &v158[ii];
              *((_WORD *)v69 + 132) = 0;
              *(_OWORD *)(v69 + 31) = 0uLL;
              *(_OWORD *)(v69 + 29) = 0uLL;
              *(_OWORD *)(v69 + 27) = 0uLL;
              *(_OWORD *)(v69 + 25) = 0uLL;
              *((_OWORD *)v69 + 8) = 0uLL;
              *((_OWORD *)v69 + 9) = 0uLL;
              *((_OWORD *)v69 + 10) = 0uLL;
              *((_OWORD *)v69 + 11) = 0uLL;
              *(void *)((char *)v69 + 191) = 0;
              *((_OWORD *)v69 + 17) = 0uLL;
              *((_OWORD *)v69 + 18) = 0uLL;
              *((_OWORD *)v69 + 19) = 0uLL;
              *((_OWORD *)v69 + 20) = 0uLL;
              *((_OWORD *)v69 + 21) = 0uLL;
              *((_OWORD *)v69 + 22) = 0uLL;
              *((_OWORD *)v69 + 23) = 0uLL;
              *((_OWORD *)v69 + 24) = 0uLL;
              *((_OWORD *)v69 + 25) = 0uLL;
              *((_OWORD *)v69 + 26) = 0uLL;
              *((_OWORD *)v69 + 27) = 0uLL;
              *((_OWORD *)v69 + 28) = 0uLL;
              *((_OWORD *)v69 + 29) = 0uLL;
              *((_OWORD *)v69 + 30) = 0uLL;
              *((_OWORD *)v69 + 31) = 0uLL;
              *((_OWORD *)v69 + 32) = 0uLL;
              *((_OWORD *)v69 + 33) = 0uLL;
              *((_OWORD *)v69 + 34) = 0uLL;
            }
            unint64_t v70 = v28 - n;
            if (v70 >= v29) {
              unint64_t v71 = v29;
            }
            else {
              unint64_t v71 = v70;
            }
            long long v160 = 0uLL;
            long long v161 = 0uLL;
            unint64_t v162 = (void (*)(void))MEMORY[0x263EF88C0];
            long long v163 = 0uLL;
            memset(v164, 0, sizeof(v164));
            long long v165 = 0uLL;
            long long v166 = 0uLL;
            long long v167 = 0uLL;
            memset(v168, 0, sizeof(v168));
            if (v170)
            {
              sub_2484C4EA0(&v153, v71);
              if (v164[1])
              {
                sub_2484BFD6C((uint64_t)&v164[1], v164[1]);
                operator delete((void *)v164[1]);
              }
              *(_OWORD *)&v164[1] = v153;
              v164[3] = v154;
              uint64_t v154 = 0;
              long long v153 = 0uLL;
              v174[0] = (void **)&v153;
              sub_2484BFD18(v174);
            }
            *(void *)&long long v153 = &v169;
            *((void *)&v153 + 1) = &v172;
            uint64_t v154 = &v171;
            unint64_t v155 = &v170;
            unint64_t v156 = v158;
            uint64_t v157 = (uint64_t *)&v173;
            v151(a3, (uint64_t)&v153, (uint64_t (*)(uint64_t, uint64_t))&sub_2484D09CC, v71);
            if (v170)
            {
              uint64_t v159 = v172[12];
              *((void *)&v167 + 1) = 1;
              sub_2484CE68C(v158, (uint64_t)a5);
            }
            if ((void)v165)
            {
              *((void *)&v165 + 1) = v165;
              operator delete((void *)v165);
            }
            *(void *)&long long v153 = &v164[1];
            sub_2484BFD18((void ***)&v153);
            uint64_t v72 = *((void *)&v161 + 1);
            *((void *)&v161 + 1) = 0;
            if (v72) {
              v162();
            }
            if ((void)v160)
            {
              *((void *)&v160 + 1) = v160;
              operator delete((void *)v160);
            }
            unint64_t n = v169 + v29;
          }
          LOBYTE(v26) = v170;
          uint64_t v30 = v148;
        }
        if ((_BYTE)v26)
        {
          uint64_t v52 = a5[5];
          uint64x2_t v73 = (void *)a5[9];
          if (v73)
          {
            long long v74 = (void (*)(void, uint64_t))v73[3];
            if (v74)
            {
              v74(*v73, v30);
              a5[7] = v30;
            }
          }
          a5[5] = v30;
          sub_2484CEA58(v172 + 244);
          uint64_t v75 = v172[12];
          BOOL v77 = v75 == 2 || v75 == 4;
          unint64_t v58 = sub_2484CEC48((uint64_t)(v172 + 247), v172[250], v172[251], v77, a2);
          if (v58)
          {
            unint64_t v78 = v58;
            do
            {
              unint64_t v79 = (uint64_t *)v172[244];
              uint64_t v80 = *v79;
              uint64_t v81 = v79[2];
              uint64_t v82 = v79[4];
              v79[3] += 8;
              *(void *)(v80 + v81) = v82;
              uint64_t v84 = v79[2];
              unint64_t v83 = v79[3];
              unint64_t v85 = (unint64_t)v79[4] >> (v83 & 0xF8);
              v79[3] = v83 & 7;
              v79[4] = v85;
              v79[2] = v84 + (v83 >> 3);
              --v78;
            }
            while (v78);
          }
          goto LABEL_203;
        }
LABEL_207:
        if (a5)
        {
          sub_2484BF4F4(v172, a2);
          sub_2484CE68C(v172, (uint64_t)a5);
        }
        goto LABEL_209;
      }
    }
  }
  else
  {
    unint64_t v172 = (void *)a1;
    unint64_t v173 = v9;
    if (!*(unsigned char *)(a1 + 2048))
    {
      uint64_t v10 = *(void *)(a1 + 1984) - *(void *)(a1 + 1976);
      BOOL v56 = v10 == 8;
      BOOL v11 = v10 != 8;
      char v12 = v56;
      char v171 = v12;
      BOOL v13 = a5 != 0;
      int v14 = v13 && v11;
      BOOL v56 = !v13 || !v11;
      BOOL v170 = v13 && v11;
      uint64_t v15 = *(void *)(a1 + 72);
      unint64_t v16 = v15 * *(void *)(a1 + 64);
      if (v56) {
        unint64_t v17 = v15 * *(void *)(a1 + 64);
      }
      else {
        unint64_t v17 = 16;
      }
      if (v14)
      {
        uint64_t v18 = a5[5];
        uint64_t v19 = *(void *)(a1 + 2000) + v18;
        int v20 = (void *)a5[9];
        if (v20)
        {
          unsigned int v21 = (void (*)(void, uint64_t))v20[3];
          if (v21)
          {
            v21(*v20, v19);
            a5[7] = v19;
          }
        }
        a5[5] = v19;
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v169 = 0;
      if (v16)
      {
        uint64_t v147 = v18;
        for (jj = 0; jj < v16; unint64_t v169 = jj)
        {
          for (kunint64_t k = 0; kk != 220; kk += 55)
          {
            int8x16_t v48 = &v158[kk];
            *((_WORD *)v48 + 132) = 0;
            *(_OWORD *)(v48 + 31) = 0uLL;
            *(_OWORD *)(v48 + 29) = 0uLL;
            *(_OWORD *)(v48 + 27) = 0uLL;
            *(_OWORD *)(v48 + 25) = 0uLL;
            *((_OWORD *)v48 + 8) = 0uLL;
            *((_OWORD *)v48 + 9) = 0uLL;
            *((_OWORD *)v48 + 10) = 0uLL;
            *((_OWORD *)v48 + 11) = 0uLL;
            *(void *)((char *)v48 + 191) = 0;
            *((_OWORD *)v48 + 17) = 0uLL;
            *((_OWORD *)v48 + 18) = 0uLL;
            *((_OWORD *)v48 + 19) = 0uLL;
            *((_OWORD *)v48 + 20) = 0uLL;
            *((_OWORD *)v48 + 21) = 0uLL;
            *((_OWORD *)v48 + 22) = 0uLL;
            *((_OWORD *)v48 + 23) = 0uLL;
            *((_OWORD *)v48 + 24) = 0uLL;
            *((_OWORD *)v48 + 25) = 0uLL;
            *((_OWORD *)v48 + 26) = 0uLL;
            *((_OWORD *)v48 + 27) = 0uLL;
            *((_OWORD *)v48 + 28) = 0uLL;
            *((_OWORD *)v48 + 29) = 0uLL;
            *((_OWORD *)v48 + 30) = 0uLL;
            *((_OWORD *)v48 + 31) = 0uLL;
            *((_OWORD *)v48 + 32) = 0uLL;
            *((_OWORD *)v48 + 33) = 0uLL;
            *((_OWORD *)v48 + 34) = 0uLL;
          }
          unint64_t v49 = v16 - jj;
          if (v49 >= v17) {
            unint64_t v50 = v17;
          }
          else {
            unint64_t v50 = v49;
          }
          long long v160 = 0uLL;
          long long v161 = 0uLL;
          unint64_t v162 = (void (*)(void))MEMORY[0x263EF88C0];
          long long v163 = 0uLL;
          memset(v164, 0, sizeof(v164));
          long long v165 = 0uLL;
          long long v166 = 0uLL;
          long long v167 = 0uLL;
          memset(v168, 0, sizeof(v168));
          if (v170)
          {
            sub_2484C4EA0(&v153, v50);
            if (v164[1])
            {
              sub_2484BFD6C((uint64_t)&v164[1], v164[1]);
              operator delete((void *)v164[1]);
            }
            *(_OWORD *)&v164[1] = v153;
            v164[3] = v154;
            uint64_t v154 = 0;
            long long v153 = 0uLL;
            v174[0] = (void **)&v153;
            sub_2484BFD18(v174);
          }
          *(void *)&long long v153 = &v169;
          *((void *)&v153 + 1) = &v172;
          uint64_t v154 = &v171;
          unint64_t v155 = &v170;
          unint64_t v156 = v158;
          uint64_t v157 = (uint64_t *)&v173;
          v151(a3, (uint64_t)&v153, (uint64_t (*)(uint64_t, uint64_t))sub_2484D15DC, v50);
          if (v170)
          {
            uint64_t v159 = v172[12];
            *((void *)&v167 + 1) = 1;
            sub_2484CE68C(v158, (uint64_t)a5);
          }
          if ((void)v165)
          {
            *((void *)&v165 + 1) = v165;
            operator delete((void *)v165);
          }
          *(void *)&long long v153 = &v164[1];
          sub_2484BFD18((void ***)&v153);
          uint64_t v51 = *((void *)&v161 + 1);
          *((void *)&v161 + 1) = 0;
          if (v51) {
            v162();
          }
          if ((void)v160)
          {
            *((void *)&v160 + 1) = v160;
            operator delete((void *)v160);
          }
          juint64_t j = v169 + v17;
        }
        LOBYTE(v14) = v170;
        uint64_t v18 = v147;
      }
      if ((_BYTE)v14)
      {
        uint64_t v52 = a5[5];
        unint64_t v53 = (void *)a5[9];
        if (v53)
        {
          uint64_t v54 = (void (*)(void, uint64_t))v53[3];
          if (v54)
          {
            v54(*v53, v18);
            a5[7] = v18;
          }
        }
        a5[5] = v18;
        sub_2484CEA58(v172 + 244);
        uint64_t v55 = v172[12];
        BOOL v56 = v55 == 2 || v55 == 4;
        int v57 = v56;
        unint64_t v58 = sub_2484CEC48((uint64_t)(v172 + 247), v172[250], v172[251], v57, a2);
        if (v58)
        {
          unint64_t v59 = v58;
          do
          {
            unint64_t v60 = (uint64_t *)v172[244];
            uint64_t v61 = *v60;
            uint64_t v62 = v60[2];
            uint64_t v63 = v60[4];
            v60[3] += 8;
            *(void *)(v61 + v62) = v63;
            uint64_t v65 = v60[2];
            unint64_t v64 = v60[3];
            unint64_t v66 = (unint64_t)v60[4] >> (v64 & 0xF8);
            v60[3] = v64 & 7;
            v60[4] = v66;
            v60[2] = v65 + (v64 >> 3);
            --v59;
          }
          while (v59);
        }
LABEL_203:
        uint64_t v142 = v172;
        *(void *)v172[247] += v58;
        sub_2484BF4F4(v142, a2);
        unint64_t v143 = v172;
        sub_2484BFBA0((char *)v172[239], v172[241], (uint64_t)a5);
        sub_2484BFBA0(*(char **)v143[244], *(void *)(v143[244] + 16), (uint64_t)a5);
        unint64_t v144 = (void *)a5[9];
        if (v144)
        {
          uint64_t v145 = (void (*)(void, uint64_t))v144[3];
          if (v145)
          {
            v145(*v144, v52);
            a5[7] = v52;
          }
        }
        a5[5] = v52;
LABEL_209:
        uint64_t v146 = v172;
LABEL_210:
        *((unsigned char *)v146 + 2048) = 1;
        return;
      }
      goto LABEL_207;
    }
  }
  sub_2484BF4F4((void *)a1, a2);
  if (a5) {
    sub_2484CE68C((void *)a1, (uint64_t)a5);
  }
}

void sub_2484CE55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v6 = (void *)STACK[0x810];
  if (STACK[0x810])
  {
    STACK[0x818] = (unint64_t)v6;
    operator delete(v6);
  }
  sub_2484BFD18((void ***)va);
  unint64_t v7 = STACK[0x7D0];
  STACK[0x7D0] = 0;
  if (v7) {
    ((void (*)(void))STACK[0x7D8])();
  }
  unsigned int v8 = (void *)STACK[0x7B8];
  if (STACK[0x7B8])
  {
    STACK[0x7C0] = (unint64_t)v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_2484CE68C(void *result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[245];
  uint64_t v5 = result[244];
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = v6 / 160;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        v11 += *(void *)(v5 + v10 + 24) + 8 * *(void *)(v5 + v10 + 16);
        v10 += 40;
      }
      while (v10 != 160);
      v8 += (unint64_t)(v11 + 7) >> 3;
      ++v7;
      v5 += 160;
    }
    while (v7 != v9);
  }
  unint64_t v12 = 0;
  unint64_t v46 = result[241] + v8;
  while (v46 > v12)
  {
    sub_24848807C(&__dst, v2, 0x20uLL, v46 - v12);
    BOOL v13 = __dst;
    uint64_t v47 = (char *)__dst;
    unint64_t v14 = v51;
    long long v48 = v51;
    uint64_t v49 = v52;
    __dst = 0;
    *(void *)&long long v51 = 0;
    unint64_t v15 = v3[252];
    uint64_t v16 = v3[244];
    unint64_t v17 = v3[12];
    if (v15 >= 1 - 0x3333333333333333 * ((v3[245] - v16) >> 5) * v17)
    {
      int v43 = 1;
    }
    else
    {
      unint64_t v45 = v12;
      unint64_t v18 = v14;
      uint64_t v19 = v13;
      do
      {
        if (v18 < 0xA) {
          break;
        }
        int v20 = v3 + 239;
        if (v15) {
          int v20 = (void *)(v16 + 160 * ((v15 - 1) / v17) + 40 * ((v15 - 1) % v17));
        }
        uint64_t v21 = v3[253];
        size_t v22 = v20[2] - v21 >= v18 - 9 ? v18 - 9 : v20[2] - v21;
        uint64_t v23 = v3[254];
        if (v23)
        {
          if (v22 < 9)
          {
            size_t v27 = 0;
          }
          else
          {
            unint64_t v24 = 0;
            unint64_t v25 = v3[255];
            do
            {
              unint64_t v26 = *(void *)(*v20 + v3[253] + v24);
              v19[v24 / 8] = (v26 << v23) | v25;
              uint64_t v23 = v3[254];
              unint64_t v25 = v26 >> -(char)v23;
              v3[255] = v25;
              size_t v27 = v24 + 8;
              size_t v28 = v24 + 16;
              v24 += 8;
            }
            while (v28 < v22);
          }
          if (v27 < v22)
          {
            uint64_t v29 = v3[255];
            do
            {
              unint64_t v30 = v29 | ((unint64_t)*(unsigned __int8 *)(*v20 + v3[253] + v27) << v23);
              v3[255] = v30;
              v3[254] = v23 + 8;
              *(void *)((char *)v19 + v27) = v30;
              LOBYTE(v30) = v3[254] & 0xF8;
              uint64_t v23 = v3[254] & 7;
              v3[254] = v23;
              uint64_t v29 = v3[255] >> v30;
              v3[255] = v29;
              ++v27;
            }
            while (v22 != v27);
          }
        }
        else
        {
          memcpy(v19, (const void *)(*v20 + v21), v22);
        }
        uint64_t v19 = (void *)((char *)v19 + v22);
        v18 -= v22;
        size_t v31 = v3[253] + v22;
        v3[253] = v31;
        if (v31 == v20[2])
        {
          uint64_t v32 = v20[3];
          if (v32)
          {
            uint64_t v33 = v3[254];
            uint64_t v34 = v3[255] | (v20[4] << v33);
            v3[255] = v34;
            v3[254] = v33 + v32;
            *uint64_t v19 = v34;
            unint64_t v35 = v3[254];
            uint64_t v36 = v3[255] >> (v35 & 0xF8);
            v3[254] = v35 & 7;
            v3[255] = v36;
            uint64_t v19 = (void *)((char *)v19 + (v35 >> 3));
            v18 -= v35 >> 3;
          }
          v3[253] = 0;
          unint64_t v37 = v3[252];
          v3[252] = v37 + 1;
          if (!(v37 % v17))
          {
            uint64_t v38 = v3[254];
            if (v38)
            {
              uint64_t v39 = v3[255];
              v3[254] = (8 - v38) + v38;
              *uint64_t v19 = v39;
              unint64_t v40 = v3[254];
              uint64_t v41 = v3[255] >> (v40 & 0xF8);
              v3[254] = v40 & 7;
              v3[255] = v41;
              uint64_t v19 = (void *)((char *)v19 + (v40 >> 3));
              v18 -= v40 >> 3;
            }
          }
        }
        unint64_t v15 = v3[252];
        uint64_t v16 = v3[244];
        unint64_t v17 = v3[12];
      }
      while (v15 < 1 - 0x3333333333333333 * ((v3[245] - v16) >> 5) * v17);
      int64_t v42 = (char *)v19 - (char *)v13;
      if (v19 == v13)
      {
        int v43 = 1;
        uint64_t v2 = a2;
        unint64_t v12 = v45;
      }
      else
      {
        int v43 = 0;
        v47 += v42;
        *(void *)&long long v48 = v48 - v42;
        *((void *)&v48 + 1) += v42;
        uint64_t v2 = a2;
        unint64_t v12 = v42 + v45;
      }
    }
    BOOL result = sub_24845C478(&v47);
    if (v53)
    {
      if (v43) {
        return result;
      }
    }
    else
    {
      BOOL result = sub_24845C478(&__dst);
      if (v43) {
        return result;
      }
    }
  }
  return result;
}

void sub_2484CEA58(void *a1)
{
  uint64_t v2 = (_OWORD *)*a1;
  uint64_t v1 = (_OWORD *)a1[1];
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v1 - *a1) >> 5);
  if (v3 != 1)
  {
    if (v3)
    {
      sub_2484BFD6C((uint64_t)a1, (uint64_t)(v2 + 10));
    }
    else if ((_OWORD *)a1[2] == v1)
    {
      uint64_t v8 = operator new(0xA0uLL);
      uint64_t v9 = 0;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      do
      {
        uint64_t v10 = (void *)((char *)v8 + v9);
        uint64_t v11 = MEMORY[0x263EF88C0];
        *uint64_t v10 = 0;
        v10[1] = v11;
        v10[2] = 0;
        v10[3] = 0;
        v10[4] = 0;
        v9 += 40;
      }
      while (v9 != 160);
      unint64_t v12 = v8 + 10;
      if (v1 == v2)
      {
        *a1 = v8;
        a1[1] = v12;
        a1[2] = v12;
      }
      else
      {
        do
        {
          BOOL v13 = v8 - 10;
          unint64_t v14 = v1 - 10;
          uint64_t v15 = -160;
          do
          {
            uint64_t v16 = (char *)v8 + v15;
            uint64_t v17 = *(void *)((char *)v1 + v15);
            *(void *)((char *)v1 + v15) = 0;
            *(void *)uint64_t v16 = v17;
            *((void *)v16 + 1) = *(void *)((char *)v1 + v15 + 8);
            long long v18 = *(_OWORD *)((char *)v1 + v15 + 16);
            *((void *)v16 + 4) = *(void *)((char *)v1 + v15 + 32);
            *((_OWORD *)v16 + 1) = v18;
            v15 += 40;
          }
          while (v15);
          v8 -= 10;
          v1 -= 10;
        }
        while (v14 != v2);
        uint64_t v1 = (_OWORD *)*a1;
        uint64_t v19 = (_OWORD *)a1[1];
        *a1 = v13;
        a1[1] = v12;
        a1[2] = v12;
        while (v19 != v1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = v19;
          v19 -= 10;
          do
          {
            uint64_t v22 = *(void *)((char *)v21 + v20 - 40);
            *(void *)((char *)v21 + v20 - 40) = 0;
            if (v22) {
              (*(void (**)(void))((char *)v21 + v20 - 32))();
            }
            v20 -= 40;
          }
          while (v20 != -160);
        }
      }
      if (v1)
      {
        operator delete(v1);
      }
    }
    else
    {
      uint64_t v5 = 0;
      v1[8] = 0u;
      v1[9] = 0u;
      v1[6] = 0u;
      v1[7] = 0u;
      v1[4] = 0u;
      v1[5] = 0u;
      v1[2] = 0u;
      v1[3] = 0u;
      _OWORD *v1 = 0u;
      v1[1] = 0u;
      do
      {
        uint64_t v6 = (void *)((char *)v1 + v5);
        uint64_t v7 = MEMORY[0x263EF88C0];
        *uint64_t v6 = 0;
        v6[1] = v7;
        void v6[2] = 0;
        v6[3] = 0;
        v6[4] = 0;
        v5 += 40;
      }
      while (v5 != 160);
      a1[1] = v1 + 10;
    }
  }
}

unint64_t sub_2484CEC48(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_24840331C(&v24, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  uint64_t v10 = v24;
  uint64_t v11 = v25;
  *unint64_t v24 = a3;
  uint64_t v12 = v11 - (unsigned char *)v10;
  if (v11 == (unsigned char *)v10)
  {
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = v12 >> 3;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      uint64_t v16 = 1;
      while (v16 != 4)
      {
        unint64_t v17 = qword_248551720[v16++];
        if (v17 > v10[v13])
        {
          uint64_t v18 = v16 - 2;
          goto LABEL_9;
        }
      }
      uint64_t v18 = 3;
LABEL_9:
      v14 += qword_248551700[v18];
      ++v13;
    }
    while (v13 != v15);
    unint64_t v19 = (unint64_t)(v14 + 7) >> 3;
  }
  uint64_t v20 = 2;
  if (a5) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = 34;
  if (a4) {
    uint64_t v21 = 38;
  }
  unint64_t v22 = a2 - (v19 + ((unint64_t)(v20 + v21) >> 3)) - **(void **)a1;
  operator delete(v10);
  return v22;
}

#error "2484CF400: call analysis failed (funcsize=644)"

uint64_t sub_2484CF780(uint64_t result, unint64_t a2, unint64_t a3, void *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28 = 0;
  a28 = *MEMORY[0x263EF8340];
  char v29 = 1;
  v30.i64[0] = 0x2000000020;
  v30.i64[1] = 0x2000000020;
  v31.i64[0] = 0x100000001;
  v31.i64[1] = 0x100000001;
  v32.i64[0] = 0xC000C000C000CLL;
  v32.i64[1] = 0xC000C000C000CLL;
  v33.i64[0] = 0xD000D000D000DLL;
  v33.i64[1] = 0xD000D000D000DLL;
  v34.i64[0] = 0x1000100010001;
  v34.i64[1] = 0x1000100010001;
  do
  {
    char v35 = v29;
    uint64_t v36 = (int32x4_t *)(result + 4 * v28);
    int32x4_t v37 = v36[1];
    int16x8_t v38 = (int16x8_t)vsubq_s32(v30, vclzq_s32(*v36));
    int16x8_t v39 = (int16x8_t)vsubq_s32(v30, vclzq_s32(v37));
    uint32x4_t v40 = vqsubq_u32((uint32x4_t)v38, v31);
    uint32x4_t v41 = vqsubq_u32((uint32x4_t)v39, v31);
    uint32x4_t v42 = vqsubq_u32(*(uint32x4_t *)v36, vshlq_u32(v31, v40));
    uint32x4_t v43 = vqsubq_u32((uint32x4_t)v37, vshlq_u32(v31, v41));
    int16x8_t v44 = vuzp1q_s16(v38, v39);
    int8x16_t v45 = (int8x16_t)vcgtq_s16(v44, v32);
    unsigned long long v46 = *(_OWORD *)&vbslq_s8(v45, (int8x16_t)vhaddq_u16((uint16x8_t)v44, v33), (int8x16_t)v44) | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    int8x16_t v47 = vqtbl1q_s8(a6, (int8x16_t)v46);
    uint16x8_t v48 = (uint16x8_t)vbslq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)v44, v34)), v45), (int8x16_t)(*(_OWORD *)&v47 | __PAIR128__(0x80008000800080, 0x80008000800080)), v47);
    int8x16_t v49 = vqtbl1q_s8(a5, (int8x16_t)v46);
    unint64_t v50 = a2 - v28;
    if (a2 < v28) {
      unint64_t v50 = 0;
    }
    unint64_t v51 = a3 - v28;
    if (a3 < v28) {
      unint64_t v51 = 0;
    }
    uint64_t v52 = (int8x16_t *)((char *)&v79 + 8 * v28);
    int8x16_t v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v48.i8);
    int8x16_t v54 = (int8x16_t)vmovl_high_u16(v48);
    uint32x4_t v55 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    int8x16_t v56 = vorrq_s8((int8x16_t)vshlq_u32(v42, vmovl_u16(*(uint16x4_t *)v49.i8)), v53);
    int8x16_t v57 = (int8x16_t)vaddw_u16(v40, *(uint16x4_t *)v49.i8);
    if (v51 >= 4) {
      uint64_t v58 = 4;
    }
    else {
      uint64_t v58 = v51;
    }
    if (v51 <= 4) {
      unint64_t v51 = 4;
    }
    if (v50 >= 4) {
      uint64_t v59 = 4;
    }
    else {
      uint64_t v59 = v50;
    }
    if (v50 <= 4) {
      unint64_t v50 = 4;
    }
    int8x16_t v60 = vandq_s8(*(int8x16_t *)((char *)&unk_248551A80 - 4 * v59), *(int8x16_t *)((char *)&unk_248551AA0 - 4 * v58));
    int8x16_t *v52 = vandq_s8(v60, v57);
    v52[1] = vandq_s8(v60, v56);
    int8x16_t v61 = vorrq_s8((int8x16_t)vshlq_u32(v43, v55), v54);
    int8x16_t v62 = (int8x16_t)vaddw_high_u16(v41, (uint16x8_t)v49);
    unint64_t v63 = v50 - 4;
    if (v63 >= 4) {
      unint64_t v63 = 4;
    }
    int8x16_t v64 = *(int8x16_t *)((char *)&unk_248551A80 - 4 * v63);
    uint64_t v65 = v51 - 4;
    if (v51 - 4 >= 4) {
      uint64_t v65 = 4;
    }
    int8x16_t v66 = vandq_s8(v64, *(int8x16_t *)((char *)&unk_248551AA0 - 4 * v65));
    v52[2] = vandq_s8(v66, v62);
    v52[3] = vandq_s8(v66, v61);
    unint64_t v28 = 8;
    char v29 = 0;
  }
  while ((v35 & 1) != 0);
  uint64_t v67 = 0;
  v68.i64[0] = 0xFFFFFFFFLL;
  v68.i64[1] = 0xFFFFFFFFLL;
  uint64x2_t v69 = (uint64x2_t)vandq_s8(v79, v68);
  uint64x2_t v70 = (uint64x2_t)vandq_s8(a11, v68);
  a21 = vsraq_n_u64(v69, (uint64x2_t)v79, 0x20uLL);
  a22 = vsraq_n_u64(v70, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v69), vandq_s8((int8x16_t)vars0, v68));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v70), vandq_s8(a12, v68));
  uint64x2_t v71 = (uint64x2_t)vandq_s8(a13, v68);
  uint64x2_t v72 = (uint64x2_t)vandq_s8(a15, v68);
  a23 = vsraq_n_u64(v71, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v72, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v71), vandq_s8(a14, v68));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v72), vandq_s8(a16, v68));
  unint64_t v73 = a4[3];
  do
  {
    unint64_t v74 = a17.u64[v67];
    unint64_t v75 = a4[4] | (v74 << v73);
    a4[4] = v75;
    *(void *)(*a4 + a4[2]) = v75;
    uint64_t v76 = a4[3];
    unint64_t v73 = a21.i64[v67] + v76;
    a4[3] = v73;
    if (v73 >= 0x40)
    {
      a4[3] = v73 - 64;
      a4[4] = v74 >> -(char)v76;
      a4[2] += 8;
      LOBYTE(v73) = v73 - 64;
    }
    ++v67;
  }
  while (v67 != 8);
  *(void *)(*a4 + a4[2]) = a4[4];
  uint64_t v78 = a4[2];
  unint64_t v77 = a4[3];
  a4[4] >>= v77 & 0xF8;
  a4[2] = v78 + (v77 >> 3);
  a4[3] = v77 & 7;
  return result;
}

void sub_2484CFA50(unsigned __int16 *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if ((a5 & 1) == 0)
  {
    sub_2484BFB04((uint64_t)a9, (16 * a2 * a3) | 4);
    uint64_t v17 = *a9;
    uint64_t v18 = a9[2];
    uint64_t v19 = a9[3];
    uint64_t v20 = a9[4] | (1 << v19);
    a9[3] = v19 + 1;
    a9[4] = v20;
    *(void *)(v17 + v18) = v20;
    unint64_t v21 = a9[3];
    uint64_t v22 = v21 & 7;
    uint64_t v23 = a9[4] >> (v21 & 0xF8);
    unint64_t v24 = a9[2] + (v21 >> 3);
    uint64_t v25 = *a9;
    uint64_t v26 = v23 | (1 << v22);
    a9[2] = v24;
    a9[3] = v22 + 1;
    a9[4] = v26;
    *(void *)(v25 + v24) = v26;
    unint64_t v27 = a9[3];
    uint64_t v28 = v27 & 7;
    uint64_t v29 = a9[4] >> (v27 & 0xF8);
    unint64_t v30 = a9[2] + (v27 >> 3);
    uint64_t v31 = *a9;
    a9[2] = v30;
    a9[3] = v28 + 2;
    a9[4] = v29;
    *(void *)(v31 + v30) = v29;
    uint64_t v33 = a9[2];
    unint64_t v32 = a9[3];
    uint64_t v34 = a9[4] >> (v32 & 0xF8);
    a9[3] = v32 & 7;
    a9[4] = v34;
    a9[2] = v33 + (v32 >> 3);
  }
  int8x16_t v61 = &v64;
  uint64_t v62 = 0;
  uint64_t v64 = a6 + 440 * a5;
  uint64_t v65 = a9;
  sub_2484CA160((char **)__p);
  if (a3)
  {
    uint64_t v37 = 0;
    uint64_t v38 = a8 - 1;
    do
    {
      unint64_t v39 = ((v37 & 1u) << 7) | ((unint64_t)(v37 & 1) << 9);
      uint32x4_t v40 = __p[0];
      switch(v38)
      {
        case 0:
          if (a2)
          {
            uint64_t v41 = 0;
            do
            {
              *(_WORD *)((char *)&v40[v41 + 32] + v39) = *(_WORD *)(a7
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int8 *)a1 + v41)) >> 16));
              ++v41;
            }
            while (a2 != v41);
          }
          break;
        case 1:
          if (a2)
          {
            uint64_t v42 = 0;
            do
            {
              *(_WORD *)((char *)&v40[v42 + 32] + v39) = *(_WORD *)(a7
                                                                  + 2 * ((-1640531535 * a1[v42]) >> 16));
              ++v42;
            }
            while (a2 != v42);
          }
          break;
        case 2:
          if (a2)
          {
            uint32x4_t v43 = (char *)__p[0] + v39 + 64;
            int16x8_t v44 = a1;
            unint64_t v45 = a2;
            do
            {
              int v46 = *((unsigned __int8 *)v44 + 2);
              int v47 = *v44;
              int16x8_t v44 = (unsigned __int16 *)((char *)v44 + 3);
              *v43++ = *(_WORD *)(a7 + 2 * ((-1640531535 * (v47 | (v46 << 16))) >> 16));
              --v45;
            }
            while (v45);
          }
          break;
        case 3:
          if (a2)
          {
            uint16x8_t v48 = (char *)__p[0] + v39 + 64;
            int8x16_t v49 = a1;
            unint64_t v50 = a2;
            do
            {
              int v51 = *(_DWORD *)v49;
              v49 += 2;
              *v48++ = *(_WORD *)(a7 + 2 * ((-1640531535 * v51) >> 16));
              --v50;
            }
            while (v50);
          }
          break;
        default:
          break;
      }
      uint64_t v52 = (char *)v40 + v39;
      if (v37)
      {
        int8x16_t v53 = (char *)&v40[320 * !(v37 & 1)];
        __int16 v55 = *((_WORD *)v53 + 32);
        uint64_t v54 = (uint64_t)(v53 + 64);
        *((_WORD *)v52 + 31) = v55;
        uint64_t v56 = (uint64_t)(v52 + 62);
        *((_WORD *)v53 + 31) = v55;
        uint64_t v57 = (uint64_t)(v53 + 62);
      }
      else
      {
        *((_WORD *)v52 + 31) = 0;
        uint64_t v54 = (uint64_t)(v52 + 62);
        v40[351] = 0;
        uint64_t v56 = (uint64_t)(v52 + 62);
        uint64_t v57 = (uint64_t)(v52 + 62);
      }
      sub_2484CCB5C((uint64_t)&v61, (uint64_t)(v52 + 64), v56, v54, v57, a2, v35, v36);
      ++v37;
      a1 = (unsigned __int16 *)((char *)a1 + a4);
    }
    while (v37 != a3);
    uint64_t v59 = (unsigned __int8 **)v61;
    uint64_t v58 = v62;
    int8x16_t v60 = (uint64_t **)(v61 + 1);
  }
  else
  {
    uint64_t v58 = 0;
    int8x16_t v60 = &v65;
    uint64_t v59 = (unsigned __int8 **)&v64;
  }
  sub_2484CCE4C(*v59, *v60, v58);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

#error "2484D0400: call analysis failed (funcsize=601)"

uint64_t sub_2484D070C(uint64_t result, unint64_t a2, unint64_t a3, void *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28 = 0;
  a28 = *MEMORY[0x263EF8340];
  char v29 = 1;
  v30.i64[0] = 0x10001000100010;
  v30.i64[1] = 0x10001000100010;
  v31.i64[0] = 0x1000100010001;
  v31.i64[1] = 0x1000100010001;
  v32.i64[0] = 0xF000F000F000FLL;
  v32.i64[1] = 0xF000F000F000FLL;
  v33.i64[0] = 0xFFFF0000FFFFLL;
  v33.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    char v34 = v29;
    int16x8_t v35 = *(int16x8_t *)(result + 2 * v28);
    int16x8_t v36 = vclzq_s16(v35);
    uint16x8_t v37 = (uint16x8_t)vsubq_s16(v30, v36);
    int16x8_t v38 = (int16x8_t)vqsubq_u16(v37, v31);
    int16x8_t v39 = (int16x8_t)vqsubq_u16((uint16x8_t)v35, vshlq_u16(v31, (uint16x8_t)v38));
    unsigned long long v40 = *(_OWORD *)&vminq_u16(v37, v32) | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    int8x16_t v41 = vqtbl1q_s8(a6, (int8x16_t)v40);
    int16x8_t v42 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v36), (int8x16_t)(*(_OWORD *)&v41 | __PAIR128__(0x80008000800080, 0x80008000800080)), v41);
    int16x8_t v43 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v40);
    uint64_t v44 = a2 - v28;
    if (a2 < v28) {
      uint64_t v44 = 0;
    }
    uint64_t v45 = a3 - v28;
    if (a3 < v28) {
      uint64_t v45 = 0;
    }
    int v46 = (int8x16_t *)((char *)&v78 + 8 * v28);
    int8x16_t v47 = (int8x16_t)vzip1q_s16(v42, v39);
    int8x16_t v48 = (int8x16_t)vzip2q_s16(v42, v39);
    int8x16_t v49 = (int8x16_t)vzip1q_s16(v43, v38);
    int8x16_t v50 = (int8x16_t)vzip2q_s16(v43, v38);
    unint64_t v51 = 2 * v44;
    unint64_t v52 = 2 * v45;
    if (v52 >= 8) {
      uint64_t v53 = 8;
    }
    else {
      uint64_t v53 = v52;
    }
    if (v52 <= 8) {
      unint64_t v52 = 8;
    }
    if (v51 >= 8) {
      uint64_t v54 = 8;
    }
    else {
      uint64_t v54 = v51;
    }
    if (v51 <= 8) {
      unint64_t v51 = 8;
    }
    int8x16_t v55 = vandq_s8(*(int8x16_t *)((char *)&unk_24855182C - 2 * v54), *(int8x16_t *)((char *)&unk_24855184C - 2 * v53));
    int8x16_t v56 = vandq_s8(v55, v49);
    int8x16_t v57 = vandq_s8(v55, v47);
    unint64_t v58 = v51 - 8;
    if (v58 >= 8) {
      unint64_t v58 = 8;
    }
    int8x16_t v59 = *(int8x16_t *)((char *)&unk_24855182C - 2 * v58);
    uint64_t v60 = v52 - 8;
    if (v52 - 8 >= 8) {
      uint64_t v60 = 8;
    }
    int8x16_t v61 = vandq_s8(v59, *(int8x16_t *)((char *)&unk_24855184C - 2 * v60));
    int8x16_t v62 = vandq_s8(v61, v50);
    int8x16_t v63 = vandq_s8(v61, v48);
    uint32x4_t v64 = (uint32x4_t)vandq_s8(v56, v33);
    *(uint32x4_t *)int v46 = vsraq_n_u32(v64, (uint32x4_t)v56, 0x10uLL);
    v46[1] = vorrq_s8(vandq_s8(v57, v33), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v57, 0x10uLL), v64));
    uint32x4_t v65 = (uint32x4_t)vandq_s8(v62, v33);
    v46[2] = (int8x16_t)vsraq_n_u32(v65, (uint32x4_t)v62, 0x10uLL);
    v46[3] = vorrq_s8((int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v63, 0x10uLL), v65), vandq_s8(v63, v33));
    unint64_t v28 = 8;
    char v29 = 0;
  }
  while ((v34 & 1) != 0);
  uint64_t v66 = 0;
  v67.i64[0] = 0xFFFFFFFFLL;
  v67.i64[1] = 0xFFFFFFFFLL;
  uint64x2_t v68 = (uint64x2_t)vandq_s8(v78, v67);
  uint64x2_t v69 = (uint64x2_t)vandq_s8(a11, v67);
  a21 = vsraq_n_u64(v68, (uint64x2_t)v78, 0x20uLL);
  a22 = vsraq_n_u64(v69, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v68), vandq_s8((int8x16_t)vars0, v67));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v69), vandq_s8(a12, v67));
  uint64x2_t v70 = (uint64x2_t)vandq_s8(a13, v67);
  uint64x2_t v71 = (uint64x2_t)vandq_s8(a15, v67);
  a23 = vsraq_n_u64(v70, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v71, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v70), vandq_s8(a14, v67));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v71), vandq_s8(a16, v67));
  unint64_t v72 = a4[3];
  do
  {
    unint64_t v73 = a17.u64[v66];
    unint64_t v74 = a4[4] | (v73 << v72);
    a4[4] = v74;
    *(void *)(*a4 + a4[2]) = v74;
    uint64_t v75 = a4[3];
    unint64_t v72 = a21.i64[v66] + v75;
    a4[3] = v72;
    if (v72 >= 0x40)
    {
      a4[3] = v72 - 64;
      a4[4] = v73 >> -(char)v75;
      a4[2] += 8;
      LOBYTE(v72) = v72 - 64;
    }
    ++v66;
  }
  while (v66 != 8);
  *(void *)(*a4 + a4[2]) = a4[4];
  uint64_t v77 = a4[2];
  unint64_t v76 = a4[3];
  a4[4] >>= v76 & 0xF8;
  a4[2] = v77 + (v76 >> 3);
  a4[3] = v76 & 7;
  return result;
}

#error "2484D1028: call analysis failed (funcsize=601)"

uint64_t sub_2484D1334(uint64_t result, unint64_t a2, unint64_t a3, void *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28 = 0;
  a28 = *MEMORY[0x263EF8340];
  char v29 = 1;
  v30.i64[0] = 0x10001000100010;
  v30.i64[1] = 0x10001000100010;
  v31.i64[0] = 0x1000100010001;
  v31.i64[1] = 0x1000100010001;
  v32.i64[0] = 0xFFFF0000FFFFLL;
  v32.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    char v33 = v29;
    int16x8_t v34 = *(int16x8_t *)(result + 2 * v28);
    uint16x8_t v35 = (uint16x8_t)vsubq_s16(v30, vclzq_s16(v34));
    int16x8_t v36 = (int16x8_t)vqsubq_u16(v35, v31);
    int16x8_t v37 = (int16x8_t)vqsubq_u16((uint16x8_t)v34, vshlq_u16(v31, (uint16x8_t)v36));
    unsigned long long v38 = *(_OWORD *)&v35 | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    int16x8_t v39 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v38);
    int16x8_t v40 = (int16x8_t)vqtbl1q_s8(a6, (int8x16_t)v38);
    uint64_t v41 = a2 - v28;
    if (a2 < v28) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = a3 - v28;
    if (a3 < v28) {
      uint64_t v42 = 0;
    }
    int16x8_t v43 = (int8x16_t *)((char *)&v75 + 8 * v28);
    int8x16_t v44 = (int8x16_t)vzip1q_s16(v40, v37);
    int8x16_t v45 = (int8x16_t)vzip2q_s16(v40, v37);
    int8x16_t v46 = (int8x16_t)vzip1q_s16(v39, v36);
    int8x16_t v47 = (int8x16_t)vzip2q_s16(v39, v36);
    unint64_t v48 = 2 * v41;
    unint64_t v49 = 2 * v42;
    if (v49 >= 8) {
      uint64_t v50 = 8;
    }
    else {
      uint64_t v50 = v49;
    }
    if (v49 <= 8) {
      unint64_t v49 = 8;
    }
    if (v48 >= 8) {
      uint64_t v51 = 8;
    }
    else {
      uint64_t v51 = v48;
    }
    if (v48 <= 8) {
      unint64_t v48 = 8;
    }
    int8x16_t v52 = vandq_s8(*(int8x16_t *)((char *)&unk_24855182C - 2 * v51), *(int8x16_t *)((char *)&unk_24855184C - 2 * v50));
    int8x16_t v53 = vandq_s8(v52, v46);
    int8x16_t v54 = vandq_s8(v52, v44);
    unint64_t v55 = v48 - 8;
    if (v55 >= 8) {
      unint64_t v55 = 8;
    }
    int8x16_t v56 = *(int8x16_t *)((char *)&unk_24855182C - 2 * v55);
    uint64_t v57 = v49 - 8;
    if (v49 - 8 >= 8) {
      uint64_t v57 = 8;
    }
    int8x16_t v58 = vandq_s8(v56, *(int8x16_t *)((char *)&unk_24855184C - 2 * v57));
    int8x16_t v59 = vandq_s8(v58, v47);
    int8x16_t v60 = vandq_s8(v58, v45);
    uint32x4_t v61 = (uint32x4_t)vandq_s8(v53, v32);
    *(uint32x4_t *)int16x8_t v43 = vsraq_n_u32(v61, (uint32x4_t)v53, 0x10uLL);
    v43[1] = vorrq_s8(vandq_s8(v54, v32), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v54, 0x10uLL), v61));
    uint32x4_t v62 = (uint32x4_t)vandq_s8(v59, v32);
    v43[2] = (int8x16_t)vsraq_n_u32(v62, (uint32x4_t)v59, 0x10uLL);
    v43[3] = vorrq_s8((int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v60, 0x10uLL), v62), vandq_s8(v60, v32));
    unint64_t v28 = 8;
    char v29 = 0;
  }
  while ((v33 & 1) != 0);
  uint64_t v63 = 0;
  v64.i64[0] = 0xFFFFFFFFLL;
  v64.i64[1] = 0xFFFFFFFFLL;
  uint64x2_t v65 = (uint64x2_t)vandq_s8(v75, v64);
  uint64x2_t v66 = (uint64x2_t)vandq_s8(a11, v64);
  a21 = vsraq_n_u64(v65, (uint64x2_t)v75, 0x20uLL);
  a22 = vsraq_n_u64(v66, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v65), vandq_s8((int8x16_t)vars0, v64));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v66), vandq_s8(a12, v64));
  uint64x2_t v67 = (uint64x2_t)vandq_s8(a13, v64);
  uint64x2_t v68 = (uint64x2_t)vandq_s8(a15, v64);
  a23 = vsraq_n_u64(v67, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v68, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v67), vandq_s8(a14, v64));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v68), vandq_s8(a16, v64));
  unint64_t v69 = a4[3];
  do
  {
    unint64_t v70 = a17.u64[v63];
    unint64_t v71 = a4[4] | (v70 << v69);
    a4[4] = v71;
    *(void *)(*a4 + a4[2]) = v71;
    uint64_t v72 = a4[3];
    unint64_t v69 = a21.i64[v63] + v72;
    a4[3] = v69;
    if (v69 >= 0x40)
    {
      a4[3] = v69 - 64;
      a4[4] = v70 >> -(char)v72;
      a4[2] += 8;
      LOBYTE(v69) = v69 - 64;
    }
    ++v63;
  }
  while (v63 != 8);
  *(void *)(*a4 + a4[2]) = a4[4];
  uint64_t v74 = a4[2];
  unint64_t v73 = a4[3];
  a4[4] >>= v73 & 0xF8;
  a4[2] = v74 + (v73 >> 3);
  a4[3] = v73 & 7;
  return result;
}

uint64_t sub_2484D15DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  STACK[0x838] = *MEMORY[0x263EF8340];
  unint64_t v22 = **(void **)a1 + a2;
  uint64_t v23 = **(uint64_t ***)(a1 + 8);
  uint64_t v25 = v23[7];
  unint64_t v24 = v23[8];
  unint64_t v26 = v22 / v24;
  unint64_t v27 = v22 % v24;
  uint64_t v28 = v22 + v23[11] * v23[10] + 2;
  if (**(unsigned char **)(a1 + 16)) {
    uint64_t v28 = 0;
  }
  uint64_t v110 = v28;
  if (v23[6] - (v27 << 8) >= 0x100) {
    unint64_t v29 = 256;
  }
  else {
    unint64_t v29 = v23[6] - (v27 << 8);
  }
  if (v25 - (v26 << 8) >= 0x100) {
    uint64_t v30 = 256;
  }
  else {
    uint64_t v30 = v25 - (v26 << 8);
  }
  uint64_t v108 = *v23;
  BOOL v109 = (uint64_t (*)(uint64_t, char *))v23[5];
  uint64_t v113 = v30;
  uint64x2_t vars0 = (char *)((uint64_t (*)(void))v23[2])();
  if (**(unsigned char **)(a1 + 24))
  {
    unint64_t v111 = (void *)(*(void *)(*(void *)(a1 + 32) + 1952) + 160 * a2);
    uint64_t v33 = a1;
    uint64_t v34 = **(void **)(a1 + 8);
  }
  else
  {
    uint64_t v34 = **(void **)(a1 + 8);
    unint64_t v111 = (void *)(*(void *)(v34 + 1952) + 160 * v110);
    uint64_t v33 = a1;
  }
  int v35 = **(unsigned __int8 **)(v33 + 16);
  if (*(unsigned char *)(v34 + 120))
  {
    unint64_t v36 = *(void *)(v34 + 96);
    if (v36)
    {
      uint64_t v37 = 0;
      uint64_t v38 = (uint64_t)v111;
      do
      {
        if (!v35 || v37) {
          sub_2484BFB04(v38, (16 * v29 * v113) | 4);
        }
        ++v37;
        v38 += 40;
      }
      while (v36 != v37);
    }
    int16x8_t v39 = (_OWORD *)(v34 + 128);
    if (!v35)
    {
      uint64_t v40 = *v111;
      uint64_t v41 = v111[2];
      uint64_t v42 = v111[3];
      uint64_t v43 = v111[4] | (1 << v42);
      v111[3] = v42 + 1;
      v111[4] = v43;
      *(void *)(v40 + v41) = v43;
      unint64_t v44 = v111[3];
      uint64_t v45 = v44 & 7;
      uint64_t v46 = v111[4] >> (v44 & 0xF8);
      unint64_t v47 = v111[2] + (v44 >> 3);
      uint64_t v48 = *v111;
      uint64_t v49 = v46 | (1 << v45);
      v111[2] = v47;
      v111[3] = v45 + 1;
      v111[4] = v49;
      *(void *)(v48 + v47) = v49;
      unint64_t v50 = v111[3];
      uint64_t v51 = v50 & 7;
      uint64_t v52 = v111[4] >> (v50 & 0xF8);
      unint64_t v53 = v111[2] + (v50 >> 3);
      uint64_t v54 = *v111;
      v111[2] = v53;
      v111[3] = v51 + 2;
      v111[4] = v52;
      *(void *)(v54 + v53) = v52;
      uint64_t v56 = v111[2];
      unint64_t v55 = v111[3];
      uint64_t v57 = v111[4] >> (v55 & 0xF8);
      v111[3] = v55 & 7;
      v111[4] = v57;
      v111[2] = v56 + (v55 >> 3);
    }
    for (uint64_t i = 0; i != 768; i += 192)
    {
      int8x16_t v59 = &a21 + i;
      *((void *)v59 + 8) = 0;
      *((void *)v59 + 9) = 0;
      *((void *)v59 + 16) = 0;
      *((void *)v59 + 17) = 0;
    }
    for (uint64_t j = 8; j != 72; j += 16)
      *(void *)(&a13 + j) = 0;
    if (v36)
    {
      uint32x4_t v61 = &a21;
      uint32x4_t v62 = &a13;
      uint64_t v63 = v111;
      unint64_t v64 = v36;
      do
      {
        *(void *)uint32x4_t v62 = v61;
        v62 += 16;
        *(void *)uint32x4_t v61 = v39;
        *((void *)v61 + 1) = v63;
        *((_OWORD *)v61 + 4) = *v39;
        *((_OWORD *)v61 + 8) = *(_OWORD *)((char *)v39 + 19);
        v61 += 192;
        int16x8_t v39 = (_OWORD *)((char *)v39 + 440);
        v63 += 5;
        --v64;
      }
      while (v64);
      sub_2484CB468(&__p, v36);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if (v113)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 1;
      while (1)
      {
        *(_OWORD *)&STACK[0x810] = 0u;
        *(_OWORD *)&STACK[0x820] = 0u;
        *(_OWORD *)&STACK[0x7F0] = 0u;
        *(_OWORD *)&STACK[0x800] = 0u;
        uint64_t vars8 = v69;
        if (!v36) {
          break;
        }
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = (char *)__p + 704 * (v69 & 1) + 64;
        unint64_t v73 = (char *)__p + 704 * (v68 & 1) + 64;
        uint64_t v74 = v73;
        int8x16_t v75 = v72;
        do
        {
          *(&STACK[0x810] + v71) = (unint64_t)&v73[v70 + (v74 & 0x3E)];
          *(&STACK[0x7F0] + v71++) = (unint64_t)&v72[v70 + (v75 & 0x3E)];
          v75 += 1408;
          v70 += 1408;
          v74 += 1408;
        }
        while (v36 != v71);
        switch(v36)
        {
          case 1uLL:
            unint64_t v80 = STACK[0x810];
            if (v29 >= 8)
            {
              uint64_t v94 = 0;
              uint64_t v95 = (uint16x8_t *)STACK[0x810];
              do
              {
                *v95++ = vmovl_u8(*(uint8x8_t *)&vars0[v94]);
                unint64_t v81 = v94 + 8;
                unint64_t v96 = v94 + 16;
                v94 += 8;
              }
              while (v96 <= v29);
            }
            else
            {
              unint64_t v81 = 0;
            }
            if (v81 < v29)
            {
              do
              {
                *(_WORD *)(v80 + 2 * v81) = vars0[v81];
                ++v81;
              }
              while (v29 != v81);
            }
            break;
          case 2uLL:
            unint64_t v82 = STACK[0x810];
            unint64_t v83 = STACK[0x818];
            if (v29 >= 8)
            {
              uint64_t v97 = 0;
              uint64_t v98 = vars0;
              uint64_t v99 = (uint16x8_t *)STACK[0x810];
              uint64_t v100 = (uint16x8_t *)STACK[0x818];
              do
              {
                int8x8x2_t v116 = vld2_s8(v98);
                v98 += 16;
                *v99++ = vmovl_u8((uint8x8_t)v116.val[0]);
                *v100++ = vmovl_u8((uint8x8_t)v116.val[1]);
                unint64_t v84 = v97 + 8;
                unint64_t v101 = v97 + 16;
                v97 += 8;
              }
              while (v101 <= v29);
            }
            else
            {
              unint64_t v84 = 0;
            }
            uint64_t v102 = v29 - v84;
            if (v29 > v84)
            {
              uint64_t v103 = 2 * v84;
              do
              {
                *(_WORD *)(v82 + v103) = vars0[v103];
                *(_WORD *)(v83 + v103) = vars0[v103 + 1];
                v103 += 2;
                --v102;
              }
              while (v102);
            }
            break;
          case 3uLL:
            sub_2484CD1A8(vars0, v29, (int16x8_t *)STACK[0x810], (_OWORD *)STACK[0x818], (_OWORD *)STACK[0x820]);
LABEL_48:
            for (uint64_t k = 0; k != v36; ++k)
            {
              if (v68)
              {
                uint64_t v86 = (_WORD *)*(&STACK[0x7F0] + k);
                *(_WORD *)(*(&STACK[0x810] + k) - 2) = *v86;
                __int16 v87 = *v86;
              }
              else
              {
                __int16 v87 = 0;
                *(_WORD *)(*(&STACK[0x810] + k) - 2) = 0;
                uint64_t v86 = (_WORD *)*(&STACK[0x7F0] + k);
              }
              *(v86 - 1) = v87;
            }
            char v88 = &a13;
            BOOL v89 = (uint64_t *)&STACK[0x7F0];
            int v90 = (uint64_t *)&STACK[0x810];
            unint64_t v91 = v36;
            do
            {
              uint64_t v92 = *v90 - 2;
              uint64_t v93 = v92;
              if (v68)
              {
                uint64_t v92 = *v89;
                uint64_t v93 = *v89 - 2;
              }
              sub_2484CCB5C((uint64_t)v88, *v90, *v90 - 2, v92, v93, v29, v31, v32);
              v88 += 16;
              ++v89;
              ++v90;
              --v91;
            }
            while (v91);
            goto LABEL_57;
          default:
            int8x16_t v79 = (int16x8_t *)STACK[0x810];
            int8x16_t v78 = (_OWORD *)STACK[0x818];
            uint64_t v77 = (_OWORD *)STACK[0x820];
            unint64_t v76 = (uint16x8_t *)STACK[0x828];
            goto LABEL_46;
        }
LABEL_47:
        if (v36) {
          goto LABEL_48;
        }
LABEL_57:
        ++v68;
        uint64_t v69 = (vars8 + 1);
        if (v68 == v113) {
          goto LABEL_70;
        }
      }
      unint64_t v76 = 0;
      uint64_t v77 = 0;
      int8x16_t v78 = 0;
      int8x16_t v79 = 0;
LABEL_46:
      sub_2484CD260(vars0, v29, v79, v78, v77, v76);
      goto LABEL_47;
    }
LABEL_70:
    if (v36)
    {
      uint64_t v104 = &a14;
      do
      {
        sub_2484CCE4C(*(unsigned __int8 **)*(v104 - 1), *(uint64_t **)(*(v104 - 1) + 8), *v104);
        v104 += 2;
        --v36;
      }
      while (v36);
    }
    uint64_t v66 = v108;
    uint64x2_t v65 = v109;
    uint64x2_t v67 = v111;
    if (__p)
    {
      a11 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_2484CFA50((unsigned __int16 *)vars0, v29, v113, 0, v35 != 0, v34 + 128, *(void *)(v34 + 1888), *(void *)(v34 + 96), v111);
    uint64_t v66 = v108;
    uint64x2_t v65 = v109;
    uint64x2_t v67 = v111;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  do
  {
    v106 += v67[v105 + 3] + 8 * v67[v105 + 2];
    v105 += 5;
  }
  while (v105 != 20);
  *(void *)(*(void *)(**(void **)(a1 + 8) + 1976) + 8 * v110) = (unint64_t)(v106 + 7) >> 3;
  return v65(v66, vars0);
}

uint64_t sub_2484D1C24(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
      uint64_t result = a3(a2, i);
  }
  return result;
}

void *sub_2484D1C78(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BCC536DuLL);
}

void sub_2484D1C88(int a1, void *a2)
{
}

uint64_t sub_2484D1C90(uint64_t a1, float *a2, unint64_t a3, int a4)
{
  float v8 = *(float *)(a1 + 152);
  if (v8 >= 295.0 && v8 <= 305.0) {
    return 0;
  }
  float v10 = log2f(v8 * 0.001);
  float v11 = powf(1.111, v10) * 1.2;
  if (a4) {
    float v12 = v11;
  }
  else {
    float v12 = 1.0 / v11;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == 1)
  {
    for (; a3; --a3)
    {
      *a2 = powf(*a2, v12);
      ++a2;
    }
    return 0;
  }
  if (v13 == 3)
  {
    if (a3)
    {
      unint64_t v14 = 0;
      float v15 = *(float *)(a1 + 24);
      float v16 = *(float *)(a1 + 28);
      float v17 = *(float *)(a1 + 32);
      float v18 = v12 + -1.0;
      if (v12 >= 1.0) {
        a4 = 0;
      }
      uint64_t v19 = a2 + 2;
      do
      {
        float v20 = *(v19 - 2);
        float v21 = *(v19 - 1);
        float v22 = *v19;
        float v23 = powf((float)((float)(v21 * v16) + (float)(v20 * v15)) + (float)(*v19 * v17), v18);
        if ((LODWORD(v23) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v24 = v20 * v23;
          float v25 = v21 * v23;
          *(v19 - 2) = v20 * v23;
          *(v19 - 1) = v21 * v23;
          float v26 = v22 * v23;
          *uint64_t v19 = v26;
          if (a4)
          {
            if (v25 >= v26) {
              unint64_t v27 = v19 - 1;
            }
            else {
              unint64_t v27 = v19;
            }
            if (v24 >= *v27) {
              unint64_t v27 = v19 - 2;
            }
            if (*v27 > 1.0)
            {
              float v28 = 1.0 / *v27;
              *(v19 - 2) = v24 * v28;
              *(v19 - 1) = v25 * v28;
              *uint64_t v19 = v26 * v28;
            }
          }
        }
        v14 += 3;
        v19 += 3;
      }
      while (v14 < a3);
    }
    return 0;
  }
  return 1;
}

long long *JxlGetDefaultCms()
{
  return &xmmword_26FC63C70;
}

uint64_t *sub_2484D1E68(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_2483A9D00(*result);
    uint64_t v2 = (void *)v1[16];
    if (v2)
    {
      v1[17] = (uint64_t)v2;
      operator delete(v2);
    }
    unint64_t v3 = (void *)v1[13];
    if (v3)
    {
      v1[14] = (uint64_t)v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v1[10];
    if (v4)
    {
      v1[11] = (uint64_t)v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v1[7];
    if (v5)
    {
      v1[8] = (uint64_t)v5;
      operator delete(v5);
    }
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_2484D1EFC(uint64_t a1, uint64_t a2, unsigned __int32 *a3, int8x16_t *__dst, uint64_t a5, int32x4_t a6, double a7, int32x4_t a8, int8x16_t a9)
{
  float v11 = a3;
  int v14 = *(_DWORD *)(a1 + 160);
  if (v14)
  {
    float v15 = *(float **)(*(void *)(a1 + 80) + 8 * a2);
    unint64_t v16 = *(void *)(a1 + 40) * a5;
    if (v14 == 1)
    {
      if (v16)
      {
        uint64_t v31 = 0;
        unint64_t v32 = 0;
        a6 = vdupq_n_s32(0x3F0CCF16u);
        float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x40295064u);
        a8 = vdupq_n_s32(0x402B570Bu);
        float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xC207A1AD);
        float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x3F3D150Au);
        float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x432E5D5Bu);
        float32x4_t v37 = (float32x4_t)vdupq_n_s32(0xBBCC536D);
        float32x4_t v38 = (float32x4_t)vdupq_n_s32(0xC3D65E50);
        float32x4_t v39 = (float32x4_t)vdupq_n_s32(0x3989DFFFu);
        float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x43D2ACD0u);
        float v41 = 10000.0 / *(float *)(a1 + 152);
        v42.i64[0] = 0x8000000080000000;
        v42.i64[1] = 0x8000000080000000;
        do
        {
          float32x4_t v43 = vmlaq_f32((float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          *(int8x16_t *)&v15[v31] = vbslq_s8(v42, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v39, v43, vmlaq_f32(v37, v43, vmlaq_f32(v35, v43, vmlaq_f32(v33, (float32x4_t)a6, v43)))), vmlaq_f32(v40, v43, vmlaq_f32(v38, v43, vmlaq_f32(v36, v43, vmlaq_f32(v34, (float32x4_t)a8, v43))))), v41), *(int8x16_t *)&a3[v31]);
          v32 += 4;
          v31 += 4;
        }
        while (v32 < v16);
      }
    }
    else if (v14 == 2)
    {
      if (v16)
      {
        a8.i64[0] = 0x8000000080000000;
        a8.i32[2] = 0x80000000;
        a8.i32[3] = 0x80000000;
        unint64_t v44 = *(_DWORD **)(*(void *)(a1 + 80) + 8 * a2);
        uint64_t v45 = *(void *)(a1 + 40) * a5;
        do
        {
          a9.i32[0] = *v11;
          a6.i32[0] = 0;
          if (*(float *)v11 != 0.0)
          {
            double v46 = fabs(*(float *)a9.i32);
            if (v46 <= 0.5)
            {
              *(double *)a6.i64 = *(float *)a9.i32 * *(float *)a9.i32 * 0.333333333;
            }
            else
            {
              int8x16_t v100 = a9;
              *(double *)a6.i64 = exp((v46 + -0.559910729) * 5.59181631);
              a9 = v100;
              a8.i64[0] = 0x8000000080000000;
              a8.i32[2] = 0x80000000;
              a8.i32[3] = 0x80000000;
              *(double *)a6.i64 = (*(double *)a6.i64 + 0.28466892) * 0.0833333333;
            }
            *(float *)a6.i32 = *(double *)a6.i64;
            a6 = (int32x4_t)vbslq_s8((int8x16_t)a8, (int8x16_t)a6, a9);
          }
          *v44++ = a6.i32[0];
          ++v11;
          --v45;
        }
        while (v45);
      }
      if (*(unsigned char *)(a1 + 8))
      {
        int v47 = 1;
        if (sub_2484D1C90(a1, v15, v16, 1)) {
          return v47 ^ 1u;
        }
      }
    }
    else if (v14 == 3 && v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      a6 = vdupq_n_s32(0x3D9E8391u);
      float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
      a8 = vdupq_n_s32(0x3F4BD0EAu);
      float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
      float32x4_t v21 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
      float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
      float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
      float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
      float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
      float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3966B677u);
      float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
      float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      do
      {
        unsigned long long v30 = *(_OWORD *)&a3[v17] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
        *(int8x16_t *)&v15[v17] = vbslq_s8(v29, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v30, v28), (int8x16_t)vdivq_f32(vmlaq_f32(v26, (float32x4_t)v30, vmlaq_f32(v24, (float32x4_t)v30, vmlaq_f32(v22, (float32x4_t)v30, vmlaq_f32((float32x4_t)a8, v19, (float32x4_t)v30)))), vmlaq_f32(v27, (float32x4_t)v30, vmlaq_f32(v25,
                                                       (float32x4_t)v30,
                                                       vmlaq_f32(v23, (float32x4_t)v30, vmlaq_f32(v21, v20, (float32x4_t)v30))))), (int8x16_t)vmulq_f32((float32x4_t)v30, (float32x4_t)a6)), *(int8x16_t *)&a3[v17]);
        v18 += 4;
        v17 += 4;
      }
      while (v18 < v16);
    }
  }
  else
  {
    float v15 = (float *)a3;
  }
  uint64_t v48 = *(void *)(a1 + 40);
  if (v48 == 4)
  {
    if (!*(unsigned char *)(a1 + 156))
    {
      uint64_t v49 = 4 * a5;
      if (4 * a5)
      {
        float32x4_t v50 = (float32x4_t)vdupq_n_s32(0xC2C80000);
        float32x4_t v51 = (float32x4_t)vdupq_n_s32(0x42C80000u);
        uint64_t v52 = *(float32x4_t **)(*(void *)(a1 + 80) + 8 * a2);
        do
        {
          float32x4_t *v52 = vmlaq_f32(v51, v50, *v52);
          ++v52;
          v49 -= 4;
        }
        while (v49);
      }
      goto LABEL_33;
    }
LABEL_31:
    if (v15 != (float *)__dst) {
      memcpy(__dst, v15, 4 * a5 * v48);
    }
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 156)) {
    goto LABEL_31;
  }
LABEL_33:
  (*(void (**)(void))(*(void *)a1 + 8))();
LABEL_34:
  int v53 = *(_DWORD *)(a1 + 164);
  if (!v53)
  {
LABEL_56:
    int v47 = 0;
    return v47 ^ 1u;
  }
  unint64_t v54 = *(void *)(a1 + 48) * a5;
  if (v53 == 1)
  {
    if (v54)
    {
      unint64_t v71 = 0;
      float32x4_t v72 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
      float32x4_t v73 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
      float32x4_t v74 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
      float32x4_t v75 = (float32x4_t)vdupq_n_s32(0xC84A65A6);
      float32x4_t v76 = (float32x4_t)vdupq_n_s32(0xC72B7AD7);
      float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x43074838u);
      float32x4_t v78 = (float32x4_t)vdupq_n_s32(0x467B5314u);
      float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x3EC6B81Cu);
      float32x4_t v80 = (float32x4_t)vdupq_n_s32(0x44B8B702u);
      float32x4_t v81 = (float32x4_t)vdupq_n_s32(0x37257B02u);
      float32x4_t v82 = (float32x4_t)vdupq_n_s32(0x4206DFEEu);
      float32x4_t v83 = (float32x4_t)vdupq_n_s32(0x42418990u);
      float32x4_t v84 = (float32x4_t)vdupq_n_s32(0x43154069u);
      float32x4_t v85 = (float32x4_t)vdupq_n_s32(0x41CF3BC3u);
      float32x4_t v86 = (float32x4_t)vdupq_n_s32(0x42E01F14u);
      float32x4_t v87 = (float32x4_t)vdupq_n_s32(0x425CE93Au);
      float32x4_t v88 = (float32x4_t)vdupq_n_s32(0x42B94632u);
      float32x4_t v89 = (float32x4_t)vdupq_n_s32(0xBF8C4274);
      float32x4_t v90 = (float32x4_t)vdupq_n_s32(0x41A1562Eu);
      float32x4_t v91 = (float32x4_t)vdupq_n_s32(0x3C5D697Du);
      float32x4_t v92 = (float32x4_t)vdupq_n_s32(0x3F8196D9u);
      float v93 = *(float *)(a1 + 152) * 0.0001;
      v94.i64[0] = 0x8000000080000000;
      v94.i64[1] = 0x8000000080000000;
      do
      {
        v95.i64[0] = __PAIR64__(HIDWORD(__dst->i64[0]), *__dst) & 0x7FFFFFFF7FFFFFFFLL;
        v95.i32[2] = __dst->i64[1] & 0x7FFFFFFF;
        v95.i32[3] = HIDWORD(__dst->i64[0]) & 0x7FFFFFFF;
        float32x4_t v96 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v95, v93)));
        void *__dst = vbslq_s8(v94, vbslq_s8((int8x16_t)vcgtq_f32(v72, v95), (int8x16_t)vdivq_f32(vmlaq_f32(v81, v96, vmlaq_f32(v79, v96, vmlaq_f32(v77, v96, vmlaq_f32(v74, v73, v96)))), vmlaq_f32(v82, v96, vmlaq_f32(v80, v96, vmlaq_f32(v78, v96, vmlaq_f32(v76, v75, v96))))), (int8x16_t)vdivq_f32(vmlaq_f32(v91, v96, vmlaq_f32(v89, v96, vmlaq_f32(v87, v96, vmlaq_f32(v84, v83, v96)))), vmlaq_f32(v92,
                                    v96,
                                    vmlaq_f32(v90, v96, vmlaq_f32(v88, v96, vmlaq_f32(v86, v85, v96)))))),
                   *__dst);
        ++__dst;
        v71 += 4;
      }
      while (v71 < v54);
    }
    goto LABEL_56;
  }
  if (v53 != 2)
  {
    if (v53 == 3 && v54)
    {
      unint64_t v55 = 0;
      float32x4_t v56 = (float32x4_t)vdupq_n_s32(0x414EB852u);
      float32x4_t v57 = (float32x4_t)vdupq_n_s32(0x3F3C3A32u);
      float32x4_t v58 = (float32x4_t)vdupq_n_s32(0x3FBCB2C2u);
      float32x4_t v59 = (float32x4_t)vdupq_n_s32(0x3CC6A52Au);
      float32x4_t v60 = (float32x4_t)vdupq_n_s32(0x3F6D0463u);
      float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x3EC7E073u);
      float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x3FAB9FE4u);
      float32x4_t v63 = (float32x4_t)vdupq_n_s32(0x3BAD40B5u);
      float32x4_t v64 = (float32x4_t)vdupq_n_s32(0x3E9B7A50u);
      float32x4_t v65 = (float32x4_t)vdupq_n_s32(0xBA069D6D);
      float32x4_t v66 = (float32x4_t)vdupq_n_s32(0x3C24949Bu);
      float32x4_t v67 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
      v68.i64[0] = 0x8000000080000000;
      v68.i64[1] = 0x8000000080000000;
      do
      {
        v69.i64[0] = __PAIR64__(HIDWORD(__dst->i64[0]), *__dst) & 0x7FFFFFFF7FFFFFFFLL;
        v69.i32[2] = __dst->i64[1] & 0x7FFFFFFF;
        v69.i32[3] = HIDWORD(__dst->i64[0]) & 0x7FFFFFFF;
        float32x4_t v70 = vsqrtq_f32(v69);
        void *__dst = vbslq_s8(v68, vbslq_s8((int8x16_t)vcgtq_f32(v69, v67), (int8x16_t)vdivq_f32(vmlaq_f32(v65, v70, vmlaq_f32(v63, v70, vmlaq_f32(v61, v70, vmlaq_f32(v58, v57, v70)))), vmlaq_f32(v66, v70, vmlaq_f32(v64, v70, vmlaq_f32(v62, v70, vmlaq_f32(v60, v59, v70))))), (int8x16_t)vmulq_f32(v69, v56)), *__dst);
        ++__dst;
        v55 += 4;
      }
      while (v55 < v54);
    }
    goto LABEL_56;
  }
  if (!*(unsigned char *)(a1 + 8) || (int v47 = sub_2484D1C90(a1, (float *)__dst->i32, v54, 0)) == 0)
  {
    if (v54)
    {
      v97.i64[0] = 0x8000000080000000;
      v97.i64[1] = 0x8000000080000000;
      do
      {
        a8.i32[0] = __dst->i32[0];
        a6.i32[0] = 0;
        if (*(float *)__dst->i32 != 0.0)
        {
          double v98 = fabsf(*(float *)a8.i32);
          if (v98 <= 0.0833333333)
          {
            *(double *)a6.i64 = sqrt(v98 * 3.0);
          }
          else
          {
            int32x4_t v101 = a8;
            *(double *)a6.i64 = log(v98 * 12.0 + -0.28466892);
            a8 = v101;
            v97.i64[0] = 0x8000000080000000;
            v97.i64[1] = 0x8000000080000000;
            *(double *)a6.i64 = *(double *)a6.i64 * 0.17883277 + 0.559910729;
          }
          *(float *)a6.i32 = *(double *)a6.i64;
          a6 = (int32x4_t)vbslq_s8(v97, (int8x16_t)a6, (int8x16_t)a8);
        }
        __dst->i32[0] = a6.i32[0];
        __dst = (int8x16_t *)((char *)__dst + 4);
        --v54;
      }
      while (v54);
    }
    goto LABEL_56;
  }
  return v47 ^ 1u;
}

uint64_t sub_2484D26F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 128) + 8 * a2);
}

uint64_t sub_2484D2700(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 80) + 8 * a2);
}

void sub_2484D270C()
{
}

void sub_2484D2EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  sub_24838E770(a16);
  if (__p) {
    operator delete(__p);
  }
  if (v45) {
    sub_24838E770(v45);
  }
  if (v46) {
    sub_24838E770(v46);
  }
  if (a45) {
    operator delete(a45);
  }
  uint64_t v49 = *(void **)(v47 - 240);
  if (v49) {
    operator delete(v49);
  }
  float32x4_t v50 = *(void **)(v47 - 160);
  if (v50) {
    operator delete(v50);
  }
  float32x4_t v51 = *(void **)(v47 - 136);
  if (v51) {
    operator delete(v51);
  }
  sub_2484D648C((void *)(v47 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_2484D2F8C()
{
  uint64_t v0 = off_26BA8B908();
  uint64_t result = *(void *)v0;
  if (*(void *)v0) {
    return result;
  }
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v78 = 0u;
  uint64_t v80 = 0;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v86 = xmmword_26B13FB28;
  uint64_t v85 = 0;
  long long v87 = *(_OWORD *)&off_26B13FB38;
  uint64_t v2 = &qword_269319330;
  long long v88 = xmmword_26B13FB48;
  unint64_t v3 = (long long *)&unk_26523BB68;
  uint64_t v4 = &qword_269319330;
  float32x4_t v79 = &v86;
  while (1)
  {
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      break;
    }
    if (v4 == (uint64_t *)&v76)
    {
      unint64_t v3 = &v76;
      break;
    }
  }
  uint64_t v5 = (long long *)*((void *)v3 + 6);
  if (!v5) {
    uint64_t v5 = &xmmword_26B13FB28;
  }
  uint64_t v6 = (*(uint64_t (**)(long long *, uint64_t))v5)(&v76, 184);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)v6;
    *(void *)(v6 + 176) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    float v8 = (_OWORD *)(v6 + 136);
    long long v9 = v86;
    long long v10 = v87;
    *(_OWORD *)(v6 + 168) = v88;
    *(_OWORD *)(v6 + 152) = v10;
    *(_OWORD *)(v6 + 136) = v9;
    pthread_mutex_lock(&stru_269319240);
    uint64_t *v7 = qword_269319330;
    qword_269319330 = (uint64_t)v7;
    pthread_mutex_unlock(&stru_269319240);
    v7[2] = 0;
    void v7[6] = (uint64_t)v8;
    float v11 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        break;
      }
      if (v2 == v7)
      {
        float v11 = v7;
        break;
      }
    }
    float v12 = (long long *)v11[6];
    if (!v12) {
      float v12 = &xmmword_26B13FB28;
    }
    uint64_t v13 = (uint64_t **)(*((uint64_t (**)(uint64_t *, uint64_t))v12 + 1))(v7, 16);
    if (v13)
    {
      uint64_t v20 = (uint64_t)v13;
      *uint64_t v13 = v7;
      uint64_t v21 = sub_2483890D8(v7, 0xB0u);
      *(void *)(v20 + 8) = v21;
      if (v21)
      {
        v7[1] = v20;
        v7[3] = (uint64_t)sub_248389030(v20, off_26B13FAF0, 8uLL);
        v7[4] = (uint64_t)sub_248389030(v7[1], &unk_2693192C8, 0x20uLL);
        v7[5] = (uint64_t)sub_248389030(v7[1], &unk_2693192A0, 8uLL);
        void v7[6] = (uint64_t)v8;
        v7[7] = (uint64_t)sub_248389030(v7[1], &unk_2693192F8, 8uLL);
        v7[8] = (uint64_t)sub_248389030(v7[1], &unk_2693192F0, 8uLL);
        v7[9] = (uint64_t)sub_248389030(v7[1], &unk_269319308, 8uLL);
        v7[10] = (uint64_t)sub_248389030(v7[1], &unk_269319370, 8uLL);
        v7[13] = (uint64_t)sub_248389030(v7[1], &unk_269319378, 8uLL);
        v7[11] = (uint64_t)sub_248389030(v7[1], &unk_269319388, 8uLL);
        v7[12] = (uint64_t)sub_248389030(v7[1], &unk_2693192E8, 8uLL);
        v7[14] = (uint64_t)sub_248389030(v7[1], &unk_269319300, 8uLL);
        v7[15] = (uint64_t)sub_248389030(v7[1], &unk_2693193B0, 8uLL);
        v7[16] = (uint64_t)sub_248389030(v7[1], &off_26B13FAF8, 0x20uLL);
        *(void *)uint64_t v0 = v7;
        float32x4_t v22 = &qword_269319330;
        while (1)
        {
          float32x4_t v22 = (uint64_t *)*v22;
          if (!v22) {
            break;
          }
          if (v22 == v7) {
            goto LABEL_132;
          }
        }
        uint64_t v7 = (uint64_t *)&unk_26523BB68;
        goto LABEL_132;
      }
      float32x4_t v23 = &qword_269319330;
      float32x4_t v24 = (uint64_t *)&unk_26523BB68;
      while (1)
      {
        float32x4_t v23 = (uint64_t *)*v23;
        if (!v23) {
          break;
        }
        if (v23 == v7)
        {
          float32x4_t v24 = v7;
          break;
        }
      }
      float32x4_t v25 = (long long *)v24[6];
      if (!v25) {
        float32x4_t v25 = &xmmword_26B13FB28;
      }
      (*((void (**)(uint64_t *, uint64_t))v25 + 2))(v7, v20);
    }
    v7[1] = 0;
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v27 = v8[1];
    long long v26 = v8[2];
    v98[0] = *v8;
    v98[1] = v27;
    v98[2] = v26;
    *(void *)&long long v90 = v7[2];
    *(void *)&long long v92 = v98;
    void v7[6] = (uint64_t)v8;
    float32x4_t v28 = &qword_269319330;
    int8x16_t v29 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v28 = (uint64_t *)*v28;
      if (!v28) {
        break;
      }
      if (v28 == v7)
      {
        int8x16_t v29 = v7;
        break;
      }
    }
    unsigned long long v30 = (void *)v29[7];
    if (!v30) {
      unsigned long long v30 = &unk_269319338;
    }
    *unsigned long long v30 = 0;
    uint64_t v31 = &qword_269319330;
    unint64_t v32 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      uint64_t v31 = (uint64_t *)*v31;
      if (!v31) {
        break;
      }
      if (v31 == v7)
      {
        unint64_t v32 = v7;
        break;
      }
    }
    float32x4_t v33 = (void *)v32[10];
    if (!v33) {
      float32x4_t v33 = &unk_269319368;
    }
    *float32x4_t v33 = 0;
    float32x4_t v34 = &qword_269319330;
    float32x4_t v35 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v34 = (uint64_t *)*v34;
      if (!v34) {
        break;
      }
      if (v34 == v7)
      {
        float32x4_t v35 = v7;
        break;
      }
    }
    float32x4_t v36 = (void *)v35[11];
    if (!v36) {
      float32x4_t v36 = &unk_269319380;
    }
    *float32x4_t v36 = 0;
    float32x4_t v37 = &qword_269319330;
    float32x4_t v38 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v37 = (uint64_t *)*v37;
      if (!v37) {
        break;
      }
      if (v37 == v7)
      {
        float32x4_t v38 = v7;
        break;
      }
    }
    float32x4_t v39 = (void *)v38[9];
    if (!v39) {
      float32x4_t v39 = &unk_269319348;
    }
    *float32x4_t v39 = 0;
    float32x4_t v40 = &qword_269319330;
    float v41 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v40 = (uint64_t *)*v40;
      if (!v40) {
        break;
      }
      if (v40 == v7)
      {
        float v41 = v7;
        break;
      }
    }
    int8x16_t v42 = (void *)v41[12];
    if (!v42) {
      int8x16_t v42 = &unk_269319350;
    }
    *int8x16_t v42 = 0;
    float32x4_t v43 = &qword_269319330;
    unint64_t v44 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v43 = (uint64_t *)*v43;
      if (!v43) {
        break;
      }
      if (v43 == v7)
      {
        unint64_t v44 = v7;
        break;
      }
    }
    uint64_t v45 = (void *)v44[8];
    if (!v45) {
      uint64_t v45 = &unk_269319340;
    }
    *uint64_t v45 = 0;
    uint64_t v46 = &qword_269319330;
    uint64_t v47 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      uint64_t v46 = (uint64_t *)*v46;
      if (!v46) {
        break;
      }
      if (v46 == v7)
      {
        uint64_t v47 = v7;
        break;
      }
    }
    uint64_t v48 = (void *)v47[13];
    if (!v48) {
      uint64_t v48 = &unk_269319360;
    }
    void *v48 = 0;
    uint64_t v49 = &qword_269319330;
    float32x4_t v50 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      uint64_t v49 = (uint64_t *)*v49;
      if (!v49) {
        break;
      }
      if (v49 == v7)
      {
        float32x4_t v50 = v7;
        break;
      }
    }
    float32x4_t v51 = (void *)v50[14];
    if (!v51) {
      float32x4_t v51 = &unk_269319358;
    }
    *float32x4_t v51 = 0;
    uint64_t v52 = &qword_269319330;
    int v53 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      uint64_t v52 = (uint64_t *)*v52;
      if (!v52) {
        break;
      }
      if (v52 == v7)
      {
        int v53 = v7;
        break;
      }
    }
    unint64_t v54 = (uint64_t *)v53[15];
    if (!v54) {
      unint64_t v54 = &qword_2693193A8;
    }
    uint64_t *v54 = 0;
    unint64_t v55 = &qword_269319330;
    float32x4_t v56 = (uint64_t *)&unk_26523BB68;
    float32x4_t v57 = &qword_269319330;
    while (1)
    {
      float32x4_t v57 = (uint64_t *)*v57;
      if (!v57) {
        break;
      }
      if (v57 == v7)
      {
        float32x4_t v56 = v7;
        break;
      }
    }
    float32x4_t v58 = (uint64_t (**)())v56[16];
    if (!v58) {
      float32x4_t v58 = &off_26B13FB58;
    }
    *(_OWORD *)float32x4_t v58 = 0u;
    *((_OWORD *)v58 + 1) = 0u;
    float32x4_t v59 = (uint64_t **)v7[1];
    if (v59)
    {
      float32x4_t v60 = v59[1];
      while (v60)
      {
        float32x4_t v61 = v60;
        float32x4_t v60 = (uint64_t *)v60[2];
        if (*v61)
        {
          float32x4_t v62 = *v59;
          if (*v59)
          {
            float32x4_t v63 = &qword_269319330;
            while (1)
            {
              float32x4_t v63 = (uint64_t *)*v63;
              if (!v63) {
                break;
              }
              if (v63 == v62)
              {
                float32x4_t v64 = *v59;
                goto LABEL_97;
              }
            }
          }
          float32x4_t v64 = (uint64_t *)&unk_26523BB68;
LABEL_97:
          float32x4_t v65 = (long long *)v64[6];
          if (!v65) {
            float32x4_t v65 = &xmmword_26B13FB28;
          }
          (*((void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, long long *, uint64_t, void))v65
           + 2))(v62, *v61, v14, v15, v16, v17, v18, v19, v76, *((void *)&v76 + 1), v77, *((void *)&v77 + 1), v78, *((void *)&v78 + 1), v79, v80, v81);
        }
        if (*v59)
        {
          float32x4_t v66 = &qword_269319330;
          while (1)
          {
            float32x4_t v66 = (uint64_t *)*v66;
            if (!v66) {
              break;
            }
            if (v66 == *v59)
            {
              float32x4_t v67 = *v59;
              goto LABEL_106;
            }
          }
        }
        float32x4_t v67 = (uint64_t *)&unk_26523BB68;
LABEL_106:
        int8x16_t v68 = (long long *)v67[6];
        if (!v68) {
          int8x16_t v68 = &xmmword_26B13FB28;
        }
        (*((void (**)(void))v68 + 2))();
      }
      if (*v59)
      {
        float32x4_t v69 = &qword_269319330;
        float32x4_t v70 = (uint64_t *)&unk_26523BB68;
        while (1)
        {
          float32x4_t v69 = (uint64_t *)*v69;
          if (!v69) {
            break;
          }
          if (v69 == *v59)
          {
            float32x4_t v70 = *v59;
            break;
          }
        }
      }
      else
      {
        float32x4_t v70 = (uint64_t *)&unk_26523BB68;
      }
      unint64_t v71 = (long long *)v70[6];
      if (!v71) {
        unint64_t v71 = &xmmword_26B13FB28;
      }
      (*((void (**)(void))v71 + 2))();
    }
    v7[1] = 0;
    pthread_mutex_lock(&stru_269319240);
    while ((uint64_t *)*v55 != v7)
    {
      if (!*v55) {
        goto LABEL_124;
      }
      unint64_t v55 = (uint64_t *)*v55;
    }
    *unint64_t v55 = *v7;
LABEL_124:
    pthread_mutex_unlock(&stru_269319240);
    float32x4_t v72 = &qword_269319330;
    float32x4_t v73 = (long long *)&unk_26523BB68;
    while (1)
    {
      float32x4_t v72 = (uint64_t *)*v72;
      if (!v72) {
        break;
      }
      if (v72 == (uint64_t *)&v89)
      {
        float32x4_t v73 = &v89;
        break;
      }
    }
    float32x4_t v74 = (long long *)*((void *)v73 + 6);
    if (!v74) {
      float32x4_t v74 = &xmmword_26B13FB28;
    }
    (*((void (**)(long long *, uint64_t *))v74 + 2))(&v89, v7);
  }
  *(void *)uint64_t v0 = 0;
  uint64_t v7 = (uint64_t *)&unk_26523BB68;
LABEL_132:
  float32x4_t v75 = (uint64_t (**)())v7[3];
  if (!v75) {
    float32x4_t v75 = &off_26B13FB20;
  }
  *float32x4_t v75 = nullsub_67;
  return *(void *)v0;
}

uint64_t sub_2484D3744(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  double v4 = sub_2483F04FC((int *)a1);
  if (fabs(v5) < 1.0e-12) {
    return 1;
  }
  int v6 = *(_DWORD *)(a1 + 4);
  if (v6 > 8)
  {
    if (v6 == 9)
    {
      _Q3 = (float64x2_t)xmmword_2484DCA90;
      _Q2 = (float64x2_t)xmmword_2484DCAA0;
      _Q7 = (float64x2_t)xmmword_2484DCAB0;
    }
    else
    {
      _Q3 = (float64x2_t)xmmword_2484DCA60;
      _Q2 = (float64x2_t)xmmword_2484DCA70;
      _Q7 = (float64x2_t)xmmword_2484DCA80;
    }
  }
  else if (v6 == 1)
  {
    _Q3 = (float64x2_t)xmmword_2484DCA30;
    _Q2 = (float64x2_t)xmmword_2484DCA40;
    _Q7 = (float64x2_t)xmmword_2484DCA50;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 68);
    v11.i64[0] = (int)v10;
    v11.i64[1] = SHIDWORD(v10);
    float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
    _Q2 = vmulq_f64(vcvtq_f64_s64(v11), v12);
    uint64_t v13 = *(void *)(a1 + 76);
    v11.i64[0] = (int)v13;
    v11.i64[1] = SHIDWORD(v13);
    _Q7 = vmulq_f64(vcvtq_f64_s64(v11), v12);
    uint64_t v14 = *(void *)(a1 + 84);
    v11.i64[0] = (int)v14;
    v11.i64[1] = SHIDWORD(v14);
    _Q3 = vmulq_f64(vcvtq_f64_s64(v11), v12);
  }
  *(float64_t *)&long long v15 = _Q3.f64[0];
  *((void *)&v15 + 1) = *(void *)&_Q2.f64[1];
  int64x2_t v37 = vzip1q_s64((int64x2_t)_Q2, (int64x2_t)_Q7);
  v38[0] = v15;
  v38[1] = vzip2q_s64((int64x2_t)_Q7, (int64x2_t)_Q3);
  double v39 = 1.0 - _Q2.f64[0] - _Q2.f64[1];
  double v40 = 1.0 - _Q7.f64[0] - _Q7.f64[1];
  _D19 = 1.0 - _Q3.f64[0] - _Q3.f64[1];
  __asm { FMLA            D20, D19, V7.D[1] }
  double v41 = _D19;
  double v42 = _D20;
  double v43 = vmlad_n_f64(-(_Q7.f64[0] * _D19), v40, _Q3.f64[0]);
  __asm { FMLA            D23, D17, V3.D[1] }
  double v44 = vmlad_n_f64(vmuld_lane_f64(-_Q3.f64[0], _Q7, 1), _Q3.f64[1], _Q7.f64[0]);
  double v45 = _D23;
  double v46 = vmlad_n_f64(-(_Q3.f64[0] * v39), _D19, _Q2.f64[0]);
  double v47 = vmlad_n_f64(vmuld_lane_f64(-_Q2.f64[0], _Q3, 1), _Q2.f64[1], _Q3.f64[0]);
  __asm { FMLA            D19, D18, V2.D[1] }
  double v48 = _D19;
  double v49 = vmlad_n_f64(-(_Q2.f64[0] * v40), v39, _Q7.f64[0]);
  double v50 = vmlad_n_f64(vmuld_lane_f64(-_Q7.f64[0], _Q2, 1), _Q7.f64[1], _Q2.f64[0]);
  double v24 = vmlad_n_f64(vmlad_n_f64(_D23 * _Q7.f64[0], _D20, _Q2.f64[0]), _D19, _Q3.f64[0]);
  if (fabs(v24) < 1.0e-10) {
    return 1;
  }
  for (uint64_t i = 0; i != 9; ++i)
    *(double *)&v37.i64[i] = 1.0 / v24 * *(double *)((char *)&v42 + i * 8);
  uint64_t v26 = 0;
  _Q3.f64[0] = 1.0 - v4 - v5;
  float v27 = 1.0 / v5;
  double v28 = v27;
  *(float *)_Q2.f64 = _Q3.f64[0] * v28;
  float v29 = v4 * v28;
  double v42 = _Q2.f64[1];
  double v43 = _Q7.f64[1];
  double v44 = _Q3.f64[1];
  double v30 = v29;
  double v31 = *(float *)_Q2.f64;
  unint64_t v32 = (double *)v38;
  do
  {
    double v33 = *(v32 - 1) + *(v32 - 2) * v30;
    double v34 = *v32;
    v32 += 3;
    float v35 = *(&v42 + v26) * (v33 + v34 * v31);
    *(float *)(a2 + 4 * v26++) = v35;
  }
  while (v26 != 3);
  return 0;
}

void sub_2484D39E4(double *a1, uint64_t a2)
{
  uint64_t v388 = *MEMORY[0x263EF8340];
  v369[0] = 0;
  v369[1] = 0;
  uint64_t v370 = 0;
  v367[0] = 0;
  v367[1] = 0;
  uint64_t v368 = 0;
  v365[0] = 0;
  v365[1] = 0;
  uint64_t v366 = 0;
  if (*(_DWORD *)a1 <= 2u)
  {
    int v3 = *((_DWORD *)a1 + 20);
    if (v3 != 2 && (*(_DWORD *)a1 != 2 || !*((_DWORD *)a1 + 24)))
    {
      __str[0] = 0;
      sub_2483EE700(v369, 0x80uLL, __str);
      sub_2483EE828(0, 0, (unint64_t *)v369);
      double v5 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)7)
      {
        sub_2483EE8AC((unint64_t *)v369, 8 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        double v5 = v369[0];
      }
      v5[1] = 543979626;
      sub_2483EE828(71303168, 8, (unint64_t *)v369);
      int v6 = *(_DWORD *)a1;
      uint64_t v7 = v369[0];
      unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0xF)
      {
        sub_2483EE8AC((unint64_t *)v369, 16 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v6 == 2) {
        int v9 = 1919837043;
      }
      else {
        int v9 = 1920233069;
      }
      v7[3] = v9;
      int v10 = *(_DWORD *)a1;
      if (v8 <= 0x13)
      {
        sub_2483EE8AC((unint64_t *)v369, 20 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v10 == 1) {
        int v11 = 1497453127;
      }
      else {
        int v11 = 541214546;
      }
      v7[4] = v11;
      if (sub_2483EE9E4(a1)) {
        int v12 = 543318348;
      }
      else {
        int v12 = 542792024;
      }
      if (v8 <= 0x17)
      {
        sub_2483EE8AC((unint64_t *)v369, 24 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[5] = v12;
      if (v8 <= 0x19)
      {
        sub_2483EE8AC((unint64_t *)v369, 26 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 12) = -7417;
      if (v8 <= 0x1B)
      {
        sub_2483EE8AC((unint64_t *)v369, 28 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 13) = 3072;
      if (v8 <= 0x1D)
      {
        sub_2483EE8AC((unint64_t *)v369, 30 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 14) = 256;
      if (v8 <= 0x1F)
      {
        sub_2483EE8AC((unint64_t *)v369, 32 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 15) = 0;
      if (v8 <= 0x21)
      {
        sub_2483EE8AC((unint64_t *)v369, 34 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 16) = 0;
      if (v8 <= 0x23)
      {
        sub_2483EE8AC((unint64_t *)v369, 36 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 17) = 0;
      if (v8 <= 0x27)
      {
        sub_2483EE8AC((unint64_t *)v369, 40 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[9] = 1886610273;
      if (v8 <= 0x2B)
      {
        sub_2483EE8AC((unint64_t *)v369, 44 - v8);
        uint64_t v7 = v369[0];
      }
      v7[10] = 1280331841;
      sub_2483EE828(0, 44, (unint64_t *)v369);
      sub_2483EE828(0, 48, (unint64_t *)v369);
      sub_2483EE828(0, 52, (unint64_t *)v369);
      sub_2483EE828(0, 56, (unint64_t *)v369);
      sub_2483EE828(0, 60, (unint64_t *)v369);
      sub_2483EE828(*((_DWORD *)a1 + 24), 64, (unint64_t *)v369);
      sub_2483EE828(63190, 68, (unint64_t *)v369);
      sub_2483EE828(0x10000, 72, (unint64_t *)v369);
      sub_2483EE828(54061, 76, (unint64_t *)v369);
      uint64_t v13 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0x53)
      {
        sub_2483EE8AC((unint64_t *)v369, 84 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        uint64_t v13 = v369[0];
      }
      v13[20] = 543979626;
      int v362 = 0;
      int v363 = 0;
      uint64_t v364 = 0;
      sub_2483EE828(0, 0, (unint64_t *)v367);
      uint64_t v360 = 0;
      uint64_t v361 = 0;
      sub_2483EEA38(&v379, off_26523BEA8[*(int *)a1]);
      int v14 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != 2)
      {
        std::string::push_back(&v379, 95);
        int v15 = *((_DWORD *)a1 + 1);
        if (v15 == 2)
        {
          double v16 = a1[1];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)uint64_t v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v16);
          uint64_t v17 = (std::string *)sub_2483EEA38(&v380, __str);
          std::string::push_back(v17, 59);
          *(void *)&long long v386 = v381;
          long long v385 = v380;
          uint64_t v381 = 0;
          long long v380 = 0uLL;
          if ((SBYTE7(v386) & 0x80u) == 0) {
            uint64_t v18 = (const std::string::value_type *)&v385;
          }
          else {
            uint64_t v18 = (const std::string::value_type *)v385;
          }
          if ((SBYTE7(v386) & 0x80u) == 0) {
            std::string::size_type v19 = BYTE7(v386);
          }
          else {
            std::string::size_type v19 = *((void *)&v385 + 1);
          }
          std::string::append(&v379, v18, v19);
          if (SBYTE7(v386) < 0) {
            operator delete((void *)v385);
          }
          if (SHIBYTE(v381) < 0) {
            operator delete((void *)v380);
          }
          double v20 = a1[2];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)uint64_t v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v20);
          sub_2483EEA38(&v385, __str);
          if ((SBYTE7(v386) & 0x80u) == 0) {
            uint64_t v21 = (const std::string::value_type *)&v385;
          }
          else {
            uint64_t v21 = (const std::string::value_type *)v385;
          }
          if ((SBYTE7(v386) & 0x80u) == 0) {
            std::string::size_type v22 = BYTE7(v386);
          }
          else {
            std::string::size_type v22 = *((void *)&v385 + 1);
          }
          std::string::append(&v379, v21, v22);
          if (SBYTE7(v386) < 0)
          {
            float32x4_t v23 = (void *)v385;
LABEL_73:
            operator delete(v23);
          }
        }
        else
        {
          if (v15 == 1)
          {
            double v24 = "D65";
          }
          else if (v15 == 11)
          {
            double v24 = "DCI";
          }
          else
          {
            double v24 = "EER";
          }
          sub_2483EEA38(__str, v24);
          if (v376[7] >= 0) {
            float32x4_t v25 = __str;
          }
          else {
            float32x4_t v25 = *(char **)__str;
          }
          if (v376[7] >= 0) {
            std::string::size_type v26 = v376[7];
          }
          else {
            std::string::size_type v26 = *(void *)&__str[8];
          }
          std::string::append(&v379, v25, v26);
          if ((v376[7] & 0x80000000) != 0)
          {
            float32x4_t v23 = *(void **)__str;
            goto LABEL_73;
          }
        }
      }
      if ((*(_DWORD *)a1 - 1) < 2) {
        goto LABEL_148;
      }
      std::string::push_back(&v379, 95);
      int v27 = *((_DWORD *)a1 + 6);
      if (v27 == 2)
      {
        double v28 = a1[4];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v28);
        float v29 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v29, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        uint64_t v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          double v30 = (const std::string::value_type *)&v385;
        }
        else {
          double v30 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v31 = BYTE7(v386);
        }
        else {
          std::string::size_type v31 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v30, v31);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v32 = a1[5];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v32);
        double v33 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v33, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        uint64_t v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          double v34 = (const std::string::value_type *)&v385;
        }
        else {
          double v34 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v35 = BYTE7(v386);
        }
        else {
          std::string::size_type v35 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v34, v35);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v36 = a1[6];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v36);
        int64x2_t v37 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v37, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        uint64_t v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          float32x4_t v38 = (const std::string::value_type *)&v385;
        }
        else {
          float32x4_t v38 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v39 = BYTE7(v386);
        }
        else {
          std::string::size_type v39 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v38, v39);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v40 = a1[7];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v40);
        double v41 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v41, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        uint64_t v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          double v42 = (const std::string::value_type *)&v385;
        }
        else {
          double v42 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v43 = BYTE7(v386);
        }
        else {
          std::string::size_type v43 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v42, v43);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v44 = a1[8];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v44);
        double v45 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v45, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        uint64_t v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          double v46 = (const std::string::value_type *)&v385;
        }
        else {
          double v46 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v47 = BYTE7(v386);
        }
        else {
          std::string::size_type v47 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v46, v47);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v48 = a1[9];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v48);
        sub_2483EEA38(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0) {
          double v49 = (const std::string::value_type *)&v385;
        }
        else {
          double v49 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v50 = BYTE7(v386);
        }
        else {
          std::string::size_type v50 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v49, v50);
        if (SBYTE7(v386) < 0)
        {
          uint64_t v51 = (void *)v385;
LABEL_147:
          operator delete(v51);
        }
      }
      else
      {
        if (v27 == 1)
        {
          uint64_t v52 = "SRG";
        }
        else if (v27 == 11)
        {
          uint64_t v52 = "DCI";
        }
        else
        {
          uint64_t v52 = "202";
        }
        sub_2483EEA38(__str, v52);
        if (v376[7] >= 0) {
          int v53 = __str;
        }
        else {
          int v53 = *(char **)__str;
        }
        if (v376[7] >= 0) {
          std::string::size_type v54 = v376[7];
        }
        else {
          std::string::size_type v54 = *(void *)&__str[8];
        }
        std::string::append(&v379, v53, v54);
        if ((v376[7] & 0x80000000) != 0)
        {
          uint64_t v51 = *(void **)__str;
          goto LABEL_147;
        }
      }
LABEL_148:
      std::string::push_back(&v379, 95);
      sub_2483EEA38(__str, off_26523BEC8[*((int *)a1 + 24)]);
      if (v376[7] >= 0) {
        unint64_t v55 = __str;
      }
      else {
        unint64_t v55 = *(char **)__str;
      }
      if (v376[7] >= 0) {
        std::string::size_type v56 = v376[7];
      }
      else {
        std::string::size_type v56 = *(void *)&__str[8];
      }
      std::string::append(&v379, v55, v56);
      if ((v376[7] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (v14 != 2)
      {
        int v57 = *((_DWORD *)a1 + 20);
        std::string::push_back(&v379, 95);
        if (v57 != 0xFFFF)
        {
          float32x4_t v62 = "SRG";
          switch(v57)
          {
            case 8:
              float32x4_t v62 = "Lin";
              goto LABEL_174;
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
LABEL_495:
              __break(1u);
              return;
            case 13:
              goto LABEL_174;
            case 16:
              float32x4_t v62 = "PeQ";
              goto LABEL_174;
            case 17:
              float32x4_t v62 = "DCI";
              goto LABEL_174;
            case 18:
              float32x4_t v62 = "HLG";
              goto LABEL_174;
            default:
              if (v57 == 1) {
                float32x4_t v62 = "709";
              }
              else {
                float32x4_t v62 = "TF?";
              }
LABEL_174:
              sub_2483EEA38(__str, v62);
              if (v376[7] >= 0) {
                float32x4_t v63 = __str;
              }
              else {
                float32x4_t v63 = *(char **)__str;
              }
              if (v376[7] >= 0) {
                std::string::size_type v64 = v376[7];
              }
              else {
                std::string::size_type v64 = *(void *)&__str[8];
              }
              std::string::append(&v379, v63, v64);
              if ((v376[7] & 0x80000000) == 0) {
                goto LABEL_183;
              }
              float32x4_t v61 = *(void **)__str;
              break;
          }
          goto LABEL_182;
        }
        std::string::push_back(&v379, 103);
        double v58 = a1[11];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)uint64_t v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v58);
        sub_2483EEA38(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0) {
          float32x4_t v59 = (const std::string::value_type *)&v385;
        }
        else {
          float32x4_t v59 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v60 = BYTE7(v386);
        }
        else {
          std::string::size_type v60 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v59, v60);
        if (SBYTE7(v386) < 0)
        {
          float32x4_t v61 = (void *)v385;
LABEL_182:
          operator delete(v61);
        }
      }
LABEL_183:
      sub_2483EEAE8((uint64_t)&v379, (unint64_t *)v365);
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v379.__r_.__value_.__l.__data_);
      }
      sub_2483EED94((uint64_t)v365, &v361, &v360);
      sub_2483EEEC0("desc", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      sub_2483EEA38(__p, "CC0");
      sub_2483EEAE8((uint64_t)__p, (unint64_t *)v365);
      sub_2483EED94((uint64_t)v365, &v361, &v360);
      sub_2483EEEC0("cprt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      if (*(_DWORD *)a1 == 1)
      {
        double v65 = a1[2];
        if (fabs(v65) < 1.0e-12) {
          goto LABEL_379;
        }
        double v66 = a1[1];
        float v67 = 1.0 / v65;
        double v68 = v67;
        float v69 = v66 * v68;
        *(float *)__str = v69;
        *(_DWORD *)&__str[4] = 1065353216;
        float v70 = (1.0 - v66 - v65) * v68;
        *(float *)&__str[8] = v70;
        int v71 = sub_2483EF004((uint64_t)__str, (unint64_t *)v365);
      }
      else
      {
        int v71 = sub_2483EF004((uint64_t)&unk_248552CC8, (unint64_t *)v365);
      }
      if (!v71)
      {
        sub_2483EED94((uint64_t)v365, &v361, &v360);
        sub_2483EEEC0("wtpt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
        if (*(_DWORD *)a1 == 1)
        {
LABEL_191:
          if (sub_2483EE9E4(a1))
          {
            double v72 = a1[1];
            double v73 = a1[2];
            double v74 = a1[4];
            double v75 = a1[5];
            double v76 = a1[6];
            double v77 = a1[7];
            double v78 = a1[8];
            double v79 = a1[9];
            int v345 = *((_DWORD *)a1 + 20);
            uint64_t v80 = (char *)v365[0];
            int64_t v81 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2483EE8AC((unint64_t *)v365, 4uLL);
              uint64_t v80 = (char *)v365[0];
            }
            *(_DWORD *)&v80[v81] = 829711981;
            sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            long long v82 = v365[0];
            int64_t v83 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              long long v82 = v365[0];
            }
            v82[v83] = 3;
            long long v84 = v365[0];
            int64_t v85 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              long long v84 = v365[0];
            }
            v84[v85] = 3;
            long long v86 = v365[0];
            int64_t v87 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              long long v86 = v365[0];
            }
            v86[v87] = 9;
            long long v88 = v365[0];
            int64_t v89 = (char *)v365[1] - (char *)v365[0];
            double v353 = v79;
            if ((char *)v365[1] - (char *)v365[0] == -1)
            {
              double v90 = v77;
              double v91 = v74;
            }
            else
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              double v90 = v77;
              double v91 = v74;
              long long v88 = v365[0];
            }
            uint64_t v147 = 0;
            v88[v89] = 0;
            do
            {
              for (uint64_t i = 0; i != 3; ++i)
              {
                if (v147 == i) {
                  float v149 = 1.0;
                }
                else {
                  float v149 = 0.0;
                }
                sub_2483EE828((int)(float)((float)(v149 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              }
              ++v147;
            }
            while (v147 != 3);
            for (uint64_t j = 0; j != 3; ++j)
            {
              for (uint64_t k = 0; k != 256; ++k)
              {
                uint64_t v152 = v365[0];
                int64_t v153 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2483EE8AC((unint64_t *)v365, 1uLL);
                  uint64_t v152 = v365[0];
                }
                v152[v153] = k;
              }
            }
            uint64_t v341 = a2;
            unint64_t v154 = 0;
            unint64_t v155 = (float *)v379.__r_.__value_.__r.__words + 1;
            float v156 = v91;
            float v157 = v75;
            float v350 = v157;
            float v351 = v156;
            float v158 = v76;
            float v159 = v90;
            float v160 = v78;
            float v346 = v160;
            float v347 = v158;
            float v161 = v353;
            float v348 = v161;
            float v349 = v159;
            float v162 = v72;
            float v355 = v162;
            float v163 = v73;
            float v354 = v163;
            float v164 = 0.125;
            long long v165 = &xmmword_2484DD000;
LABEL_271:
            unint64_t v342 = v154;
            float v166 = (float)v154 * v164;
            double v167 = pow(v166, 0.0126833135);
            double v168 = v167 + -0.8359375;
            if (v167 + -0.8359375 < 0.0) {
              double v168 = 0.0;
            }
            long double v169 = pow(v168 / (v167 * -18.6875 + 18.8515625), 6.27739464);
            unint64_t v170 = 0;
            *(float *)&long double v169 = v169;
            float v171 = fabsf(*(float *)&v169);
            float v352 = v166;
            if (v166 == 0.0) {
              float v171 = 0.0;
            }
            *(float *)&std::string::size_type v344 = v171;
LABEL_276:
            unint64_t v343 = v170;
            float v172 = (float)v170 * v164;
            double v173 = pow(v172, 0.0126833135);
            double v174 = v173 + -0.8359375;
            if (v173 + -0.8359375 < 0.0) {
              double v174 = 0.0;
            }
            unint64_t v175 = 0;
            float v176 = pow(v174 / (v173 * -18.6875 + 18.8515625), 6.27739464);
            float v177 = fabsf(v176);
            if (v172 == 0.0) {
              float v177 = 0.0;
            }
            *((float *)&v344 + 1) = v177;
            while (1)
            {
              *(float *)int v372 = v352;
              *(float *)&v372[1] = v172;
              float v178 = (float)v175 * v164;
              *(float *)&v372[2] = v178;
              if (sub_2483EF310((uint64_t)&v385, v351, v350, v347, v349, v346, v348, v355, v354)) {
                break;
              }
              float v181 = *((float *)&v385 + 3);
              uint64_t v182 = v386;
              if (v345 == 16)
              {
                float v183 = *(float *)&v386;
                v379.__r_.__value_.__r.__words[0] = v344;
                float v184 = 0.0;
                if (v178 != 0.0)
                {
                  double v185 = pow(v178, 0.0126833135);
                  double v186 = v185 + -0.8359375;
                  if (v185 + -0.8359375 < 0.0) {
                    double v186 = 0.0;
                  }
                  float v187 = pow(v186 / (v185 * -18.6875 + 18.8515625), 6.27739464);
                  float v184 = fabsf(v187);
                }
                *(float *)&v379.__r_.__value_.__r.__words[1] = v184;
                *(_OWORD *)__str = xmmword_2484DCAC0;
                float v181 = *(float *)&v182;
                *(_DWORD *)uint64_t v376 = v182;
                *(float *)&v376[4] = v183;
                float v188 = *((float *)&v182 + 1);
                *(_DWORD *)&v376[8] = HIDWORD(v182);
                *(_OWORD *)&v376[12] = xmmword_2484DCAD0;
                v189.i64[1] = 0x3FD6B4FF3ECEC3F3;
                long long v377 = xmmword_2484DCAE0;
                v189.i64[0] = 0x3B83126F42200000;
                uint64_t v378 = 0x3B83126F42200000;
                sub_2483EF9A0((float *)__str, (float *)&v379, v155, (float *)&v379.__r_.__value_.__r.__words[1], v189);
                float v191 = *((float *)v379.__r_.__value_.__r.__words + 1);
                float v190 = *(float *)&v379.__r_.__value_.__l.__data_;
                float v192 = *(float *)&v379.__r_.__value_.__r.__words[1];
              }
              else
              {
                for (uint64_t m = 0; m != 3; ++m)
                {
                  v180.i32[0] = v372[m];
                  v179.i32[0] = 0;
                  if (*(float *)v180.i32 != 0.0)
                  {
                    double v194 = fabs(*(float *)v180.i32);
                    if (v194 <= 0.5)
                    {
                      *(double *)v179.i64 = *(float *)v180.i32 * *(float *)v180.i32;
                      double v195 = 0.333333333;
                    }
                    else
                    {
                      int8x16_t v356 = v180;
                      *(double *)v179.i64 = exp((v194 + *((double *)v165 + 157)) * 5.59181631);
                      int8x16_t v180 = v356;
                      *(double *)v179.i64 = *(double *)v179.i64 + 0.28466892;
                      double v195 = 0.0833333333;
                    }
                    *(double *)v179.i64 = *(double *)v179.i64 * v195;
                    *(float *)v179.i32 = *(double *)v179.i64;
                    v196.i64[0] = 0x8000000080000000;
                    v196.i64[1] = 0x8000000080000000;
                    int8x16_t v179 = vbslq_s8(v196, v179, v180);
                  }
                  *(_DWORD *)((char *)&v379.__r_.__value_.__l.__data_ + m * 4) = v179.i32[0];
                }
                float v197 = *(float *)&v379.__r_.__value_.__l.__data_;
                float v198 = v172;
                float v199 = *(float *)&v379.__r_.__value_.__r.__words[1];
                float v200 = *((float *)v379.__r_.__value_.__r.__words + 1);
                float v188 = *((float *)&v182 + 1);
                float v201 = powf((float)((float)(*(float *)&v182 * *((float *)v379.__r_.__value_.__r.__words + 1))+ (float)(v181 * *(float *)&v379.__r_.__value_.__l.__data_))+ (float)(*((float *)&v182 + 1) * *(float *)&v379.__r_.__value_.__r.__words[1]), -0.18186);
                float v202 = v201 <= 1000000000.0 ? v201 : 1000000000.0;
                float v190 = v197 * v202;
                float v191 = v200 * v202;
                float v172 = v198;
                *(float *)&v379.__r_.__value_.__l.__data_ = v197 * v202;
                *((float *)v379.__r_.__value_.__r.__words + 1) = v191;
                float v192 = v199 * v202;
                float v183 = *(float *)&v182;
                *(float *)&v379.__r_.__value_.__r.__words[1] = v192;
              }
              uint64_t v203 = 0;
              float v204 = (float)((float)(v183 * v191) + (float)(v181 * v190)) + (float)(v188 * v192);
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)uint64_t v376 = &v379.__r_.__value_.__l.__size_;
              float v205 = 0.0;
              float v206 = 0.0;
              do
              {
                uint64_t v207 = *(float **)&__str[v203];
                float v208 = *v207 - v204;
                float v209 = 1.0 / v208;
                if (v208 == 0.0) {
                  float v209 = 1.0;
                }
                float v210 = *v207 * v209;
                if (v206 < v210 && v208 < 0.0) {
                  float v206 = *v207 * v209;
                }
                float v212 = v210 - v209;
                if (v208 <= 0.0) {
                  float v212 = v206;
                }
                if (v205 < v212) {
                  float v205 = v212;
                }
                v203 += 8;
              }
              while (v203 != 24);
              uint64_t v213 = 0;
              float v214 = v205 + (float)((float)(v206 - v205) * 0.3);
              float v215 = v214 <= 1.0 ? v214 : 1.0;
              float v216 = v214 >= 0.0 ? v215 : 0.0;
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)uint64_t v376 = &v379.__r_.__value_.__l.__size_;
              do
              {
                **(float **)&__str[v213] = **(float **)&__str[v213]
                                         + (float)(v216 * (float)(v204 - **(float **)&__str[v213]));
                v213 += 8;
              }
              while (v213 != 24);
              *(_DWORD *)__str = 1065353216;
              *(void *)&__str[4] = v379.__r_.__value_.__r.__words[0];
              *(_DWORD *)&__str[12] = v379.__r_.__value_.__r.__words[1];
              uint64_t v217 = __str;
              float v218 = 1.0;
              for (uint64_t n = 4; n != 16; n += 4)
              {
                if (v218 < *(float *)&__str[n])
                {
                  float v218 = *(float *)&__str[n];
                  uint64_t v217 = &__str[n];
                }
              }
              uint64_t v220 = 0;
              float v221 = *(float *)v217;
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)uint64_t v376 = &v379.__r_.__value_.__l.__size_;
              float v222 = 1.0 / v221;
              do
              {
                **(float **)&__str[v220] = v222 * **(float **)&__str[v220];
                v220 += 8;
              }
              while (v220 != 24);
              if (sub_2484D6514((uint64_t)__str, v355, v354)) {
                break;
              }
              uint64_t v223 = &v380;
              sub_2483EF4CC((uint64_t)__str, (int *)&v385, (uint64_t)&v380);
              uint64_t v224 = 0;
              float v374 = 0.0;
              uint64_t v373 = 0;
              do
              {
                uint64_t v225 = 0;
                float v226 = *((float *)&v373 + v224);
                do
                {
                  float v226 = v226
                       + (float)(*(float *)((char *)&v379.__r_.__value_.__l.__data_ + v225)
                               * *(float *)((char *)v223 + v225));
                  v225 += 4;
                }
                while (v225 != 12);
                *((float *)&v373 + v224++) = v226;
                uint64_t v223 = (long long *)((char *)v223 + 12);
              }
              while (v224 != 3);
              float v227 = *(float *)&v373 / 0.96421;
              if ((float)(*(float *)&v373 / 0.96421) <= 0.0088565) {
                float v228 = (float)(v227 * 7.787) + 0.13793;
              }
              else {
                float v228 = cbrtf(v227);
              }
              if (*((float *)&v373 + 1) <= 0.0088565) {
                float v229 = (float)(*((float *)&v373 + 1) * 7.787) + 0.13793;
              }
              else {
                float v229 = cbrtf(*((float *)&v373 + 1));
              }
              uint64_t v230 = v165;
              uint64_t v231 = v155;
              float v232 = v374 / 0.82519;
              if ((float)(v374 / 0.82519) <= 0.0088565) {
                float v233 = (float)(v232 * 7.787) + 0.13793;
              }
              else {
                float v233 = cbrtf(v232);
              }
              uint64_t v234 = 0;
              float v235 = (float)(v229 * 1.16) + -0.16;
              if (v235 <= 1.0) {
                float v236 = (float)(v229 * 1.16) + -0.16;
              }
              else {
                float v236 = 1.0;
              }
              if (v235 >= 0.0) {
                float v237 = v236;
              }
              else {
                float v237 = 0.0;
              }
              v371[0] = (int)(float)((float)(v237 * 255.0) + 0.5);
              float v238 = (float)(v228 - v229) * 500.0;
              float v239 = v238 + 128.5;
              if (v238 > 127.0) {
                float v239 = 255.5;
              }
              if (v238 >= -128.0) {
                float v240 = v239;
              }
              else {
                float v240 = 0.5;
              }
              v371[1] = (int)v240;
              float v241 = (float)(v229 - v233) * 200.0;
              float v242 = v241 + 128.5;
              if (v241 > 127.0) {
                float v242 = 255.5;
              }
              if (v241 >= -128.0) {
                float v243 = v242;
              }
              else {
                float v243 = 0.5;
              }
              v371[2] = (int)v243;
              float v164 = 0.125;
              do
              {
                char v244 = v371[v234];
                uint64_t v245 = v365[0];
                int64_t v246 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2483EE8AC((unint64_t *)v365, 1uLL);
                  uint64_t v245 = v365[0];
                }
                v245[v246] = v244;
                ++v234;
              }
              while (v234 != 3);
              ++v175;
              unint64_t v155 = v231;
              long long v165 = v230;
              if (v175 == 9)
              {
                unint64_t v170 = v343 + 1;
                if (v343 != 8) {
                  goto LABEL_276;
                }
                unint64_t v154 = v342 + 1;
                if (v342 != 8) {
                  goto LABEL_271;
                }
                for (uint64_t ii = 0; ii != 3; ++ii)
                {
                  for (juint64_t j = 0; jj != 256; ++jj)
                  {
                    uint64_t v249 = v365[0];
                    int64_t v250 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v249 = v365[0];
                    }
                    v249[v250] = jj;
                  }
                }
                sub_2483EED94((uint64_t)v365, &v361, &v360);
                sub_2483EEEC0("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                if (!sub_2484D6744((unint64_t *)v365))
                {
                  sub_2483EED94((uint64_t)v365, &v361, &v360);
                  a2 = v341;
                  goto LABEL_371;
                }
                goto LABEL_379;
              }
            }
          }
          else
          {
            switch(v3)
            {
              case 8:
                uint64_t v145 = operator new(4uLL);
                *uint64_t v145 = 1065353216;
                *((void *)&v385 + 1) = v145 + 1;
                *(void *)&long long v386 = v145 + 1;
                *(void *)&long long v385 = v145;
                int v146 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                goto LABEL_378;
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
                goto LABEL_495;
              case 13:
                uint64_t v145 = operator new(0x14uLL);
                *((void *)&v385 + 1) = v145 + 5;
                *(void *)&long long v386 = v145 + 5;
                v145[4] = 1025879782;
                *(_OWORD *)uint64_t v145 = xmmword_248552CD4;
                *(void *)&long long v385 = v145;
                int v146 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                goto LABEL_378;
              case 16:
                sub_2483EFC28(__str, 1);
                sub_2483EFDC0((uint64_t *)__str, (unint64_t *)v365);
                goto LABEL_392;
              case 17:
                uint64_t v254 = operator new(0x14uLL);
                *((void *)&v385 + 1) = v254 + 5;
                *(void *)&long long v386 = v254 + 5;
                v254[4] = 0;
                *(_OWORD *)uint64_t v254 = *(_OWORD *)"ff&@";
                *(void *)&long long v385 = v254;
                int v255 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                *((void *)&v385 + 1) = v254;
                operator delete(v254);
                if (v255) {
                  goto LABEL_379;
                }
                goto LABEL_394;
              case 18:
                sub_2483EFC28(__str, 2);
                sub_2483EFDC0((uint64_t *)__str, (unint64_t *)v365);
LABEL_392:
                if (*(void *)__str)
                {
                  *(void *)&__str[8] = *(void *)__str;
                  operator delete(*(void **)__str);
                }
                goto LABEL_394;
              default:
                if (v3 == 1)
                {
                  uint64_t v145 = operator new(0x14uLL);
                  *((void *)&v385 + 1) = v145 + 5;
                  *(void *)&long long v386 = v145 + 5;
                  v145[4] = 1034281812;
                  *(_OWORD *)uint64_t v145 = xmmword_248552CE8;
                  *(void *)&long long v385 = v145;
                  int v146 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                }
                else
                {
                  double v256 = a1[11];
                  uint64_t v145 = operator new(4uLL);
                  float v257 = 1.0 / v256;
                  *(float *)uint64_t v145 = v257;
                  *((void *)&v385 + 1) = v145 + 1;
                  *(void *)&long long v386 = v145 + 1;
                  *(void *)&long long v385 = v145;
                  int v146 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                }
LABEL_378:
                int v258 = v146;
                *((void *)&v385 + 1) = v145;
                operator delete(v145);
                if (v258) {
                  goto LABEL_379;
                }
LABEL_394:
                sub_2483EED94((uint64_t)v365, &v361, &v360);
                int v259 = *(_DWORD *)a1;
                int v252 = v360;
                uint64_t v251 = v361;
                if (v259 == 1)
                {
                  uint64_t v253 = "kTRC";
                }
                else
                {
                  sub_2483EEEC0("rTRC", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  sub_2483EEEC0("gTRC", v251, v252, (unint64_t *)v367, (uint64_t)&v362);
                  uint64_t v253 = "bTRC";
                }
                break;
            }
LABEL_397:
            sub_2483EEEC0(v253, v251, v252, (unint64_t *)v367, (uint64_t)&v362);
            uint64_t v260 = (int *)v362;
            uint64_t v261 = v363;
            uint64_t v262 = (char *)v363 - (unsigned char *)v362;
            sub_2483EE828((unint64_t)((char *)v363 - (unsigned char *)v362) >> 3, 0, (unint64_t *)v367);
            if (v261 != v260)
            {
              int v264 = (int)v369[0];
              int v263 = (int)v369[1];
              if ((unint64_t)(v262 >> 3) <= 1) {
                uint64_t v265 = 1;
              }
              else {
                uint64_t v265 = v262 >> 3;
              }
              uint64_t v266 = 8;
              do
              {
                int v267 = *v260;
                v260 += 2;
                sub_2483EE828(v267 + v263 + LODWORD(v367[1]) - (v264 + LODWORD(v367[0])), v266, (unint64_t *)v367);
                v266 += 12;
                --v265;
              }
              while (v265);
            }
            long long v357 = *(_OWORD *)v367;
            int64x2_t v268 = vaddq_s64(vaddq_s64(*(int64x2_t *)v369, *(int64x2_t *)v367), *(int64x2_t *)v365);
            sub_2483EE828(vsubq_s64(vdupq_laneq_s64(v268, 1), v268).i32[0], 0, (unint64_t *)v369);
            sub_2483EFEC8((void *)a2, (char *)v369[0], (char *)v369[1], (char *)v369[1] - (char *)v369[0]);
            sub_2483EFFD4(a2, *(char **)(a2 + 8), (char *)v357, *((char **)&v357 + 1), *((void *)&v357 + 1) - v357);
            sub_2483EFFD4(a2, *(char **)(a2 + 8), (char *)v365[0], (char *)v365[1], (char *)v365[1] - (char *)v365[0]);
            long long v380 = 0uLL;
            uint64_t v381 = 0;
            sub_2483F01FC(&v380, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
            long long v269 = v380;
            size_t v270 = *((void *)&v380 + 1) - v380;
            if (*((void *)&v380 + 1) - (void)v380 >= 0x44uLL)
            {
              *(_DWORD *)(v380 + 44) = 0;
              *(_DWORD *)(v269 + 64) = 0;
            }
            memset(__str, 0, sizeof(__str));
            *(void *)uint64_t v376 = 0;
            sub_2483F01FC(__str, (const void *)v269, *((uint64_t *)&v269 + 1), v270);
            uint64_t v271 = *(char **)&__str[8];
            if (*(void *)&__str[8] >= *(void *)v376)
            {
              unint64_t v274 = *(void *)__str;
              uint64_t v275 = *(void *)&__str[8] - *(void *)__str;
              uint64_t v276 = *(void *)&__str[8] - *(void *)__str + 1;
              if (v276 < 0) {
                sub_2483E92E8();
              }
              unint64_t v277 = *(void *)v376 - *(void *)__str;
              if (2 * (*(void *)v376 - *(void *)__str) > (unint64_t)v276) {
                uint64_t v276 = 2 * v277;
              }
              if (v277 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v278 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v278 = v276;
              }
              if (v278) {
                uint64_t v272 = operator new(v278);
              }
              else {
                uint64_t v272 = 0;
              }
              unint64_t v279 = (char *)v272 + v278;
              *((unsigned char *)v272 + v275) = 0x80;
              unint64_t v273 = (char *)v272 + v275 + 1;
              if (v271 == (char *)v274)
              {
                uint64_t v272 = (char *)v272 + v275;
              }
              else
              {
                uint64_t v280 = &v271[~v274];
                do
                {
                  char v281 = *--v271;
                  (v280--)[(void)v272] = v281;
                }
                while (v271 != (char *)v274);
                uint64_t v271 = *(char **)__str;
              }
              *(void *)__str = v272;
              *(void *)uint64_t v376 = v279;
              if (v271) {
                operator delete(v271);
              }
            }
            else
            {
              **(unsigned char **)&__str[8] = 0x80;
              uint64_t v272 = *(void **)__str;
              unint64_t v273 = v271 + 1;
            }
            *(void *)&__str[8] = v273;
            unint64_t v282 = (56 - ((_BYTE)v273 - (_BYTE)v272)) & 0x3F;
            unint64_t v283 = v282 + v273 - (unsigned char *)v272;
            v379.__r_.__value_.__s.__data_[0] = 0;
            if (v273 - (unsigned char *)v272 >= v283)
            {
              if (v273 - (unsigned char *)v272 > v283)
              {
                v273 += v282;
                *(void *)&__str[8] = (char *)v272 + v283;
              }
            }
            else
            {
              sub_2483EE700(__str, v282, &v379);
              unint64_t v273 = *(unsigned char **)&__str[8];
            }
            unint64_t v284 = 0;
            do
            {
              unint64_t v285 = (unint64_t)(8 * (*((void *)&v380 + 1) - v380)) >> v284;
              if ((unint64_t)v273 >= *(void *)v376)
              {
                unint64_t v286 = *(void *)__str;
                unint64_t v287 = &v273[-*(void *)__str];
                uint64_t v288 = (uint64_t)&v273[-*(void *)__str + 1];
                if (v288 < 0) {
                  sub_2483E92E8();
                }
                unint64_t v289 = *(void *)v376 - *(void *)__str;
                if (2 * (*(void *)v376 - *(void *)__str) > (unint64_t)v288) {
                  uint64_t v288 = 2 * v289;
                }
                if (v289 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v290 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v290 = v288;
                }
                if (v290) {
                  uint64_t v291 = (char *)operator new(v290);
                }
                else {
                  uint64_t v291 = 0;
                }
                unint64_t v292 = &v287[(void)v291];
                unint64_t v293 = &v287[(void)v291];
                *unint64_t v293 = v285;
                uint64_t v294 = v293 + 1;
                if (v273 != (unsigned char *)v286)
                {
                  uint64_t v295 = &v273[~v286];
                  do
                  {
                    char v296 = *--v273;
                    (v295--)[(void)v291] = v296;
                  }
                  while (v273 != (unsigned char *)v286);
                  unint64_t v273 = *(unsigned char **)__str;
                  unint64_t v292 = v291;
                }
                *(void *)__str = v292;
                *(void *)&__str[8] = v294;
                *(void *)uint64_t v376 = &v291[v290];
                if (v273) {
                  operator delete(v273);
                }
                unint64_t v273 = v294;
              }
              else
              {
                *v273++ = v285;
              }
              *(void *)&__str[8] = v273;
              BOOL v297 = v284 >= 0x38;
              v284 += 8;
            }
            while (!v297);
            int v298 = -271733879;
            int v299 = -1732584194;
            int v300 = 1732584193;
            int v301 = 271733878;
            if (v273 != *(unsigned char **)__str)
            {
              unint64_t v302 = 0;
              do
              {
                char v303 = 0;
                unint64_t v304 = 0;
                char v305 = 1;
                char v306 = 5;
                int v307 = v301;
                int v308 = v299;
                int v309 = v298;
                int v310 = v300;
                do
                {
                  int v311 = v310;
                  int v312 = v309;
                  int v313 = v308;
                  int v310 = v307;
                  int v314 = (v309 | ~v307) ^ v308;
                  int v315 = v303 & 0xF;
                  int v316 = v308 ^ v310 ^ v312;
                  if (v304 <= 0x2F)
                  {
                    int v314 = v316;
                    int v315 = v306 & 0xF;
                  }
                  if (v304 <= 0x1F)
                  {
                    int v314 = v312 & v310 | v313 & ~v310;
                    int v315 = v305 & 0xF;
                  }
                  if (v304 <= 0xF) {
                    int v315 = v304;
                  }
                  uint64_t v317 = (4 * v315) + v302;
                  if (v304 <= 0xF) {
                    int v314 = v310 & ~v312 | v312 & v313;
                  }
                  int v309 = __ROR4__(v314+ v311+ dword_248552E38[v304]+ (*(unsigned __int8 *)(*(void *)__str + v317) | (*(unsigned __int8 *)(*(void *)__str+ (v317 | 1)) << 8) | (*(unsigned __int8 *)(*(void *)__str + (v317 | 2)) << 16) | (*(unsigned __int8 *)(*(void *)__str + (v317 | 3)) << 24)), -byte_248552F38[4 * v304])+ v312;
                  ++v304;
                  v303 += 7;
                  v306 += 3;
                  v305 += 5;
                  int v307 = v313;
                  int v308 = v312;
                }
                while (v304 != 64);
                v300 += v310;
                v298 += v309;
                v299 += v312;
                v301 += v313;
                v302 += 64;
              }
              while (v302 < (unint64_t)&v273[-*(void *)__str]);
            }
            if (*(void *)__str) {
              operator delete(*(void **)__str);
            }
            unint64_t v318 = *(_DWORD **)a2;
            v318[21] = v300;
            v318[22] = v298;
            v318[23] = v299;
            v318[24] = v301;
            if ((void)v380) {
              operator delete((void *)v380);
            }
          }
          goto LABEL_379;
        }
        double v92 = a1[2];
        if (v92 != 0.0)
        {
          float v93 = a1[1];
          float v94 = v92;
          if (!sub_2484D6514((uint64_t)__str, v93, v94))
          {
            long long v385 = *(_OWORD *)__str;
            long long v386 = *(_OWORD *)v376;
            int v387 = *(_DWORD *)&v376[16];
            long long v95 = (char *)v365[0];
            int64_t v96 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2483EE8AC((unint64_t *)v365, 4uLL);
              long long v95 = (char *)v365[0];
            }
            *(_DWORD *)&v95[v96] = 842229363;
            sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            for (kuint64_t k = 0; kk != 36; kk += 4)
            {
              float v98 = *(float *)((char *)&v385 + kk);
              if (v98 < -32768.0 || v98 > 32768.0) {
                goto LABEL_379;
              }
              sub_2483EE828((int)(float)((float)(v98 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("chad", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            int v99 = *(_DWORD *)a1;
            if (*(_DWORD *)a1)
            {
LABEL_211:
              if (v99 != 2) {
                goto LABEL_191;
              }
              int8x16_t v100 = (char *)v365[0];
              int64_t v101 = (char *)v365[1] - (char *)v365[0];
              if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
              {
                sub_2483EE8AC((unint64_t *)v365, 4uLL);
                int8x16_t v100 = (char *)v365[0];
              }
              *(_DWORD *)&v100[v101] = 541213037;
              sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              uint64_t v102 = v365[0];
              int64_t v103 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2483EE8AC((unint64_t *)v365, 1uLL);
                uint64_t v102 = v365[0];
              }
              v102[v103] = 3;
              uint64_t v104 = v365[0];
              int64_t v105 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2483EE8AC((unint64_t *)v365, 1uLL);
                uint64_t v104 = v365[0];
              }
              v104[v105] = 3;
              sub_2483EF598(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(244, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(148, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(80, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              uint64_t v106 = operator new(4uLL);
              *uint64_t v106 = 1065353216;
              *(void *)&__str[8] = v106 + 1;
              *(void *)uint64_t v376 = v106 + 1;
              *(void *)__str = v106;
              int v107 = sub_2483EF5FC((float **)__str, 0, (unint64_t *)v365);
              operator delete(v106);
              if (!v107)
              {
                uint64_t v108 = operator new(4uLL);
                *uint64_t v108 = 1065353216;
                *((void *)&v385 + 1) = v108 + 1;
                *(void *)&long long v386 = v108 + 1;
                *(void *)&long long v385 = v108;
                int v109 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                operator delete(v108);
                if (!v109)
                {
                  uint64_t v110 = operator new(4uLL);
                  *uint64_t v110 = 1065353216;
                  *((void *)&v380 + 1) = v110 + 1;
                  uint64_t v381 = v110 + 1;
                  *(void *)&long long v380 = v110;
                  int v111 = sub_2483EF5FC((float **)&v380, 0, (unint64_t *)v365);
                  operator delete(v110);
                  if (!v111)
                  {
                    uint64_t v340 = a2;
                    for (muint64_t m = 0; mm != 16; ++mm)
                    {
                      uint64_t v113 = v365[0];
                      int64_t v114 = (char *)v365[1] - (char *)v365[0];
                      if ((char *)v365[1] - (char *)v365[0] != -1)
                      {
                        sub_2483EE8AC((unint64_t *)v365, 1uLL);
                        uint64_t v113 = v365[0];
                      }
                      v113[v114] = 2 * (mm < 3);
                    }
                    uint64_t v115 = v365[0];
                    int64_t v116 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v115 = v365[0];
                    }
                    v115[v116] = 2;
                    uint64_t v117 = v365[0];
                    int64_t v118 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v117 = v365[0];
                    }
                    v117[v118] = 0;
                    sub_2483EF598(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    uint64_t v119 = 0;
                    char v120 = 1;
                    do
                    {
                      uint64_t v121 = 0;
                      char v122 = v120;
                      uint64_t v123 = (char *)&unk_248552DD8 + 48 * v119;
                      char v124 = 1;
                      do
                      {
                        uint64_t v125 = 0;
                        char v126 = v124;
                        unint64_t v127 = &v123[24 * v121];
                        char v128 = 1;
                        do
                        {
                          uint64_t v129 = 0;
                          char v130 = v128;
                          uint64_t v131 = &v127[12 * v125];
                          do
                          {
                            sub_2483EF598((int)(float)((float)(*(float *)&v131[v129] * 65535.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                            v129 += 4;
                          }
                          while (v129 != 12);
                          char v128 = 0;
                          uint64_t v125 = 1;
                        }
                        while ((v130 & 1) != 0);
                        char v124 = 0;
                        uint64_t v121 = 1;
                      }
                      while ((v126 & 1) != 0);
                      char v120 = 0;
                      uint64_t v119 = 1;
                    }
                    while ((v122 & 1) != 0);
                    uint64_t v132 = 0;
                    while (1)
                    {
                      float v133 = *(float *)&dword_248552D64[v132];
                      float v134 = *(float *)((char *)&xmmword_248552D70 + v132 * 4);
                      float v135 = *(float *)&dword_248552D80[v132];
                      uint64_t v136 = (float *)operator new(0x14uLL);
                      float v137 = (float)-v133 - cbrtf(v134);
                      float *v136 = 3.0;
                      v136[1] = 1.0 / v135;
                      v136[2] = v137;
                      v136[3] = 0.0;
                      v136[4] = fmaxf(-(float)(v137 * v135), 0.0);
                      memset(&v379, 0, sizeof(v379));
                      sub_2483EF70C(&v379, v136, (uint64_t)(v136 + 5), 5uLL);
                      int v138 = sub_2483EF5FC((float **)&v379, 3, (unint64_t *)v365);
                      if (v379.__r_.__value_.__r.__words[0])
                      {
                        v379.__r_.__value_.__l.__size_ = v379.__r_.__value_.__r.__words[0];
                        operator delete(v379.__r_.__value_.__l.__data_);
                      }
                      operator delete(v136);
                      if (v138) {
                        break;
                      }
                      if (++v132 == 3)
                      {
                        uint64_t v139 = 0;
                        while (1)
                        {
                          float v140 = *(double *)&qword_248552D90[v139];
                          if (v140 < -32768.0 || v140 > 32768.0) {
                            goto LABEL_379;
                          }
                          sub_2483EE828((int)(float)((float)(v140 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                          if (++v139 == 9)
                          {
                            uint64_t v141 = 0;
                            uint64_t v142 = qword_248552D90;
                            while (1)
                            {
                              uint64_t v143 = 0;
                              float v144 = 0.0;
                              do
                              {
                                float v144 = v144 + *(double *)&v142[v143] * *((float *)&xmmword_248552D70 + v143);
                                ++v143;
                              }
                              while (v143 != 3);
                              if (v144 < -32768.0 || v144 > 32768.0) {
                                goto LABEL_379;
                              }
                              sub_2483EE828((int)(float)((float)(v144 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                              ++v141;
                              v142 += 3;
                              if (v141 == 3)
                              {
                                sub_2483EED94((uint64_t)v365, &v361, &v360);
                                a2 = v340;
                                sub_2483EEEC0("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                                if (sub_2484D6744((unint64_t *)v365)) {
                                  goto LABEL_379;
                                }
                                sub_2483EED94((uint64_t)v365, &v361, &v360);
LABEL_371:
                                int v252 = v360;
                                uint64_t v251 = v361;
                                uint64_t v253 = "B2A0";
                                goto LABEL_397;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_379;
            }
            int v319 = *((_DWORD *)a1 + 6);
            if (v319 != 2)
            {
              if (v319 == 11)
              {
                int v320 = *((_DWORD *)a1 + 1);
                if (v320 == 1)
                {
                  LOBYTE(v319) = 12;
                  goto LABEL_474;
                }
                if (v320 == 11)
                {
                  LOBYTE(v319) = 11;
LABEL_474:
                  int v321 = *((_DWORD *)a1 + 20);
                  if (v321 != 2 && v321 != 0xFFFF)
                  {
                    uint64_t v322 = (char *)v365[0];
                    int64_t v323 = (char *)v365[1] - (char *)v365[0];
                    if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 4uLL);
                      uint64_t v322 = (char *)v365[0];
                    }
                    *(_DWORD *)&v322[v323] = 1885563235;
                    sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v324 = v365[0];
                    int64_t v325 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v324 = v365[0];
                    }
                    v324[v325] = v319;
                    unint64_t v326 = v365[0];
                    int64_t v327 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      unint64_t v326 = v365[0];
                    }
                    v326[v327] = v321;
                    uint64_t v328 = v365[0];
                    int64_t v329 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v328 = v365[0];
                    }
                    v328[v329] = 0;
                    unint64_t v330 = v365[0];
                    int64_t v331 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      unint64_t v330 = v365[0];
                    }
                    v330[v331] = 1;
                    sub_2483EED94((uint64_t)v365, &v361, &v360);
                    sub_2483EEEC0("cicp", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  }
                }
              }
              else if (*((_DWORD *)a1 + 1) == 1)
              {
                goto LABEL_474;
              }
            }
            float v332 = a1[4];
            float v333 = a1[5];
            float v334 = a1[6];
            float v335 = a1[7];
            float v336 = a1[8];
            float v337 = a1[9];
            float v338 = a1[1];
            float v339 = a1[2];
            if (sub_2483EF310((uint64_t)__str, v332, v333, v334, v335, v336, v337, v338, v339)) {
              goto LABEL_379;
            }
            if (sub_2484D6514((uint64_t)&v385, v338, v339)) {
              goto LABEL_379;
            }
            sub_2483EF4CC((uint64_t)&v385, (int *)__str, (uint64_t)&v380);
            *(_DWORD *)__str = v380;
            *(_DWORD *)&__str[4] = HIDWORD(v380);
            *(_DWORD *)&__str[8] = v382;
            *(void *)&long long v385 = __PAIR64__(v381, DWORD1(v380));
            DWORD2(v385) = v383;
            *(void *)&long long v380 = __PAIR64__(HIDWORD(v381), DWORD2(v380));
            DWORD2(v380) = v384;
            if (sub_2483EF004((uint64_t)__str, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("rXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2483EF004((uint64_t)&v385, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("gXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2483EF004((uint64_t)&v380, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("bXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            int v99 = *(_DWORD *)a1;
            goto LABEL_211;
          }
        }
      }
LABEL_379:
      if (v359 < 0) {
        operator delete(__p[0]);
      }
      if (v362) {
        operator delete(v362);
      }
      if (v365[0])
      {
        v365[1] = v365[0];
        operator delete(v365[0]);
      }
    }
  }
  if (v367[0]) {
    operator delete(v367[0]);
  }
  if (v369[0]) {
    operator delete(v369[0]);
  }
}

void sub_2484D5FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a58) {
    operator delete(a58);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2484D62A0(uint64_t *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = sub_24838F02C(a1, a2, a3);
  uint64_t v6 = *a4;
  *a4 = v5;
  if (v6)
  {
    sub_24838E770(v6);
    uint64_t v5 = *a4;
  }
  return v5 == 0;
}

void sub_2484D62E4(uint64_t a1, unint64_t a2, char **a3, uint64_t **a4)
{
  unint64_t v7 = (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
  sub_2484479D0(a3, v7 * a2 + 32);
  unint64_t v8 = *a3;
  int v9 = (char *)*a4;
  a4[1] = *a4;
  if (a2 > ((char *)a4[2] - v9) >> 3)
  {
    if (a2 >> 61) {
LABEL_28:
    }
      sub_2483E92E8();
    int v11 = (char *)sub_2483F04AC(a2);
    uint64_t v13 = *a4;
    int v12 = (char *)a4[1];
    int v14 = v11;
    if (v12 != (char *)*a4)
    {
      do
      {
        uint64_t v15 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v12 != (char *)v13);
      int v12 = (char *)*a4;
    }
    *a4 = (uint64_t *)v14;
    a4[1] = (uint64_t *)v11;
    a4[2] = (uint64_t *)&v11[8 * v10];
    if (v12) {
      operator delete(v12);
    }
  }
  if (a2)
  {
    uint64_t v16 = 0;
    unint64_t v17 = (((unint64_t)(v8 + 127) & 0xFFFFFFFFFFFFFF80) - (unint64_t)v8) >> 2;
    uint64_t v18 = a4[1];
    do
    {
      uint64_t v19 = (uint64_t)&(*a3)[4 * v17 + 4 * v16 * v7];
      unint64_t v20 = (unint64_t)a4[2];
      if ((unint64_t)v18 >= v20)
      {
        uint64_t v21 = v18 - *a4;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_28;
        }
        uint64_t v22 = v20 - (void)*a4;
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)sub_2483F04AC(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        std::string::size_type v26 = (uint64_t *)(v24 + 8 * v21);
        *std::string::size_type v26 = v19;
        uint64_t v18 = v26 + 1;
        double v28 = *a4;
        int v27 = (char *)a4[1];
        if (v27 != (char *)*a4)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *--std::string::size_type v26 = v29;
          }
          while (v27 != (char *)v28);
          int v27 = (char *)*a4;
        }
        *a4 = v26;
        a4[1] = v18;
        a4[2] = (uint64_t *)(v24 + 8 * v25);
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *v18++ = v19;
      }
      a4[1] = v18;
      ++v16;
    }
    while (v16 != a2);
  }
}

void *sub_2484D648C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = (void *)v2[16];
    if (v3)
    {
      v2[17] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v2[13];
    if (v4)
    {
      v2[14] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[10];
    if (v5)
    {
      v2[11] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)v2[7];
    if (v6)
    {
      v2[8] = v6;
      operator delete(v6);
    }
    MEMORY[0x24C579F90](v2, 0x1080C40B453349ALL);
  }
  return a1;
}

BOOL sub_2484D6514(uint64_t a1, float a2, float a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  BOOL result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    float v6 = a2 / a3;
    v32[1] = 1.0;
    float v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      BOOL result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        uint64_t v8 = 0;
        int v9 = (char *)dword_248552D1C;
        do
        {
          uint64_t v10 = 0;
          double v11 = 0.0;
          do
          {
            double v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          float v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        uint64_t v13 = 0;
        int v14 = (char *)dword_248552D1C;
        do
        {
          uint64_t v15 = 0;
          double v16 = 0.0;
          do
          {
            double v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_248552D10[v15]);
            ++v15;
          }
          while (v15 != 3);
          float v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        BOOL result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          float v19 = v26 / v29;
          uint64_t v20 = 0;
          int v21 = 0;
          float v22 = v27 / v30;
          uint64_t v23 = 0;
          int v24 = 0;
          float v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2483EF4CC((uint64_t)&v19, dword_248552D1C, (uint64_t)v18);
            sub_2483EF4CC((uint64_t)&unk_248552D40, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2484D6744(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1] - *a1;
  if (v3 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a1, 4uLL);
    unint64_t v2 = *a1;
  }
  *(_DWORD *)(v2 + v3) = 541147757;
  sub_2483EE828(0, a1[1] - *a1, a1);
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  if (v5 != -1)
  {
    sub_2483EE8AC(a1, 1uLL);
    unint64_t v4 = *a1;
  }
  *(unsigned char *)(v4 + v5) = 3;
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1] - *a1;
  if (v7 != -1)
  {
    sub_2483EE8AC(a1, 1uLL);
    unint64_t v6 = *a1;
  }
  *(unsigned char *)(v6 + v7) = 3;
  sub_2483EF598(0, a1[1] - *a1, a1);
  sub_2483EE828(32, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  uint64_t v8 = (float *)operator new(4uLL);
  *uint64_t v8 = 1.0;
  v17[1] = v8 + 1;
  v17[2] = v8 + 1;
  v17[0] = v8;
  int v9 = sub_2483EF5FC(v17, 0, a1);
  operator delete(v8);
  if (v9) {
    return 1;
  }
  uint64_t v10 = (float *)operator new(4uLL);
  *uint64_t v10 = 1.0;
  v16[1] = v10 + 1;
  v16[2] = v10 + 1;
  v16[0] = v10;
  int v11 = sub_2483EF5FC(v16, 0, a1);
  operator delete(v10);
  if (v11) {
    return 1;
  }
  int v14 = (float *)operator new(4uLL);
  *int v14 = 1.0;
  v15[1] = v14 + 1;
  v15[2] = v14 + 1;
  v15[0] = v14;
  uint64_t v12 = sub_2483EF5FC(v15, 0, a1);
  operator delete(v14);
  return v12;
}

void sub_2484D6940(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2484D6960(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = 0;
  v111[2] = *(uint64_t **)MEMORY[0x263EF8340];
  if (!a4 || !a5) {
    return v5;
  }
  *a5 = 0;
  *(_DWORD *)a4 = 3;
  *(_DWORD *)(a4 + 80) = 2;
  if (!a3) {
    return 0;
  }
  uint64_t v90 = 0x100000001;
  int v91 = 1;
  char v92 = 1;
  char v96 = 0;
  float v94 = 0;
  memset(v95, 0, 13);
  float v93 = 0;
  uint64_t v97 = 0xD00000000;
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v10 = (uint64_t *)sub_2484D2F8C();
  uint64_t v11 = sub_24838F02C(v10, a2, a3);
  int64_t v89 = (uint64_t *)v11;
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)v11;
  if (*(_DWORD *)(v11 + 88) >= 4u)
  {
    sub_24838E770(v11);
    return 0;
  }
  int v91 = *(_DWORD *)(v11 + 88);
  int v14 = *(uint64_t **)(v11 + 8);
  if (v14)
  {
    uint64_t v15 = &qword_269319330;
    double v16 = &unk_26523BB68;
    while (1)
    {
      uint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        break;
      }
      if (v15 == v14)
      {
        double v16 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    double v16 = &unk_26523BB68;
  }
  float v17 = (uint64_t (**)())*((void *)v16 + 16);
  if (!v17) {
    float v17 = &off_26B13FB58;
  }
  uint64_t v18 = (unsigned int (*)(void))v17[2];
  if (v18 && !v18()) {
    goto LABEL_111;
  }
  *(void *)&long long v85 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  float64x2_t v82 = 0u;
  uint64_t v19 = *((unsigned int *)v12 + 33);
  if ((int)v19 < 1) {
    goto LABEL_98;
  }
  int v20 = 1667851120;
  do
  {
    uint64_t v21 = 0;
    while (*((_DWORD *)v12 + v21 + 34) != v20)
    {
      if (v19 == ++v21) {
        goto LABEL_98;
      }
    }
    if ((v21 & 0x80000000) != 0) {
      goto LABEL_98;
    }
    int v20 = *((_DWORD *)v12 + v21 + 134);
  }
  while (v20);
  uint64_t v22 = v21;
  uint64_t v23 = (const void *)v12[v21 + 267];
  if (!v23)
  {
    if (*((_DWORD *)v12 + v21 + 234) >= 0xCu) {
      LODWORD(v26) = 12;
    }
    else {
      LODWORD(v26) = *((_DWORD *)v12 + v21 + 234);
    }
    if ((*(unsigned int (**)(void))(*v12 + 288))() && (*(unsigned int (**)(void))(*v12 + 280))())
    {
      float v27 = (uint64_t *)v12[1];
      if (v27)
      {
        float v30 = &qword_269319330;
        float v29 = (uint64_t *)&unk_26523BB68;
        while (1)
        {
          float v30 = (uint64_t *)*v30;
          if (!v30) {
            goto LABEL_53;
          }
          if (v30 == v27)
          {
LABEL_46:
            float v29 = v27;
            goto LABEL_53;
          }
        }
      }
      goto LABEL_52;
    }
LABEL_98:
    std::string::size_type v56 = (uint64_t *)v12[1];
    if (!v56)
    {
LABEL_106:
      double v58 = (uint64_t *)&unk_26523BB68;
LABEL_107:
      float32x4_t v59 = (uint64_t (**)())v58[16];
      if (!v59) {
        float32x4_t v59 = &off_26B13FB58;
      }
      std::string::size_type v60 = (void (*)(void))v59[3];
      if (v60) {
        v60();
      }
      goto LABEL_111;
    }
LABEL_99:
    int v57 = &qword_269319330;
    double v58 = (uint64_t *)&unk_26523BB68;
    while (1)
    {
      int v57 = (uint64_t *)*v57;
      if (!v57) {
        goto LABEL_107;
      }
      if (v57 == v56)
      {
        double v58 = v56;
        goto LABEL_107;
      }
    }
  }
  int v24 = (char *)v12 + 4 * v21;
  if (*((_DWORD *)v24 + 434))
  {
    unsigned int v25 = *((_DWORD *)v24 + 234);
    if (v25 >= 0xC) {
      size_t v26 = 12;
    }
    else {
      size_t v26 = v25;
    }
    memmove(__dst, v23, v26);
    float v27 = (uint64_t *)v12[1];
    if (v27)
    {
      float v28 = &qword_269319330;
      float v29 = (uint64_t *)&unk_26523BB68;
      while (1)
      {
        float v28 = (uint64_t *)*v28;
        if (!v28) {
          goto LABEL_53;
        }
        if (v28 == v27) {
          goto LABEL_46;
        }
      }
    }
LABEL_52:
    float v29 = (uint64_t *)&unk_26523BB68;
LABEL_53:
    double v34 = (uint64_t (**)())v29[16];
    if (!v34) {
      double v34 = &off_26B13FB58;
    }
    goto LABEL_55;
  }
  float v31 = (uint64_t *)v12[1];
  if (v31)
  {
    double v32 = &qword_269319330;
    uint64_t v33 = &unk_26523BB68;
    while (1)
    {
      double v32 = (uint64_t *)*v32;
      if (!v32) {
        break;
      }
      if (v32 == v31)
      {
        uint64_t v33 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    uint64_t v33 = &unk_26523BB68;
  }
  int64x2_t v37 = (uint64_t (**)())*((void *)v33 + 16);
  if (!v37) {
    int64x2_t v37 = &off_26B13FB58;
  }
  float32x4_t v38 = (void (*)(void))v37[3];
  if (v38) {
    v38();
  }
  uint64_t v39 = sub_24838F398(v12, 0x63696370u);
  double v40 = (uint64_t *)v12[1];
  if (v40)
  {
    double v41 = &qword_269319330;
    double v42 = &unk_26523BB68;
    while (1)
    {
      double v41 = (uint64_t *)*v41;
      if (!v41) {
        break;
      }
      if (v41 == v40)
      {
        double v42 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    double v42 = &unk_26523BB68;
  }
  std::string::size_type v43 = (uint64_t (**)())*((void *)v42 + 16);
  if (!v43) {
    std::string::size_type v43 = &off_26B13FB58;
  }
  double v44 = (unsigned int (*)(void))v43[2];
  if (v44 && !v44()) {
    goto LABEL_111;
  }
  if (!v39) {
    goto LABEL_98;
  }
  uint64_t v45 = sub_24838DA04((uint64_t *)v12[1], __dst, 12, "w");
  if (!v45) {
    goto LABEL_98;
  }
  uint64_t v46 = v45;
  uint64_t v47 = v12[v22 + 367];
  double v79 = (uint64_t *)v12[1];
  double v48 = sub_2483A93DC(v79, 1667851120);
  if (!v48)
  {
LABEL_97:
    (*(void (**)(uint64_t))(v46 + 296))(v46);
    goto LABEL_98;
  }
  if (!v47)
  {
    std::string::size_type v56 = v79;
    if (!v79) {
      goto LABEL_106;
    }
    goto LABEL_99;
  }
  double v49 = v48;
  float64x2_t v50 = *(float64x2_t *)v47;
  long long v51 = *(_OWORD *)(v47 + 16);
  long long v52 = *(_OWORD *)(v47 + 32);
  *(void *)&long long v85 = *(void *)(v47 + 48);
  long long v83 = v51;
  long long v84 = v52;
  float64x2_t v82 = v50;
  *((void *)&v84 + 1) = v12[1];
  LODWORD(v85) = *((_DWORD *)v12 + 18);
  *(void *)&long long v106 = bswap32(*(_DWORD *)v47);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, long long *))(v46 + 312))(v46, 8, &v106)
    || !((unsigned int (*)(float64x2_t *, uint64_t, uint64_t, void))v83)(&v82, v46, v39, *(unsigned int *)v49))
  {
    goto LABEL_97;
  }
  LODWORD(v26) = (*(uint64_t (**)(uint64_t))(v46 + 304))(v46);
  (*(void (**)(uint64_t))(v46 + 296))(v46);
  int v53 = (uint64_t *)v12[1];
  if (v53)
  {
    std::string::size_type v54 = &qword_269319330;
    unint64_t v55 = &unk_26523BB68;
    while (1)
    {
      std::string::size_type v54 = (uint64_t *)*v54;
      if (!v54) {
        break;
      }
      if (v54 == v53)
      {
        unint64_t v55 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    unint64_t v55 = &unk_26523BB68;
  }
  double v78 = (uint64_t (**)())v55[16];
  double v34 = &off_26B13FB58;
  if (v78) {
    double v34 = v78;
  }
LABEL_55:
  std::string::size_type v35 = (void (*)(void))v34[3];
  if (v35) {
    v35();
  }
  if (v26 == 12 && !v104 && v105 == 1 && v103 <= 0x12u && ((1 << v103) & 0x72102) != 0)
  {
    int v36 = v102;
    if (v102 > 0xAu)
    {
      if (v102 != 11)
      {
        if (v102 != 12) {
          goto LABEL_111;
        }
        char v96 = 0;
        HIDWORD(v97) = v103;
        LODWORD(v95[1]) = 0;
        LODWORD(v90) = 1;
        int v36 = 11;
        goto LABEL_104;
      }
    }
    else if (v102 != 1 && v102 != 9)
    {
      goto LABEL_111;
    }
    LODWORD(v95[1]) = 0;
    char v96 = 0;
    HIDWORD(v97) = v103;
    if (v102 == 11) {
      LODWORD(v90) = 11;
    }
    else {
      LODWORD(v90) = 1;
    }
LABEL_104:
    HIDWORD(v90) = v36;
LABEL_118:
    sub_2483EBCC0((uint64_t)&v82, (uint64_t)&v90);
    long long v64 = v87;
    *(_OWORD *)(a4 + 64) = v86;
    *(_OWORD *)(a4 + 80) = v64;
    *(void *)(a4 + 96) = v88;
    long long v65 = v83;
    *(float64x2_t *)a4 = v82;
    *(_OWORD *)(a4 + 16) = v65;
    long long v66 = v85;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v66;
    sub_24838E770((uint64_t)v12);
    return 1;
  }
LABEL_111:
  int v61 = 0;
  int v62 = *((_DWORD *)v12 + 20);
  if (v62 != 1129142603 && v62 != 1380401696)
  {
    if (v62 == 1196573017)
    {
      LODWORD(v95[1]) = 1;
      uint64_t v63 = 4390920;
      goto LABEL_119;
    }
    int v61 = 3;
  }
  LODWORD(v95[1]) = v61;
  uint64_t v63 = 4456472;
  if (v62 == 1129142603)
  {
    *a5 = 1;
    goto LABEL_118;
  }
LABEL_119:
  uint64_t v67 = sub_24838F398(v12, 0x77747074u);
  if (v67 && (uint64_t v68 = v67, !sub_24838F398(v12, 0x63686164u)))
  {
    float64x2_t v73 = *(float64x2_t *)v68;
    *(void *)&long long v83 = *(void *)(v68 + 16);
    float64x2_t v82 = v73;
  }
  else
  {
    *(void *)&long long v83 = 0x3FF0000000000000;
    float64x2_t v82 = (float64x2_t)xmmword_248552C98;
    float v69 = (uint64_t *)sub_2483A9894(v10);
    if (v69)
    {
      uint64_t v70 = (uint64_t)v69;
      v111[0] = v12;
      v111[1] = v69;
      uint64_t v109 = 0;
      uint64_t v110 = 0x300000003;
      v108[0] = 0;
      v108[1] = 0;
      uint64_t v71 = sub_2483A9DD4(v10, 2, v111, (uint64_t)&v109, (int *)&v110, (uint64_t)v108, v63, 4784152, 0x500u);
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v107 = 0x3FF0000000000000;
        long long v106 = xmmword_248552CB0;
        v100[0] = 0;
        v100[1] = 0x100000001;
        (*(void (**)(uint64_t, long long *, float64x2_t *, uint64_t, uint64_t, void *))(v71 + 8))(v71, &v106, &v82, 1, 1, v100);
        sub_2483A9D00(v72);
      }
      sub_24838E770(v70);
    }
  }
  float64x2_t v80 = v82;
  uint64_t v81 = v83;
  float64x2_t v82 = vmulq_n_f64(v82, 1.0 / (vaddvq_f64(v82) + *(double *)&v83));
  if (sub_248418F4C((int *)&v90, v82.f64) || sub_2484D71D0(v10, &v89, v80.f64, (unsigned int *)&v90))
  {
    uint64_t v5 = 0;
  }
  else
  {
    sub_2484D7484(v10, &v89, (uint64_t)&v90);
    sub_2483EBCC0((uint64_t)&v82, (uint64_t)&v90);
    long long v75 = v87;
    *(_OWORD *)(a4 + 64) = v86;
    *(_OWORD *)(a4 + 80) = v75;
    *(void *)(a4 + 96) = v88;
    long long v76 = v83;
    *(float64x2_t *)a4 = v82;
    *(_OWORD *)(a4 + 16) = v76;
    long long v77 = v85;
    uint64_t v5 = 1;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v77;
  }
  double v74 = v93;
  sub_24838E770((uint64_t)v12);
  if (v74)
  {
    float v94 = v74;
    operator delete(v74);
  }
  return v5;
}

void sub_2484D71AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  sub_24838E770(v31);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2484D71D0(uint64_t *a1, uint64_t **a2, double *a3, unsigned int *a4)
{
  v36[3] = *MEMORY[0x263EF8340];
  if (a4[10] - 3 <= 0xFFFFFFFD)
  {
    int v6 = *((_DWORD *)*a2 + 20);
    BOOL v7 = v6 == 1129142603 || v6 == 1380401696;
    if (v7 || v6 == 1196573017)
    {
      uint64_t v11 = (double *)sub_24838F398(*a2, 0x7258595Au);
      uint64_t v12 = (double *)sub_24838F398(*a2, 0x6758595Au);
      uint64_t v13 = sub_24838F398(*a2, 0x6258595Au);
      if (v11)
      {
        if (v12)
        {
          int v14 = (double *)v13;
          if (v13) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v15 = sub_2483A9894(a1);
      if (v15)
      {
        uint64_t v16 = v15;
        *(void *)&v27.f64[0] = *a2;
        *(void *)&v27.f64[1] = v15;
        *(void *)&v23.f64[0] = 0x100000001;
        uint64_t v33 = 0;
        float64x2_t v25 = 0uLL;
        if (a4[10] == 1) {
          uint64_t v17 = 4390920;
        }
        else {
          uint64_t v17 = 4456472;
        }
        uint64_t v18 = sub_2483A9DD4(a1, 2, (uint64_t **)&v27, (uint64_t)&v33, (int *)&v23, (uint64_t)&v25, v17, 4784152, 0x500u);
        if (v18)
        {
          uint64_t v19 = v18;
          *(_OWORD *)&v30[8] = 0u;
          memset(&v29[8], 0, 24);
          *(void *)float v29 = 0x3FF0000000000000;
          *(void *)float v30 = 0x3FF0000000000000;
          uint64_t v31 = 0;
          uint64_t v32 = 0x3FF0000000000000;
          *(void *)&long long v21 = 0;
          *((void *)&v21 + 1) = 0x300000003;
          uint64_t v11 = (double *)v34;
          (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t, long long *))(v18 + 8))(v18, v29, v34, 3, 1, &v21);
          uint64_t v12 = (double *)&v35;
          int v14 = (double *)v36;
          sub_2483A9D00(v19);
          sub_24838E770(v16);
LABEL_19:
          long long v21 = xmmword_2484DD040;
          uint64_t v22 = 0x3FEA65A0026966CCLL;
          sub_2483A9C6C((uint64_t)&v27, (double *)&v21, a3, v11);
          sub_2483A9C6C((uint64_t)&v25, (double *)&v21, a3, v12);
          sub_2483A9C6C((uint64_t)&v23, (double *)&v21, a3, v14);
          *(float64x2_t *)float v29 = vmulq_n_f64(v27, 1.0 / (vaddvq_f64(v27) + v28));
          *(float64x2_t *)&v29[16] = vmulq_n_f64(v25, 1.0 / (vaddvq_f64(v25) + v26));
          *(float64x2_t *)float v30 = vmulq_n_f64(v23, 1.0 / (vaddvq_f64(v23) + v24));
          return sub_248419038(a4, (double *)v29);
        }
        sub_24838E770(v16);
      }
      return 1;
    }
  }
  return 0;
}

void sub_2484D7484(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v6 = (_DWORD *)sub_24838F398(*a2, 0x6B545243u);
  if (v6)
  {
    sub_24838AB68(v6);
    if (v7 <= 0.0) {
      goto LABEL_20;
    }
    float v8 = 1.0 / v7;
  }
  else
  {
    uint64_t v9 = 0;
    float v37 = 0.0;
    double v36 = 0.0;
    qmemcpy(__p, "CRTrCRTgCRTb", 12);
    do
    {
      uint64_t v10 = (_DWORD *)sub_24838F398(*a2, *(_DWORD *)((char *)__p + v9));
      if (v10)
      {
        sub_24838AB68(v10);
        if (v11 > 0.0)
        {
          float v12 = 1.0 / v11;
          *(float *)((char *)&v36 + v9) = v12;
        }
      }
      v9 += 4;
    }
    while (v9 != 12);
    float v8 = 0.0;
    if (*(float *)&v36 != 0.0
      && vabds_f32(*(float *)&v36, *((float *)&v36 + 1)) < 0.0001
      && vabds_f32(*((float *)&v36 + 1), v37) < 0.0001)
    {
      float v8 = *(float *)&v36;
    }
  }
  if (v8 != 0.0 && v8 >= 0.00012207 && v8 <= 1.0)
  {
    *(unsigned char *)(a3 + 48) = 0;
    if (fabs(v8 + -1.0) <= 0.001)
    {
      int v32 = 8;
    }
    else if (fabs(v8 + -0.384615385) <= 0.001)
    {
      int v32 = 17;
    }
    else
    {
      *(unsigned char *)(a3 + 48) = 1;
      *(_DWORD *)(a3 + 52) = vcvtas_u32_f32(v8 * 10000000.0);
      int v32 = 2;
    }
    *(_DWORD *)(a3 + 56) = v32;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v39 = 0;
    sub_2483EBCC0((uint64_t)&v36, a3);
    sub_2484D39E4(&v36, (uint64_t)__p);
    if (v33)
    {
      uint64_t v15 = (char *)__p[0];
    }
    else
    {
      uint64_t v15 = (char *)__p[0];
      if (!sub_2484D78B4(a1, (uint64_t)a2, __p[0], (int)__p[1], a3))
      {
LABEL_67:
        if (v15) {
          operator delete(v15);
        }
        return;
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
LABEL_20:
  double v34 = a1;
  uint64_t v35 = (uint64_t)a2;
  uint64_t v15 = (char *)operator new(0x1CuLL);
  uint64_t v16 = v15 + 28;
  unint64_t v17 = 467206;
  uint64_t v18 = v15;
  do
  {
    int v19 = __clz(__rbit64(v17));
    if (v18 >= v16)
    {
      uint64_t v20 = (v18 - v15) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        sub_2483E92E8();
      }
      if ((v16 - v15) >> 1 > v21) {
        unint64_t v21 = (v16 - v15) >> 1;
      }
      if ((unint64_t)(v16 - v15) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        if (v22 >> 62) {
          sub_2483E9338();
        }
        float64x2_t v23 = (char *)operator new(4 * v22);
      }
      else
      {
        float64x2_t v23 = 0;
      }
      double v24 = &v23[4 * v20];
      *(_DWORD *)double v24 = v19;
      float64x2_t v25 = v24 + 4;
      while (v18 != v15)
      {
        int v26 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v24 - 1) = v26;
        v24 -= 4;
      }
      uint64_t v16 = &v23[4 * v22];
      if (v15) {
        operator delete(v15);
      }
      uint64_t v15 = v24;
      uint64_t v18 = v25;
    }
    else
    {
      *(_DWORD *)uint64_t v18 = v19;
      v18 += 4;
    }
    v17 &= v17 - 1;
  }
  while (v17);
  if (v15 != v18)
  {
    float64x2_t v27 = v15;
    while (1)
    {
      int v28 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 != 2) {
        break;
      }
LABEL_49:
      v27 += 4;
      if (v27 == v18) {
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(_DWORD *)(a3 + 56) = v28;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v39 = 0;
    sub_2483EBCC0((uint64_t)&v36, a3);
    sub_2484D39E4(&v36, (uint64_t)__p);
    if (v29)
    {
      float v30 = __p[0];
    }
    else
    {
      float v30 = __p[0];
      if (!sub_2484D78B4(v34, v35, __p[0], (int)__p[1], a3))
      {
        int v31 = 0;
        if (!v30)
        {
LABEL_48:
          if (!v31) {
            goto LABEL_67;
          }
          goto LABEL_49;
        }
LABEL_47:
        __p[1] = v30;
        operator delete(v30);
        goto LABEL_48;
      }
    }
    int v31 = 1;
    if (!v30) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_53:
  if (v15) {
    operator delete(v15);
  }
  *(unsigned char *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 2;
}

void sub_2484D785C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484D78B4(uint64_t *a1, uint64_t a2, const void *a3, int a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_24838F02C(a1, a3, (a4 - a3));
  if (!v7) {
    return 1;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_2483A9894(a1);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 1;
    uint64_t v12 = sub_2483AB290();
    uint64_t v13 = sub_2483AB290();
    uint64_t v14 = v13;
    if (v12) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      if (*(_DWORD *)(a5 + 40) == 1)
      {
        double v22 = 0.001;
        while (1)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0x100000001;
          (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v12 + 8))(v12, &v22, v21, 1, 1, &v18);
          uint64_t v18 = 0;
          uint64_t v19 = 0x100000001;
          (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v14 + 8))(v14, &v22, v20, 1, 1, &v18);
          if (vabdd_f64(v21[0], v20[0]) > 0.0002) {
            break;
          }
          double v22 = v22 + 0.025;
          if (v22 >= 1.0)
          {
            uint64_t v11 = 0;
            break;
          }
        }
      }
      else
      {
        double v22 = 0.001;
        while (2)
        {
          double v23 = 0.001;
          do
          {
            double v24 = 0.001;
            while (2)
            {
              uint64_t v18 = 0;
              uint64_t v19 = 0x100000001;
              (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v12 + 8))(v12, &v22, v21, 1, 1, &v18);
              uint64_t v18 = 0;
              uint64_t v19 = 0x100000001;
              (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v14 + 8))(v14, &v22, v20, 1, 1, &v18);
              for (uint64_t i = 0; i != 3; ++i)
              {
                if (vabdd_f64(v21[i], v20[i]) > 0.0002)
                {
                  uint64_t v11 = 1;
                  goto LABEL_25;
                }
              }
              double v24 = v24 + 0.2;
              if (v24 < 1.0) {
                continue;
              }
              break;
            }
            double v23 = v23 + 0.2;
          }
          while (v23 < 1.0);
          uint64_t v11 = 0;
          double v22 = v22 + 0.2;
          if (v22 < 1.0) {
            continue;
          }
          break;
        }
      }
    }
LABEL_25:
    if (v14) {
      sub_2483A9D00(v14);
    }
    if (v12) {
      sub_2483A9D00(v12);
    }
    sub_24838E770(v10);
  }
  else
  {
    uint64_t v11 = 1;
  }
  sub_24838E770(v8);
  return v11;
}

unint64_t sub_2484D7BCC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = a2 + 2048;
  }
  else {
    uint64_t v2 = 2176;
  }
  unint64_t v3 = v2 + a1;
  unint64_t v4 = (unint64_t)malloc_type_malloc(v2 + a1, 0x40B96322uLL);
  if (!v4) {
    return 0;
  }
  atomic_fetch_add_explicit(&qword_26931BDE8, 1uLL, memory_order_relaxed);
  unint64_t add = atomic_fetch_add(&qword_26931BDF8, v3);
  unint64_t explicit = atomic_load_explicit(&qword_26931BDF0, memory_order_acquire);
  unint64_t v7 = add + v3;
  if (explicit <= v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = explicit;
  }
  unint64_t v9 = explicit;
  atomic_compare_exchange_strong(&qword_26931BDF0, &v9, v8);
  if (v9 != explicit)
  {
    unint64_t v10 = v9;
    do
    {
      if (v9 <= v7) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = v9;
      }
      atomic_compare_exchange_strong(&qword_26931BDF0, &v10, v11);
      BOOL v12 = v10 == v9;
      unint64_t v9 = v10;
    }
    while (!v12);
  }
  unint64_t v13 = v2 + (v4 & 0xFFFFFFFFFFFFF800);
  *(void *)(v13 - 32) = v4;
  *(void *)(v13 - 24) = v3;
  return v13;
}

BOOL sub_2484D7C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), unint64_t (*)(unint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484D870C, sub_2484D865C, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484D865C((unint64_t)v6, i);
  return 0;
}

BOOL sub_2484D7D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484D8634, sub_2484D84D8, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484D84D8((uint64_t)v6, i);
  return 0;
}

BOOL sub_2484D7DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), unint64_t (*)(unint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484D7FF8, sub_2484D7E98, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484D7E98((unint64_t)v6, i);
  return 0;
}

unint64_t sub_2484D7E98(unint64_t result, unsigned int a2)
{
  uint64_t v20 = *(void *)(result + 8);
  uint64_t v2 = (void *)(**(void **)v20 + ((unint64_t)(**(_DWORD **)(v20 + 8) + a2) << 6));
  unint64_t v19 = v2[6];
  if (v19)
  {
    unint64_t v21 = 0;
    unint64_t v22 = a2;
    unint64_t v3 = v2[5];
    uint64_t v17 = v2[2];
    uint64_t v18 = v2[3];
    uint64_t v15 = *(void *)(*(void *)(v20 + 16) + 16);
    uint64_t v16 = *(void *)(*(void *)(v20 + 16) + 24);
    unint64_t v4 = v3;
    do
    {
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = v18 + v17 * v21;
        uint64_t v7 = **(void **)(v20 + 24);
        int v8 = *(_DWORD *)(*(void *)(v20 + 32) + 40);
        unint64_t v9 = *(int **)(v20 + 48);
        int v10 = **(_DWORD **)(v20 + 40);
        unint64_t v11 = *(signed int **)(v20 + 56);
        do
        {
          signed int v12 = *(_DWORD *)(v16 + v15 * v21 + 4 * v5);
          BOOL result = sub_2484D8020(v7, v12, v22, v8, v10, *v9);
          int v13 = result;
          if (v12 >= *v11)
          {
            int v14 = result;
          }
          else
          {
            BOOL result = sub_24849DCCC((uint64_t)v23, v3, v6 + 4 * v5, **(void **)(v20 + 64), v5, v21, **(_DWORD **)(v20 + 72));
            int v14 = v24 + v13;
          }
          *(_DWORD *)(v6 + 4 * v5++) = v14;
        }
        while (v5 < v3);
        unint64_t v4 = v3;
      }
      ++v21;
    }
    while (v21 < v19);
  }
  return result;
}

uint64_t sub_2484D7FF8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

unint64_t sub_2484D8020(uint64_t a1, signed int a2, unint64_t a3, int a4, int a5, int a6)
{
  if (a2 < 0)
  {
    if (a3 > 2) {
      return 0;
    }
    char v11 = a6 - 8;
    if (a6 <= 8) {
      char v11 = 0;
    }
    return ((dword_248553398[(~a2 % 0x8Fu) & 1] * dword_248553038[3 * ((~a2 % 0x8Fu + 1) >> 1) + a3]) << v11);
  }
  else
  {
    int v6 = a4 + 64;
    if (a2 >= a4 && a2 < v6)
    {
      if (a3 <= 2)
      {
        if ((a2 - a4) >> (2 * a3) <= 0) {
          int v7 = -(-((a2 - a4) >> (2 * a3)) & 3);
        }
        else {
          int v7 = ((a2 - a4) >> (2 * a3)) & 3;
        }
        unint64_t v8 = (unint64_t)(((uint64_t)v7 << a6) - v7) >> 2;
        if (a6 <= 3) {
          char v9 = 3;
        }
        else {
          char v9 = a6;
        }
        return ((1 << (v9 - 3)) + v8);
      }
      return 0;
    }
    int v12 = a2 - v6;
    if (a2 < v6) {
      return *(unsigned int *)(a1 + 4 * (a5 * a3 + a2));
    }
    if (a3 > 2) {
      return 0;
    }
    int v13 = v12 / 25;
    if (a3 == 1) {
      v12 /= 5;
    }
    if (a3 == 2) {
      int v12 = v13;
    }
    return (unint64_t)(((uint64_t)(v12 % 5) << a6) - v12 % 5) >> 2;
  }
}

BOOL sub_2484D8184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484D84B0, sub_2484D8234, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484D8234((uint64_t)v6, i);
  return 0;
}

void sub_2484D8234(uint64_t a1, unsigned int a2)
{
  int v3 = *(uint64_t ***)(a1 + 8);
  uint64_t v4 = *(_DWORD *)v3[1] + a2;
  uint64_t v5 = **v3;
  double v34 = v3;
  int v6 = v3[2];
  std::string::size_type v43 = &unk_26FC66948;
  long long v7 = *(_OWORD *)(v6 + 5);
  long long v8 = *(_OWORD *)(v6 + 3);
  long long v44 = *(_OWORD *)(v6 + 1);
  long long v45 = v8;
  long long v46 = v7;
  char v9 = (void *)(v5 + (v4 << 6));
  sub_248428438((uint64_t)v47, (uint64_t)&v43, v9[5]);
  unint64_t v33 = v9[6];
  if (v33)
  {
    unint64_t v36 = a2;
    unint64_t v10 = v9[5];
    uint64_t v31 = v9[2];
    uint64_t v32 = v9[3];
    float v30 = v34[3];
    unint64_t v35 = 0;
    unint64_t v11 = v10;
    do
    {
      if (v11)
      {
        unint64_t v12 = 0;
        uint64_t v13 = v32 + v31 * v35;
        uint64_t v40 = v30[3] + v30[2] * v35;
        uint64_t v39 = v34[4];
        float32x4_t v38 = v34[5];
        int v14 = (int *)v34[7];
        float v37 = (int *)v34[6];
        uint64_t v15 = (signed int *)v34[8];
        if (v35) {
          unint64_t v16 = 0;
        }
        else {
          unint64_t v16 = v10 + 2;
        }
        do
        {
          signed int v17 = *(_DWORD *)(v40 + 4 * v12);
          int v18 = sub_2484D8020(*v39, v17, v36, *((_DWORD *)v38 + 10), *v37, *v14);
          int v19 = v18;
          if (v17 >= *v15)
          {
            int v20 = v18;
          }
          else
          {
            sub_24847C8BC((uint64_t)v41, v10, v13 + 4 * v12, *v34[9], v12, v35, *(_DWORD *)v34[10], (uint64_t)v47);
            int v20 = v42 + v19;
          }
          uint64_t v21 = 0;
          *(_DWORD *)(v13 + 4 * v12) = v20;
          uint64_t v22 = 8 * v20;
          unint64_t v23 = v16 + v12;
          *((_DWORD *)__p + v16 + v12++) = v48 - v22;
          uint64_t v24 = (uint64_t *)v49;
          do
          {
            uint64_t v25 = *(void *)&v47[v21] - v22;
            if (v25 < 0) {
              uint64_t v25 = v22 - *(void *)&v47[v21];
            }
            unint64_t v26 = (unint64_t)(v25 + 3) >> 3;
            uint64_t v27 = *v24;
            v24 += 3;
            *(_DWORD *)(v27 + 4 * v23) = v26;
            *(_DWORD *)(v27 + 4 * ((((uint64_t)(v35 << 63) >> 63) & (v10 + 2)) + v12)) += v26;
            v21 += 8;
          }
          while (v21 != 32);
        }
        while (v12 < v10);
        unint64_t v11 = v10;
      }
      ++v35;
    }
    while (v35 < v33);
  }
  if (__p)
  {
    long long v51 = __p;
    operator delete(__p);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    int v29 = *(void **)&v49[i + 72];
    if (v29)
    {
      *(void *)&v49[i + 80] = v29;
      operator delete(v29);
    }
  }
}

uint64_t sub_2484D84B0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_2484D84D8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(int ***)(a1 + 8);
  uint64_t v3 = a2;
  sub_2484A9458(__p, **v2);
  uint64_t v4 = *v2;
  int64_t v7 = *(void *)v2[1] + ((unint64_t)*v2[2] << 6);
  uint64_t v6 = *(void *)(v7 + 16);
  uint64_t v5 = *(void *)(v7 + 24);
  LODWORD(v7) = **v2;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      *((void *)__p[0] + v8) = *(void *)(*(void *)v2[1] + ((unint64_t)(v8 + *v2[2]) << 6) + 24)
                               + *(void *)(*(void *)v2[1] + ((unint64_t)(v8 + *v2[2]) << 6) + 16)
                               * v3;
      ++v8;
      uint64_t v4 = *v2;
    }
    while (v8 < **v2);
    LODWORD(v7) = **v2;
  }
  char v9 = __p[0];
  uint64_t v18 = *(void *)v2[3];
  if (v18)
  {
    uint64_t v10 = 0;
    uint64_t v17 = v5 + v6 * v3;
    do
    {
      if ((int)v7 >= 1)
      {
        int64_t v11 = 0;
        signed int v12 = *(_DWORD *)(v17 + 4 * v10);
        uint64_t v13 = *(void *)v2[4];
        int v14 = v2[5][10];
        uint64_t v15 = v2[7];
        int v16 = *v2[6];
        do
        {
          *(_DWORD *)(v9[v11] + 4 * v10) = sub_2484D8020(v13, v12, v11, v14, v16, *v15);
          ++v11;
          int64_t v7 = *v4;
        }
        while (v11 < v7);
      }
      ++v10;
    }
    while (v10 != v18);
  }
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
}

uint64_t sub_2484D8634(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

unint64_t sub_2484D865C(unint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = **(void **)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (int *)(*(void *)(**(void **)v2 + ((unint64_t)**(unsigned int **)(v2 + 8) << 6) + 24)
               + *(void *)(**(void **)v2 + ((unint64_t)**(unsigned int **)(v2 + 8) << 6) + 16) * a2);
    int v5 = *(_DWORD *)(*(void *)(v2 + 24) + 40);
    uint64_t v6 = **(void **)(v2 + 32);
    int64_t v7 = *(int **)(v2 + 48);
    int v8 = **(_DWORD **)(v2 + 40);
    do
    {
      if (*v4 >= v5 - 1) {
        int v9 = v5 - 1;
      }
      else {
        int v9 = *v4;
      }
      if (*v4 >= 0) {
        signed int v10 = v9;
      }
      else {
        signed int v10 = 0;
      }
      BOOL result = sub_2484D8020(v6, v10, 0, v5, v8, *v7);
      *v4++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2484D870C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_2484D8734(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_24847271C(result);
    JUMPOUT(0x24C579F90);
  }
  return result;
}

const char *sub_2484D8784()
{
  return "Cms";
}

void sub_2484D8790()
{
}

uint64_t sub_2484D8820(uint64_t a1, void **a2)
{
  *(void *)(a1 + 976) = **a2;
  return 0;
}

BOOL sub_2484D8834(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_2484D8840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a1 + 16);
  signed int v12 = (int *)(*(void *)(**(void **)a2 + 8 * v11) + 64);
  uint64_t v13 = (int *)(*(void *)(*(void *)(*(void *)a2 + 24) + 8 * v11) + 64);
  int v14 = (int *)(*(void *)(*(void *)(*(void *)a2 + 48) + 8 * v11) + 64);
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 984) + 32))(*(void *)(*(void *)(a1 + 984) + 64), a8);
  uint64_t v16 = v15;
  if (a5)
  {
    uint64_t v17 = (_DWORD *)(v15 + 4);
    uint64_t v18 = v12;
    int v19 = v13;
    int v20 = v14;
    uint64_t v21 = a5;
    do
    {
      int v22 = *v18++;
      *(v17 - 1) = v22;
      int v23 = *v19++;
      _DWORD *v17 = v23;
      int v24 = *v20++;
      v17[1] = v24;
      v17 += 3;
      --v21;
    }
    while (v21);
  }
  uint64_t v25 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 984) + 40))(*(void *)(*(void *)(a1 + 984) + 64), a8);
  BOOL v27 = (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 984) + 48))(*(void *)(*(void *)(a1 + 984) + 64), a8, v16, v25, a5) == 0;
  BOOL result = v27;
  BOOL v27 = v27 || a5 == 0;
  if (!v27)
  {
    int v28 = (int *)(v25 + 4);
    do
    {
      *v12++ = *(v28 - 1);
      *v13++ = *v28;
      *v14++ = v28[1];
      v28 += 3;
      --a5;
    }
    while (a5);
    return 0;
  }
  return result;
}

void sub_2484D8974(void *a1)
{
  *a1 = &unk_26FC63AB8;
  a1[124] = &unk_26FC65EC8;
  uint64_t v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  sub_2484D8734(a1 + 123, 0);
  a1[61] = &unk_26FC65EC8;
  uint64_t v3 = (void *)a1[65];
  if (v3)
  {
    a1[66] = v3;
    operator delete(v3);
  }
  a1[36] = &unk_26FC65EC8;
  uint64_t v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  a1[5] = &unk_26FC65EC8;
  int v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_2484D8AA0(void *a1)
{
  *a1 = &unk_26FC63AB8;
  a1[124] = &unk_26FC65EC8;
  uint64_t v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  sub_2484D8734(a1 + 123, 0);
  a1[61] = &unk_26FC65EC8;
  uint64_t v3 = (void *)a1[65];
  if (v3)
  {
    a1[66] = v3;
    operator delete(v3);
  }
  a1[36] = &unk_26FC65EC8;
  uint64_t v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  a1[5] = &unk_26FC65EC8;
  int v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2484D8BAC()
{
}

void sub_2484D91F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *double v74 = &unk_26FC65EC8;
  double v79 = *v75;
  if (*v75)
  {
    v70[129] = v79;
    operator delete(v79);
  }
  sub_2484D8734(v70 + 123, 0);
  *long long v77 = v73;
  float64x2_t v80 = *(void **)(v76 + 480);
  if (v80)
  {
    v70[66] = v80;
    operator delete(v80);
  }
  v70[36] = v72;
  uint64_t v81 = (void *)v70[40];
  if (v81)
  {
    v70[41] = v81;
    operator delete(v81);
  }
  v70[5] = v71;
  float64x2_t v82 = (void *)v70[9];
  if (v82)
  {
    v70[10] = v82;
    operator delete(v82);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a14) {
    operator delete(a14);
  }
  MEMORY[0x24C579F90](v70, 0x10B1C400044D29ALL);
  _Unwind_Resume(a1);
}

int64x2_t sub_2484D9334(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 600; i += 40)
  {
    uint64_t v3 = a1 + i;
    uint64_t v4 = *(void *)(a1 + i + 24);
    *(void *)(v3 + 16) = *(void *)(a1 + i + 16) + *(void *)(a2 + i + 16);
    *(int64x2_t *)uint64_t v3 = vaddq_s64(*(int64x2_t *)(a1 + i), *(int64x2_t *)(a2 + i));
    *(void *)(v3 + 24) = v4 + *(void *)(a2 + i + 24);
    *(double *)(v3 + 32) = *(double *)(a2 + i + 32) + *(double *)(a1 + i + 32);
  }
  int64x2_t v5 = *(int64x2_t *)(a1 + 616);
  *(int64x2_t *)(a1 + 600) = vaddq_s64(*(int64x2_t *)(a1 + 600), *(int64x2_t *)(a2 + 600));
  *(int64x2_t *)(a1 + 616) = vaddq_s64(v5, *(int64x2_t *)(a2 + 616));
  int64x2_t v6 = *(int64x2_t *)(a1 + 648);
  *(int64x2_t *)(a1 + 632) = vaddq_s64(*(int64x2_t *)(a1 + 632), *(int64x2_t *)(a2 + 632));
  *(int64x2_t *)(a1 + 648) = vaddq_s64(v6, *(int64x2_t *)(a2 + 648));
  int64x2_t v7 = *(int64x2_t *)(a1 + 680);
  *(int64x2_t *)(a1 + 664) = vaddq_s64(*(int64x2_t *)(a1 + 664), *(int64x2_t *)(a2 + 664));
  int64x2_t result = vaddq_s64(v7, *(int64x2_t *)(a2 + 680));
  *(int64x2_t *)(a1 + 680) = result;
  *(_DWORD *)(a1 + 696) += *(_DWORD *)(a2 + 696);
  return result;
}

uint64_t sub_2484D93F8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v35[3] = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 624)) {
    return 0;
  }
  sub_2483F0C3C((uint64_t)v33, *a3, a3[1]);
  if (v34)
  {
    unsigned int v30 = v34;
  }
  else
  {
    sub_2483F0E78((uint64_t)v31, (uint64_t)v33);
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)a3 + 2);
    uint64_t v8 = *(void *)&v31[1];
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    do
    {
      if (v9)
      {
        uint64_t v11 = 0;
        signed int v12 = *(int **)&a3[10 * v6 + 6];
        uint64_t v13 = (_DWORD *)*((void *)&v31[1] + 5 * v6 + 1);
        do
        {
          int v14 = v12;
          uint64_t v15 = v13;
          uint64_t v16 = v10;
          if (v10)
          {
            do
            {
              int v17 = *v14++;
              *v15++ = v17;
              --v16;
            }
            while (v16);
          }
          ++v11;
          uint64_t v13 = (_DWORD *)((char *)v13 + v8);
          signed int v12 = (int *)((char *)v12 + v7);
        }
        while (v11 != v9);
      }
      ++v6;
    }
    while (v6 != 3);
    unsigned int v30 = 0;
    sub_2483F0E78((uint64_t)v29, (uint64_t)v31);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)((char *)v31 + i));
    if (!v34)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v33[j]);
    }
  }
  uint64_t result = v30;
  if (!v30)
  {
    sub_2483F0E78((uint64_t)v33, (uint64_t)v29);
    uint64_t v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_2483EBCC0((uint64_t)v31, a2 + 16);
    uint64_t v21 = 3 * *a3 * (unint64_t)a3[1];
    sub_2483F02B8(__p, v21);
    uint64_t v22 = 0;
    memset(v35, 0, 24);
    int v23 = v33;
    do
    {
      v35[v22++] = v23;
      v23 += 40;
    }
    while (v22 != 3);
    unint64_t v24 = 6 * *a3;
    memset(v27, 0, sizeof(v27));
    sub_2483F80DC(v35, 3uLL, 16, 0, 2u, v24, 0, (uint64_t)__p[0], 2 * v21, (uint64_t)v27);
    (*(void (**)(void, const char *, void, void, _OWORD *, void *))(a1 + 624))(*(void *)(a1 + 632), "background", *a3, a3[1], v31, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (uint64_t k = 104; k != -16; k -= 40)
      sub_2483E8DDC((uint64_t *)&v33[k]);
    if (!v30)
    {
      for (uint64_t m = 104; m != -16; m -= 40)
        sub_2483E8DDC((uint64_t *)&v29[m]);
    }
    return 0;
  }
  return result;
}

void sub_2484D9680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(v34 - 208 + i));
  if (!a34)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a19 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484D96F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  v37[3] = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 624)) {
    return 0;
  }
  sub_2483F0C3C((uint64_t)v35, *a4, a4[1]);
  if (v36)
  {
    unsigned int v32 = v36;
  }
  else
  {
    sub_2483F0E78((uint64_t)v33, (uint64_t)v35);
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)a4 + 2);
    uint64_t v10 = *(void *)&v33[1];
    uint64_t v12 = *a4;
    uint64_t v11 = a4[1];
    do
    {
      if (v11)
      {
        uint64_t v13 = 0;
        int v14 = *(unsigned __int8 **)&a4[10 * v8 + 6];
        uint64_t v15 = (float *)*((void *)&v33[1] + 5 * v8 + 1);
        do
        {
          uint64_t v16 = v14;
          int v17 = v15;
          uint64_t v18 = v12;
          if (v12)
          {
            do
            {
              unsigned int v19 = *v16++;
              *v17++ = (float)v19 * 0.0039216;
              --v18;
            }
            while (v18);
          }
          ++v13;
          uint64_t v15 = (float *)((char *)v15 + v10);
          v14 += v9;
        }
        while (v13 != v11);
      }
      ++v8;
    }
    while (v8 != 3);
    unsigned int v32 = 0;
    sub_2483F0E78((uint64_t)v31, (uint64_t)v33);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)((char *)v33 + i));
    if (!v36)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v35[j]);
    }
  }
  uint64_t result = v32;
  if (!v32)
  {
    sub_2483F0E78((uint64_t)v35, (uint64_t)v31);
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_2483EBCC0((uint64_t)v33, a3 + 16);
    uint64_t v23 = 3 * *a4 * (unint64_t)a4[1];
    sub_2483F02B8(__p, v23);
    uint64_t v24 = 0;
    memset(v37, 0, 24);
    uint64_t v25 = v35;
    do
    {
      v37[v24++] = v25;
      v25 += 40;
    }
    while (v24 != 3);
    unint64_t v26 = 6 * *a4;
    memset(v29, 0, sizeof(v29));
    sub_2483F80DC(v37, 3uLL, 16, 0, 2u, v26, 0, (uint64_t)__p[0], 2 * v23, (uint64_t)v29);
    (*(void (**)(void, uint64_t, void, void, _OWORD *, void *))(a1 + 624))(*(void *)(a1 + 632), a2, *a4, a4[1], v33, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (uint64_t k = 104; k != -16; k -= 40)
      sub_2483E8DDC((uint64_t *)&v35[k]);
    if (!v32)
    {
      for (uint64_t m = 104; m != -16; m -= 40)
        sub_2483E8DDC((uint64_t *)&v31[m]);
    }
    return 0;
  }
  return result;
}

void sub_2484D9990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(v34 - 224 + i));
  if (!a34)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a19 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484D9A00(uint64_t a1, unsigned int *a2)
{
  if (!*(void *)(a1 + 624)) {
    return 0;
  }
  sub_2483F0C3C((uint64_t)v14, *a2, a2[1]);
  uint64_t v4 = v15;
  if (!v15)
  {
    sub_2483F0E78((uint64_t)v13, (uint64_t)v14);
    sub_24840F23C((uint64_t)v12);
    v10[0] = 0;
    v10[1] = 0;
    *(void *)&long long v5 = v13[0];
    *((void *)&v5 + 1) = v13[1];
    long long v11 = v5;
    sub_24840F1C8((uint64_t)a2, (uint64_t)v10, (uint64_t)v13, (uint64_t)v12);
    uint64_t v6 = sub_2483F0AE8(0);
    uint64_t v4 = sub_2484D93F8(a1, (uint64_t)v6, v13);
    for (uint64_t i = 26; i != -4; i -= 10)
      sub_2483E8DDC((uint64_t *)&v13[i]);
    if (!v15)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v14[j]);
    }
  }
  return v4;
}

void sub_2484D9AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a38 + i));
  if (!*(_DWORD *)(v38 - 40))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(v38 - 160 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484D9B44(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (float *)*((void *)a2 + 3);
    float v9 = -3.4028e38;
    float v10 = 3.4028e38;
    do
    {
      long long v11 = v8;
      uint64_t v12 = v4;
      if (v4)
      {
        do
        {
          float v13 = *v11++;
          float v14 = v13;
          if (v13 < v10) {
            float v10 = v14;
          }
          if (v9 < v14) {
            float v9 = v14;
          }
          --v12;
        }
        while (v12);
      }
      ++v7;
      uint64_t v8 = (float *)((char *)v8 + *((void *)a2 + 2));
    }
    while (v7 != v5);
  }
  else
  {
    float v9 = -3.4028e38;
    float v10 = 3.4028e38;
  }
  sub_2484D9D58((uint64_t)v31, v4, v5);
  uint64_t v15 = v32;
  if (!v32)
  {
    sub_2483F0E78((uint64_t)v28, (uint64_t)v31);
    uint64_t v16 = 0;
    float v17 = 255.0 / (float)(v9 - v10);
    if (v10 == v9) {
      float v17 = 0.0;
    }
    do
    {
      unint64_t v18 = a2[1];
      if (v18)
      {
        unint64_t v19 = 0;
        LODWORD(v20) = *a2;
        do
        {
          if (v20)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v30[5 * v16] + v29 * v19;
            uint64_t v23 = *((void *)a2 + 3) + *((void *)a2 + 2) * v19;
            do
            {
              *(unsigned char *)(v22 + v21) = (int)(float)(v17 * (float)(*(float *)(v23 + 4 * v21) - v10));
              ++v21;
              unint64_t v20 = *a2;
            }
            while (v21 < v20);
            unint64_t v18 = a2[1];
          }
          ++v19;
        }
        while (v19 < v18);
      }
      ++v16;
    }
    while (v16 != 3);
    uint64_t v24 = sub_2483F0A38(0);
    uint64_t v15 = sub_2484D96F0(a1, (uint64_t)"ccs", (uint64_t)v24, v28);
    for (uint64_t i = 26; i != -4; i -= 10)
      sub_2483E8DDC((uint64_t *)&v28[i]);
    if (!v32)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v31[j]);
    }
  }
  return v15;
}

void sub_2484D9D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a10 + i));
  if (!a40)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a25 + j));
  }
  _Unwind_Resume(a1);
}

void sub_2484D9D58(uint64_t a1, unsigned int a2, unsigned int a3)
{
  sub_2483E8CE0((uint64_t)&v35, a2, a3);
  if (v39)
  {
    *(_DWORD *)(a1 + 120) = v39;
  }
  else
  {
    sub_2483E8CE0((uint64_t)&v30, a2, a3);
    if (v34)
    {
      *(_DWORD *)(a1 + 120) = v34;
    }
    else
    {
      sub_2483E8CE0((uint64_t)&v25, a2, a3);
      if (v29)
      {
        *(_DWORD *)(a1 + 120) = v29;
      }
      else
      {
        long long v13 = v35;
        uint64_t v6 = v37;
        uint64_t v37 = 0;
        uint64_t v7 = v32;
        uint64_t v32 = 0;
        uint64_t v8 = v27;
        uint64_t v27 = 0;
        uint64_t v14 = v36;
        uint64_t v15 = v6;
        uint64_t v16 = v38;
        uint64_t v18 = v31;
        uint64_t v19 = v7;
        long long v17 = v30;
        uint64_t v20 = v33;
        long long v21 = v25;
        uint64_t v22 = v26;
        uint64_t v23 = v8;
        uint64_t v24 = v28;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2483F0E78(a1, (uint64_t)&v13);
        for (uint64_t i = 104; i != -16; i -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&v13 + i));
        if (!v29)
        {
          uint64_t v10 = v27;
          uint64_t v27 = 0;
          if (v10)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v34)
      {
        uint64_t v11 = v32;
        uint64_t v32 = 0;
        if (v11)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v11 - 24));
          free(*(void **)(v11 - 32));
        }
      }
    }
    if (!v39)
    {
      uint64_t v12 = v37;
      uint64_t v37 = 0;
      if (v12)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
        free(*(void **)(v12 - 32));
      }
    }
  }
}

void sub_2484D9F28(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (!v3
    || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24)), free(*(void **)(v3 - 32)), !*(_DWORD *)(v1 - 40)))
  {
    uint64_t v4 = *(void *)(v1 - 56);
    *(void *)(v1 - 56) = 0;
    if (v4)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
      free(*(void **)(v4 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484D9F94(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6 = a3[1];
  unsigned int v7 = *a3;
  unsigned __int8 v8 = 0;
  if (v6)
  {
    unsigned __int8 v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = (unsigned __int8 *)*((void *)a3 + 3);
    unsigned __int8 v12 = -1;
    do
    {
      long long v13 = v11;
      uint64_t v14 = *a3;
      if (v7)
      {
        do
        {
          unsigned int v16 = *v13++;
          unsigned int v15 = v16;
          if (v16 < v12) {
            unsigned __int8 v12 = v15;
          }
          if (v9 <= v15) {
            unsigned __int8 v8 = v15;
          }
          else {
            unsigned __int8 v8 = v9;
          }
          unsigned __int8 v9 = v8;
          --v14;
        }
        while (v14);
      }
      ++v10;
      v11 += *((void *)a3 + 2);
    }
    while (v10 != v6);
  }
  else
  {
    unsigned __int8 v12 = -1;
  }
  sub_2484D9D58((uint64_t)v34, v7, v6);
  uint64_t v17 = v35;
  if (!v35)
  {
    sub_2483F0E78((uint64_t)v31, (uint64_t)v34);
    uint64_t v18 = 0;
    float v19 = 255.0 / (float)(v8 - v12);
    unint64_t v20 = a3[1];
    if (v8 == v12) {
      float v19 = 0.0;
    }
    unint64_t v21 = a3[1];
    do
    {
      if (v21)
      {
        unint64_t v22 = 0;
        LODWORD(v23) = *a3;
        do
        {
          if (v23)
          {
            unint64_t v24 = 0;
            uint64_t v25 = v33[5 * v18] + v32 * v22;
            uint64_t v26 = *((void *)a3 + 3) + *((void *)a3 + 2) * v22;
            do
            {
              *(unsigned char *)(v25 + v24) = (int)(float)(v19 * (float)(*(unsigned __int8 *)(v26 + v24) - v12));
              ++v24;
              unint64_t v23 = *a3;
            }
            while (v24 < v23);
            unint64_t v20 = a3[1];
          }
          ++v22;
          unint64_t v21 = v20;
        }
        while (v22 < v20);
      }
      ++v18;
    }
    while (v18 != 3);
    uint64_t v27 = sub_2483F0A38(0);
    uint64_t v17 = sub_2484D96F0(a1, a2, (uint64_t)v27, v31);
    for (uint64_t i = 26; i != -4; i -= 10)
      sub_2483E8DDC((uint64_t *)&v31[i]);
    if (!v35)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v34[j]);
    }
  }
  return v17;
}

void sub_2484DA178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a10 + i));
  if (!a40)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a25 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484DA1C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t result = sub_24841A0F8(a1, &v18, &v17);
  if (!result)
  {
    sub_248419548((uint64_t)v16, a2, v17);
    uint64_t v10 = &unk_26FC65B10;
    uint64_t v13 = v18;
    uint64_t v14 = a2;
    char v15 = 1;
    int64x2_t v11 = (int64x2_t)xmmword_2484DC960;
    unint64_t v12 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v10);
    v12 >>= 1;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v9.i64[0] = vaddq_s64(v11, v9).u64[0];
    v9.i64[1] = vshrq_n_u64(*(uint64x2_t *)&v11, 1uLL).i64[1];
    int64x2_t v11 = v9;
    if (!result)
    {
      if (v15)
      {
        sub_2484195C0((uint64_t)v16, a2, a3, a4);
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2484DA2E4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 48))(a1, 0, a2);
  if (!result)
  {
    ++*(void *)(a1 + 16);
    if (*a2)
    {
      sub_2484DA390(*(void *)(a1 + 32), *(uint64_t **)(a1 + 40));
      uint64_t v5 = *a2;
      while (1)
      {
        v5 &= v5 - 1;
        if (!v5) {
          break;
        }
        uint64_t v6 = *(void **)(a1 + 40);
        *(void *)(v6[3] + (*v6 >> 3)) = *(unsigned __int8 *)(v6[3] + (*v6 >> 3));
        *v6 += 2;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_2484DA390(unint64_t result, uint64_t *a2)
{
  if (result)
  {
    if (result > 0x10)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = (unint64_t)*a2 >> 3;
      uint64_t v8 = a2[3];
      uint64_t v9 = *a2 & 7;
      uint64_t v10 = *(unsigned __int8 *)(v8 + v7);
      unint64_t v11 = *a2 + 2;
      unint64_t v12 = v11 >> 3;
      char v13 = v11 & 7;
      if (result > 0x110)
      {
        *(void *)(v8 + v7) = (3 << v9) | v10;
        *(void *)(v8 + v12) = ((result & 0xFFF) << v13) | *(unsigned __int8 *)(v8 + v12);
        if (result < 0x1000)
        {
          unint64_t v18 = v6 + 14;
        }
        else
        {
          unint64_t v14 = result >> 12;
          unint64_t v4 = v6 + 19;
          unsigned int v15 = 12;
          do
          {
            unint64_t v16 = v14;
            *(void *)(v8 + ((v4 - 5) >> 3)) = (1 << ((v4 - 5) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 5) >> 3));
            *(void *)(v8 + ((v4 - 4) >> 3)) = ((unint64_t)v14 << ((v4 - 4) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 4) >> 3));
            v4 += 9;
            if (v14 < 0x100) {
              break;
            }
            v14 >>= 8;
            BOOL v17 = v15 >= 0x34;
            v15 += 8;
          }
          while (!v17);
          unint64_t v18 = v4 - 5;
          if (v16 >= 0x100)
          {
            *(void *)(v8 + (v18 >> 3)) = (1 << (v18 & 7)) | *(unsigned __int8 *)(v8 + (v18 >> 3));
            *(void *)(v8 + ((v4 - 4) >> 3)) = (((v16 >> 8) & 0xF) << ((v4 - 4) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 4) >> 3));
            goto LABEL_16;
          }
        }
        *(void *)(v8 + (v18 >> 3)) = *(unsigned __int8 *)(v8 + (v18 >> 3));
        unint64_t v4 = v18 + 1;
        goto LABEL_16;
      }
      *(void *)(v8 + v7) = (2 << v9) | v10;
      *(void *)(v8 + v12) = ((result - 17) << v13) | *(unsigned __int8 *)(v8 + v12);
      unint64_t v4 = v6 + 10;
    }
    else
    {
      uint64_t v2 = *a2;
      uint64_t v3 = a2[3];
      *(void *)(v3 + ((unint64_t)*a2 >> 3)) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3
                                                                                               + ((unint64_t)*a2 >> 3));
      *(void *)(v3 + ((unint64_t)(v2 + 2) >> 3)) = ((result - 1) << ((v2 + 2) & 7)) | *(unsigned __int8 *)(v3 + ((unint64_t)(v2 + 2) >> 3));
      unint64_t v4 = v2 + 6;
    }
  }
  else
  {
    uint64_t v5 = *a2;
    *(void *)(a2[3] + ((unint64_t)*a2 >> 3)) = *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
    unint64_t v4 = v5 + 2;
  }
LABEL_16:
  *a2 = v4;
  return result;
}

uint64_t sub_2484DA55C(uint64_t a1, float *a2)
{
  if (sub_2484DA5A0(*(uint64_t **)(a1 + 40), *a2)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(a1 + 48) == 0;
  }
  char v4 = !v3;
  *(unsigned char *)(a1 + 48) = v4;
  return 0;
}

uint64_t sub_2484DA5A0(uint64_t *a1, float a2)
{
  unsigned int v2 = (LODWORD(a2) >> 23);
  uint64_t v3 = 1;
  if (v2 <= 0x8E)
  {
    unsigned int v4 = (1 << (v2 - 103)) + ((LODWORD(a2) & 0x7FFFFFu) >> (126 - v2));
    if (v2 <= 0x70) {
      int v5 = 0;
    }
    else {
      int v5 = (v2 << 10) - 114688;
    }
    if (v2 > 0x70) {
      unsigned int v4 = (LODWORD(a2) & 0x7FFFFFu) >> 13;
    }
    uint64_t v6 = v5 | (LODWORD(a2) >> 31 << 15) | v4;
    if (v2 < 0x67) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *a1;
    *(void *)(a1[3] + ((unint64_t)*a1 >> 3)) = (v6 << (*a1 & 7)) | *(unsigned __int8 *)(a1[3]
                                                                                               + ((unint64_t)*a1 >> 3));
    *a1 = v7 + 16;
    return 0;
  }
  return v3;
}

uint64_t sub_2484DA630(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return 0;
}

uint64_t sub_2484DA658(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4 = *a4;
  if (v4 >> a2)
  {
    BOOL v6 = 1;
  }
  else
  {
    int v5 = *(void **)(a1 + 40);
    *(void *)(v5[3] + (*v5 >> 3)) = (v4 << (*v5 & 7)) | *(unsigned __int8 *)(v5[3] + (*v5 >> 3));
    *v5 += a2;
    BOOL v6 = *(unsigned char *)(a1 + 48) == 0;
  }
  char v7 = !v6;
  *(unsigned char *)(a1 + 48) = v7;
  return 0;
}

uint64_t sub_2484DA6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  BOOL v7 = !sub_2484DA700(a2, a3, *a5, *(uint64_t **)(a1 + 40)) && *(unsigned char *)(a1 + 48) != 0;
  *(unsigned char *)(a1 + 48) = v7;
  return 0;
}

BOOL sub_2484DA700(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  v14[0] = a1;
  v14[1] = a2;
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  BOOL result = sub_24841A528(a1, a2, a3, &v13, &v12);
  if (!result)
  {
    uint64_t v7 = v13;
    uint64_t v8 = *a4;
    uint64_t v9 = a4[3];
    *(void *)(v9 + ((unint64_t)*a4 >> 3)) = ((unint64_t)v13 << (*a4 & 7)) | *(unsigned __int8 *)(v9 + ((unint64_t)*a4 >> 3));
    *a4 = v8 + 2;
    unsigned int v10 = *((_DWORD *)v14 + v7);
    if ((v10 & 0x80000000) == 0)
    {
      unint64_t v11 = v12;
      *(void *)(v9 + ((unint64_t)(v8 + 2) >> 3)) = ((unint64_t)(a3 - (v10 >> 5)) << ((v8 + 2) & 7)) | *(unsigned __int8 *)(v9 + ((unint64_t)(v8 + 2) >> 3));
      *a4 = v8 + v11;
    }
  }
  return result;
}

void sub_2484DA7A8(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

void *sub_2484DA7D8(void *result)
{
  *BOOL result = &unk_26FC63A30;
  return result;
}

uint64_t sub_2484DA7F8(uint64_t a1, uint64_t a2, float *a3, void *a4)
{
  uint64_t v11 = 0;
  v40[12] = *MEMORY[0x263EF8340];
  do
  {
    float v12 = *a3++;
    *(float *)v4.i32 = v12;
    double v13 = (float)((float)(v12 * 4.0) * -0.11033) + 1.0;
    double v14 = 1.0 / v13;
    if (v13 >= 0.00001) {
      double v15 = 1.0 / v13;
    }
    else {
      double v15 = 100000.0;
    }
    *(float *)&double v15 = v15;
    *(float *)v4.i32 = *(float *)v4.i32 * *(float *)&v15;
    *(float *)&double v14 = *(float *)v4.i32 * -0.090882;
    *(float *)v5.i32 = *(float *)v4.i32 * 0.013925;
    *(float *)v6.i32 = *(float *)v4.i32 * -0.043664;
    *(float *)v7.i32 = *(float *)v4.i32 * 0.0030558;
    *(float *)v4.i32 = *(float *)v4.i32 * 0.003619;
    unint64_t v16 = (int32x4_t *)&v38[v11];
    int32x4_t v5 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
    int32x4_t *v16 = vdupq_lane_s32(*(int32x2_t *)&v15, 0);
    v16[1] = vdupq_lane_s32(*(int32x2_t *)&v14, 0);
    v16[2] = v5;
    v16[3] = vdupq_lane_s32(v6, 0);
    int32x4_t v4 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
    uint64_t v16[4] = vdupq_lane_s32(v7, 0);
    v16[5] = v4;
    v11 += 96;
  }
  while (v11 != 288);
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  sub_2483EA250((uint64_t)&v30, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84));
  uint64_t v17 = v34;
  if (!v34)
  {
    long long v35 = v30;
    unint64_t v18 = v32;
    uint64_t v32 = 0;
    *(void *)&long long v36 = v31;
    *((void *)&v36 + 1) = v18;
    int v19 = *(_DWORD *)(a1 + 80);
    int v20 = *(_DWORD *)(a1 + 84);
    uint64_t v37 = v33;
    if (v20 && v19)
    {
      unint64_t v21 = 0;
      uint64_t v22 = v36;
      do
      {
        memcpy(v18, (const void *)(*(void *)(a1 + 104) + *(void *)(a1 + 96) * v21++), 4 * *(unsigned int *)(a1 + 80));
        v18 += v22;
      }
      while (v21 < *(unsigned int *)(a1 + 84));
    }
    v23.i64[0] = *(void *)a1;
    v23.i64[1] = HIDWORD(*(void *)a1);
    int64x2_t v24 = vdupq_n_s64(3uLL);
    int64x2_t v25 = (int64x2_t)vqsubq_u64(*(uint64x2_t *)a2, (uint64x2_t)v24);
    int8x16_t v26 = (int8x16_t)vaddq_s64(vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 16)), v24);
    v29[0] = v25;
    v29[1] = vsubq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(v23, (uint64x2_t)v26), v26, (int8x16_t)v23), v25);
    sub_2484B0BF8(a1, (uint64_t)v29, (uint64_t)v38, a4, a1 + 80, (uint64_t)v29);
    sub_2484B0BF8(a1 + 40, (uint64_t)v29, (uint64_t)&v39, a4, a1, (uint64_t)v29);
    sub_2484B0BF8((uint64_t)&v35, (uint64_t)v29, (uint64_t)v40, a4, a1 + 40, (uint64_t)v29);
    sub_24841F6D4((int *)a1, (int *)(a1 + 40));
    sub_24841F6D4((int *)a1, (int *)(a1 + 80));
    uint64_t v17 = 0;
    uint64_t v32 = 0;
  }
  uint64_t v27 = *((void *)&v36 + 1);
  *((void *)&v36 + 1) = 0;
  if (v27)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v27 - 24));
    free(*(void **)(v27 - 32));
  }
  return v17;
}

void sub_2484DAA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a22 - 24));
    free(*(void **)(a22 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484DAAC8(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = result;
  if ((*(__int16 *)(result + 4) & 0x80000000) == 0)
  {
    uint64_t v8 = *(unsigned __int16 *)(result + 4);
    do
    {
      BOOL result = sub_2484DAAC8(a2 + 8 * v8, a2, a3, ++a4);
      uint64_t v6 = a2 + 8 * *(__int16 *)(v6 + 6);
      uint64_t v8 = *(unsigned __int16 *)(v6 + 4);
    }
    while ((*(__int16 *)(v6 + 4) & 0x80000000) == 0);
  }
  *(unsigned char *)(a3 + *(__int16 *)(v6 + 6)) = a4;
  return result;
}

void sub_2484DAB3C(uint64_t a1, unint64_t a2, int a3, unsigned char *a4)
{
  int32x4_t v4 = a4;
  unint64_t v5 = a2;
  unint64_t v71 = a2 - 1;
  uint64_t v72 = a4 + 1;
  unint64_t v77 = (2 * a2) | 1;
  int v7 = 1;
  do
  {
    if (v77 >> 61) {
      sub_2483E92E8();
    }
    uint64_t v8 = (__int16 *)sub_2483F04AC(v77);
    uint64_t v9 = v8;
    uint64_t v11 = &v8[4 * v10];
    if (v5)
    {
      float v12 = v8;
      unint64_t v13 = v5;
      do
      {
        --v13;
        unsigned int v14 = *(_DWORD *)(a1 + 4 * v13);
        if (v14)
        {
          if (v14 <= v7 - 1) {
            int v15 = v7 - 1;
          }
          else {
            int v15 = *(_DWORD *)(a1 + 4 * v13);
          }
          if (v12 >= v11)
          {
            uint64_t v16 = ((char *)v12 - (char *)v9) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2483E92E8();
            }
            if (((char *)v11 - (char *)v9) >> 2 > v17) {
              unint64_t v17 = ((char *)v11 - (char *)v9) >> 2;
            }
            if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            int v19 = (char *)sub_2483F04AC(v18);
            unint64_t v21 = &v19[8 * v16];
            *(_DWORD *)unint64_t v21 = v15;
            *((_WORD *)v21 + 2) = -1;
            *((_WORD *)v21 + 3) = v13;
            uint64_t v22 = (__int16 *)v21;
            while (v12 != v9)
            {
              uint64_t v23 = *((void *)v12 - 1);
              v12 -= 4;
              *((void *)v22 - 1) = v23;
              v22 -= 4;
            }
            uint64_t v11 = (__int16 *)&v19[8 * v20];
            float v12 = (__int16 *)(v21 + 8);
            if (v9) {
              operator delete(v9);
            }
            uint64_t v9 = v22;
          }
          else
          {
            *(_DWORD *)float v12 = v15;
            void v12[2] = -1;
            v12[3] = v13;
            v12 += 4;
          }
        }
      }
      while (v13);
    }
    else
    {
      float v12 = v8;
    }
    uint64_t v24 = (char *)v12 - (char *)v9;
    if ((char *)v12 - (char *)v9 == 8)
    {
      v4[v9[3]] = 1;
      int v25 = 2;
      unint64_t v5 = a2;
LABEL_115:
      operator delete(v9);
      goto LABEL_116;
    }
    unint64_t v26 = v24 >> 3;
    double v78 = (uint64_t (*)(uint64_t *, uint64_t *))sub_2484DB9FC;
    int64_t v75 = (char *)v12 - (char *)v9;
    if (v24 < 1025)
    {
LABEL_32:
      int v29 = 0;
      unint64_t v27 = 0;
    }
    else
    {
      unint64_t v27 = v24 >> 3;
      while (1)
      {
        uint64_t v28 = (uint64_t *)operator new(8 * v27, MEMORY[0x263F8C180]);
        if (v28) {
          break;
        }
        BOOL v48 = v27 > 1;
        v27 >>= 1;
        if (!v48) {
          goto LABEL_32;
        }
      }
      int v29 = v28;
    }
    sub_2484DB058((uint64_t)v9, (uint64_t *)v12, &v78, v26, v29, v27);
    if (v29) {
      operator delete(v29);
    }
    if (v12 >= v11)
    {
      unint64_t v31 = v26 + 1;
      if ((v26 + 1) >> 61) {
        goto LABEL_121;
      }
      if (((char *)v11 - (char *)v9) >> 2 > v31) {
        unint64_t v31 = ((char *)v11 - (char *)v9) >> 2;
      }
      if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32) {
        unint64_t v32 = (unint64_t)sub_2483F04AC(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      unsigned int v34 = (__int16 *)(v32 + 8 * v26);
      *(void *)unsigned int v34 = -1;
      long long v30 = v34 + 4;
      while (v12 != v9)
      {
        uint64_t v35 = *((void *)v12 - 1);
        v12 -= 4;
        *((void *)v34 - 1) = v35;
        v34 -= 4;
      }
      uint64_t v11 = (__int16 *)(v32 + 8 * v33);
      if (v9) {
        operator delete(v9);
      }
      uint64_t v9 = v34;
    }
    else
    {
      *(void *)float v12 = -1;
      long long v30 = v12 + 4;
    }
    if (v30 >= v11)
    {
      uint64_t v37 = ((char *)v30 - (char *)v9) >> 3;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61) {
LABEL_121:
      }
        sub_2483E92E8();
      if (((char *)v11 - (char *)v9) >> 2 > v38) {
        unint64_t v38 = ((char *)v11 - (char *)v9) >> 2;
      }
      if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39) {
        unint64_t v39 = (unint64_t)sub_2483F04AC(v39);
      }
      else {
        uint64_t v40 = 0;
      }
      double v41 = (__int16 *)(v39 + 8 * v37);
      *(void *)double v41 = -1;
      long long v36 = v41 + 4;
      while (v30 != v9)
      {
        uint64_t v42 = *((void *)v30 - 1);
        v30 -= 4;
        *((void *)v41 - 1) = v42;
        v41 -= 4;
      }
      uint64_t v11 = (__int16 *)(v39 + 8 * v40);
      if (v9) {
        operator delete(v9);
      }
      uint64_t v9 = v41;
    }
    else
    {
      *(void *)long long v30 = -1;
      long long v36 = v30 + 4;
    }
    unint64_t v43 = v26 - 1;
    if (v26 != 1)
    {
      unint64_t v44 = 0;
      unint64_t v45 = v26 + 1;
      do
      {
        unsigned int v46 = *(_DWORD *)&v9[4 * v44];
        unsigned int v47 = *(_DWORD *)&v9[4 * v45];
        BOOL v48 = v46 > v47;
        if (v46 > v47) {
          unint64_t v49 = v44;
        }
        else {
          unint64_t v49 = v44 + 1;
        }
        if (v48) {
          unint64_t v50 = v45 + 1;
        }
        else {
          unint64_t v50 = v45;
        }
        if (v48) {
          unint64_t v51 = v45;
        }
        else {
          unint64_t v51 = v44;
        }
        unsigned int v52 = *(_DWORD *)&v9[4 * v49];
        unsigned int v53 = *(_DWORD *)&v9[4 * v50];
        BOOL v54 = v52 > v53;
        if (v52 > v53) {
          unint64_t v55 = v50;
        }
        else {
          unint64_t v55 = v49;
        }
        *((_DWORD *)v36 - 2) = *(_DWORD *)&v9[4 * v55] + *(_DWORD *)&v9[4 * v51];
        if (v54) {
          unint64_t v44 = v49;
        }
        else {
          unint64_t v44 = v49 + 1;
        }
        if (v54) {
          unint64_t v45 = v50 + 1;
        }
        else {
          unint64_t v45 = v50;
        }
        *(v36 - 2) = v51;
        *(v36 - 1) = v55;
        if (v36 >= v11)
        {
          uint64_t v57 = ((char *)v36 - (char *)v9) >> 3;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61) {
            sub_2483E92E8();
          }
          if (((char *)v11 - (char *)v9) >> 2 > v58) {
            unint64_t v58 = ((char *)v11 - (char *)v9) >> 2;
          }
          if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59) {
            unint64_t v59 = (unint64_t)sub_2483F04AC(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          int v61 = (__int16 *)(v59 + 8 * v57);
          uint64_t v11 = (__int16 *)(v59 + 8 * v60);
          *(void *)int v61 = -1;
          std::string::size_type v56 = v61 + 4;
          if (v36 == v9) {
            goto LABEL_104;
          }
          do
          {
            uint64_t v62 = *((void *)v36 - 1);
            v36 -= 4;
            *((void *)v61 - 1) = v62;
            v61 -= 4;
          }
          while (v36 != v9);
          if (v9) {
LABEL_104:
          }
            operator delete(v9);
          uint64_t v9 = v61;
        }
        else
        {
          *(void *)long long v36 = -1;
          std::string::size_type v56 = v36 + 4;
        }
        long long v36 = v56;
        --v43;
      }
      while (v43);
    }
    int32x4_t v4 = a4;
    sub_2484DAAC8((uint64_t)&v9[v75 - 4], (uint64_t)v9, (uint64_t)a4, 0);
    uint64_t v63 = a4;
    unint64_t v5 = a2;
    if (a2 >= 2)
    {
      unsigned __int8 v64 = *a4;
      unint64_t v65 = v71;
      long long v66 = v72;
      uint64_t v63 = a4;
      uint64_t v67 = v72;
      do
      {
        unsigned int v69 = *v67++;
        unsigned __int8 v68 = v69;
        BOOL v70 = v64 >= v69;
        if (v64 <= v69) {
          unsigned __int8 v64 = v68;
        }
        if (!v70) {
          uint64_t v63 = v66;
        }
        long long v66 = v67;
        --v65;
      }
      while (v65);
    }
    int v25 = 2 * (*v63 <= a3);
    if (v9) {
      goto LABEL_115;
    }
LABEL_116:
    v7 *= 2;
  }
  while (!v25);
}

void sub_2484DB014(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484DB058(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      uint64_t v9 = a2 - 1;
      BOOL result = (*a3)(a2 - 1, (uint64_t *)result);
      if (result)
      {
        uint64_t v10 = *v8;
        *uint64_t v8 = *v9;
        *uint64_t v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      int v19 = (char *)a5;
      unint64_t v20 = a4 >> 1;
      unint64_t v21 = (uint64_t *)(result + 8 * (a4 >> 1));
      unint64_t v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_2484DB2D0((uint64_t *)result, v21, a3, v22, a5);
        uint64_t v23 = (uint64_t *)&v19[8 * v20];
        BOOL result = (uint64_t)sub_2484DB2D0(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        uint64_t v24 = &v19[8 * a4];
        int v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          BOOL result = (*a3)(v25, (uint64_t *)v19);
          if (result) {
            unint64_t v26 = (char *)v25;
          }
          else {
            unint64_t v26 = v19;
          }
          v19 += 8 * (result ^ 1);
          v25 += result;
          *v8++ = *(void *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              uint64_t v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v28 = 0;
          do
          {
            v8[v28] = *(void *)&v19[v28 * 8];
            ++v28;
          }
          while (&v19[v28 * 8] != (char *)v23);
        }
      }
      else
      {
        sub_2484DB058(result, v21, a3, v22, a5, a6);
        sub_2484DB058(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_2484DB4E0((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(void, void))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      float v12 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v13 = 0;
        unsigned int v14 = (uint64_t *)result;
        do
        {
          int v15 = v14;
          unsigned int v14 = v12;
          BOOL result = (*a3)(v12, v15);
          if (result)
          {
            uint64_t v29 = *v14;
            uint64_t v16 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v16 + 8) = *(uint64_t *)((char *)v8 + v16);
              if (!v16) {
                break;
              }
              v16 -= 8;
              BOOL result = (*a3)(&v29, (uint64_t *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                unint64_t v17 = (uint64_t *)((char *)v8 + v16 + 8);
                goto LABEL_15;
              }
            }
            unint64_t v17 = v8;
LABEL_15:
            uint64_t *v17 = v29;
          }
          float v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_2484DB2D0(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    int v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *unint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      BOOL result = (uint64_t *)(*a3)(a2 - 1, result);
      if (result) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v7;
      }
      *v5++ = *v11;
      if (!result) {
        int v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      int v19 = &result[a4 >> 1];
      sub_2484DB058(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      BOOL result = (uint64_t *)sub_2484DB058(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        BOOL result = (uint64_t *)(*a3)(v20, v7);
        if (result) {
          unint64_t v21 = v20;
        }
        else {
          unint64_t v21 = v7;
        }
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      float v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        unsigned int v14 = a5;
        do
        {
          int v15 = v14++;
          BOOL result = (uint64_t *)(*a3)(v12, v15);
          uint64_t v16 = v14;
          if (result)
          {
            v15[1] = *v15;
            uint64_t v16 = v5;
            if (v15 != v5)
            {
              uint64_t v17 = v13;
              while (1)
              {
                uint64_t v16 = (uint64_t *)((char *)v5 + v17);
                BOOL result = (uint64_t *)(*a3)(v12, (uint64_t *)((char *)v5 + v17 - 8));
                if (!result) {
                  break;
                }
                *(uint64_t *)((char *)v5 + v17) = *(uint64_t *)((char *)v5 + v17 - 8);
                v17 -= 8;
                if (!v17)
                {
                  uint64_t v16 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v18 = *v12++;
          uint64_t *v16 = v18;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_2484DB4E0(uint64_t result, void *a2, void *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  int v15 = (void *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      BOOL result = (*a4)(a2, v15);
      if (result) {
        break;
      }
      ++v15;
      if (!--a5) {
        return result;
      }
    }
    uint64_t v76 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        uint64_t v65 = *v15;
        *int v15 = *a2;
        *a2 = v65;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v22 = a5;
      }
      else {
        uint64_t v22 = a5 + 1;
      }
      uint64_t v21 = v22 >> 1;
      int v19 = &v15[v22 >> 1];
      uint64_t v18 = a2;
      if (a2 != a3)
      {
        uint64_t v68 = v10;
        uint64_t v72 = v22 >> 1;
        uint64_t v67 = a7;
        uint64_t v23 = (uint64_t (*)(void *, void *))*a4;
        unint64_t v24 = a3 - a2;
        uint64_t v18 = a2;
        do
        {
          int v25 = &v18[v24 >> 1];
          int v26 = v23(v25, v19);
          if (v26) {
            v24 += ~(v24 >> 1);
          }
          else {
            v24 >>= 1;
          }
          if (v26) {
            uint64_t v18 = v25 + 1;
          }
        }
        while (v24);
        a7 = v67;
        uint64_t v10 = v68;
        uint64_t v21 = v72;
      }
      uint64_t v17 = v18 - a2;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      uint64_t v17 = v16 >> 1;
      uint64_t v18 = &a2[v16 >> 1];
      int v19 = a2;
      if (a2 != v15)
      {
        uint64_t v71 = v16 >> 1;
        unint64_t v20 = a2 - v15;
        int v19 = v15;
        do
        {
          if ((*a4)(v18, &v19[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v19 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        uint64_t v17 = v71;
      }
      uint64_t v21 = v19 - v15;
    }
    if (v19 == a2)
    {
      a2 = v18;
    }
    else
    {
      uint64_t v27 = a7;
      uint64_t v28 = (char *)v18 - (char *)a2;
      if (v18 == a2)
      {
        a2 = v19;
      }
      else
      {
        uint64_t v29 = v19 + 1;
        if (v19 + 1 == a2)
        {
          uint64_t v69 = v10;
          uint64_t v73 = *v19;
          unsigned int v34 = a2;
          size_t v35 = (char *)v18 - (char *)a2;
          uint64_t v36 = v21;
          uint64_t v37 = v17;
          memmove(v19, v34, v35);
          uint64_t v17 = v37;
          uint64_t v21 = v36;
          a2 = (void *)((char *)v19 + v28);
          uint64_t v10 = v69;
          *(void *)((char *)v19 + v28) = v73;
        }
        else
        {
          long long v30 = a2 + 1;
          if (a2 + 1 != v18)
          {
            uint64_t v31 = a2 - v19;
            if (v31 == v28 >> 3)
            {
              a7 = v27;
              a8 = v76;
              do
              {
                uint64_t v32 = *(v29 - 1);
                *(v29 - 1) = *(v30 - 1);
                *(v30 - 1) = v32;
                if (v29 == a2) {
                  break;
                }
                ++v29;
              }
              while (v30++ != v18);
            }
            else
            {
              uint64_t v44 = v28 >> 3;
              uint64_t v45 = v28 >> 3;
              uint64_t v46 = a2 - v19;
              do
              {
                uint64_t v47 = v46;
                uint64_t v46 = v45;
                uint64_t v45 = v47 % v45;
              }
              while (v45);
              a7 = v27;
              a8 = v76;
              if (v46)
              {
                BOOL v48 = &v19[v46];
                do
                {
                  uint64_t v50 = *--v48;
                  uint64_t v49 = v50;
                  unint64_t v51 = &v48[v31];
                  unsigned int v52 = v48;
                  do
                  {
                    unsigned int v53 = v51;
                    void *v52 = *v51;
                    BOOL v54 = &v51[v31];
                    BOOL v55 = __OFSUB__(v31, v18 - v51);
                    uint64_t v57 = v31 - (v18 - v51);
                    char v56 = (v57 < 0) ^ v55;
                    unint64_t v51 = &v19[v57];
                    if (v56) {
                      unint64_t v51 = v54;
                    }
                    unsigned int v52 = v53;
                  }
                  while (v51 != v48);
                  void *v53 = v49;
                }
                while (v48 != v19);
              }
              a2 = &v19[v44];
            }
            goto LABEL_53;
          }
          uint64_t v38 = *(v18 - 1);
          a2 = v19 + 1;
          if (v18 - 1 != v19)
          {
            uint64_t v70 = *(v18 - 1);
            uint64_t v74 = v21;
            uint64_t v39 = v17;
            memmove(v19 + 1, v19, (char *)(v18 - 1) - (char *)v19);
            uint64_t v38 = v70;
            uint64_t v21 = v74;
            uint64_t v17 = v39;
          }
          *int v19 = v38;
        }
      }
      a7 = v27;
    }
    a8 = v76;
LABEL_53:
    a5 -= v21;
    v10 -= v17;
    if (v21 + v17 >= a5 + v10)
    {
      uint64_t v75 = v17;
      uint64_t v40 = v10;
      double v41 = a2;
      uint64_t v42 = a3;
      uint64_t v43 = v21;
      BOOL result = sub_2484DB4E0(a2, v18, v42, a4, a5, v40, a7, a8);
      a2 = v19;
      a5 = v43;
      a3 = v41;
      uint64_t v10 = v75;
      if (!v75) {
        return result;
      }
    }
    else
    {
      BOOL result = sub_2484DB4E0(v15, v19, a2, a4, v21, v17, a7, a8);
      int v15 = a2;
      a2 = v18;
      if (!v10) {
        return result;
      }
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v62 = 0;
      do
      {
        *(void *)&a7[v62 * 8] = v15[v62];
        ++v62;
      }
      while (&v15[v62] != a2);
      uint64_t v63 = &a7[v62 * 8];
      if (&a7[v62 * 8] != a7)
      {
        while (a2 != a3)
        {
          BOOL result = (*a4)(a2, a7);
          if (result) {
            unsigned __int8 v64 = (char *)a2;
          }
          else {
            unsigned __int8 v64 = a7;
          }
          a2 += result;
          a7 += 8 * (result ^ 1);
          *v15++ = *(void *)v64;
          if (a7 == v63) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, a7, v63 - a7);
      }
    }
  }
  else if (a3 != a2)
  {
    uint64_t v58 = 0;
    do
    {
      *(void *)&a7[v58 * 8] = a2[v58];
      ++v58;
    }
    while (&a2[v58] != a3);
    unint64_t v59 = &a7[v58 * 8];
    if (&a7[v58 * 8] != a7)
    {
      uint64_t v60 = a3 - 1;
      while (a2 != v15)
      {
        BOOL result = (*a4)(v59 - 8, a2 - 1);
        if (result) {
          int v61 = (char *)a2;
        }
        else {
          int v61 = v59;
        }
        if (result) {
          --a2;
        }
        else {
          v59 -= 8;
        }
        *v60-- = *((void *)v61 - 1);
        if (v59 == a7) {
          return result;
        }
      }
      uint64_t v66 = 0;
      do
      {
        v60[v66] = *(void *)&v59[v66 * 8 - 8];
        --v66;
      }
      while (&v59[v66 * 8] != a7);
    }
  }
  return result;
}

BOOL sub_2484DB9FC(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

unsigned __int8 *sub_2484DBA10(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(v14, 0, sizeof(v14));
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    do
    {
      unsigned int v5 = *v3++;
      ++*((_WORD *)v14 + v5);
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  int v7 = 0;
  LOWORD(v14[0]) = 0;
  do
  {
    int v7 = 2 * (v7 + *(unsigned __int16 *)((char *)v14 + v6));
    *(_WORD *)&v13[v6 + 2] = v7;
    v6 += 2;
  }
  while (v6 != 30);
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v9 = result[i];
      if (result[i])
      {
        unsigned __int16 v10 = *(_WORD *)&v13[2 * v9];
        *(_WORD *)&v13[2 * v9] = v10 + 1;
        unint64_t v11 = qword_248553450[v10 & 0xF];
        if (v9 >= 5)
        {
          unsigned int v12 = 4;
          do
          {
            v10 >>= 4;
            unint64_t v11 = qword_248553450[v10] | (16 * v11);
            v12 += 4;
          }
          while (v12 < v9);
        }
        *(_WORD *)(a3 + 2 * i) = v11 >> (-(char)v9 & 3);
      }
    }
  }
  return result;
}

void sub_2484DBB30(unint64_t *a1, char *__src, unsigned int *a3, void **a4)
{
  if (*a1)
  {
    unint64_t v7 = byte_248553507[*a3] * (unint64_t)byte_2485534EC[*a3];
    if (*a1 == 1)
    {
      uint64_t v8 = *a4;
      memcpy(v8, __src, v7 << 8);
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 0;
      size_t v12 = v7 << 8;
      uint64_t v13 = 1;
      do
      {
        bzero(a4[v10], v12);
        uint64_t v14 = *a3;
        unint64_t v15 = byte_2485534EC[v14];
        uint64_t v17 = a1[3 * v10 + 1];
        unint64_t v16 = a1[3 * v10 + 2];
        unint64_t v18 = byte_248553507[v14];
        if (v18 >= v15) {
          uint64_t v19 = byte_2485534EC[v14];
        }
        else {
          uint64_t v19 = byte_248553507[v14];
        }
        uint64_t v20 = v19 * v17;
        if (v19 * v17)
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          if (v18 <= v15) {
            unint64_t v23 = v15;
          }
          else {
            unint64_t v23 = v18;
          }
          uint64_t v24 = v23 * v17;
          unint64_t v25 = v23 * v13;
          unint64_t v26 = v19 * v13;
          uint64_t v27 = 32 * v23;
          do
          {
            if (v24)
            {
              for (unint64_t i = 0; i != v24; ++i)
              {
                if (v22 >= v26 || i >= v25)
                {
                  int v29 = *(_DWORD *)&__src[4 * i + v21];
                  if (v11) {
                    v29 -= (v29 + (v29 >> 31) + (v29 >> 31 << v11)) & (-1 << v11);
                  }
                  *(_DWORD *)((char *)a4[v10] + 4 * i + v21) = (int)(v29 + (v29 >> 31) + (v29 >> 31 << v16)) >> v16;
                }
              }
            }
            ++v22;
            v21 += v27;
          }
          while (v22 != v20);
        }
        if (!v16) {
          uint64_t v13 = v17;
        }
        ++v10;
        int v11 = v16;
      }
      while (v10 < *a1);
    }
  }
}

unsigned int *sub_2484DBCEC(unsigned int *result)
{
  uint64_t v1 = 0;
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  unint64_t v4 = (v2 + 7) & 0x1FFFFFFF8;
  unint64_t v5 = (v3 + 7) & 0x1FFFFFFF8;
  do
  {
    uint64_t v6 = &result[v1];
    *uint64_t v6 = v4;
    v6[1] = v5;
    v1 += 10;
  }
  while (v1 != 30);
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v18 = v3 - v5;
  uint64_t v19 = result;
  do
  {
    uint64_t v20 = v7;
    uint64_t v9 = *(void *)&result[10 * v7 + 6];
    if (v3)
    {
      uint64_t v10 = 0;
      int v11 = (_DWORD *)(v9 + 4 * v2);
      do
      {
        if (v2 < v4)
        {
          size_t v12 = v11;
          uint64_t v13 = v2 - v4;
          do
          {
            *v12++ = *(_DWORD *)(v9 + v8 * v10 + 4 * (v2 - 1));
            BOOL v14 = __CFADD__(v13++, 1);
          }
          while (!v14);
        }
        ++v10;
        int v11 = (_DWORD *)((char *)v11 + v8);
      }
      while (v10 != v3);
    }
    if (v3 < v5)
    {
      uint64_t v15 = v18;
      unint64_t v16 = (const void *)(v9 + v8 * (v3 - 1));
      uint64_t v17 = (char *)(v9 + v8 * v3);
      do
      {
        memcpy(v17, v16, 4 * v4);
        v17 += v8;
        BOOL v14 = __CFADD__(v15++, 1);
      }
      while (!v14);
    }
    BOOL result = v19;
    uint64_t v7 = v20 + 1;
    unint64_t v5 = (v3 + 7) & 0x1FFFFFFF8;
  }
  while (v20 != 2);
  return result;
}

double sub_2484DBE30(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  double result = sub_2483EA250((uint64_t)v8, ((a3 - 1 + *a2) / a3) + 8, ((a3 - 1 + a2[1]) / a3) + 8);
  if (v10)
  {
    *(_DWORD *)(a1 + 40) = v10;
  }
  else
  {
    long long v11 = v8[0];
    long long v12 = v8[1];
    uint64_t v13 = v9;
    sub_2484DBEEC(a2, a3, (uint64_t)&v11);
    *(_DWORD *)(a1 + 40) = 0;
    double result = *(double *)&v11;
    long long v7 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v13;
  }
  return result;
}

unsigned int *sub_2484DBEEC(unsigned int *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  unint64_t v4 = (a2 - 1 + *result) / a2;
  *(_DWORD *)a3 = v4;
  *(_DWORD *)(a3 + 4) = (a2 - 1 + v3) / a2;
  uint64_t v5 = ((a2 - 1 + v3) / a2);
  if (((a2 - 1 + v3) / a2))
  {
    uint64_t v6 = 0;
    unint64_t v8 = *((void *)result + 2);
    uint64_t v7 = *((void *)result + 3);
    unint64_t v9 = v8 >> 2;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t v12 = v8 * a2;
    uint64_t v13 = 4 * v9;
    do
    {
      if (v4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        unint64_t v16 = result[1];
        uint64_t v17 = v7;
        do
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          float v20 = 0.0;
          uint64_t v21 = v17;
          do
          {
            if (v18 + v6 * a2 >= v16) {
              break;
            }
            for (uint64_t i = 0; i != a2; ++i)
            {
              if (v14 + i >= (unint64_t)*result) {
                break;
              }
              float v20 = v20 + *(float *)(v21 + 4 * i);
            }
            v19 += i;
            ++v18;
            v21 += v13;
          }
          while (v18 != a2);
          *(float *)(v10 + v11 * v6 + 4 * v15++) = v20 / (float)v19;
          v17 += 4 * a2;
          v14 += a2;
        }
        while (v15 != v4);
      }
      ++v6;
      v7 += v12;
    }
    while (v6 != v5);
  }
  return result;
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x270F98BF8]();
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x270F98C98]();
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

int __fpclassifyf(float a1)
{
  return MEMORY[0x270ED7DF0](a1);
}

uint64_t __memmove_chk()
{
  return MEMORY[0x270ED7E40]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void abort(void)
{
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

float cbrtf(float a1)
{
  MEMORY[0x270ED87C0](a1);
  return result;
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

tm *__cdecl gmtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270ED9DD8](a1);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x270ED9E60](a1, a2);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x270EDA0C8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

float modff(float a1, float *a2)
{
  MEMORY[0x270EDA5B0](a2, a1);
  return result;
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x270EDB1D8](__x, __y);
  return result;
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA70](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}