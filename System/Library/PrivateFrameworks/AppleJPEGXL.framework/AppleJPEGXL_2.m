void sub_248441644(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t vars8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_24844178C(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2484416C8(void ***a1)
{
  v2 = (void ***)*a1;
  if (*v2)
  {
    sub_24844171C((uint64_t)v2, *v2);
    v3 = **a1;
    operator delete(v3);
  }
}

void sub_24844171C(uint64_t a1, void **a2)
{
  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 11;
      v6 = v4 - 8;
      sub_2483FDBFC(&v6);
      v6 = v5;
      sub_2483FDCBC(&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_24844178C(void *a1)
{
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void sub_2484417E4(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((void *)v4 - 5);
        if (v6)
        {
          *((void *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_248441870(uint64_t *result)
{
  uint64_t v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_2483E8DDC((uint64_t *)(v1 + 24));
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_2484418D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_248441870((uint64_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_248441920(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5C0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = ((a2 >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64;
    uint64_t v5 = a1 + 1336;
    do
    {
      v6 = (uint64_t *)(a1 + 1472 * v3);
      sub_2483FECEC(v6 + 180);
      sub_2483FED40(v6 + 177);
      sub_2483FED94(v6 + 174);
      v7 = v6 + 169;
      sub_2483E8DDC(v6 + 172);
      v8 = v6 + 4;
      uint64_t v9 = v5;
      do
      {
        uint64_t v10 = 0;
        v7 -= 15;
        do
        {
          sub_2483E8DDC((uint64_t *)(v9 + v10));
          v10 -= 40;
        }
        while (v10 != -120);
        v9 -= 120;
      }
      while (v7 != v8);
      ++v3;
      v5 += 1472;
    }
    while (v3 != v4);
  }
}

uint64_t sub_2484419F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  int v11 = sub_2484B6770(*(void **)(**(void **)*a1 + 4488), a2, 0);
  if (!v11)
  {
    v12 = 0;
    if (is_mul_ok(a2, 0x5C0uLL))
    {
      v13 = (void *)sub_2483AB3A8(1472 * a2, v4, v5, v6, v7, v8, v9, v10);
      v12 = v13;
      if (v13)
      {
        if (a2) {
          bzero(v13, 1472 * a2);
        }
      }
    }
    uint64_t v14 = *(void *)(v3 + 8);
    memset(v17, 0, sizeof(v17));
    uint64_t v15 = *(void *)v14;
    *(void *)uint64_t v14 = v12;
    if (v15) {
      sub_2483AB42C(v15, *(void (**)(uint64_t, void *))(v14 + 8), *(void *)(v14 + 16));
    }
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    sub_248441360((uint64_t)v17);
  }
  if (v11) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_248441AC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = *(void *)(v3 + 8);
    if (*(_DWORD *)(v6 + 452))
    {
      unint64_t v7 = v6 + 416;
      uint64_t v8 = **(void ***)(v3 + 16);
      uint64_t v9 = (void *)v8[526];
      unint64_t v10 = a2;
      unint64_t v11 = v9[11];
      unint64_t v12 = v9[17];
      unint64_t v13 = v12 >> 3;
      unint64_t v14 = (v12 >> 3) * (a2 / v11);
      unint64_t v16 = v9[9];
      unint64_t v15 = v9[10];
      *(void *)&long long v54 = (v12 >> 3) * (a2 % v11);
      *((void *)&v54 + 1) = v14;
      unint64_t v17 = v16 - v54;
      if (v16 < (unint64_t)v54) {
        unint64_t v17 = 0;
      }
      if ((unint64_t)v54 + (v12 >> 3) <= v16) {
        unint64_t v17 = v12 >> 3;
      }
      unint64_t v18 = v14 + (v12 >> 3);
      BOOL v19 = v15 >= v14;
      unint64_t v20 = v15 - v14;
      if (!v19) {
        unint64_t v20 = 0;
      }
      if (v18 <= v15) {
        unint64_t v21 = v13;
      }
      else {
        unint64_t v21 = v20;
      }
      unint64_t v55 = v17;
      v56[0] = v21;
      sub_24841989C(v7, &v54, v8);
    }
    else
    {
      unint64_t v10 = a2;
    }
    v22 = *(void **)(**(void **)(v3 + 16) + 4488);
    v51[1] = v10;
    v51[2] = a3;
    v51[0] = v22;
    (*(void (**)(long long *__return_ptr, void *, unint64_t, uint64_t))(*v22 + 24))(&v54, v22, v10, a3);
    long long v52 = v54;
    unint64_t v53 = v55;
    uint64_t v28 = **(void **)(v3 + 24);
    uint64_t v29 = *(void *)(v3 + 8);
    uint64_t v47 = **(void **)(v3 + 16);
    uint64_t v30 = **(void **)(v3 + 32);
    *(void *)&long long v54 = &unk_26FC65D30;
    *((void *)&v54 + 1) = v28 + 4224;
    unint64_t v55 = 0;
    v56[33] = v29 + 208;
    uint64_t v31 = *(void *)(v28 + 4232);
    uint64_t v32 = *(void *)(v28 + 4224);
    v33 = (char *)v52;
    if (v31 != v32)
    {
      unint64_t v34 = 0;
      v35 = v56;
      do
      {
        (*(void (**)(void))(**(void **)(v32 + 8 * v34) + 16))(*(void *)(v32 + 8 * v34));
        for (uint64_t i = 0; i != 3; ++i)
          v35[i] = (*(uint64_t (**)(void, uint64_t, unint64_t, void))(**(void **)(**((void **)&v54 + 1) + 8 * v34)
                                                                                        + 24))(*(void *)(**((void **)&v54 + 1) + 8 * v34), i, v10, 0);
        ++v34;
        uint64_t v32 = **((void **)&v54 + 1);
        v35 += 3;
      }
      while (v34 < (uint64_t)(*(void *)(*((void *)&v54 + 1) + 8) - **((void **)&v54 + 1)) >> 3);
    }
    v49 = v22;
    uint64_t v50 = a3;
    if (!sub_2484011E0(v30 + 1472 * a3, 0, 0x7FFFFFFLL, v23, v24, v25, v26, v27)) {
      sub_248403BE8(v29, (uint64_t)&v54, (void *)(v30 + 1472 * a3), v47, v10, (uint64_t)v51, 0);
    }
    v48 = (unsigned __int8 **)v3;
    uint64_t v37 = *(unsigned int *)(*(void *)(v3 + 48) + 320);
    if (v37)
    {
      for (uint64_t j = 0; j != v37; ++j)
      {
        v39 = v33;
        v40 = &v33[40 * j];
        uint64_t v41 = *((void *)v40 + 19);
        if (v41)
        {
          uint64_t v42 = *((void *)v40 + 18);
          uint64_t v43 = *((void *)v40 + 15);
          uint64_t v44 = *(void *)(v43 + 16);
          uint64_t v45 = *(void *)(v43 + 24) + 4 * *((void *)v40 + 16);
          uint64_t v46 = v44 * *((void *)v40 + 17);
          do
          {
            if (v42) {
              bzero((void *)(v45 + v46), 4 * v42);
            }
            v46 += v44;
            --v41;
          }
          while (v41);
        }
        v33 = v39;
      }
    }
    ++*(unsigned char *)(v49[28] + v10);
    if ((*(unsigned int (**)(void *, unint64_t, uint64_t))(*v49 + 32))(v49, v10, v50)) {
      atomic_store(1u, *v48);
    }
    if (v33) {
      operator delete(v33);
    }
  }
}

void sub_248441DFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248441E20(uint64_t result, uint64_t *a2, void *a3, uint64_t a4)
{
  if ((uint64_t *)result != a2)
  {
    unint64_t v7 = (uint64_t *)result;
    do
    {
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      v7 += 2;
      result = sub_248441E78(v8, v9, a3, a4);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t sub_248441E78(uint64_t result, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v4 = __clz(a4 + 1) ^ 0x3F;
  if (((a4 + 1) & a4) != 0) {
    unint64_t v5 = v4 + 1;
  }
  else {
    unint64_t v5 = v4;
  }
  *(void *)(a3[3] + (*a3 >> 3)) = ((unint64_t)result << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
  unint64_t v6 = *a3 + v5;
  *a3 = v6;
  if (result != a4)
  {
    uint64_t v7 = __clz(result + 1) ^ 0x1F;
    if (((result + 1) & result) != 0) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7;
    }
    *(void *)(a3[3] + (v6 >> 3)) = ((unint64_t)a2 << (v6 & 7)) | *(unsigned __int8 *)(a3[3] + (v6 >> 3));
    unint64_t v9 = *a3 + v8;
    *a3 = v9;
    unsigned int v10 = result - a2 + 1;
    uint64_t v11 = __clz(v10) ^ 0x1F;
    if ((v10 & (result - a2)) != 0) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11;
    }
    *(void *)(a3[3] + (v9 >> 3)) = (HIDWORD(a2) << (v9 & 7)) | *(unsigned __int8 *)(a3[3] + (v9 >> 3));
    *a3 += v12;
  }
  return result;
}

unint64_t sub_248441F4C(int a1, int *a2, unint64_t a3, char a4, int a5, uint64_t a6, unint64_t *a7)
{
  size_t v8 = a3;
  unint64_t v9 = a2;
  uint64_t v134 = *MEMORY[0x263EF8340];
  if (a5)
  {
    if (a3 < 2) {
      return 0;
    }
    sub_2483E9AC0(&v126, a3);
    uint64_t v18 = 0;
    BOOL v19 = v126;
    do
    {
      v19[v18] = v9[v18];
      ++v18;
    }
    while (v8 != v18);
    sub_248442AEC(&v124, v8);
    sub_2483F02B8(&v132, v8);
    if (a7)
    {
      unint64_t v20 = *a7;
      sub_2484717B4((uint64_t)v126, v8, (unsigned __int8 *)v124, v132, a7);
      unint64_t v10 = *a7 - v20;
    }
    else
    {
      v131 = 0;
      memset(v130, 0, sizeof(v130));
      v120 = (void *)(8 * v8 + 8);
      uint64_t v121 = 0;
      char v122 = 0;
      v119 = 0;
      sub_2484106F0(&v130[1], (8 * v8 + 15) >> 3);
      if (v130[3]) {
        unint64_t v77 = (8 * v8 + 15) >> 3;
      }
      else {
        unint64_t v77 = 0;
      }
      v123 = v131;
      v130[1] = v77;
      v131 = &v119;
      sub_2484717B4((uint64_t)v126, v8, (unsigned __int8 *)v124, v132, v130);
      uint64_t v129 = 0;
      sub_24841962C((uint64_t)&v119, v130, &v129, &v128);
      unint64_t v10 = v130[0];
      uint64_t v78 = v130[3];
      v130[3] = 0;
      if (v78)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v78 - 24));
        free(*(void **)(v78 - 32));
      }
    }
    uint64_t v79 = 0;
    v80 = v124;
    v81 = (_WORD *)v132;
    if (v8 <= 1) {
      uint64_t v82 = 1;
    }
    else {
      uint64_t v82 = v8;
    }
    v83 = (_WORD *)(a6 + 42);
    do
    {
      __int16 v84 = v80[v79];
      if (v80[v79]) {
        __int16 v84 = v81[v79];
      }
      _WORD *v83 = v84;
      *((unsigned char *)v83 - 2) = v80[v79++];
      v83 += 24;
    }
    while (v82 != v79);
    if (!v81 || (v133 = v81, operator delete(v81), (v80 = v124) != 0))
    {
      *(void *)&long long v125 = v80;
      operator delete(v80);
    }
    v85 = (unsigned __int8 *)(a6 + 40);
    do
    {
      int v87 = *v9++;
      int v86 = v87;
      int v88 = *v85;
      v85 += 48;
      v10 += v86 * (uint64_t)v88;
      --v82;
    }
    while (v82);
    v89 = v126;
    if (v126)
    {
      v127 = v126;
      goto LABEL_138;
    }
    return v10;
  }
  LODWORD(v129) = 0;
  unsigned int v12 = sub_248442B60(a2, a3, (float *)&v129, a1);
  LODWORD(v128) = 0;
  uint64_t v132 = 0;
  v133 = 0;
  v124 = 0;
  long long v125 = 0uLL;
  sub_248442C9C(&v124, v9, (uint64_t)&v9[v8], v8);
  unint64_t v13 = (int *)v124;
  uint64_t v14 = v125;
  if (v124 != (void *)v125)
  {
    uint64_t v15 = 0;
    unint64_t v16 = (int *)v124;
    do
    {
      uint64_t v17 = *v16++;
      v15 += v17;
    }
    while (v16 != (int *)v125);
    if (!v15) {
      *(_DWORD *)v124 = 4096;
    }
  }
  int v118 = 0;
  if (v12)
  {
    sub_248442D18(v13, &v118, v8, v12 - 1, (int *)&v128, (int *)&v132);
  }
  else
  {
    sub_2483E91B8(v130, v8);
    if (v13) {
      operator delete(v13);
    }
    unint64_t v13 = (int *)v130[0];
    v124 = (void *)v130[0];
    long long v125 = *(_OWORD *)&v130[1];
    uint64_t v14 = v130[1];
  }
  v116 = 0;
  uint64_t v117 = 0;
  __p = 0;
  sub_2483F2450(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
  sub_2483E93FC((_DWORD **)&__p, a4, (uint64_t)v130);
  uint64_t v21 = a6;
  unsigned int v107 = v12;
  unsigned int v108 = v12 - 1;
  if (__p)
  {
    v116 = __p;
    operator delete(__p);
  }
  uint64_t v22 = 0;
  uint64_t v23 = (int *)v124;
  char v106 = 12 - a4;
  int v105 = -1 << (12 - a4);
  if (v8 <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v8;
  }
  v112 = (_WORD *)(a6 + 48 * v8);
  unint64_t v113 = v8;
  v109 = (int *)v124;
  v110 = a7;
  uint64_t v111 = v24;
  do
  {
    if (v22 == v8)
    {
      LODWORD(v25) = 4096;
      _WORD *v112 = 4096;
LABEL_27:
      unint64_t v26 = ((unint64_t)(unsigned __int16)v25 + 0xFFFFFFFFFFFLL) / (unsigned __int16)v25;
      goto LABEL_28;
    }
    LODWORD(v25) = v23[v22];
    *(_WORD *)(v21 + 48 * v22) = v25;
    if (v25) {
      goto LABEL_27;
    }
    unint64_t v26 = 1;
LABEL_28:
    uint64_t v27 = v21 + 48 * v22;
    uint64_t v30 = *(void *)(v27 + 8);
    uint64_t v29 = (char **)(v27 + 8);
    uint64_t v28 = v30;
    v29[3] = (char *)v26;
    unint64_t v25 = (int)v25;
    uint64_t v31 = (void **)(v29 + 1);
    uint64_t v32 = v29[1];
    unint64_t v33 = (uint64_t)&v32[-v30] >> 1;
    if ((int)v25 <= v33)
    {
      if ((int)v25 < v33) {
        *uint64_t v31 = (void *)(v28 + 2 * (int)v25);
      }
    }
    else
    {
      unint64_t v34 = (int)v25 - v33;
      uint64_t v35 = v21 + 48 * v22;
      uint64_t v38 = *(void *)(v35 + 24);
      uint64_t v37 = (void *)(v35 + 24);
      uint64_t v36 = v38;
      if (v34 <= (v38 - (uint64_t)v32) >> 1)
      {
        bzero(v29[1], 2 * v34);
        *uint64_t v31 = &v32[2 * v34];
        size_t v8 = v113;
        uint64_t v21 = a6;
        uint64_t v24 = v111;
      }
      else
      {
        if ((v25 & 0x80000000) != 0) {
          sub_2483E92E8();
        }
        unint64_t v39 = v36 - v28;
        if (v39 > (int)v25) {
          unint64_t v25 = v39;
        }
        if (v39 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v40 = v25;
        }
        uint64_t v41 = (char *)sub_2483F0344(v40);
        uint64_t v43 = v42;
        uint64_t v44 = (char *)*v31;
        uint64_t v45 = *v29;
        uint64_t v46 = &v41[2 * v33];
        bzero(v46, 2 * v34);
        uint64_t v47 = v46;
        while (v44 != v45)
        {
          __int16 v48 = *((_WORD *)v44 - 1);
          v44 -= 2;
          *((_WORD *)v47 - 1) = v48;
          v47 -= 2;
        }
        *uint64_t v29 = v47;
        *uint64_t v31 = &v46[2 * v34];
        *uint64_t v37 = &v41[2 * v43];
        uint64_t v23 = v109;
        a7 = v110;
        size_t v8 = v113;
        uint64_t v21 = a6;
        uint64_t v24 = v111;
        if (v45) {
          operator delete(v45);
        }
      }
    }
    ++v22;
  }
  while (v22 != v24);
  for (unint64_t i = 0; i != 4096; ++i)
  {
    unint64_t v50 = i >> v106;
    unint64_t v51 = i & ~v105;
    uint64_t v52 = v130[i >> v106];
    unint64_t v53 = BYTE1(v52);
    uint64_t v54 = WORD2(v52);
    if (v130[i >> v106] <= v51) {
      unint64_t v50 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    *(_WORD *)(*(void *)(v21 + 48 * v50 + 8) + 2 * (v54 + v51)) = i;
  }
  if (!a7) {
    goto LABEL_136;
  }
  if (!v107)
  {
    *(void *)(a7[3] + (*a7 >> 3)) = *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
    unint64_t v60 = *a7 + 1;
    *a7 = v60;
    *(void *)(a7[3] + (v60 >> 3)) = (1 << (v60 & 7)) | *(unsigned __int8 *)(a7[3] + (v60 >> 3));
    ++*a7;
    sub_248443100((int)v8 - 1, a7);
    goto LABEL_136;
  }
  uint64_t v55 = (int)v128;
  unint64_t v56 = *a7 >> 3;
  unint64_t v57 = a7[3];
  if ((int)v128 > 2)
  {
    uint64_t v61 = v118;
    *(void *)(v57 + v56) = *(unsigned __int8 *)(v57 + v56);
    unint64_t v62 = *a7 + 1;
    *a7 = v62;
    *(void *)(a7[3] + (v62 >> 3)) = *(unsigned __int8 *)(a7[3] + (v62 >> 3));
    ++*a7;
    LODWORD(v126) = 0;
    sub_2484431AC(&v119, v8, &v126);
    if ((int)v8 >= 2)
    {
      uint64_t v63 = 0;
      int v64 = 0;
      v65 = v119;
      do
      {
        int v66 = v63 - v64 + 1;
        if (v61 - 1 == v63
          || (v23[v63 + 1] == v23[v64] ? (BOOL v67 = v113 - 2 == v63) : (BOOL v67 = 1),
              v67 || (v66 <= 254 ? (BOOL v68 = (v61 + 1) - 1 == v63) : (BOOL v68 = 1), v68)))
        {
          v65[v64] = v66;
          int v64 = v63 + 2;
        }
        ++v63;
      }
      while (v113 - 1 != v63);
    }
    sub_2483F23D8(&v126, v113);
    v69 = v126;
    if ((int)v113 < 1)
    {
      signed int v72 = 0;
      int v71 = 0;
    }
    else
    {
      uint64_t v70 = 0;
      int v71 = 0;
      signed int v72 = 0;
      do
      {
        if (v61 == v70)
        {
          int v71 = v61 + 1;
        }
        else
        {
          signed int v73 = v23[v70];
          if (v73 >= 1)
          {
            unsigned int v74 = __clz(v73);
            unsigned int v75 = 32 - v74;
            v69[v70] = 32 - v74;
            int v71 = v70 + 1;
            if (v72 > (int)(32 - v74)) {
              unsigned int v75 = v72;
            }
            signed int v76 = 33 - v74;
            if (v72 <= v76) {
              signed int v72 = v76;
            }
            if (v70 >= v61) {
              signed int v72 = v75;
            }
          }
        }
        ++v70;
      }
      while (v113 != v70);
    }
    v69[v61] = v72;
    uint64_t v91 = __clz(v107) ^ 0x1F;
    uint64_t v92 = ~(-1 << v91);
    *(void *)(a7[3] + (*a7 >> 3)) = (v92 << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
    unint64_t v93 = *a7 + v91;
    *a7 = v93;
    if (v91 != 3)
    {
      *(void *)(a7[3] + (v93 >> 3)) = *(unsigned __int8 *)(a7[3] + (v93 >> 3));
      unint64_t v93 = *a7 + 1;
      *a7 = v93;
    }
    *(void *)(a7[3] + (v93 >> 3)) = ((unint64_t)(v107 & v92) << (v93 & 7)) | *(unsigned __int8 *)(a7[3] + (v93 >> 3));
    *a7 += v91;
    if (v71 >= 259)
    {
      sub_248443100(0xFFuLL, a7);
    }
    else
    {
      sub_248443100(v71 - 3, a7);
      if (v71 < 1) {
        goto LABEL_132;
      }
    }
    int v94 = 0;
    while (v94 > 0)
    {
      uint64_t v95 = (v94 - 1);
      unint64_t v96 = *a7;
      if (*((_DWORD *)v119 + v95) < 5u) {
        goto LABEL_120;
      }
      *(void *)(a7[3] + (v96 >> 3)) = (65 << (v96 & 7)) | *(unsigned __int8 *)(a7[3] + (v96 >> 3));
      *a7 += 7;
      sub_248443100(*((unsigned int *)v119 + v95) - 5, a7);
      int v94 = v94 + *((_DWORD *)v119 + v95) - 2;
LABEL_121:
      if (++v94 >= v71)
      {
        for (int j = 0; j < v71; ++j)
        {
          if (j < 1 || (unsigned int v100 = *((_DWORD *)v119 + (j - 1)), v100 < 5))
          {
            if (j != v61)
            {
              int v101 = *((_DWORD *)v126 + j);
              if (v101 >= 2)
              {
                int v102 = v101 - 1;
                if ((int)(v108 - ((13 - v101) >> 1)) < v101 - 1) {
                  int v102 = v108 - ((13 - v101) >> 1);
                }
                uint64_t v103 = v102 & ~(v102 >> 31);
                *(void *)(a7[3] + (*a7 >> 3)) = ((uint64_t)((v23[j] >> (v101 + ~(_BYTE)v103)) + (-1 << v103)) << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
                *a7 += v103;
              }
            }
          }
          else
          {
            int j = j + v100 - 2;
          }
        }
LABEL_132:
        if (v126)
        {
          v127 = v126;
          operator delete(v126);
        }
        if (v119)
        {
          v120 = v119;
          operator delete(v119);
        }
        goto LABEL_136;
      }
    }
    unint64_t v96 = *a7;
LABEL_120:
    uint64_t v97 = *((int *)v126 + v94);
    uint64_t v98 = byte_24854EA90[v97];
    *(void *)(a7[3] + (v96 >> 3)) = ((unint64_t)byte_24854EA9E[v97] << (v96 & 7)) | *(unsigned __int8 *)(a7[3] + (v96 >> 3));
    *a7 += v98;
    goto LABEL_121;
  }
  *(void *)(v57 + v56) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(v57 + v56);
  unint64_t v58 = *a7 + 1;
  *a7 = v58;
  if (!v55)
  {
    *(void *)(a7[3] + (v58 >> 3)) = *(unsigned __int8 *)(a7[3] + (v58 >> 3));
    unint64_t v90 = *a7 + 1;
    *a7 = v90;
    *(void *)(a7[3] + (v90 >> 3)) = *(unsigned __int8 *)(a7[3] + (v90 >> 3));
    ++*a7;
    goto LABEL_136;
  }
  *(void *)(a7[3] + (v58 >> 3)) = ((v55 - 1) << (v58 & 7)) | *(unsigned __int8 *)(a7[3] + (v58 >> 3));
  ++*a7;
  if ((int)v55 >= 1)
  {
    uint64_t v59 = 0;
    do
    {
      sub_248443100(*(int *)((char *)&v132 + v59), a7);
      v59 += 4;
    }
    while (4 * v55 != v59);
    if (v55 == 2)
    {
      *(void *)(a7[3] + (*a7 >> 3)) = ((uint64_t)v23[(int)v132] << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
      *a7 += 12;
      unint64_t v10 = (unint64_t)*(float *)&v129;
      goto LABEL_137;
    }
  }
LABEL_136:
  unint64_t v10 = (unint64_t)*(float *)&v129;
  if (v23)
  {
LABEL_137:
    v89 = v23;
LABEL_138:
    operator delete(v89);
  }
  return v10;
}

void sub_248442A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a38 - 24));
    free(*(void **)(a38 - 32));
  }
  uint64_t v40 = *(void **)(v38 - 128);
  if (v40)
  {
    *(void *)(v38 - 120) = v40;
    operator delete(v40);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void *sub_248442AEC(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483F0278(a1, a2);
    unint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_248442B44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248442B60(int *a1, unint64_t a2, float *a3, int a4)
{
  sub_248443230(a1, a2, 0);
  float v9 = v8;
  if (a4)
  {
    if (a4 == 2)
    {
      LODWORD(v10) = 0;
      for (unsigned int i = 1; ; ++i)
      {
        sub_248443230(a1, a2, i);
        if (v14 >= v9)
        {
          uint64_t v10 = v10;
        }
        else
        {
          float v9 = v14;
          uint64_t v10 = i;
        }
        if (i == 13) {
          break;
        }
      }
    }
    else if (a4 == 1)
    {
      LODWORD(v10) = 0;
      unsigned int v11 = -2;
      do
      {
        sub_248443230(a1, a2, v11 + 3);
        if (v12 >= v9)
        {
          uint64_t v10 = v10;
        }
        else
        {
          float v9 = v12;
          uint64_t v10 = v11 + 3;
        }
        v11 += 2;
      }
      while (v11 < 0xB);
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    sub_248443230(a1, a2, 1u);
    LODWORD(v10) = v15 < v9;
    if (v15 < v9) {
      float v9 = v15;
    }
    sub_248443230(a1, a2, 7u);
    if (v16 >= v9)
    {
      uint64_t v10 = v10;
    }
    else
    {
      float v9 = v16;
      uint64_t v10 = 7;
    }
    sub_248443230(a1, a2, 0xDu);
    if (v17 < v9)
    {
      uint64_t v10 = 13;
      float v9 = v17;
    }
  }
  *a3 = v9;
  return v10;
}

void *sub_248442C9C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    result = sub_2483E92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248442CFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_248442D18(int *a1, _DWORD *a2, int a3, int a4, int *a5, int *a6)
{
  if (a3 <= 0)
  {
    *a5 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = a1[v9];
      if ((int)v13 <= 0)
      {
        ++v9;
      }
      else
      {
        if (v12 <= 3) {
          a6[v12] = v9;
        }
        ++v12;
        int v11 = ++v9;
      }
      v10 += v13;
    }
    while (v9 != a3);
    *a5 = v12;
    if (v12)
    {
      if (v12 == 1)
      {
        a1[*a6] = 4096;
      }
      else if (v12 <= 4096)
      {
        sub_24842DF64(&v62, v11);
        float v14 = v62;
        if (v63 != v62)
        {
          unint64_t v15 = v63 - v62;
          if (v15 <= 1) {
            unint64_t v15 = 1;
          }
          float v16 = a1;
          float v17 = v62;
          do
          {
            int v18 = *v16++;
            *v17++ = (float)(4096.0 / (float)v10) * (float)v18;
            --v15;
          }
          while (v15);
        }
        if (v11 < 1)
        {
          int v19 = 0;
          int v27 = 0;
        }
        else
        {
          int v19 = 0;
          float v20 = 0.0;
          uint64_t v21 = v14;
          uint64_t v22 = a1;
          uint64_t v23 = v11;
          do
          {
            float v24 = *v21;
            if (*v21 > 0.0 && v24 < 1.0)
            {
              int *v22 = 1;
              float v20 = v20 + v24;
              ++v19;
            }
            ++v22;
            ++v21;
            --v23;
          }
          while (v23);
          uint64_t v26 = 0;
          int v27 = 0;
          float v28 = (float)(4096 - v19) / (float)(4096.0 - v20);
          int v29 = -1;
          do
          {
            float v30 = v14[v26];
            if (v30 >= 1.0)
            {
              unsigned int v31 = (int)(float)(v28 * v30);
              if (v31 <= 1) {
                unsigned int v31 = 1;
              }
              if (v31 == 4096) {
                unsigned int v32 = 4095;
              }
              else {
                unsigned int v32 = v31;
              }
              signed int v33 = __clz(v32) ^ 0x1F;
              int v34 = a4 - ((12 - v33) >> 1);
              if (v34 >= v33) {
                int v34 = v33;
              }
              int v35 = v34 & ~(v34 >> 31);
              BOOL v36 = v33 < v35;
              int v37 = 1 << (v33 - v35);
              if (v36) {
                int v37 = 1;
              }
              unsigned int v38 = v32 & -v37;
              a1[v26] = v38;
              if (!v38
                || (v37 >= 0 ? (int v39 = v37) : (int v39 = v37 + 1),
                    (int)(v38 + (v39 >> 1)) <= (int)v30 && (v37 += v38, v37 <= 4095)))
              {
                a1[v26] = v37;
                unsigned int v38 = v37;
              }
              v19 += v38;
              signed int v40 = __clz(v38) ^ 0x1F;
              if (v29 < v40) {
                int v27 = v26;
              }
              if (v29 <= v40) {
                int v29 = v40;
              }
            }
            ++v26;
          }
          while (v11 != v26);
        }
        a1[v27] = a1[v27] - v19 + 4096;
        *a2 = v27;
        if (a1[v27] <= 0)
        {
          if (v11 < 1)
          {
            int v41 = 0;
            int v49 = 0;
          }
          else
          {
            int v41 = 0;
            float v42 = 0.0;
            uint64_t v43 = v14;
            uint64_t v44 = a1;
            uint64_t v45 = v11;
            do
            {
              float v46 = *v43;
              if (*v43 > 0.0 && v46 < 1.0)
              {
                *uint64_t v44 = 1;
                float v42 = v42 + v46;
                ++v41;
              }
              ++v44;
              ++v43;
              --v45;
            }
            while (v45);
            uint64_t v48 = 0;
            int v49 = 0;
            float v50 = (float)(4096 - v41) / (float)(4096.0 - v42);
            int v51 = -1;
            do
            {
              float v52 = v14[v48];
              if (v52 >= 1.0)
              {
                float v42 = v42 + v52;
                unsigned int v53 = (int)(float)(v50 * v52);
                if (v53 <= 1) {
                  unsigned int v53 = 1;
                }
                if (v53 == 4096) {
                  unsigned int v54 = 4095;
                }
                else {
                  unsigned int v54 = v53;
                }
                signed int v55 = __clz(v54) ^ 0x1F;
                int v56 = a4 - ((12 - v55) >> 1);
                if (v56 >= v55) {
                  int v56 = v55;
                }
                int v57 = v56 & ~(v56 >> 31);
                BOOL v36 = v55 < v57;
                int v58 = 1 << (v55 - v57);
                if (v36) {
                  int v58 = 1;
                }
                unsigned int v59 = v54 & -v58;
                a1[v48] = v59;
                if (!v59
                  || (v58 >= 0 ? (int v60 = v58) : (int v60 = v58 + 1),
                      (int)v42 - v41 >= (int)(v59 + (v60 >> 1)) && (v58 += v59, v58 <= 4095)))
                {
                  a1[v48] = v58;
                  unsigned int v59 = v58;
                }
                v41 += v59;
                signed int v61 = __clz(v59) ^ 0x1F;
                if (v51 < v61) {
                  int v49 = v48;
                }
                if (v51 <= v61) {
                  int v51 = v61;
                }
              }
              ++v48;
            }
            while (v11 != v48);
          }
          a1[v49] = a1[v49] - v41 + 4096;
          *a2 = v49;
        }
        if (v14)
        {
          uint64_t v63 = v14;
          operator delete(v14);
        }
      }
    }
  }
}

unint64_t sub_248443100(unint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2 >> 3;
  unint64_t v3 = a2[3];
  if (result)
  {
    *(void *)(v3 + v2) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3 + v2);
    unint64_t v4 = *a2 + 1;
    *a2 = v4;
    unint64_t v5 = __clz(result) ^ 0x3F;
    *(void *)(a2[3] + (v4 >> 3)) = (v5 << (v4 & 7)) | *(unsigned __int8 *)(a2[3] + (v4 >> 3));
    unint64_t v6 = *a2 + 3;
    *a2 = v6;
    *(void *)(a2[3] + (v6 >> 3)) = (((-1 << v5) + result) << (v6 & 7)) | *(unsigned __int8 *)(a2[3] + (v6 >> 3));
  }
  else
  {
    *(void *)(v3 + v2) = *(unsigned __int8 *)(v3 + v2);
    unint64_t v5 = 1;
  }
  *a2 += v5;
  return result;
}

void *sub_2484431AC(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_248443214(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_248443230(int *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1;
  v70[2] = *MEMORY[0x263EF8340];
  if (a3)
  {
    memset(v67, 0, sizeof(v67));
    sub_248442C9C(v67, a1, (uint64_t)&a1[a2], a2);
    unsigned int v6 = a3 - 1;
    uint64_t v66 = 0;
    v70[0] = 0;
    v70[1] = 0;
    uint64_t v7 = v67[0];
    sub_248442D18(v67[0], (_DWORD *)&v66 + 1, v3, a3 - 1, (int *)&v66, (int *)v70);
    if ((int)v66 <= 2)
    {
      if (v66)
      {
        if ((int)v66 >= 1)
        {
          uint64_t v9 = (int *)v70;
          uint64_t v10 = 2;
          uint64_t v11 = v66;
          do
          {
            unint64_t v12 = *v9++;
            unint64_t v13 = v10 - __clz(v12) + 67;
            if (v12) {
              uint64_t v10 = v13;
            }
            else {
              ++v10;
            }
            --v11;
          }
          while (v11);
          if (!v3) {
            goto LABEL_85;
          }
LABEL_79:
          int32x2_t v51 = vdup_n_s32(0xC0D55555);
          __asm { FMOV            V3.2S, #-1.0 }
          float32x2_t v53 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
          float32x2_t v54 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
          float32x2_t v55 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
          float32x2_t v56 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
          float32x2_t v57 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
          float32x2_t v58 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
          unsigned int v59 = v7;
          float v60 = 0.0;
          do
          {
            int v62 = *v4++;
            int v61 = v62;
            if (v62 >= 1)
            {
              *(float *)v8.i32 = (float)*v59;
              int32x2_t v63 = vdup_lane_s32(v8, 0);
              int32x2_t v64 = vadd_s32(v63, v51);
              float32x2_t v65 = vadd_f32((float32x2_t)vsub_s32(v63, (int32x2_t)vand_s8((int8x8_t)v64, (int8x8_t)0x7F0000007FLL)), _D3);
              int32x2_t v8 = (int32x2_t)vadd_f32(vdiv_f32(vmla_f32(v57, v65, vmla_f32(v54, v53, v65)), vmla_f32(v58, v65, vmla_f32(v56, v55, v65))), vcvt_f32_s32(vshr_n_s32(v64, 0x17uLL)));
              float v60 = v60 + (float)((float)v61 * fmaxf(12.0 - *(float *)v8.i32, 0.0));
            }
            ++v59;
            --v3;
          }
          while (v3);
          goto LABEL_85;
        }
        if (v3) {
          goto LABEL_79;
        }
      }
      else if (v3)
      {
        goto LABEL_79;
      }
LABEL_85:
      if (v7) {
        operator delete(v7);
      }
      return;
    }
    uint64_t v21 = SHIDWORD(v66);
    LODWORD(__p[0]) = 0;
    sub_2484431AC(v69, (int)v3, __p);
    if ((int)v3 >= 2)
    {
      uint64_t v22 = 0;
      int v23 = 0;
      float v24 = v69[0];
      do
      {
        int v25 = v22 - v23 + 1;
        if (v21 - 1 == v22
          || (v7[v22 + 1] == v7[v23] ? (_ZF = v3 - 2 == v22) : (_ZF = 1),
              _ZF || (v25 <= 254 ? (BOOL v27 = (v21 + 1) - 1 == v22) : (BOOL v27 = 1), v27)))
        {
          v24[v23] = v25;
          int v23 = v22 + 2;
        }
        ++v22;
      }
      while (v3 - 1 != v22);
    }
    sub_2483F23D8(__p, (int)v3);
    float v28 = (int *)__p[0];
    if ((int)v3 < 1)
    {
      signed int v31 = 0;
      int v30 = 0;
    }
    else
    {
      uint64_t v29 = 0;
      int v30 = 0;
      signed int v31 = 0;
      do
      {
        if (v21 == v29)
        {
          int v30 = v21 + 1;
        }
        else
        {
          signed int v32 = v7[v29];
          if (v32 >= 1)
          {
            unsigned int v33 = __clz(v32);
            unsigned int v34 = 32 - v33;
            v28[v29] = 32 - v33;
            int v30 = v29 + 1;
            if (v31 > (int)(32 - v33)) {
              unsigned int v34 = v31;
            }
            signed int v35 = 33 - v33;
            if (v31 <= v35) {
              signed int v31 = v35;
            }
            if (v29 >= v21) {
              signed int v31 = v34;
            }
          }
        }
        ++v29;
      }
      while (v3 != v29);
    }
    v28[v21] = v31;
    unsigned int v36 = __clz(a3) ^ 0x1F;
    uint64_t v37 = 2 * v36;
    _ZF = v36 == 3;
    uint64_t v38 = 2;
    if (!_ZF) {
      uint64_t v38 = 3;
    }
    uint64_t v39 = v38 + v37;
    if (v30 >= 259)
    {
      unint64_t v41 = v39 + 11;
    }
    else
    {
      unint64_t v40 = v39 - __clz(v30 - 3) + 67;
      if (v30 == 3) {
        unint64_t v41 = v39 + 1;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v30 < 1) {
        goto LABEL_75;
      }
    }
    int v42 = 0;
    uint64_t v43 = v69[0];
    do
    {
      if (v42 < 1 || (uint64_t v44 = *((unsigned int *)v69[0] + (v42 - 1)), v44 < 5))
      {
        v41 += byte_24854EA90[v28[v42]];
      }
      else
      {
        unint64_t v45 = v41 - __clz(v44 - 5) + 74;
        if (v44 == 5) {
          v41 += 8;
        }
        else {
          unint64_t v41 = v45;
        }
        int v42 = v42 + v44 - 2;
      }
      ++v42;
    }
    while (v42 < v30);
    for (int i = 0; i < v30; ++i)
    {
      if (i < 1 || (unsigned int v47 = *((_DWORD *)v69[0] + (i - 1)), v47 < 5))
      {
        if (i != v21)
        {
          int v48 = v28[i];
          if (v48 >= 2)
          {
            int v49 = v48 - 1;
            int v50 = v6 - ((13 - v48) >> 1);
            if (v50 >= v49) {
              int v50 = v49;
            }
            v41 += v50 & ~(v50 >> 31);
          }
        }
      }
      else
      {
        int i = i + v47 - 2;
      }
    }
    if (!v28)
    {
LABEL_76:
      if (v43)
      {
        v69[1] = v43;
        operator delete(v43);
      }
      if (!v3) {
        goto LABEL_85;
      }
      goto LABEL_79;
    }
LABEL_75:
    __p[1] = v28;
    operator delete(v28);
    uint64_t v43 = v69[0];
    goto LABEL_76;
  }
  float v14 = 0.0;
  if (a2)
  {
    unint64_t v15 = a2;
    do
    {
      int v16 = *v4++;
      float v14 = v14 + (float)v16;
      --v15;
    }
    while (v15);
  }
  __asm { FMOV            V4.2S, #-1.0 }
}

void sub_248443798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2484437D4(unint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2 >> 3;
  unint64_t v3 = a2[3];
  if (result)
  {
    *(void *)(v3 + v2) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3 + v2);
    unint64_t v4 = *a2 + 1;
    *a2 = v4;
    unint64_t v5 = __clz(result) ^ 0x3F;
    *(void *)(a2[3] + (v4 >> 3)) = (v5 << (v4 & 7)) | *(unsigned __int8 *)(a2[3] + (v4 >> 3));
    unint64_t v6 = *a2 + 4;
    *a2 = v6;
    *(void *)(a2[3] + (v6 >> 3)) = (((-1 << v5) + result) << (v6 & 7)) | *(unsigned __int8 *)(a2[3] + (v6 >> 3));
  }
  else
  {
    *(void *)(v3 + v2) = *(unsigned __int8 *)(v3 + v2);
    unint64_t v5 = 1;
  }
  *a2 += v5;
  return result;
}

char *sub_248443880(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a8;
  uint64_t v9 = a4;
  uint64_t v10 = (uint64_t *)a3;
  uint64_t v11 = a1;
  uint64_t v731 = *MEMORY[0x263EF8340];
  v632 = a4 + 7;
  a4[12] = a2;
  long long v689 = 0uLL;
  uint64_t v690 = 0;
  if (*(unsigned char *)(a1 + 49)) {
    *((unsigned char *)a4 + 64) = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48)) {
    int v13 = 512;
  }
  else {
    int v13 = 224;
  }
  *((_DWORD *)a4 + 17) = v13;
  int v14 = *(_DWORD *)(a1 + 8);
  if (v14)
  {
    if (v14 == 2)
    {
      sub_248447AE4(a1, a2, a3, (uint64_t)v632, (uint64_t)&v689);
    }
    else if (v14 == 1)
    {
      sub_248447434((uint64_t)__src, a2, v12 != 0, (int ***)a3, v632);
      sub_2484477B4((uint64_t)&v689, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
      v691[0] = 0;
      v691[1] = 0;
      *(void *)&long long v692 = 0;
      unint64_t v15 = (int **)*v10;
      if (v10[1] == *v10)
      {
        float v18 = 0.0;
        double v113 = 0.0;
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
        float v18 = 0.0;
        do
        {
          uint64_t v19 = *(void *)(v11 + 16);
          unint64_t v659 = v16;
          if (v17 >= (*(void *)(v11 + 24) - v19) >> 3) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = *(void *)(v19 + 8 * v17);
          }
          unint64_t v665 = v17;
          uint64_t v21 = 3 * v17;
          uint64_t v22 = &v15[3 * v17];
          uint64_t v23 = v689;
          float v24 = v22 + 1;
          uint64_t v25 = (char *)v22[1] - (char *)*v22;
          sub_2484479D0((char **)v691, (v25 >> 3) + 1);
          uint64_t v26 = *v22;
          unint64_t v27 = ((char *)v22[1] - (char *)*v22) >> 3;
          if (v22[1] != *v22)
          {
            float v28 = __src[0];
            uint64_t v29 = (float *)__src[1];
            if (v27 <= 1) {
              uint64_t v30 = 1;
            }
            else {
              uint64_t v30 = ((char *)*v24 - (char *)*v22) >> 3;
            }
            signed int v31 = (float *)((char *)v691[0] + 4);
            signed int v32 = (unsigned int *)(v26 + 1);
            unsigned int v33 = (unsigned int *)(v26 + 1);
            do
            {
              unsigned int v35 = *v33;
              v33 += 2;
              unsigned int v34 = v35;
              unsigned int v36 = __clz(v35);
              unsigned int v37 = 29 - v36;
              unsigned int v38 = (((-1 << (v36 ^ 0x1F)) + v35) >> (29 - v36)) - 4 * v36 + 124;
              BOOL v39 = v35 >= 0x10;
              if (v35 >= 0x10) {
                unsigned int v40 = v37;
              }
              else {
                unsigned int v40 = 0;
              }
              if (v39) {
                unsigned int v34 = v38;
              }
              *signed int v31 = (float)(v29[(void)v28 * ((unint64_t)*(v32 - 1) >> 1) + v34] + (float)v40) + *(v31 - 1);
              ++v31;
              signed int v32 = v33;
              --v30;
            }
            while (v30);
          }
          unint64_t v41 = (void **)(v23 + 8 * v21);
          sub_248430A8C(v41, v27);
          uint64_t v656 = v25;
          int v42 = *v22;
          if (*v24 != *v22)
          {
            unint64_t v43 = 0;
            unint64_t v44 = ((char *)*v24 - (char *)*v22) >> 3;
            BOOL v671 = v20 != 0;
            uint64_t v45 = v23 + 24 * v665;
            float v46 = (void **)(v45 + 8);
            unsigned int v47 = (void *)(v45 + 16);
            do
            {
              if (!v43) {
                goto LABEL_38;
              }
              BOOL v66 = v44 > v43;
              unint64_t v48 = v44 - v43;
              if (!v66) {
                goto LABEL_38;
              }
              unint64_t v49 = 0;
              int v50 = &v42[2 * v43 + 1];
              while (1)
              {
                int v51 = *v50;
                v50 += 2;
                if (v51 != v42[2 * v43 - 1]) {
                  break;
                }
                if (v48 == ++v49)
                {
                  unint64_t v49 = v48;
                  break;
                }
              }
              if (v49)
              {
                unint64_t v52 = *((unsigned int *)a4 + 18);
                unint64_t v53 = v49 - v52;
                if (v49 >= v52)
                {
                  unint64_t v62 = __clz(v53 + 1) ^ 0x3F;
                  if (((v53 + 1) & v53) != 0) {
                    unint64_t v63 = v62 + 1;
                  }
                  else {
                    unint64_t v63 = v62;
                  }
                  unint64_t v54 = v63 + 1;
                }
                else
                {
                  unint64_t v54 = 0;
                }
                float v64 = *((float *)v691[0] + v49 + v43) - *((float *)v691[0] + v43);
                float v65 = (float)v54;
                BOOL v66 = v49 >= v52 && v64 > v65;
                if (v66)
                {
                  int v81 = v42[2 * v43];
                  uint64_t v82 = (char *)*v46;
                  if ((unint64_t)*v46 >= *v47)
                  {
                    uint64_t v89 = (v82 - (unsigned char *)*v41) >> 3;
                    unint64_t v90 = v89 + 1;
                    __int16 v84 = a4;
                    if ((unint64_t)(v89 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    uint64_t v91 = *v47 - (void)*v41;
                    if (v91 >> 2 > v90) {
                      unint64_t v90 = v91 >> 2;
                    }
                    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v92 = v90;
                    }
                    unint64_t v93 = (char *)sub_2483F04AC(v92);
                    uint64_t v95 = (unsigned int *)&v93[8 * v89];
                    *uint64_t v95 = v81 & 0xFFFFFFFE;
                    v95[1] = v53;
                    unint64_t v96 = (char *)*v46;
                    uint64_t v97 = (char *)*v41;
                    uint64_t v98 = v95;
                    if (*v46 == *v41)
                    {
                      float v24 = v22 + 1;
                    }
                    else
                    {
                      float v24 = v22 + 1;
                      do
                      {
                        uint64_t v99 = *((void *)v96 - 1);
                        v96 -= 8;
                        *((void *)v98 - 1) = v99;
                        v98 -= 2;
                      }
                      while (v96 != v97);
                      unint64_t v96 = (char *)*v41;
                    }
                    *unint64_t v41 = v98;
                    v83 = v95 + 2;
                    *float v46 = v95 + 2;
                    *unsigned int v47 = &v93[8 * v94];
                    if (v96) {
                      operator delete(v96);
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v82 = v81 & 0xFFFFFFFE;
                    *((_DWORD *)v82 + 1) = v53;
                    v83 = v82 + 8;
                    __int16 v84 = a4;
                    float v24 = v22 + 1;
                  }
                  *float v46 = v83;
                  *(v83 - 2) |= 1u;
                  unsigned int v100 = (char *)*v46;
                  if ((unint64_t)*v46 >= *v47)
                  {
                    uint64_t v102 = (v100 - (unsigned char *)*v41) >> 3;
                    unint64_t v103 = v102 + 1;
                    if ((unint64_t)(v102 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    uint64_t v104 = *v47 - (void)*v41;
                    if (v104 >> 2 > v103) {
                      unint64_t v103 = v104 >> 2;
                    }
                    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v105 = v103;
                    }
                    char v106 = (char *)sub_2483F04AC(v105);
                    unsigned int v108 = &v106[8 * v102];
                    *(_DWORD *)unsigned int v108 = 2 * *((_DWORD *)v84 + 24);
                    *((_DWORD *)v108 + 1) = v671;
                    v109 = (char *)*v46;
                    v110 = (char *)*v41;
                    uint64_t v111 = v108;
                    if (*v46 == *v41)
                    {
                      unint64_t v80 = v43 - 1;
                    }
                    else
                    {
                      unint64_t v80 = v43 - 1;
                      do
                      {
                        uint64_t v112 = *((void *)v109 - 1);
                        v109 -= 8;
                        *((void *)v111 - 1) = v112;
                        v111 -= 8;
                      }
                      while (v109 != v110);
                      v109 = (char *)*v41;
                    }
                    *unint64_t v41 = v111;
                    int v101 = v108 + 8;
                    *float v46 = v108 + 8;
                    *unsigned int v47 = &v106[8 * v107];
                    if (v109) {
                      operator delete(v109);
                    }
                  }
                  else
                  {
                    *(_DWORD *)unsigned int v100 = 2 * *((_DWORD *)v84 + 24);
                    *((_DWORD *)v100 + 1) = v671;
                    int v101 = v100 + 8;
                    unint64_t v80 = v43 - 1;
                  }
                  *float v46 = v101;
                  float v18 = v18 + (float)(v64 - v65);
                }
                else
                {
                  uint64_t v67 = 0;
                  BOOL v68 = (char *)*v46;
                  do
                  {
                    uint64_t v69 = v67 + v43;
                    uint64_t v70 = *v22;
                    if ((unint64_t)v68 >= *v47)
                    {
                      uint64_t v71 = (v68 - (unsigned char *)*v41) >> 3;
                      if ((unint64_t)(v71 + 1) >> 61) {
                        sub_2483E92E8();
                      }
                      uint64_t v72 = *v47 - (void)*v41;
                      uint64_t v73 = v72 >> 2;
                      if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
                        uint64_t v73 = v71 + 1;
                      }
                      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v74 = v73;
                      }
                      if (v74) {
                        unint64_t v74 = (unint64_t)sub_2483F04AC(v74);
                      }
                      else {
                        uint64_t v75 = 0;
                      }
                      signed int v76 = (char *)(v74 + 8 * v71);
                      *(void *)signed int v76 = *(void *)&v70[2 * v69];
                      BOOL v68 = v76 + 8;
                      unint64_t v77 = (char *)*v46;
                      uint64_t v78 = (char *)*v41;
                      if (*v46 != *v41)
                      {
                        do
                        {
                          uint64_t v79 = *((void *)v77 - 1);
                          v77 -= 8;
                          *((void *)v76 - 1) = v79;
                          v76 -= 8;
                        }
                        while (v77 != v78);
                        unint64_t v77 = (char *)*v41;
                      }
                      *unint64_t v41 = v76;
                      *float v46 = v68;
                      *unsigned int v47 = v74 + 8 * v75;
                      if (v77) {
                        operator delete(v77);
                      }
                    }
                    else
                    {
                      *(void *)BOOL v68 = *(void *)&v70[2 * v69];
                      v68 += 8;
                    }
                    *float v46 = v68;
                    ++v67;
                  }
                  while (v67 != v49);
                  float v24 = v22 + 1;
                  unint64_t v80 = v43 - 1;
                }
                unint64_t v43 = v49 + v80;
              }
              else
              {
LABEL_38:
                float32x2_t v55 = (char *)*v46;
                if ((unint64_t)*v46 >= *v47)
                {
                  uint64_t v57 = (v55 - (unsigned char *)*v41) >> 3;
                  if ((unint64_t)(v57 + 1) >> 61) {
                    sub_2483E92E8();
                  }
                  uint64_t v58 = *v47 - (void)*v41;
                  uint64_t v59 = v58 >> 2;
                  if (v58 >> 2 <= (unint64_t)(v57 + 1)) {
                    uint64_t v59 = v57 + 1;
                  }
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v60 = v59;
                  }
                  if (v60) {
                    unint64_t v60 = (unint64_t)sub_2483F04AC(v60);
                  }
                  else {
                    uint64_t v61 = 0;
                  }
                  v85 = (void *)(v60 + 8 * v57);
                  void *v85 = *(void *)&v42[2 * v43];
                  float32x2_t v56 = v85 + 1;
                  int v86 = (char *)*v46;
                  int v87 = (char *)*v41;
                  if (*v46 != *v41)
                  {
                    do
                    {
                      uint64_t v88 = *((void *)v86 - 1);
                      v86 -= 8;
                      *--v85 = v88;
                    }
                    while (v86 != v87);
                    int v86 = (char *)*v41;
                  }
                  *unint64_t v41 = v85;
                  *float v46 = v56;
                  *unsigned int v47 = v60 + 8 * v61;
                  if (v86) {
                    operator delete(v86);
                  }
                }
                else
                {
                  *(void *)float32x2_t v55 = *(void *)&v42[2 * v43];
                  float32x2_t v56 = v55 + 8;
                }
                *float v46 = v56;
              }
              ++v43;
              int v42 = *v22;
              unint64_t v44 = ((char *)*v24 - (char *)*v22) >> 3;
            }
            while (v43 < v44);
          }
          unint64_t v16 = v659 + (v656 >> 3);
          unint64_t v17 = v665 + 1;
          uint64_t v10 = (uint64_t *)a3;
          unint64_t v15 = *(int ***)a3;
          uint64_t v8 = a8;
          uint64_t v9 = a4;
          uint64_t v11 = a1;
        }
        while (v665 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
        double v113 = (double)v16;
      }
      if (v113 * 0.2 + 16.0 < v18) {
        *((unsigned char *)v9 + 64) = 1;
      }
      if (v691[0]) {
        operator delete(v691[0]);
      }
      if (v708[0])
      {
        v708[1] = v708[0];
        operator delete(v708[0]);
      }
      if (__src[1])
      {
        *(void **)&long long v707 = __src[1];
        operator delete(__src[1]);
      }
    }
    else
    {
      v687[0] = 0;
      v687[1] = 0;
      unint64_t v688 = 0;
      sub_248447AE4(a1, a2, a3, (uint64_t)v632, (uint64_t)v687);
      if (*((unsigned char *)v9 + 64))
      {
        sub_248447434((uint64_t)v691, a2 + 1, *(unsigned __int8 *)(v11 + 48), v687, v632);
        sub_2484477B4((uint64_t)&v689, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
        v701 = 0;
        v702 = 0;
        uint64_t v703 = 0;
        v698 = 0;
        v699 = 0;
        uint64_t v700 = 0;
        v114 = (int **)*v10;
        if (v10[1] != *v10)
        {
          unint64_t v115 = 0;
          do
          {
            uint64_t v116 = *(void *)(v11 + 16);
            if (v115 >= (*(void *)(v11 + 24) - v116) >> 3) {
              uint64_t v641 = 0;
            }
            else {
              uint64_t v641 = *(void *)(v116 + 8 * v115);
            }
            uint64_t v117 = (unint64_t *)&v114[3 * v115];
            uint64_t v118 = v689;
            sub_2484479D0((char **)&v701, ((uint64_t)(v117[1] - *v117) >> 3) + 1);
            v645 = v117 + 1;
            unint64_t v119 = *v117;
            unint64_t v120 = (uint64_t)(v117[1] - *v117) >> 3;
            if (v117[1] != *v117)
            {
              uint64_t v121 = v691[0];
              char v122 = (float *)v691[1];
              if (v120 <= 1) {
                uint64_t v123 = 1;
              }
              else {
                uint64_t v123 = (uint64_t)(v117[1] - *v117) >> 3;
              }
              v124 = (float *)((char *)v701 + 4);
              long long v125 = (unsigned int *)(v119 + 4);
              v126 = (unsigned int *)(v119 + 4);
              do
              {
                unsigned int v128 = *v126;
                v126 += 2;
                unsigned int v127 = v128;
                unsigned int v129 = __clz(v128);
                unsigned int v130 = 29 - v129;
                unsigned int v131 = (((-1 << (v129 ^ 0x1F)) + v128) >> (29 - v129)) - 4 * v129 + 124;
                BOOL v132 = v128 >= 0x10;
                if (v128 >= 0x10) {
                  unsigned int v133 = v130;
                }
                else {
                  unsigned int v133 = 0;
                }
                if (v132) {
                  unsigned int v127 = v131;
                }
                float *v124 = (float)(v122[(void)v121 * ((unint64_t)*(v125 - 1) >> 1) + v127] + (float)v133)
                      + *(v124 - 1);
                ++v124;
                long long v125 = v126;
                --v123;
              }
              while (v123);
            }
            uint64_t v134 = (void **)(v118 + 24 * v115);
            sub_248430A8C(v134, v120);
            unint64_t v135 = (uint64_t)(*v645 - *v117) >> 3;
            unint64_t v136 = 0x100000;
            if (v135 < 0x100000) {
              unint64_t v136 = (uint64_t)(*v645 - *v117) >> 3;
            }
            uint64_t v137 = 1;
            do
            {
              unint64_t v138 = v137;
              v137 *= 2;
            }
            while (v138 < v136);
            uint64_t v680 = *((unsigned int *)v9 + 18);
            sub_248448380((uint64_t)__src, *v117, v135, v138, v680, v135, v641);
            uint64_t v139 = *v645;
            unint64_t v140 = *v117;
            uint64_t v141 = (uint64_t)(*v645 - *v117) >> 3;
            unint64_t v142 = v141 + 1;
            uint64_t v633 = v118;
            unint64_t v634 = v115;
            if (v141 == -1)
            {
              v143 = 0;
              uint64_t v144 = -1;
              unint64_t v145 = v680;
            }
            else
            {
              if (v142 >> 60) {
                sub_2483E92E8();
              }
              v146 = (char *)operator new(16 * v142);
              v143 = v146;
              v147 = v146;
              unint64_t v145 = v680;
              do
              {
                *(void *)v147 = 0;
                *((void *)v147 + 1) = 0x7F7FFFFF00000000;
                v147 += 16;
              }
              while (v147 != &v146[16 * v142]);
              uint64_t v139 = *v645;
              unint64_t v140 = *v117;
              uint64_t v144 = (uint64_t)(*v645 - *v117) >> 3;
            }
            v672 = v134;
            __p = v143;
            *((_DWORD *)v143 + 3) = 0;
            v660 = v117;
            if (v139 != v140)
            {
              unint64_t v148 = 0;
              unint64_t v149 = 0;
              uint64_t v642 = 0;
              v150 = (float *)v701;
              uint64_t v639 = -(uint64_t)v145;
              uint64_t v151 = (uint64_t)&v143[16 * v145 + 12];
              uint64_t v638 = 4 * v145;
              v152 = v117 + 1;
              v644 = (float *)v701;
              do
              {
                unint64_t v153 = v148;
                sub_2484489F0((unint64_t *)__src, v148);
                v154 = (float *)&__p[16 * v153];
                float v156 = v154[3];
                v155 = v154 + 3;
                unint64_t v148 = v153 + 1;
                float v157 = (float)(v156 + v150[v153 + 1]) - v150[v153];
                v158 = &__p[16 * v153 + 16];
                if (*((float *)v158 + 3) > v157)
                {
                  *(void *)v158 = 1;
                  *((_DWORD *)v158 + 2) = *(_DWORD *)(*v117 + 8 * v153) >> 1;
                  *((float *)v158 + 3) = v157;
                }
                if (v149)
                {
                  --v149;
                  LODWORD(v145) = v680;
                }
                else
                {
                  v159 = v698;
                  v699 = v698;
                  unint64_t v145 = v680;
                  if ((void *)(v153 + 2) >= __src[0]) {
                    int v666 = 0;
                  }
                  else {
                    int v666 = ((*((_DWORD *)__src[1] + v148) << SLOBYTE(v708[1])) ^ *((_DWORD *)__src[1] + v153) ^ (*((_DWORD *)__src[1] + v153 + 2) << (2 * LOBYTE(v708[1])))) & HIDWORD(v708[0]);
                  }
                  v657 = (float *)v151;
                  unsigned int v160 = v718 & v153;
                  unsigned int v161 = *(_DWORD *)(*((void *)&v710[0] + 1) + 4 * (v718 & v153));
                  if (SLODWORD(__src[0]) >= LODWORD(v719[0]) + (int)v153) {
                    int v162 = LODWORD(v719[0]) + v153;
                  }
                  else {
                    int v162 = (int)__src[0];
                  }
                  unsigned int v163 = v160 - v161;
                  if (v160 < v161) {
                    int v164 = v718 + 1;
                  }
                  else {
                    int v164 = 0;
                  }
                  int v165 = v164 + v163;
                  if (((v164 + v163) & 0x80000000) != 0)
                  {
                    v183 = v698;
                  }
                  else
                  {
                    unsigned int v166 = 0;
                    int v167 = 0;
                    int v653 = v162 + ~v153;
                    if ((int)v153 + LODWORD(v719[0]) >= SLODWORD(__src[0])) {
                      int v168 = (int)__src[0];
                    }
                    else {
                      int v168 = v153 + LODWORD(v719[0]);
                    }
                    int v651 = v168;
                    int v169 = v164 + v163;
                    int v649 = v162;
                    do
                    {
                      if (v165 < 1)
                      {
                        LODWORD(v176) = 0;
                      }
                      else
                      {
                        int v170 = v153 - v169;
                        int v171 = v153;
                        if (v717 >= 4)
                        {
                          int v172 = v717 - 1;
                          if (*(_DWORD *)(*((void *)&v715 + 1) + 4 * v161) < (int)v717 - 1) {
                            int v172 = *(_DWORD *)(*((void *)&v715 + 1) + 4 * v161);
                          }
                          if (v172 + (int)v153 >= v162) {
                            int v172 = v653;
                          }
                          int v171 = v172 + v153;
                          v170 += v172;
                        }
                        if (v171 < v162)
                        {
                          uint64_t v173 = v171;
                          int v174 = v651 - v171;
                          uint64_t v175 = 4 * v170;
                          while (*((_DWORD *)__src[1] + v173) == *(_DWORD *)((char *)__src[1] + v175))
                          {
                            ++v173;
                            v175 += 4;
                            if (!--v174)
                            {
                              int v171 = v162;
                              goto LABEL_180;
                            }
                          }
                          int v171 = v173;
                        }
LABEL_180:
                        unint64_t v176 = (v171 - v153);
                        if (*((void *)&v718 + 1) <= v176 && (int)v176 + 2 >= v166)
                        {
                          v178 = sub_248448B30((void *)v719 + 1, v165);
                          if (v178) {
                            int v179 = *((_DWORD *)v178 + 5);
                          }
                          else {
                            int v179 = v720 + v165 - 1;
                          }
                          unint64_t v145 = v680;
                          if (v176 >= (v699 - v159) >> 2)
                          {
                            LODWORD(v695) = v179;
                            sub_2483F1FEC((char **)&v698, v176 + 1, &v695);
                            v159 = v698;
                            unint64_t v145 = v680;
                          }
                          if (v179 < (unint64_t)*(unsigned int *)&v159[4 * v176]) {
                            *(_DWORD *)&v159[4 * v176] = v179;
                          }
                          if (v176 > v166) {
                            unsigned int v166 = v176;
                          }
                          int v162 = v649;
                        }
                      }
                      if (++v167 >= DWORD2(v720)) {
                        break;
                      }
                      if (v717 >= 3 && v176 > v717)
                      {
                        uint64_t v182 = *(unsigned int *)(v714 + 4 * v161);
                        if (v161 == v182) {
                          break;
                        }
                        unsigned int v161 = *(_DWORD *)(v714 + 4 * v161);
                        if (*(_DWORD *)(*((void *)&v715 + 1) + 4 * v182) != v717) {
                          break;
                        }
                      }
                      else
                      {
                        uint64_t v181 = *(unsigned int *)(*((void *)&v710[0] + 1) + 4 * v161);
                        if (v161 == v181) {
                          break;
                        }
                        unsigned int v161 = *(_DWORD *)(*((void *)&v710[0] + 1) + 4 * v161);
                        if (*(_DWORD *)(v711 + 4 * v181) != v666) {
                          break;
                        }
                      }
                      int v169 = v160 - v161;
                      if (v160 < v161) {
                        v169 += v718 + 1;
                      }
                      BOOL v66 = v165 <= v169;
                      int v165 = v169;
                    }
                    while (v66);
                    v183 = v699;
                    uint64_t v11 = a1;
                  }
                  unint64_t v184 = v183 - v159;
                  unint64_t v185 = (v183 - v159) >> 2;
                  uint64_t v117 = v660;
                  if (v185 <= v145)
                  {
                    unint64_t v149 = 0;
                  }
                  else
                  {
                    unint64_t v186 = v185 - 1;
                    if (v185 - 1 >= v145)
                    {
                      unint64_t v187 = *((unsigned int *)v183 - 1);
                      do
                      {
                        if (v187 >= *(unsigned int *)&v159[4 * v186]) {
                          unint64_t v187 = *(unsigned int *)&v159[4 * v186];
                        }
                        *(_DWORD *)&v159[4 * v186--] = v187;
                      }
                      while (v186 >= v145);
                    }
                    uint64_t v188 = 0;
                    v189 = (_DWORD *)(*v660 + 8 * v153);
                    int v191 = *((_DWORD *)a4 + 19);
                    unsigned int v190 = *((_DWORD *)a4 + 20);
                    int v192 = *((_DWORD *)a4 + 21);
                    int v193 = *((_DWORD *)a4 + 22);
                    int v194 = v193 + v192;
                    int v195 = *((_DWORD *)a4 + 17);
                    v196 = v691[0];
                    v197 = (float *)v691[1];
                    uint64_t v198 = a4[12] * (uint64_t)v691[0];
                    v199 = &v159[v638];
                    v200 = v657;
                    do
                    {
                      unsigned int v201 = __clz(v188) ^ 0x1F;
                      float v202 = (float)(v201 - v194);
                      if (v190 <= v188)
                      {
                        int v203 = ((v201 - v191) << v194)
                             + v190
                             + ((v188 + (-1 << v201)) & ~(-1 << v193))
                             + ((v188 + (-1 << v201)) >> (v201 - v192) << v193);
                      }
                      else
                      {
                        float v202 = 0.0;
                        int v203 = v188;
                      }
                      float v204 = v202
                           + v197[(v203 + v195)
                                + (void)v196 * ((unint64_t)*v189 >> 1)];
                      unsigned int v205 = *(_DWORD *)&v199[4 * v188];
                      unsigned int v206 = __clz(v205);
                      unsigned int v207 = 29 - v206;
                      unsigned int v208 = (((-1 << (v206 ^ 0x1F)) + v205) >> (29 - v206)) - 4 * v206 + 124;
                      float v209 = (float)v207;
                      if (v205 < 0x10) {
                        float v209 = 0.0;
                      }
                      else {
                        unsigned int v205 = v208;
                      }
                      float v210 = *v155 + (float)(v204 + (float)(v209 + v197[v198 + v205]));
                      if (*v200 > v210)
                      {
                        *((_DWORD *)v200 - 3) = v145 + v188;
                        *((_DWORD *)v200 - 2) = *(_DWORD *)&v199[4 * v188] + 1;
                        *((_DWORD *)v200 - 1) = *v189 >> 1;
                        float *v200 = v210;
                      }
                      ++v188;
                      v200 += 4;
                    }
                    while (v639 + v185 != v188);
                    int v211 = *((_DWORD *)v183 - 1);
                    BOOL v212 = v211 == 1;
                    if (v641)
                    {
                      BOOL v213 = 0;
                    }
                    else
                    {
                      BOOL v212 = 0;
                      BOOL v213 = v211 == 0;
                    }
                    if (v213 || v212)
                    {
                      BOOL v214 = (unint64_t)(v642 + 1) > 7;
                      BOOL v215 = v184 > 0x24;
                      unint64_t v216 = v185 - 10;
                      if (v214 && v215) {
                        uint64_t v217 = 0;
                      }
                      else {
                        uint64_t v217 = v642 + 1;
                      }
                      uint64_t v642 = v217;
                      if (v214 && v215) {
                        unint64_t v149 = v216;
                      }
                      else {
                        unint64_t v149 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v642 = 0;
                      unint64_t v149 = 0;
                    }
                    uint64_t v117 = v660;
                  }
                  v150 = v644;
                  v152 = v645;
                  unint64_t v148 = v153 + 1;
                  uint64_t v151 = (uint64_t)v657;
                }
                uint64_t v218 = *v152 - *v117;
                v151 += 16;
              }
              while (v148 < v218 >> 3);
              uint64_t v144 = v218 >> 3;
              uint64_t v8 = a8;
              uint64_t v9 = a4;
            }
            if (v144)
            {
              uint64_t v219 = v633 + 24 * v634;
              v220 = (void **)(v219 + 8);
              v221 = (void *)(v219 + 16);
              do
              {
                v222 = &__p[16 * v144];
                unsigned int v223 = *((_DWORD *)v222 + 1);
                if (v223)
                {
                  unsigned int v224 = v223 - 1;
                  v225 = *v220;
                  if ((unint64_t)*v220 >= *v221)
                  {
                    uint64_t v228 = ((char *)v225 - (unsigned char *)*v672) >> 3;
                    unint64_t v229 = v228 + 1;
                    if ((unint64_t)(v228 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    uint64_t v230 = *v221 - (void)*v672;
                    if (v230 >> 2 > v229) {
                      unint64_t v229 = v230 >> 2;
                    }
                    if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v231 = v229;
                    }
                    v232 = (char *)sub_2483F04AC(v231);
                    v234 = &v232[8 * v228];
                    *(_DWORD *)v234 = 2 * *((_DWORD *)v9 + 24);
                    *((_DWORD *)v234 + 1) = v224;
                    v235 = (char *)*v220;
                    v236 = (char *)*v672;
                    v237 = v234;
                    if (*v220 != *v672)
                    {
                      do
                      {
                        uint64_t v238 = *((void *)v235 - 1);
                        v235 -= 8;
                        *((void *)v237 - 1) = v238;
                        v237 -= 8;
                      }
                      while (v235 != v236);
                      v235 = (char *)*v672;
                    }
                    *v672 = v237;
                    v226 = v234 + 8;
                    *v220 = v234 + 8;
                    void *v221 = &v232[8 * v233];
                    if (v235) {
                      operator delete(v235);
                    }
                    LODWORD(v145) = v680;
                  }
                  else
                  {
                    _DWORD *v225 = 2 * *((_DWORD *)v9 + 24);
                    v225[1] = v224;
                    v226 = v225 + 2;
                  }
                  *v220 = v226;
                  int v227 = *(_DWORD *)v222 - v145;
                }
                else
                {
                  int v227 = *(_DWORD *)(*v660 + 8 * v144 - 4);
                  v226 = *v220;
                }
                v239 = &__p[16 * v144 + 8];
                if ((unint64_t)v226 >= *v221)
                {
                  uint64_t v241 = ((char *)v226 - (unsigned char *)*v672) >> 3;
                  if ((unint64_t)(v241 + 1) >> 61) {
                    sub_2483E92E8();
                  }
                  uint64_t v242 = *v221 - (void)*v672;
                  uint64_t v243 = v242 >> 2;
                  if (v242 >> 2 <= (unint64_t)(v241 + 1)) {
                    uint64_t v243 = v241 + 1;
                  }
                  if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v244 = v243;
                  }
                  v245 = (char *)sub_2483F04AC(v244);
                  v247 = &v245[8 * v241];
                  *(_DWORD *)v247 = 2 * *(_DWORD *)v239;
                  *((_DWORD *)v247 + 1) = v227;
                  v248 = (char *)*v220;
                  v249 = (char *)*v672;
                  v250 = v247;
                  if (*v220 == *v672)
                  {
                    uint64_t v11 = a1;
                  }
                  else
                  {
                    uint64_t v11 = a1;
                    do
                    {
                      uint64_t v251 = *((void *)v248 - 1);
                      v248 -= 8;
                      *((void *)v250 - 1) = v251;
                      v250 -= 8;
                    }
                    while (v248 != v249);
                    v248 = (char *)*v672;
                  }
                  *v672 = v250;
                  v240 = v247 + 8;
                  *v220 = v247 + 8;
                  void *v221 = &v245[8 * v246];
                  if (v248) {
                    operator delete(v248);
                  }
                  LODWORD(v145) = v680;
                }
                else
                {
                  _DWORD *v226 = 2 * *(_DWORD *)v239;
                  v226[1] = v227;
                  v240 = v226 + 2;
                  uint64_t v11 = a1;
                }
                *v220 = v240;
                *(v240 - 2) = *(v240 - 2) & 0xFFFFFFFE | (v223 != 0);
                v144 -= *(unsigned int *)v222;
              }
              while (v144);
            }
            unint64_t v252 = (unint64_t)*v672;
            v253 = *(char **)(v633 + 24 * v634 + 8);
            v254 = v253 - 8;
            if (*v672 != v253 && (unint64_t)v254 > v252)
            {
              unint64_t v256 = v252 + 8;
              do
              {
                uint64_t v257 = *(void *)(v256 - 8);
                *(void *)(v256 - 8) = *(void *)v254;
                *(void *)v254 = v257;
                v254 -= 8;
                BOOL v39 = v256 >= (unint64_t)v254;
                v256 += 8;
              }
              while (!v39);
            }
            uint64_t v10 = (uint64_t *)a3;
            if (__p) {
              operator delete(__p);
            }
            sub_248448BE4(__src);
            unint64_t v115 = v634 + 1;
            v114 = *(int ***)a3;
          }
          while (v634 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
          if (v698) {
            operator delete(v698);
          }
        }
        if (v701) {
          operator delete(v701);
        }
        if (v693)
        {
          v694 = v693;
          operator delete(v693);
        }
        if (v691[1])
        {
          *(void **)&long long v692 = v691[1];
          operator delete(v691[1]);
        }
      }
      __src[0] = v687;
      sub_2483F87EC((void ***)__src);
    }
  }
  uint64_t v258 = 128;
  if (a2 < 0x80) {
    uint64_t v258 = a2;
  }
  sub_248419548((uint64_t)v687, a6, 96 * v258 + 40 * a2 + 128);
  if (!a6)
  {
    v691[0] = 0;
    sub_24841A0F8((uint64_t)v632, __src, v691);
    v260 = (char *)v691[0];
    v681 = v9 + 8;
    if (*((unsigned char *)v9 + 64))
    {
      __src[0] = 0;
      sub_248448C80(*(uint64_t *)((char *)v9 + 76), *(uint64_t *)((char *)v9 + 84), (unint64_t *)__src, 8);
      unint64_t v261 = (unint64_t)__src[0];
      goto LABEL_315;
    }
LABEL_319:
    unint64_t v262 = a2;
    goto LABEL_320;
  }
  sub_2484DA1C4((uint64_t)v632, a6, a7, v8);
  v681 = v9 + 8;
  if (!*((unsigned char *)v9 + 64))
  {
    v260 = 0;
    goto LABEL_319;
  }
  unint64_t v259 = *a6;
  sub_248441E78(*(uint64_t *)((char *)v9 + 76), *(uint64_t *)((char *)v9 + 84), a6, 8);
  v260 = 0;
  uint64_t v10 = (uint64_t *)a3;
  unint64_t v261 = *a6 - v259;
LABEL_315:
  v260 += v261;
  unint64_t v262 = a2 + 1;
  if (*v10)
  {
    sub_2483F8840(v10);
    operator delete((void *)*v10);
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
  }
  *(_OWORD *)uint64_t v10 = v689;
  v10[2] = v690;
  uint64_t v690 = 0;
  long long v689 = 0uLL;
LABEL_320:
  sub_248448CE0(&v685, v262);
  int v271 = *(_DWORD *)(v11 + 4);
  v652 = v260;
  if (v271 == 1)
  {
    char v275 = 0;
    char v272 = 0;
    int v273 = 0;
    unsigned int v274 = 1;
  }
  else if (v271 == 3)
  {
    char v272 = 0;
    int v273 = 2;
    unsigned int v274 = 4;
    char v275 = 1;
  }
  else
  {
    char v275 = 0;
    int v273 = 4;
    unsigned int v274 = 16;
    char v272 = 2;
  }
  unint64_t v637 = v262;
  uint64_t v276 = *v10;
  uint64_t v673 = v10[1];
  if (*v10 != v673)
  {
    unint64_t v277 = 0;
    char __pa = v272 | v275;
    int v278 = ~(-1 << v275);
    while (1)
    {
      v280 = *(_DWORD **)v276;
      v279 = *(_DWORD **)(v276 + 8);
      if (*v681) {
        break;
      }
      if (v637 == 1)
      {
        while (v280 != v279)
        {
          unsigned int v290 = v280[1];
          unsigned int v291 = __clz(v290);
          unsigned int v292 = (((v291 ^ 0x1F) - v273) << __pa)
               + v274
               + (((-1 << (v291 ^ 0x1F)) + v290) & v278)
               + (((-1 << (v291 ^ 0x1F)) + v290) >> ((v291 ^ 0x1F) - v272) << v275);
          if (v274 <= v290) {
            unsigned int v290 = v292;
          }
          sub_248448D6C(v685, (int)v290);
          v280 += 2;
          ++v277;
        }
      }
      else
      {
        while (v280 != v279)
        {
          unsigned int v293 = v280[1];
          unsigned int v294 = __clz(v293);
          unsigned int v295 = (((v294 ^ 0x1F) - v273) << __pa)
               + v274
               + (((-1 << (v294 ^ 0x1F)) + v293) & v278)
               + (((-1 << (v294 ^ 0x1F)) + v293) >> ((v294 ^ 0x1F) - v272) << v275);
          if (v274 <= v293) {
            unsigned int v293 = v295;
          }
          sub_248448D6C(v685 + 40 * (*v280 >> 1), (int)v293);
          v280 += 2;
          ++v277;
        }
      }
LABEL_348:
      v276 += 24;
      if (v276 == v673) {
        goto LABEL_351;
      }
    }
    while (1)
    {
      if (v280 == v279) {
        goto LABEL_348;
      }
      unsigned int v281 = v280[1];
      if (*v280)
      {
        v288 = a4;
        unsigned int v286 = *((_DWORD *)a4 + 20);
        if (v286 > v281) {
          goto LABEL_337;
        }
        unsigned int v282 = __clz(v281) ^ 0x1F;
        unsigned int v283 = v282 - *((_DWORD *)a4 + 19);
        int v285 = *((_DWORD *)a4 + 21);
        int v287 = *((_DWORD *)a4 + 22);
        int v284 = ~(-1 << v287);
      }
      else
      {
        if (v274 > v281) {
          goto LABEL_335;
        }
        unsigned int v282 = __clz(v281) ^ 0x1F;
        unsigned int v283 = v282 - v273;
        int v284 = ~(-1 << v275);
        LOBYTE(v285) = v272;
        unsigned int v286 = v274;
        LOBYTE(v287) = v275;
      }
      unsigned int v281 = (v283 << (v287 + v285))
           + v286
           + (((-1 << v282) + v281) & v284)
           + (((-1 << v282) + v281) >> (v282 - v285) << v287);
      if ((*v280 & 1) == 0)
      {
LABEL_335:
        int v289 = 0;
        goto LABEL_338;
      }
      v288 = a4;
LABEL_337:
      int v289 = *((_DWORD *)v288 + 17);
LABEL_338:
      sub_248448D6C(v685 + 40 * (*v280 >> 1), (int)(v289 + v281));
      v280 += 2;
      ++v277;
    }
  }
  unint64_t v277 = 0;
LABEL_351:
  uint64_t v296 = a1;
  unint64_t v297 = v637;
  if (*(unsigned char *)(a1 + 51) && v637)
  {
    for (uint64_t i = 0; i != v637; ++i)
    {
      for (unint64_t j = 0; j != 256; ++j)
        sub_248448D6C(v685 + 40 * i, j);
    }
  }
  if (*(unsigned char *)(a1 + 49))
  {
    char v300 = 1;
    if (!*(unsigned char *)(a1 + 48) && v277 >= 0x64 && *(_DWORD *)a1 && v637)
    {
      uint64_t v301 = 32;
      do
      {
        v302 = (float *)(v685 + v301);
        sub_248450898(v685 + v301 - 32, *(float *)&v263, v264, v265, v266, v267, v268, v269, v270);
        double v263 = *v302;
        v300 &= v263 < 0.00001;
        v301 += 40;
        --v297;
      }
      while (v297);
    }
    *((unsigned char *)a4 + 24) = v300;
  }
  if (*(unsigned char *)(a1 + 52))
  {
    LODWORD(__src[0]) = 16;
    sub_2483E9224(v691, 0x100uLL, __src);
    unint64_t v303 = a4[2];
    v304 = (void *)a4[1];
    if ((unint64_t)v304 >= v303)
    {
      unint64_t v306 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v304 - *a4) >> 3);
      unint64_t v307 = v306 + 1;
      if (v306 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2483E92E8();
      }
      unint64_t v308 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - *a4) >> 3);
      if (2 * v308 > v307) {
        unint64_t v307 = 2 * v308;
      }
      if (v308 >= 0x555555555555555) {
        unint64_t v309 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v309 = v307;
      }
      v708[0] = a4 + 2;
      if (v309) {
        unint64_t v309 = (unint64_t)sub_2483F8ED4(v309);
      }
      else {
        uint64_t v310 = 0;
      }
      v311 = (void *)(v309 + 24 * v306);
      __src[0] = (void *)v309;
      __src[1] = v311;
      *((void *)&v707 + 1) = v309 + 24 * v310;
      void *v311 = 0;
      v311[1] = 0;
      v311[2] = 0;
      *(void *)&long long v707 = v311 + 3;
      sub_2483F8F1C(a4, __src);
      v305 = (void *)a4[1];
      sub_248448DCC((uint64_t)__src);
    }
    else
    {
      void *v304 = 0;
      v304[1] = 0;
      v304[2] = 0;
      v305 = v304 + 3;
      a4[1] = (uint64_t)(v304 + 3);
    }
    a4[1] = (uint64_t)v305;
    sub_248448E2C((uint64_t)(v305 - 3), 0x100uLL);
    unint64_t v312 = a4[15];
    unint64_t v313 = a4[14];
    if (v313 >= v312)
    {
      uint64_t v315 = a4[13];
      unint64_t v316 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v313 - v315) >> 3);
      unint64_t v317 = v316 + 1;
      if (v316 + 1 > 0x666666666666666) {
        sub_2483E92E8();
      }
      unint64_t v318 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v312 - v315) >> 3);
      if (2 * v318 > v317) {
        unint64_t v317 = 2 * v318;
      }
      if (v318 >= 0x333333333333333) {
        unint64_t v319 = 0x666666666666666;
      }
      else {
        unint64_t v319 = v317;
      }
      v708[0] = a4 + 15;
      if (v319) {
        unint64_t v319 = (unint64_t)sub_248403444(v319);
      }
      else {
        uint64_t v320 = 0;
      }
      v321 = (_OWORD *)(v319 + 40 * v316);
      __src[0] = (void *)v319;
      __src[1] = v321;
      *((void *)&v707 + 1) = v319 + 40 * v320;
      *((void *)v321 + 4) = 0;
      _OWORD *v321 = 0u;
      v321[1] = 0u;
      *(void *)&long long v707 = (char *)v321 + 40;
      sub_248449068(a4 + 13, __src);
      unint64_t v314 = a4[14];
      sub_24841F7CC((uint64_t)__src);
    }
    else
    {
      *(void *)(v313 + 32) = 0;
      *(_OWORD *)unint64_t v313 = 0u;
      *(_OWORD *)(v313 + 16) = 0u;
      unint64_t v314 = v313 + 40;
      a4[14] = v313 + 40;
    }
    a4[14] = v314;
    v322 = (unint64_t *)(v314 - 40);
    sub_248419548((uint64_t)__src, v322, 6400);
    sub_248441F4C(*(_DWORD *)(a1 + 12), (int *)v691[0], 0x100uLL, 8, *((unsigned __int8 *)a4 + 24), *(void *)(a4[1] - 24), v322);
    v701 = 0;
    sub_24841962C((uint64_t)__src, v322, &v701, &v698);
    if (v691[0])
    {
      v691[1] = v691[0];
      operator delete(v691[0]);
    }
  }
  uint64_t v324 = *a4;
  uint64_t v323 = a4[1];
  v695 = 0;
  v696 = 0;
  unint64_t v697 = 0;
  uint64_t v325 = v323 - v324;
  unint64_t v674 = v325 / 24;
  if (v325)
  {
    uint64_t v326 = 0;
    if (v674 <= 1) {
      uint64_t v327 = 1;
    }
    else {
      uint64_t v327 = v325 / 24;
    }
    do
    {
      v328 = (unsigned __int16 **)(*a4 + 24 * v326);
      *(_OWORD *)v691 = 0u;
      long long v692 = 0u;
      LODWORD(v693) = 0;
      int v329 = *((unsigned __int8 *)a4 + 24);
      sub_2483EB1C4((char **)v691, (7 - 0x5555555555555555 * (((char *)v328[1] - (char *)*v328) >> 4)) & 0xFFFFFFFFFFFFFFF8);
      *((void *)&v692 + 1) = 0;
      v330 = *v328;
      uint64_t v296 = a1;
      if (v328[1] != *v328)
      {
        uint64_t v331 = 0;
        unint64_t v332 = ((char *)v328[1] - (char *)*v328) / 48;
        v333 = (unsigned int *)v691[0];
        if (v332 <= 1) {
          unint64_t v332 = 1;
        }
        do
        {
          if (v329)
          {
            if (*((unsigned char *)v330 + 40)) {
              unsigned int v334 = 1 << (15 - *((unsigned char *)v330 + 40));
            }
            else {
              unsigned int v334 = 0;
            }
          }
          else
          {
            unsigned int v334 = *v330;
          }
          *v333++ = v334;
          v331 += v334;
          v330 += 24;
          --v332;
        }
        while (v332);
        *((void *)&v692 + 1) = v331;
      }
      v335 = v696;
      if ((unint64_t)v696 >= v697)
      {
        unint64_t v337 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
        unint64_t v338 = v337 + 1;
        if (v337 + 1 > 0x666666666666666) {
          sub_2483E92E8();
        }
        if (0x999999999999999ALL * ((uint64_t)(v697 - (void)v695) >> 3) > v338) {
          unint64_t v338 = 0x999999999999999ALL * ((uint64_t)(v697 - (void)v695) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v697 - (void)v695) >> 3) >= 0x333333333333333) {
          unint64_t v339 = 0x666666666666666;
        }
        else {
          unint64_t v339 = v338;
        }
        v708[0] = &v697;
        if (v339) {
          unint64_t v339 = (unint64_t)sub_248403444(v339);
        }
        else {
          uint64_t v340 = 0;
        }
        v341 = (_OWORD *)(v339 + 40 * v337);
        __src[0] = (void *)v339;
        __src[1] = v341;
        *((void *)&v707 + 1) = v339 + 40 * v340;
        _OWORD *v341 = *(_OWORD *)v691;
        *((void *)v341 + 2) = v692;
        v691[0] = 0;
        v691[1] = 0;
        *(void *)&long long v692 = 0;
        *((void *)v341 + 3) = *((void *)&v692 + 1);
        *((_DWORD *)v341 + 8) = v693;
        *(void *)&long long v707 = (char *)v341 + 40;
        sub_2484490F4((uint64_t *)&v695, __src);
        v336 = v696;
        sub_248449174((uint64_t)__src);
      }
      else
      {
        *(_OWORD *)v696 = *(_OWORD *)v691;
        v335[2] = (int32x4_t *)v692;
        v691[1] = 0;
        *(void *)&long long v692 = 0;
        v691[0] = 0;
        v335[3] = (int32x4_t *)*((void *)&v692 + 1);
        *((_DWORD *)v335 + 8) = v693;
        v336 = v335 + 5;
      }
      v696 = v336;
      ++v326;
    }
    while (v326 != v327);
  }
  uint64_t v342 = v685;
  uint64_t v343 = v686;
  unint64_t v344 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  unint64_t v646 = a5[1] - *a5;
  if (v646 >= v344 + v646)
  {
    uint64_t v345 = a8;
    v346 = a6;
    if (v646 > v344 + v646) {
      a5[1] = *a5 + v344 + v646;
    }
  }
  else
  {
    sub_2483EE8AC(a5, 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3));
    uint64_t v345 = a8;
    v346 = a6;
    uint64_t v342 = v685;
    uint64_t v343 = v686;
    unint64_t v344 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  }
  if (v344 < 2)
  {
    v365 = v696;
    if ((unint64_t)v696 >= v697)
    {
      uint64_t v374 = sub_248449248((uint64_t *)&v695, v342);
    }
    else
    {
      sub_2484491D8((uint64_t)&v695, v342);
      uint64_t v374 = (uint64_t)(v365 + 5);
    }
    v696 = (int32x4_t **)v374;
    goto LABEL_688;
  }
  v698 = 0;
  v699 = 0;
  uint64_t v700 = 0;
  v650 = v696;
  unint64_t v347 = *(void *)(v296 + 40);
  unint64_t v348 = 0xCCCCCCCCCCCCCCCDLL * ((v343 - v342) >> 3);
  if (v347 >= v348) {
    unint64_t v347 = v348;
  }
  unint64_t v349 = 128;
  if (!*(_DWORD *)v296) {
    unint64_t v349 = 4;
  }
  if (v349 < v347) {
    unint64_t v347 = v349;
  }
  unint64_t __pb = ((char *)v696 - (char *)v695) / 40;
  unint64_t v350 = v347 + __pb;
  uint64_t v648 = (uint64_t)v695;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v697 - (void)v695) >> 3) < v347 + __pb)
  {
    if (v350 > 0x666666666666666) {
      sub_2483E92E8();
    }
    v708[0] = &v697;
    __src[0] = sub_248403444(v350);
    __src[1] = (char *)__src[0] + 40 * __pb;
    *(void **)&long long v707 = __src[1];
    *((void *)&v707 + 1) = (char *)__src[0] + 40 * v351;
    sub_2484490F4((uint64_t *)&v695, __src);
    sub_248449174((uint64_t)__src);
    unint64_t v348 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  }
  v699 = 0;
  LODWORD(__src[0]) = v350;
  sub_2483F1FEC((char **)&v698, v348, __src);
  LODWORD(v691[0]) = 2139095039;
  sub_2484495E8(__src, 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3), v691);
  uint64_t v360 = v685;
  uint64_t v361 = v686;
  if (v686 == v685)
  {
    uint64_t v362 = 0;
    uint64_t v360 = v686;
  }
  else
  {
    uint64_t v362 = 0;
    unint64_t v363 = 0;
    uint64_t v364 = 24;
    do
    {
      if (*(void *)(v360 + v364))
      {
        *(float *)&double v352 = sub_248450898(v360 + v364 - 24, *(float *)&v352, v353, v354, v355, v356, v357, v358, v359);
        uint64_t v360 = v685;
        uint64_t v361 = v686;
        if (*(void *)(v685 + v364) > *(void *)(v685 + 40 * v362 + 24)) {
          uint64_t v362 = v363;
        }
      }
      else
      {
        *((_DWORD *)v698 + v363) = 0;
        *((_DWORD *)__src[0] + v363) = 0;
      }
      ++v363;
      v364 += 40;
    }
    while (v363 < 0xCCCCCCCCCCCCCCCDLL * ((v361 - v360) >> 3));
  }
  unint64_t v667 = v350;
  if (v650 != (int32x4_t **)v648)
  {
    uint64_t v375 = 0;
    if (__pb <= 1) {
      uint64_t v376 = 1;
    }
    else {
      uint64_t v376 = __pb;
    }
    uint64_t v661 = v376;
    do
    {
      *(float *)&double v352 = sub_248450898((uint64_t)&v695[v375], *(float *)&v352, v353, v354, v355, v356, v357, v358, v359);
      v375 += 5;
      --v376;
    }
    while (v376);
    uint64_t v360 = v685;
    uint64_t v361 = v686;
    v377 = (float *)__src[0];
    if (v686 != v685)
    {
      uint64_t v378 = 0;
      if ((unint64_t)((v686 - v685) / 40) <= 1) {
        uint64_t v379 = 1;
      }
      else {
        uint64_t v379 = (v686 - v685) / 40;
      }
      uint64_t v380 = (uint64_t)v695;
      do
      {
        float v381 = v377[v378];
        if (v381 != 0.0)
        {
          v382 = (int32x4_t **)v380;
          uint64_t v383 = v661;
          do
          {
            *(float *)&double v352 = sub_248450B24(v360 + 40 * v378, v382);
            if (v381 >= *(float *)&v352) {
              float v381 = *(float *)&v352;
            }
            v377[v378] = v381;
            v382 += 5;
            --v383;
          }
          while (v383);
        }
        ++v378;
      }
      while (v378 != v379);
    }
    v384 = v377 + 1;
    BOOL v385 = v377 == __src[1] || v384 == __src[1];
    v386 = (char *)v377;
    unint64_t v350 = v667;
    if (!v385)
    {
      float v387 = *v377;
      v386 = (char *)v377;
      v388 = v377 + 1;
      do
      {
        float v389 = *v388++;
        *(float *)&double v353 = v389;
        if (v387 < v389)
        {
          float v387 = *(float *)&v353;
          v386 = (char *)v384;
        }
        v384 = v388;
      }
      while (v388 != __src[1]);
    }
    LODWORD(v352) = *(_DWORD *)v386;
    if (*(float *)v386 > 0.0) {
      uint64_t v362 = (v386 - (char *)v377) >> 2;
    }
  }
  unint64_t v390 = (unint64_t)v696;
  unint64_t v391 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
  if (v391 < v350)
  {
    v392 = v698;
    while (1)
    {
      v392[v362] = v391;
      uint64_t v393 = v360 + 40 * v362;
      if (v390 >= v697)
      {
        unint64_t v390 = sub_248449248((uint64_t *)&v695, v393);
      }
      else
      {
        sub_2484491D8((uint64_t)&v695, v393);
        v390 += 40;
      }
      v696 = (int32x4_t **)v390;
      v394 = (float *)__src[0];
      *((_DWORD *)__src[0] + v362) = 0;
      uint64_t v360 = v685;
      uint64_t v361 = v686;
      if (v686 == v685)
      {
        uint64_t v362 = 0;
      }
      else
      {
        uint64_t v395 = 0;
        uint64_t v362 = 0;
        uint64_t v396 = (unint64_t)((v686 - v685) / 40) <= 1 ? 1 : (v686 - v685) / 40;
        uint64_t v397 = v685;
        do
        {
          float v398 = v394[v395];
          if (v398 != 0.0)
          {
            *(float *)&double v352 = sub_2484509B8(v397, v390 - 40, v352, v353);
            if (v398 < *(float *)&v352) {
              *(float *)&double v352 = v398;
            }
            v394[v395] = *(float *)&v352;
            *(float *)&double v353 = v394[v362];
            if (*(float *)&v352 > *(float *)&v353) {
              uint64_t v362 = v395;
            }
          }
          ++v395;
          v397 += 40;
        }
        while (v396 != v395);
      }
      *(float *)&double v352 = v394[v362];
      LODWORD(v353) = 1111490560;
      if (*(float *)&v352 < 48.0) {
        break;
      }
      unint64_t v391 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v390 - (void)v695) >> 3);
      unint64_t v350 = v667;
      if (v391 >= v667) {
        goto LABEL_496;
      }
    }
    unint64_t v350 = v667;
  }
LABEL_496:
  v346 = a6;
  if (v361 != v360)
  {
    unint64_t v399 = 0;
    v400 = v698;
    do
    {
      if (v350 == v400[v399])
      {
        uint64_t v401 = (uint64_t)v695;
        if (v696 == v695)
        {
          unint64_t v403 = 0;
        }
        else
        {
          unint64_t v402 = 0;
          unint64_t v403 = 0;
          if ((unint64_t)(((char *)v696 - (char *)v695) / 40) <= 1) {
            uint64_t v404 = 1;
          }
          else {
            uint64_t v404 = ((char *)v696 - (char *)v695) / 40;
          }
          float v405 = 3.4028e38;
          v406 = v695;
          do
          {
            uint64_t v407 = v360 + 40 * v399;
            if (v402 >= __pb) {
              *(float *)&double v352 = sub_2484509B8(v407, (uint64_t)v406, v352, v353);
            }
            else {
              *(float *)&double v352 = sub_248450B24(v407, v406);
            }
            if (*(float *)&v352 < v405)
            {
              unint64_t v403 = v402;
              float v405 = *(float *)&v352;
            }
            ++v402;
            v406 += 5;
          }
          while (v404 != v402);
        }
        v346 = a6;
        unint64_t v350 = v667;
        if (v403 >= __pb)
        {
          sub_248450C74(v401 + 40 * v403, (int **)(v360 + 40 * v399));
          *(float *)&double v352 = sub_248450898((uint64_t)&v695[5 * v403], v408, v409, v410, v411, v412, v413, v414, v415);
          uint64_t v360 = v685;
          uint64_t v361 = v686;
        }
        v400[v399] = v403;
      }
      ++v399;
    }
    while (v399 < 0xCCCCCCCCCCCCCCCDLL * ((v361 - v360) >> 3));
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  uint64_t v416 = (uint64_t)v695;
  v417 = v696;
  if (v650 == (int32x4_t **)v648 && *(_DWORD *)a1 == 2)
  {
    if (v695 == v696)
    {
      uint64_t v420 = (uint64_t)v695;
    }
    else
    {
      do
      {
        v418 = *(int **)v416;
        unint64_t v419 = (uint64_t)(*(void *)(v416 + 8) - *(void *)v416) >> 2;
        LODWORD(__src[0]) = 0;
        sub_248442B60(v418, v419, (float *)__src, 0);
        *(_DWORD *)(v416 + 32) = __src[0];
        v416 += 40;
      }
      while ((int32x4_t **)v416 != v417);
      uint64_t v416 = (uint64_t)v695;
      uint64_t v420 = (uint64_t)v696;
    }
    LODWORD(__src[0]) = 1;
    sub_2484431AC(v691, 0xCCCCCCCCCCCCCCCDLL * ((v420 - v416) >> 3), __src);
    sub_2483E9AC0(&v701, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
    v421 = v701;
    v422 = v702;
    if (v701 != v702)
    {
      int v423 = 0;
      do
        *v421++ = v423++;
      while (v421 != v422);
    }
    uint64_t v424 = (uint64_t)v695;
    uint64_t v425 = (uint64_t)v696;
    if (v696 == v695)
    {
      v489 = 0;
      v431 = v696;
    }
    else
    {
      v426 = 0;
      v427 = 0;
      uint64_t v428 = 0;
      unint64_t v429 = 0;
      unsigned int v430 = 0;
      v431 = v696;
      do
      {
        unsigned int v432 = v430;
        unint64_t v433 = v429;
        unint64_t v429 = ++v430;
        unint64_t v434 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v431 - v424) >> 3);
        if (v434 > v430)
        {
          unint64_t v668 = v430;
          uint64_t v435 = v430;
          unsigned int v662 = v430;
          do
          {
            LODWORD(v708[0]) = 0;
            *(_OWORD *)__src = 0u;
            long long v707 = 0u;
            sub_248450C74((uint64_t)__src, (int **)(v424 + 40 * v433));
            sub_248450C74((uint64_t)__src, (int **)&v695[5 * v435]);
            v436 = __src[0];
            LODWORD(v705) = 0;
            sub_248442B60((int *)__src[0], ((char *)__src[1] - (char *)__src[0]) >> 2, (float *)&v705, 0);
            float v437 = (float)(*(float *)&v705 - *(float *)&v695[5 * v433 + 4]) - *(float *)&v695[5 * v435 + 4];
            if (v437 < 0.0)
            {
              if (*((_DWORD *)v691[0] + v433) <= *((_DWORD *)v691[0] + v435)) {
                int v438 = *((_DWORD *)v691[0] + v435);
              }
              else {
                int v438 = *((_DWORD *)v691[0] + v433);
              }
              if (v427 >= v426)
              {
                v440 = v426;
                uint64_t v441 = ((uint64_t)v427 - v428) >> 4;
                unint64_t v442 = v441 + 1;
                if ((unint64_t)(v441 + 1) >> 60) {
                  sub_2483E92E8();
                }
                unint64_t v443 = (unint64_t)v440 - v428;
                unint64_t v444 = ((uint64_t)v440 - v428) >> 3;
                if (v444 > v442) {
                  unint64_t v442 = v444;
                }
                if (v443 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v445 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v445 = v442;
                }
                if (v445)
                {
                  if (v445 >> 60) {
                    sub_2483E9338();
                  }
                  v446 = (char *)operator new(16 * v445);
                }
                else
                {
                  v446 = 0;
                }
                v447 = &v446[16 * v441];
                *(float *)v447 = v437;
                *((_DWORD *)v447 + 1) = v432;
                *((_DWORD *)v447 + 2) = v430;
                *((_DWORD *)v447 + 3) = v438;
                if (v427 == (float *)v428)
                {
                  uint64_t v428 = (uint64_t)&v446[16 * v441];
                }
                else
                {
                  v448 = &v446[16 * v441];
                  do
                  {
                    *((_OWORD *)v448 - 1) = *((_OWORD *)v427 - 1);
                    v448 -= 16;
                    v427 -= 4;
                  }
                  while (v427 != (float *)v428);
                  v427 = (float *)v428;
                  uint64_t v428 = (uint64_t)v448;
                }
                v426 = (float *)&v446[16 * v445];
                uint64_t v439 = (uint64_t)(v447 + 16);
                if (v427) {
                  operator delete(v427);
                }
              }
              else
              {
                float *v427 = v437;
                *((_DWORD *)v427 + 1) = v432;
                *((_DWORD *)v427 + 2) = v430;
                uint64_t v439 = (uint64_t)(v427 + 4);
                *((_DWORD *)v427 + 3) = v438;
              }
              sub_248450D68(v428, v439, (v439 - v428) >> 4);
              v436 = __src[0];
              v427 = (float *)v439;
            }
            if (v436) {
              operator delete(v436);
            }
            uint64_t v424 = (uint64_t)v695;
            v431 = v696;
            unint64_t v434 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
            uint64_t v435 = ++v430;
          }
          while (v434 > v430);
          unint64_t v429 = v668;
          unsigned int v430 = v662;
        }
      }
      while (v434 > v429);
      if ((float *)v428 == v427)
      {
        v489 = v427;
        uint64_t v425 = v424;
        v346 = a6;
      }
      else
      {
        v669 = v426;
        int v449 = 2;
        v346 = a6;
        do
        {
          uint64_t v451 = *(unsigned int *)(v428 + 4);
          uint64_t v450 = *(unsigned int *)(v428 + 8);
          int v452 = *(_DWORD *)(v428 + 12);
          uint64_t v453 = (uint64_t)v427 - v428;
          if ((uint64_t)v427 - v428 >= 17)
          {
            int v654 = *(_DWORD *)(v428 + 12);
            int v663 = v449;
            uint64_t v454 = 0;
            uint64_t v455 = v453 >> 4;
            *(_OWORD *)__src = *(_OWORD *)v428;
            int64_t v456 = (unint64_t)((v453 >> 4) - 2) >> 1;
            v457 = (_OWORD *)v428;
            do
            {
              v458 = (float *)&v457[v454 + 1];
              uint64_t v459 = (2 * v454) | 1;
              uint64_t v460 = 2 * v454 + 2;
              if (v460 < v455 && sub_248450D04((uint64_t)&v457[v454 + 1], (uint64_t)&v457[v454 + 2]))
              {
                v458 += 4;
                uint64_t v459 = v460;
              }
              _OWORD *v457 = *(_OWORD *)v458;
              v457 = v458;
              uint64_t v454 = v459;
            }
            while (v459 <= v456);
            v461 = v427 - 4;
            if (v458 == v427 - 4)
            {
              *(_OWORD *)v458 = *(_OWORD *)__src;
            }
            else
            {
              *(_OWORD *)v458 = *(_OWORD *)v461;
              *(_OWORD *)v461 = *(_OWORD *)__src;
              sub_248450D68(v428, (uint64_t)(v458 + 4), ((uint64_t)v458 - v428 + 16) >> 4);
            }
            v346 = a6;
            int v449 = v663;
            int v452 = v654;
          }
          unsigned int v462 = *((_DWORD *)v691[0] + v451);
          unsigned int v463 = *((_DWORD *)v691[0] + v450);
          v427 -= 4;
          if (v462 <= v463) {
            int v464 = *((_DWORD *)v691[0] + v450);
          }
          else {
            int v464 = *((_DWORD *)v691[0] + v451);
          }
          if (v463) {
            BOOL v465 = v462 == 0;
          }
          else {
            BOOL v465 = 1;
          }
          if (!v465 && v452 == v464)
          {
            sub_248450C74((uint64_t)&v695[5 * v451], (int **)&v695[5 * v450]);
            v467 = &v695[5 * v451];
            v468 = (int *)*v467;
            unint64_t v469 = ((char *)v467[1] - (char *)*v467) >> 2;
            LODWORD(__src[0]) = 0;
            sub_248442B60(v468, v469, (float *)__src, 0);
            uint64_t v470 = (uint64_t)v695;
            LODWORD(v695[5 * v451 + 4]) = __src[0];
            v471 = v701;
            v472 = v702;
            while (v471 != v472)
            {
              if (*v471 == v450) {
                _DWORD *v471 = v451;
              }
              ++v471;
            }
            v473 = v691[0];
            *((_DWORD *)v691[0] + v450) = 0;
            v473[v451] = v449;
            v474 = v696;
            if (v696 == (int32x4_t **)v470)
            {
              ++v449;
            }
            else
            {
              int v664 = v449 + 1;
              uint64_t v475 = 0;
              unsigned int v476 = 0;
              do
              {
                if (v476 != v451 && *((_DWORD *)v691[0] + v475))
                {
                  LODWORD(v708[0]) = 0;
                  *(_OWORD *)__src = 0u;
                  long long v707 = 0u;
                  sub_248450C74((uint64_t)__src, (int **)(v470 + 40 * v451));
                  sub_248450C74((uint64_t)__src, (int **)&v695[5 * v475]);
                  v477 = __src[0];
                  LODWORD(v705) = 0;
                  sub_248442B60((int *)__src[0], ((char *)__src[1] - (char *)__src[0]) >> 2, (float *)&v705, 0);
                  float v478 = (float)(*(float *)&v705 - *(float *)&v695[5 * v451 + 4])
                       - *(float *)&v695[5 * v475 + 4];
                  if (v478 < 0.0)
                  {
                    if (v476 >= v451) {
                      unsigned int v479 = v451;
                    }
                    else {
                      unsigned int v479 = v476;
                    }
                    if (v451 <= v476) {
                      unsigned int v480 = v476;
                    }
                    else {
                      unsigned int v480 = v451;
                    }
                    if (*((_DWORD *)v691[0] + v451) <= *((_DWORD *)v691[0] + v475)) {
                      int v481 = *((_DWORD *)v691[0] + v475);
                    }
                    else {
                      int v481 = *((_DWORD *)v691[0] + v451);
                    }
                    if (v427 >= v669)
                    {
                      uint64_t v483 = ((uint64_t)v427 - v428) >> 4;
                      unint64_t v484 = v483 + 1;
                      if ((unint64_t)(v483 + 1) >> 60) {
                        sub_2483E92E8();
                      }
                      if (((uint64_t)v669 - v428) >> 3 > v484) {
                        unint64_t v484 = ((uint64_t)v669 - v428) >> 3;
                      }
                      if ((unint64_t)v669 - v428 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v485 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v485 = v484;
                      }
                      if (v485)
                      {
                        if (v485 >> 60) {
                          sub_2483E9338();
                        }
                        v486 = (char *)operator new(16 * v485);
                      }
                      else
                      {
                        v486 = 0;
                      }
                      v487 = &v486[16 * v483];
                      *(float *)v487 = v478;
                      *((_DWORD *)v487 + 1) = v479;
                      *((_DWORD *)v487 + 2) = v480;
                      *((_DWORD *)v487 + 3) = v481;
                      if (v427 == (float *)v428)
                      {
                        uint64_t v428 = (uint64_t)&v486[16 * v483];
                        v346 = a6;
                      }
                      else
                      {
                        v488 = &v486[16 * v483];
                        v346 = a6;
                        do
                        {
                          *((_OWORD *)v488 - 1) = *((_OWORD *)v427 - 1);
                          v488 -= 16;
                          v427 -= 4;
                        }
                        while (v427 != (float *)v428);
                        v427 = (float *)v428;
                        uint64_t v428 = (uint64_t)v488;
                      }
                      v669 = (float *)&v486[16 * v485];
                      uint64_t v482 = (uint64_t)(v487 + 16);
                      if (v427) {
                        operator delete(v427);
                      }
                    }
                    else
                    {
                      float *v427 = v478;
                      *((_DWORD *)v427 + 1) = v479;
                      *((_DWORD *)v427 + 2) = v480;
                      uint64_t v482 = (uint64_t)(v427 + 4);
                      *((_DWORD *)v427 + 3) = v481;
                      v346 = a6;
                    }
                    sub_248450D68(v428, v482, (v482 - v428) >> 4);
                    v477 = __src[0];
                    v427 = (float *)v482;
                  }
                  if (v477) {
                    operator delete(v477);
                  }
                  uint64_t v470 = (uint64_t)v695;
                  v474 = v696;
                }
                uint64_t v475 = ++v476;
              }
              while (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v474 - v470) >> 3) > v476);
              int v449 = v664;
            }
          }
        }
        while ((float *)v428 != v427);
        uint64_t v425 = (uint64_t)v695;
        v431 = v696;
        v489 = v427;
      }
    }
    LODWORD(v705) = -1;
    sub_2484431AC(__src, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v431 - v425) >> 3), &v705);
    uint64_t v491 = (uint64_t)v695;
    v490 = v696;
    if (v696 == v695)
    {
      unint64_t v494 = 0;
    }
    else
    {
      uint64_t v492 = 0;
      unint64_t v493 = 0;
      unint64_t v494 = 0;
      do
      {
        if (*((_DWORD *)v691[0] + v493))
        {
          if (v493 != v494) {
            sub_2483FB040((char *)(v491 + 40 * v494), *(char **)(v491 + v492), *(void *)(v491 + v492 + 8), (uint64_t)(*(void *)(v491 + v492 + 8) - *(void *)(v491 + v492)) >> 2);
          }
          unint64_t v495 = v491 + 40 * v494;
          uint64_t v496 = *(void *)(v491 + v492 + 24);
          *(_DWORD *)(v495 + 32) = *(_DWORD *)(v491 + v492 + 32);
          *(void *)(v495 + 24) = v496;
          *((_DWORD *)__src[0] + v493) = v494++;
          uint64_t v491 = (uint64_t)v695;
          v490 = v696;
        }
        ++v493;
        v492 += 40;
      }
      while (v493 < 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v490 - v491) >> 3));
    }
    sub_248450E54((uint64_t *)&v695, v494);
    v497 = v698;
    v498 = v699;
    v499 = __src[0];
    if (v698 == v699)
    {
      if (!__src[0])
      {
LABEL_647:
        if (v489) {
          operator delete(v489);
        }
        if (v701)
        {
          v702 = v701;
          operator delete(v701);
        }
        if (v691[0])
        {
          v691[1] = v691[0];
          operator delete(v691[0]);
        }
        uint64_t v416 = (uint64_t)v695;
        v417 = v696;
        goto LABEL_654;
      }
    }
    else
    {
      v500 = (unsigned int *)v701;
      do
      {
        _DWORD *v497 = v499[v500[*v497]];
        ++v497;
      }
      while (v497 != v498);
    }
    __src[1] = v499;
    operator delete(v499);
    goto LABEL_647;
  }
LABEL_654:
  v691[0] = 0;
  v691[1] = 0;
  *(void *)&long long v692 = 0;
  v701 = v691;
  LOBYTE(v702) = 0;
  if (v417 != (int32x4_t **)v416)
  {
    unint64_t v501 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v417 - v416) >> 3);
    if (v501 > 0x666666666666666) {
      sub_2483E92E8();
    }
    v691[0] = sub_248403444(v501);
    v691[1] = v691[0];
    *(void *)&long long v692 = (char *)v691[0] + 40 * v502;
    v704 = v691[0];
    v705 = (char *)v691[0];
    __src[0] = &v692;
    __src[1] = &v704;
    *(void *)&long long v707 = &v705;
    BYTE8(v707) = 0;
    v503 = v691[0];
    do
    {
      void *v503 = 0;
      v503[1] = 0;
      v503[2] = 0;
      sub_2483F2450(v503, *(const void **)v416, *(void *)(v416 + 8), (uint64_t)(*(void *)(v416 + 8) - *(void *)v416) >> 2);
      uint64_t v504 = *(void *)(v416 + 24);
      *((_DWORD *)v503 + 8) = *(_DWORD *)(v416 + 32);
      v503[3] = v504;
      v503 = v705 + 40;
      v705 += 40;
      v416 += 40;
    }
    while ((int32x4_t **)v416 != v417);
    BYTE8(v707) = 1;
    sub_248451284((uint64_t)__src);
    v691[1] = v503;
  }
  __src[1] = 0;
  *(void *)&long long v707 = 0;
  __src[0] = &__src[1];
  if (v650 != (int32x4_t **)v648)
  {
    uint64_t v505 = 0;
    do
    {
      LODWORD(v701) = v505;
      *((_DWORD *)sub_248450FD4((uint64_t **)__src, v505, &v701) + 8) = v505;
      ++v505;
    }
    while (__pb != v505);
  }
  int v506 = __pb;
  v507 = (int *)v698;
  v508 = (int *)v699;
  if (v698 != v699)
  {
    v509 = (int *)v698;
    do
    {
      int v510 = *v509;
      v511 = (char *)__src[1];
      if (!__src[1]) {
        goto LABEL_673;
      }
      v512 = &__src[1];
      do
      {
        v513 = (void **)v511;
        v514 = v512;
        int v515 = *((_DWORD *)v511 + 7);
        v516 = (void **)(v511 + 8);
        if (v515 >= v510)
        {
          v516 = v513;
          v512 = v513;
        }
        v511 = (char *)*v516;
      }
      while (v511);
      if (v512 == &__src[1]) {
        goto LABEL_673;
      }
      if (v515 < v510) {
        v513 = v514;
      }
      if (v510 < *((_DWORD *)v513 + 7))
      {
LABEL_673:
        LODWORD(v701) = *v509;
        *((_DWORD *)sub_248450FD4((uint64_t **)__src, v510, &v701) + 8) = v506;
        v517 = (char *)v691[0];
        v518 = (char *)v691[0] + 40 * v510;
        uint64_t v519 = (uint64_t)v695;
        v520 = (char *)&v695[5 * v506];
        if (v520 != v518) {
          sub_2483FB040(v520, *(char **)v518, *((void *)v518 + 1), (uint64_t)(*((void *)v518 + 1) - *(void *)v518) >> 2);
        }
        v521 = &v517[40 * v510];
        uint64_t v522 = *((void *)v521 + 3);
        uint64_t v523 = v519 + 40 * v506;
        *(_DWORD *)(v523 + 32) = *((_DWORD *)v521 + 8);
        *(void *)(v523 + 24) = v522;
        ++v506;
      }
      ++v509;
    }
    while (v509 != v508);
  }
  sub_248450E54((uint64_t *)&v695, v506);
  uint64_t v296 = a1;
  uint64_t v345 = a8;
  if (v507 != v508)
  {
    v524 = v507;
    do
    {
      LODWORD(v701) = *v524;
      *v524++ = *((_DWORD *)sub_248450FD4((uint64_t **)__src, (int)v701, &v701) + 8);
    }
    while (v524 != v508);
  }
  sub_2484510A0((void *)__src[1]);
  __src[0] = v691;
  sub_24844966C((void ***)__src);
  if (v686 == v685)
  {
    if (!v507) {
      goto LABEL_686;
    }
  }
  else
  {
    unint64_t v525 = 0;
    do
    {
      *(unsigned char *)(*a5 + v646 + v525) = v507[v525];
      ++v525;
    }
    while (v525 < 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3));
  }
  operator delete(v507);
LABEL_686:
  if (v346) {
    sub_248453460((unsigned __int8 **)a5, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), v346, a7, a8);
  }
LABEL_688:
  uint64_t v526 = (uint64_t)v695;
  unint64_t v527 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
  if (v345 && v674 < v527)
  {
    v528 = (double *)(v345 + 40 * a7 + 32);
    unint64_t v529 = v674;
    uint64_t v530 = 40 * v674;
    do
    {
      uint64_t v531 = v526 + v530;
      sub_248450898(v526 + v530, *(float *)&v366, v367, v368, v369, v370, v371, v372, v373);
      double v367 = *v528;
      double v366 = *v528 + *(float *)(v531 + 32);
      double *v528 = v366;
      ++v529;
      uint64_t v526 = (uint64_t)v695;
      unint64_t v527 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
      v530 += 40;
    }
    while (v529 < v527);
  }
  if (*((unsigned char *)a4 + 64)) {
    uint64_t v532 = 8;
  }
  else {
    uint64_t v532 = 7;
  }
  v670 = (void **)(a4 + 4);
  sub_2483F3D70((void **)a4 + 4, v527);
  int v533 = *(_DWORD *)(v296 + 4);
  if (v533)
  {
    if (v533 == 3)
    {
      a4[5] = a4[4];
      *(_OWORD *)__src = xmmword_2484DCC10;
      sub_248449378(v670, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), __src);
    }
    else if (v533 == 1)
    {
      a4[5] = a4[4];
      *(_OWORD *)__src = xmmword_2484DCAF0;
      sub_248449378(v670, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), __src);
    }
    else if (!*(unsigned char *)(v296 + 50))
    {
      v691[0] = 0;
      v691[1] = 0;
      *(void *)&long long v692 = 0;
      if (v533 == 2)
      {
        *(_OWORD *)__src = xmmword_2484DCB00;
        long long v707 = xmmword_2484DCC20;
        *(_OWORD *)v708 = xmmword_2484DCAF0;
        long long v709 = xmmword_2484DCC10;
        sub_2484494B4(v691, (char *)__src, (char *)v710, 4uLL);
        v534 = a4;
      }
      else
      {
        v534 = a4;
        if (v533 == 4)
        {
          *(_OWORD *)__src = xmmword_2484DCB00;
          long long v707 = xmmword_2484DCC30;
          *(_OWORD *)v708 = xmmword_2484DCC40;
          long long v709 = xmmword_2484DCC50;
          v710[0] = xmmword_2484DCC20;
          v710[1] = xmmword_2484DCC60;
          long long v711 = xmmword_2484DCC70;
          long long v712 = xmmword_2484DCC80;
          long long v713 = xmmword_2484DCC90;
          long long v714 = xmmword_2484DCCA0;
          long long v715 = xmmword_2484DCCB0;
          long long v716 = xmmword_2484DCCC0;
          long long v717 = xmmword_2484DCCD0;
          long long v718 = xmmword_2484DCCE0;
          v719[0] = xmmword_2484DCCF0;
          v719[1] = xmmword_2484DCD00;
          v719[2] = xmmword_2484DCD10;
          long long v720 = xmmword_2484DCD20;
          long long v721 = xmmword_2484DCD30;
          long long v722 = xmmword_2484DCD40;
          long long v723 = xmmword_2484DCAF0;
          long long v724 = xmmword_2484DCC10;
          long long v725 = xmmword_2484DCD50;
          long long v726 = xmmword_2484DCD60;
          long long v727 = xmmword_2484DCD70;
          long long v728 = xmmword_2484DCD80;
          long long v729 = xmmword_2484DCD90;
          long long v730 = xmmword_2484DCDA0;
          sub_2484494B4(v691, (char *)__src, (char *)&v731, 0x1CuLL);
        }
      }
      LODWORD(v701) = 2139095039;
      sub_2484495E8(__src, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), &v701);
      sub_2483E9AC0(&v701, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
      sub_248442AEC(&v698, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
      v535 = a4 + 4;
      if (*((unsigned char *)v534 + 24)) {
        unint64_t v536 = 4096;
      }
      else {
        unint64_t v536 = 256;
      }
      v655 = v691[0];
      v658 = (int *)v691[1];
      if (v691[0] == v691[1])
      {
        v542 = v695;
        v571 = v696;
      }
      else
      {
        v537 = (int *)v691[0];
        do
        {
          int v538 = *v537;
          unsigned int v539 = v537[1];
          int v540 = v537[2];
          int v541 = v537[3];
          if (v699 - (unsigned char *)v698 >= 1) {
            memset(v698, 1, v699 - (unsigned char *)v698);
          }
          if (v702 - (unsigned char *)v701 >= 1) {
            bzero(v701, 4 * (((unint64_t)(v702 - (unsigned char *)v701) >> 2) - ((unint64_t)(v702 - (unsigned char *)v701) > 3)) + 4);
          }
          v542 = v695;
          v543 = v696;
          for (k = v695; k != v543; k += 5)
          {
            k[1] = *k;
            k[3] = 0;
          }
          v545 = *(int ***)a3;
          __pc = *(int ***)(a3 + 8);
          if (*(int ***)a3 != __pc)
          {
            int v546 = v541 + v540;
            do
            {
              v547 = *v545;
              v548 = (unsigned int *)v545[1];
              while (v547 != (int *)v548)
              {
                unint64_t v549 = *v547;
                if ((v549 & 1) == 0)
                {
                  uint64_t v550 = *(unsigned __int8 *)(*a5 + (v549 >> 1));
                  unsigned int v551 = v547[1];
                  unsigned int v552 = __clz(v551) ^ 0x1F;
                  unsigned int v553 = ((v552 - v538) << v546)
                       + v539
                       + (((-1 << v552) + v551) & ~(-1 << v541))
                       + (((-1 << v552) + v551) >> (v552 - v540) << v541);
                  int v554 = v552 - v546;
                  if (v539 <= v551) {
                    unint64_t v555 = v553;
                  }
                  else {
                    unint64_t v555 = v551;
                  }
                  if (v539 <= v551) {
                    int v556 = v554;
                  }
                  else {
                    int v556 = 0;
                  }
                  if (v536 <= v555 || *v681 && v555 >= *((_DWORD *)a4 + 17))
                  {
                    *((unsigned char *)v698 + v550) = 0;
                  }
                  else
                  {
                    *((_DWORD *)v701 + v550) += v556;
                    sub_248448D6C((uint64_t)&v695[5 * v550], v555);
                  }
                }
                v547 += 2;
              }
              v545 += 3;
            }
            while (v545 != __pc);
            v542 = v695;
            v543 = v696;
          }
          if (v543 == v542)
          {
            v571 = v542;
          }
          else
          {
            uint64_t v557 = 0;
            uint64_t v558 = 0;
            unint64_t v559 = 0;
            unint64_t v560 = __clz(v538 + 1) ^ 0x1F;
            if (((v538 + 1) & v538) != 0) {
              unint64_t v561 = v560 + 1;
            }
            else {
              unint64_t v561 = v560;
            }
            float v562 = (float)v561;
            unint64_t v563 = __clz(v538 - v540 + 1) ^ 0x1F;
            if (((v538 - v540 + 1) & (v538 - v540)) != 0) {
              ++v563;
            }
            float v564 = (float)v563;
            do
            {
              if (*((unsigned char *)v698 + v559))
              {
                v565 = (int **)&v542[v557];
                v566 = *v565;
                unint64_t v567 = v565[1] - *v565;
                LODWORD(v705) = 0;
                sub_248442B60(v566, v567, (float *)&v705, 0);
                float v568 = (float)((float)(*(float *)&v705 + (float)*((unsigned int *)v701 + v559)) + v562) + v564;
                v569 = (float *)__src[0];
                if (v568 < *((float *)__src[0] + v559))
                {
                  v570 = (char *)*v670 + v558;
                  _DWORD *v570 = v538;
                  v570[1] = v539;
                  v570[2] = v540;
                  v570[3] = v541;
                  v569[v559] = v568;
                }
              }
              ++v559;
              v542 = v695;
              v571 = v696;
              v558 += 16;
              v557 += 5;
            }
            while (v559 < 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
          }
          v537 += 4;
          v535 = a4 + 4;
        }
        while (v537 != v658);
      }
      while (v542 != v571)
      {
        v542[1] = *v542;
        v542[3] = 0;
        v542 += 5;
      }
      v572 = *(int ***)a3;
      v573 = *(int ***)(a3 + 8);
      if (*(int ***)a3 == v573)
      {
        unint64_t v574 = 4;
      }
      else
      {
        unint64_t v574 = 4;
        do
        {
          v575 = *v572;
          v576 = (unsigned int *)v572[1];
          while (v575 != (int *)v576)
          {
            unint64_t v577 = *v575;
            uint64_t v578 = *(unsigned __int8 *)(*a5 + (v577 >> 1));
            v579 = (_DWORD *)a4 + 19;
            if ((v577 & 1) == 0) {
              v579 = (_DWORD *)(*v535 + 16 * v578);
            }
            unsigned int v580 = v575[1];
            unsigned int v581 = v579[1];
            if (v581 <= v580)
            {
              unsigned int v582 = __clz(v580) ^ 0x1F;
              unsigned int v580 = ((v582 - *v579) << (v579[3] + v579[2]))
                   + v581
                   + (((-1 << v582) + v580) & ~(-1 << v579[3]))
                   + (((-1 << v582) + v580) >> (v582 - v579[2]) << v579[3]);
            }
            if (v577) {
              int v583 = *((_DWORD *)a4 + 17);
            }
            else {
              int v583 = 0;
            }
            unsigned int v584 = v583 + v580;
            sub_248448D6C((uint64_t)&v695[5 * v578], v583 + v580);
            while (v584 >> v574)
              ++v574;
            v575 += 2;
          }
          v572 += 3;
        }
        while (v572 != v573);
      }
      if (v698)
      {
        v699 = v698;
        operator delete(v698);
      }
      uint64_t v345 = a8;
      v346 = a6;
      uint64_t v296 = a1;
      if (v701)
      {
        v702 = v701;
        operator delete(v701);
      }
      if (__src[0])
      {
        __src[1] = __src[0];
        operator delete(__src[0]);
      }
      if (v655) {
        operator delete(v655);
      }
      if (v574 <= 5) {
        uint64_t v532 = 5;
      }
      else {
        uint64_t v532 = v574;
      }
    }
  }
  if (*(unsigned char *)(v296 + 50)) {
    uint64_t v532 = 8;
  }
  v691[0] = 0;
  uint64_t v585 = *((unsigned __int8 *)a4 + 24);
  if (v346)
  {
    *(void *)(v346[3] + (*v346 >> 3)) = (v585 << (*v346 & 7)) | *(unsigned __int8 *)(v346[3] + (*v346 >> 3));
    unint64_t v586 = *v346 + 1;
    unint64_t *v346 = v586;
    uint64_t v587 = v345;
    if (*((unsigned char *)a4 + 24))
    {
      uint64_t v588 = 1;
      uint64_t v532 = 15;
    }
    else
    {
      *(void *)(v346[3] + (v586 >> 3)) = ((v532 - 5) << (v586 & 7)) | *(unsigned __int8 *)(v346[3] + (v586 >> 3));
      *v346 += 2;
      uint64_t v588 = 3;
    }
    sub_248441E20(a4[4], (uint64_t *)a4[5], v346, v532);
    v593 = 0;
    LODWORD(v585) = *((unsigned __int8 *)a4 + 24);
  }
  else
  {
    uint64_t v587 = v345;
    if (*((unsigned char *)a4 + 24)) {
      uint64_t v588 = 1;
    }
    else {
      uint64_t v588 = 3;
    }
    if (*((unsigned char *)a4 + 24)) {
      uint64_t v532 = 15;
    }
    v589 = (uint64_t *)a4[4];
    v590 = (uint64_t *)a4[5];
    if (v589 == v590)
    {
      v593 = 0;
    }
    else
    {
      do
      {
        uint64_t v591 = *v589;
        uint64_t v592 = v589[1];
        v589 += 2;
        sub_248448C80(v591, v592, (unint64_t *)v691, v532);
      }
      while (v589 != v590);
      v593 = (char *)v691[0];
    }
  }
  v594 = v695;
  uint64_t v595 = (uint64_t)v696;
  unint64_t v596 = v674;
  if (v585)
  {
    if (v695 == v696)
    {
      v602 = v696;
    }
    else
    {
      do
      {
        int v597 = ((v594[1] - *v594) >> 2) + 1;
        while (1)
        {
          unsigned int v598 = v597 - 2;
          if (v597 - 2 < 0) {
            break;
          }
          --v597;
          if (*(int *)(*v594 + 4 * v598) >= 1)
          {
            uint64_t v599 = v597;
            goto LABEL_804;
          }
        }
        uint64_t v599 = 1;
LABEL_804:
        unint64_t v600 = v599 - 1;
        if (v346)
        {
          sub_2484437D4(v600, v346);
        }
        else
        {
          unint64_t v601 = (unint64_t)&v593[-__clz(v600) + 68];
          if (v600) {
            v593 = (char *)v601;
          }
          else {
            ++v593;
          }
        }
        unint64_t v596 = v674;
        v594 += 5;
      }
      while (v594 != (void *)v595);
      uint64_t v595 = (uint64_t)v695;
      v602 = v696;
    }
    v691[0] = v593;
    v594 = (void *)v595;
    uint64_t v595 = (uint64_t)v602;
  }
  v603 = &v593[v588];
  if (v596 < 0xCCCCCCCCCCCCCCCDLL * ((v595 - (uint64_t)v594) >> 3))
  {
    v683 = a4 + 13;
    do
    {
      unint64_t v604 = v596;
      uint64_t v605 = v594[5 * v596];
      int v606 = ((unint64_t)(v594[5 * v596 + 1] - v605) >> 2) + 1;
      while (1)
      {
        unsigned int v607 = v606 - 2;
        if (v606 - 2 < 0) {
          break;
        }
        --v606;
        if (*(int *)(v605 + 4 * v607) >= 1)
        {
          unint64_t v608 = v606;
          goto LABEL_820;
        }
      }
      unint64_t v608 = 1;
LABEL_820:
      v609 = a4;
      v611 = (void *)a4[1];
      unint64_t v610 = a4[2];
      if ((unint64_t)v611 >= v610)
      {
        unint64_t v613 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v611 - *a4) >> 3);
        unint64_t v614 = v613 + 1;
        if (v613 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2483E92E8();
        }
        unint64_t v615 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v610 - *a4) >> 3);
        if (2 * v615 > v614) {
          unint64_t v614 = 2 * v615;
        }
        if (v615 >= 0x555555555555555) {
          unint64_t v616 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v616 = v614;
        }
        v708[0] = a4 + 2;
        if (v616) {
          unint64_t v616 = (unint64_t)sub_2483F8ED4(v616);
        }
        else {
          uint64_t v617 = 0;
        }
        v618 = (void *)(v616 + 24 * v613);
        __src[0] = (void *)v616;
        __src[1] = v618;
        *((void *)&v707 + 1) = v616 + 24 * v617;
        void *v618 = 0;
        v618[1] = 0;
        v618[2] = 0;
        *(void *)&long long v707 = v618 + 3;
        v609 = a4;
        sub_2483F8F1C(a4, __src);
        v612 = (void *)a4[1];
        sub_248448DCC((uint64_t)__src);
      }
      else
      {
        void *v611 = 0;
        v611[1] = 0;
        v611[2] = 0;
        v612 = v611 + 3;
        a4[1] = (uint64_t)(v611 + 3);
      }
      v609[1] = (uint64_t)v612;
      sub_248448E2C((uint64_t)(v612 - 3), v608);
      v346 = a6;
      v619 = a6;
      if (*(unsigned char *)(a1 + 50))
      {
        v620 = a4;
        unint64_t v622 = a4[14];
        unint64_t v621 = a4[15];
        if (v622 >= v621)
        {
          unint64_t v624 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v622 - *v683) >> 3);
          unint64_t v625 = v624 + 1;
          if (v624 + 1 > 0x666666666666666) {
            sub_2483E92E8();
          }
          unint64_t v626 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v621 - *v683) >> 3);
          if (2 * v626 > v625) {
            unint64_t v625 = 2 * v626;
          }
          if (v626 >= 0x333333333333333) {
            unint64_t v627 = 0x666666666666666;
          }
          else {
            unint64_t v627 = v625;
          }
          v708[0] = a4 + 15;
          if (v627) {
            unint64_t v627 = (unint64_t)sub_248403444(v627);
          }
          else {
            uint64_t v628 = 0;
          }
          v629 = (_OWORD *)(v627 + 40 * v624);
          __src[0] = (void *)v627;
          __src[1] = v629;
          *((void *)&v707 + 1) = v627 + 40 * v628;
          *((void *)v629 + 4) = 0;
          _OWORD *v629 = 0u;
          v629[1] = 0u;
          *(void *)&long long v707 = (char *)v629 + 40;
          sub_248449068(v683, __src);
          v620 = a4;
          unint64_t v623 = a4[14];
          sub_24841F7CC((uint64_t)__src);
        }
        else
        {
          *(void *)(v622 + 32) = 0;
          *(_OWORD *)unint64_t v622 = 0u;
          *(_OWORD *)(v622 + 16) = 0u;
          unint64_t v623 = v622 + 40;
          a4[14] = v622 + 40;
        }
        v620[14] = v623;
        v619 = (unint64_t *)(v623 - 40);
        v346 = a6;
      }
      sub_248419548((uint64_t)__src, v619, 24 * (int)v608 + 256);
      unint64_t v630 = sub_248441F4C(*(_DWORD *)(a1 + 12), v695[5 * v604]->i32, v608, v532, *((unsigned __int8 *)a4 + 24), *(void *)(a4[1] - 24), v619);
      if (v619) {
        *(void *)&long long v707 = *v619 - (unint64_t)__src[0];
      }
      sub_2484195C0((uint64_t)__src, v619, a7, v587);
      if (*(unsigned char *)(a1 + 50)) {
        sub_2484196CC(v346, (uint64_t *)v619);
      }
      v603 += v630;
      unint64_t v596 = v604 + 1;
      v594 = v695;
    }
    while (v604 + 1 < 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
  }
  __src[0] = &v695;
  sub_24844966C((void ***)__src);
  if (v346) {
    unint64_t v688 = *v346 - (unint64_t)v687[0];
  }
  sub_2484195C0((uint64_t)v687, v346, a7, v587);
  if (v587) {
    *(void *)(v587 + 40 * a7) -= 0x5555555555555555 * ((a4[1] - *a4) >> 3);
  }
  __src[0] = &v685;
  sub_24844966C((void ***)__src);
  __src[0] = &v689;
  sub_2483F87EC((void ***)__src);
  return &v652[(void)v603];
}

void sub_2484470F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (__p) {
    operator delete(__p);
  }
  a62 = &a56;
  sub_24844966C((void ***)&a62);
  a56 = (uint64_t)&a37;
  sub_24844966C((void ***)&a56);
  a40 = (uint64_t)&a45;
  sub_2483F87EC((void ***)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_248447434(uint64_t a1, unint64_t a2, int a3, int ***a4, _DWORD *a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v53 = (char **)(a1 + 8);
  unint64_t v54 = (char **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_248448CE0(v57, a2);
  uint64_t v8 = *a4;
  float32x2_t v56 = a4[1];
  if (*a4 != v56)
  {
    do
    {
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      while (v9 != v10)
      {
        int v11 = *v9;
        unsigned int v12 = v9[1];
        unsigned int v13 = a5[6];
        if ((*v9 & 1) == 0) {
          unsigned int v13 = 16;
        }
        if (v13 <= v12)
        {
          unsigned int v14 = __clz(v12) ^ 0x1F;
          unsigned int v15 = (-1 << v14) + v12;
          int v16 = a5[5];
          if ((v11 & 1) == 0) {
            int v16 = 4;
          }
          int v17 = a5[7];
          if ((v11 & 1) == 0) {
            LOBYTE(v17) = 2;
          }
          unsigned int v12 = ((v14 - v16) << (((v11 << 31 >> 31) & a5[8]) + v17))
              + v13
              + (v15 & ~(-1 << ((v11 << 31 >> 31) & a5[8])))
              + (v15 >> (v14 - v17) << ((v11 << 31 >> 31) & a5[8]));
        }
        sub_248448D6C(v57[0] + 40 * (*v9 >> 1), (int)(((*v9 << 31 >> 31) & a5[3]) + v12));
        v9 += 2;
      }
      v8 += 3;
    }
    while (v8 != v56);
  }
  *(void *)a1 = 0;
  if (a2)
  {
    unint64_t v18 = 0;
    uint64_t v19 = (void *)(v57[0] + 8);
    unint64_t v20 = a2;
    do
    {
      if (v18 <= (uint64_t)(*v19 - *(v19 - 1)) >> 2) {
        unint64_t v18 = (uint64_t)(*v19 - *(v19 - 1)) >> 2;
      }
      v19 += 5;
      --v20;
    }
    while (v20);
    *(void *)a1 = v18;
  }
  else
  {
    unint64_t v18 = 0;
  }
  sub_2484479D0(v53, v18 * a2);
  sub_2484479D0(v54, a2);
  if (a2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v57[0];
    int32x2_t v24 = vdup_n_s32(0xC0D55555);
    float32x2_t v25 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
    float32x2_t v26 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
    float32x2_t v27 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
    float32x2_t v28 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
    float32x2_t v29 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
    float32x2_t v30 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
    signed int v31 = *v54;
    __asm { FMOV            V20.2S, #-1.0 }
    do
    {
      unsigned int v37 = (int **)(v23 + 40 * v22);
      unint64_t v38 = (unint64_t)v37[3];
      float v39 = 1.0 / (float)((float)v38 + 0.00000001);
      unsigned int v40 = *v37;
      float v41 = 0.0;
      uint64_t v42 = *(void *)(v23 + 40 * v22 + 8) - (void)v40;
      if (v42)
      {
        unint64_t v43 = v42 >> 2;
        if (v43 <= 1) {
          unint64_t v43 = 1;
        }
        unint64_t v44 = (_DWORD *)(*(void *)(a1 + 8) + *(void *)a1 * v21);
        do
        {
          unint64_t v46 = *v40++;
          unint64_t v45 = v46;
          if (v46)
          {
            float32x2_t v47 = 0;
            if (v38 != v45)
            {
              v47.f32[0] = v39 * (float)v45;
              int32x2_t v48 = vdup_lane_s32((int32x2_t)v47, 0);
              int32x2_t v49 = vadd_s32(v48, v24);
              float32x2_t v47 = vadd_f32((float32x2_t)vsub_s32(v48, (int32x2_t)vand_s8((int8x8_t)v49, (int8x8_t)0x7F0000007FLL)), _D20);
              v47.f32[0] = -vadd_f32(vdiv_f32(vmla_f32(v29, v47, vmla_f32(v26, v25, v47)), vmla_f32(v30, v47, vmla_f32(v28, v27, v47))), vcvt_f32_s32(vshr_n_s32(v49, 0x17uLL))).f32[0];
              float v50 = ceilf(v47.f32[0]);
              if (a3) {
                v47.f32[0] = v50;
              }
            }
          }
          else
          {
            v47.i32[0] = 12.0;
          }
          *v44++ = v47.i32[0];
          float v41 = v41 + (float)(v47.f32[0] * (float)(int)v45);
          --v43;
        }
        while (v43);
      }
      *(float *)&v31[4 * v22++] = fmaxf(6.0 - (float)(v41 * v39), 0.0);
      v21 += 4;
    }
    while (v22 != a2);
  }
  uint64_t v58 = (void **)v57;
  sub_24844966C(&v58);
  return a1;
}

void sub_248447764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *a12;
  if (*a12)
  {
    *(void *)(a13 + 40) = v19;
    operator delete(v19);
  }
  unint64_t v20 = *a11;
  if (*a11)
  {
    *(void *)(a13 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484477B4(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  unint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E9338();
    }
    uint64_t v11 = 3 * v10;
    unsigned int v12 = (char *)operator new(24 * v10);
    unsigned int v13 = &v12[24 * v5];
    unsigned int v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    int v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        int v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v3[2];
        void *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      uint64_t v19 = *(void **)a1;
      unint64_t v3 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        unint64_t v20 = v3;
        do
        {
          uint64_t v22 = (void *)*(v20 - 3);
          v20 -= 3;
          uint64_t v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          unint64_t v3 = v20;
        }
        while (v20 != v19);
        unint64_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      int32x2_t v24 = *(void **)(a1 + 8);
      do
      {
        float32x2_t v26 = (void *)*(v24 - 3);
        v24 -= 3;
        float32x2_t v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        unint64_t v3 = v24;
      }
      while (v24 != v23);
    }
    *(void *)(a1 + 8) = v23;
  }
}

void sub_2484479D0(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    uint64_t v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)sub_2483E9300(v10);
  unsigned int v12 = *a1;
  unsigned int v13 = a1[1];
  unsigned int v14 = &v11[4 * v5];
  int v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  int v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_248447AE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_248447434((uint64_t)&v125, a2, *(unsigned __int8 *)(a1 + 48), (int ***)a3, (_DWORD *)a4);
  v114 = (uint64_t *)a5;
  sub_2484477B4(a5, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  memset(v124, 0, sizeof(v124));
  uint64_t v7 = *(int ***)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    unint64_t v115 = 0;
    unint64_t v8 = 0;
    float v9 = 0.0;
    uint64_t v112 = (int ***)a3;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      if (v8 >= (*(void *)(a1 + 24) - v10) >> 3) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 8 * v8);
      }
      unint64_t v116 = v8;
      uint64_t v12 = 3 * v8;
      unsigned int v13 = (unint64_t *)&v7[3 * v8];
      uint64_t v14 = *v114;
      uint64_t v15 = v13 + 1;
      uint64_t v16 = v13[1] - *v13;
      sub_2484479D0(v124, (v16 >> 3) + 1);
      unint64_t v17 = *v13;
      unint64_t v18 = (uint64_t)(v13[1] - *v13) >> 3;
      if (v13[1] != *v13)
      {
        uint64_t v19 = v125;
        unint64_t v20 = v126;
        if (v18 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = (uint64_t)(*v15 - *v13) >> 3;
        }
        uint64_t v22 = (float *)(v124[0] + 4);
        uint64_t v23 = (unsigned int *)(v17 + 4);
        int32x2_t v24 = (unsigned int *)(v17 + 4);
        do
        {
          unsigned int v26 = *v24;
          v24 += 2;
          unsigned int v25 = v26;
          unsigned int v27 = __clz(v26);
          unsigned int v28 = 29 - v27;
          unsigned int v29 = (((-1 << (v27 ^ 0x1F)) + v26) >> (29 - v27)) - 4 * v27 + 124;
          if (v26 < 0x10)
          {
            unsigned int v30 = 0;
          }
          else
          {
            unsigned int v25 = v29;
            unsigned int v30 = v28;
          }
          float *v22 = (float)(v20[v19 * ((unint64_t)*(v23 - 1) >> 1) + v25] + (float)v30) + *(v22 - 1);
          ++v22;
          uint64_t v23 = v24;
          --v21;
        }
        while (v21);
      }
      signed int v31 = (void **)(v14 + 8 * v12);
      sub_248430A8C(v31, v18);
      v115 += v16 >> 3;
      unint64_t v32 = (uint64_t)(*v15 - *v13) >> 3;
      unint64_t v33 = *(unsigned int *)(a4 + 16);
      unint64_t v34 = 0x100000;
      if (v32 < 0x100000) {
        unint64_t v34 = (uint64_t)(*v15 - *v13) >> 3;
      }
      uint64_t v35 = 1;
      do
      {
        unint64_t v36 = v35;
        v35 *= 2;
      }
      while (v36 < v34);
      sub_248448380((uint64_t)v123, *v13, v32, v36, *(unsigned int *)(a4 + 16), (uint64_t)(*v15 - *v13) >> 3, v11);
      uint64_t v121 = 0;
      unint64_t v122 = 0;
      unint64_t v37 = *v13;
      if (*v15 != *v13) {
        break;
      }
LABEL_117:
      sub_248448BE4(v123);
      unint64_t v8 = v116 + 1;
      uint64_t v7 = *v112;
      if (v116 + 1 >= 0xAAAAAAAAAAAAAAABLL * (v112[1] - *v112))
      {
        double v111 = (double)v115;
        goto LABEL_120;
      }
    }
    unint64_t v38 = 0;
    LOBYTE(v39) = 0;
    uint64_t v40 = v14 + 24 * v116;
    float v41 = (void **)(v40 + 8);
    uint64_t v42 = (void *)(v40 + 16);
    unint64_t v117 = v33;
    while (1)
    {
      unint64_t v43 = (char *)*v41;
      if ((unint64_t)*v41 >= *v42)
      {
        uint64_t v45 = (v43 - (unsigned char *)*v31) >> 3;
        if ((unint64_t)(v45 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v46 = *v42 - (void)*v31;
        uint64_t v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
          uint64_t v47 = v45 + 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48) {
          unint64_t v48 = (unint64_t)sub_2483F04AC(v48);
        }
        else {
          uint64_t v49 = 0;
        }
        float v50 = (void *)(v48 + 8 * v45);
        *float v50 = *(void *)(v37 + 8 * v38);
        unint64_t v44 = v50 + 1;
        int v51 = (char *)*v41;
        unint64_t v52 = (char *)*v31;
        if (*v41 != *v31)
        {
          do
          {
            uint64_t v53 = *((void *)v51 - 1);
            v51 -= 8;
            *--float v50 = v53;
          }
          while (v51 != v52);
          int v51 = (char *)*v31;
        }
        *signed int v31 = v50;
        *float v41 = v44;
        *uint64_t v42 = v48 + 8 * v49;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)unint64_t v43 = *(void *)(v37 + 8 * v38);
        unint64_t v44 = v43 + 8;
      }
      *float v41 = v44;
      if ((v39 & 1) == 0) {
        sub_2484489F0(v123, v38);
      }
      sub_248449748((uint64_t *)v123, v38, &v121, &v122);
      unint64_t v54 = v122;
      if (v122 >= v33) {
        break;
      }
      LOBYTE(v39) = 0;
LABEL_99:
      ++v38;
      unint64_t v37 = *v13;
      if (v38 >= (uint64_t)(*v15 - *v13) >> 3) {
        goto LABEL_117;
      }
    }
    if (v122 > 0xFF || (float32x2_t v55 = v15, v56 = v38 + 1, v38 + 1 >= (uint64_t)(*v55 - *v13) >> 3))
    {
      LODWORD(v39) = 0;
    }
    else
    {
      sub_2484489F0(v123, v38 + 1);
      uint64_t v119 = 0;
      unint64_t v120 = 0;
      sub_248449748((uint64_t *)v123, v38 + 1, &v119, &v120);
      if (v120 <= v54)
      {
        LODWORD(v39) = 1;
      }
      else
      {
        unint64_t v122 = v120;
        uint64_t v121 = v119;
        unint64_t v57 = *v13;
        uint64_t v58 = (char *)*v41;
        if ((unint64_t)*v41 >= *v42)
        {
          uint64_t v102 = (v58 - (unsigned char *)*v31) >> 3;
          if ((unint64_t)(v102 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v103 = *v42 - (void)*v31;
          uint64_t v104 = v103 >> 2;
          if (v103 >> 2 <= (unint64_t)(v102 + 1)) {
            uint64_t v104 = v102 + 1;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v105 = v104;
          }
          if (v105) {
            unint64_t v105 = (unint64_t)sub_2483F04AC(v105);
          }
          else {
            uint64_t v106 = 0;
          }
          uint64_t v107 = (void *)(v105 + 8 * v102);
          *uint64_t v107 = *(void *)(v57 + 8 * v56);
          uint64_t v59 = v107 + 1;
          unsigned int v108 = (char *)*v41;
          v109 = (char *)*v31;
          if (*v41 != *v31)
          {
            do
            {
              uint64_t v110 = *((void *)v108 - 1);
              v108 -= 8;
              *--uint64_t v107 = v110;
            }
            while (v108 != v109);
            unsigned int v108 = (char *)*v31;
          }
          *signed int v31 = v107;
          *float v41 = v59;
          *uint64_t v42 = v105 + 8 * v106;
          if (v108) {
            operator delete(v108);
          }
        }
        else
        {
          *(void *)uint64_t v58 = *(void *)(v57 + 8 * v56);
          uint64_t v59 = v58 + 8;
        }
        LODWORD(v39) = 0;
        *float v41 = v59;
        unint64_t v54 = v122;
        ++v38;
      }
    }
    unsigned int v60 = v54 - *(_DWORD *)(a4 + 16);
    float v61 = 0.0;
    float v62 = 0.0;
    if (v60 >= 2)
    {
      unsigned int v63 = __clz(v60);
      unsigned int v60 = (((-1 << (v63 ^ 0x1F)) + v60) >> (v63 ^ 0x1F)) - v63 + 32;
      if (v60 >= 0x10) {
        unsigned int v60 = 16;
      }
      float v62 = (float)(v63 ^ 0x1F);
    }
    float v64 = flt_24854EB9C[v60];
    int v65 = v121;
    unsigned int v66 = v121;
    if (v121 >= 0x80)
    {
      unsigned int v67 = __clz(v121);
      unsigned int v68 = v67 ^ 0x1F;
      unsigned int v66 = (((-1 << (v67 ^ 0x1F)) + v121) >> (v67 ^ 0x1F)) - v67 + 152;
      if (v66 >= 0x8A) {
        unsigned int v66 = 138;
      }
      float v61 = (float)v68;
    }
    float v69 = *(float *)&v124[0][4 * v54 + 4 * v38] - *(float *)&v124[0][4 * v38];
    float v70 = (float)(v62 + v64) + (float)(v61 + flt_24854EBE0[v66]);
    uint64_t v71 = *v41;
    uint64_t v72 = *((unsigned int *)*v41 - 2);
    float v73 = v70 + *(float *)&v128[(2 * v72) & 0x1FFFFFFFCLL];
    if (v73 <= v69)
    {
      *((_DWORD *)v71 - 2) = v72 | 1;
      *((_DWORD *)v71 - 1) = v54 - v33;
      uint64_t v88 = (char *)*v41;
      if ((unint64_t)*v41 >= *v42)
      {
        uint64_t v90 = (v88 - (unsigned char *)*v31) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v92 = *v42 - (void)*v31;
        if (v92 >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v91;
        }
        uint64_t v94 = (char *)sub_2483F04AC(v93);
        unint64_t v96 = &v94[8 * v90];
        *(_DWORD *)unint64_t v96 = 2 * *(_DWORD *)(a4 + 40);
        *((_DWORD *)v96 + 1) = v65;
        uint64_t v97 = (char *)*v41;
        uint64_t v98 = (char *)*v31;
        uint64_t v99 = v96;
        if (*v41 != *v31)
        {
          do
          {
            uint64_t v100 = *((void *)v97 - 1);
            v97 -= 8;
            *((void *)v99 - 1) = v100;
            v99 -= 8;
          }
          while (v97 != v98);
          uint64_t v97 = (char *)*v31;
        }
        *signed int v31 = v99;
        uint64_t v89 = v96 + 8;
        *float v41 = v96 + 8;
        *uint64_t v42 = &v94[8 * v95];
        if (v97) {
          operator delete(v97);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v88 = 2 * *(_DWORD *)(a4 + 40);
        *((_DWORD *)v88 + 1) = v65;
        uint64_t v89 = v88 + 8;
      }
      *float v41 = v89;
      float v9 = v9 + (float)(v69 - v73);
      if (!v39) {
        goto LABEL_77;
      }
    }
    else
    {
      if (v54 >= 2)
      {
        unint64_t v74 = 1;
        do
        {
          unint64_t v75 = v74 + v38;
          unint64_t v76 = *v13;
          if ((unint64_t)v71 >= *v42)
          {
            uint64_t v77 = ((char *)v71 - (unsigned char *)*v31) >> 3;
            if ((unint64_t)(v77 + 1) >> 61) {
              sub_2483E92E8();
            }
            uint64_t v78 = *v42 - (void)*v31;
            uint64_t v79 = v78 >> 2;
            if (v78 >> 2 <= (unint64_t)(v77 + 1)) {
              uint64_t v79 = v77 + 1;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v79;
            }
            if (v80) {
              unint64_t v80 = (unint64_t)sub_2483F04AC(v80);
            }
            else {
              uint64_t v81 = 0;
            }
            uint64_t v82 = (void *)(v80 + 8 * v77);
            *uint64_t v82 = *(void *)(v76 + 8 * v75);
            uint64_t v71 = v82 + 1;
            v83 = (char *)*v41;
            __int16 v84 = (char *)*v31;
            if (*v41 != *v31)
            {
              do
              {
                uint64_t v85 = *((void *)v83 - 1);
                v83 -= 8;
                *--uint64_t v82 = v85;
              }
              while (v83 != v84);
              v83 = (char *)*v31;
            }
            *signed int v31 = v82;
            *float v41 = v71;
            *uint64_t v42 = v80 + 8 * v81;
            if (v83) {
              operator delete(v83);
            }
          }
          else
          {
            *v71++ = *(void *)(v76 + 8 * v75);
          }
          *float v41 = v71;
          ++v74;
          unint64_t v54 = v122;
        }
        while (v74 < v122);
        unint64_t v33 = v117;
      }
      if (!v39)
      {
LABEL_77:
        unint64_t v86 = v54 - 1;
        if (v54 != 1)
        {
          unint64_t v87 = v38 + 1;
          do
          {
            sub_2484489F0(v123, v87++);
            --v86;
          }
          while (v86);
        }
LABEL_98:
        unint64_t v38 = v38 + v54 - 1;
        uint64_t v15 = v13 + 1;
        goto LABEL_99;
      }
    }
    unint64_t v39 = v54 - 2;
    if (v54 != 2)
    {
      unint64_t v101 = v38 + 2;
      do
      {
        sub_2484489F0(v123, v101++);
        --v39;
      }
      while (v39);
    }
    goto LABEL_98;
  }
  float v9 = 0.0;
  double v111 = 0.0;
LABEL_120:
  if (v111 * 0.2 + 16.0 < v9) {
    *(unsigned char *)(a4 + 8) = 1;
  }
  if (v124[0]) {
    operator delete(v124[0]);
  }
  if (v128)
  {
    unsigned int v129 = v128;
    operator delete(v128);
  }
  if (v126)
  {
    unsigned int v127 = v126;
    operator delete(v126);
  }
}

void sub_248448328(_Unwind_Exception *a1)
{
  sub_2484499D4((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t sub_248448380(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = (_DWORD **)(a1 + 8);
  *(void *)a1 = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x7FFF00008000;
  *(_DWORD *)(a1 + 40) = 5;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v12 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  unsigned int v13 = (char **)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  float v62 = (char **)(a1 + 144);
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a4 - 1;
  *(void *)(a1 + 216) = a5;
  *(void *)(a1 + 224) = a6;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v14 = (void *)(a1 + 232);
  uint64_t v15 = (char **)(a1 + 72);
  unsigned int v60 = (char **)(a1 + 120);
  float v61 = (char **)(a1 + 168);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 256;
  sub_2483EB1C4((char **)(a1 + 8), a3);
  if (v8)
  {
    uint64_t v16 = *v11;
    unint64_t v17 = (int *)(a2 + 4);
    do
    {
      int v18 = *v17;
      v17 += 2;
      *v16++ = v18;
      --v8;
    }
    while (v8);
  }
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  int v65 = -1;
  sub_2483F1FEC(v12, v19, &v65);
  unint64_t v20 = *(void *)(a1 + 200);
  int v64 = -1;
  sub_2483F1FEC(v13, v20, &v64);
  sub_2483EB1C4(v15, *(void *)(a1 + 200));
  unint64_t v21 = *(void *)(a1 + 200);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *v15;
    do
    {
      *(_DWORD *)&v23[4 * v22] = v22;
      ++v22;
    }
    while (v21 > v22);
  }
  sub_2483EB1C4(v61, v21);
  unint64_t v24 = *(void *)(a1 + 200) + 1;
  int v63 = -1;
  sub_2483F1FEC(v60, v24, &v63);
  sub_2483EB1C4(v62, *(void *)(a1 + 200));
  unint64_t v25 = *(void *)(a1 + 200);
  if (v25)
  {
    uint64_t v26 = 0;
    unsigned int v27 = *v62;
    do
    {
      *(_DWORD *)&v27[4 * v26] = v26;
      ++v26;
    }
    while (v25 > v26);
  }
  if (a7)
  {
    unsigned int v28 = (void *)(a1 + 248);
    unint64_t v29 = *(void *)(a1 + 240);
    uint64_t v30 = 119;
    while (1)
    {
      uint64_t v31 = v30;
      int v32 = *((char *)&unk_24854EAAC + 2 * v30) + *((char *)&unk_24854EAAC + 2 * v30 + 1) * a7;
      if (v32 <= 1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v29)
      {
        uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          a2 = v33;
          if (v29 <= v33) {
            a2 = v33 % v29;
          }
        }
        else
        {
          a2 = (v29 + 0x7FFFFFFF) & v33;
        }
        uint64_t v35 = *(void ***)(*v14 + 8 * a2);
        if (v35)
        {
          unint64_t v36 = *v35;
          if (*v35)
          {
            do
            {
              unint64_t v37 = v36[1];
              if (v37 == v33)
              {
                if (*((_DWORD *)v36 + 4) == v33) {
                  goto LABEL_87;
                }
              }
              else
              {
                if (v34.u32[0] > 1uLL)
                {
                  if (v37 >= v29) {
                    v37 %= v29;
                  }
                }
                else
                {
                  v37 &= v29 - 1;
                }
                if (v37 != a2) {
                  break;
                }
              }
              unint64_t v36 = (void *)*v36;
            }
            while (v36);
          }
        }
      }
      unint64_t v36 = operator new(0x18uLL);
      *unint64_t v36 = 0;
      v36[1] = v33;
      *((_DWORD *)v36 + 4) = v33;
      *((_DWORD *)v36 + 5) = 0;
      float v38 = (float)(unint64_t)(*(void *)(a1 + 256) + 1);
      float v39 = *(float *)(a1 + 264);
      if (!v29 || (float)(v39 * (float)v29) < v38) {
        break;
      }
LABEL_77:
      float32x2_t v55 = (void *)*v14;
      unint64_t v56 = *(void **)(*v14 + 8 * a2);
      if (v56)
      {
        *unint64_t v36 = *v56;
      }
      else
      {
        *unint64_t v36 = *v28;
        *unsigned int v28 = v36;
        v55[a2] = v28;
        if (!*v36) {
          goto LABEL_86;
        }
        unint64_t v57 = *(void *)(*v36 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v57 >= v29) {
            v57 %= v29;
          }
        }
        else
        {
          v57 &= v29 - 1;
        }
        unint64_t v56 = (void *)(*v14 + 8 * v57);
      }
      *unint64_t v56 = v36;
LABEL_86:
      ++*(void *)(a1 + 256);
LABEL_87:
      *((_DWORD *)v36 + 5) = v31;
      uint64_t v30 = v31 - 1;
      if (!v31)
      {
        *(void *)(a1 + 272) = 120;
        return a1;
      }
    }
    BOOL v40 = (v29 & (v29 - 1)) != 0;
    if (v29 < 3) {
      BOOL v40 = 1;
    }
    unint64_t v41 = v40 | (2 * v29);
    unint64_t v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42) {
      int8x8_t prime = (int8x8_t)v42;
    }
    else {
      int8x8_t prime = (int8x8_t)v41;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v29 = *(void *)(a1 + 240);
    }
    if (*(void *)&prime > v29) {
      goto LABEL_43;
    }
    if (*(void *)&prime < v29)
    {
      unint64_t v50 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
      if (v29 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        unint64_t v50 = std::__next_prime(v50);
      }
      else
      {
        uint64_t v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2) {
          unint64_t v50 = v52;
        }
      }
      if (*(void *)&prime <= v50) {
        int8x8_t prime = (int8x8_t)v50;
      }
      if (*(void *)&prime >= v29)
      {
        unint64_t v29 = *(void *)(a1 + 240);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(void *)&prime >> 61) {
            sub_2483E9338();
          }
          unint64_t v44 = operator new(8 * *(void *)&prime);
          uint64_t v45 = (void *)*v14;
          *uint64_t v14 = v44;
          if (v45) {
            operator delete(v45);
          }
          uint64_t v46 = 0;
          *(int8x8_t *)(a1 + 240) = prime;
          do
            *(void *)(*v14 + 8 * v46++) = 0;
          while (*(void *)&prime != v46);
          uint64_t v47 = (void *)*v28;
          if (*v28)
          {
            unint64_t v48 = v47[1];
            uint8x8_t v49 = (uint8x8_t)vcnt_s8(prime);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              if (v48 >= *(void *)&prime) {
                v48 %= *(void *)&prime;
              }
            }
            else
            {
              v48 &= *(void *)&prime - 1;
            }
            *(void *)(*v14 + 8 * v48) = v28;
            uint64_t v53 = (void *)*v47;
            if (*v47)
            {
              do
              {
                unint64_t v54 = v53[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(void *)&prime) {
                    v54 %= *(void *)&prime;
                  }
                }
                else
                {
                  v54 &= *(void *)&prime - 1;
                }
                if (v54 != v48)
                {
                  if (!*(void *)(*v14 + 8 * v54))
                  {
                    *(void *)(*v14 + 8 * v54) = v47;
                    goto LABEL_68;
                  }
                  *uint64_t v47 = *v53;
                  *uint64_t v53 = **(void **)(*v14 + 8 * v54);
                  **(void **)(*v14 + 8 * v54) = v53;
                  uint64_t v53 = v47;
                }
                unint64_t v54 = v48;
LABEL_68:
                uint64_t v47 = v53;
                uint64_t v53 = (void *)*v53;
                unint64_t v48 = v54;
              }
              while (v53);
            }
          }
          unint64_t v29 = (unint64_t)prime;
          goto LABEL_72;
        }
        uint64_t v58 = (void *)*v14;
        *uint64_t v14 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v29 = 0;
        *(void *)(a1 + 240) = 0;
      }
    }
LABEL_72:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v29 <= v33) {
        a2 = v33 % v29;
      }
      else {
        a2 = v33;
      }
    }
    else
    {
      a2 = (v29 + 0x7FFFFFFF) & v33;
    }
    goto LABEL_77;
  }
  return a1;
}

void sub_248448924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void **a16)
{
  sub_2484496FC(v21);
  uint64_t v23 = *a15;
  if (*a15)
  {
    v16[22] = v23;
    operator delete(v23);
  }
  unint64_t v24 = *a16;
  if (*a16)
  {
    v16[19] = v24;
    operator delete(v24);
  }
  unint64_t v25 = *a14;
  if (*a14)
  {
    v16[16] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v20;
  if (*v20)
  {
    v16[13] = v26;
    operator delete(v26);
  }
  unsigned int v27 = *v19;
  if (*v19)
  {
    v16[10] = v27;
    operator delete(v27);
  }
  unsigned int v28 = *v18;
  if (*v18)
  {
    v16[7] = v28;
    operator delete(v28);
  }
  unint64_t v29 = *v17;
  if (*v17)
  {
    v16[2] = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_2484489F0(unint64_t *result, unint64_t a2)
{
  unint64_t v2 = *result;
  if (a2 + 2 >= *result) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = ((*(_DWORD *)(result[1] + 4 * a2 + 4) << *((_DWORD *)result + 10)) ^ *(_DWORD *)(result[1] + 4 * a2) ^ (*(_DWORD *)(result[1] + 4 * (a2 + 2)) << (2 * *((_DWORD *)result + 10)))) & *((_DWORD *)result + 9);
  }
  unint64_t v4 = result[26];
  int v5 = v4 & a2;
  *(_DWORD *)(result[12] + 4 * (v4 & a2)) = v3;
  uint64_t v6 = v4 & a2;
  uint64_t v7 = v3;
  unint64_t v8 = result[6];
  int v9 = *(_DWORD *)(v8 + 4 * v3);
  if (v9 != -1) {
    *(_DWORD *)(result[9] + 4 * v6) = v9;
  }
  *(_DWORD *)(v8 + 4 * v7) = v5;
  if (a2 && *(_DWORD *)(result[1] + 4 * a2) != *(_DWORD *)(result[1] + 4 * a2 - 4)) {
    *((_DWORD *)result + 48) = 0;
  }
  unint64_t v10 = *((unsigned int *)result + 48);
  unint64_t v11 = result[25];
  unint64_t v12 = v11 + a2;
  if (v11 + a2 >= v2) {
    unint64_t v13 = v2;
  }
  else {
    unint64_t v13 = v11 + a2;
  }
  if (v10)
  {
    if (v4 > v10
      || (!*(_DWORD *)(result[1] + 4 * v13 - 4) ? (BOOL v14 = v12 > v2) : (BOOL v14 = 1),
          LODWORD(v15) = *((_DWORD *)result + 48),
          v14))
    {
      LODWORD(v15) = v10 - 1;
    }
  }
  else if (v13 <= a2)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    LODWORD(v15) = 0;
    unint64_t v16 = a2;
    do
    {
      if (*(_DWORD *)(result[1] + 4 * v16)) {
        break;
      }
      uint64_t v15 = (v15 + 1);
      unint64_t v16 = v15 + a2;
    }
    while (v15 + a2 < v13);
  }
  *((_DWORD *)result + 48) = v15;
  *(_DWORD *)(result[21] + 4 * v6) = v15;
  uint64_t v17 = *((unsigned int *)result + 48);
  unint64_t v18 = result[15];
  int v19 = *(_DWORD *)(v18 + 4 * v17);
  if (v19 != -1)
  {
    *(_DWORD *)(result[18] + 4 * v6) = v19;
    uint64_t v17 = *((unsigned int *)result + 48);
  }
  *(_DWORD *)(v18 + 4 * v17) = v5;
  return result;
}

uint64_t *sub_248448B30(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_248448BE4(void *a1)
{
  sub_2484496FC((uint64_t)(a1 + 29));
  unint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  uint8x8_t v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_248448C80(uint64_t result, int a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4 = __clz(a4 + 1) ^ 0x3F;
  if (((a4 + 1) & a4) != 0) {
    unint64_t v5 = v4 + 1;
  }
  else {
    unint64_t v5 = v4;
  }
  unint64_t v6 = v5 + *a3;
  uint64_t v7 = __clz(result + 1) ^ 0x1F;
  if (((result + 1) & result) != 0) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = result - a2 + 1;
  uint64_t v10 = __clz(v9) ^ 0x1F;
  if ((v9 & (result - a2)) != 0) {
    ++v8;
  }
  unint64_t v11 = v8 + v10 + v6;
  if (a4 != result) {
    unint64_t v6 = v11;
  }
  *a3 = v6;
  return result;
}

void *sub_248448CE0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2484033F4(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    uint64_t v6 = 40 * a2;
    do
    {
      *(_DWORD *)(v4 + 32) = 0;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 40;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_248448D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_248448D6C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  if (a2 >= (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2)
  {
    sub_2483EB1C4((char **)a1, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v4 = *(char **)a1;
  }
  ++*(_DWORD *)&v4[4 * a2];
  ++*(void *)(a1 + 24);
}

uint64_t sub_248448DCC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    sub_2484417E4(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_248448E2C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  uint64_t v3 = *(char **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*(void *)a1] >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 48 * ((48 * v6 - 48) / 0x30) + 48);
      *(void *)(a1 + 8) = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
      return;
    }
    if (a2 > 0x555555555555555) {
      sub_2483E92E8();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 4);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0x555555555555555) {
      sub_2483E9338();
    }
    uint64_t v11 = 3 * v10;
    unint64_t v12 = (char *)operator new(48 * v10);
    unint64_t v13 = &v12[48 * v5];
    BOOL v14 = &v12[16 * v11];
    size_t v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        unint64_t v18 = &v13[v17];
        int v19 = &v3[v17];
        *((_WORD *)v18 - 24) = *(_WORD *)&v3[v17 - 48];
        *((void *)v18 - 3) = 0;
        *(_OWORD *)(v18 - 40) = *(_OWORD *)&v3[v17 - 40];
        *((void *)v18 - 3) = *(void *)&v3[v17 - 24];
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 4) = 0;
        *((void *)v19 - 3) = 0;
        uint64_t v20 = *(void *)&v3[v17 - 16];
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v3[v17 - 8];
        *((void *)v18 - 2) = v20;
        v17 -= 48;
      }
      while (&v3[v17] != v4);
      uint64_t v21 = &v13[v17];
      uint64_t v22 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v3 != v22)
      {
        do
        {
          uint64_t v23 = (void *)*((void *)v3 - 5);
          if (v23)
          {
            *((void *)v3 - 4) = v23;
            operator delete(v23);
          }
          v3 -= 48;
        }
        while (v3 != v22);
        uint64_t v3 = v22;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    unint64_t v24 = &v4[48 * a2];
    while (v3 != v24)
    {
      unint64_t v25 = (void *)*((void *)v3 - 5);
      if (v25)
      {
        *((void *)v3 - 4) = v25;
        operator delete(v25);
      }
      v3 -= 48;
    }
    *(void *)(a1 + 8) = v24;
  }
}

uint64_t *sub_248449068(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      uint64_t v8 = *(void *)(v2 + v5 - 24);
      uint64_t v9 = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 24) = v8;
      *(void *)(v6 - 16) = v9;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  uint64_t *result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t *sub_2484490F4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 40) = 0;
    *(void *)(v4 - 32) = 0;
    v4 -= 40;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    uint64_t v6 = *(void *)(v2 + 24);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    *(void *)(v4 + 24) = v6;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  uint64_t *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_248449174(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 40);
    *(void *)(a1 + 16) = v2 - 40;
    if (v4)
    {
      *(void *)(v2 - 32) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2484491D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  result = sub_2483F2450((void *)v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(v4 + 24) = v6;
  *(void *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_248449240(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_248449248(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    sub_2483E92E8();
  }
  uint64_t v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v7 = 0x666666666666666;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v18 = v6;
  if (v7)
  {
    uint64_t v9 = (char *)sub_248403444(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = &v9[40 * v2];
  v15[0] = v9;
  v15[1] = v10;
  unint64_t v16 = v10;
  uint64_t v17 = &v9[40 * v8];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  sub_2483F2450(v10, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v11 = &v9[40 * v2];
  uint64_t v12 = *(void *)(a2 + 24);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *((void *)v11 + 3) = v12;
  v16 += 40;
  sub_2484490F4(a1, v15);
  uint64_t v13 = a1[1];
  sub_248449174((uint64_t)v15);
  return v13;
}

void sub_248449364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_248449174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248449378(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6 = (char *)*a1;
  long long v5 = (char *)a1[1];
  unint64_t v7 = (v5 - (unsigned char *)*a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[16 * a2];
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 4)
    {
      uint64_t v22 = &v5[16 * (a2 - v7)];
      uint64_t v23 = 16 * a2 - 16 * v7;
      do
      {
        *(_OWORD *)long long v5 = *a3;
        v5 += 16;
        v23 -= 16;
      }
      while (v23);
      a1[1] = v22;
    }
    else
    {
      if (a2 >> 60) {
        sub_2483E92E8();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 3;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)sub_2483F3EB0(v12);
      size_t v15 = &v13[16 * v7];
      unint64_t v16 = &v13[16 * a2];
      uint64_t v17 = 16 * a2 - 16 * v7;
      unint64_t v18 = v15;
      do
      {
        *(_OWORD *)unint64_t v18 = *a3;
        v18 += 16;
        v17 -= 16;
      }
      while (v17);
      int v19 = &v13[16 * v14];
      uint64_t v21 = (char *)*a1;
      uint64_t v20 = (char *)a1[1];
      if (v20 != *a1)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v20 - 1);
          v15 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        uint64_t v20 = (char *)*a1;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void *sub_2484494B4(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
      sub_2483E92E8();
    }
    result = sub_2483F3EB0(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * v12];
    size_t v13 = a3 - v6;
    if (v13) {
      result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v14 = (void **)(result + 1);
  size_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v18 = (void *)*result;
LABEL_20:
    result = memmove(v18, __src, v13);
    goto LABEL_21;
  }
  uint64_t v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    uint64_t v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    unint64_t v18 = v9;
    __src = v17;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v14 = &v9[v13];
  return result;
}

void *sub_2484495E8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_248449650(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24844966C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 5);
        v6 -= 40;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 4) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2484496FC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_248449748(uint64_t *result, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = a2;
  uint64_t v6 = result;
  *a3 = 0;
  *a4 = 1;
  uint64_t v7 = result[26] & a2;
  if (a2 + 2 >= (unint64_t)*result) {
    int v31 = 0;
  }
  else {
    int v31 = ((*(_DWORD *)(result[1] + 4 * a2 + 4) << *((_DWORD *)result + 10)) ^ *(_DWORD *)(result[1] + 4 * a2) ^ (*(_DWORD *)(result[1] + 4 * (a2 + 2)) << (2 * *((_DWORD *)result + 10)))) & *((_DWORD *)result + 9);
  }
  int v8 = 0;
  int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v32 = result[9];
  unsigned int v11 = *(_DWORD *)(v32 + 4 * v7);
  if ((int)*result >= *((_DWORD *)result + 56) + (int)a2) {
    int v12 = *((_DWORD *)result + 56) + a2;
  }
  else {
    int v12 = *result;
  }
  int v30 = v12 + ~a2;
  unint64_t v29 = result + 29;
  while (1)
  {
    uint64_t v13 = v7 - v11;
    if (v7 < v11) {
      v13 += v6[26] + 1;
    }
    if (v8 > (int)v13) {
      return result;
    }
    if ((int)v13 < 1)
    {
      LODWORD(v20) = 0;
    }
    else
    {
      int v14 = v5 - v13;
      unsigned int v15 = *((_DWORD *)v6 + 48);
      LODWORD(v16) = v5;
      if (v15 >= 4)
      {
        signed int v17 = v15 - 1;
        if (*(_DWORD *)(v6[21] + 4 * v11) < v17) {
          signed int v17 = *(_DWORD *)(v6[21] + 4 * v11);
        }
        if (v17 + v5 >= v12) {
          signed int v17 = v30;
        }
        LODWORD(v16) = v17 + v5;
        v14 += v17;
      }
      int v18 = v12 - v16;
      if (v12 > (int)v16)
      {
        uint64_t v16 = (int)v16;
        uint64_t v19 = 4 * v14;
        while (*(_DWORD *)(v6[1] + 4 * v16) == *(_DWORD *)(v6[1] + v19))
        {
          ++v16;
          v19 += 4;
          if (!--v18)
          {
            LODWORD(v16) = v12;
            break;
          }
        }
      }
      unint64_t v20 = (v16 - v5);
      if (v6[27] <= v20 && (int)v20 + 2 >= v10)
      {
        result = sub_248448B30(v29, v13);
        if (result) {
          LODWORD(v22) = *((_DWORD *)result + 5);
        }
        else {
          uint64_t v22 = v6[34] + v13 - 1;
        }
        if (*a4 < v20 || *a4 == v20 && *a3 > (unint64_t)(int)v22)
        {
          *a4 = v20;
          *a3 = (int)v22;
        }
        if (v20 > v10) {
          unsigned int v10 = v20;
        }
      }
    }
    if (++v9 >= *((_DWORD *)v6 + 70)) {
      return result;
    }
    unsigned int v23 = *((_DWORD *)v6 + 48);
    if (v23 < 3 || v20 <= v23)
    {
      uint64_t v26 = *(unsigned int *)(v32 + 4 * v11);
      if (v11 == v26) {
        return result;
      }
      int v27 = *(_DWORD *)(v6[12] + 4 * v26);
      unsigned int v11 = *(_DWORD *)(v32 + 4 * v11);
      int v8 = v13;
      if (v27 != v31) {
        return result;
      }
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(v6[18] + 4 * v11);
      if (v11 == v24) {
        return result;
      }
      int v25 = *(_DWORD *)(v6[21] + 4 * v24);
      unsigned int v11 = *(_DWORD *)(v6[18] + 4 * v11);
      int v8 = v13;
      if (v25 != v23) {
        return result;
      }
    }
  }
}

void *sub_2484499D4(void *a1)
{
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_248449A18(unsigned int **a1, uint64_t a2, void *a3, uint64_t a4, unint64_t *a5)
{
  int v9 = a1;
  if (*(unsigned char *)(a2 + 24))
  {
    unsigned int v10 = *a1;
    unsigned int v11 = a1[1];
    if (*a1 == v11) {
      return 0;
    }
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = *v10;
      unsigned int v14 = v10[1];
      if (v13) {
        unsigned int v15 = (_DWORD *)(a2 + 76);
      }
      else {
        unsigned int v15 = (_DWORD *)(*(void *)(a2 + 32) + 16 * *(unsigned __int8 *)(*a3 + a4 + (v13 >> 1)));
      }
      unsigned int v16 = v15[1];
      if (v16 <= v14)
      {
        unsigned int v19 = __clz(v14) ^ 0x1F;
        unsigned int v20 = v19 - *v15;
        int v22 = v15[2];
        int v21 = v15[3];
        unsigned int v23 = (v20 << (v21 + v22))
            + v16
            + (((-1 << v19) + v14) >> (v19 - v22) << v21)
            + (((-1 << v19) + v14) & ~(-1 << v21));
        unsigned int v17 = v19 - (v21 + v22);
        unsigned int v18 = (v14 >> v21) & ~(-1 << (v19
                                                    - (v21
                                                     + v22)));
        unsigned int v14 = v23;
      }
      else
      {
        unsigned int v17 = 0;
        unsigned int v18 = 0;
      }
      uint64_t v24 = *(void *)(*(void *)a2 + 24 * *(unsigned __int8 *)(*a3 + a4 + (v13 >> 1)))
          + 48 * ((((int)(v13 << 31) >> 31) & *(_DWORD *)(a2 + 68)) + v14);
      uint64_t v25 = *(unsigned __int16 *)(v24 + 42);
      LODWORD(v24) = *(unsigned __int8 *)(v24 + 40);
      *(void *)(a5[3] + (*a5 >> 3)) = ((((unint64_t)v18 << v24) | v25) << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
      *a5 += v17 + v24;
      v12 += v17;
      v10 += 2;
    }
    while (v10 != v11);
    return v12;
  }
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  memset(__p, 0, sizeof(__p));
  uint64_t v26 = (char *)a1[1] - (char *)*a1;
  size_t v27 = v26 >> 3;
  if (v26)
  {
    if (v26 < 0) {
      sub_2483E92E8();
    }
    unint64_t v93 = (char *)sub_2483F04AC(v26 >> 3);
    uint64_t v94 = v93;
    uint64_t v95 = &v93[8 * v28];
    size_t v27 = ((char *)v9[1] - (char *)*v9) >> 3;
  }
  sub_24844A110((unint64_t *)__p, v27);
  uint64_t v91 = 0;
  unint64_t v29 = (char *)v9[1] - (char *)*v9;
  unint64_t v30 = v29 >> 3;
  uint64_t v89 = v9;
  if (*(unsigned char *)(a2 + 64) || a3[1] - *a3 > 1uLL)
  {
    if ((int)v30 >= 1)
    {
      uint64_t v31 = 0;
      uint64_t v12 = 0;
      uint64_t v86 = 0;
      unint64_t v32 = (v29 >> 3) + 1;
      unsigned int v33 = 1245184;
      uint64_t v87 = a4;
      uint64_t v88 = a3;
      do
      {
        uint8x8_t v34 = &(*v9)[2 * (v32 - 2)];
        unint64_t v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(unsigned __int8 *)(*a3 + a4 + (v36 >> 1));
        float v38 = (_DWORD *)(a2 + 76);
        if ((v36 & 1) == 0) {
          float v38 = (_DWORD *)(*(void *)(a2 + 32) + 16 * v37);
        }
        unsigned int v39 = v38[1];
        if (v39 <= v35)
        {
          unsigned int v42 = __clz(v35) ^ 0x1F;
          unsigned int v43 = (-1 << v42) + v35;
          unsigned int v44 = v42 - *v38;
          int v46 = v38[2];
          int v45 = v38[3];
          int v47 = v45 + v46;
          int v48 = (v44 << (v45 + v46)) + v39 + (v43 >> (v42 - v46) << v45);
          int v49 = v43 & ~(-1 << v45);
          unsigned int v50 = v35 >> v45;
          unsigned int v35 = v48 + v49;
          unsigned int v40 = v42 - v47;
          unsigned int v41 = v50 & ~(-1 << (v42 - v47));
        }
        else
        {
          unsigned int v40 = 0;
          unsigned int v41 = 0;
        }
        int v51 = *(_DWORD *)(a2 + 68);
        uint64_t v52 = *(void *)(*(void *)a2 + 24 * v37);
        uint64_t v90 = v40;
        if (v40)
        {
          if (v86 + (unint64_t)v40 >= 0x39)
          {
            sub_2484168F0((uint64_t)&v93, &v91);
            sub_24844A1C8((unint64_t *)__p, v86);
            uint64_t v86 = 0;
            uint64_t v31 = 0;
          }
          uint64_t v31 = (v31 << v90) | v41;
          uint64_t v91 = v31;
          v86 += v90;
        }
        unsigned int v53 = (((int)(v36 << 31) >> 31) & v51) + v35;
        unsigned int v54 = v33 >> 20;
        unsigned int v55 = *(unsigned __int16 *)(v52 + 48 * v53);
        LODWORD(v56) = HIWORD(v33);
        if (v33 >> 20 >= v55) {
          uint64_t v56 = v56;
        }
        else {
          uint64_t v56 = v33;
        }
        uint64_t v57 = v52 + 48 * v53;
        unint64_t v58 = (unint64_t)(*(void *)(v57 + 32) * v56) >> 44;
        int v59 = *(unsigned __int16 *)(*(void *)(v57 + 8) + 2 * (v56 - v58 * v55));
        if (v54 >= v55) {
          uint64_t v60 = (unsigned __int16)v33;
        }
        else {
          uint64_t v60 = 0;
        }
        if (v54 >= v55)
        {
          a3 = v88;
          if ((unint64_t)(v86 - 41) <= 0xFFFFFFFFFFFFFFC6)
          {
            sub_2484168F0((uint64_t)&v93, &v91);
            sub_24844A1C8((unint64_t *)__p, v86);
            uint64_t v86 = 0;
            uint64_t v31 = 0;
            a3 = v88;
          }
          uint64_t v31 = v60 | (v31 << 16);
          uint64_t v91 = v31;
          v86 += 16;
        }
        else
        {
          a3 = v88;
        }
        unsigned int v33 = v59 + (v58 << 12);
        int v9 = v89;
        v12 += v90;
        --v32;
        a4 = v87;
      }
      while (v32 > 1);
      goto LABEL_64;
    }
  }
  else if ((int)v30 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v12 = 0;
    uint64_t v86 = 0;
    unint64_t v61 = (v29 >> 3) + 1;
    unsigned int v33 = 1245184;
    do
    {
      float v62 = *(_DWORD **)(a2 + 32);
      unsigned int v63 = (*v9)[2 * (v61 - 2) + 1];
      unsigned int v64 = v62[1];
      if (v64 <= v63)
      {
        unsigned int v67 = __clz(v63) ^ 0x1F;
        int v68 = v62[2];
        int v69 = v62[3];
        unsigned int v66 = (unsigned __int16 *)(**(void **)a2
                                 + 48
                                 * (((v67 - *v62) << (v69 + v68))
                                  + v64
                                  + (((-1 << v67) + v63) & ~(-1 << v69))
                                  + (((-1 << v67) + v63) >> (v67 - v68) << v69)));
        uint64_t v65 = v67 - (v69 + v68);
        if (v67 == v69 + v68)
        {
          uint64_t v65 = 0;
        }
        else
        {
          if ((unint64_t)(v86 + v65) >= 0x39)
          {
            sub_2484168F0((uint64_t)&v93, &v91);
            sub_24844A1C8((unint64_t *)__p, v86);
            uint64_t v86 = 0;
            uint64_t v31 = 0;
          }
          uint64_t v31 = (v31 << v65) | (v63 >> v69) & ~(-1 << v65);
          uint64_t v91 = v31;
          v86 += v65;
        }
      }
      else
      {
        uint64_t v65 = 0;
        unsigned int v66 = (unsigned __int16 *)(**(void **)a2 + 48 * v63);
      }
      unsigned int v70 = v33 >> 20;
      unsigned int v71 = *v66;
      LODWORD(v72) = HIWORD(v33);
      if (v33 >> 20 >= v71) {
        uint64_t v72 = v72;
      }
      else {
        uint64_t v72 = v33;
      }
      unint64_t v73 = (unint64_t)(*((void *)v66 + 4) * v72) >> 44;
      int v74 = *(unsigned __int16 *)(*((void *)v66 + 1) + 2 * (v72 - v73 * v71));
      if (v70 >= v71) {
        uint64_t v75 = (unsigned __int16)v33;
      }
      else {
        uint64_t v75 = 0;
      }
      if (v70 >= v71)
      {
        if ((unint64_t)(v86 - 41) <= 0xFFFFFFFFFFFFFFC6)
        {
          sub_2484168F0((uint64_t)&v93, &v91);
          sub_24844A1C8((unint64_t *)__p, v86);
          uint64_t v86 = 0;
          uint64_t v31 = 0;
        }
        uint64_t v31 = v75 | (v31 << 16);
        uint64_t v91 = v31;
        v86 += 16;
      }
      int v9 = v89;
      unsigned int v33 = v74 + (v73 << 12);
      v12 += v65;
      --v61;
    }
    while (v61 > 1);
    goto LABEL_64;
  }
  uint64_t v31 = 0;
  uint64_t v86 = 0;
  uint64_t v12 = 0;
  unsigned int v33 = 1245184;
LABEL_64:
  *(void *)(a5[3] + (*a5 >> 3)) = ((unint64_t)v33 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
  unint64_t v76 = *a5;
  unint64_t v77 = *a5 + 32;
  *a5 = v77;
  *(void *)(a5[3] + (v77 >> 3)) = (v31 << (v76 & 7)) | *(unsigned __int8 *)(a5[3] + (v77 >> 3));
  unint64_t v78 = *a5 + v86;
  *a5 = v78;
  uint64_t v79 = v93;
  uint64_t v80 = ((unint64_t)(v94 - v93) >> 3);
  uint64_t v81 = (char *)__p[0];
  while ((int)v80 > 0)
  {
    uint64_t v82 = &v81[v80];
    v83 = &v79[8 * v80--];
    uint64_t v84 = *(v82 - 1);
    *(void *)(a5[3] + (v78 >> 3)) = (*((void *)v83 - 1) << (v78 & 7)) | *(unsigned __int8 *)(a5[3] + (v78 >> 3));
    unint64_t v78 = *a5 + v84;
    *a5 = v78;
  }
  if (v81) {
    operator delete(v81);
  }
  if (v79) {
    operator delete(v79);
  }
  return v12;
}

void sub_24844A0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_24844A110(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_2483E92E8();
    }
    int v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    int v8 = v7;
    if (v5 != (char *)v2)
    {
      int v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void sub_24844A1C8(unint64_t *a1, char a2)
{
  int v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    int v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      sub_2483E92E8();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    uint64_t v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unsigned int v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      int v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void sub_24844A2B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  sub_248419548((uint64_t)v15, a5, 46 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) + 0x20000);
  uint64_t v14 = sub_248449A18((unsigned int **)a1, a2, a3, a4, a5);
  sub_2484195C0((uint64_t)v15, a5, a6, a7);
  if (a7) {
    *(void *)(a7 + 40 * a6 + 8) += v14;
  }
}

uint64_t sub_24844A37C(uint64_t result, uint64_t a2, unsigned char *a3, unsigned char *a4, char a5)
{
  *(void *)result = 0x400000002;
  *(_DWORD *)(result + 12) = 2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = -1;
  *(_WORD *)(result + 48) = 256;
  *(_WORD *)(result + 51) = 0;
  *(unsigned char *)(result + 50) = a5;
  int v5 = *(_DWORD *)(a2 + 48);
  if (v5 < 3)
  {
    if (v5 == 2) {
      int v9 = 2;
    }
    else {
      int v9 = 3;
    }
    *(_DWORD *)(result + 8) = v9;
  }
  else
  {
    *(_DWORD *)result = 1;
    int v6 = *(unsigned __int8 *)(a2 + 68);
    if (v5 > 6) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    if (*(unsigned char *)(a2 + 68)) {
      BOOL v8 = *(void *)(a2 + 56) >= 3uLL;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      int v7 = 0;
    }
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v5 < 9;
    if (a3 != a4 && *a3 || v5 <= 5 && v6) {
      *(_DWORD *)(result + 4) = 2;
    }
    else {
      *(_DWORD *)(result + 4) = 0;
    }
  }
  unint64_t v10 = *(void *)(a2 + 56);
  if (v10)
  {
    *(void *)(result + 40) = 12;
    if (*(_DWORD *)(a2 + 352))
    {
      if (v5 >= 2) {
        int v11 = 2;
      }
      else {
        int v11 = 3;
      }
      if (v5 > 5) {
        int v12 = 1;
      }
      else {
        int v12 = v11;
      }
      *(_DWORD *)(result + 8) = v12;
      if (v10 >= 2)
      {
        *(_DWORD *)(result + 4) = 1;
        *(unsigned char *)(result + 48) = 1;
      }
    }
  }
  return result;
}

float sub_24844A478()
{
  return sub_248438CC0(0.5);
}

float sub_24844A498()
{
  return sub_248438CC0(1.5);
}

uint64_t sub_24844A4B8(uint64_t a1, uint64_t a2, long long *a3, float *a4)
{
  if (!*(void *)(a1 + 88)) {
    return 1;
  }
  int v8 = *(_DWORD *)(a2 + 96);
  if (!v8)
  {
    int v9 = *(int **)(a2 + 416);
    if (v9 == *(int **)(a2 + 424)) {
      int v8 = 0;
    }
    else {
      int v8 = *v9;
    }
  }
  if (*(void *)(a1 + 96) != v8) {
    return 1;
  }
  int v10 = *(_DWORD *)(a2 + 100);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 416);
    if (v11 == *(void *)(a2 + 424)) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(v11 + 4);
    }
  }
  if (*(void *)(a1 + 104) != v10) {
    return 1;
  }
  uint64_t v66 = 0;
  sub_24844ABF8((uint64_t)v62, *(void *)(a2 + 88));
  sub_2483F7584((uint64_t)v56, (uint64_t)v62);
  int v12 = sub_2483F0AE8(*(_DWORD *)(a2 + 272) == 1);
  if (!sub_248472B40(a2, (uint64_t)v12, (_OWORD *)(a1 + 24), (uint64_t)v56, &v66))
  {
    sub_2483EA250((uint64_t)&v51, *(void *)(a1 + 96), *(void *)(a1 + 104));
    uint64_t v13 = v55;
    if (v55) {
      goto LABEL_54;
    }
    long long v47 = v51;
    char v15 = (float *)v53;
    unsigned int v53 = 0;
    uint64_t v48 = v52;
    int v49 = v15;
    uint64_t v50 = v54;
    uint64_t v16 = *(void *)(a1 + 88);
    unint64_t v17 = *(void *)(v16 + 8);
    if (v17 < 8 || (unint64_t v18 = *(void *)(v16 + 16), v18 <= 7))
    {
      if (v47)
      {
        uint64_t v19 = DWORD1(v47);
        if (DWORD1(v47))
        {
          do
          {
            bzero(v15, 4 * v47);
            char v15 = (float *)((char *)v15 + v48);
            --v19;
          }
          while (v19);
        }
      }
LABEL_22:
      if (a4)
      {
        if (DWORD1(v47))
        {
          uint64_t v20 = 0;
          int v21 = v49;
          float v22 = 0.0;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = v47;
            if (v47)
            {
              do
              {
                float v25 = *v23++;
                float v26 = v25;
                if (v22 < v25) {
                  float v22 = v26;
                }
                --v24;
              }
              while (v24);
            }
            ++v20;
            int v21 = (float *)((char *)v21 + v48);
          }
          while (v20 != DWORD1(v47));
        }
        else
        {
          float v22 = 0.0;
        }
        *a4 = v22;
      }
      char v15 = v49;
      uint64_t v13 = 0;
      if (a3)
      {
        long long v34 = *a3;
        *a3 = v47;
        long long v47 = v34;
        uint64_t v35 = v48;
        unint64_t v36 = (char *)*((void *)a3 + 3);
        uint64_t v48 = *((void *)a3 + 2);
        *((void *)a3 + 2) = v35;
        *((void *)a3 + 3) = v15;
        char v15 = (float *)v36;
      }
      goto LABEL_49;
    }
    uint64_t v27 = v66;
    sub_2483F0C3C((uint64_t)v77, v17, v18);
    uint64_t v13 = v78;
    if (!v78)
    {
      uint64_t v28 = (unsigned int *)(v27 + 96);
      sub_2483F0E78((uint64_t)v76, (uint64_t)v77);
      atomic_exchange((atomic_uchar *volatile)(v16 + 560), 1u);
      uint64_t v13 = sub_2484375D0(v28, v16 + 24, v16 + 440, v16 + 568, v76);
      if (!v13)
      {
        atomic_store(0, (unsigned __int8 *)(v16 + 560));
        uint64_t v13 = sub_248438224(v16, v76, (unsigned int *)&v47);
        if (!v13)
        {
          uint64_t v29 = *(void *)(v16 + 608);
          if (!v29) {
            goto LABEL_37;
          }
          unint64_t v30 = *(void *)(v29 + 8);
          if (v30 < 8) {
            goto LABEL_37;
          }
          unint64_t v31 = *(void *)(v29 + 16);
          if (v31 < 8) {
            goto LABEL_37;
          }
          sub_2483F0C3C((uint64_t)v74, v30, v31);
          uint64_t v13 = v75;
          if (!v75)
          {
            sub_2483F0E78((uint64_t)v73, (uint64_t)v74);
            sub_248437FC8((uint64_t)v71, v28);
            uint64_t v13 = v72;
            int v40 = 1;
            if (!v72)
            {
              sub_2483F0E78((uint64_t)v70, (uint64_t)v71);
              uint64_t v41 = *(void *)(v16 + 608);
              atomic_exchange((atomic_uchar *volatile)(v41 + 560), 1u);
              uint64_t v13 = sub_2484375D0(v70, v16 + 24, v41 + 440, *(void *)(v16 + 608) + 568, v73);
              if (!v13)
              {
                atomic_store(0, (unsigned __int8 *)(*(void *)(v16 + 608) + 560));
                uint64_t v69 = 0;
                long long v67 = 0u;
                long long v68 = 0u;
                uint64_t v13 = sub_248438224(*(void *)(v16 + 608), v73, (unsigned int *)&v67);
                uint64_t v42 = *((void *)&v68 + 1);
                if (!v13)
                {
                  sub_248438B44(v68, *((uint64_t *)&v68 + 1), (unsigned int *)&v47);
                  int v40 = 0;
                }
                *((void *)&v68 + 1) = 0;
                if (v42)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v42 - 24));
                  free(*(void **)(v42 - 32));
                }
              }
              for (uint64_t i = 26; i != -4; i -= 10)
                sub_2483E8DDC((uint64_t *)&v70[i]);
              if (!v72)
              {
                for (uint64_t j = 104; j != -16; j -= 40)
                  sub_2483E8DDC((uint64_t *)&v71[j]);
              }
            }
            for (uint64_t k = 26; k != -4; k -= 10)
              sub_2483E8DDC((uint64_t *)&v73[k]);
            if (!v75)
            {
              for (uint64_t m = 104; m != -16; m -= 40)
                sub_2483E8DDC((uint64_t *)&v74[m]);
            }
            if (!v40) {
LABEL_37:
            }
              uint64_t v13 = 0;
          }
        }
      }
      for (uint64_t n = 26; n != -4; n -= 10)
        sub_2483E8DDC((uint64_t *)&v76[n]);
      if (!v78)
      {
        for (iuint64_t i = 13; ii != -2; ii -= 5)
          sub_2483E8DDC((uint64_t *)&v77[ii]);
      }
      if (!v13) {
        goto LABEL_22;
      }
      char v15 = v49;
    }
LABEL_49:
    int v49 = 0;
    if (v15)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v15 - 3));
      free(*((void **)v15 - 4));
    }
    if (!v55)
    {
      uint64_t v37 = v53;
      unsigned int v53 = 0;
      if (v37)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)v37 - 3));
        free(*((void **)v37 - 4));
      }
    }
    goto LABEL_54;
  }
  uint64_t v13 = 1;
LABEL_54:
  v77[0] = (void **)&v61;
  sub_2483F77FC(v77);
  unint64_t v58 = &unk_26FC65EC8;
  if (__p)
  {
    uint64_t v60 = __p;
    operator delete(__p);
  }
  for (juint64_t j = 25; jj != 10; jj -= 5)
    sub_2483E8DDC((uint64_t *)&v56[jj]);
  if (v57 < 0) {
    operator delete(v56[8]);
  }
  unsigned int v39 = v56[0];
  v56[0] = 0;
  if (v39) {
    (*((void (**)(void **))*v39 + 1))(v39);
  }
  v62[0] = &unk_26FC65EF0;
  v56[0] = (void **)&v65;
  sub_248410954(v56);
  v62[6] = &unk_26FC65EC8;
  if (v63)
  {
    unsigned int v64 = v63;
    operator delete(v63);
  }
  return v13;
}

void sub_24844AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, ...)
{
  va_start(va, a13);
  unint64_t v15 = STACK[0x3E8];
  STACK[0x3E8] = 0;
  if (v15)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v15 - 24));
    free(*(void **)(v15 - 32));
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x3F8] + i));
  if (!LODWORD(STACK[0x4E8]))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x470] + j));
  }
  for (uint64_t k = 104; k != -16; k -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x4F0] + k));
  if (!LODWORD(STACK[0x5E0]))
  {
    for (uint64_t m = 104; m != -16; m -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x568] + m));
  }
  for (uint64_t n = 104; n != -16; n -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x5E8] + n));
  if (!*(_DWORD *)(v13 - 72))
  {
    for (iuint64_t i = 104; ii != -16; ii -= 40)
      sub_2483E8DDC((uint64_t *)(v13 - 192 + ii));
  }
  if (a5)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a5 - 24));
    free(*(void **)(a5 - 32));
  }
  if (!a13)
  {
    if (a11)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a11 - 24));
      free(*(void **)(a11 - 32));
    }
  }
  sub_2484172B0((uint64_t *)va);
  sub_24841198C((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_24844ABF8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FC65EF0;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = &unk_26FC668F8;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = &unk_26FC65EC8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 69);
  *(void *)(a1 + 80) = 0;
  uint64_t v7 = a1 + 80;
  *(void *)(a1 + 69) = v6;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_2483F01FC((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), *(void *)(a2 + 88) - *(void *)(a2 + 80));
  long long v8 = *(_OWORD *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(v7 + 72) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(v7 + 56) = v10;
  *(_OWORD *)(v7 + 40) = v9;
  *(_OWORD *)(v7 + 24) = v8;
  *(void *)(v7 + 80) = &unk_26FC66920;
  *(void *)(v7 + 88) = *(void *)(a2 + 168);
  *(void *)(v7 + 96) = &unk_26FC66170;
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 184);
  *(void *)(v7 + 120) = &unk_26FC66920;
  *(void *)(v7 + 128) = *(void *)(a2 + 208);
  *(void *)(v7 + 136) = &unk_26FC66920;
  *(void *)(v7 + 144) = *(void *)(a2 + 224);
  *(void *)(v7 + 152) = &unk_26FC66920;
  *(void *)(v7 + 160) = *(void *)(a2 + 240);
  int v11 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(v7 + 171) = *(_DWORD *)(a2 + 251);
  *(_DWORD *)(v7 + 168) = v11;
  *(void *)(v7 + 176) = &unk_26FC65938;
  uint64_t v12 = *(void *)(a2 + 280);
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(a2 + 264);
  *(void *)(v7 + 200) = v12;
  *(void *)(v7 + 208) = &unk_26FC659B0;
  long long v13 = *(_OWORD *)(a2 + 296);
  *(_DWORD *)(v7 + 232) = *(_DWORD *)(a2 + 312);
  *(_OWORD *)(v7 + 216) = v13;
  *(_DWORD *)(v7 + 240) = *(_DWORD *)(a2 + 320);
  *(void *)(v7 + 256) = 0;
  *(void *)(v7 + 264) = 0;
  *(void *)(v7 + 248) = 0;
  uint64_t v14 = *(void *)(a2 + 328);
  uint64_t v15 = *(void *)(a2 + 336);
  if (v15 != v14)
  {
    sub_248410E48((void *)(v7 + 248), 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 5));
    *(void *)(a1 + 336) = sub_248410CFC(v14, v15, *(void *)(a1 + 336));
  }
  *(void *)(a1 + 352) = &unk_26FC65F18;
  uint64_t v16 = *(void *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + 376) = v16;
  *(void *)(a1 + 384) = &unk_26FC66040;
  uint64_t v17 = *(void *)(a2 + 392);
  *(void *)(a1 + 397) = *(void *)(a2 + 397);
  *(void *)(a1 + 392) = v17;
  uint64_t v18 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v18;
  return a1;
}

void sub_24844AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 336) = v12;
  sub_248410954(&a9);
  void *v13 = v10;
  uint64_t v15 = *v11;
  if (*v11)
  {
    *(void *)(v9 + 88) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24844AF44(uint64_t a1, uint64_t a2)
{
  sub_24844ABF8((uint64_t)v15, *(void *)(a2 + 88));
  sub_2483F7584((uint64_t)v9, (uint64_t)v15);
  uint64_t v4 = sub_2483F0AE8(*(_DWORD *)(a2 + 272) == 1);
  uint64_t v19 = 0;
  if (!sub_248472B40(a2, (uint64_t)v4, (_OWORD *)(a1 + 24), (uint64_t)v9, &v19)) {
    sub_248437BC4();
  }
  long long v8 = (void **)&v14;
  sub_2483F77FC(&v8);
  int v11 = &unk_26FC65EC8;
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC((uint64_t *)&v9[i]);
  if (v10 < 0) {
    operator delete(v9[8]);
  }
  uint64_t v6 = v9[0];
  v9[0] = 0;
  if (v6) {
    (*((void (**)(void **))*v6 + 1))(v6);
  }
  v15[0] = &unk_26FC65EF0;
  v9[0] = (void **)&v18;
  sub_248410954(v9);
  v15[6] = &unk_26FC65EC8;
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  return 1;
}

void sub_24844B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_2484172B0(&a11);
  sub_24841198C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_24844B190(void *a1)
{
  *a1 = &unk_26FC66208;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_24844B220(void *a1)
{
  *a1 = &unk_26FC66208;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_24844B290(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v98 = a6;
  uint64_t v97 = a7;
  *(float *)(a6 + 5264) = powf(1.25, (float)*(unsigned int *)(a1 + 68) + -2.0);
  *(float *)(a6 + 5268) = powf(1.25, (float)*(unsigned int *)(a1 + 72) + -2.0);
  uint64_t v9 = *(void *)(a6 + 4232);
  uint64_t v10 = *(void *)(a6 + 4224);
  unint64_t v11 = (v9 - v10) >> 3;
  unint64_t v12 = *(unsigned int *)(a1 + 112);
  if (v11 < v12)
  {
    if (v12 > (*(void *)(a6 + 4240) - v10) >> 3)
    {
      uint64_t v102 = (unsigned char *)(a6 + 4240);
      *(void *)&long long v99 = sub_2483F04AC(v12);
      *((void *)&v99 + 1) = v99 + 8 * v11;
      uint64_t v100 = (uint64_t *)*((void *)&v99 + 1);
      unint64_t v101 = (unsigned char *)(v99 + 8 * v13);
      sub_24844C178((void *)(a6 + 4224), &v99);
      sub_24844C1D4((uint64_t)&v99);
      uint64_t v9 = *(void *)(a6 + 4232);
      unint64_t v12 = *(unsigned int *)(a1 + 112);
      unint64_t v11 = (v9 - *(void *)(a6 + 4224)) >> 3;
    }
    if (v11 < v12) {
      sub_248401C9C();
    }
  }
  uint64_t v14 = a6;
  if (v11 > v12)
  {
    uint64_t v15 = (void *)(a6 + 4232);
    do
    {
      uint64_t v18 = *(void *)(v9 - 8);
      uint64_t v17 = (void *)(v9 - 8);
      uint64_t v16 = v18;
      *uint64_t v17 = 0;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        unint64_t v12 = *(unsigned int *)(a1 + 112);
      }
      *uint64_t v15 = v17;
      uint64_t v14 = v98;
      uint64_t v15 = (void *)(v98 + 4232);
      uint64_t v9 = *(void *)(v98 + 4232);
    }
    while (v12 < (v9 - *(void *)(v98 + 4224)) >> 3);
  }
  if (*(unsigned char *)(v14 + 4209))
  {
    float v19 = (float)*(int *)(a6 + 984);
    int v20 = llroundf(*(float *)(v14 + 4940) * v19);
    float v21 = (float)v20 / v19;
    *(_DWORD *)(a6 + 984) = v20;
    sub_248430380(a6 + 952);
    for (uint64_t i = 0; i != 12; i += 4)
      *(float *)((char *)&v99 + i) = (float)(1.0 / v21) * *(float *)(a6 + 268 + i);
    sub_248486AA4(a6 + 208, (uint64_t)&v99);
    sub_248430380(a6 + 952);
  }
  sub_2483F0C3C((uint64_t)v95, *(void *)(a6 + 72), *(void *)(a6 + 80));
  uint64_t v23 = v96;
  if (!v96)
  {
    sub_2483F0E78((uint64_t)v94, (uint64_t)v95);
    uint64_t v24 = *(unsigned int *)(a6 + 120);
    *(void *)&long long v99 = &v98;
    *((void *)&v99 + 1) = a2;
    uint64_t v100 = a3;
    unint64_t v101 = v94;
    if (a5)
    {
      BOOL v25 = sub_24844C250(a5, v24, (uint64_t **)&v99);
    }
    else
    {
      uint64_t v82 = 0;
      v83 = &v82;
      BOOL v25 = sub_24844C250((uint64_t)&v82, v24, (uint64_t **)&v99);
    }
    uint64_t v23 = v25;
    if (!v25)
    {
      if ((*(unsigned char *)(a1 + 24) & 0x20) != 0)
      {
        sub_24844C318((uint64_t)&v82, v98 + 4544);
        int v89 = 0;
        uint64_t v93 = 0x100000001;
        char v92 = 1;
        BOOL v31 = v91 == 1;
        int v90 = 0;
        --v91;
        if (v31)
        {
          char v88 = 1;
          int v34 = v87;
          if (v87 <= 2) {
            int v34 = 2;
          }
          int v87 = v34 - 1;
          float v32 = 0.02;
        }
        else
        {
          char v84 = 1;
          uint64_t v85 = *(void *)(a6 + 952);
          int v86 = *(_DWORD *)(a6 + 960);
          float v32 = 0.1;
        }
        LODWORD(v82) = fmaxf(*(float *)(v98 + 4544) * v32, 0.001);
        sub_2483F7584((uint64_t)v72, *(void *)a6);
        uint64_t v35 = sub_2483F0AE8(*(_DWORD *)(*(void *)a6 + 104) == 1);
        sub_24841F728((uint64_t)v72, (uint64_t)v94, (uint64_t)v35);
        uint64_t v36 = *(void *)(v74 + 328);
        uint64_t v37 = *(void *)(v74 + 336);
        if (v36 != v37)
        {
          int64x2_t v70 = 0uLL;
          unint64_t v71 = 0;
          sub_24844C760(v70.i64, 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 5));
          if (*(void *)(v74 + 336) != *(void *)(v74 + 328))
          {
            uint64_t v38 = 0;
            while (1)
            {
              unsigned int v39 = v75;
              if (!v75)
              {
                if (v80.i64[0] == v80.i64[1]) {
                  unsigned int v39 = 0;
                }
                else {
                  unsigned int v39 = *(_DWORD *)v80.i64[0];
                }
              }
              unsigned int v40 = v76;
              if (!v76)
              {
                if (v80.i64[0] == v80.i64[1]) {
                  unsigned int v40 = 0;
                }
                else {
                  unsigned int v40 = *(_DWORD *)(v80.i64[0] + 4);
                }
              }
              sub_2483EA250((uint64_t)&v99, v39, v40);
              uint64_t v23 = v103;
              if (v103) {
                break;
              }
              uint64_t v41 = v101;
              uint64_t v42 = v102;
              unint64_t v101 = 0;
              unsigned int v43 = (void *)v70.i64[1];
              if (v70.i64[1] >= v71)
              {
                unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v70.i64[1] - v70.i64[0]) >> 3);
                unint64_t v46 = v45 + 1;
                if (v45 + 1 > 0x666666666666666) {
                  sub_2483E92E8();
                }
                if (0x999999999999999ALL * ((uint64_t)(v71 - v70.i64[0]) >> 3) > v46) {
                  unint64_t v46 = 0x999999999999999ALL * ((uint64_t)(v71 - v70.i64[0]) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - v70.i64[0]) >> 3) >= 0x333333333333333) {
                  unint64_t v47 = 0x666666666666666;
                }
                else {
                  unint64_t v47 = v46;
                }
                uint64_t v69 = &v71;
                if (v47) {
                  unint64_t v47 = (unint64_t)sub_248403444(v47);
                }
                else {
                  uint64_t v48 = 0;
                }
                unint64_t v49 = v47 + 40 * v45;
                unint64_t v66 = v47;
                v67.i64[0] = v49;
                unint64_t v68 = v47 + 40 * v48;
                *(void *)(v49 + 16) = v100;
                *(_OWORD *)unint64_t v49 = v99;
                *(void *)(v49 + 24) = v41;
                *(void *)(v49 + 32) = v42;
                unsigned int v44 = (void *)(v49 + 40);
                v67.i64[1] = v49 + 40;
                uint64_t v50 = v70.i64[1];
                uint64_t v51 = v70.i64[0];
                uint64_t v52 = v67.i64[0];
                if (v70.i64[1] == v70.i64[0])
                {
                  int64x2_t v55 = vdupq_n_s64(v70.u64[1]);
                }
                else
                {
                  do
                  {
                    long long v53 = *(_OWORD *)(v50 - 40);
                    *(void *)(v52 - 24) = *(void *)(v50 - 24);
                    *(_OWORD *)(v52 - 40) = v53;
                    uint64_t v54 = *(void *)(v50 - 16);
                    *(void *)(v50 - 16) = 0;
                    *(void *)(v52 - 16) = v54;
                    *(void *)(v52 - 8) = *(void *)(v50 - 8);
                    v52 -= 40;
                    v50 -= 40;
                  }
                  while (v50 != v51);
                  int64x2_t v55 = v70;
                  unsigned int v44 = (void *)v67.i64[1];
                }
                v70.i64[0] = v52;
                v70.i64[1] = (uint64_t)v44;
                int64x2_t v67 = v55;
                unint64_t v56 = v71;
                unint64_t v71 = v68;
                unint64_t v68 = v56;
                unint64_t v66 = v55.i64[0];
                sub_24841F7CC((uint64_t)&v66);
              }
              else
              {
                *(_OWORD *)v70.i64[1] = v99;
                v43[2] = v100;
                v43[3] = v41;
                v43[4] = v42;
                unsigned int v44 = v43 + 5;
              }
              v70.i64[1] = (uint64_t)v44;
              if (*((_DWORD *)v44 - 10) && *((_DWORD *)v44 - 9))
              {
                unint64_t v57 = 0;
                do
                  bzero((void *)(*(v44 - 2) + *(v44 - 3) * v57++), 4 * *((unsigned int *)v44 - 10));
                while (v57 < *((unsigned int *)v44 - 9));
              }
              if (++v38 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v74 + 336) - *(void *)(v74 + 328)) >> 5)) {
                goto LABEL_73;
              }
            }
            *(void *)&long long v99 = &v70;
            sub_2483F77FC((void ***)&v99);
            *(void *)&long long v99 = &v80;
            sub_2483F77FC((void ***)&v99);
            unint64_t v77 = &unk_26FC65EC8;
            if (v78)
            {
              uint64_t v79 = v78;
              operator delete(v78);
            }
            for (uint64_t j = 25; j != 10; j -= 5)
              sub_2483E8DDC(&v72[j]);
            if (v73 < 0) {
              operator delete((void *)v72[8]);
            }
            uint64_t v59 = v72[0];
            v72[0] = 0;
            if (v59) {
              (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
            }
            sub_2484414D4((uint64_t)&v82);
            goto LABEL_20;
          }
LABEL_73:
          sub_2483F79DC((void **)&v80);
          int64x2_t v80 = v70;
          unint64_t v81 = v71;
          unint64_t v71 = 0;
          int64x2_t v70 = 0uLL;
          *(void *)&long long v99 = &v70;
          sub_2483F77FC((void ***)&v99);
        }
        operator new();
      }
      LOBYTE(v72[0]) = 0;
      *(void *)&long long v99 = v72;
      *((void *)&v99 + 1) = &v98;
      uint64_t v100 = &v97;
      unint64_t v101 = (unsigned char *)a1;
      uint64_t v102 = v94;
      uint64_t v29 = *(unsigned int *)(a6 + 128);
      if (a5)
      {
        BOOL v30 = sub_24844C850(a5, v29, (uint64_t)&v99);
      }
      else
      {
        uint64_t v82 = 0;
        v83 = &v82;
        BOOL v30 = sub_24844C850((uint64_t)&v82, v29, (uint64_t)&v99);
      }
      uint64_t v23 = v30;
      if (!v30)
      {
        unsigned __int8 v33 = atomic_load((unsigned __int8 *)v72);
        if (v33)
        {
          uint64_t v23 = 1;
        }
        else if ((*(unsigned char *)(a1 + 24) & 0x80) != 0 {
               || (uint64_t v23 = sub_2483F1814(a6 + 952, (unsigned int *)(a6 + 1632), a5), !v23))
        }
        {
          LOBYTE(v72[0]) = 0;
          *(void *)&long long v99 = &v98;
          *((void *)&v99 + 1) = &v97;
          uint64_t v100 = v72;
          uint64_t v60 = *(unsigned int *)(a6 + 128);
          if (a5)
          {
            BOOL v61 = sub_24844C900(a5, v60, (uint64_t)&v99);
          }
          else
          {
            uint64_t v82 = 0;
            v83 = &v82;
            BOOL v61 = sub_24844C900((uint64_t)&v82, v60, (uint64_t)&v99);
          }
          uint64_t v23 = v61;
          if (!v61)
          {
            unsigned __int8 v62 = atomic_load((unsigned __int8 *)v72);
            uint64_t v23 = v62 & 1;
          }
        }
      }
    }
LABEL_20:
    for (uint64_t k = 104; k != -16; k -= 40)
      sub_2483E8DDC((uint64_t *)&v94[k]);
    if (!v96)
    {
      for (uint64_t m = 104; m != -16; m -= 40)
        sub_2483E8DDC((uint64_t *)&v95[m]);
    }
  }
  return v23;
}

void sub_24844C018(_Unwind_Exception *a1)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x7C0] + i));
  if (!LODWORD(STACK[0x8B0]))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x838] + j));
  }
  _Unwind_Resume(a1);
}

void *sub_24844C178(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24844C1D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_24844C250(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!a2) {
    return 0;
  }
  v7[0] = sub_2483F1794;
  v7[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_24844CE54, sub_24844CE38, 0, a2) != 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a2;
  do
    sub_24846B1E8(v5++, **a3, a3[1], *a3[2], a3[2][1], a3[3]);
  while (v6 != v5);
  return 0;
}

uint64_t sub_24844C318(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2483EF70C((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v10 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  long long v12 = *(_OWORD *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_24844CB80((void *)(a1 + 224), *(const void **)(a2 + 224), *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 2);
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0;
  sub_24840331C((void *)(a1 + 304), *(const void **)(a2 + 304), *(void *)(a2 + 312), (uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3);
  uint64_t v16 = *(void *)(a2 + 328);
  *(void *)(a1 + 333) = *(void *)(a2 + 333);
  *(void *)(a1 + 328) = v16;
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  long long v17 = *(_OWORD *)(a2 + 352);
  long long v18 = *(_OWORD *)(a2 + 368);
  long long v19 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
  *(_OWORD *)(a1 + 368) = v18;
  *(_OWORD *)(a1 + 384) = v19;
  *(_OWORD *)(a1 + 352) = v17;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = 0;
  sub_2483EF70C((void *)(a1 + 416), *(const void **)(a2 + 416), *(void *)(a2 + 424), (uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 2);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  sub_2483EF70C((void *)(a1 + 440), *(const void **)(a2 + 440), *(void *)(a2 + 448), (uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 2);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  float v21 = *(unsigned char **)(a2 + 464);
  int v20 = *(unsigned char **)(a2 + 472);
  uint64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    sub_2484033F4((void *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3));
    uint64_t v23 = *(char **)(a1 + 472);
    memmove(v23, v21, v22 - 4);
    *(void *)(a1 + 472) = &v23[8 * (v22 >> 3)];
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  uint64_t v24 = *(long long ***)(a2 + 496);
  BOOL v25 = *(long long ***)(a2 + 504);
  if (v25 != v24)
  {
    sub_24844CC3C((void *)(a1 + 496), 0xF0B7672A07A44C6BLL * (v25 - v24));
    *(void *)(a1 + 504) = sub_24844CC90(a1 + 512, v24, v25, *(void **)(a1 + 504));
  }
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  sub_248432A14((void *)(a1 + 520), *(const void **)(a2 + 520), *(void *)(a2 + 528), (uint64_t)(*(void *)(a2 + 528) - *(void *)(a2 + 520)) >> 3);
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  float v26 = *(unsigned char **)(a2 + 544);
  uint64_t v27 = *(unsigned char **)(a2 + 552);
  int64_t v28 = v27 - v26;
  if (v27 != v26)
  {
    sub_24844CBFC((void *)(a1 + 544), v28 >> 5);
    uint64_t v29 = *(char **)(a1 + 552);
    memmove(v29, v26, v28);
    *(void *)(a1 + 552) = &v29[32 * (v28 >> 5)];
  }
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  sub_24840331C((void *)(a1 + 568), *(const void **)(a2 + 568), *(void *)(a2 + 576), (uint64_t)(*(void *)(a2 + 576) - *(void *)(a2 + 568)) >> 3);
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  sub_24840331C((void *)(a1 + 592), *(const void **)(a2 + 592), *(void *)(a2 + 600), (uint64_t)(*(void *)(a2 + 600) - *(void *)(a2 + 592)) >> 3);
  long long v30 = *(_OWORD *)(a2 + 616);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = v30;
  return a1;
}

void sub_24844C658(_Unwind_Exception *a1, void **a2, void **a3, void **a4, void **a5, ...)
{
  va_start(va, a5);
  long long v10 = *v8;
  if (*v8)
  {
    v5[69] = v10;
    operator delete(v10);
  }
  long long v11 = *v7;
  if (*v7)
  {
    v5[66] = v11;
    operator delete(v11);
  }
  sub_24841149C((void ***)va);
  long long v12 = *a2;
  if (*a2)
  {
    v5[59] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *a3;
  if (*a3)
  {
    v5[56] = v13;
    operator delete(v13);
  }
  long long v14 = *a4;
  if (*a4)
  {
    v5[53] = v14;
    operator delete(v14);
  }
  sub_24840A434((void *)(v6 - 24));
  long long v15 = *a5;
  if (*a5)
  {
    v5[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_24844C740()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 232) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24844C724);
}

void sub_24844C758()
{
}

uint64_t *sub_24844C760(uint64_t *result, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_2483E92E8();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_248403444(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 40 * v4;
    sub_24843F914(v2, v5);
    return (uint64_t *)sub_24841F7CC((uint64_t)v5);
  }
  return result;
}

uint64_t sub_24844C804(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 112);
  sub_2483FDB3C(&v3);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return a1;
}

BOOL sub_24844C850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24844CB58, sub_24844CA8C, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_24844CA8C((uint64_t)v6, i);
  return 0;
}

BOOL sub_24844C900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24844CA64, sub_24844C9B0, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_24844C9B0((uint64_t)v6, i);
  return 0;
}

uint64_t sub_24844C9B0(uint64_t a1, int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = **v2;
  uint64_t v4 = a2;
  unint64_t v5 = *(void *)(v3 + 104);
  unint64_t v6 = *(void *)(v3 + 136);
  unint64_t v7 = v6 * (a2 / v5);
  unint64_t v8 = *(void *)(v3 + 72);
  unint64_t v9 = *(void *)(v3 + 80);
  v15[0] = v6 * (a2 % v5);
  v15[1] = v7;
  unint64_t v10 = v8 - v15[0];
  if (v8 < v15[0]) {
    unint64_t v10 = 0;
  }
  if (v15[0] + v6 <= v8) {
    unint64_t v10 = v6;
  }
  unint64_t v11 = v7 + v6;
  BOOL v12 = v9 >= v7;
  unint64_t v13 = v9 - v7;
  if (!v12) {
    unint64_t v13 = 0;
  }
  if (v11 <= v9) {
    unint64_t v13 = v6;
  }
  void v15[2] = v10;
  v15[3] = v13;
  if (*(unsigned char *)(v3 + 4208)) {
    uint64_t v4 = *(int *)(v3 + 4216);
  }
  uint64_t result = sub_24847D94C(*v2[1], (uint64_t)v15, v4, 0, (void *)v3);
  if (result) {
    atomic_store(1u, (unsigned __int8 *)v2[2]);
  }
  return result;
}

uint64_t sub_24844CA64(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_24844CA8C(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = **(void **)(v2 + 8);
    uint64_t v5 = a2;
    unint64_t v6 = *(void *)(v4 + 104);
    unint64_t v7 = *(void *)(v4 + 136);
    unint64_t v8 = v7 * (a2 / v6);
    unint64_t v9 = *(void *)(v4 + 72);
    unint64_t v10 = *(void *)(v4 + 80);
    v15[0] = v7 * (a2 % v6);
    v15[1] = v8;
    unint64_t v11 = v9 - v15[0];
    if (v9 < v15[0]) {
      unint64_t v11 = 0;
    }
    if (v15[0] + v7 <= v9) {
      unint64_t v11 = v7;
    }
    unint64_t v12 = v8 + v7;
    BOOL v13 = v10 >= v8;
    unint64_t v14 = v10 - v8;
    if (!v13) {
      unint64_t v14 = 0;
    }
    if (v12 <= v10) {
      unint64_t v14 = v7;
    }
    void v15[2] = v11;
    v15[3] = v14;
    if (*(unsigned char *)(v4 + 4208)) {
      uint64_t v5 = *(int *)(v4 + 4216);
    }
    uint64_t result = sub_24847CDD8(**(void ***)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), v15, v5, *(_DWORD *)(v4 + 4592) < 7, v4);
    if (result) {
      atomic_store(1u, *(unsigned __int8 **)v2);
    }
  }
  return result;
}

uint64_t sub_24844CB58(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void *sub_24844CB80(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2483E92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24844CBE0(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24844CBFC(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_2483E92E8();
  }
  uint64_t result = (char *)sub_24843356C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *sub_24844CC3C(void *a1, unint64_t a2)
{
  if (a2 >= 0x7A44C6AFC2DD9DLL) {
    sub_2483E92E8();
  }
  uint64_t result = (char *)sub_248430B34(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[536 * v4];
  return result;
}

void *sub_24844CC90(uint64_t a1, long long **a2, long long **a3, void *a4)
{
  uint64_t v4 = a4;
  long long v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v7 = *v6;
      size_t v8 = v6[1];
      unint64_t v9 = v4;
      if (v8 != *v6)
      {
        sub_24844CDF8(v4, v8 - *v6);
        unint64_t v10 = (_OWORD *)v4[1];
        do
        {
          long long v11 = *v7++;
          *v10++ = v11;
        }
        while (v7 != v8);
        v4[1] = v10;
        unint64_t v9 = v16;
      }
      memcpy(v4 + 3, v6 + 3, 0x200uLL);
      v6 += 67;
      uint64_t v4 = v9 + 67;
      uint64_t v16 = v9 + 67;
    }
    while (v6 != a3);
  }
  char v14 = 1;
  sub_24844CD8C((uint64_t)v13);
  return v4;
}

void sub_24844CD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_24844CD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_24844CD8C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 536;
      do
      {
        uint64_t v5 = *(void **)v4;
        if (*(void *)v4)
        {
          *(void *)(v4 + 8) = v5;
          operator delete(v5);
        }
        BOOL v6 = v4 == v3;
        v4 -= 536;
      }
      while (!v6);
    }
  }
  return a1;
}

char *sub_24844CDF8(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2483E92E8();
  }
  uint64_t result = (char *)sub_2483F3EB0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_24844CE38(uint64_t a1, unsigned int a2)
{
}

uint64_t sub_24844CE54(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_24844CE7C(float32x4_t *a1, float32x4_t *a2, unint64_t a3, int a4, float a5)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = 0;
  if (a4)
  {
    float32x4_t v6 = 0uLL;
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3C430C31u);
    float32x4_t v8 = 0uLL;
    do
    {
      float32x4_t v9 = *a1++;
      float32x4_t v10 = v9;
      float32x4_t v11 = vmulq_f32(v9, v7);
      float32x4_t v12 = *a2++;
      float32x4_t v6 = vmlaq_f32(v6, v11, v11);
      float32x4_t v8 = vmlaq_f32(v8, vsubq_f32(vmulq_n_f32(v10, a5), v12), v11);
      v5 += 4;
    }
    while (v5 < a3);
    float v13 = (float)-vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8))
        / (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))
                + (float)((float)((float)a3 * 0.000000001) * 0.5));
  }
  else
  {
    float v13 = 0.0;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3C430C31u);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3F2AAAABu);
    __asm { FMOV            V5.4S, #1.0 }
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x42C80000u);
    do
    {
      unint64_t v22 = 0;
      float v23 = v13 + 100.0;
      float v24 = v13 + -100.0;
      BOOL v25 = a1;
      float v26 = a2;
      float32x4_t v27 = 0uLL;
      float32x4_t v28 = 0uLL;
      float32x4_t v29 = 0uLL;
      do
      {
        float32x4_t v30 = *v25++;
        float32x4_t v31 = vmulq_f32(v30, v15);
        float32x4_t v32 = vmulq_n_f32(v30, a5);
        float32x4_t v33 = *v26++;
        float32x4_t v34 = vsubq_f32(v32, v33);
        float32x4_t v35 = vmlaq_n_f32(v34, v31, v13);
        float32x4_t v36 = vmlaq_n_f32(v34, v31, v23);
        float32x4_t v37 = vmlaq_n_f32(v34, v31, v24);
        float32x4_t v38 = vabsq_f32(v35);
        float32x4_t v39 = vmulq_f32(v31, v16);
        float32x4_t v40 = vmulq_f32(v39, vaddq_f32(v38, _Q5));
        float32x4_t v41 = vmulq_f32(v39, vaddq_f32(vabsq_f32(v36), _Q5));
        float32x4_t v42 = vmulq_f32(v39, vaddq_f32(vabsq_f32(v37), _Q5));
        int8x16_t v43 = vbslq_s8((int8x16_t)vcltzq_f32(v37), (int8x16_t)vsubq_f32((float32x4_t)0, v42), (int8x16_t)v42);
        int8x16_t v44 = (int8x16_t)vcgeq_f32(v38, v21);
        float32x4_t v27 = vaddq_f32(v27, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vsubq_f32((float32x4_t)0, v40), (int8x16_t)v40), v44));
        float32x4_t v28 = vaddq_f32(v28, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcltzq_f32(v36), (int8x16_t)vsubq_f32((float32x4_t)0, v41), (int8x16_t)v41), v44));
        float32x4_t v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8(v43, v44));
        v22 += 4;
      }
      while (v22 < a3);
      float v45 = (float)((float)((float)((float)a3 * 0.000000002) * v13)
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)))
          / (float)((float)((float)((float)((float)(v23 * (float)((float)a3 * 0.000000002))
                                          + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)))
                                  - (float)((float)(v24 * (float)((float)a3 * 0.000000002))
                                          + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
                          / 200.0)
                  + 0.85);
      float v13 = v13 - fminf(fmaxf(v45, -20.0), 20.0);
      ++v5;
    }
    while (fabsf(v45) >= 0.003 && v5 != 20);
  }
  if (v13 >= 2.6)
  {
    float v47 = v13 + -2.6;
  }
  else
  {
    float v47 = 0.0;
    if (v13 <= -2.6) {
      float v47 = v13 + 2.6;
    }
  }
  return (int)fmaxf(fminf(roundf(v47), 127.0), -128.0);
}

void sub_24844D0E8(int a1, float32x4_t *a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  float32x4_t v8 = (const float *)a2;
  switch(a1)
  {
    case 0:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[16];
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0, (uint64_t)&v213, (uint64_t)v223, 8, (uint64_t)&a5[16]);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      v215.i64[0] = 8;
      v215.i64[1] = (uint64_t)a5;
      sub_2484065E0(v223, &v215);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 8;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0;
      uint64_t v11 = 8;
      goto LABEL_145;
    case 1:
      uint64_t v12 = 0;
      uint64_t v13 = 4 * a3;
      char v14 = 1;
      do
      {
        uint64_t v15 = 0;
        char v16 = v14;
        char v17 = 1;
        uint64_t v18 = ((4 * v12) | 1) * a3 + 1;
        uint64_t v19 = 8 * v12;
        int v20 = (char *)v8 + 16 * a3 * v12;
        uint64_t v21 = 32 * v12;
        do
        {
          char v22 = v17;
          uint64_t v23 = 4 * v15;
          float v24 = &v20[16 * v15];
          float v25 = 0.0;
          float v26 = v24;
          uint64_t v27 = 4;
          do
          {
            float v25 = (float)((float)((float)(v25 + COERCE_FLOAT(*(_OWORD *)v26)) + COERCE_FLOAT(HIDWORD(*(void *)v26)))
                        + COERCE_FLOAT(*((void *)v26 + 1)))
                + COERCE_FLOAT(HIDWORD(*(_OWORD *)v26));
            v26 += v13;
            --v27;
          }
          while (v27);
          uint64_t v28 = 0;
          uint64_t v29 = v18 + v23;
          uint64_t v30 = v15 | v19;
          uint64_t v31 = v21 + v23;
          do
          {
            uint64_t v32 = 0;
            uint64_t v33 = v31;
            do
            {
              if (v28 != 1 || v32 != 4) {
                *(float *)(a4 + v33) = *(float *)&v24[v32] - v8[v29];
              }
              v32 += 4;
              v33 += 8;
            }
            while (v32 != 16);
            ++v28;
            v31 += 64;
            v24 += v13;
          }
          while (v28 != 4);
          char v17 = 0;
          *(_DWORD *)(a4 + ((4 * v30) | 0x48)) = *(_DWORD *)(a4 + 4 * v30);
          *(float *)(a4 + 4 * v30) = v25 * 0.0625;
          uint64_t v15 = 1;
        }
        while ((v22 & 1) != 0);
        char v14 = 0;
        uint64_t v12 = 1;
      }
      while ((v16 & 1) != 0);
      goto LABEL_34;
    case 2:
      uint64_t v35 = 1;
      __asm { FMOV            V0.4S, #0.25 }
      do
      {
        float32x4_t v41 = &v8[a3];
        float32x4x2_t v225 = vld2q_f32(v8);
        uint64_t v34 = 8 * a3;
        float32x4_t v8 = (const float *)((char *)v8 + v34);
        float32x4x2_t v226 = vld2q_f32(v41);
        float32x4_t v42 = vaddq_f32(v225.val[0], v225.val[1]);
        v225.val[0] = vsubq_f32(v225.val[0], v225.val[1]);
        int8x16_t v43 = &v223[v35];
        v43[-1] = vmulq_f32(vaddq_f32(vaddq_f32(v42, v226.val[0]), v226.val[1]), _Q0);
        *int8x16_t v43 = vmulq_f32(vsubq_f32(vsubq_f32(v42, v226.val[0]), v226.val[1]), _Q0);
        v43[7] = vmulq_f32(vsubq_f32(vaddq_f32(v225.val[0], v226.val[0]), v226.val[1]), _Q0);
        v43[8] = vmulq_f32(vaddq_f32(vsubq_f32(v225.val[0], v226.val[0]), v226.val[1]), _Q0);
        v35 += 2;
      }
      while (v35 != 9);
      uint64_t v44 = 0;
      float32x4_t v45 = v223[13];
      *(float32x4_t *)(a4 + 192) = v223[12];
      *(float32x4_t *)(a4 + 208) = v45;
      float32x4_t v46 = v223[15];
      *(float32x4_t *)(a4 + 224) = v223[14];
      *(float32x4_t *)(a4 + 240) = v46;
      float32x4_t v47 = v223[9];
      *(float32x4_t *)(a4 + 128) = v223[8];
      *(float32x4_t *)(a4 + 144) = v47;
      float32x4_t v48 = v223[11];
      *(float32x4_t *)(a4 + 160) = v223[10];
      *(float32x4_t *)(a4 + 176) = v48;
      float32x4_t v49 = v223[5];
      *(float32x4_t *)(a4 + 64) = v223[4];
      *(float32x4_t *)(a4 + 80) = v49;
      float32x4_t v50 = v223[7];
      *(float32x4_t *)(a4 + 96) = v223[6];
      *(float32x4_t *)(a4 + 112) = v50;
      float32x4_t v51 = v223[1];
      *(float32x4_t *)a4 = v223[0];
      *(float32x4_t *)(a4 + 16) = v51;
      float32x4_t v52 = v223[3];
      char v53 = 1;
      *(float32x4_t *)(a4 + 32) = v223[2];
      *(float32x4_t *)(a4 + 48) = v52;
      do
      {
        uint64_t v54 = 0;
        char v55 = v53;
        uint64_t v56 = 16 * v44;
        uint64_t v57 = 8 * v44;
        char v58 = 1;
        do
        {
          uint64_t v59 = (8 * v54) | (4 * v56);
          float v60 = *(float *)(a4 + v59);
          float v61 = *(float *)(a4 + (v59 | 4));
          float v62 = *(float *)(a4 + (v59 | 0x20));
          float v63 = *(float *)(a4 + (v59 | 0x24));
          LOBYTE(v59) = v58;
          float v64 = (float)((float)(v60 + v61) + v62) + v63;
          float v65 = (float)((float)(v60 + v61) - v62) - v63;
          float v66 = v60 - v61;
          uint64_t v67 = v54 | v57;
          v223[0].f32[v67] = v64 * 0.25;
          *(float *)((char *)v223[0].f32 + ((4 * v67) | 8)) = v65 * 0.25;
          *(float *)((char *)v223[0].f32 + ((4 * v67) | 0x40)) = (float)((float)(v66 + v62) - v63) * 0.25;
          *(float *)((char *)v223[0].f32 + ((4 * v67) | 0x48)) = (float)((float)(v66 - v62) + v63) * 0.25;
          uint64_t v54 = 1;
          char v58 = 0;
        }
        while ((v59 & 1) != 0);
        char v53 = 0;
        uint64_t v44 = 1;
      }
      while ((v55 & 1) != 0);
      for (uint64_t i = 0; i != 8; i += 2)
        *(float32x4_t *)(a4 + i * 16) = v223[i];
      float v69 = *(float *)(a4 + 4);
      float v70 = *(float *)(a4 + 32);
      float v71 = *(float *)(a4 + 36);
      float v72 = *(float *)a4 + v69;
      float v73 = *(float *)a4 - v69;
      float v74 = (float)((float)(v73 + v70) - v71) * 0.25;
      *(float *)a4 = (float)((float)(v72 + v70) + v71) * 0.25;
      *(float *)(a4 + 4) = (float)((float)(v72 - v70) - v71) * 0.25;
      float v75 = (float)((float)(v73 - v70) + v71) * 0.25;
      goto LABEL_35;
    case 3:
      uint64_t v76 = 0;
      uint64_t v210 = 4 * a3;
      char v77 = 1;
      do
      {
        uint64_t v78 = 0;
        char v79 = v77;
        int64x2_t v80 = &v8[v210 * v76];
        uint64_t v81 = 32 * v76;
        char v82 = 1;
        do
        {
          char v83 = v82;
          char v84 = v223;
          sub_24843C88C(a3, (float32x4_t *)&v80[4 * v78], (int32x4_t *)v223, (uint64_t)a5);
          uint64_t v85 = 0;
          uint64_t v86 = v81 + 4 * v78;
          do
          {
            uint64_t v87 = 0;
            uint64_t v88 = v86;
            do
            {
              *(_DWORD *)(a4 + v88) = v84->i32[v87++];
              v88 += 8;
            }
            while (v87 != 4);
            ++v85;
            v86 += 64;
            ++v84;
          }
          while (v85 != 4);
          char v82 = 0;
          uint64_t v78 = 1;
        }
        while ((v83 & 1) != 0);
        char v77 = 0;
        uint64_t v76 = 1;
      }
      while ((v79 & 1) != 0);
LABEL_34:
      float v89 = *(float *)a4;
      float v90 = *(float *)(a4 + 4);
      float v91 = *(float *)(a4 + 32);
      float v92 = *(float *)(a4 + 36);
      float v93 = *(float *)a4 + v90;
      *(float *)a4 = (float)((float)(v93 + v91) + v92) * 0.25;
      *(float *)(a4 + 4) = (float)((float)(v93 - v91) - v92) * 0.25;
      float v94 = v89 - v90;
      float v74 = (float)((float)(v94 + v91) - v92) * 0.25;
      float v75 = (float)((float)(v94 - v91) + v92) * 0.25;
LABEL_35:
      *(float *)(a4 + 32) = v74;
      *(float *)(a4 + 36) = v75;
      return;
    case 4:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[64];
      v223[0].i64[0] = 16;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C, (uint64_t)&v213, (uint64_t)v223, 16, (uint64_t)&a5[64]);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = a4;
      v215.i64[0] = 16;
      v215.i64[1] = (uint64_t)a5;
      sub_248406244(v223, &v215);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 16;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C;
      goto LABEL_39;
    case 5:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[256];
      v223[0].i64[0] = 32;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)&v213, (uint64_t)v223, 32, (uint64_t)&a5[256]);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = a4;
      v215.i64[0] = 32;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 32, 32);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04;
      goto LABEL_49;
    case 6:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[32];
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C, (uint64_t)&v213, (uint64_t)v223, 8, (uint64_t)&a5[32]);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      v215.i64[0] = 16;
      v215.i64[1] = (uint64_t)a5;
      sub_248406414(v223, &v215);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 16;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0;
LABEL_39:
      uint64_t v11 = 16;
      goto LABEL_145;
    case 7:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 16;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0, (uint64_t)&v213, (uint64_t)v223, 16, (uint64_t)&a5[32]);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 8;
      v215.i64[1] = a4;
      sub_24840632C(v223, &v215);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      v215.i64[0] = 8;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C, (uint64_t)v223, (uint64_t)&v215, 8, (uint64_t)&a5[32]);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 16;
      v215.i64[1] = a4;
      sub_248406414(v223, &v215);
      return;
    case 8:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[64];
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)&v213, (uint64_t)v223, 8, (uint64_t)&a5[64]);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      v215.i64[0] = 32;
      v215.i64[1] = (uint64_t)a5;
      sub_24843C928(v223, &v215);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0;
      goto LABEL_48;
    case 9:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FFD0, (uint64_t)&v213, (uint64_t)v223, 32, (uint64_t)&a5[64]);
      uint64_t v96 = 0;
      char v97 = 1;
      do
      {
        char v98 = v97;
        long long v99 = (int32x4_t *)((char *)a5 + ((v96 << 7) | 0x100));
        uint64_t v100 = a4 + 64 + 4 * v96;
        unint64_t v101 = -4;
        do
        {
          int32x4_t v102 = v99[-16];
          int32x4_t v103 = v99[-8];
          int32x4_t v104 = v99[8];
          float32x2x2_t v105 = (float32x2x2_t)vzip1q_s32(v102, *v99);
          int32x4_t v106 = vzip1q_s32(v103, v104);
          float32x2x2_t v107 = (float32x2x2_t)vzip2q_s32(v102, *v99);
          int32x4_t v108 = vzip2q_s32(v103, v104);
          v109 = (float *)(v100 - 64);
          vst2_f32(v109, v105);
          vst2_f32((float *)v100, v107);
          *(int32x4_t *)(v100 - 32) = vzip2q_s32((int32x4_t)v105, v106);
          *(int32x4_t *)(v100 + 32) = vzip2q_s32((int32x4_t)v107, v108);
          v101 += 4;
          ++v99;
          v100 += 128;
        }
        while (v101 < 0x1C);
        char v97 = 0;
        uint64_t v96 = 4;
      }
      while ((v98 & 1) != 0);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = a4;
      v215.i64[0] = 8;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)v223, (uint64_t)&v215, 8, (uint64_t)&a5[64]);
      v223[0].i64[0] = 8;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      sub_24843C928(v223, &v215);
      return;
    case 10:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[128];
      v223[0].i64[0] = 16;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)&v213, (uint64_t)v223, 16, (uint64_t)&a5[128]);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = a4;
      v215.i64[0] = 32;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 32, 16);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C;
LABEL_48:
      float32x4_t v10 = v95;
LABEL_49:
      uint64_t v11 = 32;
      goto LABEL_145;
    case 11:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845009C, (uint64_t)&v213, (uint64_t)v223, 32, (uint64_t)&a5[128]);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 16;
      v215.i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 16, 32);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = a4;
      v215.i64[0] = 16;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)v223, (uint64_t)&v215, 16, (uint64_t)&a5[128]);
      v223[0].i64[0] = 16;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      uint64_t v110 = 32;
      uint64_t v111 = 16;
      goto LABEL_147;
    case 12:
      uint64_t v112 = 0;
      char v113 = 1;
      do
      {
        char v114 = v113;
        uint64_t v115 = 32 * v112;
        v215.i64[0] = a3;
        v215.i64[1] = (uint64_t)&v8[4 * a3 * v112];
        sub_24844FAB8((uint64_t)&v215, v223, a5);
        for (uint64_t j = 0; j != 8; j += 2)
        {
          unint64_t v117 = (float32x4_t *)(a4 + v115);
          float32x4_t v118 = v223[j + 1];
          *unint64_t v117 = v223[j];
          v117[1] = v118;
          v115 += 64;
        }
        char v113 = 0;
        uint64_t v112 = 1;
      }
      while ((v114 & 1) != 0);
      goto LABEL_60;
    case 13:
      uint64_t v119 = 0;
      char v120 = 1;
      do
      {
        char v121 = v120;
        uint64_t v122 = 32 * v119;
        v215.i64[0] = 4;
        v215.i64[1] = (uint64_t)v223;
        sub_248408240(a3, (float32x4_t *)&v8[4 * v119], &v215, a5 + 8);
        v215.i64[0] = 4;
        v215.i64[1] = (uint64_t)v223;
        uint64_t v213 = 8;
        BOOL v214 = a5;
        sub_248407100(&v215, &v213);
        v215.i64[0] = 8;
        v215.i64[1] = (uint64_t)a5;
        uint64_t v213 = 8;
        BOOL v214 = v223;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845017C, (uint64_t)&v215, (uint64_t)&v213, 8, (uint64_t)&a5[8]);
        for (uint64_t k = 0; k != 8; k += 2)
        {
          v124 = (float32x4_t *)(a4 + v122);
          float32x4_t v125 = v223[k + 1];
          float32x4_t *v124 = v223[k];
          v124[1] = v125;
          v122 += 64;
        }
        char v120 = 0;
        uint64_t v119 = 1;
      }
      while ((v121 & 1) != 0);
LABEL_60:
      float v126 = *(float *)a4;
      float v127 = *(float *)(a4 + 32);
      *(float *)a4 = (float)(*(float *)a4 + v127) * 0.5;
      float v128 = (float)(v126 - v127) * 0.5;
      goto LABEL_133;
    case 14:
      uint64_t v129 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      unsigned int v130 = a2;
      float32x4_t v215 = 0u;
      long long v216 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v215 + v129) = *v130;
        v129 += 16;
        unsigned int v130 = (float32x4_t *)((char *)v130 + 4 * a3);
      }
      while (v129 != 64);
      unint64_t v131 = 0;
      BOOL v132 = (float32x4_t *)&unk_24854F660;
      do
      {
        uint64_t v133 = 0;
        float32x4_t v134 = 0uLL;
        do
        {
          float32x4_t v134 = vmlaq_n_f32(v134, v132[v133 * 4], v215.f32[v133]);
          ++v133;
        }
        while (v133 != 16);
        *(float32x4_t *)((char *)&v213 + 4 * v131) = v134;
        ++v132;
        _CF = v131 >= 0xC;
        v131 += 4;
      }
      while (!_CF);
      uint64_t v135 = 0;
      unint64_t v136 = &v213;
      uint64_t v137 = (_DWORD *)a4;
      do
      {
        uint64_t v138 = 0;
        uint64_t v139 = v137;
        do
        {
          *uint64_t v139 = *(_DWORD *)((char *)v136 + v138);
          v139 += 2;
          v138 += 4;
        }
        while (v138 != 16);
        ++v135;
        v137 += 16;
        v136 += 2;
      }
      while (v135 != 4);
      unint64_t v140 = &v215;
      sub_24843C88C(a3, a2 + 1, (int32x4_t *)&v215, (uint64_t)v223);
      uint64_t v141 = 0;
      uint64_t v142 = 4;
      do
      {
        uint64_t v143 = 0;
        uint64_t v144 = v142;
        do
        {
          *(_DWORD *)(a4 + v144) = v140->i32[v143++];
          v144 += 8;
        }
        while (v143 != 8);
        ++v141;
        v142 += 64;
        ++v140;
      }
      while (v141 != 4);
      uint64_t v211 = a3;
      BOOL v212 = &v8[4 * a3];
      sub_24844FAB8((uint64_t)&v211, &v215, v223);
      uint64_t v145 = 0;
      uint64_t v146 = a4 + 32;
      do
      {
        long long v147 = *(long long *)((char *)&v215 + v145 + 16);
        *(float32x4_t *)uint64_t v146 = *(float32x4_t *)((char *)&v215 + v145);
        *(_OWORD *)(v146 + 16) = v147;
        v146 += 64;
        v145 += 32;
      }
      while (v145 != 128);
      goto LABEL_132;
    case 15:
      uint64_t v148 = 0;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      uint64_t v149 = 16;
      float32x4_t v215 = 0u;
      long long v216 = 0u;
      do
      {
        int8x16_t v150 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)a2 + v149));
        *(int8x16_t *)((char *)&v215 + v148) = vextq_s8(v150, v150, 8uLL);
        v148 += 16;
        v149 += 4 * a3;
      }
      while (v148 != 64);
      unint64_t v151 = 0;
      v152 = (float32x4_t *)&unk_24854F660;
      do
      {
        uint64_t v153 = 0;
        float32x4_t v154 = 0uLL;
        do
        {
          float32x4_t v154 = vmlaq_n_f32(v154, v152[v153 * 4], v215.f32[v153]);
          ++v153;
        }
        while (v153 != 16);
        *(float32x4_t *)((char *)&v213 + 4 * v151) = v154;
        ++v152;
        _CF = v151 >= 0xC;
        v151 += 4;
      }
      while (!_CF);
      uint64_t v155 = 0;
      float v156 = &v213;
      float v157 = (_DWORD *)a4;
      do
      {
        uint64_t v158 = 0;
        v159 = v157;
        do
        {
          _DWORD *v159 = *(_DWORD *)((char *)v156 + v158);
          v159 += 2;
          v158 += 4;
        }
        while (v158 != 16);
        ++v155;
        v157 += 16;
        v156 += 2;
      }
      while (v155 != 4);
      unsigned int v160 = &v215;
      sub_24843C88C(a3, a2, (int32x4_t *)&v215, (uint64_t)v223);
      uint64_t v161 = 0;
      uint64_t v162 = 4;
      do
      {
        uint64_t v163 = 0;
        uint64_t v164 = v162;
        do
        {
          *(_DWORD *)(a4 + v164) = v160->i32[v163++];
          v164 += 8;
        }
        while (v163 != 8);
        ++v161;
        v162 += 64;
        ++v160;
      }
      while (v161 != 4);
      uint64_t v211 = a3;
      BOOL v212 = &v8[4 * a3];
      sub_24844FAB8((uint64_t)&v211, &v215, v223);
      uint64_t v165 = 0;
      uint64_t v166 = a4 + 32;
      do
      {
        long long v167 = *(long long *)((char *)&v215 + v165 + 16);
        *(float32x4_t *)uint64_t v166 = *(float32x4_t *)((char *)&v215 + v165);
        *(_OWORD *)(v166 + 16) = v167;
        v166 += 64;
        v165 += 32;
      }
      while (v165 != 128);
      goto LABEL_132;
    case 16:
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      uint64_t v168 = 16 * a3;
      uint64_t v169 = 48;
      float32x4_t v215 = 0u;
      long long v216 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v215 + v169) = *(float32x4_t *)((char *)a2 + v168);
        v169 -= 16;
        v168 += 4 * a3;
      }
      while (v169 != -16);
      unint64_t v170 = 0;
      int v171 = (float32x4_t *)&unk_24854F660;
      do
      {
        uint64_t v172 = 0;
        float32x4_t v173 = 0uLL;
        do
        {
          float32x4_t v173 = vmlaq_n_f32(v173, v171[v172 * 4], v215.f32[v172]);
          ++v172;
        }
        while (v172 != 16);
        *(float32x4_t *)((char *)&v213 + 4 * v170) = v173;
        ++v171;
        _CF = v170 >= 0xC;
        v170 += 4;
      }
      while (!_CF);
      uint64_t v174 = 0;
      uint64_t v175 = &v213;
      unint64_t v176 = (_DWORD *)a4;
      do
      {
        uint64_t v177 = 0;
        v178 = v176;
        do
        {
          _DWORD *v178 = *(_DWORD *)((char *)v175 + v177);
          v178 += 2;
          v177 += 4;
        }
        while (v177 != 16);
        ++v174;
        v176 += 16;
        v175 += 2;
      }
      while (v174 != 4);
      int v179 = &v215;
      sub_24843C88C(a3, &a2[a3 + 1], (int32x4_t *)&v215, (uint64_t)v223);
      uint64_t v180 = 0;
      uint64_t v181 = 4;
      do
      {
        uint64_t v182 = 0;
        uint64_t v183 = v181;
        do
        {
          *(_DWORD *)(a4 + v183) = v179->i32[v182++];
          v183 += 8;
        }
        while (v182 != 8);
        ++v180;
        v181 += 64;
        ++v179;
      }
      while (v180 != 4);
      uint64_t v211 = a3;
      BOOL v212 = v8;
      sub_24844FAB8((uint64_t)&v211, &v215, v223);
      uint64_t v184 = 0;
      uint64_t v185 = a4 + 32;
      do
      {
        long long v186 = *(long long *)((char *)&v215 + v184 + 16);
        *(float32x4_t *)uint64_t v185 = *(float32x4_t *)((char *)&v215 + v184);
        *(_OWORD *)(v185 + 16) = v186;
        v185 += 64;
        v184 += 32;
      }
      while (v184 != 128);
      goto LABEL_132;
    case 17:
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      uint64_t v187 = 16 * a3 + 16;
      uint64_t v188 = 48;
      float32x4_t v215 = 0u;
      long long v216 = 0u;
      do
      {
        int8x16_t v189 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)a2 + v187));
        *(int8x16_t *)((char *)&v215 + v188) = vextq_s8(v189, v189, 8uLL);
        v188 -= 16;
        v187 += 4 * a3;
      }
      while (v188 != -16);
      unint64_t v190 = 0;
      int v191 = (float32x4_t *)&unk_24854F660;
      do
      {
        uint64_t v192 = 0;
        float32x4_t v193 = 0uLL;
        do
        {
          float32x4_t v193 = vmlaq_n_f32(v193, v191[v192 * 4], v215.f32[v192]);
          ++v192;
        }
        while (v192 != 16);
        *(float32x4_t *)((char *)&v213 + 4 * v190) = v193;
        ++v191;
        _CF = v190 >= 0xC;
        v190 += 4;
      }
      while (!_CF);
      uint64_t v194 = 0;
      int v195 = &v213;
      v196 = (_DWORD *)a4;
      do
      {
        uint64_t v197 = 0;
        uint64_t v198 = v196;
        do
        {
          *uint64_t v198 = *(_DWORD *)((char *)v195 + v197);
          v198 += 2;
          v197 += 4;
        }
        while (v197 != 16);
        ++v194;
        v196 += 16;
        v195 += 2;
      }
      while (v194 != 4);
      v199 = &v215;
      sub_24843C88C(a3, &a2[a3], (int32x4_t *)&v215, (uint64_t)v223);
      uint64_t v200 = 0;
      uint64_t v201 = 4;
      do
      {
        uint64_t v202 = 0;
        uint64_t v203 = v201;
        do
        {
          *(_DWORD *)(a4 + v203) = v199->i32[v202++];
          v203 += 8;
        }
        while (v202 != 8);
        ++v200;
        v201 += 64;
        ++v199;
      }
      while (v200 != 4);
      uint64_t v211 = a3;
      BOOL v212 = v8;
      sub_24844FAB8((uint64_t)&v211, &v215, v223);
      uint64_t v204 = 0;
      uint64_t v205 = a4 + 32;
      do
      {
        long long v206 = *(long long *)((char *)&v215 + v204 + 16);
        *(float32x4_t *)uint64_t v205 = *(float32x4_t *)((char *)&v215 + v204);
        *(_OWORD *)(v205 + 16) = v206;
        v205 += 64;
        v204 += 32;
      }
      while (v204 != 128);
LABEL_132:
      float v207 = *(float *)(a4 + 4);
      float v208 = *(float *)a4 * 0.25;
      float v209 = *(float *)(a4 + 32);
      *(float *)a4 = (float)((float)(v208 + v207) + (float)(v209 * 2.0)) * 0.25;
      *(float *)(a4 + 4) = (float)(v208 - v207) * 0.5;
      float v128 = (float)((float)(v208 + v207) + (float)(v209 * -2.0)) * 0.25;
LABEL_133:
      *(float *)(a4 + 32) = v128;
      return;
    case 18:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[1024];
      v223[0].i64[0] = 64;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24, (uint64_t)&v213, (uint64_t)v223, 64, (uint64_t)&a5[1024]);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = a4;
      v215.i64[0] = 64;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 64, 64);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 64;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24;
      goto LABEL_136;
    case 19:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[512];
      v223[0].i64[0] = 32;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24, (uint64_t)&v213, (uint64_t)v223, 32, (uint64_t)&a5[512]);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = a4;
      v215.i64[0] = 64;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 64, 32);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 64;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04;
LABEL_136:
      uint64_t v11 = 64;
      goto LABEL_145;
    case 20:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 64;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FF04, (uint64_t)&v213, (uint64_t)v223, 64, (uint64_t)&a5[512]);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 32;
      v215.i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 32, 64);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = a4;
      v215.i64[0] = 32;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24, (uint64_t)v223, (uint64_t)&v215, 32, (uint64_t)&a5[512]);
      v223[0].i64[0] = 32;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 64;
      v215.i64[1] = a4;
      uint64_t v110 = 64;
      uint64_t v111 = 32;
      goto LABEL_147;
    case 21:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[4096];
      v223[0].i64[0] = 128;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58, (uint64_t)&v213, (uint64_t)v223, 128, (uint64_t)&a5[4096]);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = a4;
      v215.i64[0] = 128;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 128, 128);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 128;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58;
      goto LABEL_140;
    case 22:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[2048];
      v223[0].i64[0] = 64;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58, (uint64_t)&v213, (uint64_t)v223, 64, (uint64_t)&a5[2048]);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = a4;
      v215.i64[0] = 128;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 128, 64);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 128;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24;
LABEL_140:
      uint64_t v11 = 128;
      goto LABEL_145;
    case 23:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 128;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FE24, (uint64_t)&v213, (uint64_t)v223, 128, (uint64_t)&a5[2048]);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 64;
      v215.i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 64, 128);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = a4;
      v215.i64[0] = 64;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58, (uint64_t)v223, (uint64_t)&v215, 64, (uint64_t)&a5[2048]);
      v223[0].i64[0] = 64;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 128;
      v215.i64[1] = a4;
      uint64_t v110 = 128;
      uint64_t v111 = 64;
      goto LABEL_147;
    case 24:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[0x4000];
      v223[0].i64[0] = 256;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FB68, (uint64_t)&v213, (uint64_t)v223, 256, (uint64_t)&a5[0x4000]);
      v223[0].i64[0] = 256;
      v223[0].i64[1] = a4;
      v215.i64[0] = 256;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 256, 256);
      v223[0].i64[0] = 256;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 256;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FB68;
      goto LABEL_144;
    case 25:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      uint64_t v9 = (uint64_t)&a5[0x2000];
      v223[0].i64[0] = 128;
      v223[0].i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FB68, (uint64_t)&v213, (uint64_t)v223, 128, (uint64_t)&a5[0x2000]);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = a4;
      v215.i64[0] = 256;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 256, 128);
      v223[0].i64[0] = 256;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 256;
      v215.i64[1] = a4;
      float32x4_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58;
LABEL_144:
      uint64_t v11 = 256;
LABEL_145:
      sub_248405EEC(v10, (uint64_t)v223, (uint64_t)&v215, v11, v9);
      break;
    case 26:
      uint64_t v213 = a3;
      BOOL v214 = a2;
      v223[0].i64[0] = 256;
      v223[0].i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FD58, (uint64_t)&v213, (uint64_t)v223, 256, (uint64_t)&a5[0x2000]);
      v223[0].i64[0] = 256;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 128;
      v215.i64[1] = a4;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, 128, 256);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = a4;
      v215.i64[0] = 128;
      v215.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FB68, (uint64_t)v223, (uint64_t)&v215, 128, (uint64_t)&a5[0x2000]);
      v223[0].i64[0] = 128;
      v223[0].i64[1] = (uint64_t)a5;
      v215.i64[0] = 256;
      v215.i64[1] = a4;
      uint64_t v110 = 256;
      uint64_t v111 = 128;
LABEL_147:
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)v223, (uint64_t)&v215, v110, v111);
      break;
    default:
      return;
  }
}

void sub_24844E6FC()
{
  int v0 = MEMORY[0x270FA5388]();
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  float32x4_t v10 = v1;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v2->i32[0] = v1->i32[0];
      return;
    case 4:
      v11.i32[0] = v1->i32[0];
      v11.f32[1] = v1->f32[1] * 0.90176;
      v12.i32[0] = v1[4].i32[0];
      v12.f32[1] = v1[4].f32[1] * 0.90176;
      float32x2_t v13 = vmul_f32(v12, (float32x2_t)vdup_n_s32(0x3F66DA05u));
      int32x2_t v14 = (int32x2_t)vadd_f32(v11, v13);
      int32x2_t v15 = (int32x2_t)vsub_f32(v11, v13);
      v13.i32[0] = vdup_lane_s32(v14, 1).u32[0];
      float32x2_t v16 = (float32x2_t)vzip1_s32(v14, v15);
      v13.i32[1] = v15.i32[1];
      *(float32x2_t *)v2->f32 = vadd_f32(v16, v13);
      *(float32x2_t *)&v2->f32[v3] = vsub_f32(v16, v13);
      return;
    case 5:
      uint64_t v17 = 0;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        float32x4_t v18 = *v10;
        v10 += 8;
        *(&v110 + v17) = vmulq_f32(vmulq_n_f32(v18, *((float *)&xmmword_2484DCDB0 + v17)), (float32x4_t)xmmword_2484DCDB0);
        ++v17;
      }
      while (v17 != 4);
      sub_248407054(&v110, 4, (uint64_t)&v99, 4, v103);
      float32x2x2_t v19 = (float32x2x2_t)vzip1q_s32(v99, v101);
      int32x4_t v20 = vzip1q_s32(v100, v102);
      float32x2x2_t v21 = (float32x2x2_t)vzip2q_s32(v99, v101);
      int32x4_t v22 = vzip2q_s32(v100, v102);
      uint64_t v23 = &v110;
      vst2_f32(v23->f32, v19);
      *(int32x4_t *)++uint64_t v23 = vzip2q_s32((int32x4_t)v19, v20);
      float v24 = (float *)&v112;
      vst2_f32(v24, v21);
      int32x4_t v113 = vzip2q_s32((int32x4_t)v21, v22);
      sub_248407054(&v110, 4, (uint64_t)v9, v8, v103);
      return;
    case 6:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      v2->i32[0] = vadd_f32(v4, v5).u32[0];
      v2->i32[v3] = vsub_f32(v4, v5).u32[0];
      return;
    case 7:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      *(int32x2_t *)v2->f32 = vzip1_s32((int32x2_t)vadd_f32(v4, v5), (int32x2_t)vsub_f32(v4, v5));
      return;
    case 8:
      sub_24844F598(1, (__int32 *)&v110, v3, (uint64_t)v2, &v100, (float32x2_t)*(_OWORD *)&vmulq_f32(*v1, (float32x4_t)xmmword_2484DCDB0), 0.00624292809, v6, v7);
      return;
    case 9:
      float32x4_t v110 = vmulq_f32(*v1, (float32x4_t)xmmword_2484DCDB0);
      int32x4_t v99 = (int32x4_t)v110;
      sub_24844F598(1, v99.i32, 1, (uint64_t)&v110, &v100, *(float32x2_t *)v110.f32, 0.00624292809, v6, v7);
      int32x4_t v99 = (int32x4_t)v110;
      *uint64_t v9 = v110;
      return;
    case 10:
      uint64_t v25 = 0;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      char v26 = 1;
      do
      {
        char v27 = v26;
        *(&v110 + v25) = vmulq_f32(vmulq_n_f32(v1[8 * v25], flt_2484DDA30[v25]), (float32x4_t)xmmword_2484DCDB0);
        uint64_t v25 = 1;
        char v26 = 0;
      }
      while ((v27 & 1) != 0);
      uint64_t v28 = 0;
      int32x4_t v99 = (int32x4_t)vaddq_f32(v110, v111);
      int32x4_t v100 = (int32x4_t)vsubq_f32(v110, v111);
      char v29 = 1;
      do
      {
        uint64_t v30 = 0;
        char v31 = v29;
        uint64_t v32 = v28;
        uint64_t v33 = (float32x4_t *)(&v99 + v28);
        do
        {
          v110.i32[v32] = v33->i32[v30++];
          v32 += 2;
        }
        while (v30 != 4);
        char v29 = 0;
        uint64_t v28 = 1;
      }
      while ((v31 & 1) != 0);
      sub_24844F644(2, (float32x2_t *)&v110, v3, (uint64_t)v2, (float32x2_t *)&v101);
      return;
    case 11:
      uint64_t v34 = 0;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      char v35 = 1;
      do
      {
        char v36 = v35;
        *(&v110 + v34) = vmulq_f32(vmulq_n_f32(v1[8 * v34], flt_2484DDA30[v34]), (float32x4_t)xmmword_2484DCDB0);
        uint64_t v34 = 1;
        char v35 = 0;
      }
      while ((v36 & 1) != 0);
      uint64_t v37 = 0;
      char v38 = 1;
      do
      {
        uint64_t v39 = 0;
        char v40 = v38;
        uint64_t v41 = v37;
        float32x4_t v42 = &v110 + v37;
        do
        {
          v99.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        char v38 = 0;
        uint64_t v37 = 1;
      }
      while ((v40 & 1) != 0);
      sub_24844F644(2, (float32x2_t *)&v99, 2, (uint64_t)&v110, (float32x2_t *)&v101);
      float32x4x2_t v143 = vld2q_f32(v110.f32);
      *uint64_t v9 = vaddq_f32(v143.val[0], v143.val[1]);
      *(float32x4_t *)((char *)v9 + 4 * v8) = vsubq_f32(v143.val[0], v143.val[1]);
      return;
    case 18:
      uint64_t v43 = 0;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      uint64_t v44 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v45 = 0;
        float32x4_t v46 = (const float *)xmmword_24854FDE0 + v43;
        float32x4_t v47 = vld1q_dup_f32(v46);
        do
        {
          v44[v45] = vmulq_f32(vmulq_f32(v10[v45], v47), (float32x4_t)xmmword_24854FDE0[v45]);
          ++v45;
        }
        while (v45 != 2);
        ++v43;
        v44 += 2;
        v10 += 16;
      }
      while (v43 != 8);
      uint64_t v93 = v3;
      float v94 = v2;
      float32x4_t v48 = (float32x4_t *)v105;
      uint64_t v97 = 8;
      char v98 = &v110;
      uint64_t v95 = 8;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F9D0, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v105);
      uint64_t v97 = 8;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      uint64_t v96 = &v110;
      sub_2484065E0(&v97, &v95);
      uint64_t v97 = 8;
      char v98 = &v110;
      float32x4_t v49 = sub_24844F9D0;
      goto LABEL_51;
    case 19:
      uint64_t v50 = 0;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      float32x4_t v51 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v52 = 0;
        char v53 = (const float *)&xmmword_2484DCDB0 + v50;
        float32x4_t v54 = vld1q_dup_f32(v53);
        do
        {
          v51[v52] = vmulq_f32(vmulq_f32(v10[v52], v54), (float32x4_t)xmmword_24854FDE0[v52]);
          ++v52;
        }
        while (v52 != 2);
        ++v50;
        v51 += 2;
        v10 += 16;
      }
      while (v50 != 4);
      uint64_t v97 = 8;
      char v98 = &v110;
      uint64_t v95 = 8;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844FA44, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v104);
      uint64_t v97 = 8;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 4;
      uint64_t v96 = &v110;
      sub_248405F04(&v97, &v95);
      sub_248405FAC(&v110, 4, v9, v8, v104);
      return;
    case 20:
      uint64_t v55 = 0;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      uint64_t v56 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v57 = 0;
        char v58 = (const float *)&xmmword_2484DCDB0 + v55;
        float32x4_t v59 = vld1q_dup_f32(v58);
        do
        {
          v56[v57] = vmulq_f32(vmulq_f32(v10[v57], v59), (float32x4_t)xmmword_24854FDE0[v57]);
          ++v57;
        }
        while (v57 != 2);
        ++v55;
        v56 += 2;
        v10 += 16;
      }
      while (v55 != 4);
      uint64_t v93 = v3;
      float v94 = v2;
      float32x4_t v48 = v104;
      uint64_t v97 = 8;
      char v98 = &v110;
      uint64_t v95 = 4;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405F04(&v97, &v95);
      sub_248405FAC((float32x4_t *)&v99, 4, &v110, 4, v104);
      uint64_t v97 = 4;
      char v98 = &v110;
      uint64_t v95 = 8;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248407100(&v97, &v95);
      uint64_t v97 = 8;
      char v98 = (float32x4_t *)&v99;
      float v60 = sub_24844FA44;
      goto LABEL_50;
    case 21:
      float v61 = &v110;
      bzero(&v110, 0x400uLL);
      for (uint64_t i = 0; i != 16; ++i)
      {
        uint64_t v63 = 0;
        float v64 = (const float *)xmmword_24854FE00 + i;
        float32x4_t v65 = vld1q_dup_f32(v64);
        do
        {
          v61[v63] = vmulq_f32(vmulq_f32(v10[v63], v65), (float32x4_t)xmmword_24854FE00[v63]);
          ++v63;
        }
        while (v63 != 4);
        v61 += 4;
        v10 += 32;
      }
      uint64_t v93 = v8;
      float v94 = v9;
      float32x4_t v48 = (float32x4_t *)v107;
      uint64_t v97 = 16;
      char v98 = &v110;
      uint64_t v95 = 16;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F95C, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v107);
      uint64_t v97 = 16;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      uint64_t v96 = &v110;
      sub_248406244(&v97, &v95);
      uint64_t v97 = 16;
      char v98 = &v110;
      float32x4_t v49 = sub_24844F95C;
      goto LABEL_68;
    case 22:
      uint64_t v66 = 0;
      long long v141 = 0u;
      long long v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      uint64_t v67 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v68 = 0;
        float v69 = (const float *)xmmword_24854FDE0 + v66;
        float32x4_t v70 = vld1q_dup_f32(v69);
        do
        {
          v67[v68] = vmulq_f32(vmulq_f32(v10[v68], v70), (float32x4_t)xmmword_24854FE00[v68]);
          ++v68;
        }
        while (v68 != 4);
        ++v66;
        v67 += 4;
        v10 += 32;
      }
      while (v66 != 8);
      uint64_t v93 = v3;
      float v94 = v2;
      float32x4_t v48 = (float32x4_t *)v106;
      uint64_t v97 = 16;
      char v98 = &v110;
      uint64_t v95 = 16;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F9D0, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v106);
      uint64_t v97 = 16;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      uint64_t v96 = &v110;
      sub_24840632C(&v97, &v95);
      uint64_t v97 = 8;
      char v98 = &v110;
      float v60 = sub_24844F95C;
LABEL_50:
      float32x4_t v49 = v60;
LABEL_51:
      uint64_t v71 = 8;
      goto LABEL_75;
    case 23:
      uint64_t v72 = 0;
      long long v141 = 0u;
      long long v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      float v73 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v74 = 0;
        float v75 = (const float *)xmmword_24854FDE0 + v72;
        float32x4_t v76 = vld1q_dup_f32(v75);
        do
        {
          v73[v74] = vmulq_f32(vmulq_f32(v10[v74], v76), (float32x4_t)xmmword_24854FE00[v74]);
          ++v74;
        }
        while (v74 != 4);
        ++v72;
        v73 += 4;
        v10 += 32;
      }
      while (v72 != 8);
      uint64_t v93 = v3;
      float v94 = v2;
      float32x4_t v48 = (float32x4_t *)v106;
      uint64_t v97 = 16;
      char v98 = &v110;
      uint64_t v95 = 8;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_24840632C(&v97, &v95);
      uint64_t v97 = 8;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      uint64_t v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F95C, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v106);
      uint64_t v97 = 8;
      char v98 = &v110;
      uint64_t v95 = 16;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248406414(&v97, &v95);
      uint64_t v97 = 16;
      char v98 = (float32x4_t *)&v99;
      char v77 = sub_24844F9D0;
      goto LABEL_67;
    case 24:
      uint64_t v78 = &v110;
      bzero(&v110, 0x1000uLL);
      for (uint64_t j = 0; j != 32; ++j)
      {
        uint64_t v80 = 0;
        uint64_t v81 = (const float *)xmmword_24854FE40 + j;
        float32x4_t v82 = vld1q_dup_f32(v81);
        do
        {
          v78[v80] = vmulq_f32(vmulq_f32(v10[v80], v82), (float32x4_t)xmmword_24854FE40[v80]);
          ++v80;
        }
        while (v80 != 8);
        v78 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      float v94 = v9;
      float32x4_t v48 = (float32x4_t *)v109;
      uint64_t v97 = 32;
      char v98 = &v110;
      uint64_t v95 = 32;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F6EC, (uint64_t)&v97, (uint64_t)&v95, 32, (uint64_t)v109);
      uint64_t v97 = 32;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 32;
      uint64_t v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)&v97, (uint64_t)&v95, 32, 32);
      uint64_t v97 = 32;
      char v98 = &v110;
      float32x4_t v49 = sub_24844F6EC;
      goto LABEL_74;
    case 25:
      char v83 = &v110;
      bzero(&v110, 0x800uLL);
      for (uint64_t k = 0; k != 16; ++k)
      {
        uint64_t v85 = 0;
        uint64_t v86 = (const float *)xmmword_24854FE00 + k;
        float32x4_t v87 = vld1q_dup_f32(v86);
        do
        {
          v83[v85] = vmulq_f32(vmulq_f32(v10[v85], v87), (float32x4_t)xmmword_24854FE40[v85]);
          ++v85;
        }
        while (v85 != 8);
        v83 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      float v94 = v9;
      float32x4_t v48 = (float32x4_t *)v108;
      uint64_t v97 = 32;
      char v98 = &v110;
      uint64_t v95 = 32;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F95C, (uint64_t)&v97, (uint64_t)&v95, 32, (uint64_t)v108);
      uint64_t v97 = 32;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      uint64_t v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)&v97, (uint64_t)&v95, 16, 32);
      uint64_t v97 = 16;
      char v98 = &v110;
      char v77 = sub_24844F6EC;
LABEL_67:
      float32x4_t v49 = v77;
LABEL_68:
      uint64_t v71 = 16;
      goto LABEL_75;
    case 26:
      uint64_t v88 = &v110;
      bzero(&v110, 0x800uLL);
      for (uint64_t m = 0; m != 16; ++m)
      {
        uint64_t v90 = 0;
        float v91 = (const float *)xmmword_24854FE00 + m;
        float32x4_t v92 = vld1q_dup_f32(v91);
        do
        {
          v88[v90] = vmulq_f32(vmulq_f32(v10[v90], v92), (float32x4_t)xmmword_24854FE40[v90]);
          ++v90;
        }
        while (v90 != 8);
        v88 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      float v94 = v9;
      float32x4_t v48 = (float32x4_t *)v108;
      uint64_t v97 = 32;
      char v98 = &v110;
      uint64_t v95 = 16;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)&v97, (uint64_t)&v95, 16, 32);
      uint64_t v97 = 16;
      char v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      uint64_t v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F6EC, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v108);
      uint64_t v97 = 16;
      char v98 = &v110;
      uint64_t v95 = 32;
      uint64_t v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24844F878, (uint64_t)&v97, (uint64_t)&v95, 32, 16);
      uint64_t v97 = 32;
      char v98 = (float32x4_t *)&v99;
      float32x4_t v49 = sub_24844F95C;
LABEL_74:
      uint64_t v71 = 32;
LABEL_75:
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49, (uint64_t)&v97, (uint64_t)&v93, v71, (uint64_t)v48);
      break;
    default:
      return;
  }
}

float sub_24844F598(uint64_t a1, __int32 *a2, uint64_t a3, uint64_t a4, int32x4_t *a5, float32x2_t a6, double a7, double a8, float32x2_t a9)
{
  uint64_t v9 = 0;
  a6.i32[0] = *a2;
  LODWORD(a7) = a2[a1];
  a9.i32[0] = a2[2 * a1];
  *(float32x2_t *)v10.i8 = vadd_f32(a6, a9);
  float32x2_t v11 = vsub_f32(a6, a9);
  v10.u64[1] = (unint64_t)v11;
  v11.f32[0] = *(float *)&a7 + *(float *)&a2[3 * a1];
  *(float *)&a7 = *(float *)&a7 * 1.4142;
  float32x2_t v12 = vsub_f32(*(float32x2_t *)&a7, v11);
  *(float32x2_t *)v13.i8 = vadd_f32(*(float32x2_t *)&a7, v11);
  v13.u64[1] = (unint64_t)v12;
  int32x4_t v14 = vuzp1q_s32(v10, v13);
  *a5 = v14;
  char v15 = 1;
  do
  {
    char v16 = v15;
    v14.i32[0] = dword_2484DDA28[v9];
    uint64_t v17 = (const float *)&a5->i32[v9];
    float32x2_t v18 = vld1_dup_f32(v17);
    float32x2x2_t v19 = (const float *)((char *)a5->i32 + ((4 * v9) | 8));
    float32x2_t v20 = vld1_dup_f32(v19);
    *(_DWORD *)(a4 + 4 * v9 * a3) = vmla_n_f32(v18, v20, *(float *)v14.i32).u32[0];
    *(_DWORD *)(a4 + 4 * (v9 ^ 3) * a3) = vmls_lane_f32(v18, v20, *(float32x2_t *)v14.i8, 0).u32[0];
    uint64_t v9 = 1;
    char v15 = 0;
  }
  while ((v16 & 1) != 0);
  return *(float *)v14.i32;
}

float32_t sub_24844F644(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  uint64_t v5 = 0;
  float32x2_t v6 = a2[a1];
  float32x2_t v7 = *(float32x2_t *)((char *)a2 + 4 * a1);
  float32x2_t v8 = *(float32x2_t *)((char *)a2 + 12 * a1);
  float32x2_t v9 = vadd_f32(*a2, v6);
  float32x2_t v10 = vsub_f32(*a2, v6);
  *a5 = v9;
  a5[1] = v10;
  float32x2_t v11 = vadd_f32(v7, v8);
  float32x2_t v12 = vmul_f32(v7, (float32x2_t)vdup_n_s32(0x3FB504F3u));
  float32x2_t v13 = vadd_f32(v12, v11);
  float32x2_t v14 = vsub_f32(v12, v11);
  a5[2] = v13;
  a5[3] = v14;
  char v15 = 1;
  do
  {
    char v16 = v15;
    v14.i32[0] = dword_2484DDA28[v5];
    float32x2_t v17 = *(float32x2_t *)((char *)a5 + ((8 * v5) | 0x10));
    float32x2_t v18 = vmls_lane_f32(a5[v5], v17, v14, 0);
    *(float32x2_t *)(a4 + 4 * v5 * a3) = vmla_n_f32(a5[v5], v17, v14.f32[0]);
    *(float32x2_t *)(a4 + 4 * (v5 ^ 3) * a3) = v18;
    uint64_t v5 = 1;
    char v15 = 0;
  }
  while ((v16 & 1) != 0);
  return v14.f32[0];
}

void sub_24844F6EC(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float32x2_t v9 = a4 + 32;
    float32x2_t v10 = a4 + 16;
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v11 = 0;
      uint64_t v13 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      char v16 = (float32x4_t *)(v12 + v7);
      uint64_t v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        char v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 16);
      uint64_t v18 = v12 + 4 * v13;
      for (uint64_t i = 16; i != 32; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_248406BF8(a4, 4, a4, 4, v9);
      for (uint64_t j = 0; j != -15; --j)
        a4[j + 31] = vaddq_f32(a4[j + 31], a4[j + 30]);
      *float32x2_t v10 = vmulq_f32(*v10, v27);
      sub_248406BF8(v10, 4, v10, 4, v9);
      uint64_t v22 = 0;
      uint64_t v23 = v15 + 124 * v14;
      do
      {
        v21.i32[0] = dword_24854F61C[v22];
        float v24 = &a4[v22];
        float32x4_t v25 = v24[16];
        float32x4_t v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 16);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void *sub_24844F878(void *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 12;
    uint64_t v7 = 8;
    uint64_t v8 = 4;
    do
    {
      if (a4)
      {
        uint64_t v9 = 0;
        for (unint64_t i = 0; i < a4; i += 4)
        {
          uint64_t v11 = result[1];
          int32x4_t v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          int32x4_t v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          int32x4_t v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          int32x4_t v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          int32x4_t v17 = vzip1q_s32(v13, v15);
          float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          int32x4_t v19 = vzip2q_s32(v13, v15);
          float32x2_t v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          uint64_t v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          uint64_t v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_24844F95C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406BF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24844F9D0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248405FAC((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24844FA44(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248407054((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

double sub_24844FAB8(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v5 = a3 + 8;
  uint64_t v9 = 8;
  float32x2_t v10 = a3;
  sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24845017C, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  uint64_t v9 = 8;
  float32x2_t v10 = a3;
  uint64_t v7 = 4;
  uint64_t v8 = a2;
  sub_248405F04(&v9, &v7);
  uint64_t v9 = 4;
  float32x2_t v10 = a3;
  sub_248408240(4, a2, &v9, v5);
  uint64_t v9 = 4;
  float32x2_t v10 = a3;
  uint64_t v7 = 8;
  uint64_t v8 = a2;
  *(void *)&double result = sub_248407100(&v9, &v7).u64[0];
  return result;
}

void sub_24844FB68(void *a1, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&a4[256];
    float32x2_t v10 = a4 + 512;
    uint64_t v11 = (uint64_t)&a4[384];
    int32x4_t v12 = a4 + 1;
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v13 = 0;
      int32x4_t v14 = (float32x4_t *)(a1[1] + v7);
      uint64_t v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        int32x4_t v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      float32x2x2_t v16 = a4;
      for (uint64_t i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_24843D0F8(v9, v10);
      float32x2x2_t v18 = a4;
      for (uint64_t j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (uint64_t k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_24854FBE0[k]);
      sub_24843D0F8(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      uint64_t v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      uint64_t v22 = a4;
      do
      {
        float32x4_t *v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      uint64_t v23 = 0;
      float v24 = v12;
      do
      {
        *float v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (uint64_t m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_24844FD58(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_24843D0F8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24844FE24(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = (float32x4_t *)(a4 + 1024);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_24843D234(a4, v10);
      for (uint64_t i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24844FF04(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = (float32x4_t *)(a4 + 512);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_24843D368(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24844FFD0(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = (float32x4_t *)(a4 + 128);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2484085D8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24845009C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = (float32x4_t *)(a4 + 256);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2484084A4(a4, v10);
      for (uint64_t i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_24845017C(void *result, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      uint64_t v14 = 0;
      float32x4_t v15 = (float32x4_t *)(result[1] + v4);
      uint64_t v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      uint64_t v17 = 0;
      float32x4_t v18 = *a4;
      float32x4_t v19 = a4[1];
      float32x4_t v21 = a4[2];
      float32x4_t v20 = a4[3];
      float32x4_t v22 = vaddq_f32(*a4, v20);
      float32x4_t v23 = vaddq_f32(v19, v21);
      float32x4_t v24 = vaddq_f32(v22, v23);
      float32x4_t v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      float32x4_t v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      float32x4_t v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      float32x4_t v28 = vaddq_f32(v26, v27);
      float32x4_t v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      float32x4_t v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

uint64_t sub_248450260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, void *a11)
{
  uint64_t v11 = (void *)MEMORY[0x270FA5388]();
  uint64_t v114 = v12;
  uint64_t v112 = v13;
  uint64_t v128 = v14;
  uint64_t v121 = v15;
  float32x2x2_t v105 = v16;
  v133[512] = *MEMORY[0x263EF8340];
  uint64_t v17 = v11[5];
  float32x4_t v18 = (float32x4_t *)(v17 + 1388544 * a10);
  int32x4_t v106 = v19;
  unint64_t v20 = v19[2];
  unint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  unint64_t v24 = v21[2];
  unint64_t v25 = v21[3] + v23;
  uint64_t v98 = a11[8];
  uint64_t v99 = a11[2];
  uint64_t v97 = a11[7];
  uint64_t v27 = v11[2];
  uint64_t v26 = v11[3];
  uint64_t v101 = a11[3];
  int32x4_t v102 = v18 + 49152;
  int32x4_t v100 = v18 + 50176;
  int32x4_t v103 = v18 + 52224;
  int32x4_t v104 = v18 + 51200;
  bzero(v133, 0x1000uLL);
  bzero(v132, 0x1000uLL);
  bzero(v131, 0x1000uLL);
  uint64_t v113 = v23;
  if (v23 < v25)
  {
    unint64_t v28 = v24 + v22;
    uint64_t v118 = (uint64_t)&v18[0x4000];
    uint64_t v117 = (uint64_t)&v18[0x8000];
    unint64_t v115 = 0;
    long long v116 = v18 + 53248;
    unint64_t v29 = v22 + v23 * (v20 >> 3);
    float32x4_t v30 = (float *)(v26 + 3 * v27 + 4 * v29);
    uint64_t v31 = v20 >> 3;
    uint64_t v32 = (float *)(v26 + v27 + 4 * v29);
    uint64_t v33 = (float *)(v26 + 4 * v29);
    uint64_t v34 = (float *)(v26 + 2 * v27 + 4 * v29);
    uint64_t v111 = v17 + 1388544 * a10;
    unint64_t v126 = v23;
    unint64_t v120 = v22;
    uint64_t v35 = v128;
    uint64_t v36 = v111;
    unint64_t v119 = v28;
    while (1)
    {
      v109 = v34;
      float32x4_t v110 = v30;
      float32x2x2_t v107 = v33;
      int32x4_t v108 = v32;
      if (v22 < v28) {
        break;
      }
LABEL_45:
      float32x4_t v30 = &v110[v31];
      uint64_t v34 = &v109[v31];
      uint64_t v32 = &v108[v31];
      uint64_t v33 = &v107[v31];
      if (++v126 == v25) {
        goto LABEL_48;
      }
    }
    unint64_t v37 = v105[2];
    uint64_t v38 = v37 * (v106[1] + 8 * v126);
    uint64_t v124 = v105[3] + v38 + 4 * *v106;
    uint64_t v125 = v105[8] + v38 + 4 * *v106;
    uint64_t v122 = v37 >> 2;
    uint64_t v123 = v105[13] + v38 + 4 * *v106;
    long long v129 = v34;
    long long v130 = v32;
    uint64_t v39 = v33;
    unint64_t v40 = v22;
    while (v35)
    {
      unsigned int v41 = *(unsigned __int8 *)(*(void *)(v35 + 24) + *(void *)(v35 + 16) * v126 + v40);
      if (v41)
      {
        long long v127 = v39;
        unsigned int v42 = v41 >> 1;
        goto LABEL_9;
      }
LABEL_44:
      ++v40;
      ++v30;
      ++v129;
      ++v130;
      ++v39;
      if (v40 == v28) {
        goto LABEL_45;
      }
    }
    long long v127 = v39;
    unsigned int v42 = 0;
LABEL_9:
    unint64_t v43 = byte_2485534EC[v42];
    sub_24844D0E8(v42, (float32x4_t *)(v125 + 32 * v40), v122, v36, v116);
    sub_24844E6FC();
    sub_24844D0E8(v42, (float32x4_t *)(v124 + 32 * v40), v122, v118, v116);
    sub_24844E6FC();
    sub_24844D0E8(v42, (float32x4_t *)(v123 + 32 * v40), v122, v117, v116);
    sub_24844E6FC();
    if (v128)
    {
      uint64_t v44 = *(void *)(v114 + 64);
      float v45 = *(float *)(v114 + 44) * (float)*(int *)(v114 + 36);
      float v46 = 1.0 / (float)(*(float *)(v44 + 60) * v45);
      float v47 = 1.0 / (float)(*(float *)(v44 + 68) * v45);
    }
    else
    {
      float v46 = 1.0;
      float v47 = 1.0;
    }
    uint64_t v39 = v127;
    uint64_t v48 = 0;
    uint64_t v49 = *(void *)(v121 + 40);
    uint64_t v50 = v121 + 24 * v42;
    uint64_t v51 = v49 + 4 * *(void *)(v50 + 72);
    uint64_t v52 = v49 + 4 * *(void *)(v50 + 88);
    unint64_t v53 = byte_248553507[v42];
    if (v43 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v43;
    }
    if (v53 <= 1) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = byte_248553507[v42];
    }
    uint64_t v56 = 4 * v43;
    uint64_t v57 = (float *)v131;
    char v58 = (float *)v132;
    float32x4_t v59 = (float *)v133;
    float v60 = v127;
    float v62 = v129;
    float v61 = v130;
    uint64_t v63 = v30;
    do
    {
      float v64 = v59;
      float32x4_t v65 = v58;
      uint64_t v66 = v57;
      uint64_t v67 = v60;
      uint64_t v68 = v61;
      float v69 = v62;
      float32x4_t v70 = v63;
      uint64_t v71 = v54;
      do
      {
        float v72 = *v64++;
        float v73 = v72;
        *v67++ = v46 * v72;
        float v74 = *v65++;
        *v68++ = v46 * v74;
        *v69++ = v47 * v73;
        float v75 = *v66++;
        *v70++ = v47 * v75;
        --v71;
      }
      while (v71);
      ++v48;
      uint64_t v63 = (float *)((char *)v63 + v31 * 4);
      float v62 = (float *)((char *)v62 + v31 * 4);
      float v61 = (float *)((char *)v61 + v31 * 4);
      float v60 = (float *)((char *)v60 + v31 * 4);
      uint64_t v57 = (float *)((char *)v57 + v56);
      char v58 = (float *)((char *)v58 + v56);
      float32x4_t v59 = (float *)((char *)v59 + v56);
    }
    while (v48 != v55);
    unint64_t v22 = v120;
    unint64_t v28 = v119;
    if (v120 + v43 > v119)
    {
      uint64_t v35 = v128;
      uint64_t v36 = v111;
    }
    else
    {
      uint64_t v35 = v128;
      uint64_t v36 = v111;
      if (v113 + v53 <= v25)
      {
        if (v53 >= v43) {
          unint64_t v76 = v43;
        }
        else {
          unint64_t v76 = v53;
        }
        if (v53 <= v43) {
          unint64_t v77 = v43;
        }
        else {
          unint64_t v77 = v53;
        }
        if (v76)
        {
          uint64_t v78 = 0;
          char v79 = (_DWORD *)v111;
          do
          {
            uint64_t v80 = v79;
            unint64_t v81 = v77;
            float32x4_t v82 = v79;
            do
            {
              *v82++ = 0;
              v80[0x10000] = 0;
              v80[0x20000] = 0;
              uint64_t v80 = v82;
              --v81;
            }
            while (v81);
            ++v78;
            v79 += 8 * v77;
          }
          while (v78 != v76);
        }
        float v83 = 1.0;
        float v84 = 1.0;
        if (v112) {
          float v84 = (float)*(int *)(*(void *)(v112 + 24) + *(void *)(v112 + 16) * v126 + 4 * v40);
        }
        if (v128) {
          float v83 = v84 * (float)(*(float *)(v114 + 44) * 128.0);
        }
        unint64_t v85 = (v43 * (unint64_t)v53) << 6;
        if (v85)
        {
          uint64_t v86 = 0;
          unint64_t v87 = 0;
          unint64_t v88 = v111 + 4 * v115;
          do
          {
            float32x4_t v89 = *(float32x4_t *)(v111 + v86);
            float32x4_t v90 = *(float32x4_t *)(v111 + v86 + 0x40000);
            float32x4_t v91 = *(float32x4_t *)(v111 + v86 + 0x80000);
            float32x4_t v92 = vmulq_n_f32(*(float32x4_t *)(v51 + v86), v83);
            float32x4_t v93 = vmulq_n_f32(*(float32x4_t *)(v52 + v86), v83);
            *(float32x4_t *)(v88 + v86 + 786432) = vmulq_f32(v89, v92);
            *(float32x4_t *)(v88 + v86 + 802816) = vmulq_f32(v90, v92);
            *(float32x4_t *)(v88 + v86 + 819200) = vmulq_f32(v89, v93);
            *(float32x4_t *)(v88 + v86 + 835584) = vmulq_f32(v91, v93);
            v87 += 4;
            v86 += 16;
          }
          while (v87 < v85);
          v115 += v87;
        }
      }
    }
    goto LABEL_44;
  }
  unint64_t v115 = 0;
LABEL_48:
  uint64_t v94 = (int)(v113 >> 3);
  uint64_t v95 = v98 + v97 * v94;
  *(unsigned char *)(v101 + v99 * v94 + (int)(v22 >> 3)) = sub_24844CE7C(v102, v100, v115, a9, 0.0);
  uint64_t result = sub_24844CE7C(v104, v103, v115, a9, 1.0);
  *(unsigned char *)(v95 + (int)(v22 >> 3)) = result;
  return result;
}

float sub_248450898(uint64_t a1, float result, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  *(_DWORD *)(a1 + 32) = 0;
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    float32x2_t v10 = *(int32x4_t **)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v11 - *(void *)a1;
    if (v11 == *(void *)a1)
    {
      float32x4_t v29 = 0uLL;
    }
    else
    {
      unint64_t v13 = 0;
      *(float *)&a9 = (float)v9;
      int32x4_t v14 = vdupq_n_s32(0xC0D55555);
      float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
      float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
      float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
      float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
      float32x4_t v19 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
      float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
      float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      unint64_t v22 = v12 >> 2;
      v23.i64[0] = 0x7F0000007FLL;
      v23.i64[1] = 0x7F0000007FLL;
      __asm { FMOV            V20.4S, #-1.0 }
      float32x4_t v29 = 0uLL;
      do
      {
        int32x4_t v30 = *v10++;
        float32x4_t v31 = vcvtq_f32_s32(v30);
        int32x4_t v32 = (int32x4_t)vmulq_n_f32(v31, 1.0 / (float)v9);
        int32x4_t v33 = vaddq_s32(v32, v14);
        float32x4_t v34 = vaddq_f32((float32x4_t)vsubq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)v33, v23)), _Q20);
        float32x4_t v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32((float32x4_t)0, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v19, v34, vmlaq_f32(v16, v15, v34)), vmlaq_f32(v20, v34, vmlaq_f32(v18, v17, v34))), vcvtq_f32_s32(vshrq_n_s32(v33, 0x17uLL))), v31)), (int8x16_t)vceqq_f32(v21, v31)));
        v13 += 4;
      }
      while (v13 < v22);
    }
    uint64_t result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) + 0.0;
    *(float *)(a1 + 32) = result;
  }
  return result;
}

float sub_2484509B8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  float result = 0.0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6)
    {
      float32x4_t v7 = *(int32x4_t **)a1;
      unint64_t v8 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
      unint64_t v9 = *(int32x4_t **)a2;
      uint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
      unint64_t v11 = v10 >> 2;
      if (v8 <= v10 >> 2) {
        unint64_t v12 = v10 >> 2;
      }
      else {
        unint64_t v12 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
      }
      if (v12)
      {
        unint64_t v13 = 0;
        *(float *)&a4 = (float)(unint64_t)(v6 + v4);
        float v14 = 1.0 / *(float *)&a4;
        float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        int32x4_t v16 = vdupq_n_s32(0xC0D55555);
        v17.i64[0] = 0x7F0000007FLL;
        v17.i64[1] = 0x7F0000007FLL;
        __asm { FMOV            V5.4S, #-1.0 }
        float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
        float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
        float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
        float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
        float32x4_t v27 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
        float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
        float32x4_t v29 = 0uLL;
        do
        {
          int32x4_t v30 = 0uLL;
          if (v8 > v13) {
            int32x4_t v30 = *v7;
          }
          int32x4_t v31 = 0uLL;
          if (v11 > v13) {
            int32x4_t v31 = *v9;
          }
          float32x4_t v32 = vcvtq_f32_s32(vaddq_s32(v31, v30));
          int32x4_t v33 = (int32x4_t)vmulq_n_f32(v32, v14);
          int32x4_t v34 = vaddq_s32(v33, v16);
          float32x4_t v35 = vaddq_f32((float32x4_t)vsubq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)v34, v17)), _Q5);
          float32x4_t v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32((float32x4_t)0, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v27, v35, vmlaq_f32(v24, v23, v35)), vmlaq_f32(v28, v35, vmlaq_f32(v26, v25, v35))), vcvtq_f32_s32(vshrq_n_s32(v34, 0x17uLL))), v32)), (int8x16_t)vceqq_f32(v15, v32)));
          v13 += 4;
          ++v9;
          ++v7;
        }
        while (v13 < v12);
      }
      else
      {
        float32x4_t v29 = 0uLL;
      }
      return (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) - *(float *)(a1 + 32))
           - *(float *)(a2 + 32);
    }
  }
  return result;
}

float sub_248450B24(uint64_t a1, int32x4_t **a2)
{
  if (!*(void *)(a1 + 24)) {
    return 0.0;
  }
  unint64_t v2 = (unint64_t)a2[3];
  if (!v2) {
    return INFINITY;
  }
  uint64_t v3 = *(int32x4_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - *(void *)a1;
  if (v4 == *(void *)a1)
  {
    float32x4_t v17 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0;
    float v7 = 1.0 / (float)v2;
    unint64_t v8 = v5 >> 2;
    int32x4_t v9 = vdupq_n_s32(0xC0D55555);
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    int32x4_t v16 = *a2;
    float32x4_t v17 = 0uLL;
    v18.i64[0] = 0x7F0000007FLL;
    v18.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V18.4S, #-1.0 }
    do
    {
      int32x4_t v24 = 0uLL;
      if (((char *)a2[1] - (char *)*a2) >> 2 > v6) {
        int32x4_t v24 = *v16;
      }
      int32x4_t v25 = *v3++;
      int32x4_t v26 = (int32x4_t)vmulq_n_f32(vcvtq_f32_s32(v24), v7);
      int32x4_t v27 = vaddq_s32(v26, v9);
      float32x4_t v28 = vaddq_f32((float32x4_t)vsubq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)v27, v18)), _Q18);
      float32x4_t v17 = vmlsq_f32(v17, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vceqzq_s32(v24), v18, (int8x16_t)vaddq_f32(vdivq_f32(vmlaq_f32(v14, v28, vmlaq_f32(v11, v10, v28)), vmlaq_f32(v15, v28, vmlaq_f32(v13, v12, v28))), vcvtq_f32_s32(vshrq_n_s32(v27, 0x17uLL)))), (int8x16_t)vceqzq_s32(v25)), vcvtq_f32_s32(v25));
      v6 += 4;
      ++v16;
    }
    while (v6 < v8);
  }
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17)) - *(float *)(a1 + 32);
}

void sub_248450C74(uint64_t a1, int **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = v5 - *a2;
  if (v6 > (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2)
  {
    sub_2483EB1C4((char **)a1, v6);
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    unint64_t v6 = v5 - *a2;
  }
  if (v5 != v4)
  {
    float v7 = *(char **)a1;
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v6;
    }
    do
    {
      int v9 = *v4++;
      *(_DWORD *)v7 += v9;
      v7 += 4;
      --v8;
    }
    while (v8);
  }
  *(void *)(a1 + 24) += a2[3];
}

uint64_t sub_248450D04(uint64_t a1, uint64_t a2)
{
  if (*(float *)a2 < *(float *)a1) {
    return 1;
  }
  if (*(float *)a1 < *(float *)a2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < v3) {
    return 1;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  BOOL v8 = v5 >= v6 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
  unsigned int v9 = v6 < v5 || v8;
  if (v3 >= v4) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_248450D68(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v3 >> 1;
    float v7 = (_OWORD *)(result + 16 * (v3 >> 1));
    BOOL v8 = (_OWORD *)(a2 - 16);
    float result = sub_248450D04((uint64_t)v7, a2 - 16);
    if (result)
    {
      float v9 = *(float *)(a2 - 16);
      unsigned int v10 = *(_DWORD *)(a2 - 12);
      unsigned int v11 = *(_DWORD *)(a2 - 8);
      unsigned int v12 = *(_DWORD *)(a2 - 4);
      _OWORD *v8 = *v7;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v14 = v6 - 1;
          unint64_t v6 = (v6 - 1) >> 1;
          float32x4_t v13 = (_OWORD *)(v5 + 16 * v6);
          if (v9 >= *(float *)v13)
          {
            if (*(float *)v13 < v9) {
              break;
            }
            unsigned int v15 = *((_DWORD *)v13 + 1);
            if (v10 >= v15)
            {
              if (v15 < v10) {
                break;
              }
              unsigned int v16 = *((_DWORD *)v13 + 2);
              if (v11 >= v16 && (v16 < v11 || v12 >= *((_DWORD *)v13 + 3))) {
                break;
              }
            }
          }
          _OWORD *v7 = *v13;
          float v7 = (_OWORD *)(v5 + 16 * v6);
          if (v14 <= 1) {
            goto LABEL_15;
          }
        }
      }
      float32x4_t v13 = v7;
LABEL_15:
      *(float *)float32x4_t v13 = v9;
      *((_DWORD *)v13 + 1) = v10;
      *((_DWORD *)v13 + 2) = v11;
      *((_DWORD *)v13 + 3) = v12;
    }
  }
  return result;
}

void sub_248450E54(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v16 = v5 + 40 * a2;
      if (v4 != v16)
      {
        uint64_t v17 = a1[1];
        do
        {
          float32x4_t v19 = *(void **)(v17 - 40);
          v17 -= 40;
          int8x16_t v18 = v19;
          if (v19)
          {
            *(void *)(v4 - 32) = v18;
            operator delete(v18);
          }
          uint64_t v4 = v17;
        }
        while (v17 != v16);
      }
      a1[1] = v16;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      uint64_t v20 = v4 + 40 * v7;
      uint64_t v21 = 40 * a2 - 8 * ((v4 - *a1) >> 3);
      do
      {
        *(_DWORD *)(v4 + 32) = 0;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        v4 += 40;
        v21 -= 40;
      }
      while (v21);
      a1[1] = v20;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        sub_2483E92E8();
      }
      v22[4] = a1 + 2;
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        unint64_t v11 = 0x666666666666666;
      }
      else {
        unint64_t v11 = v10;
      }
      unsigned int v12 = (char *)sub_248403444(v11);
      float32x4_t v13 = &v12[40 * v6];
      v22[0] = v12;
      v22[1] = v13;
      v22[3] = &v12[40 * v14];
      uint64_t v15 = 40 * a2 - 40 * v6;
      do
      {
        *((_DWORD *)v13 + 8) = 0;
        *(_OWORD *)float32x4_t v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        v13 += 40;
        v15 -= 40;
      }
      while (v15);
      v22[2] = &v12[40 * a2];
      sub_2484490F4(a1, v22);
      sub_248449174((uint64_t)v22);
    }
  }
}

uint64_t **sub_248450FD4(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    _OWORD *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_2484510EC(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_2484510A0(void *a1)
{
  if (a1)
  {
    sub_2484510A0(*a1);
    sub_2484510A0(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_2484510EC(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_248451284(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        int v6 = *(void **)(v4 - 40);
        v4 -= 40;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 32) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t *sub_2484512EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (void (*)(uint64_t, void))a1[1];
    if (v3) {
      v3(a1[2], *(void *)(v2 - 16));
    }
    else {
      free(*(void **)(v2 - 16));
    }
  }
  return a1;
}

char *sub_248451340(char *result, char *a2, unint64_t a3, void *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    int v6 = result;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 1) < *((_DWORD *)result + 1))
      {
        uint64_t v7 = *(void *)result;
        *(void *)float result = *((void *)a2 - 1);
        *((void *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v20 = a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = (uint64_t)&result[8 * (a3 >> 1)];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_248451570((uint64_t)result, v22, v23, a4);
        int32x4_t v24 = &v20[v21];
        float result = (char *)sub_248451570((uint64_t)&v6[8 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v24);
        int32x4_t v25 = &v20[a3];
        int32x4_t v26 = v24;
        while (v26 != v25)
        {
          unsigned int v27 = *((_DWORD *)v26 + 1);
          unsigned int v28 = *((_DWORD *)v20 + 1);
          BOOL v29 = v27 >= v28;
          BOOL v30 = v27 < v28;
          unsigned int v31 = v29;
          if (v29) {
            float32x4_t v32 = v20;
          }
          else {
            float32x4_t v32 = v26;
          }
          v20 += v31;
          v26 += v30;
          *(void *)int v6 = *v32;
          v6 += 8;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v33 = 0;
              do
              {
                *(void *)&v6[v33 * 8] = v26[v33];
                ++v33;
              }
              while (&v26[v33] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          uint64_t v34 = 0;
          do
          {
            *(void *)&v6[v34 * 8] = v20[v34];
            ++v34;
          }
          while (&v20[v34] != v24);
        }
      }
      else
      {
        sub_248451340(result, v22, v23, a4, a5);
        sub_248451340(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_24845175C(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v9 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result;
        do
        {
          unsigned int v12 = *((_DWORD *)v11 + 3);
          unsigned int v13 = *((_DWORD *)v11 + 1);
          uint64_t v11 = v9;
          if (v12 < v13)
          {
            uint64_t v14 = *(void *)v9;
            uint64_t v15 = HIDWORD(*(void *)v11);
            uint64_t v16 = v10;
            while (1)
            {
              *(void *)&result[v16 + 8] = *(void *)&result[v16];
              if (!v16) {
                break;
              }
              unsigned int v17 = *(_DWORD *)&result[v16 - 4];
              v16 -= 8;
              if (v17 <= v15)
              {
                int8x16_t v18 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            int8x16_t v18 = result;
LABEL_15:
            *(void *)int8x16_t v18 = v14;
          }
          unint64_t v9 = v11 + 8;
          v10 += 8;
        }
        while (v11 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_248451570(uint64_t result, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      void *v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      unsigned int v8 = *(_DWORD *)(a2 - 4);
      unsigned int v9 = *(_DWORD *)(result + 4);
      BOOL v10 = v8 >= v9;
      if (v8 >= v9) {
        uint64_t v11 = (void *)result;
      }
      else {
        uint64_t v11 = (void *)(a2 - 8);
      }
      *a4 = *v11;
      uint64_t v4 = a4 + 1;
      if (v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = result + 8 * (a3 >> 1);
      sub_248451340(result, v19, a3 >> 1, a4, a3 >> 1);
      float result = sub_248451340(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v20 = v6 + 8 * (a3 >> 1);
      while (v20 != a2)
      {
        BOOL v21 = *(_DWORD *)(v20 + 4) >= *(_DWORD *)(v6 + 4);
        if (*(_DWORD *)(v20 + 4) >= *(_DWORD *)(v6 + 4)) {
          uint64_t v22 = (void *)v6;
        }
        else {
          uint64_t v22 = (void *)v20;
        }
        v20 += 8 * (*(_DWORD *)(v20 + 4) < *(_DWORD *)(v6 + 4));
        v6 += 8 * v21;
        *v4++ = *v22;
        if (v6 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              v4[v23] = *(void *)(v20 + v23 * 8);
              ++v23;
            }
            while (v20 + v23 * 8 != a2);
          }
          return result;
        }
      }
      if (v6 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          v4[v24] = *(void *)(v6 + v24 * 8);
          ++v24;
        }
        while (v6 + v24 * 8 != v19);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 8;
      *a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          uint64_t v15 = v6;
          uint64_t v16 = v14;
          uint64_t v6 = v12;
          unsigned int v17 = ++v14;
          if (*(_DWORD *)(v15 + 12) < *((_DWORD *)v16 + 1))
          {
            v16[1] = *v16;
            unsigned int v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                unsigned int v17 = (void *)((char *)a4 + v18);
                if (*(_DWORD *)(v15 + 12) >= *(_DWORD *)((char *)a4 + v18 - 4)) {
                  break;
                }
                *unsigned int v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  unsigned int v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t v12 = v6 + 8;
          *unsigned int v17 = *(void *)v6;
          v13 += 8;
        }
        while (v6 + 8 != a2);
      }
    }
  }
  return result;
}

char *sub_24845175C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (*((_DWORD *)a2 + 1) >= *((_DWORD *)v11 + 1))
      {
        v11 += 8;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          uint64_t v73 = *(void *)v11;
          *(void *)uint64_t v11 = *(void *)a2;
          *(void *)a2 = v73;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = a4 + 1;
        }
        uint64_t v21 = v22 >> 1;
        uint64_t v15 = &v11[8 * (v22 >> 1)];
        uint64_t v14 = a3;
        if (a3 != a2)
        {
          unint64_t v23 = (a3 - a2) >> 3;
          uint64_t v14 = a2;
          do
          {
            unint64_t v24 = v23 >> 1;
            int32x4_t v25 = &v14[8 * (v23 >> 1)];
            unsigned int v26 = *((_DWORD *)v25 + 1);
            unsigned int v27 = v25 + 8;
            v23 += ~(v23 >> 1);
            if (v26 < *((_DWORD *)v15 + 1)) {
              uint64_t v14 = v27;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        uint64_t v13 = (v14 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v12 = v8;
        }
        else {
          uint64_t v12 = v8 + 1;
        }
        uint64_t v13 = v12 >> 1;
        uint64_t v14 = &a2[8 * (v12 >> 1)];
        uint64_t v15 = a2;
        if (a2 != v11)
        {
          unint64_t v16 = (a2 - v11) >> 3;
          uint64_t v15 = v11;
          do
          {
            unint64_t v17 = v16 >> 1;
            uint64_t v18 = &v15[8 * (v16 >> 1)];
            unsigned int v19 = *((_DWORD *)v18 + 1);
            unint64_t v20 = v18 + 8;
            v16 += ~(v16 >> 1);
            if (*((_DWORD *)v14 + 1) < v19) {
              unint64_t v16 = v17;
            }
            else {
              uint64_t v15 = v20;
            }
          }
          while (v16);
        }
        uint64_t v21 = (v15 - v11) >> 3;
      }
      unsigned int v28 = v14;
      if (v15 != a2)
      {
        unsigned int v28 = v15;
        if (a2 != v14)
        {
          if (v15 + 8 == a2)
          {
            uint64_t v75 = *(void *)v15;
            uint64_t v77 = v21;
            int64_t v35 = v14 - a2;
            char v79 = a6;
            uint64_t v36 = a3;
            uint64_t v37 = v13;
            memmove(v15, a2, v14 - a2);
            uint64_t v13 = v37;
            uint64_t v21 = v77;
            a6 = v79;
            a3 = v36;
            unsigned int v28 = &v15[v35];
            *(void *)unsigned int v28 = v75;
          }
          else if (a2 + 8 == v14)
          {
            uint64_t v38 = *((void *)v14 - 1);
            unsigned int v28 = v15 + 8;
            if (v14 - 8 != v15)
            {
              uint64_t v78 = v21;
              uint64_t v80 = a6;
              uint64_t v39 = a3;
              uint64_t v40 = v13;
              uint64_t v76 = *((void *)v14 - 1);
              memmove(v15 + 8, v15, v14 - 8 - v15);
              uint64_t v13 = v40;
              uint64_t v38 = v76;
              uint64_t v21 = v78;
              a3 = v39;
              a6 = v80;
            }
            *(void *)uint64_t v15 = v38;
          }
          else
          {
            uint64_t v29 = (a2 - v15) >> 3;
            if (v29 == (v14 - a2) >> 3)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = *(void *)&v15[v30];
                *(void *)&v15[v30] = *(void *)&a2[v30];
                uint64_t v32 = (uint64_t)&v15[v30 + 8];
                *(void *)&a2[v30] = v31;
                uint64_t v33 = (uint64_t)&a2[v30 + 8];
                v30 += 8;
              }
              while ((char *)v32 != a2 && v33 != (void)v14);
              unsigned int v28 = a2;
            }
            else
            {
              uint64_t v41 = (v14 - a2) >> 3;
              uint64_t v42 = (a2 - v15) >> 3;
              do
              {
                uint64_t v43 = v42;
                uint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                uint64_t v44 = &v15[8 * v42];
                do
                {
                  uint64_t v46 = *((void *)v44 - 1);
                  v44 -= 8;
                  uint64_t v45 = v46;
                  float v47 = &v44[8 * v29];
                  uint64_t v48 = v44;
                  do
                  {
                    uint64_t v49 = v48;
                    uint64_t v48 = v47;
                    *(void *)uint64_t v49 = *(void *)v47;
                    BOOL v50 = __OFSUB__(v29, (v14 - v47) >> 3);
                    uint64_t v52 = v29 - ((v14 - v47) >> 3);
                    char v51 = (v52 < 0) ^ v50;
                    float v47 = &v15[8 * v52];
                    if (v51) {
                      float v47 = &v48[8 * v29];
                    }
                  }
                  while (v47 != v44);
                  *(void *)uint64_t v48 = v45;
                }
                while (v44 != v15);
              }
              unsigned int v28 = &v15[8 * ((v14 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v21;
      v8 -= v13;
      if (v21 + v13 >= a4 + v8)
      {
        uint64_t v56 = a4;
        uint64_t v57 = v13;
        uint64_t v54 = a6;
        float result = (char *)sub_24845175C(v28, v14, a3, v56, v8, a6, a7);
        uint64_t v14 = v15;
        uint64_t v8 = v57;
        a4 = v21;
        a3 = v28;
      }
      else
      {
        unint64_t v53 = v11;
        uint64_t v54 = a6;
        uint64_t v55 = a3;
        float result = (char *)sub_24845175C(v53, v15, v28, v21, v13, a6, a7);
        a3 = v55;
        uint64_t v11 = v28;
      }
      a2 = v14;
      a6 = v54;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v65 = 0;
        do
        {
          *(void *)&a6[v65] = *(void *)&v11[v65];
          v65 += 8;
        }
        while (&v11[v65] != a2);
        uint64_t v66 = &a6[v65];
        if (v66 != a6)
        {
          while (a2 != a3)
          {
            unsigned int v67 = *((_DWORD *)a2 + 1);
            unsigned int v68 = *((_DWORD *)a6 + 1);
            BOOL v69 = v67 >= v68;
            BOOL v70 = v67 < v68;
            unsigned int v71 = v69;
            if (v69) {
              float v72 = a6;
            }
            else {
              float v72 = a2;
            }
            a6 += 8 * v71;
            a2 += 8 * v70;
            *(void *)uint64_t v11 = *(void *)v72;
            v11 += 8;
            if (a6 == v66) {
              return result;
            }
          }
          return (char *)memmove(v11, a6, v66 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v58 = 0;
      do
      {
        *(void *)&a6[v58] = *(void *)&a2[v58];
        v58 += 8;
      }
      while (&a2[v58] != a3);
      float32x4_t v59 = &a6[v58];
      if (v59 != a6)
      {
        float v60 = a3 - 8;
        while (a2 != v11)
        {
          unsigned int v61 = *((_DWORD *)v59 - 1);
          unsigned int v62 = *((_DWORD *)a2 - 1);
          BOOL v63 = v61 >= v62;
          if (v61 >= v62) {
            float v64 = v59;
          }
          else {
            float v64 = a2;
          }
          if (v63) {
            v59 -= 8;
          }
          else {
            a2 -= 8;
          }
          *(void *)float v60 = *((void *)v64 - 1);
          v60 -= 8;
          if (v59 == a6) {
            return result;
          }
        }
        uint64_t v74 = 0;
        do
        {
          *(void *)&v60[v74] = *(void *)&v59[v74 - 8];
          v74 -= 8;
        }
        while (&v59[v74] != a6);
      }
    }
  }
  return result;
}

void sub_248451C04(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  sub_248451DB0(v20);
  sub_248451E1C(a1, 0, a2, v20[0]);
  memset(v19, 0, sizeof(v19));
  memset(v13, 0, 24);
  __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_2483F26D4((uint64_t)&v17);
  memset(v18, 0, sizeof(v18));
  long long v8 = xmmword_2484DCDC0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  long long v12 = xmmword_2484DCDD0;
  BYTE9(v12) = 1;
  BYTE11(v12) = 0;
  sub_248443880((uint64_t)&v8, 8uLL, (uint64_t)v20, (uint64_t *)v13, v19, a3, 0, a4);
  sub_24844A2B4((uint64_t)v20[0], (uint64_t)v13, v19, 0, a3, 0, a4);
  *(void *)&long long v8 = v18;
  sub_2483F77FC((void ***)&v8);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  *(void *)&long long v8 = v13;
  sub_2484415B0((void ***)&v8);
  if (v19[0]) {
    operator delete((void *)v19[0]);
  }
  v13[0] = (void **)v20;
  sub_2483F87EC(v13);
}

void sub_248451D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_24845218C((uint64_t)&a17);
  unint64_t v24 = *(void **)(v22 - 96);
  if (v24) {
    operator delete(v24);
  }
  a17 = v22 - 72;
  sub_2483F87EC((void ***)&a17);
  _Unwind_Resume(a1);
}

void *sub_248451DB0(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(0x18uLL);
  a1[1] = v2 + 3;
  a1[2] = v2 + 3;
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = 0;
  *a1 = v2;
  return a1;
}

void sub_248451E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_248451E1C(uint64_t a1, unint64_t a2, unint64_t a3, void **a4)
{
  sub_2483E9AC0(v59, a3);
  unint64_t v8 = a3 + 1;
  sub_2483E9AC0(__p, a3 + 1);
  uint64_t v9 = __p[0];
  uint64_t v10 = v59[0];
  if (a3 == -1 || (bzero(__p[0], 4 * a3 + 4), a3))
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = *(_DWORD *)(a1 + 4 * v11);
      int v13 = 0;
      unint64_t v14 = (v12 + 1);
      if (v12 != -1)
      {
        int v15 = v12 + 1;
        do
        {
          v13 += v9[v15];
          v15 &= v15 - 1;
        }
        while (v15);
      }
      v10[v11] = v12 - v13;
      if (v8 > v14)
      {
        do
        {
          ++v9[v14];
          unint64_t v14 = (v14 & -(int)v14) + v14;
        }
        while (v8 > v14);
      }
      ++v11;
    }
    while (v11 != a3);
  }
  if (a3 >= a2) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = a3;
  }
  unint64_t v17 = a3;
  while (v17 > a2)
  {
    unint64_t v18 = v17 - 1;
    if (*((_DWORD *)v59[0] + --v17))
    {
      unint64_t v16 = v18 + 1;
      break;
    }
  }
  unsigned int v20 = __clz(a3);
  unsigned int v21 = (((-1 << (v20 ^ 0x1F)) + a3) >> (v20 ^ 0x1F)) - v20 + 32;
  if (!a3) {
    unsigned int v21 = 0;
  }
  if (v21 >= 7) {
    int v22 = 7;
  }
  else {
    int v22 = v21;
  }
  int v23 = v16 - a2;
  unint64_t v24 = a4[1];
  unint64_t v25 = (unint64_t)a4[2];
  if ((unint64_t)v24 >= v25)
  {
    uint64_t v27 = ((char *)v24 - (unsigned char *)*a4) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v29 = v25 - (void)*a4;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    uint64_t v31 = (char *)sub_2483F04AC(v30);
    uint64_t v32 = &v31[8 * v27];
    uint64_t v34 = &v31[8 * v33];
    *(_DWORD *)uint64_t v32 = 2 * v22;
    *((_DWORD *)v32 + 1) = v23;
    unsigned int v26 = v32 + 8;
    uint64_t v36 = (char *)*a4;
    int64_t v35 = (char *)a4[1];
    if (v35 != *a4)
    {
      do
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v32 - 1) = v37;
        v32 -= 8;
      }
      while (v35 != v36);
      int64_t v35 = (char *)*a4;
    }
    *a4 = v32;
    a4[1] = v26;
    a4[2] = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *unint64_t v24 = 2 * v22;
    v24[1] = v23;
    unsigned int v26 = v24 + 2;
  }
  a4[1] = v26;
  if (v16 > a2)
  {
    unsigned int v38 = 0;
    do
    {
      unsigned int v39 = __clz(v38);
      unsigned int v40 = (((-1 << (v39 ^ 0x1F)) + v38) >> (v39 ^ 0x1F)) - v39 + 32;
      if (v38) {
        unsigned int v41 = v40;
      }
      else {
        unsigned int v41 = 0;
      }
      if (v41 >= 7) {
        int v42 = 7;
      }
      else {
        int v42 = v41;
      }
      uint64_t v43 = v59[0];
      unint64_t v44 = (unint64_t)a4[2];
      if ((unint64_t)v26 >= v44)
      {
        uint64_t v46 = ((char *)v26 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v46 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v47 = v44 - (void)*a4;
        uint64_t v48 = v47 >> 2;
        if (v47 >> 2 <= (unint64_t)(v46 + 1)) {
          uint64_t v48 = v46 + 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        BOOL v50 = (char *)sub_2483F04AC(v49);
        uint64_t v52 = &v50[8 * v46];
        int v53 = v43[a2];
        *(_DWORD *)uint64_t v52 = 2 * v42;
        *((_DWORD *)v52 + 1) = v53;
        uint64_t v55 = (char *)*a4;
        uint64_t v54 = (char *)a4[1];
        uint64_t v56 = v52;
        if (v54 != *a4)
        {
          do
          {
            uint64_t v57 = *((void *)v54 - 1);
            v54 -= 8;
            *((void *)v56 - 1) = v57;
            v56 -= 8;
          }
          while (v54 != v55);
          uint64_t v54 = (char *)*a4;
        }
        unsigned int v26 = v52 + 8;
        *a4 = v56;
        a4[1] = v52 + 8;
        a4[2] = &v50[8 * v51];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        int v45 = *((_DWORD *)v59[0] + a2);
        *unsigned int v26 = 2 * v42;
        v26[1] = v45;
        v26 += 2;
      }
      a4[1] = v26;
      unsigned int v38 = *((_DWORD *)v59[0] + a2++);
    }
    while (a2 != v16);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
}

void sub_248452150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24845218C(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 104);
  sub_2483F77FC(&v4);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  sub_2484415B0(&v4);
  return a1;
}

void sub_2484521E4(int a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  atomic_fetch_add_explicit(&qword_2693193B8, 1uLL, memory_order_relaxed);
  unint64_t v7 = (unint64_t)malloc_type_malloc(0x40100uLL, 0xFBCB090DuLL);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF80;
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFF80) + 256;
    *(void *)(v8 + 240) = v7;
    *(void *)(v8 + 248) = 0x40000;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  v74[1] = 0;
  v74[2] = 0;
  v74[0] = v9;
  sub_248451DB0(v73);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  BOOL v70 = 0;
  unsigned int v71 = 0;
  uint64_t v72 = 0;
  do
  {
    uint64_t v13 = byte_24854FEF4[v11];
    if (((1 << v13) & v12) == 0)
    {
      v12 |= (unsigned __int16)(1 << v13);
      if (((1 << v13) & a1) != 0)
      {
        unint64_t v14 = (byte_2485534EC[v11] * (unint64_t)byte_248553507[v11]) << 6;
        if (v14 > (v71 - v10) >> 2)
        {
          sub_2483EB1C4(&v70, v14);
          uint64_t v10 = v70;
        }
        unint64_t v15 = byte_2485534EC[v11];
        unint64_t v16 = byte_248553507[v11];
        if (v16 >= v15) {
          unint64_t v17 = byte_2485534EC[v11];
        }
        else {
          unint64_t v17 = byte_248553507[v11];
        }
        if (v16 <= v15) {
          unint64_t v18 = byte_2485534EC[v11];
        }
        else {
          unint64_t v18 = byte_248553507[v11];
        }
        unint64_t v19 = v18 / v17;
        unint64_t v20 = v19 - 1;
        unint64_t v21 = __clz(v19) ^ 0x3F;
        if ((v19 & (v19 - 1)) != 0) {
          char v22 = v21 + 1;
        }
        else {
          char v22 = v21;
        }
        unint64_t v23 = byte_248553507[v11]
            * (unint64_t)byte_2485534EC[v11];
        unint64_t v24 = 8 * v18;
        unint64_t v25 = v23;
        if (v18)
        {
          unint64_t v26 = 0;
          if (v24 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = 8 * v18;
          }
          uint64_t v28 = 1;
          unint64_t v25 = byte_248553507[v11]
              * (unint64_t)byte_2485534EC[v11];
          do
          {
            unint64_t v29 = 0;
            unint64_t v30 = v26;
            do
            {
              if (v26) {
                unint64_t v31 = v29;
              }
              else {
                unint64_t v31 = v30;
              }
              if ((v31 & v20) == 0)
              {
                if (v26) {
                  unint64_t v32 = v30;
                }
                else {
                  unint64_t v32 = v29;
                }
                unint64_t v33 = v31 >> v22;
                BOOL v34 = v32 >= v18 || v33 >= v17;
                int v35 = v34;
                uint64_t v36 = v33 * v18;
                if (v34) {
                  unint64_t v37 = v25 + 1;
                }
                else {
                  unint64_t v37 = v25;
                }
                if (!v35) {
                  LODWORD(v25) = v36 + v32;
                }
                *(_DWORD *)&v10[32 * v36 + 4 * v32] = v25;
                unint64_t v25 = v37;
              }
              ++v29;
              --v30;
            }
            while (v28 != v29);
            ++v26;
            ++v28;
          }
          while (v26 != v27);
        }
        int v57 = v12;
        uint64_t v38 = 0;
        uint64_t v39 = 1;
        unint64_t v40 = v24 - 1;
        LOBYTE(v41) = 8 * v18;
        do
        {
          char v42 = v41;
          unint64_t v41 = v40;
          uint64_t v43 = v39;
          unint64_t v44 = v24 - 1;
          do
          {
            if (v42) {
              unint64_t v45 = v43;
            }
            else {
              unint64_t v45 = v44;
            }
            if ((v45 & v20) == 0)
            {
              if (v42) {
                unint64_t v46 = v44;
              }
              else {
                unint64_t v46 = v43;
              }
              *(_DWORD *)&v10[4 * v46 + 4 * (v45 >> v22) * v24] = v25++;
            }
            --v44;
            ++v43;
          }
          while (v38 + v44);
          --v38;
          ++v39;
          unint64_t v40 = v41 - 1;
        }
        while (v41 != 1);
        uint64_t v47 = 0;
        uint64_t v10 = v70;
        if (v23 << 6 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v23 << 6;
        }
        do
        {
          unint64_t v49 = (void **)v73[0];
          if (v23)
          {
            BOOL v50 = (int *)(a2 + (qword_24854EFA0[3 * v13 + v47] << 8));
            uint64_t v51 = (_DWORD *)v9;
            uint64_t v52 = v48;
            do
            {
              int v53 = *v50++;
              *v51++ = *(_DWORD *)&v10[4 * v53];
              --v52;
            }
            while (v52);
          }
          sub_248451E1C(v9, v23, v23 << 6, v49);
          ++v47;
        }
        while (v47 != 3);
        int v12 = v57;
      }
    }
    ++v11;
  }
  while (v11 != 27);
  if (a1)
  {
    memset(v69, 0, sizeof(v69));
    memset(v63, 0, 24);
    __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    sub_2483F26D4((uint64_t)&v67);
    memset(v68, 0, sizeof(v68));
    long long v58 = xmmword_2484DCDC0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = 0;
    long long v62 = xmmword_2484DCDD0;
    BYTE9(v62) = 1;
    BYTE11(v62) = 0;
    sub_248443880((uint64_t)&v58, 8uLL, (uint64_t)v73, (uint64_t *)v63, v69, v54, 11, v55);
    sub_24844A2B4(v73[0], (uint64_t)v63, v69, 0, v54, 11, v55);
    *(void *)&long long v58 = v68;
    sub_2483F77FC((void ***)&v58);
    if (__p)
    {
      uint64_t v65 = __p;
      operator delete(__p);
    }
    *(void *)&long long v58 = v63;
    sub_2484415B0((void ***)&v58);
    if (v69[0]) {
      operator delete((void *)v69[0]);
    }
  }
  if (v10)
  {
    unsigned int v71 = v10;
    operator delete(v10);
  }
  v63[0] = (void **)v73;
  sub_2483F87EC(v63);
  sub_24843E158(v74);
}

void sub_2484525E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  sub_24845218C((uint64_t)&a20);
  uint64_t v28 = *(void **)(v26 - 184);
  if (v28) {
    operator delete(v28);
  }
  if (v25)
  {
    *(void *)(v26 - 152) = v25;
    operator delete(v25);
  }
  a20 = v26 - 136;
  sub_2483F87EC((void ***)&a20);
  sub_24843E158((uint64_t *)(v26 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_248452670(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FC66248;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_248452A70((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 48);
  uint64_t v5 = *(unsigned char **)(a2 + 56);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_2483E92A8((void *)(a1 + 48), v7 >> 2);
    unint64_t v8 = *(char **)(a1 + 56);
    memmove(v8, v6, v7);
    *(void *)(a1 + 56) = &v8[4 * (v7 >> 2)];
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_248452A70((void *)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 96);
  uint64_t v9 = *(unsigned char **)(a2 + 104);
  uint64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_248453170((void *)(a1 + 96), 0xF0B7672A07A44C6BLL * (v11 >> 2));
    int v12 = *(char **)(a1 + 104);
    memmove(v12, v10, v11 - 3);
    *(void *)(a1 + 104) = &v12[4 * (v11 >> 2)];
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  unint64_t v14 = *(unsigned char **)(a2 + 120);
  uint64_t v13 = *(unsigned char **)(a2 + 128);
  uint64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_2484530D0((void *)(a1 + 120), 0xF128CFC4A33F128DLL * (v15 >> 4));
    unint64_t v16 = *(char **)(a1 + 128);
    memmove(v16, v14, v15 - 3);
    *(void *)(a1 + 128) = &v16[16 * (v15 >> 4)];
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  unint64_t v17 = *(long long **)(a2 + 144);
  unint64_t v18 = *(long long **)(a2 + 152);
  if (v18 != v17)
  {
    sub_248452E90((void *)(a1 + 144), 0xAAAAAAAAAAAAAAABLL * (v18 - v17));
    *(void *)(a1 + 152) = sub_248452EE0(a1 + 160, v17, v18, *(void *)(a1 + 152));
  }
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v19 = *(void *)(a2 + 168);
  uint64_t v20 = *(void *)(a2 + 176);
  if (v20 != v19)
  {
    sub_248452C78((void *)(a1 + 168), 0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 3));
    *(void *)(a1 + 176) = sub_248452CC8(a1 + 184, v19, v20, *(void *)(a1 + 176));
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_2483F01FC((void *)(a1 + 192), *(const void **)(a2 + 192), *(void *)(a2 + 200), *(void *)(a2 + 200) - *(void *)(a2 + 192));
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_248452A70((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 3));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  sub_2483F01FC((void *)(a1 + 240), *(const void **)(a2 + 240), *(void *)(a2 + 248), *(void *)(a2 + 248) - *(void *)(a2 + 240));
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  sub_2483F01FC((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), *(void *)(a2 + 280) - *(void *)(a2 + 272));
  return a1;
}

void sub_248452968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  v11[22] = v15;
  sub_248452AF8(&a11);
  a11 = v14;
  sub_248452B7C(&a11);
  unint64_t v17 = *v13;
  if (*v13)
  {
    v11[16] = v17;
    operator delete(v17);
  }
  unint64_t v18 = *v12;
  if (*v12)
  {
    v11[13] = v18;
    operator delete(v18);
  }
  sub_2483F87EC(&a11);
  uint64_t v19 = *a9;
  if (*a9)
  {
    v11[7] = v19;
    operator delete(v19);
  }
  a11 = a10;
  sub_2483F87EC(&a11);
  _Unwind_Resume(a1);
}

void sub_248452A68()
{
}

void *sub_248452A70(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_248409DAC(result, a4);
    float result = sub_248453210((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_248452AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2483F87EC(&a9);
  _Unwind_Resume(a1);
}

void sub_248452AF8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        sub_248452C20(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_248452B7C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_248452BD0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_248452BD0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_248452C20(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
}

char *sub_248452C78(void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    sub_2483E92E8();
  }
  float result = (char *)sub_248452E48(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t sub_248452CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      long long v11 = *(_OWORD *)(a2 + v7 + 32);
      long long v12 = *(_OWORD *)(a2 + v7 + 48);
      *(void *)(v8 + 64) = *(void *)(a2 + v7 + 64);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(void *)(a4 + v7 + 72) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = 0;
      sub_24844CB80((void *)(a4 + v7 + 72), *(const void **)(a2 + v7 + 72), *(void *)(a2 + v7 + 80), (uint64_t)(*(void *)(a2 + v7 + 80) - *(void *)(a2 + v7 + 72)) >> 2);
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 112) = 0;
      sub_248452DCC((void *)(a4 + v7 + 96), *(const void **)(v9 + 96), *(void *)(v9 + 104), (uint64_t)(*(void *)(v9 + 104) - *(void *)(v9 + 96)) >> 3);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_248452D90(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v2[10] = v5;
    operator delete(v5);
  }
  while (v2 != v1)
  {
    v2 -= 15;
    sub_248452C20(v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_248452DCC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = sub_2484032DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248452E2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_248452E48(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    sub_2483E9338();
  }
  return operator new(120 * a1);
}

char *sub_248452E90(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_2483E92E8();
  }
  float result = (char *)sub_248453088(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t sub_248452EE0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      long long v7 = *v6;
      *(void *)(v4 + 16) = *((void *)v6 + 2);
      *(void *)(v4 + 24) = 0;
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      uint64_t v9 = (unsigned char *)*((void *)v6 + 3);
      size_t v8 = (unsigned char *)*((void *)v6 + 4);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        sub_24845304C((void *)(v4 + 24), v10 >> 1);
        long long v11 = *(char **)(v4 + 32);
        memmove(v11, v9, v10);
        *(void *)(v4 + 32) = &v11[2 * (v10 >> 1)];
        uint64_t v4 = v16;
      }
      v4 += 48;
      uint64_t v16 = v4;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v14 = 1;
  sub_248452FEC((uint64_t)v13);
  return v4;
}

void sub_248452FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 32) = v12;
    operator delete(v12);
  }
  sub_248452FEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_248452FEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

char *sub_24845304C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_2483E92E8();
  }
  float result = (char *)sub_2483F0344(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_248453088(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    sub_2483E9338();
  }
  return operator new(48 * a1);
}

char *sub_2484530D0(void *a1, unint64_t a2)
{
  if (a2 >= 0x3B5CC0ED7303B6) {
    sub_2483E92E8();
  }
  float result = (char *)sub_248453124(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1104 * v4];
  return result;
}

void *sub_248453124(unint64_t a1)
{
  if (a1 >= 0x3B5CC0ED7303B6) {
    sub_2483E9338();
  }
  return operator new(1104 * a1);
}

char *sub_248453170(void *a1, unint64_t a2)
{
  if (a2 >= 0xF4898D5F85BB3ALL) {
    sub_2483E92E8();
  }
  float result = (char *)sub_2484531C4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[268 * v4];
  return result;
}

void *sub_2484531C4(unint64_t a1)
{
  if (a1 >= 0xF4898D5F85BB3ALL) {
    sub_2483E9338();
  }
  return operator new(268 * a1);
}

void *sub_248453210(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  int64_t v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_2483F01FC(v4, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2484532C0((uint64_t)v8);
  return v4;
}

void sub_2484532AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2484532C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void sub_24845332C(uint64_t a1)
{
  sub_248453364(a1);

  JUMPOUT(0x24C579F90);
}

uint64_t sub_248453364(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66248;
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(void *)(a1 + 248) = v3;
    operator delete(v3);
  }
  char v9 = (void **)(a1 + 216);
  sub_2483F87EC(&v9);
  uint64_t v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(void *)(a1 + 200) = v4;
    operator delete(v4);
  }
  char v9 = (void **)(a1 + 168);
  sub_248452AF8(&v9);
  char v9 = (void **)(a1 + 144);
  sub_248452B7C(&v9);
  uint64_t v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  char v9 = (void **)(a1 + 72);
  sub_2483F87EC(&v9);
  long long v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
  }
  char v9 = (void **)(a1 + 24);
  sub_2483F87EC(&v9);
  return a1;
}

void sub_248453460(unsigned __int8 **a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a2 - 1;
  if (a2 == 1)
  {
    *(void *)(a3[3] + (*a3 >> 3)) = (1 << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
    unint64_t v7 = *a3 + 1;
    *a3 = v7;
    *(void *)(a3[3] + (v7 >> 3)) = *(unsigned __int8 *)(a3[3] + (v7 >> 3));
    *a3 += 2;
  }
  else
  {
    long long v12 = *a1;
    uint64_t v13 = a1[1];
    if (*a1 == v13)
    {
      uint64_t v125 = 0;
      unint64_t v126 = 0;
      uint64_t v127 = 0;
    }
    else
    {
      char v14 = v12 + 1;
      if (v12 + 1 != v13)
      {
        unsigned __int8 v15 = *v12;
        uint64_t v16 = v12 + 1;
        do
        {
          unsigned int v18 = *v16++;
          unsigned __int8 v17 = v18;
          BOOL v19 = v15 >= v18;
          if (v15 <= v18) {
            unsigned __int8 v15 = v17;
          }
          if (!v19) {
            long long v12 = v14;
          }
          char v14 = v16;
        }
        while (v16 != v13);
      }
      size_t v20 = *v12 + 1;
      sub_248442AEC(&__p, v20);
      uint64_t v21 = 0;
      do
      {
        *((unsigned char *)__p + v21) = v21;
        ++v21;
      }
      while (v20 != v21);
      sub_248442AEC(&v125, a1[1] - *a1);
      char v22 = *a1;
      if (a1[1] != *a1)
      {
        unint64_t v23 = 0;
        do
        {
          unint64_t v24 = v107 - (unsigned char *)__p;
          if (v107 == __p)
          {
            v125[v23] = 0;
            uint64_t v28 = __p;
            char v27 = *(unsigned char *)__p;
          }
          else
          {
            unint64_t v25 = 0;
            int v26 = v22[v23];
            if (v24 <= 1) {
              unint64_t v24 = 1;
            }
            while (*((unsigned __int8 *)__p + v25) != v26)
            {
              if (v24 == ++v25)
              {
                v125[v23] = v24;
                char v27 = *((unsigned char *)__p + v24);
                goto LABEL_24;
              }
            }
            v125[v23] = v25;
            uint64_t v28 = __p;
            char v27 = *((unsigned char *)__p + v25);
            if (!v25) {
              goto LABEL_26;
            }
            unint64_t v24 = v25;
            do
            {
LABEL_24:
              *((unsigned char *)__p + v24) = *((char *)__p + v24 - 1);
              --v24;
            }
            while (v24);
            uint64_t v28 = __p;
          }
LABEL_26:
          *uint64_t v28 = v27;
          ++v23;
          char v22 = *a1;
        }
        while (v23 < a1[1] - *a1);
      }
      if (__p)
      {
        float32x2x2_t v107 = __p;
        operator delete(__p);
      }
    }
    sub_248451DB0(v124);
    unint64_t v100 = v6;
    unint64_t v101 = a2;
    sub_248451DB0(v123);
    unint64_t v29 = *a1;
    unint64_t v30 = a1[1];
    if (*a1 != v30)
    {
      do
      {
        unint64_t v31 = v124[0];
        unint64_t v32 = v124[0][1];
        unint64_t v33 = v124[0][2];
        if (v32 >= v33)
        {
          uint64_t v36 = ((char *)v32 - (char *)*v124[0]) >> 3;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v38 = (char *)v33 - (char *)*v124[0];
          if (v38 >> 2 > v37) {
            unint64_t v37 = v38 >> 2;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          unint64_t v40 = (char *)sub_2483F04AC(v39);
          char v42 = (unsigned int *)&v40[8 * v36];
          unsigned int v43 = *v29;
          *char v42 = 0;
          v42[1] = v43;
          unint64_t v45 = *v31;
          unint64_t v44 = v31[1];
          unint64_t v46 = v42;
          if (v44 != *v31)
          {
            do
            {
              uint64_t v47 = *((void *)v44 - 1);
              v44 -= 2;
              *((void *)v46 - 1) = v47;
              v46 -= 2;
            }
            while (v44 != v45);
            unint64_t v44 = *v31;
          }
          int v35 = v42 + 2;
          *unint64_t v31 = v46;
          v31[1] = v42 + 2;
          v31[2] = (unsigned int *)&v40[8 * v41];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          unsigned int v34 = *v29;
          *unint64_t v32 = 0;
          v32[1] = v34;
          int v35 = v32 + 2;
        }
        v31[1] = v35;
        ++v29;
      }
      while (v29 != v30);
    }
    uint64_t v48 = v125;
    for (uint64_t i = v126; v48 != i; ++v48)
    {
      BOOL v50 = (void **)v123[0];
      uint64_t v51 = *(_DWORD **)(v123[0] + 8);
      unint64_t v52 = *(void *)(v123[0] + 16);
      if ((unint64_t)v51 >= v52)
      {
        uint64_t v55 = ((uint64_t)v51 - *(void *)v123[0]) >> 3;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v57 = v52 - *(void *)v123[0];
        if (v57 >> 2 > v56) {
          unint64_t v56 = v57 >> 2;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        uint64_t v59 = (char *)sub_2483F04AC(v58);
        uint64_t v61 = &v59[8 * v55];
        int v62 = *v48;
        *(_DWORD *)uint64_t v61 = 0;
        *((_DWORD *)v61 + 1) = v62;
        float v64 = (char *)*v50;
        BOOL v63 = (char *)v50[1];
        uint64_t v65 = v61;
        if (v63 != *v50)
        {
          do
          {
            uint64_t v66 = *((void *)v63 - 1);
            v63 -= 8;
            *((void *)v65 - 1) = v66;
            v65 -= 8;
          }
          while (v63 != v64);
          BOOL v63 = (char *)*v50;
        }
        uint64_t v54 = v61 + 8;
        *BOOL v50 = v65;
        v50[1] = v61 + 8;
        v50[2] = &v59[8 * v60];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        int v53 = *v48;
        *uint64_t v51 = 0;
        v51[1] = v53;
        uint64_t v54 = v51 + 2;
      }
      v50[1] = v54;
    }
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = -1;
    int v121 = 256;
    char v122 = 0;
    long long v116 = xmmword_2484DCDE0;
    __p = 0;
    float32x2x2_t v107 = 0;
    uint64_t v108 = 0;
    v109 = 0;
    float32x4_t v110 = 0;
    uint64_t v111 = 0;
    sub_2483F26D4((uint64_t)v112);
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    p_p = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v67 = sub_248443880(&v116, 1, v124, &__p, &p_p, 0, 0, 0);
    if (p_p) {
      operator delete(p_p);
    }
    p_p = &v113;
    sub_2483F77FC((void ***)&p_p);
    if (v109)
    {
      float32x4_t v110 = v109;
      operator delete(v109);
    }
    p_p = &__p;
    sub_2484415B0((void ***)&p_p);
    __p = 0;
    float32x2x2_t v107 = 0;
    uint64_t v108 = 0;
    v109 = 0;
    float32x4_t v110 = 0;
    uint64_t v111 = 0;
    sub_2483F26D4((uint64_t)v112);
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    p_p = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v68 = sub_248443880(&v116, 1, v123, &__p, &p_p, 0, 0, 0);
    uint64_t v99 = a5;
    if (p_p) {
      operator delete(p_p);
    }
    p_p = &v113;
    sub_2483F77FC((void ***)&p_p);
    if (v109)
    {
      float32x4_t v110 = v109;
      operator delete(v109);
    }
    p_p = &__p;
    sub_2484415B0((void ***)&p_p);
    v124[0][1] = *v124[0];
    BOOL v69 = v125;
    if (v126 != v125)
    {
      unint64_t v70 = 0;
      do
      {
        unsigned int v71 = v124[0];
        if (v68 >= v67) {
          uint64_t v72 = *a1;
        }
        else {
          uint64_t v72 = v69;
        }
        uint64_t v73 = v124[0][1];
        uint64_t v74 = v124[0][2];
        if (v73 >= v74)
        {
          uint64_t v77 = ((char *)v73 - (char *)*v124[0]) >> 3;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v79 = (char *)v74 - (char *)*v124[0];
          if (v79 >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          unint64_t v81 = (char *)sub_2483F04AC(v80);
          unsigned int v83 = v72[v70];
          float v84 = (unsigned int *)&v81[8 * v77];
          *float v84 = 0;
          v84[1] = v83;
          uint64_t v86 = *v71;
          unint64_t v85 = v71[1];
          unint64_t v87 = v84;
          if (v85 != *v71)
          {
            do
            {
              uint64_t v88 = *((void *)v85 - 1);
              v85 -= 2;
              *((void *)v87 - 1) = v88;
              v87 -= 2;
            }
            while (v85 != v86);
            unint64_t v85 = *v71;
          }
          uint64_t v76 = v84 + 2;
          *unsigned int v71 = v87;
          v71[1] = v84 + 2;
          v71[2] = (unsigned int *)&v81[8 * v82];
          if (v85) {
            operator delete(v85);
          }
        }
        else
        {
          unsigned int v75 = v72[v70];
          *uint64_t v73 = 0;
          v73[1] = v75;
          uint64_t v76 = v73 + 2;
        }
        v71[1] = v76;
        ++v70;
        BOOL v69 = v125;
      }
      while (v70 < v126 - v125);
    }
    unint64_t v89 = __clz(v101) ^ 0x3F;
    if ((v101 & v100) != 0) {
      unint64_t v90 = v89 + 1;
    }
    else {
      unint64_t v90 = v89;
    }
    if (v90 > 3 || ((unint64_t v91 = (a1[1] - *a1) * v90, v91 < v67) ? (v92 = v91 >= v68) : (v92 = 1), v92))
    {
      sub_248419548((uint64_t)&p_p, a3, (8* (((unint64_t)((char *)v124[0][1] - (char *)*v124[0]) >> 2)+ ((unint64_t)((char *)v124[0][1] - (char *)*v124[0]) >> 3))) | 2);
      *(void *)(a3[3] + (*a3 >> 3)) = *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
      unint64_t v98 = *a3 + 1;
      *a3 = v98;
      *(void *)(a3[3] + (v98 >> 3)) = ((unint64_t)(v68 < v67) << (v98 & 7)) | *(unsigned __int8 *)(a3[3] + (v98 >> 3));
      ++*a3;
      __p = 0;
      float32x2x2_t v107 = 0;
      uint64_t v108 = 0;
      v109 = 0;
      float32x4_t v110 = 0;
      uint64_t v111 = 0;
      sub_2483F26D4((uint64_t)v112);
      uint64_t v113 = 0;
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      memset(v102, 0, sizeof(v102));
      sub_248443880(&v116, 1, v124, &__p, v102, a3, a4, v99);
      sub_248449A18(v124[0], (uint64_t)&__p, v102, 0, a3);
      sub_2484195C0((uint64_t)&p_p, a3, a4, v99);
      if (v102[0]) {
        operator delete(v102[0]);
      }
      v102[0] = &v113;
      sub_2483F77FC((void ***)v102);
      if (v109)
      {
        float32x4_t v110 = v109;
        operator delete(v109);
      }
      v102[0] = &__p;
      sub_2484415B0((void ***)v102);
    }
    else
    {
      sub_248419548((uint64_t)&__p, a3, v91 + 3);
      *(void *)(a3[3] + (*a3 >> 3)) = (1 << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
      unint64_t v93 = *a3 + 1;
      *a3 = v93;
      *(void *)(a3[3] + (v93 >> 3)) = (v90 << (v93 & 7)) | *(unsigned __int8 *)(a3[3] + (v93 >> 3));
      unint64_t v94 = *a3 + 2;
      *a3 = v94;
      uint64_t v95 = *a1;
      uint64_t v96 = a1[1];
      while (v95 != v96)
      {
        unsigned int v97 = *v95++;
        *(void *)(a3[3] + (v94 >> 3)) = ((unint64_t)v97 << (v94 & 7)) | *(unsigned __int8 *)(a3[3] + (v94 >> 3));
        unint64_t v94 = *a3 + v90;
        *a3 = v94;
      }
      sub_2484195C0((uint64_t)&__p, a3, a4, v99);
    }
    __p = v123;
    sub_2483F87EC((void ***)&__p);
    __p = v124;
    sub_2483F87EC((void ***)&__p);
    if (v125)
    {
      unint64_t v126 = v125;
      operator delete(v125);
    }
  }
}

void sub_248453C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  a21 = v26 - 160;
  sub_2483F87EC((void ***)&a21);
  a21 = v26 - 136;
  sub_2483F87EC((void ***)&a21);
  uint64_t v28 = *(void **)(v26 - 112);
  if (v28)
  {
    *(void *)(v26 - 104) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void sub_248453D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v3 = a2;
    v5[0] = sub_2483F1794;
    v5[1] = a3;
    if (*(void *)a1)
    {
      (*(void (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), float32x4_t (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v5, sub_248453EF4, sub_248453E2C, 0, a2);
    }
    else
    {
      for (unsigned int i = 0; i != v3; ++i)
        sub_248453E2C((uint64_t)v5, i);
    }
  }
}

float32x4_t sub_248453E2C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(unsigned int ***)(a1 + 8);
  int v3 = *v2;
  if (**v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (float32x4_t *)(v3[3] + v3[2] * a2);
    unint64_t v6 = (float32x4_t *)(v3[8] + v3[7] * a2);
    unint64_t v7 = (float32x4_t *)(v3[13] + v3[12] * a2);
    size_t v8 = v2[1];
    char v9 = (float32x4_t *)(*((void *)v8 + 3) + *((void *)v8 + 2) * a2);
    int64_t v10 = (float32x4_t *)(*((void *)v8 + 8) + *((void *)v8 + 7) * a2);
    long long v11 = (float32x4_t *)(*((void *)v8 + 13) + *((void *)v8 + 12) * a2);
    long long v12 = (float32x4_t *)(*((void *)v2[2] + 3) + *((void *)v2[2] + 2) * a2);
    do
    {
      float32x4_t v13 = *v5++;
      float32x4_t v14 = v13;
      float32x4_t v15 = *v9++;
      float32x4_t v16 = vsubq_f32(v14, v15);
      float32x4_t v17 = *v6++;
      float32x4_t v18 = v17;
      float32x4_t v19 = *v10++;
      float32x4_t v20 = v19;
      float32x4_t v21 = *v7++;
      float32x4_t v22 = v21;
      float32x4_t v23 = vsubq_f32(v18, v20);
      float32x4_t v24 = *v11++;
      float32x4_t v25 = vsubq_f32(v22, v24);
      float32x4_t result = vaddq_f32(vmulq_f32(vmulq_f32(v16, v16), *(float32x4_t *)v2[4]), vaddq_f32(vmulq_f32(vmulq_f32(v23, v23), *(float32x4_t *)v2[5]), vmulq_f32(vmulq_f32(v25, v25), *(float32x4_t *)v2[6])));
      *v12++ = result;
      v4 += 4;
    }
    while (v4 < **v2);
  }
  return result;
}

uint64_t sub_248453EF4(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void *sub_248453F1C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_2484032DC(a1, v5 >> 3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[8 * (v5 >> 3)];
  }
  return a1;
}

void sub_248453F90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248453FAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 88;
    unint64_t v4 = *(void **)(v2 - 56);
    if (v4)
    {
      *(void *)(v2 - 48) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_248454010(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = (void *)*((void *)v3 - 7);
        if (v5)
        {
          *((void *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24845407C(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v141 = (uint64_t)(a2 - 44);
    uint64_t v142 = (long long *)(a2 - 22);
    uint64_t v140 = (uint64_t)(a2 - 66);
    unint64_t v9 = a1;
    uint64_t v153 = (uint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(a2 - 3) <= *(float *)(a1 + 76)) {
                  return;
                }
                uint64_t v54 = (long long *)a1;
                uint64_t v55 = v142;
                break;
              case 3:
                sub_248455488(a1, a1 + 88, (uint64_t)v142);
                return;
              case 4:
                sub_248455548(a1, a1 + 88, a1 + 176, (uint64_t)v142);
                return;
              case 5:
                sub_248455548(a1, a1 + 88, a1 + 176, a1 + 264);
                if (*(a2 - 3) <= *(float *)(a1 + 340)) {
                  return;
                }
                sub_2484553D0((long long *)(a1 + 264), v142);
                if (*(float *)(a1 + 340) <= *(float *)(a1 + 252)) {
                  return;
                }
                sub_2484553D0((long long *)(a1 + 176), (long long *)(a1 + 264));
                if (*(float *)(a1 + 252) <= *(float *)(a1 + 164)) {
                  return;
                }
                sub_2484553D0((long long *)(a1 + 88), (long long *)(a1 + 176));
                if (*(float *)(a1 + 164) <= *(float *)(a1 + 76)) {
                  return;
                }
                uint64_t v54 = (long long *)a1;
                uint64_t v55 = (long long *)(a1 + 88);
                break;
              default:
                JUMPOUT(0);
            }
            sub_2484553D0(v54, v55);
            return;
          }
          if (v10 <= 2111)
          {
            unint64_t v56 = (float *)(a1 + 88);
            BOOL v58 = (float *)a1 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                unint64_t v60 = a1;
                do
                {
                  uint64_t v61 = v56;
                  float v62 = *(float *)(v60 + 164);
                  if (v62 > *(float *)(v60 + 76))
                  {
                    long long v177 = *(_OWORD *)v56;
                    long long v184 = *((_OWORD *)v56 + 1);
                    BOOL v63 = *(void **)(v60 + 120);
                    long long v148 = *(_OWORD *)(v60 + 128);
                    long long v64 = *(_OWORD *)(v60 + 144);
                    *(void *)(v60 + 120) = 0;
                    *(void *)(v60 + 128) = 0;
                    *(void *)(v60 + 136) = 0;
                    long long v163 = v64;
                    int v170 = *(_DWORD *)(v60 + 160);
                    uint64_t v65 = v59;
                    uint64_t v66 = *(void *)(v60 + 168);
                    while (1)
                    {
                      uint64_t v67 = a1 + v65;
                      long long v68 = *(_OWORD *)(a1 + v65 + 16);
                      *(_OWORD *)(v67 + 88) = *(_OWORD *)(a1 + v65);
                      *(_OWORD *)(v67 + 104) = v68;
                      BOOL v69 = *(void **)(a1 + v65 + 120);
                      if (v69)
                      {
                        *(void *)(v67 + 128) = v69;
                        operator delete(v69);
                        *(void *)(v67 + 128) = 0;
                        *(void *)(v67 + 136) = 0;
                      }
                      *(_OWORD *)(v67 + 120) = *(_OWORD *)(v67 + 32);
                      *(void *)(v67 + 136) = *(void *)(v67 + 48);
                      *(void *)(v67 + 40) = 0;
                      *(void *)(v67 + 48) = 0;
                      *(void *)(v67 + 32) = 0;
                      long long v70 = *(_OWORD *)(v67 + 72);
                      *(_OWORD *)(v67 + 144) = *(_OWORD *)(v67 + 56);
                      *(_OWORD *)(v67 + 160) = v70;
                      if (!v65) {
                        break;
                      }
                      uint64_t v71 = a1 + v65;
                      float v72 = *(float *)(a1 + v65 - 12);
                      v65 -= 88;
                      if (v62 <= v72)
                      {
                        uint64_t v73 = (void **)(v71 + 32);
                        uint64_t v74 = a1 + v65 + 88;
                        unint64_t v75 = v71 + 56;
                        goto LABEL_98;
                      }
                    }
                    uint64_t v73 = (void **)(a1 + 32);
                    unint64_t v75 = a1 + 56;
                    uint64_t v74 = a1;
LABEL_98:
                    *(_OWORD *)uint64_t v74 = v177;
                    *(_OWORD *)(v74 + 16) = v184;
                    uint64_t v76 = *v73;
                    if (*v73)
                    {
                      *(void *)(v74 + 40) = v76;
                      operator delete(v76);
                    }
                    *uint64_t v73 = v63;
                    *(_OWORD *)(v74 + 40) = v148;
                    *(_DWORD *)(v75 + 16) = v170;
                    *(_OWORD *)unint64_t v75 = v163;
                    *(float *)(v74 + 76) = v62;
                    *(void *)(v74 + 80) = v66;
                    a2 = (float *)v153;
                  }
                  unint64_t v56 = (float *)v61 + 22;
                  v59 += 88;
                  unint64_t v60 = (unint64_t)v61;
                }
                while ((float *)((char *)v61 + 88) != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                uint64_t v128 = v56;
                float v129 = *(float *)(a1 + 164);
                if (v129 > *(float *)(a1 + 76))
                {
                  long long v180 = *(_OWORD *)v56;
                  long long v187 = *((_OWORD *)v56 + 1);
                  long long v152 = *(_OWORD *)(a1 + 120);
                  uint64_t v130 = *(void *)(a1 + 136);
                  *(void *)(a1 + 120) = 0;
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 136) = 0;
                  long long v166 = *(_OWORD *)(a1 + 144);
                  int v173 = *(_DWORD *)(a1 + 160);
                  long long v131 = v56;
                  uint64_t v132 = *(void *)(a1 + 168);
                  do
                  {
                    long long v133 = v131;
                    long long v134 = *(_OWORD *)(v131 - 18);
                    *(_OWORD *)long long v131 = *(_OWORD *)(v131 - 22);
                    *((_OWORD *)v131 + 1) = v134;
                    long long v135 = (void *)*((void *)v131 + 4);
                    if (v135)
                    {
                      *((void *)v131 + 5) = v135;
                      operator delete(v135);
                      *((void *)v131 + 5) = 0;
                      *((void *)v131 + 6) = 0;
                    }
                    *((_OWORD *)v131 + 2) = *(_OWORD *)(v131 - 14);
                    *((void *)v131 + 6) = *((void *)v131 - 5);
                    *((void *)v131 - 6) = 0;
                    *((void *)v131 - 5) = 0;
                    *((void *)v131 - 7) = 0;
                    long long v136 = *((_OWORD *)v131 - 1);
                    *(_OWORD *)(v131 + 14) = *((_OWORD *)v131 - 2);
                    v131 -= 22;
                    float v137 = *(v133 - 25);
                    *(_OWORD *)(v133 + 18) = v136;
                  }
                  while (v129 > v137);
                  *(_OWORD *)long long v131 = v180;
                  *(_OWORD *)(v133 - 18) = v187;
                  long long v138 = (void *)*((void *)v133 - 7);
                  if (v138)
                  {
                    *((void *)v133 - 6) = v138;
                    operator delete(v138);
                  }
                  long long v139 = v133 - 8;
                  *(_OWORD *)(v133 - 14) = v152;
                  *((void *)v133 - 5) = v130;
                  *((_DWORD *)v139 + 4) = v173;
                  *(_OWORD *)long long v139 = v166;
                  *(v133 - 3) = v129;
                  *((void *)v133 - 1) = v132;
                  a2 = (float *)v153;
                }
                unint64_t v56 = (float *)v128 + 22;
                a1 = (unint64_t)v128;
              }
              while ((float *)((char *)v128 + 88) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)a1 != a2)
            {
              int64_t v77 = (unint64_t)(v11 - 2) >> 1;
              int64_t v78 = v77;
              do
              {
                int64_t v79 = v78;
                if (v77 >= v78)
                {
                  uint64_t v80 = (2 * v78) | 1;
                  unint64_t v81 = a1 + 88 * v80;
                  if (2 * v79 + 2 < v11 && *(float *)(a1 + 88 * v80 + 76) > *(float *)(v81 + 164))
                  {
                    v81 += 88;
                    uint64_t v80 = 2 * v79 + 2;
                  }
                  float v82 = *(float *)(a1 + 88 * v79 + 76);
                  if (*(float *)(v81 + 76) <= v82)
                  {
                    unint64_t v83 = a1 + 88 * v79;
                    long long v178 = *(_OWORD *)v83;
                    long long v185 = *(_OWORD *)(v83 + 16);
                    long long v149 = *(_OWORD *)(v83 + 32);
                    uint64_t v84 = *(void *)(v83 + 48);
                    *(void *)(v83 + 40) = 0;
                    *(void *)(v83 + 48) = 0;
                    *(void *)(v83 + 32) = 0;
                    int v171 = *(_DWORD *)(v83 + 72);
                    long long v164 = *(_OWORD *)(v83 + 56);
                    uint64_t v143 = *(void *)(v83 + 80);
                    uint64_t v145 = v84;
                    do
                    {
                      unint64_t v85 = v83;
                      unint64_t v83 = v81;
                      long long v86 = *(_OWORD *)(v81 + 16);
                      *(_OWORD *)unint64_t v85 = *(_OWORD *)v81;
                      *(_OWORD *)(v85 + 16) = v86;
                      unint64_t v87 = *(void **)(v85 + 32);
                      if (v87)
                      {
                        *(void *)(v85 + 40) = v87;
                        operator delete(v87);
                        *(void *)(v85 + 32) = 0;
                        *(void *)(v85 + 40) = 0;
                        *(void *)(v85 + 48) = 0;
                      }
                      *(_OWORD *)(v85 + 32) = *(_OWORD *)(v83 + 32);
                      *(void *)(v85 + 48) = *(void *)(v83 + 48);
                      *(void *)(v83 + 32) = 0;
                      *(void *)(v83 + 40) = 0;
                      *(void *)(v83 + 48) = 0;
                      long long v88 = *(_OWORD *)(v83 + 56);
                      *(_OWORD *)(v85 + 72) = *(_OWORD *)(v83 + 72);
                      *(_OWORD *)(v85 + 56) = v88;
                      if (v77 < v80) {
                        break;
                      }
                      uint64_t v89 = (2 * v80) | 1;
                      unint64_t v81 = a1 + 88 * v89;
                      if (2 * v80 + 2 < v11 && *(float *)(a1 + 88 * v89 + 76) > *(float *)(v81 + 164))
                      {
                        v81 += 88;
                        uint64_t v89 = 2 * v80 + 2;
                      }
                      uint64_t v80 = v89;
                    }
                    while (*(float *)(v81 + 76) <= v82);
                    *(_OWORD *)unint64_t v83 = v178;
                    *(_OWORD *)(v83 + 16) = v185;
                    unint64_t v90 = *(void **)(v83 + 32);
                    if (v90)
                    {
                      *(void *)(v83 + 40) = v90;
                      operator delete(v90);
                    }
                    *(_OWORD *)(v83 + 32) = v149;
                    *(void *)(v83 + 48) = v145;
                    *(_OWORD *)(v83 + 56) = v164;
                    *(_DWORD *)(v83 + 72) = v171;
                    *(float *)(v83 + 76) = v82;
                    *(void *)(v83 + 80) = v143;
                  }
                }
                int64_t v78 = v79 - 1;
              }
              while (v79);
              int64_t v91 = v10 / 0x58uLL;
              BOOL v92 = (_OWORD *)v153;
              do
              {
                uint64_t v93 = 0;
                unint64_t v94 = v92;
                long long v165 = *(_OWORD *)a1;
                long long v172 = *(_OWORD *)(a1 + 16);
                uint64_t v95 = *(void *)(a1 + 40);
                uint64_t v154 = *(void *)(a1 + 32);
                uint64_t v150 = *(void *)(a1 + 48);
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 32) = 0;
                unint64_t v96 = a1;
                long long v156 = *(_OWORD *)(a1 + 56);
                long long v157 = *(_OWORD *)(a1 + 72);
                do
                {
                  uint64_t v97 = v93 + 1;
                  unint64_t v98 = (_OWORD *)(v96 + 88 * (v93 + 1));
                  uint64_t v99 = 2 * v93;
                  uint64_t v93 = (2 * v93) | 1;
                  int64_t v100 = v99 + 2;
                  if (v100 < v91 && *(float *)(v96 + 88 * v97 + 76) > *((float *)v98 + 41))
                  {
                    unint64_t v98 = (_OWORD *)((char *)v98 + 88);
                    uint64_t v93 = v100;
                  }
                  long long v101 = v98[1];
                  *(_OWORD *)unint64_t v96 = *v98;
                  *(_OWORD *)(v96 + 16) = v101;
                  int32x4_t v102 = *(void **)(v96 + 32);
                  if (v102)
                  {
                    *(void *)(v96 + 40) = v102;
                    operator delete(v102);
                    *(void *)(v96 + 32) = 0;
                    *(void *)(v96 + 40) = 0;
                    *(void *)(v96 + 48) = 0;
                  }
                  int32x4_t v103 = v98 + 2;
                  *(_OWORD *)(v96 + 32) = v98[2];
                  *(void *)(v96 + 48) = *((void *)v98 + 6);
                  *((void *)v98 + 4) = 0;
                  *((void *)v98 + 5) = 0;
                  *((void *)v98 + 6) = 0;
                  long long v104 = *(_OWORD *)((char *)v98 + 56);
                  *(_OWORD *)(v96 + 72) = *(_OWORD *)((char *)v98 + 72);
                  *(_OWORD *)(v96 + 56) = v104;
                  unint64_t v96 = (unint64_t)v98;
                }
                while (v93 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
                uint64_t v105 = (_OWORD *)((char *)v98 + 56);
                BOOL v92 = (_OWORD *)((char *)v92 - 88);
                if (v98 == (_OWORD *)((char *)v94 - 88))
                {
                  *unint64_t v98 = v165;
                  v98[1] = v172;
                  unint64_t v126 = (void *)*((void *)v98 + 4);
                  if (v126)
                  {
                    *((void *)v98 + 5) = v126;
                    operator delete(v126);
                  }
                  *((void *)v98 + 4) = v154;
                  *((void *)v98 + 5) = v95;
                  *((void *)v98 + 6) = v150;
                  *uint64_t v105 = v156;
                  *(_OWORD *)((char *)v98 + 72) = v157;
                }
                else
                {
                  long long v106 = *(_OWORD *)((char *)v94 - 72);
                  *unint64_t v98 = *v92;
                  v98[1] = v106;
                  float32x2x2_t v107 = (void *)*((void *)v98 + 4);
                  if (v107)
                  {
                    *((void *)v98 + 5) = v107;
                    operator delete(v107);
                    *int32x4_t v103 = 0;
                    *((void *)v98 + 5) = 0;
                    *((void *)v98 + 6) = 0;
                  }
                  v98[2] = *(_OWORD *)((char *)v94 - 56);
                  *((void *)v98 + 6) = *((void *)v94 - 5);
                  *((void *)v94 - 7) = 0;
                  *((void *)v94 - 6) = 0;
                  *((void *)v94 - 5) = 0;
                  long long v108 = *(v94 - 1);
                  *uint64_t v105 = *(v94 - 2);
                  *(_OWORD *)((char *)v98 + 72) = v108;
                  *BOOL v92 = v165;
                  *(_OWORD *)((char *)v94 - 72) = v172;
                  v109 = (void *)*((void *)v94 - 7);
                  if (v109)
                  {
                    *((void *)v94 - 6) = v109;
                    operator delete(v109);
                  }
                  float32x4_t v110 = v94 - 2;
                  *((void *)v94 - 7) = v154;
                  *((void *)v94 - 6) = v95;
                  *((void *)v94 - 5) = v150;
                  _OWORD *v110 = v156;
                  v110[1] = v157;
                  uint64_t v111 = (uint64_t)v98 - a1 + 88;
                  if (v111 >= 89)
                  {
                    unint64_t v112 = (v111 / 0x58uLL - 2) >> 1;
                    float v113 = *((float *)v98 + 19);
                    if (*(float *)(a1 + 88 * v112 + 76) > v113)
                    {
                      uint64_t v155 = (_OWORD *)((char *)v94 - 88);
                      long long v179 = *v98;
                      long long v186 = v98[1];
                      long long v151 = v98[2];
                      uint64_t v114 = *((void *)v98 + 6);
                      *((void *)v98 + 5) = 0;
                      *((void *)v98 + 6) = 0;
                      *int32x4_t v103 = 0;
                      int v159 = *((_DWORD *)v98 + 18);
                      long long v158 = *v105;
                      uint64_t v115 = *((void *)v98 + 10);
                      do
                      {
                        unint64_t v116 = v112;
                        uint64_t v117 = (_OWORD *)(a1 + 88 * v112);
                        long long v118 = v117[1];
                        *unint64_t v98 = *v117;
                        v98[1] = v118;
                        uint64_t v119 = (void *)*((void *)v98 + 4);
                        if (v119)
                        {
                          *((void *)v98 + 5) = v119;
                          operator delete(v119);
                          *((void *)v98 + 4) = 0;
                          *((void *)v98 + 5) = 0;
                          *((void *)v98 + 6) = 0;
                        }
                        unint64_t v120 = a1 + 88 * v116;
                        int v121 = (void **)(v120 + 32);
                        v98[2] = *(_OWORD *)(v120 + 32);
                        uint64_t v123 = *(void *)(v120 + 48);
                        unint64_t v122 = v120 + 48;
                        *((void *)v98 + 6) = v123;
                        *(void *)(v122 - 8) = 0;
                        *(void *)unint64_t v122 = 0;
                        *int v121 = 0;
                        long long v124 = *(_OWORD *)(v122 + 8);
                        *(_OWORD *)((char *)v98 + 72) = *(_OWORD *)(v122 + 24);
                        *(_OWORD *)((char *)v98 + 56) = v124;
                        if (!v116) {
                          break;
                        }
                        unint64_t v112 = (v116 - 1) >> 1;
                        unint64_t v98 = v117;
                      }
                      while (*(float *)(a1 + 88 * v112 + 76) > v113);
                      *uint64_t v117 = v179;
                      v117[1] = v186;
                      uint64_t v125 = *v121;
                      if (*v121)
                      {
                        *(void *)(a1 + 88 * v116 + 40) = v125;
                        operator delete(v125);
                        v121[2] = 0;
                      }
                      *(_OWORD *)int v121 = v151;
                      *(void *)unint64_t v122 = v114;
                      *(_DWORD *)(v122 + 24) = v159;
                      *(_OWORD *)(v122 + 8) = v158;
                      *(float *)(v122 + 28) = v113;
                      *(void *)(v122 + 32) = v115;
                      BOOL v92 = v155;
                    }
                  }
                }
              }
              while (v91-- > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          float32x4_t v13 = (_OWORD *)(a1 + 88 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x2C01)
          {
            sub_248455488((uint64_t)v13, a1, (uint64_t)v142);
          }
          else
          {
            sub_248455488(a1, (uint64_t)v13, (uint64_t)v142);
            uint64_t v14 = 88 * v12;
            unint64_t v15 = a1 + 88 * v12;
            sub_248455488(a1 + 88, v15 - 88, v141);
            sub_248455488(a1 + 176, a1 + 88 + v14, v140);
            sub_248455488(v15 - 88, (uint64_t)v13, a1 + 88 + v14);
            long long v174 = *(_OWORD *)a1;
            long long v181 = *(_OWORD *)(a1 + 16);
            uint64_t v16 = *(void *)(a1 + 48);
            long long v17 = *(_OWORD *)(a1 + 32);
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 48) = 0;
            long long v160 = *(_OWORD *)(a1 + 56);
            long long v167 = *(_OWORD *)(a1 + 72);
            long long v18 = v13[1];
            *(_OWORD *)a1 = *v13;
            *(_OWORD *)(a1 + 16) = v18;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v15 + 32);
            *(void *)(a1 + 48) = *(void *)(v15 + 48);
            *(void *)(v15 + 32) = 0;
            *(void *)(v15 + 40) = 0;
            *(void *)(v15 + 48) = 0;
            long long v19 = *(_OWORD *)(v15 + 56);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v15 + 72);
            *(_OWORD *)(a1 + 56) = v19;
            _OWORD *v13 = v174;
            v13[1] = v181;
            *(_OWORD *)(v15 + 32) = v17;
            *(void *)(v15 + 48) = v16;
            *(_OWORD *)(v15 + 72) = v167;
            *(_OWORD *)(v15 + 56) = v160;
          }
          --a3;
          if (a4) {
            break;
          }
          float v20 = *(float *)(a1 + 76);
          if (*(float *)(a1 - 12) > v20) {
            goto LABEL_12;
          }
          long long v176 = *(_OWORD *)a1;
          long long v183 = *(_OWORD *)(a1 + 16);
          long long v147 = *(_OWORD *)(a1 + 32);
          uint64_t v39 = *(void *)(a1 + 48);
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 32) = 0;
          long long v162 = *(_OWORD *)(a1 + 56);
          int v169 = *(_DWORD *)(a1 + 72);
          if (v20 <= *(a2 - 3))
          {
            unint64_t v42 = a1 + 88;
            do
            {
              unint64_t v9 = v42;
              if (v42 >= (unint64_t)a2) {
                break;
              }
              float v43 = *(float *)(v42 + 76);
              v42 += 88;
            }
            while (v20 <= v43);
          }
          else
          {
            unint64_t v40 = a1;
            do
            {
              unint64_t v9 = v40 + 88;
              float v41 = *(float *)(v40 + 164);
              v40 += 88;
            }
            while (v20 <= v41);
          }
          unint64_t v44 = (long long *)a2;
          if (v9 < (unint64_t)a2)
          {
            do
            {
              unint64_t v44 = (long long *)(a2 - 22);
              float v45 = *(a2 - 3);
              a2 -= 22;
            }
            while (v20 > v45);
          }
          uint64_t v46 = *(void *)(a1 + 80);
          while (v9 < (unint64_t)v44)
          {
            sub_2484553D0((long long *)v9, v44);
            do
            {
              float v47 = *(float *)(v9 + 164);
              v9 += 88;
            }
            while (v20 <= v47);
            do
            {
              float v48 = *((float *)v44 - 3);
              unint64_t v44 = (long long *)((char *)v44 - 88);
            }
            while (v20 > v48);
          }
          unint64_t v49 = (_OWORD *)(v9 - 88);
          BOOL v4 = v9 - 88 >= a1;
          BOOL v5 = v9 - 88 == a1;
          if (v9 - 88 != a1)
          {
            long long v50 = *(_OWORD *)(v9 - 72);
            *(_OWORD *)a1 = *v49;
            *(_OWORD *)(a1 + 16) = v50;
            uint64_t v51 = *(void **)(a1 + 32);
            if (v51)
            {
              *(void *)(a1 + 40) = v51;
              operator delete(v51);
              *(void *)(a1 + 32) = 0;
              *(void *)(a1 + 40) = 0;
              *(void *)(a1 + 48) = 0;
            }
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 - 56);
            *(void *)(a1 + 48) = *(void *)(v9 - 40);
            *(void *)(v9 - 56) = 0;
            *(void *)(v9 - 48) = 0;
            *(void *)(v9 - 40) = 0;
            long long v52 = *(_OWORD *)(v9 - 16);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v9 - 32);
            *(_OWORD *)(a1 + 72) = v52;
          }
          _OWORD *v49 = v176;
          *(_OWORD *)(v9 - 72) = v183;
          int v53 = *(void **)(v9 - 56);
          if (v53)
          {
            *(void *)(v9 - 48) = v53;
            operator delete(v53);
          }
          a4 = 0;
          *(_OWORD *)(v9 - 56) = v147;
          *(void *)(v9 - 40) = v39;
          *(_DWORD *)(v9 - 16) = v169;
          *(_OWORD *)(v9 - 32) = v162;
          *(float *)(v9 - 12) = v20;
          *(void *)(v9 - 8) = v46;
          a2 = (float *)v153;
        }
        float v20 = *(float *)(a1 + 76);
LABEL_12:
        long long v146 = *(_OWORD *)(a1 + 32);
        long long v175 = *(_OWORD *)a1;
        long long v182 = *(_OWORD *)(a1 + 16);
        uint64_t v21 = *(void *)(a1 + 48);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        long long v161 = *(_OWORD *)(a1 + 56);
        int v168 = *(_DWORD *)(a1 + 72);
        unint64_t v22 = a1;
        uint64_t v23 = *(void *)(a1 + 80);
        do
        {
          unint64_t v24 = v22;
          v22 += 88;
        }
        while (*(float *)(v24 + 164) > v20);
        uint64_t v25 = v153;
        if (v24 == a1)
        {
          unint64_t v28 = v153;
          while (v22 < v28)
          {
            uint64_t v26 = (long long *)(v28 - 88);
            float v29 = *(float *)(v28 - 12);
            v28 -= 88;
            if (v29 > v20) {
              goto LABEL_22;
            }
          }
          uint64_t v26 = (long long *)v28;
        }
        else
        {
          do
          {
            uint64_t v26 = (long long *)(v25 - 88);
            float v27 = *(float *)(v25 - 12);
            v25 -= 88;
          }
          while (v27 <= v20);
        }
LABEL_22:
        if (v22 >= (unint64_t)v26)
        {
          unint64_t v9 = v22;
        }
        else
        {
          unint64_t v30 = v26;
          unint64_t v9 = v22;
          do
          {
            sub_2484553D0((long long *)v9, v30);
            do
            {
              float v31 = *(float *)(v9 + 164);
              v9 += 88;
            }
            while (v31 > v20);
            do
            {
              float v32 = *((float *)v30 - 3);
              unint64_t v30 = (long long *)((char *)v30 - 88);
            }
            while (v32 <= v20);
          }
          while (v9 < (unint64_t)v30);
        }
        unint64_t v33 = (_OWORD *)(v9 - 88);
        if (v9 - 88 != a1)
        {
          long long v34 = *(_OWORD *)(v9 - 72);
          *(_OWORD *)a1 = *v33;
          *(_OWORD *)(a1 + 16) = v34;
          int v35 = *(void **)(a1 + 32);
          if (v35)
          {
            *(void *)(a1 + 40) = v35;
            operator delete(v35);
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 48) = 0;
          }
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 - 56);
          *(void *)(a1 + 48) = *(void *)(v9 - 40);
          *(void *)(v9 - 56) = 0;
          *(void *)(v9 - 48) = 0;
          *(void *)(v9 - 40) = 0;
          long long v36 = *(_OWORD *)(v9 - 16);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(v9 - 32);
          *(_OWORD *)(a1 + 72) = v36;
        }
        _OWORD *v33 = v175;
        *(_OWORD *)(v9 - 72) = v182;
        unint64_t v37 = *(void **)(v9 - 56);
        if (v37)
        {
          *(void *)(v9 - 48) = v37;
          operator delete(v37);
        }
        *(_OWORD *)(v9 - 56) = v146;
        *(void *)(v9 - 40) = v21;
        *(_DWORD *)(v9 - 16) = v168;
        *(_OWORD *)(v9 - 32) = v161;
        *(float *)(v9 - 12) = v20;
        *(void *)(v9 - 8) = v23;
        a2 = (float *)v153;
        if (v22 >= (unint64_t)v26) {
          break;
        }
LABEL_39:
        sub_24845407C(a1, v9 - 88, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v38 = sub_2484555F0(a1, v9 - 88);
      if (sub_2484555F0(v9, v153)) {
        break;
      }
      if (!v38) {
        goto LABEL_39;
      }
    }
    a2 = (float *)(v9 - 88);
    if (!v38) {
      continue;
    }
    break;
  }
}

char **sub_248454E0C(char **a1)
{
  uint64_t v2 = 0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  do
  {
    uint64_t v3 = &a1[3 * v2];
    unint64_t v6 = v3[2];
    BOOL v5 = (char *)(v3 + 2);
    unint64_t v4 = (unint64_t)v6;
    size_t v8 = (char **)(v5 + 8);
    unint64_t v7 = (char *)*((void *)v5 + 1);
    unint64_t v9 = (char *)(v7 - v6);
    if ((unint64_t)(v7 - v6) > 0x3FF)
    {
      if (v9 == (char *)1024) {
        goto LABEL_20;
      }
      unint64_t v24 = (char *)(v4 + 1024);
      goto LABEL_16;
    }
    size_t v10 = 1024 - (void)v9;
    uint64_t v11 = &a1[3 * v2];
    uint64_t v14 = v11[4];
    float32x4_t v13 = (char *)(v11 + 4);
    unint64_t v12 = v14;
    if (v14 - v7 >= (unint64_t)(1024 - (void)v9))
    {
      bzero(*((void **)v5 + 1), 1024 - (void)v9);
      unint64_t v24 = &v7[v10];
LABEL_16:
      unsigned int *v8 = v24;
      goto LABEL_20;
    }
    uint64_t v26 = v13;
    unint64_t v15 = (unint64_t)&v12[-v4];
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= 0x400) {
      uint64_t v16 = 1024;
    }
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v17 = v16;
    }
    size_t v18 = v17;
    long long v19 = (char *)operator new(v17);
    float v20 = &v9[(void)v19];
    bzero(v20, v10);
    if (v7 == (char *)v4)
    {
      unint64_t v22 = v26;
    }
    else
    {
      uint64_t v21 = &v7[~v4];
      unint64_t v22 = v26;
      do
      {
        char v23 = *--v7;
        (v21--)[(void)v19] = v23;
      }
      while (v7 != (char *)v4);
      unint64_t v7 = *(char **)v5;
      float v20 = v19;
    }
    *(void *)BOOL v5 = v20;
    unsigned int *v8 = v19 + 1024;
    *(void *)unint64_t v22 = &v19[v18];
    if (v7) {
      operator delete(v7);
    }
LABEL_20:
    sub_2484479D0(&a1[3 * v2++ + 11], 0x400uLL);
  }
  while (v2 != 3);
  return a1;
}

void sub_248454F98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 0;
  while (1)
  {
    unint64_t v4 = *(void **)(v1 + v3 + 136);
    if (v4)
    {
      *(void *)(v1 + v3 + 144) = v4;
      operator delete(v4);
    }
    v3 -= 24;
    if (v3 == -72)
    {
      uint64_t v5 = 0;
      while (1)
      {
        unint64_t v6 = *(void **)(v1 + v5 + 64);
        if (v6)
        {
          *(void *)(v1 + v5 + 72) = v6;
          operator delete(v6);
        }
        v5 -= 24;
        if (v5 == -72) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

uint64_t sub_248454FEC(uint64_t *a1)
{
  unint64_t v1 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v2 = v1 + 1;
  if (v1 + 1 > 0x1642C8590B21642) {
    sub_2483E92E8();
  }
  unint64_t v4 = a1 + 2;
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v2) {
    unint64_t v2 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v5 = 0x1642C8590B21642;
  }
  else {
    unint64_t v5 = v2;
  }
  unint64_t v15 = v4;
  if (v5)
  {
    unint64_t v7 = (char *)sub_248455210(v5);
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v11 = v7;
  unint64_t v12 = (char **)&v7[184 * v1];
  float32x4_t v13 = v12;
  uint64_t v14 = &v7[184 * v6];
  sub_248454E0C(v12);
  size_t v8 = v12;
  v12[20] = 0;
  v8[21] = 0;
  v8[22] = 0;
  v13 += 23;
  sub_24845525C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_2484552E4((uint64_t)&v11);
  return v9;
}

void sub_248455100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484552E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248455114(void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        sub_248455198(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_248455198(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    uint64_t v4 = *(void **)(a1 + i + 136);
    if (v4)
    {
      *(void *)(a1 + i + 144) = v4;
      operator delete(v4);
    }
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    uint64_t v6 = *(void **)(a1 + j + 64);
    if (v6)
    {
      *(void *)(a1 + j + 72) = v6;
      operator delete(v6);
    }
  }
}

void *sub_248455210(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643) {
    sub_2483E9338();
  }
  return operator new(184 * a1);
}

void sub_24845525C(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 184;
    sub_248455334(v6 - 184, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_2484552E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    sub_248455198(i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_248455334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  do
  {
    uint64_t v3 = (void *)(a1 + v2);
    uint64_t v4 = (void *)(a2 + v2);
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = 0;
    *((_OWORD *)v3 + 1) = *(_OWORD *)(a2 + v2 + 16);
    v3[4] = *(void *)(a2 + v2 + 32);
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = 0;
    v2 += 24;
  }
  while (v2 != 72);
  for (uint64_t i = 0; i != 72; i += 24)
  {
    uint64_t v6 = (void *)(a1 + i);
    uint64_t v7 = (void *)(a2 + i);
    v6[11] = 0;
    v6[12] = 0;
    v6[13] = 0;
    *(_OWORD *)(v6 + 11) = *(_OWORD *)(a2 + i + 88);
    v6[13] = *(void *)(a2 + i + 104);
    v7[11] = 0;
    v7[12] = 0;
    v7[13] = 0;
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  __n128 result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 160) = result;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  return result;
}

__n128 sub_2484553D0(long long *a1, long long *a2)
{
  long long v13 = *a1;
  long long v14 = a1[1];
  long long v3 = a1[2];
  uint64_t v4 = *((void *)a1 + 6);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  __n128 v11 = *(__n128 *)((char *)a1 + 56);
  __n128 v12 = *(__n128 *)((char *)a1 + 72);
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  uint64_t v6 = (__n128 *)((char *)a2 + 56);
  long long v7 = *(long long *)((char *)a2 + 72);
  *(long long *)((char *)a1 + 56) = *(long long *)((char *)a2 + 56);
  *(long long *)((char *)a1 + 72) = v7;
  *a2 = v13;
  a2[1] = v14;
  uint64_t v8 = (void *)*((void *)a2 + 4);
  if (v8)
  {
    *((void *)a2 + 5) = v8;
    long long v10 = v3;
    operator delete(v8);
    long long v3 = v10;
  }
  a2[2] = v3;
  *((void *)a2 + 6) = v4;
  __n128 result = v11;
  __n128 *v6 = v11;
  v6[1] = v12;
  return result;
}

double sub_248455488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v6.n128_u32[0] = *(_DWORD *)(a2 + 76);
  float v7 = *(float *)(a3 + 76);
  if (v6.n128_f32[0] <= *(float *)(a1 + 76))
  {
    if (v7 <= v6.n128_f32[0]) {
      return v6.n128_f64[0];
    }
    __n128 v6 = sub_2484553D0((long long *)a2, (long long *)a3);
    v6.n128_u32[0] = *(_DWORD *)(a2 + 76);
    if (v6.n128_f32[0] <= *(float *)(v5 + 76)) {
      return v6.n128_f64[0];
    }
    a1 = v5;
    uint64_t v8 = (long long *)a2;
  }
  else
  {
    if (v7 <= v6.n128_f32[0])
    {
      __n128 v6 = sub_2484553D0((long long *)a1, (long long *)a2);
      v6.n128_u32[0] = *(_DWORD *)(a3 + 76);
      if (v6.n128_f32[0] <= *(float *)(a2 + 76)) {
        return v6.n128_f64[0];
      }
      a1 = a2;
    }
    uint64_t v8 = (long long *)a3;
  }

  v6.n128_u64[0] = sub_2484553D0((long long *)a1, v8).n128_u64[0];
  return v6.n128_f64[0];
}

double sub_248455548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8.n128_f64[0] = sub_248455488(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)(a4 + 76);
  if (v8.n128_f32[0] > *(float *)(a3 + 76))
  {
    __n128 v8 = sub_2484553D0((long long *)a3, (long long *)a4);
    v8.n128_u32[0] = *(_DWORD *)(a3 + 76);
    if (v8.n128_f32[0] > *(float *)(a2 + 76))
    {
      __n128 v8 = sub_2484553D0((long long *)a2, (long long *)a3);
      v8.n128_u32[0] = *(_DWORD *)(a2 + 76);
      if (v8.n128_f32[0] > *(float *)(a1 + 76))
      {
        v8.n128_u64[0] = sub_2484553D0((long long *)a1, (long long *)a2).n128_u64[0];
      }
    }
  }
  return v8.n128_f64[0];
}

BOOL sub_2484555F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 12) > *(float *)(a1 + 76))
      {
        __n128 v6 = (long long *)(a2 - 88);
        float v7 = (long long *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_248455488(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_248455548(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_248455548(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(float *)(a2 - 12) > *(float *)(a1 + 340))
      {
        sub_2484553D0((long long *)(a1 + 264), (long long *)(a2 - 88));
        if (*(float *)(a1 + 340) > *(float *)(a1 + 252))
        {
          sub_2484553D0((long long *)(a1 + 176), (long long *)(a1 + 264));
          if (*(float *)(a1 + 252) > *(float *)(a1 + 164))
          {
            sub_2484553D0((long long *)(a1 + 88), (long long *)(a1 + 176));
            if (*(float *)(a1 + 164) > *(float *)(a1 + 76))
            {
              float v7 = (long long *)a1;
              __n128 v6 = (long long *)(a1 + 88);
LABEL_4:
              sub_2484553D0(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 176;
      sub_248455488(a1, a1 + 88, a1 + 176);
      uint64_t v9 = a1 + 264;
      if (a1 + 264 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = *(float *)(v9 + 76);
    if (v12 > *(float *)(v8 + 76))
    {
      long long v31 = *(_OWORD *)v9;
      long long v32 = *(_OWORD *)(v9 + 16);
      long long v13 = *(void **)(v9 + 32);
      long long v14 = *(_OWORD *)(v9 + 40);
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      long long v28 = v14;
      long long v29 = *(_OWORD *)(v9 + 56);
      int v30 = *(_DWORD *)(v9 + 72);
      uint64_t v15 = v10;
      uint64_t v16 = *(void *)(v9 + 80);
      while (1)
      {
        uint64_t v17 = a1 + v15;
        size_t v18 = (_OWORD *)(a1 + v15 + 264);
        long long v19 = *(_OWORD *)(a1 + v15 + 192);
        *size_t v18 = *(_OWORD *)(a1 + v15 + 176);
        v18[1] = v19;
        float v20 = *(void **)(a1 + v15 + 296);
        if (v20)
        {
          *(void *)(v17 + 304) = v20;
          operator delete(v20);
          *(void *)(v17 + 304) = 0;
          *(void *)(v17 + 312) = 0;
        }
        *(_OWORD *)(v17 + 296) = *(_OWORD *)(v17 + 208);
        *(void *)(v17 + 312) = *(void *)(v17 + 224);
        *(void *)(v17 + 216) = 0;
        *(void *)(v17 + 224) = 0;
        *(void *)(v17 + 208) = 0;
        long long v21 = *(_OWORD *)(v17 + 248);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(v17 + 232);
        *(_OWORD *)(v17 + 336) = v21;
        if (v15 == -176) {
          break;
        }
        uint64_t v22 = a1 + v15;
        float v23 = *(float *)(a1 + v15 + 164);
        v15 -= 88;
        if (v12 <= v23)
        {
          unint64_t v24 = (void **)(v22 + 208);
          uint64_t v25 = a1 + v15 + 264;
          uint64_t v26 = v22 + 232;
          goto LABEL_16;
        }
      }
      unint64_t v24 = (void **)(a1 + 32);
      uint64_t v26 = a1 + 56;
      uint64_t v25 = a1;
LABEL_16:
      *(_OWORD *)uint64_t v25 = v31;
      *(_OWORD *)(v25 + 16) = v32;
      float v27 = *v24;
      if (*v24)
      {
        *(void *)(v25 + 40) = v27;
        operator delete(v27);
      }
      *unint64_t v24 = v13;
      *(_OWORD *)(v25 + 40) = v28;
      *(_OWORD *)uint64_t v26 = v29;
      *(_DWORD *)(v26 + 16) = v30;
      *(float *)(v25 + 76) = v12;
      *(void *)(v25 + 80) = v16;
      if (++v11 == 8) {
        return v9 + 88 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 88;
    v9 += 88;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_2484558EC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_248455920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, void *a8, double a9, uint64_t a10)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v21 = a4;
  unsigned int v10 = a6[1];
  uint64_t result = 2;
  switch(v10)
  {
    case 0u:
      uint64_t result = 4;
      goto LABEL_9;
    case 2u:
      uint64_t result = 1;
      if ((unint64_t)(a5 - 9) < 0xFFFFFFFFFFFFFFF8) {
        return result;
      }
      goto LABEL_9;
    case 3u:
      if ((unint64_t)(a5 - 17) < 0xFFFFFFFFFFFFFFF8) {
        return 1;
      }
      uint64_t result = 2;
LABEL_9:
      unint64_t v12 = result * (unint64_t)*a6;
      uint64_t v19 = result * a7;
      unint64_t v20 = v12;
      if (v10 == 2) {
        uint64_t v13 = (257 << a5) - 257;
      }
      else {
        uint64_t v13 = ~(-1 << a5);
      }
      float v18 = 1.0 / (float)(unint64_t)v13;
      BOOL v17 = a6[2] < 2;
      unint64_t v16 = 0;
      v15[0] = &v21;
      v15[1] = &v19;
      void v15[2] = &a10;
      v15[3] = &v23;
      void v15[4] = &v22;
      v15[5] = &v20;
      v15[6] = a6;
      v15[7] = &v17;
      v15[8] = &v18;
      v15[9] = &v16;
      if (a8)
      {
        long long v14 = a8;
      }
      else
      {
        v24[0] = 0;
        v24[1] = v24;
        long long v14 = v24;
      }
      *(float *)&a9 = 1.0 / (float)(unint64_t)v13;
      uint64_t result = sub_248455A8C((uint64_t)v14, a3, (uint64_t)v15, a9, 1.0);
      if (!result) {
        atomic_load(&v16);
      }
      return result;
    case 5u:
      goto LABEL_9;
    default:
      uint64_t result = 0;
      goto LABEL_9;
  }
}

BOOL sub_248455A8C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  if (!a2) {
    return 0;
  }
  int v5 = a2;
  v8[0] = sub_2483F1794;
  v8[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int, double, float), void, uint64_t))a1)(*(void *)(a1 + 8), v8, sub_248455DCC, sub_248455B3C, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v5; ++i)
    sub_248455B3C((uint64_t)v8, i, a4, a5);
  return 0;
}

uint64_t sub_248455B3C(uint64_t a1, unsigned int a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = **(void **)v4 * a2;
  uint64_t v6 = **(void **)(v4 + 8);
  float v7 = (float *)(*(void *)(**(void **)(v4 + 16) + 24) + *(void *)(**(void **)(v4 + 16) + 16) * a2);
  uint64_t v8 = **(void **)(v4 + 24);
  uint64_t v9 = (unsigned int *)(v8 + v6 + v5);
  uint64_t v10 = **(void **)(v4 + 32);
  uint64_t v11 = **(void **)(v4 + 40);
  uint64_t result = **(unsigned __int8 **)(v4 + 56);
  float v13 = **(float **)(v4 + 64);
  switch(*(_DWORD *)(*(void *)(v4 + 48) + 4))
  {
    case 0:
      if (**(unsigned char **)(v4 + 56))
      {
        for (; v10; --v10)
        {
          *(_DWORD *)v7++ = *v9;
          uint64_t v9 = (unsigned int *)((char *)v9 + v11);
        }
      }
      else
      {
        for (; v10; --v10)
        {
          *(_DWORD *)v7++ = bswap32(*v9);
          uint64_t v9 = (unsigned int *)((char *)v9 + v11);
        }
      }
      break;
    case 2:
      for (; v10; --v10)
      {
        *v7++ = v13 * (float)(*(unsigned __int8 *)v9 | (*(unsigned __int8 *)v9 << 8));
        uint64_t v9 = (unsigned int *)((char *)v9 + v11);
      }
      break;
    case 3:
      if (**(unsigned char **)(v4 + 56))
      {
        if (v10)
        {
          uint64_t v14 = v6 + v5 + v8 + 1;
          do
          {
            LOWORD(a4) = *(_WORD *)(v14 - 1);
            a4 = v13 * (float)LODWORD(a4);
            *v7++ = a4;
            v14 += v11;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        uint64_t v19 = v6 + v5 + v8 + 1;
        do
        {
          *v7++ = v13 * (float)__rev16(*(unsigned __int16 *)(v19 - 1));
          v19 += v11;
          --v10;
        }
        while (v10);
      }
      break;
    case 5:
      if (**(unsigned char **)(v4 + 56))
      {
        if (v10)
        {
          uint64_t v15 = (unsigned __int8 *)(v6 + v5 + v8 + 1);
          do
          {
            unsigned int v16 = *v15;
            uint64_t result = (v16 >> 2) & 0x1F;
            unsigned int v17 = *(v15 - 1) | (v16 << 8) & 0x3FF;
            if (result)
            {
              LODWORD(v18) = ((v16 << 24) & 0x80000000 | (result << 23) | (v17 << 13)) + 939524096;
            }
            else
            {
              float v18 = -(float)((float)((float)v17 * 0.00097656) * 0.000061035);
              if (((*(v15 - 1) | (*v15 << 8)) & 0x8000u) == 0) {
                float v18 = (float)((float)v17 * 0.00097656) * 0.000061035;
              }
            }
            v15 += v11;
            *v7++ = v18;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        unint64_t v20 = (unsigned __int8 *)(v6 + v5 + v8 + 1);
        do
        {
          unsigned int v21 = *(v20 - 1);
          signed __int16 v22 = _byteswap_ushort(*(_WORD *)(v20 - 1));
          uint64_t result = (v21 >> 2) & 0x1F;
          unsigned int v23 = *v20 | (v21 << 8) & 0x3FF;
          if (result)
          {
            LODWORD(v24) = ((v21 << 24) & 0x80000000 | (result << 23) | (v23 << 13)) + 939524096;
          }
          else
          {
            float v24 = -(float)((float)((float)v23 * 0.00097656) * 0.000061035);
            if (v22 >= 0) {
              float v24 = (float)((float)v23 * 0.00097656) * 0.000061035;
            }
          }
          v20 += v11;
          *v7++ = v24;
          --v10;
        }
        while (v10);
      }
      break;
    default:
      atomic_fetch_add(*(atomic_ullong *volatile *)(v4 + 72), 1uLL);
      break;
  }
  return result;
}

uint64_t sub_248455DCC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL sub_248455DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v136[1] = *MEMORY[0x263EF8340];
  uint64_t v126 = a8;
  uint64_t v127 = a3;
  sub_24844C318((uint64_t)v111, a1);
  if (v112 == 9)
  {
    int v112 = 8;
    goto LABEL_50;
  }
  if (v112 != -1)
  {
LABEL_50:
    if (v123 != v122 && v123 - v122 != 32 || v125 != v124 && v125 - v124 != 12) {
      goto LABEL_84;
    }
    if (!v114 && v111[0] == 0.0) {
      v111[0] = 0.001;
    }
    if (v121 == -1.0) {
      float v121 = v111[0];
    }
    int v72 = v118;
    if (v118 <= 0)
    {
      int v72 = 1;
      int v118 = 1;
      if (!v120 && v111[0] >= 20.0)
      {
        int v72 = 2;
        int v118 = 2;
        float v73 = (float)(v111[0] + -20.0) * 0.25 + 6.0;
        v111[0] = v73;
      }
    }
    int v74 = v119;
    if (v119 <= 0)
    {
      int v119 = v72;
      int v74 = v72;
    }
    if (v111[0] < 0.0) {
      goto LABEL_84;
    }
    unsigned int v75 = v117;
    if ((v117 & 0x80000000) != 0)
    {
      if (v117 != -1) {
        goto LABEL_84;
      }
      unsigned int v75 = 0;
      unsigned int v117 = 0;
    }
    if (v74 < v72) {
      int v119 = v72;
    }
    if (v72 > 1 || *(unsigned char *)(a2 + 17))
    {
      unsigned int v75 = 0;
      unsigned int v117 = 0;
    }
    uint64_t v76 = *(void *)(a2 + 8);
    if (v76 + (unint64_t)v75 <= 4 && (v111[0] == 0.0 || v111[0] >= 0.001))
    {
      int v77 = *(unsigned __int8 *)(a4 + 368);
      if (*(unsigned char *)(a4 + 368))
      {
        char v115 = 0;
        int v116 = 0;
        char v114 = 0;
      }
      BOOL v67 = 1;
      if (*(void *)a4 && *(void *)(a4 + 8) && (!v77 || v113))
      {
        if (sub_248456AF4((uint64_t)v111, v76, *(_DWORD *)(v127 + 320), a4)) {
          uint64_t v78 = sub_248456C08();
        }
        else {
          uint64_t v78 = sub_248458FA4();
        }
        BOOL v67 = v78;
      }
      goto LABEL_85;
    }
LABEL_84:
    BOOL v67 = 1;
    goto LABEL_85;
  }
  if (!v114 || (sub_248456844((uint64_t)v111) & 1) == 0)
  {
    int v112 = 0;
    goto LABEL_50;
  }
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  int64x2_t v109 = 0uLL;
  float32x4_t v110 = 0;
  float32x2x2_t v107 = 0;
  __p = 0;
  uint64_t v108 = 0;
  sub_24844C318((uint64_t)v95, a1);
  char v13 = 0;
  uint64_t v14 = 0;
  int v96 = 0;
  int v100 = 4;
  v136[0] = 0x42A0000000000000;
  do
  {
    char v15 = 0;
    uint64_t v16 = 0;
    char v82 = v13;
    int v104 = *((_DWORD *)v136 + v14);
    uint64_t v135 = 0x42BE000000000000;
    do
    {
      uint64_t v17 = 0;
      char v83 = v15;
      int v103 = *((_DWORD *)&v136[-1] + v16);
      uint64_t v133 = 0x40000000000;
      int v134 = 70000;
      do
      {
        uint64_t v84 = v17;
        uint64_t v18 = 0;
        int v105 = *((_DWORD *)&v133 + v17);
        uint64_t v131 = 0x2FFFFFFFFLL;
        int v132 = 3;
        do
        {
          uint64_t v85 = v18;
          if (*((_DWORD *)&v131 + v18) == -1)
          {
            float v19 = 0.0;
          }
          else
          {
            int v102 = *((_DWORD *)&v131 + v18);
            float v19 = 1.0;
          }
          char v20 = 0;
          uint64_t v21 = 0;
          float v99 = v19;
          uint64_t v130 = 0xF00000000;
          unint64_t v22 = v109.u64[1];
          do
          {
            uint64_t v23 = 0;
            char v86 = v20;
            int v101 = *((_DWORD *)&v130 + v21);
            unint64_t v128 = 0xFFFFFFFF00000000;
            int v129 = 3;
            do
            {
              char v24 = 0;
              uint64_t v25 = 0;
              int v97 = *((_DWORD *)&v128 + v23);
              __int16 v94 = 255;
              do
              {
                char v26 = v24;
                char v98 = *((unsigned char *)&v94 + v25);
                if (v22 >= (unint64_t)v110)
                {
                  unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v109.i64[0]) >> 7);
                  unint64_t v28 = v27 + 1;
                  if (v27 + 1 > 0x66666666666666) {
                    sub_2483E92E8();
                  }
                  if (0x999999999999999ALL * (((uint64_t)v110 - v109.i64[0]) >> 7) > v28) {
                    unint64_t v28 = 0x999999999999999ALL * (((uint64_t)v110 - v109.i64[0]) >> 7);
                  }
                  if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v110 - v109.i64[0]) >> 7) >= 0x33333333333333) {
                    unint64_t v29 = 0x66666666666666;
                  }
                  else {
                    unint64_t v29 = v28;
                  }
                  unint64_t v90 = &v110;
                  if (v29)
                  {
                    if (v29 > 0x66666666666666) {
                      sub_2483E9338();
                    }
                    int v30 = (uint64_t *)operator new(640 * v29);
                  }
                  else
                  {
                    int v30 = 0;
                  }
                  unint64_t v87 = v30;
                  v88.i64[0] = (uint64_t)&v30[80 * v27];
                  v88.i64[1] = v88.i64[0];
                  uint64_t v89 = &v30[80 * v29];
                  sub_24844C318(v88.i64[0], (uint64_t)v95);
                  uint64_t v31 = v88.i64[0];
                  unint64_t v22 = v88.i64[1] + 640;
                  v88.i64[1] += 640;
                  uint64_t v32 = v109.i64[1];
                  uint64_t v33 = v109.i64[0];
                  if (v109.i64[1] == v109.i64[0])
                  {
                    int64x2_t v65 = vdupq_n_s64(v109.u64[1]);
                  }
                  else
                  {
                    uint64_t v34 = 0;
                    do
                    {
                      uint64_t v35 = v31 + v34;
                      uint64_t v36 = v32 + v34;
                      uint64_t v37 = v31 + v34 - 632;
                      *(_DWORD *)(v31 + v34 - 640) = *(_DWORD *)(v32 + v34 - 640);
                      uint64_t v38 = v32 + v34 - 632;
                      *(void *)uint64_t v37 = 0;
                      *(_OWORD *)(v37 + 8) = 0uLL;
                      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
                      *(void *)(v31 + v34 - 616) = *(void *)(v32 + v34 - 616);
                      *(void *)(v38 + 16) = 0;
                      uint64_t v39 = v31 + v34 - 608;
                      *(_OWORD *)uint64_t v38 = 0uLL;
                      long long v40 = *(_OWORD *)(v32 + v34 - 512);
                      long long v42 = *(_OWORD *)(v32 + v34 - 560);
                      long long v41 = *(_OWORD *)(v32 + v34 - 544);
                      *(_OWORD *)(v39 + 80) = *(_OWORD *)(v32 + v34 - 528);
                      *(_OWORD *)(v39 + 96) = v40;
                      *(_OWORD *)(v39 + 48) = v42;
                      *(_OWORD *)(v39 + 64) = v41;
                      long long v44 = *(_OWORD *)(v32 + v34 - 480);
                      long long v43 = *(_OWORD *)(v32 + v34 - 464);
                      long long v45 = *(_OWORD *)(v32 + v34 - 496);
                      *(_DWORD *)(v39 + 160) = *(_DWORD *)(v32 + v34 - 448);
                      *(_OWORD *)(v39 + 128) = v44;
                      *(_OWORD *)(v39 + 144) = v43;
                      *(_OWORD *)(v39 + 112) = v45;
                      long long v46 = *(_OWORD *)(v32 + v34 - 608);
                      long long v47 = *(_OWORD *)(v32 + v34 - 576);
                      *(_OWORD *)(v39 + 16) = *(_OWORD *)(v32 + v34 - 592);
                      *(_OWORD *)(v39 + 32) = v47;
                      uint64_t v48 = v31 + v34 - 440;
                      *(_OWORD *)uint64_t v39 = v46;
                      long long v49 = *(_OWORD *)(v32 + v34 - 440);
                      *(void *)(v48 + 16) = *(void *)(v32 + v34 - 424);
                      long long v50 = (void *)(v31 + v34 - 416);
                      *(_OWORD *)uint64_t v48 = v49;
                      uint64_t v51 = v32 + v34 - 416;
                      v50[1] = 0;
                      v50[2] = 0;
                      *long long v50 = 0;
                      *(_OWORD *)long long v50 = *(_OWORD *)v51;
                      *(void *)(v31 + v34 - 400) = *(void *)(v32 + v34 - 400);
                      *(void *)(v32 + v34 - 408) = 0;
                      *(void *)uint64_t v51 = 0;
                      *(void *)(v51 + 16) = 0;
                      uint64_t v52 = v31 + v34 - 392;
                      long long v53 = *(_OWORD *)(v32 + v34 - 392);
                      long long v54 = *(_OWORD *)(v32 + v34 - 376);
                      *(void *)(v52 + 32) = *(void *)(v32 + v34 - 360);
                      *(_OWORD *)uint64_t v52 = v53;
                      *(_OWORD *)(v52 + 16) = v54;
                      long long v55 = *(_OWORD *)(v32 + v34 - 352);
                      unint64_t v56 = (void *)(v31 + v34 - 336);
                      uint64_t v57 = v32 + v34 - 336;
                      v56[1] = 0;
                      v56[2] = 0;
                      *(_OWORD *)(v31 + v34 - 352) = v55;
                      *unint64_t v56 = 0;
                      *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
                      *(void *)(v31 + v34 - 320) = *(void *)(v32 + v34 - 320);
                      *(void *)(v32 + v34 - 328) = 0;
                      *(void *)uint64_t v57 = 0;
                      BOOL v58 = (void *)(v31 + v34 - 312);
                      *(void *)(v57 + 16) = 0;
                      uint64_t v59 = *(void *)(v32 + v34 - 312);
                      *(void *)((char *)v58 + 5) = *(void *)(v32 + v34 - 307);
                      *BOOL v58 = v59;
                      *(unsigned char *)(v31 + v34 - 296) = *(unsigned char *)(v32 + v34 - 296);
                      unint64_t v60 = (_OWORD *)(v31 + v34 - 288);
                      long long v61 = *(_OWORD *)(v32 + v34 - 288);
                      long long v62 = *(_OWORD *)(v32 + v34 - 272);
                      long long v63 = *(_OWORD *)(v32 + v34 - 256);
                      *(_OWORD *)(v35 - 247) = *(_OWORD *)(v32 + v34 - 247);
                      *(_OWORD *)(v35 - 256) = v63;
                      *unint64_t v60 = v61;
                      v60[1] = v62;
                      *(void *)(v35 - 216) = 0;
                      *(void *)(v35 - 208) = 0;
                      *(void *)(v35 - 224) = 0;
                      *(_OWORD *)(v35 - 224) = *(_OWORD *)(v32 + v34 - 224);
                      *(void *)(v35 - 208) = *(void *)(v32 + v34 - 208);
                      *(void *)(v36 - 224) = 0;
                      *(void *)(v36 - 216) = 0;
                      *(void *)(v36 - 208) = 0;
                      *(void *)(v35 - 200) = 0;
                      *(void *)(v35 - 192) = 0;
                      *(void *)(v35 - 184) = 0;
                      *(_OWORD *)(v35 - 200) = *(_OWORD *)(v32 + v34 - 200);
                      *(void *)(v35 - 184) = *(void *)(v32 + v34 - 184);
                      *(void *)(v36 - 200) = 0;
                      *(void *)(v36 - 192) = 0;
                      *(void *)(v36 - 184) = 0;
                      *(void *)(v35 - 176) = 0;
                      *(void *)(v35 - 168) = 0;
                      *(void *)(v35 - 160) = 0;
                      *(_OWORD *)(v35 - 176) = *(_OWORD *)(v32 + v34 - 176);
                      *(void *)(v35 - 160) = *(void *)(v32 + v34 - 160);
                      *(void *)(v36 - 168) = 0;
                      *(void *)(v36 - 160) = 0;
                      *(void *)(v36 - 176) = 0;
                      LODWORD(v60) = *(_DWORD *)(v32 + v34 - 152);
                      *(void *)(v35 - 136) = 0;
                      *(void *)(v35 - 128) = 0;
                      *(void *)(v35 - 144) = 0;
                      *(_DWORD *)(v35 - 152) = v60;
                      *(_OWORD *)(v35 - 144) = *(_OWORD *)(v32 + v34 - 144);
                      *(void *)(v35 - 128) = *(void *)(v32 + v34 - 128);
                      *(void *)(v36 - 144) = 0;
                      *(void *)(v36 - 136) = 0;
                      *(void *)(v36 - 128) = 0;
                      *(void *)(v35 - 112) = 0;
                      *(void *)(v35 - 104) = 0;
                      *(void *)(v35 - 120) = 0;
                      *(_OWORD *)(v35 - 120) = *(_OWORD *)(v32 + v34 - 120);
                      *(void *)(v35 - 104) = *(void *)(v32 + v34 - 104);
                      *(void *)(v36 - 120) = 0;
                      *(void *)(v36 - 112) = 0;
                      *(void *)(v36 - 104) = 0;
                      *(void *)(v35 - 96) = 0;
                      *(void *)(v35 - 88) = 0;
                      *(void *)(v35 - 80) = 0;
                      *(_OWORD *)(v35 - 96) = *(_OWORD *)(v32 + v34 - 96);
                      *(void *)(v35 - 80) = *(void *)(v32 + v34 - 80);
                      *(void *)(v36 - 96) = 0;
                      *(void *)(v36 - 88) = 0;
                      *(void *)(v36 - 80) = 0;
                      *(void *)(v35 - 72) = 0;
                      *(void *)(v35 - 64) = 0;
                      *(void *)(v35 - 56) = 0;
                      *(_OWORD *)(v35 - 72) = *(_OWORD *)(v32 + v34 - 72);
                      *(void *)(v35 - 56) = *(void *)(v32 + v34 - 56);
                      *(void *)(v36 - 72) = 0;
                      *(void *)(v36 - 64) = 0;
                      *(void *)(v36 - 56) = 0;
                      *(void *)(v35 - 48) = 0;
                      *(void *)(v35 - 40) = 0;
                      *(void *)(v35 - 32) = 0;
                      *(_OWORD *)(v35 - 48) = *(_OWORD *)(v32 + v34 - 48);
                      *(void *)(v35 - 32) = *(void *)(v32 + v34 - 32);
                      *(void *)(v36 - 48) = 0;
                      *(void *)(v36 - 40) = 0;
                      *(void *)(v36 - 32) = 0;
                      long long v64 = *(_OWORD *)(v32 + v34 - 24);
                      *(void *)(v35 - 8) = *(void *)(v32 + v34 - 8);
                      *(_OWORD *)(v35 - 24) = v64;
                      v34 -= 640;
                    }
                    while (v32 + v34 != v33);
                    v31 += v34;
                    int64x2_t v65 = v109;
                    unint64_t v22 = v88.u64[1];
                  }
                  v109.i64[0] = v31;
                  v109.i64[1] = v22;
                  int64x2_t v88 = v65;
                  uint64_t v66 = v110;
                  float32x4_t v110 = v89;
                  uint64_t v89 = v66;
                  unint64_t v87 = (uint64_t *)v65.i64[0];
                  sub_248468A0C((uint64_t)&v87);
                }
                else
                {
                  sub_24844C318(v22, (uint64_t)v95);
                  v22 += 640;
                }
                v109.i64[1] = v22;
                char v24 = 1;
                uint64_t v25 = 1;
              }
              while ((v26 & 1) == 0);
              ++v23;
            }
            while (v23 != 3);
            char v20 = 1;
            uint64_t v21 = 1;
          }
          while ((v86 & 1) == 0);
          uint64_t v18 = v85 + 1;
        }
        while (v85 != 2);
        uint64_t v17 = v84 + 1;
      }
      while (v84 != 2);
      char v15 = 1;
      uint64_t v16 = 1;
    }
    while ((v83 & 1) == 0);
    char v13 = 1;
    uint64_t v14 = 1;
  }
  while ((v82 & 1) == 0);
  sub_2483FEEE4((char **)&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v109.i64[0]) >> 7));
  LOBYTE(v133) = 0;
  unint64_t v87 = &v133;
  v88.i64[0] = (uint64_t)&v109;
  v88.i64[1] = a2;
  uint64_t v89 = &v127;
  unint64_t v90 = (void *)a4;
  uint64_t v91 = v80;
  BOOL v92 = &v126;
  p_p = &__p;
  BOOL v67 = sub_2484568A0(v81, -858993459 * ((unint64_t)(v109.i64[1] - v109.i64[0]) >> 7), (uint64_t)&v87);
  if (!v67)
  {
    unsigned __int8 v68 = atomic_load((unsigned __int8 *)&v133);
    if ((v68 & 1) == 0)
    {
      unint64_t v69 = 0xCCCCCCCCCCCCCCCDLL * ((v109.i64[1] - v109.i64[0]) >> 7);
      if (v69 < 2)
      {
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v70 = 0;
        for (uint64_t i = 1; i != v69; ++i)
        {
          if (*((void *)__p + v70) > *((void *)__p + i)) {
            uint64_t v70 = i;
          }
        }
      }
      sub_2484568E0((uint64_t)v111, v109.i64[0] + 640 * v70);
      sub_2484414D4((uint64_t)v95);
      if (__p)
      {
        float32x2x2_t v107 = __p;
        operator delete(__p);
      }
      v95[0] = (void **)&v109;
      sub_248456A70(v95);
      goto LABEL_50;
    }
    BOOL v67 = 1;
  }
  sub_2484414D4((uint64_t)v95);
  if (__p)
  {
    float32x2x2_t v107 = __p;
    operator delete(__p);
  }
  v95[0] = (void **)&v109;
  sub_248456A70(v95);
LABEL_85:
  sub_2484414D4((uint64_t)v111);
  return v67;
}

void sub_2484567C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_2484414D4((uint64_t)&a28);
  unint64_t v29 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v29;
    operator delete(v29);
  }
  a28 = (uint64_t)&STACK[0x330];
  sub_248456A70((void ***)&a28);
  sub_2484414D4((uint64_t)&STACK[0x348]);
  _Unwind_Resume(a1);
}

uint64_t sub_248456844(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 68) && (*(float *)a1 != 0.0 || !*(_DWORD *)(a1 + 64))) {
    return 0;
  }
  for (uint64_t i = *(float **)(a1 + 8); i != *(float **)(a1 + 16); ++i)
  {
    if (*i > 0.0 || *i < 0.0 && *(float *)a1 != 0.0) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_2484568A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    return sub_248468748(a1, a2, a3);
  }
  else
  {
    void v6[2] = v3;
    v6[3] = v4;
    v6[0] = 0;
    v6[1] = v6;
    return sub_248468748((uint64_t)v6, a2, a3);
  }
}

uint64_t sub_2484568E0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    sub_2483FB040((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    long long v4 = *(_OWORD *)(a2 + 32);
    long long v5 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 32) = v4;
    long long v6 = *(_OWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 96);
    long long v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 96) = v7;
    long long v9 = *(_OWORD *)(a2 + 144);
    long long v10 = *(_OWORD *)(a2 + 160);
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v10;
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 144) = v9;
    long long v12 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v12;
    sub_2483FB040((char *)(a1 + 224), *(char **)(a2 + 224), *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 2);
    long long v13 = *(_OWORD *)(a2 + 248);
    long long v14 = *(_OWORD *)(a2 + 264);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v14;
    *(_OWORD *)(a1 + 248) = v13;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    sub_248467FE0((char *)(a1 + 304), *(char **)(a2 + 304), *(void *)(a2 + 312), (uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3);
    uint64_t v15 = *(void *)(a2 + 328);
    *(void *)(a1 + 333) = *(void *)(a2 + 333);
    *(void *)(a1 + 328) = v15;
    *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
    long long v16 = *(_OWORD *)(a2 + 352);
    long long v17 = *(_OWORD *)(a2 + 368);
    long long v18 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
    *(_OWORD *)(a1 + 368) = v17;
    *(_OWORD *)(a1 + 384) = v18;
    *(_OWORD *)(a1 + 352) = v16;
    sub_2483FB040((char *)(a1 + 416), *(char **)(a2 + 416), *(void *)(a2 + 424), (uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 2);
    sub_2483FB040((char *)(a1 + 440), *(char **)(a2 + 440), *(void *)(a2 + 448), (uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 2);
    sub_2484680E8((char *)(a1 + 464), *(char **)(a2 + 464), *(void *)(a2 + 472), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3));
  }
  sub_248468228(a1 + 488, a2 + 488);
  long long v19 = *(_OWORD *)(a2 + 616);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = v19;
  return a1;
}

void sub_248456A70(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_2484414D4(v4 - 640);
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_248456AF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a1 + 404);
  if (!v4) {
    return 0;
  }
  if (v4 == -1)
  {
    int v7 = *(_DWORD *)(a1 + 48);
    if (v7 < 1) {
      return 0;
    }
    float v8 = *(float *)a1;
    BOOL v9 = v7 > 2 || v8 <= 0.5;
    if (!v9 || v7 == 3 && v8 >= 3.0) {
      return 0;
    }
  }
  BOOL v10 = *(void *)(a4 + 8) >= 0x801uLL || *(void *)a4 >= 0x801uLL;
  if (!v10 || *(unsigned char *)(a4 + 368) != 0) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 77) == 1 || *(unsigned char *)(a1 + 79) == 1) {
    return 0;
  }
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 112)) {
    return result;
  }
  if (a2) {
    return result;
  }
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 380) != 1 || *(_DWORD *)(a1 + 384) != 1 || *(unsigned char *)(a1 + 32)) {
    return result;
  }
  if (sub_248456844(a1) && *(int *)(a1 + 352) <= 0)
  {
    int v14 = *(unsigned __int8 *)(a1 + 68);
    return *(_DWORD *)(a1 + 64) == v14;
  }
  if (a3) {
    return 0;
  }
  int v14 = 0;
  BOOL result = 0;
  if (!*(unsigned char *)(a1 + 68)) {
    return *(_DWORD *)(a1 + 64) == v14;
  }
  return result;
}

uint64_t sub_248456C08()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  unint64_t v316 = v3;
  unint64_t v306 = v4;
  unint64_t v307 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v0;
  sub_248459D24((uint64_t)v360);
  long long v13 = *(const void **)(v12 + 616);
  if (*(unsigned char *)(v12 + 89) == 1)
  {
    if (!v13)
    {
      long long v369 = xmmword_2484DCE20;
      long long v370 = xmmword_2484DCE30;
      long long v371 = 8uLL;
      memset(v372, 0, sizeof(v372));
      memset(v373, 0, sizeof(v373));
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v13)
  {
LABEL_5:
    memmove(&v369, v13, 0x110uLL);
    goto LABEL_6;
  }
  if (*(unsigned char *)(v12 + 88) == 1)
  {
    long long v369 = xmmword_2484DCDF0;
    long long v370 = xmmword_2484DCE00;
    long long v371 = xmmword_2484DCE10;
    *(_OWORD *)double v372 = xmmword_2484DCE20;
    memset(v373, 0, sizeof(v373));
    *(void *)&v372[16] = 0;
  }
LABEL_6:
  sub_24841CCA4((uint64_t)&v353, v9);
  if (*(unsigned char *)(v7 + 368)) {
    sub_248459FC0();
  }
  uint64_t v14 = sub_24845A124(*(void *)v7, *(void *)(v7 + 8), v12, (uint64_t *)&v369, v11, 0, (uint64_t)&v353);
  if (!v14)
  {
    uint64_t v15 = v369;
    sub_248473388((uint64_t)v352, (uint64_t)&v353, v12, 1);
    unint64_t v349 = 0;
    uint64_t v350 = 0;
    uint64_t v351 = 0;
    sub_24840370C((uint64x2_t *)v343, (uint64_t)&v353);
    unint64_t v308 = (uint64_t *)v7;
    unint64_t v16 = 8 * v348;
    uint64_t v17 = *(void *)v7 - 1;
    unint64_t v18 = (v17 + v348) / v348;
    uint64_t v19 = *(void *)(v7 + 8) - 1;
    unint64_t v313 = v17 + 8 * v348;
    unint64_t v304 = v348;
    unint64_t v20 = v19 + 8 * v348;
    unint64_t v309 = (v19 + v348) / v348;
    unint64_t v310 = v313 / (8 * v348);
    unint64_t v21 = v20 / (8 * v348);
    unint64_t v299 = v21 * v310;
    uint64_t v322 = v21 * v310 + 2;
    sub_2483EB1C4((char **)&v349, v322 + v309 * v18 * v15);
    uint64_t v301 = v12;
    uint64_t v302 = v11;
    uint64_t v303 = v9;
    uint64_t v305 = v2;
    unint64_t v22 = v349;
    *(_DWORD *)unint64_t v349 = 0;
    unint64_t v315 = v16;
    if (v16 <= v20)
    {
      __p = 0;
      uint64_t v23 = 0;
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      if (v310 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v310;
      }
      if (v21 <= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v21;
      }
      uint64_t v311 = v28;
      uint64_t v24 = 1;
      unint64_t v29 = 8;
      uint64_t v31 = v21 * v310 + 2;
      unint64_t v30 = v309 * v18;
      uint64_t v319 = v27;
      do
      {
        uint64_t v318 = v26;
        unint64_t v317 = v29;
        if (v16 <= v313)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          unint64_t v34 = v26 * v310;
          unint64_t v35 = 8 * v26;
          if (8 * v26 + 8 >= v309) {
            unint64_t v36 = v309;
          }
          else {
            unint64_t v36 = 8 * v26 + 8;
          }
          if (v29 >= v309) {
            unint64_t v37 = v309;
          }
          else {
            unint64_t v37 = v29;
          }
          unint64_t v38 = 8;
          unint64_t v325 = v26 * v310;
          do
          {
            uint64_t v39 = (void *)(v33 + v34);
            if ((unint64_t)v23 >= v25)
            {
              uint64_t v329 = v32;
              uint64_t v331 = (void *)(v33 + v34);
              unint64_t v326 = v38;
              uint64_t v40 = (v23 - __p) >> 3;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61) {
                sub_2483E92E8();
              }
              if ((uint64_t)(v25 - (void)__p) >> 2 > v41) {
                unint64_t v41 = (uint64_t)(v25 - (void)__p) >> 2;
              }
              if (v25 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42) {
                unint64_t v42 = (unint64_t)sub_2483F04AC(v42);
              }
              else {
                uint64_t v43 = 0;
              }
              long long v44 = (char *)(v42 + 8 * v40);
              *(void *)long long v44 = v331;
              long long v45 = v44 + 8;
              if (v23 == __p)
              {
                long long v46 = __p;
              }
              else
              {
                long long v46 = __p;
                do
                {
                  uint64_t v47 = *((void *)v23 - 1);
                  v23 -= 8;
                  *((void *)v44 - 1) = v47;
                  v44 -= 8;
                }
                while (v23 != __p);
              }
              unint64_t v25 = v42 + 8 * v43;
              if (v46)
              {
                unint64_t v48 = v42 + 8 * v43;
                uint64_t v23 = v45;
                operator delete(v46);
                unint64_t v25 = v48;
                unint64_t v22 = v349;
                __p = v44;
              }
              else
              {
                __p = v44;
                uint64_t v23 = v45;
              }
              uint64_t v31 = v322;
              unint64_t v30 = v309 * v18;
              uint64_t v27 = v319;
              unint64_t v38 = v326;
              uint64_t v32 = v329;
              unint64_t v34 = v325;
              uint64_t v39 = v331;
            }
            else
            {
              *(void *)uint64_t v23 = v39;
              v23 += 8;
            }
            uint64_t v49 = v24 + 1;
            v22[(void)v39 + 1] = v24;
            if (v15)
            {
              uint64_t v50 = 0;
              unint64_t v51 = 8 * v33 + 8;
              if (v51 >= v18) {
                unint64_t v51 = v18;
              }
              if (v38 >= v18) {
                unint64_t v52 = v18;
              }
              else {
                unint64_t v52 = v38;
              }
              uint64_t v53 = v52 + v32;
              do
              {
                if (v35 >= v36)
                {
                  uint64_t v24 = v49;
                }
                else
                {
                  unint64_t v54 = v35;
                  do
                  {
                    if (8 * v33 >= v51)
                    {
                      uint64_t v24 = v49;
                    }
                    else
                    {
                      uint64_t v55 = v53;
                      uint64_t v56 = 8 * v33;
                      do
                      {
                        uint64_t v24 = v49 + 1;
                        v22[v31 + v50 * v30 + v54 * v18 + v56++] = v49++;
                        --v55;
                      }
                      while (v55);
                    }
                    ++v54;
                    uint64_t v49 = v24;
                  }
                  while (v54 != v37);
                }
                ++v50;
                uint64_t v49 = v24;
              }
              while (v50 != v15);
            }
            else
            {
              ++v24;
            }
            ++v33;
            v38 += 8;
            v32 -= 8;
          }
          while (v33 != v27);
        }
        uint64_t v26 = v318 + 1;
        unint64_t v29 = v317 + 8;
        unint64_t v16 = v315;
      }
      while (v318 + 1 != v311);
    }
    else
    {
      __p = 0;
      uint64_t v23 = 0;
      LODWORD(v24) = 1;
    }
    v22[v299 + 1] = v24;
    uint64_t v57 = v308;
    uint64_t v58 = *v308;
    unint64_t v340 = 0;
    uint64_t v341 = 0;
    uint64_t v342 = 0;
    unint64_t v337 = 0;
    unint64_t v338 = 0;
    unint64_t v339 = 0;
    uint64_t v300 = v316[5];
    *(void *)&long long v383 = 0;
    unint64_t v320 = (v23 - __p) >> 3;
    unint64_t v363 = v320;
    if (v23 == __p)
    {
      unint64_t v140 = 0;
      unint64_t v298 = 0;
      unint64_t v330 = 0;
      uint64_t v59 = 0;
      uint64_t j = 0;
      uint64_t v141 = 0;
      long long v61 = (void *)v305;
      if (v354)
      {
LABEL_203:
        unint64_t v312 = v140;
        uint64_t v142 = v141 - j;
        unint64_t v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 61) {
          sub_2483E92E8();
        }
        if ((uint64_t)(v330 - (void)j) >> 2 > v143) {
          unint64_t v143 = (uint64_t)(v330 - (void)j) >> 2;
        }
        if (v330 - (unint64_t)j >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v144 = v143;
        }
        if (v144) {
          unint64_t v144 = (unint64_t)sub_2483F04AC(v144);
        }
        uint64_t v145 = (unint64_t *)(v144 + 8 * v142);
        *uint64_t v145 = 0;
        uint64_t v59 = v145 + 1;
        while (v141 != j)
        {
          unint64_t v146 = *--v141;
          *--uint64_t v145 = v146;
        }
        if (j) {
          operator delete(j);
        }
        uint64_t j = v145;
        goto LABEL_217;
      }
    }
    else
    {
      unint64_t v330 = 0;
      unint64_t v332 = 0;
      uint64_t v59 = 0;
      unint64_t v60 = 0;
      unint64_t v312 = 0;
      unint64_t v298 = 0;
      unint64_t v324 = (v16 + v58 - 1) / v16;
      long long v61 = (void *)v305;
      do
      {
        unint64_t v62 = *(void *)&__p[8 * v60];
        unint64_t v63 = v62 / v324 * v315;
        unint64_t v64 = v62 % v324 * v315;
        uint64_t v65 = *v57;
        if (v57[1] - v63 >= v315) {
          uint64_t v66 = v315;
        }
        else {
          uint64_t v66 = v57[1] - v63;
        }
        if (v65 - v64 >= v315) {
          uint64_t v67 = v315;
        }
        else {
          uint64_t v67 = v65 - v64;
        }
        char v364 = 1;
        BOOL v365 = v60 == 0;
        unint64_t v366 = v62;
        sub_2483FEDE8(v343, (v304 - 1 + v66) / v304 * ((v304 - 1 + v67) / v304), &v383);
        if ((void)v376)
        {
          *((void *)&v376 + 1) = v376;
          operator delete((void *)v376);
        }
        long long v376 = *(_OWORD *)v343;
        uint64_t v377 = v344.i64[0];
        uint64_t v397 = 0;
        int64x2_t v398 = 0uLL;
        uint64_t v14 = sub_24845A710(v301, v302, v303, (uint64_t)v308, 0, v64, v63, v67, v66, v306, v307, (uint64_t)&v353, v352, (uint64_t)v360, (uint64_t *)&v397, v61);
        uint64_t j = v332;
        if (v14) {
          goto LABEL_199;
        }
        if (v60)
        {
          unint64_t v69 = v59;
        }
        else
        {
          uint64_t v345 = 0;
          *(_OWORD *)uint64_t v343 = 0u;
          int64x2_t v344 = 0u;
          uint64_t v14 = sub_2484DA1C4((uint64_t)&v353, v343, 0, (uint64_t)v61);
          if (v14)
          {
            unint64_t v69 = v59;
          }
          else
          {
            *(_OWORD *)&v386[8] = xmmword_2484DCE40;
            char v387 = 0;
            *(void **)v386 = v343[0];
            uint64_t v70 = (char *)v343[1] + 1;
            sub_2484106F0((size_t *)&v343[1], (unint64_t)v343[1] + 1);
            if (v344.i64[1]) {
              uint64_t v71 = v70;
            }
            else {
              uint64_t v71 = 0;
            }
            v388[0] = v345;
            v343[1] = v71;
            uint64_t v345 = v386;
            *(void *)(v344.i64[1] + ((unint64_t)v343[0] >> 3)) = (1 << ((uint64_t)v343[0] & 7)) | *(unsigned __int8 *)(v344.i64[1] + ((unint64_t)v343[0] >> 3));
            ++v343[0];
            sub_248451C04((uint64_t)v349, (v350 - (uint64_t)v349) >> 2, (unint64_t *)v343, (uint64_t)v61);
            unint64_t v72 = (((unint64_t)v343[0] + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v343[0];
            if (v72)
            {
              *(void *)(v344.i64[1] + ((unint64_t)v343[0] >> 3)) = *(unsigned __int8 *)(v344.i64[1]
                                                                                               + ((unint64_t)v343[0] >> 3));
              v343[0] = (char *)v343[0] + v72;
            }
            sub_2484195C0((uint64_t)v386, v343, 0, (uint64_t)v61);
            unint64_t v73 = (unint64_t)v343[0] >> 3;
            sub_2484106F0((size_t *)&v343[1], (unint64_t)v343[0] >> 3);
            uint64_t v74 = v344.i64[1];
            if (v344.i64[1]) {
              unsigned int v75 = (void *)v73;
            }
            else {
              unsigned int v75 = 0;
            }
            unint64_t v340 = (unint64_t)v75;
            uint64_t v341 = v344.i64[0];
            v343[1] = v75;
            v344.i64[1] = 0;
            uint64_t v76 = v342;
            uint64_t v342 = v74;
            if (v76)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v76 - 24));
              free(*(void **)(v76 - 32));
            }
            v343[1] = 0;
            v344.i64[0] = 0;
            int v77 = (void **)v397;
            uint64_t v78 = (void **)(v397 + 1);
            unint64_t v79 = *v397 >> 3;
            sub_2484106F0(v397 + 1, v79);
            uint64_t v80 = v77[2];
            uint64_t v81 = v77[3];
            if (v81) {
              unint64_t v82 = v79;
            }
            else {
              unint64_t v82 = 0;
            }
            v77[1] = (void *)v82;
            unint64_t v337 = v82;
            unint64_t v338 = v80;
            v77[3] = 0;
            char v83 = v339;
            unint64_t v339 = v81;
            if (v83)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(v83 - 3));
              free((void *)*(v83 - 4));
              unint64_t v82 = v337;
            }
            *uint64_t v78 = 0;
            v78[1] = 0;
            unint64_t v84 = v340;
            uint64_t v85 = ((v350 - (uint64_t)v349) >> 2) - 1;
            uint64_t v86 = 1;
            while (v86 != 4)
            {
              unint64_t v87 = qword_248551720[v86++];
              if (v87 > v82)
              {
                unint64_t v88 = v86 - 2;
                goto LABEL_105;
              }
            }
            unint64_t v88 = 3;
LABEL_105:
            for (unint64_t i = v82; ; unint64_t i = qword_248551720[v88])
            {
              unint64_t v90 = i + ((unint64_t)(20 * v85 + 7) >> 3);
              uint64_t v91 = 1;
              while (v91 != 4)
              {
                unint64_t v92 = qword_248551720[v91++];
                if (v92 > v90)
                {
                  unint64_t v93 = v91 - 2;
                  goto LABEL_111;
                }
              }
              unint64_t v93 = 3;
LABEL_111:
              if (v93 <= v88) {
                break;
              }
              uint64_t v94 = 1;
              while (v94 != 4)
              {
                unint64_t v95 = qword_248551720[v94++];
                if (v95 > v90)
                {
                  unint64_t v88 = v94 - 2;
                  goto LABEL_117;
                }
              }
              unint64_t v88 = 3;
LABEL_117:
              ;
            }
            uint64_t v96 = qword_248551700[v88];
            unint64_t v312 = i;
            if ((unint64_t)v59 >= v330)
            {
              uint64_t v97 = v59 - v332;
              unint64_t v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 61) {
                sub_2483E92E8();
              }
              if ((uint64_t)(v330 - (void)v332) >> 2 > v98) {
                unint64_t v98 = (uint64_t)(v330 - (void)v332) >> 2;
              }
              if (v330 - (unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v98;
              }
              if (v99) {
                unint64_t v99 = (unint64_t)sub_2483F04AC(v99);
              }
              else {
                uint64_t v100 = 0;
              }
              uint64_t j = (unint64_t *)(v99 + 8 * v97);
              *uint64_t j = v82;
              unint64_t v69 = j + 1;
              if (v59 == v332)
              {
                int v101 = v332;
              }
              else
              {
                int v101 = v332;
                do
                {
                  unint64_t v102 = *--v59;
                  *--uint64_t j = v102;
                }
                while (v59 != v332);
              }
              unint64_t v330 = v99 + 8 * v100;
              if (v101) {
                operator delete(v101);
              }
              unint64_t i = v312;
            }
            else
            {
              *uint64_t v59 = v82;
              unint64_t v69 = v59 + 1;
            }
            unint64_t v103 = i + v84 + ((unint64_t)(v96 + 32 * v85 + 7) >> 3);
            uint64_t v104 = v103 + v300;
            int v105 = (void *)v316[9];
            long long v61 = (void *)v305;
            if (v105)
            {
              long long v106 = (void (*)(void, unint64_t))v105[3];
              if (v106)
              {
                v106(*v105, v103 + v300);
                v316[7] = v104;
              }
            }
            unint64_t v298 = v103;
            v316[5] = v104;
          }
          uint64_t v107 = v344.i64[1];
          v344.i64[1] = 0;
          if (v107)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v107 - 24));
            free(*(void **)(v107 - 32));
          }
          if (v14) {
            goto LABEL_199;
          }
        }
        v333 = j;
        uint64_t v108 = (void **)v397;
        int64x2_t v109 = (void **)(v397 + 6);
        unint64_t v110 = v397[5] >> 3;
        sub_2484106F0(v397 + 6, v110);
        uint64_t v111 = v108[7];
        int v112 = v108[8];
        if (v112) {
          int v113 = (void *)v110;
        }
        else {
          int v113 = 0;
        }
        v108[6] = v113;
        v343[0] = v113;
        v343[1] = v111;
        v108[8] = 0;
        v344.i64[0] = (uint64_t)v112;
        void *v109 = 0;
        v108[7] = 0;
        if ((unint64_t)v69 >= v330)
        {
          uint64_t v114 = v69 - v333;
          unint64_t v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 61) {
            sub_2483E92E8();
          }
          if ((uint64_t)(v330 - (void)v333) >> 2 > v115) {
            unint64_t v115 = (uint64_t)(v330 - (void)v333) >> 2;
          }
          if (v330 - (unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v115;
          }
          if (v116) {
            unint64_t v116 = (unint64_t)sub_2483F04AC(v116);
          }
          else {
            uint64_t v117 = 0;
          }
          int v118 = (unint64_t *)(v116 + 8 * v114);
          *int v118 = (unint64_t)v113;
          uint64_t v59 = v118 + 1;
          while (v69 != v333)
          {
            unint64_t v119 = *--v69;
            *--int v118 = v119;
          }
          unint64_t v330 = v116 + 8 * v117;
          if (v333) {
            operator delete(v333);
          }
          uint64_t j = v118;
        }
        else
        {
          unint64_t *v69 = (unint64_t)v113;
          uint64_t v59 = v69 + 1;
          uint64_t j = v333;
        }
        unint64_t v332 = j;
        uint64_t v14 = sub_24845C0B4((uint64_t)v316, (unint64_t *)v343);
        uint64_t v120 = v344.i64[0];
        v344.i64[0] = 0;
        if (v120)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v120 - 24));
          free(*(void **)(v120 - 32));
        }
        if (v14) {
          goto LABEL_199;
        }
        float v121 = (void **)v397;
        if (0xCCCCCCCCCCCCCCCDLL * ((v398.i64[0] - (uint64_t)v397) >> 3) >= 4)
        {
          unint64_t v122 = 3;
          while (1)
          {
            uint64_t v123 = &v121[5 * v122];
            unint64_t v125 = (unint64_t)*v123;
            uint64_t v124 = (size_t *)(v123 + 1);
            unint64_t v126 = v125 >> 3;
            sub_2484106F0(v124, v125 >> 3);
            uint64_t v127 = &v121[5 * v122];
            unint64_t v128 = v127[3];
            int v129 = v128 ? (void *)v126 : 0;
            v343[0] = v129;
            v343[1] = v127[2];
            v127[3] = 0;
            v344.i64[0] = (uint64_t)v128;
            size_t *v124 = 0;
            v124[1] = 0;
            if ((unint64_t)v59 >= v330)
            {
              uint64_t v130 = v59 - v332;
              unint64_t v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 61) {
                sub_2483E92E8();
              }
              if ((uint64_t)(v330 - (void)v332) >> 2 > v131) {
                unint64_t v131 = (uint64_t)(v330 - (void)v332) >> 2;
              }
              if (v330 - (unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132) {
                unint64_t v132 = (unint64_t)sub_2483F04AC(v132);
              }
              else {
                uint64_t v133 = 0;
              }
              int v134 = (unint64_t *)(v132 + 8 * v130);
              *int v134 = (unint64_t)v129;
              uint64_t v135 = v134 + 1;
              while (v59 != v332)
              {
                unint64_t v136 = *--v59;
                *--int v134 = v136;
              }
              unint64_t v330 = v132 + 8 * v133;
              if (v332) {
                operator delete(v332);
              }
              uint64_t j = v134;
              uint64_t v59 = v135;
            }
            else
            {
              *v59++ = (unint64_t)v129;
              uint64_t j = v332;
            }
            unint64_t v332 = j;
            uint64_t v14 = sub_24845C0B4((uint64_t)v316, (unint64_t *)v343);
            uint64_t v137 = v344.i64[0];
            v344.i64[0] = 0;
            if (v14) {
              break;
            }
            if (v137)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v137 - 24));
              free(*(void **)(v137 - 32));
            }
            ++v122;
            float v121 = (void **)v397;
            if (v122 >= 0xCCCCCCCCCCCCCCCDLL * ((v398.i64[0] - (uint64_t)v397) >> 3)) {
              goto LABEL_193;
            }
          }
          if (v137)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v137 - 24));
            free(*(void **)(v137 - 32));
          }
LABEL_199:
          v343[0] = &v397;
          sub_2483F77FC((void ***)v343);
          goto LABEL_200;
        }
LABEL_193:
        v343[0] = &v397;
        sub_2483F77FC((void ***)v343);
        unint64_t v60 = v383 + 1;
        *(void *)&long long v383 = v60;
        uint64_t v57 = v308;
      }
      while (v60 < v320);
      if (v354)
      {
        uint64_t j = v332;
        if ((unint64_t)v59 < v330)
        {
          *v59++ = 0;
          goto LABEL_217;
        }
        uint64_t v141 = v59;
        unint64_t v140 = v312;
        goto LABEL_203;
      }
      uint64_t j = v332;
      unint64_t v140 = v312;
    }
    unint64_t v312 = v140;
    sub_24840370C((uint64x2_t *)v343, (uint64_t)&v353);
    BOOL v385 = 0;
    long long v384 = 0u;
    long long v383 = 0u;
    unint64_t v174 = __clz(v346) ^ 0x3F;
    if ((v346 & (v346 - 1)) != 0) {
      unint64_t v175 = v174 + 1;
    }
    else {
      unint64_t v175 = v174;
    }
    *(void *)&v386[16] = 0;
    char v387 = 0;
    *(void *)&v386[8] = v175 + 1;
    *(void *)v386 = 0;
    v335 = j;
    sub_2484106F0((size_t *)&v383 + 1, (v175 + 8) >> 3);
    if (*((void *)&v384 + 1)) {
      unint64_t v176 = (v175 + 8) >> 3;
    }
    else {
      unint64_t v176 = 0;
    }
    v388[0] = v385;
    *((void *)&v383 + 1) = v176;
    BOOL v385 = v386;
    *(void *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3)) = (1 << (v383 & 7)) | *(unsigned __int8 *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3));
    *(void *)&long long v383 = v383 + 1;
    *(void *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3)) = ((v347 - 1) << (v383 & 7)) | *(unsigned __int8 *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3));
    *(void *)&long long v383 = v383 + v175;
    sub_2484195C0((uint64_t)v386, &v383, 12, (uint64_t)v61);
    if ((void)v369)
    {
      uint64_t v177 = 0;
      while (1)
      {
        unsigned int v178 = *((_DWORD *)v378 + v177);
        *(void *)v386 = 0;
        BOOL v179 = sub_24841A528(0x800000138000005FLL, 0xC80000000, v178, &v397, (unint64_t *)v386);
        if (v179) {
          break;
        }
        v380[2] = 0;
        char v381 = 0;
        v380[1] = *(void *)v386;
        v380[0] = v383;
        unint64_t v180 = *((void *)&v383 + 1) + ((unint64_t)(*(void *)v386 + 7) >> 3);
        sub_2484106F0((size_t *)&v383 + 1, v180);
        if (*((void *)&v384 + 1)) {
          unint64_t v181 = v180;
        }
        else {
          unint64_t v181 = 0;
        }
        v382 = v385;
        *((void *)&v383 + 1) = v181;
        BOOL v385 = v380;
        sub_2484DA700(0x800000138000005FLL, 0xC80000000, *((_DWORD *)v378 + v177), (uint64_t *)&v383);
        sub_2484195C0((uint64_t)v380, &v383, 11, (uint64_t)v61);
        sub_2484521E4(*((unsigned __int16 *)v378 + 2 * v177), v362 + 4 * v361 * v177, (unint64_t *)&v383, (uint64_t)v61);
        uint64_t v182 = v375;
        *(_DWORD *)v386 = -1;
        sub_2483E9224(v396, 0x100uLL, v386);
        long long v183 = (uint64_t *)(v182 + 176 * v177 + 24);
        uint64_t v321 = v182;
        uint64_t v323 = v177;
        uint64_t v184 = v182 + 176 * v177;
        uint64_t v186 = *(void *)(v184 + 32);
        long long v185 = (void *)(v184 + 32);
        uint64_t v187 = *v183;
        uint64_t v327 = v182 + 176 * v177;
        unint64_t v188 = 0;
        int8x16_t v189 = 0;
        if (v186 != *v183)
        {
          unint64_t v190 = 0;
          int v191 = 0;
          unint64_t v192 = 0;
          do
          {
            uint64_t v193 = *(unsigned __int8 *)(v187 + v192);
            int v194 = *((_DWORD *)v396[0] + v193);
            if (v194 == -1)
            {
              int v195 = &v191[-v188];
              *((_DWORD *)v396[0] + v193) = v191 - v188;
              if (v191 >= (unsigned __int8 *)v190)
              {
                unint64_t v196 = (unint64_t)(v195 + 1);
                if ((uint64_t)(v195 + 1) < 0) {
                  sub_2483E92E8();
                }
                if (2 * (uint64_t)&v190[-v188] > v196) {
                  unint64_t v196 = 2 * (void)&v190[-v188];
                }
                if ((unint64_t)&v190[-v188] >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v197 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v197 = v196;
                }
                if (v197) {
                  uint64_t v198 = (unsigned __int8 *)operator new(v197);
                }
                else {
                  uint64_t v198 = 0;
                }
                v199 = &v195[(void)v198];
                unsigned __int8 *v199 = v193;
                int8x16_t v189 = v199 + 1;
                if (v191 != (unsigned __int8 *)v188)
                {
                  uint64_t v200 = &v191[~v188];
                  do
                  {
                    unsigned __int8 v201 = *--v191;
                    (v200--)[(void)v198] = v201;
                  }
                  while (v191 != (unsigned __int8 *)v188);
                  v199 = v198;
                }
                unint64_t v190 = (char *)&v198[v197];
                if (v188) {
                  operator delete((void *)v188);
                }
                unint64_t v188 = (unint64_t)v199;
              }
              else
              {
                *int v191 = v193;
                int8x16_t v189 = v191 + 1;
              }
              int v194 = *((_DWORD *)v396[0] + v193);
              uint64_t v187 = *v183;
              int v191 = v189;
            }
            *(unsigned char *)(v187 + v192++) = v194;
            uint64_t v187 = *v183;
          }
          while (v192 < *v185 - *v183);
        }
        memset(v386, 0, sizeof(v386));
        v388[1] = 0;
        float v389 = 0;
        v388[0] = 0;
        sub_2483F26D4((uint64_t)&v390);
        uint64_t v202 = (void ***)(v327 + 48);
        int64x2_t v394 = 0uLL;
        uint64_t v395 = 0;
        uint64_t v203 = v321 + 176 * v323;
        char v204 = *(unsigned char *)(v203 + 72);
        v203 += 72;
        char v387 = v204;
        long long v205 = *(_OWORD *)(v203 + 40);
        long long v206 = *(_OWORD *)(v203 + 56);
        uint64_t v314 = v203;
        uint64_t v393 = *(void *)(v203 + 72);
        long long v391 = v205;
        long long v392 = v206;
        if ((unsigned __int8 *)v188 != v189)
        {
          uint64_t v207 = v321 + 176 * v323;
          v328 = (void *)(v207 + 80);
          float v208 = (uint64_t *)(v207 + 152);
          float v209 = (unsigned __int8 *)v188;
          do
          {
            uint64_t v210 = *v209;
            uint64_t v211 = *v202;
            uint64_t v212 = (uint64_t)&(*v202)[3 * v210];
            uint64_t v213 = *(void *)&v386[8];
            if (*(void *)&v386[8] >= *(void *)&v386[16])
            {
              unint64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v386[8] - *(void *)v386) >> 3);
              unint64_t v216 = v215 + 1;
              if (v215 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2483E92E8();
              }
              if (0x5555555555555556 * ((uint64_t)(*(void *)&v386[16] - *(void *)v386) >> 3) > v216) {
                unint64_t v216 = 0x5555555555555556 * ((uint64_t)(*(void *)&v386[16] - *(void *)v386) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v386[16] - *(void *)v386) >> 3) >= 0x555555555555555) {
                unint64_t v217 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v217 = v216;
              }
              v400 = (void ***)&v386[16];
              long long v218 = (void **)sub_2483F8ED4(v217);
              long long v219 = &v218[3 * v215];
              uint64_t v397 = (size_t *)v218;
              v398.i64[0] = (uint64_t)v219;
              unint64_t v399 = &v218[3 * v220];
              *long long v219 = 0;
              v219[1] = 0;
              v219[2] = 0;
              *(_OWORD *)long long v219 = *(_OWORD *)v212;
              v219[2] = v211[3 * v210 + 2];
              *(void *)uint64_t v212 = 0;
              *(void *)(v212 + 8) = 0;
              *(void *)(v212 + 16) = 0;
              v398.i64[1] = (uint64_t)(v219 + 3);
              sub_2483F8F1C(v386, &v397);
              uint64_t v214 = *(void *)&v386[8];
              sub_248448DCC((uint64_t)&v397);
            }
            else
            {
              **(void **)&v386[8] = 0;
              *(void *)(v213 + 8) = 0;
              *(void *)(v213 + 16) = 0;
              *(_OWORD *)uint64_t v213 = *(_OWORD *)v212;
              *(void *)(v213 + 16) = v211[3 * v210 + 2];
              *(void *)uint64_t v212 = 0;
              *(void *)(v212 + 8) = 0;
              *(void *)(v212 + 16) = 0;
              uint64_t v214 = v213 + 24;
            }
            *(void *)&v386[8] = v214;
            long long v221 = (_OWORD *)(*v328 + 16 * v210);
            long long v222 = (char *)v388[1];
            if (v388[1] >= v389)
            {
              int64_t v224 = ((char *)v388[1] - (char *)v388[0]) >> 4;
              unint64_t v225 = v224 + 1;
              if ((unint64_t)(v224 + 1) >> 60) {
                sub_2483E92E8();
              }
              uint64_t v226 = v389 - (char *)v388[0];
              if ((v389 - (char *)v388[0]) >> 3 > v225) {
                unint64_t v225 = v226 >> 3;
              }
              if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v227 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v227 = v225;
              }
              if (v227) {
                unint64_t v227 = (unint64_t)sub_2483F3EB0(v227);
              }
              else {
                uint64_t v228 = 0;
              }
              unint64_t v229 = (char *)(v227 + 16 * v224);
              *(_OWORD *)unint64_t v229 = *v221;
              uint64_t v230 = (char *)v388[1];
              unint64_t v231 = (char *)v388[0];
              v232 = v229;
              if (v388[1] != v388[0])
              {
                do
                {
                  *((_OWORD *)v232 - 1) = *((_OWORD *)v230 - 1);
                  v232 -= 16;
                  v230 -= 16;
                }
                while (v230 != v231);
                uint64_t v230 = (char *)v388[0];
              }
              unsigned int v223 = v229 + 16;
              v388[0] = v232;
              v388[1] = v229 + 16;
              float v389 = (unsigned char *)(v227 + 16 * v228);
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(_OWORD *)v388[1] = *v221;
              unsigned int v223 = v222 + 16;
            }
            v388[1] = v223;
            uint64_t v233 = *v208;
            v234 = (_OWORD *)(*v208 + 40 * v210);
            v235 = (void *)v394.i64[1];
            if (v394.i64[1] >= (unint64_t)v395)
            {
              unint64_t v239 = 0xCCCCCCCCCCCCCCCDLL * ((v394.i64[1] - v394.i64[0]) >> 3);
              unint64_t v240 = v239 + 1;
              if (v239 + 1 > 0x666666666666666) {
                sub_2483E92E8();
              }
              if (0x999999999999999ALL * (((uint64_t)v395 - v394.i64[0]) >> 3) > v240) {
                unint64_t v240 = 0x999999999999999ALL * (((uint64_t)v395 - v394.i64[0]) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v395 - v394.i64[0]) >> 3) >= 0x333333333333333) {
                unint64_t v241 = 0x666666666666666;
              }
              else {
                unint64_t v241 = v240;
              }
              v400 = &v395;
              uint64_t v242 = (void **)sub_248403444(v241);
              uint64_t v243 = &v242[5 * v239];
              uint64_t v397 = (size_t *)v242;
              v398.i64[0] = (uint64_t)v243;
              unint64_t v399 = &v242[5 * v244];
              v245 = (void *)(v233 + 40 * v210);
              *(_OWORD *)uint64_t v243 = *v234;
              v243[2] = (void *)v245[2];
              uint64_t v246 = (void *)v245[3];
              v245[3] = 0;
              v243[3] = v246;
              v245[1] = 0;
              v245[2] = 0;
              v243[4] = (void *)v245[4];
              uint64_t v238 = v243 + 5;
              v398.i64[1] = (uint64_t)(v243 + 5);
              uint64_t v247 = v394.i64[1];
              uint64_t v248 = v394.i64[0];
              uint64_t v249 = v398.i64[0];
              if (v394.i64[1] == v394.i64[0])
              {
                int64x2_t v254 = vdupq_n_s64(v394.u64[1]);
              }
              else
              {
                uint64_t v250 = 0;
                do
                {
                  uint64_t v251 = v249 + v250;
                  uint64_t v252 = v247 + v250;
                  *(_OWORD *)(v251 - 40) = *(_OWORD *)(v247 + v250 - 40);
                  *(void *)(v251 - 24) = *(void *)(v247 + v250 - 24);
                  uint64_t v253 = *(void *)(v247 + v250 - 16);
                  *(void *)(v252 - 16) = 0;
                  *(void *)(v251 - 16) = v253;
                  *(void *)(v252 - 32) = 0;
                  *(void *)(v252 - 24) = 0;
                  *(void *)(v251 - 8) = *(void *)(v247 + v250 - 8);
                  v250 -= 40;
                }
                while (v247 + v250 != v248);
                v249 += v250;
                int64x2_t v254 = v394;
                uint64_t v238 = (void *)v398.i64[1];
              }
              v394.i64[0] = v249;
              v394.i64[1] = (uint64_t)v238;
              int64x2_t v398 = v254;
              v255 = v395;
              uint64_t v395 = v399;
              unint64_t v399 = v255;
              uint64_t v397 = (size_t *)v254.i64[0];
              sub_24841F7CC((uint64_t)&v397);
            }
            else
            {
              v236 = (void *)(v233 + 40 * v210);
              *(_OWORD *)v394.i64[1] = *v234;
              v235[2] = v236[2];
              uint64_t v237 = v236[3];
              v236[3] = 0;
              v235[3] = v237;
              v236[1] = 0;
              v236[2] = 0;
              v235[4] = v236[4];
              uint64_t v238 = v235 + 5;
            }
            v394.i64[1] = (uint64_t)v238;
            ++v209;
          }
          while (v209 != v189);
        }
        unint64_t v256 = *v202;
        if (*v202)
        {
          uint64_t v257 = v202[1];
          uint64_t v258 = *v202;
          if (v257 != v256)
          {
            do
            {
              v257 -= 3;
              uint64_t v397 = (size_t *)v257;
              sub_2484417E4((void ***)&v397);
            }
            while (v257 != v256);
            uint64_t v258 = *v202;
          }
          v202[1] = v256;
          operator delete(v258);
          *uint64_t v202 = 0;
          v202[1] = 0;
          v202[2] = 0;
        }
        *(_OWORD *)uint64_t v202 = *(_OWORD *)v386;
        v202[2] = *(void ***)&v386[16];
        memset(v386, 0, sizeof(v386));
        *(unsigned char *)uint64_t v314 = v387;
        uint64_t v259 = v321 + 176 * v323;
        unint64_t v262 = *(void **)(v259 + 80);
        unint64_t v261 = (void *)(v259 + 80);
        v260 = v262;
        if (v262)
        {
          *(void *)(v321 + 176 * v323 + 88) = v260;
          operator delete(v260);
          *unint64_t v261 = 0;
          v261[1] = 0;
          v261[2] = 0;
        }
        *(_OWORD *)unint64_t v261 = *(_OWORD *)v388;
        uint64_t v263 = v321 + 176 * v323;
        *(void *)(v263 + 96) = v389;
        v388[0] = 0;
        v388[1] = 0;
        float v389 = 0;
        long long v264 = v391;
        long long v265 = v392;
        *(void *)(v314 + 72) = v393;
        *(_OWORD *)(v314 + 40) = v264;
        *(_OWORD *)(v314 + 56) = v265;
        sub_2483F79DC((void **)(v263 + 152));
        *(int64x2_t *)(v263 + 152) = v394;
        *(void *)(v263 + 168) = v395;
        int64x2_t v394 = 0uLL;
        uint64_t v395 = 0;
        uint64_t v397 = (size_t *)&v394;
        sub_2483F77FC((void ***)&v397);
        long long v61 = (void *)v305;
        if (v388[0])
        {
          v388[1] = v388[0];
          operator delete(v388[0]);
        }
        uint64_t v397 = (size_t *)v386;
        sub_2484415B0((void ***)&v397);
        if (v188) {
          operator delete((void *)v188);
        }
        if (v396[0])
        {
          v396[1] = v396[0];
          operator delete(v396[0]);
        }
        uint64_t v266 = v375;
        *(_OWORD *)&v386[8] = xmmword_2484DCE50;
        char v387 = 0;
        *(void *)v386 = v383;
        uint64_t v267 = *((void *)&v383 + 1) + 2192;
        sub_2484106F0((size_t *)&v383 + 1, *((void *)&v383 + 1) + 2192);
        if (*((void *)&v384 + 1)) {
          uint64_t v268 = v267;
        }
        else {
          uint64_t v268 = 0;
        }
        v388[0] = v385;
        *((void *)&v383 + 1) = v268;
        BOOL v385 = v386;
        sub_2484DA1C4(v266 + 176 * v323 + 104, &v383, 12, v305);
        if (*(unsigned char *)(v266 + 176 * v323 + 112)) {
          sub_248441E78(*(void *)(v266 + 176 * v323 + 124), *(void *)(v266 + 176 * v323 + 132), &v383, 8);
        }
        uint64_t v269 = v266 + 176 * v323;
        double v270 = (uint64_t **)(v269 + 48);
        sub_248453460((unsigned __int8 **)(v269 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v269 + 56) - *(void *)(v269 + 48)) >> 3), (unint64_t *)&v383, 12, v305);
        uint64_t v271 = v266 + 176 * v323;
        unsigned int v273 = *(unsigned __int8 *)(v271 + 72);
        char v272 = (unsigned char *)(v271 + 72);
        *(void *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3)) = ((unint64_t)v273 << (v383 & 7)) | *(unsigned __int8 *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3));
        unint64_t v274 = v383 + 1;
        *(void *)&long long v383 = v383 + 1;
        if (*v272)
        {
          uint64_t v275 = 15;
        }
        else
        {
          *(void *)(*((void *)&v384 + 1) + (v274 >> 3)) = (3 << (v274 & 7)) | *(unsigned __int8 *)(*((void *)&v384 + 1) + (v274 >> 3));
          *(void *)&long long v383 = v383 + 2;
          uint64_t v275 = 8;
        }
        sub_248441E20(*(void *)(v266 + 176 * v323 + 80), *(uint64_t **)(v266 + 176 * v323 + 88), &v383, v275);
        if (*v272)
        {
          unint64_t v277 = *v270;
          uint64_t v276 = v270[1];
          while (v277 != v276)
          {
            uint64_t v279 = *v277;
            uint64_t v278 = v277[1];
            v277 += 3;
            sub_2484437D4(0xAAAAAAAAAAAAAAABLL * ((v278 - v279) >> 4) - 1, (unint64_t *)&v383);
          }
        }
        uint64_t v280 = v266 + 176 * v323;
        unsigned int v281 = *(uint64_t **)(v280 + 152);
        unsigned int v282 = *(uint64_t **)(v280 + 160);
        for (uint64_t j = v335; v281 != v282; v281 += 5)
          sub_2484196CC((unint64_t *)&v383, v281);
        *(void *)&v386[16] = v383 - *(void *)v386;
        sub_2484195C0((uint64_t)v386, &v383, 12, v305);
        uint64_t v177 = v323 + 1;
        if (v323 + 1 >= (unint64_t)v369) {
          goto LABEL_382;
        }
      }
      uint64_t v14 = v179;
    }
    else
    {
LABEL_382:
      *(_OWORD *)&v386[8] = xmmword_2484DCE40;
      char v387 = 0;
      *(void *)v386 = v383;
      uint64_t v283 = *((void *)&v383 + 1) + 1;
      sub_2484106F0((size_t *)&v383 + 1, *((void *)&v383 + 1) + 1);
      if (*((void *)&v384 + 1)) {
        uint64_t v284 = v283;
      }
      else {
        uint64_t v284 = 0;
      }
      v388[0] = v385;
      *((void *)&v383 + 1) = v284;
      BOOL v385 = v386;
      uint64_t v285 = ((v383 + 7) & 0xFFFFFFFFFFFFFFF8) - v383;
      if (v285)
      {
        *(void *)(*((void *)&v384 + 1) + ((unint64_t)v383 >> 3)) = *(unsigned __int8 *)(*((void *)&v384 + 1)
                                                                                                 + ((unint64_t)v383 >> 3));
        *(void *)&long long v383 = v383 + v285;
      }
      sub_2484195C0((uint64_t)v386, &v383, 12, (uint64_t)v61);
      unint64_t v286 = (unint64_t)v383 >> 3;
      sub_2484106F0((size_t *)&v383 + 1, (unint64_t)v383 >> 3);
      if (!*((void *)&v384 + 1)) {
        unint64_t v286 = 0;
      }
      *(void *)v386 = v286;
      *(_OWORD *)&v386[8] = v384;
      *((void *)&v383 + 1) = 0;
      long long v384 = 0uLL;
      if ((unint64_t)v59 >= v330)
      {
        int v287 = j;
        uint64_t v288 = v59 - j;
        unint64_t v289 = v288 + 1;
        if ((unint64_t)(v288 + 1) >> 61) {
          sub_2483E92E8();
        }
        unint64_t v290 = v330 - (void)v287;
        unint64_t v291 = (uint64_t)(v330 - (void)v287) >> 2;
        if (v291 > v289) {
          unint64_t v289 = v291;
        }
        if (v290 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v292 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v292 = v289;
        }
        if (v292) {
          unint64_t v292 = (unint64_t)sub_2483F04AC(v292);
        }
        uint64_t j = (unint64_t *)(v292 + 8 * v288);
        *uint64_t j = v286;
        unsigned int v293 = j + 1;
        if (v59 == v335)
        {
          unsigned int v294 = v335;
        }
        else
        {
          unsigned int v294 = v335;
          do
          {
            unint64_t v295 = *--v59;
            *--uint64_t j = v295;
          }
          while (v59 != v335);
        }
        if (v294) {
          operator delete(v294);
        }
        uint64_t v59 = v293;
      }
      else
      {
        *v59++ = v286;
      }
      uint64_t v14 = sub_24845C0B4((uint64_t)v316, (unint64_t *)v386);
      uint64_t v296 = *(void *)&v386[16];
      *(void *)&v386[16] = 0;
      if (v296)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v296 - 24));
        free(*(void **)(v296 - 32));
      }
    }
    uint64_t v297 = *((void *)&v384 + 1);
    *((void *)&v384 + 1) = 0;
    if (v297)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v297 - 24));
      free(*(void **)(v297 - 32));
    }
    if (v14)
    {
LABEL_200:
      long long v138 = j;
      long long v139 = __p;
      if (!v138) {
        goto LABEL_258;
      }
      goto LABEL_257;
    }
LABEL_217:
    uint64_t v147 = v316[5];
    long long v148 = (void *)v316[9];
    unsigned int v334 = j;
    if (v148)
    {
      long long v149 = (void (*)(void, uint64_t))v148[3];
      if (v149)
      {
        v149(*v148, v300);
        v316[7] = v300;
      }
    }
    v316[5] = v300;
    unint64_t v150 = v340;
    v343[0] = 0;
    v343[1] = 0;
    int64_t v151 = (char *)v59 - (char *)j;
    unint64_t v152 = v59 - j;
    v344.i64[0] = 0;
    sub_24840331C(v343, j, (uint64_t)v59, v152);
    uint64_t v153 = v343[0];
    *(void *)v343[0] = v312;
    if (v343[1] == v153)
    {
      unint64_t v160 = 0;
    }
    else
    {
      uint64_t v154 = 0;
      uint64_t v155 = 0;
      unint64_t v156 = ((char *)v343[1] - (char *)v153) >> 3;
      if (v156 <= 1) {
        unint64_t v156 = 1;
      }
      do
      {
        uint64_t v157 = 1;
        while (v157 != 4)
        {
          unint64_t v158 = qword_248551720[v157++];
          if (v158 > v153[v154])
          {
            uint64_t v159 = v157 - 2;
            goto LABEL_228;
          }
        }
        uint64_t v159 = 3;
LABEL_228:
        v155 += qword_248551700[v159];
        ++v154;
      }
      while (v154 != v156);
      unint64_t v160 = (unint64_t)(v155 + 7) >> 3;
    }
    size_t v161 = v298 - v150 - (v160 + *j);
    operator delete(v153);
    *j += v161;
    uint64_t v345 = 0;
    *(_OWORD *)uint64_t v343 = 0u;
    int64x2_t v344 = 0u;
    *(void *)&v386[16] = 0;
    char v387 = 0;
    *(void *)&v386[8] = 4 * v151;
    *(void *)v386 = 0;
    sub_2484106F0((size_t *)&v343[1], (unint64_t)(4 * v151 + 7) >> 3);
    if (v344.i64[1]) {
      long long v162 = (void *)((unint64_t)(4 * v151 + 7) >> 3);
    }
    else {
      long long v162 = 0;
    }
    v388[0] = v345;
    v343[1] = v162;
    uint64_t v345 = v386;
    if (v59 != j)
    {
      if (v152 <= 1) {
        unint64_t v152 = 1;
      }
      long long v163 = (unsigned int *)j;
      do
      {
        unsigned int v164 = *v163;
        v163 += 2;
        sub_2484DA700(0x800D00000009, 0x808801D00088015, v164, (uint64_t *)v343);
        --v152;
      }
      while (v152);
    }
    unint64_t v165 = (((unint64_t)v343[0] + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v343[0];
    long long v139 = __p;
    if (v165)
    {
      *(void *)(v344.i64[1] + ((unint64_t)v343[0] >> 3)) = *(unsigned __int8 *)(v344.i64[1]
                                                                                       + ((unint64_t)v343[0] >> 3));
      v343[0] = (char *)v343[0] + v165;
    }
    sub_2484195C0((uint64_t)v386, v343, 1, v305);
    unint64_t v166 = (unint64_t)v343[0] >> 3;
    sub_2484106F0((size_t *)&v343[1], (unint64_t)v343[0] >> 3);
    uint64_t v167 = v344.i64[1];
    if (v344.i64[1]) {
      int v168 = (void **)v166;
    }
    else {
      int v168 = 0;
    }
    uint64_t v397 = (size_t *)v168;
    int64x2_t v398 = v344;
    sub_248442AEC(v343, v161);
    uint64_t v14 = sub_24845C0B4((uint64_t)v316, &v340);
    if (!v14)
    {
      uint64_t v14 = sub_24845C0B4((uint64_t)v316, (unint64_t *)&v397);
      if (!v14)
      {
        uint64_t v14 = sub_24845C0B4((uint64_t)v316, &v337);
        if (!v14)
        {
          uint64_t v14 = sub_248467EF8((uint64_t)v316, v343);
          if (!v14)
          {
            int v169 = (void *)v316[9];
            if (v169)
            {
              int v170 = (void (*)(void, uint64_t))v169[3];
              if (v170)
              {
                v170(*v169, v147);
                v316[7] = v147;
              }
            }
            uint64_t v14 = 0;
            v316[5] = v147;
          }
        }
      }
    }
    if (v343[0])
    {
      v343[1] = v343[0];
      operator delete(v343[0]);
    }
    v398.i64[1] = 0;
    if (v167)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v167 - 24));
      free(*(void **)(v167 - 32));
    }
    long long v138 = v334;
LABEL_257:
    operator delete(v138);
LABEL_258:
    int v171 = v339;
    unint64_t v339 = 0;
    if (v171)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(v171 - 3));
      free((void *)*(v171 - 4));
    }
    uint64_t v172 = v342;
    uint64_t v342 = 0;
    if (v172)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v172 - 24));
      free(*(void **)(v172 - 32));
    }
    if (v139) {
      operator delete(v139);
    }
    if (v349) {
      operator delete(v349);
    }
    sub_248441390((uint64_t)v352);
  }
  double v353 = &unk_26FC65960;
  v352[0] = (void **)&v359;
  sub_2483FDB3C(v352);
  if (v357)
  {
    double v358 = v357;
    operator delete(v357);
  }
  if (v356 < 0) {
    operator delete(v355);
  }
  if (v378)
  {
    uint64_t v379 = v378;
    operator delete(v378);
  }
  if ((void)v376)
  {
    *((void *)&v376 + 1) = v376;
    operator delete((void *)v376);
  }
  v352[0] = (void **)&v375;
  sub_24845C198(v352);
  sub_2484414D4((uint64_t)&v374);
  v352[0] = (void **)&v368;
  sub_24845C21C(v352);
  v352[0] = (void **)&v367;
  sub_24845C2A0(v352);
  sub_248411260((uint64_t)v360);
  return v14;
}

void sub_248458C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a56)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a56 - 24));
    free(*(void **)(a56 - 32));
  }
  STACK[0x1E20] = v71 - 136;
  sub_2483F77FC((void ***)&STACK[0x1E20]);
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a49 - 24));
    free(*(void **)(a49 - 32));
  }
  if (a52)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a52 - 24));
    free(*(void **)(a52 - 32));
  }
  if (a46) {
    operator delete(a46);
  }
  if (a71) {
    operator delete(a71);
  }
  sub_248441390((uint64_t)&STACK[0x208]);
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  sub_248403970((uint64_t)&STACK[0x6F0]);
  sub_24845C2F4((uint64_t)&STACK[0x930]);
  _Unwind_Resume(a1);
}

uint64_t sub_248458FA4()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unint64_t v90 = v1;
  uint64_t v3 = v2;
  long long v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v0;
  sub_248459D24((uint64_t)v105);
  uint64_t v15 = *(const void **)(v14 + 616);
  if (*(unsigned char *)(v14 + 89) == 1)
  {
    if (!v15)
    {
      long long v114 = xmmword_2484DCE20;
      long long v115 = xmmword_2484DCE30;
      long long v116 = 8uLL;
      memset(v117, 0, sizeof(v117));
      memset(v118, 0, sizeof(v118));
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v15)
  {
LABEL_5:
    memmove(&v114, v15, 0x110uLL);
    goto LABEL_6;
  }
  if (*(unsigned char *)(v14 + 88) == 1)
  {
    long long v114 = xmmword_2484DCDF0;
    long long v115 = xmmword_2484DCE00;
    long long v116 = xmmword_2484DCE10;
    *(_OWORD *)uint64_t v117 = xmmword_2484DCE20;
    memset(v118, 0, sizeof(v118));
    *(void *)&v117[16] = 0;
  }
LABEL_6:
  long long v103 = 0uLL;
  uint64_t v104 = 0;
  sub_24841CCA4((uint64_t)v98, v11);
  if (*(unsigned char *)(v9 + 368)) {
    sub_248459FC0();
  }
  uint64_t v16 = sub_24845A124(*(void *)v9, *(void *)(v9 + 8), v14, (uint64_t *)&v114, v13, 0, (uint64_t)v98);
  if (!v16)
  {
    uint64_t v88 = v3;
    uint64_t v89 = v114;
    sub_248473388((uint64_t)v97, (uint64_t)v98, v14, 0);
    uint64_t v16 = sub_24845A710(v14, v13, v11, v9, 0, 0, 0, *(void *)v9, *(void *)(v9 + 8), v7, v5, (uint64_t)v98, v97, (uint64_t)v105, (uint64_t *)&v103, v90);
    if (v16)
    {
LABEL_122:
      sub_248441390((uint64_t)v97);
      goto LABEL_123;
    }
    uint64_t v96 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    uint64_t v17 = v112;
    if (v112 != v113)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = *v17++;
        v18 += *v19 >> 3;
      }
      while (v17 != v113);
      if (v18)
      {
        sub_2484106F0((size_t *)&v94 + 1, v18 + 1);
        uint64_t v20 = *((void *)&v95 + 1);
        if (*((void *)&v95 + 1)) {
          uint64_t v21 = v18 + 1;
        }
        else {
          uint64_t v21 = 0;
        }
        *((void *)&v94 + 1) = v21;
        unint64_t v22 = (unint64_t)v94 >> 3;
        uint64_t v23 = v112;
        uint64_t v24 = v113;
        if (v112 != v113)
        {
          do
          {
            unint64_t v25 = *v23++;
            unint64_t v26 = *v25;
            memcpy((void *)(*((void *)&v95 + 1) + v22), (const void *)v25[3], *v25 >> 3);
            v22 += v26 >> 3;
          }
          while (v23 != v24);
          uint64_t v20 = *((void *)&v95 + 1);
        }
        *(unsigned char *)(v20 + v22) = 0;
        *(void *)&long long v94 = v94 + 8 * v18;
      }
    }
    uint64_t v16 = sub_2484DA1C4((uint64_t)v98, &v94, 0, (uint64_t)v90);
    if (v16)
    {
LABEL_120:
      uint64_t v86 = *((void *)&v95 + 1);
      *((void *)&v95 + 1) = 0;
      if (v86)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v86 - 24));
        free(*(void **)(v86 - 32));
      }
      goto LABEL_122;
    }
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    unint64_t v93 = 0;
    if (!*(unsigned char *)(v14 + 90) || (unint64_t v27 = v108, v89 == 1) && v108 == 1)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      goto LABEL_26;
    }
    sub_2483EB1C4(&v91, v109 + 2);
    unint64_t v29 = v91;
    uint64_t v28 = v92;
    if (v91 != v92)
    {
      int v46 = 0;
      uint64_t v47 = v91;
      do
      {
        *(_DWORD *)uint64_t v47 = v46;
        v47 += 4;
        ++v46;
      }
      while (v47 != v28);
    }
    sub_2483E9AC0(v133, v27);
    uint64_t v49 = (unsigned int *)*((void *)&v133[0] + 1);
    unint64_t v48 = *(unsigned int **)&v133[0];
    if (*(void *)&v133[0] != *((void *)&v133[0] + 1))
    {
      unsigned int v50 = 0;
      unint64_t v51 = *(unsigned int **)&v133[0];
      do
        *v51++ = v50++;
      while (v51 != v49);
    }
    unint64_t v132 = v110;
    unint64_t v52 = *(void *)(v14 + 96);
    if (v52 == -1)
    {
      unint64_t v52 = v106 >> 1;
    }
    else if (v52 >= v106)
    {
      goto LABEL_69;
    }
    unint64_t v53 = *(void *)(v14 + 104);
    if (v53 == -1)
    {
      unint64_t v53 = v107 >> 1;
    }
    else if (v53 >= v107)
    {
LABEL_69:
      char v54 = 0;
      goto LABEL_114;
    }
    unint64_t v55 = 126 - 2 * __clz(v49 - v48);
    unint64_t v130 = v53 / v110 * v110 + (v110 >> 1);
    unint64_t v131 = v52 / v110 * v110 + (v110 >> 1);
    if (v49 == v48) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = v55;
    }
    long double v57 = atan2((double)(uint64_t)(v53 - (v53 / v110 * v110 + (v110 >> 1))), (double)(uint64_t)(v52 - (v52 / v110 * v110 + (v110 >> 1))));
    long double v58 = fmod(3.92699082 - v57, 6.28318531);
    uint64_t v129 = (uint64_t)((v58 + v58) / 3.14159265);
    uint64_t v135 = &v106;
    *(void *)&long long v136 = &v132;
    *((void *)&v136 + 1) = &v131;
    uint64_t v137 = &v130;
    long long v138 = &v129;
    uint64_t v127 = &v135;
    sub_24845B6E4((uint64_t)v48, v49, &v127, v56, 1);
    LODWORD(v125) = 0;
    sub_2484431AC(&v127, (uint64_t)(*((void *)&v133[0] + 1) - *(void *)&v133[0]) >> 2, &v125);
    uint64_t v59 = *(void *)&v133[0];
    if (*((void *)&v133[0] + 1) != *(void *)&v133[0])
    {
      uint64_t v60 = 0;
      unint64_t v61 = (uint64_t)(*((void *)&v133[0] + 1) - *(void *)&v133[0]) >> 2;
      unint64_t v62 = v127;
      if (v61 <= 1) {
        unint64_t v61 = 1;
      }
      do
      {
        *((_DWORD *)v62 + *(unsigned int *)(v59 + 4 * v60)) = v60;
        ++v60;
      }
      while (v61 != v60);
    }
    if (v89)
    {
      for (uint64_t i = 0; i != v89; ++i)
      {
        uint64_t v65 = v127;
        unint64_t v64 = v128;
        if (v127 != v128)
        {
          unint64_t v66 = (unint64_t)(v28 - v29) >> 2;
          unint64_t v67 = v93;
          do
          {
            int v68 = *v65 + v66;
            if ((unint64_t)v28 >= v67)
            {
              uint64_t v69 = (v28 - v29) >> 2;
              unint64_t v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 62)
              {
                unint64_t v93 = v67;
                uint64_t v91 = v29;
                sub_2483E92E8();
              }
              if ((uint64_t)(v67 - (void)v29) >> 1 > v70) {
                unint64_t v70 = (uint64_t)(v67 - (void)v29) >> 1;
              }
              if (v67 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71) {
                unint64_t v71 = (unint64_t)sub_2483E9300(v71);
              }
              else {
                uint64_t v72 = 0;
              }
              unint64_t v73 = (char *)(v71 + 4 * v69);
              *(_DWORD *)unint64_t v73 = v68;
              uint64_t v74 = v73 + 4;
              while (v28 != v29)
              {
                int v75 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v73 - 1) = v75;
                v73 -= 4;
              }
              unint64_t v67 = v71 + 4 * v72;
              unint64_t v92 = v74;
              if (v29) {
                operator delete(v29);
              }
              unint64_t v29 = v73;
              uint64_t v28 = v74;
            }
            else
            {
              *(_DWORD *)uint64_t v28 = v68;
              v28 += 4;
            }
            unint64_t v92 = v28;
            ++v65;
          }
          while (v65 != v64);
          unint64_t v93 = v67;
          uint64_t v91 = v29;
        }
      }
    }
    sub_24845BFEC(&v125, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v103 + 1) - v103) >> 3));
    if (v28 == v29)
    {
      uint64_t v28 = v29;
    }
    else
    {
      uint64_t v76 = 0;
      unint64_t v77 = 0;
      do
      {
        uint64_t v78 = v103;
        uint64_t v79 = v103 + v76;
        unsigned int v80 = *(_DWORD *)&v29[4 * v77];
        uint64_t v81 = v125;
        uint64_t v82 = v125 + 40 * v80;
        *(_OWORD *)uint64_t v82 = *(_OWORD *)(v103 + v76);
        *(void *)(v82 + 16) = *(void *)(v79 + 16);
        uint64_t v83 = *(void *)(v79 + 24);
        *(void *)(v79 + 24) = 0;
        uint64_t v84 = *(void *)(v82 + 24);
        *(void *)(v82 + 24) = v83;
        if (v84)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v84 - 24));
          free(*(void **)(v84 - 32));
        }
        if (v79 != v82)
        {
          uint64_t v85 = v78 + v76;
          *(void *)(v85 + 8) = 0;
          *(void *)(v85 + 16) = 0;
        }
        *(void *)(v81 + 40 * v80 + 32) = *(void *)(v78 + v76 + 32);
        ++v77;
        unint64_t v29 = v91;
        uint64_t v28 = v92;
        v76 += 40;
      }
      while (v77 < (v92 - v91) >> 2);
    }
    sub_2483F79DC((void **)&v103);
    long long v103 = v125;
    uint64_t v104 = v126;
    uint64_t v126 = 0;
    long long v125 = 0uLL;
    int v134 = (void **)&v125;
    sub_2483F77FC(&v134);
    if (v127)
    {
      unint64_t v128 = v127;
      operator delete(v127);
    }
    char v54 = 1;
    unint64_t v48 = *(unsigned int **)&v133[0];
LABEL_114:
    if (v48)
    {
      *((void *)&v133[0] + 1) = v48;
      operator delete(v48);
    }
    if ((v54 & 1) == 0)
    {
      uint64_t v16 = 1;
LABEL_118:
      if (v29)
      {
        unint64_t v92 = v29;
        operator delete(v29);
      }
      goto LABEL_120;
    }
LABEL_26:
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    v133[0] = xmmword_2484DCE60;
    do
    {
      int v32 = *(_DWORD *)((char *)v133 + v30);
      if (v31 <= (unint64_t)(v32 & 0x1F) + 1) {
        uint64_t v33 = (v32 & 0x1F) + 1;
      }
      else {
        uint64_t v33 = v31;
      }
      if (v32 >= 0) {
        unint64_t v31 = v33;
      }
      v30 += 4;
    }
    while (v30 != 16);
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v103 + 1) - v103) >> 3) * (v31 + 2);
    long long v136 = v34 + 17;
    LOBYTE(v137) = 0;
    uint64_t v135 = (void *)v94;
    unint64_t v35 = *((void *)&v94 + 1) + ((v34 + 24) >> 3);
    sub_2484106F0((size_t *)&v94 + 1, v35);
    if (*((void *)&v95 + 1)) {
      unint64_t v36 = v35;
    }
    else {
      unint64_t v36 = 0;
    }
    long long v138 = (uint64_t *)v96;
    *((void *)&v94 + 1) = v36;
    uint64_t v96 = (unint64_t *)&v135;
    if (v29 == v28 || (void)v103 == *((void *)&v103 + 1))
    {
      *(void *)(*((void *)&v95 + 1) + ((unint64_t)v94 >> 3)) = *(unsigned __int8 *)(*((void *)&v95 + 1)
                                                                                             + ((unint64_t)v94 >> 3));
      unint64_t v37 = v94 + 1;
      *(void *)&long long v94 = v94 + 1;
    }
    else
    {
      *(void *)(*((void *)&v95 + 1) + ((unint64_t)v94 >> 3)) = (1 << (v94 & 7)) | *(unsigned __int8 *)(*((void *)&v95 + 1) + ((unint64_t)v94 >> 3));
      *(void *)&long long v94 = v94 + 1;
      sub_248451C04((uint64_t)v29, (v28 - v29) >> 2, (unint64_t *)&v94, (uint64_t)v90);
      unint64_t v37 = v94;
    }
    unint64_t v38 = ((v37 + 7) & 0xFFFFFFFFFFFFFFF8) - v37;
    if (v38)
    {
      *(void *)(*((void *)&v95 + 1) + (v37 >> 3)) = *(unsigned __int8 *)(*((void *)&v95 + 1) + (v37 >> 3));
      unint64_t v37 = v94 + v38;
      *(void *)&long long v94 = v94 + v38;
    }
    uint64_t v39 = v103;
    if (*((void *)&v103 + 1) == (void)v103)
    {
LABEL_49:
      unint64_t v42 = ((v37 + 7) & 0xFFFFFFFFFFFFFFF8) - v37;
      if (v42)
      {
        *(void *)(*((void *)&v95 + 1) + (v37 >> 3)) = *(unsigned __int8 *)(*((void *)&v95 + 1) + (v37 >> 3));
        *(void *)&long long v94 = v94 + v42;
      }
      sub_2484195C0((uint64_t)&v135, &v94, 1, (uint64_t)v90);
      sub_2484197C4(&v94, (unint64_t **)&v103);
      unint64_t v43 = (unint64_t)v94 >> 3;
      sub_2484106F0((size_t *)&v94 + 1, (unint64_t)v94 >> 3);
      uint64_t v44 = *((void *)&v95 + 1);
      if (*((void *)&v95 + 1)) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = 0;
      }
      uint64_t v135 = (void *)v45;
      long long v136 = v95;
      *((void *)&v94 + 1) = 0;
      long long v95 = 0uLL;
      uint64_t v16 = sub_24845C0B4(v88, (unint64_t *)&v135);
      *((void *)&v136 + 1) = 0;
      if (v44)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v44 - 24));
        free(*(void **)(v44 - 32));
        unint64_t v29 = v91;
      }
    }
    else
    {
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      while (!sub_2484DA700(0x800D00000009, 0x808801D00088015, *(void *)(v39 + v40) >> 3, (uint64_t *)&v94))
      {
        ++v41;
        uint64_t v39 = v103;
        v40 += 40;
        if (v41 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v103 + 1) - v103) >> 3))
        {
          unint64_t v37 = v94;
          goto LABEL_49;
        }
      }
      uint64_t v16 = 1;
    }
    goto LABEL_118;
  }
LABEL_123:
  v98[0] = &unk_26FC65960;
  v97[0] = (void **)&v102;
  sub_2483FDB3C(v97);
  if (__p)
  {
    int v101 = __p;
    operator delete(__p);
  }
  if (v99 < 0) {
    operator delete((void *)v98[10]);
  }
  v97[0] = (void **)&v103;
  sub_2483F77FC(v97);
  if (v123)
  {
    uint64_t v124 = v123;
    operator delete(v123);
  }
  if (v121)
  {
    unint64_t v122 = v121;
    operator delete(v121);
  }
  v97[0] = (void **)&v120;
  sub_24845C198(v97);
  sub_2484414D4((uint64_t)&v119);
  v97[0] = (void **)&v112;
  sub_24845C21C(v97);
  v97[0] = (void **)&v111;
  sub_24845C2A0(v97);
  sub_248411260((uint64_t)v105);
  return v16;
}

void sub_248459BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  uint64_t v33 = *(void **)(v31 - 232);
  if (v33)
  {
    *(void *)(v31 - 224) = v33;
    operator delete(v33);
  }
  unint64_t v34 = *(void **)(v31 - 176);
  if (v34)
  {
    *(void *)(v31 - 168) = v34;
    operator delete(v34);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a28)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a28 - 24));
    free(*(void **)(a28 - 32));
  }
  sub_248441390((uint64_t)&a30);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  sub_248403970((uint64_t)&STACK[0x590]);
  a30 = (void **)&STACK[0x7D0];
  sub_2483F77FC(&a30);
  sub_24845C2F4((uint64_t)&STACK[0x7E8]);
  _Unwind_Resume(a1);
}

uint64_t sub_248459D24(uint64_t a1)
{
  uint64_t v2 = a1 + 4208;
  uint64_t v3 = sub_248416EB4(a1);
  *(_WORD *)(v3 + 4208) = 256;
  *(void *)(v3 + 4264) = 0;
  *(_OWORD *)(v3 + 4216) = 0u;
  *(_OWORD *)(v3 + 4232) = 0u;
  *(_OWORD *)(v3 + 4248) = 0u;
  *(void *)(v3 + 4272) = 1;
  memcpy((void *)(v3 + 4280), &unk_24854F1F8, 0x108uLL);
  *(_DWORD *)(a1 + 4544) = 1065353216;
  *(_DWORD *)(a1 + 4580) = 0;
  *(void *)(a1 + 4584) = 0;
  *(void *)(a1 + 4552) = 0;
  *(void *)(a1 + 4568) = 0;
  *(void *)(a1 + 4560) = 0;
  *(unsigned char *)(a1 + 4576) = 0;
  *(void *)(a1 + 4592) = 0xFFFFFFFF00000003;
  *(void *)(a1 + 4600) = 0;
  *(_DWORD *)(a1 + 4608) = 0;
  *(unsigned char *)(v2 + 404) = 0;
  *(_DWORD *)(a1 + 4628) = -1;
  *(_WORD *)(a1 + 4632) = -1;
  *(void *)(a1 + 4616) = -1;
  *(unsigned char *)(a1 + 4624) = -1;
  *(unsigned char *)(v2 + 426) = 0;
  *(void *)(a1 + 4640) = -1;
  *(void *)(a1 + 4648) = -1;
  *(void *)(a1 + 4653) = -1;
  *(unsigned char *)(v2 + 520) = 0;
  *(_DWORD *)(a1 + 4729) = 16843009;
  *(unsigned char *)(a1 + 4733) = 1;
  *(_DWORD *)(a1 + 4736) = 0;
  *(void *)(a1 + 4744) = 0xFFFFFFLL;
  *(void *)(a1 + 4752) = 0x1FFFFFFFLL;
  *(_DWORD *)(a1 + 4760) = 1056964608;
  *(void *)(a1 + 4780) = 0;
  *(_DWORD *)(a1 + 4788) = 0;
  *(void *)(a1 + 4764) = 0;
  *(void *)(a1 + 4772) = 0;
  int v4 = operator new(0x20uLL);
  *(void *)(a1 + 4768) = v4;
  *(void *)(a1 + 4784) = v4 + 2;
  _OWORD *v4 = xmmword_24855076C;
  v4[1] = unk_24855077C;
  *(void *)(a1 + 4776) = v4 + 2;
  *(_DWORD *)(a1 + 4792) = 1119879168;
  *(void *)(a1 + 4800) = 32;
  *(void *)(a1 + 4808) = 0xFFFFFFFFLL;
  *(void *)(a1 + 4816) = 0x33F8147AELL;
  *(unsigned char *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 620) = xmmword_2484DCB20;
  *(_DWORD *)(a1 + 4844) = 2;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(void *)(a1 + 4848) = 0;
  *(void *)(a1 + 4872) = -1;
  *(_DWORD *)(a1 + 4880) = 256;
  *(unsigned char *)(v2 + 676) = 0;
  *(unsigned char *)(v2 + 680) = 0;
  *(void *)(a1 + 4896) = -1;
  *(void *)(a1 + 4904) = 0x42BE0000FFFFFFFFLL;
  *(void *)(a1 + 4912) = 0x40042A00000;
  *(unsigned char *)(v2 + 712) = 0;
  *(void *)(a1 + 4924) = -1;
  *(unsigned char *)(v2 + 724) = 0;
  *(void *)(a1 + 4936) = 0x3F800000BF800000;
  *(void *)(a1 + 4944) = -1;
  *(unsigned char *)(v2 + 744) = 1;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 5020) = 0u;
  *(_OWORD *)(a1 + 5040) = 0u;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 5072) = 0u;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(void *)(a1 + 5168) = 0;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(void *)(a1 + 5256) = 0;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_DWORD *)(a1 + 5232) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 5264) = _D0;
  return a1;
}

void sub_248459F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 4248);
  sub_24845C21C(&a10);
  a10 = (void **)(v10 + 4224);
  sub_24845C2A0(&a10);
  sub_248411260(v10);
  _Unwind_Resume(a1);
}

void sub_248459FC0()
{
}

uint64_t sub_24845A124(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6, uint64_t a7)
{
  *(unsigned char *)(a7 + 560) = *(unsigned char *)(a5 + 17);
  *(unsigned char *)(a7 + 392) = *(unsigned char *)(a5 + 16);
  *(unsigned char *)(a7 + 400) = *(unsigned char *)a5;
  *(_DWORD *)(a7 + 16) = *(_DWORD *)(a5 + 4);
  std::string::operator=((std::string *)(a7 + 80), (const std::string *)(a5 + 88));
  uint64_t v14 = *a4;
  *(void *)(a7 + 112) = *a4;
  *(_DWORD *)(a7 + 4 * (v14 - 1) + 208) = 0;
  if (v14 != 1)
  {
    unint64_t v15 = v14 - 1;
    if (v15)
    {
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      do
      {
        unint64_t v19 = a4[3 * v17 + 3];
        *(_DWORD *)(a7 + 4 * v17 + 208) = a4[3 * v17 + 2];
        if (v19 - 2 >= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v17 = ++v18;
        }
        else
        {
          uint64_t v20 = a7 + 4 * v16;
          *(_DWORD *)(v20 + 120) = v19;
          *(_DWORD *)(v20 + 164) = v18;
          unint64_t v17 = (v18 + 1);
          int v18 = v17;
          if (a4[3 * v17 + 3] < v19) {
            *(_DWORD *)(a7 + 116) = ++v16;
          }
        }
      }
      while (v15 > v17);
    }
  }
  if (*(unsigned char *)(a3 + 68))
  {
    *(_DWORD *)(a7 + 12) = 1;
    if (a2 >= 0x191 || a1 >= 0x191) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    if (*(_DWORD *)(a3 + 72) != -1) {
      int v22 = *(_DWORD *)(a3 + 72);
    }
    *(_DWORD *)(a7 + 64) = v22;
    if (!a6)
    {
      int v23 = *(_DWORD *)(a3 + 64);
      *(_DWORD *)(a7 + 32) = v23;
LABEL_20:
      char v24 = 1;
      goto LABEL_25;
    }
  }
  else if (!a6)
  {
    int v23 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a7 + 32) = v23;
    if (*(unsigned char *)(a7 + 60)) {
      return 1;
    }
    uint64_t result = 1;
    if (*(unsigned char *)(a7 + 61)) {
      return result;
    }
    goto LABEL_20;
  }
  *(_DWORD *)(a7 + 12) = 0;
  *(void *)(a7 + 68) = 0x200000002;
  if (sub_2484971FC(a6[18], a6[19], a7 + 40) || sub_248497398(a6, (int *)(a7 + 32))) {
    return 1;
  }
  char v24 = 0;
  int v23 = *(_DWORD *)(a7 + 32);
LABEL_25:
  if (v23 != 2 && (*(unsigned char *)(a7 + 60) || *(unsigned char *)(a7 + 61))) {
    return 1;
  }
  int v25 = *(unsigned __int8 *)(a3 + 77);
  if (*(unsigned char *)(a3 + 77))
  {
    if (v25 == 1)
    {
      float v26 = *(float *)(a3 + 192);
LABEL_39:
      uint64_t v28 = 1;
      goto LABEL_40;
    }
    LOBYTE(v25) = *(float *)a3 >= 99.0;
  }
  float v26 = *(float *)(a3 + 192);
  if ((v25 & 1) != 0 || v26 > 0.0 || *(void *)(a3 + 424) - *(void *)(a3 + 416) == 32) {
    goto LABEL_39;
  }
  uint64_t v28 = 0;
LABEL_40:
  int v29 = *(_DWORD *)(a3 + 112);
  int v30 = *(unsigned __int8 *)(a3 + 68);
  if (*(unsigned char *)(a3 + 68)) {
    BOOL v31 = 1;
  }
  else {
    BOOL v31 = v29 <= 0;
  }
  uint64_t v32 = v28 | 0x20;
  if (v31) {
    uint64_t v32 = v28;
  }
  *(void *)(a7 + 24) = v32;
  int v33 = *(_DWORD *)(a7 + 12);
  if (v33 && v26 == 0.0)
  {
    if (*(void *)(a3 + 416) == *(void *)(a3 + 424)) {
      *(void *)(a7 + 24) = v32 & 0x20;
    }
    BOOL v34 = 0;
    int v35 = *(unsigned __int8 *)(a3 + 80);
  }
  else
  {
    BOOL v34 = 0;
    int v35 = *(unsigned __int8 *)(a3 + 80);
    if (!v33 && *(int *)(a3 + 48) <= 5) {
      BOOL v34 = *(void *)(a3 + 56) < 4uLL;
    }
  }
  if (v35 == 1)
  {
    BOOL v34 = 1;
  }
  else if (!v35)
  {
    BOOL v34 = 0;
  }
  *(unsigned char *)(a7 + 425) = v34;
  int v36 = *(_DWORD *)(a3 + 84);
  if (v36 != -1)
  {
    *(_DWORD *)(a7 + 452) = v36;
    goto LABEL_60;
  }
  *(_DWORD *)(a7 + 452) = 0;
  if (v33 != 1)
  {
    unint64_t v38 = *(void *)(a3 + 56);
    BOOL v39 = v38 == 2;
    if (v38 > 2) {
      goto LABEL_79;
    }
    int v40 = 0;
    unsigned int v41 = v39;
    float v42 = *(float *)a3;
    uint64_t v43 = 4 * v41;
    do
    {
      if (v42 >= *(float *)&a333[v43]) {
        *(_DWORD *)(a7 + 452) = ++v40;
      }
      v43 += 4;
    }
    while (v43 != 12);
LABEL_60:
    if (v33 != 1) {
      goto LABEL_79;
    }
  }
  if (!v30 || (sub_248456844(a3) & 1) == 0)
  {
    float v37 = *(float *)a3;
    if (*(float *)a3 < 1.0) {
      float v37 = 1.0;
    }
    *(float *)(a7 + 536) = v37;
  }
  if (*(unsigned char *)(a3 + 376)) {
    *(_DWORD *)(a7 + 536) = 1065353216;
  }
LABEL_79:
  unsigned int v44 = *(_DWORD *)(a5 + 8);
  *(_DWORD *)(a7 + 404) = v44;
  if (v44 > 2) {
    return 1;
  }
  if (v29 >= 1)
  {
    uint64_t result = 1;
    if (*(_DWORD *)(a3 + 384) != 1 || *(_DWORD *)(a3 + 380) != 1) {
      return result;
    }
    unint64_t v45 = (int *)(a3 + 384);
    int v46 = 1;
    int v47 = 1;
    goto LABEL_86;
  }
  int v47 = *(_DWORD *)(a3 + 380);
  unsigned int v57 = v47 - 1;
  if ((v47 - 1) > 7 || ((0x8Bu >> v57) & 1) == 0) {
    return 1;
  }
  unsigned int v58 = *(_DWORD *)(a3 + 384);
  uint64_t result = 1;
  if (v58 <= 8 && ((1 << v58) & 0x116) != 0)
  {
    int v46 = dword_24854F4B8[v57];
    unint64_t v45 = (int *)(a3 + 384);
LABEL_86:
    if (*(_DWORD *)(a5 + 4) != 1)
    {
      uint64_t v48 = *(void *)(a5 + 48);
      *(void *)(a7 + 296) = v48;
      if (!*(unsigned char *)(a3 + 388)) {
        int v46 = 1;
      }
      int v49 = v46 * a1;
      *(_DWORD *)(a7 + 260) = v49;
      int v50 = v46 * a2;
      *(_DWORD *)(a7 + 264) = v50;
      if (v48 || sub_2484037C4(a7) != v49 || sub_2484037EC(a7) != v50) {
        *(unsigned char *)(a7 + 256) = 1;
      }
    }
    *(_DWORD *)(a7 + 268) = v47;
    uint64_t v51 = *(void *)(a7 + 408);
    *(void *)(a7 + 280) = *(void *)(a7 + 272);
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v51 + 336) - *(void *)(v51 + 328)) >> 5);
    int v72 = *v45;
    sub_2483F1FEC((char **)(a7 + 272), v52, &v72);
    *(_DWORD *)(a7 + 396) = *(void *)(a5 + 24);
    int v53 = *(unsigned __int8 *)(a5 + 56);
    if (*(unsigned char *)(a5 + 56) || *(unsigned char *)(a7 + 256))
    {
      uint64_t v54 = *(int *)(a5 + 44);
      if (v54 == -1)
      {
        uint64_t v56 = *(void *)(v51 + 328);
        uint64_t v55 = *(void *)(v51 + 336);
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 5);
        if (v59 < 2)
        {
LABEL_107:
          uint64_t v54 = 0;
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v60 = 12;
          while (*(_DWORD *)(v56 + v60))
          {
            ++v54;
            v60 += 96;
            if (v59 == v54) {
              goto LABEL_107;
            }
          }
        }
      }
      else
      {
        uint64_t v56 = *(void *)(v51 + 328);
        uint64_t v55 = *(void *)(v51 + 336);
      }
      *(_DWORD *)(a7 + 316) = v54;
      if (v53) {
        int v61 = *(_DWORD *)(a5 + 60);
      }
      else {
        int v61 = 0;
      }
      *(_DWORD *)(a7 + 312) = v61;
      *(_DWORD *)(a7 + 324) = *(void *)(a5 + 32);
      *(unsigned char *)(a7 + 320) = *(unsigned char *)(a5 + 40);
      if (v55 != v56)
      {
        uint64_t v62 = 0;
        unint64_t v63 = 0;
        uint64_t v64 = 12;
        do
        {
          uint64_t v65 = *(void *)(a5 + 112);
          uint64_t v66 = *(void *)(a7 + 344);
          if (v63 >= 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a5 + 120) - v65) >> 3))
          {
            uint64_t v69 = (_DWORD *)(v66 + v62);
            int v70 = *(_DWORD *)(a5 + 60);
            if (*(_DWORD *)(v56 + v64) != 4 && v54 != v63) {
              int v70 = 1;
            }
            if (!*(unsigned char *)(a5 + 56)) {
              int v70 = 0;
            }
            v69[2] = v70;
            unint64_t v69[3] = v54;
            v69[5] = 1;
          }
          else
          {
            uint64_t v67 = v66 + v62;
            long long v68 = *(_OWORD *)(v65 + v62 + 8);
            *(_OWORD *)(v67 + 17) = *(_OWORD *)(v65 + v62 + 17);
            *(_OWORD *)(v67 + 8) = v68;
            uint64_t v56 = *(void *)(v51 + 328);
            uint64_t v55 = *(void *)(v51 + 336);
          }
          ++v63;
          v62 += 40;
          v64 += 96;
        }
        while (v63 < 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 5));
      }
    }
    *(void *)(a7 + 376) = *(void *)(a5 + 76);
    uint64_t result = 0;
    if ((v24 & 1) == 0) {
      *(void *)(a7 + 24) = *(void *)(a7 + 24) & 0xFFFFFFFFFFFFFF5FLL | 0x80;
    }
  }
  return result;
}

uint64_t sub_24845A710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, long long *a10, uint64_t *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t *a15, void *a16)
{
  uint64_t v20 = (char *)(a14 + 4208);
  *(void *)a14 = a3;
  if (*(unsigned char *)(a14 + 4208))
  {
    sub_24840383C((uint64x2_t *)(a14 + 8), a8, a9, *(unsigned int *)(a12 + 64), 0, 0, *(_DWORD *)(a12 + 12) == 1, 1uLL);
  }
  else
  {
    sub_24840370C(v140, a12);
    long long v21 = v143;
    *(_OWORD *)(a14 + 88) = v144;
    long long v22 = v146;
    *(_OWORD *)(a14 + 104) = v145;
    *(_OWORD *)(a14 + 120) = v22;
    *(_OWORD *)(a14 + 136) = v147;
    uint64x2_t v23 = v140[0];
    *(uint64x2_t *)(a14 + 24) = v140[1];
    long long v24 = v142;
    *(_OWORD *)(a14 + 40) = __p;
    *(_OWORD *)(a14 + 56) = v24;
    *(_OWORD *)(a14 + 72) = v21;
    *(uint64x2_t *)(a14 + 8) = v23;
  }
  *(void *)(a14 + 1256) = a14;
  sub_2483E8C88((uint64_t)&v177, *(void *)(a14 + 72), *(void *)(a14 + 80));
  uint64_t v25 = v182;
  if (v182) {
    return v25;
  }
  uint64_t v113 = a1;
  *(_OWORD *)(a14 + 152) = v177;
  uint64_t v26 = v179;
  uint64_t v179 = 0;
  uint64_t v27 = v180;
  v140[0] = v181;
  uint64_t v28 = *(void *)(a14 + 176);
  *(void *)(a14 + 168) = v178;
  *(void *)(a14 + 176) = v26;
  if (v28)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v28 - 24));
    free(*(void **)(v28 - 32));
  }
  *(void *)(a14 + 184) = v27;
  *(uint64x2_t *)(a14 + 192) = v140[0];
  sub_2484017B8((uint64_t)&v172, *(void *)(a14 + 72), *(void *)(a14 + 80));
  uint64_t v25 = v176;
  if (!v176)
  {
    *(_OWORD *)(a14 + 1024) = v172;
    uint64_t v29 = v174;
    *(void *)(a14 + 1040) = v173;
    uint64_t v174 = 0;
    uint64_t v30 = v175;
    uint64_t v31 = *(void *)(a14 + 1048);
    *(void *)(a14 + 1048) = v29;
    if (v31)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v31 - 24));
      free(*(void **)(v31 - 32));
    }
    *(void *)(a14 + 1056) = v30;
    sub_2483E8CE0((uint64_t)&v167, *(void *)(a14 + 72), *(void *)(a14 + 80));
    uint64_t v25 = v171;
    if (v171) {
      goto LABEL_110;
    }
    uint64_t v32 = v169;
    *(void *)(a14 + 1080) = v168;
    *(_OWORD *)(a14 + 1064) = v167;
    uint64_t v169 = 0;
    uint64_t v33 = v170;
    uint64_t v34 = *(void *)(a14 + 1088);
    *(void *)(a14 + 1088) = v32;
    if (v34)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v34 - 24));
      free(*(void **)(v34 - 32));
    }
    *(void *)(a14 + 1096) = v33;
    sub_2483EA350((uint64_t)&v155, *(void *)(a14 + 8), *(void *)(a14 + 16), 1);
    uint64_t v25 = v166;
    if (v166) {
      goto LABEL_107;
    }
    *(_OWORD *)(a14 + 1104) = v155;
    uint64_t v35 = v157;
    *(void *)(a14 + 1120) = v156;
    uint64_t v36 = v158;
    uint64_t v106 = v161;
    uint64_t v157 = 0;
    uint64_t v161 = 0;
    uint64_t v108 = v162;
    sub_2483EB138((uint64_t *)(a14 + 1128), v35);
    *(void *)(a14 + 1136) = v36;
    *(_OWORD *)(a14 + 1144) = v159;
    *(void *)(a14 + 1160) = v160;
    sub_2483EB138((uint64_t *)(a14 + 1168), v106);
    *(void *)(a14 + 1176) = v108;
    *(void *)(a14 + 1216) = v165;
    long long v37 = v163;
    *(_OWORD *)(a14 + 1200) = v164;
    *(_OWORD *)(a14 + 1184) = v37;
    *(void *)(a14 + 1560) = 393984;
    if (!*(_DWORD *)(a12 + 12)) {
      sub_2483EB1C4((char **)(a14 + 1568), 393984 * *(unsigned int *)(a12 + 112));
    }
    sub_2483E8CE0((uint64_t)&v150, *(void *)(a14 + 72), *(void *)(a14 + 80));
    uint64_t v25 = v154;
    if (v154)
    {
LABEL_107:
      sub_24842D240((uint64_t)&v155);
      if (!v171)
      {
        uint64_t v77 = v169;
        uint64_t v169 = 0;
        if (v77)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v77 - 24));
          free(*(void **)(v77 - 32));
        }
      }
LABEL_110:
      if (!v176)
      {
        uint64_t v78 = v174;
        uint64_t v174 = 0;
        if (v78)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v78 - 24));
          free(*(void **)(v78 - 32));
        }
      }
      goto LABEL_113;
    }
    uint64_t v38 = v152;
    *(void *)(a14 + 1608) = v151;
    *(_OWORD *)(a14 + 1592) = v150;
    uint64_t v152 = 0;
    uint64_t v39 = v153;
    sub_2483EB138((uint64_t *)(a14 + 1616), v38);
    *(void *)(a14 + 1624) = v39;
    sub_2483F0C3C((uint64_t)v148, *(void *)(a14 + 72), *(void *)(a14 + 80));
    uint64_t v25 = v149;
    if (v149)
    {
LABEL_104:
      if (!v154)
      {
        uint64_t v76 = v152;
        uint64_t v152 = 0;
        if (v76)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v76 - 24));
          free(*(void **)(v76 - 32));
        }
      }
      goto LABEL_107;
    }
    unint64_t v98 = (uint64_t *)(a14 + 8);
    sub_2483F0E78((uint64_t)v140, (uint64_t)v148);
    sub_2483F7944(a14 + 1632, (uint64_t)v140);
    for (uint64_t i = 13; i != -2; i -= 5)
      sub_2483E8DDC(&v140[0].i64[i]);
    *(void *)(a14 + 1752) = a14 + 1632;
    uint64_t v42 = *(void *)(a3 + 328);
    uint64_t v41 = *(void *)(a3 + 336);
    if (v42 == v41)
    {
      uint64_t v44 = 0;
LABEL_29:
      uint64_t v102 = 0;
    }
    else
    {
      uint64_t v43 = *(void *)(a3 + 328);
      uint64_t v44 = v43;
      do
      {
        if (!*(_DWORD *)(v44 + 12)) {
          goto LABEL_25;
        }
        v44 += 96;
      }
      while (v44 != v41);
      uint64_t v44 = 0;
LABEL_25:
      while (*(_DWORD *)(v43 + 12) != 4)
      {
        v43 += 96;
        if (v43 == v41) {
          goto LABEL_29;
        }
      }
      uint64_t v102 = v43;
    }
    unint64_t v110 = *(unsigned int *)(a3 + 320);
    sub_24845CB5C((uint64_t)v140, a3 + 48);
    uint64_t v101 = v44;
    uint64_t v45 = *v20;
    unint64_t v46 = *(void *)a4;
    unint64_t v47 = *(void *)(a4 + 8);
    v139[0] = a6;
    v139[1] = a7;
    v139[2] = a8;
    v139[3] = a9;
    if (a6 >= 8 * v45) {
      unint64_t v48 = a6 - 8 * v45;
    }
    else {
      unint64_t v48 = 0;
    }
    if (a7 >= 8 * v45) {
      unint64_t v49 = a7 - 8 * v45;
    }
    else {
      unint64_t v49 = 0;
    }
    if (a8 + a6 + 8 * v45 < v46) {
      unint64_t v46 = a8 + a6 + 8 * v45;
    }
    unint64_t v50 = a9 + a7 + 8 * v45;
    if (v50 >= v47) {
      unint64_t v50 = v47;
    }
    unint64_t v99 = v49;
    unint64_t v100 = v48;
    unint64_t v107 = v50 - v49;
    unint64_t v109 = v46 - v48;
    sub_2483F0C3C((uint64_t)v137, (v46 - v48 + 7) & 0xFFFFFFF8, (v50 - v49 + 7) & 0xFFFFFFF8);
    uint64_t v25 = v138;
    if (v138)
    {
LABEL_99:
      v140[0].i64[0] = (uint64_t)&unk_26FC65EC8;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (!v149)
      {
        for (uint64_t j = 104; j != -16; j -= 40)
          sub_2483E8DDC((uint64_t *)&v148[j]);
      }
      goto LABEL_104;
    }
    unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v101 - v42) >> 5);
    unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((v102 - v42) >> 5);
    sub_2483F0E78((uint64_t)v136, (uint64_t)v137);
    for (uint64_t k = 0; k != 30; k += 10)
    {
      unint64_t v52 = &v136[k];
      *unint64_t v52 = v109;
      v52[1] = v107;
    }
    sub_24845CCAC(&v134, v110);
    uint64_t v53 = v134;
    uint64_t v104 = v135;
    if (v134 != v135)
    {
      while (1)
      {
        sub_2483EA250((uint64_t)&v121, v109, v107);
        uint64_t v25 = v125;
        if (v125) {
          goto LABEL_94;
        }
        uint64_t v54 = v123;
        uint64_t v111 = v124;
        uint64_t v123 = 0;
        *(_OWORD *)uint64_t v53 = v121;
        *(void *)(v53 + 16) = v122;
        uint64_t v55 = v53 + 24;
        sub_2483EB138((uint64_t *)(v53 + 24), v54);
        *(void *)(v53 + 32) = v111;
        if (!v125)
        {
          uint64_t v56 = v123;
          uint64_t v123 = 0;
          if (v56)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v56 - 24));
            free(*(void **)(v56 - 32));
          }
        }
        v53 += 40;
        if (v55 + 16 == v104)
        {
          uint64_t v53 = v134;
          break;
        }
      }
    }
    if (v101) {
      unsigned int v57 = (unsigned int *)(v53 + 40 * v94);
    }
    else {
      unsigned int v57 = 0;
    }
    uint64_t v58 = v53 + 40 * v96;
    if (!v102) {
      uint64_t v58 = 0;
    }
    uint64_t v105 = v58;
    BOOL v133 = 0;
    unint64_t v59 = nullsub_31;
    uint64_t v60 = sub_248467E4C;
    int v61 = sub_248467E94;
    uint64_t v62 = sub_248467EB4;
    unint64_t v63 = sub_248467EE0;
    if (*(unsigned char *)(a4 + 64))
    {
      uint64_t v64 = *(void *)(a4 + 16);
      unint64_t v63 = *(__n128 (**)(uint64_t, __n128 *))(a4 + 24);
      uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(a4 + 32);
      int v61 = *(__n128 (**)(uint64_t, uint64_t, __n128 *))(a4 + 40);
      uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(a4 + 48);
      unint64_t v59 = *(uint64_t (**)())(a4 + 56);
    }
    else
    {
      uint64_t v64 = a4;
    }
    int v112 = v57;
    if (*(unsigned char *)(a4 + 368))
    {
      BOOL v65 = 0;
    }
    else
    {
      v132[0] = v64;
      unint64_t v93 = v63;
      long long v95 = v62;
      v132[1] = v63;
      v132[2] = v62;
      uint64_t v97 = v61;
      v132[3] = v61;
      long long v103 = v60;
      v132[4] = v60;
      unint64_t v71 = v59;
      v132[5] = v59;
      v131[0] = v100;
      v131[1] = v99;
      v131[2] = v109;
      v131[3] = v107;
      uint64_t v25 = sub_24845CD74(v132, v131, a2, a3, a11, v136, v57, &v133);
      if (v25) {
        goto LABEL_94;
      }
      BOOL v65 = v133;
      unint64_t v59 = v71;
      uint64_t v60 = v103;
      uint64_t v62 = v95;
      int v61 = v97;
      unint64_t v63 = v93;
    }
    v130[0] = v64;
    v130[1] = v63;
    v130[2] = v62;
    v130[3] = v61;
    void v130[4] = v60;
    v130[5] = v59;
    v129[0] = v100;
    v129[1] = v99;
    v129[2] = v109;
    v129[3] = v107;
    uint64_t v25 = sub_24845D068(v130, v129, a2, a3, v65, a11, &v134);
    if (v25)
    {
LABEL_94:
      *(void *)&long long v121 = &v134;
      sub_2483F77FC((void ***)&v121);
      for (uint64_t m = 26; m != -4; m -= 10)
        sub_2483E8DDC((uint64_t *)&v136[m]);
      if (!v138)
      {
        for (uint64_t n = 104; n != -16; n -= 40)
          sub_2483E8DDC((uint64_t *)&v137[n]);
      }
      goto LABEL_99;
    }
    *(void *)(a14 + 1256) = a14;
    sub_2484568E0(a14 + 4544, v113);
    uint64_t v66 = 0;
    uint64_t v128 = 0;
    memset(v127, 0, sizeof(v127));
    uint64_t v67 = a5;
    if (!a5)
    {
      uint64_t v66 = 0;
      if (!*(_DWORD *)(a12 + 32) && *(unsigned char *)(a2 + 1))
      {
        uint64_t v66 = 0;
        if (!*(_DWORD *)(a12 + 12) && *(int *)(v113 + 48) <= 2)
        {
          sub_2483F0C3C((uint64_t)&v121, v109, v107);
          uint64_t v25 = v126;
          if (v126) {
            goto LABEL_92;
          }
          sub_2483F0E78((uint64_t)&v118, (uint64_t)&v121);
          sub_2483F7944((uint64_t)v127, (uint64_t)&v118);
          for (iuint64_t i = 104; ii != -16; ii -= 40)
            sub_2483E8DDC((uint64_t *)((char *)&v118 + ii));
          if (!v126)
          {
            for (juint64_t j = 104; jj != -16; jj -= 40)
              sub_2483E8DDC((uint64_t *)((char *)&v121 + jj));
          }
          uint64_t v66 = (unsigned int *)v127;
        }
        sub_248487C38((uint64_t)v140, v105, a11, v136, a10, v66, *(float *)(a3 + 300));
      }
      if (*(unsigned char *)(v113 + 68)) {
        char v70 = sub_248456844(v113);
      }
      else {
        char v70 = 0;
      }
      if (v112)
      {
        if (!*(unsigned char *)(v101 + 72)
          && !*(_DWORD *)(a12 + 16)
          && !*(unsigned char *)(v113 + 116)
          && *(_DWORD *)(v113 + 384) == *(_DWORD *)(v113 + 380))
        {
          sub_24845D2B8(v136, *((void *)v112 + 2), *((void *)v112 + 3), v70);
          if (v66) {
            sub_24845D2B8(v66, *((void *)v112 + 2), *((void *)v112 + 3), v70);
          }
        }
      }
      sub_2484DBCEC(v136);
      uint64_t v67 = 0;
    }
    unint64_t v118 = a6 - v100;
    unint64_t v119 = a7 - v99;
    *(void *)&long long v120 = (a8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)&v120 + 1) = (a9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (!v67 && *(unsigned char *)(a14 + 4209)) {
      sub_24845D4D0(v113, v136, (uint64_t *)&v118, (_DWORD *)a12);
    }
    sub_24845D7E8(v113, *v20, v67 != 0, v136, *(void *)(a14 + 8), *(void *)(a14 + 16), a12, (_OWORD *)(a14 + 1224));
    uint64_t v25 = sub_24845E5A0(*(_DWORD *)(v113 + 48), *(unsigned char *)(v113 + 388), a12, v67 != 0, v136);
    if (!v25)
    {
      if (*(_DWORD *)(v113 + 384) != 1 && !*(unsigned char *)(v113 + 388))
      {
        uint64_t v81 = v134;
        uint64_t v82 = v135;
        if (v134 != v135)
        {
          do
          {
            sub_2484DBE30((uint64_t)&v121, (unsigned int *)v81, *(int *)(v113 + 384));
            uint64_t v25 = v125;
            if (v125) {
              goto LABEL_92;
            }
            uint64_t v83 = v123;
            uint64_t v84 = v124;
            uint64_t v123 = 0;
            *(_OWORD *)uint64_t v81 = v121;
            *(void *)(v81 + 16) = v122;
            uint64_t v85 = v81 + 24;
            sub_2483EB138((uint64_t *)(v81 + 24), v83);
            *(void *)(v81 + 32) = v84;
            if (!v125)
            {
              uint64_t v86 = v123;
              uint64_t v123 = 0;
              if (v86)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v86 - 24));
                free(*(void **)(v86 - 32));
              }
            }
            v81 += 40;
          }
          while (v85 + 16 != v82);
        }
      }
      if (!*v20)
      {
        unint64_t v118 = 0;
        unint64_t v119 = 0;
        *(void *)&long long v87 = v136[0];
        *((void *)&v87 + 1) = v136[1];
        long long v120 = v87;
      }
      uint64_t v88 = v113;
      if (*(_DWORD *)(a12 + 12)) {
        goto LABEL_156;
      }
      sub_24845FAF8((int64x2_t *)(a14 + 5184), *(void *)(a14 + 4272));
      uint64_t v90 = *(void *)(a14 + 5184);
      uint64_t v91 = *(void *)(a14 + 5192);
      while (v90 != v91)
      {
        sub_2484477B4(v90, *(void *)(a14 + 120));
        v90 += 176;
      }
      uint64_t v92 = a5
          ? sub_24845FDE4(a5, a12, (uint64_t)a11, (uint64_t)a13, a14)
          : sub_2484611E0(a12, (uint64_t)v66, v136, (uint64_t *)&v118, a10, a11, a13, a14, a16);
      uint64_t v88 = v113;
      uint64_t v25 = v92;
      if (!v92)
      {
        sub_248462874(a14, v98);
        if (!*v20)
        {
          *(void *)(a14 + 4200) = 1;
          sub_2483FEEE4((char **)(a14 + 5208), *(void *)(a14 + 120));
        }
        uint64_t v25 = sub_248463208((char **)a12, (uint64_t)a11, a14);
        if (!v25)
        {
LABEL_156:
          if (!*(unsigned char *)(v88 + 68) && v134 == v135
            || (uint64_t v25 = sub_248474798((uint64_t)a13, a12, a3, v136, &v134, (uint64_t)&v118, v98, v139, a14, (uint64_t)a10, (long long *)a11, (int)a16, SHIDWORD(a16), *(unsigned char *)(v88 + 68) != 0), !v25))
          {
            if (*v20) {
              goto LABEL_132;
            }
            if (*(int *)(v113 + 48) >= 1
              && sub_248456844(v113)
              && !*(_DWORD *)(v113 + 352)
              && *(void *)(v113 + 464) == *(void *)(v113 + 472)
              || (uint64_t v25 = sub_248479794(a13, (uint64_t)a11), !v25)
              && (uint64_t v25 = sub_24847C12C((uint64_t)a13, (char **)a11), !v25))
            {
              *(void *)(a12 + 24) = *(void *)(a12 + 24) & 0xFFFFFFFFFFFFFFEDLL | (2
                                                                                    * (*(void *)(a14 + 1264) != *(void *)(a14 + 1272))) | (16 * (*(void *)(a14 + 1440) != *(void *)(a14 + 1448)));
LABEL_132:
              uint64_t v25 = sub_2484632C8(a12, a14, a13, (uint64_t)a11, a15, (uint64_t)a16);
              if (!v25)
              {
                if (*v20)
                {
                  uint64_t v89 = *(void *)(a14 + 4216);
                  LODWORD(v121) = 1;
                  *((void *)&v121 + 1) = 0;
                  uint64_t v122 = v89;
                  uint64_t v123 = 0;
                  sub_24847C6C0(a13, (uint64_t)&v121);
                  LODWORD(v121) = 3;
                  *((void *)&v121 + 1) = 0;
                  uint64_t v122 = v89;
                  uint64_t v123 = 0;
                  sub_24847C6C0(a13, (uint64_t)&v121);
                  sub_24847C7C0(a13);
                }
                uint64_t v25 = 0;
              }
            }
          }
        }
      }
    }
LABEL_92:
    for (kuint64_t k = 104; kk != -16; kk -= 40)
      sub_2483E8DDC((uint64_t *)&v127[kk]);
    goto LABEL_94;
  }
LABEL_113:
  if (!v182)
  {
    uint64_t v79 = v179;
    uint64_t v179 = 0;
    if (v79)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
      free(*(void **)(v79 - 32));
    }
  }
  return v25;
}

void sub_24845B4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a69 + i));
  a53 = (uint64_t)&STACK[0x300];
  sub_2483F77FC((void ***)&a53);
  for (uint64_t j = 104; j != -16; j -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x318] + j));
  if (!LODWORD(STACK[0x408]))
  {
    for (uint64_t k = 104; k != -16; k -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x390] + k));
  }
  STACK[0x430] = (unint64_t)&unk_26FC65EC8;
  uint64_t v74 = (void *)STACK[0x450];
  if (STACK[0x450])
  {
    STACK[0x458] = (unint64_t)v74;
    operator delete(v74);
  }
  if (!LODWORD(STACK[0x578]))
  {
    for (uint64_t m = 104; m != -16; m -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x500] + m));
  }
  if (!LODWORD(STACK[0x5A8]))
  {
    unint64_t v76 = STACK[0x598];
    STACK[0x598] = 0;
    if (v76)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v76 - 24));
      free(*(void **)(v76 - 32));
    }
  }
  sub_24842D240((uint64_t)&STACK[0x5B0]);
  if (!*(_DWORD *)(v69 - 216))
  {
    uint64_t v77 = *(void *)(v69 - 232);
    *(void *)(v69 - 232) = 0;
    if (v77)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v77 - 24));
      free(*(void **)(v77 - 32));
    }
  }
  if (!*(_DWORD *)(v69 - 168))
  {
    uint64_t v78 = *(void *)(v69 - 184);
    *(void *)(v69 - 184) = 0;
    if (v78)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v78 - 24));
      free(*(void **)(v78 - 32));
    }
  }
  if (!*(_DWORD *)(v69 - 104))
  {
    uint64_t v79 = *(void *)(v69 - 136);
    *(void *)(v69 - 136) = 0;
    if (v79)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
      free(*(void **)(v79 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24845B6E4(uint64_t result, unsigned int *a2, void ***a3, uint64_t a4, char a5)
{
  unint64_t v119 = (unsigned int *)result;
  while (2)
  {
    uint64_t v9 = a2;
    uint64_t v8 = v119;
    int v112 = a2 - 1;
    uint64_t v10 = a3;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (char *)v9 - (char *)v8;
          uint64_t v12 = v9 - v8;
          unint64_t v119 = v8;
          if (v6 || !v5)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v41 = *v112;
                unsigned int v42 = *v8;
                uint64_t result = sub_24845C5F4(*a3, *v112, *v8);
                if (result)
                {
                  unsigned int *v8 = v41;
                  unsigned int *v112 = v42;
                }
                break;
              case 3:
                uint64_t v43 = *a3;
                uint64_t result = sub_24845C738(v8, v8 + 1, v112, v43);
                break;
              case 4:
                uint64_t result = sub_24845C818(v8, v8 + 1, v8 + 2, v112, a3);
                break;
              case 5:
                uint64_t v44 = v8 + 2;
                uint64_t v45 = v8 + 3;
                sub_24845C818(v8, v8 + 1, v8 + 2, v8 + 3, a3);
                unsigned int v46 = *v112;
                unsigned int v47 = v8[3];
                unint64_t v48 = *a3;
                uint64_t result = sub_24845C5F4(*a3, *v112, v47);
                if (result)
                {
                  *uint64_t v45 = v46;
                  unsigned int *v112 = v47;
                  unsigned int v49 = *v45;
                  unsigned int v50 = *v44;
                  uint64_t result = sub_24845C5F4(v48, *v45, *v44);
                  if (result)
                  {
                    *uint64_t v44 = v49;
                    *uint64_t v45 = v50;
                    unsigned int v51 = v8[1];
                    uint64_t result = sub_24845C5F4(v48, v49, v51);
                    if (result)
                    {
                      v8[1] = v49;
                      void v8[2] = v51;
                      unsigned int v52 = *v8;
                      uint64_t result = sub_24845C5F4(v48, v49, *v8);
                      if (result)
                      {
                        unsigned int *v8 = v49;
                        v8[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 95)
          {
            uint64_t v53 = v8 + 1;
            BOOL v55 = v8 == v9 || v53 == v9;
            if (a5)
            {
              if (!v55)
              {
                uint64_t v56 = *a3;
                uint64_t v57 = 4;
                uint64_t v58 = v8;
                do
                {
                  unsigned int v60 = *v58;
                  unsigned int v59 = v58[1];
                  uint64_t v58 = v53;
                  uint64_t result = sub_24845C5F4(v56, v59, v60);
                  if (result)
                  {
                    int v61 = *a3;
                    uint64_t v62 = v57;
                    while (1)
                    {
                      *(unsigned int *)((char *)v119 + v62) = v60;
                      uint64_t v63 = v62 - 4;
                      if (v62 == 4) {
                        break;
                      }
                      unsigned int v60 = *(unsigned int *)((char *)v119 + v62 - 8);
                      uint64_t result = sub_24845C5F4(v61, v59, v60);
                      uint64_t v62 = v63;
                      if ((result & 1) == 0)
                      {
                        uint64_t v64 = (unsigned int *)((char *)v119 + v63);
                        goto LABEL_82;
                      }
                    }
                    uint64_t v64 = v119;
LABEL_82:
                    *uint64_t v64 = v59;
                  }
                  uint64_t v53 = v58 + 1;
                  v57 += 4;
                }
                while (v58 + 1 != a2);
              }
            }
            else if (!v55)
            {
              uint64_t v104 = *a3;
              do
              {
                unsigned int v106 = *v119;
                unsigned int v105 = v119[1];
                unint64_t v107 = v53;
                uint64_t result = sub_24845C5F4(v104, v105, *v119);
                if (result)
                {
                  uint64_t v108 = v107;
                  do
                  {
                    *uint64_t v108 = v106;
                    unsigned int v106 = *(v108 - 2);
                    uint64_t result = sub_24845C5F4(v104, v105, v106);
                    --v108;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v108 = v105;
                }
                unint64_t v119 = v107;
                uint64_t v53 = v107 + 1;
              }
              while (v107 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v8 != v9)
            {
              int64_t v65 = (unint64_t)(v12 - 2) >> 1;
              uint64_t v66 = *a3;
              int64_t v67 = v65;
              unint64_t v109 = *a3;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  int64_t v111 = v67;
                  uint64_t v69 = (2 * v67) | 1;
                  char v70 = &v119[v69];
                  uint64_t v71 = 2 * v67 + 2;
                  unsigned int v72 = *v70;
                  unint64_t v73 = v66;
                  if (v71 < v12)
                  {
                    unsigned int v74 = v70[1];
                    BOOL v75 = sub_24845C5F4(v66, *v70, v74);
                    uint64_t v66 = v73;
                    if (v75) {
                      unsigned int v72 = v74;
                    }
                    int64_t v65 = (unint64_t)(v12 - 2) >> 1;
                    if (v75)
                    {
                      ++v70;
                      uint64_t v69 = v71;
                    }
                  }
                  int64_t v68 = v111;
                  unint64_t v76 = &v119[v111];
                  unsigned int v77 = *v76;
                  uint64_t result = sub_24845C5F4(v66, v72, *v76);
                  uint64_t v66 = v73;
                  if ((result & 1) == 0)
                  {
                    unsigned int v116 = v77;
                    uint64_t v78 = *a3;
                    do
                    {
                      uint64_t v79 = v70;
                      *unint64_t v76 = v72;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v80 = (2 * v69) | 1;
                      char v70 = &v119[v80];
                      uint64_t v81 = 2 * v69 + 2;
                      unsigned int v72 = *v70;
                      if (v81 < v12)
                      {
                        unsigned int v82 = v70[1];
                        BOOL v83 = sub_24845C5F4(v78, *v70, v82);
                        if (v83)
                        {
                          unsigned int v72 = v82;
                          ++v70;
                        }
                        int64_t v65 = (unint64_t)(v12 - 2) >> 1;
                        if (v83) {
                          uint64_t v80 = v81;
                        }
                      }
                      uint64_t result = sub_24845C5F4(v78, v72, v116);
                      unint64_t v76 = v79;
                      uint64_t v69 = v80;
                    }
                    while (!result);
                    *uint64_t v79 = v116;
                    uint64_t v66 = v109;
                    int64_t v68 = v111;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v84 = (unint64_t)v11 >> 2;
              uint64_t v113 = *a3;
              do
              {
                uint64_t v85 = 0;
                uint64_t v86 = v119;
                unsigned int v117 = *v119;
                long long v87 = *a3;
                do
                {
                  uint64_t v88 = &v86[v85];
                  unsigned int v91 = v88[1];
                  uint64_t v90 = v88 + 1;
                  unsigned int v89 = v91;
                  uint64_t v92 = (2 * v85) | 1;
                  uint64_t v93 = 2 * v85 + 2;
                  if (v93 < v84)
                  {
                    unsigned int v94 = v90[1];
                    uint64_t result = sub_24845C5F4(v87, v89, v94);
                    if (result)
                    {
                      unsigned int v89 = v94;
                      ++v90;
                      uint64_t v92 = v93;
                    }
                  }
                  *uint64_t v86 = v89;
                  uint64_t v86 = v90;
                  uint64_t v85 = v92;
                }
                while (v92 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
                long long v95 = a2 - 1;
                BOOL v6 = v90 == --a2;
                if (v6)
                {
                  *uint64_t v90 = v117;
                }
                else
                {
                  *uint64_t v90 = *v95;
                  *long long v95 = v117;
                  uint64_t v96 = (char *)v90 - (char *)v119 + 4;
                  if (v96 >= 5)
                  {
                    unint64_t v97 = (((unint64_t)v96 >> 2) - 2) >> 1;
                    unint64_t v98 = &v119[v97];
                    unsigned int v99 = *v98;
                    unsigned int v100 = *v90;
                    uint64_t result = sub_24845C5F4(v113, *v98, *v90);
                    if (result)
                    {
                      uint64_t v101 = *a3;
                      do
                      {
                        uint64_t v102 = v98;
                        *uint64_t v90 = v99;
                        if (!v97) {
                          break;
                        }
                        unint64_t v97 = (v97 - 1) >> 1;
                        unint64_t v98 = &v119[v97];
                        unsigned int v99 = *v98;
                        uint64_t result = sub_24845C5F4(v101, *v98, v100);
                        uint64_t v90 = v102;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v102 = v100;
                    }
                  }
                }
              }
              while (v84-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v8[(unint64_t)v12 >> 1];
          unint64_t v15 = *v10;
          if ((unint64_t)v11 < 0x201)
          {
            sub_24845C738(v14, v8, v112, v15);
          }
          else
          {
            sub_24845C738(v8, v14, v112, v15);
            sub_24845C738(v8 + 1, v14 - 1, a2 - 2, *v10);
            sub_24845C738(v8 + 2, &v8[v13 + 1], a2 - 3, *v10);
            sub_24845C738(v14 - 1, v14, &v8[v13 + 1], *v10);
            unsigned int v16 = *v8;
            unsigned int *v8 = *v14;
            *uint64_t v14 = v16;
          }
          uint64_t v115 = a4 - 1;
          unsigned int v17 = *v8;
          int v18 = *v10;
          unint64_t v19 = v8;
          if (a5) {
            break;
          }
          unint64_t v19 = v8;
          if (sub_24845C5F4(*v10, *(v8 - 1), *v8)) {
            break;
          }
          uint64_t result = sub_24845C5F4(v18, v17, *v112);
          if (result)
          {
            uint64_t v10 = a3;
            a4 = v115;
            do
            {
              unsigned int v32 = v8[1];
              ++v8;
              uint64_t result = sub_24845C5F4(v18, v17, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v33 = v8 + 1;
            uint64_t v10 = a3;
            a4 = v115;
            do
            {
              uint64_t v8 = v33;
              if (v33 >= v9) {
                break;
              }
              ++v33;
              uint64_t result = sub_24845C5F4(v18, v17, *v8);
            }
            while (!result);
          }
          uint64_t v34 = v9;
          if (v8 < v9)
          {
            uint64_t v34 = v9;
            do
            {
              unsigned int v35 = *--v34;
              uint64_t result = sub_24845C5F4(v18, v17, v35);
            }
            while ((result & 1) != 0);
          }
          if (v8 < v34)
          {
            unsigned int v36 = *v8;
            unsigned int v37 = *v34;
            do
            {
              unsigned int *v8 = v37;
              *uint64_t v34 = v36;
              do
              {
                unsigned int v38 = v8[1];
                ++v8;
                unsigned int v36 = v38;
              }
              while (!sub_24845C5F4(v18, v17, v38));
              do
              {
                unsigned int v39 = *--v34;
                unsigned int v37 = v39;
                uint64_t result = sub_24845C5F4(v18, v17, v39);
              }
              while ((result & 1) != 0);
            }
            while (v8 < v34);
          }
          int v40 = v8 - 1;
          uint64_t v9 = a2;
          BOOL v5 = v8 - 1 >= v119;
          BOOL v6 = v8 - 1 == v119;
          if (v8 - 1 != v119) {
            unsigned int *v119 = *v40;
          }
          a5 = 0;
          unsigned int *v40 = v17;
        }
        do
        {
          uint64_t v20 = v19;
          unsigned int v22 = v19[1];
          ++v19;
          unsigned int v21 = v22;
        }
        while (sub_24845C5F4(v18, v22, v17));
        uint64x2_t v23 = v9;
        if (v20 == v8)
        {
          uint64x2_t v23 = v9;
          do
          {
            if (v19 >= v23) {
              break;
            }
            unsigned int v25 = *--v23;
          }
          while (!sub_24845C5F4(v18, v25, v17));
        }
        else
        {
          do
            unsigned int v24 = *--v23;
          while (!sub_24845C5F4(v18, v24, v17));
        }
        if (v19 < v23)
        {
          unsigned int v26 = *v23;
          uint64_t v27 = v19;
          uint64_t v28 = v23;
          do
          {
            *uint64_t v27 = v26;
            *uint64_t v28 = v21;
            do
            {
              uint64_t v20 = v27;
              unsigned int v29 = v27[1];
              ++v27;
              unsigned int v21 = v29;
            }
            while (sub_24845C5F4(v18, v29, v17));
            do
            {
              unsigned int v30 = *--v28;
              unsigned int v26 = v30;
            }
            while (!sub_24845C5F4(v18, v30, v17));
          }
          while (v27 < v28);
        }
        if (v20 != v8) {
          unsigned int *v8 = *v20;
        }
        *uint64_t v20 = v17;
        BOOL v5 = v19 >= v23;
        a4 = v115;
        uint64_t v9 = a2;
        uint64_t v10 = a3;
        if (v5) {
          break;
        }
LABEL_31:
        uint64_t result = sub_24845B6E4(v119, v20, a3, v115, a5 & 1);
        a5 = 0;
        uint64_t v8 = v20 + 1;
      }
      BOOL v31 = sub_24845C8D8(v8, v20, a3);
      uint64_t v8 = v20 + 1;
      uint64_t result = sub_24845C8D8(v20 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_31;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

void *sub_24845BFEC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_2483E92E8();
    }
    int v4 = (char *)sub_248403444(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    size_t v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_24845C0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_24845C0B4(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v5 = 0;
  while (1)
  {
    size_t v6 = v2 - v5;
    sub_24848807C(&__dst, a1, 1uLL, v2 - v5);
    uint64_t result = v15;
    if (v15) {
      break;
    }
    uint64_t v8 = __dst;
    uint64_t v9 = (char *)__dst;
    long long v10 = v13;
    uint64_t v11 = v14;
    __dst = 0;
    *(void *)&long long v13 = 0;
    if ((unint64_t)v10 < v6) {
      size_t v6 = v10;
    }
    memcpy(v8, (const void *)(a2[2] + v5), v6);
    v9 += v6;
    *(void *)&long long v10 = v10 - v6;
    *((void *)&v10 + 1) += v6;
    sub_24845C478(&v9);
    if (!v15) {
      sub_24845C478(&__dst);
    }
    v5 += v6;
    if (v5 >= v2) {
      return 0;
    }
  }
  return result;
}

void sub_24845C198(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        sub_24845C404(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_24845C21C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_248441870(--v4);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_24845C2A0(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_24845C398(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_24845C2F4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 5240);
  if (v2)
  {
    *(void *)(a1 + 5248) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 5208);
  if (v3)
  {
    *(void *)(a1 + 5216) = v3;
    operator delete(v3);
  }
  unint64_t v5 = (void **)(a1 + 5184);
  sub_24845C198(&v5);
  sub_2484414D4(a1 + 4544);
  unint64_t v5 = (void **)(a1 + 4248);
  sub_24845C21C(&v5);
  unint64_t v5 = (void **)(a1 + 4224);
  sub_24845C2A0(&v5);

  return sub_248411260(a1);
}

void *sub_24845C398(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_24845C404(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 48);
  unint64_t v5 = (void **)(a1 + 152);
  sub_2483F77FC(&v5);
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  unint64_t v5 = v2;
  sub_2484415B0(&v5);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void **)a1;
  sub_2483F87EC(&v5);
}

void *sub_24845C478(void *a1)
{
  if (*a1)
  {
    uint64_t v3 = a1[2];
    uint64_t v2 = a1[3];
    *(unsigned char *)(v2 + 65) = 0;
    uint64_t v4 = *(void **)(v2 + 8);
    if (!v4) {
      goto LABEL_13;
    }
    unint64_t v5 = *(void *)(v2 + 40);
    size_t v6 = (void *)(v2 + 8);
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = v4 + 1;
      }
      if (v8) {
        size_t v6 = v4;
      }
      uint64_t v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 == (void *)(v2 + 8) || v5 < v6[4]) {
LABEL_13:
    }
      size_t v6 = (void *)(v2 + 8);
    if (v3)
    {
      v6[5] = v3;
      *(void *)(v2 + 40) += v3;
      long long v10 = *(void **)(v2 + 72);
      if (v10)
      {
        if (v6[6])
        {
          uint64_t v11 = (void (*)(void))v10[3];
          if (v11)
          {
            v11(*v10);
            *(void *)(v2 + 56) = *(void *)(v2 + 40) - v3;
            while (1)
            {
              unint64_t v12 = *(void *)(v2 + 56);
              unint64_t v13 = *(void *)(v2 + 40);
              if (v13 <= v12) {
                break;
              }
              if ((sub_2484885C0(v2, (const void *)(v6[8] + v12 - v13 + v3), v13 - v12) & 1) == 0) {
                goto LABEL_25;
              }
            }
            sub_2484106F0(v6 + 6, 0);
            v6[6] = 0;
          }
        }
        else
        {
          ((void (*)(void, uint64_t))v10[2])(*v10, v3);
          if (*(void *)(*(void *)(v2 + 72) + 24)) {
            *(void *)(v2 + 56) += v3;
          }
          else {
            sub_248488418((void *)v2);
          }
        }
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v2 + 72);
      if (v14) {
        (*(void (**)(void, void))(v14 + 16))(*(void *)v14, 0);
      }
      sub_248488668((void **)v2, v6);
    }
  }
LABEL_25:
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

BOOL sub_24845C5F4(void **a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (*a1)[10];
  uint64_t v4 = (*a1)[16];
  uint64_t v5 = *a1[1] >> 1;
  uint64_t v6 = v4 * (a2 % v3) + v5;
  uint64_t v7 = *a1[2];
  uint64_t v8 = v6 - v7;
  uint64_t v9 = *a1[3];
  uint64_t v10 = v4 * (a2 / v3) + v5 - v9;
  if (v6 - v7 >= 0) {
    unint64_t v11 = v6 - v7;
  }
  else {
    unint64_t v11 = v7 - v6;
  }
  if (v10 >= 0) {
    unint64_t v12 = v4 * (a2 / v3) + v5 - v9;
  }
  else {
    unint64_t v12 = v9 - (v4 * (a2 / v3) + v5);
  }
  if (v11 <= v12) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = v11;
  }
  int64_t v14 = v5 - v7 + a3 % v3 * v4;
  int64_t v15 = v5 - v9 + a3 / v3 * v4;
  if (v14 >= 0) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = -v14;
  }
  if (v15 >= 0) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = -v15;
  }
  if (v16 <= v17) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v13 < v18) {
    return 1;
  }
  double v20 = (double)(uint64_t)*a1[4];
  long double v21 = atan2((double)v15, (double)v14);
  double v22 = remainder(v21 + 0.785398163 + v20 * 1.57079633, 6.28318531);
  long double v23 = atan2((double)v10, (double)v8);
  return remainder(v23 + 0.785398163 + v20 * 1.57079633, 6.28318531) < v22 && v18 >= v13;
}

BOOL sub_24845C738(unsigned int *a1, unsigned int *a2, unsigned int *a3, void **a4)
{
  unsigned int v8 = *a2;
  unsigned int v9 = *a1;
  BOOL v10 = sub_24845C5F4(a4, *a2, *a1);
  unsigned int v11 = *a3;
  BOOL result = sub_24845C5F4(a4, *a3, v8);
  if (v10)
  {
    if (result)
    {
      *a1 = v11;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      unsigned int v15 = *a3;
      BOOL result = sub_24845C5F4(a4, *a3, v9);
      if (!result) {
        return result;
      }
      *a2 = v15;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v11;
    *a3 = v8;
    unsigned int v13 = *a2;
    unsigned int v14 = *a1;
    BOOL result = sub_24845C5F4(a4, *a2, *a1);
    if (result)
    {
      *a1 = v13;
      *a2 = v14;
    }
  }
  return result;
}

BOOL sub_24845C818(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void ***a5)
{
  sub_24845C738(a1, a2, a3, *a5);
  unsigned int v10 = *a4;
  unsigned int v11 = *a3;
  unint64_t v12 = *a5;
  BOOL result = sub_24845C5F4(v12, *a4, *a3);
  if (result)
  {
    *a3 = v10;
    *a4 = v11;
    unsigned int v14 = *a3;
    unsigned int v15 = *a2;
    BOOL result = sub_24845C5F4(v12, *a3, *a2);
    if (result)
    {
      *a2 = v14;
      *a3 = v15;
      unsigned int v16 = *a2;
      unsigned int v17 = *a1;
      BOOL result = sub_24845C5F4(v12, *a2, *a1);
      if (result)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_24845C8D8(unsigned int *a1, unsigned int *a2, void ***a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      unsigned int v9 = *a1;
      if (sub_24845C5F4(*a3, v8, *a1))
      {
        *a1 = v8;
        *(v4 - 1) = v9;
      }
      return 1;
    case 3:
      sub_24845C738(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_24845C818(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      unsigned int v24 = a1 + 2;
      unsigned int v25 = a1 + 3;
      sub_24845C818(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      unsigned int v26 = *(v4 - 1);
      unsigned int v27 = a1[3];
      uint64_t v28 = *v3;
      if (sub_24845C5F4(v28, v26, v27))
      {
        *unsigned int v25 = v26;
        *(v4 - 1) = v27;
        unsigned int v29 = *v25;
        unsigned int v30 = *v24;
        if (sub_24845C5F4(v28, *v25, *v24))
        {
          *unsigned int v24 = v29;
          *unsigned int v25 = v30;
          unsigned int v31 = a1[1];
          if (sub_24845C5F4(v28, v29, v31))
          {
            a1[1] = v29;
            a1[2] = v31;
            unsigned int v32 = *a1;
            if (sub_24845C5F4(v28, v29, *a1))
            {
              *a1 = v29;
              a1[1] = v32;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v10 = a1 + 2;
      sub_24845C738(a1, a1 + 1, a1 + 2, *a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v12 = 0;
      unsigned int v13 = *v3;
      uint64_t v14 = 12;
      uint64_t v33 = v4;
      break;
  }
  while (1)
  {
    unsigned int v15 = *v11;
    unsigned int v16 = *v10;
    if (sub_24845C5F4(v13, *v11, v16))
    {
      unsigned int v17 = v13;
      unint64_t v18 = v3;
      unint64_t v19 = *v3;
      uint64_t v20 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v20) = v16;
        uint64_t v21 = v20 - 4;
        if (v20 == 4) {
          break;
        }
        unsigned int v16 = *(unsigned int *)((char *)a1 + v20 - 8);
        BOOL v22 = sub_24845C5F4(v19, v15, v16);
        uint64_t v20 = v21;
        if (!v22)
        {
          long double v23 = (unsigned int *)((char *)a1 + v21);
          goto LABEL_13;
        }
      }
      long double v23 = a1;
LABEL_13:
      *long double v23 = v15;
      ++v12;
      unint64_t v3 = v18;
      unsigned int v13 = v17;
      uint64_t v4 = v33;
      if (v12 == 8) {
        return v11 + 1 == v33;
      }
    }
    unsigned int v10 = v11;
    v14 += 4;
    if (++v11 == v4) {
      return 1;
    }
  }
}

uint64_t sub_24845CB5C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FC65EC8;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  sub_2483F01FC((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 112) = &unk_26FC66920;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = &unk_26FC66170;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = &unk_26FC66920;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = &unk_26FC66920;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = &unk_26FC66920;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  return a1;
}

void *sub_24845CCAC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_2483E92E8();
    }
    uint64_t v4 = (char *)sub_248403444(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    size_t v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_24845CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_24845CD74(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, unsigned int *a6, unsigned int *a7, BOOL *a8)
{
  v51[4] = *MEMORY[0x263EF8340];
  long long v47 = xmmword_248550790;
  uint64_t v48 = 0;
  ((void (*)(void, long long *))a1[1])(*a1, &v47);
  BOOL v17 = v47 == 2 || v47 == 4;
  *a8 = v17;
  int v18 = *(_DWORD *)(a3 + 64);
  if (v18 == 2)
  {
    unsigned int v19 = *(_DWORD *)(a3 + 68);
  }
  else if (v18 == 1)
  {
    unsigned int v19 = *(_DWORD *)(a4 + 28);
  }
  else if (v18 || DWORD1(v47) >= 6)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unsigned int v19 = dword_24854F4D8[DWORD1(v47)];
  }
  uint64_t v46 = 0;
  uint64_t v20 = ((uint64_t (*)(void, void, void, void, void, uint64_t *))a1[2])(*a1, *a2, a2[1], a2[2], a2[3], &v46);
  v51[0] = &unk_26FC63B20;
  v51[1] = a1;
  void v51[3] = v51;
  uint64_t v49 = v20;
  sub_248467AA0((uint64_t)v50, (uint64_t)v51);
  sub_248467B20(v51);
  uint64_t v21 = v49;
  if (v49)
  {
    int v40 = a8;
    unsigned int v41 = a7;
    BOOL v22 = a6;
    BOOL v23 = *(unsigned char *)(a3 + 1) != 0;
    BOOL v24 = *(_DWORD *)(a4 + 104) == 1;
    BOOL v25 = v23 && v24;
    unint64_t v26 = v23 && v24 ? 1 : 3;
    if (v26 <= v47)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v19;
      uint64_t v31 = (uint64_t)v22;
      while (1)
      {
        uint64_t v32 = a2[2];
        uint64_t v33 = a2[3];
        long long v44 = v47;
        uint64_t v45 = v48;
        if (sub_248455920(v21, v32, v33, v46, v30, (unsigned int *)&v44, v29, a5, *(double *)&v47, v31)) {
          break;
        }
        ++v29;
        v31 += 40;
        if (v26 == v29)
        {
          if (v25)
          {
            sub_248467CF4(v22, (uint64_t)(v22 + 10));
            sub_248467CF4(v22, (uint64_t)(v22 + 20));
          }
          if (v41)
          {
            if (*v40)
            {
              uint64_t v34 = a2[2];
              uint64_t v35 = a2[3];
              long long v42 = v47;
              uint64_t v43 = v48;
              if (sub_248455920(v21, v34, v35, v46, v30, (unsigned int *)&v42, (v47 - 1), a5, *(double *)&v47, (uint64_t)v41))break; {
            }
              }
            else
            {
              uint64_t v36 = v41[1];
              if (v36)
              {
                uint64_t v38 = *((void *)v41 + 2);
                unsigned int v37 = (char *)*((void *)v41 + 3);
                uint64_t v39 = *v41;
                do
                {
                  if (v39) {
                    memset_pattern16(v37, &unk_2484DD0D0, 4 * v39);
                  }
                  v37 += v38;
                  --v36;
                }
                while (v36);
              }
            }
          }
          uint64_t v27 = 0;
          goto LABEL_21;
        }
      }
    }
  }
  uint64_t v27 = 1;
LABEL_21:
  sub_248467BA4(&v49);
  sub_248467B20(v50);
  return v27;
}

void sub_24845D040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_248467BA4((uint64_t *)va);
  sub_248467B20(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_24845D068(void *a1, void *a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  v32[4] = *MEMORY[0x263EF8340];
  unint64_t v7 = *(unsigned int *)(a4 + 320);
  if (!v7) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  while (1)
  {
    if ((a5 & 1) != 0 && !*(_DWORD *)(*(void *)(a4 + 328) + v12 + 12))
    {
      a5 = 0;
      goto LABEL_16;
    }
    uint64_t v29 = 0;
    long long v28 = xmmword_24854F3D0;
    ((void (*)(void, unint64_t, long long *))a1[3])(*a1, v14, &v28);
    LODWORD(v28) = 1;
    uint64_t v27 = 0;
    uint64_t v15 = ((uint64_t (*)(void, unint64_t, void, void, void, void, uint64_t *))a1[4])(*a1, v14, *a2, a2[1], a2[2], a2[3], &v27);
    v32[0] = &off_26FC63BD0;
    v32[1] = a1;
    v32[3] = v32;
    uint64_t v30 = v15;
    sub_248467AA0((uint64_t)v31, (uint64_t)v32);
    sub_248467B20(v32);
    if (!v30) {
      break;
    }
    unint64_t v16 = *(void *)(a3 + 64);
    if (v16 == 2)
    {
      uint64_t v17 = HIDWORD(v16);
    }
    else if (v16 == 1)
    {
      uint64_t v17 = *(unsigned int *)(*(void *)(a4 + 328) + v12 + 28);
    }
    else if (v16 || DWORD1(v28) >= 6)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = dword_24854F4D8[DWORD1(v28)];
    }
    uint64_t v18 = a2[2];
    uint64_t v19 = a2[3];
    long long v25 = v28;
    uint64_t v26 = v29;
    int v20 = sub_248455920(v30, v18, v19, v27, v17, (unsigned int *)&v25, 0, a6, *(double *)&v28, *a7 + v13);
    sub_248467BA4(&v30);
    sub_248467B20(v31);
    if (v20) {
      return 1;
    }
    unint64_t v7 = *(unsigned int *)(a4 + 320);
LABEL_16:
    ++v14;
    v13 += 40;
    v12 += 96;
    if (v14 >= v7) {
      return 0;
    }
  }
  sub_248467BA4(&v30);
  sub_248467B20(v31);
  return 1;
}

void sub_24845D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_248467BA4((uint64_t *)va);
  sub_248467B20(v12);
  _Unwind_Resume(a1);
}

unsigned int *sub_24845D2B8(unsigned int *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = result[1];
  do
  {
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *((void *)result + 2);
      uint64_t v8 = *(void *)&result[10 * v4 + 6];
      unint64_t v9 = *result;
      uint64_t v10 = v8 + 4;
      uint64_t v11 = a3 + 4;
      do
      {
        if (v6) {
          uint64_t v12 = v8 + v7 * (v6 - 1);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = v6 + 1;
        if (v6 + 1 < v5) {
          uint64_t v14 = v8 + v7 * (v6 + 1);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = a3 + (v6 - 1) * a2;
        if (!v6) {
          uint64_t v15 = 0;
        }
        if (v13 < v5) {
          uint64_t v16 = a3 + v13 * a2;
        }
        else {
          uint64_t v16 = 0;
        }
        if (v9)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v14 + 4;
          uint64_t v19 = v16 + 4;
          unint64_t v20 = 1;
          do
          {
            if (*(float *)(v11 + v17 - 4) == 0.0)
            {
              uint64_t v21 = v10 + v17;
              *(_DWORD *)(v10 + v17 - 4) = 0;
              if ((a4 & 1) == 0)
              {
                if (v17)
                {
                  float v22 = *(float *)(v10 + v17 - 8);
                  float v23 = v22 + 0.0;
                  *(float *)(v21 - 4) = v22 + 0.0;
                  float v24 = 1.0;
                  if (*(float *)(v11 + v17 - 8) > 0.0)
                  {
                    float v23 = v22 + v23;
                    *(float *)(v21 - 4) = v23;
                    float v24 = 2.0;
                  }
                }
                else
                {
                  float v23 = 0.0;
                  float v24 = 0.0;
                }
                if (v20 < v9)
                {
                  if (v6)
                  {
                    float v23 = *(float *)(v12 + v17 + 4) + v23;
                    *(float *)(v21 - 4) = v23;
                    float v24 = v24 + 1.0;
                  }
                  if (*(float *)(v11 + v17) > 0.0)
                  {
                    float v23 = v23 + (float)(*(float *)(v10 + v17) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    float v24 = v24 + 2.0;
                  }
                  if (v6 && *(float *)(v15 + v17 + 4) > 0.0)
                  {
                    float v23 = v23 + (float)(*(float *)(v12 + v17 + 4) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    float v24 = v24 + 2.0;
                  }
                  if (v13 < v5 && *(float *)(v19 + v17) > 0.0)
                  {
                    float v23 = v23 + (float)(*(float *)(v18 + v17) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    float v24 = v24 + 2.0;
                  }
                }
                if (v6 && *(float *)(v15 + v17) > 0.0)
                {
                  float v23 = v23 + (float)(*(float *)(v12 + v17) * 2.0);
                  *(float *)(v21 - 4) = v23;
                  float v24 = v24 + 2.0;
                }
                if (v13 < v5 && *(float *)(v19 + v17 - 4) > 0.0)
                {
                  float v23 = v23 + (float)(*(float *)(v18 + v17 - 4) * 2.0);
                  *(float *)(v21 - 4) = v23;
                  float v24 = v24 + 2.0;
                }
                if (v24 > 1.0) {
                  *(float *)(v21 - 4) = v23 / v24;
                }
              }
            }
            v17 += 4;
            ++v20;
          }
          while (4 * v9 != v17);
        }
        v11 += a2;
        v10 += v7;
        ++v6;
      }
      while (v13 != v5);
    }
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_24845D4D0(uint64_t result, void *a2, uint64_t *a3, _DWORD *a4)
{
  if (a4[3]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *(unsigned char *)(result + 32) == 0;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    int v6 = 2;
    a4[17] = 2;
    float v7 = *(float *)(result + 392);
    do
    {
      if (v7 > *(float *)&dword_2484DD0A0[v5]) {
        a4[17] = ++v6;
      }
      ++v5;
    }
    while (v5 != 4);
    if (*(float *)result < 0.299) {
      a4[17] = ++v6;
    }
    if (*(int *)(result + 48) > 3)
    {
      double v52 = 0.0;
      float v9 = 0.0;
      float v12 = 0.0;
    }
    else
    {
      unint64_t v8 = a3[3];
      float v9 = 0.0;
      float v10 = 0.0;
      float v11 = 0.0;
      float v12 = 0.0;
      if (v8 >= 2)
      {
        uint64_t v14 = a3[1];
        unint64_t v13 = a3[2];
        uint64_t v15 = *a3;
        uint64_t v17 = a2[2];
        uint64_t v16 = a2[3];
        uint64_t v18 = v14 * v17 + 4 * *a3 + v16 + 4;
        uint64_t v19 = (float *)(v18 + v17);
        float v20 = 0.0;
        for (uint64_t i = 1; i != v8; ++i)
        {
          if (v13 >= 2)
          {
            float v22 = *(float *)(v16 + v17 * (i + v14) + 4 * v15);
            float v23 = v19;
            float v24 = (float *)v18;
            unint64_t v25 = v13 - 1;
            do
            {
              float v26 = *v23++;
              float v27 = v26;
              float v28 = *v24++;
              float v29 = v28;
              float v30 = vabds_f32(v27, v22);
              if (v20 < v30) {
                float v20 = v30;
              }
              float v31 = vabds_f32(v27, v29);
              if (v9 < v31) {
                float v9 = v31;
              }
              float v22 = v27;
              --v25;
            }
            while (v25);
          }
          v18 += v17;
          uint64_t v19 = (float *)((char *)v19 + v17);
        }
        uint64_t v33 = a2[7];
        uint64_t v32 = a2[8];
        uint64_t v35 = a2[12];
        uint64_t v34 = a2[13];
        BOOL result = v33 * v14 + 4 * v15 + v32 + 4;
        uint64_t v36 = v35 * v14 + 4 * v15 + v34 + 4;
        uint64_t v37 = v35 * (v14 + 1) + 4 * v15 + v34 + 4;
        uint64_t v38 = v33 * (v14 + 1) + 4 * v15 + v32 + 4;
        float v12 = 0.0;
        uint64_t v39 = 1;
        float v11 = 0.0;
        float v10 = 0.0;
        do
        {
          if (v13 >= 2)
          {
            uint64_t v40 = 0;
            float v41 = *(float *)(v34 + v35 * (v39 + v14) + 4 * v15);
            float v42 = *(float *)(v32 + v33 * (v39 + v14) + 4 * v15);
            do
            {
              float v43 = v42;
              float v42 = *(float *)(v38 + 4 * v40);
              float v44 = *(float *)(v37 + 4 * v40);
              float v45 = v41 - v43;
              float v46 = v44 + v42 * -1.2;
              float v47 = *(float *)(v36 + 4 * v40);
              float v48 = vabds_f32(v44 - v42, v45);
              if (v11 < v48) {
                float v11 = v48;
              }
              float v49 = vabds_f32(v44 - v42, v47 - *(float *)(result + 4 * v40));
              if (v10 < v49) {
                float v10 = v49;
              }
              if (v46 >= 0.0)
              {
                float v50 = (float)(vabds_f32(v44, v41) + vabds_f32(v44, v47)) * v46;
                if (v12 < v50) {
                  float v12 = v50;
                }
              }
              ++v40;
              float v41 = v44;
            }
            while (v13 - 1 != v40);
          }
          ++v39;
          result += v33;
          v36 += v35;
          v37 += v35;
          v38 += v33;
        }
        while (v39 != v8);
        if (v20 >= v9) {
          float v9 = v20;
        }
      }
      if (v11 >= v10) {
        float v51 = v11;
      }
      else {
        float v51 = v10;
      }
      double v52 = v51;
    }
    double v53 = v9;
    if (v53 < 0.017) {
      int v54 = 2;
    }
    else {
      int v54 = 3;
    }
    if (v53 >= 0.03) {
      int v54 = 4;
    }
    if (v6 <= v54) {
      int v6 = v54;
    }
    a4[17] = v6;
    double v55 = v12;
    if (v52 <= 0.38)
    {
      if (v52 <= 0.33)
      {
        int v56 = v52 > 0.28;
        if (v55 < 0.13) {
          int v56 = 0;
        }
      }
      else if (v55 < 0.13)
      {
        int v56 = 1;
      }
      else
      {
        int v56 = 2;
      }
    }
    else if (v55 < 0.13)
    {
      int v56 = 2;
    }
    else
    {
      int v56 = 3;
    }
    a4[18] = v56 + 2;
  }
  return result;
}

void sub_24845D7E8(uint64_t a1, char a2, char a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, _OWORD *a8)
{
  float v9 = *(float *)(a1 + 192);
  if (v9 <= 0.0)
  {
    uint64_t v21 = *(void *)(a1 + 416);
    if (*(void *)(a1 + 424) - v21 == 32)
    {
      for (uint64_t i = 0; i != 32; i += 4)
        *(_DWORD *)((char *)a8 + i) = *(_DWORD *)(v21 + i);
    }
    else if (!*(_DWORD *)(a7 + 12) && (*(unsigned char *)(a7 + 24) & 1) != 0 && (a3 & 1) == 0 && (a2 & 1) == 0)
    {
      float v24 = (float)(*(float *)a1 + -1.0) / 0.6;
      float v25 = (float)(v24 * 0.75) + 0.25;
      if (v24 >= 1.0) {
        float v25 = 1.0;
      }
      if (v24 >= 0.0) {
        float v26 = v25;
      }
      else {
        float v26 = 1.0;
      }
      bzero(v190, 0x400uLL);
      unint64_t v27 = (*a4 >> 3) * (unint64_t)(a4[1] >> 3);
      LODWORD(v217) = 0;
      sub_2484495E8(__p, v27, &v217);
      unint64_t v28 = a4[1];
      if (v28 >= 8)
      {
        LODWORD(v29) = 0;
        LODWORD(v30) = 0;
        LODWORD(v31) = *a4;
        uint64_t v32 = 8;
        do
        {
          int v33 = v29;
          uint64_t v29 = v32;
          if (v31 >= 8)
          {
            int v34 = 0;
            uint64_t v35 = v33;
            uint64_t v36 = v33 + 2;
            uint64_t v30 = (int)v30;
            unint64_t v37 = 8;
            do
            {
              LODWORD(v213) = 0;
              sub_2484495E8(&v217, 0x14uLL, &v213);
              uint64_t v38 = 0;
              int v39 = 0;
              uint64_t v40 = 4 * v34;
              uint64_t v41 = *((void *)a4 + 8);
              uint64_t v42 = *((void *)a4 + 2);
              uint64_t v43 = *((void *)a4 + 3);
              uint64_t v44 = v40 + v36 * v42;
              uint64_t v45 = v43 + v44;
              uint64_t v46 = v41 + v44;
              uint64_t v47 = v40 + v35 * v42;
              uint64_t v48 = v43 + v47;
              uint64_t v49 = v41 + v47;
              uint64_t v50 = v217;
              uint64_t v51 = v45 + 8;
              uint64_t v52 = v46 + 8;
              do
              {
                uint64_t v53 = 0;
                uint64_t v54 = v39;
                uint64_t v55 = v49;
                uint64_t v56 = v48;
                do
                {
                  uint64_t v57 = 0;
                  float v58 = 0.0;
                  uint64_t v59 = v55;
                  uint64_t v60 = v56;
                  uint64_t v61 = v52;
                  uint64_t v62 = v51;
                  do
                  {
                    for (uint64_t j = 0; j != 12; j += 4)
                      float v58 = v58
                          + vabds_f32((float)(*(float *)(v61 + j) + *(float *)(v62 + j)) * 0.5, (float)(*(float *)(v59 + j) + *(float *)(v60 + j)) * 0.5);
                    ++v57;
                    v62 += v42;
                    v61 += v42;
                    v60 += v42;
                    v59 += v42;
                  }
                  while (v57 != 4);
                  *(float *)(v50 + 4 * v54) = v58;
                  int v39 = v54 + 1;
                  ++v53;
                  v56 += 4;
                  v55 += 4;
                  ++v54;
                }
                while (v53 != 5);
                ++v38;
                v48 += v42;
                v49 += v42;
              }
              while (v38 != 4);
              std::__sort<std::__less<float,float> &,float *>();
              uint64_t v64 = 0;
              float v65 = 0.0;
              do
              {
                float v65 = v65 + *(float *)(v217 + v64);
                v64 += 4;
              }
              while (v64 != 40);
              *((void *)&v217 + 1) = v217;
              operator delete((void *)v217);
              *((float *)__p[0] + v30) = v65 / 10.0;
              int v66 = vcvts_n_s32_f32(v65 / 10.0, 8uLL);
              unsigned int v67 = v66 & ~(v66 >> 31);
              if (v67 >= 0xFF) {
                unsigned int v67 = 255;
              }
              ++*((_DWORD *)v190 + v67);
              ++v30;
              v37 += 8;
              unint64_t v31 = *a4;
              v34 += 8;
            }
            while (v37 <= v31);
            unint64_t v28 = a4[1];
          }
          uint64_t v32 = v29 + 8;
        }
        while (v29 + 8 <= v28);
      }
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      do
      {
        if (*((_DWORD *)v190 + v68) > *((_DWORD *)v190 + v69)) {
          uint64_t v69 = v68;
        }
        ++v68;
      }
      while (v68 != 256);
      float v70 = (float)(int)v69 * 0.0039062;
      if (v70 > 0.15 || v70 <= 0.0)
      {
        BOOL v76 = 0;
        *a8 = 0u;
        a8[1] = 0u;
      }
      else
      {
        float v71 = 0.0;
        unsigned int v72 = 0;
        unint64_t v73 = 0;
        if (v28 >= 8)
        {
          uint64_t v77 = 0;
          unsigned int v74 = 0;
          unint64_t v188 = 0;
          unint64_t v78 = 0;
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          unint64_t v81 = *a4;
          unint64_t v82 = 8;
          v83.i64[0] = 0x3F0000003F000000;
          v83.i64[1] = 0x3F0000003F000000;
          do
          {
            if (v81 >= 8)
            {
              unint64_t v184 = v82;
              uint64_t v84 = 0;
              uint64_t v85 = 0;
              uint64_t v86 = 8;
              do
              {
                uint64_t v87 = v86;
                if (*((float *)__p[0] + v80) <= v70)
                {
                  uint64_t v88 = 0;
                  uint64_t v89 = *((void *)a4 + 8);
                  uint64_t v90 = *((void *)a4 + 2);
                  uint64_t v91 = *((void *)a4 + 3);
                  uint64_t v92 = v84 + v77 * v90;
                  float v93 = 0.0;
                  do
                  {
                    for (uint64_t k = 0; k != 32; k += 16)
                    {
                      float32x4_t v95 = vmulq_f32(vaddq_f32(*(float32x4_t *)(v89 + v92 + k), *(float32x4_t *)(v91 + v92 + k)), v83);
                      float v93 = (float)((float)((float)(v93 + v95.f32[0]) + v95.f32[1]) + v95.f32[2]) + v95.f32[3];
                    }
                    ++v88;
                    v92 += v90;
                  }
                  while (v88 != 8);
                  uint64_t v96 = 0;
                  float v97 = 0.0;
                  do
                  {
                    uint64_t v98 = 0;
                    uint64_t v99 = v96 + v77;
                    do
                    {
                      uint64_t v100 = v98 + v85;
                      float v101 = 0.0;
                      uint64_t v102 = -1;
                      long long v103 = (float *)&unk_2485505D8;
                      do
                      {
                        if ((unint64_t)(v102 + v96) >= 8)
                        {
                          uint64_t v110 = 0;
                          uint64_t v111 = (v99 - v102) * v90;
                          uint64_t v112 = v89 + v111;
                          uint64_t v113 = v91 + v111;
                          uint64_t v114 = 1;
                          do
                          {
                            uint64_t v115 = v110 - 1;
                            if ((unint64_t)(v110 - 1 + v98) >= 8) {
                              uint64_t v115 = v114;
                            }
                            float v101 = v101
                                 + (float)((float)((float)(*(float *)(v112 + 4 * (v115 + v100))
                                                         + *(float *)(v113 + 4 * (v115 + v100)))
                                                 * 0.5)
                                         * v103[v110++]);
                            --v114;
                          }
                          while (v110 != 3);
                        }
                        else
                        {
                          uint64_t v104 = 0;
                          uint64_t v105 = (v102 + v99) * v90;
                          uint64_t v106 = v89 + v105;
                          uint64_t v107 = v91 + v105;
                          uint64_t v108 = 1;
                          do
                          {
                            uint64_t v109 = v104 - 1;
                            if ((unint64_t)(v104 - 1 + v98) >= 8) {
                              uint64_t v109 = v108;
                            }
                            float v101 = v101
                                 + (float)((float)((float)(*(float *)(v106 + 4 * (v109 + v100))
                                                         + *(float *)(v107 + 4 * (v109 + v100)))
                                                 * 0.5)
                                         * v103[v104++]);
                            --v108;
                          }
                          while (v104 != 3);
                        }
                        ++v102;
                        v103 += 3;
                      }
                      while (v102 != 2);
                      float v97 = v97 + fabsf(v101);
                      ++v98;
                    }
                    while (v98 != 8);
                    ++v96;
                  }
                  while (v96 != 8);
                  float v116 = v93 * 0.015625;
                  float v117 = v97 * 0.015625;
                  if ((unint64_t)v79 >= v78)
                  {
                    uint64_t v118 = ((char *)v79 - (char *)v74) >> 3;
                    unint64_t v119 = v118 + 1;
                    if ((unint64_t)(v118 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    if ((uint64_t)(v78 - (void)v74) >> 2 > v119) {
                      unint64_t v119 = (uint64_t)(v78 - (void)v74) >> 2;
                    }
                    if (v78 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v120 = v119;
                    }
                    if (v120)
                    {
                      unint64_t v120 = (unint64_t)sub_2483F04AC(v120);
                      uint64_t v79 = v188;
                    }
                    else
                    {
                      uint64_t v121 = 0;
                    }
                    uint64_t v122 = (float *)(v120 + 8 * v118);
                    *uint64_t v122 = v117;
                    v122[1] = v116;
                    uint64_t v123 = v122;
                    while (v79 != v74)
                    {
                      uint64_t v124 = *((void *)v79 - 1);
                      v79 -= 2;
                      *((void *)v123 - 1) = v124;
                      v123 -= 2;
                    }
                    unint64_t v78 = v120 + 8 * v121;
                    uint64_t v79 = v122 + 2;
                    if (v74) {
                      operator delete(v74);
                    }
                    unsigned int v74 = v123;
                  }
                  else
                  {
                    *uint64_t v79 = v117;
                    v79[1] = v116;
                    v79 += 2;
                  }
                  unint64_t v81 = *a4;
                  unint64_t v188 = v79;
                  v83.i64[0] = 0x3F0000003F000000;
                  v83.i64[1] = 0x3F0000003F000000;
                }
                ++v80;
                uint64_t v86 = v87 + 8;
                v84 += 32;
                uint64_t v85 = v87;
              }
              while (v87 + 8 <= v81);
              unint64_t v28 = a4[1];
              unint64_t v82 = v184;
            }
            v82 += 8;
            v77 += 8;
          }
          while (v82 <= v28);
          if (v74 == v79)
          {
            uint64_t v75 = ((char *)v79 - (char *)v74) >> 3;
            unsigned int v72 = 0;
            unint64_t v73 = 0;
          }
          else
          {
            float v71 = 0.0;
            unsigned int v125 = v74;
            do
            {
              float v126 = *v125;
              v125 += 2;
              float v71 = v71 + v126;
            }
            while (v125 != v79);
            uint64_t v75 = ((char *)v79 - (char *)v74) >> 3;
            unsigned int v72 = 0;
            unint64_t v73 = 0;
            if (v79 != v74)
            {
              if ((char *)v79 - (char *)v74 < 0) {
                sub_2483E92E8();
              }
              uint64_t v127 = (float *)sub_2483F04AC(((char *)v79 - (char *)v74) >> 3);
              uint64_t v128 = v127;
              unsigned int v72 = v127;
              if (v79 != v74)
              {
                long long v185 = v127;
                memmove(v127, v74, (char *)v79 - (char *)v74);
                unsigned int v72 = v185;
              }
              unint64_t v73 = (float *)((char *)v128 + (char *)v79 - (char *)v74);
            }
          }
        }
        else
        {
          unsigned int v74 = 0;
          unint64_t v188 = 0;
          uint64_t v75 = 0;
        }
        float v177 = v26;
        uint64_t v129 = 0;
        int64x2_t v130 = vdupq_lane_s64(COERCE__INT64((float)(v71 / (float)(unint64_t)v75)), 0);
        do
        {
          *(long long *)((char *)&v195 + v129) = (__int128)v130;
          v129 += 16;
        }
        while (v129 != 64);
        long long v191 = v195;
        long long v192 = v196;
        long long v193 = v197;
        long long v194 = v198;
        unint64_t v131 = v72;
        uint64_t v180 = v73;
        double v132 = sub_24847DE58(v72, v73, (uint64_t)&v191, (double *)&v213, 0);
        char v182 = 0;
        long long v208 = v213;
        long long v209 = v214;
        long long v210 = v215;
        long long v211 = v216;
        long long v204 = v213;
        long long v205 = v214;
        double v133 = 0.0;
        double v134 = 1.0;
        uint64_t v135 = 1;
        BOOL v136 = 1;
        double v137 = 0.0;
        long long v206 = v215;
        long long v207 = v216;
        double v138 = 0.0;
        do
        {
          if (v136)
          {
            uint64_t v139 = 0;
            double v140 = 0.0;
            do
            {
              float64x2_t v141 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v139), *(float64x2_t *)((char *)&v213 + v139));
              double v140 = v140 + v141.f64[0] + v141.f64[1];
              v139 += 16;
            }
            while (v139 != 64);
            if (v140 <= 0.0)
            {
              uint64_t v142 = 0;
              long long v204 = v213;
              long long v205 = v214;
              long long v206 = v215;
              long long v207 = v216;
              double v140 = 0.0;
              do
              {
                float64x2_t v143 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v142), *(float64x2_t *)((char *)&v213 + v142));
                double v140 = v140 + v143.f64[0] + v143.f64[1];
                v142 += 16;
              }
              while (v142 != 64);
            }
            double v137 = -v140;
            uint64_t v144 = 0;
            double v138 = 0.0;
            do
            {
              double v138 = v138 + *(double *)((char *)&v204 + v144) * *(double *)((char *)&v204 + v144);
              v144 += 8;
            }
            while (v144 != 64);
            uint64_t v145 = 0;
            double v146 = 0.0001 / sqrt(v138);
            do
            {
              *(float64x2_t *)&v199[v145] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + v145), v146);
              v145 += 16;
            }
            while (v145 != 64);
            double v186 = v146;
            for (uint64_t m = 0; m != 64; m += 16)
              *(long long *)((char *)&v200 + m) = (__int128)vaddq_f64(*(float64x2_t *)((char *)&v191 + m), *(float64x2_t *)&v199[m]);
            sub_24847DE58(v131, v180, (uint64_t)&v200, (double *)v212, 0);
            for (uint64_t n = 0; n != 4; ++n)
              *(long long *)((char *)&v200 + n * 16) = (__int128)vsubq_f64(*(float64x2_t *)((char *)&v213 + n * 16), (float64x2_t)v212[n]);
            uint64_t v149 = 0;
            double v150 = 0.0;
            do
            {
              float64x2_t v151 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v149), *(float64x2_t *)((char *)&v200 + v149));
              double v150 = v150 + v151.f64[0] + v151.f64[1];
              v149 += 16;
            }
            while (v149 != 64);
            double v133 = v150 / v186;
          }
          double v152 = v133 + v134 * v138;
          if (v152 <= 0.0)
          {
            double v152 = v134 * v138;
            double v134 = v134 - v133 / v138;
          }
          for (iuint64_t i = 0; ii != 64; ii += 16)
            *(float64x2_t *)&v199[ii] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + ii), -v137 / v152);
          double v187 = -v137 / v152;
          for (juint64_t j = 0; jj != 64; jj += 16)
            *(long long *)((char *)&v200 + jj) = (__int128)vaddq_f64(*(float64x2_t *)((char *)&v191 + jj), *(float64x2_t *)&v199[jj]);
          long long v217 = v200;
          long long v218 = v201;
          long long v219 = v202;
          long long v220 = v203;
          double v155 = sub_24847DE58(v131, v180, (uint64_t)&v217, (double *)v212, 0);
          double v156 = (v155 - v132 + v155 - v132) / (v137 * v187);
          BOOL v136 = v156 >= 0.0;
          if (v156 >= 0.0)
          {
            uint64_t v157 = 0;
            long long v191 = v217;
            long long v192 = v218;
            long long v193 = v219;
            long long v194 = v220;
            long long v208 = v213;
            long long v209 = v214;
            long long v210 = v215;
            long long v211 = v216;
            long long v215 = v212[2];
            long long v216 = v212[3];
            double v158 = 0.0;
            long long v213 = v212[0];
            long long v214 = v212[1];
            do
            {
              double v158 = v158 + *(double *)((char *)&v213 + v157) * *(double *)((char *)&v213 + v157);
              v157 += 8;
            }
            while (v157 != 64);
            if (v158 <= 1.0e-16) {
              break;
            }
            ++v182;
            double v132 = v155;
          }
          if (v156 >= 0.25)
          {
            if (v156 > 0.75)
            {
              if (v134 * 0.25 >= 1.0e-15) {
                double v134 = v134 * 0.25;
              }
              else {
                double v134 = 1.0e-15;
              }
            }
          }
          else if (v134 * 4.0 <= 1.0e15)
          {
            double v134 = v134 * 4.0;
          }
          else
          {
            double v134 = 1.0e15;
          }
          if ((v182 & 7) != 0)
          {
            if (v156 >= 0.0)
            {
              for (kuint64_t k = 0; kk != 64; kk += 16)
                *(long long *)((char *)&v200 + kk) = (__int128)vsubq_f64(*(float64x2_t *)((char *)&v208 + kk), *(float64x2_t *)((char *)&v213 + kk));
              uint64_t v160 = 0;
              double v161 = 0.0;
              do
              {
                float64x2_t v162 = vmulq_f64(*(float64x2_t *)((char *)&v200 + v160), *(float64x2_t *)((char *)&v213 + v160));
                double v161 = v161 + v162.f64[0] + v162.f64[1];
                v160 += 16;
              }
              while (v160 != 64);
              uint64_t v163 = 0;
              double v164 = v161 / v137;
              do
              {
                *(float64x2_t *)&v199[v163] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + v163), v164);
                v163 += 16;
              }
              while (v163 != 64);
              for (muint64_t m = 0; mm != 64; mm += 16)
                *(long long *)((char *)&v200 + mm) = (__int128)vaddq_f64(*(float64x2_t *)&v199[mm], *(float64x2_t *)((char *)&v213 + mm));
              long long v204 = v200;
              long long v205 = v201;
              long long v206 = v202;
              long long v207 = v203;
            }
          }
          else
          {
            long long v204 = v213;
            long long v205 = v214;
            long long v206 = v215;
            long long v207 = v216;
            double v134 = 1.0;
          }
          ++v135;
        }
        while (v135 != 41);
        long long v195 = v191;
        long long v196 = v192;
        long long v197 = v193;
        long long v198 = v194;
        long long v217 = v191;
        long long v218 = v192;
        long long v219 = v193;
        long long v220 = v194;
        float v166 = sub_24847DE58(v131, v180, (uint64_t)&v195, (double *)&v217, 1)
             / (double)(unint64_t)(((char *)v188 - (char *)v74) >> 3);
        if (v166 <= 0.001)
        {
          uint64_t v169 = 0;
          uint64_t v170 = (float64x2_t *)&v195;
          long long v167 = a8;
          float v168 = v177;
          do
          {
            float64x2_t v172 = *v170;
            float64x2_t v171 = v170[1];
            v170 += 2;
            a8[v169++] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8((int8x16_t)v172, (int8x16_t)vcltzq_f64(v172))), (float64x2_t)vbicq_s8((int8x16_t)v171, (int8x16_t)vcltzq_f64(v171)));
          }
          while (v169 != 2);
        }
        else
        {
          long long v167 = a8;
          *a8 = 0u;
          a8[1] = 0u;
          float v168 = v177;
        }
        if (v131) {
          operator delete(v131);
        }
        for (nuint64_t n = 0; nn != 2; ++nn)
          v167[nn] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)&v167[nn]), v168 * 1.4)), vmulq_n_f64(vcvt_hight_f64_f32((float32x4_t)v167[nn]), v168 * 1.4));
        uint64_t v174 = 0;
        do
        {
          float v175 = fabsf(*(float *)((char *)v167 + v174));
          BOOL v76 = v175 > 0.001;
          BOOL v176 = v175 > 0.001 || v174 == 28;
          v174 += 4;
        }
        while (!v176);
        if (v74) {
          operator delete(v74);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (!v76) {
        *(void *)(a7 + 24) &= ~1uLL;
      }
    }
  }
  else
  {
    float v183 = cbrtf(0.0037931);
    for (unint64_t i1 = 0; i1 != 8; ++i1)
    {
      float v13 = (float)((float)((float)i1 / 6.0) + (float)((float)i1 / 6.0)) - v183;
      float v14 = fmaxf((float)(v13 * (float)(v13 * v13)) + 0.0037931, 0.0);
      float v181 = (float)((float)(10.0 / v9) * 2252.0) * (float)(864000000.0 / (float)(unint64_t)(a6 * a5));
      float v15 = (float)(0.18 / v181)
          * sqrtf((float)((float)(v181 * (float)(v14 / 0.18)) + 9.0)+ (float)((float)((float)(v181 * (float)(v14 / 0.18)) * 0.005)* (float)((float)(v181 * (float)(v14 / 0.18)) * 0.005)));
      float v16 = cbrtf(v14 + -0.0037931);
      float v17 = (float)(v15 * (float)(0.33333 / (float)(v16 * v16))) / 0.35157;
      if (v17 <= 1.0) {
        float v18 = v17;
      }
      else {
        float v18 = 1.0;
      }
      if (v17 >= 0.0) {
        float v19 = v18;
      }
      else {
        float v19 = 0.0;
      }
      *((float *)v190 + i1) = v19;
    }
    long long v20 = v190[1];
    *a8 = v190[0];
    a8[1] = v20;
  }
}

void sub_24845E554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24845E5A0(int a1, char a2, uint64_t a3, char a4, unsigned int *a5)
{
  if (a4) {
    return 0;
  }
  unint64_t v6 = *(unsigned int *)(a3 + 268);
  if (v6 == 1 || a2 != 0) {
    return 0;
  }
  if (v6 == 2 && *(_DWORD *)(a3 + 12) == 0)
  {
    if (a1 > 3)
    {
      sub_2483F0C3C((uint64_t)v39, (((unint64_t)*a5 + 1) >> 1) + 8, (((unint64_t)a5[1] + 1) >> 1) + 8);
      uint64_t v8 = v40;
      if (v40) {
        return v8;
      }
      sub_2483F0E78((uint64_t)v45, (uint64_t)v39);
      uint64_t v23 = 0;
      int32x2_t v24 = vadd_s32(v45[0], (int32x2_t)0x700000007);
      do
      {
        v45[v23] = v24;
        v23 += 5;
      }
      while (v23 != 15);
      unint64_t v25 = 0;
      while (1)
      {
        uint64_t v8 = sub_24846F180(&a5[v25 / 4], (unsigned int *)&v45[v25 / 8]);
        if (v8) {
          break;
        }
        v25 += 40;
        if (v25 == 120)
        {
          sub_2483F7944((uint64_t)a5, (uint64_t)v45);
          uint64_t v8 = 0;
          break;
        }
      }
      for (uint64_t i = 13; i != -2; i -= 5)
        sub_2483E8DDC((uint64_t *)&v45[i]);
      if (!v40)
      {
        for (uint64_t j = 104; j != -16; j -= 40)
          sub_2483E8DDC((uint64_t *)&v39[j]);
      }
    }
    else
    {
      sub_2483F0C3C((uint64_t)v45, (((unint64_t)*a5 + 1) >> 1) + 8, (((unint64_t)a5[1] + 1) >> 1) + 8);
      uint64_t v8 = v46;
      if (v46) {
        return v8;
      }
      sub_2483F0E78((uint64_t)v49, (uint64_t)v45);
      uint64_t v12 = 0;
      int32x2_t v13 = vadd_s32(v49[0], (int32x2_t)0x700000007);
      do
      {
        v49[v12] = v13;
        v12 += 5;
      }
      while (v12 != 15);
      sub_2483F0C3C((uint64_t)v42, *a5, a5[1]);
      uint64_t v8 = v44;
      if (!v44)
      {
        sub_2483F0E78((uint64_t)v41, (uint64_t)v42);
        sub_24840F23C((uint64_t)v39);
        v47[1] = 0;
        v47[0] = 0;
        *(void *)&long long v14 = v41[0];
        *((void *)&v14 + 1) = v41[1];
        long long v48 = v14;
        sub_24840F1C8((uint64_t)a5, (uint64_t)v47, (uint64_t)v41, (uint64_t)v39);
        sub_2483EA250((uint64_t)&v36, *a5, a5[1]);
        uint64_t v8 = v38;
        if (!v38)
        {
          uint64_t v37 = 0;
          __asm { FMOV            V0.2S, #1.0 }
          sub_248437BC4();
        }
        for (uint64_t k = 26; k != -4; k -= 10)
          sub_2483E8DDC((uint64_t *)&v41[k]);
        if (!v44)
        {
          for (uint64_t m = 104; m != -16; m -= 40)
            sub_2483E8DDC((uint64_t *)((char *)v42 + m));
        }
      }
      for (uint64_t n = 13; n != -2; n -= 5)
        sub_2483E8DDC((uint64_t *)&v49[n]);
      if (!v46)
      {
        for (iuint64_t i = 13; ii != -2; ii -= 5)
          sub_2483E8DDC((uint64_t *)&v45[ii]);
      }
    }
    if (v8) {
      return v8;
    }
    goto LABEL_63;
  }
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  sub_2483F0C3C((uint64_t)v39, (v6 - 1 + *a5) / v6 + 8, (v6 - 1 + a5[1]) / v6 + 8);
  if (v40)
  {
    unsigned int v46 = v40;
  }
  else
  {
    sub_2483F0E78((uint64_t)v49, (uint64_t)v39);
    sub_2483F7944((uint64_t)v42, (uint64_t)v49);
    for (juint64_t j = 13; jj != -2; jj -= 5)
      sub_2483E8DDC((uint64_t *)&v49[jj]);
    uint64_t v29 = 0;
    int32x2_t v30 = vadd_s32(*(int32x2_t *)&v42[0], (int32x2_t)0x700000007);
    do
    {
      *(int32x2_t *)((char *)v42 + v29) = v30;
      v29 += 40;
    }
    while (v29 != 120);
    for (kuint64_t k = 0; kk != 30; kk += 10)
      sub_2484DBEEC(&a5[kk], v6, (uint64_t)v42 + kk * 4);
    unsigned int v46 = 0;
    sub_2483F0E78((uint64_t)v45, (uint64_t)v42);
    if (!v40)
    {
      for (muint64_t m = 104; mm != -16; mm -= 40)
        sub_2483E8DDC((uint64_t *)&v39[mm]);
    }
  }
  for (nuint64_t n = 104; nn != -16; nn -= 40)
    sub_2483E8DDC((uint64_t *)((char *)v42 + nn));
  uint64_t v8 = v46;
  if (!v46)
  {
    sub_2483F0E78((uint64_t)v39, (uint64_t)v45);
    sub_2483F7944((uint64_t)a5, (uint64_t)v39);
    for (uint64_t i1 = 104; i1 != -16; i1 -= 40)
      sub_2483E8DDC((uint64_t *)&v39[i1]);
    if (!v46)
    {
      for (uint64_t i2 = 13; i2 != -2; i2 -= 5)
        sub_2483E8DDC((uint64_t *)&v45[i2]);
    }
LABEL_63:
    if (!*(_DWORD *)(a3 + 12)) {
      sub_2484DBCEC(a5);
    }
    return 0;
  }
  return v8;
}

void sub_24845F4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v67 = STACK[0x408];
  STACK[0x408] = 0;
  if (v67)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v67 - 24));
    free(*(void **)(v67 - 32));
  }
  if (!LODWORD(STACK[0x448]))
  {
    unint64_t v68 = STACK[0x438];
    STACK[0x438] = 0;
    if (v68)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v68 - 24));
      free(*(void **)(v68 - 32));
    }
  }
  unint64_t v69 = STACK[0x468];
  STACK[0x468] = 0;
  if (v69)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v69 - 24));
    free(*(void **)(v69 - 32));
  }
  if (!LODWORD(STACK[0x4A8]))
  {
    unint64_t v70 = STACK[0x498];
    STACK[0x498] = 0;
    if (v70)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v70 - 24));
      free(*(void **)(v70 - 32));
    }
  }
  unint64_t v71 = STACK[0x4C8];
  STACK[0x4C8] = 0;
  if (v71)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v71 - 24));
    free(*(void **)(v71 - 32));
  }
  if (!LODWORD(STACK[0x508]))
  {
    unint64_t v72 = STACK[0x4F8];
    STACK[0x4F8] = 0;
    if (v72)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v72 - 24));
      free(*(void **)(v72 - 32));
    }
  }
  unint64_t v73 = STACK[0x528];
  STACK[0x528] = 0;
  if (v73)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v73 - 24));
    free(*(void **)(v73 - 32));
  }
  if (!LODWORD(STACK[0x568]))
  {
    unint64_t v74 = STACK[0x558];
    STACK[0x558] = 0;
    if (v74)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v74 - 24));
      free(*(void **)(v74 - 32));
    }
  }
  unint64_t v75 = STACK[0x588];
  STACK[0x588] = 0;
  if (v75)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v75 - 24));
    free(*(void **)(v75 - 32));
  }
  if (!LODWORD(STACK[0x5C8]))
  {
    unint64_t v76 = STACK[0x5B8];
    STACK[0x5B8] = 0;
    if (v76)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v76 - 24));
      free(*(void **)(v76 - 32));
    }
  }
  unint64_t v86 = STACK[0x5E8];
  STACK[0x5E8] = 0;
  if (v86)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v86 - 24));
    free(*(void **)(v86 - 32));
  }
  if (!LODWORD(STACK[0x628]))
  {
    unint64_t v77 = STACK[0x618];
    STACK[0x618] = 0;
    if (v77)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v77 - 24));
      free(*(void **)(v77 - 32));
    }
  }
  if (v64)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v64 - 24));
    free(*(void **)(v64 - 32));
  }
  if (!LODWORD(STACK[0x658]))
  {
    unint64_t v78 = STACK[0x648];
    STACK[0x648] = 0;
    if (v78)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v78 - 24));
      free(*(void **)(v78 - 32));
    }
  }
  if (!LODWORD(STACK[0x688]))
  {
    unint64_t v79 = STACK[0x678];
    STACK[0x678] = 0;
    if (v79)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
      free(*(void **)(v79 - 32));
    }
  }
  unint64_t v80 = STACK[0x6A8];
  STACK[0x6A8] = 0;
  if (v80)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v80 - 24));
    free(*(void **)(v80 - 32));
  }
  if (!LODWORD(STACK[0x6E0]))
  {
    unint64_t v81 = STACK[0x6D0];
    STACK[0x6D0] = 0;
    if (v81)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v81 - 24));
      free(*(void **)(v81 - 32));
    }
  }
  if (a16)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a16 - 24));
    free(*(void **)(a16 - 32));
  }
  if (!a24 && a22)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a22 - 24));
    free(*(void **)(a22 - 32));
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (!a26 && a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
  }
  if (a32)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a32 - 24));
    free(*(void **)(a32 - 32));
  }
  if (!a39 && a37)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a37 - 24));
    free(*(void **)(a37 - 32));
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a64 + i));
  if (!LODWORD(STACK[0x2A8]))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x230] + j));
  }
  for (uint64_t k = 104; k != -16; k -= 40)
    sub_2483E8DDC((uint64_t *)(v65 - 216 + k));
  if (!LODWORD(STACK[0x328]))
  {
    for (uint64_t m = 104; m != -16; m -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x2B0] + m));
  }
  _Unwind_Resume(a1);
}

void sub_24845FAF8(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4 = a1->i64[0];
  uint64_t v5 = a1->i64[1];
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - a1->i64[0]) >> 4);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      uint64_t v28 = v4 + 176 * a2;
      while (v5 != v28)
      {
        v5 -= 176;
        sub_24845C404(v5);
      }
      a1->i64[1] = v28;
    }
  }
  else
  {
    uint64_t v8 = a1[1].i64[0];
    if (0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 4) >= v7)
    {
      unint64_t v29 = v5 + 176 * v7;
      uint64_t v30 = 176 * a2 - 16 * ((v5 - a1->i64[0]) >> 4);
      do
      {
        sub_2484679A8(v5);
        v5 += 176;
        v30 -= 176;
      }
      while (v30);
      a1->i64[1] = v29;
    }
    else
    {
      if (a2 > 0x1745D1745D1745DLL) {
        sub_2483E92E8();
      }
      unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 4);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v11 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v35 = a1 + 1;
      if (v11 > 0x1745D1745D1745DLL) {
        sub_2483E9338();
      }
      uint64_t v12 = 176 * v11;
      int32x2_t v13 = (char *)operator new(176 * v11);
      uint64_t v14 = (uint64_t)&v13[176 * v6];
      uint64_t v32 = v13;
      v33.i64[0] = v14;
      v33.i64[1] = v14;
      int v34 = &v13[v12];
      uint64_t v15 = 176 * a2;
      float v16 = &v13[176 * a2];
      unint64_t v17 = v15 - 176 * v6;
      do
      {
        sub_2484679A8(v14);
        v14 += 176;
        v17 -= 176;
      }
      while (v17);
      v33.i64[1] = (uint64_t)v16;
      uint64_t v19 = a1->i64[0];
      unint64_t v18 = a1->u64[1];
      uint64_t v20 = v33.i64[0];
      if (v18 == a1->i64[0])
      {
        int64x2_t v27 = vdupq_n_s64(v18);
      }
      else
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = v20 + v21;
          uint64_t v23 = v18 + v21;
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *(void *)(v22 - 160) = 0;
          *(_OWORD *)(v22 - 176) = *(_OWORD *)(v18 + v21 - 176);
          *(void *)(v22 - 160) = *(void *)(v18 + v21 - 160);
          *(void *)(v23 - 176) = 0;
          *(void *)(v23 - 168) = 0;
          *(void *)(v23 - 160) = 0;
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(void *)(v22 - 136) = 0;
          *(_OWORD *)(v22 - 152) = *(_OWORD *)(v18 + v21 - 152);
          *(void *)(v22 - 136) = *(void *)(v18 + v21 - 136);
          *(void *)(v23 - 152) = 0;
          *(void *)(v23 - 144) = 0;
          *(void *)(v23 - 136) = 0;
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *(void *)(v22 - 112) = 0;
          *(_OWORD *)(v22 - 128) = *(_OWORD *)(v18 + v21 - 128);
          *(void *)(v22 - 112) = *(void *)(v18 + v21 - 112);
          *(void *)(v23 - 120) = 0;
          *(void *)(v23 - 112) = 0;
          *(void *)(v23 - 128) = 0;
          char v24 = *(unsigned char *)(v18 + v21 - 104);
          *(void *)(v22 - 88) = 0;
          *(void *)(v22 - 80) = 0;
          *(void *)(v22 - 96) = 0;
          *(unsigned char *)(v22 - 104) = v24;
          *(_OWORD *)(v22 - 96) = *(_OWORD *)(v18 + v21 - 96);
          *(void *)(v22 - 80) = *(void *)(v18 + v21 - 80);
          *(void *)(v23 - 96) = 0;
          *(void *)(v23 - 88) = 0;
          *(void *)(v23 - 80) = 0;
          *(void *)(v22 - 72) = &unk_26FC658E8;
          long long v25 = *(_OWORD *)(v18 + v21 - 48);
          uint64_t v26 = *(void *)(v18 + v21 - 32);
          *(_OWORD *)(v22 - 64) = *(_OWORD *)(v18 + v21 - 64);
          *(_OWORD *)(v22 - 48) = v25;
          *(void *)(v22 - 32) = v26;
          *(void *)(v22 - 24) = 0;
          *(void *)(v22 - 16) = 0;
          *(void *)(v22 - 8) = 0;
          *(_OWORD *)(v22 - 24) = *(_OWORD *)(v18 + v21 - 24);
          *(void *)(v22 - 8) = *(void *)(v18 + v21 - 8);
          *(void *)(v23 - 24) = 0;
          *(void *)(v23 - 16) = 0;
          *(void *)(v23 - 8) = 0;
          v21 -= 176;
        }
        while (v18 + v21 != v19);
        v20 += v21;
        int64x2_t v27 = *a1;
        float v16 = (char *)v33.i64[1];
      }
      a1->i64[0] = v20;
      a1->i64[1] = (uint64_t)v16;
      int64x2_t v33 = v27;
      unint64_t v31 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v34;
      int v34 = v31;
      uint64_t v32 = (char *)v27.i64[0];
      sub_248467A50((uint64_t)&v32);
    }
  }
}

void sub_24845FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_24845FDE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v59 = (void *)a5;
  uint64_t v60 = a4;
  sub_2483EA350((uint64_t)&v47, *(void *)(a5 + 56), *(void *)(a5 + 64), 0);
  uint64_t v7 = v58;
  if (!v58)
  {
    uint64_t v40 = a2;
    uint64_t v41 = a1;
    *(_OWORD *)unint64_t v72 = v51;
    uint64_t v8 = v49;
    uint64_t v9 = v50;
    uint64_t v10 = v53;
    *(void *)&v72[16] = v52;
    uint64_t v11 = v54;
    *(void *)&__src[32] = v57;
    uint64_t v49 = 0;
    uint64_t v53 = 0;
    *(_OWORD *)__src = v55;
    *(_OWORD *)&__src[16] = v56;
    long long v12 = v47;
    *(void *)(a5 + 1120) = v48;
    uint64_t v13 = *(void *)(a5 + 1128);
    *(void *)(a5 + 1128) = v8;
    *(_OWORD *)(a5 + 1104) = v12;
    if (v13)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v13 - 24));
      free(*(void **)(v13 - 32));
    }
    *(void *)(a5 + 1136) = v9;
    *(void *)(a5 + 1160) = *(void *)&v72[16];
    *(_OWORD *)(a5 + 1144) = *(_OWORD *)v72;
    uint64_t v14 = *(void *)(a5 + 1168);
    *(void *)(a5 + 1168) = v10;
    if (v14)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v14 - 24));
      free(*(void **)(v14 - 32));
    }
    *(void *)(a5 + 1176) = v11;
    long long v15 = *(_OWORD *)&__src[16];
    *(_OWORD *)(a5 + 1184) = *(_OWORD *)__src;
    *(_OWORD *)(a5 + 1200) = v15;
    *(void *)(a5 + 1216) = *(void *)&__src[32];
    uint64_t v16 = *(unsigned int *)(a5 + 156);
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = *(unsigned int *)(a5 + 152);
      if (v18 <= 1) {
        size_t v19 = 1;
      }
      else {
        size_t v19 = *(unsigned int *)(a5 + 152);
      }
      unint64_t v20 = *(unsigned int *)(a5 + 152);
      do
      {
        if (v20)
        {
          memset((void *)(*(void *)(a5 + 176) + *(void *)(a5 + 168) * v17), 1, v19);
          unint64_t v20 = v18;
        }
        ++v17;
      }
      while (v16 != v17);
    }
    sub_248403294(0, (unsigned int *)(a5 + 1064));
    uint64_t v21 = v59;
    sub_24845C398(v59 + 528);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21[649] - v21[648]) >> 4) > (unint64_t)((uint64_t)(v21[529] - v21[528]) >> 3)) {
      sub_248401C9C();
    }
    memset(&v72[4], 0, 208);
    int v73 = 0;
    memset(&v71[4], 0, 108);
    int v70 = 0;
    memset(&v69[4], 0, 208);
    *(_DWORD *)__src = 0;
    *(_OWORD *)&__src[4] = *(_OWORD *)v72;
    *(_OWORD *)&__src[20] = *(_OWORD *)&v72[16];
    *(_OWORD *)&__src[84] = *(_OWORD *)&v72[80];
    *(_OWORD *)&__src[68] = *(_OWORD *)&v72[64];
    *(_OWORD *)&__src[52] = *(_OWORD *)&v72[48];
    *(_OWORD *)&__src[36] = *(_OWORD *)&v72[32];
    *(_OWORD *)&__src[148] = *(_OWORD *)&v72[144];
    *(_OWORD *)&__src[132] = *(_OWORD *)&v72[128];
    *(_OWORD *)&__src[116] = *(_OWORD *)&v72[112];
    *(_OWORD *)&__src[100] = *(_OWORD *)&v72[96];
    *(void *)&__src[212] = 0;
    *(_OWORD *)&__src[196] = *(_OWORD *)&v72[192];
    *(_OWORD *)&__src[180] = *(_OWORD *)&v72[176];
    *(_OWORD *)&__src[164] = *(_OWORD *)&v72[160];
    *(_OWORD *)&v64[48] = *(_OWORD *)&v71[48];
    *(_OWORD *)&v64[64] = *(_OWORD *)&v71[64];
    *(_OWORD *)&v64[80] = *(_OWORD *)&v71[80];
    *(_OWORD *)&v64[96] = 0u;
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v71;
    *(_OWORD *)&v64[16] = *(_OWORD *)&v71[16];
    *(_OWORD *)&v64[32] = *(_OWORD *)&v71[32];
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v69;
    *(_OWORD *)&v65[16] = *(_OWORD *)&v69[16];
    *(_OWORD *)&v65[64] = *(_OWORD *)&v69[64];
    *(_OWORD *)&v65[80] = *(_OWORD *)&v69[80];
    *(_OWORD *)&v65[32] = *(_OWORD *)&v69[32];
    *(_OWORD *)&v65[48] = *(_OWORD *)&v69[48];
    *(_OWORD *)&v65[128] = *(_OWORD *)&v69[128];
    *(_OWORD *)&v65[144] = *(_OWORD *)&v69[144];
    *(_OWORD *)&v65[96] = *(_OWORD *)&v69[96];
    *(_OWORD *)&v65[112] = *(_OWORD *)&v69[112];
    *(void *)&v65[208] = 0;
    *(_OWORD *)&v65[176] = *(_OWORD *)&v69[176];
    *(_OWORD *)&v65[192] = *(_OWORD *)&v69[192];
    *(_OWORD *)&v65[160] = *(_OWORD *)&v69[160];
    char v66 = 0;
    sub_248467264(&__dst, __src);
    sub_248403910((uint64_t)__src);
    uint64_t v22 = v41[19] - v41[18];
    uint64_t v23 = 0x100000000;
    if (*(_DWORD *)(v40 + 32) == 2) {
      uint64_t v23 = 1;
    }
    _ZF = v22 == 48;
    BOOL v25 = v22 != 48;
    if (_ZF) {
      uint64_t v23 = 0;
    }
    uint64_t v44 = v23;
    int v45 = 2 * v25;
    sub_2483F23D8(&v43, 0xC0uLL);
    uint64_t v26 = 0;
    uint64_t v27 = v41[18];
    uint64_t v28 = v41[12];
    unint64_t v29 = (char *)v43;
    while (1)
    {
      uint64_t v30 = 0;
      unint64_t v31 = (int *)(v28 + 268 * *(unsigned int *)(v27 + 48 * *((int *)&v44 + v26) + 12));
      v67.f32[v26] = 2040.0 / (float)*v31;
      uint64_t v32 = v29;
      do
      {
        uint64_t v33 = 0;
        int v34 = v32;
        do
        {
          *int v34 = v31[v33];
          v34 += 8;
          ++v33;
        }
        while (v33 != 8);
        ++v30;
        ++v32;
        v31 += 8;
      }
      while (v30 != 8);
      ++v26;
      v29 += 256;
      if (v26 == 3)
      {
        sub_248486AA4(a5 + 208, (uint64_t)&v67);
        __asm { FMOV            V1.2S, #1.0 }
        float32x2_t v61 = vdiv_f32(_D1, v67);
        float v62 = 1.0 / v68;
        memset(&__src[8], 0, 212);
        *(_DWORD *)__src = 7;
        memset(&v64[4], 0, 108);
        memset(&v65[4], 0, 212);
        char v66 = 0;
        operator new();
      }
    }
  }
  sub_24842D240((uint64_t)&v47);
  return v7;
}

void sub_2484610A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = 0;
  while (1)
  {
    unint64_t v69 = *(void **)(&a67 + v68 + 48);
    if (v69)
    {
      *(void *)(&a67 + v68 + 56) = v69;
      operator delete(v69);
    }
    v68 -= 24;
    if (v68 == -72)
    {
      for (uint64_t i = 104; i != -16; i -= 40)
        sub_2483E8DDC((uint64_t *)((char *)&STACK[0x478] + i));
      if (!LODWORD(STACK[0x638]))
      {
        for (uint64_t j = 104; j != -16; j -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&STACK[0x5C0] + j));
      }
      if (__p) {
        operator delete(__p);
      }
      if (a36) {
        operator delete(a36);
      }
      STACK[0x230] = (unint64_t)&a41;
      sub_248403688((void ***)&STACK[0x230]);
      sub_24842D240((uint64_t)&a44);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_2484611E0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, long long *a5, uint64_t *a6, void *a7, uint64_t a8, void *a9)
{
  long long v15 = a9;
  uint64_t v206 = *MEMORY[0x263EF8340];
  float64x2_t v151 = (float32x2_t *)(a8 + 4580);
  float v177 = a3;
  int v16 = *(unsigned __int8 *)(a8 + 4208);
  uint64_t v145 = a8 + 4208;
  int v148 = *(unsigned __int8 *)(a8 + 4209);
  uint64_t v149 = (float *)(a8 + 1104);
  uint64_t v17 = *(long long ***)(a8 + 5040);
  unint64_t v18 = *(long long ***)(a8 + 5048);
  if (v17 != v18)
  {
    *(_DWORD *)(a8 + 1432) = *(_DWORD *)(a8 + 5032);
    sub_2484682DC(a8 + 1440, v17, v18, 0xF0B7672A07A44C6BLL * (v18 - v17));
    sub_248467FE0((char *)(a8 + 1464), *(char **)(a8 + 5064), *(void *)(a8 + 5072), (uint64_t)(*(void *)(a8 + 5072) - *(void *)(a8 + 5064)) >> 3);
    sub_248468478((char *)(a8 + 1488), *(char **)(a8 + 5088), *(void *)(a8 + 5096), (uint64_t)(*(void *)(a8 + 5096) - *(void *)(a8 + 5088)) >> 5);
    sub_248467FE0((char *)(a8 + 1512), *(char **)(a8 + 5112), *(void *)(a8 + 5120), (uint64_t)(*(void *)(a8 + 5120) - *(void *)(a8 + 5112)) >> 3);
    sub_248467FE0((char *)(a8 + 1536), *(char **)(a8 + 5136), *(void *)(a8 + 5144), (uint64_t)(*(void *)(a8 + 5144) - *(void *)(a8 + 5136)) >> 3);
  }
  uint64_t v150 = (uint64_t)a3;
  int v141 = v16;
  if (!v16)
  {
    int v54 = *(_DWORD *)(a8 + 4592);
    if (v54 <= 3)
    {
      long long v55 = a3;
      if (*(void *)(a8 + 5040) == *(void *)(a8 + 5048))
      {
        long long v56 = a7;
        memset(&v196[32], 0, 96);
        *(void *)long long v196 = 0;
        *(_DWORD *)(a8 + 1432) = 0;
        sub_24846870C((uint64_t *)(a8 + 1440));
        *(void *)(a8 + 1448) = 0;
        *(void *)(a8 + 1440) = 0;
        *(void *)(a8 + 1456) = 0;
        memset(&v196[8], 0, 24);
        uint64_t v57 = (void *)(a8 + 1464);
        unsigned int v58 = *(void **)(a8 + 1464);
        if (v58)
        {
          *(void *)(a8 + 1472) = v58;
          operator delete(v58);
          *uint64_t v57 = 0;
          *(void *)(a8 + 1472) = 0;
          *(void *)(a8 + 1480) = 0;
        }
        *uint64_t v57 = 0;
        *(void *)(a8 + 1472) = 0;
        *(void *)(a8 + 1480) = 0;
        memset(&v196[32], 0, 24);
        uint64_t v59 = (void *)(a8 + 1488);
        uint64_t v60 = *(void **)(a8 + 1488);
        if (v60)
        {
          *(void *)(a8 + 1496) = v60;
          operator delete(v60);
          *uint64_t v59 = 0;
          *(void *)(a8 + 1496) = 0;
          *(void *)(a8 + 1504) = 0;
        }
        *uint64_t v59 = 0;
        *(void *)(a8 + 1496) = 0;
        *(void *)(a8 + 1504) = 0;
        memset(&v196[56], 0, 24);
        float32x2_t v61 = (void *)(a8 + 1512);
        float v62 = *(void **)(a8 + 1512);
        if (v62)
        {
          *(void *)(a8 + 1520) = v62;
          operator delete(v62);
          *float32x2_t v61 = 0;
          *(void *)(a8 + 1520) = 0;
          *(void *)(a8 + 1528) = 0;
        }
        *float32x2_t v61 = 0;
        *(void *)(a8 + 1520) = 0;
        *(void *)(a8 + 1528) = 0;
        memset(&v196[80], 0, 24);
        uint64_t v63 = (void *)(a8 + 1536);
        uint64_t v64 = *(void **)(a8 + 1536);
        if (v64)
        {
          *(void *)(a8 + 1544) = v64;
          operator delete(v64);
          *uint64_t v63 = 0;
          *(void *)(a8 + 1544) = 0;
          *(void *)(a8 + 1552) = 0;
        }
        *uint64_t v63 = 0;
        *(void *)(a8 + 1544) = 0;
        *(void *)(a8 + 1552) = 0;
        memset(&v196[104], 0, 24);
        *(void *)uint64_t v179 = &v196[8];
        sub_24841149C((void ***)v179);
        long long v55 = v177;
        a7 = v56;
        long long v15 = a9;
      }
      uint64_t v24 = sub_2484310C4((void *)(a8 + 1432), *v55, v55[1], v149);
      if (v24) {
        return v24;
      }
      uint64_t v144 = a4;
      uint64_t v139 = v15;
      uint64_t v65 = a7;
      if (*(void *)(a8 + 1488) != *(void *)(a8 + 1496))
      {
        uint64_t v66 = v177[1];
        if (v66)
        {
          uint64_t v67 = 0;
          uint64_t v68 = *v177;
          do
          {
            uint64_t v69 = *(void *)(a8 + 1488);
            if (v69 != *(void *)(a8 + 1496))
            {
              uint64_t v70 = *((void *)v177 + 2) * v67;
              uint64_t v71 = *((void *)v177 + 13) + v70;
              uint64_t v72 = *((void *)v177 + 8) + v70;
              int v73 = (void (__cdecl *)(_Unwind_Exception *))(*((void *)v177 + 3) + v70);
              *(void *)long long v196 = 0;
              *(void *)&v196[8] = v67;
              *(void *)&v196[16] = v68;
              *(void *)&v196[24] = 1;
              sub_248430CC8(v73, v72, v71, (uint64_t *)v196, 0, v69, *(void *)(a8 + 1512), *(void *)(a8 + 1536));
            }
            ++v67;
          }
          while (v66 != v67);
        }
      }
      int v54 = *(_DWORD *)(a8 + 4592);
      a7 = v65;
      long long v15 = v139;
      a4 = v144;
    }
    if (v151[5].i8[3])
    {
      if (v151[5].i8[3] == 1 || v54 <= 3)
      {
        uint64_t v24 = sub_24847E22C(v177, a8, (uint64_t)a5, a6, (int)v15, 1);
        if (v24) {
          return v24;
        }
        sub_24847E044((void *)(a8 + 1256), (uint64_t)v177);
      }
    }
  }
  uint64_t v142 = a8 + 952;
  float v19 = *(float *)(a8 + 4544);
  float v20 = powf(v19 * 3.3333, 0.83) * 0.3;
  if (v20 >= v19) {
    float v20 = v19;
  }
  if ((float)(v19 * 0.5) >= v20) {
    float v21 = v19 * 0.5;
  }
  else {
    float v21 = v20;
  }
  memset(v176, 0, sizeof(v176));
  float64x2_t v143 = (float *)(a8 + 4544);
  uint64_t v167 = a8 + 4544;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  float v174 = 0.0;
  memset(v175, 0, sizeof(v175));
  float v22 = 1.0959 / v21;
  if (v22 <= 50.0) {
    float v23 = v22;
  }
  else {
    float v23 = 50.0;
  }
  memset(v166, 0, sizeof(v166));
  long long v164 = 0uLL;
  long long v165 = 0uLL;
  uint64_t v163 = 0;
  long long v161 = 0uLL;
  long long v162 = 0uLL;
  uint64_t v160 = 0;
  long long v158 = 0uLL;
  long long v159 = 0uLL;
  uint64_t v157 = 0;
  long long v155 = 0uLL;
  long long v156 = 0uLL;
  if (*(int *)(a8 + 4592) < 6)
  {
    double v138 = v15;
    double v146 = a5;
    float v48 = v19 * 0.73;
    if (*(unsigned char *)(a1 + 425)) {
      float v48 = v19;
    }
    uint64_t v49 = v177;
    float v190 = v48;
    float v189 = 0.73815 / v48;
    unint64_t v188 = &v158;
    double v187 = &v155;
    memset(v196, 0, 104);
    unint64_t v50 = a4[3];
    uint64_t v51 = (uint64_t)a4;
    uint64_t v52 = (void *)((unint64_t)a4[2] >> 3);
    double v186 = v52;
    unint64_t v53 = v50 >> 3;
    unint64_t v185 = v50 >> 3;
    sub_2483EA250((uint64_t)v178, v52, v50 >> 3);
    uint64_t v24 = *(unsigned int *)&v178[40];
    if (!*(_DWORD *)&v178[40])
    {
      *(_OWORD *)&v196[24] = *(_OWORD *)v178;
      uint64_t v75 = *(void *)&v178[24];
      *(void *)&v178[24] = 0;
      uint64_t v76 = *(void *)&v178[32];
      uint64_t v77 = *(void *)&v196[48];
      *(void *)&v196[40] = *(void *)&v178[16];
      *(void *)&v196[48] = v75;
      if (v77)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v77 - 24));
        free(*(void **)(v77 - 32));
        uint64_t v52 = v186;
        unint64_t v53 = v185;
      }
      *(void *)&v196[56] = v76;
      sub_2483EA250((uint64_t)&v180, v52, v53);
      uint64_t v24 = v184;
      if (!v184)
      {
        uint64_t v78 = v182;
        uint64_t v79 = v183;
        uint64_t v182 = 0;
        uint64_t v52 = v188;
        *unint64_t v188 = v180;
        uint64_t v80 = v52[3];
        v52[2] = v181;
        v52[3] = v78;
        if (v80)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v80 - 24));
          free(*(void **)(v80 - 32));
        }
        v52[4] = v79;
        sub_2483EA250((uint64_t)&v201, *v49, v49[1]);
        uint64_t v24 = v205;
        if (!v205)
        {
          uint64_t v82 = v202;
          uint64_t v81 = v203;
          uint64_t v203 = 0;
          uint64_t v83 = v204;
          uint64_t v52 = v187;
          *double v187 = v201;
          uint64_t v84 = v52[3];
          v52[2] = v82;
          v52[3] = v81;
          if (v84)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v84 - 24));
            free(*(void **)(v84 - 32));
          }
          v52[4] = v83;
          uint64_t v85 = ((v185 + 7) >> 3) * (((unint64_t)v186 + 7) >> 3);
          *(void *)&long long v191 = v196;
          *(void *)uint64_t v179 = &v186;
          *(void *)&v179[8] = &v185;
          *(void *)&v179[16] = v196;
          *(void *)&v179[24] = &v190;
          *(void *)&v179[32] = &v189;
          *(void *)&v179[40] = v49;
          *(void *)&v179[48] = v51;
          *(void *)&v179[56] = &v188;
          *(void *)&v179[64] = &v187;
          if (a6)
          {
            sub_24843E4DC((uint64_t)a6, v85, (uint64_t *)&v191, (uint64_t *)v179);
          }
          else
          {
            *(void *)v199 = 0;
            *(void *)&v199[8] = v199;
            sub_24843E4DC((uint64_t)v199, v85, (uint64_t *)&v191, (uint64_t *)v179);
          }
          uint64_t v86 = (uint64_t)v187;
          *(int32x4_t *)uint64_t v179 = vdupq_n_s32(0x3E6D1351u);
          *(int32x4_t *)&v179[16] = vdupq_n_s32(0x3D73362Cu);
          *(int32x4_t *)&v179[32] = vdupq_n_s32(0x3D121DC5u);
          *(int32x4_t *)&v179[48] = vdupq_n_s32(0x3D426843u);
          *(int32x4_t *)&v179[64] = vdupq_n_s32(0x3C427F2Bu);
          *(int32x4_t *)&v179[80] = vdupq_n_s32(0x3C9A90AFu);
          sub_2483EA250((uint64_t)v199, *(void *)(v51 + 16), *(void *)(v51 + 24));
          uint64_t v24 = *(unsigned int *)&v199[40];
          if (!*(_DWORD *)&v199[40])
          {
            long long v191 = *(_OWORD *)v199;
            long long v192 = *(_OWORD *)&v199[16];
            *(void *)&v199[24] = 0;
            uint64_t v193 = *(void *)&v199[32];
            v194[1] = 0;
            v194[0] = 0;
            *(void *)&long long v87 = *(unsigned int *)v199;
            *((void *)&v87 + 1) = *(unsigned int *)&v199[4];
            long long v195 = v87;
            sub_2484B0BF8(v86, v51, (uint64_t)v179, a6, (uint64_t)&v191, (uint64_t)v194);
            long long v88 = v191;
            *(void *)(v86 + 16) = v192;
            *(_OWORD *)uint64_t v86 = v88;
            uint64_t v89 = *((void *)&v192 + 1);
            *((void *)&v192 + 1) = 0;
            sub_2483EB138((uint64_t *)(v86 + 24), v89);
            uint64_t v90 = *((void *)&v192 + 1);
            *(void *)(v86 + 32) = v193;
            *((void *)&v192 + 1) = 0;
            if (!v90
              || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v90 - 24)),
                  free(*(void **)(v90 - 32)),
                  !*(_DWORD *)&v199[40]))
            {
              uint64_t v91 = *(void *)&v199[24];
              *(void *)&v199[24] = 0;
              if (v91)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v91 - 24));
                free(*(void **)(v91 - 32));
              }
            }
            uint64_t v24 = 0;
            long long v153 = *(_OWORD *)&v196[24];
            uint64_t v154 = *(void *)&v196[40];
            uint64_t v52 = *(void **)&v196[56];
            unint64_t v53 = *(void *)&v196[48];
            *(void *)&v196[48] = 0;
          }
          if (!v205)
          {
            uint64_t v92 = v203;
            uint64_t v203 = 0;
            if (v92)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v92 - 24));
              free(*(void **)(v92 - 32));
            }
          }
        }
        if (!v184)
        {
          uint64_t v93 = v182;
          uint64_t v182 = 0;
          if (v93)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v93 - 24));
            free(*(void **)(v93 - 32));
          }
        }
      }
      if (!*(_DWORD *)&v178[40])
      {
        uint64_t v94 = *(void *)&v178[24];
        *(void *)&v178[24] = 0;
        if (v94)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v94 - 24));
          free(*(void **)(v94 - 32));
        }
      }
    }
    uint64_t v95 = *(void *)&v196[88];
    *(void *)&v196[88] = 0;
    if (v95)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v95 - 24));
      free(*(void **)(v95 - 32));
    }
    uint64_t v96 = *(void *)&v196[48];
    *(void *)&v196[48] = 0;
    if (v96)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v96 - 24));
      free(*(void **)(v96 - 32));
    }
    *(void *)uint64_t v179 = v196;
    sub_2483F77FC((void ***)v179);
    if (v24)
    {
      a5 = v146;
      goto LABEL_100;
    }
    long long v161 = v153;
    uint64_t v97 = *((void *)&v162 + 1);
    *(void *)&long long v162 = v154;
    *((void *)&v162 + 1) = v53;
    if (v97)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v97 - 24));
      free(*(void **)(v97 - 32));
    }
    uint64_t v163 = v52;
    float v98 = 0.39 / *v143;
    sub_248430404(v142, v23, v98, 0.0);
    long long v15 = v138;
    a5 = v146;
    a4 = (uint64_t *)v51;
LABEL_104:
    if (*(unsigned char *)(a1 + 425))
    {
      uint64_t v24 = sub_2484DA7F8((uint64_t)v177, (uint64_t)a4, flt_24854FEE8, a6);
      if (v24) {
        goto LABEL_142;
      }
    }
    if (v148)
    {
      sub_24842F040((uint64_t)v196);
      *(_DWORD *)(a8 + 208) = *(_DWORD *)v196;
      uint64_t v99 = *(void *)&v196[8];
      *(void *)&v196[8] = 0;
      sub_248401764((uint64_t *)(a8 + 216), v99);
      *(_OWORD *)(a8 + 224) = *(_OWORD *)&v196[16];
      memcpy((void *)(a8 + 240), &v196[32], 0x2B0uLL);
      sub_248403628((void **)(a8 + 928));
      *(_OWORD *)(a8 + 928) = v197;
      *(void *)(a8 + 944) = v198;
      uint64_t v198 = 0;
      long long v197 = 0u;
      *(void *)uint64_t v179 = &v197;
      sub_248403688((void ***)v179);
      sub_2483FED94((uint64_t *)&v196[8]);
      if (*(unsigned char *)(v145 + 368))
      {
        uint64_t v100 = 0;
        __asm { FMOV            V8.2S, #1.0 }
        *(float32x2_t *)&long long v201 = vdiv_f32(_D8, *v151);
        *((float *)&v201 + 2) = 1.0 / *(float *)(a8 + 4588);
        uint64_t v106 = &v178[8];
        memset(&v178[8], 0, 204);
        *(void *)uint64_t v178 = 1;
        do
        {
          *uint64_t v106 = *(_DWORD *)((char *)&v201 + v100);
          v106 += 17;
          v100 += 4;
        }
        while (v100 != 12);
        *(_OWORD *)&v179[164] = *(_OWORD *)&v178[160];
        *(_OWORD *)&v179[180] = *(_OWORD *)&v178[176];
        *(_OWORD *)&v179[196] = *(_OWORD *)&v178[192];
        *(void *)&v179[212] = *(void *)&v178[208];
        *(_OWORD *)&v179[100] = *(_OWORD *)&v178[96];
        *(_OWORD *)&v179[116] = *(_OWORD *)&v178[112];
        *(_OWORD *)&v179[132] = *(_OWORD *)&v178[128];
        *(_OWORD *)&v179[148] = *(_OWORD *)&v178[144];
        *(_OWORD *)&v179[36] = *(_OWORD *)&v178[32];
        *(_OWORD *)&v179[52] = *(_OWORD *)&v178[48];
        *(_OWORD *)&v179[68] = *(_OWORD *)&v178[64];
        *(_OWORD *)&v179[84] = *(_OWORD *)&v178[80];
        *(_OWORD *)&v179[4] = *(_OWORD *)v178;
        *(_OWORD *)&v179[20] = *(_OWORD *)&v178[16];
        *(_OWORD *)&v196[164] = *(_OWORD *)&v179[160];
        memset(&v199[4], 0, 208);
        int v200 = 0;
        *(_DWORD *)long long v196 = 6;
        *(_OWORD *)&v196[180] = *(_OWORD *)&v179[176];
        *(_OWORD *)&v196[196] = *(_OWORD *)&v179[192];
        memset(&v196[224], 0, 108);
        *(_OWORD *)&v196[208] = *(_OWORD *)&v179[204];
        *(_OWORD *)&v196[100] = *(_OWORD *)&v179[96];
        *(_OWORD *)&v196[116] = *(_OWORD *)&v179[112];
        *(_OWORD *)&v196[132] = *(_OWORD *)&v179[128];
        *(_OWORD *)&v196[148] = *(_OWORD *)&v179[144];
        *(_OWORD *)&v196[36] = *(_OWORD *)&v179[32];
        *(_OWORD *)&v196[52] = *(_OWORD *)&v179[48];
        *(_OWORD *)&v196[68] = *(_OWORD *)&v179[64];
        *(_OWORD *)&v196[84] = *(_OWORD *)&v179[80];
        *(_OWORD *)&v196[4] = *(_OWORD *)v179;
        *(_OWORD *)&v196[20] = *(_OWORD *)&v179[16];
        *(_OWORD *)&v196[492] = *(_OWORD *)&v199[160];
        *(_OWORD *)&v196[508] = *(_OWORD *)&v199[176];
        *(_OWORD *)&v196[524] = *(_OWORD *)&v199[192];
        *(void *)&v196[540] = 0;
        *(_OWORD *)&v196[428] = *(_OWORD *)&v199[96];
        *(_OWORD *)&v196[444] = *(_OWORD *)&v199[112];
        *(_OWORD *)&v196[460] = *(_OWORD *)&v199[128];
        *(_OWORD *)&v196[476] = *(_OWORD *)&v199[144];
        *(_OWORD *)&v196[364] = *(_OWORD *)&v199[32];
        *(_OWORD *)&v196[380] = *(_OWORD *)&v199[48];
        *(_OWORD *)&v196[396] = *(_OWORD *)&v199[64];
        *(_OWORD *)&v196[412] = *(_OWORD *)&v199[80];
        *(_OWORD *)&v196[332] = *(_OWORD *)v199;
        *(_OWORD *)&v196[348] = *(_OWORD *)&v199[16];
        v196[552] = 0;
        sub_248467264(&v180, v196);
        sub_248403910((uint64_t)v196);
        uint64_t v24 = sub_248486BC4(a8 + 208, (void **)&v180, a7);
        if (v24)
        {
          *(void *)long long v196 = &v180;
          sub_248403688((void ***)v196);
          goto LABEL_142;
        }
        *(float32x2_t *)long long v196 = vdiv_f32(_D8, *v151);
        *(float *)&v196[8] = 1.0 / *(float *)(a8 + 4588);
        sub_248486AA4(a8 + 208, (uint64_t)v196);
        *(void *)long long v196 = &v180;
        sub_248403688((void ***)v196);
      }
    }
    uint64_t v51 = (uint64_t)a4;
    sub_2483EA250((uint64_t)v196, (((unint64_t)a4[3] >> 3) * ((unint64_t)a4[2] >> 3) + 3) & 0xFFFFFFFC, 4u);
    uint64_t v24 = *(unsigned int *)&v196[40];
    if (!*(_DWORD *)&v196[40])
    {
      long long v147 = (unsigned int *)(a8 + 152);
      uint64_t v107 = *(void *)&v196[24];
      *(void *)&v196[24] = 0;
      uint64_t v108 = *(void *)&v196[32];
      long long v164 = *(_OWORD *)v196;
      uint64_t v109 = *((void *)&v165 + 1);
      *(void *)&long long v165 = *(void *)&v196[16];
      *((void *)&v165 + 1) = v107;
      if (v109)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v109 - 24));
        free(*(void **)(v109 - 32));
        uint64_t v107 = *((void *)&v165 + 1);
      }
      uint64_t v110 = 0;
      *(void *)&v166[0] = v108;
      unsigned int v111 = v164;
      uint64_t v112 = v107 + 4 * v164;
      uint64_t v113 = v165;
      uint64_t v114 = v112 - 16;
      uint64_t v115 = 4;
      do
      {
        if (v111 >= 4)
        {
          float v116 = (void *)(v114 + v110);
          void *v116 = 0;
          v116[1] = 0;
        }
        v110 += v113;
        --v115;
      }
      while (v115);
      if (!*(_DWORD *)&v196[40])
      {
        uint64_t v117 = *(void *)&v196[24];
        *(void *)&v196[24] = 0;
        if (v117)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v117 - 24));
          free(*(void **)(v117 - 32));
        }
      }
      uint64_t v118 = v177;
      *(void *)&long long v168 = a8 + 208;
      if (*(int *)(v167 + 48) > 5) {
        unsigned int v119 = 1;
      }
      else {
        unsigned int v119 = 0x1FFFFF;
      }
      sub_24842F368(a8 + 208, v119);
      *((void *)&v168 + 1) = *((void *)&v162 + 1);
      *(void *)&long long v169 = (unint64_t)v162 >> 2;
      if (v158 && DWORD1(v158))
      {
        *((void *)&v169 + 1) = *((void *)&v159 + 1);
        *(void *)&long long v170 = (unint64_t)v159 >> 2;
      }
      if (v155 && DWORD1(v155))
      {
        *((void *)&v170 + 1) = *((void *)&v156 + 1);
        *(void *)&long long v171 = (unint64_t)v156 >> 2;
      }
      unint64_t v120 = *((void *)v118 + 2);
      uint64_t v121 = *a4;
      uint64_t v122 = v120 * a4[1];
      *((void *)&v171 + 1) = *((void *)v118 + 3) + v122 + 4 * *a4;
      uint64_t v123 = *((void *)v118 + 8) + v122 + 4 * v121;
      uint64_t v124 = *((void *)v118 + 13) + v122 + 4 * v121;
      *(void *)&long long v172 = v123;
      *((void *)&v172 + 1) = v124;
      *(void *)&long long v173 = v120 >> 2;
      float v125 = (float)(*(float *)v167 + 0.13732) / 1.1373;
      *((float *)&v173 + 2) = powf(v125, 0.33678) * 1.2;
      float v174 = powf(v125, 0.50991) * 9.3089;
      *((float *)&v173 + 3) = powf(v125, 0.36703) * 10.833;
      v178[0] = 0;
      *(void *)long long v196 = v178;
      *(void *)&v196[8] = a8 + 8;
      *(void *)&v196[16] = a8 + 4544;
      *(void *)&v196[24] = &v164;
      *(void *)&v196[32] = &v177;
      *(void *)&v196[40] = a4;
      *(void *)&v196[48] = a8 + 208;
      *(void *)&v196[56] = v149;
      *(void *)&v196[64] = &v167;
      *(void *)&v196[72] = a8 + 152;
      *(void *)&v196[80] = v176;
      *(void *)&v196[88] = a1;
      *(void *)&v196[96] = &v161;
      *(void *)&v196[104] = a8 + 1064;
      *(void *)&v196[112] = a8 + 952;
      *(void *)&v196[120] = a8 + 1024;
      uint64_t v130 = ((unint64_t)(*(void *)(a8 + 80) + 7) >> 3)
           * ((unint64_t)(*(void *)(a8 + 72) + 7) >> 3);
      *(void *)uint64_t v179 = &v167;
      *(void *)&v179[8] = v176;
      *(void *)&v179[16] = &v164;
      if (a6)
      {
        BOOL v131 = sub_24846FC78((uint64_t)a6, v130, (uint64_t *)v179, (uint64_t *)v196, v126, v127, v128, v129);
      }
      else
      {
        *(void *)v199 = 0;
        *(void *)&v199[8] = v199;
        BOOL v131 = sub_24846FC78((uint64_t)v199, v130, (uint64_t *)v179, (uint64_t *)v196, v126, v127, v128, v129);
      }
      uint64_t v24 = v131;
      if (!v131)
      {
        unsigned __int8 v132 = atomic_load(v178);
        if (v132)
        {
          uint64_t v24 = 1;
        }
        else
        {
          sub_24843E1AC(v147, v15);
          if (v141 || (uint64_t v24 = sub_24843F99C(a1, a2, (uint64_t)v177, (unsigned int *)&v161, a8, a5), !v24))
          {
            uint64_t v24 = 0;
            if (v148)
            {
              if (*(int *)(a8 + 4592) <= 6)
              {
                sub_24846DC68((uint64_t)v143, (unsigned int *)(a8 + 1024), (uint64_t)v147, a8 + 1760);
                uint64_t v24 = 0;
              }
            }
          }
        }
      }
      goto LABEL_142;
    }
LABEL_100:
    a4 = (uint64_t *)v51;
    goto LABEL_142;
  }
  sub_2483EA250((uint64_t)v196, *(void *)(a8 + 72), *(void *)(a8 + 80));
  uint64_t v24 = *(unsigned int *)&v196[40];
  if (!*(_DWORD *)&v196[40])
  {
    long long v161 = *(_OWORD *)v196;
    uint64_t v25 = *(void *)&v196[24];
    *(void *)&v196[24] = 0;
    uint64_t v26 = *(void **)&v196[32];
    uint64_t v27 = *((void *)&v162 + 1);
    *(void *)&long long v162 = *(void *)&v196[16];
    *((void *)&v162 + 1) = v25;
    if (v27)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v27 - 24));
      free(*(void **)(v27 - 32));
    }
    uint64_t v163 = v26;
    sub_2483EA250((uint64_t)v179, *(void *)(a8 + 72), *(void *)(a8 + 80));
    uint64_t v24 = *(unsigned int *)&v179[40];
    if (!*(_DWORD *)&v179[40])
    {
      long long v158 = *(_OWORD *)v179;
      uint64_t v28 = *(void *)&v179[24];
      *(void *)&v179[24] = 0;
      uint64_t v29 = *(void *)&v179[32];
      uint64_t v30 = *((void *)&v159 + 1);
      *(void *)&long long v159 = *(void *)&v179[16];
      *((void *)&v159 + 1) = v28;
      if (v30)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v30 - 24));
        free(*(void **)(v30 - 32));
      }
      uint64_t v160 = v29;
      float v31 = 0.79 / *v143;
      uint64_t v32 = DWORD1(v161);
      if (DWORD1(v161))
      {
        uint64_t v33 = 0;
        int v34 = (float *)*((void *)&v162 + 1);
        uint64_t v35 = v162;
        uint64_t v36 = v161;
        do
        {
          uint64_t v37 = v34;
          uint64_t v38 = v36;
          if (v36)
          {
            do
            {
              *v37++ = v31;
              --v38;
            }
            while (v38);
          }
          ++v33;
          int v34 = (float *)((char *)v34 + v35);
        }
        while (v33 != v32);
      }
      uint64_t v39 = DWORD1(v158);
      if (DWORD1(v158))
      {
        uint64_t v40 = 0;
        uint64_t v41 = (float *)*((void *)&v159 + 1);
        uint64_t v42 = v159;
        uint64_t v43 = v158;
        do
        {
          uint64_t v44 = v41;
          uint64_t v45 = v43;
          if (v43)
          {
            do
            {
              *v44++ = 1.0 / (float)(v31 + 0.001);
              --v45;
            }
            while (v45);
          }
          ++v40;
          uint64_t v41 = (float *)((char *)v41 + v42);
        }
        while (v40 != v39);
      }
      sub_248430404(v142, v23, v31, 0.0);
      if (!*(_DWORD *)&v179[40])
      {
        uint64_t v46 = *(void *)&v179[24];
        *(void *)&v179[24] = 0;
        if (v46)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v46 - 24));
          free(*(void **)(v46 - 32));
        }
      }
    }
    if (!*(_DWORD *)&v196[40])
    {
      uint64_t v47 = *(void *)&v196[24];
      *(void *)&v196[24] = 0;
      if (v47)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v47 - 24));
        free(*(void **)(v47 - 32));
      }
    }
    if (!v24) {
      goto LABEL_104;
    }
  }
LABEL_142:
  uint64_t v133 = *((void *)&v156 + 1);
  *((void *)&v156 + 1) = 0;
  if (v133)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v133 - 24));
    free(*(void **)(v133 - 32));
  }
  uint64_t v134 = *((void *)&v159 + 1);
  *((void *)&v159 + 1) = 0;
  if (v134)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v134 - 24));
    free(*(void **)(v134 - 32));
  }
  uint64_t v135 = *((void *)&v162 + 1);
  *((void *)&v162 + 1) = 0;
  if (v135)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v135 - 24));
    free(*(void **)(v135 - 32));
  }
  sub_2483FED94((uint64_t *)v166 + 1);
  uint64_t v136 = *((void *)&v165 + 1);
  *((void *)&v165 + 1) = 0;
  if (v136)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v136 - 24));
    free(*(void **)(v136 - 32));
  }
  sub_24843E158(&v175[5]);
  sub_2483FED94(&v175[1]);
  *(void *)long long v196 = v176;
  sub_24846FD2C((void ***)v196);
  if (v24) {
    return v24;
  }

  return sub_24844B290(a1, v150, a4, (uint64_t)a5, (uint64_t)a6, a8, (uint64_t)a7);
}

void sub_2484625B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a30)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a30 - 24));
    free(*(void **)(a30 - 32));
  }
  if (a36)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a36 - 24));
    free(*(void **)(a36 - 32));
  }
  if (a42)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a42 - 24));
    free(*(void **)(a42 - 32));
  }
  sub_2483FED94(&a50);
  if (a48)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a48 - 24));
    free(*(void **)(a48 - 32));
  }
  sub_24843E158((uint64_t *)&STACK[0x200]);
  sub_2483FED94(&a69);
  STACK[0x238] = (unint64_t)&STACK[0x218];
  sub_24846FD2C((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_248462874(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  v146[3] = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 4592) <= 6)
  {
    uint64_t v6 = *(void *)(a1 + 1024);
    if (HIDWORD(v6))
    {
      uint64_t v7 = 0;
      int v5 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = *(unsigned __int8 **)(a1 + 176);
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = v6;
        if (v6)
        {
          do
          {
            unsigned int v12 = *v10++;
            unint64_t v13 = (unint64_t)v12 >> 1;
            v5 |= 1 << byte_24854FEF4[v13];
            if (v13 - 18 >= 9) {
              int v14 = 1 << byte_24854FEF4[v13];
            }
            else {
              int v14 = 0;
            }
            uint64_t v8 = v14 | v8;
            --v11;
          }
          while (v11);
        }
        ++v7;
        v9 += *(void *)(v3 + 168);
      }
      while (v7 != HIDWORD(v6));
    }
    else
    {
      uint64_t v8 = 0;
      int v5 = 0;
    }
    BOOL v15 = *(_DWORD *)(v3 + 156) >= 5u || *(_DWORD *)(v3 + 152) >= 5u;
    unint64_t v16 = v8 << 32;
    if (v15) {
      unint64_t v4 = v16;
    }
    else {
      unint64_t v4 = 0;
    }
  }
  else
  {
    unint64_t v4 = 0x100000000;
    int v5 = 1;
  }
  int v113 = v5 | v4;
  sub_2483EB1C4((char **)(v3 + 5240), *(void *)(v3 + 4272));
  if (*(void *)(v3 + 4272))
  {
    uint64_t v17 = 0;
    unint64_t v111 = HIDWORD(v4);
    uint64_t v112 = 0;
    uint64_t v118 = v3;
    float v125 = a2;
    do
    {
      int v18 = *(_DWORD *)(v3 + 4592);
      uint64_t v117 = *(void *)(*(void *)(v3 + 4224) + 8 * v17);
      uint64_t v114 = v17;
      uint64_t v115 = *(void *)(v3 + 5240);
      int v116 = *(_DWORD *)(v3 + 5232);
      uint64_t v109 = *(void *)(v3 + 1568);
      uint64_t v110 = *(void *)(v3 + 1560);
      sub_2483F23D8(v145, 0x60300uLL);
      if (v111)
      {
        BOOL v19 = v18 > 2 && v111 == 1;
        BOOL v20 = v19;
        if (a2[14])
        {
          unint64_t v21 = 0;
          unint64_t v22 = 0xBF58476D1CE4E5B9;
          unint64_t v23 = 0x94D049BB133111EBLL;
          BOOL v126 = v20;
          do
          {
            unint64_t v25 = a2[9];
            unint64_t v24 = a2[10];
            unint64_t v26 = v21 / v24;
            uint64_t v27 = 32 * (v21 / v24);
            unint64_t v28 = a2[8];
            uint64_t v121 = v27;
            unint64_t v122 = 32 * (v21 % v24);
            uint64_t v29 = v28 - v122;
            if (v28 < v122) {
              uint64_t v29 = 0;
            }
            if (v122 + 32 <= v28) {
              uint64_t v30 = 32;
            }
            else {
              uint64_t v30 = v29;
            }
            BOOL v15 = v25 >= 32 * v26;
            uint64_t v31 = v25 - 32 * v26;
            if (!v15) {
              uint64_t v31 = 0;
            }
            if (v27 + 32 <= v25) {
              uint64_t v32 = 32;
            }
            else {
              uint64_t v32 = v31;
            }
            uint64_t v123 = v32;
            int v140 = (*(uint64_t (**)(uint64_t))(*(void *)v117 + 16))(v117);
            for (uint64_t i = 0; i != 3; ++i)
              v146[i] = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v117 + 32))(v117, i, v21, 0);
            if (v123)
            {
              uint64_t v124 = 0;
              int v34 = 0;
              uint64_t v119 = *(void *)(v118 + 168);
              uint64_t v120 = *(void *)(v118 + 176);
              uint64_t v127 = v30;
              unint64_t v128 = v21;
              do
              {
                if (v30)
                {
                  uint64_t v35 = 0;
                  unint64_t v36 = v120 + v119 * (v124 + v121) + v122;
                  do
                  {
                    unint64_t v37 = *(unsigned __int8 *)(v36 + v35);
                    if (v37)
                    {
                      unint64_t v38 = (v22 >> 5) ^ ((v23 ^ (v23 << 23)) >> 18) ^ v22 ^ v23 ^ (v23 << 23);
                      if ((uint64_t)(v23 + v22) >= 0 || !v20)
                      {
                        uint64_t v131 = v35;
                        unint64_t v133 = (v22 >> 5) ^ ((v23 ^ (v23 << 23)) >> 18) ^ v22 ^ v23 ^ (v23 << 23);
                        unint64_t v137 = v22;
                        uint64_t v40 = 0;
                        unint64_t v41 = v37 >> 1;
                        unint64_t v42 = 64 << byte_24854EE58[v41];
                        uint64_t v43 = 3 * byte_24854FEF4[v41];
                        unint64_t v44 = byte_2485534EC[v41];
                        unint64_t v45 = byte_248553507[v41];
                        if (v45 >= v44) {
                          unint64_t v46 = v44;
                        }
                        else {
                          unint64_t v46 = v45;
                        }
                        if (v45 <= v44) {
                          unint64_t v45 = v44;
                        }
                        uint64_t v47 = (char *)v145[0];
                        unint64_t v129 = v42;
                        if (v42 <= 1) {
                          uint64_t v48 = 1;
                        }
                        else {
                          uint64_t v48 = v42;
                        }
                        uint64_t v49 = 32 * v45;
                        size_t v50 = 4 * v45;
                        uint64_t v51 = 4 * (void)v34;
                        long long __p = v34;
                        uint64_t v138 = 2 * (void)v34;
                        do
                        {
                          uint64_t v52 = qword_24854EFA0[v43 + v40];
                          uint64_t v53 = v146[v40];
                          if (v140)
                          {
                            int v54 = &v47[256 * v52];
                            long long v55 = (int *)(v53 + v51);
                            uint64_t v56 = v48;
                            do
                            {
                              int v57 = *v55++;
                              int v58 = *(_DWORD *)v54;
                              if (!v57) {
                                ++v58;
                              }
                              *(_DWORD *)int v54 = v58;
                              v54 += 4;
                              --v56;
                            }
                            while (v56);
                          }
                          else
                          {
                            uint64_t v59 = &v47[256 * v52];
                            uint64_t v60 = (unsigned __int16 *)(v53 + v138);
                            uint64_t v61 = v48;
                            do
                            {
                              int v62 = *v60++;
                              int v63 = *(_DWORD *)v59;
                              if (!v62) {
                                ++v63;
                              }
                              *(_DWORD *)uint64_t v59 = v63;
                              v59 += 4;
                              --v61;
                            }
                            while (v61);
                          }
                          if (v46)
                          {
                            uint64_t v64 = (char *)v145[0] + 256 * v52;
                            unint64_t v65 = v46;
                            do
                            {
                              memset(v64, 255, v50);
                              v64 += v49;
                              --v65;
                            }
                            while (v65);
                          }
                          ++v40;
                        }
                        while (v40 != 3);
                        unint64_t v22 = v137;
                        uint64_t v35 = v131;
                        int v34 = &__p[v129];
                        a2 = v125;
                        BOOL v20 = v126;
                        uint64_t v30 = v127;
                        unint64_t v21 = v128;
                        unint64_t v38 = v133;
                        unint64_t v36 = v120 + v119 * (v124 + v121) + v122;
                      }
                    }
                    else
                    {
                      unint64_t v38 = v22;
                      unint64_t v22 = v23;
                    }
                    ++v35;
                    unint64_t v23 = v22;
                    unint64_t v22 = v38;
                  }
                  while (v35 != v30);
                }
                else
                {
                  unint64_t v38 = v22;
                }
                unint64_t v22 = v38;
                ++v124;
              }
              while (v124 != v123);
            }
            else
            {
              unint64_t v38 = v22;
            }
            ++v21;
            unint64_t v22 = v38;
          }
          while (v21 < a2[14]);
        }
      }
      atomic_fetch_add_explicit(&qword_2693193B8, 1uLL, memory_order_relaxed);
      unint64_t v66 = (unint64_t)malloc_type_malloc(0x80100uLL, 0xFBCB090DuLL);
      int v67 = v113;
      uint64_t v68 = v114;
      if (v66)
      {
        unint64_t v69 = v66 & 0xFFFFFFFFFFFFFF80;
        unint64_t v70 = (v66 & 0xFFFFFFFFFFFFFF80) + 256;
        *(void *)(v69 + 240) = v66;
        *(void *)(v69 + 248) = 0x80000;
      }
      else
      {
        unint64_t v70 = 0;
      }
      uint64_t v71 = 0;
      int v72 = 0;
      uint64_t v73 = v109 + 4 * v110 * v114;
      v146[0] = v70;
      v146[1] = 0;
      v146[2] = 0;
      uint64_t v142 = 0;
      float64x2_t v143 = 0;
      uint64_t v144 = 0;
      char __pa = 0;
      int v134 = v111;
      uint64_t v3 = v118;
      do
      {
        uint64_t v74 = byte_24854FEF4[v71];
        int v75 = 1 << v74;
        if (((1 << v74) & v72) == 0)
        {
          v72 |= (unsigned __int16)(1 << v74);
          BOOL v76 = (v75 & v67) != 0 && (v75 & v116) == 0;
          if (v76 && (*(_DWORD *)(v115 + 4 * v68) & v75) == 0)
          {
            int v132 = 1 << v74;
            unint64_t v77 = (byte_2485534EC[v71] * (unint64_t)byte_248553507[v71]) << 6;
            uint64_t v78 = __pa;
            if (v77 > (v143 - __pa) >> 2)
            {
              sub_2483EB1C4(&v142, (byte_2485534EC[v71] * (unint64_t)byte_248553507[v71]) << 6);
              uint64_t v78 = v142;
            }
            sub_2483E8B58(v71, (uint64_t)v78);
            if ((v132 & v134) == 0)
            {
              uint64_t v105 = 0;
              uint64_t v106 = v142;
              size_t v107 = 4 * v77;
              uint64_t v108 = &qword_24854EFA0[3 * v74];
              do
                memcpy((void *)(v73 + (v108[v105++] << 8)), v106, v107);
              while (v105 != 3);
              char __pa = v106;
              int v67 = v113;
              uint64_t v68 = v114;
              goto LABEL_94;
            }
            int v130 = v72;
            uint64_t v79 = 0;
            unsigned __int8 v141 = 0;
            uint64_t v139 = 3 * v74;
            float v80 = 1.0 / sqrt((double)v77);
            uint64_t v81 = v142;
            char __pa = v142;
            while (1)
            {
              uint64_t v82 = (char *)v146[0];
              uint64_t v83 = qword_24854EFA0[v139 + v79];
              uint64_t v84 = (char *)v146[0];
              if (v77)
              {
                uint64_t v85 = (int *)v145[0];
                uint64_t v86 = (_DWORD *)(v146[0] + 4);
                long long v87 = v81;
                unint64_t v88 = v77;
                do
                {
                  unsigned int v89 = *(_DWORD *)v87;
                  v87 += 4;
                  *(v86 - 1) = v89;
                  *uint64_t v86 = (float)((float)((float)v85[64 * v83 + v89] * v80) + 0.1);
                  v86 += 2;
                  --v88;
                }
                while (v88);
                uint64_t v84 = &v82[8 * v77];
                if (v77 >= 0x81) {
                  break;
                }
              }
LABEL_108:
              sub_248451340(v82, v84, v77, 0, 0);
              if (v77) {
                goto LABEL_109;
              }
LABEL_112:
              if (++v79 == 3)
              {
                if (v141) {
                  int v104 = -1;
                }
                else {
                  int v104 = ~v132;
                }
                v134 &= v104;
                int v67 = v113;
                uint64_t v68 = v114;
                int v72 = v130;
                goto LABEL_94;
              }
            }
            uint64_t v90 = v73;
            unint64_t v91 = v77;
            while (1)
            {
              uint64_t v92 = operator new(8 * v91, MEMORY[0x263F8C180]);
              if (v92) {
                break;
              }
              BOOL v93 = v91 > 1;
              v91 >>= 1;
              if (!v93)
              {
                uint64_t v3 = v118;
                uint64_t v81 = __pa;
                goto LABEL_108;
              }
            }
            long long v103 = v92;
            sub_248451340(v82, &v82[8 * v77], v77, v92, v91);
            operator delete(v103);
            uint64_t v3 = v118;
            uint64_t v73 = v90;
            uint64_t v81 = __pa;
LABEL_109:
            int8x16_t v94 = (int8x16_t)v141;
            uint64_t v95 = (int32x4_t *)(v109 + v110 * v112 + (v83 << 8));
            uint64_t v96 = (__int32 *)(v82 + 64);
            uint64_t v97 = (int32x4_t *)v81;
            unint64_t v98 = v77;
            do
            {
              v99.i32[0] = *(v96 - 16);
              v99.i32[1] = *(v96 - 14);
              v99.i32[2] = *(v96 - 12);
              v99.i32[3] = *(v96 - 10);
              v100.i32[0] = *(v96 - 8);
              v100.i32[1] = *(v96 - 6);
              v100.i32[2] = *(v96 - 4);
              v100.i32[3] = *(v96 - 2);
              v101.i32[0] = *v96;
              v101.i32[1] = v96[2];
              v101.i32[2] = v96[4];
              v101.i32[3] = v96[6];
              v102.i32[0] = v96[8];
              v102.i32[1] = v96[10];
              v102.i32[2] = v96[12];
              v102.i32[3] = v96[14];
              v95[2] = v101;
              v95[3] = v102;
              *uint64_t v95 = v99;
              v95[1] = v100;
              v95 += 4;
              int8x16_t v94 = vornq_s8(v94, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*v97, v99), (int16x8_t)vceqq_s32(v97[1], v100)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v97[2], v101), (int16x8_t)vceqq_s32(v97[3], v102))));
              v97 += 4;
              v96 += 32;
              v98 -= 16;
            }
            while (v98);
            unsigned __int8 v141 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(v94, 7uLL))) & 1;
            goto LABEL_112;
          }
        }
LABEL_94:
        ++v71;
      }
      while (v71 != 27);
      *(_DWORD *)(v115 + 4 * v68) |= v134;
      if (__pa)
      {
        float64x2_t v143 = __pa;
        operator delete(__pa);
      }
      sub_2484512EC(v146);
      if (v145[0])
      {
        v145[1] = v145[0];
        operator delete(v145[0]);
      }
      v112 += 4;
      uint64_t v17 = v68 + 1;
    }
    while ((unint64_t)(v68 + 1) < *(void *)(v3 + 4272));
  }
  *(_DWORD *)(v3 + 5232) |= v113;
}

void sub_2484631C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_248463208(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = (char **)v11;
  unsigned __int8 v9 = 0;
  v8[0] = (char **)&v9;
  v8[1] = (char **)a3;
  void v8[2] = (char **)&v12;
  void v8[3] = (char **)v11;
  v8[4] = a1;
  uint64_t v3 = *(unsigned int *)(a3 + 120);
  if (a2)
  {
    BOOL v4 = sub_248466390(a2, v3, &v10, v8);
  }
  else
  {
    v13[0] = 0;
    v13[1] = v13;
    BOOL v4 = sub_248466390((uint64_t)v13, v3, &v10, v8);
  }
  BOOL v5 = v4;
  if (!v4)
  {
    unsigned __int8 v6 = atomic_load(&v9);
    BOOL v5 = v6 & 1;
  }
  sub_248466444(v11);
  return v5;
}

void sub_2484632B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_248466444((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2484632C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v9 = a1;
  uint64_t v557 = *MEMORY[0x263EF8340];
  uint64_t v10 = a2 + 4208;
  v537 = a3;
  uint64_t v538 = a2;
  unint64_t v11 = *(void *)(a2 + 4272);
  unint64_t v535 = v11;
  unint64_t v536 = a5;
  uint64_t v12 = *(void *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  if (*(unsigned char *)(a2 + 4208)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v12 == 1;
  }
  uint64_t v518 = *(void *)(a2 + 128);
  uint64_t v519 = *(void *)(a2 + 120);
  if (v14)
  {
    BOOL v534 = v11 == 1;
    if (v11 == 1) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v534 = 0;
  }
  unint64_t v11 = v13 + v11 * v12 + 2;
LABEL_8:
  uint64_t v15 = *a5;
  unint64_t v16 = (uint64_t *)a5[1];
  unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v16 - *a5) >> 3);
  unint64_t v18 = v11 - v17;
  if (v11 <= v17)
  {
    if (v11 < v17)
    {
      for (uint64_t i = (uint64_t *)(v15 + 40 * v11); v16 != i; v16 -= 5)
        sub_2483E8DDC(v16 - 2);
      a5[1] = (uint64_t)i;
    }
  }
  else
  {
    uint64_t v19 = a5[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v19 - (uint64_t)v16) >> 3) >= v18)
    {
      bzero(v16, 40 * ((40 * v18 - 40) / 0x28) + 40);
      uint64_t v9 = a1;
      uint64_t v6 = a6;
      a5[1] = (uint64_t)&v16[5 * ((40 * v18 - 40) / 0x28) + 5];
    }
    else
    {
      if (v11 > 0x666666666666666) {
        sub_2483E92E8();
      }
      v543 = a5 + 2;
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v15) >> 3);
      if (2 * v20 > v11) {
        unint64_t v11 = 2 * v20;
      }
      if (v20 >= 0x333333333333333) {
        unint64_t v21 = 0x666666666666666;
      }
      else {
        unint64_t v21 = v11;
      }
      unint64_t v22 = (char *)sub_248403444(v21);
      unint64_t v23 = &v22[40 * v17];
      *(void *)&v542[0] = v22;
      *((void *)&v542[0] + 1) = v23;
      *((void *)&v542[1] + 1) = &v22[40 * v24];
      bzero(v23, 40 * ((40 * v18 - 40) / 0x28) + 40);
      *(void *)&v542[1] = &v23[40 * ((40 * v18 - 40) / 0x28) + 40];
      sub_248449068(a5, v542);
      sub_24841F7CC((uint64_t)v542);
      uint64_t v9 = a1;
      uint64_t v6 = a6;
    }
  }
  uint64_t v532 = (unint64_t ***)&v536;
  int v533 = &v534;
  v531[0] = &v532;
  v531[1] = a2 + 8;
  if (!*(unsigned char *)(v10 + 1))
  {
LABEL_431:
    long long __p = 0;
    uint64_t v540 = 0;
    uint64_t v541 = 0;
    v530[0] = (uint64_t)&__p;
    v530[1] = v6;
    *(void *)&long long v550 = &__p;
    *((void *)&v550 + 1) = &v532;
    unsigned int v551 = &v538;
    uint64_t v552 = v9;
    unsigned int v553 = &v537;
    uint64_t v462 = *(unsigned int *)(a2 + 128);
    if (a4)
    {
      BOOL v463 = sub_24846593C(a4, v462, v530, (uint64_t)&v550);
    }
    else
    {
      *(void *)&v542[0] = 0;
      *((void *)&v542[0] + 1) = v542;
      BOOL v463 = sub_24846593C((uint64_t)v542, v462, v530, (uint64_t)&v550);
    }
    uint64_t v455 = v463;
    if (v463) {
      goto LABEL_515;
    }
    if (*(_DWORD *)(v9 + 12)) {
      goto LABEL_436;
    }
    uint64_t v480 = v538;
    int v481 = *v532;
    uint64_t v482 = *v533 ? 0 : v518 + 1;
    uint64_t v483 = *v481;
    unint64_t v484 = (uint64_t *)&(*v481)[5 * v482];
    uint64_t v455 = sub_248486214(v538 + 208, v484, 5, a6, v537);
    if (v455)
    {
LABEL_515:
      *(void *)&v542[0] = &__p;
      sub_248465D30((void ***)v542);
      return v455;
    }
    unint64_t v485 = (char *)(v480 + 4208);
    unint64_t v486 = *(void *)(v480 + 120);
    unint64_t v487 = __clz(v486) ^ 0x3F;
    if ((v486 & (v486 - 1)) != 0) {
      uint64_t v488 = v487 + 1;
    }
    else {
      uint64_t v488 = v487;
    }
    if (!*v485 && v488)
    {
      sub_248419548((uint64_t)v542, v484, v488);
      *(void *)(v483[5 * v482 + 3] + ((unint64_t)*v484 >> 3)) = ((*(void *)(v480 + 4200) - 1) << (*v484 & 7)) | *(unsigned __int8 *)(v483[5 * v482 + 3] + ((unint64_t)*v484 >> 3));
      *v484 += v488;
      sub_2484195C0((uint64_t)v542, v484, 12, a6);
    }
    if (!*(void *)(v480 + 4272))
    {
LABEL_436:
      unsigned __int8 v529 = 0;
      *(void *)&v542[0] = &v529;
      *((void *)&v542[0] + 1) = &__p;
      *(void *)&v542[1] = &v538;
      *((void *)&v542[1] + 1) = &v537;
      v543 = (void *)a2;
      uint64_t v544 = (uint64_t)&v535;
      uint64_t v545 = v9;
      v546[0] = v531;
      if (a4)
      {
        BOOL v464 = sub_2484659F0(a4, v519, v530, (uint64_t)v542);
      }
      else
      {
        uint64_t v555 = 0;
        int v556 = &v555;
        BOOL v464 = sub_2484659F0((uint64_t)&v555, v519, v530, (uint64_t)v542);
      }
      uint64_t v455 = v464;
      if (!v464)
      {
        unsigned __int8 v503 = atomic_load(&v529);
        if (v503)
        {
LABEL_514:
          uint64_t v455 = 1;
        }
        else
        {
          sub_248465AA4(v530, 0);
          uint64_t v505 = (void *)*v536;
          uint64_t v504 = (void *)v536[1];
          if ((void *)*v536 != v504)
          {
            do
            {
              uint64_t v506 = sub_248419548((uint64_t)&v555, v505, 8);
              unint64_t v507 = ((*v505 + 7) & 0xFFFFFFFFFFFFFFF8) - *v505;
              if (v507)
              {
                *(void *)(v505[3] + (*v505 >> 3)) = *(unsigned __int8 *)(v505[3] + (*v505 >> 3));
                *v505 += v507;
              }
              sub_2484195C0(v506, v505, 12, a6);
              v505 += 5;
            }
            while (v505 != v504);
          }
          uint64_t v455 = 0;
        }
      }
      goto LABEL_515;
    }
    uint64_t v489 = 0;
    unint64_t v490 = 0;
    while (1)
    {
      if (!*v485)
      {
        unsigned int v491 = *(_DWORD *)(*(void *)(v480 + 5240) + 4 * v490);
        *(void *)&v542[0] = 0;
        if (sub_24841A528(0x800000138000005FLL, 0xC80000000, v491, &v555, (unint64_t *)v542)) {
          goto LABEL_514;
        }
        sub_248419548((uint64_t)v542, v484, *(uint64_t *)&v542[0]);
        sub_2484DA700(0x800000138000005FLL, 0xC80000000, *(_DWORD *)(*(void *)(v480 + 5240) + 4 * v490), v484);
        sub_2484195C0((uint64_t)v542, v484, 11, a6);
        sub_2484521E4(*(unsigned __int16 *)(*(void *)(v480 + 5240) + 4 * v490), *(void *)(v480 + 1568) + 4 * *(void *)(v480 + 1560) * v490, (unint64_t *)v484, a6);
        uint64_t v9 = a1;
      }
      int v492 = *(_DWORD *)(v480 + 4592);
      uint64_t v493 = *(void *)(v480 + 1880);
      *(void *)((char *)v542 + 4) = 0x100000004;
      HIDWORD(v542[0]) = 2;
      v543 = 0;
      v542[1] = 0uLL;
      uint64_t v544 = -1;
      LOBYTE(v545) = 0;
      *(_WORD *)((char *)&v545 + 3) = 0;
      if (v492 >= 8) {
        break;
      }
      if (v492 < 2)
      {
        LODWORD(v542[0]) = 2;
        goto LABEL_482;
      }
      *(void *)&v542[0] = 1;
      if (v492 != 2) {
        goto LABEL_476;
      }
LABEL_477:
      DWORD2(v542[0]) = 0;
LABEL_482:
      if (*(void *)(v480 + 4600))
      {
        uint64_t v544 = 6;
        unint64_t v494 = 6;
      }
      else
      {
        unint64_t v494 = -1;
      }
      char v495 = *v485;
      char v496 = *(unsigned char *)(v480 + 4209);
      uint64_t v497 = *(void *)(v480 + 5184);
      if (*v485)
      {
        unint64_t v498 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v497 + v489 + 56) - *(void *)(v497 + v489 + 48)) >> 3);
        if (*(unsigned char *)(v480 + 4209))
        {
          ++v498;
          BYTE4(v545) = 1;
        }
        unint64_t v499 = 128 - v498;
        uint64_t v500 = 4;
        if (v499 < 4) {
          uint64_t v500 = v499;
        }
        if (v499 >= 0x14) {
          unint64_t v501 = v499 >> 2;
        }
        else {
          unint64_t v501 = v500;
        }
        if (v494 >= v501) {
          unint64_t v494 = v501;
        }
        uint64_t v544 = v494;
        uint64_t v502 = 1;
      }
      else
      {
        uint64_t v502 = *(void *)(v480 + 4200);
      }
      BYTE2(v545) = v495;
      BYTE1(v545) = v496;
      sub_248443880((uint64_t)v542, v502 * (495 * v493), v497 + v489, (uint64_t *)(v497 + v489 + 48), (unint64_t *)(v497 + v489 + 24), (unint64_t *)v484, 12, a6);
      ++v490;
      v489 += 176;
      if (v490 >= *(void *)(v480 + 4272)) {
        goto LABEL_436;
      }
    }
    *(void *)&v542[0] = 0;
LABEL_476:
    HIDWORD(v542[0]) = 1;
    goto LABEL_477;
  }
  uint64_t v26 = *(void *)(v9 + 24);
  if ((v26 & 2) == 0)
  {
    uint64_t v27 = (uint64_t ***)&v536;
    if ((v26 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_252;
  }
  uint64_t v28 = *a5;
  sub_248451DB0(&v555);
  v517 = (unint64_t *)v28;
  uint64_t v29 = *(void *)(a2 + 1272);
  uint64_t v30 = *(void *)(a2 + 1264);
  int v31 = 0;
  uint64_t v32 = v29 - v30;
  if (v29 != v30)
  {
    unint64_t v33 = 0;
    unint64_t v34 = v32 / 24;
    uint64_t v37 = *(void *)(v30 + 16);
    uint64_t v35 = v30 + 16;
    uint64_t v36 = v37;
    do
    {
      if (v34 <= v33 + 1) {
        unint64_t v38 = v33 + 1;
      }
      else {
        unint64_t v38 = v34;
      }
      uint64_t v39 = (uint64_t *)(v35 + 24 * v33);
      while (1)
      {
        uint64_t v41 = *v39;
        v39 += 3;
        uint64_t v40 = v41;
        if (v41 != v36) {
          break;
        }
        if (v38 == ++v33)
        {
          ++v31;
          goto LABEL_37;
        }
      }
      ++v31;
      uint64_t v36 = v40;
    }
    while (v33 < v34);
  }
LABEL_37:
  uint64_t v42 = *(unsigned int *)(**(void **)(a2 + 1256) + 320);
  uint64_t v43 = (void **)v555;
  unint64_t v44 = *(_DWORD **)(v555 + 8);
  unint64_t v45 = *(void *)(v555 + 16);
  if ((unint64_t)v44 >= v45)
  {
    uint64_t v47 = ((uint64_t)v44 - *(void *)v555) >> 3;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v49 = v45 - *(void *)v555;
    if (v49 >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    uint64_t v51 = (char *)sub_2483F04AC(v50);
    uint64_t v52 = &v51[8 * v47];
    int v54 = &v51[8 * v53];
    *(_DWORD *)uint64_t v52 = 0;
    *((_DWORD *)v52 + 1) = v31;
    unint64_t v46 = v52 + 8;
    uint64_t v56 = (char *)*v43;
    long long v55 = (char *)v43[1];
    if (v55 != *v43)
    {
      do
      {
        uint64_t v57 = *((void *)v55 - 1);
        v55 -= 8;
        *((void *)v52 - 1) = v57;
        v52 -= 8;
      }
      while (v55 != v56);
      long long v55 = (char *)*v43;
    }
    *uint64_t v43 = v52;
    v43[1] = v46;
    v43[2] = v54;
    if (v55) {
      operator delete(v55);
    }
  }
  else
  {
    *unint64_t v44 = 0;
    v44[1] = v31;
    unint64_t v46 = v44 + 2;
  }
  v43[1] = v46;
  uint64_t v58 = *(void *)(a2 + 1264);
  uint64_t v59 = *(void *)(a2 + 1272) - v58;
  if (v59)
  {
    unint64_t v60 = 0;
    uint64_t v61 = 0;
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (v59 >> 3);
LABEL_52:
    uint64_t v63 = v58 + 24 * v60;
    uint64_t v66 = *(void *)(v63 + 16);
    uint64_t v64 = (uint64_t *)(v63 + 16);
    uint64_t v65 = v66;
    uint64_t v67 = *(void *)(a2 + 1288);
    uint64_t v68 = (uint64_t *)(v67 + 40 * v66);
    unint64_t v527 = v60;
    if (v62 <= v60 + 1) {
      unint64_t v62 = v60 + 1;
    }
    do
    {
      uint64_t v69 = *v64;
      v64 += 3;
      if (v69 != v65) {
        goto LABEL_57;
      }
      ++v60;
    }
    while (v62 != v60);
    unint64_t v60 = v62;
LABEL_57:
    uint64_t v70 = *v68;
    uint64_t v71 = (void **)v555;
    uint64_t v73 = *(_DWORD **)(v555 + 8);
    unint64_t v72 = *(void *)(v555 + 16);
    uint64_t v523 = *(void *)(a2 + 1288);
    if ((unint64_t)v73 >= v72)
    {
      uint64_t v75 = ((uint64_t)v73 - *(void *)v555) >> 3;
      unint64_t v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 61) {
        goto LABEL_523;
      }
      uint64_t v77 = v72 - *(void *)v555;
      if (v77 >> 2 > v76) {
        unint64_t v76 = v77 >> 2;
      }
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v76;
      }
      uint64_t v79 = (char *)sub_2483F04AC(v78);
      uint64_t v81 = &v79[8 * v75];
      *(_DWORD *)uint64_t v81 = 2;
      *((_DWORD *)v81 + 1) = v70;
      uint64_t v83 = (char *)*v71;
      uint64_t v82 = (char *)v71[1];
      uint64_t v84 = v81;
      if (v82 != *v71)
      {
        do
        {
          uint64_t v85 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v84 - 1) = v85;
          v84 -= 8;
        }
        while (v82 != v83);
        uint64_t v82 = (char *)*v71;
      }
      uint64_t v74 = v81 + 8;
      *uint64_t v71 = v84;
      v71[1] = v81 + 8;
      v71[2] = &v79[8 * v80];
      if (v82) {
        operator delete(v82);
      }
      uint64_t v67 = v523;
    }
    else
    {
      *uint64_t v73 = 2;
      v73[1] = v70;
      uint64_t v74 = v73 + 2;
    }
    v71[1] = v74;
    uint64_t v86 = *(void *)(v67 + 40 * v65 + 8);
    long long v87 = (void **)v555;
    unsigned int v89 = *(_DWORD **)(v555 + 8);
    unint64_t v88 = *(void *)(v555 + 16);
    if ((unint64_t)v89 >= v88)
    {
      uint64_t v91 = ((uint64_t)v89 - *(void *)v555) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        goto LABEL_523;
      }
      uint64_t v93 = v88 - *(void *)v555;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      uint64_t v95 = (char *)sub_2483F04AC(v94);
      uint64_t v97 = &v95[8 * v91];
      *(_DWORD *)uint64_t v97 = 6;
      *((_DWORD *)v97 + 1) = v86;
      int32x4_t v99 = (char *)*v87;
      unint64_t v98 = (char *)v87[1];
      int32x4_t v100 = v97;
      if (v98 != *v87)
      {
        do
        {
          uint64_t v101 = *((void *)v98 - 1);
          v98 -= 8;
          *((void *)v100 - 1) = v101;
          v100 -= 8;
        }
        while (v98 != v99);
        unint64_t v98 = (char *)*v87;
      }
      uint64_t v90 = v97 + 8;
      *long long v87 = v100;
      v87[1] = v97 + 8;
      v87[2] = &v95[8 * v96];
      if (v98) {
        operator delete(v98);
      }
      uint64_t v67 = v523;
    }
    else
    {
      _DWORD *v89 = 6;
      v89[1] = v86;
      uint64_t v90 = v89 + 2;
    }
    v87[1] = v90;
    uint64_t v102 = *(void *)(v67 + 40 * v65 + 16);
    long long v103 = (void **)v555;
    uint64_t v105 = *(_DWORD **)(v555 + 8);
    unint64_t v104 = *(void *)(v555 + 16);
    if ((unint64_t)v105 >= v104)
    {
      uint64_t v107 = ((uint64_t)v105 - *(void *)v555) >> 3;
      unint64_t v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 61) {
        goto LABEL_523;
      }
      uint64_t v109 = v104 - *(void *)v555;
      if (v109 >> 2 > v108) {
        unint64_t v108 = v109 >> 2;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      unint64_t v111 = (char *)sub_2483F04AC(v110);
      int v113 = &v111[8 * v107];
      *(_DWORD *)int v113 = 6;
      *((_DWORD *)v113 + 1) = v102;
      uint64_t v115 = (char *)*v103;
      uint64_t v114 = (char *)v103[1];
      int v116 = v113;
      if (v114 != *v103)
      {
        do
        {
          uint64_t v117 = *((void *)v114 - 1);
          v114 -= 8;
          *((void *)v116 - 1) = v117;
          v116 -= 8;
        }
        while (v114 != v115);
        uint64_t v114 = (char *)*v103;
      }
      uint64_t v106 = v113 + 8;
      *long long v103 = v116;
      v103[1] = v113 + 8;
      v103[2] = &v111[8 * v112];
      if (v114) {
        operator delete(v114);
      }
      uint64_t v67 = v523;
    }
    else
    {
      *uint64_t v105 = 6;
      v105[1] = v102;
      uint64_t v106 = v105 + 2;
    }
    v103[1] = v106;
    uint64_t v118 = *(void *)(v67 + 40 * v65 + 24) - 1;
    uint64_t v119 = (void **)v555;
    uint64_t v121 = *(_DWORD **)(v555 + 8);
    unint64_t v120 = *(void *)(v555 + 16);
    if ((unint64_t)v121 >= v120)
    {
      uint64_t v123 = ((uint64_t)v121 - *(void *)v555) >> 3;
      unint64_t v124 = v123 + 1;
      if ((unint64_t)(v123 + 1) >> 61) {
        goto LABEL_523;
      }
      uint64_t v125 = v120 - *(void *)v555;
      if (v125 >> 2 > v124) {
        unint64_t v124 = v125 >> 2;
      }
      if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v126 = v124;
      }
      uint64_t v127 = (char *)sub_2483F04AC(v126);
      unint64_t v129 = &v127[8 * v123];
      *(_DWORD *)unint64_t v129 = 4;
      *((_DWORD *)v129 + 1) = v118;
      uint64_t v131 = (char *)*v119;
      int v130 = (char *)v119[1];
      int v132 = v129;
      if (v130 != *v119)
      {
        do
        {
          uint64_t v133 = *((void *)v130 - 1);
          v130 -= 8;
          *((void *)v132 - 1) = v133;
          v132 -= 8;
        }
        while (v130 != v131);
        int v130 = (char *)*v119;
      }
      unint64_t v122 = v129 + 8;
      unsigned int *v119 = v132;
      v119[1] = v129 + 8;
      v119[2] = &v127[8 * v128];
      if (v130) {
        operator delete(v130);
      }
      uint64_t v67 = v523;
    }
    else
    {
      *uint64_t v121 = 4;
      v121[1] = v118;
      unint64_t v122 = v121 + 2;
    }
    v119[1] = v122;
    uint64_t v134 = *(void *)(v67 + 40 * v65 + 32) - 1;
    uint64_t v135 = (void **)v555;
    unint64_t v137 = *(_DWORD **)(v555 + 8);
    unint64_t v136 = *(void *)(v555 + 16);
    if ((unint64_t)v137 >= v136)
    {
      uint64_t v139 = ((uint64_t)v137 - *(void *)v555) >> 3;
      unint64_t v140 = v139 + 1;
      if ((unint64_t)(v139 + 1) >> 61) {
        goto LABEL_523;
      }
      uint64_t v141 = v136 - *(void *)v555;
      if (v141 >> 2 > v140) {
        unint64_t v140 = v141 >> 2;
      }
      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v142 = v140;
      }
      float64x2_t v143 = (char *)sub_2483F04AC(v142);
      uint64_t v145 = &v143[8 * v139];
      *(_DWORD *)uint64_t v145 = 4;
      *((_DWORD *)v145 + 1) = v134;
      long long v147 = (char *)*v135;
      double v146 = (char *)v135[1];
      int v148 = v145;
      if (v146 != *v135)
      {
        do
        {
          uint64_t v149 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v148 - 1) = v149;
          v148 -= 8;
        }
        while (v146 != v147);
        double v146 = (char *)*v135;
      }
      uint64_t v138 = v145 + 8;
      *uint64_t v135 = v148;
      v135[1] = v145 + 8;
      v135[2] = &v143[8 * v144];
      if (v146) {
        operator delete(v146);
      }
    }
    else
    {
      *unint64_t v137 = 4;
      v137[1] = v134;
      uint64_t v138 = v137 + 2;
    }
    v135[1] = v138;
    int v150 = v60 + ~v527;
    float64x2_t v151 = (void **)v555;
    long long v153 = *(_DWORD **)(v555 + 8);
    unint64_t v152 = *(void *)(v555 + 16);
    if ((unint64_t)v153 < v152)
    {
      *long long v153 = 14;
      v153[1] = v150;
      uint64_t v154 = v153 + 2;
      goto LABEL_139;
    }
    uint64_t v155 = ((uint64_t)v153 - *(void *)v555) >> 3;
    unint64_t v156 = v155 + 1;
    if (!((unint64_t)(v155 + 1) >> 61))
    {
      uint64_t v157 = v152 - *(void *)v555;
      if (v157 >> 2 > v156) {
        unint64_t v156 = v157 >> 2;
      }
      if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v158 = v156;
      }
      long long v159 = (char *)sub_2483F04AC(v158);
      long long v161 = &v159[8 * v155];
      *(_DWORD *)long long v161 = 14;
      *((_DWORD *)v161 + 1) = v150;
      uint64_t v163 = (char *)*v151;
      long long v162 = (char *)v151[1];
      long long v164 = v161;
      if (v162 != *v151)
      {
        do
        {
          uint64_t v165 = *((void *)v162 - 1);
          v162 -= 8;
          *((void *)v164 - 1) = v165;
          v164 -= 8;
        }
        while (v162 != v163);
        long long v162 = (char *)*v151;
      }
      uint64_t v154 = v161 + 8;
      *float64x2_t v151 = v164;
      v151[1] = v161 + 8;
      v151[2] = &v159[8 * v160];
      if (v162) {
        operator delete(v162);
      }
LABEL_139:
      v151[1] = v154;
      unint64_t v166 = v527;
      unint64_t v525 = v60;
      if (v527 >= v60) {
        goto LABEL_246;
      }
      while (1)
      {
        uint64_t v167 = *(void *)(a2 + 1264);
        uint64_t v168 = *(void *)(v167 + 24 * v166);
        if (v166 == v527)
        {
          long long v169 = (void **)v555;
          long long v171 = *(_DWORD **)(v555 + 8);
          unint64_t v170 = *(void *)(v555 + 16);
          if ((unint64_t)v171 >= v170)
          {
            uint64_t v179 = ((uint64_t)v171 - *(void *)v555) >> 3;
            unint64_t v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 61) {
              goto LABEL_522;
            }
            uint64_t v181 = v170 - *(void *)v555;
            if (v181 >> 2 > v180) {
              unint64_t v180 = v181 >> 2;
            }
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v182 = v180;
            }
            uint64_t v183 = (char *)sub_2483F04AC(v182);
            unint64_t v185 = &v183[8 * v179];
            *(_DWORD *)unint64_t v185 = 8;
            *((_DWORD *)v185 + 1) = v168;
            double v187 = (char *)*v169;
            double v186 = (char *)v169[1];
            unint64_t v188 = v185;
            if (v186 != *v169)
            {
              do
              {
                uint64_t v189 = *((void *)v186 - 1);
                v186 -= 8;
                *((void *)v188 - 1) = v189;
                v188 -= 8;
              }
              while (v186 != v187);
              double v186 = (char *)*v169;
            }
            long long v172 = v185 + 8;
            *long long v169 = v188;
            v169[1] = v185 + 8;
            v169[2] = &v183[8 * v184];
            if (v186) {
              operator delete(v186);
            }
          }
          else
          {
            *long long v171 = 8;
            v171[1] = v168;
            long long v172 = v171 + 2;
          }
          v169[1] = v172;
          uint64_t v190 = *(void *)(v167 + 24 * v527 + 8);
          long long v191 = (void **)v555;
          uint64_t v193 = *(_DWORD **)(v555 + 8);
          unint64_t v192 = *(void *)(v555 + 16);
          if ((unint64_t)v193 >= v192)
          {
            uint64_t v212 = ((uint64_t)v193 - *(void *)v555) >> 3;
            unint64_t v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61) {
              goto LABEL_522;
            }
            uint64_t v214 = v192 - *(void *)v555;
            if (v214 >> 2 > v213) {
              unint64_t v213 = v214 >> 2;
            }
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v215 = v213;
            }
            long long v216 = (char *)sub_2483F04AC(v215);
            long long v218 = &v216[8 * v212];
            *(_DWORD *)long long v218 = 8;
            *((_DWORD *)v218 + 1) = v190;
            long long v220 = (char *)*v191;
            long long v219 = (char *)v191[1];
            long long v221 = v218;
            if (v219 != *v191)
            {
              do
              {
                uint64_t v222 = *((void *)v219 - 1);
                v219 -= 8;
                *((void *)v221 - 1) = v222;
                v221 -= 8;
              }
              while (v219 != v220);
              long long v219 = (char *)*v191;
            }
            long long v194 = v218 + 8;
            *long long v191 = v221;
            v191[1] = v218 + 8;
            v191[2] = &v216[8 * v217];
            if (v219) {
              operator delete(v219);
            }
          }
          else
          {
            *uint64_t v193 = 8;
            v193[1] = v190;
            long long v194 = v193 + 2;
          }
          v191[1] = v194;
        }
        else
        {
          int v173 = v168 - *(_DWORD *)(v167 + 24 * (v166 - 1));
          int v174 = (2 * v173) ^ (v173 >> 31);
          float v175 = (void **)v555;
          float v177 = *(_DWORD **)(v555 + 8);
          unint64_t v176 = *(void *)(v555 + 16);
          if ((unint64_t)v177 >= v176)
          {
            uint64_t v195 = ((uint64_t)v177 - *(void *)v555) >> 3;
            unint64_t v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 61) {
              goto LABEL_522;
            }
            uint64_t v197 = v176 - *(void *)v555;
            if (v197 >> 2 > v196) {
              unint64_t v196 = v197 >> 2;
            }
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v198 = v196;
            }
            v199 = (char *)sub_2483F04AC(v198);
            long long v201 = &v199[8 * v195];
            *(_DWORD *)long long v201 = 12;
            *((_DWORD *)v201 + 1) = v174;
            uint64_t v203 = (char *)*v175;
            uint64_t v202 = (char *)v175[1];
            uint64_t v204 = v201;
            if (v202 != *v175)
            {
              do
              {
                uint64_t v205 = *((void *)v202 - 1);
                v202 -= 8;
                *((void *)v204 - 1) = v205;
                v204 -= 8;
              }
              while (v202 != v203);
              uint64_t v202 = (char *)*v175;
            }
            uint64_t v178 = v201 + 8;
            *float v175 = v204;
            v175[1] = v201 + 8;
            v175[2] = &v199[8 * v200];
            if (v202) {
              operator delete(v202);
            }
          }
          else
          {
            *float v177 = 12;
            v177[1] = v174;
            uint64_t v178 = v177 + 2;
          }
          v175[1] = v178;
          int v206 = *(_DWORD *)(v167 + 24 * v166 + 8) - *(_DWORD *)(*(void *)(a2 + 1264) + 24 * (v166 - 1) + 8);
          int v207 = (2 * v206) ^ (v206 >> 31);
          long long v208 = (void **)v555;
          long long v210 = *(_DWORD **)(v555 + 8);
          unint64_t v209 = *(void *)(v555 + 16);
          if ((unint64_t)v210 >= v209)
          {
            uint64_t v223 = ((uint64_t)v210 - *(void *)v555) >> 3;
            unint64_t v224 = v223 + 1;
            if ((unint64_t)(v223 + 1) >> 61) {
LABEL_522:
            }
              sub_2483E92E8();
            uint64_t v225 = v209 - *(void *)v555;
            if (v225 >> 2 > v224) {
              unint64_t v224 = v225 >> 2;
            }
            if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v226 = v224;
            }
            unint64_t v227 = (char *)sub_2483F04AC(v226);
            unint64_t v229 = &v227[8 * v223];
            *(_DWORD *)unint64_t v229 = 12;
            *((_DWORD *)v229 + 1) = v207;
            unint64_t v231 = (char *)*v208;
            uint64_t v230 = (char *)v208[1];
            v232 = v229;
            if (v230 != *v208)
            {
              do
              {
                uint64_t v233 = *((void *)v230 - 1);
                v230 -= 8;
                *((void *)v232 - 1) = v233;
                v232 -= 8;
              }
              while (v230 != v231);
              uint64_t v230 = (char *)*v208;
            }
            long long v211 = v229 + 8;
            *long long v208 = v232;
            v208[1] = v229 + 8;
            v208[2] = &v227[8 * v228];
            if (v230) {
              operator delete(v230);
            }
          }
          else
          {
            *long long v210 = 12;
            v210[1] = v207;
            long long v211 = v210 + 2;
          }
          v208[1] = v211;
        }
        uint64_t v234 = v42 + 1 + v61;
        do
        {
          uint64_t v235 = *(void *)(a2 + 1312);
          v236 = (unsigned __int8 *)(v235 + 12 * v61);
          int v237 = *v236;
          uint64_t v238 = (void **)v555;
          unint64_t v240 = *(_DWORD **)(v555 + 8);
          unint64_t v239 = *(void *)(v555 + 16);
          if ((unint64_t)v240 >= v239)
          {
            uint64_t v242 = ((uint64_t)v240 - *(void *)v555) >> 3;
            unint64_t v243 = v242 + 1;
            if ((unint64_t)(v242 + 1) >> 61) {
              goto LABEL_520;
            }
            uint64_t v244 = v239 - *(void *)v555;
            if (v244 >> 2 > v243) {
              unint64_t v243 = v244 >> 2;
            }
            if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v245 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v245 = v243;
            }
            uint64_t v246 = (char *)sub_2483F04AC(v245);
            uint64_t v248 = &v246[8 * v242];
            *(_DWORD *)uint64_t v248 = 10;
            *((_DWORD *)v248 + 1) = v237;
            uint64_t v250 = (char *)*v238;
            uint64_t v249 = (char *)v238[1];
            uint64_t v251 = v248;
            if (v249 != *v238)
            {
              do
              {
                uint64_t v252 = *((void *)v249 - 1);
                v249 -= 8;
                *((void *)v251 - 1) = v252;
                v251 -= 8;
              }
              while (v249 != v250);
              uint64_t v249 = (char *)*v238;
            }
            unint64_t v241 = v248 + 8;
            *uint64_t v238 = v251;
            v238[1] = v248 + 8;
            v238[2] = &v246[8 * v247];
            if (v249) {
              operator delete(v249);
            }
          }
          else
          {
            _DWORD *v240 = 10;
            v240[1] = v237;
            unint64_t v241 = v240 + 2;
          }
          v238[1] = v241;
          int v253 = *v236;
          int v254 = v253 & 0xFC;
          if (v254 != 4) {
            goto LABEL_225;
          }
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(void *)(**(void **)(a2 + 1256) + 336) - *(void *)(**(void **)(a2 + 1256) + 328)) >> 5) >= 2)
          {
            int v255 = *(_DWORD *)(v235 + 12 * v61 + 4);
            unint64_t v256 = (void **)v555;
            uint64_t v258 = *(_DWORD **)(v555 + 8);
            unint64_t v257 = *(void *)(v555 + 16);
            if ((unint64_t)v258 >= v257)
            {
              uint64_t v260 = ((uint64_t)v258 - *(void *)v555) >> 3;
              unint64_t v261 = v260 + 1;
              if ((unint64_t)(v260 + 1) >> 61) {
                goto LABEL_520;
              }
              uint64_t v262 = v257 - *(void *)v555;
              if (v262 >> 2 > v261) {
                unint64_t v261 = v262 >> 2;
              }
              if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v263 = v261;
              }
              long long v264 = (char *)sub_2483F04AC(v263);
              uint64_t v266 = &v264[8 * v260];
              *(_DWORD *)uint64_t v266 = 16;
              *((_DWORD *)v266 + 1) = v255;
              uint64_t v268 = (char *)*v256;
              uint64_t v267 = (char *)v256[1];
              uint64_t v269 = v266;
              if (v267 != *v256)
              {
                do
                {
                  uint64_t v270 = *((void *)v267 - 1);
                  v267 -= 8;
                  *((void *)v269 - 1) = v270;
                  v269 -= 8;
                }
                while (v267 != v268);
                uint64_t v267 = (char *)*v256;
              }
              uint64_t v259 = v266 + 8;
              *unint64_t v256 = v269;
              v256[1] = v266 + 8;
              v256[2] = &v264[8 * v265];
              if (v267) {
                operator delete(v267);
              }
            }
            else
            {
              *uint64_t v258 = 16;
              v258[1] = v255;
              uint64_t v259 = v258 + 2;
            }
            v256[1] = v259;
            int v253 = *v236;
            int v254 = v253 & 0xFC;
LABEL_225:
            if (v253 != 3 && v254 != 4) {
              goto LABEL_244;
            }
          }
          int v272 = *(unsigned __int8 *)(v235 + 12 * v61 + 8);
          unsigned int v273 = (void **)v555;
          uint64_t v275 = *(_DWORD **)(v555 + 8);
          unint64_t v274 = *(void *)(v555 + 16);
          if ((unint64_t)v275 >= v274)
          {
            uint64_t v277 = ((uint64_t)v275 - *(void *)v555) >> 3;
            unint64_t v278 = v277 + 1;
            if ((unint64_t)(v277 + 1) >> 61) {
LABEL_520:
            }
              sub_2483E92E8();
            uint64_t v279 = v274 - *(void *)v555;
            if (v279 >> 2 > v278) {
              unint64_t v278 = v279 >> 2;
            }
            if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v280 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v280 = v278;
            }
            unsigned int v281 = (char *)sub_2483F04AC(v280);
            uint64_t v283 = &v281[8 * v277];
            *(_DWORD *)uint64_t v283 = 18;
            *((_DWORD *)v283 + 1) = v272;
            uint64_t v285 = (char *)*v273;
            uint64_t v284 = (char *)v273[1];
            unint64_t v286 = v283;
            if (v284 != *v273)
            {
              do
              {
                uint64_t v287 = *((void *)v284 - 1);
                v284 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              while (v284 != v285);
              uint64_t v284 = (char *)*v273;
            }
            uint64_t v276 = v283 + 8;
            *unsigned int v273 = v286;
            v273[1] = v283 + 8;
            v273[2] = &v281[8 * v282];
            if (v284) {
              operator delete(v284);
            }
          }
          else
          {
            *uint64_t v275 = 18;
            v275[1] = v272;
            uint64_t v276 = v275 + 2;
          }
          v273[1] = v276;
LABEL_244:
          ++v61;
        }
        while (v61 != v234);
        ++v166;
        uint64_t v61 = v234;
        unint64_t v60 = v525;
        if (v166 == v525)
        {
LABEL_246:
          uint64_t v58 = *(void *)(a2 + 1264);
          unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 1272) - v58) >> 3);
          if (v60 >= v62) {
            goto LABEL_247;
          }
          goto LABEL_52;
        }
      }
    }
LABEL_523:
    sub_2483E92E8();
  }
LABEL_247:
  memset(v542, 0, 24);
  uint64_t v544 = 0;
  uint64_t v545 = 0;
  v543 = 0;
  sub_2483F26D4((uint64_t)v546);
  uint64_t v547 = 0;
  uint64_t v548 = 0;
  uint64_t v549 = 0;
  long long __p = 0;
  uint64_t v540 = 0;
  uint64_t v541 = 0;
  long long v550 = xmmword_2484DCDC0;
  uint64_t v552 = 0;
  unsigned int v553 = 0;
  unsigned int v551 = 0;
  long long v554 = xmmword_2484DCDD0;
  BYTE9(v554) = 1;
  BYTE11(v554) = 0;
  uint64_t v6 = a6;
  sub_248443880((uint64_t)&v550, 0xAuLL, (uint64_t)&v555, (uint64_t *)v542, (unint64_t *)&__p, v517, 2, a6);
  uint64_t v9 = a1;
  sub_24844A2B4(v555, (uint64_t)v542, &__p, 0, v517, 2, a6);
  if (__p) {
    operator delete(__p);
  }
  *(void *)&long long v550 = &v547;
  sub_2483F77FC((void ***)&v550);
  if (v543)
  {
    uint64_t v544 = (uint64_t)v543;
    operator delete(v543);
  }
  *(void *)&long long v550 = v542;
  sub_2484415B0((void ***)&v550);
  *(void *)&v542[0] = &v555;
  sub_2483F87EC((void ***)v542);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v27 = (uint64_t ***)v532;
  if ((v26 & 0x10) == 0)
  {
LABEL_25:
    if ((v26 & 1) == 0) {
      goto LABEL_419;
    }
    goto LABEL_416;
  }
LABEL_252:
  v524 = (unint64_t *)**v27;
  long long v550 = xmmword_2484DCDC0;
  uint64_t v552 = 0;
  unsigned int v553 = 0;
  unsigned int v551 = 0;
  long long v554 = xmmword_2484DCDD0;
  BYTE9(v554) = 1;
  BYTE11(v554) = 0;
  sub_248451DB0(&v555);
  uint64_t v288 = (void **)v555;
  unint64_t v289 = 0xF0B7672A07A44C6BLL * ((uint64_t)(*(void *)(a2 + 1448) - *(void *)(a2 + 1440)) >> 3) - 1;
  unint64_t v290 = *(_DWORD **)(v555 + 8);
  unint64_t v291 = *(void *)(v555 + 16);
  if ((unint64_t)v290 >= v291)
  {
    uint64_t v293 = ((uint64_t)v290 - *(void *)v555) >> 3;
    unint64_t v294 = v293 + 1;
    if ((unint64_t)(v293 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v295 = v291 - *(void *)v555;
    if (v295 >> 2 > v294) {
      unint64_t v294 = v295 >> 2;
    }
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v296 = v294;
    }
    uint64_t v297 = (char *)sub_2483F04AC(v296);
    unint64_t v298 = &v297[8 * v293];
    uint64_t v300 = &v297[8 * v299];
    *(_DWORD *)unint64_t v298 = 4;
    *((_DWORD *)v298 + 1) = v289;
    unint64_t v292 = v298 + 8;
    uint64_t v302 = (char *)*v288;
    uint64_t v301 = (char *)v288[1];
    if (v301 != *v288)
    {
      do
      {
        uint64_t v303 = *((void *)v301 - 1);
        v301 -= 8;
        *((void *)v298 - 1) = v303;
        v298 -= 8;
      }
      while (v301 != v302);
      uint64_t v301 = (char *)*v288;
    }
    uint64_t *v288 = v298;
    v288[1] = v292;
    v288[2] = v300;
    if (v301) {
      operator delete(v301);
    }
  }
  else
  {
    *unint64_t v290 = 4;
    v290[1] = v289;
    unint64_t v292 = v290 + 2;
  }
  v288[1] = v292;
  unint64_t v304 = (void **)v555;
  uint64_t v305 = *(void *)(a2 + 1464);
  if (*(void *)(a2 + 1472) != v305)
  {
    unint64_t v306 = 0;
    int v307 = 0;
    int v308 = 0;
    while (1)
    {
      int v309 = v308;
      int v310 = v307;
      uint64_t v311 = (float *)(v305 + 8 * v306);
      int v308 = llroundf(*v311);
      int v307 = llroundf(v311[1]);
      if (v306)
      {
        int v312 = (2 * (v308 - v309)) ^ ((v308 - v309) >> 31);
        uint64_t v314 = v304[1];
        unint64_t v313 = (unint64_t)v304[2];
        if ((unint64_t)v314 >= v313)
        {
          uint64_t v319 = ((char *)v314 - (unsigned char *)*v304) >> 3;
          unint64_t v320 = v319 + 1;
          if ((unint64_t)(v319 + 1) >> 61) {
            goto LABEL_524;
          }
          uint64_t v321 = v313 - (void)*v304;
          if (v321 >> 2 > v320) {
            unint64_t v320 = v321 >> 2;
          }
          if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v322 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v322 = v320;
          }
          uint64_t v323 = (char *)sub_2483F04AC(v322);
          unint64_t v325 = &v323[8 * v319];
          *(_DWORD *)unint64_t v325 = 2;
          *((_DWORD *)v325 + 1) = v312;
          uint64_t v327 = (char *)*v304;
          unint64_t v326 = (char *)v304[1];
          v328 = v325;
          if (v326 != *v304)
          {
            do
            {
              uint64_t v329 = *((void *)v326 - 1);
              v326 -= 8;
              *((void *)v328 - 1) = v329;
              v328 -= 8;
            }
            while (v326 != v327);
            unint64_t v326 = (char *)*v304;
          }
          unint64_t v315 = v325 + 8;
          void *v304 = v328;
          v304[1] = v325 + 8;
          v304[2] = &v323[8 * v324];
          if (v326) {
            operator delete(v326);
          }
        }
        else
        {
          *uint64_t v314 = 2;
          v314[1] = v312;
          unint64_t v315 = v314 + 2;
        }
        v304[1] = v315;
        int v330 = (2 * (v307 - v310)) ^ ((v307 - v310) >> 31);
        unint64_t v331 = (unint64_t)v304[2];
        if ((unint64_t)v315 >= v331)
        {
          uint64_t v333 = ((char *)v315 - (unsigned char *)*v304) >> 3;
          if ((unint64_t)(v333 + 1) >> 61) {
            goto LABEL_524;
          }
          uint64_t v334 = v331 - (void)*v304;
          uint64_t v335 = v334 >> 2;
          if (v334 >> 2 <= (unint64_t)(v333 + 1)) {
            uint64_t v335 = v333 + 1;
          }
          if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v336 = v335;
          }
          unint64_t v337 = (char *)sub_2483F04AC(v336);
          unint64_t v339 = &v337[8 * v333];
          *(_DWORD *)unint64_t v339 = 2;
          *((_DWORD *)v339 + 1) = v330;
          uint64_t v341 = (char *)*v304;
          unint64_t v340 = (char *)v304[1];
          uint64_t v342 = v339;
          if (v340 != *v304)
          {
            do
            {
              uint64_t v343 = *((void *)v340 - 1);
              v340 -= 8;
              *((void *)v342 - 1) = v343;
              v342 -= 8;
            }
            while (v340 != v341);
            goto LABEL_315;
          }
          goto LABEL_316;
        }
        *unint64_t v315 = 2;
        v315[1] = v330;
        unint64_t v332 = v315 + 2;
      }
      else
      {
        unint64_t v317 = v304[1];
        unint64_t v316 = (unint64_t)v304[2];
        if ((unint64_t)v317 >= v316)
        {
          uint64_t v344 = ((char *)v317 - (unsigned char *)*v304) >> 3;
          unint64_t v345 = v344 + 1;
          if ((unint64_t)(v344 + 1) >> 61) {
            goto LABEL_524;
          }
          uint64_t v346 = v316 - (void)*v304;
          if (v346 >> 2 > v345) {
            unint64_t v345 = v346 >> 2;
          }
          if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v347 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v347 = v345;
          }
          unint64_t v348 = (char *)sub_2483F04AC(v347);
          uint64_t v350 = &v348[8 * v344];
          *(_DWORD *)uint64_t v350 = 2;
          *((_DWORD *)v350 + 1) = v308;
          double v352 = (char *)*v304;
          uint64_t v351 = (char *)v304[1];
          double v353 = v350;
          if (v351 != *v304)
          {
            do
            {
              uint64_t v354 = *((void *)v351 - 1);
              v351 -= 8;
              *((void *)v353 - 1) = v354;
              v353 -= 8;
            }
            while (v351 != v352);
            uint64_t v351 = (char *)*v304;
          }
          uint64_t v318 = v350 + 8;
          void *v304 = v353;
          v304[1] = v350 + 8;
          v304[2] = &v348[8 * v349];
          if (v351) {
            operator delete(v351);
          }
        }
        else
        {
          *unint64_t v317 = 2;
          v317[1] = v308;
          uint64_t v318 = v317 + 2;
        }
        v304[1] = v318;
        unint64_t v355 = (unint64_t)v304[2];
        if ((unint64_t)v318 >= v355)
        {
          uint64_t v356 = ((char *)v318 - (unsigned char *)*v304) >> 3;
          if ((unint64_t)(v356 + 1) >> 61) {
LABEL_524:
          }
            sub_2483E92E8();
          uint64_t v357 = v355 - (void)*v304;
          uint64_t v358 = v357 >> 2;
          if (v357 >> 2 <= (unint64_t)(v356 + 1)) {
            uint64_t v358 = v356 + 1;
          }
          if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v359 = v358;
          }
          unint64_t v337 = (char *)sub_2483F04AC(v359);
          unint64_t v339 = &v337[8 * v356];
          *(_DWORD *)unint64_t v339 = 2;
          *((_DWORD *)v339 + 1) = v307;
          uint64_t v360 = (char *)*v304;
          unint64_t v340 = (char *)v304[1];
          uint64_t v342 = v339;
          if (v340 != *v304)
          {
            do
            {
              uint64_t v361 = *((void *)v340 - 1);
              v340 -= 8;
              *((void *)v342 - 1) = v361;
              v342 -= 8;
            }
            while (v340 != v360);
LABEL_315:
            unint64_t v340 = (char *)*v304;
          }
LABEL_316:
          unint64_t v332 = v339 + 8;
          void *v304 = v342;
          v304[1] = v339 + 8;
          v304[2] = &v337[8 * v338];
          if (v340) {
            operator delete(v340);
          }
          goto LABEL_318;
        }
        *uint64_t v318 = 2;
        v318[1] = v307;
        unint64_t v332 = v318 + 2;
      }
LABEL_318:
      v304[1] = v332;
      ++v306;
      uint64_t v305 = *(void *)(a2 + 1464);
      if (v306 >= (*(void *)(a2 + 1472) - v305) >> 3)
      {
        unint64_t v304 = (void **)v555;
        break;
      }
    }
  }
  int v362 = (2 * *(_DWORD *)(a2 + 1432)) ^ (*(int *)(a2 + 1432) >> 31);
  char v364 = v304[1];
  unint64_t v363 = (unint64_t)v304[2];
  if ((unint64_t)v364 >= v363)
  {
    uint64_t v366 = ((char *)v364 - (unsigned char *)*v304) >> 3;
    unint64_t v367 = v366 + 1;
    if ((unint64_t)(v366 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v368 = v363 - (void)*v304;
    if (v368 >> 2 > v367) {
      unint64_t v367 = v368 >> 2;
    }
    if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v369 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v369 = v367;
    }
    long long v370 = (char *)sub_2483F04AC(v369);
    long long v371 = &v370[8 * v366];
    double v373 = &v370[8 * v372];
    *(_DWORD *)long long v371 = 0;
    *((_DWORD *)v371 + 1) = v362;
    BOOL v365 = v371 + 8;
    uint64_t v375 = (char *)*v304;
    uint64_t v374 = (char *)v304[1];
    if (v374 != *v304)
    {
      do
      {
        uint64_t v376 = *((void *)v374 - 1);
        v374 -= 8;
        *((void *)v371 - 1) = v376;
        v371 -= 8;
      }
      while (v374 != v375);
      uint64_t v374 = (char *)*v304;
    }
    void *v304 = v371;
    v304[1] = v365;
    v304[2] = v373;
    if (v374) {
      operator delete(v374);
    }
  }
  else
  {
    *char v364 = 0;
    v364[1] = v362;
    BOOL v365 = v364 + 2;
  }
  v304[1] = v365;
  uint64_t v377 = *(int ***)(a2 + 1440);
  uint64_t v526 = *(int ***)(a2 + 1448);
  if (v377 != v526)
  {
    do
    {
      uint64_t v378 = (void **)v555;
      unint64_t v379 = (char *)v377[1] - (char *)*v377;
      uint64_t v380 = *(_DWORD **)(v555 + 8);
      unint64_t v381 = *(void *)(v555 + 16);
      if ((unint64_t)v380 >= v381)
      {
        uint64_t v383 = ((uint64_t)v380 - *(void *)v555) >> 3;
        unint64_t v384 = v383 + 1;
        if ((unint64_t)(v383 + 1) >> 61) {
LABEL_519:
        }
          sub_2483E92E8();
        uint64_t v385 = v381 - *(void *)v555;
        if (v385 >> 2 > v384) {
          unint64_t v384 = v385 >> 2;
        }
        if ((unint64_t)v385 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v386 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v386 = v384;
        }
        char v387 = (char *)sub_2483F04AC(v386);
        float v389 = &v387[8 * v383];
        *(_DWORD *)float v389 = 6;
        *((_DWORD *)v389 + 1) = v379 >> 4;
        long long v391 = (char *)*v378;
        uint64_t v390 = (char *)v378[1];
        long long v392 = v389;
        if (v390 != *v378)
        {
          do
          {
            uint64_t v393 = *((void *)v390 - 1);
            v390 -= 8;
            *((void *)v392 - 1) = v393;
            v392 -= 8;
          }
          while (v390 != v391);
          uint64_t v390 = (char *)*v378;
        }
        v382 = v389 + 8;
        *uint64_t v378 = v392;
        v378[1] = v389 + 8;
        v378[2] = &v387[8 * v388];
        if (v390) {
          operator delete(v390);
        }
      }
      else
      {
        *uint64_t v380 = 6;
        v380[1] = v379 >> 4;
        v382 = v380 + 2;
      }
      v378[1] = v382;
      v528 = v377;
      uint64_t v395 = *v377;
      int64x2_t v394 = v377[1];
      while (v395 != v394)
      {
        int v396 = (2 * *v395) ^ (*v395 >> 31);
        unint64_t v397 = (unint64_t)v378[2];
        if ((unint64_t)v382 >= v397)
        {
          uint64_t v399 = ((char *)v382 - (unsigned char *)*v378) >> 3;
          if ((unint64_t)(v399 + 1) >> 61) {
            goto LABEL_519;
          }
          uint64_t v400 = v397 - (void)*v378;
          uint64_t v401 = v400 >> 2;
          if (v400 >> 2 <= (unint64_t)(v399 + 1)) {
            uint64_t v401 = v399 + 1;
          }
          if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v402 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v402 = v401;
          }
          unint64_t v403 = (char *)sub_2483F04AC(v402);
          float v405 = &v403[8 * v399];
          *(_DWORD *)float v405 = 8;
          *((_DWORD *)v405 + 1) = v396;
          uint64_t v407 = (char *)*v378;
          v406 = (char *)v378[1];
          float v408 = v405;
          if (v406 != *v378)
          {
            do
            {
              uint64_t v409 = *((void *)v406 - 1);
              v406 -= 8;
              *((void *)v408 - 1) = v409;
              v408 -= 8;
            }
            while (v406 != v407);
            v406 = (char *)*v378;
          }
          int64x2_t v398 = v405 + 8;
          *uint64_t v378 = v408;
          v378[1] = v405 + 8;
          v378[2] = &v403[8 * v404];
          if (v406) {
            operator delete(v406);
          }
        }
        else
        {
          _DWORD *v382 = 8;
          v382[1] = v396;
          int64x2_t v398 = v382 + 2;
        }
        v378[1] = v398;
        int v410 = (2 * v395[2]) ^ (v395[2] >> 31);
        unint64_t v411 = (unint64_t)v378[2];
        if ((unint64_t)v398 >= v411)
        {
          uint64_t v412 = ((char *)v398 - (unsigned char *)*v378) >> 3;
          if ((unint64_t)(v412 + 1) >> 61) {
            goto LABEL_519;
          }
          uint64_t v413 = v411 - (void)*v378;
          uint64_t v414 = v413 >> 2;
          if (v413 >> 2 <= (unint64_t)(v412 + 1)) {
            uint64_t v414 = v412 + 1;
          }
          if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v415 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v415 = v414;
          }
          uint64_t v416 = (char *)sub_2483F04AC(v415);
          v418 = &v416[8 * v412];
          *(_DWORD *)v418 = 8;
          *((_DWORD *)v418 + 1) = v410;
          uint64_t v420 = (char *)*v378;
          unint64_t v419 = (char *)v378[1];
          v421 = v418;
          if (v419 != *v378)
          {
            do
            {
              uint64_t v422 = *((void *)v419 - 1);
              v419 -= 8;
              *((void *)v421 - 1) = v422;
              v421 -= 8;
            }
            while (v419 != v420);
            unint64_t v419 = (char *)*v378;
          }
          v382 = v418 + 8;
          *uint64_t v378 = v421;
          v378[1] = v418 + 8;
          v378[2] = &v416[8 * v417];
          if (v419) {
            operator delete(v419);
          }
        }
        else
        {
          *int64x2_t v398 = 8;
          v398[1] = v410;
          v382 = v398 + 2;
        }
        v378[1] = v382;
        v395 += 4;
      }
      for (uint64_t j = 0; j != 3; ++j)
      {
        for (uint64_t k = 0; k != 32; ++k)
        {
          int v425 = (2 * *((_DWORD *)&v528[16 * j + 3] + k)) ^ (*((int *)&v528[16 * j + 3] + k) >> 31);
          unint64_t v426 = (unint64_t)v378[2];
          if ((unint64_t)v382 >= v426)
          {
            uint64_t v427 = ((char *)v382 - (unsigned char *)*v378) >> 3;
            if ((unint64_t)(v427 + 1) >> 61) {
              goto LABEL_519;
            }
            uint64_t v428 = v426 - (void)*v378;
            uint64_t v429 = v428 >> 2;
            if (v428 >> 2 <= (unint64_t)(v427 + 1)) {
              uint64_t v429 = v427 + 1;
            }
            if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v430 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v430 = v429;
            }
            v431 = (char *)sub_2483F04AC(v430);
            unint64_t v433 = &v431[8 * v427];
            *(_DWORD *)unint64_t v433 = 10;
            *((_DWORD *)v433 + 1) = v425;
            uint64_t v435 = (char *)*v378;
            unint64_t v434 = (char *)v378[1];
            v436 = v433;
            if (v434 != *v378)
            {
              do
              {
                uint64_t v437 = *((void *)v434 - 1);
                v434 -= 8;
                *((void *)v436 - 1) = v437;
                v436 -= 8;
              }
              while (v434 != v435);
              unint64_t v434 = (char *)*v378;
            }
            v382 = v433 + 8;
            *uint64_t v378 = v436;
            v378[1] = v433 + 8;
            v378[2] = &v431[8 * v432];
            if (v434) {
              operator delete(v434);
            }
          }
          else
          {
            _DWORD *v382 = 10;
            v382[1] = v425;
            v382 += 2;
          }
          v378[1] = v382;
        }
      }
      for (uint64_t m = 0; m != 32; ++m)
      {
        int v439 = (2 * *((_DWORD *)v528 + m + 102)) ^ (*((int *)v528 + m + 102) >> 31);
        unint64_t v440 = (unint64_t)v378[2];
        if ((unint64_t)v382 >= v440)
        {
          uint64_t v441 = ((char *)v382 - (unsigned char *)*v378) >> 3;
          if ((unint64_t)(v441 + 1) >> 61) {
            goto LABEL_519;
          }
          uint64_t v442 = v440 - (void)*v378;
          uint64_t v443 = v442 >> 2;
          if (v442 >> 2 <= (unint64_t)(v441 + 1)) {
            uint64_t v443 = v441 + 1;
          }
          if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v444 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v444 = v443;
          }
          unint64_t v445 = (char *)sub_2483F04AC(v444);
          v447 = &v445[8 * v441];
          *(_DWORD *)v447 = 10;
          *((_DWORD *)v447 + 1) = v439;
          int v449 = (char *)*v378;
          v448 = (char *)v378[1];
          uint64_t v450 = v447;
          if (v448 != *v378)
          {
            do
            {
              uint64_t v451 = *((void *)v448 - 1);
              v448 -= 8;
              *((void *)v450 - 1) = v451;
              v450 -= 8;
            }
            while (v448 != v449);
            v448 = (char *)*v378;
          }
          v382 = v447 + 8;
          *uint64_t v378 = v450;
          v378[1] = v447 + 8;
          v378[2] = &v445[8 * v446];
          if (v448) {
            operator delete(v448);
          }
        }
        else
        {
          _DWORD *v382 = 10;
          v382[1] = v439;
          v382 += 2;
        }
        v378[1] = v382;
      }
      uint64_t v377 = v528 + 67;
    }
    while (v528 + 67 != v526);
  }
  memset(v542, 0, 24);
  uint64_t v544 = 0;
  uint64_t v545 = 0;
  v543 = 0;
  sub_2483F26D4((uint64_t)v546);
  uint64_t v547 = 0;
  uint64_t v548 = 0;
  uint64_t v549 = 0;
  long long __p = 0;
  uint64_t v540 = 0;
  uint64_t v541 = 0;
  uint64_t v6 = a6;
  sub_248443880((uint64_t)&v550, 6uLL, (uint64_t)&v555, (uint64_t *)v542, (unint64_t *)&__p, v524, 3, a6);
  uint64_t v9 = a1;
  sub_24844A2B4(v555, (uint64_t)v542, &__p, 0, v524, 3, a6);
  if (__p) {
    operator delete(__p);
  }
  long long __p = &v547;
  sub_2483F77FC((void ***)&__p);
  if (v543)
  {
    uint64_t v544 = (uint64_t)v543;
    operator delete(v543);
  }
  long long __p = v542;
  sub_2484415B0((void ***)&__p);
  *(void *)&v542[0] = &v555;
  sub_2483F87EC((void ***)v542);
  if (v551) {
    operator delete(v551);
  }
  uint64_t v27 = (uint64_t ***)v532;
  if (*(void *)(a1 + 24))
  {
LABEL_416:
    int v452 = (unint64_t *)**v27;
    sub_248419548((uint64_t)v542, v452, 128);
    uint64_t v453 = 0;
    unint64_t v454 = *v452;
    do
    {
      *(void *)(v452[3] + (v454 >> 3)) = ((uint64_t)(int)llroundf(*(float *)(a2 + 1224 + v453) * 1024.0) << (v454 & 7)) | *(unsigned __int8 *)(v452[3] + (v454 >> 3));
      unint64_t v454 = *v452 + 10;
      *int v452 = v454;
      v453 += 4;
    }
    while (v453 != 32);
    sub_2484195C0((uint64_t)v542, v452, 4, v6);
    uint64_t v27 = (uint64_t ***)v532;
  }
LABEL_419:
  uint64_t v455 = sub_24848699C(a2 + 208, **v27, 5, v6);
  if (!v455)
  {
    if (!*(_DWORD *)(v9 + 12))
    {
      BOOL v465 = (uint64_t *)**v532;
      *(void *)&long long v550 = &unk_26FC66068;
      *(void *)&v542[0] = &unk_26FC65A00;
      *(_OWORD *)((char *)v542 + 8) = xmmword_2484DC960;
      *((void *)&v542[1] + 1) = 0;
      sub_248430298((uint64_t)&v550, (uint64_t)v542);
      *((void *)&v550 + 1) = *(void *)(a2 + 984);
      uint64_t v455 = sub_2484DA1C4((uint64_t)&v550, v465, 5, v6);
      if (v455) {
        return v455;
      }
      sub_248419548((uint64_t)v542, v465, 10 * (*(void *)(a2 + 1864) - *(void *)(a2 + 1856))+ 34* (((uint64_t)(*(void *)(a2 + 1792) - *(void *)(a2 + 1784)) >> 2)+ ((uint64_t)(*(void *)(a2 + 1768) - *(void *)(a2 + 1760)) >> 2)+ ((uint64_t)(*(void *)(a2 + 1816) - *(void *)(a2 + 1808)) >> 2)+ ((uint64_t)(*(void *)(a2 + 1840) - *(void *)(a2 + 1832)) >> 2))+ 1033);
      if (*(void *)(a2 + 1760) == *(void *)(a2 + 1768)
        && *(void *)(a2 + 1784) == *(void *)(a2 + 1792)
        && *(void *)(a2 + 1808) == *(void *)(a2 + 1816)
        && *(void *)(a2 + 1832) == *(void *)(a2 + 1840)
        && (v466 = *(uint64_t **)(a2 + 1856), *(void *)(a2 + 1864) - (void)v466 == 21)
        && ((v467 = *v466, v468 = v466[1], uint64_t v469 = *(uint64_t *)((char *)v466 + 13), v467 == 0x504030302020100)
          ? (BOOL v470 = v468 == 0x908070606060606)
          : (BOOL v470 = 0),
            v470 ? (BOOL v471 = v469 == 0xD0C0B0A09090807) : (BOOL v471 = 0),
            v471))
      {
        *(void *)(v465[3] + ((unint64_t)*v465 >> 3)) = (1 << (*v465 & 7)) | *(unsigned __int8 *)(v465[3] + ((unint64_t)*v465 >> 3));
        ++*v465;
      }
      else
      {
        uint64_t v472 = 0;
        *(void *)(v465[3] + ((unint64_t)*v465 >> 3)) = *(unsigned __int8 *)(v465[3]
                                                                                   + ((unint64_t)*v465 >> 3));
        ++*v465;
        uint64_t v555 = 0x100000000;
        LODWORD(v556) = 2;
        do
        {
          v473 = (int **)(a2 + 1760 + 24 * *((int *)&v555 + v472));
          *(void *)(v465[3] + ((unint64_t)*v465 >> 3)) = ((v473[1] - *v473) << (*v465 & 7)) | *(unsigned __int8 *)(v465[3] + ((unint64_t)*v465 >> 3));
          *v465 += 4;
          v474 = *v473;
          uint64_t v475 = v473[1];
          while (v474 != v475)
          {
            int v476 = *v474++;
            sub_2484DA700(0x20700000003, 0x20221F0000220FLL, (2 * v476) ^ (v476 >> 31), v465);
          }
          ++v472;
        }
        while (v472 != 3);
        *(void *)(v465[3] + ((unint64_t)*v465 >> 3)) = ((uint64_t)(*(void *)(a2 + 1840)
                                                                         - *(void *)(a2 + 1832)) >> 2 << (*v465 & 7)) | *(unsigned __int8 *)(v465[3] + ((unint64_t)*v465 >> 3));
        *v465 += 4;
        v477 = *(int **)(a2 + 1832);
        float v478 = *(int **)(a2 + 1840);
        while (v477 != v478)
        {
          int v479 = *v477++;
          sub_2484DA700(0x8200000001, 0x58700000184, v479 - 1, v465);
        }
        uint64_t v6 = a6;
        sub_248453460((unsigned __int8 **)(a2 + 1856), *(void *)(a2 + 1880), (unint64_t *)v465, 12, a6);
        uint64_t v9 = a1;
      }
      sub_2484195C0((uint64_t)v542, v465, 12, v6);
      unsigned int v508 = *(_DWORD *)(a2 + 1200);
      float v509 = *(float *)(a2 + 1208);
      float v510 = *(float *)(a2 + 1212);
      int v511 = *(_DWORD *)(a2 + 1216);
      int v512 = *(_DWORD *)(a2 + 1220);
      sub_248419548((uint64_t)v542, v465, 61);
      unint64_t v513 = *v465;
      if (!v511 && !v512 && v508 == 84 && v509 == 0.0 && v510 == 1.0)
      {
        uint64_t v514 = 1;
        uint64_t v515 = 1;
      }
      else
      {
        *(void *)(v465[3] + (v513 >> 3)) = *(unsigned __int8 *)(v465[3] + (v513 >> 3));
        ++*v465;
        sub_2484DA700(0x8000010080000054, 0x204F00000047, (float)v508, v465);
        sub_2484DA5A0(v465, v509);
        sub_2484DA5A0(v465, v510);
        *(void *)(v465[3] + ((unint64_t)*v465 >> 3)) = ((v511 + 128) << (*v465 & 7)) | *(unsigned __int8 *)(v465[3] + ((unint64_t)*v465 >> 3));
        unint64_t v513 = *v465 + 8;
        *BOOL v465 = v513;
        uint64_t v515 = v512 + 128;
        uint64_t v514 = 8;
      }
      *(void *)(v465[3] + (v513 >> 3)) = (v515 << (v513 & 7)) | *(unsigned __int8 *)(v465[3] + (v513 >> 3));
      *v465 += v514;
      sub_2484195C0((uint64_t)v542, v465, 8, v6);
    }
    int64_t v456 = v537;
    int v457 = *(unsigned __int8 *)(v538 + 4208);
    v458 = **v532;
    uint64_t v459 = sub_248419548((uint64_t)&v555, v458, 1);
    uint64_t v460 = (void *)v456[18];
    if (v460 == (void *)v456[19] || *v460 == v460[1])
    {
      *(void *)(v458[3] + (*v458 >> 3)) = *(unsigned __int8 *)(v458[3] + (*v458 >> 3));
      ++*v458;
      sub_2484195C0(v459, v458, 6, v6);
    }
    else
    {
      *(void *)(v458[3] + (*v458 >> 3)) = (1 << (*v458 & 7)) | *(unsigned __int8 *)(v458[3] + (*v458 >> 3));
      ++*v458;
      sub_2484195C0(v459, v458, 6, v6);
      sub_24844A37C((uint64_t)&v550, (uint64_t)(v456 + 64), (unsigned char *)v456[3], (unsigned char *)v456[4], v457 != 0);
      memset(v542, 0, 24);
      uint64_t v544 = 0;
      uint64_t v545 = 0;
      v543 = 0;
      sub_2483F26D4((uint64_t)v546);
      uint64_t v547 = 0;
      uint64_t v548 = 0;
      uint64_t v549 = 0;
      long long __p = 0;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_248443880((uint64_t)&v550, 6uLL, (uint64_t)(v456 + 18), (uint64_t *)v542, (unint64_t *)&__p, v458, 6, v6);
      sub_24844A2B4(v456[18], (uint64_t)v542, &__p, 0, v458, 6, v6);
      if (__p) {
        operator delete(__p);
      }
      long long __p = &v547;
      sub_2483F77FC((void ***)&__p);
      if (v543)
      {
        uint64_t v544 = (uint64_t)v543;
        operator delete(v543);
      }
      long long __p = v542;
      sub_2484415B0((void ***)&__p);
      BYTE10(v554) = v457;
      BYTE11(v554) = v457;
      sub_248467FE0((char *)&v551, (char *)v456[150], v456[151], (uint64_t)(v456[151] - v456[150]) >> 3);
      sub_248443880((uint64_t)&v550, (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v456[16] - v456[15]) >> 3) + 1) >> 1, (uint64_t)(v456 + 24), v456 + 27, v456 + 43, v458, 7, v6);
      if (v551) {
        operator delete(v551);
      }
    }
    v461 = **v532;
    memset(v542, 0, sizeof(v542));
    uint64_t v455 = sub_24847C5C4(v537, v461, v6, 7, (uint64_t)v542);
    if (!v455) {
      goto LABEL_431;
    }
  }
  return v455;
}

void sub_248465774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(void *)(v35 + 128) = &__p;
  sub_248465D30((void ***)(v36 - 224));
  _Unwind_Resume(a1);
}

BOOL sub_24846593C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_248466370, sub_2484660E4, 0, a2) != 0;
  }
  sub_248465AA4(a3, 1uLL);
  for (unsigned int i = 0; i != v4; ++i)
    sub_2484660E4((uint64_t)v7, i, 0);
  return 0;
}

BOOL sub_2484659F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_2484660C4, sub_248465E54, 0, a2) != 0;
  }
  sub_248465AA4(a3, 1uLL);
  for (unsigned int i = 0; i != v4; ++i)
    sub_248465E54((uint64_t)v7, i, 0);
  return 0;
}

void sub_248465AA4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = *(void *)*a1;
  uint64_t v5 = *(void *)(*a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (a1[1])
  {
    for (; v6 > a2; unint64_t v6 = (v5 - *(void *)*a1) >> 3)
    {
      sub_2484D9334(a1[1], *(void *)(v5 - 8));
      sub_248465D84(*a1, (void *)(*(void *)(*a1 + 8) - 8));
      uint64_t v5 = *(void *)(*a1 + 8);
    }
    if (v6 < a2) {
      operator new();
    }
  }
  else
  {
    unint64_t v8 = a2 - v6;
    if (a2 <= v6)
    {
      if (a2 < v6)
      {
        unint64_t v16 = (void *)(v4 + 8 * a2);
        uint64_t v17 = *a1;
        sub_248465D84(v17, v16);
      }
    }
    else
    {
      uint64_t v9 = v3[2];
      if (v8 <= (v9 - v5) >> 3)
      {
        bzero(*(void **)(*a1 + 8), 8 * v8);
        v3[1] = v5 + 8 * v8;
      }
      else
      {
        if (a2 >> 61) {
          sub_2483E92E8();
        }
        v18[4] = v3 + 2;
        uint64_t v10 = v9 - v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= a2) {
          uint64_t v11 = a2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        uint64_t v13 = (char *)sub_2483F04AC(v12);
        BOOL v14 = &v13[8 * v6];
        v18[0] = v13;
        v18[1] = v14;
        void v18[3] = &v13[8 * v15];
        bzero(v14, 8 * v8);
        v18[2] = &v14[8 * v8];
        sub_24844C178(v3, v18);
        sub_248465DE8((uint64_t)v18);
      }
    }
  }
}

void sub_248465D08(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F90](v1, 0x1000C40BB8981BBLL);
  _Unwind_Resume(a1);
}

void sub_248465D30(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_248465D84((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_248465D84(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    BOOL result = v5;
    void *v4 = 0;
    if (v5) {
      BOOL result = MEMORY[0x24C579F90](result, 0x1000C40BB8981BBLL);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_248465DE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x24C579F90](v4, 0x1000C40BB8981BBLL);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_248465E54(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  unsigned __int8 v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = **(void **)(v3 + 16);
    unint64_t v6 = *(unsigned char *)(v5 + 4208)
       ? (unint64_t)a2 % *(void *)(*(void *)(v3 + 32) + 88)
       + 8 * (*(void *)(v5 + 4216) % *(void *)(**(void **)(v3 + 24) + 464))
       + ((unint64_t)a2 / *(void *)(*(void *)(v3 + 32) + 88)
        + 8 * (*(void *)(v5 + 4216) / *(void *)(**(void **)(v3 + 24) + 464)))
       * *(void *)(**(void **)(v3 + 24) + 448)
       : a2;
    if (**(void **)(v3 + 40))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = *(void *)(**(void **)(v3 + 8) + 8 * a3);
      uint64_t v10 = a2;
      uint64_t v11 = a2 + 2;
      uint64_t v30 = a2;
      unint64_t v31 = v6;
      uint64_t v29 = v11;
      while (1)
      {
        if (!*(_DWORD *)(*(void *)(v3 + 48) + 12))
        {
          uint64_t v12 = **(void **)(v3 + 16);
          uint64_t v13 = *(void *)(*(void *)(v12 + 5208) + 8 * v10);
          BOOL v14 = *(uint64_t **)(v3 + 56);
          uint64_t v15 = *v14;
          uint64_t v16 = *(void *)(v14[1] + 120) + v11 + *(void *)(v14[1] + 112) * v8;
          uint64_t v17 = **(uint64_t ***)v15;
          if (**(unsigned char **)(v15 + 8)) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = v16;
          }
          uint64_t v19 = *v17;
          unint64_t v20 = (unint64_t *)(*v17 + 40 * v18);
          unint64_t v21 = *(void *)(v12 + 4200);
          unint64_t v22 = __clz(v21) ^ 0x3F;
          if ((v21 & (v21 - 1)) != 0) {
            uint64_t v23 = v22 + 1;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v23)
          {
            sub_248419548((uint64_t)&v32, v20, v23);
            *(void *)(*(void *)(v19 + 40 * v18 + 24) + (*v20 >> 3)) = (v13 << (*v20 & 7)) | *(unsigned __int8 *)(*(void *)(v19 + 40 * v18 + 24) + (*v20 >> 3));
            *v20 += v23;
            sub_2484195C0((uint64_t)&v32, v20, 12, v9);
          }
          uint64_t v10 = v30;
          sub_24844A2B4(*(void *)(*(void *)(v12 + 5184) + v7) + 24 * v30, *(void *)(v12 + 5184) + v7 + 48, (void *)(*(void *)(v12 + 5184) + v7 + 24), (495 * *(_DWORD *)(v12 + 1880)) * v13, v20, 13, v9);
          unint64_t v6 = v31;
          uint64_t v11 = v29;
        }
        uint64_t v24 = **(void ***)(v3 + 24);
        unint64_t v25 = *(uint64_t **)(v3 + 56);
        uint64_t v26 = *v25;
        uint64_t v27 = *(void *)(v25[1] + 120) + v11 + *(void *)(v25[1] + 112) * v8;
        if (**(unsigned char **)(v26 + 8)) {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (unint64_t *)(***(void ***)v26 + 40 * v27);
        int v32 = 5;
        uint64_t v33 = 0;
        unint64_t v34 = v6;
        unint64_t v35 = v8;
        BOOL result = sub_24847C5C4(v24, v28, v9, 14, (uint64_t)&v32);
        if (result) {
          break;
        }
        ++v8;
        v7 += 176;
        if (v8 >= **(void **)(v3 + 40)) {
          return result;
        }
      }
      atomic_store(1u, *(unsigned __int8 **)v3);
    }
  }
  return result;
}

uint64_t sub_2484660C4(uint64_t **a1, unint64_t a2)
{
  return 0;
}

uint64_t sub_2484660E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(**(void **)v4 + 8 * a3);
  uint64_t v7 = **(uint64_t ***)v5;
  if (**(unsigned char **)(v5 + 8)) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = a2 + 1;
  }
  uint64_t v9 = *v7;
  uint64_t v10 = (unint64_t *)(*v7 + 40 * v8);
  uint64_t v11 = **(void **)(v4 + 16);
  unsigned int v12 = a2;
  if (*(unsigned char *)(v11 + 4208)) {
    unsigned int v12 = *(_DWORD *)(v11 + 4216);
  }
  uint64_t v13 = *(void *)(v4 + 24);
  if (!*(_DWORD *)(v13 + 12) && (*(unsigned char *)(v13 + 24) & 0x20) == 0)
  {
    sub_248419548((uint64_t)&v42, (void *)(*v7 + 40 * v8), 2);
    uint64_t v14 = *(void *)(v9 + 40 * v8 + 24);
    *(void *)(v14 + (*v10 >> 3)) = ((unint64_t)*(unsigned __int8 *)(*(void *)(**(void **)(v4 + 32) + 24)
                                                                           + (int)v12) << (*v10 & 7)) | *(unsigned __int8 *)(v14 + (*v10 >> 3));
    *v10 += 2;
    sub_2484195C0((uint64_t)&v42, v10, 8, v6);
    uint64_t v15 = **(void ***)(v4 + 32);
    int v38 = 1;
    uint64_t v39 = 0;
    uint64_t v40 = (int)v12;
    uint64_t v41 = 0;
    sub_24847C5C4(v15, v10, v6, 8, (uint64_t)&v38);
  }
  uint64_t v16 = **(void ***)(v4 + 32);
  int v42 = 2;
  uint64_t v43 = 0;
  uint64_t v44 = (int)v12;
  uint64_t v45 = 0;
  uint64_t result = sub_24847C5C4(v16, v10, v6, 9, (uint64_t)&v42);
  if (!*(_DWORD *)(*(void *)(v4 + 24) + 12))
  {
    uint64_t v18 = **(void ***)(v4 + 16);
    unint64_t v19 = v18[13];
    unint64_t v20 = a2 / v19;
    unint64_t v21 = a2 % v19;
    unint64_t v22 = v18[17];
    unint64_t v23 = v22 * v21;
    unint64_t v24 = v22 * v20;
    unint64_t v26 = v18[9];
    unint64_t v25 = v18[10];
    unint64_t v27 = v23 + v22;
    BOOL v28 = v26 >= v23;
    unint64_t v29 = v26 - v23;
    if (!v28) {
      unint64_t v29 = 0;
    }
    if (v27 <= v26) {
      unint64_t v29 = v22;
    }
    unint64_t v30 = v24 + v22;
    BOOL v28 = v25 >= v24;
    unint64_t v31 = v25 - v24;
    if (!v28) {
      unint64_t v31 = 0;
    }
    if (v30 <= v25) {
      unint64_t v32 = v22;
    }
    else {
      unint64_t v32 = v31;
    }
    unint64_t v33 = v29 * v32;
    unint64_t v34 = __clz(v33) ^ 0x3F;
    if ((v33 & (v33 - 1)) != 0) {
      uint64_t v35 = v34 + 1;
    }
    else {
      uint64_t v35 = v34;
    }
    if (v35)
    {
      sub_248419548((uint64_t)&v42, v10, v35);
      uint64_t v36 = *(void *)(v9 + 40 * v8 + 24);
      *(void *)(v36 + (*v10 >> 3)) = ((*(void *)(***(void ***)(v4 + 32) + 8 * (int)v12) - 1) << (*v10 & 7)) | *(unsigned __int8 *)(v36 + (*v10 >> 3));
      *v10 += v35;
      sub_2484195C0((uint64_t)&v42, v10, 10, v6);
    }
    uint64_t v37 = **(void ***)(v4 + 32);
    int v42 = 3;
    uint64_t v43 = 0;
    uint64_t v44 = (int)v12;
    uint64_t v45 = 0;
    return sub_24847C5C4(v37, v10, v6, 10, (uint64_t)&v42);
  }
  return result;
}

uint64_t sub_248466370(uint64_t **a1, unint64_t a2)
{
  return 0;
}

BOOL sub_248466390(uint64_t a1, uint64_t a2, char ***a3, char ***a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, char ****, uint64_t (*)(char ****, unint64_t), void (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_2484664C4, sub_2484666C4, 0, a2) != 0;
  }
  sub_2484664C4(v7, 1uLL);
  for (unsigned int i = 0; i != v4; ++i)
    sub_2484666C4((uint64_t)v7, i, 0);
  return 0;
}

void **sub_248466444(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3;
        v3 -= 120;
        for (uint64_t i = -16; i != -136; i -= 40)
          sub_2483E8DDC((uint64_t *)&v5[i]);
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2484664C4(char ****a1, unint64_t a2)
{
  uint64_t v2 = **a1;
  int v4 = *v2;
  uint64_t v3 = v2[1];
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v3 - *v2) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unint64_t v19 = &v4[120 * a2];
      while (v3 != v19)
      {
        unint64_t v20 = v3;
        v3 -= 120;
        for (uint64_t i = -16; i != -136; i -= 40)
          sub_2483E8DDC((uint64_t *)&v20[i]);
      }
      v2[1] = v19;
    }
  }
  else
  {
    uint64_t v7 = v2[2];
    if (0xEEEEEEEEEEEEEEEFLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(v2[1], 120 * ((120 * v6 - 120) / 0x78) + 120);
      v2[1] = &v3[120 * ((120 * v6 - 120) / 0x78) + 120];
    }
    else
    {
      if (a2 > 0x222222222222222) {
        sub_2483E92E8();
      }
      unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - v4) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x111111111111111) {
        unint64_t v10 = 0x222222222222222;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 > 0x222222222222222) {
        sub_2483E9338();
      }
      uint64_t v11 = 120 * v10;
      unsigned int v12 = (char *)operator new(120 * v10);
      uint64_t v13 = &v12[120 * v5];
      uint64_t v14 = &v12[v11];
      bzero(v13, 120 * ((120 * v6 - 120) / 0x78) + 120);
      uint64_t v15 = &v13[120 * ((120 * v6 - 120) / 0x78) + 120];
      if (v3 == v4)
      {
        char *v2 = v13;
        v2[1] = v15;
        v2[2] = v14;
      }
      else
      {
        do
        {
          v13 -= 120;
          v3 -= 120;
          sub_2483F0E78((uint64_t)v13, (uint64_t)v3);
        }
        while (v3 != v4);
        uint64_t v3 = *v2;
        uint64_t v16 = v2[1];
        char *v2 = v13;
        v2[1] = v15;
        v2[2] = v14;
        while (v16 != v3)
        {
          uint64_t v17 = v16;
          v16 -= 120;
          for (uint64_t j = -16; j != -136; j -= 40)
            sub_2483E8DDC((uint64_t *)&v17[j]);
        }
      }
      if (v3) {
        operator delete(v3);
      }
    }
  }
  return 0;
}

void sub_2484666C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v199[128] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = *(void **)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v5[11];
    unint64_t v8 = a2 / v7;
    uint64_t v147 = a2;
    unint64_t v9 = v5[17];
    unint64_t v10 = (v9 >> 3) * (a2 % v7);
    unint64_t v12 = v5[9];
    unint64_t v11 = v5[10];
    unint64_t v13 = v10 + (v9 >> 3);
    unint64_t v150 = v10;
    BOOL v14 = v12 >= v10;
    unint64_t v15 = v12 - v10;
    if (!v14) {
      unint64_t v15 = 0;
    }
    unint64_t v16 = (v9 >> 3) * v8;
    if (v13 <= v12) {
      unint64_t v17 = v9 >> 3;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v18 = v16 + (v9 >> 3);
    unint64_t v149 = v16;
    BOOL v14 = v11 >= v16;
    unint64_t v19 = v11 - v16;
    if (!v14) {
      unint64_t v19 = 0;
    }
    unint64_t v20 = v18 <= v11 ? v9 >> 3 : v19;
    unint64_t v155 = v20;
    unint64_t v21 = *(void **)v6;
    if (*(void *)(*(void *)v6 + 5192) != *(void *)(*(void *)v6 + 5184))
    {
      uint64_t v22 = 0;
      unint64_t v144 = 192 * v17 * v155;
      uint64_t v146 = *(void *)(a1 + 8);
      unint64_t v156 = v17;
      do
      {
        uint64_t v148 = v22;
        uint64_t v23 = *(void *)(v21[528] + 8 * v22);
        v188[0] = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v23 + 24))(v23, 0, v147, 0);
        uint64_t v24 = *(void *)(*(void *)(**(void **)(v146 + 16) + 4224) + 8 * v148);
        v188[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v24 + 24))(v24, 1, v147, 0);
        uint64_t v25 = *(void *)(*(void *)(**(void **)(v146 + 16) + 4224) + 8 * v148);
        v188[2] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 24))(v25, 2, v147, 0);
        uint64_t v26 = v146;
        uint64_t v27 = **(void **)(v146 + 24);
        BOOL v28 = (_DWORD *)(v27 + 120 * a3);
        if (!*v28)
        {
          sub_248401528((uint64_t)v196, 0x20u, 0x20u);
          if (v198)
          {
            atomic_store(1u, *(unsigned __int8 **)v146);
            return;
          }
          sub_2483F0E78((uint64_t)v189, (uint64_t)v196);
          sub_2483F7944((uint64_t)v28, (uint64_t)v189);
          uint64_t v29 = 13;
          uint64_t v26 = v146;
          do
          {
            sub_2483E8DDC(&v189[v29]);
            v29 -= 5;
          }
          while (v29 != -2);
          if (!v198)
          {
            for (uint64_t i = 13; i != -2; i -= 5)
              sub_2483E8DDC(&v196[i]);
          }
          uint64_t v27 = **(void **)(v146 + 24);
        }
        uint64_t v31 = *(void *)(v26 + 8);
        uint64_t v32 = *(void *)(v31 + 1560);
        uint64_t v174 = v31;
        uint64_t v33 = *(void *)(v31 + 1568);
        uint64_t v34 = v26;
        uint64_t v35 = *(void *)(*(void *)(**(void **)(v26 + 16) + 5184) + 176 * v148);
        uint64_t v166 = *(void *)(v34 + 32);
        uint64_t v36 = (char **)(v35 + 24 * v147);
        v36[1] = *v36;
        double v187 = v36 + 1;
        unint64_t v180 = v36;
        sub_248430A8C((void **)v36, v144);
        memset(v189, 0, 24);
        unint64_t v37 = v156;
        uint64_t v38 = v166;
        if (v155)
        {
          unint64_t v39 = 0;
          uint64_t v159 = v33 + 4 * v32 * v148;
          uint64_t v40 = (void *)(v27 + 120 * a3);
          uint64_t v153 = v40[3];
          unint64_t v154 = v40[2];
          uint64_t v151 = v40[13];
          uint64_t v152 = v40[8];
          unint64_t v182 = (char **)(v35 + 24 * v147 + 16);
          while (1)
          {
            char v41 = *(unsigned char *)(v38 + 61);
            unint64_t v42 = v39 >> (v41 - byte_248550968[*(unsigned int *)(v38 + 48)]);
            unint64_t v43 = v39 >> (v41 - byte_248550968[*(unsigned int *)(v38 + 52)]);
            v195[0] = v42;
            v195[1] = v43;
            unint64_t v44 = v39 >> (v41 - byte_248550968[*(unsigned int *)(v38 + 56)]);
            v195[2] = v44;
            v194[0] = v153 + v42 * v154;
            v194[1] = v152 + v43 * v154;
            void v194[2] = v151 + v44 * v154;
            if (v42) {
              uint64_t v45 = v153 + (v42 - 1) * v154;
            }
            else {
              uint64_t v45 = 0;
            }
            if (v43) {
              uint64_t v46 = v152 + (v43 - 1) * v154;
            }
            else {
              uint64_t v46 = 0;
            }
            v193[0] = v45;
            v193[1] = v46;
            uint64_t v47 = v151 + (v44 - 1) * v154;
            if (!v44) {
              uint64_t v47 = 0;
            }
            v193[2] = v47;
            unint64_t v48 = v180;
            if (v37) {
              break;
            }
LABEL_130:
            if (++v39 == v155) {
              goto LABEL_131;
            }
          }
          unint64_t v49 = 0;
          unint64_t v169 = *(void *)(v174 + 1616) + *(void *)(v174 + 1608) * (v149 + v39) + v150;
          unint64_t v167 = v39;
          uint64_t v168 = *(void *)(v174 + 1048) + *(void *)(v174 + 1040) * (v149 + v39) + 4 * v150;
          unint64_t v50 = *(void *)(v174 + 176) + *(void *)(v174 + 168) * (v149 + v39) + v150;
          unint64_t v157 = v50;
          while (2)
          {
            unint64_t v51 = *(unsigned __int8 *)(v50 + v49);
            if (v51)
            {
              uint64_t v52 = 0;
              unint64_t v53 = v51 >> 1;
              char v54 = *(unsigned char *)(v38 + 60);
              unint64_t v55 = v49 >> (v54 - byte_248550964[*(unsigned int *)(v38 + 52)]);
              char v56 = byte_248550964[*(unsigned int *)(v38 + 56)];
              v192[0] = v49 >> (v54 - byte_248550964[*(unsigned int *)(v38 + 48)]);
              v192[1] = v55;
              v192[2] = v49 >> (v54 - v56);
              unint64_t v57 = byte_2485534EC[v53];
              unint64_t v173 = v53;
              unint64_t v58 = byte_248553507[v53];
              unint64_t v59 = v58 * v57;
              char v186 = __clz(__rbit64(v58 * v57));
              unint64_t v181 = (v58 * v57) << 6;
              if (v58 >= v57) {
                unint64_t v60 = v57;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v58 <= v57) {
                unint64_t v61 = v57;
              }
              else {
                unint64_t v61 = v58;
              }
              uint64_t v190 = 1;
              int v191 = 2;
              uint64_t v160 = 4 * v59;
              unint64_t v185 = v59 - 1;
              unint64_t v62 = (int8x16_t *)((char *)v199 - 4 * v61);
              unint64_t v63 = 8 * v61;
              unint64_t v165 = 8 * v60;
              unint64_t v177 = v58 * v57;
              int v164 = v59 << 6;
              if (v57 <= 1) {
                unint64_t v57 = 1;
              }
              else {
                unint64_t v57 = v57;
              }
              unint64_t v163 = v57;
              if (v58 <= 1) {
                uint64_t v64 = 1;
              }
              else {
                uint64_t v64 = v58;
              }
              uint64_t v162 = v64;
              uint64_t v161 = 32 * v61;
              unint64_t v158 = 32 * v60 * (unint64_t)v61;
              unint64_t v171 = v60;
              unint64_t v172 = v49;
              unint64_t v170 = (int8x16_t *)((char *)v199 - 4 * v61);
              while (2)
              {
                uint64_t v65 = *((int *)&v190 + v52);
                uint64_t v66 = v192[v65];
                uint64_t v67 = *(unsigned int *)(v38 + 4 * v65 + 48);
                if (v66 << (*(unsigned char *)(v38 + 60) - byte_248550964[v67]) == v49
                  && v195[v65] << (*(unsigned char *)(v38 + 61) - byte_248550968[v67]) == v39)
                {
                  uint64_t v68 = v188[v65];
                  uint64_t v176 = v189[v65];
                  uint64_t v69 = v68 + 4 * v176;
                  uint64_t v70 = v194[v65];
                  unint64_t v178 = *((int *)&v190 + v52);
                  if (v177 == 1)
                  {
                    uint64_t v71 = 0;
                    char v72 = 1;
                    int32x4_t v73 = 0uLL;
                    do
                    {
                      char v74 = v72;
                      int32x4_t v73 = vaddq_s32(v73, vceqzq_s32((int32x4_t)vbicq_s8(*(int8x16_t *)(v69 + 1 * v71), (int8x16_t)xmmword_24854EF80[v71])));
                      uint64_t v71 = 1;
                      char v72 = 0;
                    }
                    while ((v74 & 1) != 0);
                    for (uint64_t j = 1; j != 8; ++j)
                    {
                      uint64_t v76 = 0;
                      char v77 = 1;
                      do
                      {
                        char v78 = v77;
                        int32x4_t v73 = vaddq_s32(v73, vceqzq_s32(*(int32x4_t *)(v69 + 4 * (v76 | (8 * j)))));
                        uint64_t v76 = 4;
                        char v77 = 0;
                      }
                      while ((v78 & 1) != 0);
                    }
                    int v79 = vaddvq_s32(v73) + 64;
                    *(_DWORD *)(v70 + 4 * v66) = v79;
                  }
                  else
                  {
                    bzero(&v197, 0x470uLL);
                    v196[1] = -1;
                    v196[0] = -1;
                    if (v60)
                    {
                      uint64_t v80 = 0;
                      int32x4_t v81 = 0uLL;
                      uint64_t v82 = (int8x16_t *)(v68 + 4 * v176);
                      uint64_t v83 = 4 * (v154 >> 2);
                      uint64_t v85 = v162;
                      unint64_t v84 = v163;
                      uint64_t v86 = v161;
                      do
                      {
                        unint64_t v87 = 0;
                        unint64_t v88 = v62;
                        unsigned int v89 = v82;
                        do
                        {
                          int8x16_t v90 = *v88++;
                          int8x16_t v91 = v90;
                          int8x16_t v92 = *v89++;
                          int32x4_t v81 = vaddq_s32(v81, vceqzq_s32((int32x4_t)vbicq_s8(v92, v91)));
                          v87 += 4;
                        }
                        while (v87 < v63);
                        ++v80;
                        uint64_t v82 = (int8x16_t *)((char *)v82 + v161);
                      }
                      while (v80 != v60);
                    }
                    else
                    {
                      int32x4_t v81 = 0uLL;
                      uint64_t v83 = 4 * (v154 >> 2);
                      uint64_t v85 = v162;
                      unint64_t v84 = v163;
                      uint64_t v86 = v161;
                    }
                    if (v165 > v60)
                    {
                      uint64_t v93 = v68 + v158 + 4 * v176;
                      unint64_t v94 = v60;
                      do
                      {
                        unint64_t v95 = 0;
                        uint64_t v96 = (int32x4_t *)v93;
                        do
                        {
                          int32x4_t v97 = *v96++;
                          int32x4_t v81 = vaddq_s32(v81, vceqzq_s32(v97));
                          v95 += 4;
                        }
                        while (v95 < v63);
                        ++v94;
                        v93 += v86;
                      }
                      while (v94 != v165);
                    }
                    uint64_t v98 = 0;
                    int32x4_t v99 = (_DWORD *)(v70 + 4 * v66);
                    int v79 = vaddvq_s32(v81) + v164;
                    do
                    {
                      int32x4_t v100 = v99;
                      unint64_t v101 = v84;
                      do
                      {
                        *v100++ = (v185 + v79) >> v186;
                        --v101;
                      }
                      while (v101);
                      ++v98;
                      int32x4_t v99 = (_DWORD *)((char *)v99 + v83);
                    }
                    while (v98 != v85);
                  }
                  uint64_t v102 = byte_24854FEF4[v173];
                  uint64_t v103 = qword_24854EFA0[3 * v102 + v178];
                  unint64_t v104 = (unsigned int *)v193[v178];
                  if (v66)
                  {
                    if (v104)
                    {
                      int v105 = v104[v66] + *(_DWORD *)(v70 + 4 * v66 - 4);
                      if (v105 + 1 >= 0) {
                        int v106 = v105 + 1;
                      }
                      else {
                        int v106 = v105 + 2;
                      }
                      unsigned int v107 = v106 >> 1;
                    }
                    else
                    {
                      unsigned int v107 = *(_DWORD *)(v70 + 4 * v66 - 4);
                    }
                  }
                  else if (v104)
                  {
                    unsigned int v107 = *v104;
                  }
                  else
                  {
                    unsigned int v107 = 32;
                  }
                  int v108 = sub_2484092F4((void *)(v174 + 1760), *(unsigned __int8 *)(v169 + v49), *(_DWORD *)(v168 + 4 * v66), v102, v178);
                  if (v107 >= 0x40) {
                    unsigned int v109 = 64;
                  }
                  else {
                    unsigned int v109 = v107;
                  }
                  if (v109 >= 8) {
                    unsigned int v109 = (v109 >> 1) + 4;
                  }
                  int v110 = v108 + v109 * *(_DWORD *)(v174 + 1880);
                  unint64_t v111 = *v187;
                  uint64_t v112 = *v182;
                  uint64_t v175 = v52;
                  if (*v187 >= *v182)
                  {
                    uint64_t v115 = v103;
                    int v116 = *v48;
                    uint64_t v117 = (v111 - *v48) >> 3;
                    unint64_t v118 = v117 + 1;
                    if ((unint64_t)(v117 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    int v183 = v108;
                    if ((v112 - v116) >> 2 > v118) {
                      unint64_t v118 = (v112 - v116) >> 2;
                    }
                    if ((unint64_t)(v112 - v116) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v119 = v118;
                    }
                    unint64_t v120 = (char *)sub_2483F04AC(v119);
                    unint64_t v122 = &v120[8 * v117];
                    *(_DWORD *)unint64_t v122 = 2 * v110;
                    *((_DWORD *)v122 + 1) = v79;
                    uint64_t v123 = v122;
                    if (v111 == v116)
                    {
                      unint64_t v48 = v180;
                      uint64_t v103 = v115;
                    }
                    else
                    {
                      unint64_t v48 = v180;
                      uint64_t v103 = v115;
                      do
                      {
                        uint64_t v124 = *((void *)v111 - 1);
                        v111 -= 8;
                        *((void *)v123 - 1) = v124;
                        v123 -= 8;
                      }
                      while (v111 != v116);
                      unint64_t v111 = *v180;
                    }
                    uint64_t v112 = &v120[8 * v121];
                    int v113 = v122 + 8;
                    *unint64_t v48 = v123;
                    *unint64_t v182 = v112;
                    if (v111)
                    {
                      uint64_t v125 = &v120[8 * v121];
                      operator delete(v111);
                      uint64_t v112 = v125;
                    }
                    unint64_t v114 = v181;
                    int v108 = v183;
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v111 = 2 * v110;
                    *((_DWORD *)v111 + 1) = v79;
                    int v113 = v111 + 8;
                    unint64_t v114 = v181;
                  }
                  *double v187 = v113;
                  if (v177 < v114 && v79)
                  {
                    uint64_t v126 = v159 + (v103 << 8);
                    int v127 = 458 * v108 + 37 * *(_DWORD *)(v174 + 1880);
                    LOBYTE(v128) = v160 >= v79;
                    unint64_t v129 = v177;
                    int v179 = v127;
                    while (1)
                    {
                      int v130 = *(_DWORD *)(v69 + 4 * *(unsigned int *)(v126 + 4 * v129));
                      int v131 = v127
                           + (v128 & 1)
                           + 2 * (word_24854F160[v129 >> v186] + word_24854F0E0[(v185 + v79) >> v186]);
                      int v132 = (2 * v130) ^ (v130 >> 31);
                      if (v113 < v112)
                      {
                        *(_DWORD *)int v113 = 2 * v131;
                        *((_DWORD *)v113 + 1) = v132;
                        uint64_t v133 = v113 + 8;
                        goto LABEL_124;
                      }
                      uint64_t v134 = *v48;
                      uint64_t v135 = (v113 - *v48) >> 3;
                      unint64_t v136 = v135 + 1;
                      if ((unint64_t)(v135 + 1) >> 61) {
                        sub_2483E92E8();
                      }
                      int v184 = v79;
                      uint64_t v137 = v126;
                      if ((v112 - v134) >> 2 > v136) {
                        unint64_t v136 = (v112 - v134) >> 2;
                      }
                      if ((unint64_t)(v112 - v134) >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v138 = v136;
                      }
                      uint64_t v139 = (char *)sub_2483F04AC(v138);
                      uint64_t v141 = &v139[8 * v135];
                      uint64_t v112 = &v139[8 * v140];
                      *(_DWORD *)uint64_t v141 = 2 * v131;
                      *((_DWORD *)v141 + 1) = v132;
                      uint64_t v133 = v141 + 8;
                      if (v113 == v134)
                      {
                        unint64_t v48 = v180;
                        *unint64_t v180 = v141;
                        *unint64_t v182 = v112;
                      }
                      else
                      {
                        unint64_t v48 = v180;
                        do
                        {
                          uint64_t v142 = *((void *)v113 - 1);
                          v113 -= 8;
                          *((void *)v141 - 1) = v142;
                          v141 -= 8;
                        }
                        while (v113 != v134);
                        int v113 = *v180;
                        *unint64_t v180 = v141;
                        *unint64_t v182 = v112;
                        if (!v113) {
                          goto LABEL_123;
                        }
                      }
                      float64x2_t v143 = &v139[8 * v140];
                      operator delete(v113);
                      uint64_t v112 = v143;
LABEL_123:
                      unint64_t v114 = v181;
                      uint64_t v126 = v137;
                      int v79 = v184;
                      int v127 = v179;
LABEL_124:
                      *double v187 = v133;
                      int v128 = v130 != 0;
                      if (++v129 < v114)
                      {
                        int v113 = v133;
                        v79 -= v128;
                        if (v79) {
                          continue;
                        }
                      }
                      break;
                    }
                  }
                  uint64_t v52 = v175;
                  v189[v178] = v176 + v114;
                  uint64_t v38 = v166;
                  unint64_t v39 = v167;
                  unint64_t v60 = v171;
                  unint64_t v49 = v172;
                  unint64_t v62 = v170;
                }
                if (++v52 != 3) {
                  continue;
                }
                break;
              }
              unint64_t v37 = v156;
              unint64_t v50 = v157;
            }
            if (++v49 == v37) {
              goto LABEL_130;
            }
            continue;
          }
        }
LABEL_131:
        uint64_t v22 = v148 + 1;
        unint64_t v21 = **(void ***)(v146 + 16);
      }
      while (v148 + 1 < (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21[649] - v21[648]) >> 4)));
    }
  }
}

void *sub_248467264(void *a1, const void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned __int8 v4 = operator new(0x2530uLL);
  *a1 = v4;
  a1[1] = v4;
  unint64_t v5 = v4 + 1190;
  a1[2] = v4 + 1190;
  uint64_t v6 = 17;
  do
  {
    sub_24842EDD8(v4, a2);
    v4 += 70;
    --v6;
  }
  while (v6);
  a1[1] = v5;
  return a1;
}

void sub_2484672F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_248467310(void *__dst, void *__src)
{
  if (*(_DWORD *)__dst == 7)
  {
    uint64_t v4 = __dst[28];
    if (v4)
    {
      unint64_t v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x24C579F90](v4, 0x10C402FEFCB83);
    }
  }
  memmove(__dst, __src, 0x229uLL);
  if (*(_DWORD *)__dst == 7 && __dst[28]) {
    operator new();
  }
  return __dst;
}

void sub_2484673DC(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F90](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

BOOL sub_248467400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248467980, sub_24846765C, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24846765C((uint64_t)v6, i);
  return 0;
}

BOOL sub_2484674B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248467634, sub_248467560, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_248467560((uint64_t)v6, i);
  return 0;
}

uint64_t sub_248467560(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void ***)(v2 + 16);
    unint64_t v5 = **(void ***)(v2 + 8);
    uint64_t v6 = a2;
    unint64_t v7 = v5[13];
    unint64_t v8 = a2 / v7;
    uint64_t v9 = v5[17];
    unint64_t v10 = v9 * (a2 % v7);
    unint64_t v11 = v5[9];
    unint64_t v12 = v5[10];
    uint64_t v13 = v11 - v10;
    if (v11 < v10) {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v9 * v8;
    v19[0] = v10;
    v19[1] = v14;
    if (v10 + v9 <= v11) {
      uint64_t v15 = v9;
    }
    else {
      uint64_t v15 = v13;
    }
    unint64_t v16 = v14 + v9;
    BOOL v17 = v12 >= v14;
    unint64_t v18 = v12 - v14;
    if (!v17) {
      unint64_t v18 = 0;
    }
    if (v16 <= v12) {
      unint64_t v18 = v9;
    }
    v19[2] = v15;
    unint64_t v19[3] = v18;
    uint64_t result = sub_24847CDD8(*v4, *(void *)(v2 + 24), *(void *)(v2 + 32), v19, a2, 0, (uint64_t)v5);
    if (result
      || (uint64_t result = sub_24847D94C(**(void **)(v2 + 16), (uint64_t)v19, v6, 1, **(void ***)(v2 + 8)), result))
    {
      atomic_store(1u, *(unsigned __int8 **)v2);
    }
  }
  return result;
}

uint64_t sub_248467634(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_24846765C(uint64_t a1, unsigned int a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int ****)(a1 + 8);
  uint64_t v3 = (uint64_t)**v2;
  if (*(_DWORD *)v3)
  {
    uint64_t v4 = 0;
    uint64_t v56 = *(void *)(v3 + 24) + *(void *)(v3 + 16) * a2;
    unint64_t v57 = 8 * a2;
    unint64_t v55 = (unint64_t)a2 << 10;
    unint64_t v5 = 8;
    uint64_t v6 = 2;
    do
    {
      unint64_t v7 = v2[1];
      unint64_t v8 = (unint64_t)v7[8];
      if (v57 + 8 >= (unint64_t)v7[9]) {
        unint64_t v9 = (unint64_t)v7[9];
      }
      else {
        unint64_t v9 = v57 + 8;
      }
      bzero(v58, 0x404uLL);
      unint64_t v10 = v4 + 1;
      if (v57 < v9)
      {
        unint64_t v11 = 8 * v10;
        if (8 * v10 >= v8) {
          unint64_t v11 = v8;
        }
        unint64_t v12 = v2[2];
        unint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        uint64_t v15 = *((void *)v14 + 18);
        uint64_t v16 = v15 + 48 * (int)v13[1];
        uint64_t v17 = *(void *)(v16 + 24);
        uint64_t v18 = *(unsigned int *)(v16 + 16);
        uint64_t v19 = (uint64_t)*v2[3];
        uint64_t v20 = v15 + 48 * (int)v13[v19];
        uint64_t v21 = *(void *)(v20 + 24);
        uint64_t v22 = *(unsigned int *)(v20 + 16);
        if (v8 >= v5) {
          unint64_t v23 = v5;
        }
        else {
          unint64_t v23 = v8;
        }
        uint64_t v24 = v19 << 8;
        uint64_t v25 = v21 + v6 + v55 * v22;
        uint64_t v26 = v22 << 7;
        uint64_t v27 = v17 + v6 + v55 * v18;
        uint64_t v28 = v18 << 7;
        unint64_t v29 = v57;
        do
        {
          if (8 * v4 < v11)
          {
            float v30 = (float)(*(float *)v2[6] * -84.0) + 127.0;
            uint64_t v31 = (uint64_t)*v2[4] + v24 + 4;
            uint64_t v32 = v27;
            uint64_t v33 = v25;
            uint64_t v34 = 8 * v4;
            do
            {
              for (uint64_t i = 0; i != 63; ++i)
              {
                float v36 = (float)(*(_DWORD *)(v31 + 4 * i) * *(__int16 *)(v32 + 2 * i)) * 0.00048828;
                if (fabsf(v36) > 0.00000001)
                {
                  float v37 = (float)(v30 * v36) + (float)((float)*(__int16 *)(v33 + 2 * i) * 84.0);
                  uint64_t v38 = (float *)v2[7];
                  float v39 = *v38;
                  if (v36 <= 0.0) {
                    float v40 = *v38;
                  }
                  else {
                    float v40 = -*v38;
                  }
                  float v41 = v37 + v40;
                  if (v36 <= 0.0) {
                    float v39 = -*v38;
                  }
                  float v42 = (float)(v37 + v39) / v36;
                  float v43 = v41 / v36;
                  if (v43 >= 0.0) {
                    float v44 = v43;
                  }
                  else {
                    float v44 = 0.0;
                  }
                  float v45 = 255.0;
                  if (v42 <= 255.0) {
                    float v45 = v42;
                  }
                  if (v44 <= v45)
                  {
                    unsigned int v46 = vcvtps_s32_f32(v44);
                    ++v58[v46];
                    unsigned int v47 = vcvtms_s32_f32(v45 + 1.0);
                    --v58[v47];
                  }
                }
              }
              ++v34;
              v33 += 128;
              v32 += 128;
            }
            while (v34 != v23);
          }
          ++v29;
          v25 += v26;
          v27 += v28;
        }
        while (v29 != v9);
      }
      uint64_t v48 = 0;
      char v49 = 0;
      int v50 = 0;
      int v51 = 0;
      do
      {
        v50 += v58[v48];
        if (v50 > v51)
        {
          int v51 = v50;
          char v49 = v48;
        }
        ++v48;
      }
      while (v48 != 256);
      unint64_t v52 = 0;
      int v53 = 0;
      do
      {
        if (v52 <= 0x7F) {
          v53 += v58[v52];
        }
        ++v52;
      }
      while (v52 != 256);
      char v54 = v49 - 127;
      if (v51 <= v53 + 1) {
        char v54 = 0;
      }
      *(unsigned char *)(v56 + v4) = v54;
      v5 += 8;
      v6 += 1024;
      ++v4;
    }
    while (v10 < ***v2);
  }
}

uint64_t sub_248467980(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_2484679A8(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t result = sub_2483F26D4(a1 + 104);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return result;
}

void sub_248467A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v12 = *(void **)(v10 + 80);
  if (v12)
  {
    *(void *)(v10 + 88) = v12;
    operator delete(v12);
  }
  sub_2484415B0(&a10);
  uint64_t v13 = *(void **)(v10 + 24);
  if (v13)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_2483F87EC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_248467A50(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    sub_24845C404(i - 176);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_248467AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_248467B20(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_248467BA4(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      sub_2484175A4();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

void *sub_248467C0C()
{
  return &unk_26FC63A00;
}

uint64_t sub_248467C18(uint64_t a1, uint64_t a2)
{
  if (sub_248417674(*(void *)(a2 + 8), (uint64_t)"ZN3jxlL21GetExtraChannelBufferER26JxlChunkedFrameInputSourcemmmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_248467C54(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40))(**(void **)(a1 + 8), *a2);
}

uint64_t sub_248467C70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26FC63BD0;
  a2[1] = v2;
  return result;
}

void *sub_248467C94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_26FC63BD0;
  result[1] = v3;
  return result;
}

void sub_248467CDC()
{
}

unsigned int *sub_248467CF4(unsigned int *result, uint64_t a2)
{
  if (result[1]) {
    BOOL v2 = *result == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v5 = *(char **)(a2 + 24);
    do
    {
      uint64_t result = (unsigned int *)memcpy(v5, (const void *)(*((void *)v3 + 3) + *((void *)v3 + 2) * v4++), 4 * *v3);
      v5 += v6;
    }
    while (v4 < v3[1]);
  }
  return result;
}

void *sub_248467D60()
{
  return &unk_26FC639E0;
}

uint64_t sub_248467D6C(uint64_t a1, uint64_t a2)
{
  if (sub_248417674(*(void *)(a2 + 8), (uint64_t)"ZN3jxlL14GetColorBufferER26JxlChunkedFrameInputSourcemmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_248467DA8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40))(**(void **)(a1 + 8), *a2);
}

uint64_t sub_248467DC4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FC63B20;
  a2[1] = v2;
  return result;
}

void *sub_248467DE8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FC63B20;
  result[1] = v3;
  return result;
}

void sub_248467E30()
{
}

uint64_t sub_248467E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v7 = a2 + 1;
  uint64_t v8 = *(void *)(a1 + 376);
  uint64_t v9 = v8 + 96 * (a2 + 1);
  uint64_t v10 = *(void *)(v9 + 72);
  if (v10 == *(void *)(v9 + 80)) {
    uint64_t v10 = *(void *)(v8 + 96 * v7);
  }
  uint64_t v11 = v8 + 96 * v7;
  *a7 = *(void *)(v11 + 64);
  return v10 + *(void *)(v11 + 64) * a4 + *(void *)(v11 + 56) * a3;
}

__n128 sub_248467E94(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = (__n128 *)(*(void *)(a1 + 376) + 96 * a2);
  __n128 result = v3[7];
  a3[1].n128_u64[0] = v3[8].n128_u64[0];
  *a3 = result;
  return result;
}

uint64_t sub_248467EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = *(uint64_t **)(a1 + 376);
  uint64_t v7 = v6[9];
  if (v7 == v6[10]) {
    uint64_t v7 = *v6;
  }
  *a6 = v6[8];
  return v7 + v6[8] * a3 + v6[7] * a2;
}

__n128 sub_248467EE0(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = *(__n128 **)(a1 + 376);
  __n128 result = v2[1];
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_248467EF8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  unint64_t v3 = v2 - *a2;
  if (v2 == *a2) {
    return 0;
  }
  unint64_t v6 = 0;
  while (1)
  {
    size_t v7 = v3 - v6;
    sub_24848807C(&__dst, a1, 1uLL, v3 - v6);
    uint64_t result = v16;
    if (v16) {
      break;
    }
    uint64_t v9 = __dst;
    uint64_t v10 = (char *)__dst;
    long long v11 = v14;
    uint64_t v12 = v15;
    __dst = 0;
    *(void *)&long long v14 = 0;
    if ((unint64_t)v11 < v7) {
      size_t v7 = v11;
    }
    memcpy(v9, (const void *)(*a2 + v6), v7);
    v10 += v7;
    *(void *)&long long v11 = v11 - v7;
    *((void *)&v11 + 1) += v7;
    sub_24845C478(&v10);
    if (!v16) {
      sub_24845C478(&__dst);
    }
    v6 += v7;
    if (v6 >= v3) {
      return 0;
    }
  }
  return result;
}

char *sub_248467FE0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_2483E92E8();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_2484032DC(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

char *sub_2484680E8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_2484033F4(v7, v12);
    long long v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      uint64_t v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    uint64_t v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    uint64_t v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  char *v13 = &v9[v17];
  return result;
}

uint64_t sub_248468228(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    sub_2484682DC(a1 + 8, *(long long ***)(a2 + 8), *(long long ***)(a2 + 16), 0xF0B7672A07A44C6BLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    sub_248467FE0((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_248468478((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 5);
    sub_248467FE0((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_248467FE0((char *)(a1 + 104), *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  }
  return a1;
}

void sub_2484682DC(uint64_t a1, long long **a2, long long **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(long long ***)a1;
  if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_24846870C((uint64_t *)a1);
    if (a4 > 0x7A44C6AFC2DD9CLL) {
      sub_2483E92E8();
    }
    unint64_t v10 = 0xE16ECE540F4898D6 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x3D226357E16ECELL) {
      unint64_t v11 = 0x7A44C6AFC2DD9CLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_24844CC3C((void *)a1, v11);
    unint64_t v12 = sub_24844CC90(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_248468580(a2, v13, v9);
    unint64_t v12 = sub_24844CC90(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  long long v14 = sub_248468580(a2, a3, v9);
  unint64_t v15 = *(long long ***)(a1 + 8);
  if (v15 != v14)
  {
    unsigned int v16 = v15 - 67;
    do
    {
      uint64_t v17 = *v16;
      if (*v16)
      {
        v16[1] = v17;
        operator delete(v17);
      }
      BOOL v18 = v16 == v14;
      v16 -= 67;
    }
    while (!v18);
  }
  *(void *)(a1 + 8) = v14;
}

void sub_248468468(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_248468470(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_248468478(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 59) {
      sub_2483E92E8();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_24844CBFC(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      BOOL v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    BOOL v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

long long **sub_248468580(long long **a1, long long **a2, long long **a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    while (a3 == v5)
    {
LABEL_29:
      memcpy(a3 + 3, v5 + 3, 0x200uLL);
      v5 += 67;
      a3 += 67;
      if (v5 == a2) {
        return a3;
      }
    }
    size_t v7 = *v5;
    unint64_t v6 = v5[1];
    uint64_t v8 = (char *)v6 - (char *)*v5;
    unint64_t v9 = v8 >> 4;
    uint64_t v10 = (uint64_t)a3[2];
    unint64_t v11 = (char *)*a3;
    if (v8 >> 4 <= (unint64_t)((v10 - (uint64_t)*a3) >> 4))
    {
      long long v14 = a3 + 1;
      unint64_t v15 = (char *)a3[1];
      unint64_t v19 = (v15 - v11) >> 4;
      if (v19 >= v9)
      {
        uint64_t v25 = (char *)*a3;
        while (v7 != v6)
        {
          long long v26 = *v7++;
          *(_OWORD *)uint64_t v25 = v26;
          v25 += 16;
        }
        BOOL v18 = (char *)(v25 - v11);
        unint64_t v15 = v11;
        goto LABEL_28;
      }
      if (v15 != v11)
      {
        uint64_t v20 = 16 * v19;
        uint64_t v21 = *v5;
        do
        {
          long long v22 = *v21++;
          *(_OWORD *)unint64_t v11 = v22;
          v11 += 16;
          v20 -= 16;
        }
        while (v20);
      }
      unint64_t v23 = &v7[v19];
      unsigned int v16 = v15;
      while (v23 != v6)
      {
        long long v24 = *v23++;
        *(_OWORD *)unsigned int v16 = v24;
        v16 += 16;
      }
    }
    else
    {
      if (v11)
      {
        a3[1] = (long long *)v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      if (v8 < 0) {
        sub_2483E92E8();
      }
      uint64_t v12 = v10 >> 3;
      if (v10 >> 3 <= v9) {
        uint64_t v12 = v8 >> 4;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      sub_24844CDF8(a3, v13);
      long long v14 = a3 + 1;
      unint64_t v15 = (char *)a3[1];
      unsigned int v16 = v15;
      if (v7 != v6)
      {
        unsigned int v16 = (char *)a3[1];
        do
        {
          long long v17 = *v7++;
          *(_OWORD *)unsigned int v16 = v17;
          v16 += 16;
        }
        while (v7 != v6);
      }
    }
    BOOL v18 = (char *)(v16 - v15);
LABEL_28:
    *long long v14 = &v18[(void)v15];
    goto LABEL_29;
  }
  return a3;
}

void sub_24846870C(uint64_t *a1)
{
  if (*a1)
  {
    sub_248411584(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL sub_248468748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  v7[0] = sub_2483F1794;
  v7[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v7, sub_248468944, sub_248468938, 0, a2) != 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  do
    sub_248468804(a3, v5++);
  while (v6 != v5);
  return 0;
}

void sub_248468804(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load(*(unsigned __int8 **)a1);
  if ((v2 & 1) == 0)
  {
    sub_248442AEC(&v15, 0x40uLL);
    long long v14 = v15;
    int64_t v13 = v16 - (unsigned char *)v15;
    uint64_t v6 = v7;
    v7[0] = 0;
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    __int16 v11 = 0;
    v7[3] = &v13;
    uint64_t v8 = 0;
    v7[1] = 0;
    void v7[2] = &v14;
    sub_248488474((uint64_t)&v6);
    if (sub_248455DF4(**(void **)(a1 + 8) + 640 * a2, *(void *)(a1 + 16), **(void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), 0, &v6, **(void **)(a1 + 48)))atomic_store(1u, *(unsigned __int8 **)a1); {
    else
    }
      *(void *)(**(void **)(a1 + 56) + 8 * a2) = v8;
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    if (v5) {
      MEMORY[0x24C579F90](v5, 0x80C402FCC0CB6);
    }
    sub_24846896C(v7[0]);
    if (v15)
    {
      unsigned int v16 = v15;
      operator delete(v15);
    }
  }
}

void sub_248468910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484689C0((uint64_t)va);
  unint64_t v4 = *(void **)(v2 - 40);
  if (v4)
  {
    *(void *)(v2 - 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_248468938(uint64_t a1, unsigned int a2)
{
}

uint64_t sub_248468944(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_24846896C(void *a1)
{
  if (a1)
  {
    sub_24846896C(*a1);
    sub_24846896C(a1[1]);
    sub_2483E8DDC(a1 + 8);
    operator delete(a1);
  }
}

uint64_t sub_2484689C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    MEMORY[0x24C579F90](v2, 0x80C402FCC0CB6);
  }
  sub_24846896C(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_248468A0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 640;
    sub_2484414D4(i - 640);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_248468A5C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  unsigned int v16 = (unsigned int *)(a4 + 96);
  unsigned int v15 = *(_DWORD *)(a4 + 96);
  if (!v15)
  {
    long long v17 = *(unsigned int **)(a4 + 416);
    if (v17 == *(unsigned int **)(a4 + 424)) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *v17;
    }
  }
  uint64_t v18 = v15;
  unsigned int v19 = *(_DWORD *)(a4 + 100);
  if (v19)
  {
    uint64_t v20 = *(void *)(a4 + 416);
    uint64_t v21 = *(void *)(a4 + 424);
  }
  else
  {
    uint64_t v20 = *(void *)(a4 + 416);
    uint64_t v21 = *(void *)(a4 + 424);
    if (v20 == v21)
    {
      unsigned int v19 = 0;
      uint64_t v21 = *(void *)(a4 + 416);
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(v20 + 4);
    }
  }
  sub_248469238((uint64_t)v102, v18, v19, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
  int32x4_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  BOOL v22 = *(_DWORD *)(a4 + 272) != 1 || *((unsigned char *)a2 + 1) == 0;
  char v23 = v22;
  if (v22) {
    unint64_t v24 = 3;
  }
  else {
    unint64_t v24 = 1;
  }
  unsigned int v25 = *(_DWORD *)(a4 + 96);
  if (!v25)
  {
    long long v26 = *(unsigned int **)(a4 + 416);
    if (v26 == *(unsigned int **)(a4 + 424)) {
      unsigned int v25 = 0;
    }
    else {
      unsigned int v25 = *v26;
    }
  }
  uint64_t v81 = a3;
  unint64_t v27 = 4 * v24 * (unint64_t)v25;
  unsigned int v28 = *(_DWORD *)(a4 + 100);
  if (!v28)
  {
    uint64_t v29 = *(void *)(a4 + 416);
    if (v29 == *(void *)(a4 + 424)) {
      unsigned int v28 = 0;
    }
    else {
      unsigned int v28 = *(_DWORD *)(v29 + 4);
    }
  }
  size_t v30 = v27 * v28;
  if (v30)
  {
    sub_2483EE8AC((unint64_t *)&v99, v30);
    uint64_t v31 = v99;
    uint64_t v32 = v100;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = 0;
  }
  *(_OWORD *)long long __p = 0u;
  long long v98 = 0u;
  int8x16_t v90 = 0;
  long long v88 = 0u;
  memset(v89, 0, sizeof(v89));
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  uint64_t v33 = *(void *)(a4 + 88);
  uint64_t v35 = *(void *)(v33 + 328);
  uint64_t v34 = *(void *)(v33 + 336);
  if (v35 != v34)
  {
    uint64_t v36 = v35;
    while (*(_DWORD *)(v36 + 12))
    {
      v36 += 96;
      if (v36 == v34) {
        goto LABEL_42;
      }
    }
    if (*(unsigned char *)(v36 + 72))
    {
      uint64_t v37 = v35 + 96;
      do
      {
        if (*(_DWORD *)(v37 - 84)) {
          BOOL v38 = v37 == v34;
        }
        else {
          BOOL v38 = 1;
        }
        v37 += 96;
      }
      while (!v38);
    }
  }
LABEL_42:
  int v79 = a7;
  unint64_t v39 = 0;
  unint64_t v40 = v32 - (void)v31;
  long long v106 = 0uLL;
  long long v107 = 0uLL;
  float v41 = v16;
  do
  {
    *((void *)&v106 + v39) = v41;
    BOOL v42 = v39++ >= 2;
    if (v42) {
      char v43 = 0;
    }
    else {
      char v43 = v23;
    }
    v41 += 10;
  }
  while ((v43 & 1) != 0);
  uint64_t v80 = a8;
  int v44 = sub_2483F80DC(&v106, v24, 32, 1, 0, v27, a6, (uint64_t)v31, v40, (uint64_t)__p);
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&v85 + i));
  unsigned int v46 = v99;
  if (!v44)
  {
    uint64_t v95 = 0;
    uint64_t v94 = 0;
    int v93 = v24;
    int v96 = 0;
    sub_248469350(v102, 0, (uint64_t)v99, v100 - (void)v99, (long long *)&v93);
    uint64_t v48 = *(unsigned int **)(a4 + 416);
    unsigned int v47 = *(unsigned int **)(a4 + 424);
    if (v47 == v48)
    {
LABEL_67:
      long long v55 = a2[3];
      long long v87 = a2[2];
      long long v88 = v55;
      *(_OWORD *)&v89[0].__r_.__value_.__l.__data_ = a2[4];
      LODWORD(v89[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 20);
      long long v56 = a2[1];
      long long v85 = *a2;
      long long v86 = v56;
      if (*((char *)a2 + 111) < 0) {
        sub_248410EE0(&v89[1], *((void **)a2 + 11), *((void *)a2 + 12));
      }
      else {
        v89[1] = *(std::string *)((char *)a2 + 88);
      }
      int8x16_t v90 = 0;
      int8x16_t v91 = 0;
      int8x16_t v92 = 0;
      uint64_t v57 = *((void *)a2 + 14);
      uint64_t v58 = *((void *)a2 + 15);
      *(void *)&long long v106 = &v90;
      BYTE8(v106) = 0;
      if (v58 != v57)
      {
        unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((v58 - v57) >> 3);
        if (v59 >= 0x666666666666667) {
          sub_2483E92E8();
        }
        unint64_t v60 = (char *)sub_248403444(v59);
        int8x16_t v90 = v60;
        int8x16_t v91 = v60;
        int8x16_t v92 = &v60[40 * v61];
        unint64_t v62 = v60;
        do
        {
          *(void *)unint64_t v62 = &unk_26FC659D8;
          long long v63 = *(_OWORD *)(v57 + 8);
          *(_OWORD *)(v62 + 17) = *(_OWORD *)(v57 + 17);
          *(_OWORD *)(v62 + 8) = v63;
          v57 += 40;
          v62 += 40;
          v60 += 40;
        }
        while (v57 != v58);
        int8x16_t v91 = v62;
      }
      *(void *)&long long v88 = *(void *)(a4 + 40);
      BYTE8(v88) = *(unsigned char *)(a4 + 57);
      HIDWORD(v88) = *(_DWORD *)(a4 + 60);
      *(std::string::size_type *)((char *)&v89[0].__r_.__value_.__r.__words[1] + 4) = *(void *)(a4 + 48);
      std::string::operator=(&v89[1], (const std::string *)(a4 + 64));
      sub_248442AEC(__p, 0x40uLL);
      unint64_t v84 = (char *)__p[0];
      int64_t v83 = (char *)__p[1] - (char *)__p[0];
      *(void *)&long long v106 = (char *)&v106 + 8;
      *((void *)&v106 + 1) = 0;
      uint64_t v113 = 0;
      unint64_t v110 = 0;
      unint64_t v111 = 0;
      __int16 v112 = 0;
      int v108 = &v83;
      uint64_t v109 = 0;
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = &v84;
      sub_248488474((uint64_t)&v106);
      if (!sub_248455DF4(a1, &v85, v81, v102, a5, a6, &v106, v80))
      {
        sub_248488418(&v106);
        int v105 = v84;
        if (v111 >= v110)
        {
          unint64_t v64 = v83;
        }
        else
        {
          do
          {
            if (!v113)
            {
              *((void *)&v107 + 1) = &v105;
              int v108 = &v83;
              sub_248488474((uint64_t)&v106);
            }
            unint64_t v64 = v83;
            if (!v83)
            {
              uint64_t v65 = v105;
              uint64_t v67 = __p[0];
              uint64_t v66 = (char *)__p[1];
              size_t v68 = (char *)__p[1] - (char *)__p[0];
              if ((char *)__p[1] - (char *)__p[0] < 1)
              {
                if ((v68 & 0x8000000000000000) != 0)
                {
                  uint64_t v66 = (char *)__p[0] + 2 * v68;
                  __p[1] = v66;
                }
                uint64_t v69 = __p[0];
              }
              else
              {
                sub_2483EE8AC((unint64_t *)__p, v68);
                uint64_t v69 = __p[0];
                uint64_t v66 = (char *)__p[1];
              }
              int v105 = &v69[v65 - v67];
              unint64_t v64 = v66 - v69 - (v65 - v67);
              int64_t v83 = v64;
            }
          }
          while (v111 < v110);
        }
        uint64_t v71 = __p[0];
        uint64_t v70 = (char *)__p[1];
        if ((char *)__p[1] - (char *)__p[0] >= v64)
        {
          if ((char *)__p[1] - (char *)__p[0] > (char *)__p[1] - (char *)__p[0] - v64)
          {
            uint64_t v70 = (char *)__p[1] - v64;
            __p[1] = (char *)__p[1] - v64;
          }
        }
        else
        {
          sub_2483EE8AC((unint64_t *)__p, -(uint64_t)v64);
          uint64_t v71 = __p[0];
          uint64_t v70 = (char *)__p[1];
        }
        if (v70 != v71)
        {
          size_t v72 = v70 - v71;
          unint64_t v73 = v70 - v71 + v79[1] + 1;
          sub_2484106F0(v79 + 1, v73);
          unint64_t v74 = v79[3];
          if (v74) {
            unint64_t v75 = v73;
          }
          else {
            unint64_t v75 = 0;
          }
          v79[1] = v75;
          unint64_t v76 = *v79;
          memcpy((void *)(v74 + (*v79 >> 3)), v71, v72);
          *(unsigned char *)(v79[3] + v72 + (v76 >> 3)) = 0;
          *v79 += 8 * v72;
        }
      }
      uint64_t v77 = v113;
      uint64_t v113 = 0;
      if (v77) {
        MEMORY[0x24C579F90](v77, 0x80C402FCC0CB6);
      }
      sub_24846896C(*((void **)&v106 + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(void *)&long long v106 = &v90;
      sub_2483FDB3C((void ***)&v106);
      if (SHIBYTE(v89[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89[1].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v50 = 1;
      while (1)
      {
        uint64_t v51 = *v16;
        if (!v51)
        {
          if (v48 == v47) {
            uint64_t v51 = 0;
          }
          else {
            uint64_t v51 = *v48;
          }
        }
        uint64_t v52 = *(unsigned int *)(a4 + 100);
        if (!v52)
        {
          if (v48 == v47) {
            uint64_t v52 = 0;
          }
          else {
            uint64_t v52 = v48[1];
          }
        }
        unint64_t v53 = 4 * v51;
        sub_248442AEC(&v106, 4 * v51 * v52);
        __p[0] = (void *)(*(void *)(a4 + 416) + v49);
        long long v85 = 0u;
        long long v86 = 0u;
        int v54 = sub_2483F80DC(__p, 1uLL, 32, 1, 0, v53, a6, v106, *((void *)&v106 + 1) - v106, (uint64_t)&v85);
        if (!v54) {
          sub_248469350(v102, v50, v106, *((void *)&v106 + 1) - v106, &xmmword_24854F1E0);
        }
        if ((void)v106)
        {
          *((void *)&v106 + 1) = v106;
          operator delete((void *)v106);
        }
        if (v54) {
          break;
        }
        uint64_t v48 = *(unsigned int **)(a4 + 416);
        unsigned int v47 = *(unsigned int **)(a4 + 424);
        v49 += 40;
        BOOL v42 = v50++ >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v48) >> 3);
        if (v42) {
          goto LABEL_67;
        }
      }
    }
  }
  if (v46) {
    operator delete(v46);
  }
  *(void *)&long long v85 = &v104;
  sub_24846941C((void ***)&v85);
  return sub_248453364((uint64_t)&v103);
}

void sub_24846916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2484689C0(v49 - 192);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_24844C804((uint64_t)&a19);
  if (a46) {
    operator delete(a46);
  }
  sub_2484694A8((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_248469238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_26FC66248;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  uint64_t v5 = (void *)(a1 + 376);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v6 = a4 + 1;
  if (a4 != -1)
  {
    sub_24846963C(v5, a4 + 1);
    size_t v7 = *(char **)(a1 + 384);
    size_t v8 = 96 * ((96 * v6 - 96) / 0x60uLL) + 96;
    bzero(v7, v8);
    *(void *)(a1 + 384) = &v7[v8];
  }
  return a1;
}

void sub_248469334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_24846941C(&a9);
  sub_248453364(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_248469350(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, long long *a5)
{
  uint64_t v5 = a1[47];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[48] - v5) >> 5) <= a2) {
    return 0;
  }
  uint64_t v10 = (void *)(v5 + 96 * a2);
  long long v12 = *a5;
  uint64_t v13 = *((void *)a5 + 2);
  sub_2484694EC((uint64_t)v10, (uint64_t)&v12, *a1, a1[1]);
  *uint64_t v10 = a3;
  v10[1] = a4;
  if ((v10[6] - 1) * v10[8] + v10[7] * v10[5] > a4) {
    return 0;
  }
  if (a2) {
    sub_248469554(a1[47] + 96 * a2);
  }
  return 1;
}

void sub_24846941C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2484694A8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 376);
  sub_24846941C(&v3);
  sub_248453364(a1 + 72);
  return a1;
}

uint64_t sub_2484694EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  *(void *)(result + 32) = v4;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = a4;
  uint64_t v5 = *(unsigned int *)(result + 20);
  if (v5 > 5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = qword_24854F4F0[v5];
  }
  unint64_t v7 = (v6 * (unint64_t)*(unsigned int *)(result + 16)) >> 3;
  *(void *)(result + 56) = v7;
  unint64_t v8 = v7 * a3;
  unint64_t v9 = *(void *)(result + 32);
  if (v9 >= 2) {
    unint64_t v8 = (v9 + v8 - 1) / v9 * v9;
  }
  *(void *)(result + 64) = v8;
  return result;
}

double sub_248469554(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (*(void *)a1)
  {
    size_t v3 = *(void *)(a1 + 8);
    uint64_t v7 = 0;
    long long v6 = 0uLL;
    sub_2484695C0(&v6, v1, (uint64_t)v1 + v3, v3);
    uint64_t v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(void *)(a1 + 80) = v4;
      operator delete(v4);
    }
    double result = *(double *)&v6;
    *(_OWORD *)(a1 + 72) = v6;
    *(void *)(a1 + 88) = v7;
    *(void *)a1 = 0;
  }
  return result;
}

void *sub_2484695C0(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    long long v6 = result;
    double result = sub_2483F0278(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248469620(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24846963C(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_2483E92E8();
  }
  uint64_t v3 = 3 * a2;
  double result = (char *)operator new(96 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v3];
  return result;
}

uint64_t sub_24846968C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7, int a8, float a9, __n128 a10, int8x16_t a11, double a12, __n128 *a13)
{
  uint64_t v13 = *(void *)(result + 40);
  uint64_t v14 = *(void *)(result + 8 * (3 * a3 + a2) + 72);
  if (a2 != 1 && a5 * a4 >= 4)
  {
    *(float *)&a12 = (float)a5;
    float32x4_t v15 = vmlaq_n_f32(*a6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0), (float)a4 * -0.00744);
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    a11 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v15), (int8x16_t)v16, (int8x16_t)v15);
    *a6 = (float32x4_t)a11;
  }
  if (a5)
  {
    unint64_t v17 = 0;
    unsigned int v19 = (float32x4_t *)(v13 + 4 * v14);
    float v20 = (float)((float)a8 * a9) * a10.n128_f32[0];
    uint64_t v21 = 8 * a5;
    unint64_t v22 = 4 * a5;
    uint64_t v23 = 32 * a4;
    do
    {
      double result = v17 >= v22;
      if (a4)
      {
        unint64_t v24 = 0;
        double result = 2 * (v17 >= v22);
        unsigned int v25 = (int8x16_t *)&xmmword_248551A90;
        long long v26 = v19;
        unint64_t v27 = a7;
        unsigned int v28 = a13;
        do
        {
          if (a4 == 1)
          {
            a10.n128_u32[0] = a6->u32[result | 1];
            a11.i32[0] = a6->i32[2 * (v17 >= v22)];
            float32x4_t v29 = (float32x4_t)vbslq_s8(*v25, (int8x16_t)vdupq_lane_s32((int32x2_t)a10.n128_u64[0], 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a11.i8, 0));
          }
          else
          {
            size_t v30 = &a6->f32[result | (v24 >= 4 * a4)];
            float32x4_t v29 = vld1q_dup_f32(v30);
          }
          float32x4_t v31 = *v26++;
          float32x4_t v32 = v31;
          float32x4_t v33 = *v27++;
          float32x4_t v34 = vmulq_f32(vmulq_n_f32(v32, v20), v33);
          int8x16_t v35 = (int8x16_t)vcgeq_f32(vabsq_f32(v34), v29);
          a11 = (int8x16_t)vrndnq_f32(v34);
          a10 = (__n128)vcvtq_s32_f32((float32x4_t)vandq_s8(a11, v35));
          *v28++ = a10;
          v24 += 4;
          ++v25;
        }
        while (v24 < 8 * a4);
      }
      ++v17;
      a13 = (__n128 *)((char *)a13 + v23);
      a7 = (float32x4_t *)((char *)a7 + v23);
      unsigned int v19 = (float32x4_t *)((char *)v19 + v23);
    }
    while (v17 != v21);
  }
  return result;
}

void sub_2484697D8()
{
  int v0 = MEMORY[0x270FA5388]();
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v8 = v3;
  unint64_t v9 = v2;
  uint64_t v10 = v1;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v2->i32[0] = v1->i32[0];
      return;
    case 4:
      v11.i32[0] = v1->i32[0];
      v11.f32[1] = v1->f32[1] * 0.90176;
      v12.i32[0] = v1[4].i32[0];
      v12.f32[1] = v1[4].f32[1] * 0.90176;
      float32x2_t v13 = vmul_f32(v12, (float32x2_t)vdup_n_s32(0x3F66DA05u));
      int32x2_t v14 = (int32x2_t)vadd_f32(v11, v13);
      int32x2_t v15 = (int32x2_t)vsub_f32(v11, v13);
      v13.i32[0] = vdup_lane_s32(v14, 1).u32[0];
      float32x2_t v16 = (float32x2_t)vzip1_s32(v14, v15);
      v13.i32[1] = v15.i32[1];
      *(float32x2_t *)v2->f32 = vadd_f32(v16, v13);
      *(float32x2_t *)&v2->f32[v3] = vsub_f32(v16, v13);
      return;
    case 5:
      uint64_t v17 = 0;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        float32x4_t v18 = *v10;
        v10 += 8;
        *(&v110 + v17) = vmulq_f32(vmulq_n_f32(v18, *((float *)&xmmword_2484DCDB0 + v17)), (float32x4_t)xmmword_2484DCDB0);
        ++v17;
      }
      while (v17 != 4);
      sub_248407054(&v110, 4, (uint64_t)&v99, 4, v103);
      float32x2x2_t v19 = (float32x2x2_t)vzip1q_s32(v99, v101);
      int32x4_t v20 = vzip1q_s32(v100, v102);
      float32x2x2_t v21 = (float32x2x2_t)vzip2q_s32(v99, v101);
      int32x4_t v22 = vzip2q_s32(v100, v102);
      uint64_t v23 = &v110;
      vst2_f32(v23->f32, v19);
      *(int32x4_t *)++uint64_t v23 = vzip2q_s32((int32x4_t)v19, v20);
      unint64_t v24 = (float *)&v112;
      vst2_f32(v24, v21);
      int32x4_t v113 = vzip2q_s32((int32x4_t)v21, v22);
      sub_248407054(&v110, 4, (uint64_t)v9, v8, v103);
      return;
    case 6:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      v2->i32[0] = vadd_f32(v4, v5).u32[0];
      v2->i32[v3] = vsub_f32(v4, v5).u32[0];
      return;
    case 7:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      *(int32x2_t *)v2->f32 = vzip1_s32((int32x2_t)vadd_f32(v4, v5), (int32x2_t)vsub_f32(v4, v5));
      return;
    case 8:
      sub_24844F598(1, (__int32 *)&v110, v3, (uint64_t)v2, &v100, (float32x2_t)*(_OWORD *)&vmulq_f32(*v1, (float32x4_t)xmmword_2484DCDB0), 0.00624292809, v6, v7);
      return;
    case 9:
      float32x4_t v110 = vmulq_f32(*v1, (float32x4_t)xmmword_2484DCDB0);
      int32x4_t v99 = (int32x4_t)v110;
      sub_24844F598(1, v99.i32, 1, (uint64_t)&v110, &v100, *(float32x2_t *)v110.f32, 0.00624292809, v6, v7);
      int32x4_t v99 = (int32x4_t)v110;
      *unint64_t v9 = v110;
      return;
    case 10:
      uint64_t v25 = 0;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      char v26 = 1;
      do
      {
        char v27 = v26;
        *(&v110 + v25) = vmulq_f32(vmulq_n_f32(v1[8 * v25], flt_2484DDA30[v25]), (float32x4_t)xmmword_2484DCDB0);
        uint64_t v25 = 1;
        char v26 = 0;
      }
      while ((v27 & 1) != 0);
      uint64_t v28 = 0;
      int32x4_t v99 = (int32x4_t)vaddq_f32(v110, v111);
      int32x4_t v100 = (int32x4_t)vsubq_f32(v110, v111);
      char v29 = 1;
      do
      {
        uint64_t v30 = 0;
        char v31 = v29;
        uint64_t v32 = v28;
        float32x4_t v33 = (float32x4_t *)(&v99 + v28);
        do
        {
          v110.i32[v32] = v33->i32[v30++];
          v32 += 2;
        }
        while (v30 != 4);
        char v29 = 0;
        uint64_t v28 = 1;
      }
      while ((v31 & 1) != 0);
      sub_24844F644(2, (float32x2_t *)&v110, v3, (uint64_t)v2, (float32x2_t *)&v101);
      return;
    case 11:
      uint64_t v34 = 0;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      char v35 = 1;
      do
      {
        char v36 = v35;
        *(&v110 + v34) = vmulq_f32(vmulq_n_f32(v1[8 * v34], flt_2484DDA30[v34]), (float32x4_t)xmmword_2484DCDB0);
        uint64_t v34 = 1;
        char v35 = 0;
      }
      while ((v36 & 1) != 0);
      uint64_t v37 = 0;
      char v38 = 1;
      do
      {
        uint64_t v39 = 0;
        char v40 = v38;
        uint64_t v41 = v37;
        BOOL v42 = &v110 + v37;
        do
        {
          v99.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        char v38 = 0;
        uint64_t v37 = 1;
      }
      while ((v40 & 1) != 0);
      sub_24844F644(2, (float32x2_t *)&v99, 2, (uint64_t)&v110, (float32x2_t *)&v101);
      float32x4x2_t v143 = vld2q_f32(v110.f32);
      *unint64_t v9 = vaddq_f32(v143.val[0], v143.val[1]);
      *(float32x4_t *)((char *)v9 + 4 * v8) = vsubq_f32(v143.val[0], v143.val[1]);
      return;
    case 18:
      uint64_t v43 = 0;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      int v44 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v45 = 0;
        unsigned int v46 = (const float *)xmmword_24854FDE0 + v43;
        float32x4_t v47 = vld1q_dup_f32(v46);
        do
        {
          v44[v45] = vmulq_f32(vmulq_f32(v10[v45], v47), (float32x4_t)xmmword_24854FDE0[v45]);
          ++v45;
        }
        while (v45 != 2);
        ++v43;
        v44 += 2;
        v10 += 16;
      }
      while (v43 != 8);
      uint64_t v93 = v3;
      uint64_t v94 = v2;
      uint64_t v48 = (float32x4_t *)v105;
      uint64_t v97 = 8;
      long long v98 = &v110;
      uint64_t v95 = 8;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B100, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v105);
      uint64_t v97 = 8;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      int v96 = &v110;
      sub_2484065E0(&v97, &v95);
      uint64_t v97 = 8;
      long long v98 = &v110;
      uint64_t v49 = sub_24846B100;
      goto LABEL_51;
    case 19:
      uint64_t v50 = 0;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      uint64_t v51 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v52 = 0;
        unint64_t v53 = (const float *)&xmmword_2484DCDB0 + v50;
        float32x4_t v54 = vld1q_dup_f32(v53);
        do
        {
          v51[v52] = vmulq_f32(vmulq_f32(v10[v52], v54), (float32x4_t)xmmword_24854FDE0[v52]);
          ++v52;
        }
        while (v52 != 2);
        ++v50;
        v51 += 2;
        v10 += 16;
      }
      while (v50 != 4);
      uint64_t v97 = 8;
      long long v98 = &v110;
      uint64_t v95 = 8;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B174, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v104);
      uint64_t v97 = 8;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 4;
      int v96 = &v110;
      sub_248405F04(&v97, &v95);
      sub_248405FAC(&v110, 4, v9, v8, v104);
      return;
    case 20:
      uint64_t v55 = 0;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      long long v56 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v57 = 0;
        uint64_t v58 = (const float *)&xmmword_2484DCDB0 + v55;
        float32x4_t v59 = vld1q_dup_f32(v58);
        do
        {
          v56[v57] = vmulq_f32(vmulq_f32(v10[v57], v59), (float32x4_t)xmmword_24854FDE0[v57]);
          ++v57;
        }
        while (v57 != 2);
        ++v55;
        v56 += 2;
        v10 += 16;
      }
      while (v55 != 4);
      uint64_t v93 = v3;
      uint64_t v94 = v2;
      uint64_t v48 = v104;
      uint64_t v97 = 8;
      long long v98 = &v110;
      uint64_t v95 = 4;
      int v96 = (float32x4_t *)&v99;
      sub_248405F04(&v97, &v95);
      sub_248405FAC((float32x4_t *)&v99, 4, &v110, 4, v104);
      uint64_t v97 = 4;
      long long v98 = &v110;
      uint64_t v95 = 8;
      int v96 = (float32x4_t *)&v99;
      sub_248407100(&v97, &v95);
      uint64_t v97 = 8;
      long long v98 = (float32x4_t *)&v99;
      unint64_t v60 = sub_24846B174;
      goto LABEL_50;
    case 21:
      uint64_t v61 = &v110;
      bzero(&v110, 0x400uLL);
      for (uint64_t i = 0; i != 16; ++i)
      {
        uint64_t v63 = 0;
        unint64_t v64 = (const float *)xmmword_24854FE00 + i;
        float32x4_t v65 = vld1q_dup_f32(v64);
        do
        {
          v61[v63] = vmulq_f32(vmulq_f32(v10[v63], v65), (float32x4_t)xmmword_24854FE00[v63]);
          ++v63;
        }
        while (v63 != 4);
        v61 += 4;
        v10 += 32;
      }
      uint64_t v93 = v8;
      uint64_t v94 = v9;
      uint64_t v48 = (float32x4_t *)v107;
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v95 = 16;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B08C, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v107);
      uint64_t v97 = 16;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      int v96 = &v110;
      sub_248406244(&v97, &v95);
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v49 = sub_24846B08C;
      goto LABEL_68;
    case 22:
      uint64_t v66 = 0;
      long long v141 = 0u;
      long long v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      uint64_t v67 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v68 = 0;
        uint64_t v69 = (const float *)xmmword_24854FDE0 + v66;
        float32x4_t v70 = vld1q_dup_f32(v69);
        do
        {
          v67[v68] = vmulq_f32(vmulq_f32(v10[v68], v70), (float32x4_t)xmmword_24854FE00[v68]);
          ++v68;
        }
        while (v68 != 4);
        ++v66;
        v67 += 4;
        v10 += 32;
      }
      while (v66 != 8);
      uint64_t v93 = v3;
      uint64_t v94 = v2;
      uint64_t v48 = (float32x4_t *)v106;
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v95 = 16;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B100, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v106);
      uint64_t v97 = 16;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      int v96 = &v110;
      sub_24840632C(&v97, &v95);
      uint64_t v97 = 8;
      long long v98 = &v110;
      unint64_t v60 = sub_24846B08C;
LABEL_50:
      uint64_t v49 = v60;
LABEL_51:
      uint64_t v71 = 8;
      goto LABEL_75;
    case 23:
      uint64_t v72 = 0;
      long long v141 = 0u;
      long long v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      int32x4_t v113 = 0u;
      long long v112 = 0u;
      unint64_t v73 = &v110;
      float32x4_t v111 = 0u;
      float32x4_t v110 = 0u;
      do
      {
        uint64_t v74 = 0;
        unint64_t v75 = (const float *)xmmword_24854FDE0 + v72;
        float32x4_t v76 = vld1q_dup_f32(v75);
        do
        {
          v73[v74] = vmulq_f32(vmulq_f32(v10[v74], v76), (float32x4_t)xmmword_24854FE00[v74]);
          ++v74;
        }
        while (v74 != 4);
        ++v72;
        v73 += 4;
        v10 += 32;
      }
      while (v72 != 8);
      uint64_t v93 = v3;
      uint64_t v94 = v2;
      uint64_t v48 = (float32x4_t *)v106;
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v95 = 8;
      int v96 = (float32x4_t *)&v99;
      sub_24840632C(&v97, &v95);
      uint64_t v97 = 8;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 8;
      int v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B08C, (uint64_t)&v97, (uint64_t)&v95, 8, (uint64_t)v106);
      uint64_t v97 = 8;
      long long v98 = &v110;
      uint64_t v95 = 16;
      int v96 = (float32x4_t *)&v99;
      sub_248406414(&v97, &v95);
      uint64_t v97 = 16;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v77 = sub_24846B100;
      goto LABEL_67;
    case 24:
      char v78 = &v110;
      bzero(&v110, 0x1000uLL);
      for (uint64_t j = 0; j != 32; ++j)
      {
        uint64_t v80 = 0;
        uint64_t v81 = (const float *)xmmword_24854FE40 + j;
        float32x4_t v82 = vld1q_dup_f32(v81);
        do
        {
          v78[v80] = vmulq_f32(vmulq_f32(v10[v80], v82), (float32x4_t)xmmword_24854FE40[v80]);
          ++v80;
        }
        while (v80 != 8);
        v78 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      uint64_t v94 = v9;
      uint64_t v48 = (float32x4_t *)v109;
      uint64_t v97 = 32;
      long long v98 = &v110;
      uint64_t v95 = 32;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AF00, (uint64_t)&v97, (uint64_t)&v95, 32, (uint64_t)v109);
      uint64_t v97 = 32;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 32;
      int v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)&v97, (uint64_t)&v95, 32, 32);
      uint64_t v97 = 32;
      long long v98 = &v110;
      uint64_t v49 = sub_24846AF00;
      goto LABEL_74;
    case 25:
      int64_t v83 = &v110;
      bzero(&v110, 0x800uLL);
      for (uint64_t k = 0; k != 16; ++k)
      {
        uint64_t v85 = 0;
        long long v86 = (const float *)xmmword_24854FE00 + k;
        float32x4_t v87 = vld1q_dup_f32(v86);
        do
        {
          v83[v85] = vmulq_f32(vmulq_f32(v10[v85], v87), (float32x4_t)xmmword_24854FE40[v85]);
          ++v85;
        }
        while (v85 != 8);
        v83 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      uint64_t v94 = v9;
      uint64_t v48 = (float32x4_t *)v108;
      uint64_t v97 = 32;
      long long v98 = &v110;
      uint64_t v95 = 32;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846B08C, (uint64_t)&v97, (uint64_t)&v95, 32, (uint64_t)v108);
      uint64_t v97 = 32;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      int v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)&v97, (uint64_t)&v95, 16, 32);
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v77 = sub_24846AF00;
LABEL_67:
      uint64_t v49 = v77;
LABEL_68:
      uint64_t v71 = 16;
      goto LABEL_75;
    case 26:
      long long v88 = &v110;
      bzero(&v110, 0x800uLL);
      for (uint64_t m = 0; m != 16; ++m)
      {
        uint64_t v90 = 0;
        int8x16_t v91 = (const float *)xmmword_24854FE00 + m;
        float32x4_t v92 = vld1q_dup_f32(v91);
        do
        {
          v88[v90] = vmulq_f32(vmulq_f32(v10[v90], v92), (float32x4_t)xmmword_24854FE40[v90]);
          ++v90;
        }
        while (v90 != 8);
        v88 += 8;
        v10 += 64;
      }
      uint64_t v93 = v8;
      uint64_t v94 = v9;
      uint64_t v48 = (float32x4_t *)v108;
      uint64_t v97 = 32;
      long long v98 = &v110;
      uint64_t v95 = 16;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)&v97, (uint64_t)&v95, 16, 32);
      uint64_t v97 = 16;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v95 = 16;
      int v96 = &v110;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AF00, (uint64_t)&v97, (uint64_t)&v95, 16, (uint64_t)v108);
      uint64_t v97 = 16;
      long long v98 = &v110;
      uint64_t v95 = 32;
      int v96 = (float32x4_t *)&v99;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)&v97, (uint64_t)&v95, 32, 16);
      uint64_t v97 = 32;
      long long v98 = (float32x4_t *)&v99;
      uint64_t v49 = sub_24846B08C;
LABEL_74:
      uint64_t v71 = 32;
LABEL_75:
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49, (uint64_t)&v97, (uint64_t)&v93, v71, (uint64_t)v48);
      break;
    default:
      return;
  }
}

double sub_24846A674(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x2_t v5 = a3 + 8;
  uint64_t v9 = 8;
  uint64_t v10 = a3;
  sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AE1C, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  uint64_t v9 = 8;
  uint64_t v10 = a3;
  uint64_t v7 = 4;
  uint64_t v8 = a2;
  sub_248405F04(&v9, &v7);
  uint64_t v9 = 4;
  uint64_t v10 = a3;
  sub_248408240(4, a2, &v9, v5);
  uint64_t v9 = 4;
  uint64_t v10 = a3;
  uint64_t v7 = 8;
  uint64_t v8 = a2;
  *(void *)&double result = sub_248407100(&v9, &v7).u64[0];
  return result;
}

void sub_24846A724(void *a1, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&a4[256];
    uint64_t v10 = a4 + 512;
    uint64_t v11 = (uint64_t)&a4[384];
    float32x2_t v12 = a4 + 1;
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v13 = 0;
      int32x2_t v14 = (float32x4_t *)(a1[1] + v7);
      uint64_t v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        int32x2_t v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      float32x2_t v16 = a4;
      for (uint64_t i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_24843D0F8(v9, v10);
      float32x4_t v18 = a4;
      for (uint64_t j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (uint64_t k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_24854FBE0[k]);
      sub_24843D0F8(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      uint64_t v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      int32x4_t v22 = a4;
      do
      {
        float32x4_t *v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      uint64_t v23 = 0;
      unint64_t v24 = v12;
      do
      {
        *unint64_t v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (uint64_t m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_24846A914(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      uint64_t v11 = 0;
      float32x2_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        float32x2_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_24843D0F8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24846A9E0(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 1024);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      uint64_t v11 = 0;
      float32x2_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        float32x2_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_24843D234(a4, v10);
      for (uint64_t i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_24846AAC0(void *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 12;
    uint64_t v7 = 8;
    uint64_t v8 = 4;
    do
    {
      if (a4)
      {
        uint64_t v9 = 0;
        for (unint64_t i = 0; i < a4; i += 4)
        {
          uint64_t v11 = result[1];
          int32x4_t v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          int32x4_t v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          int32x4_t v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          int32x4_t v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          int32x4_t v17 = vzip1q_s32(v13, v15);
          float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          int32x4_t v19 = vzip2q_s32(v13, v15);
          int32x4_t v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          uint64_t v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          int32x4_t v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_24846ABA4(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 512);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_24843D368(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24846AC70(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 128);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2484085D8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24846AD3C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 256);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2484084A4(a4, v10);
      for (uint64_t i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_24846AE1C(void *result, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      uint64_t v14 = 0;
      float32x4_t v15 = (float32x4_t *)(result[1] + v4);
      uint64_t v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      uint64_t v17 = 0;
      float32x4_t v18 = *a4;
      float32x4_t v19 = a4[1];
      float32x4_t v21 = a4[2];
      float32x4_t v20 = a4[3];
      float32x4_t v22 = vaddq_f32(*a4, v20);
      float32x4_t v23 = vaddq_f32(v19, v21);
      float32x4_t v24 = vaddq_f32(v22, v23);
      float32x4_t v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      float32x4_t v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      float32x4_t v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      float32x4_t v28 = vaddq_f32(v26, v27);
      float32x4_t v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      float32x4_t v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_24846AF00(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = a4 + 32;
    uint64_t v10 = a4 + 16;
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v11 = 0;
      uint64_t v13 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      uint64_t v16 = (float32x4_t *)(v12 + v7);
      uint64_t v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        uint64_t v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 16);
      uint64_t v18 = v12 + 4 * v13;
      for (uint64_t i = 16; i != 32; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_248406BF8(a4, 4, a4, 4, v9);
      for (uint64_t j = 0; j != -15; --j)
        a4[j + 31] = vaddq_f32(a4[j + 31], a4[j + 30]);
      *uint64_t v10 = vmulq_f32(*v10, v27);
      sub_248406BF8(v10, 4, v10, 4, v9);
      uint64_t v22 = 0;
      uint64_t v23 = v15 + 124 * v14;
      do
      {
        v21.i32[0] = dword_24854F61C[v22];
        float32x4_t v24 = &a4[v22];
        float32x4_t v25 = v24[16];
        float32x4_t v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 16);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_24846B08C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406BF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24846B100(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248405FAC((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24846B174(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248407054((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24846B1E8(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v463 = *MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(a2 + 80);
  unint64_t v9 = *(void *)(a2 + 88);
  unint64_t v11 = a1 / v9;
  unint64_t v12 = a1 % v9;
  unint64_t v13 = *(void *)(a2 + 136);
  unint64_t v14 = v13 >> 3;
  unint64_t v15 = (v13 >> 3) * v12;
  unint64_t v16 = (v13 >> 3) * v11;
  unint64_t v17 = *(void *)(a2 + 72);
  unint64_t v18 = v15 + (v13 >> 3);
  unint64_t v383 = v15;
  _CF = v17 >= v15;
  unint64_t v20 = v17 - v15;
  if (!_CF) {
    unint64_t v20 = 0;
  }
  if (v18 <= v17) {
    unint64_t v21 = v13 >> 3;
  }
  else {
    unint64_t v21 = v20;
  }
  unint64_t v388 = v21;
  unint64_t v22 = v10 - v16;
  if (v10 < v16) {
    unint64_t v22 = 0;
  }
  if (v16 + (v13 >> 3) > v10) {
    unint64_t v14 = v22;
  }
  unint64_t v381 = (v13 >> 3) * v11;
  unint64_t v382 = v14;
  unint64_t v23 = a3[2];
  atomic_fetch_add_explicit(&qword_2693193B8, 1uLL, memory_order_relaxed);
  unint64_t v24 = (unint64_t)malloc_type_malloc(0xC0100uLL, 0xFBCB090DuLL);
  if (v24)
  {
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFF80;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFF80) + 256;
    *(void *)(v25 + 240) = v24;
    *(void *)(v25 + 248) = 786432;
  }
  else
  {
    unint64_t v26 = 0;
  }
  v446[2] = 0;
  unint64_t v427 = v26;
  v446[0] = v26;
  v446[1] = 0;
  atomic_fetch_add_explicit(&qword_2693193B8, 1uLL, memory_order_relaxed);
  unint64_t v27 = (unint64_t)malloc_type_malloc(0x143100uLL, 0xFBCB090DuLL);
  float32x4_t v28 = (void *)a2;
  uint64_t v442 = a5;
  uint64_t v440 = a4;
  if (v27)
  {
    unint64_t v29 = v27 & 0xFFFFFFFFFFFFFF80;
    unint64_t v30 = (v27 & 0xFFFFFFFFFFFFFF80) + 256;
    *(void *)(v29 + 240) = v27;
    *(void *)(v29 + 248) = 1323008;
  }
  else
  {
    unint64_t v30 = 0;
  }
  v445[2] = 0;
  unint64_t v434 = (float32x4_t *)v30;
  v445[0] = v30;
  v445[1] = 0;
  uint64_t v449 = 0;
  memset(v448, 0, sizeof(v448));
  uint64_t v426 = *(void *)(a2 + 4272);
  if (v426)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v448;
    do
    {
      uint64_t v33 = 0;
      uint64_t v34 = v32;
      do
      {
        uint64_t v35 = *(void *)(v28[528] + 8 * v31);
        *uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v35 + 24))(v35, v33, a1, 0);
        v34 += 11;
        ++v33;
        float32x4_t v28 = (void *)a2;
      }
      while (v33 != 3);
      ++v31;
      uint64_t v32 = (_OWORD *)((char *)v32 + 8);
    }
    while (v31 != v426);
  }
  if (v382)
  {
    unint64_t v36 = 0;
    unint64_t v37 = v23 >> 2;
    unint64_t v376 = v383 >> 3;
    uint64_t v378 = v440 + v13 * v12;
    uint64_t v377 = v442 + v13 * v11;
    int v425 = v28 + 534;
    unint64_t v38 = (v388 + 7) >> 3;
    uint64_t v418 = (uint64_t)&v434[57344];
    uint64_t v409 = (uint64_t)&v434[0x10000];
    uint64_t v417 = (uint64_t)&v434[51200];
    uint64_t v408 = (uint64_t)&v434[53248];
    uint64_t v416 = (uint64_t)&v434[49664];
    uint64_t v407 = (uint64_t)&v434[50176];
    unint64_t v438 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v410 = (uint64_t)&v434[49168];
    uint64_t v406 = (uint64_t)&v434[49408];
    uint64_t v415 = (uint64_t)&v434[49280];
    uint64_t v421 = (uint64_t)&v434[49216];
    uint64_t v419 = (uint64_t)&v434[49184];
    uint64_t v428 = v434 + 49160;
    if (v38 <= 1) {
      unint64_t v38 = 1;
    }
    unint64_t v387 = v38;
    uint64_t v39 = 16 * v37;
    uint64_t v375 = 16 * v37 + 16;
    uint64_t v40 = 4 * v37;
    uint64_t v420 = &v434->i8[4];
    uint64_t v414 = v434 + 2;
    v41.i32[1] = 1059313418;
    float64x2_t v396 = (float64x2_t)vdupq_n_s64(0x3FE147AE147AE148uLL);
    float32x4_t v42 = (float32x4_t)vdupq_n_s32(0x3F0A3D71u);
    int8x16_t v395 = (int8x16_t)v42;
    uint64_t v439 = v23 >> 2;
    uint64_t v399 = 8 * v37;
    uint64_t v405 = 16 * v37;
    while (1)
    {
      unint64_t v43 = v36 + v381;
      uint64_t v44 = v28[131];
      uint64_t v45 = v28[130];
      uint64_t v46 = v28[141];
      uint64_t v47 = v28[140];
      uint64_t v48 = v28[146];
      uint64_t v49 = v28[145];
      unint64_t v384 = v36;
      uint64_t v50 = a3[2] * (v377 + 8 * v36);
      uint64_t v51 = a3[8] + v50 + 4 * v378;
      v447[0] = a3[3] + v50 + 4 * v378;
      v447[1] = v51;
      v447[2] = a3[13] + v50 + 4 * v378;
      uint64_t v52 = a6[2] * v43;
      uint64_t v53 = a6[8] + v52 + 4 * v383;
      v446[3] = a6[3] + v52 + 4 * v383;
      v446[4] = v53;
      v446[5] = a6[13] + v52 + 4 * v383;
      if (v388 + 7 >= 8) {
        break;
      }
LABEL_309:
      unint64_t v36 = v384 + 1;
      float32x4_t v28 = (void *)a2;
      if (v384 + 1 == v382) {
        goto LABEL_310;
      }
    }
    uint64_t v394 = 0;
    uint64_t v54 = 0;
    uint64_t v404 = v44 + v45 * v43 + 4 * v383;
    unint64_t v55 = (v381 >> 3) + (v384 >> 3);
    unint64_t v385 = v48 + v49 * v55 + v376;
    unint64_t v386 = v46 + v47 * v55 + v376;
    unint64_t v402 = *(void *)(a2 + 176) + *(void *)(a2 + 168) * v43 + v383;
    uint64_t v392 = v39;
    uint64_t v393 = 16;
    uint64_t v391 = v375;
    unint64_t v56 = 8;
    while (1)
    {
      unint64_t v389 = v56;
      uint64_t v390 = v54;
      if (v388 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v388;
      }
      unint64_t v403 = v57;
      unint64_t v58 = 8 * v54;
      unint64_t v59 = 8 * v54 + 8;
      if (v388 < v59) {
        unint64_t v59 = v388;
      }
      if (v58 < v59) {
        break;
      }
LABEL_308:
      uint64_t v54 = v390 + 1;
      unint64_t v56 = v389 + 8;
      v391 += 256;
      v392 += 256;
      v393 += 256;
      v394 += 256;
      if (v390 + 1 == v387) {
        goto LABEL_309;
      }
    }
    v41.i32[0] = *(_DWORD *)(a2 + 1204);
    v42.f32[0] = *(float *)(a2 + 1212) + (float)((float)*(char *)(v385 + v54) * v41.f32[0]);
    v41.f32[0] = *(float *)(a2 + 1208) + (float)((float)*(char *)(v386 + v54) * v41.f32[0]);
    float32x4_t v41 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0));
    float32x4_t v42 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0));
    float32x4_t v397 = v42;
    float32x4_t v398 = v41;
    uint64_t v60 = v394;
    uint64_t v412 = v392;
    uint64_t v413 = v393;
    uint64_t v411 = v391;
    while (1)
    {
      unint64_t v432 = v58;
      unint64_t v61 = *(unsigned __int8 *)(v402 + v58);
      unint64_t v62 = v61 >> 1;
      unint64_t v444 = (v61 >> 1) & 0xFFFFFFFEFFFFFFFFLL | ((v61 & 1) << 32);
      if (v61)
      {
        uint64_t v63 = 0;
        unint64_t v64 = byte_2485534EC[v62];
        unint64_t v65 = byte_248553507[v62];
        if (v65 >= v64) {
          unint64_t v66 = byte_2485534EC[v62];
        }
        else {
          unint64_t v66 = byte_248553507[v62];
        }
        unsigned int v400 = v65;
        unsigned int v401 = v64;
        if (v65 <= v64) {
          unint64_t v65 = v64;
        }
        unint64_t v443 = v66;
        unint64_t v441 = v65;
        unint64_t v67 = v66 * (unint64_t)v65;
        int v423 = *(_DWORD *)(v404 + 4 * v58);
        unint64_t v68 = v67 << 6;
        uint64_t v461 = 0x100000000;
        int v462 = 2;
        uint64_t v424 = 8 * v58;
        int v422 = v67 << 8;
        uint64_t v69 = v434;
        float32x4_t v70 = v434 + 49152;
        unint64_t v437 = v67 << 6;
        do
        {
          uint64_t v71 = *((int *)&v461 + v63);
          uint64_t v72 = v447[v71];
          unint64_t v73 = (float32x4_t *)(v72 + 4 * v424);
          uint64_t v74 = (float32x4_t *)((char *)v69 + 4 * (int)v68 * (uint64_t)(int)v71);
          switch((int)v444)
          {
            case 0:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v450, (uint64_t)v459, 8, v410);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 8;
              v451.i64[1] = (uint64_t)&v434[49152];
              sub_2484065E0(v459, &v451);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)&v434[49152];
              v451.i64[0] = 8;
              float32x4_t v70 = v434 + 49152;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v459, (uint64_t)&v451, 8, v410);
              goto LABEL_181;
            case 1:
              uint64_t v212 = 0;
              char v213 = 1;
              do
              {
                uint64_t v214 = 0;
                char v215 = v213;
                char v216 = 1;
                uint64_t v217 = ((4 * v212) | 1) * v439 + 1;
                uint64_t v218 = 8 * v212;
                uint64_t v219 = v405 * v212;
                uint64_t v220 = v72 + v405 * v212;
                uint64_t v221 = (uint64_t)&v69[2 * v212] + v422 * (uint64_t)(int)v71;
                uint64_t v222 = v72 + v60 + v219;
                do
                {
                  char v223 = v216;
                  uint64_t v224 = 4 * v214;
                  uint64_t v225 = 16 * v214;
                  float v226 = 0.0;
                  uint64_t v227 = 4;
                  uint64_t v228 = v220 + 16 * v214;
                  do
                  {
                    float v226 = (float)((float)((float)(v226 + COERCE_FLOAT(*(_OWORD *)(v228 + v60)))
                                         + COERCE_FLOAT(HIDWORD(*(void *)(v228 + v60))))
                                 + COERCE_FLOAT(*(void *)(v228 + v60 + 8)))
                         + COERCE_FLOAT(HIDWORD(*(_OWORD *)(v228 + v60)));
                    v228 += v40;
                    --v227;
                  }
                  while (v227);
                  uint64_t v229 = v217 + v224;
                  uint64_t v230 = v214 | v218;
                  unint64_t v231 = (float *)(v221 + v224);
                  uint64_t v232 = v222 + v225;
                  do
                  {
                    uint64_t v233 = 0;
                    uint64_t v234 = v231;
                    do
                    {
                      if (v227 != 1 || v233 != 4) {
                        float *v234 = *(float *)(v232 + v233) - v73->f32[v229];
                      }
                      v233 += 4;
                      v234 += 2;
                    }
                    while (v233 != 16);
                    ++v227;
                    v231 += 16;
                    v232 += v40;
                  }
                  while (v227 != 4);
                  char v216 = 0;
                  *(__int32 *)((char *)v74->i32 + ((4 * v230) | 0x48)) = v74->i32[v230];
                  v74->f32[v230] = v226 * 0.0625;
                  uint64_t v214 = 1;
                }
                while ((v223 & 1) != 0);
                char v213 = 0;
                uint64_t v212 = 1;
              }
              while ((v215 & 1) != 0);
              float v235 = v74->f32[0];
              float v236 = v74->f32[1];
              float v237 = v74[2].f32[0];
              float v238 = v74[2].f32[1];
              float v239 = v74->f32[0] + v236;
              v74->f32[0] = (float)((float)(v239 + v237) + v238) * 0.25;
              v74->f32[1] = (float)((float)(v239 - v237) - v238) * 0.25;
              float v240 = v235 - v236;
              float v171 = (float)((float)(v240 + v237) - v238) * 0.25;
              float v172 = (float)((float)(v240 - v237) + v238) * 0.25;
              goto LABEL_144;
            case 2:
              for (uint64_t i = 1; i != 9; i += 2)
              {
                long long v140 = (const float *)(v72 + v60);
                float32x4x2_t v464 = vld2q_f32(v140);
                long long v141 = (const float *)(v72 + v40 + v60);
                float32x4x2_t v465 = vld2q_f32(v141);
                float32x4_t v142 = vaddq_f32(v464.val[0], v464.val[1]);
                float32x4_t v143 = vaddq_f32(vaddq_f32(v142, v465.val[0]), v465.val[1]);
                float32x4_t v144 = vsubq_f32(vsubq_f32(v142, v465.val[0]), v465.val[1]);
                v464.val[0] = vsubq_f32(v464.val[0], v464.val[1]);
                v464.val[1] = vsubq_f32(vaddq_f32(v464.val[0], v465.val[0]), v465.val[1]);
                v464.val[0] = vaddq_f32(vsubq_f32(v464.val[0], v465.val[0]), v465.val[1]);
                __asm { FMOV            V2.4S, #0.25 }
                uint64_t v147 = &v459[i];
                v147[-1] = vmulq_f32(v143, v465.val[0]);
                float32x4_t *v147 = vmulq_f32(v144, v465.val[0]);
                v147[7] = vmulq_f32(v464.val[1], v465.val[0]);
                v147[8] = vmulq_f32(v464.val[0], v465.val[0]);
                v72 += v399;
              }
              uint64_t v148 = 0;
              v74[12] = v459[12];
              v74[13] = v459[13];
              v74[14] = v459[14];
              v74[15] = v459[15];
              v74[8] = v459[8];
              v74[9] = v459[9];
              v74[10] = v459[10];
              v74[11] = v459[11];
              uint64_t v74[4] = v459[4];
              v74[5] = v459[5];
              v74[6] = v459[6];
              v74[7] = v459[7];
              *uint64_t v74 = v459[0];
              v74[1] = v459[1];
              v74[2] = v459[2];
              v74[3] = v459[3];
              char v149 = 1;
              do
              {
                uint64_t v150 = 0;
                char v151 = v149;
                uint64_t v152 = 16 * v148;
                uint64_t v153 = 8 * v148;
                char v154 = 1;
                do
                {
                  char v155 = v154;
                  uint64_t v156 = (8 * v150) | (4 * v152);
                  float v157 = *(float *)((char *)v74->f32 + v156);
                  float v158 = *(float *)((char *)v74->f32 + (v156 | 4));
                  float v159 = *(float *)((char *)v74->f32 + (v156 | 0x20));
                  float v160 = *(float *)((char *)v74->f32 + (v156 | 0x24));
                  float v161 = (float)((float)(v157 + v158) + v159) + v160;
                  float v162 = (float)((float)(v157 + v158) - v159) - v160;
                  float v163 = v157 - v158;
                  uint64_t v164 = v150 | v153;
                  v459[0].f32[v164] = v161 * 0.25;
                  *(float *)((char *)v459[0].f32 + ((4 * v164) | 8)) = v162 * 0.25;
                  *(float *)((char *)v459[0].f32 + ((4 * v164) | 0x40)) = (float)((float)(v163 + v159) - v160) * 0.25;
                  *(float *)((char *)v459[0].f32 + ((4 * v164) | 0x48)) = (float)((float)(v163 - v159) + v160) * 0.25;
                  uint64_t v150 = 1;
                  char v154 = 0;
                }
                while ((v155 & 1) != 0);
                char v149 = 0;
                uint64_t v148 = 1;
              }
              while ((v151 & 1) != 0);
              for (uint64_t j = 0; j != 8; j += 2)
                v74[j] = v459[j];
              float v166 = v74->f32[1];
              float v167 = v74[2].f32[0];
              float v168 = v74[2].f32[1];
              float v169 = v74->f32[0] + v166;
              float v170 = v74->f32[0] - v166;
              float v171 = (float)((float)(v170 + v167) - v168) * 0.25;
              v74->f32[0] = (float)((float)(v169 + v167) + v168) * 0.25;
              v74->f32[1] = (float)((float)(v169 - v167) - v168) * 0.25;
              float v172 = (float)((float)(v170 - v167) + v168) * 0.25;
LABEL_144:
              v74[2].f32[0] = v171;
              v74[2].f32[1] = v172;
              break;
            case 3:
              uint64_t v86 = v63;
              uint64_t v194 = 0;
              uint64_t v429 = (uint64_t)v69 + v422 * (uint64_t)(int)v71;
              char v195 = 1;
              do
              {
                uint64_t v196 = 0;
                char v435 = v195;
                uint64_t v197 = &v73->i8[4 * v194 * v438];
                uint64_t v198 = v429 + 32 * v194;
                char v199 = 1;
                do
                {
                  char v200 = v199;
                  long long v201 = v459;
                  sub_24843C88C(v439, (float32x4_t *)&v197[16 * v196], (int32x4_t *)v459, (uint64_t)&v434[49152]);
                  uint64_t v202 = 0;
                  uint64_t v203 = (_DWORD *)(v198 + 4 * v196);
                  do
                  {
                    uint64_t v204 = 0;
                    uint64_t v205 = v203;
                    do
                    {
                      *uint64_t v205 = v201->i32[v204];
                      v205 += 2;
                      ++v204;
                    }
                    while (v204 != 4);
                    ++v202;
                    v203 += 16;
                    ++v201;
                  }
                  while (v202 != 4);
                  char v199 = 0;
                  uint64_t v196 = 1;
                }
                while ((v200 & 1) != 0);
                char v195 = 0;
                uint64_t v194 = 1;
              }
              while ((v435 & 1) != 0);
              float v206 = v74->f32[0];
              float v207 = v74->f32[1];
              float v208 = v74[2].f32[0];
              float v209 = v74[2].f32[1];
              float v210 = v74->f32[0] + v207;
              v74->f32[0] = (float)((float)(v210 + v208) + v209) * 0.25;
              v74->f32[1] = (float)((float)(v210 - v208) - v209) * 0.25;
              float v211 = v206 - v207;
              v74[2].f32[0] = (float)((float)(v211 + v208) - v209) * 0.25;
              v74[2].f32[1] = (float)((float)(v211 - v208) + v209) * 0.25;
              uint64_t v69 = v434;
              float32x4_t v70 = v434 + 49152;
              goto LABEL_164;
            case 4:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v450, (uint64_t)v459, 16, v421);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 16;
              v451.i64[1] = (uint64_t)&v434[49152];
              sub_248406244(v459, &v451);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)&v434[49152];
              v451.i64[0] = 16;
              float32x4_t v70 = v434 + 49152;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v459, (uint64_t)&v451, 16, v421);
              goto LABEL_181;
            case 5:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v450, (uint64_t)v459, 32, v406);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 32, 32);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v459, (uint64_t)&v451, 32, v406);
              goto LABEL_181;
            case 6:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v450, (uint64_t)v459, 8, v419);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 16;
              v451.i64[1] = (uint64_t)&v434[49152];
              sub_248406414(v459, &v451);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)&v434[49152];
              v451.i64[0] = 16;
              float32x4_t v70 = v434 + 49152;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v459, (uint64_t)&v451, 16, v419);
              goto LABEL_181;
            case 7:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v450, (uint64_t)v459, 16, v419);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 8;
              v451.i64[1] = (uint64_t)v74;
              sub_24840632C(v459, &v451);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 8;
              float32x4_t v70 = v434 + 49152;
              v451.i64[1] = (uint64_t)&v434[49152];
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v459, (uint64_t)&v451, 8, v419);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)&v434[49152];
              v451.i64[0] = 16;
              v451.i64[1] = (uint64_t)v74;
              sub_248406414(v459, &v451);
              goto LABEL_181;
            case 8:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v450, (uint64_t)v459, 8, v421);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)&v434[49152];
              sub_24843C928(v459, &v451);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)&v434[49152];
              v451.i64[0] = 32;
              float32x4_t v70 = v434 + 49152;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v459, (uint64_t)&v451, 32, v421);
              goto LABEL_181;
            case 9:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AC70, (uint64_t)v450, (uint64_t)v459, 32, v421);
              uint64_t v125 = 0;
              char v126 = 1;
              do
              {
                char v127 = v126;
                long long v128 = (int32x4_t *)&v70[2 * v125];
                unint64_t v129 = -4;
                uint64_t v130 = (uint64_t)&v434[v125 + 4] + v422 * (uint64_t)(int)v71;
                do
                {
                  int32x4_t v131 = v128[8];
                  int32x4_t v132 = v128[16];
                  int32x4_t v133 = v128[24];
                  float32x2x2_t v134 = (float32x2x2_t)vzip1q_s32(*v128, v132);
                  int32x4_t v135 = vzip1q_s32(v131, v133);
                  float32x2x2_t v136 = (float32x2x2_t)vzip2q_s32(*v128, v132);
                  int32x4_t v137 = vzip2q_s32(v131, v133);
                  long long v138 = (float *)(v130 - 64);
                  vst2_f32(v138, v134);
                  vst2_f32((float *)v130, v136);
                  *(int32x4_t *)(v130 - 32) = vzip2q_s32((int32x4_t)v134, v135);
                  *(int32x4_t *)(v130 + 32) = vzip2q_s32((int32x4_t)v136, v137);
                  v129 += 4;
                  ++v128;
                  v130 += 128;
                }
                while (v129 < 0x1C);
                char v126 = 0;
                uint64_t v125 = 1;
              }
              while ((v127 & 1) != 0);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 8;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v459, (uint64_t)&v451, 8, v421);
              v459[0].i64[0] = 8;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v74;
              sub_24843C928(v459, &v451);
              goto LABEL_181;
            case 10:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v450, (uint64_t)v459, 16, v415);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 32, 16);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v459, (uint64_t)&v451, 32, v415);
              goto LABEL_181;
            case 11:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AD3C, (uint64_t)v450, (uint64_t)v459, 32, v415);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 16;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 16, 32);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 16;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v459, (uint64_t)&v451, 16, v415);
              v459[0].i64[0] = 16;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 32, 16);
              goto LABEL_181;
            case 12:
              uint64_t v86 = v63;
              uint64_t v116 = 0;
              uint64_t v117 = (uint64_t)v69 + v422 * (uint64_t)(int)v71;
              char v118 = 1;
              do
              {
                char v119 = v118;
                v451.i64[0] = v439;
                v451.i64[1] = (uint64_t)v73->i64 + 4 * v116 * v438;
                sub_24846A674((uint64_t)&v451, v459, v70);
                uint64_t v120 = 0;
                long long v121 = (float32x4_t *)(v117 + 32 * v116);
                do
                {
                  float32x4_t v122 = v459[v120 + 1];
                  *long long v121 = v459[v120];
                  v121[1] = v122;
                  v121 += 4;
                  v120 += 2;
                }
                while (v120 != 8);
                char v118 = 0;
                uint64_t v116 = 1;
              }
              while ((v119 & 1) != 0);
              float v123 = v74->f32[0];
              float v124 = v74[2].f32[0];
              v74->f32[0] = (float)(v74->f32[0] + v124) * 0.5;
              v74[2].f32[0] = (float)(v123 - v124) * 0.5;
              goto LABEL_163;
            case 13:
              uint64_t v430 = v63;
              uint64_t v265 = 0;
              uint64_t v436 = (uint64_t)v69 + v422 * (uint64_t)(int)v71;
              char v266 = 1;
              do
              {
                char v267 = v266;
                v451.i64[0] = 4;
                v451.i64[1] = (uint64_t)v459;
                sub_248408240(v439, &v73[v265], &v451, v428);
                v451.i64[0] = 4;
                v451.i64[1] = (uint64_t)v459;
                v450[0].i64[0] = 8;
                v450[0].i64[1] = (uint64_t)&v434[49152];
                sub_248407100(&v451, v450);
                v451.i64[0] = 8;
                v451.i64[1] = (uint64_t)&v434[49152];
                v450[0].i64[0] = 8;
                v450[0].i64[1] = (uint64_t)v459;
                sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AE1C, (uint64_t)&v451, (uint64_t)v450, 8, (uint64_t)v428);
                uint64_t v268 = 0;
                uint64_t v269 = (float32x4_t *)(v436 + 32 * v265);
                do
                {
                  float32x4_t v270 = v459[v268 + 1];
                  *uint64_t v269 = v459[v268];
                  v269[1] = v270;
                  v269 += 4;
                  v268 += 2;
                }
                while (v268 != 8);
                char v266 = 0;
                uint64_t v265 = 1;
              }
              while ((v267 & 1) != 0);
              float v271 = v74->f32[0];
              float v272 = v74[2].f32[0];
              v74->f32[0] = (float)(v74->f32[0] + v272) * 0.5;
              v74[2].f32[0] = (float)(v271 - v272) * 0.5;
              uint64_t v69 = v434;
              float32x4_t v70 = v434 + 49152;
              unint64_t v68 = v437;
              uint64_t v63 = v430;
              break;
            case 14:
              uint64_t v96 = 0;
              long long v457 = 0u;
              long long v458 = 0u;
              long long v455 = 0u;
              long long v456 = 0u;
              long long v453 = 0u;
              long long v454 = 0u;
              uint64_t v97 = (float32x4_t *)(v72 + v60);
              float32x4_t v451 = 0u;
              long long v452 = 0u;
              do
              {
                *(float32x4_t *)((char *)&v451 + v96) = *v97;
                v96 += 16;
                uint64_t v97 = (float32x4_t *)((char *)v97 + v40);
              }
              while (v96 != 64);
              unint64_t v98 = 0;
              int32x4_t v99 = (float32x4_t *)&unk_24854F660;
              do
              {
                uint64_t v100 = 0;
                float32x4_t v101 = 0uLL;
                do
                {
                  float32x4_t v101 = vmlaq_n_f32(v101, v99[v100 * 4], v451.f32[v100]);
                  ++v100;
                }
                while (v100 != 16);
                v450[v98] = v101;
                ++v99;
                _CF = v98++ >= 3;
              }
              while (!_CF);
              uint64_t v102 = 0;
              uint64_t v103 = v450;
              uint64_t v104 = &v69->i32[(int)v68 * (uint64_t)(int)v71];
              do
              {
                uint64_t v105 = 0;
                long long v106 = v104;
                do
                {
                  *long long v106 = v103->i32[v105];
                  v106 += 2;
                  ++v105;
                }
                while (v105 != 4);
                ++v102;
                v104 += 16;
                ++v103;
              }
              while (v102 != 4);
              uint64_t v86 = v63;
              long long v107 = &v451;
              sub_24843C88C(v439, v73 + 1, (int32x4_t *)&v451, (uint64_t)v459);
              uint64_t v108 = 0;
              uint64_t v109 = v422 * (uint64_t)(int)v71;
              float32x4_t v110 = &v420[v109];
              do
              {
                uint64_t v111 = 0;
                long long v112 = v110;
                do
                {
                  *(_DWORD *)long long v112 = v107->i32[v111];
                  v112 += 8;
                  ++v111;
                }
                while (v111 != 8);
                ++v108;
                v110 += 64;
                ++v107;
              }
              while (v108 != 4);
              v460.i64[0] = v439;
              v460.i64[1] = (uint64_t)v73->i64 + 4 * v438;
              sub_24846A674((uint64_t)&v460, &v451, v459);
              uint64_t v113 = 0;
              uint64_t v114 = (uint64_t)v414 + v109;
              do
              {
                long long v115 = *(long long *)((char *)&v451 + v113 + 16);
                *(float32x4_t *)uint64_t v114 = *(float32x4_t *)((char *)&v451 + v113);
                *(_OWORD *)(v114 + 16) = v115;
                v114 += 64;
                v113 += 32;
              }
              while (v113 != 128);
              goto LABEL_162;
            case 15:
              uint64_t v173 = 0;
              long long v457 = 0u;
              long long v458 = 0u;
              long long v455 = 0u;
              long long v456 = 0u;
              long long v453 = 0u;
              long long v454 = 0u;
              uint64_t v174 = (int32x4_t *)(v72 + v413);
              float32x4_t v451 = 0u;
              long long v452 = 0u;
              do
              {
                int8x16_t v175 = (int8x16_t)vrev64q_s32(*v174);
                *(int8x16_t *)((char *)&v451 + v173) = vextq_s8(v175, v175, 8uLL);
                v173 += 16;
                uint64_t v174 = (int32x4_t *)((char *)v174 + v40);
              }
              while (v173 != 64);
              unint64_t v176 = 0;
              unint64_t v177 = (float32x4_t *)&unk_24854F660;
              do
              {
                uint64_t v178 = 0;
                float32x4_t v179 = 0uLL;
                do
                {
                  float32x4_t v179 = vmlaq_n_f32(v179, v177[v178 * 4], v451.f32[v178]);
                  ++v178;
                }
                while (v178 != 16);
                v450[v176] = v179;
                ++v177;
                _CF = v176++ >= 3;
              }
              while (!_CF);
              uint64_t v180 = 0;
              unint64_t v181 = v450;
              unint64_t v182 = &v69->i32[(int)v68 * (uint64_t)(int)v71];
              do
              {
                uint64_t v183 = 0;
                int v184 = v182;
                do
                {
                  *int v184 = v181->i32[v183];
                  v184 += 2;
                  ++v183;
                }
                while (v183 != 4);
                ++v180;
                v182 += 16;
                ++v181;
              }
              while (v180 != 4);
              uint64_t v86 = v63;
              unint64_t v185 = &v451;
              sub_24843C88C(v439, v73, (int32x4_t *)&v451, (uint64_t)v459);
              uint64_t v186 = 0;
              uint64_t v187 = v422 * (uint64_t)(int)v71;
              unint64_t v188 = &v420[v187];
              do
              {
                uint64_t v189 = 0;
                uint64_t v190 = v188;
                do
                {
                  *(_DWORD *)uint64_t v190 = v185->i32[v189];
                  v190 += 8;
                  ++v189;
                }
                while (v189 != 8);
                ++v186;
                v188 += 64;
                ++v185;
              }
              while (v186 != 4);
              v460.i64[0] = v439;
              v460.i64[1] = (uint64_t)v73->i64 + 4 * v438;
              sub_24846A674((uint64_t)&v460, &v451, v459);
              uint64_t v191 = 0;
              uint64_t v192 = (uint64_t)v414 + v187;
              do
              {
                long long v193 = *(long long *)((char *)&v451 + v191 + 16);
                *(float32x4_t *)uint64_t v192 = *(float32x4_t *)((char *)&v451 + v191);
                *(_OWORD *)(v192 + 16) = v193;
                v192 += 64;
                v191 += 32;
              }
              while (v191 != 128);
              goto LABEL_162;
            case 16:
              long long v457 = 0u;
              long long v458 = 0u;
              long long v455 = 0u;
              long long v456 = 0u;
              long long v453 = 0u;
              long long v454 = 0u;
              unint64_t v75 = (float32x4_t *)(v72 + v412);
              uint64_t v76 = 48;
              float32x4_t v451 = 0u;
              long long v452 = 0u;
              do
              {
                *(float32x4_t *)((char *)&v451 + v76) = *v75;
                v76 -= 16;
                unint64_t v75 = (float32x4_t *)((char *)v75 + v40);
              }
              while (v76 != -16);
              unint64_t v77 = 0;
              char v78 = (float32x4_t *)&unk_24854F660;
              do
              {
                uint64_t v79 = 0;
                float32x4_t v80 = 0uLL;
                do
                {
                  float32x4_t v80 = vmlaq_n_f32(v80, v78[v79 * 4], v451.f32[v79]);
                  ++v79;
                }
                while (v79 != 16);
                v450[v77] = v80;
                ++v78;
                _CF = v77++ >= 3;
              }
              while (!_CF);
              uint64_t v81 = 0;
              float32x4_t v82 = v450;
              int64_t v83 = &v69->i32[(int)v68 * (uint64_t)(int)v71];
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = v83;
                do
                {
                  __int32 *v85 = v82->i32[v84];
                  v85 += 2;
                  ++v84;
                }
                while (v84 != 4);
                ++v81;
                v83 += 16;
                ++v82;
              }
              while (v81 != 4);
              uint64_t v86 = v63;
              float32x4_t v87 = &v451;
              sub_24843C88C(v439, (float32x4_t *)((char *)v73 + 4 * v438 + 16), (int32x4_t *)&v451, (uint64_t)v459);
              uint64_t v88 = 0;
              uint64_t v89 = v422 * (uint64_t)(int)v71;
              uint64_t v90 = &v420[v89];
              do
              {
                uint64_t v91 = 0;
                float32x4_t v92 = v90;
                do
                {
                  *(_DWORD *)float32x4_t v92 = v87->i32[v91];
                  v92 += 8;
                  ++v91;
                }
                while (v91 != 8);
                ++v88;
                v90 += 64;
                ++v87;
              }
              while (v88 != 4);
              v460.i64[0] = v439;
              v460.i64[1] = (uint64_t)v73;
              sub_24846A674((uint64_t)&v460, &v451, v459);
              uint64_t v93 = 0;
              uint64_t v94 = (uint64_t)v414 + v89;
              do
              {
                long long v95 = *(long long *)((char *)&v451 + v93 + 16);
                *(float32x4_t *)uint64_t v94 = *(float32x4_t *)((char *)&v451 + v93);
                *(_OWORD *)(v94 + 16) = v95;
                v94 += 64;
                v93 += 32;
              }
              while (v93 != 128);
              goto LABEL_162;
            case 17:
              long long v457 = 0u;
              long long v458 = 0u;
              long long v455 = 0u;
              long long v456 = 0u;
              long long v453 = 0u;
              long long v454 = 0u;
              unint64_t v241 = (int32x4_t *)(v72 + v411);
              uint64_t v242 = 48;
              float32x4_t v451 = 0u;
              long long v452 = 0u;
              do
              {
                int8x16_t v243 = (int8x16_t)vrev64q_s32(*v241);
                *(int8x16_t *)((char *)&v451 + v242) = vextq_s8(v243, v243, 8uLL);
                v242 -= 16;
                unint64_t v241 = (int32x4_t *)((char *)v241 + v40);
              }
              while (v242 != -16);
              unint64_t v244 = 0;
              unint64_t v245 = (float32x4_t *)&unk_24854F660;
              do
              {
                uint64_t v246 = 0;
                float32x4_t v247 = 0uLL;
                do
                {
                  float32x4_t v247 = vmlaq_n_f32(v247, v245[v246 * 4], v451.f32[v246]);
                  ++v246;
                }
                while (v246 != 16);
                v450[v244] = v247;
                ++v245;
                _CF = v244++ >= 3;
              }
              while (!_CF);
              uint64_t v248 = 0;
              uint64_t v249 = v450;
              uint64_t v250 = &v69->i32[(int)v68 * (uint64_t)(int)v71];
              do
              {
                uint64_t v251 = 0;
                uint64_t v252 = v250;
                do
                {
                  *uint64_t v252 = v249->i32[v251];
                  v252 += 2;
                  ++v251;
                }
                while (v251 != 4);
                ++v248;
                v250 += 16;
                ++v249;
              }
              while (v248 != 4);
              uint64_t v86 = v63;
              int v253 = &v451;
              sub_24843C88C(v439, (float32x4_t *)((char *)v73 + 4 * v438), (int32x4_t *)&v451, (uint64_t)v459);
              uint64_t v254 = 0;
              uint64_t v255 = v422 * (uint64_t)(int)v71;
              unint64_t v256 = &v420[v255];
              do
              {
                uint64_t v257 = 0;
                uint64_t v258 = v256;
                do
                {
                  *(_DWORD *)uint64_t v258 = v253->i32[v257];
                  v258 += 8;
                  ++v257;
                }
                while (v257 != 8);
                ++v254;
                v256 += 64;
                ++v253;
              }
              while (v254 != 4);
              v460.i64[0] = v439;
              v460.i64[1] = (uint64_t)v73;
              sub_24846A674((uint64_t)&v460, &v451, v459);
              uint64_t v259 = 0;
              uint64_t v260 = (uint64_t)v414 + v255;
              do
              {
                long long v261 = *(long long *)((char *)&v451 + v259 + 16);
                *(float32x4_t *)uint64_t v260 = *(float32x4_t *)((char *)&v451 + v259);
                *(_OWORD *)(v260 + 16) = v261;
                v260 += 64;
                v259 += 32;
              }
              while (v259 != 128);
LABEL_162:
              float v262 = v74->f32[1];
              float v263 = v74->f32[0] * 0.25;
              float v264 = v74[2].f32[0];
              v74->f32[0] = (float)((float)(v263 + v262) + (float)(v264 * 2.0)) * 0.25;
              v74->f32[1] = (float)(v263 - v262) * 0.5;
              v74[2].f32[0] = (float)((float)(v263 + v262) + (float)(v264 * -2.0)) * 0.25;
LABEL_163:
              uint64_t v69 = v434;
LABEL_164:
              unint64_t v68 = v437;
              uint64_t v63 = v86;
              break;
            case 18:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v450, (uint64_t)v459, 64, v407);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 64, 64);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v459, (uint64_t)&v451, 64, v407);
              goto LABEL_181;
            case 19:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v450, (uint64_t)v459, 32, v416);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 64, 32);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v459, (uint64_t)&v451, 64, v416);
              goto LABEL_181;
            case 20:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846ABA4, (uint64_t)v450, (uint64_t)v459, 64, v416);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 32, 64);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 32;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v459, (uint64_t)&v451, 32, v416);
              v459[0].i64[0] = 32;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 64, 32);
              goto LABEL_181;
            case 21:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v450, (uint64_t)v459, 128, v408);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 128, 128);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v459, (uint64_t)&v451, 128, v408);
              goto LABEL_181;
            case 22:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v450, (uint64_t)v459, 64, v417);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 128, 64);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v459, (uint64_t)&v451, 128, v417);
              goto LABEL_181;
            case 23:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A9E0, (uint64_t)v450, (uint64_t)v459, 128, v417);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 64, 128);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 64;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v459, (uint64_t)&v451, 64, v417);
              v459[0].i64[0] = 64;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 128, 64);
              goto LABEL_181;
            case 24:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A724, (uint64_t)v450, (uint64_t)v459, 256, v409);
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 256;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 256, 256);
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 256;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A724, (uint64_t)v459, (uint64_t)&v451, 256, v409);
              goto LABEL_181;
            case 25:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v69->i64 + 4 * (int)v68 * (uint64_t)(int)v71;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A724, (uint64_t)v450, (uint64_t)v459, 128, v418);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 256;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 256, 128);
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 256;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v459, (uint64_t)&v451, 256, v418);
              goto LABEL_181;
            case 26:
              v450[0].i64[0] = v439;
              v450[0].i64[1] = v72 + 4 * v424;
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A914, (uint64_t)v450, (uint64_t)v459, 256, v418);
              v459[0].i64[0] = 256;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 128, 256);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v74;
              v451.i64[0] = 128;
              v451.i64[1] = (uint64_t)v70;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846A724, (uint64_t)v459, (uint64_t)&v451, 128, v418);
              v459[0].i64[0] = 128;
              v459[0].i64[1] = (uint64_t)v70;
              v451.i64[0] = 256;
              v451.i64[1] = (uint64_t)v74;
              sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24846AAC0, (uint64_t)v459, (uint64_t)&v451, 256, 128);
LABEL_181:
              uint64_t v69 = v434;
              unint64_t v68 = v437;
              break;
            default:
              break;
          }
          ++v63;
        }
        while (v63 != 3);
        unsigned __int8 v273 = v444;
        unint64_t v274 = (float32x4_t *)((char *)v69 + 4 * v68);
        sub_2484697D8();
        uint64_t v278 = v273;
        v450[0] = (float32x4_t)xmmword_2484DCE80;
        uint64_t v279 = a2;
        if (*(int *)(a2 + 4592) <= 5)
        {
          uint64_t v280 = 0;
          int v281 = 0;
          LODWORD(v461) = *(_DWORD *)(a2 + 5264);
          HIDWORD(v461) = 1065353216;
          int v462 = *(_DWORD *)(a2 + 5268);
          int v282 = (1 << v273) & 0x3F00E;
          uint64_t v283 = 3 * v273;
          float v284 = (float)((float)v441 * 0.003) * (float)v443;
          float v285 = 0.08;
          if (v284 <= 0.08) {
            float v285 = (float)((float)v441 * 0.003) * (float)v443;
          }
          if (v284 >= 0.0) {
            *(float *)v276.i32 = v285;
          }
          else {
            *(float *)v276.i32 = 0.0;
          }
          float32x4_t v286 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.i8, 0);
          uint64_t v287 = 8 * v441;
          unint64_t v288 = 4 * v443;
          unint64_t v289 = 4 * v441;
          unint64_t v290 = v400 * (unint64_t)v401;
          *(float *)v276.i32 = (float)v290;
          double v277 = (double)v423;
          uint64_t v291 = 2;
          if (v273 != 5) {
            uint64_t v291 = 3;
          }
          if (v273 == 4) {
            uint64_t v291 = 0;
          }
          if ((v273 & 0xFE) == 0xALL) {
            uint64_t v292 = 1;
          }
          else {
            uint64_t v292 = v291;
          }
          uint64_t v431 = v292;
          unsigned int v293 = v290 >> 1;
          float32x4_t v294 = vsubq_f32((float32x4_t)xmmword_2484DCE80, v286);
          int8x16_t v295 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v396, vcvtq_f64_f32(*(float32x2_t *)v294.f32)), (int32x4_t)vcgtq_f64(v396, vcvt_hight_f64_f32(v294))), v395, (int8x16_t)v294);
          uint64_t v296 = 32 * v441;
          unint64_t v297 = v437;
          while (1)
          {
            float32x4_t v460 = (float32x4_t)xmmword_2484DCE80;
            int v298 = v423;
            if (!v282) {
              break;
            }
            if (!v280) {
              goto LABEL_290;
            }
LABEL_199:
            if (v298 > v281) {
              int v281 = v298;
            }
            if (++v280 == 3) {
              goto LABEL_292;
            }
          }
          uint64_t v299 = dword_24854F5F0[v280];
          uint64_t v300 = *(void *)(v279 + 1016);
          uint64_t v301 = *(void *)(v300 + 8 * (v283 + v299) + 72);
          if ((v443 | v441) >= 2) {
            float32x4_t v460 = (float32x4_t)v295;
          }
          float v302 = *((float *)&v461 + v299);
          uint64_t v303 = *(void *)(v300 + 40);
          float v304 = *(float *)(v279 + 996);
          v459[0] = 0uLL;
          float32x4_t v451 = 0uLL;
          if (v443)
          {
            unint64_t v305 = 0;
            unint64_t v306 = &v434->i8[4 * (int)v437 * (uint64_t)(int)v299];
            uint64_t v307 = v303 + 4 * v301;
            float v308 = v304 * (float)v423;
            float v309 = 0.0;
            float v310 = 0.0;
            float v311 = 0.0;
            do
            {
              unint64_t v312 = 0;
              do
              {
                if (v305 >= v443 || v312 >= v441)
                {
                  uint64_t v313 = (2 * (v305 >= v288)) | (v312 >= v289);
                  float v314 = *(float *)&v306[4 * v312] * (float)((float)(v308 * *(float *)(v307 + 4 * v312)) * v302);
                  float v315 = fabsf(v314);
                  float v316 = rintf(v314);
                  if (v315 >= *(float *)((unint64_t)&v460 | (4 * v313))) {
                    float v317 = v316;
                  }
                  else {
                    float v317 = 0.0;
                  }
                  float v318 = vabds_f32(v314, v317);
                  if (!v280 && v317 == 0.0 && v451.f32[v313] < v318) {
                    v451.f32[v313] = v318;
                  }
                  float v310 = v310 + v318;
                  float v319 = fabsf(v317);
                  float v309 = v309 + v319;
                  if (v317 != 0.0)
                  {
                    if ((v459[0].f32[v313] = v319 + v459[0].f32[v313], v305 >= 7 * v443) && v312 >= 7 * v441
                      || (v305 != 8 * v443 - 1 ? (_ZF = v287 - 1 == v312) : (_ZF = 1),
                          _ZF ? (char v321 = 0) : (char v321 = 1),
                          v312 >= v289 && (v321 & 1) == 0 && v305 >= v288))
                    {
                      float v311 = v311 + v315;
                    }
                  }
                }
                ++v312;
              }
              while (v287 != v312);
              ++v305;
              v307 += v296;
              v306 += v296;
            }
            while (v305 != 8 * v443);
          }
          else
          {
            float v311 = 0.0;
            float v310 = 0.0;
            float v309 = 0.0;
          }
          int v322 = v423;
          uint64_t v279 = a2;
          if (!v280)
          {
            int v322 = v423;
            if ((float)(v309 * 8.0) < *(float *)v276.i32)
            {
              uint64_t v323 = 1;
              while (v459[0].f32[v323] != 0.0 || v451.f32[v323] <= 0.46)
              {
                if (++v323 == 4)
                {
                  int v322 = v423;
                  goto LABEL_242;
                }
              }
              int v322 = v423 + 1;
LABEL_242:
              if (v459[0].f32[3] == 0.0 && v451.f32[3] > 0.46)
              {
                float32_t v324 = v451.f32[3] * 0.9999 * (double)v322 / v277;
                v460.f32[3] = v324;
                goto LABEL_257;
              }
              if (v459[0].f32[1] == 0.0)
              {
                float v325 = v451.f32[1];
                if (v451.f32[1] > 0.46)
                {
                  float v326 = v451.f32[2];
                  goto LABEL_251;
                }
              }
              if (v459[0].f32[2] == 0.0 && (float v326 = v451.f32[2], v451.f32[2] > 0.46))
              {
                float v325 = v451.f32[1];
LABEL_251:
                if (v325 >= v326) {
                  float v326 = v325;
                }
                float32_t v327 = v326 * 0.9999 * (double)v322 / v277;
                v460.f32[1] = v327;
                v460.f32[2] = v327;
              }
              else if (v459[0].f32[0] == 0.0 && v451.f32[0] > 0.46)
              {
                float32_t v328 = v451.f32[0] * 0.9999 * (double)v322 / v277;
                v460.f32[0] = v328;
              }
            }
          }
LABEL_257:
          float v329 = (float)((float)(v459[0].f32[0] + v459[0].f32[1]) + v459[0].f32[2]) + v459[0].f32[3];
          float v330 = v311 * flt_24854F520[v299];
          if (v330 >= (float)(v329 + 1.0))
          {
            if ((int)(float)((float)(v330 / (float)(v329 + 1.0)) + (float)v322) >= 255) {
              int v322 = 255;
            }
            else {
              int v322 = (int)(float)((float)(v330 / (float)(v329 + 1.0)) + (float)v322);
            }
          }
          if (v278 || v329 >= 11.0)
          {
            if (v278 >= 4)
            {
              float v331 = v309 * 2.29427083;
              float v332 = v310 * 2.29427083;
              double v333 = v332;
              double v334 = dbl_24854F590[3 * v431 + v299] * v331
                   + dbl_24854F530[3 * v431 + v299] * (double)v441 * (double)v443 * 8.0 * 8.0;
              if (v334 < v333)
              {
                int v335 = (int)(v333 / v334);
                if (v335 >= 2) {
                  int v335 = 2;
                }
                int v336 = v322 + (v335 & ~(v335 >> 31));
                if (v336 >= 255) {
                  int v322 = 255;
                }
                else {
                  int v322 = v336;
                }
              }
            }
          }
          else if (v322 < 255)
          {
            ++v322;
          }
          else
          {
            int v322 = 255;
          }
          uint64_t v337 = 1;
          int v338 = (int)(v293 + (int)v459[0].f32[0]) / (int)v290;
          do
          {
            if ((int)(v293 + (int)v459[0].f32[v337]) / (int)v290 < v338) {
              int v338 = (int)(v293 + (int)v459[0].f32[v337]) / (int)v290;
            }
            ++v337;
          }
          while (v337 != 4);
          if (v322 >= 0) {
            int v339 = v322;
          }
          else {
            int v339 = v322 + 1;
          }
          if (v338 >= 15) {
            int v338 = 15;
          }
          if (!v280)
          {
            for (uint64_t k = 1; k != 4; ++k)
            {
              float32_t v341 = v460.f32[k] + (double)v338 * 0.01;
              v460.f32[k] = v341;
            }
          }
          int v298 = v339 >> 1;
          int v342 = v322 - v338;
          if (v298 <= v342) {
            int v298 = v342;
          }
          if (v298 <= 4) {
            int v298 = 4;
          }
          unint64_t v297 = v437;
          if (v280) {
            goto LABEL_199;
          }
LABEL_290:
          v450[0] = v460;
          goto LABEL_199;
        }
        v450[0] = (float32x4_t)xmmword_2484DCE70;
        uint64_t v283 = 3 * v273;
        int v281 = v423;
        unint64_t v297 = v437;
LABEL_292:
        unint64_t v343 = v297;
        uint64_t v344 = (__n128 *)(v427 + 4 * v297);
        v275.n128_u32[0] = 1.0;
        sub_24846968C(*(void *)(v279 + 1016), 1, v278, v441, v443, v450, v274, v281, *(float *)(v279 + 996), v275, v276, v277, v344);
        uint64_t v348 = a2;
        float v349 = *(float *)(a2 + 992) / (float)v281;
        if (v343)
        {
          unint64_t v350 = 0;
          uint64_t v351 = (float32x4_t *)(*(void *)(*(void *)(a2 + 1016) + 32)
                               + 4 * *(void *)(*(void *)(a2 + 1016) + 8 * v283 + 80));
          double v352 = v434;
          v353.i64[0] = 0x8000000080000000;
          v353.i64[1] = 0x8000000080000000;
          do
          {
            int32x4_t v354 = *(int32x4_t *)v344++;
            float32x4_t v355 = vcvtq_f32_s32(v354);
            __asm { FMOV            V4.4S, #1.125 }
            int8x16_t v357 = (int8x16_t)vcgtq_f32(_Q4, (float32x4_t)(*(_OWORD *)&v355 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
            float32x4_t v358 = *v351++;
            *v274++ = vmulq_n_f32(vmulq_f32(v358, (float32x4_t)vorrq_s8(vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v355, v353), (int8x16_t)vdupq_n_s32(0x3F6E10E8u)), vandq_s8(v357, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v355 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v355, (float32x4_t)vdupq_n_s32(0xBE147AE1), vrecpeq_f32(v355)), v357))), v349);
            v350 += 4;
          }
          while (v350 < v437);
          unint64_t v359 = 0;
          unint64_t v360 = v443 * (unint64_t)v441;
          unint64_t v361 = v360 << 9;
          unint64_t v362 = v360 << 8;
          unint64_t v363 = v434;
          unint64_t v364 = v427;
          double v347 = *(double *)v398.i64;
          do
          {
            __n128 v345 = *(__n128 *)((char *)v363 + v362);
            int8x16_t v346 = (int8x16_t)vmlaq_f32(*(float32x4_t *)((char *)v363 + v361), (float32x4_t)v345, v397);
            *unint64_t v363 = vmlaq_f32(*v363, (float32x4_t)v345, v398);
            *(int8x16_t *)((char *)v363 + v361) = v346;
            v359 += 4;
            ++v363;
          }
          while (v359 < v437);
        }
        else
        {
          unint64_t v364 = v427;
          double v352 = v434;
        }
        char v365 = 0;
        uint64_t v366 = 0;
        v451.i64[0] = 0x200000000;
        uint64_t v367 = v444;
        do
        {
          uint64_t v368 = v451.i32[v366];
          char v369 = v365;
          uint64_t v370 = 5264;
          if (v368) {
            uint64_t v370 = 5268;
          }
          v345.n128_u32[0] = *(_DWORD *)(v348 + v370);
          v459[0] = (float32x4_t)xmmword_2484DD0B0;
          sub_24846968C(*(void *)(v348 + 1016), v368, v367, v441, v443, v459, (float32x4_t *)((char *)v352 + 4 * (int)v437 * (uint64_t)(int)v368), v281, *(float *)(v348 + 996), v345, v346, v347, (__n128 *)(v364 + 4 * (int)v437 * (uint64_t)(int)v368));
          sub_2484697D8();
          char v365 = 1;
          uint64_t v366 = 1;
          uint64_t v348 = a2;
          double v352 = v434;
        }
        while ((v369 & 1) == 0);
        uint64_t v371 = 0;
        *(_DWORD *)(v404 + 4 * v432) = v281;
        uint64_t v372 = v448;
        uint64_t v39 = v405;
        do
        {
          sub_2484DBB30(v425, (char *)(v427 + 4 * v371 * v437), (unsigned int *)&v444, (void **)v448 + 11 * v371);
          double v373 = v372;
          for (uint64_t m = v426; m; --m)
            *v373++ += 4 * v437;
          ++v371;
          uint64_t v372 = (_OWORD *)((char *)v372 + 88);
        }
        while (v371 != 3);
      }
      unint64_t v58 = v432 + 1;
      v411 += 32;
      v412 += 32;
      v413 += 32;
      v60 += 32;
      if (v432 + 1 == v403) {
        goto LABEL_308;
      }
    }
  }
LABEL_310:
  sub_2483FED94(v445);
  sub_2483FED40(v446);
}

void sub_24846DBC4(_Unwind_Exception *a1)
{
}

float sub_24846DC68(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v5 = 0;
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v7 = (void **)((char *)&v11 + v5);
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
      sub_2483F2450((void **)((char *)&v11 + v5), *(const void **)(a4 + v5), *(void *)(a4 + v5 + 8), (uint64_t)(*(void *)(a4 + v5 + 8) - *(void *)(a4 + v5)) >> 2);
      v5 += 24;
    }
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_24844CB80(&v12, *(const void **)(a4 + 72), *(void *)(a4 + 80), (uint64_t)(*(void *)(a4 + 80) - *(void *)(a4 + 72)) >> 2);
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_2483F01FC(&v15, *(const void **)(a4 + 96), *(void *)(a4 + 104), *(void *)(a4 + 104) - *(void *)(a4 + 96));
    long long v18 = *(_OWORD *)(a4 + 120);
    sub_2483EFEC8(&v15, byte_24854FEC0, &byte_24854FEC0[39], 0x27uLL);
    LODWORD(result) = 2;
    long long v18 = xmmword_2484DCE90;
    if (v15)
    {
      unint64_t v16 = v15;
      operator delete(v15);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    for (uint64_t j = 0; j != -72; j -= 24)
    {
      unint64_t v10 = *(void **)((char *)&v11 + j + 48);
      if (v10)
      {
        *(void **)((char *)&v11 + j + 56) = v10;
        operator delete(v10);
      }
    }
  }
  else if (*(int *)(a1 + 48) <= 6)
  {
    float result = *(float *)a1;
    if (a2[1] * (unint64_t)*a2 >= vcvts_n_u32_f32(*(float *)a1, 0xAuLL)) {
      operator new();
    }
  }
  return result;
}

void sub_24846E460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  MEMORY[0x24C579F90](v24, 0x1000C40DDE5C641);
  _Unwind_Resume(a1);
}

unint64_t sub_24846E56C(unint64_t result, unsigned __int8 *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = (unsigned __int8 *)result;
  while (2)
  {
    unint64_t v12 = a2 - 1;
    unint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v52 = *v12;
                uint64_t v53 = *v13;
                if (*(void *)(**a3 + 8 * v52) > *(void *)(**a3 + 8 * v53))
                {
                  unsigned __int8 *v13 = v52;
                  unsigned __int8 *v12 = v53;
                }
                break;
              case 3:
                float result = (unint64_t)sub_24846EDB0(v13, v13 + 1, v12, a3);
                break;
              case 4:
                float result = (unint64_t)sub_24846EE54(v13, v13 + 1, v13 + 2, v12, a3);
                break;
              case 5:
                uint64_t v54 = v13 + 2;
                unint64_t v55 = v13 + 3;
                float result = (unint64_t)sub_24846EE54(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v56 = *v12;
                uint64_t v57 = v13[3];
                if (*(void *)(**a3 + 8 * v56) > *(void *)(**a3 + 8 * v57))
                {
                  *unint64_t v55 = v56;
                  unsigned __int8 *v12 = v57;
                  uint64_t v58 = *v55;
                  uint64_t v59 = *v54;
                  if (*(void *)(**a3 + 8 * v58) > *(void *)(**a3 + 8 * v59))
                  {
                    *uint64_t v54 = v58;
                    *unint64_t v55 = v59;
                    uint64_t v60 = v13[1];
                    if (*(void *)(**a3 + 8 * v58) > *(void *)(**a3 + 8 * v60))
                    {
                      v13[1] = v58;
                      void v13[2] = v60;
                      uint64_t v61 = *v13;
                      if (*(void *)(**a3 + 8 * v58) > *(void *)(**a3 + 8 * v61))
                      {
                        unsigned __int8 *v13 = v58;
                        v13[1] = v61;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 23)
          {
            unint64_t v62 = v13 + 1;
            BOOL v64 = v13 == a2 || v62 == a2;
            if (a5)
            {
              if (!v64)
              {
                unint64_t v65 = *a3;
                uint64_t v66 = 1;
                unint64_t v67 = v13;
                do
                {
                  uint64_t v68 = v67[1];
                  uint64_t v69 = *v67;
                  unint64_t v67 = v62;
                  if (*(void *)(*v65 + 8 * v68) > *(void *)(*v65 + 8 * v69))
                  {
                    uint64_t v70 = v66;
                    LOBYTE(v71) = v69;
                    do
                    {
                      v13[v70] = v71;
                      uint64_t v72 = v70 - 1;
                      if (v70 == 1)
                      {
                        unint64_t v73 = v13;
                        goto LABEL_83;
                      }
                      uint64_t v71 = v13[v70-- - 2];
                    }
                    while (*(void *)(**a3 + 8 * v68) > *(void *)(**a3 + 8 * v71));
                    unint64_t v73 = &v13[v72];
LABEL_83:
                    *unint64_t v73 = v68;
                    unint64_t v65 = *a3;
                  }
                  unint64_t v62 = v67 + 1;
                  ++v66;
                }
                while (v67 + 1 != a2);
              }
            }
            else if (!v64)
            {
              long long v106 = *a3;
              do
              {
                uint64_t v107 = v11[1];
                uint64_t v108 = *v11;
                unint64_t v11 = v62;
                if (*(void *)(*v106 + 8 * v107) > *(void *)(*v106 + 8 * v108))
                {
                  uint64_t v109 = v62;
                  LOBYTE(v62) = v108;
                  do
                  {
                    unsigned char *v109 = (_BYTE)v62;
                    unint64_t v62 = (unsigned __int8 *)*(v109 - 2);
                    --v109;
                  }
                  while (*(void *)(**a3 + 8 * v107) > *(void *)(**a3 + 8 * (void)v62));
                  unsigned char *v109 = v107;
                  long long v106 = *a3;
                }
                unint64_t v62 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v74 = (unint64_t)(v14 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  char v78 = &v13[v77];
                  uint64_t v79 = v13[v77];
                  if (2 * v76 + 2 < v14)
                  {
                    uint64_t v80 = **a3;
                    float result = *(void *)(v80 + 8 * v79);
                    if (result > *(void *)(v80 + 8 * v78[1]))
                    {
                      LODWORD(v79) = *++v78;
                      uint64_t v77 = 2 * v76 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v80 = **a3;
                  }
                  uint64_t v81 = &v13[v76];
                  uint64_t v82 = v13[v76];
                  if (*(void *)(v80 + 8 * v79) <= *(void *)(v80 + 8 * v82))
                  {
                    do
                    {
                      int64_t v83 = v78;
                      unsigned __int8 *v81 = v79;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v84 = (2 * v77) | 1;
                      char v78 = &v13[v84];
                      uint64_t v77 = 2 * v77 + 2;
                      uint64_t v79 = v13[v84];
                      if (v77 < v14)
                      {
                        uint64_t v85 = **a3;
                        if (*(void *)(v85 + 8 * v79) <= *(void *)(v85 + 8 * v78[1])) {
                          uint64_t v77 = v84;
                        }
                        else {
                          LODWORD(v79) = *++v78;
                        }
                      }
                      else
                      {
                        uint64_t v85 = **a3;
                        uint64_t v77 = v84;
                      }
                      float result = *(void *)(v85 + 8 * v79);
                      uint64_t v81 = v83;
                    }
                    while (result <= *(void *)(v85 + 8 * v82));
                    unsigned __int8 *v83 = v82;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              do
              {
                uint64_t v86 = 0;
                unsigned __int8 v87 = *v13;
                uint64_t v88 = v13;
                do
                {
                  uint64_t v89 = &v88[v86 + 1];
                  uint64_t v90 = *v89;
                  uint64_t v91 = (2 * v86) | 1;
                  uint64_t v92 = 2 * v86 + 2;
                  if (v92 < v14)
                  {
                    uint64_t v93 = **a3;
                    unint64_t v94 = *(void *)(v93 + 8 * v90);
                    float result = *(void *)(v93 + 8 * v89[1]);
                    if (v94 > result)
                    {
                      LOBYTE(v90) = *++v89;
                      uint64_t v91 = v92;
                    }
                  }
                  *uint64_t v88 = v90;
                  uint64_t v88 = v89;
                  uint64_t v86 = v91;
                }
                while (v91 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v89 == --a2)
                {
                  unsigned __int8 *v89 = v87;
                }
                else
                {
                  unsigned __int8 *v89 = *a2;
                  *a2 = v87;
                  unint64_t v95 = v89 - v13 - 1;
                  if (v89 - v13 + 1 >= 2)
                  {
                    uint64_t v96 = &v13[v95 >> 1];
                    uint64_t v97 = *v96;
                    uint64_t v98 = *v89;
                    if (*(void *)(**a3 + 8 * v97) > *(void *)(**a3 + 8 * v98))
                    {
                      unint64_t v99 = v95 >> 1;
                      do
                      {
                        uint64_t v100 = v96;
                        unsigned __int8 *v89 = v97;
                        if (!v99) {
                          break;
                        }
                        unint64_t v101 = v99 - 1;
                        unint64_t v99 = (v99 - 1) >> 1;
                        uint64_t v96 = &v13[v101 >> 1];
                        uint64_t v97 = *v96;
                        uint64_t v102 = **a3;
                        unint64_t v103 = *(void *)(v102 + 8 * v97);
                        unint64_t v104 = *(void *)(v102 + 8 * v98);
                        uint64_t v89 = v100;
                      }
                      while (v103 > v104);
                      *uint64_t v100 = v98;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = &v13[(unint64_t)v14 >> 1];
          if ((unint64_t)v14 >= 0x81)
          {
            uint64_t v16 = a4;
            uint64_t v17 = a5;
            unint64_t v18 = (unint64_t)v14 >> 1;
            sub_24846EDB0(v11, &v11[(unint64_t)v14 >> 1], v12, a3);
            float32x4_t v19 = &v11[v18];
            unint64_t v20 = &v11[v18 - 1];
            sub_24846EDB0(v11 + 1, v20, a2 - 2, a3);
            unint64_t v21 = &v11[v18 + 1];
            a5 = v17;
            a4 = v16;
            sub_24846EDB0(v11 + 2, v21, a2 - 3, a3);
            float result = (unint64_t)sub_24846EDB0(v20, v15, v21, a3);
            unsigned __int8 v22 = *v11;
            *unint64_t v11 = *v19;
            *float32x4_t v19 = v22;
            unint64_t v12 = a2 - 1;
          }
          else
          {
            float result = (unint64_t)sub_24846EDB0(&v11[(unint64_t)v14 >> 1], v11, v12, a3);
          }
          --a4;
          uint64_t v23 = *v11;
          uint64_t v24 = **a3;
          if (a5) {
            break;
          }
          unint64_t v25 = *(void *)(v24 + 8 * v23);
          if (*(void *)(v24 + 8 * *(v11 - 1)) > v25) {
            goto LABEL_13;
          }
          if (v25 <= *(void *)(v24 + 8 * *v12))
          {
            float32x4_t v42 = v11 + 1;
            do
            {
              unint64_t v13 = v42;
              if (v42 >= a2) {
                break;
              }
              ++v42;
            }
            while (v25 <= *(void *)(v24 + 8 * *v13));
          }
          else
          {
            unint64_t v13 = v11;
            do
              unsigned int v41 = *++v13;
            while (v25 <= *(void *)(v24 + 8 * v41));
          }
          unint64_t v43 = a2;
          if (v13 < a2)
          {
            unint64_t v43 = a2;
            do
              unsigned int v44 = *--v43;
            while (v25 > *(void *)(v24 + 8 * v44));
          }
          if (v13 < v43)
          {
            unsigned __int8 v45 = *v13;
            unsigned __int8 v46 = *v43;
            do
            {
              unsigned __int8 *v13 = v46;
              *unint64_t v43 = v45;
              uint64_t v47 = **a3;
              unint64_t v48 = *(void *)(v47 + 8 * v23);
              do
              {
                unsigned int v49 = *++v13;
                unsigned __int8 v45 = v49;
              }
              while (v48 <= *(void *)(v47 + 8 * v49));
              do
              {
                unsigned int v50 = *--v43;
                unsigned __int8 v46 = v50;
              }
              while (v48 > *(void *)(v47 + 8 * v50));
            }
            while (v13 < v43);
          }
          uint64_t v51 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *unint64_t v11 = *v51;
          }
          a5 = 0;
          *uint64_t v51 = v23;
        }
        unint64_t v25 = *(void *)(v24 + 8 * v23);
LABEL_13:
        unint64_t v26 = v11;
        do
        {
          unint64_t v27 = v26;
          unsigned int v29 = *++v26;
          unsigned __int8 v28 = v29;
        }
        while (*(void *)(v24 + 8 * v29) > v25);
        unint64_t v30 = a2;
        if (v27 == v11)
        {
          unint64_t v30 = a2;
          do
          {
            if (v26 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (*(void *)(v24 + 8 * v32) <= v25);
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (*(void *)(v24 + 8 * v31) <= v25);
        }
        if (v26 < v30)
        {
          unsigned __int8 v33 = *v30;
          uint64_t v34 = v26;
          uint64_t v35 = v30;
          do
          {
            *uint64_t v34 = v33;
            unsigned __int8 *v35 = v28;
            uint64_t v36 = **a3;
            unint64_t v37 = *(void *)(v36 + 8 * v23);
            do
            {
              unint64_t v27 = v34;
              unsigned int v38 = *++v34;
              unsigned __int8 v28 = v38;
            }
            while (*(void *)(v36 + 8 * v38) > v37);
            do
            {
              unsigned int v39 = *--v35;
              unsigned __int8 v33 = v39;
            }
            while (*(void *)(v36 + 8 * v39) <= v37);
          }
          while (v34 < v35);
        }
        if (v27 != v11) {
          *unint64_t v11 = *v27;
        }
        *unint64_t v27 = v23;
        if (v26 >= v30) {
          break;
        }
LABEL_32:
        float result = sub_24846E56C(v11, v27, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v13 = v27 + 1;
      }
      BOOL v40 = sub_24846EF14(v11, v27, a3);
      unint64_t v13 = v27 + 1;
      float result = sub_24846EF14(v27 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v40) {
        goto LABEL_32;
      }
    }
    a2 = v27;
    if (!v40) {
      continue;
    }
    return result;
  }
}

unsigned char *sub_24846EDB0(unsigned char *result, unsigned char *a2, unsigned char *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **a4;
  unint64_t v7 = *(void *)(v6 + 8 * v4);
  unint64_t v8 = *(void *)(v6 + 8 * v5);
  uint64_t v9 = *a3;
  unint64_t v10 = *(void *)(v6 + 8 * v9);
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *a2;
      uint64_t v12 = *result;
      if (*(void *)(**a4 + 8 * v11) > *(void *)(**a4 + 8 * v12))
      {
        char *result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      char *result = v4;
      *a2 = v5;
      uint64_t v13 = *a3;
      if (*(void *)(**a4 + 8 * v13) <= *(void *)(**a4 + 8 * v5)) {
        return result;
      }
      *a2 = v13;
    }
    else
    {
      char *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

unsigned char *sub_24846EE54(unsigned char *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, uint64_t **a5)
{
  float result = sub_24846EDB0(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  if (*(void *)(**a5 + 8 * v11) > *(void *)(**a5 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v13 = *a3;
    uint64_t v14 = *a2;
    if (*(void *)(**a5 + 8 * v13) > *(void *)(**a5 + 8 * v14))
    {
      *a2 = v13;
      *a3 = v14;
      uint64_t v15 = *a2;
      uint64_t v16 = *a1;
      if (*(void *)(**a5 + 8 * v15) > *(void *)(**a5 + 8 * v16))
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL sub_24846EF14(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t **a3)
{
  int64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(void *)(**a3 + 8 * v8) > *(void *)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_24846EDB0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_24846EE54(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v23 = a1 + 2;
      uint64_t v24 = a1 + 3;
      sub_24846EE54(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v25 = *(a2 - 1);
      uint64_t v26 = a1[3];
      if (*(void *)(**a3 + 8 * v25) > *(void *)(**a3 + 8 * v26))
      {
        *uint64_t v24 = v25;
        *(a2 - 1) = v26;
        uint64_t v27 = *v24;
        uint64_t v28 = *v23;
        if (*(void *)(**a3 + 8 * v27) > *(void *)(**a3 + 8 * v28))
        {
          *uint64_t v23 = v27;
          *uint64_t v24 = v28;
          uint64_t v29 = a1[1];
          if (*(void *)(**a3 + 8 * v27) > *(void *)(**a3 + 8 * v29))
          {
            a1[1] = v27;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (*(void *)(**a3 + 8 * v27) > *(void *)(**a3 + 8 * v30))
            {
              *a1 = v27;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 2;
      sub_24846EDB0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 3;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    if (*(void *)(*v13 + 8 * v15) > *(void *)(*v13 + 8 * v16)) {
      break;
    }
LABEL_15:
    unint64_t v10 = v11;
    ++v14;
    if (++v11 == a2) {
      return 1;
    }
  }
  uint64_t v17 = v14;
  while (1)
  {
    a1[v17] = v16;
    uint64_t v18 = v17 - 1;
    if (v17 == 1) {
      break;
    }
    uint64_t v16 = a1[v17 - 2];
    uint64_t v19 = **a3;
    unint64_t v20 = *(void *)(v19 + 8 * v15);
    unint64_t v21 = *(void *)(v19 + 8 * v16);
    uint64_t v17 = v18;
    if (v20 <= v21)
    {
      unsigned __int8 v22 = &a1[v18];
      goto LABEL_13;
    }
  }
  unsigned __int8 v22 = a1;
LABEL_13:
  unsigned __int8 *v22 = v15;
  if (++v12 != 8)
  {
    uint64_t v13 = *a3;
    goto LABEL_15;
  }
  return v11 + 1 == a2;
}

uint64_t sub_24846F180(unsigned int *a1, unsigned int *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  sub_2483EA250((uint64_t)&v61, v4, v5);
  uint64_t v6 = v65;
  if (!v65)
  {
    long long v57 = v61;
    unint64_t v7 = v63;
    uint64_t v63 = 0;
    uint64_t v58 = v62;
    uint64_t v59 = v7;
    uint64_t v60 = v64;
    if (a1[1] && *a1)
    {
      unint64_t v8 = 0;
      uint64_t v9 = (char *)v7;
      do
      {
        memcpy(v9, (const void *)(*((void *)a1 + 3) + *((void *)a1 + 2) * v8++), 4 * *a1);
        v9 += v58;
      }
      while (v8 < a1[1]);
    }
    sub_2484DBE30((uint64_t)&v52, (unsigned int *)&v57, 2uLL);
    uint64_t v6 = v56;
    if (!v56)
    {
      long long v57 = v52;
      unint64_t v10 = v54;
      uint64_t v54 = 0;
      uint64_t v11 = v55;
      uint64_t v58 = v53;
      uint64_t v59 = v10;
      if (v7)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(v7 - 3));
        free((void *)*(v7 - 4));
      }
      uint64_t v60 = v11;
      sub_2483EA250((uint64_t)&v48, v57, DWORD1(v57));
      uint64_t v6 = v51;
      if (!v51)
      {
        uint64_t v13 = v49;
        uint64_t v12 = v50;
        uint64_t v50 = 0;
        sub_24846F5E8((unint64_t)&v57, v49, v12);
        uint64_t v14 = a2[1];
        if (v14)
        {
          uint64_t v15 = 0;
          uint64_t v17 = *((void *)a2 + 2);
          uint64_t v16 = *((void *)a2 + 3);
          uint64_t v18 = -5;
          uint64_t v20 = *((void *)a1 + 2);
          uint64_t v19 = *((void *)a1 + 3);
          uint64_t v21 = *a2;
          do
          {
            uint64_t v22 = 0;
            uint64_t v23 = v16 + v17 * v15;
            memset(v66, 0, sizeof(v66));
            do
            {
              unint64_t v24 = (v18 + v22) & ~((v18 + v22) >> 63);
              if (v24 >= v5) {
                unint64_t v24 = v5 - 1;
              }
              *((void *)v66 + v22++) = v19 + v20 * v24;
            }
            while (v22 != 12);
            if (v21)
            {
              uint64_t v25 = 0;
              for (uint64_t i = 0; i != v21; ++i)
              {
                char v27 = 0;
                float v28 = 3.4028e38;
                float v29 = 1.1755e-38;
                uint64_t v30 = 5;
                do
                {
                  uint64_t v31 = 0;
                  char v32 = v27;
                  uint64_t v33 = *((void *)v66 + v30);
                  do
                  {
                    unint64_t v34 = v25 + v31;
                    if (v25 + v31 >= v4) {
                      unint64_t v34 = v4 - 1;
                    }
                    float v35 = *(float *)(v33 + 4 * v34);
                    if (v35 < v28) {
                      float v28 = *(float *)(v33 + 4 * v34);
                    }
                    if (v29 < v35) {
                      float v29 = *(float *)(v33 + 4 * v34);
                    }
                    ++v31;
                  }
                  while (v31 != 2);
                  char v27 = 1;
                  uint64_t v30 = 6;
                }
                while ((v32 & 1) == 0);
                uint64_t v36 = 0;
                float v37 = 0.0;
                unsigned int v38 = (float *)&unk_24854FF10;
                do
                {
                  for (uint64_t j = 0; j != 12; ++j)
                  {
                    unint64_t v40 = (v25 + j - 5) & ~((v25 + j - 5) >> 63);
                    if (v40 >= v4) {
                      unint64_t v40 = v4 - 1;
                    }
                    float v37 = v37 + (float)(*(float *)(*((void *)v66 + v36) + 4 * v40) * v38[j]);
                  }
                  ++v36;
                  v38 += 12;
                }
                while (v36 != 12);
                *(float *)(v23 + 4 * i) = v37;
                float v41 = *(float *)(v12 + v13 * v15 + 4 * i);
                float v42 = v28 - v41;
                if (v37 < v42 || (float v42 = v29 + v41, v37 > (float)(v29 + v41))) {
                  *(float *)(v23 + 4 * i) = v42;
                }
                v25 += 2;
              }
            }
            ++v15;
            v18 += 2;
          }
          while (v15 != v14);
        }
        if (!v12 || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24)), free(*(void **)(v12 - 32)), !v51))
        {
          uint64_t v43 = v50;
          uint64_t v50 = 0;
          if (v43)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v43 - 24));
            free(*(void **)(v43 - 32));
          }
        }
        uint64_t v6 = 0;
      }
      if (!v56)
      {
        unsigned int v44 = v54;
        uint64_t v54 = 0;
        if (v44)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(v44 - 3));
          free((void *)*(v44 - 4));
        }
      }
    }
    unsigned __int8 v45 = v59;
    uint64_t v59 = 0;
    if (v45)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(v45 - 3));
      free((void *)*(v45 - 4));
    }
    if (!v65)
    {
      unsigned __int8 v46 = v63;
      uint64_t v63 = 0;
      if (v46)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(v46 - 3));
        free((void *)*(v46 - 4));
      }
    }
  }
  return v6;
}

void sub_24846F544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  if (!a20 && a18)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a18 - 24));
    free(*(void **)(a18 - 32));
  }
  if (a24)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a24 - 24));
    free(*(void **)(a24 - 32));
  }
  if (!a32)
  {
    if (a30)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a30 - 24));
      free(*(void **)(a30 - 32));
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_24846F5E8(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(result + 4);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v5 = *(void *)(result + 24);
    unint64_t v7 = *(unsigned int *)result;
    uint64_t v8 = v5;
    do
    {
      if (v4) {
        uint64_t v9 = v6 * (v4 - 1);
      }
      else {
        uint64_t v9 = 0;
      }
      unint64_t v10 = v4 + 1;
      if (v7)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v5 + v9;
        uint64_t v13 = v6 * v4;
        if (v10 < v3) {
          uint64_t v13 = v6 * v10;
        }
        uint64_t v14 = v5 + v13;
        BOOL result = 1;
        do
        {
          uint64_t v15 = (float *)(v8 + v11);
          float v16 = *(float *)(v8 + v11);
          float v17 = v16;
          if (v11) {
            float v17 = *(v15 - 1);
          }
          if (result < v7) {
            ++v15;
          }
          float v18 = *v15;
          float v19 = *(float *)(v12 + v11);
          float v20 = *(float *)(v14 + v11);
          float v21 = vabds_f32(v16, v17);
          *(float *)&int v30 = 3.4028e38;
          float v31 = 3.4028e38;
          float v22 = 3.4028e38;
          if (v21 < 3.4028e38)
          {
            float v31 = v21;
            float v22 = v21;
          }
          float v23 = vabds_f32(v16, v18);
          float v24 = 3.4028e38;
          if (v23 < 3.4028e38)
          {
            if (v22 <= v23)
            {
              uint64_t v25 = (float *)&v30;
            }
            else
            {
              *(float *)&int v30 = v22;
              uint64_t v25 = &v31;
            }
            *uint64_t v25 = v23;
            float v24 = *(float *)&v30;
          }
          float v26 = vabds_f32(v16, v19);
          if (v24 > v26)
          {
            if (v31 <= v26)
            {
              char v27 = (float *)&v30;
            }
            else
            {
              *(float *)&int v30 = v31;
              char v27 = &v31;
            }
            *char v27 = v26;
            float v24 = *(float *)&v30;
          }
          float v28 = vabds_f32(v16, v20);
          if (v24 > v28)
          {
            if (v31 <= v28)
            {
              float v29 = (float *)&v30;
            }
            else
            {
              *(float *)&int v30 = v31;
              float v29 = &v31;
            }
            *float v29 = v28;
            float v24 = *(float *)&v30;
          }
          *(float *)(a3 + v11) = v24;
          v11 += 4;
          ++result;
        }
        while (4 * v7 != v11);
      }
      v8 += v6;
      a3 += a2;
      unint64_t v4 = v10;
    }
    while (v10 != v3);
  }
  return result;
}

unsigned int *sub_24846F74C(unsigned int *result, unsigned int *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *result;
    unint64_t v6 = result[1];
    uint64_t v7 = *a2;
    uint64_t v9 = a2 + 4;
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v33 = *((void *)v9 + 1);
    do
    {
      if (v3 <= 4) {
        uint64_t v10 = 4;
      }
      else {
        uint64_t v10 = v3;
      }
      if (v7)
      {
        uint64_t v11 = 0;
        if (2 * v4 <= 4) {
          uint64_t v12 = 4;
        }
        else {
          uint64_t v12 = 2 * v4;
        }
        uint64_t v13 = v12 - 4;
        unint64_t v14 = 2 * v4 + 6;
        if (v14 >= v6) {
          unint64_t v14 = v6;
        }
        uint64_t v15 = *((void *)result + 2);
        uint64_t v16 = *((void *)result + 3) + v15 * (v10 - 4);
        do
        {
          if (2 * v11 <= 4) {
            uint64_t v17 = 4;
          }
          else {
            uint64_t v17 = 2 * v11;
          }
          unint64_t v18 = 2 * v11 + 6;
          if (v18 >= v5) {
            unint64_t v18 = v5;
          }
          float v19 = 0.0;
          if (v13 < (uint64_t)v14)
          {
            uint64_t v20 = v17 - 4;
            uint64_t v21 = v16;
            uint64_t v22 = v13;
            do
            {
              if (v20 < (uint64_t)v18)
              {
                if (v22 >= 0) {
                  uint64_t v23 = v22;
                }
                else {
                  uint64_t v23 = v22 + 1;
                }
                uint64_t v24 = v4 - (v23 >> 1);
                unint64_t v25 = v24 - 3;
                if (v22) {
                  float v26 = (float *)&unk_24855027C;
                }
                else {
                  float v26 = (float *)&unk_248550150;
                }
                uint64_t v27 = 5 * v24 + 12;
                uint64_t v28 = v20;
                do
                {
                  if (v28 >= 0) {
                    uint64_t v29 = v28;
                  }
                  else {
                    uint64_t v29 = v28 + 1;
                  }
                  float v30 = 0.0;
                  if (v25 >= 0xFFFFFFFFFFFFFFFBLL)
                  {
                    uint64_t v31 = v11 - (v29 >> 1);
                    if ((unint64_t)(v31 - 3) >= 0xFFFFFFFFFFFFFFFBLL)
                    {
                      if ((v28 & 1 & v22) != 0) {
                        char v32 = (float *)&unk_2485501B4;
                      }
                      else {
                        char v32 = (float *)&unk_248550218;
                      }
                      if ((v28 & 1) == 0) {
                        char v32 = v26;
                      }
                      float v30 = v32[v27 + v31];
                    }
                  }
                  float v19 = v19 + v30 * *(float *)(v21 + 4 * v28++);
                }
                while (v28 < v18);
              }
              ++v22;
              v21 += v15;
            }
            while (v22 < v14);
          }
          *(float *)(v33 + v8 * v4 + 4 * v11++) = v19;
        }
        while (v11 != v7);
      }
      ++v4;
      v3 += 2;
    }
    while (v4 != v2);
  }
  return result;
}

unsigned int *sub_24846F900(unsigned int *result, unsigned int *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = *result;
    unint64_t v5 = result[1];
    uint64_t v6 = *a2;
    uint64_t v8 = *((void *)result + 2);
    uint64_t v7 = *((void *)result + 3);
    BOOL result = (unsigned int *)&unk_248550150;
    do
    {
      if (v6)
      {
        unint64_t v9 = 0;
        if (v3) {
          uint64_t v10 = (float *)&unk_24855027C;
        }
        else {
          uint64_t v10 = (float *)&unk_248550150;
        }
        uint64_t v11 = (v3 >> 1) - 2;
        uint64_t v12 = *((void *)a2 + 3) + *((void *)a2 + 2) * v3;
        do
        {
          uint64_t v13 = 0;
          float v14 = 3.4028e38;
          float v15 = 1.1755e-38;
          do
          {
            unint64_t v16 = (v11 + v13) & ~((v11 + v13) >> 63);
            if (v16 >= v5) {
              unint64_t v16 = v5 - 1;
            }
            uint64_t v17 = v7 + v8 * v16;
            for (uint64_t i = -2; i != 3; ++i)
            {
              unint64_t v19 = ((v9 >> 1) + i) & ~((uint64_t)((v9 >> 1) + i) >> 63);
              if (v19 >= v4) {
                unint64_t v19 = v4 - 1;
              }
              float v20 = *(float *)(v17 + 4 * v19);
              if (v20 < v14) {
                float v14 = *(float *)(v17 + 4 * v19);
              }
              if (v15 < v20) {
                float v15 = *(float *)(v17 + 4 * v19);
              }
            }
            ++v13;
          }
          while (v13 != 5);
          uint64_t v21 = 0;
          if ((v3 & 1 & v9) != 0) {
            uint64_t v22 = (float *)&unk_2485501B4;
          }
          else {
            uint64_t v22 = (float *)&unk_248550218;
          }
          if ((v9 & 1) == 0) {
            uint64_t v22 = v10;
          }
          float v23 = 0.0;
          do
          {
            uint64_t v24 = 0;
            unint64_t v25 = (v11 + v21) & ~((v11 + v21) >> 63);
            if (v25 >= v5) {
              unint64_t v25 = v5 - 1;
            }
            uint64_t v26 = v7 + v8 * v25;
            do
            {
              unint64_t v27 = ((v9 >> 1) - 2 + v24) & ~((uint64_t)((v9 >> 1) - 2 + v24) >> 63);
              if (v27 >= v4) {
                unint64_t v27 = v4 - 1;
              }
              float v23 = v23 + (float)(*(float *)(v26 + 4 * v27) * v22[v24++]);
            }
            while (v24 != 5);
            ++v21;
            v22 += 5;
          }
          while (v21 != 5);
          *(float *)(v12 + 4 * v9) = v23;
          if (v23 < v14)
          {
            *(float *)(v12 + 4 * v9) = v14;
            float v23 = v14;
          }
          if (v23 > v15) {
            *(float *)(v12 + 4 * v9) = v15;
          }
          ++v9;
        }
        while (v9 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_24846FA98(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  sub_2483EA250((uint64_t)&v26, *a2, v9);
  if (v30)
  {
    *(_DWORD *)(a1 + 40) = v30;
  }
  else
  {
    uint64_t v10 = v27;
    uint64_t v11 = v28;
    uint64_t v12 = v29;
    if (v9)
    {
      uint64_t v13 = 0;
      uint64_t v15 = *((void *)a2 + 2);
      float v14 = (float *)*((void *)a2 + 3);
      unint64_t v16 = v28;
      uint64_t v18 = *(void *)(a3 + 16);
      uint64_t v17 = *(float **)(a3 + 24);
      do
      {
        unint64_t v19 = v14;
        float v20 = v17;
        uint64_t v21 = v16;
        uint64_t v22 = v8;
        if (v8)
        {
          do
          {
            float v23 = *v19++;
            float v24 = v23;
            float v25 = *v20++;
            *v21++ = v24 + (float)(v25 * a4);
            --v22;
          }
          while (v22);
        }
        ++v13;
        unint64_t v16 = (float *)((char *)v16 + v10);
        uint64_t v17 = (float *)((char *)v17 + v18);
        float v14 = (float *)((char *)v14 + v15);
      }
      while (v13 != v9);
    }
    *(_DWORD *)(a1 + 40) = 0;
    *(_OWORD *)a1 = v26;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v12;
  }
}

uint64_t sub_24846FB80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = a5[1];
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v9 = *((void *)a5 + 2);
    uint64_t v8 = *((void *)a5 + 3);
    uint64_t v10 = a2 - result - 4;
    do
    {
      if (v7)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v8 + v9 * v6;
        uint64_t v13 = v10;
        do
        {
          float v14 = *(float *)(v12 + 4 * v11);
          float v15 = *(float *)(a2 + v6 * result + 4 * v11);
          uint64_t v16 = -1;
          uint64_t v17 = v13;
          float v18 = v15;
          do
          {
            uint64_t v19 = 0;
            uint64_t v20 = v16 + v6;
            do
            {
              if (v11 + v19 - 1 >= 0 && (v20 & 0x8000000000000000) == 0 && v11 + v19 - 1 < v7 && v20 < v5)
              {
                float v21 = *(float *)(v17 + 4 * v19);
                if (v21 < v18) {
                  float v18 = *(float *)(v17 + 4 * v19);
                }
                if (v15 < v21) {
                  float v15 = *(float *)(v17 + 4 * v19);
                }
              }
              ++v19;
            }
            while (v19 != 3);
            ++v16;
            v17 += result;
          }
          while (v16 != 2);
          float v22 = *(float *)(a4 + v6 * a3 + 4 * v11) + *(float *)(a4 + v6 * a3 + 4 * v11);
          float v23 = v18 - v22;
          float v24 = v15 + v22;
          if (v14 >= v23)
          {
            BOOL v25 = v14 <= v24;
          }
          else
          {
            float v14 = v23;
            BOOL v25 = 0;
          }
          if (!v25)
          {
            if (v14 > v24) {
              float v14 = v24;
            }
            *(float *)(v12 + 4 * v11) = v14;
          }
          ++v11;
          v13 += 4;
        }
        while (v11 != v7);
      }
      ++v6;
      v10 += result;
    }
    while (v6 != v5);
  }
  return result;
}

BOOL sub_24846FC78(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  int v8 = a2;
  v11[0] = a3;
  v11[1] = a4;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, uint64_t **, uint64_t (*)(uint64_t **, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))a1)(*(void *)(a1 + 8), v11, sub_24846FDD0, sub_248470180, 0, a2) != 0;
  }
  sub_24846FDD0(v11, 1uLL, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  for (unsigned int i = 0; i != v8; ++i)
    sub_248470180((uint64_t)v11, i, 0);
  return 0;
}

void sub_24846FD2C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        sub_2483E8DDC(v4 - 2);
        sub_2483E8DDC(v4 - 7);
        sub_2483E8DDC(v4 - 12);
        v4 -= 15;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_24846FDD0(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v10 = **a1;
  *(void *)(v10 + 112) = 396288;
  if ((396288 * a2) >> 62) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = sub_2483AB3A8(1585152 * a2, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v58 = 0;
  long long v59 = 0uLL;
  sub_248401764((uint64_t *)(v10 + 120), v11);
  *(_OWORD *)(v10 + 128) = 0uLL;
  sub_2483FED94(&v58);
  unint64_t v19 = 0;
  *(void *)(v10 + 144) = 0x10000;
  if ((a2 & 0xC00000000000) == 0) {
    unint64_t v19 = sub_2483AB3A8(a2 << 18, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v58 = 0;
  long long v59 = 0uLL;
  uint64_t v20 = *(void *)(v10 + 152);
  *(void *)(v10 + 152) = v19;
  if (v20)
  {
    float v21 = *(void (**)(void, void))(v10 + 160);
    if (v21) {
      v21(*(void *)(v10 + 168), *(void *)(v20 - 16));
    }
    else {
      free(*(void **)(v20 - 16));
    }
  }
  *(_OWORD *)(v10 + 160) = v59;
  sub_24843E158(&v58);
  uint64_t v29 = v9[1];
  uint64_t v31 = *(uint64_t **)v29;
  int v30 = *(uint64_t **)(v29 + 8);
  unint64_t v32 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v30 - *(void *)v29) >> 3);
  unint64_t v33 = a2 - v32;
  if (a2 > v32)
  {
    uint64_t v34 = *(void *)(v29 + 16);
    if (0xEEEEEEEEEEEEEEEFLL * ((v34 - (uint64_t)v30) >> 3) >= v33)
    {
      bzero(*(void **)(v29 + 8), 120 * ((120 * v33 - 120) / 0x78) + 120);
      *(void *)(v29 + 8) = &v30[15 * ((120 * v33 - 120) / 0x78) + 15];
      goto LABEL_34;
    }
    if (a2 > 0x222222222222222) {
      sub_2483E92E8();
    }
    unint64_t v35 = 0xEEEEEEEEEEEEEEEFLL * ((v34 - (uint64_t)v31) >> 3);
    uint64_t v36 = 2 * v35;
    if (2 * v35 <= a2) {
      uint64_t v36 = a2;
    }
    if (v35 >= 0x111111111111111) {
      unint64_t v37 = 0x222222222222222;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37 > 0x222222222222222) {
      sub_2483E9338();
    }
    uint64_t v38 = 120 * v37;
    unsigned int v39 = (char *)operator new(120 * v37);
    unint64_t v40 = &v39[120 * v32];
    float v41 = &v39[v38];
    bzero(v40, 120 * ((120 * v33 - 120) / 0x78) + 120);
    float v42 = &v40[120 * ((120 * v33 - 120) / 0x78) + 120];
    if (v30 == v31)
    {
      *(void *)uint64_t v29 = v40;
      *(void *)(v29 + 8) = v42;
      *(void *)(v29 + 16) = v41;
      if (!v30) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v43 = 0;
      do
      {
        unsigned int v44 = &v30[v43];
        unsigned __int8 v45 = &v40[v43 * 8];
        long long v46 = *(_OWORD *)&v30[v43 - 15];
        *((void *)v45 - 13) = v30[v43 - 13];
        *(_OWORD *)(v45 - 120) = v46;
        uint64_t v47 = v30[v43 - 12];
        *(v44 - 12) = 0;
        *((void *)v45 - 12) = v47;
        *((void *)v45 - 11) = v30[v43 - 11];
        long long v48 = *(_OWORD *)&v30[v43 - 10];
        *((void *)v45 - 8) = v30[v43 - 8];
        *((_OWORD *)v45 - 5) = v48;
        uint64_t v49 = v30[v43 - 7];
        *(v44 - 7) = 0;
        *((void *)v45 - 7) = v49;
        *((void *)v45 - 6) = v30[v43 - 6];
        long long v50 = *(_OWORD *)&v30[v43 - 5];
        *((void *)v45 - 3) = v30[v43 - 3];
        *(_OWORD *)(v45 - 40) = v50;
        uint64_t v51 = v30[v43 - 2];
        *(v44 - 2) = 0;
        *((void *)v45 - 2) = v51;
        *((void *)v45 - 1) = v30[v43 - 1];
        v43 -= 15;
      }
      while (&v30[v43] != v31);
      long long v52 = &v40[v43 * 8];
      uint64_t v53 = *(uint64_t **)v29;
      int v30 = *(uint64_t **)(v29 + 8);
      *(void *)uint64_t v29 = v52;
      *(void *)(v29 + 8) = v42;
      *(void *)(v29 + 16) = v41;
      if (v30 != v53)
      {
        do
        {
          sub_2483E8DDC(v30 - 2);
          sub_2483E8DDC(v30 - 7);
          sub_2483E8DDC(v30 - 12);
          v30 -= 15;
        }
        while (v30 != v53);
        int v30 = v53;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    operator delete(v30);
    goto LABEL_34;
  }
  if (a2 < v32)
  {
    for (unsigned int i = &v31[15 * a2]; v30 != i; v30 -= 15)
    {
      sub_2483E8DDC(v30 - 2);
      sub_2483E8DDC(v30 - 7);
      sub_2483E8DDC(v30 - 12);
    }
    *(void *)(v29 + 8) = i;
  }
LABEL_34:
  uint64_t v55 = v9[2];
  if ((347136 * a2) >> 62) {
    unint64_t v56 = 0;
  }
  else {
    unint64_t v56 = sub_2483AB3A8(1388544 * a2, v22, v23, v24, v25, v26, v27, v28);
  }
  uint64_t v58 = 0;
  long long v59 = 0uLL;
  sub_248401764((uint64_t *)(v55 + 40), v56);
  *(_OWORD *)(v55 + 48) = v59;
  sub_2483FED94(&v58);
  return 0;
}

void sub_248470180(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v354 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = atomic_load(*(unsigned __int8 **)v3);
  if (v4) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = (unint64_t)(*(void *)(*(void *)(v3 + 8) + 64) + 7) >> 3;
  v7.i64[0] = a2 % v6;
  v7.i64[1] = a2 / v6;
  int64x2_t v8 = vshlq_n_s64(v7, 3uLL);
  int8x16_t v9 = (int8x16_t)vaddq_s64(v8, vdupq_n_s64(8uLL));
  int64x2_t v10 = vsubq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v9, *(uint64x2_t *)(*(void *)(v3 + 8) + 64)), *(int8x16_t *)(*(void *)(v3 + 8) + 64), v9), v8);
  int64x2_t v273 = v8;
  int64x2_t v326 = v8;
  int64x2_t v327 = v10;
  uint64_t v275 = v3;
  if (*(int *)(v5 + 48) <= 3)
  {
    int64x2_t v323 = v10;
    sub_248450260(*(void *)(v3 + 24), (uint64_t)&v326, **(void **)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), 0, 0, 0, 0, a3, *(void **)(v3 + 56));
    uint64_t v3 = v275;
    int64x2_t v10 = v323;
  }
  unint64_t v11 = v10.u64[1];
  unint64_t v12 = v10.i64[0];
  uint64_t v13 = *(float **)(v3 + 64);
  uint64_t v307 = *(void *)(v3 + 72);
  uint64_t v14 = *(void *)v13;
  unint64_t v314 = v10.u64[1];
  unint64_t v316 = v10.i64[0];
  if (*(int *)(*(void *)v13 + 48) >= 6)
  {
    if (v10.i64[1])
    {
      uint64_t v16 = v10.i64[1];
      unint64_t v15 = v10.i64[0];
      if (v10.i64[0] <= 1uLL) {
        size_t v17 = 1;
      }
      else {
        size_t v17 = v10.i64[0];
      }
      uint64_t v18 = v273.i64[1];
      do
      {
        if (v15)
        {
          memset((void *)(*(void *)(v307 + 24) + *(void *)(v307 + 16) * v18 + v273.i64[0]), 1, v17);
          unint64_t v15 = v316;
        }
        ++v18;
        --v16;
      }
      while (v16);
    }
    goto LABEL_141;
  }
  uint64_t v19 = *(void *)(v3 + 56);
  float32_t v324 = v13 + 2;
  float v20 = *(float *)v14;
  uint64_t v321 = *((void *)v13 + 15) + 4 * *((void *)v13 + 14) * a3;
  float v318 = (float32x4_t *)(v321 + 786432);
  float v21 = *(float *)(v19 + 100);
  *(float *)&long long v349 = *(float *)(v19 + 104)
                  + (float)((float)*(char *)(*(void *)(v19 + 24)
                                           + *(void *)(v19 + 16) * ((unint64_t)v273.i64[1] >> 3)
                                           + ((unint64_t)v273.i64[0] >> 3))
                          * v21);
  DWORD1(v349) = 0;
  *((float *)&v349 + 2) = *(float *)(v19 + 108)
                        + (float)((float)*(char *)(*(void *)(v19 + 64)
                                                 + *(void *)(v19 + 56) * ((unint64_t)v273.i64[1] >> 3)
                                                 + ((unint64_t)v273.i64[0] >> 3))
                                * v21);
  float32x4_t v22 = 0uLL;
  long long v347 = 0u;
  long long v348 = 0u;
  long long v345 = 0u;
  long long v346 = 0u;
  long long v343 = 0u;
  long long v344 = 0u;
  long long v341 = 0u;
  long long v342 = 0u;
  long long v339 = 0u;
  long long v340 = 0u;
  long long v337 = 0u;
  long long v338 = 0u;
  long long v335 = 0u;
  long long v336 = 0u;
  long long v333 = 0u;
  long long v334 = 0u;
  uint64_t v302 = v14;
  if (v11)
  {
    unint64_t v23 = 0;
    if (v20 >= 12.0)
    {
      float v25 = 1.0;
    }
    else
    {
      float v24 = 8.0 / (v20 + -4.0);
      float v25 = v24;
    }
    if (v12 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v12;
    }
    uint64_t v296 = v26;
    unint64_t v27 = v12;
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v312 = v23 + v273.i64[1];
        unint64_t v29 = 8 * (v23 + v273.i64[1]);
        unint64_t v293 = v23;
        uint64_t v309 = 8 * v23;
        do
        {
          unsigned __int8 v30 = 0;
          int v31 = *(_DWORD *)(v14 + 48);
          unint64_t v32 = (double *)&qword_24854E568;
          double v33 = 1.0e30;
          do
          {
            uint64_t v34 = *((unsigned int *)v32 - 2);
            unint64_t v35 = v32 - 1;
            if (*((_DWORD *)v32 - 1) >= v31)
            {
              double v36 = *v32;
              v329.i64[0] = v34 | 0x100000000;
              float v37 = v36 / 0.8;
              if (v20 >= 5.0 || (v34 - 1) > 1)
              {
                BOOL v38 = v20 > 4.0 && v34 >= 3;
                if (v38) {
                  float v37 = v37 + (float)(v25 * 0.5);
                }
              }
              else
              {
                float v37 = v37
                    + (float)((float)((float)((float)(5.0 - v20) / 5.0) * (float)((float)(5.0 - v20) / 5.0)) * -0.4);
              }
              double v39 = sub_248438EBC(&v329, 8 * (v28 + v273.i64[0]), v29, v324, (uint64_t)&v349, v321, v318, v37);
              if (v33 > v39)
              {
                unsigned __int8 v30 = v34;
                double v33 = v39;
              }
            }
            v32 += 2;
          }
          while (v35 + 2 != (double *)&unk_24854E600);
          float v40 = v33;
          sub_24840BD3C(v307, v28 + v273.i64[0], v312, v30, 0);
          *((float *)&v333 + v28 + v309) = (float)((float)(-0.4 / (float)(v20 + 1.4)) + 1.0) * v40;
          ++v28;
          uint64_t v14 = v302;
        }
        while (v28 != v296);
        unint64_t v11 = v314;
        unint64_t v27 = v316;
        unint64_t v23 = v293;
      }
      ++v23;
    }
    while (v23 < v11);
    unint64_t v41 = v11;
    float32x4_t v22 = 0uLL;
  }
  else
  {
    unint64_t v41 = 0;
  }
  uint64_t v42 = 0;
  float32x4_t v331 = v22;
  float32x4_t v332 = v22;
  float32x4_t v329 = v22;
  float32x4_t v330 = v22;
  unint64_t v285 = *(void *)(v14 + 56);
  do
  {
    uint64_t v43 = (float *)((char *)&unk_24854E600 + 12 * v42);
    if (*(void *)(v14 + 56) > (unint64_t)*((unsigned __int8 *)v43 + 5)) {
      goto LABEL_115;
    }
    uint64_t v44 = *(unsigned int *)v43;
    uint64_t v45 = byte_248553507[v44];
    if (v45 - 1 >= v41) {
      goto LABEL_115;
    }
    uint64_t v46 = 0;
    unsigned int v47 = *((unsigned __int8 *)v43 + 4);
    float v48 = v43[2];
    uint64_t v49 = byte_2485534EC[v44];
    unint64_t v50 = v49 - 1;
    if (v49 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = byte_2485534EC[v44];
    }
    if (v45 <= 1) {
      uint64_t v52 = 1;
    }
    else {
      uint64_t v52 = byte_248553507[v44];
    }
    uint64_t v53 = 32 * v45;
    uint64_t v54 = 8 * v45;
    uint64_t v286 = v52;
    uint64_t v55 = 32 * v52;
    unint64_t v56 = &v333;
    long long v57 = &v329;
    uint64_t v58 = byte_248553507[v44];
    uint64_t v284 = v58;
    __leuint64_t n = v51;
    uint64_t v277 = v55;
    uint64_t v278 = 4 * v51;
    uint64_t v282 = 8 * v45;
    uint64_t v283 = 32 * v45;
    do
    {
      uint64_t v59 = v46;
      uint64_t v46 = v58;
      if (v50 >= v316) {
        goto LABEL_114;
      }
      uint64_t v289 = v58;
      uint64_t v60 = 0;
      BOOL v61 = v44 == 10;
      unint64_t v62 = v59 + 7;
      BOOL v64 = (v59 & 1) == 0 || v44 != 7;
      BOOL v290 = v64;
      BOOL v65 = (v59 & 3) != 0 && v44 == 11;
      char v66 = v65;
      char v310 = v66;
      unint64_t v300 = v59 + 3;
      unint64_t v294 = v59 + 1;
      uint64_t v297 = v59;
      if (v65) {
        BOOL v61 = 1;
      }
      BOOL v305 = v61;
      uint64_t v280 = v59 + v273.i64[1];
      unint64_t v281 = 8 * (v59 + v273.i64[1]);
      uint64_t v279 = 8 * v59;
      uint64_t v287 = v57;
      unint64_t v288 = v56;
      uint64_t v67 = v49;
      unint64_t v68 = v316;
      do
      {
        uint64_t v69 = v60;
        uint64_t v60 = v67;
        if (v69 + 7 >= v68 || v62 >= v314)
        {
          if ((v310 & 1) != 0 || v44 == 10 && (v69 & 3) != 0) {
            goto LABEL_103;
          }
        }
        else
        {
          if (*(void *)(v14 + 56) <= 3uLL && v44 == 20)
          {
            if (((v69 | v59) & 7) != 0) {
              goto LABEL_103;
            }
            sub_24843DA88(8uLL, 1, v273.i64[0], v273.i64[1], v69, v59, v324, (uint64_t)&v349, v48, 2.26, v307, (uint64_t)&v333, v321, v318);
            goto LABEL_91;
          }
          if (v305) {
            goto LABEL_103;
          }
        }
        if (v69 + 3 < v316 && v300 < v314)
        {
          if (v44 == 11)
          {
            if (((v69 | v59) & 3) != 0) {
              goto LABEL_103;
            }
            sub_24843DA88(4uLL, v285 < 4, v273.i64[0], v273.i64[1], v69, v59, v324, (uint64_t)&v349, v48, 1.5, v307, (uint64_t)&v333, v321, v318);
LABEL_91:
            uint64_t v14 = v302;
LABEL_92:
            uint64_t v59 = v297;
            goto LABEL_103;
          }
          if (v44 == 10) {
            goto LABEL_103;
          }
        }
        if (v69 + 1 >= v316 || v294 >= v314)
        {
          if (!v290 || v44 == 6 && (v69 & 1) != 0) {
            goto LABEL_103;
          }
        }
        else
        {
          if (v44 == 6) {
            goto LABEL_103;
          }
          if (v44 == 7)
          {
            if ((v69 | v59)) {
              goto LABEL_103;
            }
            sub_24843DA88(2uLL, 1, v273.i64[0], v273.i64[1], v69, v59, v324, (uint64_t)&v349, v48, 1.35, v307, (uint64_t)&v333, v321, v318);
            goto LABEL_91;
          }
        }
        uint64_t v72 = 0;
        uint64_t v328 = v44 | 0x100000000;
        float v73 = 0.0;
        int64_t v74 = v57;
        int64_t v75 = (float *)v56;
LABEL_106:
        int64_t v76 = v74;
        uint64_t v77 = v75;
        size_t v78 = __len;
        while (1)
        {
          unsigned int v79 = v76->u8[0];
          int64_t v76 = (float32x4_t *)((char *)v76 + 1);
          if (v79 >= v47) {
            break;
          }
          float v80 = *v77++;
          float v73 = v73 + v80;
          if (!--v78)
          {
            ++v72;
            v75 += 8;
            int64_t v74 = (float32x4_t *)((char *)v74 + 8);
            if (v72 != v286) {
              goto LABEL_106;
            }
            float v81 = sub_248438EBC((float32x4_t *)&v328, 8 * (v69 + v273.i64[0]), v281, v324, (uint64_t)&v349, v321, v318, v48);
            uint64_t v14 = v302;
            uint64_t v59 = v297;
            if (v81 < v73)
            {
              uint64_t v274 = v42;
              unint64_t v82 = 0;
              int64_t v83 = v57;
              do
              {
                bzero(&v56[v82 / 0x10], v278);
                memset(v83, v47, __len);
                v82 += 32;
                int64_t v83 = (float32x4_t *)((char *)v83 + 8);
              }
              while (v277 != v82);
              sub_24840BD3C(v307, v69 + v273.i64[0], v280, v44, 0);
              *((float *)&v333 + v279 + v69) = v81;
              uint64_t v14 = v302;
              uint64_t v42 = v274;
              goto LABEL_92;
            }
            break;
          }
        }
LABEL_103:
        uint64_t v67 = v60 + v49;
        unint64_t v56 = (long long *)((char *)v56 + 4 * v49);
        long long v57 = (float32x4_t *)((char *)v57 + v49);
        unint64_t v68 = v316;
      }
      while (v60 + v49 - 1 < v316);
      unint64_t v41 = v314;
      unint64_t v50 = v49 - 1;
      uint64_t v45 = v284;
      unint64_t v56 = v288;
      uint64_t v46 = v289;
      uint64_t v54 = v282;
      uint64_t v53 = v283;
      long long v57 = v287;
LABEL_114:
      uint64_t v58 = v46 + v45;
      unint64_t v56 = (long long *)((char *)v56 + v53);
      long long v57 = (float32x4_t *)((char *)v57 + v54);
    }
    while (v46 + v45 - 1 < v41);
LABEL_115:
    ++v42;
  }
  while (v42 != 9);
  if (*(int *)(v14 + 48) <= 4 && v41 >= 2)
  {
    uint64_t v85 = 0;
    uint64_t v86 = 1;
    do
    {
      uint64_t v87 = v85;
      uint64_t v85 = v86;
      if (v316 >= 2)
      {
        uint64_t v88 = 0;
        do
        {
          if ((v88 | v87)) {
            sub_24843DA88(2uLL, 1, v273.i64[0], v273.i64[1], v88, v87, v324, (uint64_t)&v349, 1.25, 1.35, v307, (uint64_t)&v333, v321, v318);
          }
          unint64_t v89 = v88 + 2;
          ++v88;
        }
        while (v89 < v316);
        unint64_t v41 = v314;
      }
      uint64_t v86 = v85 + 1;
    }
    while (v85 + 1 < v41);
    if (*(int *)(v302 + 48) < 1) {
      uint64_t v90 = 1;
    }
    else {
      uint64_t v90 = 2;
    }
    if (v41 >= 4)
    {
      uint64_t v91 = 0;
      do
      {
        if (v316 >= 4)
        {
          for (unint64_t i = 3; i < v316; i += v90)
          {
            if ((((i - 3) | v91) & 3) != 0) {
              sub_24843DA88(4uLL, v285 < 4, v273.i64[0], v273.i64[1], i - 3, v91, v324, (uint64_t)&v349, 1.5, 1.5, v307, (uint64_t)&v333, v321, v318);
            }
          }
          unint64_t v41 = v314;
        }
        v91 += v90;
      }
      while (v91 + 3 < v41);
    }
  }
LABEL_141:
  uint64_t v93 = *(void *)(v275 + 16);
  uint64_t v94 = *(void *)(v275 + 104);
  float v95 = *(float *)v93;
  int v96 = *(_DWORD *)(v93 + 48);
  if (v95 < 0.5 || v96 > 4 || *(_DWORD *)(*(void *)(v275 + 88) + 452) == 0)
  {
    if (v314)
    {
      unint64_t v99 = v316;
      if (v316 <= 1) {
        size_t v100 = 1;
      }
      else {
        size_t v100 = v316;
      }
      uint64_t v101 = v273.i64[1];
      do
      {
        if (v99)
        {
          memset((void *)(*(void *)(v94 + 24) + *(void *)(v94 + 16) * v101 + v273.i64[0]), 4, v100);
          unint64_t v99 = v316;
        }
        ++v101;
        --v314;
      }
      while (v314);
    }
  }
  else
  {
    uint64_t v102 = *(unint64_t **)(v275 + 40);
    unint64_t v103 = **(unsigned int ***)(v275 + 32);
    size_t __lena = *(void *)(v275 + 72);
    uint64_t v295 = *(void *)(v275 + 96);
    uint64_t v104 = **(void **)(v275 + 80);
    uint64_t v105 = v104 + 120 * a3;
    uint64_t v325 = *(void *)(v94 + 16);
    unint64_t v107 = *v102;
    unint64_t v106 = v102[1];
    uint64_t v298 = *(void *)(v275 + 104);
    if (!*(_DWORD *)v105)
    {
      sub_2483EA250((uint64_t)&v333, 0x44u, 0x44u);
      if (DWORD2(v335)) {
        goto LABEL_316;
      }
      long long v260 = v334;
      *((void *)&v334 + 1) = 0;
      uint64_t v261 = v335;
      *(_OWORD *)uint64_t v105 = v333;
      uint64_t v262 = *(void *)(v105 + 24);
      *(_OWORD *)(v105 + 16) = v260;
      if (v262)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v262 - 24));
        free(*(void **)(v262 - 32));
      }
      *(void *)(v105 + 32) = v261;
      sub_2483EA250((uint64_t)&v329, 0x10u, 0x10u);
      __int32 v263 = v331.i32[2];
      if (!v331.i32[2])
      {
        float32x4_t v264 = v330;
        v330.i64[1] = 0;
        uint64_t v265 = v331.i64[0];
        uint64_t v266 = v104 + 120 * a3;
        *(float32x4_t *)(v266 + 40) = v329;
        uint64_t v267 = *(void *)(v266 + 64);
        *(float32x4_t *)(v266 + 56) = v264;
        if (v267)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v267 - 24));
          free(*(void **)(v267 - 32));
        }
        *(void *)(v104 + 120 * a3 + 72) = v265;
        sub_2483EA250((uint64_t)&v349, 0x11u, 0x11u);
        __int32 v263 = v353;
        if (!v353)
        {
          uint64_t v268 = v351;
          uint64_t v269 = v352;
          uint64_t v270 = v104 + 120 * a3;
          *(_OWORD *)(v270 + 80) = v349;
          *(void *)(v270 + 96) = v350;
          sub_2483EB138((uint64_t *)(v270 + 104), v268);
          *(void *)(v270 + 112) = v269;
          uint64_t v351 = 0;
        }
        if (!v331.i32[2])
        {
          uint64_t v271 = v330.i64[1];
          v330.i64[1] = 0;
          if (v271)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v271 - 24));
            free(*(void **)(v271 - 32));
          }
        }
      }
      if (!DWORD2(v335))
      {
        uint64_t v272 = *((void *)&v334 + 1);
        *((void *)&v334 + 1) = 0;
        if (v272)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v272 - 24));
          free(*(void **)(v272 - 32));
        }
      }
      if (v263)
      {
LABEL_316:
        atomic_store(1u, *(unsigned __int8 **)v275);
        return;
      }
    }
    uint64_t v108 = v273.i64[0] + (v107 >> 3);
    unint64_t v109 = v108 + v316;
    uint64_t v110 = v273.i64[1] + (v106 >> 3);
    unint64_t v111 = v110 + v314;
    uint64_t v112 = 8 * v110;
    unint64_t v113 = 8 * v110 - 2;
    if (!v110) {
      unint64_t v113 = 0;
    }
    unint64_t v114 = 8 * v111;
    if (8 * v111 != v103[1]) {
      unint64_t v114 = (8 * v111) | 2;
    }
    uint64_t v115 = 8 * v108;
    if (8 * v109 == *v103) {
      unint64_t v116 = 8 * v109;
    }
    else {
      unint64_t v116 = (8 * v109) | 2;
    }
    if (v113 < v114)
    {
      do
      {
        uint64_t v117 = 0;
        unint64_t v118 = v113;
        uint64_t v119 = *(void *)(v105 + 24) + *(void *)(v105 + 16) * (v113 - v112 + 2);
        long long v333 = 0uLL;
        *(void *)&long long v334 = 0;
        float32x4_t v329 = 0uLL;
        v330.i64[0] = 0;
        long long v349 = 0uLL;
        uint64_t v350 = 0;
        BOOL v38 = v113 != 0;
        unint64_t v120 = v113 - 1;
        if (!v38) {
          unint64_t v120 = 0;
        }
        uint64_t v121 = *((void *)v103 + 2);
        unint64_t v122 = v121 * v120;
        unint64_t v113 = v118 + 1;
        unint64_t v123 = v121 * v118;
        if (v118 + 1 < v103[1]) {
          ++v118;
        }
        unint64_t v124 = v118 * v121;
        uint64_t v125 = (uint64_t *)(v103 + 6);
        do
        {
          uint64_t v126 = *v125;
          v125 += 5;
          *(void *)((char *)&v333 + v117 * 8) = v126 + v122;
          v329.i64[v117] = v126 + v123;
          *(void *)((char *)&v349 + v117 * 8) = v126 + v124;
          ++v117;
        }
        while (v117 != 3);
        uint64_t v127 = v115 - 2;
        if (!v108)
        {
          uint64_t v128 = 0;
          float v130 = 0.0;
          do
          {
            int32x4_t v131 = (float *)v329.i64[v128];
            BOOL v129 = *v103 > 1;
            float v132 = (float)(flt_24854EE18[v128]
                         * (float)(*(float *)(*((void *)&v333 + v128) + 4 * v129)
                                 + (float)(**((float **)&v333 + v128)
                                         + (float)((float)(*(float *)(*((void *)&v349 + v128) + 4 * v129)
                                                         + (float)(**((float **)&v349 + v128)
                                                                 + (float)((float)(*v131 + v131[v129])
                                                                         + **((float **)&v349 + v128))))
                                                 + **((float **)&v333 + v128)))))
                 + (float)(flt_24854EE0C[v128] * *v131);
            float v130 = v130 + (float)(v132 * v132);
            ++v128;
          }
          while (v128 != 3);
          *(float *)(v119 + 4 * (2 - v115)) = v130;
          uint64_t v127 = 1;
        }
        uint64_t v133 = v127 + 4;
        if (v127 + 4 <= v116)
        {
          while (1)
          {
            unint64_t v134 = v133;
            if (v127 + 5 > (unint64_t)*v103) {
              break;
            }
            uint64_t v135 = 0;
            float32x4_t v136 = 0uLL;
            do
            {
              uint64_t v137 = v329.i64[v135] + 4 * v127;
              float32x4_t v138 = *(float32x4_t *)(v137 - 4);
              float32x4_t v139 = *(float32x4_t *)(v137 + 4);
              float32x4_t v140 = vmulq_n_f32(*(float32x4_t *)v137, flt_24854EE0C[v135]);
              uint64_t v141 = *((void *)&v333 + v135) + 4 * v127;
              float32x4_t v142 = *(float32x4_t *)(v141 - 4);
              float32x4_t v143 = *(float32x4_t *)v141;
              float32x4_t v144 = vaddq_f32(v138, *(float32x4_t *)(v141 + 4));
              uint64_t v145 = *((void *)&v349 + v135) + 4 * v127;
              float32x4_t v146 = vmlaq_n_f32(v140, vaddq_f32(vaddq_f32(v144, vaddq_f32(v139, *(float32x4_t *)(v145 - 4))), vaddq_f32(vaddq_f32(v142, *(float32x4_t *)v145), vaddq_f32(v143, *(float32x4_t *)(v145 + 4)))), flt_24854EE18[v135]);
              float32x4_t v136 = vmlaq_f32(v136, v146, v146);
              ++v135;
            }
            while (v135 != 3);
            *(float32x4_t *)(v119 - 32 * v108 + 8 + 4 * v127) = v136;
            uint64_t v133 = v134 + 4;
            uint64_t v127 = v134;
            if (v134 + 4 > v116) {
              goto LABEL_183;
            }
          }
        }
        unint64_t v134 = v127;
LABEL_183:
        if (v134 < v116)
        {
          unint64_t v147 = *v103;
          do
          {
            uint64_t v148 = 0;
            if (v134) {
              unint64_t v149 = v134 - 1;
            }
            else {
              unint64_t v149 = 0;
            }
            unint64_t v150 = v134 + 1;
            if (v134 + 1 >= v147) {
              unint64_t v151 = v134;
            }
            else {
              unint64_t v151 = v134 + 1;
            }
            float v152 = 0.0;
            do
            {
              uint64_t v153 = v329.i64[v148];
              uint64_t v154 = *((void *)&v349 + v148);
              float v155 = (float)(flt_24854EE18[v148]
                           * (float)((float)((float)((float)((float)((float)((float)(*(float *)(v153 + 4 * v149)
                                                                                   + *(float *)(v153 + 4 * v151))
                                                                           + *(float *)(v154 + 4 * v149))
                                                                   + *(float *)(v154 + 4 * v134))
                                                           + *(float *)(v154 + 4 * v151))
                                                   + *(float *)(*((void *)&v333 + v148) + 4 * v149))
                                           + *(float *)(*((void *)&v333 + v148) + 4 * v134))
                                   + *(float *)(*((void *)&v333 + v148) + 4 * v151)))
                   + (float)(flt_24854EE0C[v148] * *(float *)(v153 + 4 * v134));
              float v152 = v152 + (float)(v155 * v155);
              ++v148;
            }
            while (v148 != 3);
            *(float *)(v119 + 4 * (v134 - v115) + 8) = v152;
            ++v134;
          }
          while (v150 != v116);
        }
      }
      while (v113 != v114);
    }
    uint64_t v156 = v104 + 120 * a3;
    float v157 = *(float **)(v156 + 64);
    uint64_t v158 = *(void *)(v156 + 56) >> 2;
    int64x2_t v319 = v327;
    uint64_t v159 = 2 * v327.i64[1];
    uint64_t v161 = *(void *)(v105 + 16);
    uint64_t v160 = *(void *)(v105 + 24);
    uint64_t v162 = 2 * v327.i64[0];
    uint64_t v163 = 4 * v161;
    if (2 * v327.i64[1])
    {
      uint64_t v164 = 0;
      uint64_t v165 = v160 + 2 * v161;
      do
      {
        uint64_t v166 = 0;
        long long v333 = 0uLL;
        long long v334 = 0uLL;
        uint64_t v167 = v165;
        do
        {
          *(void *)((char *)&v333 + v166) = v167;
          v166 += 8;
          v167 += v161;
        }
        while (v166 != 32);
        if (v162)
        {
          for (uint64_t j = 0; j != v162; ++j)
          {
            uint64_t v169 = 0;
            float32x4_t v170 = 0uLL;
            do
            {
              float32x4_t v170 = vaddq_f32(v170, *(float32x4_t *)(*(void *)((char *)&v333 + v169) + 16 * j + 8));
              v169 += 8;
            }
            while (v169 != 32);
            int32x2_t v171 = (int32x2_t)vpaddq_f32(v170, v170).u64[0];
            *(float *)v171.i32 = vaddv_f32((float32x2_t)v171);
            v157[v164 * v158 + j] = 0.25 * vsqrtq_f32((float32x4_t)vdupq_lane_s32(v171, 0)).f32[0];
          }
        }
        ++v164;
        v165 += v163;
      }
      while (v164 != v159);
    }
    float v315 = v157;
    uint64_t v172 = 0;
    uint64_t v173 = v104 + 120 * a3;
    uint64_t v174 = *(void *)(v173 + 104);
    uint64_t v175 = *(void *)(v173 + 96) >> 2;
    uint64_t v176 = v159 | 1;
    uint64_t v177 = v162 | 1;
    uint64_t v178 = -8 * v108;
    unint64_t v180 = *v103;
    unint64_t v179 = v103[1];
    do
    {
      uint64_t v181 = 0;
      long long v333 = 0uLL;
      long long v334 = 0uLL;
      uint64_t v182 = 4 * v172;
      uint64_t v183 = v160;
      do
      {
        *(void *)((char *)&v333 + v181) = v183;
        v181 += 8;
        v183 += v161;
      }
      while (v181 != 32);
      uint64_t v184 = 0;
      unint64_t v185 = 2 * (v182 + v112 == 0);
      if (((v182 + v112) | 2uLL) <= v179) {
        unint64_t v186 = 4;
      }
      else {
        unint64_t v186 = v179 + 2 - (v182 + v112);
      }
      unint64_t v187 = v186 - 2 * (v182 + v112 == 0);
      do
      {
        unint64_t v188 = (4 * v184) | 2;
        if (4 * v184 != v178) {
          unint64_t v188 = 4 * v184;
        }
        if (((v115 + 4 * v184) | 2uLL) <= v180) {
          unint64_t v189 = 4 * v184 + 4;
        }
        else {
          unint64_t v189 = v180 - v115 + 2;
        }
        if (v189 - v188 == 4 && v187 == 4)
        {
          float32x4_t v195 = 0uLL;
          if (v186 > v185)
          {
            unint64_t v196 = v185;
            do
            {
              if (v189 > v188)
              {
                uint64_t v197 = (float32x4_t *)(*((void *)&v333 + v196) + 4 * v188);
                unint64_t v198 = v188;
                do
                {
                  float32x4_t v199 = *v197++;
                  float32x4_t v195 = vaddq_f32(v195, v199);
                  v198 += 4;
                }
                while (v198 < v189);
              }
              ++v196;
            }
            while (v196 < v186);
          }
          int32x2_t v200 = (int32x2_t)vpaddq_f32(v195, v195).u64[0];
          *(float *)v200.i32 = vaddv_f32((float32x2_t)v200);
          float v194 = 0.25 * vsqrtq_f32((float32x4_t)vdupq_lane_s32(v200, 0)).f32[0];
        }
        else
        {
          float v191 = 0.0;
          if (v186 > v185)
          {
            unint64_t v192 = v185;
            do
            {
              if (v189 > v188)
              {
                unint64_t v193 = v188;
                do
                  float v191 = v191 + *(float *)(*((void *)&v333 + v192) + 4 * v193++);
                while (v193 < v189);
              }
              ++v192;
            }
            while (v192 < v186);
          }
          float v194 = sqrtf(v191 / (float)((v189 - v188) * v187));
        }
        *(float *)(v174 + 4 * v172 * v175 + 4 * v184++) = v194;
      }
      while (v184 != v177);
      ++v172;
      v160 += v163;
    }
    while (v172 != v176);
    unint64_t v313 = v326.u64[1];
    unint64_t v299 = v326.i64[1] + v319.i64[1];
    if (v326.i64[1] < (unint64_t)(v326.i64[1] + v319.i64[1]))
    {
      unint64_t v301 = v326.i64[0];
      unint64_t v322 = v326.i64[0] + v319.i64[0];
      uint64_t v201 = 8 * v158;
      uint64_t v202 = 4 * v158;
      float v311 = v157 + 1;
      uint64_t v203 = 8 * v175;
      unint64_t v306 = (float *)(v174 + 4);
      uint64_t v308 = (uint64_t)&v157[v158 + 1];
      uint64_t v303 = v174 + 4 + 8 * v175;
      uint64_t v304 = v174 + 4 + 4 * v175;
      do
      {
        if (v301 < v322)
        {
          uint64_t v204 = v311;
          unint64_t v320 = *(void *)(__lena + 24) + *(void *)(__lena + 16) * v313;
          unint64_t v317 = *(void *)(v295 + 24) + *(void *)(v295 + 16) * v313;
          unint64_t v206 = v301;
          uint64_t v205 = v303;
          float v207 = (char *)(*(void *)(v298 + 24) + v301 + *(void *)(v298 + 16) * v313);
          uint64_t v208 = v304;
          float v209 = v306;
          uint64_t v210 = v308;
          float v211 = v315;
          do
          {
            unint64_t v212 = *(unsigned __int8 *)(v320 + v206);
            if (v212)
            {
              uint64_t v213 = 0;
              unint64_t v214 = v212 >> 1;
              unint64_t v215 = byte_248553507[v212 >> 1];
              unint64_t v216 = 2 * v215;
              unint64_t v217 = byte_2485534EC[v214];
              uint64_t v218 = 2 * v217;
              if (2 * v217 <= 1) {
                uint64_t v218 = 1;
              }
              if (v216 <= 1) {
                unint64_t v216 = 1;
              }
              float v219 = 0.0;
              uint64_t v220 = v211;
              do
              {
                uint64_t v221 = v220;
                uint64_t v222 = v218;
                do
                {
                  float v223 = *v221++;
                  float v219 = v219 + (float)(v223 * v223);
                  --v222;
                }
                while (v222);
                ++v213;
                uint64_t v220 = (float *)((char *)v220 + v202);
              }
              while (v213 != v216);
              uint64_t v224 = 0;
              float v225 = (float)(1.0 / *(float *)(v317 + 4 * v206)) * 0.0625;
              double v226 = sqrtf(v219 / (float)(4 * v215 * v217)) + v225 * 3.25000005;
              if (v217 <= 1) {
                uint64_t v227 = 1;
              }
              else {
                uint64_t v227 = v217;
              }
              if (v215 <= 1) {
                uint64_t v228 = 1;
              }
              else {
                uint64_t v228 = v215;
              }
              uint64_t v229 = v209;
              uint64_t v230 = (float *)v205;
              unint64_t v231 = (float *)v208;
              uint64_t v232 = (float *)v210;
              uint64_t v233 = v204;
              uint64_t v234 = v207;
              do
              {
                float v235 = v229;
                float v236 = v230;
                float v237 = v231;
                float v238 = v232;
                float v239 = v233;
                float v240 = v234;
                uint64_t v241 = v227;
                do
                {
                  float v242 = *(v239 - 1);
                  float v243 = *(v238 - 1);
                  float v244 = *v238;
                  if (*v239 >= v242) {
                    float v245 = *(v239 - 1);
                  }
                  else {
                    float v245 = *v239;
                  }
                  if (v244 >= v243) {
                    float v246 = *(v238 - 1);
                  }
                  else {
                    float v246 = *v238;
                  }
                  if (v246 < v245) {
                    float v245 = v246;
                  }
                  float v247 = *v237;
                  float v248 = v237[1];
                  if (*v237 < v245) {
                    float v245 = *v237;
                  }
                  float v249 = *(v235 - 1);
                  if (*v235 < v249) {
                    float v249 = *v235;
                  }
                  float v250 = *(v237 - 1);
                  if (v250 >= v235[1]) {
                    float v250 = v235[1];
                  }
                  if (v248 >= v247) {
                    float v248 = *v237;
                  }
                  float v251 = *(v236 - 1);
                  if (*v236 < v251) {
                    float v251 = *v236;
                  }
                  if (v250 < v249) {
                    float v249 = v250;
                  }
                  if (v251 < v248) {
                    float v248 = v251;
                  }
                  if (v248 >= v249) {
                    float v248 = v249;
                  }
                  if (v236[1] < v248) {
                    float v248 = v236[1];
                  }
                  if (v248 >= v245) {
                    float v252 = v245;
                  }
                  else {
                    float v252 = v248;
                  }
                  float v253 = (float)(v245 * 0.125) + (float)(v252 * 0.625);
                  if (v247 >= (float)(v252 * 1.5)) {
                    float v247 = v252 * 1.5;
                  }
                  float v254 = (float)(v253 + (float)(v247 * 0.125)) + (float)(v248 * 0.125);
                  float v255 = v226 / (float)(v225 + v254);
                  float v256 = (float)((float)((float)((float)(v242 + *v239) + v243) + v244) + v254) * 0.2;
                  if (v255 > 3.2 || v256 < (float)(v225 * 0.085)) {
                    char v258 = 4;
                  }
                  else {
                    char v258 = 0;
                  }
                  *v240++ = v258;
                  v239 += 2;
                  v238 += 2;
                  v237 += 2;
                  v236 += 2;
                  v235 += 2;
                  --v241;
                }
                while (v241);
                ++v224;
                v234 += v325;
                uint64_t v233 = (float *)((char *)v233 + v201);
                uint64_t v232 = (float *)((char *)v232 + v201);
                unint64_t v231 = (float *)((char *)v231 + v203);
                uint64_t v230 = (float *)((char *)v230 + v203);
                uint64_t v229 = (float *)((char *)v229 + v203);
              }
              while (v224 != v228);
            }
            ++v206;
            v211 += 2;
            ++v207;
            v204 += 2;
            v210 += 8;
            v208 += 8;
            v205 += 8;
            v209 += 2;
          }
          while (v206 < v322);
        }
        ++v313;
        float v315 = (float *)((char *)v315 + v201);
        float v311 = (float *)((char *)v311 + v201);
        v308 += v201;
        v304 += v203;
        v303 += v203;
        unint64_t v306 = (float *)((char *)v306 + v203);
      }
      while (v313 < v299);
    }
  }
  sub_24843E34C(*(void *)(*(void *)(v275 + 72) + 16), *(void *)(*(void *)(v275 + 72) + 24), v326.i64, *(void *)(v275 + 96), **(float **)(v275 + 16));
  sub_2484304C8(*(void *)(v275 + 112), *(void *)(*(void *)(v275 + 96) + 16), *(void *)(*(void *)(v275 + 96) + 24), &v326, *(void *)(v275 + 120));
  int v259 = *(_DWORD *)(*(void *)(v275 + 16) + 48);
  if (v259 <= 5) {
    sub_248450260(*(void *)(v275 + 24), (uint64_t)&v326, **(void **)(v275 + 32), *(void *)(v275 + 40), *(void *)(v275 + 48), *(void *)(v275 + 72), *(void *)(v275 + 120), *(void *)(v275 + 112), v259 > 3, a3, *(void **)(v275 + 56));
  }
}

void sub_248471738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a64 && a62)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a62 - 24));
    free(*(void **)(a62 - 32));
  }
  if (!a72)
  {
    if (a70)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a70 - 24));
      free(*(void **)(a70 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484717B4(uint64_t result, unint64_t a2, unsigned __int8 *a3, uint64_t a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v38 = 0u;
  long long v39 = 0u;
  if (a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (*(_DWORD *)(result + 4 * v9))
      {
        if (v10 > 3)
        {
          if (v10 != 4) {
            break;
          }
        }
        else
        {
          *((void *)&v38 + v10) = v9;
        }
        ++v10;
      }
      ++v9;
    }
    while (a2 != v9);
    unint64_t v11 = a2 - 1;
    if (a2 == 1)
    {
      uint64_t v12 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = -1;
  }
  uint64_t v12 = 0;
  do
  {
    ++v12;
    BOOL v13 = v11 > 1;
    v11 >>= 1;
  }
  while (v13);
LABEL_14:
  unint64_t v14 = v10 - 1;
  if (v10 > 1)
  {
    sub_2484DAB3C(result, a2, 15, a3);
    BOOL result = (uint64_t)sub_2484DBA10(a3, a2, a4);
    if (v10 > 4) {
      operator new[]();
    }
    uint64_t v18 = 0;
    *(void *)(a5[3] + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
    unint64_t v19 = *a5 + 2;
    *a5 = v19;
    *(void *)(a5[3] + (v19 >> 3)) = (v14 << (v19 & 7)) | *(unsigned __int8 *)(a5[3] + (v19 >> 3));
    unint64_t v20 = *a5 + 2;
    *a5 = v20;
    float v21 = (char *)&v38 + 8;
    do
    {
      uint64_t v22 = v18 + 1;
      if (v18 + 1 < v10)
      {
        uint64_t v23 = *((void *)&v38 + v18);
        float v24 = (uint64_t *)v21;
        unint64_t v25 = v14;
        do
        {
          uint64_t v26 = *v24;
          BOOL result = a3[v23];
          if (a3[*v24] < result)
          {
            *float v24 = v23;
            *((void *)&v38 + v18) = v26;
            uint64_t v23 = v26;
          }
          ++v24;
          --v25;
        }
        while (v25);
      }
      --v14;
      v21 += 8;
      ++v18;
    }
    while (v22 != v10);
    unint64_t v27 = v20 >> 3;
    if (v10 == 2)
    {
      uint64_t v30 = *((void *)&v38 + 1);
      *(void *)(a5[3] + v27) = ((void)v38 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
      unint64_t v31 = *a5 + v12;
      *a5 = v31;
      *(void *)(a5[3] + (v31 >> 3)) = (v30 << (v31 & 7)) | *(unsigned __int8 *)(a5[3] + (v31 >> 3));
      goto LABEL_17;
    }
    if (v10 != 3)
    {
      long long v32 = v38;
      *(void *)(a5[3] + v27) = ((void)v38 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
      unint64_t v33 = *a5 + v12;
      *a5 = v33;
      *(void *)(a5[3] + (v33 >> 3)) = (*((void *)&v32 + 1) << (v33 & 7)) | *(unsigned __int8 *)(a5[3] + (v33 >> 3));
      unint64_t v34 = *a5 + v12;
      *a5 = v34;
      uint64_t v35 = *((void *)&v39 + 1);
      *(void *)(a5[3] + (v34 >> 3)) = ((void)v39 << (v34 & 7)) | *(unsigned __int8 *)(a5[3] + (v34 >> 3));
      unint64_t v36 = *a5 + v12;
      *a5 = v36;
      *(void *)(a5[3] + (v36 >> 3)) = (v35 << (v36 & 7)) | *(unsigned __int8 *)(a5[3] + (v36 >> 3));
      unint64_t v37 = *a5 + v12;
      *a5 = v37;
      *(void *)(a5[3] + (v37 >> 3)) = ((unint64_t)(a3[v32] == 1) << (v37 & 7)) | *(unsigned __int8 *)(a5[3] + (v37 >> 3));
      uint64_t v17 = *a5 + 1;
      goto LABEL_18;
    }
    uint64_t v28 = *((void *)&v38 + 1);
    *(void *)(a5[3] + v27) = ((void)v38 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
    unint64_t v29 = *a5 + v12;
    *a5 = v29;
    *(void *)(a5[3] + (v29 >> 3)) = (v28 << (v29 & 7)) | *(unsigned __int8 *)(a5[3] + (v29 >> 3));
    unint64_t v15 = *a5 + v12;
    *a5 = v15;
    uint64_t v16 = v39;
  }
  else
  {
    *(void *)(a5[3] + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
    unint64_t v15 = *a5 + 4;
    *a5 = v15;
    uint64_t v16 = v38;
  }
  *(void *)(a5[3] + (v15 >> 3)) = (v16 << (v15 & 7)) | *(unsigned __int8 *)(a5[3] + (v15 >> 3));
LABEL_17:
  uint64_t v17 = *a5 + v12;
LABEL_18:
  *a5 = v17;
  return result;
}

void sub_2484721B4(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F70](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_2484721D8(unint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  unint64_t v5 = *a2 + 9;
  sub_2484106F0(a2, v5);
  size_t v6 = a2[2];
  if (v6) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = 0;
  }
  *a2 = v7;
  if (a1 < 0x80)
  {
    LOBYTE(v9) = a1;
    size_t v8 = v4;
  }
  else
  {
    do
    {
      size_t v8 = v4 + 1;
      *(unsigned char *)(v6 + v4) = a1 | 0x80;
      unint64_t v9 = a1 >> 7;
      unint64_t v10 = a1 >> 14;
      ++v4;
      a1 >>= 7;
    }
    while (v10);
  }
  *(unsigned char *)(v6 + v8) = v9;
  sub_2484106F0(a2, v8 + 1);
  if (a2[2]) {
    size_t v11 = v8 + 1;
  }
  else {
    size_t v11 = 0;
  }
  *a2 = v11;
}

void sub_24847227C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  sub_24841DDC8(v11, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      *(unsigned char *)(v12 + v7) = *(unsigned char *)(a1 + v6);
      v7 += (a2 + a3 - 1) / a3;
      if (v7 >= a2) {
        unint64_t v7 = ++v8;
      }
      ++v6;
    }
    while (a2 != v6);
    uint64_t v9 = 0;
    uint64_t v10 = v12;
    do
    {
      *(unsigned char *)(a1 + v9) = *(unsigned char *)(v10 + v9);
      ++v9;
    }
    while (a2 != v9);
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (!v10) {
      return;
    }
  }
  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
  free(*(void **)(v10 - 32));
}

uint64_t sub_24847234C(unint64_t a1, unint64_t a2, int a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7, size_t *a8)
{
  unint64_t v8 = *a7 + a4;
  unint64_t v9 = *a7 - 1;
  if (v8 > a6 || v9 >= v8) {
    return 1;
  }
  if (a1 > v9 >> 2 || *a7 < 4 * a1) {
    return 1;
  }
  size_t v18 = *a8;
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      uint64_t v22 = *a7;
      char v23 = sub_24841F3D0(a5, *a7, i, a1, a2, a3);
      sub_24841DD6C(a8, *(unsigned char *)(a5 + v22 + i) - v23);
    }
    unint64_t v8 = *a7 + a4;
  }
  *a7 = v8;
  if (a2 > 1) {
    sub_24847227C(a8[2] + v18, a4, a2);
  }
  return 0;
}

uint64_t sub_248472450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, void *a7, unsigned int *a8, float a9)
{
  float v36 = a9;
  long long v15 = a6[1];
  v32[0] = *a6;
  v32[1] = v15;
  long long v16 = a6[3];
  v32[2] = a6[2];
  unint64_t v34 = a8;
  uint64_t v35 = a3;
  v32[3] = v16;
  memset(&v32[4], 0, 48);
  uint64_t v33 = 0;
  BOOL v31 = *(_DWORD *)(a1 + 56) == 1;
  unint64_t v17 = *(void *)(a4 + 16);
  if (v17 <= *a8)
  {
    unint64_t v18 = *(void *)(a4 + 24);
    if (v18 <= a8[1])
    {
      for (uint64_t i = 0; i != 30; i += 10)
      {
        char v23 = &a8[i];
        *char v23 = v17;
        v23[1] = v18;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v18 = *(void *)(a4 + 24);
  }
  sub_2483F0C3C((uint64_t)v29, v17, v18);
  uint64_t v19 = v30;
  if (v30) {
    goto LABEL_18;
  }
  sub_2483F0E78((uint64_t)v28, (uint64_t)v29);
  sub_2483F7944((uint64_t)a8, (uint64_t)v28);
  for (uint64_t j = 13; j != -2; j -= 5)
    sub_2483E8DDC(&v28[j]);
  if (!v30)
  {
    for (uint64_t k = 13; k != -2; k -= 5)
      sub_2483E8DDC(&v29[k]);
  }
  unint64_t v18 = *(unsigned int *)(a4 + 24);
LABEL_13:
  unsigned __int8 v27 = 0;
  v28[0] = v32;
  v28[1] = a1;
  v28[2] = a5;
  v28[3] = &v36;
  v28[4] = a4;
  v29[0] = &v27;
  v29[1] = v32;
  v29[2] = &v31;
  v29[3] = a4;
  v29[4] = a2;
  v29[5] = a1;
  v29[6] = &v35;
  v29[7] = &v34;
  if (a7)
  {
    BOOL v24 = sub_248472654(a7, v18, (uint64_t)v28, (uint64_t)v29);
  }
  else
  {
    v37[0] = 0;
    v37[1] = v37;
    BOOL v24 = sub_248472654(v37, v18, (uint64_t)v28, (uint64_t)v29);
  }
  uint64_t v19 = v24;
  if (!v24)
  {
    unsigned __int8 v25 = atomic_load(&v27);
    uint64_t v19 = v25 & 1;
  }
LABEL_18:
  sub_24847271C((uint64_t)v32);
  return v19;
}

void sub_24847263C(_Unwind_Exception *a1)
{
  sub_24847271C(v1 - 240);
  _Unwind_Resume(a1);
}

BOOL sub_248472654(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_248472774(*(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(*(void *)(a3 + 32) + 16), 1, **(float **)(a3 + 24)))
    {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_2484728A8((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, void *, uint64_t (*)(uint64_t **, uint64_t), float (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_248472B08, sub_2484728A8, 0, a2) != 0;
}

uint64_t sub_24847271C(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    (*(void (**)(void))(a1 + 56))();
  }
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_248472774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v12 = (void *)(a1 + 72);
  if (v12 != (void *)(a2 + 32)) {
    sub_2483EFEC8(v12, *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  }
  uint64_t v13 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  v22[0] = *(void *)(a1 + 72);
  v22[1] = v13;
  sub_2483EBCC0((uint64_t)v23, a2 + 16);
  uint64_t v14 = 3;
  if (*(_DWORD *)(a2 + 56) == 1) {
    uint64_t v14 = 1;
  }
  uint64_t v15 = 4;
  if (!*(unsigned char *)(a2 + 60)) {
    uint64_t v15 = v14;
  }
  v23[13] = v15;
  if (a1 + 96 != a3 + 32) {
    sub_2483EFEC8((void *)(a1 + 96), *(char **)(a3 + 32), *(char **)(a3 + 40), *(void *)(a3 + 40) - *(void *)(a3 + 32));
  }
  uint64_t v16 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  v20[0] = *(void *)(a1 + 96);
  v20[1] = v16;
  sub_2483EBCC0((uint64_t)v21, a3 + 16);
  if (*(unsigned char *)(a3 + 60)) {
    return 1;
  }
  uint64_t v18 = 3;
  if (*(_DWORD *)(a3 + 56) == 1) {
    uint64_t v18 = 1;
  }
  v21[13] = v18;
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t, void *, void *, float))(a1 + 24))(*(void *)(a1 + 16), a5, a4, v22, v20, a6);
  *(void *)(a1 + 64) = v19;
  return v19 == 0;
}

float sub_2484728A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = atomic_load(*(unsigned __int8 **)v3);
  if (v4) {
    return result;
  }
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v3 + 8) + 32))(*(void *)(*(void *)(v3 + 8) + 64), a3);
  if (**(unsigned char **)(v3 + 16))
  {
    uint64_t v9 = *(void *)(*(void *)(v3 + 32) + 24)
       + *(void *)(*(void *)(v3 + 32) + 16) * (*(void *)(*(void *)(v3 + 24) + 8) + a2)
       + 4 * **(void **)(v3 + 24);
  }
  else
  {
    uint64_t v9 = v7;
    if (*(unsigned char *)(*(void *)(v3 + 40) + 60))
    {
      uint64_t v18 = **(void **)(v3 + 48);
      if (!v18) {
        goto LABEL_15;
      }
      uint64_t v19 = *(uint64_t **)(v3 + 24);
      uint64_t v20 = v19[2];
      if (v20)
      {
        float v21 = *(void **)(v3 + 32);
        uint64_t v22 = *v19;
        uint64_t v23 = v19[1] + a2;
        uint64_t v24 = v21[2] * v23;
        unsigned __int8 v25 = (int *)(v21[3] + v24 + 4 * *v19);
        uint64_t v26 = (int *)(v21[8] + v24 + 4 * v22);
        unsigned __int8 v27 = (int *)(v21[13] + v24 + 4 * v22);
        uint64_t v28 = (int *)(*(void *)(v18 + 24) + *(void *)(v18 + 16) * v23 + 4 * v22);
        unint64_t v29 = (_DWORD *)(v7 + 8);
        do
        {
          int v30 = *v25++;
          *(v29 - 2) = v30;
          int v31 = *v26++;
          *(v29 - 1) = v31;
          int v32 = *v27++;
          *unint64_t v29 = v32;
          int v33 = *v28++;
          v29[1] = v33;
          v29 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      uint64_t v35 = *(uint64_t **)(v3 + 24);
      uint64_t v36 = v35[2];
      if (v36)
      {
        unint64_t v37 = *(void **)(v3 + 32);
        uint64_t v38 = *v35;
        uint64_t v39 = v37[2] * (v35[1] + a2);
        uint64_t v40 = (int *)(v37[3] + v39 + 4 * *v35);
        unint64_t v41 = (int *)(v37[8] + v39 + 4 * v38);
        uint64_t v42 = (int *)(v37[13] + v39 + 4 * v38);
        uint64_t v43 = (_DWORD *)(v7 + 4);
        do
        {
          int v44 = *v40++;
          *(v43 - 1) = v44;
          int v45 = *v41++;
          *uint64_t v43 = v45;
          int v46 = *v42++;
          v43[1] = v46;
          v43 += 3;
          --v36;
        }
        while (v36);
      }
    }
  }
  uint64_t v10 = (float *)(*(uint64_t (**)(void, uint64_t))(*(void *)(v3 + 8) + 40))(*(void *)(*(void *)(v3 + 8) + 64), a3);
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t, float *, void))(*(void *)(v3 + 8) + 48))(*(void *)(*(void *)(v3 + 8) + 64), a3, v9, v10, *(void *)(*(void *)(v3 + 24) + 16)))
  {
LABEL_15:
    atomic_store(1u, *(unsigned __int8 **)v3);
    return result;
  }
  size_t v11 = **(void ***)(v3 + 56);
  uint64_t v12 = v11[2] * a2;
  uint64_t v13 = (_DWORD *)(v11[3] + v12);
  uint64_t v14 = (_DWORD *)(v11[8] + v12);
  uint64_t v15 = (float *)(v11[13] + v12);
  uint64_t v16 = *(void *)(*(void *)(v3 + 24) + 16);
  if (**(unsigned char **)(v3 + 16))
  {
    for (; v16; --v16)
    {
      *v13++ = *(_DWORD *)v10;
      *v14++ = *(_DWORD *)v10;
      float v17 = *v10++;
      float result = v17;
      *v15++ = v17;
    }
  }
  else if (v16)
  {
    unint64_t v34 = v10 + 1;
    do
    {
      *v13++ = *((_DWORD *)v34 - 1);
      *v14++ = *(_DWORD *)v34;
      float result = v34[1];
      *v15++ = result;
      v34 += 3;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_248472B08(uint64_t **a1, uint64_t a2)
{
  return -sub_248472774(**a1, (*a1)[1], (*a1)[2], *(void *)((*a1)[4] + 16), a2, *(float *)(*a1)[3]);
}

uint64_t sub_248472B40(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (void *)(a2 + 16);
  if (sub_24840FAA0(a1 + 232, a2 + 16))
  {
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = *(void *)(v11 + 328);
    uint64_t v13 = *(void *)(v11 + 336);
    while (v12 != v13)
    {
      if (*(_DWORD *)(v12 + 12) == 4) {
        goto LABEL_6;
      }
      v12 += 96;
    }
    uint64_t v14 = 0;
    *a5 = a1;
  }
  else
  {
LABEL_6:
    sub_2483F0C3C((uint64_t)v61, *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100));
    uint64_t v14 = v62;
    if (!v62)
    {
      sub_2483F0E78((uint64_t)v60, (uint64_t)v61);
      sub_2483F9824((unsigned int *)(a1 + 96), (uint64_t)v60);
      sub_24841F728(a4, (uint64_t)v60, a1 + 216);
      uint64_t v16 = *(unsigned int **)(a1 + 416);
      uint64_t v15 = *(unsigned int **)(a1 + 424);
      if (v16 == v15)
      {
LABEL_32:
        uint64_t v35 = *(void *)(a4 + 96);
        long long v54 = 0uLL;
        *(void *)&long long v36 = v35;
        *((void *)&v36 + 1) = HIDWORD(v35);
        long long v55 = v36;
        uint64_t v37 = *(void *)(a4 + 88);
        float v38 = *(float *)(v37 + 300);
        uint64_t v39 = *(void *)(v37 + 328);
        uint64_t v40 = *(void *)(v37 + 336);
        if (v39 == v40)
        {
LABEL_36:
          uint64_t v42 = 0;
        }
        else
        {
          uint64_t v41 = v39;
          while (*(_DWORD *)(v41 + 12) != 4)
          {
            v41 += 96;
            if (v41 == v40) {
              goto LABEL_36;
            }
          }
          uint64_t v43 = v39;
          while (*(_DWORD *)(v43 + 12) != 4)
          {
            v43 += 96;
            if (v43 == v40)
            {
              uint64_t v43 = 0;
              break;
            }
          }
          uint64_t v42 = *(void *)(a4 + 416) - 0x5555555555555548 * ((v43 - v39) >> 5);
        }
        if (sub_248472450(a4 + 216, a4 + 96, v42, (uint64_t)&v54, a2, a3, 0, (unsigned int *)(a4 + 96), v38))
        {
          uint64_t v14 = 1;
        }
        else
        {
          *(_WORD *)(a4 + 224) = *(_WORD *)(a2 + 8);
          uint64_t v44 = *v10;
          *(void *)(a4 + 237) = *(void *)((char *)v10 + 5);
          *(void *)(a4 + 232) = v44;
          if (a4 + 216 != a2) {
            sub_2483EFEC8((void *)(a4 + 248), *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
          }
          uint64_t v14 = 0;
          long long v45 = *(_OWORD *)(a2 + 56);
          long long v46 = *(_OWORD *)(a2 + 72);
          long long v47 = *(_OWORD *)(a2 + 88);
          *(_DWORD *)(a4 + 320) = *(_DWORD *)(a2 + 104);
          *(_OWORD *)(a4 + 288) = v46;
          *(_OWORD *)(a4 + 304) = v47;
          *(_OWORD *)(a4 + 272) = v45;
          *(void *)(a4 + 336) = *(void *)(a2 + 120);
          *(_OWORD *)(a4 + 352) = *(_OWORD *)(a2 + 136);
          *(void *)(a4 + 376) = *(void *)(a2 + 160);
          *(void *)(a4 + 392) = *(void *)(a2 + 176);
          *(void *)(a4 + 408) = *(void *)(a2 + 192);
          *a5 = a4;
        }
      }
      else
      {
        uint64_t v51 = a3;
        uint64_t v52 = v10;
        uint64_t v53 = a5;
        int64x2_t v58 = 0uLL;
        unint64_t v59 = 0;
        while (1)
        {
          sub_2483EA250((uint64_t)&v54, *v16, v16[1]);
          uint64_t v14 = v57;
          if (v57) {
            break;
          }
          long long v17 = v55;
          *((void *)&v55 + 1) = 0;
          uint64_t v18 = v56;
          if (v16[1] && *v16)
          {
            unint64_t v19 = 0;
            uint64_t v20 = (char *)*((void *)&v17 + 1);
            do
            {
              memcpy(v20, (const void *)(*((void *)v16 + 3) + *((void *)v16 + 2) * v19++), 4 * *v16);
              v20 += v17;
            }
            while (v19 < v16[1]);
          }
          uint64_t v21 = v58.i64[1];
          if (v58.i64[1] >= v59)
          {
            unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v58.i64[1] - v58.i64[0]) >> 3);
            unint64_t v24 = v23 + 1;
            if (v23 + 1 > 0x666666666666666) {
              sub_2483E92E8();
            }
            if (0x999999999999999ALL * ((uint64_t)(v59 - v58.i64[0]) >> 3) > v24) {
              unint64_t v24 = 0x999999999999999ALL * ((uint64_t)(v59 - v58.i64[0]) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - v58.i64[0]) >> 3) >= 0x333333333333333) {
              unint64_t v25 = 0x666666666666666;
            }
            else {
              unint64_t v25 = v24;
            }
            char v66 = &v59;
            if (v25) {
              unint64_t v25 = (unint64_t)sub_248403444(v25);
            }
            else {
              uint64_t v26 = 0;
            }
            unint64_t v27 = v25 + 40 * v23;
            unint64_t v63 = v25;
            v64.i64[0] = v27;
            unint64_t v65 = v25 + 40 * v26;
            *(_OWORD *)unint64_t v27 = v54;
            *(_OWORD *)(v27 + 16) = v17;
            *(void *)(v27 + 32) = v18;
            unint64_t v22 = v27 + 40;
            v64.i64[1] = v27 + 40;
            uint64_t v28 = v58.i64[1];
            uint64_t v29 = v58.i64[0];
            uint64_t v30 = v64.i64[0];
            if (v58.i64[1] == v58.i64[0])
            {
              int64x2_t v33 = vdupq_n_s64(v58.u64[1]);
            }
            else
            {
              do
              {
                long long v31 = *(_OWORD *)(v28 - 40);
                *(void *)(v30 - 24) = *(void *)(v28 - 24);
                *(_OWORD *)(v30 - 40) = v31;
                uint64_t v32 = *(void *)(v28 - 16);
                *(void *)(v28 - 16) = 0;
                *(void *)(v30 - 16) = v32;
                *(void *)(v30 - 8) = *(void *)(v28 - 8);
                v30 -= 40;
                v28 -= 40;
              }
              while (v28 != v29);
              int64x2_t v33 = v58;
              unint64_t v22 = v64.u64[1];
            }
            v58.i64[0] = v30;
            v58.i64[1] = v22;
            int64x2_t v64 = v33;
            unint64_t v34 = v59;
            unint64_t v59 = v65;
            unint64_t v65 = v34;
            unint64_t v63 = v33.i64[0];
            sub_24841F7CC((uint64_t)&v63);
          }
          else
          {
            *(_OWORD *)v58.i64[1] = v54;
            *(_OWORD *)(v21 + 16) = v17;
            *(void *)(v21 + 32) = v18;
            unint64_t v22 = v21 + 40;
          }
          v58.i64[1] = v22;
          v16 += 10;
          if (v16 == v15)
          {
            sub_2483F79DC((void **)(a4 + 416));
            *(int64x2_t *)(a4 + 416) = v58;
            *(void *)(a4 + 432) = v59;
            unint64_t v59 = 0;
            int64x2_t v58 = 0uLL;
            *(void *)&long long v54 = &v58;
            sub_2483F77FC((void ***)&v54);
            uint64_t v10 = v52;
            a5 = v53;
            a3 = v51;
            goto LABEL_32;
          }
        }
        *(void *)&long long v54 = &v58;
        sub_2483F77FC((void ***)&v54);
      }
      for (uint64_t i = 104; i != -16; i -= 40)
        sub_2483E8DDC((uint64_t *)&v60[i]);
      if (!v62)
      {
        for (uint64_t j = 104; j != -16; j -= 40)
          sub_2483E8DDC((uint64_t *)&v61[j]);
      }
    }
  }
  return v14;
}

void sub_248472FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a22 + i));
  if (!a52)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a37 + j));
  }
  _Unwind_Resume(a1);
}

char *sub_248473074(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = sub_2483E92A8(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_17:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  void *v12 = &v9[v17];
  return result;
}

char *sub_248473170(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = sub_2483E92A8(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, 4 * v15);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_17:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  void *v12 = &v9[v17];
  return result;
}

void *sub_248473270(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_24844CB80((void *)(a1 + 24), *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  long long v5 = a2[3];
  long long v6 = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  long long v7 = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  float result = sub_24840331C((void *)(a1 + 104), *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  uint64_t v9 = *((void *)a2 + 16);
  *(void *)(a1 + 133) = *(void *)((char *)a2 + 133);
  *(void *)(a1 + 128) = v9;
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  return result;
}

void sub_24847331C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248473338(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    sub_24844178C((void *)(i - 152));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_248473388(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v193[0] = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v184 = a1 + 48;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v183 = (unint64_t *)(a1 + 24);
  unint64_t v186 = (int64x2_t *)(a1 + 72);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  sub_2483F26D4(a1 + 272);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_24840370C((uint64x2_t *)(a1 + 368), a2);
  sub_24844C318(a1 + 512, a3);
  *(void *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_DWORD *)(a1 + 1224) = 13;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1240) = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 112);
  *(_DWORD *)__src = 5;
  *(void *)&__src[8] = 0;
  *(void *)&__src[16] = 0;
  *(void *)&__src[24] = v7;
  unint64_t v8 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
  int v9 = sub_248456844(a1 + 512);
  uint64_t v10 = *(void *)(a1 + 568);
  if (v9)
  {
    switch(v10)
    {
      case 0:
        goto LABEL_13;
      case 1:
        *(_DWORD *)(a1 + 788) = 1;
        break;
      case 2:
        *(_DWORD *)(a1 + 788) = 0;
        goto LABEL_8;
      case 3:
        *(_DWORD *)(a1 + 728) = 0;
LABEL_8:
        *(_DWORD *)(a1 + 776) = 5;
        break;
      default:
        *(_DWORD *)(a1 + 728) = 0;
        *(_DWORD *)(a1 + 776) = 0;
        break;
    }
  }
  else if (!v10)
  {
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 864) && sub_248456844(a1 + 512))
  {
    *(_DWORD *)(a1 + 796) = 0;
    *(_DWORD *)(a1 + 728) = 0;
  }
LABEL_13:
  unint64_t v187 = (void **)(a1 + 1152);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v11) >> 3);
  unint64_t v14 = v8 - v13;
  if (v8 <= v13)
  {
    if (v8 < v13) {
      sub_24844171C(v184, (void **)(v11 + 88 * v8));
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 64);
    if (0x2E8BA2E8BA2E8BA3 * ((v15 - v12) >> 3) >= v14)
    {
      uint64_t v26 = v12 + 88 * v14;
      do
      {
        *(_OWORD *)(v12 + 32) = 0uLL;
        *(_OWORD *)(v12 + 48) = 0uLL;
        *(_OWORD *)uint64_t v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_DWORD *)(v12 + 64) = 8;
        *(void *)(v12 + 72) = 0;
        *(unsigned char *)(v12 + 80) = 1;
        v12 += 88;
      }
      while (v12 != v26);
      *(void *)(a1 + 56) = v26;
    }
    else
    {
      if (v8 > 0x2E8BA2E8BA2E8BALL) {
        sub_2483E92E8();
      }
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v11) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v8) {
        uint64_t v17 = v8;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 > 0x2E8BA2E8BA2E8BALL) {
LABEL_278:
      }
        sub_2483E9338();
      unint64_t v19 = (char *)operator new(88 * v18);
      uint64_t v20 = &v19[8 * ((v12 - v11) >> 3)];
      uint64_t v21 = &v19[88 * v8];
      unint64_t v22 = v20;
      do
      {
        *((_OWORD *)v22 + 2) = 0uLL;
        *((_OWORD *)v22 + 3) = 0uLL;
        *(_OWORD *)unint64_t v22 = 0uLL;
        *((_OWORD *)v22 + 1) = 0uLL;
        *((_DWORD *)v22 + 16) = 8;
        *((void *)v22 + 9) = 0;
        v22[80] = 1;
        v22 += 88;
      }
      while (v22 != v21);
      while (v12 != v11)
      {
        *((void *)v20 - 11) = 0;
        *((void *)v20 - 10) = 0;
        v20 -= 88;
        *((void *)v20 + 2) = 0;
        long long v23 = *(_OWORD *)(v12 - 88);
        v12 -= 88;
        *(_OWORD *)uint64_t v20 = v23;
        *((void *)v20 + 2) = *(void *)(v12 + 16);
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *((void *)v20 + 3) = 0;
        *((void *)v20 + 4) = 0;
        *((void *)v20 + 5) = 0;
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v12 + 24);
        *((void *)v20 + 5) = *(void *)(v12 + 40);
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        long long v24 = *(_OWORD *)(v12 + 48);
        long long v25 = *(_OWORD *)(v12 + 64);
        v20[80] = *(unsigned char *)(v12 + 80);
        *((_OWORD *)v20 + 3) = v24;
        *((_OWORD *)v20 + 4) = v25;
      }
      uint64_t v28 = *(char **)(a1 + 48);
      unint64_t v27 = *(char **)(a1 + 56);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v21;
      *(void *)(a1 + 64) = &v19[88 * v18];
      if (v27 != v28)
      {
        do
        {
          uint64_t v29 = v27 - 88;
          *(void *)__src = v27 - 64;
          sub_2483FDBFC((void ***)__src);
          *(void *)__src = v29;
          sub_2483FDCBC((void ***)__src);
          unint64_t v27 = v29;
        }
        while (v29 != v28);
      }
      if (v28) {
        operator delete(v28);
      }
    }
  }
  int v30 = *(_DWORD *)(a1 + 864);
  if (v30 < 0)
  {
    int v30 = sub_248456844(a1 + 512) ^ 1;
    *(_DWORD *)(a1 + 864) = v30;
  }
  *(float *)(a1 + 760) = (float)(14 * *(_DWORD *)(a1 + 560) + 82);
  unint64_t v188 = 0;
  unint64_t v189 = 0;
  uint64_t v190 = 0;
  if (v30)
  {
    *(_OWORD *)__src = xmmword_248550340;
    *(_OWORD *)&__src[16] = unk_248550350;
    *(_OWORD *)unint64_t v192 = xmmword_248550360;
    *(_OWORD *)&v192[16] = unk_248550370;
    sub_248473074((char *)&v188, __src, (uint64_t)v193, 0x10uLL);
  }
  else
  {
    *(_OWORD *)__src = xmmword_248550380;
    *(_OWORD *)&__src[16] = unk_248550390;
    *(_OWORD *)unint64_t v192 = xmmword_2485503A0;
    *(_OWORD *)&v192[16] = unk_2485503B0;
    sub_248473074((char *)&v188, __src, (uint64_t)v193, 0x10uLL);
    if (v8 <= 0x1D && *(int *)(a1 + 560) >= 2 && sub_248456844(a3))
    {
      long long v31 = (char *)v188 + 4;
      int64_t v32 = v189 - ((unsigned char *)v188 + 8);
      if (v189 != (char *)v188 + 8) {
        memmove((char *)v188 + 4, (char *)v188 + 8, v189 - ((unsigned char *)v188 + 8));
      }
      unint64_t v189 = &v31[v32];
    }
  }
  if (*(_DWORD *)(a2 + 12) == 1) {
    int v33 = 2;
  }
  else {
    int v33 = -1;
  }
  if (v33 + *(_DWORD *)(*(void *)(a2 + 408) + 320) >= *(_DWORD *)(a1 + 732)) {
    int v34 = *(_DWORD *)(a1 + 732);
  }
  else {
    int v34 = v33 + *(_DWORD *)(*(void *)(a2 + 408) + 320);
  }
  switch(*(_DWORD *)(a1 + 560))
  {
    case 0:
    case 1:
      uint64_t v35 = v188;
      sub_2483FB040((char *)(a1 + 736), (char *)v188, (uint64_t)v189, (v189 - (unsigned char *)v188) >> 2);
      uint64_t v36 = 256;
      break;
    case 2:
      uint64_t v35 = v188;
      sub_248473170((char *)(a1 + 736), (char *)v188, (uint64_t)v188 + 40, 0xAuLL);
      uint64_t v36 = 96;
      break;
    case 3:
      uint64_t v35 = v188;
      sub_248473170((char *)(a1 + 736), (char *)v188, (uint64_t)v188 + 28, 7uLL);
      uint64_t v36 = 48;
      break;
    case 4:
      uint64_t v35 = v188;
      sub_248473170((char *)(a1 + 736), (char *)v188, (uint64_t)v188 + 20, 5uLL);
      uint64_t v36 = 32;
      break;
    case 5:
      uint64_t v35 = v188;
      sub_248473170((char *)(a1 + 736), (char *)v188, (uint64_t)v188 + 16, 4uLL);
      uint64_t v36 = 24;
      break;
    default:
      uint64_t v35 = v188;
      sub_248473170((char *)(a1 + 736), (char *)v188, (uint64_t)v188 + 12, 3uLL);
      uint64_t v36 = 16;
      break;
  }
  *(void *)(a1 + 768) = v36;
  if (*(int *)(a1 + 560) <= 1)
  {
    if (v34 >= 1)
    {
      int v50 = 0;
      if (4 * v34 <= 1) {
        int v51 = 1;
      }
      else {
        int v51 = 4 * v34;
      }
      uint64_t v52 = *(char **)(a1 + 744);
      do
      {
        int v53 = v50 + 16;
        unint64_t v54 = *(void *)(a1 + 752);
        if ((unint64_t)v52 >= v54)
        {
          uint64_t v56 = *(char **)(a1 + 736);
          uint64_t v57 = (v52 - v56) >> 2;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62) {
            sub_2483E92E8();
          }
          uint64_t v59 = v54 - (void)v56;
          if (v59 >> 1 > v58) {
            unint64_t v58 = v59 >> 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            unint64_t v60 = (unint64_t)sub_2483E9300(v60);
            uint64_t v52 = *(char **)(a1 + 744);
            uint64_t v56 = *(char **)(a1 + 736);
          }
          else
          {
            uint64_t v61 = 0;
          }
          unsigned int v62 = (_DWORD *)(v60 + 4 * v57);
          *unsigned int v62 = v53;
          long long v55 = (char *)(v62 + 1);
          while (v52 != v56)
          {
            int v63 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *--unsigned int v62 = v63;
          }
          *(void *)(a1 + 736) = v62;
          *(void *)(a1 + 744) = v55;
          *(void *)(a1 + 752) = v60 + 4 * v61;
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v52 = v53;
          long long v55 = v52 + 4;
        }
        *(void *)(a1 + 744) = v55;
        ++v50;
        uint64_t v52 = v55;
      }
      while (v50 != v51);
    }
  }
  else if (v34 >= 1)
  {
    int v37 = 0;
    float v38 = *(int **)(a1 + 744);
    do
    {
      int v39 = 4 * v37 + 19;
      unint64_t v40 = *(void *)(a1 + 752);
      if ((unint64_t)v38 >= v40)
      {
        uint64_t v42 = *(int **)(a1 + 736);
        uint64_t v43 = v38 - v42;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
          sub_2483E92E8();
        }
        uint64_t v45 = v40 - (void)v42;
        if (v45 >> 1 > v44) {
          unint64_t v44 = v45 >> 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46)
        {
          unint64_t v46 = (unint64_t)sub_2483E9300(v46);
          float v38 = *(int **)(a1 + 744);
          uint64_t v42 = *(int **)(a1 + 736);
        }
        else
        {
          uint64_t v47 = 0;
        }
        float v48 = (int *)(v46 + 4 * v43);
        *float v48 = v39;
        uint64_t v41 = v48 + 1;
        while (v38 != v42)
        {
          int v49 = *--v38;
          *--float v48 = v49;
        }
        *(void *)(a1 + 736) = v48;
        *(void *)(a1 + 744) = v41;
        *(void *)(a1 + 752) = v46 + 4 * v47;
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        *float v38 = v39;
        uint64_t v41 = v38 + 1;
      }
      *(void *)(a1 + 744) = v41;
      ++v37;
      float v38 = v41;
    }
    while (v37 != v34);
  }
  if (v35) {
    operator delete(v35);
  }
  unsigned int v64 = *(_DWORD *)(a1 + 776);
  if (v64 + 1 > 0xE) {
    goto LABEL_106;
  }
  if (((1 << (v64 + 1)) & 0x7890) == 0)
  {
    if (v64 == -1) {
      goto LABEL_110;
    }
LABEL_106:
    *(_DWORD *)(a1 + 1224) = v64;
    if (!*(unsigned char *)(a1 + 888)) {
      goto LABEL_122;
    }
    goto LABEL_120;
  }
  if (sub_248456844(a1 + 512)) {
    goto LABEL_106;
  }
  *(_DWORD *)(a1 + 776) = -1;
LABEL_110:
  int v65 = *(_DWORD *)(a1 + 560);
  if (v65 <= 0 && *(unsigned char *)(a1 + 580) && sub_248456844(a1 + 512))
  {
    if (!*(_DWORD *)(a1 + 864))
    {
      unsigned int v64 = 15;
      goto LABEL_121;
    }
  }
  else if (!*(_DWORD *)(a1 + 864) && !*(unsigned char *)(a1 + 888))
  {
    if (*(unsigned char *)(a1 + 580) && sub_248456844(a1 + 512))
    {
      if (v65 >= 7)
      {
        if (v65 == 7) {
          unsigned int v64 = 6;
        }
        else {
          unsigned int v64 = 5;
        }
      }
      else
      {
        unsigned int v64 = 14;
      }
    }
    else
    {
      unsigned int v64 = 5;
    }
    goto LABEL_121;
  }
LABEL_120:
  unsigned int v64 = 0;
LABEL_121:
  *(_DWORD *)(a1 + 776) = v64;
LABEL_122:
  if ((sub_248456844(a1 + 512) & 1) == 0 && v64 <= 0xF && ((1 << v64) & 0xC040) != 0) {
    *(_DWORD *)(a1 + 776) = 0;
  }
  char v66 = *(void **)(a1 + 1160);
  unint64_t v67 = *(void *)(a1 + 1168);
  if ((unint64_t)v66 >= v67)
  {
    uint64_t v69 = *v187;
    uint64_t v70 = ((char *)v66 - (unsigned char *)*v187) >> 3;
    unint64_t v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v72 = v67 - (void)v69;
    if (v72 >> 2 > v71) {
      unint64_t v71 = v72 >> 2;
    }
    BOOL v73 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v73) {
      unint64_t v74 = v71;
    }
    if (v74)
    {
      unint64_t v74 = (unint64_t)sub_2483F04AC(v74);
      char v66 = *(void **)(a1 + 1160);
      uint64_t v69 = *(void **)(a1 + 1152);
    }
    else
    {
      uint64_t v75 = 0;
    }
    int64_t v76 = (void *)(v74 + 8 * v70);
    unint64_t v77 = v74 + 8 * v75;
    *int64_t v76 = 0;
    unint64_t v68 = v76 + 1;
    while (v66 != v69)
    {
      uint64_t v78 = *--v66;
      *--int64_t v76 = v78;
    }
    *(void *)(a1 + 1152) = v76;
    *(void *)(a1 + 1160) = v68;
    *(void *)(a1 + 1168) = v77;
    if (v69) {
      operator delete(v69);
    }
  }
  else
  {
    *char v66 = 0;
    unint64_t v68 = v66 + 1;
  }
  *(void *)(a1 + 1160) = v68;
  if (!*(unsigned char *)(a1 + 580))
  {
    *(_DWORD *)(a1 + 784) = 1065353216;
    *(_DWORD *)__src = 1;
    memset(&__src[8], 0, 24);
    uint64_t v79 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
    uint64_t v80 = v79;
    unint64_t v81 = *(void *)(a1 + 1168);
    if ((unint64_t)v68 >= v81)
    {
      int64_t v83 = (uint64_t *)*v187;
      uint64_t v84 = ((char *)v68 - (unsigned char *)*v187) >> 3;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v81 - (void)v83) >> 2 > v85) {
        unint64_t v85 = (uint64_t)(v81 - (void)v83) >> 2;
      }
      if (v81 - (unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v85)
      {
        unint64_t v85 = (unint64_t)sub_2483F04AC(v85);
        unint64_t v68 = *(uint64_t **)(a1 + 1160);
        int64_t v83 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        uint64_t v86 = 0;
      }
      uint64_t v87 = (uint64_t *)(v85 + 8 * v84);
      unint64_t v81 = v85 + 8 * v86;
      *uint64_t v87 = v80;
      unint64_t v82 = v87 + 1;
      while (v68 != v83)
      {
        uint64_t v88 = *--v68;
        *--uint64_t v87 = v88;
      }
      *(void *)(a1 + 1152) = v87;
      *(void *)(a1 + 1160) = v82;
      *(void *)(a1 + 1168) = v81;
      if (v83)
      {
        operator delete(v83);
        unint64_t v81 = *(void *)(a1 + 1168);
      }
    }
    else
    {
      *unint64_t v68 = v79;
      unint64_t v82 = v68 + 1;
    }
    *(void *)(a1 + 1160) = v82;
    *(_DWORD *)__src = 2;
    memset(&__src[8], 0, 24);
    uint64_t v89 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
    uint64_t v90 = v89;
    if ((unint64_t)v82 >= v81)
    {
      uint64_t v92 = (uint64_t *)*v187;
      uint64_t v93 = ((char *)v82 - (unsigned char *)*v187) >> 3;
      unint64_t v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v81 - (void)v92) >> 2 > v94) {
        unint64_t v94 = (uint64_t)(v81 - (void)v92) >> 2;
      }
      if (v81 - (unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v94)
      {
        unint64_t v94 = (unint64_t)sub_2483F04AC(v94);
        unint64_t v82 = *(uint64_t **)(a1 + 1160);
        uint64_t v92 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        uint64_t v95 = 0;
      }
      int v96 = (uint64_t *)(v94 + 8 * v93);
      unint64_t v81 = v94 + 8 * v95;
      *int v96 = v90;
      uint64_t v91 = v96 + 1;
      while (v82 != v92)
      {
        uint64_t v97 = *--v82;
        *--int v96 = v97;
      }
      *(void *)(a1 + 1152) = v96;
      *(void *)(a1 + 1160) = v91;
      *(void *)(a1 + 1168) = v81;
      if (v92)
      {
        operator delete(v92);
        unint64_t v81 = *(void *)(a1 + 1168);
      }
    }
    else
    {
      *unint64_t v82 = v89;
      uint64_t v91 = v82 + 1;
    }
    *(void *)(a1 + 1160) = v91;
    *(_DWORD *)__src = 3;
    memset(&__src[8], 0, 24);
    uint64_t v98 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
    uint64_t v99 = v98;
    if ((unint64_t)v91 >= v81)
    {
      uint64_t v101 = (uint64_t *)*v187;
      uint64_t v102 = ((char *)v91 - (unsigned char *)*v187) >> 3;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v81 - (void)v101) >> 2 > v103) {
        unint64_t v103 = (uint64_t)(v81 - (void)v101) >> 2;
      }
      if (v81 - (unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v103)
      {
        unint64_t v103 = (unint64_t)sub_2483F04AC(v103);
        uint64_t v91 = *(uint64_t **)(a1 + 1160);
        uint64_t v101 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        uint64_t v104 = 0;
      }
      uint64_t v105 = (uint64_t *)(v103 + 8 * v102);
      unint64_t v81 = v103 + 8 * v104;
      *uint64_t v105 = v99;
      size_t v100 = v105 + 1;
      while (v91 != v101)
      {
        uint64_t v106 = *--v91;
        *--uint64_t v105 = v106;
      }
      *(void *)(a1 + 1152) = v105;
      *(void *)(a1 + 1160) = v100;
      *(void *)(a1 + 1168) = v81;
      if (v101)
      {
        operator delete(v101);
        unint64_t v81 = *(void *)(a1 + 1168);
      }
    }
    else
    {
      *uint64_t v91 = v98;
      size_t v100 = v91 + 1;
    }
    *(void *)(a1 + 1160) = v100;
    *(_DWORD *)__src = 4;
    memset(&__src[8], 0, 24);
    uint64_t v107 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
    uint64_t v108 = v107;
    if ((unint64_t)v100 >= v81)
    {
      uint64_t v110 = (uint64_t *)*v187;
      uint64_t v111 = ((char *)v100 - (unsigned char *)*v187) >> 3;
      unint64_t v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v81 - (void)v110) >> 2 > v112) {
        unint64_t v112 = (uint64_t)(v81 - (void)v110) >> 2;
      }
      if (v81 - (unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v112)
      {
        unint64_t v112 = (unint64_t)sub_2483F04AC(v112);
        size_t v100 = *(uint64_t **)(a1 + 1160);
        uint64_t v110 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        uint64_t v113 = 0;
      }
      unint64_t v114 = (uint64_t *)(v112 + 8 * v111);
      unint64_t v81 = v112 + 8 * v113;
      uint64_t *v114 = v108;
      unint64_t v109 = v114 + 1;
      while (v100 != v110)
      {
        uint64_t v115 = *--v100;
        *--unint64_t v114 = v115;
      }
      *(void *)(a1 + 1152) = v114;
      *(void *)(a1 + 1160) = v109;
      *(void *)(a1 + 1168) = v81;
      if (v110)
      {
        operator delete(v110);
        unint64_t v81 = *(void *)(a1 + 1168);
      }
    }
    else
    {
      *size_t v100 = v107;
      unint64_t v109 = v100 + 1;
    }
    *(void *)(a1 + 1160) = v109;
    *(_DWORD *)__src = 5;
    memset(&__src[8], 0, 24);
    uint64_t v116 = sub_24840A1D8((uint64_t)__src, *(void *)(a1 + 480), *(void *)(a1 + 488));
    uint64_t v117 = v116;
    if ((unint64_t)v109 >= v81)
    {
      uint64_t v119 = (uint64_t *)*v187;
      uint64_t v120 = ((char *)v109 - (unsigned char *)*v187) >> 3;
      unint64_t v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v81 - (void)v119) >> 2 > v121) {
        unint64_t v121 = (uint64_t)(v81 - (void)v119) >> 2;
      }
      if (v81 - (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v121)
      {
        unint64_t v121 = (unint64_t)sub_2483F04AC(v121);
        unint64_t v109 = *(uint64_t **)(a1 + 1160);
        uint64_t v119 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        uint64_t v122 = 0;
      }
      unint64_t v123 = (uint64_t *)(v121 + 8 * v120);
      unint64_t v124 = v121 + 8 * v122;
      *unint64_t v123 = v117;
      unint64_t v118 = v123 + 1;
      while (v109 != v119)
      {
        uint64_t v125 = *--v109;
        *--unint64_t v123 = v125;
      }
      *(void *)(a1 + 1152) = v123;
      *(void *)(a1 + 1160) = v118;
      *(void *)(a1 + 1168) = v124;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      uint64_t *v109 = v116;
      unint64_t v118 = v109 + 1;
    }
    *(void *)(a1 + 1160) = v118;
    sub_2483FEEE4((char **)a1, *(void *)(a1 + 488));
    unint64_t v126 = *(void *)(a1 + 488);
    uint64_t v127 = *(void *)(a1 + 24);
    unint64_t v128 = *(void *)(a1 + 32) - v127;
    if (v126 <= v128)
    {
      if (v126 < v128) {
        *(void *)(a1 + 32) = v127 + v126;
      }
    }
    else
    {
      sub_2483EE8AC(v183, v126 - v128);
    }
  }
  BOOL v129 = *(unint64_t **)(a1 + 1160);
  unint64_t v130 = *(void *)(a1 + 1168);
  if ((unint64_t)v129 >= v130)
  {
    float v132 = (unint64_t *)*v187;
    uint64_t v133 = ((char *)v129 - (unsigned char *)*v187) >> 3;
    unint64_t v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v135 = v130 - (void)v132;
    if (v135 >> 2 > v134) {
      unint64_t v134 = v135 >> 2;
    }
    BOOL v73 = (unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v73) {
      unint64_t v136 = v134;
    }
    if (v136)
    {
      unint64_t v136 = (unint64_t)sub_2483F04AC(v136);
      BOOL v129 = *(unint64_t **)(a1 + 1160);
      float v132 = *(unint64_t **)(a1 + 1152);
    }
    else
    {
      uint64_t v137 = 0;
    }
    float32x4_t v138 = (unint64_t *)(v136 + 8 * v133);
    unint64_t v139 = v136 + 8 * v137;
    *float32x4_t v138 = v8;
    int32x4_t v131 = v138 + 1;
    while (v129 != v132)
    {
      unint64_t v140 = *--v129;
      *--float32x4_t v138 = v140;
    }
    *(void *)(a1 + 1152) = v138;
    *(void *)(a1 + 1160) = v131;
    *(void *)(a1 + 1168) = v139;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    *BOOL v129 = v8;
    int32x4_t v131 = v129 + 1;
  }
  uint64_t v141 = (long long *)(a1 + 712);
  *(void *)(a1 + 1160) = v131;
  uint64_t v142 = *(void *)(a1 + 496);
  *(void *)(a1 + 712) = v142;
  *(void *)(a1 + 720) = v142;
  uint64_t v143 = *(void *)(a1 + 72);
  float32x4_t v144 = *(void **)(a1 + 80);
  unint64_t v145 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v144 - v143) >> 3);
  unint64_t v146 = v8 - v145;
  if (v8 <= v145)
  {
    if (v8 >= v145) {
      goto LABEL_260;
    }
    float v168 = (void *)(v143 + 152 * v8);
    while (v144 != v168)
    {
      v144 -= 19;
      sub_24844178C(v144);
    }
    goto LABEL_257;
  }
  uint64_t v147 = *(void *)(a1 + 88);
  if (0x86BCA1AF286BCA1BLL * ((v147 - (uint64_t)v144) >> 3) >= v146)
  {
    float v168 = &v144[19 * v146];
    uint64_t v169 = 152 * v8 - 8 * (((uint64_t)v144 - v143) >> 3);
    do
    {
      sub_248473270((uint64_t)v144, (long long *)(a1 + 712));
      v144 += 19;
      v169 -= 152;
    }
    while (v169);
LABEL_257:
    *(void *)(a1 + 80) = v168;
    goto LABEL_260;
  }
  if (v8 > 0x1AF286BCA1AF286) {
    sub_2483E92E8();
  }
  unint64_t v148 = 0x86BCA1AF286BCA1BLL * ((v147 - v143) >> 3);
  uint64_t v149 = 2 * v148;
  if (2 * v148 <= v8) {
    uint64_t v149 = v8;
  }
  if (v148 >= 0xD79435E50D7943) {
    unint64_t v150 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v150 = v149;
  }
  *(void *)unint64_t v192 = a1 + 88;
  if (v150 > 0x1AF286BCA1AF286) {
    goto LABEL_278;
  }
  unint64_t v151 = (char *)operator new(152 * v150);
  uint64_t v152 = (uint64_t)&v151[152 * v145];
  *(void *)__src = v151;
  *(void *)&__src[8] = v152;
  *(void *)&__src[16] = v152;
  *(void *)&__src[24] = &v151[152 * v150];
  uint64_t v153 = &v151[152 * v8];
  uint64_t v154 = 152 * v8 - 152 * v145;
  do
  {
    sub_248473270(v152, (long long *)(a1 + 712));
    v152 += 152;
    v154 -= 152;
  }
  while (v154);
  *(void *)&__src[16] = v153;
  uint64_t v156 = *(void *)(a1 + 72);
  unint64_t v155 = *(void *)(a1 + 80);
  uint64_t v157 = *(void *)&__src[8];
  if (v155 == v156)
  {
    int64x2_t v167 = vdupq_n_s64(v155);
  }
  else
  {
    uint64_t v158 = 0;
    do
    {
      uint64_t v159 = v157 + v158;
      uint64_t v160 = v155 + v158;
      uint64_t v161 = *(void *)(v155 + v158 - 136);
      *(_OWORD *)(v159 - 152) = *(_OWORD *)(v155 + v158 - 152);
      *(void *)(v159 - 136) = v161;
      *(void *)(v159 - 128) = 0;
      *(void *)(v159 - 120) = 0;
      *(void *)(v159 - 112) = 0;
      *(_OWORD *)(v159 - 128) = *(_OWORD *)(v155 + v158 - 128);
      *(void *)(v159 - 112) = *(void *)(v155 + v158 - 112);
      *(void *)(v160 - 128) = 0;
      *(void *)(v160 - 120) = 0;
      long long v162 = *(_OWORD *)(v155 + v158 - 104);
      long long v163 = *(_OWORD *)(v155 + v158 - 88);
      uint64_t v164 = *(void *)(v155 + v158 - 72);
      *(void *)(v160 - 112) = 0;
      *(void *)(v159 - 72) = v164;
      *(_OWORD *)(v159 - 88) = v163;
      *(_OWORD *)(v159 - 104) = v162;
      long long v165 = *(_OWORD *)(v155 + v158 - 64);
      *(void *)(v159 - 40) = 0;
      *(void *)(v159 - 32) = 0;
      *(_OWORD *)(v159 - 64) = v165;
      *(void *)(v159 - 48) = 0;
      *(_OWORD *)(v159 - 48) = *(_OWORD *)(v155 + v158 - 48);
      *(void *)(v159 - 32) = *(void *)(v155 + v158 - 32);
      *(void *)(v160 - 48) = 0;
      *(void *)(v160 - 40) = 0;
      *(void *)(v160 - 32) = 0;
      uint64_t v166 = *(void *)(v155 + v158 - 24);
      *(void *)(v159 - 19) = *(void *)(v155 + v158 - 19);
      *(void *)(v159 - 24) = v166;
      *(unsigned char *)(v159 - 8) = *(unsigned char *)(v155 + v158 - 8);
      v158 -= 152;
    }
    while (v155 + v158 != v156);
    v157 += v158;
    int64x2_t v167 = *v186;
    uint64_t v153 = *(char **)&__src[16];
  }
  *(void *)(a1 + 72) = v157;
  *(void *)(a1 + 80) = v153;
  *(int64x2_t *)&__src[8] = v167;
  uint64_t v170 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)&__src[24];
  *(void *)&__src[24] = v170;
  *(void *)__src = v167.i64[0];
  sub_248473338((uint64_t)__src);
LABEL_260:
  uint64_t v171 = v186->i64[0];
  long long v172 = *v141;
  *(void *)(v171 + 16) = *(void *)(a1 + 728);
  *(_OWORD *)uint64_t v171 = v172;
  if ((long long *)v171 != v141)
  {
    sub_2483FB040((char *)(v171 + 24), *(char **)(a1 + 736), *(void *)(a1 + 744), (uint64_t)(*(void *)(a1 + 744) - *(void *)(a1 + 736)) >> 2);
    long long v173 = *(_OWORD *)(a1 + 760);
    long long v174 = *(_OWORD *)(a1 + 776);
    *(void *)(v171 + 80) = *(void *)(a1 + 792);
    *(_OWORD *)(v171 + 48) = v173;
    *(_OWORD *)(v171 + 64) = v174;
    *(_OWORD *)(v171 + 88) = *(_OWORD *)(a1 + 800);
    sub_248467FE0((char *)(v171 + 104), *(char **)(a1 + 816), *(void *)(a1 + 824), (uint64_t)(*(void *)(a1 + 824) - *(void *)(a1 + 816)) >> 3);
  }
  uint64_t v175 = *(void *)(a1 + 840);
  *(void *)(v171 + 133) = *(void *)(a1 + 845);
  *(void *)(v171 + 128) = v175;
  *(unsigned char *)(v171 + 144) = *(unsigned char *)(a1 + 856);
  int v176 = *(_DWORD *)(a1 + 560);
  if (v176 == 7)
  {
    int v178 = 5;
    char v177 = a4;
    goto LABEL_266;
  }
  char v177 = a4;
  if (v176 == 8)
  {
    int v178 = 6;
LABEL_266:
    uint64_t v179 = v186->i64[0];
    *(_DWORD *)(v186->i64[0] + 84) = v178;
    goto LABEL_268;
  }
  uint64_t v179 = v186->i64[0];
LABEL_268:
  sub_24844A37C((uint64_t)__src, a1 + 512, 0, 0, v177);
  unint64_t v180 = *(void **)(v179 + 104);
  *(_OWORD *)(v179 + 88) = *(_OWORD *)__src;
  if (v180)
  {
    *(void *)(v179 + 112) = v180;
    operator delete(v180);
    *(void *)(v179 + 104) = 0;
    *(void *)(v179 + 112) = 0;
    *(void *)(v179 + 120) = 0;
  }
  *(_OWORD *)(v179 + 104) = *(_OWORD *)&__src[16];
  uint64_t v181 = *(void *)&v192[8];
  *(void *)(v179 + 120) = *(void *)v192;
  *(void *)(v179 + 128) = v181;
  *(void *)(v179 + 133) = *(void *)&v192[13];
  return a1;
}

void sub_24847459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *a10, void *a11, void *a12, void **a13, void *a14, uint64_t a15, void *a16, void **a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)(v23 + 1232);
  if (v26)
  {
    *(void *)(v23 + 1240) = v26;
    operator delete(v26);
  }
  unint64_t v27 = *(void **)(v23 + 1200);
  if (v27)
  {
    *(void *)(v23 + 1208) = v27;
    operator delete(v27);
  }
  long long __p = (void *)(v23 + 1176);
  sub_2483EA640((void ***)&__p);
  uint64_t v28 = *a17;
  if (*a17)
  {
    *(void *)(v23 + 1160) = v28;
    operator delete(v28);
  }
  sub_2484414D4(v24);
  uint64_t v29 = *(void **)(v23 + 344);
  if (v29)
  {
    *(void *)(v23 + 352) = v29;
    operator delete(v29);
  }
  long long __p = (void *)(v23 + 320);
  sub_2483F77FC((void ***)&__p);
  int v30 = *a9;
  if (*a9)
  {
    *(void *)(v23 + 256) = v30;
    operator delete(v30);
  }
  long long __p = a10;
  sub_2484415B0((void ***)&__p);
  long long __p = a11;
  sub_2483F87EC((void ***)&__p);
  long long __p = (void *)(v23 + 168);
  sub_248410954((void ***)&__p);
  long long __p = a12;
  sub_2483F87EC((void ***)&__p);
  long long v31 = *(void **)(v23 + 120);
  if (v31)
  {
    *(void *)(v23 + 128) = v31;
    operator delete(v31);
  }
  int64_t v32 = *(void **)(v23 + 96);
  if (v32)
  {
    *(void *)(v23 + 104) = v32;
    operator delete(v32);
  }
  long long __p = a16;
  sub_248441644((void ***)&__p);
  long long __p = a14;
  sub_2484416C8((void ***)&__p);
  int v33 = *a13;
  if (*a13)
  {
    *(void *)(v23 + 32) = v33;
    operator delete(v33);
  }
  int v34 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_248474798(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, void *a8, uint64_t a9, uint64_t a10, long long *a11, int a12, int a13, unsigned __int8 a14)
{
  unint64_t v16 = a11;
  uint64_t v374 = *MEMORY[0x263EF8340];
  unint64_t v364 = a4;
  int v17 = *(unsigned __int8 *)(a9 + 4208);
  unsigned __int8 v363 = a14;
  unsigned __int8 v362 = v17;
  if (v17) {
    _ZF = 1;
  }
  else {
    _ZF = a14 == 0;
  }
  if (!_ZF && *(unsigned char *)(a2 + 425) != 0)
  {
    *(int32x2_t *)uint64_t v368 = vdup_n_s32(0x3F7DA86Bu);
    *(_DWORD *)&v368[8] = 1065199723;
    *(_OWORD *)float32x4_t v355 = 0uLL;
    *(void *)&long long v20 = *(void *)a4;
    *((void *)&v20 + 1) = HIDWORD(*(void *)a4);
    *(_OWORD *)&v355[16] = v20;
    uint64_t v21 = sub_2484DA7F8((uint64_t)a4, (uint64_t)v355, (float *)v368, a11);
    if (v21) {
      return v21;
    }
  }
  if (a14 && *(_DWORD *)(a3 + 28) <= 0x10u && *(int *)(a1 + 560) <= 5 && *(void *)(a1 + 568) <= 1uLL && !v17)
  {
    unint64_t v22 = v364;
    uint64_t v21 = sub_24847E22C(v364, a9, a10, 0, a12, *(_DWORD *)(a1 + 576) == 0);
    if (v21) {
      return v21;
    }
    sub_24847E044((void *)(a9 + 1256), (uint64_t)v22);
  }
  if (*(void *)(a1 + 1008) != *(void *)(a1 + 1016)) {
    sub_248468228(a9 + 1432, a1 + 1000);
  }
  uint64_t v338 = *a7;
  uint64_t v336 = a7[1];
  if (*(_DWORD *)(a3 + 104) == 1)
  {
    int v23 = 3;
    if (*(_DWORD *)(a1 + 576) == 1) {
      int v23 = 1;
    }
  }
  else
  {
    int v23 = 3;
  }
  if (!a14) {
    int v23 = 0;
  }
  uint64_t v25 = *a5;
  uint64_t v24 = a5[1];
  int v26 = *(unsigned __int8 *)(a3 + 24);
  if (*(unsigned char *)(a3 + 24)) {
    int v26 = *(_DWORD *)(a1 + 576) != 0;
  }
  char v361 = v26;
  unsigned int v27 = *(_DWORD *)(a3 + 28);
  if (v27 < 0x20 || !a14)
  {
    if (!a14)
    {
      int v29 = 0;
LABEL_38:
      int v30 = v23 - 858993459 * ((v24 - v25) >> 3);
      uint64_t v31 = *(void *)(a1 + 48);
      sub_24842A0C4((uint64_t)v355, v338, v336, v27, v30);
      uint64_t v21 = v360;
      if (v360)
      {
LABEL_39:
        sub_24840A478((uint64_t)v355);
        return v21;
      }
      int v334 = v30;
      long long v335 = (float *)(a1 + 512);
      *(_OWORD *)uint64_t v368 = *(_OWORD *)v355;
      memset(v355, 0, sizeof(v355));
      long long v369 = *(_OWORD *)&v355[24];
      *(void *)&v368[16] = *(void *)&v355[16];
      uint64_t v370 = v356;
      uint64_t v356 = 0;
      long long v371 = v357;
      long long v372 = v358;
      LOBYTE(v373) = v359;
      sub_24842A35C(v31, (uint64_t)v368);
      long long v346 = (void **)&v369;
      sub_2483FDBFC(&v346);
      long long v346 = (void **)v368;
      sub_2483FDCBC(&v346);
      int v354 = 0;
      if (!*(_DWORD *)(a1 + 576) && *(unsigned char *)(a1 + 580))
      {
        *(_DWORD *)&v368[8] = 1157627904;
        *(void *)uint64_t v368 = 0x4500000047000000;
        if (*v335 > 0.0 && !*(_DWORD *)(a1 + 864))
        {
          __asm { FMOV            V2.2S, #1.0 }
          *(float32x2_t *)uint64_t v368 = vmul_f32(vdiv_f32(_D2, vmla_n_f32(_D2, (float32x2_t)0x4160000041B80000, *v335)), (float32x2_t)0x4500000047000000);
          *(_DWORD *)&v368[8] = *(_DWORD *)&v368[4];
          float *v335 = 0.0;
        }
        uint64_t v89 = *(void *)(a1 + 952);
        uint64_t v90 = a9 + 208;
        if (*(void *)(a1 + 960) - v89 == 12)
        {
          sub_248486AA4(v90, v89);
        }
        else
        {
          sub_248486AA4(v90, (uint64_t)v368);
          int v29 = 12;
        }
      }
      int v33 = *(_DWORD *)(v31 + 64);
      if (v33 < 32) {
        int v34 = ~(-1 << v33);
      }
      else {
        int v34 = 0;
      }
      if (a14)
      {
        int v35 = v354;
        if (v354 <= 2)
        {
          while (1)
          {
            int v36 = *(_DWORD *)(a1 + 576);
            if (*(_DWORD *)(a3 + 104) == 1 && v35 != 0 && v36 == 1) {
              goto LABEL_76;
            }
            int v353 = v35;
            if (v35 <= 1 && !v36) {
              break;
            }
            double v365 = (double)v34;
            uint64_t v39 = v35;
            if (v36)
            {
              uint64_t v40 = v35;
LABEL_69:
              int v57 = *(_DWORD *)(a3 + 32);
              int v352 = *(_DWORD *)(a3 + 28);
              int v351 = v57;
              uint64_t v58 = *(void *)v31;
              *(_DWORD *)(*(void *)v31 + (v39 << 6) + 56) = *(unsigned __int8 *)(a2 + 60)
                                                            - byte_248550964[*(unsigned int *)(a2 + 48 + 4 * v40)];
              *(_DWORD *)(v58 + ((uint64_t)v353 << 6) + 60) = *(unsigned __int8 *)(a2 + 61)
                                                           - byte_248550968[*(unsigned int *)(a2 + 48 + 4 * v354)];
              unint64_t v350 = 0;
              uint64_t v59 = *(void *)v31 + ((uint64_t)v353 << 6);
              unint64_t v350 = (v338 - 1 + (1 << *(_DWORD *)(v59 + 56))) / (unint64_t)(1 << *(_DWORD *)(v59 + 56));
              unint64_t v60 = 1 << *(_DWORD *)(v59 + 60);
              unint64_t v61 = (v336 - 1 + v60) / v60;
              *(void *)(v59 + 40) = (int)v350;
              *(void *)(v59 + 48) = (int)v61;
              uint64_t v21 = sub_24840A0F4(v59);
              if (v21) {
                goto LABEL_39;
              }
              unsigned __int8 v349 = 0;
              *(void *)uint64_t v368 = &v349;
              *(void *)&v368[8] = &v364;
              *(void *)&v368[16] = &v354;
              *(void *)&long long v369 = a6;
              *((void *)&v369 + 1) = v31;
              uint64_t v370 = &v353;
              *(void *)&long long v371 = &v350;
              *((void *)&v371 + 1) = &v352;
              *(void *)&long long v372 = &v351;
              *((void *)&v372 + 1) = &v361;
              double v373 = &v365;
              if (a11)
              {
                BOOL v62 = sub_2484767BC((uint64_t)a11, v61, (uint64_t)v368);
              }
              else
              {
                long long v346 = 0;
                *(void *)long long v347 = &v346;
                BOOL v62 = sub_2484767BC((uint64_t)&v346, v61, (uint64_t)v368);
              }
              uint64_t v21 = v62;
              if (v62) {
                goto LABEL_39;
              }
              unsigned __int8 v63 = atomic_load(&v349);
              if (v63) {
                goto LABEL_102;
              }
              goto LABEL_75;
            }
            double v41 = *(float *)(a9 + 4 * v35 + 268);
            double v365 = v41;
            uint64_t v40 = v35;
            if (v35 != 2) {
              goto LABEL_69;
            }
            if (v336)
            {
              uint64_t v42 = 0;
              uint64_t v43 = 0;
              unint64_t v44 = v364;
              uint64_t v45 = *((void *)v364 + 2);
              uint64_t v46 = *(void *)v31;
              uint64_t v48 = *(void *)(*(void *)v31 + 16);
              uint64_t v47 = *(int **)(*(void *)v31 + 24);
              do
              {
                if (v338)
                {
                  int v49 = (unsigned int *)(*(void *)(v46 + ((uint64_t)v353 << 6) + 24)
                                       + *(void *)(v46 + ((uint64_t)v353 << 6) + 16) * v43);
                  int v50 = (float *)(*(void *)&v44[10 * v354 + 6] + v42);
                  int v51 = v47;
                  uint64_t v52 = v338;
                  do
                  {
                    float v53 = *v50++;
                    double v54 = v53 * v41 + 0.5;
                    unsigned int *v49 = (int)v54;
                    int v55 = *v51++;
                    int v56 = (int)v54 - v55;
                    if ((int)v54 < v55) {
                      ++v56;
                    }
                    *v49++ = v56 & 0xFFFFFFFE;
                    --v52;
                  }
                  while (v52);
                }
                ++v43;
                uint64_t v47 = (int *)((char *)v47 + v48);
                v42 += v45;
              }
              while (v43 != v336);
            }
LABEL_75:
            int v35 = v354;
LABEL_76:
            int v354 = v35 + 1;
            BOOL v177 = v35++ < 2;
            if (!v177) {
              goto LABEL_77;
            }
          }
          uint64_t v39 = (1 - v35);
          int v353 = 1 - v35;
          uint64_t v40 = v35;
          double v365 = *(float *)(a9 + 4 * v35 + 268);
          goto LABEL_69;
        }
LABEL_77:
        if (*(_DWORD *)(a3 + 104) == 1 && *(_DWORD *)(a1 + 576) == 1) {
          int v354 = 1;
        }
      }
      int v64 = v29;
      signed int v333 = v34;
      long long v345 = (uint64_t *)v31;
      double v365 = 0.0;
      if (a5[1] != *a5)
      {
        unint64_t v65 = 0;
        int v66 = v354;
        do
        {
          uint64_t v67 = *(void *)(a3 + 328);
          unint64_t v68 = *(unsigned int *)(*(void *)(a2 + 272) + 4 * v65);
          uint64_t v69 = *(void *)v31 + ((uint64_t)v66 << 6);
          uint64_t v70 = (int)((v68 - 1 + a7[3]) / v68);
          *(void *)(v69 + 40) = (int)((v68 - 1 + a7[2]) / v68);
          *(void *)(v69 + 48) = v70;
          uint64_t v21 = sub_24840A0F4(v69);
          if (v21) {
            goto LABEL_39;
          }
          int v71 = __clz(v68) ^ 0x3F;
          unsigned int v72 = *(_DWORD *)(a2 + 268);
          BOOL v73 = (v72 & (v72 - 1)) != 0;
          unsigned int v74 = __clz(v72) ^ 0xFFFFFFE0;
          if ((v68 & (v68 - 1)) != 0) {
            ++v71;
          }
          int v75 = v74 + v71 - v73 + 1;
          uint64_t v76 = *(void *)v31;
          *(_DWORD *)(*(void *)v31 + ((uint64_t)v354 << 6) + 60) = v75;
          *(_DWORD *)(v76 + ((uint64_t)v354 << 6) + 56) = v75;
          int v353 = 0;
          uint64_t v77 = v67 + 96 * v65;
          int v78 = *(_DWORD *)(v77 + 28);
          int v353 = v78;
          int v352 = 0;
          int v352 = *(_DWORD *)(v77 + 32);
          LOBYTE(v351) = 0;
          LOBYTE(v351) = *(unsigned char *)(v77 + 24);
          unint64_t v350 = 0;
          double v79 = (double)~(-1 << *(_DWORD *)(v77 + 28));
          if ((_BYTE)v351) {
            double v79 = 1.0;
          }
          unint64_t v350 = *(void *)&v79;
          if ((_BYTE)v351) {
            int v80 = v78;
          }
          else {
            int v80 = v78 + 1;
          }
          if (v80 > v64) {
            int v64 = v80;
          }
          unsigned __int8 v349 = 0;
          uint64_t v81 = *(unsigned int *)(*(void *)v31 + ((uint64_t)v354 << 6) + 4);
          *(void *)uint64_t v368 = &v349;
          *(void *)&v368[8] = a5;
          *(void *)&v368[16] = &v365;
          *(void *)&long long v369 = a6;
          *((void *)&v369 + 1) = v31;
          uint64_t v370 = &v354;
          *(void *)&long long v371 = &v353;
          *((void *)&v371 + 1) = &v352;
          *(void *)&long long v372 = &v351;
          *((void *)&v372 + 1) = &v350;
          unint64_t v16 = a11;
          if (a11)
          {
            BOOL v82 = sub_24847686C((uint64_t)a11, v81, (uint64_t)v368);
          }
          else
          {
            long long v346 = 0;
            *(void *)long long v347 = &v346;
            BOOL v82 = sub_24847686C((uint64_t)&v346, v81, (uint64_t)v368);
          }
          uint64_t v21 = v82;
          if (v82) {
            goto LABEL_39;
          }
          unsigned __int8 v83 = atomic_load(&v349);
          if (v83) {
            goto LABEL_102;
          }
          unint64_t v65 = *(void *)&v365 + 1;
          double v365 = *(double *)&v65;
          int v66 = ++v354;
        }
        while (v65 < 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
      }
      if (*(_DWORD *)(a1 + 912) == 5) {
        int v84 = 16;
      }
      else {
        int v84 = 32;
      }
      if (v64 > v84)
      {
LABEL_102:
        uint64_t v21 = 1;
        goto LABEL_39;
      }
      int v332 = v84;
      if (sub_248456844((uint64_t)v335))
      {
        uint64_t v91 = (uint64_t *)v31;
        signed int v92 = v333;
        if (*(_DWORD *)(a1 + 884))
        {
          if (v362)
          {
            int v93 = 1;
            goto LABEL_148;
          }
          goto LABEL_121;
        }
        int v93 = v362;
        if (*(unsigned char *)(a1 + 888) && !v362)
        {
LABEL_121:
          if ((unint64_t)(((uint64_t)(*(void *)(v31 + 8) - *(void *)v31) >> 6) - *(void *)(v31 + 72)) >= 2)
          {
            sub_24842BFC8((int64x2_t *)v368, 1);
            *(_DWORD *)&v368[12] = *(_DWORD *)(v31 + 72);
            int v94 = ((*(void *)(v31 + 8) - *(void *)v31) >> 6) - *(_DWORD *)&v368[12];
            unint64_t v95 = (unint64_t)(v336 * v338) >> 1;
            int v96 = *(_DWORD *)(a1 + 884);
            if (v96 >= 0) {
              int v97 = *(_DWORD *)(a1 + 884);
            }
            else {
              int v97 = -v96;
            }
            if (v97 < (int)v95) {
              LODWORD(v95) = v97;
            }
            *(_DWORD *)&v368[20] = ((*(void *)(v31 + 8) - *(void *)v31) >> 6) - *(_DWORD *)&v368[12];
            LODWORD(v369) = v95;
            LOBYTE(v372) = v96 >= 0;
            if (*(unsigned char *)(a1 + 888)) {
              BOOL v98 = v94 == 3;
            }
            else {
              BOOL v98 = 0;
            }
            char v99 = v98;
            BYTE1(v372) = v99;
            if (v98) {
              HIDWORD(v371) = *(_DWORD *)(a1 + 1224);
            }
            long long v346 = (void **)&unk_26FC66948;
            *(_OWORD *)&v347[4] = 0u;
            memset(v348, 0, sizeof(v348));
            sub_248419BD4((uint64_t)&v346);
            sub_24847691C((uint64_t *)v31, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, *(unsigned char *)(a1 + 856), v100, v101, v102, v103, v104, v105, v106, v107);
            *(void *)uint64_t v368 = &unk_26FC66970;
            long long v346 = (void **)&v369 + 1;
            sub_2483FEA88(&v346);
            if ((unint64_t)(((uint64_t)(*(void *)(v31 + 8) - *(void *)v31) >> 6) - *(void *)(v31 + 72)) >= 4)
            {
              sub_24842BFC8((int64x2_t *)v368, 1);
              *(_DWORD *)&v368[12] = *(_DWORD *)(v31 + 72);
              unint64_t v108 = v336 * v338 / 3uLL;
              int v109 = *(_DWORD *)(a1 + 884);
              if (v109 >= 0) {
                int v110 = *(_DWORD *)(a1 + 884);
              }
              else {
                int v110 = -v109;
              }
              if (v110 < (int)v108) {
                LODWORD(v108) = v110;
              }
              *(_DWORD *)&v368[20] = ((*(void *)(v31 + 8) - *(void *)v31) >> 6) + ~*(_DWORD *)&v368[12];
              LODWORD(v369) = v108;
              LOBYTE(v372) = v109 >= 0;
              BYTE1(v372) = *(unsigned char *)(a1 + 888);
              if (BYTE1(v372)) {
                HIDWORD(v371) = *(_DWORD *)(a1 + 1224);
              }
              long long v346 = (void **)&unk_26FC66948;
              *(_OWORD *)&v347[4] = 0u;
              memset(v348, 0, sizeof(v348));
              sub_248419BD4((uint64_t)&v346);
              sub_24847691C((uint64_t *)v31, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, *(unsigned char *)(a1 + 856), v111, v112, v113, v114, v115, v116, v117, v118);
              *(void *)uint64_t v368 = &unk_26FC66970;
              long long v346 = (void **)&v369 + 1;
              sub_2483FEA88(&v346);
            }
          }
LABEL_145:
          if (*(float *)(a1 + 876) <= 0.0 || *(unsigned char *)(a1 + 888))
          {
            int v93 = 0;
          }
          else if (*(int *)(a1 + 560) < 9 || (int v93 = 0, v363) && *(_DWORD *)(a3 + 28) >= 9u)
          {
            uint64_t v343 = ((v91[1] - *v91) >> 6) - v91[9];
            if (v343)
            {
              int v329 = v64;
              signed int v119 = 0;
              for (uint64_t i = 0; i != v343; ++i)
              {
                signed int v292 = v119;
                unint64_t v293 = (void *)(*v91 + ((v91[9] + i) << 6));
                uint64_t v294 = v293[6];
                if (v294)
                {
                  uint64_t v295 = 0;
                  uint64_t v297 = v293[2];
                  uint64_t v296 = (int *)v293[3];
                  int v298 = 0x7FFFFFFF;
                  signed int v299 = 0x80000000;
                  uint64_t v300 = v293[5];
                  do
                  {
                    unint64_t v301 = v296;
                    for (uint64_t j = v300; j; --j)
                    {
                      int v304 = *v301++;
                      signed int v303 = v304;
                      if (v304 < v298) {
                        int v298 = v303;
                      }
                      if (v303 > v299) {
                        signed int v299 = v303;
                      }
                    }
                    ++v295;
                    uint64_t v296 = (int *)((char *)v296 + v297);
                  }
                  while (v295 != v294);
                }
                else
                {
                  signed int v299 = 0x80000000;
                  int v298 = 0x7FFFFFFF;
                }
                sub_24842BFC8((int64x2_t *)v368, 1);
                double v305 = *(float *)(a1 + 876) / 100.0;
                *(_DWORD *)&v368[12] = *((_DWORD *)v91 + 18) + i;
                int v306 = (int)(v305 * (double)(v299 - (uint64_t)v298 + 1));
                if (v306 >= (int)((unint64_t)(v336 * v338) >> 4)) {
                  int v306 = (unint64_t)(v336 * v338) >> 4;
                }
                *(_DWORD *)&v368[20] = 1;
                LODWORD(v369) = v306;
                long long v346 = (void **)&unk_26FC66948;
                *(_OWORD *)&v347[4] = 0u;
                memset(v348, 0, sizeof(v348));
                long long v366 = xmmword_2484DC960;
                double v365 = COERCE_DOUBLE(&unk_26FC65A00);
                uint64_t v367 = 0;
                sub_248429138(&v346, (uint64_t)&v365);
                if (sub_24847691C(v91, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, 0, v307, v308, v309, v310, v311, v312, v313, v314))
                {
                  float v315 = (void *)(*v91 + ((v91[9] + i) << 6));
                  uint64_t v316 = v315[6];
                  if (v316)
                  {
                    uint64_t v317 = 0;
                    uint64_t v319 = v315[2];
                    float v318 = (signed int *)v315[3];
                    signed int v320 = 0x80000000;
                    uint64_t v321 = v315[5];
                    do
                    {
                      unint64_t v322 = v318;
                      for (uint64_t k = v321; k; --k)
                      {
                        signed int v325 = *v322++;
                        signed int v324 = v325;
                        if (v325 > v320) {
                          signed int v320 = v324;
                        }
                      }
                      ++v317;
                      float v318 = (signed int *)((char *)v318 + v319);
                    }
                    while (v317 != v316);
                    if (v320 < v92) {
                      signed int v92 = v320;
                    }
                    unsigned int v326 = __clz(v320) ^ 0x1F;
                    if ((v320 & (v320 - 1)) != 0) {
                      ++v326;
                    }
                    if (v320 <= 0) {
                      signed int v327 = 0;
                    }
                    else {
                      signed int v327 = v326;
                    }
                  }
                  else
                  {
                    signed int v327 = 0;
                    signed int v92 = 0x80000000;
                  }
                  if (v292 <= v327) {
                    signed int v119 = v327;
                  }
                  else {
                    signed int v119 = v292;
                  }
                }
                else
                {
                  signed int v119 = v329;
                }
                *(void *)uint64_t v368 = &unk_26FC66970;
                long long v346 = (void **)&v369 + 1;
                sub_2483FEA88(&v346);
                int v93 = 0;
              }
            }
            else
            {
              int v93 = 0;
              signed int v119 = 0;
            }
LABEL_149:
            int v120 = v363;
            int v331 = v93;
            if (*(_DWORD *)(a1 + 576) == 1
              && v363
              && (unint64_t)(((v91[1] - *v91) >> 6) - v91[9]) >= 3
              && v119 + 1 < v332)
            {
              int v121 = *(_DWORD *)(a1 + 868);
              if (v121 < 0)
              {
                if (!sub_248456844((uint64_t)v335) || *(int *)(a1 + 560) >= 6)
                {
                  sub_24842BFC8((int64x2_t *)v368, 0);
                  *(_DWORD *)&v368[12] = v345[9];
                  *(_DWORD *)&v368[16] = 6;
                  long long v346 = (void **)&unk_26FC66948;
                  *(_OWORD *)&v347[4] = 0u;
                  memset(v348, 0, sizeof(v348));
                  sub_248419BD4((uint64_t)&v346);
                  sub_248476AE4(v345, (uint64_t)v368, (uint64_t)&v346, (uint64_t)v16, 0);
                  goto LABEL_164;
                }
              }
              else if (v121 >= 1)
              {
                sub_24842BFC8((int64x2_t *)v368, 0);
                int v122 = *(_DWORD *)(a1 + 868);
                *(_DWORD *)&v368[12] = v345[9];
                *(_DWORD *)&v368[16] = v122;
                long long v346 = (void **)&unk_26FC66948;
                *(_OWORD *)&v347[4] = 0u;
                memset(v348, 0, sizeof(v348));
                sub_248419BD4((uint64_t)&v346);
                sub_248476AE4(v345, (uint64_t)v368, (uint64_t)&v346, (uint64_t)v16, 0);
LABEL_164:
                *(void *)uint64_t v368 = &unk_26FC66970;
                long long v346 = (void **)&v369 + 1;
                sub_2483FEA88(&v346);
                ++v119;
              }
            }
            int v328 = v120;
            signed int v330 = v119;
            unint64_t v123 = *(unsigned int *)(a1 + 872);
            if ((int)v123 >= 1)
            {
              uint64_t v125 = *v345;
              uint64_t v124 = v345[1];
              if (v123 < (v124 - *v345) >> 6)
              {
                uint64_t v126 = 0;
                int v127 = *(_DWORD *)(a1 + 872);
                do
                {
                  if (v123)
                  {
                    do
                    {
                      sub_24842BFC8((int64x2_t *)v368, 0);
                      *(int8x8_t *)&v368[12] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v123 == 1), 0x1FuLL)), (int8x8_t)(v126 | 0x1C00000000), (int8x8_t)((v123 + v126 - 2) | 0xE00000000));
                      long long v346 = (void **)&unk_26FC66948;
                      if (v123 == 1) {
                        unint64_t v123 = 0;
                      }
                      else {
                        v123 -= 2;
                      }
                      *(_OWORD *)&v347[4] = 0u;
                      memset(v348, 0, sizeof(v348));
                      long long v366 = xmmword_2484DC960;
                      double v365 = COERCE_DOUBLE(&unk_26FC65A00);
                      uint64_t v367 = 0;
                      sub_248429138(&v346, (uint64_t)&v365);
                      sub_248476AE4(v345, (uint64_t)v368, (uint64_t)&v346, (uint64_t)a11, 0);
                      *(void *)uint64_t v368 = &unk_26FC66970;
                      long long v346 = (void **)&v369 + 1;
                      sub_2483FEA88(&v346);
                    }
                    while (v123);
                    int v127 = *(_DWORD *)(a1 + 872);
                    uint64_t v125 = *v345;
                    uint64_t v124 = v345[1];
                  }
                  ++v126;
                  unint64_t v123 = v127;
                }
                while (v126 + v127 < (unint64_t)((v124 - v125) >> 6));
              }
            }
            if (v331)
            {
              unint64_t v128 = v345;
              int v129 = v92;
              int v130 = v330;
            }
            else
            {
              int v129 = v92;
              int v130 = v330;
              if (*(_DWORD *)(a1 + 864))
              {
                unint64_t v128 = v345;
                if (*v345 != v345[1] && v330 + 2 < v332)
                {
                  sub_24842BFC8((int64x2_t *)v368, 2);
                  long long v346 = (void **)&unk_26FC66948;
                  *(_OWORD *)&v347[4] = 0u;
                  memset(v348, 0, sizeof(v348));
                  sub_248419BD4((uint64_t)&v346);
                  sub_248476AE4(v345, (uint64_t)v368, (uint64_t)&v346, (uint64_t)a11, 0);
                  *(void *)uint64_t v368 = &unk_26FC66970;
                  long long v346 = (void **)&v369 + 1;
                  sub_2483FEA88(&v346);
                  int v130 = v330 + 2;
                }
              }
              else
              {
                unint64_t v128 = v345;
              }
            }
            if (v130 >= v332) {
              *(_DWORD *)(a1 + 868) = 0;
            }
            if (sub_248456844((uint64_t)v335)) {
              goto LABEL_429;
            }
            unint64_t v131 = (v128[1] - *v128) >> 6;
            *(_DWORD *)uint64_t v368 = 1;
            sub_2483F1FEC((char **)(a1 + 96), v131, v368);
            float v132 = *(_DWORD *)(a1 + 864) ? 0.25 : 0.025;
            float v133 = *(_DWORD *)(a1 + 576) ? (float)v129 / 255.0 : 1.0;
            unint64_t v134 = 0;
            uint64_t v135 = 0;
            unint64_t v136 = 0;
            for (uint64_t m = 0; m != 3; ++m)
            {
              float v138 = v133 * (float)(v132 * *v335);
              if ((unint64_t)v135 >= v136)
              {
                uint64_t v139 = v135 - v134;
                unint64_t v140 = v139 + 1;
                if ((unint64_t)(v139 + 1) >> 62) {
                  sub_2483E92E8();
                }
                if ((uint64_t)(v136 - (void)v134) >> 1 > v140) {
                  unint64_t v140 = (uint64_t)(v136 - (void)v134) >> 1;
                }
                if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v141 = v140;
                }
                if (v141) {
                  unint64_t v141 = (unint64_t)sub_2483E9300(v141);
                }
                else {
                  uint64_t v142 = 0;
                }
                uint64_t v143 = (float *)(v141 + 4 * v139);
                float *v143 = v138;
                float32x4_t v144 = v143 + 1;
                while (v135 != v134)
                {
                  int v145 = *((_DWORD *)v135-- - 1);
                  *((_DWORD *)v143-- - 1) = v145;
                }
                unint64_t v136 = v141 + 4 * v142;
                if (v134) {
                  operator delete(v134);
                }
                unint64_t v134 = v143;
                uint64_t v135 = v144;
              }
              else
              {
                *v135++ = v138;
              }
            }
            if (a5[1] != *a5)
            {
              unint64_t v146 = 0;
              do
              {
                int v147 = *(_DWORD *)(*(void *)(a3 + 328) + 96 * v146 + 28);
                if (v147 < 32) {
                  int v148 = ~(-1 << v147);
                }
                else {
                  int v148 = 0;
                }
                uint64_t v149 = *(void *)(a1 + 520);
                float v150 = 0.0;
                if (v146 < (*(void *)(a1 + 528) - v149) >> 2)
                {
                  float v150 = *(float *)(v149 + 4 * v146);
                  if (v150 < 0.0) {
                    float v150 = *v335;
                  }
                }
                float v151 = (float)((float)v148 / 255.0) * (float)(v132 * v150);
                if ((unint64_t)v135 >= v136)
                {
                  uint64_t v153 = v135 - v134;
                  unint64_t v154 = v153 + 1;
                  if ((unint64_t)(v153 + 1) >> 62) {
                    sub_2483E92E8();
                  }
                  if ((uint64_t)(v136 - (void)v134) >> 1 > v154) {
                    unint64_t v154 = (uint64_t)(v136 - (void)v134) >> 1;
                  }
                  if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v155 = v154;
                  }
                  if (v155) {
                    unint64_t v155 = (unint64_t)sub_2483E9300(v155);
                  }
                  else {
                    uint64_t v156 = 0;
                  }
                  uint64_t v157 = (float *)(v155 + 4 * v153);
                  *uint64_t v157 = v151;
                  uint64_t v152 = v157 + 1;
                  while (v135 != v134)
                  {
                    int v158 = *((_DWORD *)v135-- - 1);
                    *((_DWORD *)v157-- - 1) = v158;
                  }
                  unint64_t v136 = v155 + 4 * v156;
                  if (v134) {
                    operator delete(v134);
                  }
                  unint64_t v134 = v157;
                }
                else
                {
                  *uint64_t v135 = v151;
                  uint64_t v152 = v135 + 1;
                }
                ++v146;
                uint64_t v135 = v152;
              }
              while (v146 < 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
            }
            float v159 = *(float *)(a1 + 728);
            if (v159 == 0.0)
            {
              uint64_t v21 = 1;
            }
            else
            {
              uint64_t v160 = v345[9];
              uint64_t v161 = *v345;
              unint64_t v162 = (v345[1] - *v345) >> 6;
              if (v162 > v160)
              {
                unint64_t v163 = v345[9];
                int v164 = 3;
                if (v328) {
                  int v164 = 0;
                }
                int v165 = v334;
                int v166 = *(_DWORD *)(a1 + 576);
                uint64_t v167 = *(void *)(a1 + 96);
                uint64_t v168 = v345[9];
                do
                {
                  uint64_t v169 = (unsigned int *)(v161 + (v163 << 6));
                  int v170 = v169[15] + v169[14];
                  if (v170 >= 16) {
                    int v171 = 16;
                  }
                  else {
                    int v171 = v169[15] + v169[14];
                  }
                  BOOL v172 = v170 > 0;
                  int v173 = v164 + (v163 - v160) % v334;
                  if (v165 >= 3 && v162 - 4 <= v163 && *(_DWORD *)(a1 + 864)) {
                    int v173 = 1;
                  }
                  int v174 = v171 - v172;
                  if (v166 || v173 > 2)
                  {
                    if (*(_DWORD *)(a1 + 868) && (v173 >= 1 ? (BOOL v177 = v173 <= 2) : (BOOL v177 = 0), v177))
                    {
                      float v175 = v134[v173] * 0.35;
                      float v176 = flt_24855048C[v174];
                    }
                    else
                    {
                      float v176 = (float)(v134[v173] * 0.35) * 1.1;
                      float v175 = flt_2485504CC[v174];
                    }
                  }
                  else
                  {
                    float v175 = v134[v173] * 2.4;
                    float v176 = flt_2485503CC[16 * (uint64_t)v173 + v174];
                  }
                  int v178 = (int)(float)(v175 * v176);
                  if (v178 <= 1) {
                    int v179 = 1;
                  }
                  else {
                    int v179 = (int)(float)(v175 * v176);
                  }
                  if (v178 >= 2)
                  {
                    unint64_t v180 = v169[1];
                    if (v180)
                    {
                      unint64_t v181 = 0;
                      uint64_t v183 = *((void *)v169 + 2);
                      uint64_t v182 = *((void *)v169 + 3);
                      unsigned int v184 = v179 >> 1;
                      LODWORD(v185) = *v169;
                      do
                      {
                        if (v185)
                        {
                          unint64_t v186 = 0;
                          do
                          {
                            int v187 = *(_DWORD *)(v182 + 4 * v186);
                            int v188 = v187 + v184;
                            int v189 = (int)(v184 - v187) % v179;
                            BOOL v190 = v187 >= 0;
                            if (v187 < 0) {
                              int v191 = v184 - v187;
                            }
                            else {
                              int v191 = (int)(v187 + v184) % v179;
                            }
                            if (!v190) {
                              int v188 = v189;
                            }
                            *(_DWORD *)(v182 + 4 * v186++) = v188 - v191;
                            unint64_t v185 = *v169;
                          }
                          while (v186 < v185);
                          unint64_t v180 = v169[1];
                        }
                        ++v181;
                        v182 += v183;
                      }
                      while (v181 < v180);
                    }
                  }
                  *(_DWORD *)(v167 + 4 * v163) = v179;
                  LODWORD(v168) = v168 + 1;
                  unint64_t v163 = v168;
                  int v165 = v334;
                }
                while (v162 > v168);
              }
              uint64_t v21 = 0;
            }
            if (v134) {
              operator delete(v134);
            }
            if (v159 != 0.0)
            {
LABEL_429:
              unint64_t v192 = a7;
              if (a7[15])
              {
                unint64_t v193 = 0;
                float v194 = *(char **)(a1 + 1240);
                do
                {
                  unint64_t v195 = v192[12];
                  unint64_t v196 = v193 / v195;
                  unint64_t v197 = v193 % v195;
                  uint64_t v198 = v192[17];
                  uint64_t v199 = v198 * v197;
                  uint64_t v200 = v198 * v196;
                  uint64_t v201 = v197 + (*a8 >> 11) + (v196 + (a8[1] >> 11)) * *(void *)(a1 + 464);
                  unint64_t v202 = *(void *)(a1 + 1248);
                  if ((unint64_t)v194 >= v202)
                  {
                    uint64_t v203 = *(char **)(a1 + 1232);
                    unint64_t v204 = 0x8E38E38E38E38E39 * ((v194 - v203) >> 3);
                    unint64_t v205 = v204 + 1;
                    if (v204 + 1 > 0x38E38E38E38E38ELL) {
                      sub_2483E92E8();
                    }
                    unint64_t v206 = 0x8E38E38E38E38E39 * ((uint64_t)(v202 - (void)v203) >> 3);
                    if (2 * v206 > v205) {
                      unint64_t v205 = 2 * v206;
                    }
                    if (v206 >= 0x1C71C71C71C71C7) {
                      unint64_t v207 = 0x38E38E38E38E38ELL;
                    }
                    else {
                      unint64_t v207 = v205;
                    }
                    if (v207)
                    {
                      unint64_t v207 = (unint64_t)sub_2483FE084(v207);
                      float v194 = *(char **)(a1 + 1240);
                      uint64_t v203 = *(char **)(a1 + 1232);
                    }
                    else
                    {
                      uint64_t v208 = 0;
                    }
                    unint64_t v209 = v207 + 72 * v204;
                    *(void *)unint64_t v209 = v199;
                    *(void *)(v209 + 8) = v200;
                    *(void *)(v209 + 16) = v198;
                    *(void *)(v209 + 24) = v198;
                    *(void *)(v209 + 32) = 0x3E800000003;
                    *(_DWORD *)(v209 + 40) = 2;
                    *(void *)(v209 + 48) = 0;
                    *(void *)(v209 + 56) = v201;
                    *(void *)(v209 + 64) = 0;
                    unint64_t v210 = v209;
                    if (v194 != v203)
                    {
                      do
                      {
                        *(_OWORD *)(v210 - 72) = *(_OWORD *)(v194 - 72);
                        long long v211 = *(_OWORD *)(v194 - 56);
                        long long v212 = *(_OWORD *)(v194 - 40);
                        long long v213 = *(_OWORD *)(v194 - 24);
                        *(void *)(v210 - 8) = *((void *)v194 - 1);
                        *(_OWORD *)(v210 - 24) = v213;
                        *(_OWORD *)(v210 - 40) = v212;
                        *(_OWORD *)(v210 - 56) = v211;
                        v210 -= 72;
                        v194 -= 72;
                      }
                      while (v194 != v203);
                      uint64_t v203 = *(char **)(a1 + 1232);
                    }
                    *(void *)(a1 + 1232) = v210;
                    float v194 = (char *)(v209 + 72);
                    *(void *)(a1 + 1240) = v209 + 72;
                    *(void *)(a1 + 1248) = v207 + 72 * v208;
                    if (v203) {
                      operator delete(v203);
                    }
                    unint64_t v192 = a7;
                  }
                  else
                  {
                    *(void *)float v194 = v199;
                    *((void *)v194 + 1) = v200;
                    *((void *)v194 + 2) = v198;
                    *((void *)v194 + 3) = v198;
                    *((void *)v194 + 4) = 0x3E800000003;
                    *((_DWORD *)v194 + 10) = 2;
                    *((void *)v194 + 6) = 0;
                    *((void *)v194 + 7) = v201;
                    *((void *)v194 + 8) = 0;
                    v194 += 72;
                  }
                  *(void *)(a1 + 1240) = v194;
                  ++v193;
                }
                while (v193 < v192[15]);
              }
              unint64_t v214 = v192[14];
              uint64_t v215 = (uint64_t)a11;
              if (v214)
              {
                unint64_t v216 = 0;
                unint64_t v217 = *(void *)(a9 + 4272);
                do
                {
                  if (v217)
                  {
                    unint64_t v218 = 0;
                    unint64_t v219 = v192[10];
                    unint64_t v220 = v216 / v219;
                    unint64_t v344 = v216;
                    unint64_t v221 = v216 % v219;
                    uint64_t v222 = v192[16];
                    uint64_t v223 = v222 * v221;
                    uint64_t v224 = v222 * v220;
                    uint64_t v225 = *a8 / *(void *)(a1 + 496)
                         + v221
                         + (a8[1] / *(void *)(a1 + 496) + v220) * *(void *)(a1 + 448);
                    do
                    {
                      *(_DWORD *)uint64_t v368 = 0;
                      LODWORD(v346) = 0;
                      sub_248401470(a2 + 104, v218, &v346, v368);
                      int v226 = (int)v346;
                      int v227 = *(_DWORD *)v368;
                      uint64_t v228 = *(char **)(a1 + 1240);
                      unint64_t v229 = *(void *)(a1 + 1248);
                      if ((unint64_t)v228 >= v229)
                      {
                        unint64_t v231 = *(char **)(a1 + 1232);
                        unint64_t v232 = 0x8E38E38E38E38E39 * ((v228 - v231) >> 3);
                        unint64_t v233 = v232 + 1;
                        if (v232 + 1 > 0x38E38E38E38E38ELL) {
                          sub_2483E92E8();
                        }
                        unint64_t v234 = 0x8E38E38E38E38E39 * ((uint64_t)(v229 - (void)v231) >> 3);
                        if (2 * v234 > v233) {
                          unint64_t v233 = 2 * v234;
                        }
                        if (v234 >= 0x1C71C71C71C71C7) {
                          unint64_t v235 = 0x38E38E38E38E38ELL;
                        }
                        else {
                          unint64_t v235 = v233;
                        }
                        if (v235)
                        {
                          unint64_t v235 = (unint64_t)sub_2483FE084(v235);
                          uint64_t v228 = *(char **)(a1 + 1240);
                          unint64_t v231 = *(char **)(a1 + 1232);
                        }
                        else
                        {
                          uint64_t v236 = 0;
                        }
                        unint64_t v237 = v235 + 72 * v232;
                        *(void *)unint64_t v237 = v223;
                        *(void *)(v237 + 8) = v224;
                        *(void *)(v237 + 16) = v222;
                        *(void *)(v237 + 24) = v222;
                        *(_DWORD *)(v237 + 32) = v226;
                        *(_DWORD *)(v237 + 36) = v227;
                        *(_DWORD *)(v237 + 40) = 5;
                        *(void *)(v237 + 48) = 0;
                        *(void *)(v237 + 56) = v225;
                        *(void *)(v237 + 64) = v218;
                        unint64_t v238 = v237;
                        if (v228 != v231)
                        {
                          do
                          {
                            *(_OWORD *)(v238 - 72) = *(_OWORD *)(v228 - 72);
                            long long v239 = *(_OWORD *)(v228 - 56);
                            long long v240 = *(_OWORD *)(v228 - 40);
                            long long v241 = *(_OWORD *)(v228 - 24);
                            *(void *)(v238 - 8) = *((void *)v228 - 1);
                            *(_OWORD *)(v238 - 24) = v241;
                            *(_OWORD *)(v238 - 40) = v240;
                            *(_OWORD *)(v238 - 56) = v239;
                            v238 -= 72;
                            v228 -= 72;
                          }
                          while (v228 != v231);
                          unint64_t v231 = *(char **)(a1 + 1232);
                        }
                        *(void *)(a1 + 1232) = v238;
                        uint64_t v230 = (void *)(v237 + 72);
                        *(void *)(a1 + 1240) = v237 + 72;
                        *(void *)(a1 + 1248) = v235 + 72 * v236;
                        if (v231) {
                          operator delete(v231);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v228 = v223;
                        *((void *)v228 + 1) = v224;
                        *((void *)v228 + 2) = v222;
                        *((void *)v228 + 3) = v222;
                        *((_DWORD *)v228 + 8) = v226;
                        *((_DWORD *)v228 + 9) = v227;
                        *((_DWORD *)v228 + 10) = 5;
                        *((void *)v228 + 6) = 0;
                        *((void *)v228 + 7) = v225;
                        uint64_t v230 = v228 + 72;
                        *((void *)v228 + 8) = v218;
                      }
                      *(void *)(a1 + 1240) = v230;
                      ++v218;
                      unint64_t v217 = *(void *)(a9 + 4272);
                    }
                    while (v218 < v217);
                    unint64_t v192 = a7;
                    unint64_t v214 = a7[14];
                    uint64_t v215 = (uint64_t)a11;
                    unint64_t v216 = v344;
                  }
                  ++v216;
                }
                while (v216 < v214);
              }
              unint64_t v242 = *(void *)(a1 + 1240);
              uint64_t v243 = *(void *)(a1 + 1232);
              if (v242 - v243 == 144)
              {
                unint64_t v244 = *(void *)(a1 + 1248);
                if (v242 >= v244)
                {
                  unint64_t v246 = 0x8E38E38E38E38E39 * ((uint64_t)(v244 - v243) >> 3);
                  if (2 * v246 <= 3) {
                    uint64_t v247 = 3;
                  }
                  else {
                    uint64_t v247 = 2 * v246;
                  }
                  if (v246 >= 0x1C71C71C71C71C7) {
                    unint64_t v248 = 0x38E38E38E38E38ELL;
                  }
                  else {
                    unint64_t v248 = v247;
                  }
                  float v249 = (char *)sub_2483FE084(v248);
                  float v250 = v249 + 144;
                  float v252 = &v249[72 * v251];
                  *((void *)v249 + 18) = 0;
                  *((void *)v249 + 19) = 0;
                  *((void *)v249 + 20) = v338;
                  *((void *)v249 + 21) = v336;
                  *((void *)v249 + 22) = 0x3E800000000;
                  *(_OWORD *)(v249 + 184) = 0u;
                  *(_OWORD *)(v249 + 200) = 0u;
                  float v245 = v249 + 216;
                  float v253 = *(char **)(a1 + 1240);
                  float v254 = *(char **)(a1 + 1232);
                  if (v253 != v254)
                  {
                    do
                    {
                      *(_OWORD *)(v250 - 72) = *(_OWORD *)(v253 - 72);
                      long long v255 = *(_OWORD *)(v253 - 56);
                      long long v256 = *(_OWORD *)(v253 - 40);
                      long long v257 = *(_OWORD *)(v253 - 24);
                      *((void *)v250 - 1) = *((void *)v253 - 1);
                      *(_OWORD *)(v250 - 24) = v257;
                      *(_OWORD *)(v250 - 40) = v256;
                      *(_OWORD *)(v250 - 56) = v255;
                      v250 -= 72;
                      v253 -= 72;
                    }
                    while (v253 != v254);
                    float v253 = *(char **)(a1 + 1232);
                  }
                  *(void *)(a1 + 1232) = v250;
                  *(void *)(a1 + 1240) = v245;
                  *(void *)(a1 + 1248) = v252;
                  if (v253) {
                    operator delete(v253);
                  }
                }
                else
                {
                  *(void *)unint64_t v242 = 0;
                  *(void *)(v242 + 8) = 0;
                  *(void *)(v242 + 16) = v338;
                  *(void *)(v242 + 24) = v336;
                  *(void *)(v242 + 32) = 0x3E800000000;
                  *(_OWORD *)(v242 + 40) = 0u;
                  *(_OWORD *)(v242 + 56) = 0u;
                  float v245 = (char *)(v242 + 72);
                }
                *(void *)(a1 + 1240) = v245;
              }
              unint64_t v258 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
              int v259 = *(void **)(a1 + 1184);
              long long v260 = *(void **)(a1 + 1176);
              unint64_t v261 = 0xAAAAAAAAAAAAAAABLL * (v259 - v260);
              unint64_t v262 = v258 - v261;
              if (v258 <= v261)
              {
                if (v258 < v261)
                {
                  uint64_t v275 = &v260[0xBA2E8BA2E8BA2E9 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3)];
                  if (v259 != v275)
                  {
                    int8x16_t v276 = *(void **)(a1 + 1184);
                    do
                    {
                      uint64_t v278 = (void *)*(v276 - 3);
                      v276 -= 3;
                      uint64_t v277 = v278;
                      if (v278)
                      {
                        *(v259 - 2) = v277;
                        operator delete(v277);
                      }
                      int v259 = v276;
                    }
                    while (v276 != v275);
                  }
                  *(void *)(a1 + 1184) = v275;
                }
              }
              else
              {
                uint64_t v263 = *(void *)(a1 + 1192);
                if (0xAAAAAAAAAAAAAAABLL * ((v263 - (uint64_t)v259) >> 3) >= v262)
                {
                  bzero(*(void **)(a1 + 1184), 24 * ((24 * v262 - 24) / 0x18) + 24);
                  *(void *)(a1 + 1184) = &v259[3 * ((24 * v262 - 24) / 0x18) + 3];
                }
                else
                {
                  if (v258 > 0xAAAAAAAAAAAAAAALL) {
                    sub_2483E92E8();
                  }
                  unint64_t v264 = 0xAAAAAAAAAAAAAAABLL * ((v263 - (uint64_t)v260) >> 3);
                  if (2 * v264 > v258) {
                    unint64_t v258 = 2 * v264;
                  }
                  if (v264 >= 0x555555555555555) {
                    unint64_t v265 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v265 = v258;
                  }
                  if (v265 > 0xAAAAAAAAAAAAAAALL) {
                    sub_2483E9338();
                  }
                  uint64_t v266 = (char *)operator new(24 * v265);
                  uint64_t v267 = &v266[8 * (v259 - v260)];
                  uint64_t v268 = &v266[24 * v265];
                  bzero(v267, 24 * ((24 * v262 - 24) / 0x18) + 24);
                  uint64_t v269 = &v267[24 * ((24 * v262 - 24) / 0x18) + 24];
                  if (v259 == v260)
                  {
                    *(void *)(a1 + 1176) = v267;
                    *(void *)(a1 + 1184) = v269;
                    *(void *)(a1 + 1192) = v268;
                    uint64_t v215 = (uint64_t)a11;
                  }
                  else
                  {
                    do
                    {
                      *((void *)v267 - 3) = 0;
                      *((void *)v267 - 2) = 0;
                      v267 -= 24;
                      *((void *)v267 + 2) = 0;
                      long long v270 = *(_OWORD *)(v259 - 3);
                      v259 -= 3;
                      *(_OWORD *)uint64_t v267 = v270;
                      *((void *)v267 + 2) = v259[2];
                      *int v259 = 0;
                      v259[1] = 0;
                      v259[2] = 0;
                    }
                    while (v259 != v260);
                    uint64_t v271 = *(void **)(a1 + 1176);
                    int v259 = *(void **)(a1 + 1184);
                    *(void *)(a1 + 1176) = v267;
                    *(void *)(a1 + 1184) = v269;
                    *(void *)(a1 + 1192) = v268;
                    uint64_t v215 = (uint64_t)a11;
                    if (v259 != v271)
                    {
                      uint64_t v272 = v259;
                      do
                      {
                        uint64_t v274 = (void *)*(v272 - 3);
                        v272 -= 3;
                        int64x2_t v273 = v274;
                        if (v274)
                        {
                          *(v259 - 2) = v273;
                          operator delete(v273);
                        }
                        int v259 = v272;
                      }
                      while (v272 != v271);
                      int v259 = v271;
                    }
                  }
                  if (v259) {
                    operator delete(v259);
                  }
                }
              }
              uint64_t v279 = 954437177 * ((*(void *)(a1 + 1240) - *(void *)(a1 + 1232)) >> 3);
              *(void *)uint64_t v368 = a1;
              *(void *)&v368[8] = &v363;
              *(void *)&v368[16] = &v362;
              if (v215)
              {
                BOOL v280 = sub_2484778AC(v215, v279, (uint64_t)v368);
              }
              else
              {
                long long v346 = 0;
                *(void *)long long v347 = &v346;
                BOOL v280 = sub_2484778AC((uint64_t)&v346, v279, (uint64_t)v368);
              }
              uint64_t v21 = v280;
              if (!v280)
              {
                unint64_t v281 = *(uint64_t **)(a1 + 48);
                unint64_t v282 = v281[9];
                uint64_t v283 = *v281;
                unint64_t v284 = (v281[1] - *v281) >> 6;
                if (v282 < v284)
                {
                  unint64_t v285 = *(void *)(a1 + 496);
                  uint64_t v286 = (unint64_t *)(v283 + (v282 << 6) + 48);
                  while (*(v286 - 1) <= v285 && *v286 <= v285)
                  {
                    v286 += 8;
                    if (v284 == ++v282) {
                      goto LABEL_384;
                    }
                  }
                }
                if (v282 < v284)
                {
                  unint64_t v288 = v282 << 6;
                  do
                  {
                    uint64_t v289 = v283 + v288;
                    uint64_t v290 = *(void *)(v283 + v288 + 24);
                    *(_OWORD *)uint64_t v289 = 0u;
                    *(_OWORD *)(v289 + 16) = 0u;
                    if (v290)
                    {
                      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v290 - 24));
                      free(*(void **)(v290 - 32));
                    }
                    *(void *)(v289 + 32) = 0;
                    ++v282;
                    uint64_t v283 = *v281;
                    v288 += 64;
                  }
                  while (v282 < (v281[1] - *v281) >> 6);
                }
LABEL_384:
                uint64_t v21 = sub_2484295E8(v345, *(void *)(*(void *)(a1 + 72) + 8));
              }
            }
            goto LABEL_39;
          }
LABEL_148:
          signed int v119 = v64;
          goto LABEL_149;
        }
      }
      else
      {
        uint64_t v91 = (uint64_t *)v31;
        signed int v92 = v333;
        if (!*(_DWORD *)(a1 + 576)) {
          *(_DWORD *)(a1 + 876) = 0;
        }
        *(unsigned char *)(a1 + 888) = 0;
        *(void *)(a1 + 880) = 0;
        int v93 = v362;
      }
      if (v93) {
        goto LABEL_148;
      }
      goto LABEL_145;
    }
LABEL_36:
    int v29 = v27 + (v26 ^ 1);
    goto LABEL_38;
  }
  if (!*(_DWORD *)(a1 + 576)) {
    goto LABEL_36;
  }
  uint64_t v21 = 1;
  char v28 = v27 == 32 ? v26 : 1;
  if (v27 <= 0x20 && (v28 & 1) != 0) {
    goto LABEL_36;
  }
  return v21;
}

void sub_248476678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  *(void *)(v43 - 224) = &unk_26FC66970;
  a32 = (void **)(v43 - 192);
  sub_2483FEA88(&a32);
  sub_24840A478((uint64_t)&a43);
  _Unwind_Resume(a1);
}

BOOL sub_2484767BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24847976C, sub_2484796C4, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_2484796C4((uint64_t)v6, i);
  return 0;
}

BOOL sub_24847686C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248479528, sub_248479484, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_248479484((uint64_t)v6, i);
  return 0;
}

uint64_t sub_24847691C(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, long long *a5, char a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if ((a6 & 1) != 0 || a3 >= 3)
  {
    return sub_248476AE4(a1, a2, a4, (uint64_t)a5, a6);
  }
  else
  {
    float v18 = sub_2484791B0((void *)*a1, (void *)a1[1], a7, a8, a9, a10, a11, a12, a13, a14);
    int v19 = sub_248476AE4(a1, a2, a4, (uint64_t)a5, 0);
    uint64_t result = 0;
    if (v19)
    {
      if (sub_2484791B0((void *)*a1, (void *)a1[1], v20, v21, v22, v23, v24, v25, v26, v27) > v18)
      {
        int v29 = (void *)a1[4];
        int v34 = &unk_26FC66970;
        uint64_t v30 = *(v29 - 6);
        long long v35 = *((_OWORD *)v29 - 4);
        uint64_t v36 = v30;
        memset(v37, 0, 24);
        sub_24840A9A8((char *)v37, *(v29 - 5), *(v29 - 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(v29 - 4) - *(v29 - 5)) >> 3));
        uint64_t v31 = *(v29 - 2);
        __int16 v38 = *((_WORD *)v29 - 4);
        v37[3] = v31;
        if (!sub_24842C084((uint64_t)&v34, (uint64_t)a1, a4, a5))
        {
          int64_t v32 = (void *)a1[4];
          int v33 = (void (**)(void *))*(v32 - 9);
          v32 -= 9;
          (*v33)(v32);
          a1[4] = (uint64_t)v32;
        }
        int v34 = &unk_26FC66970;
        uint64_t v39 = (void **)v37;
        sub_2483FEA88(&v39);
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_248476AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2483FEA88((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_248476AE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v157 = &unk_26FC66970;
  long long v158 = *(_OWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v159 = v11;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  sub_24840A9A8((char *)&v160, v10, *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v10) >> 3));
  uint64_t v163 = *(void *)(a2 + 56);
  __int16 v164 = *(_WORD *)(a2 + 64);
  if (a5)
  {
    if (sub_24842CD90((uint64_t)&v157, a1))
    {
LABEL_3:
      uint64_t v12 = 0;
      goto LABEL_169;
    }
  }
  else
  {
    if (v158 == 2)
    {
      unint64_t v165 = 0;
      uint64_t v166 = 0;
      uint64_t v167 = 0;
      sub_24840A9A8((char *)&v165, v160, v161, 0xAAAAAAAAAAAAAAABLL * ((v161 - v160) >> 3));
      unint64_t v23 = v165;
      uint64_t v24 = v166;
      if (v165 == v166)
      {
        sub_24842B1BC(&v165, a1);
        unint64_t v23 = v165;
        uint64_t v24 = v166;
      }
      if (v23 == v24)
      {
        int v18 = 1;
        goto LABEL_154;
      }
      uint64_t v25 = 0;
      unint64_t v146 = a1;
      while (1)
      {
        int v26 = *(_DWORD *)(v23 + 24 * v25 + 12);
        if (v26 < 0) {
          break;
        }
        uint64_t v27 = v25;
        unint64_t v28 = (unint64_t)(a1[1] - *a1) >> 6;
        uint64_t v141 = v27;
        int v29 = *(_DWORD *)(v23 + 24 * v27 + 16);
        int v30 = v26 + v29 - 1;
        BOOL v33 = v26 >= (int)v28 || v30 < 0 || v30 >= (int)v28 || v30 < v26;
        int v18 = v33;
        if (v33) {
          goto LABEL_154;
        }
        int v34 = v29 + v26;
        unsigned int v145 = v34 - 1;
        if (v26 <= (v34 - 1))
        {
          int v35 = *(unsigned __int8 *)(v23 + 24 * v141 + 8);
          if (*(unsigned char *)(v23 + 24 * v141 + 9)) {
            int v36 = v34;
          }
          else {
            int v36 = (unint64_t)(a1[1] - *a1) >> 6;
          }
          int v143 = v36 - v26;
          int v144 = v35;
          while (1)
          {
            int v148 = v143 + v26;
            int v37 = (void *)(*a1 + ((uint64_t)v26 << 6));
            uint64_t v39 = v37 + 5;
            uint64_t v38 = v37[5];
            uint64_t v40 = (int *)(v37 + 7);
            double v41 = (int *)v37 + 15;
            uint64_t v147 = v37[7];
            uint64_t v149 = v26;
            if (v144)
            {
              unint64_t v42 = (unint64_t)(v38 + 1) >> 1;
              uint64_t v43 = v37;
              uint64_t v44 = v37[6];
              unint64_t v155 = v42;
              sub_2484017B8((uint64_t)v178, v42, v44);
              int v18 = v180;
              if (v180) {
                goto LABEL_150;
              }
              long long v173 = *(_OWORD *)v178;
              uint64_t v45 = *(void *)&v178[16];
              float v151 = v39;
              long long v46 = v179;
              uint64_t v47 = *v39;
              unint64_t v48 = v47 - v155;
              int v49 = *v40;
              int v50 = *v41;
              sub_2484017B8((uint64_t)&v174, v47 - v155, v44);
              int v18 = v177;
              if (v177)
              {
                uint64_t v122 = v46;
                if (!(void)v46) {
                  goto LABEL_150;
                }
                goto LABEL_149;
              }
              *(_OWORD *)int v178 = v174;
              uint64_t v51 = v176;
              *(void *)&v178[16] = v175;
              long long v179 = v176;
              *(void *)&long long v180 = v47 - v155;
              *((void *)&v180 + 1) = v44;
              LODWORD(v181) = v49 + 1;
              DWORD1(v181) = v50;
              if (v44)
              {
                uint64_t v52 = 0;
                uint64_t v53 = v43[2];
                uint64_t v54 = *(void *)&v178[16];
                uint64_t v55 = v46;
                uint64_t v56 = *v151;
                uint64_t v152 = v43[3];
                int v57 = (_DWORD *)(v152 + 12);
                do
                {
                  if (v47 != v155)
                  {
                    uint64_t v58 = 0;
                    uint64_t v59 = v57;
                    do
                    {
                      int v60 = *(v59 - 3);
                      int v61 = *(v59 - 2);
                      int v62 = v61 + v60;
                      if (v60 > v61) {
                        ++v62;
                      }
                      int v63 = v62 >> 1;
                      int v64 = v62 >> 1;
                      *(_DWORD *)(v55 + 4 * v58) = v62 >> 1;
                      uint64_t v65 = v58 + 1;
                      if (v58 + 1 >= v48)
                      {
                        int v68 = v63;
                        if (v56) {
                          int v68 = *(v59 - 1);
                        }
                      }
                      else
                      {
                        int v66 = *(v59 - 1);
                        if (v66 <= *v59) {
                          int v67 = *v59 + v66;
                        }
                        else {
                          int v67 = *v59 + v66 + 1;
                        }
                        int v68 = v67 >> 1;
                      }
                      if (v58) {
                        int v64 = *(v59 - 4);
                      }
                      uint64_t v69 = -3 * v68 - v63 + 4 * v64;
                      uint64_t v70 = (v69 - 6) / 12;
                      uint64_t v71 = v64 - (uint64_t)v63;
                      if ((v70 & 1) + v70 < 2 * v71) {
                        uint64_t v70 = 2 * v71 - 1;
                      }
                      uint64_t v72 = v63 - (uint64_t)v68;
                      if ((uint64_t)(v70 & 0xFFFFFFFFFFFFFFFELL) < 2 * v72) {
                        LODWORD(v70) = 2 * v72;
                      }
                      if (v63 > v68 || v64 > v63) {
                        LODWORD(v70) = 0;
                      }
                      if ((uint64_t)(((v69 + 6) / 12) & 0xFFFFFFFFFFFFFFFELL) <= 2 * v71) {
                        uint64_t v74 = (v69 + 6) / 12;
                      }
                      else {
                        uint64_t v74 = (2 * v71) | 1;
                      }
                      if ((v74 & 1) + v74 > 2 * v72) {
                        LODWORD(v74) = 2 * v72;
                      }
                      if (v63 < v68 || v64 < v63) {
                        LODWORD(v74) = v70;
                      }
                      *(_DWORD *)(v51 + 4 * v58) = v60 - v61 - v74;
                      v59 += 2;
                      ++v58;
                    }
                    while (v48 != v65);
                  }
                  if (v56) {
                    *(_DWORD *)(v46 + v45 * v52 + 4 * ((int)v155 - 1)) = *(_DWORD *)(v152
                  }
                                                                                     + v53 * v52
                                                                                     + 8 * ((int)v155 - 1));
                  ++v52;
                  v51 += v54;
                  v55 += v45;
                  int v57 = (_DWORD *)((char *)v57 + v53);
                }
                while (v52 != v44);
              }
              LODWORD(v76) = v147 + 1;
              HIDWORD(v76) = HIDWORD(v147);
              int v77 = v149;
              uint64_t v78 = *v146 + (v149 << 6);
              *(void *)(v78 + 40) = v155;
              *(void *)(v78 + 48) = v44;
              *(void *)(v78 + 56) = v76;
              *(_OWORD *)uint64_t v78 = v173;
              uint64_t v79 = *(void *)(v78 + 24);
              *(void *)(v78 + 16) = v45;
              *(void *)(v78 + 24) = v46;
              if (v79)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
                free(*(void **)(v79 - 32));
              }
              *(void *)(v78 + 32) = *((void *)&v46 + 1);
              a1 = v146;
              sub_24842BAB8(v146, (char *)(*v146 + ((uint64_t)v148 << 6)), (long long *)v178);
            }
            else
            {
              float v150 = v37;
              uint64_t v81 = v37[6];
              int v80 = v37 + 6;
              unint64_t v153 = (unint64_t)(v81 + 1) >> 1;
              sub_2484017B8((uint64_t)v178, v38, v153);
              int v18 = v180;
              if (v180) {
                goto LABEL_150;
              }
              long long v173 = *(_OWORD *)v178;
              uint64_t v156 = *(void *)&v178[16];
              long long v82 = v179;
              uint64_t v83 = *v39;
              uint64_t v84 = *v80;
              unint64_t v85 = *v80 - v153;
              int v86 = *v40;
              int v87 = *v41;
              sub_2484017B8((uint64_t)&v174, v83, *(_DWORD *)v80 - v153);
              int v18 = v177;
              if (v177)
              {
                uint64_t v122 = v82;
                if (!(void)v82)
                {
LABEL_150:
                  a1 = v146;
                  goto LABEL_154;
                }
LABEL_149:
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v122 - 24));
                free(*(void **)(v122 - 32));
                goto LABEL_150;
              }
              *(_OWORD *)int v178 = v174;
              uint64_t v88 = v176;
              *(void *)&v178[16] = v175;
              long long v179 = v176;
              *(void *)&long long v180 = v83;
              *((void *)&v180 + 1) = v85;
              LODWORD(v181) = v86;
              DWORD1(v181) = v87 + 1;
              unint64_t v142 = v150[2];
              if (v84 != v153)
              {
                uint64_t v89 = 0;
                uint64_t v90 = v82;
                uint64_t v91 = v150[3];
                uint64_t v92 = 2 * v142;
                uint64_t v154 = *(void *)&v178[16];
                uint64_t v93 = v91 + 12 * (v142 >> 2);
                uint64_t v94 = v91 + 8 * (v142 >> 2);
                uint64_t v95 = v91 - 4 * (v142 >> 2);
                uint64_t v96 = v91 + 4 * (v142 >> 2);
                do
                {
                  unint64_t v97 = v89 + 1;
                  if (v38)
                  {
                    for (uint64_t i = 0; i != v38; ++i)
                    {
                      int v99 = *(_DWORD *)(v91 + 4 * i);
                      int v100 = *(_DWORD *)(v96 + 4 * i);
                      int v101 = v100 + v99;
                      if (v99 > v100) {
                        ++v101;
                      }
                      int v102 = v101 >> 1;
                      int v103 = v102;
                      *(_DWORD *)(v90 + 4 * i) = v102;
                      if (v97 >= v85)
                      {
                        int v107 = v102;
                        if (*(unsigned char *)v80) {
                          int v107 = *(_DWORD *)(v94 + 4 * i);
                        }
                      }
                      else
                      {
                        int v104 = *(_DWORD *)(v94 + 4 * i);
                        int v105 = *(_DWORD *)(v93 + 4 * i);
                        if (v104 <= v105) {
                          int v106 = v105 + v104;
                        }
                        else {
                          int v106 = v105 + v104 + 1;
                        }
                        int v107 = v106 >> 1;
                      }
                      if (v89) {
                        int v103 = *(_DWORD *)(v95 + 4 * i);
                      }
                      uint64_t v108 = -3 * v107 - v102 + 4 * v103;
                      uint64_t v109 = v103 - (uint64_t)v102;
                      uint64_t v110 = 2 * v109 - 1;
                      if ((((v108 - 6) / 12) & 1) + (v108 - 6) / 12 >= 2 * v109) {
                        uint64_t v110 = (v108 - 6) / 12;
                      }
                      uint64_t v111 = v102 - (uint64_t)v107;
                      if ((uint64_t)(v110 & 0xFFFFFFFFFFFFFFFELL) < 2 * v111) {
                        LODWORD(v110) = 2 * v111;
                      }
                      if (v102 > v107 || v103 > v102) {
                        LODWORD(v110) = 0;
                      }
                      if ((uint64_t)(((v108 + 6) / 12) & 0xFFFFFFFFFFFFFFFELL) <= 2 * v109) {
                        uint64_t v113 = (v108 + 6) / 12;
                      }
                      else {
                        uint64_t v113 = (2 * v109) | 1;
                      }
                      if ((v113 & 1) + v113 > 2 * v111) {
                        LODWORD(v113) = 2 * v111;
                      }
                      if (v102 < v107 || v103 < v102) {
                        LODWORD(v113) = v110;
                      }
                      *(_DWORD *)(v88 + 4 * i) = v99 - v100 - v113;
                    }
                  }
                  v93 += v92;
                  v94 += v92;
                  v88 += v154;
                  v95 += v92;
                  v90 += v156;
                  v96 += v92;
                  v91 += v92;
                  ++v89;
                }
                while (v97 != v85);
              }
              if ((*(unsigned char *)v80 & 1) != 0 && v38)
              {
                double v115 = (int *)(v150[3] + 2 * v142 * (v153 - 1));
                double v116 = (_DWORD *)(v82 + v156 * (v153 - 1));
                uint64_t v117 = v38;
                do
                {
                  int v118 = *v115++;
                  *v116++ = v118;
                  --v117;
                }
                while (v117);
              }
              a1 = v146;
              int v77 = v149;
              uint64_t v119 = *v146 + (v149 << 6);
              *(void *)(v119 + 40) = v38;
              *(void *)(v119 + 48) = v153;
              *(void *)(v119 + 56) = v147 + 0x100000000;
              *(_OWORD *)uint64_t v119 = v173;
              uint64_t v120 = *(void *)(v119 + 24);
              *(void *)(v119 + 16) = v156;
              *(void *)(v119 + 24) = v82;
              if (v120)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v120 - 24));
                free(*(void **)(v120 - 32));
              }
              *(void *)(v119 + 32) = *((void *)&v82 + 1);
              sub_24842BAB8(v146, (char *)(*v146 + ((uint64_t)v148 << 6)), (long long *)v178);
            }
            uint64_t v121 = v179;
            *(void *)&long long v179 = 0;
            if (v121)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v121 - 24));
              free(*(void **)(v121 - 32));
            }
            int v26 = v77 + 1;
            if (v77 + 1 > v145)
            {
              unint64_t v23 = v165;
              uint64_t v24 = v166;
              break;
            }
          }
        }
        uint64_t v25 = v141 + 1;
        if (v141 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v23) >> 3))
        {
          int v18 = 0;
          goto LABEL_154;
        }
      }
      int v18 = 1;
LABEL_154:
      *(void *)int v178 = &v165;
      sub_2483FEA88((void ***)v178);
    }
    else if (v158 == 1)
    {
      int v16 = v164;
      int v17 = HIBYTE(v164);
      *(_OWORD *)&v178[8] = 0u;
      long long v179 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      LODWORD(v174) = v159;
      v178[0] = 0;
      uint64_t v188 = 0;
      LODWORD(v173) = HIDWORD(v159);
      if (!HIBYTE(v164)
        || *((int *)a1 + 16) < 8
        || (int v18 = sub_2484A4A50(a1, DWORD1(v158), DWORD1(v158) + HIDWORD(v158) - 1, (int *)&v174, &v173, v164 != 0, 1, (int *)&v163 + 1, a3, (uint64_t)v178)) == 0)
      {
        v178[0] = 1;
        int v18 = sub_2484A4A50(a1, DWORD1(v158), DWORD1(v158) + HIDWORD(v158) - 1, (int *)&v159, (_DWORD *)&v159 + 1, v16 != 0, v17 != 0, (int *)&v163 + 1, a3, (uint64_t)v178);
      }
      for (uint64_t j = 0; j != -72; j -= 24)
      {
        double v20 = *(void **)((char *)&v187 + j);
        if (v20)
        {
          *(void *)((char *)&v187 + j + 8) = v20;
          operator delete(v20);
        }
      }
      if (*((void *)&v182 + 1))
      {
        *(void *)&long long v183 = *((void *)&v182 + 1);
        operator delete(*((void **)&v182 + 1));
      }
      for (uint64_t k = 0; k != -72; k -= 24)
      {
        double v22 = *(void **)((char *)&v181 + k);
        if (v22)
        {
          *(void *)((char *)&v181 + k + 8) = v22;
          operator delete(v22);
        }
      }
    }
    else
    {
      if (v158 || sub_24842D168(a1, DWORD1(v158), DWORD1(v158) + 2) || !DWORD2(v158))
      {
        uint64_t v12 = 0;
        goto LABEL_169;
      }
      unsigned int v172 = DWORD2(v158) / 7;
      unsigned int v171 = DWORD2(v158) % 7;
      *(void *)&long long v173 = DWORD1(v158);
      unint64_t v13 = *a1 + ((unint64_t)DWORD1(v158) << 6);
      uint64_t v170 = *(void *)(v13 + 40);
      uint64_t v14 = *(unsigned int *)(v13 + 48);
      unsigned int v168 = (DWORD2(v158) % 7) & 1;
      unsigned int v169 = (DWORD2(v158) % 7) >> 1;
      *(void *)int v178 = a1;
      *(void *)&v178[8] = &v173;
      *(void *)&v178[16] = &v172;
      *(void *)&long long v179 = &v171;
      *((void *)&v179 + 1) = &v170;
      *(void *)&long long v180 = &v169;
      *((void *)&v180 + 1) = &v168;
      if (a4)
      {
        BOOL v15 = sub_2484ABDDC(a4, v14, (uint64_t)v178);
      }
      else
      {
        *(void *)&long long v174 = 0;
        *((void *)&v174 + 1) = &v174;
        BOOL v15 = sub_2484ABDDC((uint64_t)&v174, v14, (uint64_t)v178);
      }
      int v18 = v15;
    }
    if (v18) {
      goto LABEL_3;
    }
  }
  unint64_t v123 = a1[5];
  unint64_t v124 = a1[4];
  if (v124 >= v123)
  {
    uint64_t v128 = a1[3];
    unint64_t v129 = 0x8E38E38E38E38E39 * ((uint64_t)(v124 - v128) >> 3);
    if (v129 + 1 > 0x38E38E38E38E38ELL) {
      sub_2483E92E8();
    }
    unint64_t v130 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v128) >> 3);
    uint64_t v131 = 2 * v130;
    if (2 * v130 <= v129 + 1) {
      uint64_t v131 = v129 + 1;
    }
    if (v130 >= 0x1C71C71C71C71C7) {
      unint64_t v132 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v132 = v131;
    }
    *((void *)&v179 + 1) = a1 + 5;
    if (v132)
    {
      unint64_t v134 = (char *)sub_2483FE084(v132);
    }
    else
    {
      unint64_t v134 = 0;
      uint64_t v133 = 0;
    }
    uint64_t v135 = &v134[72 * v129];
    *(void *)int v178 = v134;
    *(void *)&v178[8] = v135;
    *(void *)&v178[16] = v135;
    *(void *)&long long v179 = &v134[72 * v133];
    *(void *)uint64_t v135 = &unk_26FC66970;
    long long v136 = v158;
    uint64_t v137 = v159;
    *((void *)v135 + 4) = 0;
    v135 += 32;
    *((void *)v135 - 1) = v137;
    *(_OWORD *)(v135 - 24) = v136;
    *((void *)v135 + 1) = 0;
    *((void *)v135 + 2) = 0;
    sub_24840A9A8(v135, v160, v161, 0xAAAAAAAAAAAAAAABLL * ((v161 - v160) >> 3));
    float v138 = &v134[72 * v129];
    uint64_t v139 = v163;
    *((_WORD *)v138 + 32) = v164;
    *((void *)v138 + 7) = v139;
    *(void *)&v178[16] += 72;
    sub_2483FE0D0(a1 + 3, v178);
    uint64_t v127 = a1[4];
    sub_2483FE19C((uint64_t)v178);
  }
  else
  {
    *(void *)unint64_t v124 = &unk_26FC66970;
    long long v125 = v158;
    *(void *)(v124 + 24) = v159;
    *(_OWORD *)(v124 + 8) = v125;
    *(void *)(v124 + 40) = 0;
    *(void *)(v124 + 48) = 0;
    *(void *)(v124 + 32) = 0;
    sub_24840A9A8((char *)(v124 + 32), v160, v161, 0xAAAAAAAAAAAAAAABLL * ((v161 - v160) >> 3));
    uint64_t v126 = v163;
    *(_WORD *)(v124 + 64) = v164;
    *(void *)(v124 + 56) = v126;
    uint64_t v127 = v124 + 72;
    a1[4] = v124 + 72;
  }
  a1[4] = v127;
  uint64_t v12 = 1;
LABEL_169:
  uint64_t v157 = &unk_26FC66970;
  *(void *)int v178 = &v160;
  sub_2483FEA88((void ***)v178);
  return v12;
}

void sub_2484777AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  a43 = (void **)&a37;
  sub_2483FEA88(&a43);
  a36 = a17;
  sub_2483FEA88(&a36);
  _Unwind_Resume(a1);
}

BOOL sub_2484778AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248479188, sub_24847795C, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24847795C((uint64_t)v6, i);
  return 0;
}

void sub_24847795C(uint64_t a1, unsigned int a2)
{
  uint64_t v321 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 8);
  int v3 = *v2;
  uint64_t v5 = sub_24840A1D8(*((void *)*v2 + 154) + 72 * a2 + 40, *((void *)*v2 + 60), *((void *)*v2 + 61));
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)v3 + 9);
  uint64_t v8 = v7 + 152 * v5;
  uint64_t v9 = *(void *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + 16) = v9;
  if (v5)
  {
    uint64_t v10 = v7 + 152 * v5;
    sub_2483FB040((char *)(v10 + 24), *(char **)(v7 + 24), *(void *)(v7 + 32), (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 2);
    long long v11 = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v10 + 64) = v11;
    *(void *)(v10 + 80) = *(void *)(v7 + 80);
    *(_OWORD *)(v10 + 88) = *(_OWORD *)(v7 + 88);
    sub_248467FE0((char *)(v10 + 104), *(char **)(v7 + 104), *(void *)(v7 + 112), (uint64_t)(*(void *)(v7 + 112) - *(void *)(v7 + 104)) >> 3);
  }
  uint64_t v12 = v7 + 152 * v6;
  uint64_t v13 = *(void *)(v7 + 128);
  *(void *)(v12 + 133) = *(void *)(v7 + 133);
  *(void *)(v12 + 128) = v13;
  *(unsigned char *)(v12 + 144) = *(unsigned char *)(v7 + 144);
  uint64_t v14 = (uint64x2_t *)(*((void *)v3 + 154) + 72 * a2);
  uint64_t v15 = (uint64_t)(v3 + 512);
  __int32 v289 = v14[2].i32[0];
  __int32 v287 = v14[2].i32[1];
  int v16 = *v2[1];
  int v17 = *v2[2];
  uint64_t v18 = sub_24840A1D8((uint64_t)&v14[2].i64[1], *((void *)v3 + 60), *((void *)v3 + 61));
  int v19 = (uint64_t *)*((void *)v3 + 6);
  uint64_t v20 = (uint64_t)&v19[11 * v18];
  uint64_t v267 = v18;
  uint64_t v268 = v3;
  long long v270 = (uint64_t *)v20;
  if (v18)
  {
    uint64_t v276 = v14[1].i64[1];
    uint64_t v278 = v14[1].i64[0];
    sub_24842A0C4((uint64_t)&v313, v278, v276, *((_DWORD *)v19 + 16), 0);
    if (v320) {
      goto LABEL_5;
    }
    uint64_t v274 = (float *)(v3 + 512);
    int v272 = v16;
    *(int64x2_t *)uint64_t v296 = v313;
    *(void *)&v296[16] = v314;
    int64x2_t v313 = 0uLL;
    *(_OWORD *)&v296[24] = v315;
    *(void *)&v296[40] = v316;
    uint64_t v314 = 0;
    long long v315 = 0uLL;
    uint64_t v316 = 0;
    *(_OWORD *)&v296[48] = v317;
    long long v297 = v318;
    char v298 = v319;
    sub_24842A35C(v20, (uint64_t)v296);
    *(void *)&v310[0] = &v296[24];
    sub_2483FDBFC((void ***)v310);
    *(void *)&v310[0] = v296;
    sub_2483FDCBC((void ***)v310);
    unint64_t v21 = v19[9];
    uint64_t v23 = *v19;
    uint64_t v22 = v19[1];
    unint64_t v24 = (v22 - *v19) >> 6;
    BOOL v280 = v19;
    if (v17)
    {
      __int32 v25 = v289;
      __int32 v26 = v287;
    }
    else
    {
      __int32 v25 = v289;
      __int32 v26 = v287;
      if (v21 < v24)
      {
        unint64_t v27 = *((void *)v3 + 62);
        unint64_t v28 = (unint64_t *)(v23 + (v21 << 6) + 48);
        while (1)
        {
          BOOL v29 = *(v28 - 1) > v27 || *v28 > v27;
          if (v29) {
            break;
          }
          v28 += 8;
          if (v24 == ++v21) {
            goto LABEL_61;
          }
        }
      }
    }
    if (v21 < v24)
    {
      do
      {
        uint64_t v30 = v23 + (v21 << 6);
        uint64_t v31 = *(void *)(v30 + 56);
        __int32 v32 = v31;
        if (SHIDWORD(v31) < (int)v31) {
          __int32 v32 = HIDWORD(v31);
        }
        if (v32 <= v26 && v32 >= v25)
        {
          v34.i64[0] = v31;
          v34.i64[1] = HIDWORD(v31);
          uint64x2_t v35 = (uint64x2_t)vnegq_s64(v34);
          int64x2_t v36 = (int64x2_t)vshlq_u64(*v14, v35);
          int64x2_t v37 = (int64x2_t)vshlq_u64(v14[1], v35);
          int8x16_t v38 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v37, v36), *(uint64x2_t *)(v30 + 40)), (int8x16_t)vqsubq_u64(*(uint64x2_t *)(v30 + 40), (uint64x2_t)v36), (int8x16_t)v37);
          uint64_t v39 = v38.i64[0];
          int8x16_t v283 = v38;
          int64x2_t v285 = v36;
          uint64_t v40 = v38.i64[1];
          if (v38.i64[0] && v38.i64[1] != 0)
          {
            uint64_t v42 = *((void *)v3 + 147) + 24 * v267;
            uint64_t v44 = (_DWORD **)(v42 + 8);
            uint64_t v43 = *(_DWORD **)(v42 + 8);
            unint64_t v45 = *(void *)(v42 + 16);
            if ((unint64_t)v43 >= v45)
            {
              uint64_t v47 = *(_DWORD **)v42;
              uint64_t v48 = ((uint64_t)v43 - *(void *)v42) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                sub_2483E92E8();
              }
              uint64_t v50 = v45 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              BOOL v51 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v51) {
                unint64_t v52 = v49;
              }
              if (v52)
              {
                unint64_t v52 = (unint64_t)sub_2483E9300(v52);
                uint64_t v43 = *v44;
                uint64_t v47 = *(_DWORD **)v42;
              }
              else
              {
                uint64_t v53 = 0;
              }
              uint64_t v54 = (_DWORD *)(v52 + 4 * v48);
              *uint64_t v54 = v21;
              long long v46 = v54 + 1;
              while (v43 != v47)
              {
                int v55 = *--v43;
                *--uint64_t v54 = v55;
              }
              *(void *)uint64_t v42 = v54;
              *uint64_t v44 = v46;
              *(void *)(v42 + 16) = v52 + 4 * v53;
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *uint64_t v43 = v21;
              long long v46 = v43 + 1;
            }
            *uint64_t v44 = v46;
            sub_2484017B8((uint64_t)v296, v39, v40);
            if (*(_DWORD *)&v296[40]) {
              goto LABEL_5;
            }
            v310[0] = *(_OWORD *)v296;
            uint64_t v56 = *(void *)&v296[16];
            uint64_t v57 = *(void *)&v296[24];
            uint64_t v282 = *(void *)&v296[32];
            uint64_t v58 = *(void *)(v30 + 56);
            size_t v59 = 4 * v39;
            uint64_t v60 = v285.i64[1];
            int v61 = *(char **)&v296[24];
            do
            {
              memcpy(v61, (const void *)(*(void *)(v30 + 24) + *(void *)(v30 + 16) * v60++ + 4 * v285.i64[0]), v59);
              v61 += v56;
              --v40;
            }
            while (v40);
            unint64_t v62 = v270[1];
            unint64_t v63 = v270[2];
            if (v62 >= v63)
            {
              uint64_t v65 = (uint64_t)(v62 - *v270) >> 6;
              unint64_t v66 = v65 + 1;
              int v3 = v268;
              int v19 = v280;
              if ((unint64_t)(v65 + 1) >> 58) {
                sub_2483E92E8();
              }
              uint64_t v67 = v63 - *v270;
              if (v67 >> 5 > v66) {
                unint64_t v66 = v67 >> 5;
              }
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v68 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v66;
              }
              *(void *)&v296[32] = v270 + 2;
              uint64_t v69 = (char *)sub_24840BC28(v68);
              uint64_t v70 = &v69[64 * v65];
              *(void *)uint64_t v296 = v69;
              *(void *)&v296[8] = v70;
              *(void *)&v296[24] = &v69[64 * v71];
              *(_OWORD *)uint64_t v70 = v310[0];
              *((void *)v70 + 2) = v56;
              *((void *)v70 + 3) = v57;
              *((void *)v70 + 4) = v282;
              *(int8x16_t *)(v70 + 40) = v283;
              *((void *)v70 + 7) = v58;
              *(void *)&v296[16] = v70 + 64;
              uint64_t v72 = *v270;
              uint64_t v73 = v270[1];
              uint64_t v74 = *(void *)&v296[8];
              if (v73 == *v270)
              {
                uint64_t v75 = *(void *)&v296[8];
                __int32 v25 = v289;
              }
              else
              {
                __int32 v25 = v289;
                do
                {
                  uint64_t v75 = v74 - 64;
                  long long v76 = *(_OWORD *)(v73 - 64);
                  *(void *)(v74 - 48) = *(void *)(v73 - 48);
                  *(_OWORD *)(v74 - 64) = v76;
                  uint64_t v77 = *(void *)(v73 - 40);
                  *(void *)(v73 - 40) = 0;
                  *(void *)(v74 - 40) = v77;
                  *(void *)(v74 - 32) = *(void *)(v73 - 32);
                  long long v78 = *(_OWORD *)(v73 - 24);
                  *(void *)(v74 - 8) = *(void *)(v73 - 8);
                  *(_OWORD *)(v74 - 24) = v78;
                  v74 -= 64;
                  v73 -= 64;
                }
                while (v73 != v72);
              }
              *(void *)&v296[8] = v75;
              uint64_t v79 = *v270;
              *long long v270 = v75;
              *(void *)&v296[8] = v79;
              uint64_t v80 = v270[1];
              v270[1] = *(void *)&v296[16];
              *(void *)&v296[16] = v80;
              uint64_t v81 = v270[2];
              v270[2] = *(void *)&v296[24];
              *(void *)&v296[24] = v81;
              *(void *)uint64_t v296 = *(void *)&v296[8];
              uint64_t v64 = v270[1];
              sub_24840BC60((uint64_t)v296);
            }
            else
            {
              *(_OWORD *)unint64_t v62 = v310[0];
              *(void *)(v62 + 16) = v56;
              *(void *)(v62 + 24) = v57;
              int v19 = v280;
              *(void *)(v62 + 32) = v282;
              *(int8x16_t *)(v62 + 40) = v283;
              *(void *)(v62 + 56) = v58;
              uint64_t v64 = v62 + 64;
              v270[1] = v62 + 64;
              int v3 = v268;
              __int32 v25 = v289;
            }
            __int32 v26 = v287;
            v270[1] = v64;
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
        }
      }
      while (++v21 < (v22 - v23) >> 6);
    }
LABEL_61:
    long long v82 = v270;
    uint64_t v83 = v270[1];
    if (*v270 == v83)
    {
LABEL_5:
      sub_24840A478((uint64_t)&v313);
      return;
    }
    if (*v274 == 0.0)
    {
      if (*((_DWORD *)v3 + 221))
      {
        if (*((int *)v3 + 140) <= 5)
        {
          uint64_t v84 = &v19[11 * v267];
          uint64_t v86 = v84[9];
          unint64_t v85 = v84 + 9;
          if ((unint64_t)(((v83 - *v270) >> 6) - v86) >= 2)
          {
            sub_24842BFC8((int64x2_t *)v296, 1);
            *(_DWORD *)&v296[12] = *v85;
            int v87 = *((_DWORD *)v3 + 221);
            int v88 = v87 >= 0 ? *((_DWORD *)v3 + 221) : -v87;
            *(_DWORD *)&v296[20] = ((unint64_t)(v270[1] - *v270) >> 6) - *(_DWORD *)&v296[12];
            *(_DWORD *)&v296[24] = v88;
            LOBYTE(v297) = v87 >= 0;
            *(void *)&v310[0] = &unk_26FC66948;
            memset((char *)v310 + 12, 0, 44);
            signed int v292 = &unk_26FC65A00;
            long long v293 = xmmword_2484DC960;
            *(void *)&long long v294 = 0;
            sub_248429138(v310, (uint64_t)&v292);
            sub_24847691C(v270, (uint64_t)v296, *((_DWORD *)v3 + 140), (uint64_t)v310, 0, 0, v89, v90, v91, v92, v93, v94, v95, v96);
            *(void *)uint64_t v296 = &unk_26FC66970;
            *(void *)&v310[0] = &v296[32];
            sub_2483FEA88((void ***)v310);
            if ((unint64_t)(((v270[1] - *v270) >> 6) - *(void *)v85) >= 4)
            {
              sub_24842BFC8((int64x2_t *)v296, 1);
              *(_DWORD *)&v296[12] = *v85;
              int v97 = *((_DWORD *)v3 + 221);
              if (v97 >= 0) {
                int v98 = *((_DWORD *)v3 + 221);
              }
              else {
                int v98 = -v97;
              }
              *(_DWORD *)&v296[20] = ((unint64_t)(v270[1] - *v270) >> 6) + ~*(_DWORD *)&v296[12];
              *(_DWORD *)&v296[24] = v98;
              LOBYTE(v297) = v97 >= 0;
              BYTE1(v297) = v3[888];
              if (BYTE1(v297)) {
                *(_DWORD *)&v296[60] = 6;
              }
              *(void *)&v310[0] = &unk_26FC66948;
              memset((char *)v310 + 12, 0, 44);
              signed int v292 = &unk_26FC65A00;
              long long v293 = xmmword_2484DC960;
              *(void *)&long long v294 = 0;
              sub_248429138(v310, (uint64_t)&v292);
              sub_24847691C(v270, (uint64_t)v296, *((_DWORD *)v3 + 140), (uint64_t)v310, 0, 0, v99, v100, v101, v102, v103, v104, v105, v106);
              *(void *)uint64_t v296 = &unk_26FC66970;
              *(void *)&v310[0] = &v296[32];
              sub_2483FEA88((void ***)v310);
            }
          }
        }
      }
    }
    if (*((float *)v3 + 220) > 0.0)
    {
      BOOL v107 = *((float *)v3 + 128) == 0.0 && v3[888] == 0;
      BOOL v108 = v107 && *((_DWORD *)v3 + 140) <= 5;
      if (v108 && (!*((_DWORD *)v3 + 216) || !*((void *)v3 + 71)))
      {
        uint64_t v109 = (v270[1] - *v270) >> 6;
        uint64_t v110 = &v280[11 * v267];
        uint64_t v112 = v110[9];
        uint64_t v111 = v110 + 9;
        uint64_t v113 = v109 - v112;
        if (v109 != v112)
        {
          uint64_t v114 = 0;
          do
          {
            double v115 = (void *)(*v82 + ((*v111 + v114) << 6));
            uint64_t v116 = v115[6];
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v119 = v115[2];
              int v118 = (int *)v115[3];
              int v120 = 0x7FFFFFFF;
              signed int v121 = 0x80000000;
              uint64_t v122 = v115[5];
              do
              {
                unint64_t v123 = v118;
                for (uint64_t i = v122; i; --i)
                {
                  int v126 = *v123++;
                  signed int v125 = v126;
                  if (v126 < v120) {
                    int v120 = v125;
                  }
                  if (v125 > v121) {
                    signed int v121 = v125;
                  }
                }
                ++v117;
                int v118 = (int *)((char *)v118 + v119);
              }
              while (v117 != v116);
            }
            else
            {
              signed int v121 = 0x80000000;
              int v120 = 0x7FFFFFFF;
            }
            sub_24842BFC8((int64x2_t *)v296, 1);
            uint64_t v127 = v121 - (uint64_t)v120 + 1;
            int v3 = v268;
            double v128 = *((float *)v268 + 220) / 100.0;
            *(_DWORD *)&v296[12] = *(_DWORD *)v111 + v114;
            *(_DWORD *)&v296[20] = 1;
            int v129 = (int)(v128 * (double)v127);
            if (v129 >= (int)((double)(unint64_t)(v276 * v278) * 0.8)) {
              int v129 = (int)((double)(unint64_t)(v276 * v278) * 0.8);
            }
            *(_DWORD *)&v296[24] = v129;
            *(void *)&v310[0] = &unk_26FC66948;
            memset((char *)v310 + 12, 0, 44);
            signed int v292 = &unk_26FC65A00;
            long long v293 = xmmword_2484DC960;
            *(void *)&long long v294 = 0;
            sub_248429138(v310, (uint64_t)&v292);
            long long v82 = v270;
            sub_24847691C(v270, (uint64_t)v296, *((_DWORD *)v268 + 140), (uint64_t)v310, 0, 0, v130, v131, v132, v133, v134, v135, v136, v137);
            *(void *)uint64_t v296 = &unk_26FC66970;
            *(void *)&v310[0] = &v296[32];
            sub_2483FEA88((void ***)v310);
            ++v114;
          }
          while (v114 != v113);
        }
      }
    }
    sub_24840A478((uint64_t)&v313);
    int v19 = v280;
    int v16 = v272;
    uint64_t v15 = (uint64_t)v274;
  }
  if (*((_DWORD *)v3 + 144) != 1
    || !v268[580]
    || !sub_248456844(v15)
    || (*((_DWORD *)v268 + 217) & 0x80000000) == 0)
  {
    goto LABEL_129;
  }
  float v138 = &v19[11 * v267];
  uint64_t v140 = v138[9];
  uint64_t v139 = v138 + 9;
  BOOL v141 = (unint64_t)(((v270[1] - *v270) >> 6) - v140) >= 3 && *((_DWORD *)v268 + 216) == 0;
  BOOL v142 = !v141 || v16 == 0;
  if (v142 || *((int *)v268 + 140) > 5) {
    goto LABEL_129;
  }
  sub_24842BFC8(&v313, 0);
  v313.i32[3] = *v139;
  unsigned int v143 = *((_DWORD *)v268 + 140) + 1;
  if (v143 > 6) {
    uint64_t v144 = 0;
  }
  else {
    uint64_t v144 = qword_2485505A0[v143];
  }
  uint64_t v145 = 0;
  int v146 = 0;
  uint64_t v147 = &v19[11 * v267 + 4];
  float v148 = 3.4028e38;
  while (1)
  {
    if (v144 == v145)
    {
LABEL_127:
      LODWORD(v314) = v146;
      *(void *)uint64_t v296 = &unk_26FC66948;
      memset(&v296[12], 0, 44);
      *(_OWORD *)((char *)v310 + 8) = xmmword_2484DC960;
      *(void *)&v310[0] = &unk_26FC65A00;
      *((void *)&v310[1] + 1) = 0;
      sub_248429138(v296, (uint64_t)v310);
      sub_248476AE4(v270, (uint64_t)&v313, (uint64_t)v296, 0, 0);
      char v163 = 1;
      goto LABEL_128;
    }
    int v149 = dword_24855050C[v145];
    LODWORD(v314) = v149;
    *(void *)uint64_t v296 = &unk_26FC66948;
    memset(&v296[12], 0, 44);
    *(_OWORD *)((char *)v310 + 8) = xmmword_2484DC960;
    *(void *)&v310[0] = &unk_26FC65A00;
    *((void *)&v310[1] + 1) = 0;
    sub_248429138(v296, (uint64_t)v310);
    if (sub_248476AE4(v270, (uint64_t)&v313, (uint64_t)v296, 0, 0)) {
      break;
    }
LABEL_126:
    if (++v145 == 19) {
      goto LABEL_127;
    }
  }
  float v158 = sub_2484791B0((void *)*v270, (void *)v270[1], v150, v151, v152, v153, v154, v155, v156, v157);
  if (v158 < v148)
  {
    float v148 = v158;
    int v146 = v149;
  }
  uint64_t v159 = *v147;
  *(void *)uint64_t v296 = &unk_26FC66970;
  long long v160 = *(_OWORD *)(v159 - 64);
  *(void *)&v296[24] = *(void *)(v159 - 48);
  *(_OWORD *)&v296[8] = v160;
  memset(&v296[32], 0, 24);
  sub_24840A9A8(&v296[32], *(void *)(v159 - 40), *(void *)(v159 - 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v159 - 32) - *(void *)(v159 - 40)) >> 3));
  uint64_t v161 = *(void *)(v159 - 16);
  LOWORD(v297) = *(_WORD *)(v159 - 8);
  *(void *)&v296[56] = v161;
  *(void *)&v310[0] = &unk_26FC66948;
  memset((char *)v310 + 12, 0, 44);
  signed int v292 = &unk_26FC65A00;
  long long v293 = xmmword_2484DC960;
  *(void *)&long long v294 = 0;
  sub_248429138(v310, (uint64_t)&v292);
  if (!sub_24842C084((uint64_t)v296, (uint64_t)v270, (uint64_t)v310, 0))
  {
    uint64_t v162 = (void (***)(void))(*v147 - 72);
    (**v162)(v162);
    uint64_t *v147 = (uint64_t)v162;
    *(void *)uint64_t v296 = &unk_26FC66970;
    *(void *)&v310[0] = &v296[32];
    sub_2483FEA88((void ***)v310);
    goto LABEL_126;
  }
  *(void *)uint64_t v296 = &unk_26FC66970;
  *(void *)&v310[0] = &v296[32];
  sub_2483FEA88((void ***)v310);
  char v163 = 0;
LABEL_128:
  v313.i64[0] = (uint64_t)&unk_26FC66970;
  *(void *)uint64_t v296 = (char *)&v315 + 8;
  sub_2483FEA88((void ***)v296);
  if ((v163 & 1) == 0) {
    return;
  }
LABEL_129:
  __int16 v164 = v268;
  int v165 = *((_DWORD *)v268 + 140);
  if (v165 >= 2)
  {
    if (v165 != 2) {
      return;
    }
    uint64_t v269 = 2;
    __int16 v164 = v268;
  }
  else
  {
    uint64_t v269 = 5;
  }
  uint64_t v166 = *((void *)v164 + 9);
  unsigned int v167 = *(_DWORD *)(v166 + 152 * v267 + 64);
  BOOL v29 = v167 > 0xF;
  int v168 = (1 << v167) & 0xC040;
  if (!v29 && v168 != 0)
  {
    uint64_t v170 = 0;
    *(_DWORD *)(v166 + 152 * v267 + 68) = 0;
    float v171 = 3.4028e38;
    long long v172 = 0uLL;
    do
    {
      for (uint64_t j = 0; j != 1360; j += 40)
      {
        long long v174 = &v313.i8[j];
        *((_DWORD *)v174 + 8) = 0;
        *(_OWORD *)long long v174 = v172;
        *((_OWORD *)v174 + 1) = v172;
      }
      *(void *)&v310[0] = &unk_26FC66948;
      *(_OWORD *)((char *)v310 + 12) = v172;
      *(_OWORD *)((char *)&v310[1] + 12) = v172;
      *(_OWORD *)((char *)&v310[2] + 8) = v172;
      *(void *)uint64_t v296 = &unk_26FC65A00;
      *(_OWORD *)&v296[8] = xmmword_2484DC960;
      *(void *)&v296[24] = 0;
      sub_248429138(v310, (uint64_t)v296);
      if (v170 > 3)
      {
        unsigned int v185 = 4;
        int v181 = 5;
        int v179 = 10;
        int v176 = 12;
        int v177 = 12;
        int v178 = 12;
        int v180 = 10;
        int v182 = 5;
        int v183 = 5;
        int v184 = 12;
      }
      else
      {
        uint64_t v175 = (int)v170;
        int v176 = dword_2484DD0F0[v175];
        int v177 = dword_2484DD100[v175];
        int v178 = dword_2484DD110[v175];
        int v179 = dword_2484DD120[v175];
        int v180 = dword_2484DD130[v175];
        int v181 = dword_248550BB8[v175];
        int v182 = dword_2484DD140[v175];
        int v183 = dword_2484DD150[v175];
        int v184 = dword_2484DD160[v175];
        unsigned int v185 = dword_2484DD170[v175];
      }
      HIDWORD(v310[2]) = v176;
      *(void *)&v310[3] = __PAIR64__(v178, v177);
      HIDWORD(v310[0]) = v179;
      *(void *)&v310[1] = __PAIR64__(v181, v180);
      *((void *)&v310[1] + 1) = __PAIR64__(v183, v182);
      LODWORD(v310[2]) = v184;
      *(void *)((char *)&v310[2] + 4) = v185 | 0xD00000000;
      long long v186 = (void *)*v270;
      int64x2_t v273 = (void *)v270[1];
      uint64_t v271 = v170;
      unint64_t v187 = 0;
      float v188 = 0.0;
      if ((void *)*v270 == v273) {
        goto LABEL_249;
      }
      do
      {
        unint64_t v189 = v186[2];
        signed int v292 = &unk_26FC66948;
        long long v294 = *(_OWORD *)((char *)&v310[1] + 8);
        long long v295 = *(_OWORD *)((char *)&v310[2] + 8);
        long long v293 = *(_OWORD *)((char *)v310 + 8);
        sub_248428438((uint64_t)v296, (uint64_t)&v292, v186[5]);
        sub_2483F23D8(__p, 1uLL);
        unint64_t v198 = v186[6];
        unint64_t v288 = v186;
        if (!v198) {
          goto LABEL_238;
        }
        unint64_t v199 = 0;
        uint64_t v275 = -(uint64_t)(v189 >> 2);
        unint64_t v200 = v186[5];
        do
        {
          if (!v200) {
            goto LABEL_237;
          }
          unint64_t v201 = 0;
          unint64_t v202 = v288[3] + v288[2] * v199;
          uint64_t v203 = (int *)(v202 + 4 * v275);
          unint64_t v281 = v203 - 1;
          uint64_t v277 = &v203[v275];
          uint64_t v279 = v203 + 1;
          unint64_t v286 = v199;
          unint64_t v284 = v203;
          do
          {
            unint64_t v290 = v187;
            if (v201)
            {
              uint64_t v204 = *(int *)(v202 + 4 * v201 - 4);
              if (!v199) {
                goto LABEL_159;
              }
              uint64_t v205 = v281[v201];
            }
            else
            {
              if (!v199)
              {
                uint64_t v204 = 0;
LABEL_159:
                unint64_t v207 = v201 + 1;
                uint64_t v208 = v204;
                uint64_t v206 = v204;
                uint64_t v205 = v204;
                uint64_t v209 = v204;
                goto LABEL_160;
              }
              uint64_t v204 = *v203;
              uint64_t v205 = v204;
            }
            uint64_t v206 = v203[v201];
            unint64_t v207 = v201 + 1;
            uint64_t v208 = v206;
            if (v201 + 1 < v200) {
              uint64_t v208 = v279[v201];
            }
            if (v199 < 2) {
              uint64_t v209 = v206;
            }
            else {
              uint64_t v209 = v277[v201];
            }
LABEL_160:
            uint64_t v210 = 0;
            uint64_t v211 = (uint64_t)(v199 << 63) >> 63;
            unint64_t v212 = v200 + 2;
            uint64_t v213 = v211 & (v200 + 2);
            unint64_t v214 = v213 + v201;
            if (v200 - 1 <= v201) {
              unint64_t v215 = v213 + v201;
            }
            else {
              unint64_t v215 = v214 + 1;
            }
            uint64_t v216 = v214 - 1;
            if (!v201) {
              uint64_t v216 = v213;
            }
            for (uint64_t k = 40; k != 136; k += 24)
            {
              unint64_t v218 = (*(_DWORD *)(*(void *)&v296[k] + 4 * v215)
                                  + *(_DWORD *)(*(void *)&v296[k] + 4 * v214)
                                  + *(_DWORD *)(*(void *)&v296[k] + 4 * v216));
              int v219 = __clz(v218 + 1) ^ 0x3F;
              if (v219 <= 5) {
                LOBYTE(v219) = 5;
              }
              v311.i32[v210] = ((*(_DWORD *)&v309[4 * (v218 >> (v219 - 5)) + 16]
                                             * *(_DWORD *)&v309[v210 * 4]) >> (v219 - 5))
                             + 4;
              ++v210;
            }
            if (v201)
            {
              if (v199) {
                unint64_t v220 = 0;
              }
              else {
                unint64_t v220 = v212;
              }
              uint64_t v221 = *((int *)v300 + v201 + v220 - 1);
            }
            else
            {
              uint64_t v221 = 0;
            }
            uint64_t v222 = 0;
            uint64_t v223 = 8 * v206;
            uint64_t v224 = 8 * v204;
            uint64_t v225 = 8 * v208;
            uint64_t v226 = *((int *)v300 + v214);
            uint64_t v227 = *((int *)v300 + v216);
            uint64_t v228 = v221 + v226;
            uint64_t v229 = *((int *)v300 + v215);
            if (v226 >= 0) {
              unint64_t v230 = v226;
            }
            else {
              unint64_t v230 = -v226;
            }
            if (v221 >= 0) {
              unint64_t v231 = v221;
            }
            else {
              unint64_t v231 = -v221;
            }
            if (v230 <= v231) {
              uint64_t v232 = v221;
            }
            else {
              uint64_t v232 = v226;
            }
            if (v227 >= 0) {
              unint64_t v233 = v227;
            }
            else {
              unint64_t v233 = -v227;
            }
            if (v232 >= 0) {
              unint64_t v234 = v232;
            }
            else {
              unint64_t v234 = -v232;
            }
            if (v233 > v234) {
              uint64_t v232 = v227;
            }
            if (v229 >= 0) {
              unint64_t v235 = v229;
            }
            else {
              unint64_t v235 = -v229;
            }
            if (v232 >= 0) {
              unint64_t v236 = v232;
            }
            else {
              unint64_t v236 = -v232;
            }
            if (v235 > v236) {
              LODWORD(v232) = v229;
            }
            *(_DWORD *)__p[0] = v232;
            *(void *)uint64_t v296 = v225 - v223 + v224;
            *(void *)&v296[8] = v223 - (((v228 + v229) * v302) >> 5);
            *(void *)&v296[16] = v224 - (((v228 + v227) * v303) >> 5);
            *(void *)&v296[24] = v223
                                 - ((v304 * (uint64_t)(int)v227
                                   + v305 * (uint64_t)(int)v226
                                   + v306 * (uint64_t)(int)v229
                                   + 8 * ((v209 - v206) * v307 + (v205 - v204) * v308)) >> 5);
            int32x4_t v312 = (int32x4_t)vshlq_u32(v311, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v311)) ^ 0x1F) - 4)));
            unsigned int v237 = vaddvq_s32(v312);
            uint64_t v238 = (v237 >> 1) - 1;
            do
            {
              v238 += *(void *)&v296[8 * v222] * v312.u32[v222];
              ++v222;
            }
            while (v222 != 4);
            uint64_t v239 = 0;
            uint64_t v240 = 0;
            uint64_t v241 = (v238 * *(unsigned int *)&v309[4 * v237 + 12]) >> 24;
            uint64_t v242 = v227 ^ v226 | v221 ^ v226;
            if (v225 <= v223) {
              uint64_t v243 = v223;
            }
            else {
              uint64_t v243 = v225;
            }
            if (v224 > v243) {
              uint64_t v243 = v224;
            }
            if (v223 < v225) {
              uint64_t v225 = v223;
            }
            if (v225 >= v224) {
              uint64_t v225 = v224;
            }
            if (v241 >= v243) {
              uint64_t v244 = v243;
            }
            else {
              uint64_t v244 = v241;
            }
            if (v225 <= v244) {
              uint64_t v225 = v244;
            }
            if (v242 <= 0) {
              uint64_t v241 = v225;
            }
            *(void *)&v296[32] = v241;
            do
            {
              if (*(_DWORD *)((char *)&xmmword_248550AE4 + v239) >= (int)v232) {
                ++v240;
              }
              v239 += 4;
            }
            while (v239 != 132);
            int v245 = *(_DWORD *)(v202 + 4 * v201) - ((unint64_t)(v241 + 3) >> 3);
            unsigned int v246 = (2 * v245) ^ (v245 >> 31);
            unsigned int v247 = __clz(v246);
            unsigned int v248 = 29 - v247;
            unsigned int v249 = (((-1 << (v247 ^ 0x1F)) + v246) >> (29 - v247)) - 4 * v247 + 124;
            if (v246 >= 0x10) {
              unint64_t v250 = v249;
            }
            else {
              unint64_t v250 = v246;
            }
            if (v246 >= 0x10) {
              unsigned int v251 = v248;
            }
            else {
              unsigned int v251 = 0;
            }
            unint64_t v252 = v202;
            sub_248448D6C((uint64_t)&v313.i64[5 * v240], v250);
            uint64_t v253 = 0;
            unint64_t v202 = v252;
            unint64_t v200 = v288[5];
            unint64_t v199 = v286;
            if (v286) {
              unint64_t v254 = 0;
            }
            else {
              unint64_t v254 = v200 + 2;
            }
            uint64_t v255 = 8 * *(int *)(v252 + 4 * v201);
            unint64_t v256 = v254 + v201;
            *((_DWORD *)v300 + v256) = *(_DWORD *)&v296[32] - v255;
            long long v257 = (uint64_t *)&v296[40];
            do
            {
              uint64_t v258 = *(void *)&v296[v253] - v255;
              if (v258 < 0) {
                uint64_t v258 = v255 - *(void *)&v296[v253];
              }
              unint64_t v259 = (unint64_t)(v258 + 3) >> 3;
              uint64_t v260 = *v257;
              v257 += 3;
              *(_DWORD *)(v260 + 4 * v256) = v259;
              *(_DWORD *)(v260 + 4 * (v201 + (v211 & (v200 + 2)) + 1)) += v259;
              v253 += 8;
            }
            while (v253 != 32);
            unint64_t v187 = v290 + v251;
            unint64_t v201 = v207;
            uint64_t v203 = v284;
          }
          while (v207 < v200);
          unint64_t v198 = v288[6];
LABEL_237:
          ++v199;
        }
        while (v199 < v198);
LABEL_238:
        for (uint64_t m = 0; m != 170; m += 5)
        {
          unint64_t v262 = &v313.i64[m];
          sub_248450898((uint64_t)&v313.i64[m], v190, v191, v192, v193, v194, v195, v196, v197);
          float v190 = *(float *)((char *)&v315 + m * 8 + 8);
          float v188 = v188 + v190;
          v262[1] = *v262;
          v262[3] = 0;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v300)
        {
          unint64_t v301 = v300;
          operator delete(v300);
        }
        for (uint64_t n = 0; n != -96; n -= 24)
        {
          unint64_t v264 = *(void **)&v299[n];
          if (v264)
          {
            *(void *)&v299[n + 8] = v264;
            operator delete(v264);
          }
        }
        long long v186 = v288 + 8;
      }
      while (v288 + 8 != v273);
LABEL_249:
      uint64_t v265 = 170;
      do
      {
        uint64_t v266 = *(void **)((char *)&v310[3] + v265 * 8 + 8);
        if (v266)
        {
          v311.i64[v265] = (uint64_t)v266;
          operator delete(v266);
        }
        v265 -= 5;
      }
      while (v265 * 8);
      if ((float)(v188 + (float)v187) < v171)
      {
        *(_DWORD *)(*((void *)v268 + 9) + 152 * v267 + 68) = v271;
        float v171 = v188 + (float)v187;
      }
      uint64_t v170 = v271 + 1;
      long long v172 = 0uLL;
    }
    while (v271 + 1 != v269);
  }
}

void sub_248478FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  STACK[0x310] = (unint64_t)&a51;
  sub_2483FEA88((void ***)&STACK[0x310]);
  sub_24840A478((uint64_t)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_248479188(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

float sub_2484791B0(void *a1, void *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  uint64_t v47 = *MEMORY[0x263EF8340];
  long long v12 = 0uLL;
  do
  {
    uint64_t v13 = &v46[v11];
    *((_DWORD *)v13 + 8) = 0;
    *(_OWORD *)uint64_t v13 = 0uLL;
    *((_OWORD *)v13 + 1) = 0uLL;
    v11 += 40;
  }
  while (v11 != 720);
  if (a1 == a2)
  {
    unint64_t v14 = 0;
    float v15 = 0.0;
  }
  else
  {
    unint64_t v14 = 0;
    float v15 = 0.0;
    do
    {
      unint64_t v16 = v10[6];
      if (v16)
      {
        unint64_t v17 = 0;
        uint64_t v45 = -(v10[2] >> 2);
        unint64_t v18 = v10[5];
        do
        {
          if (v18)
          {
            unint64_t v19 = 0;
            uint64_t v20 = v10[3] + v10[2] * v17;
            unint64_t v21 = (int *)(v20 + 4 * v45);
            do
            {
              if (v19)
              {
                int v22 = *(_DWORD *)(v20 + 4 * v19 - 4);
                uint64_t v23 = v22;
                if (v17)
                {
                  uint64_t v24 = v21[v19];
                  uint64_t v25 = v21[v19 - 1];
                }
                else
                {
                  uint64_t v24 = v22;
                  uint64_t v25 = v22;
                }
              }
              else if (v17)
              {
                int v22 = *v21;
                uint64_t v24 = *v21;
                uint64_t v23 = v24;
                uint64_t v25 = v24;
              }
              else
              {
                uint64_t v24 = 0;
                int v22 = 0;
                uint64_t v23 = 0;
                uint64_t v25 = 0;
              }
              uint64_t v26 = 0;
              uint64_t v27 = 0;
              if (v23 <= v24) {
                uint64_t v28 = v24;
              }
              else {
                uint64_t v28 = v23;
              }
              if (v28 <= v25) {
                uint64_t v28 = v25;
              }
              if (v24 < v23) {
                uint64_t v23 = v24;
              }
              if (v25 < v23) {
                uint64_t v23 = v25;
              }
              unint64_t v29 = v28 - v23;
              do
              {
                if (v29 < dword_248550558[v26]) {
                  ++v27;
                }
                ++v26;
              }
              while (v26 != 17);
              if (v22 >= (int)v24) {
                int v30 = v24;
              }
              else {
                int v30 = v22;
              }
              if (v22 <= (int)v24) {
                int v31 = v24;
              }
              else {
                int v31 = v22;
              }
              int v32 = v22 + v24 - v25;
              if (v30 > (int)v25) {
                int v32 = v31;
              }
              if (v31 < (int)v25) {
                int v32 = v30;
              }
              unsigned int v33 = (2 * (*(_DWORD *)(v20 + 4 * v19) - v32)) ^ ((*(_DWORD *)(v20 + 4 * v19) - v32) >> 31);
              unsigned int v34 = __clz(v33);
              unsigned int v35 = 29 - v34;
              unsigned int v36 = (((-1 << (v34 ^ 0x1F)) + v33) >> (29 - v34)) - 4 * v34 + 124;
              if (v33 >= 0x10) {
                unint64_t v37 = v36;
              }
              else {
                unint64_t v37 = v33;
              }
              if (v33 >= 0x10) {
                unsigned int v38 = v35;
              }
              else {
                unsigned int v38 = 0;
              }
              sub_248448D6C((uint64_t)&v46[40 * v27], v37);
              v14 += v38;
              ++v19;
              unint64_t v18 = v10[5];
            }
            while (v19 < v18);
            unint64_t v16 = v10[6];
          }
          ++v17;
        }
        while (v17 < v16);
      }
      for (uint64_t i = 0; i != 720; i += 40)
      {
        uint64_t v40 = &v46[i];
        sub_248450898((uint64_t)&v46[i], *(float *)&v12, a4, a5, a6, a7, a8, a9, a10);
        LODWORD(v12) = *(_DWORD *)&v46[i + 32];
        float v15 = v15 + *(float *)&v12;
        v40[1] = *v40;
        v40[3] = 0;
      }
      v10 += 8;
    }
    while (v10 != a2);
  }
  uint64_t v41 = 720;
  do
  {
    uint64_t v42 = *(void **)&v46[v41 - 40];
    if (v42)
    {
      *(void *)&v46[v41 - 32] = v42;
      operator delete(v42);
    }
    v41 -= 40;
  }
  while (v41);
  return v15 + (float)v14;
}

void sub_248479454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v12 = 720;
  while (1)
  {
    uint64_t v13 = *(void **)(&a11 + v12 - 40);
    if (v13)
    {
      *(void *)(&a11 + v12 - 32) = v13;
      operator delete(v13);
    }
    v12 -= 40;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_248479484(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    long long v4 = (unsigned int *)(**(void **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6));
    uint64_t result = sub_248479550((float *)(*(void *)(**(void **)(v2 + 8) + 40 * **(void **)(v2 + 16) + 24)+ *(void *)(**(void **)(v2 + 8) + 40 * **(void **)(v2 + 16) + 16)* (*(void *)(*(void *)(v2 + 24) + 8) + a2)+ 4 * **(void **)(v2 + 24)), (int *)(*((void *)v4 + 3) + *((void *)v4 + 2) * a2), *v4, **(_DWORD **)(v2 + 48), **(_DWORD **)(v2 + 56), **(unsigned char **)(v2 + 64), **(double **)(v2 + 72));
    if (result) {
      atomic_store(1u, *(unsigned __int8 **)v2);
    }
  }
  return result;
}

uint64_t sub_248479528(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_248479550(float *__src, int *__dst, uint64_t a3, unsigned int a4, int a5, char a6, double a7)
{
  uint64_t v7 = __src;
  if ((a6 & 1) == 0)
  {
    if (a4 < 0x17)
    {
      if (a3)
      {
        float v22 = a7;
        do
        {
          float v23 = *v7++;
          float v24 = v23;
          if (v23 >= 0.0) {
            float v25 = 0.5;
          }
          else {
            float v25 = -0.5;
          }
          *__dst++ = (int)(float)(v25 + (float)(v24 * v22));
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      for (; a3; --a3)
      {
        float v8 = *v7++;
        double v9 = v8;
        if (v8 >= 0.0) {
          double v10 = 0.5;
        }
        else {
          double v10 = -0.5;
        }
        *__dst++ = (int)(v10 + v9 * a7);
      }
    }
    return 0;
  }
  if (a4 == 32)
  {
    memcpy(__dst, __src, 4 * a3);
    return 0;
  }
  if (!a3) {
    return 0;
  }
  int v11 = 1 << (a4 - 1);
  unsigned int v12 = ~a5 + a4;
  int v13 = ~(-1 << (23 - (~(_BYTE)a5 + a4)));
  while (1)
  {
    float v15 = *v7++;
    int v14 = LODWORD(v15);
    unsigned int v16 = LODWORD(v15) & 0x7FFFFFFF;
    if ((LODWORD(v15) & 0x7FFFFFFF) != 0) {
      break;
    }
    int v21 = v11 & (v14 >> 31);
LABEL_23:
    *__dst++ = v21;
    if (!--a3) {
      return 0;
    }
  }
  unsigned int v17 = v16 >> 23;
  unsigned int v18 = v17 - 127;
  if (v17 == 255) {
    return 1;
  }
  unsigned int v19 = v14 & 0x7FFFFF;
  int v20 = v18 + ~(-1 << (a5 - 1));
  if (v20 < 0)
  {
    if (v20 < (signed int)-v12) {
      return 1;
    }
    unsigned int v19 = (v19 | 0x800000) >> (1 - v20);
    int v20 = 0;
  }
  else if (v20 > ~(-1 << a5))
  {
    return 1;
  }
  if ((v19 & v13) == 0)
  {
    int v21 = (v19 >> (23 - v12)) | v11 & (v14 >> 31) | (v20 << v12);
    goto LABEL_23;
  }
  return 1;
}

uint64_t sub_2484796C4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    uint64_t result = sub_248479550((float *)(*(void *)(**(void **)(v2 + 8) + 40 * **(int **)(v2 + 16) + 24)+ *(void *)(**(void **)(v2 + 8) + 16) * (*(void *)(*(void *)(v2 + 24) + 8) + a2)+ 4 * **(void **)(v2 + 24)), (int *)(*(void *)(**(void **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6) + 24)+ *(void *)(**(void **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6) + 16) * a2), **(void **)(v2 + 48), **(_DWORD **)(v2 + 56), **(_DWORD **)(v2 + 64), **(unsigned char **)(v2 + 72), **(double **)(v2 + 80));
    if (result) {
      atomic_store(1u, *(unsigned __int8 **)v2);
    }
  }
  return result;
}

uint64_t sub_24847976C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_248479794(void *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  long long __p = 0;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  if (a1[12] == a1[13]) {
    goto LABEL_71;
  }
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      if (!v7 || *(void *)(v2[147] + 24 * v6) != *(void *)(v2[147] + 24 * v6 + 8))
      {
        float v8 = (void *)(v4 + 88 * v6);
        double v10 = v8 + 9;
        unint64_t v9 = *((unsigned int *)v8 + 18);
        uint64_t v12 = *v8;
        uint64_t v11 = v8[1];
        if (v9 < (v11 - *v8) >> 6) {
          break;
        }
      }
LABEL_38:
      uint64_t v6 = ++v7;
      if (0x2E8BA2E8BA2E8BA3 * ((v3 - v4) >> 3) <= (unint64_t)v7)
      {
        unint64_t v29 = (char *)__p;
        goto LABEL_41;
      }
    }
    int v13 = v2;
    int v14 = (void *)(v2[9] + 152 * v6);
    unsigned int v110 = v7 + 1;
    while (1)
    {
      if (v9 < *v10 || (uint64_t v18 = v12 + (v9 << 6), *(void *)(v18 + 40) <= *v14) && *(void *)(v18 + 48) <= *v14)
      {
        unsigned int v15 = v9;
        if (!v7) {
          goto LABEL_12;
        }
        unsigned int v16 = (void *)(v13[147] + 24 * v6);
        if (*v16 != v16[1]) {
          break;
        }
      }
LABEL_36:
      unint64_t v9 = (v9 + 1);
      if (v9 >= (v11 - v12) >> 6)
      {
        uint64_t v2 = v13;
        uint64_t v4 = v13[6];
        uint64_t v3 = v13[7];
        goto LABEL_38;
      }
    }
    unsigned int v15 = *(_DWORD *)(*v16 + 4 * (v9 - *v10));
LABEL_12:
    int v17 = *(_DWORD *)(v13[12] + 4 * v15);
    if (__p != v5 && *((_DWORD *)v5 - 3) == v7 && *((_DWORD *)v5 - 1) == v17)
    {
      *((_DWORD *)v5 - 4) = v9 + 1;
    }
    else
    {
      int v19 = v9 + 1;
      if ((unint64_t)v5 >= v124)
      {
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 2);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          sub_2483E92E8();
        }
        if (0x999999999999999ALL * ((uint64_t)(v124 - (void)__p) >> 2) > v21) {
          unint64_t v21 = 0x999999999999999ALL * ((uint64_t)(v124 - (void)__p) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - (void)__p) >> 2) >= 0x666666666666666) {
          unint64_t v22 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)sub_24847ADE0(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        float v24 = (char *)(v22 + 20 * v20);
        *(_DWORD *)float v24 = v9;
        *((_DWORD *)v24 + 1) = v19;
        *((_DWORD *)v24 + 2) = v7;
        *((_DWORD *)v24 + 3) = v110;
        *((_DWORD *)v24 + 4) = v17;
        uint64_t v26 = (char *)__p;
        float v25 = v123;
        uint64_t v27 = v24;
        if (v123 != __p)
        {
          do
          {
            long long v28 = *(_OWORD *)(v25 - 20);
            *((_DWORD *)v27 - 1) = *((_DWORD *)v25 - 1);
            *(_OWORD *)(v27 - 20) = v28;
            v27 -= 20;
            v25 -= 20;
          }
          while (v25 != v26);
          float v25 = v26;
        }
        uint64_t v5 = v24 + 20;
        long long __p = v27;
        unint64_t v124 = v22 + 20 * v23;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v9;
        *((_DWORD *)v5 + 1) = v19;
        *((_DWORD *)v5 + 2) = v7;
        *((_DWORD *)v5 + 3) = v110;
        *((_DWORD *)v5 + 4) = v17;
        v5 += 20;
      }
      unint64_t v123 = v5;
      uint64_t v12 = *v8;
      uint64_t v11 = v8[1];
    }
    goto LABEL_36;
  }
  uint64_t v5 = 0;
  unint64_t v29 = 0;
LABEL_41:
  unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v29) >> 2);
  unint64_t v31 = 126 - 2 * __clz(v30);
  if (v5 == v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  unint64_t v33 = 1;
  sub_24847A294((unint64_t)v29, (uint64_t)v5, v32, 1);
  if (v30 >= 2)
  {
    uint64_t v34 = 0;
    unsigned int v35 = v123;
    unint64_t v33 = 1;
    unint64_t v36 = 1;
    do
    {
      unint64_t v37 = &v29[20 * v33 - 20];
      if (*(void *)v37 == *(void *)&v29[v34 + 20]
        && *(_DWORD *)&v29[20 * v33 - 4] == *(_DWORD *)&v29[v34 + 36]
        && *((_DWORD *)v37 + 3) == *(_DWORD *)&v29[v34 + 28])
      {
        *((_DWORD *)v37 + 3) = *(_DWORD *)&v29[v34 + 32];
      }
      else
      {
        unsigned int v38 = &v29[20 * v33];
        long long v39 = *(_OWORD *)&v29[v34 + 20];
        ++v33;
        *((_DWORD *)v38 + 4) = *(_DWORD *)&v29[v34 + 36];
        *(_OWORD *)unsigned int v38 = v39;
        uint64_t v5 = v35;
      }
      ++v36;
      v34 += 20;
    }
    while (v36 < 0xCCCCCCCCCCCCCCCDLL * ((v5 - v29) >> 2));
    unint64_t v29 = (char *)__p;
    unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - (unsigned char *)__p) >> 2);
    uint64_t v5 = v35;
  }
  unint64_t v40 = v33 - v30;
  if (v33 <= v30)
  {
    if (v33 >= v30) {
      goto LABEL_71;
    }
    unint64_t v52 = &v29[20 * v33];
    goto LABEL_67;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - (void)v5) >> 2) >= v40)
  {
    bzero(v5, 20 * ((20 * v40 - 20) / 0x14) + 20);
    unint64_t v52 = &v5[20 * ((20 * v40 - 20) / 0x14) + 20];
LABEL_67:
    unint64_t v123 = v52;
    goto LABEL_71;
  }
  if (v33 > 0xCCCCCCCCCCCCCCCLL) {
    sub_2483E92E8();
  }
  unint64_t v41 = 0x999999999999999ALL * ((uint64_t)(v124 - (void)v29) >> 2);
  if (v41 <= v33) {
    unint64_t v41 = v33;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - (void)v29) >> 2) >= 0x666666666666666) {
    unint64_t v42 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v42 = v41;
  }
  uint64_t v43 = (char *)sub_24847ADE0(v42);
  uint64_t v44 = (char *)__p;
  uint64_t v45 = v123;
  long long v46 = &v43[20 * v30];
  uint64_t v48 = &v43[20 * v47];
  bzero(v46, 20 * ((20 * v40 - 20) / 0x14) + 20);
  unint64_t v49 = &v46[20 * ((20 * v40 - 20) / 0x14) + 20];
  if (v123 == __p)
  {
    BOOL v51 = v46;
  }
  else
  {
    do
    {
      long long v50 = *(_OWORD *)(v45 - 20);
      BOOL v51 = v46 - 20;
      *((_DWORD *)v46 - 1) = *((_DWORD *)v45 - 1);
      *(_OWORD *)(v46 - 20) = v50;
      v45 -= 20;
      v46 -= 20;
    }
    while (v45 != v44);
  }
  long long __p = v51;
  unint64_t v123 = v49;
  unint64_t v124 = (unint64_t)v48;
  if (v44) {
    operator delete(v44);
  }
LABEL_71:
  uint64_t v53 = (char *)v2[122];
  uint64_t v54 = v2[123];
  if (v53 != (char *)v54)
  {
    sub_2484680E8((char *)v2 + 120, v53, v54, 0xCCCCCCCCCCCCCCCDLL * ((v54 - (uint64_t)v53) >> 3));
    goto LABEL_73;
  }
  int v59 = *((_DWORD *)v2 + 140);
  if (v59 < 7 || !*((unsigned char *)v2 + 580))
  {
    uint64_t v119 = 0;
    int v120 = 0;
    unint64_t v121 = 0;
    sub_24840EF64(&v119, (uint64_t)(v2[145] - v2[144]) >> 3);
    uint64_t v64 = v2[145];
    uint64_t v65 = v2[144];
    if (v64 - v65 != 8)
    {
      uint64_t v66 = 0;
      do
      {
        unint64_t v67 = *(void *)(v65 + 8 * v66);
        unint64_t v68 = v66 + 1;
        unint64_t v69 = *(void *)(v65 + 8 * (v66 + 1));
        if (v67 < v69)
        {
          char v70 = 0;
          uint64_t v71 = *(void *)(v65 + 8 * v66);
LABEL_92:
          while (2)
          {
            uint64_t v72 = (uint64_t *)(v2[6] + 88 * v71);
            uint64_t v73 = *v72;
            uint64_t v74 = v72[1];
            while (v73 != v74)
            {
              if (*(void *)(v73 + 40)) {
                BOOL v75 = *(void *)(v73 + 48) == 0;
              }
              else {
                BOOL v75 = 1;
              }
              if (!v75)
              {
                ++v71;
                char v70 = 1;
                if (v71 != v69) {
                  goto LABEL_92;
                }
                goto LABEL_105;
              }
              v73 += 64;
            }
            if (++v71 != v69) {
              continue;
            }
            break;
          }
          if (v70)
          {
LABEL_105:
            long long v76 = v120;
            if ((unint64_t)v120 >= v121)
            {
              long long v78 = (char *)v119;
              uint64_t v79 = (v120 - (unsigned char *)v119) >> 3;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61) {
                sub_2483E92E8();
              }
              uint64_t v81 = v121 - (void)v119;
              if ((uint64_t)(v121 - (void)v119) >> 2 > v80) {
                unint64_t v80 = v81 >> 2;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                unint64_t v82 = (unint64_t)sub_2483F04AC(v82);
                long long v78 = (char *)v119;
                long long v76 = v120;
                unint64_t v67 = *(void *)(v65 + 8 * v66);
              }
              else
              {
                uint64_t v83 = 0;
              }
              uint64_t v84 = (char *)(v82 + 8 * v79);
              *(void *)uint64_t v84 = v67;
              uint64_t v77 = v84 + 8;
              while (v76 != v78)
              {
                uint64_t v85 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v84 - 1) = v85;
                v84 -= 8;
              }
              uint64_t v119 = v84;
              unint64_t v121 = v82 + 8 * v83;
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(void *)int v120 = v67;
              uint64_t v77 = v76 + 8;
            }
            int v120 = v77;
            uint64_t v64 = v2[145];
            uint64_t v65 = v2[144];
          }
        }
        ++v66;
      }
      while (v68 < ((v64 - v65) >> 3) - 1);
    }
    uint64_t v86 = (char *)v119;
    int v87 = v120;
    if (v119 == v120)
    {
      uint64_t v57 = 0;
      int v89 = 1;
      if (v119)
      {
LABEL_160:
        int v120 = v86;
        operator delete(v86);
      }
    }
    else
    {
      if ((unint64_t)v120 >= v121)
      {
        uint64_t v90 = (v120 - (unsigned char *)v119) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v92 = v121 - (void)v119;
        if ((uint64_t)(v121 - (void)v119) >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        BOOL v93 = (unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v93) {
          unint64_t v94 = v91;
        }
        if (v94)
        {
          unint64_t v94 = (unint64_t)sub_2483F04AC(v94);
          uint64_t v86 = (char *)v119;
          int v87 = v120;
        }
        else
        {
          uint64_t v95 = 0;
        }
        int v97 = (char *)(v94 + 8 * v90);
        unint64_t v98 = v94 + 8 * v95;
        *(void *)int v97 = *(void *)(v64 - 8);
        int v88 = v97 + 8;
        while (v87 != v86)
        {
          uint64_t v99 = *((void *)v87 - 1);
          v87 -= 8;
          *((void *)v97 - 1) = v99;
          v97 -= 8;
        }
        uint64_t v119 = v97;
        unint64_t v121 = v98;
        if (v86) {
          operator delete(v86);
        }
        uint64_t v86 = v97;
      }
      else
      {
        *(void *)int v120 = *(void *)(v64 - 8);
        int v88 = v87 + 8;
      }
      int v120 = v88;
      atomic_uchar v118 = 0;
      unint64_t v100 = v88 - v86;
      uint64_t v101 = (v88 - v86) >> 3;
      double v115 = 0;
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      *(void *)&long long v111 = &v115;
      BYTE8(v111) = 0;
      unint64_t v102 = v101 - 1;
      if (v101 != 1)
      {
        if (v102 >= 0xAAAAAAAAAAAAAABLL) {
          sub_2483E92E8();
        }
        double v103 = (char *)operator new(24 * v102);
        double v115 = v103;
        uint64_t v117 = &v103[24 * v102];
        bzero(v103, 24 * ((24 * v102 - 24) / 0x18) + 24);
        uint64_t v116 = &v103[24 * ((24 * v102 - 24) / 0x18) + 24];
      }
      uint64_t v104 = (v100 >> 3) - 1;
      *(void *)&long long v111 = &v119;
      *((void *)&v111 + 1) = v2;
      uint64_t v112 = &v115;
      uint64_t v113 = &v118;
      p_p = &__p;
      if (a2)
      {
        BOOL v105 = sub_24847AE28(a2, v104, (uint64_t)&v111);
      }
      else
      {
        v125[0] = 0;
        v125[1] = v125;
        BOOL v105 = sub_24847AE28((uint64_t)v125, v104, (uint64_t)&v111);
      }
      uint64_t v57 = v105;
      int v89 = 1;
      if (!v105)
      {
        uint64_t v57 = 1;
        if ((atomic_exchange(&v118, 1u) & 1) == 0)
        {
          v2[16] = v2[15];
          sub_24847AED8(&v115, &v119, 0, ((v120 - (unsigned char *)v119) >> 3) - 1, v2 + 15);
          uint64_t v57 = 0;
          int v89 = 0;
        }
      }
      *(void *)&long long v111 = &v115;
      sub_2483EA640((void ***)&v111);
      uint64_t v86 = (char *)v119;
      if (v119) {
        goto LABEL_160;
      }
    }
    if (v89) {
      goto LABEL_76;
    }
    goto LABEL_73;
  }
  uint64_t v60 = (uint64_t *)v2[6];
  int v61 = (uint64_t *)v2[7];
  if (v60 == v61)
  {
    unint64_t v62 = 0;
  }
  else
  {
    unint64_t v62 = 0;
    do
    {
      for (uint64_t i = *v60; i != v60[1]; i += 64)
        v62 += *(void *)(i + 48) * *(void *)(i + 40);
      v60 += 11;
    }
    while (v60 != v61);
  }
  if (v59 >= 8)
  {
    if (v59 != 8)
    {
      double v106 = (_DWORD *)v2[15];
      BOOL v107 = (_DWORD *)v2[17];
      if (v107 == v106)
      {
        if (v107)
        {
          v2[16] = v107;
          operator delete(v107);
          v2[15] = 0;
          v2[16] = 0;
          v2[17] = 0;
        }
        sub_2484033F4(v2 + 15, 1uLL);
        BOOL v108 = v2 + 16;
        double v106 = (_DWORD *)v2[16];
      }
      else
      {
        BOOL v108 = v2 + 16;
      }
      *double v106 = 0;
      *((_WORD *)v106 + 2) = -1;
      *((void *)v106 + 1) = 0;
      v106[4] = 5;
      *((void *)v106 + 3) = 0;
      v106[8] = 1;
      *BOOL v108 = v106 + 10;
      goto LABEL_73;
    }
    sub_2484992F4((unint64_t *)&v111, 6, v62);
  }
  else
  {
    sub_2484992F4((unint64_t *)&v111, 5, v62);
  }
  double v96 = (void *)v2[15];
  if (v96)
  {
    v2[16] = v96;
    operator delete(v96);
    v2[15] = 0;
    v2[16] = 0;
    v2[17] = 0;
  }
  *(_OWORD *)(v2 + 15) = v111;
  v2[17] = v112;
LABEL_73:
  sub_2484477B4((uint64_t)(v2 + 18), 1uLL);
  uint64_t v55 = v2[18];
  *(void *)(v55 + 8) = *(void *)v55;
  long long v111 = 0uLL;
  uint64_t v112 = 0;
  sub_2484A39BC(v2 + 15, (void **)v55, (char **)&v111);
  uint64_t v56 = (void *)v2[15];
  if (v56)
  {
    v2[16] = v56;
    operator delete(v56);
    v2[15] = 0;
    v2[16] = 0;
    v2[17] = 0;
  }
  uint64_t v57 = 0;
  *(_OWORD *)(v2 + 15) = v111;
  v2[17] = v112;
LABEL_76:
  if (__p)
  {
    unint64_t v123 = (char *)__p;
    operator delete(__p);
  }
  return v57;
}

void sub_24847A20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24847A294(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v9 = a2;
    double v10 = (long long *)(a2 - 20);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = v9 - v11;
          uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v11) >> 2);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                long long v135 = *v10;
                int v61 = *(_DWORD *)(a2 - 4);
                long long v134 = *(_OWORD *)a1;
                int v62 = *(_DWORD *)(a1 + 16);
                long long v130 = v135;
                int v131 = v61;
                long long v128 = v134;
                int v129 = v62;
                if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                {
                  long long v63 = *(_OWORD *)a1;
                  int v131 = *(_DWORD *)(a1 + 16);
                  long long v130 = v63;
                  long long v64 = *v10;
                  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
                  *(_OWORD *)a1 = v64;
                  long long v65 = v130;
                  *(_DWORD *)(a2 - 4) = v131;
                  *double v10 = v65;
                }
                break;
              case 3:
                sub_24847BA34((long long *)a1, (long long *)(a1 + 20), v10);
                break;
              case 4:
                sub_24847BBFC(a1, a1 + 20, a1 + 40, (uint64_t)v10);
                break;
              case 5:
                sub_24847BD2C(a1, a1 + 20, a1 + 40, a1 + 60, (__n128 *)v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 479)
          {
            if (a4)
            {
              if (a1 != v9)
              {
                uint64_t v66 = (long long *)(a1 + 20);
                if (a1 + 20 != v9)
                {
                  uint64_t v67 = 0;
                  unint64_t v68 = (long long *)a1;
                  do
                  {
                    int v69 = *((_DWORD *)v68 + 9);
                    long long v70 = *v68;
                    int v71 = *((_DWORD *)v68 + 4);
                    unint64_t v68 = v66;
                    long long v136 = v70;
                    long long v130 = *v66;
                    int v131 = v69;
                    long long v128 = v70;
                    int v129 = v71;
                    if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                    {
                      long long v139 = *v68;
                      uint64_t v72 = v67;
                      while (1)
                      {
                        uint64_t v73 = a1 + v72;
                        *(_OWORD *)(v73 + 20) = *(_OWORD *)(a1 + v72);
                        *(_DWORD *)(v73 + 36) = *(_DWORD *)(a1 + v72 + 16);
                        if (!v72) {
                          break;
                        }
                        long long v138 = *(_OWORD *)(v73 - 20);
                        int v74 = *(_DWORD *)(v73 - 4);
                        long long v130 = v139;
                        int v131 = v69;
                        long long v128 = v138;
                        int v129 = v74;
                        v72 -= 20;
                        if ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) == 0)
                        {
                          uint64_t v75 = a1 + v72 + 20;
                          goto LABEL_71;
                        }
                      }
                      uint64_t v75 = a1;
LABEL_71:
                      *(_OWORD *)uint64_t v75 = v139;
                      *(_DWORD *)(v75 + 16) = v69;
                    }
                    uint64_t v66 = (long long *)((char *)v68 + 20);
                    v67 += 20;
                  }
                  while ((long long *)((char *)v68 + 20) != (long long *)v9);
                }
              }
            }
            else if (a1 != v9)
            {
              while (1)
              {
                atomic_uchar v118 = (long long *)(a1 + 20);
                if (a1 + 20 == v9) {
                  break;
                }
                int v119 = *(_DWORD *)(a1 + 36);
                long long v120 = *(_OWORD *)a1;
                int v121 = *(_DWORD *)(a1 + 16);
                a1 += 20;
                long long v136 = v120;
                long long v130 = *v118;
                int v131 = v119;
                long long v128 = v120;
                int v129 = v121;
                if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                {
                  long long v139 = *(_OWORD *)a1;
                  unint64_t v122 = a1;
                  do
                  {
                    unint64_t v123 = v122 - 20;
                    *(_OWORD *)unint64_t v122 = *(_OWORD *)(v122 - 20);
                    *(_DWORD *)(v122 + 16) = *(_DWORD *)(v122 - 4);
                    long long v138 = *(_OWORD *)(v122 - 40);
                    int v124 = *(_DWORD *)(v122 - 24);
                    long long v130 = v139;
                    int v131 = v119;
                    long long v128 = v138;
                    int v129 = v124;
                    char v125 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
                    unint64_t v122 = v123;
                  }
                  while ((v125 & 1) != 0);
                  *(_OWORD *)unint64_t v123 = v139;
                  *(_DWORD *)(v123 + 16) = v119;
                }
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v9)
            {
              int64_t v76 = (unint64_t)(v13 - 2) >> 1;
              int64_t v77 = v76;
              do
              {
                int64_t v78 = v77;
                if (v76 >= v77)
                {
                  uint64_t v79 = (2 * v77) | 1;
                  unint64_t v80 = a1 + 20 * v79;
                  if (2 * v77 + 2 < v13)
                  {
                    long long v130 = *(_OWORD *)v80;
                    int v81 = *(_DWORD *)(v80 + 16);
                    long long v128 = *(_OWORD *)(v80 + 20);
                    int v82 = *(_DWORD *)(v80 + 36);
                    int v131 = v81;
                    int v129 = v82;
                    if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                    {
                      v80 += 20;
                      uint64_t v79 = 2 * v78 + 2;
                    }
                  }
                  unint64_t v83 = a1 + 20 * v78;
                  long long v130 = *(_OWORD *)v80;
                  int v84 = *(_DWORD *)(v80 + 16);
                  long long v128 = *(_OWORD *)v83;
                  int v85 = *(_DWORD *)(v83 + 16);
                  int v131 = v84;
                  int v129 = v85;
                  if ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) == 0)
                  {
                    int64_t v126 = v78;
                    long long v136 = *(_OWORD *)v83;
                    int v86 = *(_DWORD *)(v83 + 16);
                    do
                    {
                      unint64_t v87 = v83;
                      unint64_t v83 = v80;
                      long long v88 = *(_OWORD *)v80;
                      *(_DWORD *)(v87 + 16) = *(_DWORD *)(v80 + 16);
                      *(_OWORD *)unint64_t v87 = v88;
                      if (v76 < v79) {
                        break;
                      }
                      uint64_t v89 = (2 * v79) | 1;
                      unint64_t v80 = a1 + 20 * v89;
                      uint64_t v90 = 2 * v79 + 2;
                      if (v90 < v13)
                      {
                        long long v130 = *(_OWORD *)v80;
                        int v91 = *(_DWORD *)(v80 + 16);
                        long long v128 = *(_OWORD *)(v80 + 20);
                        int v92 = *(_DWORD *)(v80 + 36);
                        int v131 = v91;
                        int v129 = v92;
                        if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                        {
                          v80 += 20;
                          uint64_t v89 = v90;
                        }
                      }
                      long long v130 = *(_OWORD *)v80;
                      int v93 = *(_DWORD *)(v80 + 16);
                      long long v128 = v136;
                      int v131 = v93;
                      int v129 = v86;
                      uint64_t v79 = v89;
                    }
                    while (!sub_24847B910((uint64_t)&v130, (uint64_t)&v128));
                    *(_OWORD *)unint64_t v83 = v136;
                    *(_DWORD *)(v83 + 16) = v86;
                    int64_t v78 = v126;
                  }
                }
                int64_t v77 = v78 - 1;
              }
              while (v78);
              int64_t v94 = v12 / 0x14uLL;
              do
              {
                uint64_t v95 = 0;
                long long v96 = *(_OWORD *)a1;
                int v137 = *(_DWORD *)(a1 + 16);
                long long v136 = v96;
                unint64_t v97 = a1;
                do
                {
                  uint64_t v98 = v97 + 20 * v95 + 20;
                  uint64_t v99 = (2 * v95) | 1;
                  uint64_t v100 = 2 * v95 + 2;
                  if (v100 < v94)
                  {
                    long long v139 = *(_OWORD *)v98;
                    int v101 = *(_DWORD *)(v97 + 20 * v95 + 36);
                    long long v138 = *(_OWORD *)(v98 + 20);
                    int v102 = *(_DWORD *)(v98 + 36);
                    long long v130 = v139;
                    int v131 = v101;
                    long long v128 = v138;
                    int v129 = v102;
                    if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                    {
                      v98 += 20;
                      uint64_t v99 = v100;
                    }
                  }
                  long long v103 = *(_OWORD *)v98;
                  *(_DWORD *)(v97 + 16) = *(_DWORD *)(v98 + 16);
                  *(_OWORD *)unint64_t v97 = v103;
                  unint64_t v97 = v98;
                  uint64_t v95 = v99;
                }
                while (v99 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                uint64_t v104 = a2 - 20;
                BOOL v5 = v98 == a2 - 20;
                a2 -= 20;
                if (v5)
                {
                  long long v116 = v136;
                  *(_DWORD *)(v98 + 16) = v137;
                  *(_OWORD *)uint64_t v98 = v116;
                }
                else
                {
                  long long v105 = *(_OWORD *)v104;
                  *(_DWORD *)(v98 + 16) = *(_DWORD *)(v104 + 16);
                  *(_OWORD *)uint64_t v98 = v105;
                  long long v106 = v136;
                  *(_DWORD *)(v104 + 16) = v137;
                  *(_OWORD *)uint64_t v104 = v106;
                  uint64_t v107 = v98 - a1 + 20;
                  if (v107 >= 21)
                  {
                    unint64_t v108 = (v107 / 0x14uLL - 2) >> 1;
                    uint64_t v109 = a1 + 20 * v108;
                    long long v130 = *(_OWORD *)v109;
                    int v110 = *(_DWORD *)(v109 + 16);
                    long long v128 = *(_OWORD *)v98;
                    int v111 = *(_DWORD *)(v98 + 16);
                    int v131 = v110;
                    int v129 = v111;
                    if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
                    {
                      long long v139 = *(_OWORD *)v98;
                      int v112 = *(_DWORD *)(v98 + 16);
                      do
                      {
                        uint64_t v113 = v98;
                        uint64_t v98 = v109;
                        long long v114 = *(_OWORD *)v109;
                        *(_DWORD *)(v113 + 16) = *(_DWORD *)(v109 + 16);
                        *(_OWORD *)uint64_t v113 = v114;
                        if (!v108) {
                          break;
                        }
                        unint64_t v108 = (v108 - 1) >> 1;
                        uint64_t v109 = a1 + 20 * v108;
                        long long v130 = *(_OWORD *)v109;
                        int v115 = *(_DWORD *)(v109 + 16);
                        long long v128 = v139;
                        int v131 = v115;
                        int v129 = v112;
                      }
                      while ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
                      *(_OWORD *)uint64_t v98 = v139;
                      *(_DWORD *)(v98 + 16) = v112;
                    }
                  }
                }
              }
              while (v94-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = a1 + 20 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0xA01)
          {
            sub_24847BA34((long long *)v15, (long long *)a1, v10);
          }
          else
          {
            sub_24847BA34((long long *)a1, (long long *)v15, v10);
            uint64_t v16 = 5 * v14;
            sub_24847BA34((long long *)(a1 + 20), (long long *)(a1 + 4 * v16 - 20), (long long *)(a2 - 40));
            sub_24847BA34((long long *)(a1 + 40), (long long *)(a1 + 20 + 4 * v16), (long long *)(a2 - 60));
            sub_24847BA34((long long *)(a1 + 4 * v16 - 20), (long long *)v15, (long long *)(a1 + 20 + 4 * v16));
            long long v17 = *(_OWORD *)a1;
            int v131 = *(_DWORD *)(a1 + 16);
            long long v130 = v17;
            int v18 = *(_DWORD *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_DWORD *)(a1 + 16) = v18;
            long long v19 = v130;
            *(_DWORD *)(v15 + 16) = v131;
            *(_OWORD *)unint64_t v15 = v19;
          }
          --a3;
          if (a4) {
            break;
          }
          long long v133 = *(_OWORD *)(a1 - 20);
          int v20 = *(_DWORD *)(a1 - 4);
          long long v132 = *(_OWORD *)a1;
          int v21 = *(_DWORD *)(a1 + 16);
          long long v130 = v133;
          int v131 = v20;
          long long v128 = v132;
          int v129 = v21;
          if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128)) {
            break;
          }
          long long v136 = *(_OWORD *)a1;
          int v42 = *(_DWORD *)(a1 + 16);
          long long v130 = *(_OWORD *)a1;
          long long v128 = *v10;
          int v43 = *(_DWORD *)(v9 - 4);
          int v131 = v42;
          int v129 = v43;
          if (sub_24847B910((uint64_t)&v130, (uint64_t)&v128))
          {
            unint64_t v44 = a1;
            do
            {
              unint64_t v11 = v44 + 20;
              long long v130 = v136;
              long long v128 = *(_OWORD *)(v44 + 20);
              int v45 = *(_DWORD *)(v44 + 36);
              int v131 = v42;
              int v129 = v45;
              char v46 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
              unint64_t v44 = v11;
            }
            while ((v46 & 1) == 0);
          }
          else
          {
            unint64_t v47 = a1 + 20;
            do
            {
              unint64_t v11 = v47;
              if (v47 >= v9) {
                break;
              }
              long long v130 = v136;
              long long v128 = *(_OWORD *)v47;
              int v48 = *(_DWORD *)(v47 + 16);
              int v131 = v42;
              int v129 = v48;
              int v49 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
              unint64_t v47 = v11 + 20;
            }
            while (!v49);
          }
          unint64_t v50 = v9;
          if (v11 < v9)
          {
            unint64_t v51 = v9;
            do
            {
              unint64_t v50 = v51 - 20;
              long long v130 = v136;
              long long v128 = *(_OWORD *)(v51 - 20);
              int v52 = *(_DWORD *)(v51 - 4);
              int v131 = v42;
              int v129 = v52;
              char v53 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
              unint64_t v51 = v50;
            }
            while ((v53 & 1) != 0);
          }
          while (v11 < v50)
          {
            long long v54 = *(_OWORD *)v11;
            int v131 = *(_DWORD *)(v11 + 16);
            long long v130 = v54;
            long long v55 = *(_OWORD *)v50;
            *(_DWORD *)(v11 + 16) = *(_DWORD *)(v50 + 16);
            *(_OWORD *)unint64_t v11 = v55;
            long long v56 = v130;
            *(_DWORD *)(v50 + 16) = v131;
            *(_OWORD *)unint64_t v50 = v56;
            do
            {
              long long v130 = v136;
              long long v128 = *(_OWORD *)(v11 + 20);
              int v57 = *(_DWORD *)(v11 + 36);
              v11 += 20;
              int v131 = v42;
              int v129 = v57;
            }
            while (!sub_24847B910((uint64_t)&v130, (uint64_t)&v128));
            do
            {
              long long v139 = *(_OWORD *)(v50 - 20);
              int v58 = *(_DWORD *)(v50 - 4);
              v50 -= 20;
              long long v130 = v136;
              int v131 = v42;
              long long v128 = v139;
              int v129 = v58;
            }
            while ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
          }
          int v59 = (long long *)(v11 - 20);
          BOOL v4 = v11 - 20 >= a1;
          BOOL v5 = v11 - 20 == a1;
          if (v11 - 20 != a1)
          {
            long long v60 = *v59;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 4);
            *(_OWORD *)a1 = v60;
          }
          a4 = 0;
          *int v59 = v136;
          *(_DWORD *)(v11 - 4) = v42;
        }
        long long v136 = *(_OWORD *)a1;
        int v22 = *(_DWORD *)(a1 + 16);
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 20;
          long long v130 = *(_OWORD *)(v24 + 20);
          int v25 = *(_DWORD *)(v24 + 36);
          long long v128 = v136;
          int v131 = v25;
          int v129 = v22;
        }
        while ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
        unint64_t v26 = v9;
        if (v24 == a1)
        {
          unint64_t v30 = a2;
          while (v23 < v30)
          {
            unint64_t v27 = v30 - 20;
            long long v130 = *(_OWORD *)(v30 - 20);
            int v31 = *(_DWORD *)(v30 - 4);
            long long v128 = v136;
            int v131 = v31;
            int v129 = v22;
            char v32 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
            unint64_t v30 = v27;
            if (v32) {
              goto LABEL_22;
            }
          }
          unint64_t v27 = v30;
        }
        else
        {
          do
          {
            unint64_t v27 = v26 - 20;
            long long v130 = *(_OWORD *)(v26 - 20);
            int v28 = *(_DWORD *)(v26 - 4);
            long long v128 = v136;
            int v131 = v28;
            int v129 = v22;
            int v29 = sub_24847B910((uint64_t)&v130, (uint64_t)&v128);
            unint64_t v26 = v27;
          }
          while (!v29);
        }
LABEL_22:
        unint64_t v11 = v23;
        if (v23 < v27)
        {
          unint64_t v33 = v27;
          do
          {
            long long v130 = *(_OWORD *)v11;
            long long v34 = v130;
            int v131 = *(_DWORD *)(v11 + 16);
            int v35 = v131;
            int v36 = *(_DWORD *)(v33 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v33;
            *(_DWORD *)(v11 + 16) = v36;
            *(_DWORD *)(v33 + 16) = v35;
            *(_OWORD *)unint64_t v33 = v34;
            do
            {
              long long v130 = *(_OWORD *)(v11 + 20);
              int v37 = *(_DWORD *)(v11 + 36);
              v11 += 20;
              long long v128 = v136;
              int v131 = v37;
              int v129 = v22;
            }
            while ((sub_24847B910((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
            do
            {
              long long v139 = *(_OWORD *)(v33 - 20);
              int v38 = *(_DWORD *)(v33 - 4);
              v33 -= 20;
              long long v128 = v136;
              long long v130 = v139;
              int v131 = v38;
              int v129 = v22;
            }
            while (!sub_24847B910((uint64_t)&v130, (uint64_t)&v128));
          }
          while (v11 < v33);
        }
        long long v39 = (long long *)(v11 - 20);
        if (v11 - 20 != a1)
        {
          long long v40 = *v39;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 4);
          *(_OWORD *)a1 = v40;
        }
        long long *v39 = v136;
        *(_DWORD *)(v11 - 4) = v22;
        BOOL v4 = v23 >= v27;
        unint64_t v9 = a2;
        if (v4) {
          break;
        }
LABEL_34:
        sub_24847A294(a1, v11 - 20, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v41 = sub_24847BEB8(a1, v11 - 20);
      if (sub_24847BEB8(v11, a2)) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v11 - 20;
    if (!v41) {
      continue;
    }
    break;
  }
}

void *sub_24847ADE0(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_2483E9338();
  }
  return operator new(20 * a1);
}

BOOL sub_24847AE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), double (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24847B800, sub_24847B368, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24847B368((uint64_t)v6, i);
  return 0;
}

void sub_24847AED8(void *a1, void *a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v6 = a3 + 1;
  if (a3 + 1 == a4)
  {
    unsigned int v7 = (char *)a5[1];
  }
  else
  {
    unint64_t v8 = a4;
    double v10 = (char *)*a5;
    unsigned int v7 = (char *)a5[1];
    do
    {
      unint64_t v11 = (v8 + a3) >> 1;
      uint64_t v12 = *(void *)(*a2 + 8 * v11) - 1;
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v10) >> 3);
      unint64_t v14 = a5[2];
      if ((unint64_t)v7 >= v14)
      {
        if (v13 + 1 > 0x666666666666666) {
          goto LABEL_58;
        }
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)v10) >> 3);
        uint64_t v17 = 2 * v16;
        if (2 * v16 <= v13 + 1) {
          uint64_t v17 = v13 + 1;
        }
        if (v16 >= 0x333333333333333) {
          unint64_t v18 = 0x666666666666666;
        }
        else {
          unint64_t v18 = v17;
        }
        long long v19 = (char *)sub_248403444(v18);
        int v21 = &v19[40 * v13];
        *(_DWORD *)int v21 = v12;
        *((_WORD *)v21 + 2) = 1;
        *((void *)v21 + 1) = 0;
        *((_DWORD *)v21 + 4) = 0;
        *((void *)v21 + 3) = 0;
        *((_DWORD *)v21 + 8) = 1;
        unint64_t v23 = (char *)*a5;
        int v22 = (char *)a5[1];
        unint64_t v24 = v21;
        if (v22 != (char *)*a5)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 40);
            long long v26 = *(_OWORD *)(v22 - 24);
            *((_DWORD *)v24 - 2) = *((_DWORD *)v22 - 2);
            *(_OWORD *)(v24 - 24) = v26;
            *(_OWORD *)(v24 - 40) = v25;
            v24 -= 40;
            v22 -= 40;
          }
          while (v22 != v23);
          int v22 = (char *)*a5;
        }
        unint64_t v15 = v21 + 40;
        *a5 = (unint64_t)v24;
        a5[1] = (unint64_t)(v21 + 40);
        a5[2] = (unint64_t)&v19[40 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v7 = v12;
        *((_WORD *)v7 + 2) = 1;
        *((void *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        *((void *)v7 + 3) = 0;
        unint64_t v15 = v7 + 40;
        *((_DWORD *)v7 + 8) = 1;
      }
      a5[1] = (unint64_t)v15;
      *(_DWORD *)(*a5 + 40 * v13 + 8) = -858993459 * ((unint64_t)&v15[-*a5] >> 3);
      sub_24847AED8(a1, a2, v11, v8, a5);
      double v10 = (char *)*a5;
      unsigned int v7 = (char *)a5[1];
      *(_DWORD *)(*a5 + 40 * v13 + 12) = -858993459 * ((unint64_t)&v7[-*a5] >> 3);
      unint64_t v8 = (v8 + a3) >> 1;
    }
    while (v6 != v11);
  }
  unint64_t v27 = (char *)*a5;
  unint64_t v28 = (uint64_t)&v7[-*a5] / 40;
  uint64_t v29 = *a1 + 24 * a3;
  int v31 = *(char **)v29;
  unint64_t v30 = *(char **)(v29 + 8);
  if (v30 - v31 >= 1)
  {
    uint64_t v32 = (v30 - v31) / 40;
    unint64_t v33 = &v27[40 * v28];
    unint64_t v34 = a5[2];
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (void)v7) >> 3)) >= v32)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v7 - v33) >> 3)) >= v32)
      {
        long long v40 = &v31[40 * v32];
        int v42 = v7;
      }
      else
      {
        long long v40 = &v31[8 * ((v7 - v33) >> 3)];
        int64_t v41 = v30 - v40;
        if (v30 != v40) {
          memmove(v7, &v31[8 * ((v7 - v33) >> 3)], v41 - 4);
        }
        int v42 = &v7[v41];
        a5[1] = (unint64_t)&v7[v41];
        if (v7 - v33 < 1) {
          goto LABEL_53;
        }
      }
      int v43 = &v33[40 * v32];
      unint64_t v44 = (unint64_t)&v42[-40 * v32];
      int v45 = v42;
      if (v44 < (unint64_t)v7)
      {
        int v45 = v42;
        do
        {
          long long v46 = *(_OWORD *)v44;
          long long v47 = *(_OWORD *)(v44 + 16);
          *((void *)v45 + 4) = *(void *)(v44 + 32);
          *(_OWORD *)int v45 = v46;
          *((_OWORD *)v45 + 1) = v47;
          v44 += 40;
          v45 += 40;
        }
        while (v44 < (unint64_t)v7);
      }
      a5[1] = (unint64_t)v45;
      if (v42 != v43) {
        memmove(v43, v33, v42 - v43 - 4);
      }
      if (v40 != v31) {
        memmove(v33, v31, v40 - v31 - 4);
      }
      goto LABEL_53;
    }
    unint64_t v35 = v32 - 0x3333333333333333 * ((v7 - v27) >> 3);
    if (v35 > 0x666666666666666) {
LABEL_58:
    }
      sub_2483E92E8();
    unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (void)v27) >> 3);
    uint64_t v37 = 2 * v36;
    if (2 * v36 <= v35) {
      uint64_t v37 = v35;
    }
    if (v36 >= 0x333333333333333) {
      unint64_t v38 = 0x666666666666666;
    }
    else {
      unint64_t v38 = v37;
    }
    if (v38) {
      unint64_t v38 = (unint64_t)sub_248403444(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    unint64_t v48 = v38 + 40 * v28;
    int v49 = (char *)(v48 + 40 * v32);
    uint64_t v50 = 40 * v32;
    unint64_t v51 = v48;
    do
    {
      long long v52 = *(_OWORD *)v31;
      long long v53 = *((_OWORD *)v31 + 1);
      *(void *)(v51 + 32) = *((void *)v31 + 4);
      *(_OWORD *)unint64_t v51 = v52;
      *(_OWORD *)(v51 + 16) = v53;
      v51 += 40;
      v31 += 40;
      v50 -= 40;
    }
    while (v50);
    long long v54 = (char *)*a5;
    if ((char *)*a5 == v33)
    {
      unint64_t v58 = v38 + 40 * v28;
    }
    else
    {
      long long v55 = v33;
      do
      {
        long long v56 = *(_OWORD *)(v55 - 40);
        long long v57 = *(_OWORD *)(v55 - 24);
        unint64_t v58 = v48 - 40;
        *(_DWORD *)(v48 - 8) = *((_DWORD *)v55 - 2);
        *(_OWORD *)(v48 - 24) = v57;
        *(_OWORD *)(v48 - 40) = v56;
        v55 -= 40;
        v48 -= 40;
      }
      while (v55 != v54);
    }
    unint64_t v59 = v38 + 40 * v39;
    long long v60 = (unsigned char *)a5[1];
    uint64_t v61 = v60 - v33;
    if (v60 != v33) {
      memmove(v49, v33, v61 - 4);
    }
    int v62 = (void *)*a5;
    *a5 = v58;
    a5[1] = (unint64_t)&v49[v61];
    a5[2] = v59;
    if (v62) {
      operator delete(v62);
    }
  }
LABEL_53:
  unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a5[1] - *a5) >> 3);
  BOOL v64 = v63 > v28;
  unint64_t v65 = v63 - v28;
  if (v64)
  {
    int32x2_t v66 = vdup_n_s32(v28);
    uint64_t v67 = (int32x2_t *)(*a5 + 40 * v28 + 8);
    do
    {
      *uint64_t v67 = vadd_s32(*v67, v66);
      v67 += 5;
      --v65;
    }
    while (v65);
  }
}

double sub_24847B368(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  unint64_t v67 = 0;
  int v3 = v2[1];
  uint64_t v4 = **v2;
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  uint64_t v7 = *(void *)(v4 + 8 * (a2 + 1));
  int v8 = v7;
  if (v5 >= v7)
  {
LABEL_13:
    if (v5 < v7)
    {
      do
      {
        unsigned int v13 = v8 - 1;
        unint64_t v14 = (uint64_t *)(v3[6] + 88 * (v8 - 1));
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1];
        while (v15 != v16)
        {
          if (*(void *)(v15 + 40)) {
            BOOL v17 = *(void *)(v15 + 48) == 0;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17)
          {
            LODWORD(v7) = v8;
            goto LABEL_24;
          }
          v15 += 64;
        }
        --v8;
      }
      while (v5 < v13);
      LODWORD(v7) = v5;
    }
  }
  else
  {
    uint64_t v5 = v5;
    do
    {
      unint64_t v9 = (uint64_t *)(v3[6] + 88 * v5);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      while (v10 != v11)
      {
        if (*(void *)(v10 + 40)) {
          BOOL v12 = *(void *)(v10 + 48) == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12) {
          goto LABEL_13;
        }
        v10 += 64;
      }
      ++v5;
    }
    while (v5 != v7);
    LODWORD(v5) = v7;
  }
LABEL_24:
  uint64_t v18 = v5;
  uint64_t v19 = v3[9];
  int v20 = *(_DWORD *)(v19 + 152 * v5 + 84);
  if (v20 == 1)
  {
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    if (sub_2484A132C((uint64_t)&v54, *(_DWORD *)(v19 + 152 * v5 + 64), *(_DWORD *)(v19 + 152 * v5 + 76))|| (uint64_t v21 = v3[9] + 152 * v5, sub_2484A1894((uint64_t)&v54, v21 + 24, *(_DWORD *)(v21 + 76))))
    {
      atomic_exchange((atomic_uchar *volatile)v2[3], 1u);
    }
    else
    {
      unsigned int v44 = a2;
      int v45 = v2;
      memset(v53, 0, sizeof(v53));
      memset(v52, 0, sizeof(v52));
      memset(v51, 0, sizeof(v51));
      memset(__p, 0, sizeof(__p));
      if (v5 >= v7)
      {
        unsigned int v30 = 0;
      }
      else
      {
        unsigned int v30 = 0;
        uint64_t v31 = 152 * v5;
        uint64_t v32 = 88 * v5;
        unint64_t v33 = v5;
        do
        {
          unint64_t v34 = (uint64_t *)(v3[6] + v32);
          uint64_t v36 = *v34;
          uint64_t v35 = v34[1];
          sub_2484A3370(v34, v3[9] + v31, v33, (uint64_t)v51, (uint64_t)__p, (uint64_t)v53, (uint64_t)v52);
          if (v30 <= ((unint64_t)(v35 - v36) >> 6)) {
            unsigned int v30 = (unint64_t)(v35 - v36) >> 6;
          }
          ++v33;
          v31 += 152;
          v32 += 88;
        }
        while (v7 != v33);
      }
      LODWORD(v48) = 0;
      HIDWORD(v48) = v30;
      uint64_t v49 = __PAIR64__(v7, v5);
      sub_2484A2040((uint64_t)&v54, &v48, (_DWORD *)*v45[4], (_DWORD *)v45[4][1], (char **)v51, (char **)__p, (int **)v53, (int **)v52, *(void *)(v3[9] + 152 * v5 + 56));
      if (v5 >= v7)
      {
        unint64_t v40 = 0;
      }
      else
      {
        uint64_t v37 = 152 * v5;
        uint64_t v38 = 88 * v5;
        uint64_t v39 = v18;
        do
        {
          sub_2484A0E7C((void *)(v3[6] + v38), (long long *)(v3[9] + v37), 0, 0, 0, v39++, &v54, &v67, 0, 0, 0, 0);
          v37 += 152;
          v38 += 88;
        }
        while (v7 != v39);
        unint64_t v40 = v67;
      }
      sub_24849BE68((char **)&v46, &v54, v40, v3[9] + 152 * v18, v45[4], v48, v49);
      uint64_t v41 = *v45[2];
      uint64_t v42 = v41 + 24 * v44;
      int v43 = *(void **)v42;
      if (*(void *)v42)
      {
        *(void *)(v41 + 24 * v44 + 8) = v43;
        operator delete(v43);
        *(void *)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0;
        *(void *)(v42 + 16) = 0;
      }
      *(_OWORD *)uint64_t v42 = v46;
      *(void *)(v41 + 24 * v44 + 16) = v47;
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (v51[0]) {
        operator delete(v51[0]);
      }
      if (v52[0]) {
        operator delete(v52[0]);
      }
      if (v53[0]) {
        operator delete(v53[0]);
      }
    }
    sub_24847B828((char **)&v54);
  }
  else
  {
    if (v5 >= v7)
    {
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v23 = 0;
      do
      {
        unint64_t v24 = (uint64_t *)(v3[6] + 88 * v18);
        uint64_t v25 = *v24;
        uint64_t v26 = v24[1];
        while (v25 != v26)
        {
          v23 += *(void *)(v25 + 48) * *(void *)(v25 + 40);
          v25 += 64;
        }
        ++v18;
      }
      while (v18 != v7);
    }
    sub_2484992F4((unint64_t *)&v54, v20, v23);
    uint64_t v27 = *v2[2];
    uint64_t v28 = v27 + 24 * a2;
    uint64_t v29 = *(void **)v28;
    if (*(void *)v28)
    {
      *(void *)(v27 + 24 * a2 + 8) = v29;
      operator delete(v29);
      *(void *)uint64_t v28 = 0;
      *(void *)(v28 + 8) = 0;
      *(void *)(v28 + 16) = 0;
    }
    double result = *(double *)&v54;
    *(_OWORD *)uint64_t v28 = v54;
    *(void *)(v27 + 24 * a2 + 16) = v55;
  }
  return result;
}

void sub_24847B7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char *a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  sub_24847B828(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_24847B800(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

char **sub_24847B828(char **a1)
{
  uint64_t v2 = a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  unsigned int v13 = (void **)(a1 + 18);
  sub_2483F87EC(&v13);
  int v3 = a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unsigned int v13 = (void **)(a1 + 9);
  sub_2483F87EC(&v13);
  unsigned int v13 = (void **)(a1 + 6);
  sub_2483F87EC(&v13);
  uint64_t v5 = a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = a1[1];
    int v8 = *a1;
    if (v7 != v6)
    {
      unint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = (void *)*((void *)v9 - 3);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *((void *)v7 - 2) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      int v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_24847B910(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
LABEL_2:
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 8 * v2;
  uint64_t v6 = a1 + 8 * v2;
  do
  {
    unsigned int v7 = *(_DWORD *)(v6 + 4 * v4);
    unsigned int v8 = *(_DWORD *)(v5 + 4 * v4);
    if (v7 < v8) {
      return 1;
    }
    BOOL v9 = v8 >= v7;
    char v10 = v3 ^ 1;
    char v3 = 1;
    char v11 = v9 & v10;
    uint64_t v4 = 1;
  }
  while ((v11 & 1) != 0);
  char v12 = 0;
  uint64_t v13 = 0;
  while (1)
  {
    unsigned int v14 = *(_DWORD *)(v5 + 4 * v13);
    unsigned int v15 = *(_DWORD *)(v6 + 4 * v13);
    if (v14 < v15) {
      break;
    }
    BOOL v16 = v15 >= v14;
    char v17 = v12 ^ 1;
    char v12 = 1;
    char v18 = v16 & v17;
    uint64_t v13 = 1;
    if ((v18 & 1) == 0)
    {
      if (++v2 != 2) {
        goto LABEL_2;
      }
      break;
    }
  }
  uint64_t v19 = 0;
LABEL_10:
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a1 + 8 * v19;
  uint64_t v23 = a2 + 8 * v19;
  do
  {
    unsigned int v24 = *(_DWORD *)(v23 + 4 * v21);
    unsigned int v25 = *(_DWORD *)(v22 + 4 * v21);
    if (v24 < v25) {
      return 0;
    }
    BOOL v26 = v25 >= v24;
    char v27 = v20 ^ 1;
    char v20 = 1;
    char v28 = v26 & v27;
    uint64_t v21 = 1;
  }
  while ((v28 & 1) != 0);
  char v29 = 0;
  uint64_t v30 = 0;
  while (1)
  {
    unsigned int v31 = *(_DWORD *)(v22 + 4 * v30);
    unsigned int v32 = *(_DWORD *)(v23 + 4 * v30);
    if (v31 < v32) {
      return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
    }
    BOOL v33 = v32 >= v31;
    char v34 = v29 ^ 1;
    char v29 = 1;
    char v35 = v33 & v34;
    uint64_t v30 = 1;
    if ((v35 & 1) == 0)
    {
      if (++v19 != 2) {
        goto LABEL_10;
      }
      return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
    }
  }
}

uint64_t sub_24847BA34(long long *a1, long long *a2, long long *a3)
{
  long long v30 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  long long v28 = *a1;
  int v7 = *((_DWORD *)a1 + 4);
  int v31 = v6;
  int v29 = v7;
  if (sub_24847B910((uint64_t)&v30, (uint64_t)&v28))
  {
    long long v30 = *a3;
    int v8 = *((_DWORD *)a3 + 4);
    long long v28 = *a2;
    int v31 = v8;
    int v29 = v6;
    uint64_t result = sub_24847B910((uint64_t)&v30, (uint64_t)&v28);
    if (result)
    {
      int v10 = *((_DWORD *)a1 + 4);
      long long v11 = *a1;
      int v12 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v12;
    }
    else
    {
      int v22 = *((_DWORD *)a1 + 4);
      long long v23 = *a1;
      int v24 = *((_DWORD *)a2 + 4);
      *a1 = *a2;
      *((_DWORD *)a1 + 4) = v24;
      *a2 = v23;
      *((_DWORD *)a2 + 4) = v22;
      long long v30 = *a3;
      int v25 = *((_DWORD *)a3 + 4);
      long long v28 = *a2;
      int v26 = *((_DWORD *)a2 + 4);
      int v31 = v25;
      int v29 = v26;
      uint64_t result = sub_24847B910((uint64_t)&v30, (uint64_t)&v28);
      if (!result) {
        return result;
      }
      int v10 = *((_DWORD *)a2 + 4);
      long long v11 = *a2;
      int v27 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v27;
    }
    *a3 = v11;
    *((_DWORD *)a3 + 4) = v10;
  }
  else
  {
    long long v30 = *a3;
    int v13 = *((_DWORD *)a3 + 4);
    long long v28 = *a2;
    int v31 = v13;
    int v29 = v6;
    uint64_t result = sub_24847B910((uint64_t)&v30, (uint64_t)&v28);
    if (result)
    {
      int v14 = *((_DWORD *)a2 + 4);
      long long v15 = *a2;
      int v16 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v16;
      *a3 = v15;
      *((_DWORD *)a3 + 4) = v14;
      long long v30 = *a2;
      int v17 = *((_DWORD *)a2 + 4);
      long long v28 = *a1;
      int v18 = *((_DWORD *)a1 + 4);
      int v31 = v17;
      int v29 = v18;
      uint64_t result = sub_24847B910((uint64_t)&v30, (uint64_t)&v28);
      if (result)
      {
        int v19 = *((_DWORD *)a1 + 4);
        long long v20 = *a1;
        int v21 = *((_DWORD *)a2 + 4);
        *a1 = *a2;
        *((_DWORD *)a1 + 4) = v21;
        *a2 = v20;
        *((_DWORD *)a2 + 4) = v19;
      }
    }
  }
  return result;
}

__n128 sub_24847BBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24847BA34((long long *)a1, (long long *)a2, (long long *)a3);
  long long v25 = *(_OWORD *)a4;
  int v8 = *(_DWORD *)(a4 + 16);
  long long v23 = *(_OWORD *)a3;
  int v9 = *(_DWORD *)(a3 + 16);
  int v26 = v8;
  int v24 = v9;
  if (sub_24847B910((uint64_t)&v25, (uint64_t)&v23))
  {
    int v11 = *(_DWORD *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    int v13 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_DWORD *)(a4 + 16) = v11;
    long long v25 = *(_OWORD *)a3;
    int v14 = *(_DWORD *)(a3 + 16);
    long long v23 = *(_OWORD *)a2;
    int v15 = *(_DWORD *)(a2 + 16);
    int v26 = v14;
    int v24 = v15;
    if (sub_24847B910((uint64_t)&v25, (uint64_t)&v23))
    {
      int v16 = *(_DWORD *)(a2 + 16);
      long long v17 = *(_OWORD *)a2;
      int v18 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v18;
      *(_OWORD *)a3 = v17;
      *(_DWORD *)(a3 + 16) = v16;
      long long v25 = *(_OWORD *)a2;
      int v19 = *(_DWORD *)(a2 + 16);
      long long v23 = *(_OWORD *)a1;
      int v20 = *(_DWORD *)(a1 + 16);
      int v26 = v19;
      int v24 = v20;
      if (sub_24847B910((uint64_t)&v25, (uint64_t)&v23))
      {
        int v21 = *(_DWORD *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        int v22 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v22;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_24847BD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  sub_24847BBFC(a1, a2, a3, a4);
  __n128 v32 = *a5;
  __int32 v10 = a5[1].n128_i32[0];
  __n128 v30 = *(__n128 *)a4;
  int v11 = *(_DWORD *)(a4 + 16);
  int v33 = v10;
  int v31 = v11;
  if (sub_24847B910((uint64_t)&v32, (uint64_t)&v30))
  {
    unsigned __int32 v13 = *(_DWORD *)(a4 + 16);
    __n128 v14 = *(__n128 *)a4;
    __int32 v15 = a5[1].n128_i32[0];
    *(__n128 *)a4 = *a5;
    *(_DWORD *)(a4 + 16) = v15;
    *a5 = v14;
    a5[1].n128_u32[0] = v13;
    __n128 v32 = *(__n128 *)a4;
    int v16 = *(_DWORD *)(a4 + 16);
    __n128 v30 = *(__n128 *)a3;
    int v17 = *(_DWORD *)(a3 + 16);
    int v33 = v16;
    int v31 = v17;
    if (sub_24847B910((uint64_t)&v32, (uint64_t)&v30))
    {
      int v18 = *(_DWORD *)(a3 + 16);
      __n128 v19 = *(__n128 *)a3;
      int v20 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v20;
      *(__n128 *)a4 = v19;
      *(_DWORD *)(a4 + 16) = v18;
      __n128 v32 = *(__n128 *)a3;
      int v21 = *(_DWORD *)(a3 + 16);
      __n128 v30 = *(__n128 *)a2;
      int v22 = *(_DWORD *)(a2 + 16);
      int v33 = v21;
      int v31 = v22;
      if (sub_24847B910((uint64_t)&v32, (uint64_t)&v30))
      {
        int v23 = *(_DWORD *)(a2 + 16);
        __n128 v24 = *(__n128 *)a2;
        int v25 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v25;
        *(__n128 *)a3 = v24;
        *(_DWORD *)(a3 + 16) = v23;
        __n128 v32 = *(__n128 *)a2;
        int v26 = *(_DWORD *)(a2 + 16);
        __n128 v30 = *(__n128 *)a1;
        int v27 = *(_DWORD *)(a1 + 16);
        int v33 = v26;
        int v31 = v27;
        if (sub_24847B910((uint64_t)&v32, (uint64_t)&v30))
        {
          int v28 = *(_DWORD *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          int v29 = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = v29;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v28;
        }
      }
    }
  }
  return result;
}

BOOL sub_24847BEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v24 = *(_OWORD *)(a2 - 20);
      int v6 = *(_DWORD *)(a2 - 4);
      long long v22 = *(_OWORD *)a1;
      int v7 = *(_DWORD *)(a1 + 16);
      int v25 = v6;
      int v23 = v7;
      if (sub_24847B910((uint64_t)&v24, (uint64_t)&v22))
      {
        uint64_t v8 = a2 - 20;
        int v9 = *(_DWORD *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(_DWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_24847BA34((long long *)a1, (long long *)(a1 + 20), (long long *)(a2 - 20));
      return 1;
    case 4uLL:
      sub_24847BBFC(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      sub_24847BD2C(a1, a1 + 20, a1 + 40, a1 + 60, (__n128 *)(a2 - 20));
      return 1;
    default:
      uint64_t v12 = a1 + 40;
      sub_24847BA34((long long *)a1, (long long *)(a1 + 20), (long long *)(a1 + 40));
      uint64_t v13 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    int v16 = *(_DWORD *)(v13 + 16);
    long long v28 = *(_OWORD *)v12;
    int v17 = *(_DWORD *)(v12 + 16);
    long long v24 = *(_OWORD *)v13;
    int v25 = v16;
    long long v22 = v28;
    int v23 = v17;
    if (sub_24847B910((uint64_t)&v24, (uint64_t)&v22))
    {
      long long v27 = *(_OWORD *)v13;
      uint64_t v18 = v14;
      while (1)
      {
        uint64_t v19 = a1 + v18;
        *(_OWORD *)(v19 + 60) = *(_OWORD *)(a1 + v18 + 40);
        *(_DWORD *)(v19 + 76) = *(_DWORD *)(a1 + v18 + 56);
        if (v18 == -40) {
          break;
        }
        long long v26 = *(_OWORD *)(v19 + 20);
        int v20 = *(_DWORD *)(v19 + 36);
        long long v24 = v27;
        int v25 = v16;
        long long v22 = v26;
        int v23 = v20;
        v18 -= 20;
        if ((sub_24847B910((uint64_t)&v24, (uint64_t)&v22) & 1) == 0)
        {
          uint64_t v21 = a1 + v18 + 60;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v21 = v27;
      *(_DWORD *)(v21 + 16) = v16;
      if (++v15 == 8) {
        return v13 + 20 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 20;
    v13 += 20;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL sub_24847C12C(uint64_t a1, char **a2)
{
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 5);
  unint64_t v8 = v4 - v7;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      long long v28 = (void (***)(void))(v5
                                          + 0x745D1745D1745D20
                                          * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
      if ((void (***)(void))v6 != v28)
      {
        uint64_t v29 = (void (***)(void))(v6 - 96);
        __n128 v30 = v29;
        int v31 = v29;
        do
        {
          __n128 v32 = *v31;
          v31 -= 12;
          (*v32)(v30);
          v29 -= 12;
          BOOL v33 = v30 == v28;
          __n128 v30 = v31;
        }
        while (!v33);
      }
      *(void *)(a1 + 176) = v28;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v6) >> 5) >= v8)
    {
      unint64_t v34 = v6 + 96 * v8;
      uint64_t v35 = 0x745D1745D1745D20 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 32 * ((v6 - v5) >> 5);
      do
      {
        sub_2484294B8(v6);
        v6 += 96;
        v35 -= 96;
      }
      while (v35);
      *(void *)(a1 + 176) = v34;
    }
    else
    {
      if (v4 > 0x2AAAAAAAAAAAAAALL) {
        sub_2483E92E8();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 5);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v4) {
        uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
      }
      if (v10 >= 0x155555555555555) {
        unint64_t v12 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v43 = a1 + 184;
      if (v12 > 0x2AAAAAAAAAAAAAALL) {
        sub_2483E9338();
      }
      uint64_t v13 = 3 * v12;
      uint64_t v14 = (char *)operator new(96 * v12);
      uint64_t v15 = 3 * v7;
      uint64_t v16 = (uint64_t)&v14[96 * v7];
      unint64_t v40 = v14;
      v41.i64[0] = v16;
      v41.i64[1] = v16;
      uint64_t v42 = &v14[32 * v13];
      int v17 = &v14[96 * v4];
      uint64_t v18 = 96 * v4 - 32 * v15;
      do
      {
        sub_2484294B8(v16);
        v16 += 96;
        v18 -= 96;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v20 = *(void *)(a1 + 168);
      unint64_t v19 = *(void *)(a1 + 176);
      uint64_t v21 = v41.i64[0];
      if (v19 == v20)
      {
        int64x2_t v27 = vdupq_n_s64(v19);
      }
      else
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = v21 + v22;
          *(void *)(v23 - 96) = &unk_26FC65988;
          uint64_t v24 = v19 + v22;
          *(unsigned char *)(v23 - 88) = *(unsigned char *)(v19 + v22 - 88);
          *(void *)(v23 - 80) = &unk_26FC66948;
          long long v25 = *(_OWORD *)(v19 + v22 - 72);
          long long v26 = *(_OWORD *)(v19 + v22 - 56);
          *(_OWORD *)(v23 - 40) = *(_OWORD *)(v19 + v22 - 40);
          *(_OWORD *)(v23 - 56) = v26;
          *(_OWORD *)(v23 - 72) = v25;
          *(void *)(v23 - 16) = 0;
          *(void *)(v23 - 8) = 0;
          *(void *)(v23 - 24) = 0;
          *(_OWORD *)(v23 - 24) = *(_OWORD *)(v19 + v22 - 24);
          *(void *)(v23 - 8) = *(void *)(v19 + v22 - 8);
          *(void *)(v24 - 24) = 0;
          *(void *)(v24 - 16) = 0;
          *(void *)(v24 - 8) = 0;
          v22 -= 96;
        }
        while (v19 + v22 != v20);
        v21 += v22;
        int64x2_t v27 = *(int64x2_t *)(a1 + 168);
        int v17 = (char *)v41.i64[1];
      }
      *(void *)(a1 + 168) = v21;
      *(void *)(a1 + 176) = v17;
      int64x2_t v41 = v27;
      uint64_t v36 = *(char **)(a1 + 184);
      *(void *)(a1 + 184) = v42;
      uint64_t v42 = v36;
      unint64_t v40 = (char *)v27.i64[0];
      sub_248420C50((uint64_t)&v40);
    }
  }
  sub_2484477B4(a1 + 192, v4);
  sub_2483FEEE4((char **)(a1 + 1200), v4);
  uint64_t v39 = a1;
  if (a2)
  {
    uint64_t v37 = a2;
  }
  else
  {
    unint64_t v40 = 0;
    v41.i64[0] = (uint64_t)&v40;
    uint64_t v37 = &v40;
  }
  return sub_24847C440((uint64_t)v37, v4, (uint64_t)&v39);
}

void sub_24847C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 176) = v13;
  _Unwind_Resume(exception_object);
}

BOOL sub_24847C440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24847C59C, sub_24847C4F0, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24847C4F0((uint64_t)v6, i);
  return 0;
}

uint64_t sub_24847C4F0(uint64_t a1, unsigned int a2)
{
  int v3 = **(void ***)(a1 + 8);
  bzero(v6, 0x2BCuLL);
  uint64_t v4 = v3[24] + 24 * a2;
  *(void *)(v4 + 8) = *(void *)v4;
  return sub_2484A0E7C((void *)(v3[6] + 88 * a2), (long long *)(v3[9] + 152 * a2), 0, (uint64_t)v6, 0, a2, 0, 0, v3 + 15, v3[21] + 96 * a2, (void **)v4, (unint64_t *)(v3[150] + 8 * a2));
}

uint64_t sub_24847C59C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_24847C5C4(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_24840A1D8(a5, a1[60], a1[61]);
  unint64_t v10 = (void *)(a1[6] + 88 * v9);
  if (*v10 != v10[1])
  {
    if (a1[24] == a1[25])
    {
      uint64_t result = sub_2484A0E7C(v10, (long long *)(a1[9] + 152 * v9), a2, a3, a4, v9, 0, 0, 0, 0, 0, 0);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_2484DA1C4(a1[21] + 96 * v9, a2, a4, a3);
      if (result) {
        return result;
      }
      sub_24844A2B4(a1[24] + 24 * v9, (uint64_t)(a1 + 27), a1 + 43, 0, a2, a4, a3);
    }
  }
  return 0;
}

void sub_24847C6C0(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_24840A1D8(a2, a1[60], a1[61]);
  memset(v7, 0, sizeof(v7));
  int v8 = 8;
  uint64_t v9 = 0;
  char v10 = 1;
  uint64_t v4 = a1[6] + 88 * v3;
  long long v11 = *(_OWORD *)v4;
  uint64_t v12 = *(void *)(v4 + 16);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  long long v13 = *(_OWORD *)(v4 + 24);
  uint64_t v14 = *(void *)(v4 + 40);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  long long v5 = *(_OWORD *)(v4 + 48);
  long long v6 = *(_OWORD *)(v4 + 64);
  char v17 = *(unsigned char *)(v4 + 80);
  long long v15 = v5;
  long long v16 = v6;
  sub_24842A35C(v4, (uint64_t)v7);
  sub_24842A35C((uint64_t)v7, (uint64_t)&v11);
  uint64_t v18 = (void **)&v13;
  sub_2483FDBFC(&v18);
  uint64_t v18 = (void **)&v11;
  sub_2483FDCBC(&v18);
  *(void *)&long long v11 = (char *)&v7[1] + 8;
  sub_2483FDBFC((void ***)&v11);
  *(void *)&long long v11 = v7;
  sub_2483FDCBC((void ***)&v11);
}

void sub_24847C7C0(void *a1)
{
  uint64_t v2 = a1[154];
  uint64_t v3 = a1[155];
  if (v2 != v3)
  {
    do
    {
      sub_24847C6C0(a1, v2 + 40);
      v2 += 72;
    }
    while (v2 != v3);
    uint64_t v2 = a1[154];
  }
  a1[155] = v2;
}

uint64_t sub_24847C818(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, float a7, float a8)
{
  float v8 = a7 * a8;
  sub_24847C8BC((uint64_t)v14, a5, a1 + 4 * a3, a2, a3, a4, 6, a6);
  float v9 = v8 - (float)v15;
  if (v9 < 0.62 && v9 > -0.62) {
    float v9 = 0.0;
  }
  int v11 = llroundf(v9);
  float v12 = roundf(v9 * 0.5);
  if ((v11 - 3) < 0xFFFFFFFB) {
    int v11 = (int)(float)(v12 + v12);
  }
  return (v11 + v15);
}

uint64_t sub_24847C8BC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, signed int a5, unsigned int a6, int a7, uint64_t a8)
{
  uint64_t v8 = a5;
  if (!a5)
  {
    if (!a6)
    {
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      goto LABEL_20;
    }
    int v9 = *(_DWORD *)(a3 - 4 * a4);
    uint64_t v12 = v9;
    uint64_t v10 = v9;
    uint64_t v11 = v9;
    goto LABEL_6;
  }
  int v9 = *(_DWORD *)(a3 - 4);
  uint64_t v10 = v9;
  if (a6)
  {
    uint64_t v11 = *(int *)(a3 + 4 * ~a4);
    uint64_t v12 = *(int *)(a3 - 4 * a4);
LABEL_6:
    char v13 = 1;
    if (a5 + 1 >= a2) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = *(int *)(a3 + 4 * (1 - a4));
    }
    goto LABEL_10;
  }
  char v13 = 0;
  uint64_t v11 = v9;
  uint64_t v12 = v9;
  uint64_t v14 = v9;
LABEL_10:
  uint64_t v15 = v10;
  if (a5 >= 2) {
    uint64_t v15 = *(int *)(a3 - 8);
  }
  uint64_t v16 = v12;
  if (a6 >= 2) {
    uint64_t v16 = *(int *)(a3 - 8 * a4);
  }
  char v17 = v13 ^ 1;
  if (a5 + 2 >= a2) {
    char v17 = 1;
  }
  if (v17) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = *(int *)(a3 + 4 * (2 - a4));
  }
LABEL_20:
  uint64_t v19 = 0;
  unint64_t v20 = a2 + 2;
  if (a6) {
    unint64_t v21 = a2 + 2;
  }
  else {
    unint64_t v21 = 0;
  }
  unint64_t v22 = v21 + a5;
  if (a2 - 1 <= a5) {
    unint64_t v23 = v21 + a5;
  }
  else {
    unint64_t v23 = v22 + 1;
  }
  if (a5) {
    unint64_t v24 = v22 - 1;
  }
  else {
    unint64_t v24 = v21;
  }
  for (uint64_t i = 40; i != 136; i += 24)
  {
    unint64_t v26 = (*(_DWORD *)(*(void *)(a8 + i) + 4 * v23)
                       + *(_DWORD *)(*(void *)(a8 + i) + 4 * v22)
                       + *(_DWORD *)(*(void *)(a8 + i) + 4 * v24));
    int v27 = __clz(v26 + 1) ^ 0x3F;
    if (v27 <= 5) {
      LOBYTE(v27) = 5;
    }
    v58.i32[v19] = ((*(_DWORD *)(a8 + 4 * (v26 >> (v27 - 5)) + 216)
                                 * *(_DWORD *)(a8 + v19 * 4 + 200)) >> (v27 - 5))
                 + 4;
    ++v19;
  }
  uint64_t v28 = 8 * v12;
  uint64_t v29 = 8 * v10;
  uint64_t v30 = 8 * v14;
  if (a5)
  {
    if (a6) {
      unint64_t v31 = 0;
    }
    else {
      unint64_t v31 = v20;
    }
    uint64_t v32 = *(void *)(a8 + 136);
    uint64_t v33 = *(int *)(v32 + 4 * (v8 + v31) - 4);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v32 = *(void *)(a8 + 136);
  }
  uint64_t v34 = 0;
  uint64_t v35 = *(int *)(v32 + 4 * v22);
  uint64_t v36 = *(int *)(v32 + 4 * v24);
  uint64_t v37 = *(int *)(v32 + 4 * v23);
  uint64_t v38 = *(int *)(a8 + 176);
  uint64_t v39 = v28 - (((v33 + v35 + v37) * *(int *)(a8 + 172)) >> 5);
  *(void *)a8 = v30 - v28 + v29;
  *(void *)(a8 + 8) = v39;
  uint64_t v40 = v28
      - ((*(int *)(a8 + 180) * (uint64_t)(int)v36
        + *(int *)(a8 + 184) * (uint64_t)(int)v35
        + *(int *)(a8 + 188) * (uint64_t)(int)v37
        + 8 * ((v16 - v12) * *(int *)(a8 + 192) + (v11 - v10) * *(int *)(a8 + 196))) >> 5);
  *(void *)(a8 + 16) = v29 - (((v33 + v35 + v36) * v38) >> 5);
  *(void *)(a8 + 24) = v40;
  int32x4_t v59 = (int32x4_t)vshlq_u32(v58, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v58)) ^ 0x1F) - 4)));
  unsigned int v41 = vaddvq_s32(v59);
  uint64_t v42 = (v41 >> 1) - 1;
  do
  {
    v42 += *(void *)(a8 + 8 * v34) * v59.u32[v34];
    ++v34;
  }
  while (v34 != 4);
  uint64_t v43 = v36 ^ v35 | v33 ^ v35;
  if (v30 <= v28) {
    uint64_t v44 = 8 * v12;
  }
  else {
    uint64_t v44 = 8 * v14;
  }
  if (v29 > v44) {
    uint64_t v44 = 8 * v10;
  }
  if (v28 >= v30) {
    uint64_t v28 = 8 * v14;
  }
  if (v28 < v29) {
    uint64_t v29 = v28;
  }
  if ((v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24 >= v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = (v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24;
  }
  if (v29 <= v45) {
    uint64_t v29 = v45;
  }
  if (v43 <= 0) {
    uint64_t v46 = v29;
  }
  else {
    uint64_t v46 = (v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24;
  }
  *(void *)(a8 + 32) = v46;
  *(_DWORD *)uint64_t result = 0;
  switch(a7)
  {
    case 1:
      break;
    case 2:
      uint64_t v10 = v12;
      break;
    case 3:
      BOOL v47 = __OFADD__(v10, v12);
      uint64_t v49 = v10 + v12;
      char v48 = (v49 < 0) ^ v47;
      goto LABEL_87;
    case 4:
      uint64_t v50 = v10 + v12 - v11;
      uint64_t v51 = v12 - v11;
      if (v51 < 0) {
        uint64_t v51 = -v51;
      }
      uint64_t v52 = v50 - v12;
      if (v52 < 0) {
        uint64_t v52 = -v52;
      }
      if (v51 >= (unint64_t)v52) {
        uint64_t v10 = v12;
      }
      break;
    case 5:
      if (v9 >= (int)v12) {
        LODWORD(v10) = v12;
      }
      else {
        LODWORD(v10) = v9;
      }
      if (v9 <= (int)v12) {
        int v53 = v12;
      }
      else {
        int v53 = v9;
      }
      int v54 = v9 + v12 - v11;
      if ((int)v10 > (int)v11) {
        int v54 = v53;
      }
      if (v53 >= (int)v11) {
        LODWORD(v10) = v54;
      }
      uint64_t v10 = (int)v10;
      break;
    case 6:
      uint64_t v10 = (v46 + 3) >> 3;
      break;
    case 7:
      uint64_t v10 = v14;
      break;
    case 8:
      uint64_t v10 = v11;
      break;
    case 9:
      uint64_t v10 = v15;
      break;
    case 10:
      BOOL v47 = __OFADD__(v11, v10);
      uint64_t v49 = v11 + v10;
      char v48 = (v49 < 0) ^ v47;
      goto LABEL_87;
    case 11:
      uint64_t v49 = v11 + v12;
      char v48 = (v11 + v12 < 0) ^ __OFADD__(v11, v12);
      goto LABEL_87;
    case 12:
      uint64_t v49 = v12 + v14;
      char v48 = (v12 + v14 < 0) ^ __OFADD__(v12, v14);
LABEL_87:
      if (v48) {
        ++v49;
      }
      uint64_t v10 = v49 >> 1;
      break;
    case 13:
      uint64_t v55 = 3 * v14 - 2 * v16 + 6 * (int)v12 - v10 + 8 * v10 + v15 + v18;
      uint64_t v56 = v55 + 8;
      uint64_t v57 = v55 + 23;
      if (v56 >= 0) {
        uint64_t v57 = v56;
      }
      uint64_t v10 = v57 >> 4;
      break;
    default:
      uint64_t v10 = 0;
      break;
  }
  *(void *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = a7;
  return result;
}

uint64_t sub_24847CD08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  uint64_t v6 = a1 + 4 * a3;
  if (a3)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    if (a4)
    {
      int v8 = *(_DWORD *)(v6 + 4 * ~a2);
      int v9 = *(_DWORD *)(v6 - 4 * a2);
    }
    else
    {
      int v9 = *(_DWORD *)(v6 - 4);
      int v8 = v7;
    }
  }
  else if (a4)
  {
    int v9 = *(_DWORD *)(v6 - 4 * a2);
    int v7 = v9;
    int v8 = v9;
  }
  else
  {
    int v9 = 0;
    int v7 = 0;
    int v8 = 0;
  }
  if (v7 >= v9) {
    int v10 = v9;
  }
  else {
    int v10 = v7;
  }
  if (v7 <= v9) {
    int v11 = v9;
  }
  else {
    int v11 = v7;
  }
  int v12 = v7 + v9 - v8;
  if (v10 > v8) {
    int v12 = v11;
  }
  if (v11 < v8) {
    int v12 = v10;
  }
  float v13 = (float)(a5 * a6) - (float)v12;
  if (v13 < 0.62 && v13 > -0.62) {
    float v13 = 0.0;
  }
  int v15 = llroundf(v13);
  float v16 = roundf(v13 * 0.5);
  if ((v15 - 3) < 0xFFFFFFFB) {
    int v15 = (int)(float)(v16 + v16);
  }
  return (v15 + v12);
}

uint64_t sub_24847CDD8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v183 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1[3] + a5) = a6;
  char v10 = *(unsigned char *)(a1[3] + a5);
  *(_DWORD *)long long v172 = 1;
  *(void *)&v172[8] = 0;
  *(void *)&v172[16] = a5;
  *(void *)&long long v173 = 0;
  uint64_t v11 = sub_24840A1D8((uint64_t)v172, a1[60], a1[61]);
  int v12 = a1;
  uint64_t v13 = a1[9];
  uint64_t v14 = v13 + 152 * v11;
  *(void *)uint64_t v14 = 0xFFFFFFLL;
  *(_DWORD *)(v14 + 64) = 6;
  int v15 = (int *)(v14 + 64);
  *(_DWORD *)(v14 + 76) = 1;
  float v16 = (_DWORD *)(v14 + 76);
  int v17 = *((_DWORD *)v12 + 140);
  if (v17 <= 2)
  {
    if (a6) {
      goto LABEL_9;
    }
    if (v17 >= 2) {
      int v19 = 14;
    }
    else {
      int v19 = 15;
    }
    *int v15 = v19;
    *float v16 = 3;
    int v18 = 1;
  }
  else
  {
    int v18 = 5;
  }
  *(_DWORD *)(v13 + 152 * v11 + 84) = v18;
LABEL_9:
  int v137 = v12;
  if (v12[71]) {
    *(_DWORD *)(v13 + 152 * v11 + 84) = 6;
  }
  *(_OWORD *)(v13 + 152 * v11 + 88) = *(_OWORD *)(v13 + 88);
  uint64_t v135 = v11;
  if (v11)
  {
    sub_248467FE0((char *)(v13 + 104 + 152 * v11), *(char **)(v13 + 104), *(void *)(v13 + 112), (uint64_t)(*(void *)(v13 + 112) - *(void *)(v13 + 104)) >> 3);
    uint64_t v11 = v135;
  }
  uint64_t v20 = v13 + 152 * v11;
  uint64_t v21 = *(void *)(v13 + 128);
  *(void *)(v20 + 133) = *(void *)(v13 + 133);
  *(void *)(v20 + 128) = v21;
  sub_24842A0C4((uint64_t)&v164, a4[2], a4[3], 8, 3);
  uint64_t v22 = v171;
  if (!v171)
  {
    float v23 = (float)(1 << v10);
    *(_OWORD *)long long v172 = v164;
    long long v164 = 0uLL;
    long long v173 = v166;
    *(void *)&v172[16] = v165;
    uint64_t v174 = v167;
    uint64_t v165 = 0;
    long long v166 = 0uLL;
    uint64_t v167 = 0;
    long long v175 = v168;
    long long v176 = v169;
    uint64_t v24 = v137[6] + 88 * v135;
    char v177 = v170;
    sub_24842A35C(v24, (uint64_t)v172);
    uint64_t v162 = (void **)&v173;
    sub_2483FDBFC(&v162);
    uint64_t v162 = (void **)v172;
    sub_2483FDCBC(&v162);
    uint64_t v140 = a4;
    if (a6)
    {
      if (*(_DWORD *)(v137[9] + 152 * v135 + 84) == 6)
      {
        uint64_t v149 = 0;
        *(void *)long long v172 = 1;
        *(_DWORD *)&v172[8] = 2;
        float v25 = *(float *)(a7 + 996);
        float v26 = (float)(*(float *)(a7 + 1000) * *(float *)(*(void *)(a7 + 1016) + 52)) / v23;
        uint64_t v147 = *(void *)(a7 + 1016);
        uint64_t v157 = a4[3];
        uint64_t v153 = *(void *)(a3 + 16);
        uint64_t v144 = a4[1] * v153 + 4 * *a4;
        do
        {
          if (v157)
          {
            uint64_t v27 = 0;
            unint64_t v28 = *(int *)&v172[4 * v149];
            float v29 = (float)(*(float *)(v147 + 4 * v28 + 60) * (float)(v25 * (float)*(int *)(a7 + 988))) * v23;
            uint64_t v151 = *(void *)(v137[6] + 88 * v135);
            uint64_t v30 = v151 + (((v28 < 2) ^ v28) << 6);
            unint64_t v31 = *(void *)(v30 + 16);
            uint64_t v32 = *(void *)(v30 + 24);
            int v155 = *(_DWORD *)&v172[4 * v149];
            uint64_t v33 = v140[2];
            float v34 = *(float *)(a7 + 1184 + 4 * v28) * v26;
            uint64_t v35 = *(void *)(a3 + 40 * (int)v28 + 24) + v144;
            uint64_t v36 = v32;
            do
            {
              if (v155 == 1)
              {
                if (v33)
                {
                  for (uint64_t i = 0; i != v33; ++i)
                    *(_DWORD *)(v32 + 4 * i) = sub_24847CD08(v36 + v31 * v27, v31 >> 2, i, v27, *(float *)(v35 + 4 * i), v29);
                }
              }
              else if (v33)
              {
                uint64_t v38 = 0;
                uint64_t v39 = *(void *)(v151 + 24) + *(void *)(v151 + 16) * v27;
                do
                {
                  *(_DWORD *)(v32 + 4 * v38) = sub_24847CD08(v36 + v31 * v27, v31 >> 2, v38, v27, *(float *)(v35 + 4 * v38)- (float)((float)*(int *)(v39 + 4 * v38) * v34), v29);
                  ++v38;
                }
                while (v33 != v38);
              }
              ++v27;
              v32 += v31;
              v35 += v153;
            }
            while (v27 != v157);
          }
          ++v149;
        }
        while (v149 != 3);
        a4 = v140;
      }
      else
      {
        uint64_t v66 = 0;
        uint64_t v181 = 1;
        int v182 = 2;
        do
        {
          unint64_t v67 = *((int *)&v181 + v66);
          uint64_t v68 = *(void *)(a7 + 1016);
          float v69 = *(float *)(v68 + 4 * v67 + 60);
          float v70 = *(float *)(a7 + 996);
          int v71 = *(_DWORD *)(a7 + 988);
          float v72 = *(float *)(a7 + 1000);
          float v73 = *(float *)(v68 + 52);
          unint64_t v152 = v67;
          float v74 = *(float *)(a7 + 1184 + 4 * v67);
          uint64_t v162 = (void **)&unk_26FC66948;
          *(_OWORD *)((char *)v163 + 4) = 0u;
          *(_OWORD *)((char *)&v163[1] + 4) = 0u;
          v163[2] = 0u;
          *(_OWORD *)&v172[8] = xmmword_2484DC960;
          *(void *)long long v172 = &unk_26FC65A00;
          *(void *)&long long v173 = 0;
          sub_248429138(&v162, (uint64_t)v172);
          uint64_t v136 = v66;
          float v158 = &unk_26FC66948;
          long long v159 = v163[0];
          long long v160 = v163[1];
          long long v161 = v163[2];
          sub_248428438((uint64_t)v172, (uint64_t)&v158, a4[2]);
          uint64_t v150 = a4[3];
          if (v150)
          {
            uint64_t v75 = 0;
            float v76 = (float)(v69 * (float)(v70 * (float)v71)) * v23;
            unint64_t v148 = (v152 < 2) ^ v152;
            float v77 = v74 * (float)((float)(v72 * v73) / v23);
            uint64_t v146 = v137[6] + 88 * v135;
            uint64_t v143 = *(void *)(a3 + 40 * (int)v152 + 24);
            uint64_t v145 = *(void *)(a3 + 16);
            uint64_t v141 = *v140;
            uint64_t v142 = v140[1];
            unint64_t v154 = v140[2];
            do
            {
              unint64_t v78 = *(void *)(*(void *)v146 + (v148 << 6) + 16);
              uint64_t v79 = *(void *)(*(void *)v146 + (v148 << 6) + 24) + v78 * v75;
              uint64_t v80 = v78 >> 2;
              uint64_t v81 = v143 + v145 * (v142 + v75) + 4 * v141;
              if (v152 == 1)
              {
                if (v154)
                {
                  uint64_t v82 = 0;
                  unint64_t v83 = v140[2];
                  if (v75) {
                    unint64_t v84 = 0;
                  }
                  else {
                    unint64_t v84 = v83 + 2;
                  }
                  if (v83 <= 1) {
                    uint64_t v85 = 1;
                  }
                  else {
                    uint64_t v85 = v140[2];
                  }
                  unint64_t v86 = v154;
                  do
                  {
                    int v87 = sub_24847C818(v79, v80, v82, v75, v86, (uint64_t)v172, *(float *)(v81 + 4 * v82), v76);
                    uint64_t v88 = 0;
                    *(_DWORD *)(v79 + 4 * v82) = v87;
                    uint64_t v89 = 8 * v87;
                    unint64_t v90 = v84 + v82;
                    *((_DWORD *)__p + v84 + v82++) = DWORD2(v173) - v89;
                    int v91 = &v174;
                    do
                    {
                      uint64_t v92 = *(void *)&v172[v88] - v89;
                      if (v92 < 0) {
                        uint64_t v92 = v89 - *(void *)&v172[v88];
                      }
                      unint64_t v93 = (unint64_t)(v92 + 3) >> 3;
                      uint64_t v94 = *v91;
                      v91 += 3;
                      *(_DWORD *)(v94 + 4 * v90) = v93;
                      *(_DWORD *)(v94 + 4 * (v82 + ((v75 << 63 >> 63) & (v83 + 2)))) += v93;
                      v88 += 8;
                    }
                    while (v88 != 32);
                    unint64_t v86 = v83;
                  }
                  while (v82 != v85);
                }
              }
              else if (v154)
              {
                uint64_t v95 = 0;
                uint64_t v156 = *(void *)(*(void *)v146 + 24) + *(void *)(*(void *)v146 + 16) * v75;
                unint64_t v96 = v140[2];
                if (v75) {
                  unint64_t v97 = 0;
                }
                else {
                  unint64_t v97 = v96 + 2;
                }
                if (v96 <= 1) {
                  uint64_t v98 = 1;
                }
                else {
                  uint64_t v98 = v140[2];
                }
                unint64_t v99 = v154;
                do
                {
                  int v100 = sub_24847C818(v79, v80, v95, v75, v99, (uint64_t)v172, *(float *)(v81 + 4 * v95) - (float)((float)*(int *)(v156 + 4 * v95) * v77), v76);
                  uint64_t v101 = 0;
                  *(_DWORD *)(v79 + 4 * v95) = v100;
                  uint64_t v102 = 8 * v100;
                  unint64_t v103 = v97 + v95;
                  *((_DWORD *)__p + v97 + v95++) = DWORD2(v173) - v102;
                  uint64_t v104 = &v174;
                  do
                  {
                    uint64_t v105 = *(void *)&v172[v101] - v102;
                    if (v105 < 0) {
                      uint64_t v105 = v102 - *(void *)&v172[v101];
                    }
                    unint64_t v106 = (unint64_t)(v105 + 3) >> 3;
                    uint64_t v107 = *v104;
                    v104 += 3;
                    *(_DWORD *)(v107 + 4 * v103) = v106;
                    *(_DWORD *)(v107 + 4 * (v95 + ((v75 << 63 >> 63) & (v96 + 2)))) += v106;
                    v101 += 8;
                  }
                  while (v101 != 32);
                  unint64_t v99 = v96;
                }
                while (v95 != v98);
              }
              ++v75;
            }
            while (v75 != v150);
          }
          if (__p)
          {
            int v180 = __p;
            operator delete(__p);
          }
          uint64_t v108 = 0;
          a4 = v140;
          do
          {
            uint64_t v109 = *(void **)&v178[v108];
            if (v109)
            {
              *(void *)&v178[v108 + 8] = v109;
              operator delete(v109);
            }
            v108 -= 24;
          }
          while (v108 != -96);
          uint64_t v66 = v136 + 1;
        }
        while (v136 != 2);
      }
      BOOL v47 = v137;
LABEL_85:
      sub_2483F1A40(a4, (void *)(a7 + 1632), a7 + 1592, v47[6] + 88 * v135, (float *)(a7 + 952), (float *)(a7 + 1184), a2 + 40, (int **)(a7 + 1760), 1.0 / v23);
      uint64_t v22 = 0;
      goto LABEL_86;
    }
    if (sub_2483F179C(a2 + 40))
    {
      uint64_t v40 = 0;
      *(void *)long long v172 = 1;
      *(_DWORD *)&v172[8] = 2;
      uint64_t v41 = *(void *)(a7 + 1016);
      float v42 = *(float *)(a7 + 996);
      float v43 = (float)(*(float *)(a7 + 1000) * *(float *)(v41 + 52)) / v23;
      uint64_t v44 = a4[3];
      uint64_t v45 = *(void *)(a3 + 16);
      uint64_t v46 = a4[1] * v45 + 4 * *a4;
      BOOL v47 = v137;
      do
      {
        if (v44)
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(int *)&v172[4 * v40];
          float v50 = (float)(*(float *)(v41 + 4 * v49 + 60) * (float)(v42 * (float)*(int *)(a7 + 988))) * v23;
          BOOL v51 = v49 < 2;
          uint64_t v52 = *(void *)(v137[6] + 88 * v135);
          uint64_t v54 = *(void *)(v52 + ((v51 ^ v49) << 6) + 16);
          int v53 = *(_DWORD **)(v52 + ((v51 ^ v49) << 6) + 24);
          uint64_t v55 = a4[2];
          float v56 = *(float *)(a7 + 1184 + 4 * v49) * v43;
          uint64_t v57 = (float *)(*(void *)(a3 + 40 * (int)v49 + 24) + v46);
          do
          {
            if (v49 == 1)
            {
              if (v55)
              {
                for (uint64_t j = 0; j != v55; ++j)
                  v53[j] = llroundf(v50 * v57[j]);
              }
            }
            else if (v55)
            {
              int32x4_t v59 = (int *)(*(void *)(v52 + 24) + *(void *)(v52 + 16) * v48);
              long long v60 = v57;
              long long v61 = v53;
              uint64_t v62 = v55;
              do
              {
                float v63 = *v60++;
                float v64 = v63;
                int v65 = *v59++;
                *v61++ = llroundf(v50 * (float)(v64 - (float)((float)v65 * v56)));
                --v62;
              }
              while (v62);
            }
            ++v48;
            int v53 = (_DWORD *)((char *)v53 + v54);
            uint64_t v57 = (float *)((char *)v57 + v45);
          }
          while (v48 != v44);
        }
        ++v40;
      }
      while (v40 != 3);
      goto LABEL_85;
    }
    uint64_t v111 = 0;
    *(void *)long long v172 = 1;
    *(_DWORD *)&v172[8] = 2;
    BOOL v47 = v137;
    while (1)
    {
      unint64_t v112 = *(int *)&v172[4 * v111];
      uint64_t v113 = *(unsigned int *)(a2 + 4 * v112 + 48);
      char v114 = *(unsigned char *)(a2 + 60) - byte_248550964[v113];
      unint64_t v116 = *a4;
      unint64_t v115 = a4[1];
      char v117 = *(unsigned char *)(a2 + 61) - byte_248550968[v113];
      unint64_t v118 = a4[3];
      uint64_t v119 = a4[2] >> v114;
      unint64_t v120 = v118 >> v117;
      float v121 = *(float *)(*(void *)(a7 + 1016) + 4 * v112 + 60);
      float v122 = *(float *)(a7 + 996);
      int v123 = *(_DWORD *)(a7 + 988);
      int v124 = (void *)(*(void *)(v47[6] + 88 * v135) + (((v112 < 2) ^ v112) << 6));
      v124[5] = v119;
      v124[6] = v118 >> v117;
      uint64_t v22 = sub_24840A0F4((uint64_t)v124);
      if (v22) {
        break;
      }
      BOOL v47 = v137;
      if (v120)
      {
        uint64_t v125 = 0;
        uint64_t v126 = *(void *)(a3 + 16);
        uint64_t v128 = v124[2];
        uint64_t v127 = (_DWORD *)v124[3];
        uint64_t v129 = *(void *)(a3 + 40 * (int)v112 + 24) + v126 * (v115 >> v117) + 4 * (v116 >> v114);
        do
        {
          long long v130 = (float *)v129;
          int v131 = v127;
          for (uint64_t k = v119; k; --k)
          {
            float v133 = *v130++;
            *v131++ = llroundf((float)((float)(v121 * (float)(v122 * (float)v123)) * v23) * v133);
          }
          ++v125;
          uint64_t v127 = (_DWORD *)((char *)v127 + v128);
          v129 += v126;
        }
        while (v125 != v120);
      }
      ++v111;
      a4 = v140;
      if (v111 == 3) {
        goto LABEL_85;
      }
    }
  }
LABEL_86:
  sub_24840A478((uint64_t)&v164);
  return v22;
}

void sub_24847D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_24847D94C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  LODWORD(v80) = 3;
  *((void *)&v80 + 1) = 0;
  uint64_t v81 = a3;
  *(void *)&long long v82 = 0;
  uint64_t v10 = sub_24840A1D8((uint64_t)&v80, *(void *)(a1 + 480), *(void *)(a1 + 488));
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = v12 + 152 * v10;
  *(void *)uint64_t v13 = 0xFFFFFFLL;
  if (*(_DWORD *)(v13 + 64) != 6) {
    *(_DWORD *)(v12 + 152 * v10 + 76) = 2;
  }
  if ((a4 & 1) == 0)
  {
    int v14 = *(_DWORD *)(a1 + 560);
    if (v14 <= 6)
    {
      if (v14 <= 2) {
        goto LABEL_10;
      }
      int v15 = 4;
    }
    else
    {
      int v15 = 3;
    }
LABEL_12:
    *(_DWORD *)(v12 + 152 * v10 + 84) = v15;
    goto LABEL_13;
  }
  *(_DWORD *)(v12 + 152 * v10 + 84) = 2;
  if (*(int *)(a1 + 560) <= 2)
  {
LABEL_10:
    if (!*(unsigned char *)(a1 + 697)) {
      goto LABEL_13;
    }
    int v15 = 1;
    goto LABEL_12;
  }
LABEL_13:
  *(_OWORD *)(v12 + 152 * v10 + 88) = *(_OWORD *)(v12 + 88);
  if (v10) {
    sub_248467FE0((char *)(v12 + 104 + 152 * v10), *(char **)(v12 + 104), *(void *)(v12 + 112), (uint64_t)(*(void *)(v12 + 112) - *(void *)(v12 + 104)) >> 3);
  }
  uint64_t v16 = v12 + 152 * v11;
  uint64_t v17 = *(void *)(v12 + 128);
  *(void *)(v16 + 133) = *(void *)(v12 + 133);
  *(void *)(v16 + 128) = v17;
  uint64_t v18 = *(void *)(a1 + 48);
  sub_24842A0C4((uint64_t)&v80, *(void *)(a2 + 16), *(void *)(a2 + 24), 8, 4);
  uint64_t v19 = v87;
  if (!v87)
  {
    long long v74 = v80;
    uint64_t v20 = (uint64_t *)(v18 + 88 * v11);
    *(void *)uint64_t v75 = v81;
    long long v80 = 0uLL;
    *(_OWORD *)&v75[8] = v82;
    uint64_t v76 = v83;
    uint64_t v81 = 0;
    long long v82 = 0uLL;
    uint64_t v83 = 0;
    long long v77 = v84;
    long long v78 = v85;
    char v79 = v86;
    sub_24842A35C((uint64_t)v20, (uint64_t)&v74);
    *(void *)&long long v72 = &v75[8];
    sub_2483FDBFC((void ***)&v72);
    *(void *)&long long v72 = &v74;
    sub_2483FDCBC((void ***)&v72);
    uint64x2_t v71 = *(uint64x2_t *)a2;
    uint64x2_t v21 = vshrq_n_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(7uLL)), 3uLL);
    uint64_t v22 = v21.i64[1];
    uint64_t v23 = v21.i64[0];
    sub_2484017B8((uint64_t)&v74, v21.u32[0], v21.u32[2]);
    uint64_t v19 = v76;
    if (!v76)
    {
      long long v24 = v74;
      long long v72 = v74;
      long long v25 = *(_OWORD *)v75;
      uint64_t v73 = *(void *)v75;
      uint64_t v26 = *(void *)&v75[16];
      uint64_t v27 = (void *)*v20;
      v27[5] = v23;
      v27[6] = v22;
      v27[7] = 0x300000003;
      *(_OWORD *)uint64_t v27 = v24;
      uint64_t v28 = v27[3];
      *((_OWORD *)v27 + 1) = v25;
      if (v28)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v28 - 24));
        free(*(void **)(v28 - 32));
      }
      v27[4] = v26;
      sub_2484017B8((uint64_t)&v74, v23, v22);
      uint64_t v19 = v76;
      if (!v76)
      {
        long long v29 = v74;
        long long v30 = *(_OWORD *)v75;
        uint64_t v31 = *(void *)&v75[16];
        uint64_t v32 = (void *)*v20;
        v32[13] = v23;
        v32[14] = v22;
        v32[15] = 0x300000003;
        *((_OWORD *)v32 + 4) = v29;
        uint64_t v33 = v32[11];
        *((_OWORD *)v32 + 5) = v30;
        if (v33)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v33 - 24));
          free(*(void **)(v33 - 32));
        }
        v32[12] = v31;
        uint64_t v34 = *(void *)(a2 + 24) * *(void *)(a2 + 16);
        sub_2484017B8((uint64_t)&v74, *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 16), 2u);
        uint64_t v19 = v76;
        if (!v76)
        {
          long long v35 = v74;
          long long v36 = *(_OWORD *)v75;
          uint64_t v37 = *(void *)&v75[16];
          uint64_t v38 = (void *)*v20;
          v38[21] = v34;
          v38[22] = 2;
          v38[23] = 0;
          *((_OWORD *)v38 + 8) = v35;
          v38[18] = v36;
          sub_2483EB138(v38 + 19, *((uint64_t *)&v36 + 1));
          v38[20] = v37;
          uint64_t v39 = *v20;
          uint64_t v40 = *(void *)*v20;
          *(void *)&long long v41 = v40;
          *((void *)&v41 + 1) = HIDWORD(v40);
          long long v74 = 0uLL;
          *(_OWORD *)uint64_t v75 = v41;
          uint64x2_t v42 = vshrq_n_u64(v71, 3uLL);
          sub_24847DDF4(v42.i64[0], v42.i64[1], a5[140], a5[141], &v74, v39);
          float v43 = (void *)*v20;
          long long v74 = 0uLL;
          uint64_t v44 = v43[8];
          *(void *)&long long v41 = v44;
          *((void *)&v41 + 1) = HIDWORD(v44);
          *(_OWORD *)uint64_t v75 = v41;
          sub_24847DDF4(v42.i64[0], v42.i64[1], a5[145], a5[146], &v74, (uint64_t)(v43 + 8));
          uint64_t v45 = *(void *)(a2 + 24);
          uint64_t v46 = (void *)*v20;
          if (v45)
          {
            uint64_t v47 = 0;
            uint64_t v48 = 0;
            uint64_t v49 = *(void *)(a2 + 8);
            uint64_t v50 = a5[21];
            uint64_t v51 = a5[130];
            uint64_t v52 = a5[135];
            uint64_t v53 = v46[19];
            uint64_t v54 = v53 + v46[18];
            uint64_t v55 = a5[131] + v51 * v49 + 4 * *(void *)a2;
            float v56 = (unsigned __int8 *)(a5[22] + *(void *)a2 + v50 * v49);
            uint64_t v57 = *(void *)a2 + v52 * v49;
            uint64_t v59 = v46[26];
            uint32x4_t v58 = (_DWORD *)v46[27];
            uint64_t v60 = *(void *)(a2 + 16);
            long long v61 = (unsigned __int8 *)(a5[136] + v57);
            do
            {
              uint64_t v62 = v61;
              float v63 = v58;
              float v64 = v56;
              int v65 = (_DWORD *)v55;
              for (uint64_t i = v60; i; --i)
              {
                int v67 = *v62++;
                *float v63 = v67;
                unsigned int v69 = *v64++;
                unsigned int v68 = v69;
                if (v69)
                {
                  *(_DWORD *)(v53 + 4 * v48) = v68 >> 1;
                  *(_DWORD *)(v54 + 4 * v48++) = *v65 - 1;
                }
                ++v65;
                ++v63;
              }
              ++v47;
              v55 += v51;
              v56 += v50;
              uint32x4_t v58 = (_DWORD *)((char *)v58 + v59);
              v61 += v52;
            }
            while (v47 != v45);
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v19 = 0;
          v46[21] = v48;
          *(void *)(*(void *)a1 + 8 * a3) = v48;
        }
      }
    }
  }
  sub_24840A478((uint64_t)&v80);
  return v19;
}

void sub_24847DDD8(_Unwind_Exception *a1)
{
  sub_24840A478(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_24847DDF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6 = a5[3];
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a6 + 16);
    uint64_t v9 = a5[2];
    uint64_t v10 = *(void *)(a6 + 24) + a5[1] * v8 + 4 * *a5;
    uint64_t v11 = (char *)(a4 + result + a3 * a2);
    do
    {
      uint64_t v12 = v11;
      uint64_t v13 = (_DWORD *)v10;
      for (uint64_t i = v9; i; --i)
      {
        int v15 = *v12++;
        *v13++ = v15;
      }
      ++v7;
      v10 += v8;
      v11 += a3;
    }
    while (v7 != v6);
  }
  return result;
}

double sub_24847DE58(float *a1, float *a2, uint64_t a3, double *a4, char a5)
{
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  double v10 = 0.0;
  if (a1 != a2)
  {
    uint64_t v11 = a1;
    do
    {
      float v12 = *v11;
      float v13 = fmaxf(v11[1] * 6.0, 0.0);
      float v33 = 0.0;
      float v14 = modff(v13, &v33);
      if (v13 >= 7.0) {
        unint64_t v15 = 0x3F80000000000006;
      }
      else {
        unint64_t v15 = (int)v33 | ((unint64_t)LODWORD(v14) << 32);
      }
      float v16 = *((float *)&v15 + 1);
      uint64_t v17 = (int)v15;
      double v18 = *(double *)(a3 + 8 * (int)v15);
      uint64_t v19 = (v15 << 32) + 0x100000000;
      uint64_t v20 = v19 >> 32;
      double v21 = (float)(1.0 - v16);
      double v22 = v16;
      double v23 = *(double *)(a3 + (v19 >> 29)) * v22 + v18 * v21 - v12;
      if (v23 <= 0.0)
      {
        a4[v17] = a4[v17] - v21 * v23;
        double v10 = v10 + v23 * v23;
        double v24 = a4[v20] - v22 * v23;
      }
      else
      {
        double v10 = v10 + v23 * 1.1 * v23;
        a4[v17] = a4[v17] + v21 * -1.1 * v23;
        double v24 = a4[v20] + v22 * -1.1 * v23;
      }
      a4[v20] = v24;
      v11 += 2;
    }
    while (v11 != a2);
  }
  if ((a5 & 1) == 0)
  {
    uint64_t v25 = 0;
    double v26 = (double)(unint64_t)(((char *)a2 - (char *)a1) >> 3);
    double v27 = *a4;
    do
    {
      double v28 = *(double *)(a3 + v25 * 8) - *(double *)(a3 + v25 * 8 + 8);
      double v10 = v10 + v26 * 0.005 * v28 * v28;
      double v29 = v28 * 0.005;
      long long v30 = &a4[v25];
      double v31 = v27 - v29 * v26;
      double v27 = a4[v25 + 1] + v29 * v26;
      *long long v30 = v31;
      v30[1] = v27;
      ++v25;
    }
    while (v25 != 7);
  }
  return v10;
}

void sub_24847E044(void *a1, uint64_t a2)
{
  v31[3] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    unint64_t v4 = 0;
    uint64_t v5 = *(unsigned int *)(*(void *)*a1 + 320) + 1;
    do
    {
      unint64_t v6 = *(void *)(a2 + 16) * v4;
      unint64_t v7 = *(void *)(a2 + 64) + v6;
      v31[0] = *(void *)(a2 + 24) + v6;
      v31[1] = v7;
      v31[2] = *(void *)(a2 + 104) + v6;
      sub_24840EC5C((uint64_t)&v28, a1, v4);
      uint64_t v8 = v28;
      uint64_t v9 = v29;
      if (v28 != v29)
      {
        uint64_t v10 = a1[4];
        uint64_t v11 = a1[7];
        float v12 = v28;
        uint64_t v14 = *a1;
        uint64_t v13 = a1[1];
        do
        {
          unint64_t v15 = (uint64_t *)(v13 + 24 * *v12);
          int v16 = *(unsigned __int8 *)(v11 + 12 * *v12 * v5);
          uint64_t v17 = (void *)(v10 + 40 * v15[2]);
          uint64_t v18 = *v15;
          unint64_t v19 = v4 - v15[1];
          uint64_t v20 = v17[1];
          double v21 = (void *)(v14 + 456 * *v17);
          uint64_t v22 = v17[3];
          unint64_t v23 = v21[311] * (v19 + v17[2]);
          uint64_t v24 = v21[317] + v23 + 4 * v20;
          v30[0] = v21[312] + v23 + 4 * v20;
          v30[1] = v24;
          v30[2] = v21[322] + v23 + 4 * v20;
          if (v22)
          {
            for (uint64_t i = 0; i != v22; ++i)
            {
              uint64_t v26 = 0;
              uint64_t v27 = i + v18;
              do
              {
                if (v16 == 1)
                {
                  *(_DWORD *)(v31[v26] + 4 * v27) = 0;
                }
                else if (v16 == 2)
                {
                  *(float *)(v31[v26] + 4 * v27) = *(float *)(v31[v26] + 4 * v27) - *(float *)(v30[v26] + 4 * i);
                }
                ++v26;
              }
              while (v26 != 3);
            }
          }
          ++v12;
        }
        while (v12 != v9);
      }
      if (v8) {
        operator delete(v8);
      }
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 4));
  }
}

uint64_t sub_24847E22C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  LODWORD(v7) = a5;
  uint64_t v8 = a1;
  uint64_t v743 = *MEMORY[0x263EF8340];
  uint64_t v9 = (unsigned __int8 *)(a2 + 4622);
  uint64_t v592 = (float *)(a2 + 4544);
  int8x16_t v688 = 0uLL;
  long long v689 = 0;
  if (!*(unsigned char *)(a2 + 4623))
  {
    memset(v691, 0, sizeof(v691));
    unsigned int v692 = 0;
    goto LABEL_336;
  }
  uint64_t v11 = (void *)a2;
  if (a6) {
    unsigned int v12 = -1;
  }
  else {
    unsigned int v12 = 0;
  }
  int8x16_t v13 = (int8x16_t)vdupq_n_s32(v12);
  int8x16_t v707 = vbslq_s8(v13, (int8x16_t)xmmword_2484DCEB0, (int8x16_t)xmmword_2484DCEA0);
  int8x8_t v708 = vbsl_s8(*(int8x8_t *)v13.i8, (int8x8_t)0x3F80000040400000, (int8x8_t)0x408AB85240A33333);
  unsigned __int8 v695 = 0;
  uint64_t v14 = *((void *)a1 + 2) >> 2;
  uint64_t v15 = *((void *)a1 + 8);
  v735 = (float *)*((void *)a1 + 3);
  *(void *)&long long v736 = v15;
  *((void *)&v736 + 1) = *((void *)a1 + 13);
  uint64_t v16 = *(void *)(a2 + 8);
  *(void *)&long long v726 = &v735;
  uint64_t v606 = v14;
  *((void *)&v726 + 1) = v14;
  unint64_t v674 = (unint64_t *)(a2 + 8);
  sub_2483E8CE0((uint64_t)&v699, (unint64_t)(v16 + 3) >> 2, (unint64_t)(*(void *)(a2 + 16) + 3) >> 2);
  if (v703)
  {
    unsigned int v692 = v703;
    goto LABEL_336;
  }
  int v597 = v8;
  int v591 = (int)v7;
  *(_OWORD *)v696 = v699;
  uint64_t v17 = (char *)v701;
  v701 = 0;
  unint64_t v697 = v700;
  v698[0] = v17;
  v698[1] = v702;
  size_t v18 = v699;
  if (v699)
  {
    iint i = HIDWORD(v696[0]);
    if (HIDWORD(v696[0]))
    {
      unint64_t v19 = v17;
      do
      {
        bzero(v19, v18);
        v19 += v697;
        --ii;
      }
      while (ii);
    }
  }
  v694 = v17;
  unint64_t v693 = v697;
  *(void *)long long v723 = v674;
  *(void *)&v723[8] = &v726;
  *(void *)&v723[16] = &v694;
  *(void *)&v723[24] = &v693;
  long long v724 = &v695;
  uint64_t v20 = v11[2] >> 2;
  if (a4)
  {
    sub_248482444((uint64_t)a4, v20, (uint64_t)v723);
  }
  else
  {
    v683[0] = 0;
    v683[1] = (size_t)v683;
    sub_248482444((uint64_t)v683, v20, (uint64_t)v723);
  }
  LODWORD(v7) = v591;
  if (v11[646])
  {
    unsigned int v21 = sub_2484D9F94((uint64_t)v592, (uint64_t)"screenshot_like", (unsigned int *)v696);
    if (v21)
    {
      unsigned int v692 = v21;
      goto LABEL_331;
    }
  }
  int v22 = v9[1];
  unsigned __int8 v23 = atomic_load(&v695);
  if (!v22 || v22 != 1 && (v23 & 1) == 0)
  {
    unsigned int v692 = 0;
    *(int8x16_t *)v691 = v688;
    *(void *)&v691[16] = v689;
    int8x16_t v688 = 0uLL;
    long long v689 = 0;
    goto LABEL_331;
  }
  sub_2483E8CE0((uint64_t)v716, v11[1], v11[2]);
  if (v719)
  {
    unsigned int v692 = v719;
    goto LABEL_331;
  }
  *(_OWORD *)long long v720 = *(_OWORD *)v716;
  uint64_t v24 = v717;
  long long v717 = 0;
  *(void *)&long long v721 = *(void *)&v716[16];
  int v654 = v24;
  *((void *)&v721 + 1) = v24;
  long long v722 = v718;
  size_t v25 = *(unsigned int *)v716;
  if (*(_DWORD *)v716)
  {
    iint i = HIDWORD(v720[0]);
    if (HIDWORD(v720[0]))
    {
      uint64_t v26 = v721;
      uint64_t v27 = v24;
      do
      {
        bzero(v27, v25);
        v27 += v26;
        --ii;
      }
      while (ii);
    }
  }
  sub_2483F0C3C((uint64_t)v683, v11[1], v11[2]);
  if (DWORD2(v687[1]))
  {
    unsigned int v692 = DWORD2(v687[1]);
    goto LABEL_326;
  }
  sub_2483F0E78((uint64_t)v709, (uint64_t)v683);
  sub_248438C34((unsigned int *)v709);
  *(double *)v732 = v711;
  *(void *)&v732[8] = v713;
  *(void *)&v732[16] = v714;
  uint64_t v632 = *(void *)&v710 >> 2;
  uint64_t v669 = v721;
  double v28 = (int64x2_t *)v11[2];
  unint64_t v586 = v9;
  if (v28)
  {
    long long __p = 0;
    double v29 = 0;
    long long v30 = 0;
    double v31 = 0;
    unint64_t v32 = 0;
    unint64_t v33 = *v674;
    unint64_t v34 = *v674;
    do
    {
      if (v34)
      {
        unint64_t v35 = 0;
        do
        {
          if (v694[v693 * (v32 >> 2) + (v35 >> 2)])
          {
            unint64_t v36 = v35 | (v32 << 32);
            if (v31 >= v30)
            {
              uint64_t v37 = v31 - __p;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 60) {
                sub_2483E92E8();
              }
              if (((char *)v30 - (char *)__p) >> 3 > v38) {
                unint64_t v38 = ((char *)v30 - (char *)__p) >> 3;
              }
              if ((unint64_t)((char *)v30 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v38;
              }
              if (v39) {
                unint64_t v39 = (unint64_t)sub_2483F3EB0(v39);
              }
              else {
                uint64_t v40 = 0;
              }
              long long v41 = (int64x2_t *)(v39 + 16 * v37);
              *long long v41 = vdupq_n_s64(v36);
              double v31 = v41 + 1;
              if (v29 == __p)
              {
                float v43 = v41;
                uint64x2_t v42 = __p;
              }
              else
              {
                uint64x2_t v42 = __p;
                do
                {
                  float v43 = v41 - 1;
                  v41[-1] = v29[-1];
                  --v29;
                  --v41;
                }
                while (v29 != __p);
              }
              long long v30 = (int64x2_t *)(v39 + 16 * v40);
              if (v42)
              {
                unint64_t v44 = v39 + 16 * v40;
                operator delete(v42);
                long long v30 = (int64x2_t *)v44;
              }
              long long __p = v43;
            }
            else
            {
              v31->i64[0] = v36;
              v31->i64[1] = v36;
              ++v31;
            }
            unint64_t v33 = *v674;
            double v29 = v31;
          }
          ++v35;
        }
        while (v35 < v33);
        uint64_t v11 = (void *)a2;
        double v28 = *(int64x2_t **)(a2 + 16);
        unint64_t v34 = v33;
      }
      ++v32;
    }
    while (v32 < (unint64_t)v28);
    double v28 = __p;
    if (v31 != __p)
    {
      uint64_t v45 = 0;
      do
      {
        char __pa = v28;
        uint64_t v46 = &v28[v45];
        uint64_t v47 = v46->u32[0];
        uint64_t v48 = v46->u32[1];
        uint64_t v49 = v47 + v669 * v48;
        uint64_t v634 = v45;
        if (v654[v49]) {
          goto LABEL_105;
        }
        uint64_t v50 = 0;
        unint64_t v51 = v46->u64[1];
        unint64_t v52 = HIDWORD(v51);
        v654[v49] = 1;
        uint64_t v53 = v51;
        unint64_t v54 = HIDWORD(v51) * v606 + v51;
        do
        {
          *(float *)(*(void *)&v732[v50 * 8] + 4 * (v47 + v632 * v48)) = (&v735)[v50][v54];
          ++v50;
        }
        while (v50 != 3);
        int v55 = -1;
        int v621 = v48;
        int v626 = v47;
        uint64_t v638 = v51;
        uint64_t v615 = v51;
        unint64_t v618 = HIDWORD(v51);
        do
        {
          unint64_t v56 = (v55 + v47);
          if ((int)v56 - (int)v51 >= 0) {
            int v57 = v56 - v51;
          }
          else {
            int v57 = v51 - v56;
          }
          uint64_t v58 = v56 >> 2;
          for (int i = -1; i != 2; ++i)
          {
            if (i | v55)
            {
              uint64_t v60 = (i + v48);
              if (((v60 | v56) & 0x80000000) == 0
                && *v674 > v56
                && *(void *)(a2 + 16) > (unint64_t)v60)
              {
                int v61 = v60 - v52;
                if ((int)v60 - (int)v52 < 0) {
                  int v61 = v52 - v60;
                }
                if ((v61 + v57) <= 0x32)
                {
                  for (uint64_t j = 0; j != 3; ++j)
                  {
                    float v63 = (&v735)[j];
                    *((float *)v737 + j) = v63[v54];
                    *((float *)&v729 + j) = v63[v56 + v606 * v60];
                  }
                  uint64_t v64 = 0;
                  float v65 = 0.0;
                  do
                  {
                    float v65 = v65
                        + (float)(vabds_f32(*(float *)((char *)v737 + v64), *(float *)((char *)&v729 + v64))
                                * *(float *)(((unint64_t)&v707 | 0xC) + v64));
                    v64 += 4;
                  }
                  while (v64 != 12);
                  if (v65 <= 0.8)
                  {
                    if (v694[v58 + v693 * (v60 >> 2)])
                    {
                      uint64_t v66 = v53 + *((void *)&v726 + 1) * v52;
                      uint64_t v67 = v56 + *((void *)&v726 + 1) * v60;
                      if (vabds_f32(*(float *)(*(void *)v726 + 4 * v66), *(float *)(*(void *)v726 + 4 * v67)) > 0.0001) {
                        continue;
                      }
                      uint64_t v68 = 0;
                      while (v68 != 2)
                      {
                        uint64_t v69 = v68 + 1;
                        double v70 = vabds_f32(*(float *)(*(void *)(v726 + 8 + 8 * v68) + 4 * v66), *(float *)(*(void *)(v726 + 8 + 8 * v68) + 4 * v67));
                        ++v68;
                        if (v70 > 0.0001)
                        {
                          if ((unint64_t)(v69 - 1) < 2) {
                            goto LABEL_103;
                          }
                          break;
                        }
                      }
                    }
                    if (!v654[v56 + v669 * v60])
                    {
                      uint64_t v71 = v56 | (v60 << 32);
                      if (v29 >= v30)
                      {
                        uint64_t v646 = v71;
                        uint64_t v659 = v58;
                        int __dst = v57;
                        uint64_t v640 = v29 - __pa;
                        unint64_t v72 = v640 + 1;
                        if ((unint64_t)(v640 + 1) >> 60) {
                          sub_2483E92E8();
                        }
                        if (((char *)v30 - (char *)__pa) >> 3 > v72) {
                          unint64_t v72 = ((char *)v30 - (char *)__pa) >> 3;
                        }
                        if ((unint64_t)((char *)v30 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v73 = v72;
                        }
                        long long v74 = (char *)sub_2483F3EB0(v73);
                        unint64_t v51 = v638;
                        uint64_t v76 = (int64x2_t *)&v74[16 * v640];
                        v76->i64[0] = v646;
                        v76->i64[1] = v638;
                        if (v29 == __pa)
                        {
                          i8 = &v74[16 * v640];
                          long long v78 = __pa;
                        }
                        else
                        {
                          long long v77 = (int64x2_t *)&v74[16 * v640];
                          long long v78 = __pa;
                          do
                          {
                            i8 = v77[-1].i8;
                            v77[-1] = v29[-1];
                            --v29;
                            --v77;
                          }
                          while (v29 != __pa);
                        }
                        long long v30 = (int64x2_t *)&v74[16 * v75];
                        double v29 = v76 + 1;
                        if (v78)
                        {
                          v647 = &v74[16 * v75];
                          operator delete(v78);
                          unint64_t v51 = v638;
                          long long v30 = (int64x2_t *)v647;
                        }
                        char __pa = (int64x2_t *)i8;
                        LODWORD(v48) = v621;
                        LODWORD(v47) = v626;
                        uint64_t v53 = v615;
                        unint64_t v52 = v618;
                        int v57 = __dst;
                        uint64_t v58 = v659;
                      }
                      else
                      {
                        v29->i64[0] = v71;
                        v29->i64[1] = v51;
                        ++v29;
                      }
                    }
                  }
                }
              }
            }
LABEL_103:
            ;
          }
          ++v55;
          double v31 = v29;
        }
        while (v55 != 2);
LABEL_105:
        uint64_t v45 = v634 + 1;
        double v28 = __pa;
        uint64_t v11 = (void *)a2;
      }
      while (v634 + 1 != v31 - __pa);
    }
  }
  unint64_t __pb = v28;
  uint64_t v731 = 0;
  long long v730 = 0u;
  long long v729 = 0u;
  uint64_t v8 = v597;
  uint64_t v600 = v11[646];
  if (v600)
  {
    unsigned int v80 = sub_2484D9F94((uint64_t)v592, (uint64_t)"is_background", (unsigned int *)v720);
    if (v80)
    {
      unsigned int v692 = v80;
LABEL_115:
      *((void *)&v730 + 1) = 0;
      goto LABEL_319;
    }
    if (a6)
    {
      unsigned int v81 = sub_2484D9A00((uint64_t)v592, (unsigned int *)v709);
      if (v81)
      {
LABEL_111:
        unsigned int v692 = v81;
        goto LABEL_115;
      }
    }
    else
    {
      long long v82 = sub_2483F0A38(0);
      unsigned int v81 = sub_2484D93F8((uint64_t)v592, (uint64_t)v82, (unsigned int *)v709);
      if (v81) {
        goto LABEL_111;
      }
    }
    sub_2483EA250((uint64_t)v737, v11[1], v11[2]);
    if (v740)
    {
      unsigned int v692 = v740;
      goto LABEL_115;
    }
    long long v729 = *(_OWORD *)v737;
    uint64_t v83 = (char *)v738;
    v738 = 0;
    *(void *)&long long v730 = v737[2];
    *((void *)&v730 + 1) = v83;
    uint64_t v731 = v739;
    if (LODWORD(v737[0]))
    {
      uint64_t v84 = DWORD1(v729);
      if (DWORD1(v729))
      {
        uint64_t v85 = v730;
        size_t v86 = 4 * LODWORD(v737[0]);
        do
        {
          bzero(v83, v86);
          v83 += v85;
          --v84;
        }
        while (v84);
      }
    }
    uint64_t v11 = (void *)a2;
  }
  long long v727 = *(_OWORD *)v732;
  uint64_t v728 = *(void *)&v732[16];
  sub_2483E8CE0((uint64_t)v737, v11[1], v11[2]);
  if (v740)
  {
    unsigned int v692 = v740;
    goto LABEL_317;
  }
  size_t v87 = LODWORD(v737[0]);
  uint64_t v88 = HIDWORD(v737[0]);
  size_t v89 = v737[2];
  unint64_t v90 = (char *)v738;
  v738 = 0;
  if (LODWORD(v737[0]) && HIDWORD(v737[0]))
  {
    int v91 = v90;
    do
    {
      bzero(v91, v87);
      v91 += v89;
      --v88;
    }
    while (v88);
  }
  uint64_t v92 = a2;
  unint64_t v93 = *(void *)(a2 + 16);
  uint64_t v599 = v90;
  if (!v93)
  {
    uint64_t v595 = 0;
    uint64_t v94 = 0;
    goto LABEL_278;
  }
  uint64_t v595 = 0;
  unint64_t v604 = 0;
  uint64_t v94 = 0;
  v660 = 0;
  unint64_t v588 = 0;
  unint64_t v95 = *v674;
  unint64_t v96 = (unint64_t)&v707 | 0xC;
  uint64_t v608 = 4 * v606;
  unint64_t v584 = 0x94D049BB133111EBLL;
  unint64_t v97 = 0xBF58476D1CE4E5B9;
  size_t v602 = v89;
  do
  {
    if (!v95) {
      goto LABEL_275;
    }
    uint64_t v98 = 0;
    do
    {
      __src = v98;
      if (v98[v588 * v669 + (void)v654]) {
        goto LABEL_238;
      }
      unint64_t v603 = v97;
      if (v94 >= v660)
      {
        unint64_t v101 = (v660 - v94) >> 2;
        if (v101 <= 1) {
          unint64_t v101 = 1;
        }
        if ((unint64_t)(v660 - v94) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v101;
        }
        unint64_t v103 = v94;
        uint64_t v104 = (char *)sub_2483F04AC(v102);
        unint64_t v99 = v588;
        v660 = &v104[8 * v105];
        uint64_t v98 = __src;
        *(_DWORD *)uint64_t v104 = __src;
        *((_DWORD *)v104 + 1) = v588;
        int v100 = v104 + 8;
        __dsta = v104;
        if (v103)
        {
          operator delete(v103);
          uint64_t v98 = __src;
        }
        unint64_t v97 = v603;
      }
      else
      {
        unint64_t v99 = v588;
        *(_DWORD *)uint64_t v94 = v98;
        *((_DWORD *)v94 + 1) = v588;
        __dsta = v94;
        int v100 = v94 + 8;
      }
      int v106 = 0;
      unsigned int v107 = 0;
      unsigned int v108 = 0;
      int v109 = 1;
      int v110 = v595;
      unint64_t v616 = v99;
      unint64_t v619 = (unint64_t)v98;
      unint64_t v622 = (unint64_t)v98;
      unint64_t v610 = v99;
      do
      {
        unint64_t v112 = *((void *)v100 - 1);
        v100 -= 8;
        unint64_t v111 = v112;
        unint64_t v113 = HIDWORD(v112);
        size_t v114 = HIDWORD(v112) * v89 + v112;
        if (v90[v114]) {
          continue;
        }
        v90[v114] = 1;
        if (v622 >= v111) {
          unint64_t v115 = v111;
        }
        else {
          unint64_t v115 = v622;
        }
        unint64_t v116 = v619;
        if (v619 <= v111) {
          unint64_t v116 = v111;
        }
        unint64_t v619 = v116;
        unint64_t v622 = v115;
        unint64_t v117 = v610;
        if (v610 >= v113) {
          unint64_t v117 = v113;
        }
        unint64_t v610 = v117;
        unint64_t v118 = v616;
        if (v616 <= v113) {
          unint64_t v118 = v113;
        }
        unint64_t v627 = v111;
        unint64_t v616 = v118;
        if (v600)
        {
          uint64_t v119 = v110;
          if ((unint64_t)v110 >= v604)
          {
            int v635 = v106;
            LODWORD(v638) = v109;
            unsigned int v641 = v107;
            unsigned int v648 = v108;
            uint64_t v121 = (v110 - v595) >> 3;
            unint64_t v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61) {
              sub_2483E92E8();
            }
            if ((uint64_t)(v604 - (void)v595) >> 2 > v122) {
              unint64_t v122 = (uint64_t)(v604 - (void)v595) >> 2;
            }
            if (v604 - (unint64_t)v595 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v122;
            }
            if (v123) {
              unint64_t v123 = (unint64_t)sub_2483F04AC(v123);
            }
            else {
              uint64_t v124 = 0;
            }
            uint64_t v125 = (char *)(v123 + 8 * v121);
            *(void *)uint64_t v125 = v627;
            v609 = v125 + 8;
            while (v119 != v595)
            {
              uint64_t v126 = *((void *)v119 - 1);
              v119 -= 8;
              *((void *)v125 - 1) = v126;
              v125 -= 8;
            }
            unint64_t v604 = v123 + 8 * v124;
            if (v595) {
              operator delete(v595);
            }
            uint64_t v595 = v125;
            unint64_t v120 = v654;
            unsigned int v108 = v648;
            unsigned int v107 = v641;
            int v109 = v638;
            int v106 = v635;
            LODWORD(v111) = v627;
            goto LABEL_173;
          }
          *(void *)int v110 = v111;
          v609 = v110 + 8;
        }
        else
        {
          v609 = v110;
        }
        unint64_t v120 = v654;
LABEL_173:
        for (int k = -1; k != 2; ++k)
        {
          unint64_t v128 = (k + v111);
          for (int m = -1; m != 2; ++m)
          {
            if (m | k)
            {
              if ((v128 & 0x80000000) == 0)
              {
                uint64_t v130 = (m + v113);
                if ((v130 & 0x80000000) == 0
                  && *v674 > v128
                  && *(void *)(v92 + 16) > (unint64_t)v130)
                {
                  if (v120[v128 + v669 * v130])
                  {
                    if (v106)
                    {
                      for (uint64_t n = 0; n != 3; ++n)
                      {
                        uint64_t v132 = *((void *)&v727 + n);
                        *((_DWORD *)&v742 + n) = *(_DWORD *)(v132 + 4 * (v128 + v632 * v130));
                        *((_DWORD *)&v733 + n) = *(_DWORD *)(v132 + 4 * (v632 * v107 + v108));
                      }
                      uint64_t v133 = 0;
                      float v134 = 0.0;
                      do
                      {
                        float v134 = v134
                             + (float)(vabds_f32(*(float *)((char *)&v742 + v133), *(float *)((char *)&v733 + v133))
                                     * *(float *)(v96 + v133));
                        v133 += 4;
                      }
                      while (v133 != 12);
                      int v109 = (v134 <= 0.03) & v109;
                      int v106 = 1;
                      unint64_t v120 = v654;
                    }
                    else
                    {
                      int v106 = 1;
                      unsigned int v108 = v128;
                      unsigned int v107 = m + v113;
                    }
                  }
                  else if (v100 >= v660)
                  {
                    int v636 = v106;
                    LODWORD(v638) = v109;
                    unsigned int v642 = v107;
                    unsigned int v649 = v108;
                    uint64_t v135 = (v100 - __dsta) >> 3;
                    unint64_t v136 = v135 + 1;
                    if ((unint64_t)(v135 + 1) >> 61) {
                      sub_2483E92E8();
                    }
                    if ((v660 - __dsta) >> 2 > v136) {
                      unint64_t v136 = (v660 - __dsta) >> 2;
                    }
                    if ((unint64_t)(v660 - __dsta) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v137 = v136;
                    }
                    if (v137) {
                      unint64_t v137 = (unint64_t)sub_2483F04AC(v137);
                    }
                    else {
                      uint64_t v138 = 0;
                    }
                    long long v139 = (char *)(v137 + 8 * v135);
                    *(void *)long long v139 = v128 | (v130 << 32);
                    uint64_t v140 = v139 + 8;
                    if (v100 == __dsta)
                    {
                      uint64_t v141 = __dsta;
                    }
                    else
                    {
                      uint64_t v141 = __dsta;
                      do
                      {
                        uint64_t v142 = *((void *)v100 - 1);
                        v100 -= 8;
                        *((void *)v139 - 1) = v142;
                        v139 -= 8;
                      }
                      while (v100 != __dsta);
                    }
                    v660 = (char *)(v137 + 8 * v138);
                    if (v141) {
                      operator delete(v141);
                    }
                    __dsta = v139;
                    int v100 = v140;
                    uint64_t v92 = a2;
                    unint64_t v120 = v654;
                    unsigned int v108 = v649;
                    unsigned int v107 = v642;
                    int v109 = v638;
                    int v106 = v636;
                    LODWORD(v111) = v627;
                  }
                  else
                  {
                    *(void *)int v100 = v128 | (v130 << 32);
                    v100 += 8;
                  }
                }
              }
            }
          }
        }
        int v110 = v609;
        unint64_t v90 = v599;
        size_t v89 = v602;
        unint64_t v97 = v603;
      }
      while (__dsta != v100);
      if ((v106 & v109 & 1) == 0)
      {
        uint64_t v8 = v597;
        uint64_t v94 = __dsta;
        goto LABEL_238;
      }
      uint64_t v8 = v597;
      uint64_t v94 = __dsta;
      if (v619 - v622 > 0x1F) {
        goto LABEL_237;
      }
      if (v616 - v610 > 0x1F) {
        goto LABEL_236;
      }
      uint64_t v143 = v632 * v107 + v108;
      LODWORD(v742) = *(_DWORD *)(*(void *)v732 + 4 * v143);
      DWORD1(v742) = *(_DWORD *)(*(void *)&v732[8] + 4 * v143);
      DWORD2(v742) = *(_DWORD *)(*(void *)&v732[16] + 4 * v143);
      if ((int)v610 <= 2) {
        int v144 = 2;
      }
      else {
        int v144 = v610;
      }
      unint64_t v145 = (v144 - 2);
      unint64_t v146 = v616 + 3;
      if (*(void *)(v92 + 16) < v616 + 3) {
        unint64_t v146 = *(void *)(v92 + 16);
      }
      if (v146 <= v145) {
        goto LABEL_236;
      }
      char v147 = 0;
      if ((int)v622 <= 2) {
        int v148 = 2;
      }
      else {
        int v148 = v622;
      }
      unint64_t v149 = (v148 - 2);
      unint64_t v150 = v619 + 3;
      if (*v674 < v619 + 3) {
        unint64_t v150 = *v674;
      }
      do
      {
        if (v150 > v149)
        {
          uint64_t v151 = v145 * v606;
          unint64_t v152 = v149;
          do
          {
            uint64_t v153 = 0;
            *(float *)&uint64_t v733 = v735[v152 + v151];
            HIDWORD(v733) = *(_DWORD *)(v736 + 4 * (v152 + v151));
            int v734 = *(_DWORD *)(*((void *)&v736 + 1) + 4 * (v152 + v151));
            float v154 = 0.0;
            do
            {
              float v154 = v154
                   + (float)(vabds_f32(*(float *)((char *)&v742 + v153), *(float *)((char *)&v733 + v153))
                           * *(float *)(v96 + v153));
              v153 += 4;
            }
            while (v153 != 12);
            v147 |= v154 <= 0.03;
            ++v152;
          }
          while (v152 != v150);
        }
        ++v145;
      }
      while (v145 != v146);
      if ((v147 & 1) == 0)
      {
LABEL_236:
        size_t v89 = v602;
LABEL_237:
        unint64_t v97 = v603;
        goto LABEL_238;
      }
      int v155 = (void *)v688.i64[1];
      if (v688.i64[1] >= (unint64_t)v689)
      {
        uint64_t v156 = sub_248454FEC(v688.i64);
      }
      else
      {
        sub_248454E0C((char **)v688.i64[1]);
        v155[20] = 0;
        v155[21] = 0;
        uint64_t v156 = (uint64_t)(v155 + 23);
        v155[22] = 0;
      }
      v688.i64[1] = v156;
      float v158 = *(_DWORD **)(v156 - 16);
      unint64_t v157 = *(void *)(v156 - 8);
      if ((unint64_t)v158 >= v157)
      {
        uint64_t v643 = v156;
        uint64_t v162 = *(void *)(v156 - 24);
        uint64_t v163 = ((uint64_t)v158 - v162) >> 3;
        unint64_t v164 = v163 + 1;
        if ((unint64_t)(v163 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v165 = v157 - v162;
        if (v165 >> 2 > v164) {
          unint64_t v164 = v165 >> 2;
        }
        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v166 = v164;
        }
        uint64_t v167 = (char *)sub_2483F04AC(v166);
        uint64_t v156 = v643;
        long long v169 = &v167[8 * v163];
        *(_DWORD *)long long v169 = v622;
        *((_DWORD *)v169 + 1) = v610;
        unsigned int v171 = *(char **)(v643 - 24);
        char v170 = *(char **)(v643 - 16);
        long long v172 = v169;
        if (v170 != v171)
        {
          do
          {
            uint64_t v173 = *((void *)v170 - 1);
            v170 -= 8;
            *((void *)v172 - 1) = v173;
            v172 -= 8;
          }
          while (v170 != v171);
          char v170 = *(char **)(v643 - 24);
        }
        long long v161 = v169 + 8;
        *(void *)(v643 - 24) = v172;
        *(void *)(v643 - 16) = v169 + 8;
        *(void *)(v643 - 8) = &v167[8 * v168];
        if (v170)
        {
          operator delete(v170);
          uint64_t v156 = v643;
        }
        unint64_t v159 = v622;
        unint64_t v160 = v610;
      }
      else
      {
        unint64_t v159 = v622;
        unint64_t v160 = v610;
        _DWORD *v158 = v622;
        v158[1] = v610;
        long long v161 = v158 + 2;
      }
      uint64_t v174 = 0;
      int v175 = 0;
      *(void *)(v156 - 16) = v161;
      uint64_t v176 = v688.i64[1];
      *(void *)(v688.i64[1] - 184) = v619 - v622 + 1;
      char v177 = (void *)(v176 - 184);
      v177[1] = v616 - v610 + 1;
      uint64_t v733 = 1;
      int v734 = 2;
      uint64_t v178 = v608 * v160 + 4 * v159;
      unint64_t v90 = v599;
      size_t v89 = v602;
      unint64_t v97 = v603;
      do
      {
        unint64_t v179 = v610;
        if (v616 >= v610)
        {
          uint64_t v180 = 0;
          uint64_t v181 = *((int *)&v733 + v174);
          int v182 = &v177[3 * (int)v181];
          uint64_t v183 = v182 + 11;
          int v184 = v182 + 2;
          uint64_t v185 = v178;
          do
          {
            if (v619 >= v622)
            {
              uint64_t v186 = 0;
              float v187 = *((float *)&v742 + v181);
              float v188 = *(float *)&v707.i32[v181];
              do
              {
                uint64_t v189 = v180 * *v177;
                float v190 = *(float *)((char *)&(&v735)[v181][v186] + v185) - v187;
                *(float *)(*v183 + 4 * (v186 + v189)) = v190;
                int v191 = (int)(float)(v190 / v188);
                *(unsigned char *)(*v184 + v189 + v186) = v191;
                if (v191 >= 0) {
                  int v192 = (int)(float)(v190 / v188);
                }
                else {
                  int v192 = -v191;
                }
                if (v192 > v175) {
                  int v175 = v192;
                }
                ++v186;
              }
              while (v622 + v186 <= v619);
            }
            ++v179;
            v185 += v608;
            ++v180;
          }
          while (v179 <= v616);
        }
        ++v174;
      }
      while (v174 != 3);
      if (v175 >= 2)
      {
        if (v600)
        {
          unint64_t v193 = (v603 >> 5) ^ ((v584 ^ (v584 << 23)) >> 18) ^ v603 ^ v584 ^ (v584 << 23);
          double v194 = v595;
          if (v595 != v110)
          {
            uint64_t v195 = *((void *)&v730 + 1);
            uint64_t v196 = v730;
            do
            {
              uint64_t v197 = *(unsigned int *)v194;
              uint64_t v198 = *((unsigned int *)v194 + 1);
              v194 += 8;
              *(float *)(v195 + v196 * v198 + 4 * v197) = (float)((float)(COERCE_FLOAT(((v584 + v603) >> 41) | 0x3F800000)
                                                                        + -1.0)
                                                                * 0.5)
                                                        + 0.5;
            }
            while (v194 != v110);
          }
          unint64_t v584 = v603;
          unint64_t v97 = v193;
        }
      }
      else
      {
        uint64_t v650 = v688.i64[1] - 184;
        sub_248455198(v688.i64[1] - 184);
        unint64_t v97 = v603;
        v688.i64[1] = v650;
      }
LABEL_238:
      unint64_t v95 = *v674;
      uint64_t v98 = __src + 1;
    }
    while ((unint64_t)(__src + 1) < *v674);
    unint64_t v93 = *(void *)(v92 + 16);
LABEL_275:
    ++v588;
  }
  while (v588 < v93);
LABEL_278:
  if (v600)
  {
    unsigned int v199 = sub_2484D9B44((uint64_t)v592, (unsigned int *)&v729);
    if (v199)
    {
      unsigned int v692 = v199;
      goto LABEL_308;
    }
  }
  if (v688.i64[0] == v688.i64[1])
  {
    unsigned int v692 = 0;
    *(void *)v691 = v688.i64[0];
    *(void *)&v691[8] = v688.i64[0];
    *(void *)&v691[16] = v689;
    long long v689 = 0;
    int8x16_t v688 = 0uLL;
  }
  else
  {
    sub_2484824E0(v688.i64[0], (void *)v688.i64[1]);
    uint64_t v200 = v688.i64[0];
    if (0xD37A6F4DE9BD37A7 * ((v688.i64[1] - v688.i64[0]) >> 3) < 2)
    {
      unint64_t v201 = 0;
    }
    else
    {
      unint64_t v201 = 0;
      unint64_t v202 = 1;
      uint64_t v203 = 352;
      do
      {
        uint64_t v204 = (void *)(v200 + 184 * v201);
        BOOL v205 = sub_2484826D8((void *)(v200 + v203 - 168), v204);
        uint64_t v206 = (double **)(v204 + 20);
        uint64_t v207 = v204[21];
        if (v205)
        {
          sub_248482778(v206, v207, *(double **)(v200 + v203 - 8), *(double **)(v200 + v203), (uint64_t)(*(void *)(v200 + v203) - *(void *)(v200 + v203 - 8)) >> 3);
        }
        else
        {
          if ((unint64_t)(v207 - (void)*v206) > 8) {
            ++v201;
          }
          sub_248482988(v200 + 184 * v201, v200 + v203 - 168);
        }
        ++v202;
        uint64_t v200 = v688.i64[0];
        v203 += 184;
      }
      while (v202 < 0xD37A6F4DE9BD37A7 * ((v688.i64[1] - v688.i64[0]) >> 3));
    }
    if (*(void *)(v200 + 184 * v201 + 168) - *(void *)(v200 + 184 * v201 + 160) <= 8uLL) {
      unint64_t v208 = v201;
    }
    else {
      unint64_t v208 = v201 + 1;
    }
    sub_248482518(v688.i64, v208);
    uint64_t v209 = v688.i64[1];
    uint64_t v210 = v688.i64[0];
    uint64_t v8 = v597;
    unint64_t v90 = v599;
    if (v688.i64[1] == v688.i64[0])
    {
LABEL_306:
      uint64_t v214 = v209;
      v688.i64[1] = v210;
      uint64_t v209 = v210;
      uint64_t v210 = v214;
    }
    else
    {
      unint64_t v211 = 0;
      unint64_t v212 = (v688.i64[1] - v688.i64[0]) / 184;
      if (v212 <= 1) {
        unint64_t v212 = 1;
      }
      uint64_t v213 = (void *)(v688.i64[0] + 8);
      do
      {
        if (*v213 * *(v213 - 1) > v211) {
          unint64_t v211 = *v213 * *(v213 - 1);
        }
        v213 += 23;
        --v212;
      }
      while (v212);
      if (v211 <= 0x13)
      {
        do
        {
          v209 -= 184;
          sub_248455198(v209);
        }
        while (v209 != v210);
        uint64_t v209 = v688.i64[0];
        goto LABEL_306;
      }
    }
    unsigned int v692 = 0;
    *(void *)v691 = v210;
    *(void *)&v691[8] = v209;
    *(void *)&v691[16] = v689;
    long long v689 = 0;
    int8x16_t v688 = 0uLL;
    uint64_t v9 = v586;
  }
LABEL_308:
  if (v94) {
    operator delete(v94);
  }
  if (v595) {
    operator delete(v595);
  }
  if (v90)
  {
    atomic_fetch_add(&qword_26931BDF8, -*((void *)v90 - 3));
    free(*((void **)v90 - 4));
  }
  if (!v740)
  {
    unint64_t v215 = v738;
    v738 = 0;
    if (v215)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(v215 - 3));
      free((void *)*(v215 - 4));
    }
  }
LABEL_317:
  uint64_t v216 = *((void *)&v730 + 1);
  *((void *)&v730 + 1) = 0;
  if (v216)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v216 - 24));
    free(*(void **)(v216 - 32));
  }
LABEL_319:
  if (__pb) {
    operator delete(__pb);
  }
  for (iint i = 104; ii != -16; ii -= 40)
    sub_2483E8DDC((uint64_t *)((char *)v709 + ii));
  if (!DWORD2(v687[1]))
  {
    for (iint i = 104; ii != -16; ii -= 40)
      sub_2483E8DDC((uint64_t *)((char *)v683 + ii));
  }
LABEL_326:
  uint64_t v217 = *((void *)&v721 + 1);
  *((void *)&v721 + 1) = 0;
  if (v217)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v217 - 24));
    free(*(void **)(v217 - 32));
  }
  LODWORD(v7) = v591;
  if (!v719)
  {
    unint64_t v218 = v717;
    long long v717 = 0;
    if (v218)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v218 - 3));
      free(*((void **)v218 - 4));
    }
  }
LABEL_331:
  uint64_t v219 = v698[0];
  v698[0] = 0;
  if (v219)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v219 - 24));
    free(*(void **)(v219 - 32));
  }
  if (!v703)
  {
    unint64_t v220 = v701;
    v701 = 0;
    if (v220)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(v220 - 3));
      free((void *)*(v220 - 4));
    }
  }
LABEL_336:
  v683[0] = (size_t)&v688;
  sub_248455114((void ***)v683);
  uint64_t v221 = v692;
  if (v692) {
    return v221;
  }
  uint64_t v223 = *(char **)&v691[8];
  uint64_t v222 = *(void *)v691;
  *(void *)v732 = *(void *)v691;
  *(_OWORD *)&v732[8] = *(_OWORD *)&v691[8];
  memset(v691, 0, sizeof(v691));
  uint64_t v224 = v223;
  if ((char *)v222 == v223)
  {
    uint64_t v221 = *v9;
    if (*(int *)(a2 + 4592) > 3)
    {
      BOOL v233 = 0;
      if (!*v9) {
        goto LABEL_552;
      }
    }
    else
    {
      BOOL v233 = *v592 >= 3.0;
      if (!*v9) {
        goto LABEL_552;
      }
    }
    if (v221 == 1)
    {
      long long v234 = *(_OWORD *)(a2 + 8);
    }
    else
    {
      if (!v233) {
        goto LABEL_501;
      }
      long long v234 = *(_OWORD *)(a2 + 8);
      if (*v592 < 3.0)
      {
        long long v689 = 0;
        int8x16_t v688 = 0uLL;
        unsigned int v690 = 0;
        v684[0] = 0;
        v683[0] = 0;
        v683[1] = 0;
        v709[0] = (void **)v683;
        sub_248455114(v709);
LABEL_551:
        uint64_t v221 = v690;
        if (v690) {
          goto LABEL_552;
        }
        int8x16_t v346 = v688;
        *(int8x16_t *)v683 = v688;
        long long v347 = v689;
        v684[0] = v689;
        int8x16_t v688 = 0uLL;
        long long v689 = 0;
        uint64_t v348 = *(void *)v732;
        if (*(void *)v732)
        {
          uint64_t v349 = *(void *)&v732[8];
          unint64_t v350 = *(void **)v732;
          if (*(void *)&v732[8] != *(void *)v732)
          {
            do
            {
              v349 -= 184;
              sub_248455198(v349);
            }
            while (v349 != v348);
            unint64_t v350 = *(void **)v732;
          }
          *(void *)&v732[8] = v348;
          operator delete(v350);
          int8x16_t v346 = *(int8x16_t *)v683;
          long long v347 = v684[0];
        }
        *(int8x16_t *)v732 = v346;
        *(void *)&v732[16] = v347;
        v684[0] = 0;
        v683[0] = 0;
        v683[1] = 0;
        v709[0] = (void **)v683;
        sub_248455114(v709);
        if (!v690)
        {
          v683[0] = (size_t)&v688;
          sub_248455114((void ***)v683);
        }
        uint64_t v222 = *(void *)v732;
        uint64_t v224 = *(char **)&v732[8];
        goto LABEL_338;
      }
    }
    long long v628 = v234;
    int8x16_t v707 = 0uLL;
    int8x8_t v708 = 0;
    sub_2483F0C3C((uint64_t)&v699, *v8, v8[1]);
    if (v706)
    {
      unsigned int v690 = v706;
LABEL_550:
      v683[0] = (size_t)&v707;
      sub_248455114((void ***)v683);
      goto LABEL_551;
    }
    sub_2483F0E78((uint64_t)v696, (uint64_t)&v699);
    sub_2483F0C3C((uint64_t)v683, *v8, v8[1]);
    int v330 = DWORD2(v687[1]);
    if (DWORD2(v687[1])) {
      goto LABEL_544;
    }
    sub_2483F0E78((uint64_t)v716, (uint64_t)v683);
    sub_2483F0C3C((uint64_t)v709, *v8, v8[1]);
    int v330 = v715;
    unsigned int v598 = v8;
    if (!v715)
    {
      sub_2483F0E78((uint64_t)v737, (uint64_t)v709);
      sub_2483F7944((uint64_t)v696, (uint64_t)v737);
      for (juint64_t j = 13; jj != -2; jj -= 5)
        sub_2483E8DDC((uint64_t *)&v737[jj]);
      iint i = 0;
      long long v729 = 0uLL;
      *(void *)&long long v334 = *(void *)v8;
      *((void *)&v334 + 1) = HIDWORD(*(void *)v8);
      long long v730 = v334;
      unint64_t v7 = v716;
      do
      {
        sub_2484AE67C((unint64_t)v8 + ii, (uint64_t *)&v729, xmmword_24854EED4, a4, &v716[ii]);
        sub_2484AE67C((unint64_t)&v716[ii], (uint64_t *)&v729, xmmword_24854EED4, a4, (size_t *)((char *)v696 + ii));
        sub_2484AE67C((unint64_t)v8 + ii, (uint64_t *)&v729, xmmword_24854EE74, a4, &v716[ii]);
        ii += 40;
        uint64_t v8 = v598;
      }
      while (ii != 120);
      long long v727 = 0u;
      __asm { FMOV            V1.4S, #10.0 }
      long long v726 = _Q1;
      long long v742 = 0u;
      sub_2483EA250((uint64_t)v723, *(unsigned int *)v716, *(unsigned int *)&v716[4]);
      int v330 = v725;
      if (!v725)
      {
        *(_OWORD *)long long v720 = *(_OWORD *)v723;
        long long v721 = *(_OWORD *)&v723[16];
        *(void *)&v723[24] = 0;
        long long v722 = v724;
        v737[0] = (size_t)v716;
        v737[1] = (size_t)v696;
        v737[2] = (size_t)v720;
        v738 = &v733;
        v739 = &v727;
        v740 = &v726;
        v741 = &v742;
        if (a4)
        {
          sub_248453D90((uint64_t)a4, *(unsigned int *)&v716[4], (uint64_t)v737);
        }
        else
        {
          v735 = 0;
          *(void *)&long long v736 = &v735;
          sub_248453D90((uint64_t)&v735, *(unsigned int *)&v716[4], (uint64_t)v737);
        }
        int v330 = 0;
        LODWORD(ii) = v720[0];
        LODWORD(v7) = HIDWORD(v720[0]);
        __src = (char *)*((void *)&v721 + 1);
        uint64_t v339 = v721;
        *(void *)&v723[24] = 0;
      }
      uint64_t v638 = v339;
      if (!v715)
      {
        for (kint k = 13; kk != -2; kk -= 5)
          sub_2483E8DDC((uint64_t *)&v709[kk]);
      }
    }
    for (mint m = 104; mm != -16; mm -= 40)
      sub_2483E8DDC((uint64_t *)&v716[mm]);
    if (!DWORD2(v687[1]))
    {
      for (nuint64_t n = 13; nn != -2; nn -= 5)
        sub_2483E8DDC((uint64_t *)&v683[nn]);
    }
    if (v330)
    {
LABEL_544:
      unsigned int v690 = v330;
LABEL_545:
      for (uint64_t i1 = 13; i1 != -2; i1 -= 5)
        sub_2483E8DDC((uint64_t *)&v696[i1]);
      if (!v706)
      {
        for (uint64_t i2 = 104; i2 != -16; i2 -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&v699 + i2));
      }
      goto LABEL_550;
    }
    uint64_t v351 = v7;
    sub_2483EA250((uint64_t)v709, ii, v7);
    if (v712)
    {
      LODWORD(v738) = v712;
LABEL_722:
      if (v738)
      {
        unsigned int v690 = v738;
      }
      else
      {
        long long v452 = (float *)v737[0];
        v735 = (float *)v737[0];
        long long v453 = (float *)v737[1];
        long long v736 = *(_OWORD *)&v737[1];
        memset(v737, 0, sizeof(v737));
        long long v454 = (char *)v736;
        uint64_t v455 = (uint64_t)(v736 - (void)v452) >> 3;
        unint64_t v456 = 0x2E8BA2E8BA2E8BA3 * v455;
        if (0x2E8BA2E8BA2E8BACLL * v455 / 0x64uLL >= 0x64) {
          unint64_t v457 = 100;
        }
        else {
          unint64_t v457 = 0x2E8BA2E8BA2E8BACLL * v455 / 0x64uLL;
        }
        if (v456 <= v457
          || ((v458 = 126 - 2 * __clz(v456), v453 != v452) ? (uint64_t v459 = v458) : (uint64_t v459 = 0),
              sub_24845407C((unint64_t)v452, v453, v459, 1),
              long long v452 = v735,
              float32x4_t v460 = (char *)v736,
              long long v454 = (char *)&v735[22 * v457],
              v454 == (char *)v736))
        {
          long long v461 = v628;
        }
        else
        {
          long long v461 = v628;
          while (v460 != v454)
          {
            int v462 = (void *)*((void *)v460 - 7);
            if (v462)
            {
              *((void *)v460 - 6) = v462;
              operator delete(v462);
              long long v461 = v628;
            }
            v460 -= 88;
          }
          *(void *)&long long v736 = v454;
          long long v452 = v735;
        }
        if (v452 != (float *)v454)
        {
          long long v463 = v461;
          double v582 = (double)*((unint64_t *)&v461 + 1);
          double v583 = (double)(unint64_t)v461;
          float32x4x2_t v464 = (uint64_t *)(v598 + 6);
          uint64_t v585 = v454;
          do
          {
            uint64_t v465 = 0;
            memset(v687, 0, 56);
            memset(v686, 0, sizeof(v686));
            *(_OWORD *)v684 = 0u;
            *(_OWORD *)uint64_t v685 = 0u;
            *(_OWORD *)v683 = 0u;
            *(void *)&v716[16] = 0;
            v720[1] = 0;
            v720[0] = 0;
            *(void *)&long long v721 = 0;
            uint64_t v467 = *((int *)v452 + 20);
            uint64_t v466 = *((int *)v452 + 21);
            uint64_t v617 = *((void *)v598 + 2);
            uint64_t v468 = v617 * v466;
            long long v729 = 0uLL;
            int v605 = v466;
            unint64_t v663 = v697;
            uint64_t v469 = v697 * v466;
            BOOL v470 = v464;
            BOOL v471 = v698;
            *(void *)&long long v730 = 0;
            do
            {
              uint64_t v472 = *v470;
              v470 += 5;
              float v473 = *(float *)(v472 + v468 + 4 * v467);
              uint64_t v474 = *v471;
              v471 += 5;
              *(double *)&v720[v465++] = (float)(v473 - *(float *)(v474 + v469 + 4 * v467));
            }
            while (v465 != 3);
            int v475 = 0;
            double v476 = *(double *)&v720[1];
            uint64_t v477 = *((void *)v598 + 8);
            int v478 = -2;
            double v479 = 0.0;
            double v480 = 0.0;
            double v481 = 0.0;
            uint64_t v482 = v698[5];
            double v483 = 0.0;
            double v484 = 0.0;
            double v485 = 0.0;
            do
            {
              uint64_t v486 = (v478 + v605);
              if (v478 + v605 >= 0 && *((void *)&v463 + 1) > (unint64_t)v486)
              {
                uint64_t v487 = v477 + v617 * v486;
                uint64_t v488 = v663 * v486;
                uint64_t v489 = v482 + v663 * v486;
                double v490 = (double)(int)v486;
                for (int i3 = -2; i3 != 3; ++i3)
                {
                  uint64_t v492 = (i3 + v467);
                  if (i3 + (int)v467 >= 0 && (unint64_t)v463 > v492)
                  {
                    uint64_t v493 = 0;
                    double v494 = -(float)(*(float *)(v487 + 4 * v492) - *(float *)(v489 + 4 * v492));
                    if (v476 > 0.0) {
                      double v494 = (float)(*(float *)(v487 + 4 * v492) - *(float *)(v489 + 4 * v492));
                    }
                    double v495 = (double)(int)v492;
                    char v496 = v698;
                    do
                    {
                      uint64_t v497 = *v496;
                      v496 += 5;
                      *(double *)((char *)&v729 + v493) = *(double *)((char *)&v729 + v493)
                                                        + *(float *)(v497 + v488 + 4 * v492);
                      v493 += 8;
                    }
                    while (v493 != 24);
                    double v498 = fmax(v494, 0.000001);
                    double v485 = v485 + v498 * v495 * v495;
                    double v484 = v484 + v498 * v495;
                    double v483 = v483 + v498;
                    double v481 = v481 + v498 * v490;
                    double v480 = v480 + v498 * v495 * v490;
                    double v479 = v479 + v498 * v490 * v490;
                    ++v475;
                  }
                }
              }
              ++v478;
            }
            while (v478 != 3);
            uint64_t v499 = 0;
            *(double *)&v723[16] = v479;
            *(double *)&v716[8] = v481;
            *(double *)long long v716 = v484;
            *(double *)&v723[8] = v480;
            *(double *)long long v723 = v485;
            do
            {
              *(double *)&v716[v499] = *(double *)&v716[v499] / v483;
              *(double *)&v723[v499] = *(double *)&v723[v499] / v483;
              *(double *)((char *)&v729 + v499) = *(double *)((char *)&v729 + v499) / (double)v475;
              v499 += 8;
            }
            while (v499 != 24);
            uint64_t v500 = 0;
            float64x2_t v676 = *(float64x2_t *)v716;
            *(_OWORD *)v683 = *(_OWORD *)v716;
            do
            {
              *(double *)&v685[v500 + 1] = *(double *)&v720[v500] * 1.1;
              ++v500;
            }
            while (v500 != 3);
            _Q1 = v676;
            __asm { FMLS            D0, D1, V1.D[0] }
            float64x2_t v503 = vmlsq_laneq_f64(*(float64x2_t *)&v723[8], _Q1, _Q1, 1);
            double v504 = v503.f64[1];
            v590 = v452;
            if (fabs(v503.f64[0]) >= 1.0e-15)
            {
              double v672 = v503.f64[0];
              double v508 = sqrt((_D0 * v503.f64[1] - v503.f64[0] * v503.f64[0]) * -4.0+ (_D0 + v503.f64[1]) * (_D0 + v503.f64[1]));
              double v509 = (_D0 + v503.f64[1] - v508) * 0.5;
              double v504 = (_D0 + v503.f64[1] + v508) * 0.5;
              double v510 = _D0 - v509;
              long double v511 = 1.0 / hypot(_D0 - v509, v503.f64[0]);
              double v505 = v511 * v510;
              double v506 = v672 * v511;
              double v507 = -(v511 * v510);
              _D0 = v509;
            }
            else
            {
              double v505 = 0.0;
              double v506 = 1.0;
              double v507 = 0.0;
            }
            *(double *)&long long v727 = _D0;
            *((double *)&v727 + 1) = v504;
            double v711 = v506;
            double v710 = v505;
            v709[0] = *(void ***)&v506;
            v709[1] = *(void ***)&v507;
            int v512 = *((void **)&v727 + (_D0 >= v504));
            double v673 = *((double *)&v727 + (_D0 < v504));
            v684[0] = *(void **)&v673;
            v684[1] = v512;
            v685[0] = COERCE_VOID_(atan2(*(&v710 + (_D0 < v504)), *(&v710 + (_D0 >= v504))));
            v687[0] = v729;
            *(void *)&v687[1] = v730;
            __double2 v513 = __sincos_stret(*(double *)v685);
            uint64_t v514 = v512;
            uint64_t v515 = 0;
            int v516 = v467 + 2;
            double v517 = -v513.__sinval;
            int v589 = v467;
            int v657 = v467 - 3;
            uint64_t v518 = v512;
            do
            {
              uint64_t v652 = v515;
              uint64_t v519 = &v598[10 * v515 + 6];
              v520 = &v698[5 * v515];
              double v521 = 0.0;
              unsigned int v522 = v605 - 2;
              double v523 = 0.0;
              do
              {
                if ((v522 & 0x80000000) == 0 && *((void *)&v463 + 1) > (unint64_t)v522)
                {
                  uint64_t v524 = *(void *)v519 + v617 * v522;
                  uint64_t v525 = *v520 + v663 * v522;
                  double v526 = (double)(int)v522 - v676.f64[1];
                  double v527 = v513.__sinval * v526;
                  double v528 = v513.__cosval * v526;
                  int v529 = v657;
                  do
                  {
                    uint64_t v530 = (v529 + 1);
                    if (v529 + 1 >= 0 && (unint64_t)v463 > v530)
                    {
                      double v531 = (float)(*(float *)(v524 + 4 * v530) - *(float *)(v525 + 4 * v530));
                      long double v532 = exp(((v528 + v517 * ((double)(int)v530 - v676.f64[0]))* (v528 + v517 * ((double)(int)v530 - v676.f64[0]))/ *(double *)&v514+ (v527 + v513.__cosval * ((double)(int)v530 - v676.f64[0]))* (v527 + v513.__cosval * ((double)(int)v530 - v676.f64[0]))/ v673)* -0.5);
                      uint64_t v514 = v518;
                      double v523 = v523 + v532 * v532;
                      double v521 = v521 + v532 * v531;
                    }
                    ++v529;
                  }
                  while (v529 < v516);
                }
                BOOL v407 = (int)v522++ < v605 + 2;
              }
              while (v407);
              *(double *)&v685[v652 + 1] = v521 / (v523 + 0.000001);
              uint64_t v515 = v652 + 1;
            }
            while (v652 != 2);
            uint64_t v611 = 0;
            uint64_t v533 = 0;
            uint64_t v534 = 0;
            int v535 = 0;
            v686[1] = 0uLL;
            memset((char *)&v687[1] + 8, 0, 32);
            *((void *)&v686[2] + 1) = 0;
            int v596 = *((_DWORD *)v452 + 6);
            uint64_t v625 = *((void *)v452 + 1);
            double v630 = *(double *)&v514 + 1.0;
            int v607 = *((_DWORD *)v452 + 4);
            uint64_t v587 = *(void *)v452;
            int v601 = *(void *)v452 - 2;
            double v536 = 0.0;
            double v537 = 0.0;
            double v538 = 0.0;
            do
            {
              if (v596 >= -3)
              {
                int v539 = -2;
                do
                {
                  uint64_t v540 = (v539 + v625);
                  if (v539 + (int)v625 >= 0
                    && *((void *)&v463 + 1) > (unint64_t)v540
                    && v607 >= -3)
                  {
                    uint64_t v541 = *(void *)&v598[10 * v534 + 6] + v617 * v540;
                    double v542 = (double)(int)v540 - v676.f64[1];
                    double v658 = v513.__cosval * v542;
                    double v664 = v513.__sinval * v542;
                    double v653 = (double)((int)v540 - v605);
                    int v543 = v601;
                    int v544 = v607 + 4;
                    do
                    {
                      if ((v543 & 0x80000000) == 0 && (unint64_t)v463 > v543)
                      {
                        double v545 = *(float *)(v541 + 4 * v543);
                        int v546 = v685[v534 + 1];
                        double v547 = exp(((v664 + v513.__cosval * ((double)v543 - v676.f64[0]))* (v664 + v513.__cosval * ((double)v543 - v676.f64[0]))/ v673+ (v658 + v517 * ((double)v543 - v676.f64[0]))* (v658 + v517 * ((double)v543 - v676.f64[0]))/ *(double *)&v514)* -0.5)* *(double *)&v546;
                        if (v547 > v545 + 0.1)
                        {
                          ++v533;
                          *((double *)&v687[2] + v534) = v547 - v545 + *((double *)&v687[2] + v534);
                          uint64_t v611 = v533;
                        }
                        double v548 = v547 + *((double *)v687 + v534);
                        double v549 = (v545 - v548) * (v545 - v548);
                        double v538 = v538 + v549;
                        double v537 = v537 + vabdd_f64(v545, v548);
                        *(double *)&v686[1] = v538;
                        *((double *)&v686[1] + 1) = v537;
                        double v536 = v536
                             + exp(((v653 * 0.0 + (double)(v543 - v589))* (v653 * 0.0 + (double)(v543 - v589))/ (v673 + 1.0)+ (v653 + (double)(v543 - v589) * -0.0) * (v653 + (double)(v543 - v589) * -0.0) / v630)* -0.5)* v549;
                        *((double *)&v686[2] + 1) = v536;
                        ++v535;
                        uint64_t v514 = v518;
                      }
                      ++v543;
                      --v544;
                    }
                    while (v544);
                  }
                }
                while (v539++ != v596 + 1);
              }
              ++v534;
            }
            while (v534 != 3);
            *((void *)&v687[1] + 1) = v611;
            double v550 = v538 / (double)v535;
            double v551 = v536 / (double)v535
                 + *((double *)&v687[2] + 1)
                 + (((double)v605 - v676.f64[1]) * ((double)v605 - v676.f64[1])
                  + ((double)v589 - v676.f64[0]) * ((double)v589 - v676.f64[0]))
                 * 20.0;
            *((double *)&v686[2] + 1) = v551;
            *(double *)&v686[1] = v550;
            *((double *)&v686[1] + 1) = v537 / (double)v535;
            if (v673 < *(double *)&v514) {
              v684[0] = v514;
            }
            float32x4x2_t v464 = (uint64_t *)(v598 + 6);
            if (v676.f64[0] >= 0.0
              && ceil(v676.f64[0]) < v583
              && v676.f64[1] >= 0.0
              && ceil(v676.f64[1]) < v582
              && !v611
              && v550 < 0.005
              && v551 < 300.0)
            {
              double v552 = *(double *)v686 * 0.72 + *(double *)&v685[1] * 0.21 + *((double *)v686 + 1) * 0.07;
              if (v552 * v552 > 0.0144
                && (v676.f64[1] - (double)v605) * (v676.f64[1] - (double)v605)
                 + (v676.f64[0] - (double)v589) * (v676.f64[0] - (double)v589) < 1.0)
              {
                long long v554 = (void *)v707.i64[1];
                if (v707.i64[1] >= *(void *)&v708)
                {
                  uint64_t v555 = sub_248454FEC(v707.i64);
                }
                else
                {
                  sub_248454E0C((char **)v707.i64[1]);
                  v554[20] = 0;
                  v554[21] = 0;
                  uint64_t v555 = (uint64_t)(v554 + 23);
                  v554[22] = 0;
                }
                v707.i64[1] = v555;
                uint64_t v557 = *(_DWORD **)(v555 - 16);
                unint64_t v556 = *(void *)(v555 - 8);
                if ((unint64_t)v557 >= v556)
                {
                  uint64_t v559 = *(void *)(v555 - 24);
                  uint64_t v560 = ((uint64_t)v557 - v559) >> 3;
                  unint64_t v561 = v560 + 1;
                  if ((unint64_t)(v560 + 1) >> 61) {
                    sub_2483E92E8();
                  }
                  uint64_t v562 = v556 - v559;
                  if (v562 >> 2 > v561) {
                    unint64_t v561 = v562 >> 2;
                  }
                  if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v563 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v563 = v561;
                  }
                  float v564 = (char *)sub_2483F04AC(v563);
                  v566 = &v564[8 * v560];
                  *(_DWORD *)v566 = v587;
                  *((_DWORD *)v566 + 1) = v625;
                  float v568 = *(char **)(v555 - 24);
                  unint64_t v567 = *(char **)(v555 - 16);
                  v569 = v566;
                  if (v567 != v568)
                  {
                    do
                    {
                      uint64_t v570 = *((void *)v567 - 1);
                      v567 -= 8;
                      *((void *)v569 - 1) = v570;
                      v569 -= 8;
                    }
                    while (v567 != v568);
                    unint64_t v567 = *(char **)(v555 - 24);
                  }
                  uint64_t v558 = v566 + 8;
                  *(void *)(v555 - 24) = v569;
                  *(void *)(v555 - 16) = v566 + 8;
                  *(void *)(v555 - 8) = &v564[8 * v565];
                  if (v567) {
                    operator delete(v567);
                  }
                }
                else
                {
                  *uint64_t v557 = v587;
                  v557[1] = v625;
                  uint64_t v558 = v557 + 2;
                }
                *(void *)(v555 - 16) = v558;
                uint64_t v571 = v707.i64[1];
                uint64_t v572 = *((void *)v452 + 2);
                *(void *)(v707.i64[1] - 184) = v572;
                uint64_t v573 = *((void *)v452 + 3);
                *(void *)(v571 - 176) = v573;
                if (v573)
                {
                  uint64_t v574 = 0;
                  uint64_t v575 = *((void *)v598 + 2);
                  unint64_t v576 = v697;
                  unint64_t v577 = (uint64_t *)(v571 - 96);
                  do
                  {
                    if (v572)
                    {
                      for (uint64_t i4 = 0; i4 != v572; ++i4)
                      {
                        unint64_t v579 = 0;
                        unsigned int v580 = v577;
                        do
                        {
                          uint64_t v581 = *v580;
                          v580 += 3;
                          *(float *)(v581 + 4 * (i4 + v574 * v572)) = *(float *)(*(void *)&v598[v579 / 4 + 6]
                                                                               + v575 * (v574 + v625)
                                                                               + 4 * (i4 + v587))
                                                                    - *(float *)(v698[v579 / 8]
                                                                               + v576 * (v574 + v625)
                                                                               + 4 * (i4 + v587));
                          v579 += 40;
                        }
                        while (v579 != 120);
                      }
                    }
                    ++v574;
                  }
                  while (v574 != v573);
                }
              }
            }
            v452 += 22;
          }
          while (v590 + 22 != (float *)v585);
        }
        unsigned int v690 = 0;
        int8x16_t v688 = v707;
        long long v689 = (void *)v708;
        int8x16_t v707 = 0uLL;
        int8x8_t v708 = 0;
        sub_248454010((void **)&v735);
        if (!v738) {
          sub_248454010((void **)v737);
        }
      }
      if (__src)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)__src - 3));
        free(*((void **)__src - 4));
      }
      goto LABEL_545;
    }
    double v352 = v710;
    double __dstc = v711;
    double v711 = 0.0;
    if (v7 && ii)
    {
      int v353 = __src;
      double v354 = __dstc;
      do
      {
        memcpy(*(void **)&v354, v353, 4 * ii);
        *(void *)&v354 += *(void *)&v352;
        v353 += v638;
        --v351;
      }
      while (v351);
    }
    long long v355 = 0uLL;
    memset(v723, 0, 24);
    unint64_t v356 = *((void *)&v628 + 1);
    if (!*((void *)&v628 + 1))
    {
      size_t v450 = 0;
      double v358 = __dstc;
LABEL_717:
      LODWORD(v738) = 0;
      *(_OWORD *)v737 = v355;
      v737[2] = v450;
      memset(v723, 0, 24);
      sub_248454010((void **)v723);
      if (v358 != 0.0)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(*(void *)&v358 - 24));
        free(*(void **)(*(void *)&v358 - 32));
      }
      if (!v712)
      {
        double v451 = v711;
        double v711 = 0.0;
        if (v451 != 0.0)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(*(void *)&v451 - 24));
          free(*(void **)(*(void *)&v451 - 32));
        }
      }
      goto LABEL_722;
    }
    uint64_t v624 = 0;
    uint64_t v357 = v628;
    double v358 = __dstc;
LABEL_571:
    if (!v357) {
      goto LABEL_714;
    }
    unint64_t v359 = 0;
    unsigned int v360 = (char *)(*(void *)&v358 + *(void *)&v352 * v624);
    v645 = v360;
    while (1)
    {
      if (*(float *)&v360[4 * v359] > 0.04)
      {
        v720[1] = 0;
        v720[0] = 0;
        *(void *)&long long v721 = 0;
        *(_DWORD *)&v360[4 * v359] = 0;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26931BDD8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26931BDD8))
        {
          qword_26931BDC0 = 0;
          qword_26931BDC8 = 0;
          qword_26931BDD0 = 0;
          uint64_t v449 = operator new(0x40uLL);
          qword_26931BDC8 = (uint64_t)(v449 + 4);
          qword_26931BDD0 = (uint64_t)(v449 + 4);
          *uint64_t v449 = xmmword_24854EF34;
          v449[1] = unk_24854EF44;
          v449[2] = xmmword_24854EF54;
          v449[3] = unk_24854EF64;
          qword_26931BDC0 = (uint64_t)v449;
          __cxa_atexit((void (*)(void *))sub_2484558EC, &qword_26931BDC0, &dword_248384000);
          __cxa_guard_release(&qword_26931BDD8);
          double v358 = __dstc;
          unint64_t v356 = *((void *)&v628 + 1);
        }
        char v361 = (char *)operator new(8uLL);
        uint64_t v656 = (void *)v359;
        *(void *)char v361 = v359 | (unint64_t)(v624 << 32);
        unsigned __int8 v362 = v361 + 8;
        unsigned __int8 v363 = v361 + 8;
        while (1)
        {
          double v365 = v363 - 8;
          uint64_t v364 = *((void *)v363 - 1);
          long long v366 = (char *)v720[1];
          if (v720[1] >= (unint64_t)v721)
          {
            double v369 = v352;
            double v370 = v358;
            long long v371 = v362;
            size_t v372 = v720[0];
            uint64_t v373 = (uint64_t)(v720[1] - v720[0]) >> 3;
            unint64_t v374 = v373 + 1;
            if ((unint64_t)(v373 + 1) >> 61) {
              sub_2483E92E8();
            }
            uint64_t v375 = v721 - v720[0];
            if ((uint64_t)(v721 - v720[0]) >> 2 > v374) {
              unint64_t v374 = v375 >> 2;
            }
            if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v376 = v374;
            }
            if (v376) {
              unint64_t v376 = (unint64_t)sub_2483F04AC(v376);
            }
            else {
              uint64_t v377 = 0;
            }
            uint64_t v367 = (void *)(v376 + 8 * v373);
            *uint64_t v367 = v364;
            size_t v368 = (size_t)(v367 + 1);
            if (v366 != (char *)v372)
            {
              do
              {
                uint64_t v378 = *((void *)v366 - 1);
                v366 -= 8;
                *--uint64_t v367 = v378;
              }
              while (v366 != (char *)v372);
              long long v366 = (char *)v720[0];
            }
            v720[0] = (size_t)v367;
            *(void *)&long long v721 = v376 + 8 * v377;
            if (v366) {
              operator delete(v366);
            }
            unsigned __int8 v362 = v371;
            double v358 = v370;
            double v352 = v369;
            unint64_t v356 = *((void *)&v628 + 1);
          }
          else
          {
            *(void *)v720[1] = v364;
            uint64_t v367 = (void *)v720[0];
            size_t v368 = (size_t)(v366 + 8);
          }
          v720[1] = v368;
          unint64_t v662 = (v368 - (unint64_t)v367) >> 3;
          if (v662 >= 0x3E9) {
            break;
          }
          uint64_t v380 = (_DWORD *)qword_26931BDC0;
          uint64_t v379 = qword_26931BDC8;
          if (qword_26931BDC0 == qword_26931BDC8)
          {
            unsigned __int8 v363 = v365;
          }
          else
          {
            do
            {
              uint64_t v381 = (*v380 + v364);
              if (*v380 + (int)v364 < 0
                || (unint64_t)v628 <= v381
                || (unint64_t v382 = (v380[1] + HIDWORD(v364)), (v382 & 0x80000000) != 0)
                || v356 <= v382
                || (unint64_t v383 = (char *)(*(void *)&v358 + *(void *)&v352 * v382), *(float *)&v383[4 * v381] <= 0.02))
              {
                unsigned __int8 v363 = v365;
              }
              else
              {
                double v384 = v352;
                unint64_t v385 = v382 << 32;
                *(_DWORD *)&v383[4 * v381] = 0;
                if (v365 >= v362)
                {
                  uint64_t v386 = (v365 - v361) >> 3;
                  unint64_t v387 = v386 + 1;
                  if ((unint64_t)(v386 + 1) >> 61) {
                    sub_2483E92E8();
                  }
                  unint64_t v388 = v362 - v361;
                  unint64_t v389 = (v362 - v361) >> 2;
                  if (v389 > v387) {
                    unint64_t v387 = v389;
                  }
                  if (v388 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v390 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v390 = v387;
                  }
                  if (v390) {
                    unint64_t v390 = (unint64_t)sub_2483F04AC(v390);
                  }
                  else {
                    uint64_t v391 = 0;
                  }
                  uint64_t v392 = (unint64_t *)(v390 + 8 * v386);
                  unint64_t *v392 = v385 | v381;
                  unsigned __int8 v363 = (char *)(v392 + 1);
                  if (v365 == v361)
                  {
                    char v361 = (char *)(v390 + 8 * v386);
                    double v358 = __dstc;
                    double v352 = v384;
                  }
                  else
                  {
                    double v358 = __dstc;
                    double v352 = v384;
                    do
                    {
                      unint64_t v393 = *((void *)v365 - 1);
                      v365 -= 8;
                      *--uint64_t v392 = v393;
                    }
                    while (v365 != v361);
                    double v365 = v361;
                    char v361 = (char *)v392;
                  }
                  unint64_t v356 = *((void *)&v628 + 1);
                  unsigned __int8 v362 = (char *)(v390 + 8 * v391);
                  if (v365)
                  {
                    double v394 = v352;
                    double v395 = v358;
                    unint64_t v396 = v390 + 8 * v391;
                    operator delete(v365);
                    unsigned __int8 v362 = (char *)v396;
                    double v358 = v395;
                    double v352 = v394;
                    unint64_t v356 = *((void *)&v628 + 1);
                  }
                }
                else
                {
                  *(void *)double v365 = v385 | v381;
                  unsigned __int8 v363 = v365 + 8;
                  double v352 = v384;
                  unint64_t v356 = *((void *)&v628 + 1);
                }
              }
              v380 += 2;
              double v365 = v363;
            }
            while (v380 != (_DWORD *)v379);
          }
          if (v361 == v363)
          {
            if (!v363) {
              goto LABEL_625;
            }
            goto LABEL_624;
          }
        }
        unsigned __int8 v363 = v361;
        if (v361) {
LABEL_624:
        }
          operator delete(v363);
LABEL_625:
        float32x4_t v397 = (void *)v720[0];
        if (v662 < 0x3E9)
        {
          int v398 = *(_DWORD *)v720[0];
          int v399 = *(_DWORD *)(v720[0] + 4);
          if (v720[0] == v720[1])
          {
            int v402 = *(_DWORD *)v720[0];
            int v401 = *(_DWORD *)(v720[0] + 4);
          }
          else
          {
            unsigned int v400 = (int *)v720[0];
            int v401 = *(_DWORD *)(v720[0] + 4);
            int v402 = *(_DWORD *)v720[0];
            do
            {
              int v403 = *v400;
              int v404 = v400[1];
              v400 += 2;
              if (v403 < v398) {
                int v398 = v403;
              }
              if (v402 <= v403) {
                int v402 = v403;
              }
              if (v404 < v401) {
                int v401 = v404;
              }
              if (v399 <= v404) {
                int v399 = v404;
              }
            }
            while (v400 != (int *)v720[1]);
          }
          int v405 = v402 - v398 + 1;
          int v406 = v399 - v401 + 1;
          BOOL v407 = v405 > 4 || v406 > 4;
          if (!v407)
          {
            v683[0] = v398;
            v683[1] = v401;
            v684[0] = (void *)v405;
            v684[1] = (void *)v406;
            sub_248453F1C(v685, (uint64_t)v720);
            *(void *)&v686[2] = 0;
            memset((char *)v686 + 8, 0, 20);
            if (SLODWORD(v684[1]) < -7)
            {
              int v409 = 0;
              int v408 = 0;
              float v415 = 0.0;
              float v417 = 0.0;
              float v416 = 0.0;
              float v418 = 0.0;
            }
            else
            {
              int v408 = 0;
              int v409 = 0;
              int v410 = LODWORD(v684[1]) + 3;
              if (LODWORD(v684[1]) + 3 <= -4) {
                int v410 = -4;
              }
              int v411 = v410 + 1;
              int v412 = LODWORD(v684[0]) + 3;
              if (LODWORD(v684[0]) + 3 <= -4) {
                int v412 = -4;
              }
              int v413 = v412 + 5;
              uint64_t v414 = -4;
              float v415 = 0.0;
              float v416 = 0.0;
              float v417 = 0.0;
              float v418 = 0.0;
              float v419 = 0.0;
              do
              {
                uint64_t v420 = (char *)(v414 + SLODWORD(v683[1]));
                if ((uint64_t)v420 < 0 || v356 <= v420 || SLODWORD(v684[0]) < -7)
                {
                  float v426 = v419;
                }
                else
                {
                  uint64_t v421 = &__src[(v414 + LODWORD(v683[1])) * v638];
                  BOOL v423 = v683[1] > (unint64_t)v420 || (char *)v684[1] + v683[1] <= v420;
                  unsigned int v424 = LODWORD(v683[0]) - 4;
                  int v425 = v413;
                  do
                  {
                    if ((v424 & 0x80000000) != 0 || (unint64_t)v628 <= v424)
                    {
                      float v426 = v419;
                    }
                    else
                    {
                      float v426 = *(float *)&v421[4 * v424];
                      if (v426 <= v419)
                      {
                        float v427 = *(float *)&v421[4 * v424];
                        float v426 = v419;
                      }
                      else
                      {
                        DWORD2(v686[0]) = *(_DWORD *)&v421[4 * v424];
                        *(void *)&v686[2] = __PAIR64__(v420, v424);
                        float v427 = *(float *)&v421[4 * v424];
                      }
                      char v429 = v683[0] > v424 || (char *)v684[0] + v683[0] <= (void *)v424 || v423;
                      if (v429)
                      {
                        float v416 = v416 + v427;
                        *((float *)&v686[1] + 1) = v416;
                        float v415 = v415 + (float)(*(float *)&v421[4 * v424] * *(float *)&v421[4 * v424]);
                        *((float *)&v686[1] + 2) = v415;
                        ++v408;
                      }
                      else
                      {
                        float v418 = v418 + v427;
                        *((float *)v686 + 3) = v418;
                        float v417 = v417 + (float)(*(float *)&v421[4 * v424] * *(float *)&v421[4 * v424]);
                        *(float *)&v686[1] = v417;
                        ++v409;
                      }
                      unint64_t v356 = *((void *)&v628 + 1);
                    }
                    ++v424;
                    float v419 = v426;
                    --v425;
                  }
                  while (v425);
                }
                ++v414;
                float v419 = v426;
              }
              while (v411 != v414);
            }
            *((float *)v686 + 3) = v418 / (float)v409;
            *(float *)&v686[1] = (float)(v417 / (float)v409) - (float)(*((float *)v686 + 3) * *((float *)v686 + 3));
            *((float *)&v686[1] + 1) = v416 / (float)v408;
            *((float *)&v686[1] + 2) = (float)(v415 / (float)v408)
                                     - (float)(*((float *)&v686[1] + 1) * *((float *)&v686[1] + 1));
            *((float *)&v686[1] + 3) = (float)(*((float *)v686 + 3) - *((float *)&v686[1] + 1))
                                     / sqrtf(*((float *)&v686[1] + 2));
            if (*((float *)&v686[1] + 3) >= 12.0)
            {
              uint64_t v430 = *(void *)&v723[8];
              if (*(void *)&v723[8] >= *(void *)&v723[16])
              {
                uint64_t v434 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)&v723[8] - *(void *)v723) >> 3);
                unint64_t v435 = v434 + 1;
                if ((unint64_t)(v434 + 1) > 0x2E8BA2E8BA2E8BALL) {
                  sub_2483E92E8();
                }
                if (0x5D1745D1745D1746 * ((uint64_t)(*(void *)&v723[16] - *(void *)v723) >> 3) > v435) {
                  unint64_t v435 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)&v723[16] - *(void *)v723) >> 3);
                }
                if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)&v723[16] - *(void *)v723) >> 3)) >= 0x1745D1745D1745DLL) {
                  unint64_t v436 = 0x2E8BA2E8BA2E8BALL;
                }
                else {
                  unint64_t v436 = v435;
                }
                long long v718 = &v723[16];
                if (v436)
                {
                  if (v436 > 0x2E8BA2E8BA2E8BALL) {
                    sub_2483E9338();
                  }
                  unint64_t v437 = (char *)operator new(88 * v436);
                }
                else
                {
                  unint64_t v437 = 0;
                }
                unint64_t v438 = &v437[88 * v434];
                *(void *)long long v716 = v437;
                *(void *)&v716[8] = v438;
                *(void *)&v716[16] = v438;
                long long v717 = &v437[88 * v436];
                long long v439 = *(_OWORD *)v684;
                *(_OWORD *)unint64_t v438 = *(_OWORD *)v683;
                *((_OWORD *)v438 + 1) = v439;
                sub_248453F1C((void *)v438 + 4, (uint64_t)v685);
                uint64_t v440 = &v437[88 * v434];
                long long v441 = *(_OWORD *)((char *)&v686[1] + 8);
                *(_OWORD *)(v440 + 56) = *(_OWORD *)((char *)v686 + 8);
                *(_OWORD *)(v440 + 72) = v441;
                uint64_t v442 = *(void *)&v716[8];
                uint64_t v433 = *(void *)&v716[16] + 88;
                *(void *)&v716[16] += 88;
                uint64_t v443 = *(void *)&v723[8];
                uint64_t v444 = *(void *)v723;
                if (*(void *)&v723[8] == *(void *)v723)
                {
                  int64x2_t v447 = vdupq_n_s64(*(unint64_t *)&v723[8]);
                  unint64_t v359 = (unint64_t)v656;
                  unsigned int v360 = v645;
                }
                else
                {
                  unint64_t v359 = (unint64_t)v656;
                  unsigned int v360 = v645;
                  do
                  {
                    long long v445 = *(_OWORD *)(v443 - 88);
                    *(_OWORD *)(v442 - 72) = *(_OWORD *)(v443 - 72);
                    *(_OWORD *)(v442 - 88) = v445;
                    *(void *)(v442 - 48) = 0;
                    *(void *)(v442 - 40) = 0;
                    *(void *)(v442 - 56) = 0;
                    *(_OWORD *)(v442 - 56) = *(_OWORD *)(v443 - 56);
                    *(void *)(v442 - 40) = *(void *)(v443 - 40);
                    *(void *)(v443 - 56) = 0;
                    *(void *)(v443 - 48) = 0;
                    *(void *)(v443 - 40) = 0;
                    long long v446 = *(_OWORD *)(v443 - 16);
                    *(_OWORD *)(v442 - 32) = *(_OWORD *)(v443 - 32);
                    *(_OWORD *)(v442 - 16) = v446;
                    v442 -= 88;
                    v443 -= 88;
                  }
                  while (v443 != v444);
                  int64x2_t v447 = *(int64x2_t *)v723;
                  uint64_t v433 = *(void *)&v716[16];
                }
                *(void *)long long v723 = v442;
                *(void *)&v723[8] = v433;
                *(int64x2_t *)&v716[8] = v447;
                v448 = *(char **)&v723[16];
                *(void *)&v723[16] = v717;
                long long v717 = v448;
                *(void *)long long v716 = v447.i64[0];
                sub_248453FAC((uint64_t)v716);
              }
              else
              {
                long long v431 = *(_OWORD *)v684;
                **(_OWORD **)&v723[8] = *(_OWORD *)v683;
                *(_OWORD *)(v430 + 16) = v431;
                sub_248453F1C((void *)(v430 + 32), (uint64_t)v685);
                long long v432 = *(_OWORD *)((char *)v686 + 8);
                *(_OWORD *)(v430 + 72) = *(_OWORD *)((char *)&v686[1] + 8);
                *(_OWORD *)(v430 + 56) = v432;
                uint64_t v433 = v430 + 88;
                unint64_t v359 = (unint64_t)v656;
                unsigned int v360 = v645;
              }
              *(void *)&v723[8] = v433;
              if (v685[0])
              {
                v685[1] = v685[0];
                operator delete(v685[0]);
              }
              float32x4_t v397 = (void *)v720[0];
              unint64_t v356 = *((void *)&v628 + 1);
              if (!v720[0]) {
                goto LABEL_690;
              }
LABEL_689:
              operator delete(v397);
              goto LABEL_690;
            }
            if (v685[0])
            {
              v685[1] = v685[0];
              operator delete(v685[0]);
            }
          }
        }
        unint64_t v359 = (unint64_t)v656;
        unsigned int v360 = v645;
        if (v397) {
          goto LABEL_689;
        }
      }
LABEL_690:
      if (++v359 >= (unint64_t)v628)
      {
        uint64_t v357 = v628;
LABEL_714:
        if (++v624 >= v356)
        {
          long long v355 = *(_OWORD *)v723;
          size_t v450 = *(void *)&v723[16];
          goto LABEL_717;
        }
        goto LABEL_571;
      }
    }
  }
LABEL_338:
  if ((char *)v222 == v224)
  {
LABEL_501:
    uint64_t v221 = 0;
    goto LABEL_552;
  }
  sub_248482C94(v222, v224, 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * ((uint64_t)&v224[-v222] >> 3)), 1);
  unint64_t v225 = (*(void *)&v732[8] - *(void *)v732) / 184;
  if (*(void *)&v732[8] == *(void *)v732)
  {
    unint64_t v228 = 0;
    unint64_t v227 = 0;
    unint64_t v226 = 0;
  }
  else
  {
    unint64_t v226 = 0;
    unint64_t v227 = 0;
    unint64_t v228 = 0;
    if (v225 <= 1) {
      uint64_t v229 = 1;
    }
    else {
      uint64_t v229 = (*(void *)&v732[8] - *(void *)v732) / 184;
    }
    unint64_t v230 = (unint64_t *)(*(void *)v732 + 8);
    do
    {
      unint64_t v231 = *(v230 - 1);
      unint64_t v232 = *v230;
      if (v226 <= v231) {
        unint64_t v226 = *(v230 - 1);
      }
      if (v227 <= v232) {
        unint64_t v227 = *v230;
      }
      v228 += v232 * v231;
      v230 += 23;
      --v229;
    }
    while (v229);
  }
  sub_2484837E0(v716, v225);
  float v235 = (float)v227;
  float v236 = sqrt((double)v228);
  if ((float)v227 < v236) {
    float v235 = v236;
  }
  if ((float)v226 >= v236) {
    float v236 = (float)v226;
  }
  unint64_t v237 = (unint64_t)v236;
  unint64_t v238 = (unint64_t)v235;
  do
  {
    unint64_t v237 = (unint64_t)(float)((float)((float)v237 * 1.05) + 1.0);
    unint64_t v238 = (unint64_t)(float)((float)((float)v238 * 1.05) + 1.0);
    sub_2483E8CE0((uint64_t)v683, v237, v238);
    uint64_t v221 = LODWORD(v685[1]);
    if (LODWORD(v685[1])) {
      goto LABEL_496;
    }
    size_t v239 = LODWORD(v683[0]);
    uint64_t v240 = HIDWORD(v683[0]);
    uint64_t v241 = v684[0];
    uint64_t v242 = (char *)v684[1];
    v684[1] = 0;
    if (LODWORD(v683[0]) && HIDWORD(v683[0]))
    {
      uint64_t v243 = v242;
      do
      {
        bzero(v243, v239);
        uint64_t v243 = (char *)v241 + (void)v243;
        --v240;
      }
      while (v240);
    }
    uint64_t v244 = *(void *)&v732[8];
    uint64_t v245 = *(void *)v732;
    if (*(void *)&v732[8] == *(void *)v732)
    {
      LODWORD(v247) = 0;
      goto LABEL_405;
    }
    unint64_t v246 = 0;
    unint64_t v247 = 0;
    unint64_t v670 = v238;
    do
    {
      unsigned int v248 = (size_t *)(v245 + 184 * v246);
      unint64_t v249 = v248[1];
      if (v249 > v238)
      {
LABEL_402:
        int v264 = 0;
        if (v242) {
          goto LABEL_406;
        }
LABEL_407:
        uint64_t v265 = v684[1];
        v684[1] = 0;
        if (v265)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(v265 - 3));
          free((void *)*(v265 - 4));
        }
        goto LABEL_409;
      }
      unint64_t v250 = 0;
      size_t v251 = *v248;
      unint64_t v252 = v242;
      unint64_t v253 = v249;
      while (v251 > v237)
      {
LABEL_390:
        ++v250;
        ++v253;
        unint64_t v252 = (char *)v241 + (void)v252;
        if (v253 > v238) {
          goto LABEL_402;
        }
      }
      size_t v254 = 0;
      size_t v255 = v251;
      while (2)
      {
        if (v250 < v253)
        {
          char v256 = 0;
          if (v255 <= v254) {
            size_t v257 = v254;
          }
          else {
            size_t v257 = v255;
          }
          unint64_t v258 = v250;
          while (2)
          {
            unint64_t v259 = &v242[(void)v241 * v258];
            while (1)
            {
              size_t v260 = v254;
              if (v254 < v255) {
                break;
              }
LABEL_384:
              ++v258;
              unint64_t v259 = (char *)v241 + (void)v259;
              if (v258 == v253)
              {
                size_t v260 = v257;
                if ((v256 & 1) == 0)
                {
                  unint64_t v262 = (size_t *)(*(void *)v716 + 16 * v246);
                  *unint64_t v262 = v254;
                  v262[1] = v250;
                  uint64_t v263 = &v252[v254];
                  do
                  {
                    if (v254 < v254 + v251) {
                      memset(v263, 1, v251);
                    }
                    uint64_t v263 = (char *)v241 + (void)v263;
                    --v249;
                  }
                  while (v249);
                  uint64_t v244 = *(void *)&v732[8];
                  uint64_t v245 = *(void *)v732;
                  unint64_t v238 = v670;
                  goto LABEL_398;
                }
                goto LABEL_389;
              }
            }
            while (!v259[v260])
            {
              if (v255 == ++v260) {
                goto LABEL_384;
              }
            }
            ++v258;
            char v256 = 1;
            if (v258 != v253) {
              continue;
            }
            break;
          }
LABEL_389:
          size_t v254 = v260 + 1;
          size_t v255 = v260 + 1 + v251;
          if (v255 <= v237) {
            continue;
          }
          goto LABEL_390;
        }
        break;
      }
      unint64_t v261 = (void *)(*(void *)v716 + 16 * v246);
      *unint64_t v261 = 0;
      v261[1] = v250;
LABEL_398:
      if (v247 <= v253) {
        unint64_t v247 = v253;
      }
      ++v246;
    }
    while (v246 < 0xD37A6F4DE9BD37A7 * ((v244 - v245) >> 3));
LABEL_405:
    int v264 = 9;
    if (!v242) {
      goto LABEL_407;
    }
LABEL_406:
    atomic_fetch_add(&qword_26931BDF8, -*((void *)v242 - 3));
    free(*((void **)v242 - 4));
    if (!LODWORD(v685[1])) {
      goto LABEL_407;
    }
LABEL_409:
    ;
  }
  while (!v264);
  sub_2483F0C3C((uint64_t)v709, v237, v247);
  uint64_t v221 = v715;
  if (!v715)
  {
    sub_2483F0E78((uint64_t)&v699, (uint64_t)v709);
    sub_248438C34((unsigned int *)&v699);
    v737[0] = (size_t)v701;
    v737[1] = v704;
    v737[2] = v705;
    uint64_t v266 = *(void *)v732;
    if (*(void *)&v732[8] == *(void *)v732)
    {
      __dstb = 0;
      unint64_t v633 = 0;
      unint64_t v267 = 0;
      long long v671 = 0u;
      long long v675 = 0u;
      long long v644 = 0u;
    }
    else
    {
      __dstb = 0;
      unint64_t v633 = 0;
      unint64_t v267 = 0;
      unint64_t v268 = 0;
      unint64_t v269 = 0;
      unint64_t v270 = v700 >> 2;
      uint64_t v271 = *(unsigned int *)(*(void *)a2 + 320);
      long long v671 = 0u;
      long long v675 = 0u;
      uint64_t v272 = 88;
      long long v644 = 0u;
      unint64_t v620 = v700 >> 2;
      do
      {
        unint64_t v639 = v268;
        int64x2_t v273 = (uint64_t *)(v266 + 184 * v269);
        uint64_t v274 = *v273;
        long long v637 = *(_OWORD *)(*(void *)v716 + 16 * v269);
        uint64_t v661 = v273[1];
        if (v661)
        {
          for (uint64_t i5 = 0; i5 != v661; ++i5)
          {
            if (v274)
            {
              for (uint64_t i6 = 0; i6 != v274; ++i6)
              {
                uint64_t v277 = 0;
                uint64_t v278 = (uint64_t *)(v266 + v272);
                do
                {
                  uint64_t v279 = *v278;
                  v278 += 3;
                  *(_DWORD *)(v737[v277++] + 4 * (v637 + (i5 + *((void *)&v637 + 1)) * v270 + i6)) = *(_DWORD *)(v279 + 4 * (i6 + i5 * v274));
                }
                while (v277 != 3);
              }
            }
          }
        }
        uint64_t v629 = v272;
        uint64_t v280 = v266 + 184 * v269;
        unint64_t v281 = *(unsigned int **)(v280 + 160);
        v655 = *(unsigned int **)(v280 + 168);
        if (v281 != v655)
        {
          unint64_t v623 = v269;
          unint64_t v639 = *((void *)&v644 + 1);
          unint64_t v651 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v644 + 1) - v644) >> 3);
          do
          {
            uint64_t v282 = *v281;
            uint64_t v283 = v281[1];
            unint64_t v284 = (char *)*((void *)&v671 + 1);
            if (*((void *)&v671 + 1) >= (unint64_t)__dstb)
            {
              unint64_t v286 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v671 + 1) - v671) >> 3) + 1;
              if (v286 > 0xAAAAAAAAAAAAAAALL) {
                sub_2483E92E8();
              }
              if (0x5555555555555556 * (((uint64_t)__dstb - (uint64_t)v671) >> 3) > v286) {
                unint64_t v286 = 0x5555555555555556 * (((uint64_t)__dstb - (uint64_t)v671) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)__dstb - (uint64_t)v671) >> 3) >= 0x555555555555555) {
                unint64_t v287 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v287 = v286;
              }
              if (v287) {
                unint64_t v287 = (unint64_t)sub_2483F8ED4(v287);
              }
              else {
                uint64_t v288 = 0;
              }
              __int32 v289 = (void *)(v287 + 8 * ((uint64_t)(*((void *)&v671 + 1) - v671) >> 3));
              *__int32 v289 = v282;
              v289[1] = v283;
              v289[2] = v651;
              unint64_t v290 = v289;
              if (*((void *)&v671 + 1) != (void)v671)
              {
                do
                {
                  long long v291 = *(_OWORD *)(v284 - 24);
                  *(v290 - 1) = *((void *)v284 - 1);
                  *(_OWORD *)(v290 - 3) = v291;
                  v290 -= 3;
                  v284 -= 24;
                }
                while (v284 != (char *)v671);
                unint64_t v284 = (char *)v671;
              }
              __dstb = (void *)(v287 + 24 * v288);
              uint64_t v285 = (uint64_t)(v289 + 3);
              *(void *)&long long v671 = v290;
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              **((void **)&v671 + 1) = v282;
              *(void *)(*((void *)&v671 + 1) + 8) = v283;
              uint64_t v285 = *((void *)&v671 + 1) + 24;
              *(void *)(*((void *)&v671 + 1) + 16) = v651;
            }
            *(void *)&long long v292 = v671;
            *((void *)&v292 + 1) = v285;
            long long v671 = v292;
            long long v293 = (_DWORD *)*((void *)&v675 + 1);
            if (*((void *)&v675 + 1) >= v267)
            {
              unint64_t v295 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v675 + 1) - v675) >> 2) + 1;
              if (v295 > 0x1555555555555555) {
                sub_2483E92E8();
              }
              if (0x5555555555555556 * ((uint64_t)(v267 - v675) >> 2) > v295) {
                unint64_t v295 = 0x5555555555555556 * ((uint64_t)(v267 - v675) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v267 - v675) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v296 = 0x1555555555555555;
              }
              else {
                unint64_t v296 = v295;
              }
              if (v296) {
                unint64_t v296 = (unint64_t)sub_24840C754(v296);
              }
              else {
                uint64_t v297 = 0;
              }
              unint64_t v298 = v296 + 4 * ((uint64_t)(*((void *)&v675 + 1) - v675) >> 2);
              *(unsigned char *)unint64_t v298 = 2;
              *(_DWORD *)(v298 + 4) = 0;
              *(unsigned char *)(v298 + 8) = 0;
              unint64_t v299 = v298;
              if (*((void *)&v675 + 1) != (void)v675)
              {
                do
                {
                  uint64_t v300 = *(void *)(v293 - 3);
                  v293 -= 3;
                  int v301 = v293[2];
                  *(void *)(v299 - 12) = v300;
                  v299 -= 12;
                  *(_DWORD *)(v299 + 8) = v301;
                }
                while (v293 != (_DWORD *)v675);
                long long v293 = (_DWORD *)v675;
              }
              unint64_t v267 = v296 + 12 * v297;
              unint64_t v294 = v298 + 12;
              *(void *)&long long v675 = v299;
              if (v293) {
                operator delete(v293);
              }
            }
            else
            {
              **((unsigned char **)&v675 + 1) = 2;
              *(_DWORD *)(*((void *)&v675 + 1) + 4) = 0;
              unint64_t v294 = *((void *)&v675 + 1) + 12;
              *(unsigned char *)(*((void *)&v675 + 1) + 8) = 0;
            }
            *(void *)&long long v302 = v675;
            *((void *)&v302 + 1) = v294;
            long long v675 = v302;
            if (v271)
            {
              for (uint64_t i7 = 0; i7 != v271; ++i7)
              {
                if (v294 >= v267)
                {
                  int v305 = (void *)v675;
                  unint64_t v306 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v294 - v675) >> 2);
                  unint64_t v307 = v306 + 1;
                  if (v306 + 1 > 0x1555555555555555) {
                    sub_2483E92E8();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v267 - v675) >> 2) > v307) {
                    unint64_t v307 = 0x5555555555555556 * ((uint64_t)(v267 - v675) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v267 - v675) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v308 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v308 = v307;
                  }
                  if (v308) {
                    unint64_t v308 = (unint64_t)sub_24840C754(v308);
                  }
                  else {
                    uint64_t v309 = 0;
                  }
                  unint64_t v310 = v308 + 12 * v306;
                  *(unsigned char *)unint64_t v310 = 0;
                  *(_DWORD *)(v310 + 4) = 0;
                  *(unsigned char *)(v310 + 8) = 0;
                  uint64_t v311 = *((void *)&v675 + 1);
                  unint64_t v312 = v310;
                  while (v311 != (void)v675)
                  {
                    uint64_t v313 = *(void *)(v311 - 12);
                    v311 -= 12;
                    int v314 = *(_DWORD *)(v311 + 8);
                    *(void *)(v312 - 12) = v313;
                    v312 -= 12;
                    *(_DWORD *)(v312 + 8) = v314;
                  }
                  unint64_t v267 = v308 + 12 * v309;
                  unint64_t v294 = v310 + 12;
                  *(void *)&long long v675 = v312;
                  if (v305) {
                    operator delete(v305);
                  }
                }
                else
                {
                  *(unsigned char *)unint64_t v294 = 0;
                  __int16 v304 = v683[0];
                  *(unsigned char *)(v294 + 3) = BYTE2(v683[0]);
                  *(_WORD *)(v294 + 1) = v304;
                  *(_DWORD *)(v294 + 4) = 0;
                  *(unsigned char *)(v294 + 8) = 0;
                  *(_WORD *)(v294 + 9) = v696[0];
                  *(unsigned char *)(v294 + 11) = BYTE2(v696[0]);
                  v294 += 12;
                }
                *(void *)&long long v315 = v675;
                *((void *)&v315 + 1) = v294;
                long long v675 = v315;
              }
            }
            v281 += 2;
          }
          while (v281 != v655);
          unint64_t v270 = v620;
          unint64_t v269 = v623;
        }
        unint64_t v316 = v639;
        if (v639 >= v633)
        {
          long long v318 = (void *)v644;
          unint64_t v319 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v639 - v644) >> 3) + 1;
          if (v319 > 0x666666666666666) {
            sub_2483E92E8();
          }
          if (0x999999999999999ALL * ((uint64_t)(v633 - v644) >> 3) > v319) {
            unint64_t v319 = 0x999999999999999ALL * ((uint64_t)(v633 - v644) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v633 - v644) >> 3) >= 0x333333333333333) {
            unint64_t v320 = 0x666666666666666;
          }
          else {
            unint64_t v320 = v319;
          }
          if (v320)
          {
            unint64_t v320 = (unint64_t)sub_248403444(v320);
            unint64_t v316 = *((void *)&v644 + 1);
          }
          else
          {
            uint64_t v321 = 0;
          }
          unint64_t v322 = v320 + 8 * ((uint64_t)(v639 - v644) >> 3);
          *(void *)unint64_t v322 = 3;
          *(_OWORD *)(v322 + 8) = v637;
          *(void *)(v322 + 24) = v274;
          *(void *)(v322 + 32) = v661;
          if (v316 == (void)v644)
          {
            unint64_t v326 = v320 + 8 * ((uint64_t)(v639 - v644) >> 3);
            uint64_t v317 = v629;
          }
          else
          {
            unint64_t v323 = v320 + 8 * ((uint64_t)(v639 - v644) >> 3);
            uint64_t v317 = v629;
            do
            {
              long long v324 = *(_OWORD *)(v316 - 40);
              long long v325 = *(_OWORD *)(v316 - 24);
              unint64_t v326 = v323 - 40;
              *(void *)(v323 - 8) = *(void *)(v316 - 8);
              *(_OWORD *)(v323 - 24) = v325;
              *(_OWORD *)(v323 - 40) = v324;
              v316 -= 40;
              v323 -= 40;
            }
            while (v316 != (void)v644);
          }
          unint64_t v633 = v320 + 40 * v321;
          unint64_t v268 = v322 + 40;
          *(void *)&long long v644 = v326;
          if (v318)
          {
            signed int v327 = v318;
            unint64_t v328 = v322 + 40;
            operator delete(v327);
            unint64_t v268 = v328;
          }
        }
        else
        {
          *(void *)unint64_t v639 = 3;
          *(_OWORD *)(v639 + 8) = v637;
          *(void *)(v639 + 24) = v274;
          *(void *)(v639 + 32) = v661;
          unint64_t v268 = v639 + 40;
          uint64_t v317 = v629;
        }
        *(void *)&long long v329 = v644;
        *((void *)&v329 + 1) = v268;
        long long v644 = v329;
        ++v269;
        uint64_t v266 = *(void *)v732;
        uint64_t v272 = v317 + 184;
      }
      while (v269 < 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)&v732[8] - *(void *)v732) >> 3));
    }
    sub_24844C318((uint64_t)v683, (uint64_t)v592);
    HIBYTE(v686[1]) = 0;
    uint64_t v221 = sub_248483870();
    if (!v221)
    {
      *(_OWORD *)v681 = v671;
      v682 = __dstb;
      *(_OWORD *)v679 = v644;
      unint64_t v680 = v633;
      *(_OWORD *)v677 = v675;
      unint64_t v678 = v267;
      sub_248484178((void *)(a2 + 1256), (uint64_t)v681, (uint64_t)v679, (uint64_t)v677);
      if (v677[0])
      {
        v677[1] = v677[0];
        operator delete(v677[0]);
      }
      if (v679[0])
      {
        v679[1] = v679[0];
        operator delete(v679[0]);
      }
      *(void *)&long long v671 = 0;
      if (v681[0])
      {
        v681[1] = v681[0];
        operator delete(v681[0]);
      }
      *(void *)&long long v644 = 0;
      *(void *)&long long v675 = 0;
    }
    sub_2484414D4((uint64_t)v683);
    if ((void)v675) {
      operator delete((void *)v675);
    }
    if ((void)v644) {
      operator delete((void *)v644);
    }
    if ((void)v671) {
      operator delete((void *)v671);
    }
    for (uint64_t i9 = 104; i9 != -16; i9 -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&v699 + i9));
    if (!v715)
    {
      for (uint64_t i10 = 13; i10 != -2; i10 -= 5)
        sub_2483E8DDC((uint64_t *)&v709[i10]);
    }
  }
LABEL_496:
  if (*(void *)v716)
  {
    *(void *)&v716[8] = *(void *)v716;
    operator delete(*(void **)v716);
  }
LABEL_552:
  v683[0] = (size_t)v732;
  sub_248455114((void ***)v683);
  if (!v692)
  {
    v683[0] = (size_t)v691;
    sub_248455114((void ***)v683);
  }
  return v221;
}

void sub_248481E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  __cxa_guard_abort(&qword_26931BDD8);
  if (STACK[0x700]) {
    operator delete((void *)STACK[0x700]);
  }
  sub_248454010((void **)&STACK[0x730]);
  if (a56)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(a56 - 3));
    free((void *)*(a56 - 4));
  }
  if (!LODWORD(STACK[0x628]))
  {
    unint64_t v57 = STACK[0x618];
    STACK[0x618] = 0;
    if (v57)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v57 - 24));
      free(*(void **)(v57 - 32));
    }
  }
  if (a27)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a27 - 24));
    free(*(void **)(a27 - 32));
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x4E0] + i));
  if (!LODWORD(STACK[0x5D8]))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x560] + j));
  }
  STACK[0x560] = (unint64_t)&STACK[0x5E0];
  sub_248455114((void ***)&STACK[0x560]);
  STACK[0x560] = (unint64_t)&STACK[0x7C0];
  sub_248455114((void ***)&STACK[0x560]);
  if (!LODWORD(STACK[0x4B8]))
  {
    STACK[0x560] = (unint64_t)&STACK[0x4A0];
    sub_248455114((void ***)&STACK[0x560]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_248482444(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v3 = a2;
    v5[0] = sub_2483F1794;
    v5[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))result)(*(void *)(result + 8), v5, sub_2484861EC, sub_248485FE8, 0, a2);
    }
    else
    {
      for (unsigned int i = 0; i != v3; ++i)
        uint64_t result = sub_248485FE8((uint64_t)v5, i);
    }
  }
  return result;
}

void sub_2484824E0(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  sub_248484CBC(a1, a2, v3, 1);
}

void sub_248482518(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v18 = v4 + 184 * a2;
      while (v5 != v18)
      {
        v5 -= 184;
        sub_248455198(v5);
      }
      a1[1] = v18;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0xD37A6F4DE9BD37A7 * ((v8 - v5) >> 3) >= v7)
    {
      unint64_t v19 = v5 + 184 * v7;
      uint64_t v20 = 184 * a2 - 8 * ((v5 - *a1) >> 3);
      do
      {
        sub_248454E0C((char **)v5);
        *(void *)(v5 + 160) = 0;
        *(void *)(v5 + 168) = 0;
        *(void *)(v5 + 176) = 0;
        v5 += 184;
        v20 -= 184;
      }
      while (v20);
      a1[1] = v19;
    }
    else
    {
      if (a2 > 0x1642C8590B21642) {
        sub_2483E92E8();
      }
      uint64_t v24 = a1 + 2;
      unint64_t v9 = 0xD37A6F4DE9BD37A7 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0xB21642C8590B21) {
        unint64_t v11 = 0x1642C8590B21642;
      }
      else {
        unint64_t v11 = v10;
      }
      unsigned int v12 = (char *)sub_248455210(v11);
      int8x16_t v13 = (char **)&v12[184 * v6];
      v21[0] = v12;
      v21[1] = v13;
      int v22 = (char *)v13;
      unsigned __int8 v23 = &v12[184 * v14];
      uint64_t v15 = 184 * a2;
      uint64_t v16 = &v12[184 * a2];
      unint64_t v17 = v15 - 184 * v6;
      do
      {
        sub_248454E0C(v13);
        v13[20] = 0;
        v13[21] = 0;
        v13[22] = 0;
        v13 += 23;
        v17 -= 184;
      }
      while (v17);
      int v22 = v16;
      sub_24845525C(a1, v21);
      sub_2484552E4((uint64_t)v21);
    }
  }
}

void sub_2484826B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

BOOL sub_2484826D8(void *a1, void *a2)
{
  if (*a1 == *a2 && (uint64_t v2 = a1[1], v2 == a2[1]))
  {
    BOOL v3 = 0;
    unint64_t v4 = 0;
    size_t v5 = v2 * *a1;
    unint64_t v6 = (const void **)(a2 + 2);
    unint64_t v7 = (const void **)(a1 + 2);
    do
    {
      if (memcmp(*v7, *v6, v5)) {
        break;
      }
      BOOL v3 = v4 > 1;
      v6 += 3;
      v7 += 3;
      ++v4;
    }
    while (v4 != 3);
  }
  else
  {
    return 0;
  }
  return v3;
}

double sub_248482778(double **a1, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  unint64_t v6 = a3;
  uint64_t v8 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  uint64_t v10 = a2 - (void)*a1;
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = (double *)((char *)*a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = a1[2];
  if (a5 <= (uint64_t)((uint64_t)v13 - v9) >> 3)
  {
    uint64_t v20 = (uint64_t)(v9 - (void)v12) >> 3;
    if (v20 >= a5)
    {
      unsigned int v21 = &a3[a5];
      unsigned __int8 v23 = a1[1];
    }
    else
    {
      unsigned int v21 = &a3[v20];
      if (v21 == a4)
      {
        unsigned __int8 v23 = a1[1];
      }
      else
      {
        int v22 = v21;
        unsigned __int8 v23 = a1[1];
        do
        {
          uint64_t v24 = *(void *)v22++;
          *(void *)v23++ = v24;
        }
        while (v22 != a4);
      }
      a1[1] = v23;
      if ((uint64_t)(v9 - (void)v12) < 1) {
        return result;
      }
    }
    uint64_t v37 = &v12[a5];
    unint64_t v38 = (uint64_t *)&v23[-a5];
    unint64_t v39 = v23;
    if ((unint64_t)v38 < v9)
    {
      unint64_t v39 = v23;
      do
      {
        uint64_t v40 = *v38++;
        *(void *)v39++ = v40;
      }
      while ((unint64_t)v38 < v9);
    }
    a1[1] = v39;
    if (v23 != v37)
    {
      uint64_t v41 = 8 * (v23 - v37);
      uint64x2_t v42 = (_DWORD *)v23 - 1;
      uint64_t v43 = (uint64_t)&v8[v11 - 1] + 4;
      do
      {
        *(v42 - 1) = *(_DWORD *)(v43 + v41 - 4);
        *uint64x2_t v42 = *(_DWORD *)(v43 + v41);
        v42 -= 2;
        v41 -= 8;
      }
      while (v41);
    }
    if (v21 != a3)
    {
      do
      {
        double v44 = *v6++;
        double result = v44;
        *v12++ = v44;
      }
      while (v6 != v21);
    }
  }
  else
  {
    unint64_t v14 = a5 + ((uint64_t)(v9 - (void)v8) >> 3);
    if (v14 >> 61) {
      sub_2483E92E8();
    }
    uint64_t v15 = (char *)v13 - (char *)v8;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= v14) {
      uint64_t v16 = v14;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      unint64_t v17 = (unint64_t)sub_2483F04AC(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    size_t v25 = (void *)(v17 + 8 * v11);
    uint64_t v26 = (double *)&v25[a5];
    uint64_t v27 = 8 * a5;
    double v28 = v25;
    do
    {
      uint64_t v29 = *(void *)v6++;
      *v28++ = v29;
      v27 -= 8;
    }
    while (v27);
    long long v30 = *a1;
    if (*a1 != v12)
    {
      double v31 = v12;
      do
      {
        uint64_t v32 = *((void *)v31-- - 1);
        *--size_t v25 = v32;
      }
      while (v31 != v30);
    }
    unint64_t v33 = v17 + 8 * v18;
    for (unsigned int i = a1[1]; v12 != i; ++v26)
    {
      uint64_t v35 = *(void *)v12++;
      *(void *)uint64_t v26 = v35;
    }
    unint64_t v36 = *a1;
    *a1 = (double *)v25;
    a1[1] = v26;
    a1[2] = (double *)v33;
    if (v36)
    {
      operator delete(v36);
    }
  }
  return result;
}

uint64_t sub_248482988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v43 = a2 + 24;
  do
  {
    if (a1 != a2)
    {
      uint64_t v5 = a1 + v4;
      unint64_t v7 = (void **)(a1 + v4 + 16);
      unint64_t v6 = (char *)*v7;
      uint64_t v8 = *(char **)(v43 + v4 - 8);
      unint64_t v9 = *(unsigned char **)(v43 + v4);
      unint64_t v10 = v9 - v8;
      unint64_t v11 = *(void *)(a1 + v4 + 32);
      if (v11 - (unint64_t)*v7 >= v9 - v8)
      {
        uint64_t v16 = *(unsigned char **)(v5 + 24);
        uint64_t v17 = v16 - v6;
        if (v16 - v6 >= v10)
        {
          if (v9 != v8) {
            memmove(*(void **)(a1 + v4 + 16), *(const void **)(v43 + v4 - 8), v9 - v8);
          }
          uint64_t v20 = &v6[v10];
        }
        else
        {
          if (v16 != v6)
          {
            memmove(*(void **)(a1 + v4 + 16), *(const void **)(v43 + v4 - 8), v16 - v6);
            unint64_t v6 = *(char **)(v5 + 24);
          }
          uint64_t v18 = &v8[v17];
          size_t v19 = v9 - &v8[v17];
          if (v19) {
            memmove(v6, v18, v19);
          }
          uint64_t v20 = &v6[v19];
        }
        *(void *)(v5 + 24) = v20;
      }
      else
      {
        if (v6)
        {
          *(void *)(a1 + v4 + 24) = v6;
          operator delete(v6);
          unint64_t v11 = 0;
          unsigned char *v7 = 0;
          *(void *)(a1 + v4 + 24) = 0;
          *(void *)(a1 + v4 + 32) = 0;
        }
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_60;
        }
        uint64_t v12 = 2 * v11;
        if (2 * v11 <= v10) {
          uint64_t v12 = v9 - v8;
        }
        size_t v13 = v11 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v12;
        if ((v13 & 0x8000000000000000) != 0) {
LABEL_60:
        }
          sub_2483E92E8();
        unint64_t v14 = (char *)operator new(v13);
        uint64_t v15 = v14;
        unsigned char *v7 = v14;
        *(void *)(a1 + v4 + 24) = v14;
        *(void *)(v5 + 32) = &v14[v13];
        if (v9 != v8) {
          memmove(v14, v8, v9 - v8);
        }
        *(void *)(a1 + v4 + 24) = &v15[v10];
      }
    }
    v4 += 24;
  }
  while (v4 != 72);
  for (uint64_t i = 0; i != 3; ++i)
  {
    while (a1 == a2)
    {
      if (++i == 3) {
        return a1;
      }
    }
    sub_2483FB040((char *)(a1 + 24 * i + 88), *(char **)(a2 + 24 * i + 88), *(void *)(a2 + 24 * i + 96), (uint64_t)(*(void *)(a2 + 24 * i + 96) - *(void *)(a2 + 24 * i + 88)) >> 2);
  }
  int v22 = *(char **)(a1 + 160);
  uint64_t v24 = *(char **)(a2 + 160);
  unsigned __int8 v23 = *(char **)(a2 + 168);
  unint64_t v25 = (v23 - v24) >> 3;
  uint64_t v26 = *(void *)(a1 + 176);
  if (v25 <= (v26 - (uint64_t)v22) >> 3)
  {
    long long v30 = (void *)(a1 + 168);
    uint64_t v29 = *(char **)(a1 + 168);
    unint64_t v35 = (v29 - v22) >> 3;
    if (v35 >= v25)
    {
      uint64_t v40 = *(char **)(a1 + 160);
      while (v24 != v23)
      {
        uint64_t v41 = *(void *)v24;
        v24 += 8;
        *(void *)uint64_t v40 = v41;
        v40 += 8;
      }
      int64_t v34 = v40 - v22;
      uint64_t v29 = v22;
      goto LABEL_58;
    }
    unint64_t v36 = &v24[8 * v35];
    if (v29 != v22)
    {
      uint64_t v37 = 8 * v35;
      do
      {
        uint64_t v38 = *(void *)v24;
        v24 += 8;
        *(void *)int v22 = v38;
        v22 += 8;
        v37 -= 8;
      }
      while (v37);
    }
    uint64_t v32 = v29;
    while (v36 != v23)
    {
      uint64_t v39 = *(void *)v36;
      v36 += 8;
      *(void *)uint64_t v32 = v39;
      v32 += 8;
    }
  }
  else
  {
    if (v22)
    {
      *(void *)(a1 + 168) = v22;
      operator delete(v22);
      uint64_t v26 = 0;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
    }
    if (v23 - v24 < 0) {
      goto LABEL_61;
    }
    uint64_t v27 = v26 >> 2;
    if (v26 >> 2 <= v25) {
      uint64_t v27 = (v23 - v24) >> 3;
    }
    unint64_t v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
    if (v28 >> 61) {
LABEL_61:
    }
      sub_2483E92E8();
    uint64_t v29 = (char *)sub_2483F04AC(v28);
    *(void *)(a1 + 168) = v29;
    long long v30 = (void *)(a1 + 168);
    *(void *)(a1 + 160) = v29;
    *(void *)(a1 + 176) = &v29[8 * v31];
    uint64_t v32 = v29;
    if (v24 != v23)
    {
      uint64_t v32 = v29;
      do
      {
        uint64_t v33 = *(void *)v24;
        v24 += 8;
        *(void *)uint64_t v32 = v33;
        v32 += 8;
      }
      while (v24 != v23);
    }
  }
  int64_t v34 = v32 - v29;
LABEL_58:
  *long long v30 = &v29[v34];
  return a1;
}

void sub_248482C94(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v9 = a2;
    unint64_t v10 = a2 - 184;
    unint64_t v11 = (char *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t)v11;
          uint64_t v12 = v9 - v11;
          uint64_t v13 = 0xD37A6F4DE9BD37A7 * ((v9 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((void *)a2 - 22) * *((void *)a2 - 23) > *(void *)(a1 + 8) * *(void *)a1)
                {
                  sub_248484264((_OWORD *)a1, v10);
                  uint64_t v62 = *(void *)(a1 + 160);
                  *(void *)(a1 + 160) = *((void *)a2 - 3);
                  *((void *)a2 - 3) = v62;
                  uint64_t v63 = *(void *)(a1 + 168);
                  *(void *)(a1 + 168) = *((void *)a2 - 2);
                  *((void *)a2 - 2) = v63;
                  uint64_t v64 = *(void *)(a1 + 176);
                  *(void *)(a1 + 176) = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v64;
                }
                break;
              case 3:
                sub_2484844A8(a1, a1 + 184, (uint64_t)v10);
                break;
              case 4:
                sub_248484664(a1, a1 + 184, a1 + 368, (uint64_t)v10);
                break;
              case 5:
                sub_248484798(a1, a1 + 184, a1 + 368, a1 + 552, (uint64_t)v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 4415)
          {
            if (a4)
            {
              if ((char *)a1 != v9)
              {
                uint64_t v65 = a1 + 184;
                if ((char *)(a1 + 184) != a2)
                {
                  uint64_t v66 = 0;
                  uint64_t v67 = (uint64_t *)a1;
                  do
                  {
                    uint64_t v68 = v67[23];
                    uint64_t v69 = v67[24];
                    uint64_t v70 = *v67;
                    uint64_t v71 = v67[1];
                    uint64_t v67 = (uint64_t *)v65;
                    if (v69 * v68 > (unint64_t)(v71 * v70))
                    {
                      sub_248455334((uint64_t)&v124, v65);
                      uint64_t v72 = v66;
                      while (1)
                      {
                        uint64_t v73 = a1 + v72;
                        sub_24848492C(a1 + v72 + 184, a1 + v72);
                        if (!v72) {
                          break;
                        }
                        v72 -= 184;
                        if ((unint64_t)(v125 * v124) <= *(void *)(v73 - 176) * *(void *)(v73 - 184))
                        {
                          uint64_t v74 = a1 + v72 + 184;
                          goto LABEL_88;
                        }
                      }
                      uint64_t v74 = a1;
LABEL_88:
                      sub_24848492C(v74, (uint64_t)&v124);
                      if (__p)
                      {
                        unint64_t v128 = __p;
                        operator delete(__p);
                      }
                      for (uint64_t i = 0; i != -72; i -= 24)
                      {
                        uint64_t v76 = *(void **)&v126[i + 72];
                        if (v76)
                        {
                          *(void *)&v126[i + 80] = v76;
                          operator delete(v76);
                        }
                      }
                      for (uint64_t j = 0; j != -72; j -= 24)
                      {
                        long long v78 = *(void **)&v126[j];
                        if (v78)
                        {
                          *(void *)&v126[j + 8] = v78;
                          operator delete(v78);
                        }
                      }
                    }
                    uint64_t v65 = (uint64_t)(v67 + 23);
                    v66 += 184;
                  }
                  while (v67 + 23 != (uint64_t *)a2);
                }
              }
            }
            else if ((char *)a1 != v9)
            {
              uint64_t v112 = a1 + 184;
              if ((char *)(a1 + 184) != a2)
              {
                do
                {
                  uint64_t v113 = v112;
                  if (*(void *)(a1 + 192) * *(void *)(a1 + 184) > *(void *)(a1 + 8) * *(void *)a1)
                  {
                    sub_248455334((uint64_t)&v124, v112);
                    do
                    {
                      uint64_t v114 = a1;
                      sub_24848492C(a1 + 184, a1);
                      uint64_t v115 = *(void *)(a1 - 184);
                      a1 -= 184;
                    }
                    while (v125 * v124 > (unint64_t)(*(void *)(v114 - 176) * v115));
                    sub_24848492C(v114, (uint64_t)&v124);
                    if (__p)
                    {
                      unint64_t v128 = __p;
                      operator delete(__p);
                    }
                    for (uint64_t k = 0; k != -72; k -= 24)
                    {
                      unint64_t v117 = *(void **)&v126[k + 72];
                      if (v117)
                      {
                        *(void *)&v126[k + 80] = v117;
                        operator delete(v117);
                      }
                    }
                    for (uint64_t m = 0; m != -72; m -= 24)
                    {
                      uint64_t v119 = *(void **)&v126[m];
                      if (v119)
                      {
                        *(void *)&v126[m + 8] = v119;
                        operator delete(v119);
                      }
                    }
                  }
                  uint64_t v112 = v113 + 184;
                  a1 = v113;
                }
                while ((char *)(v113 + 184) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((char *)a1 != v9)
            {
              int64_t v79 = (unint64_t)(v13 - 2) >> 1;
              int64_t v80 = v79;
              do
              {
                int64_t v81 = v80;
                if (v79 >= v80)
                {
                  uint64_t v82 = (2 * v80) | 1;
                  uint64_t v83 = (uint64_t *)(a1 + 184 * v82);
                  if (2 * v80 + 2 < v13)
                  {
                    uint64_t v84 = *v83;
                    if (v83[1] * *v83 > (unint64_t)(v83[24] * v83[23]))
                    {
                      uint64_t v84 = v83[23];
                      v83 += 23;
                      uint64_t v82 = 2 * v81 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v84 = *v83;
                  }
                  uint64_t v85 = (void *)(a1 + 184 * v81);
                  if ((unint64_t)(v83[1] * v84) <= v85[1] * *v85)
                  {
                    sub_248455334((uint64_t)&v124, a1 + 184 * v81);
                    do
                    {
                      uint64_t v86 = (uint64_t)v83;
                      sub_24848492C((uint64_t)v85, (uint64_t)v83);
                      if (v79 < v82) {
                        break;
                      }
                      uint64_t v83 = (uint64_t *)(a1 + 184 * ((2 * v82) | 1));
                      if (2 * v82 + 2 < v13)
                      {
                        uint64_t v87 = *v83;
                        if (v83[1] * *v83 <= (unint64_t)(v83[24] * v83[23]))
                        {
                          uint64_t v82 = (2 * v82) | 1;
                        }
                        else
                        {
                          uint64_t v87 = v83[23];
                          v83 += 23;
                          uint64_t v82 = 2 * v82 + 2;
                        }
                      }
                      else
                      {
                        uint64_t v87 = *v83;
                        uint64_t v82 = (2 * v82) | 1;
                      }
                      uint64_t v85 = (void *)v86;
                    }
                    while (v83[1] * v87 <= (unint64_t)(v125 * v124));
                    sub_24848492C(v86, (uint64_t)&v124);
                    if (__p)
                    {
                      unint64_t v128 = __p;
                      operator delete(__p);
                    }
                    for (uint64_t n = 0; n != -72; n -= 24)
                    {
                      size_t v89 = *(void **)&v126[n + 72];
                      if (v89)
                      {
                        *(void *)&v126[n + 80] = v89;
                        operator delete(v89);
                      }
                    }
                    for (iuint64_t i = 0; ii != -72; ii -= 24)
                    {
                      int v91 = *(void **)&v126[ii];
                      if (v91)
                      {
                        *(void *)&v126[ii + 8] = v91;
                        operator delete(v91);
                      }
                    }
                  }
                }
                int64_t v80 = v81 - 1;
              }
              while (v81);
              int64_t v92 = v12 / 0xB8uLL;
              do
              {
                sub_248455334((uint64_t)v121, a1);
                uint64_t v93 = 0;
                uint64_t v94 = a1;
                do
                {
                  unint64_t v95 = (char *)(v94 + 184 * v93 + 184);
                  uint64_t v96 = (2 * v93) | 1;
                  uint64_t v97 = 2 * v93 + 2;
                  if (v97 < v92
                    && *((void *)v95 + 1) * *(void *)v95 > *((void *)v95 + 24) * *((void *)v95 + 23))
                  {
                    v95 += 184;
                    uint64_t v96 = v97;
                  }
                  sub_24848492C(v94, (uint64_t)v95);
                  uint64_t v94 = (uint64_t)v95;
                  uint64_t v93 = v96;
                }
                while (v96 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
                uint64_t v98 = (uint64_t)(a2 - 184);
                BOOL v5 = v95 == a2 - 184;
                a2 -= 184;
                if (v5)
                {
                  sub_24848492C((uint64_t)v95, (uint64_t)v121);
                }
                else
                {
                  sub_24848492C((uint64_t)v95, v98);
                  sub_24848492C(v98, (uint64_t)v121);
                  uint64_t v99 = (uint64_t)&v95[-a1 + 184];
                  if (v99 >= 185)
                  {
                    unint64_t v100 = (v99 / 0xB8uLL - 2) >> 1;
                    unint64_t v101 = (void *)(a1 + 184 * v100);
                    if (v101[1] * *v101 > *((void *)v95 + 1) * *(void *)v95)
                    {
                      sub_248455334((uint64_t)&v124, (uint64_t)v95);
                      do
                      {
                        uint64_t v102 = (uint64_t)v101;
                        sub_24848492C((uint64_t)v95, (uint64_t)v101);
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                        unint64_t v101 = (void *)(a1 + 184 * v100);
                        unint64_t v95 = (char *)v102;
                      }
                      while (v101[1] * *v101 > (unint64_t)(v125 * v124));
                      sub_24848492C(v102, (uint64_t)&v124);
                      if (__p)
                      {
                        unint64_t v128 = __p;
                        operator delete(__p);
                      }
                      for (juint64_t j = 0; jj != -72; jj -= 24)
                      {
                        uint64_t v104 = *(void **)&v126[jj + 72];
                        if (v104)
                        {
                          *(void *)&v126[jj + 80] = v104;
                          operator delete(v104);
                        }
                      }
                      for (kuint64_t k = 0; kk != -72; kk -= 24)
                      {
                        int v106 = *(void **)&v126[kk];
                        if (v106)
                        {
                          *(void *)&v126[kk + 8] = v106;
                          operator delete(v106);
                        }
                      }
                    }
                  }
                }
                if (v122)
                {
                  unint64_t v123 = v122;
                  operator delete(v122);
                }
                for (muint64_t m = 0; mm != -72; mm -= 24)
                {
                  unsigned int v108 = *(void **)&v121[mm + 136];
                  if (v108)
                  {
                    *(void *)&v121[mm + 144] = v108;
                    operator delete(v108);
                  }
                }
                for (nuint64_t n = 0; nn != -72; nn -= 24)
                {
                  int v110 = *(void **)&v121[nn + 64];
                  if (v110)
                  {
                    *(void *)&v121[nn + 72] = v110;
                    operator delete(v110);
                  }
                }
              }
              while (v92-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = (_OWORD *)(a1 + 184 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 < 0x5C01)
          {
            sub_2484844A8((uint64_t)v15, a1, (uint64_t)v10);
          }
          else
          {
            sub_2484844A8(a1, (uint64_t)v15, (uint64_t)v10);
            uint64_t v16 = 184 * v14;
            uint64_t v17 = a1 + v16;
            sub_2484844A8(a1 + 184, a1 + v16 - 184, (uint64_t)(a2 - 368));
            sub_2484844A8(a1 + 368, a1 + 184 + v16, (uint64_t)(a2 - 552));
            sub_2484844A8(a1 + v16 - 184, (uint64_t)v15, a1 + 184 + v16);
            sub_248484264((_OWORD *)a1, v15);
            long long v18 = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + v16 + 160);
            *(_OWORD *)(v17 + 160) = v18;
            uint64_t v19 = *(void *)(a1 + 176);
            *(void *)(a1 + 176) = *(void *)(a1 + v16 + 176);
            *(void *)(v17 + 176) = v19;
            unint64_t v9 = a2;
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 176) * *(void *)(a1 - 184) > *(void *)(a1 + 8) * *(void *)a1) {
            break;
          }
          sub_248455334((uint64_t)&v124, a1);
          unint64_t v42 = v125 * v124;
          if ((unint64_t)(v125 * v124) <= *((void *)v9 - 22) * *((void *)v9 - 23))
          {
            uint64_t v45 = (char *)(a1 + 184);
            do
            {
              unint64_t v11 = v45;
              if (v45 >= v9) {
                break;
              }
              unint64_t v46 = *((void *)v45 + 1) * *(void *)v45;
              v45 += 184;
            }
            while (v42 <= v46);
          }
          else
          {
            unint64_t v11 = (char *)a1;
            do
            {
              uint64_t v43 = *((void *)v11 + 23);
              uint64_t v44 = *((void *)v11 + 24);
              v11 += 184;
            }
            while (v42 <= v44 * v43);
          }
          uint64_t v47 = v9;
          if (v11 < v9)
          {
            uint64_t v47 = v9;
            do
            {
              uint64_t v48 = *((void *)v47 - 23);
              uint64_t v49 = *((void *)v47 - 22);
              v47 -= 184;
            }
            while (v42 > v49 * v48);
          }
          while (v11 < v47)
          {
            sub_248484264(v11, v47);
            uint64_t v50 = *((void *)v11 + 20);
            *((void *)v11 + 20) = *((void *)v47 + 20);
            *((void *)v47 + 20) = v50;
            uint64_t v51 = *((void *)v11 + 21);
            *((void *)v11 + 21) = *((void *)v47 + 21);
            *((void *)v47 + 21) = v51;
            uint64_t v52 = *((void *)v11 + 22);
            *((void *)v11 + 22) = *((void *)v47 + 22);
            *((void *)v47 + 22) = v52;
            unint64_t v53 = v125 * v124;
            do
            {
              uint64_t v54 = *((void *)v11 + 23);
              uint64_t v55 = *((void *)v11 + 24);
              v11 += 184;
            }
            while (v53 <= v55 * v54);
            do
            {
              uint64_t v56 = *((void *)v47 - 23);
              uint64_t v57 = *((void *)v47 - 22);
              v47 -= 184;
            }
            while (v53 > v57 * v56);
          }
          if (v11 - 184 != (char *)a1) {
            sub_24848492C(a1, (uint64_t)(v11 - 184));
          }
          sub_24848492C((uint64_t)(v11 - 184), (uint64_t)&v124);
          if (__p)
          {
            unint64_t v128 = __p;
            operator delete(__p);
          }
          for (uint64_t i1 = 0; i1 != -72; i1 -= 24)
          {
            uint64_t v59 = *(void **)&v126[i1 + 72];
            if (v59)
            {
              *(void *)&v126[i1 + 80] = v59;
              operator delete(v59);
            }
          }
          for (i2 = 0; i2 != -72; BOOL v5 = i2 == -72)
          {
            int v61 = *(void **)&v126[i2];
            if (v61)
            {
              *(void *)&v126[i2 + 8] = v61;
              operator delete(v61);
            }
            i2 -= 24;
            BOOL v4 = __CFADD__(i2, 72);
          }
          a4 = 0;
        }
        sub_248455334((uint64_t)&v124, a1);
        unint64_t v20 = v125 * v124;
        unsigned int v21 = (char *)a1;
        do
        {
          int v22 = v21;
          uint64_t v23 = *((void *)v21 + 23);
          v21 += 184;
        }
        while (*((void *)v22 + 24) * v23 > v20);
        if (v22 == (char *)a1)
        {
          unint64_t v9 = a2;
          do
          {
            if (v21 >= v9) {
              break;
            }
            uint64_t v26 = *((void *)v9 - 23);
            uint64_t v27 = *((void *)v9 - 22);
            v9 -= 184;
          }
          while (v27 * v26 <= v20);
        }
        else
        {
          do
          {
            uint64_t v24 = *((void *)v9 - 23);
            uint64_t v25 = *((void *)v9 - 22);
            v9 -= 184;
          }
          while (v25 * v24 <= v20);
        }
        if (v21 < v9)
        {
          unint64_t v28 = v21;
          uint64_t v29 = v9;
          do
          {
            sub_248484264(v28, v29);
            uint64_t v30 = *((void *)v28 + 20);
            *((void *)v28 + 20) = *((void *)v29 + 20);
            *((void *)v29 + 20) = v30;
            uint64_t v31 = *((void *)v28 + 21);
            *((void *)v28 + 21) = *((void *)v29 + 21);
            *((void *)v29 + 21) = v31;
            uint64_t v32 = *((void *)v28 + 22);
            *((void *)v28 + 22) = *((void *)v29 + 22);
            *((void *)v29 + 22) = v32;
            unint64_t v33 = v125 * v124;
            do
            {
              int v22 = v28;
              uint64_t v34 = *((void *)v28 + 23);
              v28 += 184;
            }
            while (*((void *)v22 + 24) * v34 > v33);
            do
            {
              uint64_t v35 = *((void *)v29 - 23);
              uint64_t v36 = *((void *)v29 - 22);
              v29 -= 184;
            }
            while (v36 * v35 <= v33);
          }
          while (v28 < v29);
        }
        if (v22 != (char *)a1) {
          sub_24848492C(a1, (uint64_t)v22);
        }
        sub_24848492C((uint64_t)v22, (uint64_t)&v124);
        if (__p)
        {
          unint64_t v128 = __p;
          operator delete(__p);
        }
        for (uint64_t i3 = 0; i3 != -72; i3 -= 24)
        {
          uint64_t v38 = *(void **)&v126[i3 + 72];
          if (v38)
          {
            *(void *)&v126[i3 + 80] = v38;
            operator delete(v38);
          }
        }
        for (uint64_t i4 = 0; i4 != -72; i4 -= 24)
        {
          uint64_t v40 = *(void **)&v126[i4];
          if (v40)
          {
            *(void *)&v126[i4 + 8] = v40;
            operator delete(v40);
          }
        }
        BOOL v4 = v21 >= v9;
        unint64_t v9 = a2;
        if (v4) {
          break;
        }
LABEL_41:
        sub_248482C94(a1, v22, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v22 + 184;
      }
      BOOL v41 = sub_248484A40(a1, v22);
      unint64_t v11 = v22 + 184;
      if (sub_248484A40((uint64_t)(v22 + 184), a2)) {
        break;
      }
      if (!v41) {
        goto LABEL_41;
      }
    }
    a2 = v22;
    if (!v41) {
      continue;
    }
    break;
  }
}

void *sub_2484837E0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      sub_2483E92E8();
    }
    BOOL v4 = (char *)sub_2483F3EB0(a2);
    *a1 = v4;
    a1[2] = &v4[16 * v5];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_248483854(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248483870()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  char v52 = 1;
  uint64_t v54 = 0;
  __int16 v55 = 1;
  char v57 = 1;
  int v58 = -1;
  uint64_t v59 = 0;
  char v60 = 0;
  int v61 = 2;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  int v64 = 0;
  long long v65 = 0u;
  memset(v66, 0, 32);
  *(void *)(v1 + 380) = 0x100000001;
  *(_WORD *)(v1 + 77) = 0;
  *(unsigned char *)(v1 + 68) = 1;
  *(_DWORD *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_WORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 264) = 5;
  long long v56 = xmmword_2484DCEC0;
  int v53 = 2;
  char v51 = 1;
  uint64_t v3 = *v2;
  sub_2483F7584((uint64_t)v41, *v2);
  char v52 = 0;
  sub_24841F728((uint64_t)v41, v0, v3 + 48);
  uint64_t v4 = *(void *)(v43 + 328);
  uint64_t v5 = *(void *)(v43 + 336);
  if (v4 == v5) {
LABEL_35:
  }
    operator new();
  int64x2_t v35 = 0uLL;
  unint64_t v36 = 0;
  sub_24844C760(v35.i64, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5));
  if (*(void *)(v43 + 336) == *(void *)(v43 + 328))
  {
LABEL_34:
    sub_2483F79DC((void **)&v49);
    int64x2_t v49 = v35;
    unint64_t v50 = v36;
    unint64_t v36 = 0;
    int64x2_t v35 = 0uLL;
    *(void *)&long long v30 = &v35;
    sub_2483F77FC((void ***)&v30);
    goto LABEL_35;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unsigned int v7 = v44;
    if (!v44)
    {
      if (v49.i64[0] == v49.i64[1]) {
        unsigned int v7 = 0;
      }
      else {
        unsigned int v7 = *(_DWORD *)v49.i64[0];
      }
    }
    unsigned int v8 = v45;
    if (!v45)
    {
      if (v49.i64[0] == v49.i64[1]) {
        unsigned int v8 = 0;
      }
      else {
        unsigned int v8 = *(_DWORD *)(v49.i64[0] + 4);
      }
    }
    sub_2483EA250((uint64_t)&v30, v7, v8);
    uint64_t v9 = v34;
    if (v34) {
      break;
    }
    uint64_t v10 = v32;
    uint64_t v11 = v33;
    uint64_t v32 = 0;
    uint64_t v12 = (void *)v35.i64[1];
    if (v35.i64[1] >= v36)
    {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v35.i64[1] - v35.i64[0]) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x666666666666666) {
        sub_2483E92E8();
      }
      if (0x999999999999999ALL * ((uint64_t)(v36 - v35.i64[0]) >> 3) > v15) {
        unint64_t v15 = 0x999999999999999ALL * ((uint64_t)(v36 - v35.i64[0]) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v36 - v35.i64[0]) >> 3) >= 0x333333333333333) {
        unint64_t v16 = 0x666666666666666;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v40 = &v36;
      if (v16) {
        unint64_t v16 = (unint64_t)sub_248403444(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = v16 + 40 * v14;
      unint64_t v37 = v16;
      v38.i64[0] = v18;
      unint64_t v39 = v16 + 40 * v17;
      *(void *)(v18 + 16) = v31;
      *(_OWORD *)unint64_t v18 = v30;
      *(void *)(v18 + 24) = v10;
      *(void *)(v18 + 32) = v11;
      uint64_t v13 = (void *)(v18 + 40);
      v38.i64[1] = v18 + 40;
      uint64_t v19 = v35.i64[1];
      uint64_t v20 = v35.i64[0];
      uint64_t v21 = v38.i64[0];
      if (v35.i64[1] == v35.i64[0])
      {
        int64x2_t v24 = vdupq_n_s64(v35.u64[1]);
      }
      else
      {
        do
        {
          long long v22 = *(_OWORD *)(v19 - 40);
          *(void *)(v21 - 24) = *(void *)(v19 - 24);
          *(_OWORD *)(v21 - 40) = v22;
          uint64_t v23 = *(void *)(v19 - 16);
          *(void *)(v19 - 16) = 0;
          *(void *)(v21 - 16) = v23;
          *(void *)(v21 - 8) = *(void *)(v19 - 8);
          v21 -= 40;
          v19 -= 40;
        }
        while (v19 != v20);
        int64x2_t v24 = v35;
        uint64_t v13 = (void *)v38.i64[1];
      }
      v35.i64[0] = v21;
      v35.i64[1] = (uint64_t)v13;
      int64x2_t v38 = v24;
      unint64_t v25 = v36;
      unint64_t v36 = v39;
      unint64_t v39 = v25;
      unint64_t v37 = v24.i64[0];
      sub_24841F7CC((uint64_t)&v37);
    }
    else
    {
      *(_OWORD *)v35.i64[1] = v30;
      v12[2] = v31;
      v12[3] = v10;
      v12[4] = v11;
      uint64_t v13 = v12 + 5;
    }
    v35.i64[1] = (uint64_t)v13;
    if (*((_DWORD *)v13 - 10) && *((_DWORD *)v13 - 9))
    {
      unint64_t v26 = 0;
      do
        bzero((void *)(*(v13 - 2) + *(v13 - 3) * v26++), 4 * *((unsigned int *)v13 - 10));
      while (v26 < *((unsigned int *)v13 - 9));
    }
    if (++v6 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v43 + 336) - *(void *)(v43 + 328)) >> 5)) {
      goto LABEL_34;
    }
  }
  *(void *)&long long v30 = &v35;
  sub_2483F77FC((void ***)&v30);
  *(void *)&long long v30 = &v49;
  sub_2483F77FC((void ***)&v30);
  unint64_t v46 = &unk_26FC65EC8;
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC(&v41[i]);
  if (v42 < 0) {
    operator delete((void *)v41[8]);
  }
  uint64_t v28 = v41[0];
  v41[0] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  *(void *)&long long v30 = &v66[8];
  sub_2483FDB3C((void ***)&v30);
  if ((v66[7] & 0x80000000) != 0) {
    operator delete((void *)v65);
  }
  return v9;
}

void sub_248484088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_248410F7C((uint64_t)va);
  sub_2484172B0((uint64_t *)&STACK[0x1710]);
  sub_248441870((uint64_t *)&STACK[0x1B90]);
  sub_2484172B0((uint64_t *)&STACK[0x1B98]);
  sub_24844C804(v4 - 232);
  _Unwind_Resume(a1);
}

void sub_248484178(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1 + 1;
  unsigned int v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  a1[3] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
    a1[4] = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)a3;
  a1[6] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v11 = (void *)a1[7];
  if (v11)
  {
    a1[8] = v11;
    operator delete(v11);
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
  }
  *(_OWORD *)(a1 + 7) = *(_OWORD *)a4;
  a1[9] = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;

  sub_24840C8C4(a1);
}

void sub_248484264(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = 0;
  v32[0] = *a1;
  do
  {
    uint64_t v5 = (char *)v32 + v4;
    uint64_t v6 = (void *)((char *)a1 + v4);
    *((_OWORD *)v5 + 1) = *(_OWORD *)((char *)a1 + v4 + 16);
    *((void *)v5 + 4) = *(void *)((char *)a1 + v4 + 32);
    void v6[2] = 0;
    v6[3] = 0;
    void v6[4] = 0;
    v4 += 24;
  }
  while (v4 != 72);
  for (uint64_t i = 0; i != 72; i += 24)
  {
    unsigned int v8 = (char *)v32 + i;
    uint64_t v9 = (void *)((char *)a1 + i);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)((char *)a1 + i + 88);
    *((void *)v8 + 13) = *(void *)((char *)a1 + i + 104);
    v9[11] = 0;
    v9[12] = 0;
    v9[13] = 0;
  }
  uint64_t v10 = 0;
  *a1 = *a2;
  do
  {
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v13 = (void **)((char *)a1 + v10 + 16);
    uint64_t v12 = *v13;
    if (*v13)
    {
      *((void *)v11 + 3) = v12;
      operator delete(v12);
      void *v13 = 0;
      *(void *)((char *)a1 + v10 + 24) = 0;
      *(void *)((char *)a1 + v10 + 32) = 0;
    }
    uint64_t v14 = (uint64_t)a2 + v10 + 16;
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((void *)v11 + 4) = *(void *)((char *)a2 + v10 + 32);
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    v10 += 24;
  }
  while (v10 != 72);
  for (uint64_t j = 0; j != 72; j += 24)
  {
    unint64_t v16 = (char *)a1 + j;
    unint64_t v18 = (void **)((char *)a1 + j + 88);
    uint64_t v17 = *v18;
    if (*v18)
    {
      *((void *)v16 + 12) = v17;
      operator delete(v17);
      *unint64_t v18 = 0;
      *(void *)((char *)a1 + j + 96) = 0;
      *(void *)((char *)a1 + j + 104) = 0;
    }
    uint64_t v19 = (uint64_t)a2 + j + 88;
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    *((void *)v16 + 13) = *(void *)((char *)a2 + j + 104);
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
  }
  uint64_t v20 = 0;
  *a2 = v32[0];
  do
  {
    uint64_t v21 = (char *)a2 + v20;
    long long v22 = *(void **)((char *)a2 + v20 + 16);
    if (v22)
    {
      *((void *)v21 + 3) = v22;
      operator delete(v22);
      *((void *)v21 + 4) = 0;
    }
    uint64_t v23 = (char *)&v32[1] + v20;
    *((_OWORD *)v21 + 1) = *(_OWORD *)v23;
    *((void *)v21 + 4) = *(void *)((char *)&v32[2] + v20);
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    v20 += 24;
  }
  while (v20 != 72);
  for (uint64_t k = 0; k != 72; k += 24)
  {
    unint64_t v25 = (char *)a2 + k;
    unint64_t v26 = *(void **)((char *)a2 + k + 88);
    if (v26)
    {
      *((void *)v25 + 12) = v26;
      operator delete(v26);
      *((void *)v25 + 13) = 0;
    }
    uint64_t v27 = (char *)&v32[5] + k + 8;
    *(_OWORD *)(v25 + 88) = *(_OWORD *)v27;
    *((void *)v25 + 13) = *(void *)((char *)&v32[6] + k + 8);
    *(void *)uint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = 0;
  }
  for (uint64_t m = 0; m != -72; m -= 24)
  {
    uint64_t v29 = *(void **)((char *)&v32[8] + m + 8);
    if (v29)
    {
      *(void *)((char *)&v32[9] + m) = v29;
      operator delete(v29);
    }
  }
  for (uint64_t n = 0; n != -72; n -= 24)
  {
    uint64_t v31 = *(void **)((char *)&v32[4] + n);
    if (v31)
    {
      *(void *)((char *)&v32[4] + n + 8) = v31;
      operator delete(v31);
    }
  }
}

void sub_2484844A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8) * *(void *)a2;
  unint64_t v7 = *(void *)(a3 + 8) * *(void *)a3;
  if (v6 > *(void *)(a1 + 8) * *(void *)a1)
  {
    if (v7 <= v6)
    {
      sub_248484264((_OWORD *)a1, (_OWORD *)a2);
      uint64_t v17 = *(void *)(a1 + 160);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a2 + 160) = v17;
      uint64_t v18 = *(void *)(a1 + 168);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a2 + 168) = v18;
      unsigned int v8 = (uint64_t *)(a2 + 176);
      uint64_t v19 = *(void *)(a1 + 176);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a2 + 176) = v19;
      if (*(void *)(a3 + 8) * *(void *)a3 <= *(void *)(a2 + 8) * *(void *)a2) {
        return;
      }
      sub_248484264((_OWORD *)a2, (_OWORD *)a3);
      uint64_t v20 = *(void *)(a2 + 160);
      *(void *)(a2 + 160) = *(void *)(a3 + 160);
      *(void *)(a3 + 160) = v20;
      uint64_t v10 = *(void *)(a2 + 168);
      *(void *)(a2 + 168) = *(void *)(a3 + 168);
    }
    else
    {
      unsigned int v8 = (uint64_t *)(a1 + 176);
      sub_248484264((_OWORD *)a1, (_OWORD *)a3);
      uint64_t v9 = *(void *)(a1 + 160);
      *(void *)(a1 + 160) = *(void *)(a3 + 160);
      *(void *)(a3 + 160) = v9;
      uint64_t v10 = *(void *)(a1 + 168);
      *(void *)(a1 + 168) = *(void *)(a3 + 168);
    }
    *(void *)(a3 + 168) = v10;
    uint64_t v14 = (uint64_t *)(a3 + 176);
    goto LABEL_10;
  }
  if (v7 > v6)
  {
    sub_248484264((_OWORD *)a2, (_OWORD *)a3);
    uint64_t v11 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = *(void *)(a3 + 160);
    *(void *)(a3 + 160) = v11;
    uint64_t v12 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = *(void *)(a3 + 168);
    *(void *)(a3 + 168) = v12;
    uint64_t v14 = (uint64_t *)(a2 + 176);
    uint64_t v13 = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = *(void *)(a3 + 176);
    *(void *)(a3 + 176) = v13;
    if (*(void *)(a2 + 8) * *(void *)a2 > *(void *)(a1 + 8) * *(void *)a1)
    {
      sub_248484264((_OWORD *)a1, (_OWORD *)a2);
      uint64_t v15 = *(void *)(a1 + 160);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a2 + 160) = v15;
      uint64_t v16 = *(void *)(a1 + 168);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a2 + 168) = v16;
      unsigned int v8 = (uint64_t *)(a1 + 176);
LABEL_10:
      uint64_t v21 = *v8;
      uint64_t *v8 = *v14;
      *uint64_t v14 = v21;
    }
  }
}

void sub_248484664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2484844A8(a1, a2, a3);
  if (*(void *)(a4 + 8) * *(void *)a4 > *(void *)(a3 + 8) * *(void *)a3)
  {
    sub_248484264((_OWORD *)a3, (_OWORD *)a4);
    uint64_t v8 = *(void *)(a3 + 160);
    *(void *)(a3 + 160) = *(void *)(a4 + 160);
    *(void *)(a4 + 160) = v8;
    uint64_t v9 = *(void *)(a3 + 168);
    *(void *)(a3 + 168) = *(void *)(a4 + 168);
    *(void *)(a4 + 168) = v9;
    uint64_t v10 = *(void *)(a3 + 176);
    *(void *)(a3 + 176) = *(void *)(a4 + 176);
    *(void *)(a4 + 176) = v10;
    if (*(void *)(a3 + 8) * *(void *)a3 > *(void *)(a2 + 8) * *(void *)a2)
    {
      sub_248484264((_OWORD *)a2, (_OWORD *)a3);
      uint64_t v11 = *(void *)(a2 + 160);
      *(void *)(a2 + 160) = *(void *)(a3 + 160);
      *(void *)(a3 + 160) = v11;
      uint64_t v12 = *(void *)(a2 + 168);
      *(void *)(a2 + 168) = *(void *)(a3 + 168);
      *(void *)(a3 + 168) = v12;
      uint64_t v13 = *(void *)(a2 + 176);
      *(void *)(a2 + 176) = *(void *)(a3 + 176);
      *(void *)(a3 + 176) = v13;
      if (*(void *)(a2 + 8) * *(void *)a2 > *(void *)(a1 + 8) * *(void *)a1)
      {
        sub_248484264((_OWORD *)a1, (_OWORD *)a2);
        uint64_t v14 = *(void *)(a1 + 160);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a2 + 160) = v14;
        uint64_t v15 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(void *)(a2 + 168) = v15;
        uint64_t v16 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a2 + 176) = v16;
      }
    }
  }
}

void sub_248484798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_248484664(a1, a2, a3, a4);
  if (*(void *)(a5 + 8) * *(void *)a5 > *(void *)(a4 + 8) * *(void *)a4)
  {
    sub_248484264((_OWORD *)a4, (_OWORD *)a5);
    uint64_t v10 = *(void *)(a4 + 160);
    *(void *)(a4 + 160) = *(void *)(a5 + 160);
    *(void *)(a5 + 160) = v10;
    uint64_t v11 = *(void *)(a4 + 168);
    *(void *)(a4 + 168) = *(void *)(a5 + 168);
    *(void *)(a5 + 168) = v11;
    uint64_t v12 = *(void *)(a4 + 176);
    *(void *)(a4 + 176) = *(void *)(a5 + 176);
    *(void *)(a5 + 176) = v12;
    if (*(void *)(a4 + 8) * *(void *)a4 > *(void *)(a3 + 8) * *(void *)a3)
    {
      sub_248484264((_OWORD *)a3, (_OWORD *)a4);
      uint64_t v13 = *(void *)(a3 + 160);
      *(void *)(a3 + 160) = *(void *)(a4 + 160);
      *(void *)(a4 + 160) = v13;
      uint64_t v14 = *(void *)(a3 + 168);
      *(void *)(a3 + 168) = *(void *)(a4 + 168);
      *(void *)(a4 + 168) = v14;
      uint64_t v15 = *(void *)(a3 + 176);
      *(void *)(a3 + 176) = *(void *)(a4 + 176);
      *(void *)(a4 + 176) = v15;
      if (*(void *)(a3 + 8) * *(void *)a3 > *(void *)(a2 + 8) * *(void *)a2)
      {
        sub_248484264((_OWORD *)a2, (_OWORD *)a3);
        uint64_t v16 = *(void *)(a2 + 160);
        *(void *)(a2 + 160) = *(void *)(a3 + 160);
        *(void *)(a3 + 160) = v16;
        uint64_t v17 = *(void *)(a2 + 168);
        *(void *)(a2 + 168) = *(void *)(a3 + 168);
        *(void *)(a3 + 168) = v17;
        uint64_t v18 = *(void *)(a2 + 176);
        *(void *)(a2 + 176) = *(void *)(a3 + 176);
        *(void *)(a3 + 176) = v18;
        if (*(void *)(a2 + 8) * *(void *)a2 > *(void *)(a1 + 8) * *(void *)a1)
        {
          sub_248484264((_OWORD *)a1, (_OWORD *)a2);
          uint64_t v19 = *(void *)(a1 + 160);
          *(void *)(a1 + 160) = *(void *)(a2 + 160);
          *(void *)(a2 + 160) = v19;
          uint64_t v20 = *(void *)(a1 + 168);
          *(void *)(a1 + 168) = *(void *)(a2 + 168);
          *(void *)(a2 + 168) = v20;
          uint64_t v21 = *(void *)(a1 + 176);
          *(void *)(a1 + 176) = *(void *)(a2 + 176);
          *(void *)(a2 + 176) = v21;
        }
      }
    }
  }
}

uint64_t sub_24848492C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  do
  {
    uint64_t v5 = a1 + v4;
    unint64_t v7 = (void **)(a1 + v4 + 16);
    unint64_t v6 = *v7;
    if (*v7)
    {
      *(void *)(v5 + 24) = v6;
      operator delete(v6);
      unsigned char *v7 = 0;
      *(void *)(a1 + v4 + 24) = 0;
      *(void *)(a1 + v4 + 32) = 0;
    }
    uint64_t v8 = a2 + v4 + 16;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(void *)(v5 + 32) = *(void *)(a2 + v4 + 32);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    v4 += 24;
  }
  while (v4 != 72);
  for (uint64_t i = 0; i != 72; i += 24)
  {
    uint64_t v10 = a1 + i;
    uint64_t v12 = (void **)(a1 + i + 88);
    uint64_t v11 = *v12;
    if (*v12)
    {
      *(void *)(v10 + 96) = v11;
      operator delete(v11);
      void *v12 = 0;
      *(void *)(a1 + i + 96) = 0;
      *(void *)(a1 + i + 104) = 0;
    }
    uint64_t v13 = a2 + i + 88;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *(void *)(v10 + 104) = *(void *)(a2 + i + 104);
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(void *)(a1 + 168) = v14;
    operator delete(v14);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  return a1;
}

BOOL sub_248484A40(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xD37A6F4DE9BD37A7 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = a2 - 23;
      if (*(a2 - 22) * *(a2 - 23) > *(void *)(a1 + 8) * *(void *)a1)
      {
        sub_248484264((_OWORD *)a1, v6);
        uint64_t v7 = *(void *)(a1 + 160);
        *(void *)(a1 + 160) = *(a2 - 3);
        *(a2 - 3) = v7;
        uint64_t v8 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = *(a2 - 1);
        *(a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_2484844A8(a1, a1 + 184, (uint64_t)(a2 - 23));
      return 1;
    case 4uLL:
      sub_248484664(a1, a1 + 184, a1 + 368, (uint64_t)(a2 - 23));
      return 1;
    case 5uLL:
      sub_248484798(a1, a1 + 184, a1 + 368, a1 + 552, (uint64_t)(a2 - 23));
      return 1;
    default:
      uint64_t v10 = (void *)(a1 + 368);
      sub_2484844A8(a1, a1 + 184, a1 + 368);
      uint64_t v11 = (void *)(a1 + 552);
      if ((void *)(a1 + 552) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (v11[1] * *v11 > v10[1] * *v10)
    {
      sub_248455334((uint64_t)v21, (uint64_t)v11);
      uint64_t v14 = v12;
      while (1)
      {
        sub_24848492C(a1 + v14 + 552, a1 + v14 + 368);
        if (v14 == -368) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 192) * *(void *)(a1 + v14 + 184);
        v14 -= 184;
        if (v21[1] * v21[0] <= v15)
        {
          uint64_t v16 = a1 + v14 + 552;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      sub_24848492C(v16, (uint64_t)v21);
      if (__p)
      {
        uint64_t v23 = __p;
        operator delete(__p);
      }
      uint64_t v17 = 0;
      ++v13;
      do
      {
        uint64_t v18 = (void *)v21[v17 + 17];
        if (v18)
        {
          v21[v17 + 18] = v18;
          operator delete(v18);
        }
        v17 -= 3;
      }
      while (v17 != -9);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        uint64_t v20 = (void *)v21[i + 8];
        if (v20)
        {
          v21[i + 9] = v20;
          operator delete(v20);
        }
      }
      if (v13 == 8) {
        return v11 + 23 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 184;
    v11 += 23;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_248484CBC(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v96 = a2;
    uint64_t v98 = a2 - 23;
    uint64_t v94 = a2 - 69;
    unint64_t v95 = a2 - 46;
    uint64_t v10 = (void *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = 0xD37A6F4DE9BD37A7 * (a2 - v10);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (sub_248485814(v98, v10))
                {
                  sub_248484264(v10, v98);
                  uint64_t v42 = v10[20];
                  v10[20] = *(a2 - 3);
                  *(a2 - 3) = v42;
                  uint64_t v43 = v10[21];
                  v10[21] = *(a2 - 2);
                  *(a2 - 2) = v43;
                  uint64_t v44 = v10[22];
                  v10[22] = *(a2 - 1);
                  *(a2 - 1) = v44;
                }
                break;
              case 3:
                sub_2484858BC(v10, v10 + 23, v98);
                break;
              case 4:
                sub_248485A60(v10, v10 + 23, v10 + 46, (uint64_t)v98);
                break;
              case 5:
                sub_248485B7C(v10, v10 + 23, v10 + 46, (uint64_t)(v10 + 69), (uint64_t)v98);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 4415)
          {
            if (a4)
            {
              if (v10 != a2)
              {
                unsigned int v45 = v10 + 23;
                if (v10 + 23 != a2)
                {
                  uint64_t v46 = 0;
                  uint64_t v47 = (uint64_t)v10;
                  do
                  {
                    uint64_t v48 = (void *)v47;
                    uint64_t v47 = (uint64_t)v45;
                    if (sub_248485814(v45, v48))
                    {
                      sub_248455334((uint64_t)v103, v47);
                      uint64_t v49 = v46;
                      while (1)
                      {
                        sub_24848492C((uint64_t)v10 + v49 + 184, (uint64_t)v10 + v49);
                        if (!v49) {
                          break;
                        }
                        v49 -= 184;
                        if ((sub_248485814(v103, (void *)((char *)v10 + v49)) & 1) == 0)
                        {
                          uint64_t v50 = (uint64_t)v10 + v49 + 184;
                          goto LABEL_93;
                        }
                      }
                      uint64_t v50 = (uint64_t)v10;
LABEL_93:
                      sub_24848492C(v50, (uint64_t)v103);
                      if (__p)
                      {
                        uint64_t v105 = __p;
                        operator delete(__p);
                      }
                      for (uint64_t i = 0; i != -9; i -= 3)
                      {
                        char v52 = (void *)v103[i + 17];
                        if (v52)
                        {
                          v103[i + 18] = v52;
                          operator delete(v52);
                        }
                      }
                      for (uint64_t j = 0; j != -9; j -= 3)
                      {
                        uint64_t v54 = (void *)v103[j + 8];
                        if (v54)
                        {
                          v103[j + 9] = v54;
                          operator delete(v54);
                        }
                      }
                    }
                    unsigned int v45 = (void *)(v47 + 184);
                    v46 += 184;
                  }
                  while ((void *)(v47 + 184) != a2);
                }
              }
            }
            else if (v10 != a2)
            {
              uint64_t v87 = v10 + 23;
              if (v10 + 23 != a2)
              {
                do
                {
                  uint64_t v88 = (uint64_t)v87;
                  if (sub_248485814(v87, (void *)a1))
                  {
                    sub_248455334((uint64_t)v103, v88);
                    do
                    {
                      uint64_t v89 = a1;
                      sub_24848492C(a1 + 184, a1);
                      a1 -= 184;
                    }
                    while ((sub_248485814(v103, (void *)a1) & 1) != 0);
                    sub_24848492C(v89, (uint64_t)v103);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    for (uint64_t k = 0; k != -9; k -= 3)
                    {
                      int v91 = (void *)v103[k + 17];
                      if (v91)
                      {
                        v103[k + 18] = v91;
                        operator delete(v91);
                      }
                    }
                    for (uint64_t m = 0; m != -9; m -= 3)
                    {
                      uint64_t v93 = (void *)v103[m + 8];
                      if (v93)
                      {
                        v103[m + 9] = v93;
                        operator delete(v93);
                      }
                    }
                  }
                  uint64_t v87 = (void *)(v88 + 184);
                  a1 = v88;
                }
                while ((void *)(v88 + 184) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v55 = (unint64_t)(v12 - 2) >> 1;
              int64_t v99 = v55;
              do
              {
                int64_t v56 = v55;
                if (v99 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  int v58 = (void *)(a1 + 184 * v57);
                  if (2 * v55 + 2 < v12 && sub_248485814((void *)(a1 + 184 * v57), v58 + 23))
                  {
                    v58 += 23;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  uint64_t v59 = (void *)(a1 + 184 * v56);
                  if ((sub_248485814(v58, v59) & 1) == 0)
                  {
                    sub_248455334((uint64_t)v103, a1 + 184 * v56);
                    do
                    {
                      uint64_t v60 = (uint64_t)v58;
                      sub_24848492C((uint64_t)v59, (uint64_t)v58);
                      if (v99 < v57) {
                        break;
                      }
                      uint64_t v61 = (2 * v57) | 1;
                      int v58 = (void *)(a1 + 184 * v61);
                      uint64_t v62 = 2 * v57 + 2;
                      if (v62 < v12 && sub_248485814((void *)(a1 + 184 * v61), v58 + 23))
                      {
                        v58 += 23;
                        uint64_t v61 = v62;
                      }
                      uint64_t v59 = (void *)v60;
                      uint64_t v57 = v61;
                    }
                    while (!sub_248485814(v58, v103));
                    sub_24848492C(v60, (uint64_t)v103);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    for (uint64_t n = 0; n != -9; n -= 3)
                    {
                      int v64 = (void *)v103[n + 17];
                      if (v64)
                      {
                        v103[n + 18] = v64;
                        operator delete(v64);
                      }
                    }
                    for (iuint64_t i = 0; ii != -9; ii -= 3)
                    {
                      uint64_t v66 = (void *)v103[ii + 8];
                      if (v66)
                      {
                        v103[ii + 9] = v66;
                        operator delete(v66);
                      }
                    }
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              int64_t v67 = v11 / 0xB8uLL;
              uint64_t v68 = v96;
              do
              {
                if (v67 >= 2)
                {
                  uint64_t v97 = v68;
                  sub_248455334((uint64_t)v100, a1);
                  uint64_t v69 = 0;
                  uint64_t v70 = a1;
                  do
                  {
                    uint64_t v71 = (void *)(v70 + 184 * v69 + 184);
                    uint64_t v72 = (2 * v69) | 1;
                    uint64_t v73 = 2 * v69 + 2;
                    if (v73 < v67
                      && sub_248485814((void *)(v70 + 184 * v69 + 184), (void *)(v70 + 184 * v69 + 368)))
                    {
                      v71 += 23;
                      uint64_t v72 = v73;
                    }
                    sub_24848492C(v70, (uint64_t)v71);
                    uint64_t v70 = (uint64_t)v71;
                    uint64_t v69 = v72;
                  }
                  while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                  uint64_t v68 = v97;
                  if (v71 == v97 - 23)
                  {
                    sub_24848492C((uint64_t)v71, (uint64_t)v100);
                  }
                  else
                  {
                    sub_24848492C((uint64_t)v71, (uint64_t)(v97 - 23));
                    sub_24848492C((uint64_t)(v97 - 23), (uint64_t)v100);
                    uint64_t v74 = (uint64_t)v71 - a1 + 184;
                    if (v74 >= 185)
                    {
                      unint64_t v75 = (unint64_t)(-2 - 0x2C8590B21642C859 * (v74 >> 3)) >> 1;
                      uint64_t v76 = (void *)(a1 + 184 * v75);
                      if (sub_248485814(v76, v71))
                      {
                        sub_248455334((uint64_t)v103, (uint64_t)v71);
                        do
                        {
                          uint64_t v77 = (uint64_t)v76;
                          sub_24848492C((uint64_t)v71, (uint64_t)v76);
                          if (!v75) {
                            break;
                          }
                          unint64_t v75 = (v75 - 1) >> 1;
                          uint64_t v76 = (void *)(a1 + 184 * v75);
                          uint64_t v71 = (void *)v77;
                        }
                        while ((sub_248485814(v76, v103) & 1) != 0);
                        sub_24848492C(v77, (uint64_t)v103);
                        if (__p)
                        {
                          uint64_t v105 = __p;
                          operator delete(__p);
                        }
                        for (juint64_t j = 0; jj != -9; jj -= 3)
                        {
                          int64_t v79 = (void *)v103[jj + 17];
                          if (v79)
                          {
                            v103[jj + 18] = v79;
                            operator delete(v79);
                          }
                        }
                        for (kuint64_t k = 0; kk != -9; kk -= 3)
                        {
                          int64_t v81 = (void *)v103[kk + 8];
                          if (v81)
                          {
                            v103[kk + 9] = v81;
                            operator delete(v81);
                          }
                        }
                      }
                    }
                  }
                  if (v101)
                  {
                    uint64_t v102 = v101;
                    operator delete(v101);
                  }
                  for (muint64_t m = 0; mm != -72; mm -= 24)
                  {
                    uint64_t v83 = *(void **)&v100[mm + 136];
                    if (v83)
                    {
                      *(void *)&v100[mm + 144] = v83;
                      operator delete(v83);
                    }
                  }
                  for (nuint64_t n = 0; nn != -72; nn -= 24)
                  {
                    uint64_t v85 = *(void **)&v100[nn + 64];
                    if (v85)
                    {
                      *(void *)&v100[nn + 72] = v85;
                      operator delete(v85);
                    }
                  }
                }
                v68 -= 23;
              }
              while ((unint64_t)v67-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[23 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x5C01)
          {
            sub_2484858BC(&v10[23 * v13], v10, v98);
          }
          else
          {
            sub_2484858BC(v10, &v10[23 * v13], v98);
            uint64_t v15 = 184 * v13;
            uint64_t v16 = &v10[(unint64_t)v15 / 8];
            sub_2484858BC((void *)(a1 + 184), (void *)(a1 + v15 - 184), v95);
            sub_2484858BC((void *)(a1 + 368), (void *)(a1 + 184 + v15), v94);
            sub_2484858BC((void *)(a1 + v15 - 184), v14, (void *)(a1 + 184 + v15));
            sub_248484264((_OWORD *)a1, v14);
            long long v17 = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 160) = *((_OWORD *)v16 + 10);
            *((_OWORD *)v16 + 10) = v17;
            uint64_t v18 = *(void *)(a1 + 176);
            *(void *)(a1 + 176) = v16[22];
            v16[22] = v18;
          }
          --a3;
          if (a4 & 1) != 0 || (sub_248485814((void *)(a1 - 184), (void *)a1)) {
            break;
          }
          sub_248455334((uint64_t)v103, a1);
          if (sub_248485814(v103, v98))
          {
            uint64_t v10 = (void *)a1;
            do
              v10 += 23;
            while ((sub_248485814(v103, v10) & 1) == 0);
          }
          else
          {
            uint64_t v32 = (void *)(a1 + 184);
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              int v33 = sub_248485814(v103, v32);
              uint64_t v32 = v10 + 23;
            }
            while (!v33);
          }
          unsigned int v34 = a2;
          if (v10 < a2)
          {
            unsigned int v34 = a2;
            do
              v34 -= 23;
            while ((sub_248485814(v103, v34) & 1) != 0);
          }
          while (v10 < v34)
          {
            sub_248484264(v10, v34);
            uint64_t v35 = v10[20];
            v10[20] = v34[20];
            v34[20] = v35;
            uint64_t v36 = v10[21];
            v10[21] = v34[21];
            v34[21] = v36;
            uint64_t v37 = v10[22];
            v10[22] = v34[22];
            v34[22] = v37;
            do
              v10 += 23;
            while (!sub_248485814(v103, v10));
            do
              v34 -= 23;
            while ((sub_248485814(v103, v34) & 1) != 0);
          }
          if (v10 - 23 != (void *)a1) {
            sub_24848492C(a1, (uint64_t)(v10 - 23));
          }
          sub_24848492C((uint64_t)(v10 - 23), (uint64_t)v103);
          if (__p)
          {
            uint64_t v105 = __p;
            operator delete(__p);
          }
          for (uint64_t i1 = 0; i1 != -9; i1 -= 3)
          {
            unint64_t v39 = (void *)v103[i1 + 17];
            if (v39)
            {
              v103[i1 + 18] = v39;
              operator delete(v39);
            }
          }
          for (i2 = 0; i2 != -72; BOOL v5 = i2 == -72)
          {
            BOOL v41 = (void *)v103[i2 / 8 + 8];
            if (v41)
            {
              v103[i2 / 8 + 9] = v41;
              operator delete(v41);
            }
            i2 -= 24;
            BOOL v4 = __CFADD__(i2, 72);
          }
          a4 = 0;
        }
        sub_248455334((uint64_t)v103, a1);
        uint64_t v19 = (void *)a1;
        do
        {
          uint64_t v20 = v19;
          v19 += 23;
        }
        while ((sub_248485814(v19, v103) & 1) != 0);
        uint64_t v21 = a2;
        if (v20 == (void *)a1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v19 >= v21) {
              break;
            }
            v21 -= 23;
          }
          while ((sub_248485814(v21, v103) & 1) == 0);
        }
        else
        {
          do
            v21 -= 23;
          while (!sub_248485814(v21, v103));
        }
        if (v19 < v21)
        {
          long long v22 = v19;
          uint64_t v23 = v21;
          do
          {
            sub_248484264(v22, v23);
            uint64_t v24 = v22[20];
            v22[20] = v23[20];
            v23[20] = v24;
            uint64_t v25 = v22[21];
            v22[21] = v23[21];
            v23[21] = v25;
            uint64_t v26 = v22[22];
            v22[22] = v23[22];
            v23[22] = v26;
            do
            {
              uint64_t v20 = v22;
              v22 += 23;
            }
            while ((sub_248485814(v22, v103) & 1) != 0);
            do
              v23 -= 23;
            while (!sub_248485814(v23, v103));
          }
          while (v22 < v23);
        }
        if (v20 != (void *)a1) {
          sub_24848492C(a1, (uint64_t)v20);
        }
        sub_24848492C((uint64_t)v20, (uint64_t)v103);
        if (__p)
        {
          uint64_t v105 = __p;
          operator delete(__p);
        }
        uint64_t v27 = 0;
        a2 = v96;
        do
        {
          uint64_t v28 = (void *)v103[v27 + 17];
          if (v28)
          {
            v103[v27 + 18] = v28;
            operator delete(v28);
          }
          v27 -= 3;
        }
        while (v27 != -9);
        for (uint64_t i3 = 0; i3 != -9; i3 -= 3)
        {
          long long v30 = (void *)v103[i3 + 8];
          if (v30)
          {
            v103[i3 + 9] = v30;
            operator delete(v30);
          }
        }
        if (v19 >= v21) {
          break;
        }
LABEL_40:
        sub_248484CBC(a1, v20, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v20 + 23;
      }
      BOOL v31 = sub_248485CF0(a1, v20);
      uint64_t v10 = v20 + 23;
      if (sub_248485CF0((uint64_t)(v20 + 23), v96)) {
        break;
      }
      if (!v31) {
        goto LABEL_40;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    break;
  }
}

uint64_t sub_248485814(void *a1, void *a2)
{
  if (sub_248485F58(a1, a2)) {
    return 1;
  }
  if (!sub_248485F58(a2, a1))
  {
    BOOL v5 = (_DWORD *)a2[20];
    unint64_t v6 = (_DWORD *)a2[21];
    if (v5 != v6)
    {
      uint64_t v7 = (_DWORD *)a1[20];
      while (v7 != (_DWORD *)a1[21] && *v7 >= *v5)
      {
        if (*v5 < *v7) {
          return 0;
        }
        unsigned int v8 = v7[1];
        unsigned int v9 = v5[1];
        if (v8 < v9) {
          break;
        }
        uint64_t result = 0;
        if (v9 >= v8)
        {
          v5 += 2;
          v7 += 2;
          if (v5 != v6) {
            continue;
          }
        }
        return result;
      }
      return 1;
    }
  }
  return 0;
}

void sub_2484858BC(void *a1, void *a2, void *a3)
{
  char v6 = sub_248485814(a2, a1);
  int v7 = sub_248485814(a3, a2);
  if (v6)
  {
    if (v7)
    {
      unsigned int v8 = a1 + 22;
      sub_248484264(a1, a3);
      uint64_t v9 = a1[20];
      a1[20] = a3[20];
      a3[20] = v9;
      uint64_t v10 = a1[21];
      a1[21] = a3[21];
    }
    else
    {
      sub_248484264(a1, a2);
      uint64_t v17 = a1[20];
      a1[20] = a2[20];
      a2[20] = v17;
      uint64_t v18 = a1[21];
      a1[21] = a2[21];
      a2[21] = v18;
      unsigned int v8 = a2 + 22;
      uint64_t v19 = a1[22];
      a1[22] = a2[22];
      a2[22] = v19;
      if (!sub_248485814(a3, a2)) {
        return;
      }
      sub_248484264(a2, a3);
      uint64_t v20 = a2[20];
      a2[20] = a3[20];
      a3[20] = v20;
      uint64_t v10 = a2[21];
      a2[21] = a3[21];
    }
    a3[21] = v10;
    uint64_t v14 = a3 + 22;
    goto LABEL_10;
  }
  if (v7)
  {
    sub_248484264(a2, a3);
    uint64_t v11 = a2[20];
    a2[20] = a3[20];
    a3[20] = v11;
    uint64_t v12 = a2[21];
    a2[21] = a3[21];
    a3[21] = v12;
    uint64_t v14 = a2 + 22;
    uint64_t v13 = a2[22];
    a2[22] = a3[22];
    a3[22] = v13;
    if (sub_248485814(a2, a1))
    {
      sub_248484264(a1, a2);
      uint64_t v15 = a1[20];
      a1[20] = a2[20];
      a2[20] = v15;
      uint64_t v16 = a1[21];
      a1[21] = a2[21];
      a2[21] = v16;
      unsigned int v8 = a1 + 22;
LABEL_10:
      uint64_t v21 = *v8;
      uint64_t *v8 = *v14;
      *uint64_t v14 = v21;
    }
  }
}

void sub_248485A60(void *a1, void *a2, void *a3, uint64_t a4)
{
  sub_2484858BC(a1, a2, a3);
  if (sub_248485814((void *)a4, a3))
  {
    sub_248484264(a3, (_OWORD *)a4);
    uint64_t v8 = a3[20];
    a3[20] = *(void *)(a4 + 160);
    *(void *)(a4 + 160) = v8;
    uint64_t v9 = a3[21];
    a3[21] = *(void *)(a4 + 168);
    *(void *)(a4 + 168) = v9;
    uint64_t v10 = a3[22];
    a3[22] = *(void *)(a4 + 176);
    *(void *)(a4 + 176) = v10;
    if (sub_248485814(a3, a2))
    {
      sub_248484264(a2, a3);
      uint64_t v11 = a2[20];
      a2[20] = a3[20];
      a3[20] = v11;
      uint64_t v12 = a2[21];
      a2[21] = a3[21];
      a3[21] = v12;
      uint64_t v13 = a2[22];
      a2[22] = a3[22];
      a3[22] = v13;
      if (sub_248485814(a2, a1))
      {
        sub_248484264(a1, a2);
        uint64_t v14 = a1[20];
        a1[20] = a2[20];
        a2[20] = v14;
        uint64_t v15 = a1[21];
        a1[21] = a2[21];
        a2[21] = v15;
        uint64_t v16 = a1[22];
        a1[22] = a2[22];
        a2[22] = v16;
      }
    }
  }
}

void sub_248485B7C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_248485A60(a1, a2, a3, a4);
  if (sub_248485814((void *)a5, (void *)a4))
  {
    sub_248484264((_OWORD *)a4, (_OWORD *)a5);
    uint64_t v10 = *(void *)(a4 + 160);
    *(void *)(a4 + 160) = *(void *)(a5 + 160);
    *(void *)(a5 + 160) = v10;
    uint64_t v11 = *(void *)(a4 + 168);
    *(void *)(a4 + 168) = *(void *)(a5 + 168);
    *(void *)(a5 + 168) = v11;
    uint64_t v12 = *(void *)(a4 + 176);
    *(void *)(a4 + 176) = *(void *)(a5 + 176);
    *(void *)(a5 + 176) = v12;
    if (sub_248485814((void *)a4, a3))
    {
      sub_248484264(a3, (_OWORD *)a4);
      uint64_t v13 = a3[20];
      a3[20] = *(void *)(a4 + 160);
      *(void *)(a4 + 160) = v13;
      uint64_t v14 = a3[21];
      a3[21] = *(void *)(a4 + 168);
      *(void *)(a4 + 168) = v14;
      uint64_t v15 = a3[22];
      a3[22] = *(void *)(a4 + 176);
      *(void *)(a4 + 176) = v15;
      if (sub_248485814(a3, a2))
      {
        sub_248484264(a2, a3);
        uint64_t v16 = a2[20];
        a2[20] = a3[20];
        a3[20] = v16;
        uint64_t v17 = a2[21];
        a2[21] = a3[21];
        a3[21] = v17;
        uint64_t v18 = a2[22];
        a2[22] = a3[22];
        a3[22] = v18;
        if (sub_248485814(a2, a1))
        {
          sub_248484264(a1, a2);
          uint64_t v19 = a1[20];
          a1[20] = a2[20];
          a2[20] = v19;
          uint64_t v20 = a1[21];
          a1[21] = a2[21];
          a2[21] = v20;
          uint64_t v21 = a1[22];
          a1[22] = a2[22];
          a2[22] = v21;
        }
      }
    }
  }
}

BOOL sub_248485CF0(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xD37A6F4DE9BD37A7 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_248485814(a2 - 23, (void *)a1))
      {
        sub_248484264((_OWORD *)a1, a2 - 23);
        uint64_t v6 = *(void *)(a1 + 160);
        *(void *)(a1 + 160) = *(a2 - 3);
        *(a2 - 3) = v6;
        uint64_t v7 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = *(a2 - 2);
        *(a2 - 2) = v7;
        uint64_t v8 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3uLL:
      sub_2484858BC((void *)a1, (void *)(a1 + 184), a2 - 23);
      return 1;
    case 4uLL:
      sub_248485A60((void *)a1, (void *)(a1 + 184), (void *)(a1 + 368), (uint64_t)(a2 - 23));
      return 1;
    case 5uLL:
      sub_248485B7C((void *)a1, (void *)(a1 + 184), (void *)(a1 + 368), a1 + 552, (uint64_t)(a2 - 23));
      return 1;
    default:
      uint64_t v9 = (void *)(a1 + 368);
      sub_2484858BC((void *)a1, (void *)(a1 + 184), (void *)(a1 + 368));
      uint64_t v10 = (void *)(a1 + 552);
      if ((void *)(a1 + 552) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_248485814(v10, v9))
    {
      sub_248455334((uint64_t)v20, (uint64_t)v10);
      uint64_t v13 = v11;
      while (1)
      {
        sub_24848492C(a1 + v13 + 552, a1 + v13 + 368);
        if (v13 == -368) {
          break;
        }
        char v14 = sub_248485814(v20, (void *)(a1 + v13 + 184));
        v13 -= 184;
        if ((v14 & 1) == 0)
        {
          uint64_t v15 = a1 + v13 + 552;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      sub_24848492C(v15, (uint64_t)v20);
      if (__p)
      {
        long long v22 = __p;
        operator delete(__p);
      }
      uint64_t v16 = 0;
      ++v12;
      do
      {
        uint64_t v17 = (void *)v20[v16 + 17];
        if (v17)
        {
          v20[v16 + 18] = v17;
          operator delete(v17);
        }
        v16 -= 3;
      }
      while (v16 != -9);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        uint64_t v19 = (void *)v20[i + 8];
        if (v19)
        {
          v20[i + 9] = v19;
          operator delete(v19);
        }
      }
      if (v12 == 8) {
        return v10 + 23 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 184;
    v10 += 23;
    if (v10 == a2) {
      return 1;
    }
  }
}

BOOL sub_248485F58(void *a1, void *a2)
{
  BOOL v2 = *a1 >= *a2;
  if (*a1 != *a2) {
    return !v2;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = a2[1];
  BOOL v2 = v5 >= v6;
  if (v5 != v6) {
    return !v2;
  }
  size_t v7 = v5 * *a1;
  uint64_t v8 = 2;
  while (1)
  {
    int v9 = memcmp((const void *)a1[v8], (const void *)a2[v8], v7);
    if (v9 > 0) {
      return 0;
    }
    if (v9) {
      break;
    }
    v8 += 3;
    if (v8 == 11) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_248485FE8(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unint64_t **)v2;
  unint64_t v4 = **(void **)v2;
  if (v4 >= 4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = 4 * a2;
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = 4 * v5;
      uint64_t v10 = *(void *)(v2 + 8);
      uint64_t v11 = *(uint64_t **)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      BOOL result = ((4 * v5) & 0xFFFFFFFC) + v12 * (v7 & 0xFFFFFFFC);
      uint64_t v13 = *v11;
      float v14 = *(float *)(*v11 + 4 * result);
      char v15 = 1;
LABEL_4:
      while (2)
      {
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = (v16 + v9) + (v8 + v7) * v12;
          if (vabds_f32(*(float *)(v13 + 4 * v17), v14) > 0.0001) {
            break;
          }
          uint64_t v18 = 0;
          while (v18 != 2)
          {
            uint64_t v19 = v18 + 1;
            double v20 = vabds_f32(*(float *)(v11[v18 + 1] + 4 * v17), *(float *)(v11[v18 + 1] + 4 * result));
            ++v18;
            if (v20 > 0.0001)
            {
              if ((unint64_t)(v19 - 1) <= 1) {
                goto LABEL_13;
              }
              break;
            }
          }
          if (++v16 == 4)
          {
            if (++v8 != 4) {
              goto LABEL_4;
            }
            if (v15)
            {
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = v11 + 1;
              for (uint64_t i = -4; i != 8; ++i)
              {
                unint64_t v25 = i + v7;
                for (uint64_t j = -4; j != 8; ++j)
                {
                  unint64_t v27 = j + v9;
                  if (j + v9 >= 0 && v27 < v4 && (v25 & 0x8000000000000000) == 0 && v25 < v3[1])
                  {
                    uint64_t v28 = (i + v7) * v12 + v27;
                    if (vabds_f32(*(float *)(v13 + 4 * v28), v14) > 0.0001)
                    {
                      BOOL v32 = 0;
                    }
                    else
                    {
                      uint64_t v29 = 0;
                      while (v29 != 2)
                      {
                        double v30 = vabds_f32(*(float *)(v23[v29] + 4 * v28), *(float *)(v23[v29] + 4 * result));
                        ++v29;
                        if (v30 > 0.0001)
                        {
                          unint64_t v31 = v29 - 1;
                          goto LABEL_29;
                        }
                      }
                      unint64_t v31 = 2;
LABEL_29:
                      BOOL v32 = v31 > 1;
                    }
                    ++v22;
                    v21 += v32;
                  }
                }
              }
              if (7 * v22 <= (unint64_t)(8 * v21))
              {
                *(unsigned char *)(**(void **)(v2 + 16) + v5 + **(void **)(v2 + 24) * v6) = 1;
                atomic_store(1u, *(unsigned __int8 **)(v2 + 32));
                uint64_t v3 = *(unint64_t **)v2;
                unint64_t v4 = **(void **)v2;
              }
            }
            goto LABEL_35;
          }
        }
LABEL_13:
        char v15 = 0;
        if (++v8 != 4) {
          continue;
        }
        break;
      }
LABEL_35:
      ++v5;
    }
    while (v5 < v4 >> 2);
  }
  return result;
}

uint64_t sub_2484861EC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_248486214(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *(void *)(a1 + 720);
  uint64_t v11 = *(void *)(a1 + 728) - v10;
  if (v11)
  {
    unint64_t v12 = v11 / 560;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    char v13 = 1;
    do
    {
      if (*(_DWORD *)v10 || *(unsigned char *)(v10 + 552)) {
        char v13 = 0;
      }
      v10 += 560;
      --v12;
    }
    while (v12);
  }
  else
  {
    char v13 = 1;
  }
  sub_248419548((uint64_t)v56, a2, 0x80000);
  *(void *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((unint64_t)(v13 & 1) << (*a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
  ++*a2;
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 720);
    if (*(void *)(a1 + 728) != v14)
    {
      unint64_t v15 = 0;
      uint64_t v55 = 224;
      uint64_t v53 = a3;
      uint64_t v54 = a4;
      char v52 = a5;
      while (1)
      {
        uint64_t v16 = dword_248550648[v15];
        uint64_t v17 = dword_24855068C[v15];
        uint64_t v18 = (unsigned int *)(v14 + 560 * v15);
        *(void *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((unint64_t)*v18 << (*a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
        unint64_t v19 = *a2 + 3;
        *a2 = v19;
        switch(*v18)
        {
          case 0u:
            *(void *)(a2[3] + (v19 >> 3)) = ((unint64_t)*((unsigned __int8 *)v18 + 552) << (v19 & 7)) | *(unsigned __int8 *)(a2[3] + (v19 >> 3));
            goto LABEL_62;
          case 1u:
            uint64_t v20 = 0;
            uint64_t v21 = v14 + v55;
            do
            {
              for (uint64_t i = 0; i != 12; i += 4)
              {
                if (sub_2484DA5A0(a2, *(float *)(v21 + i) * 0.015625)) {
                  return 1;
                }
              }
              ++v20;
              v21 += 12;
            }
            while (v20 != 3);
            goto LABEL_62;
          case 2u:
            uint64_t v23 = 0;
            uint64_t v24 = v14 + v55;
            do
            {
              for (uint64_t j = 0; j != 24; j += 4)
              {
                if (sub_2484DA5A0(a2, *(float *)(v24 + j) * 0.015625)) {
                  return 1;
                }
              }
              ++v23;
              v24 += 24;
            }
            while (v23 != 3);
            goto LABEL_62;
          case 3u:
            for (uint64_t k = 0; k != 3; ++k)
            {
              uint64_t v27 = 0;
              char v28 = 1;
              do
              {
                char v29 = v28;
                if (sub_2484DA5A0(a2, *(float *)&v18[2 * k + 56 + v27])) {
                  return 1;
                }
                char v28 = 0;
                uint64_t v27 = 1;
              }
              while ((v29 & 1) != 0);
            }
            goto LABEL_37;
          case 4u:
            uint64_t v30 = 0;
            uint64_t v31 = v14 + v55;
            do
            {
              if (sub_2484DA5A0(a2, *(float *)(v31 + v30))) {
                return 1;
              }
              v30 += 4;
            }
            while (v30 != 12);
LABEL_37:
            BOOL v32 = (uint64_t *)(v18 + 2);
            goto LABEL_38;
          case 5u:
            uint64_t v33 = 0;
            uint64_t v34 = v14 + v55;
            do
            {
              for (unint64_t m = 0; m != 9; ++m)
              {
                float v36 = 0.015625;
                if (m >= 6) {
                  float v36 = 1.0;
                }
                if (sub_2484DA5A0(a2, *(float *)(v34 + 4 * m) * v36)) {
                  return 1;
                }
              }
              ++v33;
              v34 += 36;
            }
            while (v33 != 3);
            if (!sub_2484868C4((uint64_t *)v18 + 1, a2))
            {
              BOOL v32 = (uint64_t *)(v18 + 84);
LABEL_38:
              if (!sub_2484868C4(v32, a2)) {
                goto LABEL_62;
              }
            }
            return 1;
          case 6u:
            uint64_t v37 = sub_2484868C4((uint64_t *)v18 + 1, a2);
            if (!v37) {
              goto LABEL_62;
            }
            return v37;
          case 7u:
            sub_2484DA5A0(a2, *((float *)v18 + 58));
            if (v52)
            {
              LODWORD(v57) = 4;
              *((void *)&v57 + 1) = v15;
              uint64_t v58 = 0;
              uint64_t v59 = 0;
              sub_24847C5C4(v52, (unint64_t *)a2, 0, 0, (uint64_t)&v57);
            }
            else
            {
              sub_24842A0C4((uint64_t)&v82, 8 * v16, 8 * v17, 8, 3);
              uint64_t v51 = v89;
              if (v89)
              {
                sub_24840A478((uint64_t)&v82);
                return v51;
              }
              uint64_t v38 = 0;
              uint64_t v39 = 0;
              long long v75 = v82;
              uint64_t v40 = v82;
              long long v82 = 0uLL;
              uint64_t v41 = v83;
              uint64_t v83 = 0;
              long long v77 = v84;
              uint64_t v76 = v41;
              uint64_t v78 = v85;
              uint64_t v85 = 0;
              long long v84 = 0uLL;
              char v81 = v88;
              long long v79 = v86;
              long long v80 = v87;
              do
              {
                if (v17)
                {
                  uint64_t v42 = 0;
                  uint64_t v44 = *(void *)(v40 + (v39 << 6) + 16);
                  uint64_t v43 = *(_DWORD **)(v40 + (v39 << 6) + 24);
                  uint64_t v45 = v38;
                  do
                  {
                    uint64_t v46 = v45;
                    uint64_t v47 = v43;
                    uint64_t v48 = 8 * v16;
                    if (v16)
                    {
                      do
                      {
                        *v47++ = *(_DWORD *)(**((void **)v18 + 28) + v46);
                        v46 += 4;
                        --v48;
                      }
                      while (v48);
                    }
                    ++v42;
                    uint64_t v43 = (_DWORD *)((char *)v43 + v44);
                    v45 += 32 * v16;
                  }
                  while (v42 != 8 * v17);
                }
                ++v39;
                v38 += ((int)v17 * (uint64_t)(int)v16) << 8;
              }
              while (v39 != 3);
              long long v57 = xmmword_2484DCB30;
              uint64_t v58 = 1056964608;
              uint64_t v49 = operator new(0x20uLL);
              uint64_t v60 = v49 + 2;
              uint64_t v61 = v49 + 2;
              _OWORD *v49 = xmmword_24855076C;
              v49[1] = unk_24855077C;
              uint64_t v59 = v49;
              int v62 = 1119879168;
              uint64_t v63 = 32;
              uint64_t v64 = 0xFFFFFFFFLL;
              uint64_t v65 = 0x33F8147AELL;
              char v66 = 0;
              long long v67 = xmmword_2484DCB20;
              int v68 = 2;
              uint64_t v69 = 0;
              long long v70 = 0u;
              uint64_t v71 = -1;
              int v72 = 256;
              char v73 = 0;
              char v74 = 0;
              sub_2484A0E7C(&v75, &v57, (unint64_t *)a2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              operator delete(v49);
              *(void *)&long long v57 = &v77;
              sub_2483FDBFC((void ***)&v57);
              *(void *)&long long v57 = &v75;
              sub_2483FDCBC((void ***)&v57);
              sub_24840A478((uint64_t)&v82);
            }
LABEL_62:
            ++v15;
            uint64_t v14 = *(void *)(a1 + 720);
            a4 = v54;
            v55 += 560;
            a3 = v53;
            if (v15 >= 0xAF8AF8AF8AF8AF8BLL * ((*(void *)(a1 + 728) - v14) >> 4)) {
              goto LABEL_63;
            }
            break;
          default:
            goto LABEL_62;
        }
      }
    }
  }
LABEL_63:
  sub_2484195C0((uint64_t)v56, a2, a3, a4);
  return 0;
}

void sub_24848686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  sub_24840A434(&a33);
  sub_2484039E8(&a53);
  sub_24840A478(v53 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_2484868C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  *(void *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((*a1 - 1) << (*(unsigned char *)a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
  *a2 += 4;
  uint64_t v6 = a1 + 1;
  uint64_t v5 = *a1;
  while (!v5)
  {
LABEL_8:
    ++v4;
    uint64_t v6 = (void *)((char *)v6 + 68);
    if (v4 == 3) {
      return 0;
    }
  }
  unint64_t v7 = 0;
  while (1)
  {
    float v8 = 0.015625;
    if (v7) {
      float v8 = 1.0;
    }
    if (sub_2484DA5A0(a2, v8 * *((float *)v6 + v7))) {
      return 1;
    }
    ++v7;
    uint64_t v5 = *a1;
    if (v7 >= *a1) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_24848699C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 48;
  LOBYTE(v9) = 1;
  do
  {
    uint64_t v9 = (*(float *)(v8 + v7 * 4) == *(float *)&dword_2485506D0[v7]) & v9;
    ++v7;
  }
  while (v7 != 3);
  sub_248419548((uint64_t)v12, a2, 97);
  *(void *)(a2[3] + ((unint64_t)*a2 >> 3)) = (v9 << (*a2 & 7)) | *(unsigned __int8 *)(a2[3]
                                                                                             + ((unint64_t)*a2 >> 3));
  ++*a2;
  if (v9)
  {
LABEL_7:
    sub_2484195C0((uint64_t)v12, a2, a3, a4);
    return 0;
  }
  else
  {
    uint64_t v10 = 0;
    while (!sub_2484DA5A0(a2, *(float *)(v8 + v10) * 128.0))
    {
      v10 += 4;
      if (v10 == 12) {
        goto LABEL_7;
      }
    }
    return 1;
  }
}

void sub_248486AA4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    uint64_t v4 = a1 + i;
    *(float *)(v4 + 48) = 1.0 / *(float *)(a2 + i);
    *(_DWORD *)(v4 + 60) = *(_DWORD *)(a2 + i);
  }
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  sub_24848699C(a1, (uint64_t *)&v10, 0, 0);
  unint64_t v5 = v10;
  uint64_t v6 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v6)
  {
    *(void *)(*((void *)&v11 + 1) + ((unint64_t)v10 >> 3)) = *(unsigned __int8 *)(*((void *)&v11 + 1)
                                                                                           + ((unint64_t)v10 >> 3));
    unint64_t v5 = v10 + v6;
    *(void *)&long long v10 = v10 + v6;
  }
  uint64_t v7 = *((void *)&v11 + 1);
  v8[0] = *((void *)&v11 + 1);
  v8[1] = v5 >> 3;
  sub_2483FA1E8((uint64_t)v9, (uint64_t)v8);
  sub_24842EF20(a1, v9);
  *((void *)&v11 + 1) = 0;
  if (v7)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
    free(*(void **)(v7 - 32));
  }
}

void sub_248486B90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24));
    free(*(void **)(v3 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248486BC4(uint64_t a1, void **a2, void *a3)
{
  uint64_t v3 = a2;
  unint64_t v5 = (void **)(a1 + 720);
  if (v5 != a2)
  {
    uint64_t v7 = (char *)*a2;
    uint64_t v6 = (uint64_t)a2[1];
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)*a2) >> 4);
    uint64_t v9 = *(void **)(a1 + 720);
    if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a1 + 736) - (void)v9) >> 4) < v8)
    {
      sub_248403628(v5);
      if (v8 > 0x75075075075075) {
        goto LABEL_44;
      }
      unint64_t v10 = 0x5F15F15F15F15F16 * ((uint64_t)(*(void *)(a1 + 736) - *(void *)(a1 + 720)) >> 4);
      if (v10 <= v8) {
        unint64_t v10 = v8;
      }
      unint64_t v11 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a1 + 736) - *(void *)(a1 + 720)) >> 4) >= 0x3A83A83A83A83ALL
          ? 0x75075075075075
          : v10;
      if (v11 > 0x75075075075075) {
LABEL_44:
      }
        sub_2483E92E8();
      uint64_t v12 = (char *)sub_24842EE84(v11);
      *(void *)(a1 + 720) = v12;
      *(void *)(a1 + 728) = v12;
      *(void *)(a1 + 736) = &v12[560 * v13];
      uint64_t v14 = sub_2484870AC((uint64_t)v7, v6, (uint64_t)v12);
LABEL_17:
      *(void *)(a1 + 728) = v14;
      goto LABEL_24;
    }
    uint64_t v15 = *(void *)(a1 + 728);
    if (0xAF8AF8AF8AF8AF8BLL * ((v15 - (uint64_t)v9) >> 4) < v8)
    {
      uint64_t v16 = (uint64_t)&v7[16 * ((v15 - (uint64_t)v9) >> 4)];
      if ((void *)v15 != v9)
      {
        uint64_t v17 = 16 * ((v15 - (uint64_t)v9) >> 4);
        do
        {
          sub_248467310(v9, v7);
          v7 += 560;
          v9 += 70;
          v17 -= 560;
        }
        while (v17);
        uint64_t v9 = *(void **)(a1 + 728);
      }
      uint64_t v14 = sub_2484870AC(v16, v6, (uint64_t)v9);
      goto LABEL_17;
    }
    if (v7 != (char *)v6)
    {
      do
      {
        sub_248467310(v9, v7);
        v7 += 560;
        v9 += 70;
      }
      while (v7 != (char *)v6);
      uint64_t v15 = *(void *)(a1 + 728);
    }
    while ((void *)v15 != v9)
      uint64_t v15 = sub_248403910(v15 - 560);
    *(void *)(a1 + 728) = v9;
  }
LABEL_24:
  uint64_t v42 = a1;
  *(_DWORD *)a1 = 0;
  unint64_t v19 = *v3;
  uint64_t v18 = v3[1];
  if (v18 != *v3)
  {
    for (unint64_t i = 0; i < 0xAF8AF8AF8AF8AF8BLL * ((v18 - v19) >> 4); ++i)
    {
      uint64_t v21 = &v19[560 * i];
      if (*(_DWORD *)v21 == 7)
      {
        uint64_t v22 = v3;
        uint64_t v23 = dword_248550648[i];
        uint64_t v24 = dword_24855068C[i];
        LODWORD(v49) = 4;
        *((void *)&v49 + 1) = i;
        uint64_t v50 = 0;
        *(void *)&long long v51 = 0;
        uint64_t v25 = sub_24840A1D8((uint64_t)&v49, a3[60], a3[61]);
        uint64_t v26 = a3[6];
        sub_24842A0C4((uint64_t)&v49, 8 * v23, 8 * v24, 8, 3);
        uint64_t v27 = v56;
        if (v56)
        {
          sub_24840A478((uint64_t)&v49);
          return v27;
        }
        *(_OWORD *)uint64_t v44 = v49;
        char v28 = (void *)(v26 + 88 * v25);
        *(void *)&v44[16] = v50;
        long long v49 = 0uLL;
        uint64_t v50 = 0;
        *(_OWORD *)&v44[24] = v51;
        uint64_t v45 = v52;
        uint64_t v52 = 0;
        long long v51 = 0uLL;
        long long v46 = v53;
        long long v47 = v54;
        char v48 = v55;
        sub_24842A35C((uint64_t)v28, (uint64_t)v44);
        v57[0] = (void **)&v44[24];
        sub_2483FDBFC(v57);
        v57[0] = (void **)v44;
        sub_2483FDCBC(v57);
        uint64_t v29 = 0;
        for (uint64_t j = 0; j != 3; ++j)
        {
          if (v24)
          {
            uint64_t v31 = 0;
            uint64_t v33 = *(void *)(*v28 + (j << 6) + 16);
            BOOL v32 = *(_DWORD **)(*v28 + (j << 6) + 24);
            uint64_t v34 = v29;
            do
            {
              uint64_t v35 = v34;
              float v36 = v32;
              uint64_t v37 = 8 * v23;
              if (v23)
              {
                do
                {
                  *v36++ = *(_DWORD *)(**((void **)v21 + 28) + v35);
                  v35 += 4;
                  --v37;
                }
                while (v37);
              }
              ++v31;
              BOOL v32 = (_DWORD *)((char *)v32 + v33);
              v34 += 32 * v23;
            }
            while (v31 != 8 * v24);
          }
          v29 += ((int)v24 * (uint64_t)(int)v23) << 8;
        }
        sub_24840A478((uint64_t)&v49);
        uint64_t v3 = v22;
        unint64_t v19 = *v22;
        uint64_t v18 = v22[1];
      }
    }
  }
  memset(v44, 0, sizeof(v44));
  sub_248486214(v42, (uint64_t *)v44, 0, 0, 0);
  unint64_t v38 = *(void *)v44;
  unint64_t v39 = ((*(void *)v44 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v44;
  if (v39)
  {
    *(void *)(*(void *)&v44[24] + (*(void *)v44 >> 3)) = *(unsigned __int8 *)(*(void *)&v44[24]
                                                                                  + (*(void *)v44 >> 3));
    unint64_t v38 = *(void *)v44 + v39;
    *(void *)v44 += v39;
  }
  v57[0] = *(void ***)&v44[24];
  v57[1] = (void **)(v38 >> 3);
  sub_2483FA1E8((uint64_t)&v49, (uint64_t)v57);
  sub_24842DFDC(v42, (unint64_t *)&v49, 0);
  uint64_t v40 = *(void *)&v44[24];
  *(void *)&v44[24] = 0;
  if (v40)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v40 - 24));
    free(*(void **)(v40 - 32));
  }
  return 0;
}

void sub_248487064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)(v20 + 728) = v21;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484870AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_24842EDD8((void *)(a3 + v6), (const void *)(a1 + v6));
      v6 += 560;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

float32x4_t sub_248487140(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3B789536u);
  float32x4_t v8 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v7, a7, a1[2]), a6, a1[1]), a5, *a1);
  float32x4_t v9 = vmlaq_f32(vmlaq_f32(v7, a7, a1[5]), a6, a1[4]);
  float32x4_t v10 = vmlaq_f32(v7, a7, a1[8]);
  float32x4_t v11 = vmaxnmq_f32(v8, (float32x4_t)0);
  float32x4_t v12 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v11, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v11));
  float32x4_t v13 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  int v14 = 3;
  float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    float32x4_t v16 = vmulq_f32(v12, v12);
    float32x4_t v12 = vmlaq_f32(vmulq_f32(v12, v15), vmulq_f32(v16, v16), v13);
    --v14;
  }
  while (v14);
  float32x4_t v17 = vmaxnmq_f32(vmlaq_f32(v9, a5, a1[3]), (float32x4_t)0);
  float32x4_t v18 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v17, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v17));
  float32x4_t v19 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  int v20 = 3;
  float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    float32x4_t v22 = vmulq_f32(v18, v18);
    float32x4_t v18 = vmlaq_f32(vmulq_f32(v18, v21), vmulq_f32(v22, v22), v19);
    --v20;
  }
  while (v20);
  float32x4_t v23 = vmaxnmq_f32(vmlaq_f32(vmlaq_f32(v10, a6, a1[7]), a5, a1[6]), (float32x4_t)0);
  float32x4_t v24 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v23, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v23));
  float32x4_t v25 = vmulq_f32(v23, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  int v26 = 3;
  float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    float32x4_t v28 = vmulq_f32(v24, v24);
    float32x4_t v24 = vmlaq_f32(vmulq_f32(v24, v27), vmulq_f32(v28, v28), v25);
    --v26;
  }
  while (v26);
  float32x4_t v29 = vmulq_f32(v18, v18);
  float32x4_t v30 = vmlsq_f32(v18, vmulq_f32(v29, v29), v17);
  float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
  float32x4_t v32 = vmlaq_f32(v18, v31, v30);
  float32x4_t v33 = vmlaq_f32(a1[10], v17, vmulq_f32(v32, v32));
  float32x4_t v34 = vmulq_f32(v12, v12);
  float32x4_t v35 = vmlaq_f32(v12, v31, vmlsq_f32(v12, vmulq_f32(v34, v34), v11));
  float32x4_t v36 = vmlaq_f32(a1[9], v11, vmulq_f32(v35, v35));
  float32x4_t v37 = vmulq_f32(v24, v24);
  float32x4_t v38 = vmlaq_f32(v24, v31, vmlsq_f32(v24, vmulq_f32(v37, v37), v23));
  float32x4_t result = vmlaq_f32(a1[11], v23, vmulq_f32(v38, v38));
  v37.i64[0] = 0x3F0000003F000000;
  v37.i64[1] = 0x3F0000003F000000;
  *a2 = vmulq_f32(vsubq_f32(v36, v33), v37);
  *a3 = vmulq_f32(vaddq_f32(v36, v33), v37);
  *a4 = result;
  return result;
}

BOOL sub_248487344(uint64_t a1, void *a2, unsigned int *a3)
{
  float32x4_t v10 = a3;
  uint64_t v11 = a1;
  uint64_t v4 = a3[1];
  uint64_t v9 = *a3;
  v7[0] = &v10;
  v7[1] = &v9;
  void v7[2] = &v8;
  v7[3] = &v11;
  if (a2)
  {
    unint64_t v5 = a2;
  }
  else
  {
    v12[0] = 0;
    v12[1] = v12;
    unint64_t v5 = v12;
  }
  return sub_2484873AC((uint64_t)v5, v4, (uint64_t)v7);
}

BOOL sub_2484873AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248487508, sub_24848745C, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24848745C((uint64_t)v6, i);
  return 0;
}

void sub_24848745C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (**(void **)(v2 + 8))
  {
    unint64_t v3 = 0;
    uint64_t v4 = **(void ***)v2;
    uint64_t v5 = v4[2] * a2;
    uint64_t v6 = (float32x4_t *)(v4[3] + v5);
    float32x4_t v7 = (float32x4_t *)(v4[8] + v5);
    char v8 = (float32x4_t *)(v4[13] + v5);
    uint64_t v9 = v6;
    float32x4_t v10 = v7;
    uint64_t v11 = v8;
    do
    {
      float32x4_t v12 = *v9++;
      float32x4_t v13 = v12;
      float32x4_t v14 = *v10++;
      float32x4_t v15 = v14;
      float32x4_t v16 = *v11++;
      sub_248487140(**(float32x4_t ***)(v2 + 24), v6, v7, v8, v13, v15, v16);
      v3 += 4;
      uint64_t v6 = v9;
      float32x4_t v7 = v10;
      char v8 = v11;
    }
    while (v3 < **(void **)(v2 + 8));
  }
}

uint64_t sub_248487508(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL sub_248487530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24848786C, sub_2484875E0, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_2484875E0((uint64_t)v6, i);
  return 0;
}

void sub_2484875E0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (**(void **)(v2 + 8))
  {
    unint64_t v3 = 0;
    uint64_t v4 = **(void ***)v2;
    uint64_t v5 = v4[2] * a2;
    uint64_t v6 = (float32x4_t *)(v4[3] + v5);
    float32x4_t v7 = (float32x4_t *)(v4[8] + v5);
    char v8 = (float32x4_t *)(v4[13] + v5);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    uint64_t v9 = v6;
    float32x4_t v10 = v7;
    uint64_t v11 = (int8x16_t *)v8;
    do
    {
      int8x16_t v12 = *(int8x16_t *)v9++;
      int8x16_t v13 = v12;
      unsigned long long v14 = *(_OWORD *)&v12 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      int8x16_t v15 = *(int8x16_t *)v10++;
      int8x16_t v16 = v15;
      unsigned long long v17 = *(_OWORD *)&v15 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      int8x16_t v18 = *v11++;
      unsigned long long v19 = *(_OWORD *)&v18 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v20.i64[0] = 0x8000000080000000;
      v20.i64[1] = 0x8000000080000000;
      sub_248487140(**(float32x4_t ***)(v2 + 24), v6, v7, v8, (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v14, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v14, vmlaq_f32(v25, (float32x4_t)v14, vmlaq_f32(v27, (float32x4_t)v14, vmlaq_f32(v30, v31, (float32x4_t)v14)))), vmlaq_f32(v22, (float32x4_t)v14,
                                        vmlaq_f32(v24, (float32x4_t)v14, vmlaq_f32(v26, (float32x4_t)v14, vmlaq_f32(v28, v29, (float32x4_t)v14))))), (int8x16_t)vmulq_f32((float32x4_t)v14, v32)), v13), (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v17, vmlaq_f32(v25, (float32x4_t)v17, vmlaq_f32(v27, (float32x4_t)v17, vmlaq_f32(v30, v31, (float32x4_t)v17)))), vmlaq_f32(v22,
                                        (float32x4_t)v17,
                                        vmlaq_f32(v24, (float32x4_t)v17, vmlaq_f32(v26, (float32x4_t)v17, vmlaq_f32(v28, v29, (float32x4_t)v17))))), (int8x16_t)vmulq_f32((float32x4_t)v17, v32)), v16), (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v19, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v19, vmlaq_f32(v25, (float32x4_t)v19, vmlaq_f32(v27, (float32x4_t)v19, vmlaq_f32(v30, v31, (float32x4_t)v19)))), vmlaq_f32(v22,
                                        (float32x4_t)v19,
                                        vmlaq_f32(v24, (float32x4_t)v19, vmlaq_f32(v26, (float32x4_t)v19, vmlaq_f32(v28, v29, (float32x4_t)v19))))), (int8x16_t)vmulq_f32((float32x4_t)v19, v32)), v18));
      v3 += 4;
      uint64_t v6 = v9;
      float32x4_t v7 = v10;
      char v8 = (float32x4_t *)v11;
    }
    while (v3 < **(void **)(v2 + 8));
  }
}

uint64_t sub_24848786C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL sub_248487894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248487C10, sub_248487944, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_248487944((uint64_t)v6, i);
  return 0;
}

void sub_248487944(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (**(void **)(v2 + 16))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = **(void ***)v2;
    uint64_t v6 = v5[2] * a2;
    uint64_t v7 = v5[3] + v6;
    uint64_t v8 = v5[8] + v6;
    uint64_t v9 = v5[13] + v6;
    float32x4_t v10 = **(void ***)(v2 + 8);
    uint64_t v11 = v10[2] * a2;
    uint64_t v12 = v10[3] + v11;
    uint64_t v13 = v10[8] + v11;
    uint64_t v14 = v10[13] + v11;
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    do
    {
      unsigned long long v15 = *(_OWORD *)(v7 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v16.i64[0] = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      float32x4_t v17 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v15, vmlaq_f32(v26, (float32x4_t)v15, vmlaq_f32(v28, (float32x4_t)v15, vmlaq_f32(v31, v32, (float32x4_t)v15)))), vmlaq_f32(v23, (float32x4_t)v15, vmlaq_f32(v25, (float32x4_t)v15, vmlaq_f32(v27, (float32x4_t)v15, vmlaq_f32(v29, v30, (float32x4_t)v15))))), (int8x16_t)vmulq_f32((float32x4_t)v15, v33)),
                           *(int8x16_t *)(v7 + v3));
      unsigned long long v18 = *(_OWORD *)(v8 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v18, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v18, vmlaq_f32(v26, (float32x4_t)v18, vmlaq_f32(v28, (float32x4_t)v18, vmlaq_f32(v31, v32, (float32x4_t)v18)))), vmlaq_f32(v23, (float32x4_t)v18, vmlaq_f32(v25, (float32x4_t)v18, vmlaq_f32(v27, (float32x4_t)v18, vmlaq_f32(v29, v30, (float32x4_t)v18))))), (int8x16_t)vmulq_f32((float32x4_t)v18, v33)),
                           *(int8x16_t *)(v8 + v3));
      unsigned long long v20 = *(_OWORD *)(v9 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v20, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v20, vmlaq_f32(v26, (float32x4_t)v20, vmlaq_f32(v28, (float32x4_t)v20, vmlaq_f32(v31, v32, (float32x4_t)v20)))), vmlaq_f32(v23, (float32x4_t)v20, vmlaq_f32(v25, (float32x4_t)v20, vmlaq_f32(v27, (float32x4_t)v20, vmlaq_f32(v29, v30, (float32x4_t)v20))))), (int8x16_t)vmulq_f32((float32x4_t)v20, v33)),
                           *(int8x16_t *)(v9 + v3));
      *(float32x4_t *)(v12 + v3) = v17;
      *(float32x4_t *)(v13 + v3) = v19;
      *(float32x4_t *)(v14 + v3) = v21;
      sub_248487140(**(float32x4_t ***)(v2 + 32), (float32x4_t *)(v7 + v3), (float32x4_t *)(v8 + v3), (float32x4_t *)(v9 + v3), v17, v19, v21);
      v4 += 4;
      v3 += 16;
    }
    while (v4 < **(void **)(v2 + 16));
  }
}

uint64_t sub_248487C10(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL sub_248487C38(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, float a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v14 = a1 + 16;
  unsigned long long v15 = sub_2483F0AE8(*(_DWORD *)(a1 + 56) == 1);
  if (sub_24840FAA0((uint64_t)(v15 + 16), v14))
  {
    for (uint64_t i = 0; i != 9; ++i)
    {
      *(float *)v16.i32 = (float)(a7 / 255.0) * flt_248550700[i];
      int32x4_t v16 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
      *(int32x4_t *)&v50[2 * i] = v16;
    }
    *(float *)v18.i32 = -cbrtf(0.0037931);
    int32x4_t v52 = vdupq_lane_s32(v18, 0);
    int32x4_t v53 = v52;
    int32x4_t v54 = v52;
    if (a6) {
      sub_2483F9824(a4, (uint64_t)a6);
    }
    return sub_248487344((uint64_t)v50, a3, a4);
  }
  unsigned int v20 = *(_DWORD *)(a1 + 56);
  if (*(unsigned char *)(a1 + 28)) {
    BOOL v21 = v20 > 1;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21
    && *(_DWORD *)(a1 + 16) == 1
    && *(_DWORD *)(a1 + 20) == 1
    && *(unsigned char *)(a1 + 64) == 0
    && *(_DWORD *)(a1 + 72) == 13)
  {
    for (uint64_t j = 0; j != 9; ++j)
    {
      *(float *)v16.i32 = (float)(a7 / 255.0) * flt_248550700[j];
      int32x4_t v16 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
      *(int32x4_t *)&v50[2 * j] = v16;
    }
    *(float *)v30.i32 = -cbrtf(0.0037931);
    int32x4_t v52 = vdupq_lane_s32(v30, 0);
    int32x4_t v53 = v52;
    int32x4_t v54 = v52;
    if (a6)
    {
      long long v46 = a4;
      long long v47 = v50;
      uint64_t v31 = a4[1];
      uint64_t v44 = *a4;
      uint64_t v45 = a6;
      float32x4_t v38 = &v46;
      unint64_t v39 = &v45;
      uint64_t v40 = &v44;
      uint64_t v41 = &v43;
      uint64_t v42 = &v47;
      if (a3)
      {
        return sub_248487894((uint64_t)a3, v31, (uint64_t)&v38);
      }
      else
      {
        uint64_t v48 = 0;
        long long v49 = &v48;
        return sub_248487894((uint64_t)&v48, v31, (uint64_t)&v38);
      }
    }
    else
    {
      long long v46 = a4;
      long long v47 = v50;
      uint64_t v37 = a4[1];
      uint64_t v45 = (unsigned int *)*a4;
      float32x4_t v38 = &v46;
      unint64_t v39 = &v45;
      uint64_t v40 = &v44;
      uint64_t v41 = (char *)&v47;
      if (a3)
      {
        return sub_248487530((uint64_t)a3, v37, (uint64_t)&v38);
      }
      else
      {
        uint64_t v48 = 0;
        long long v49 = &v48;
        return sub_248487530((uint64_t)&v48, v37, (uint64_t)&v38);
      }
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_269319880, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_269319880))
    {
      sub_2483F0630((uint64_t)&unk_2693196F0, 9, 8);
      __cxa_atexit((void (*)(void *))sub_2483F09C4, &unk_2693196F0, &dword_248384000);
      __cxa_guard_release(&qword_269319880);
    }
    if (sub_24840FAA0((uint64_t)&unk_2693196F0 + 200 * (v20 == 1) + 16, v14))
    {
      for (uint64_t k = 0; k != 9; ++k)
      {
        *(float *)v26.i32 = (float)(a7 / 255.0) * flt_2485506DC[k];
        int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
        *(int32x4_t *)&v50[2 * k] = v26;
      }
      *(float *)v28.i32 = -cbrtf(0.0037931);
      int32x4_t v52 = vdupq_lane_s32(v28, 0);
      int32x4_t v53 = v52;
      int32x4_t v54 = v52;
      if (a6) {
        sub_2483F9824(a4, (uint64_t)a6);
      }
      return sub_248487344((uint64_t)v50, a3, a4);
    }
    v50[0] = 0;
    v50[1] = 0;
    *(void *)&long long v32 = *(void *)a4;
    *((void *)&v32 + 1) = HIDWORD(*(void *)a4);
    long long v51 = v32;
    if (a6) {
      float32x4_t v33 = a6;
    }
    else {
      float32x4_t v33 = a4;
    }
    sub_248472450(a1, (uint64_t)a4, a2, (uint64_t)v50, (uint64_t)v15, a5, a3, v33, a7);
    if (a6) {
      sub_2483F9824(a6, (uint64_t)a4);
    }
    for (uint64_t m = 0; m != 9; ++m)
    {
      *(float *)v34.i32 = (float)(a7 / 255.0) * flt_248550700[m];
      int32x4_t v34 = vdupq_lane_s32(*(int32x2_t *)v34.i8, 0);
      *(int32x4_t *)&v50[2 * m] = v34;
    }
    *(float *)v36.i32 = -cbrtf(0.0037931);
    int32x4_t v52 = vdupq_lane_s32(v36, 0);
    int32x4_t v53 = v52;
    int32x4_t v54 = v52;
    return sub_248487344((uint64_t)v50, a3, a4);
  }
}

void sub_24848805C(_Unwind_Exception *a1)
{
}

void *sub_24848807C(void *result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (*(unsigned char *)(a2 + 64)) {
    goto LABEL_2;
  }
  if (a3 <= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a3;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = v9 - v10;
  if (v8)
  {
    if (v9 != v10)
    {
LABEL_16:
      long long v27 = 0u;
      long long v28 = 0u;
      int32x4_t v16 = sub_248488334((uint64_t **)a2, v9, v9, (uint64_t)&v27);
      uint64_t v17 = *((void *)&v28 + 1);
      *((void *)&v28 + 1) = 0;
      if (v17)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v17 - 24));
        free(*(void **)(v17 - 32));
      }
      int32x2_t v18 = (char *)*((void *)v16 + 1);
      if (v18)
      {
        do
        {
          float32x4_t v19 = v18;
          int32x2_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        unsigned int v20 = v16;
        do
        {
          float32x4_t v19 = (char *)*((void *)v20 + 2);
          BOOL v21 = *(void *)v19 == (void)v20;
          unsigned int v20 = v19;
        }
        while (!v21);
      }
      if (v19 != (char *)(a2 + 8))
      {
        unint64_t v22 = *((void *)v19 + 4) - *(void *)(a2 + 40);
        if (v22 < v7) {
          unint64_t v7 = v22;
        }
      }
      sub_2484106F0((size_t *)v16 + 6, v7);
      uint64_t v23 = *((void *)v16 + 8);
      if (v23) {
        unint64_t v24 = v7;
      }
      else {
        unint64_t v24 = 0;
      }
      *((void *)v16 + 6) = v24;
      *(unsigned char *)(a2 + 65) = 1;
      *((_DWORD *)v4 + 8) = 0;
      void *v4 = v23;
      v4[1] = v7;
      v4[2] = 0;
      v4[3] = a2;
      *(void *)&long long v28 = 0;
      *((void *)&v28 + 1) = a2;
      goto LABEL_36;
    }
    unint64_t v29 = v7;
    float32x4_t result = (void *)(*(uint64_t (**)(void, unint64_t *))(v8 + 8))(*(void *)v8, &v29);
    if (!v29 || (uint64_t v12 = result) == 0)
    {
      *(unsigned char *)(a2 + 64) = 1;
LABEL_2:
      *((_DWORD *)v4 + 8) = -1;
      return result;
    }
    if (v29 < a3)
    {
      (*(void (**)(void, void))(*(void *)(a2 + 72) + 16))(**(void **)(a2 + 72), 0);
      unint64_t v9 = *(void *)(a2 + 40);
      goto LABEL_16;
    }
    long long v27 = 0u;
    long long v28 = 0u;
    sub_248488334((uint64_t **)a2, *(void *)(a2 + 40), *(void *)(a2 + 40), (uint64_t)&v27);
    uint64_t v25 = *((void *)&v28 + 1);
    *((void *)&v28 + 1) = 0;
    if (v25)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v25 - 24));
      free(*(void **)(v25 - 32));
    }
    *(unsigned char *)(a2 + 65) = 1;
    unint64_t v26 = v29;
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = a2;
    *((_DWORD *)v4 + 8) = 0;
    void *v4 = v12;
    v4[1] = v26;
  }
  else
  {
    if (v11 + a3 >= **(void **)(a2 + 32)) {
      goto LABEL_16;
    }
    long long v27 = 0u;
    long long v28 = 0u;
    sub_248488334((uint64_t **)a2, v9, v9, (uint64_t)&v27);
    uint64_t v13 = *((void *)&v28 + 1);
    *((void *)&v28 + 1) = 0;
    if (v13)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v13 - 24));
      free(*(void **)(v13 - 32));
    }
    *(unsigned char *)(a2 + 65) = 1;
    uint64_t v14 = **(void **)(a2 + 24) + v11;
    uint64_t v15 = **(void **)(a2 + 32) - v11;
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = a2;
    *((_DWORD *)v4 + 8) = 0;
    void *v4 = v14;
    v4[1] = v15;
  }
  v4[2] = 0;
  v4[3] = a2;
LABEL_36:
  long long v27 = 0uLL;
  return sub_24845C478(&v27);
}

void sub_2484882F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a12 - 24));
    free(*(void **)(a12 - 32));
  }
  _Unwind_Resume(exception_object);
}

char *sub_248488334(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  unint64_t v7 = (char *)a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v9 = v7;
        unint64_t v10 = *((void *)v7 + 4);
        if (v10 <= a2) {
          break;
        }
        unint64_t v7 = *(char **)v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unint64_t v7 = (char *)*((void *)v9 + 1);
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v9 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v11 = v9;
    unint64_t v9 = (char *)operator new(0x48uLL);
    *((void *)v9 + 4) = a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a4;
    uint64_t v12 = *(void *)(a4 + 24);
    *((void *)v9 + 7) = *(void *)(a4 + 16);
    *((void *)v9 + 8) = v12;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    float32x4_t *v8 = (uint64_t *)v9;
    uint64_t v13 = (uint64_t *)**a1;
    uint64_t v14 = (uint64_t *)v9;
    if (v13)
    {
      *a1 = v13;
      uint64_t v14 = *v8;
    }
    sub_2484510EC(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_248488418(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2 && *(void *)(v2 + 24)) {
    (*(void (**)(void, void))(v2 + 32))(*(void *)v2, a1[5]);
  }
  a1[6] = a1[5];

  sub_248488474((uint64_t)a1);
}

void sub_248488474(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48);
  for (unint64_t i = *(void *)(a1 + 56); i < v2; unint64_t i = *(void *)(a1 + 56))
  {
    unint64_t v4 = *(size_t **)(a1 + 32);
    if (v4 && !*v4) {
      break;
    }
    uint64_t v5 = *(void **)a1;
    uint64_t v6 = *(void *)(*(void *)a1 + 32);
    unint64_t v7 = *(void *)(*(void *)a1 + 40) + v6;
    if (*(void *)(*(void *)a1 + 48))
    {
      uint64_t v8 = i - v6;
      if (v2 >= v7) {
        unint64_t v2 = v7;
      }
      size_t v9 = v2 - i;
      if (v4)
      {
        size_t v10 = *v4 >= v9 ? v2 - i : *v4;
        memcpy(**(void ***)(a1 + 24), (const void *)(v5[8] + v8), v10);
        uint64_t v11 = *(void **)(a1 + 24);
        **(void **)(a1 + 32) -= v10;
        *v11 += v10;
        *(void *)(a1 + 56) += v10;
      }
      else if ((sub_2484885C0(a1, (const void *)(v5[8] + v8), v9) & 1) == 0)
      {
        return;
      }
    }
    else
    {
      if (v2 >= v7) {
        unint64_t v2 = *(void *)(*(void *)a1 + 40) + v6;
      }
      *(void *)(a1 + 56) = v2;
      if (v4)
      {
        unint64_t v12 = v2 - i;
        **(void **)(a1 + 24) += v12;
        **(void **)(a1 + 32) -= v12;
      }
    }
    if (v7 == *(void *)(a1 + 56)) {
      sub_248488668((void **)a1, v5);
    }
    uint64_t v13 = *(void *)(a1 + 72);
    if (v13)
    {
      if (!*(void *)(v13 + 24)) {
        (*(void (**)(void, void))(v13 + 32))(*(void *)v13, *(void *)(a1 + 56));
      }
    }
    unint64_t v2 = *(void *)(a1 + 48);
  }
}

uint64_t sub_2484885C0(uint64_t a1, const void *a2, size_t a3)
{
  size_t v11 = a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(void, size_t *))(*(void *)(a1 + 72) + 8))(**(void **)(a1 + 72), &v11);
  if (v6) {
    BOOL v7 = v11 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  if (v7)
  {
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    if (v11 >= a3) {
      size_t v9 = a3;
    }
    else {
      size_t v9 = v11;
    }
    size_t v11 = v9;
    memcpy(v6, a2, v9);
    (*(void (**)(void, size_t))(*(void *)(a1 + 72) + 16))(**(void **)(a1 + 72), v11);
    *(void *)(a1 + 56) += v11;
  }
  return v8;
}

void sub_248488668(void **a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  if (v3)
  {
    do
    {
      unint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v4 = (void *)v5[2];
      BOOL v26 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v26);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v6 = a1[1];
  a1[2] = (char *)a1[2] - 1;
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = (void *)a2[1];
    if (!v8)
    {
      size_t v9 = a2;
      goto LABEL_17;
    }
    do
    {
      size_t v9 = v8;
      uint64_t v8 = (void *)*v8;
    }
    while (v8);
  }
  else
  {
    size_t v9 = a2;
  }
  uint64_t v7 = v9[1];
  if (v7)
  {
LABEL_17:
    int v10 = 0;
    *(void *)(v7 + 16) = v9[2];
    goto LABEL_18;
  }
  int v10 = 1;
LABEL_18:
  size_t v11 = (void *)v9[2];
  unint64_t v12 = (void *)*v11;
  if ((void *)*v11 == v9)
  {
    *size_t v11 = v7;
    if (v9 == v6)
    {
      unint64_t v12 = 0;
      uint64_t v6 = (void *)v7;
    }
    else
    {
      unint64_t v12 = (void *)v11[1];
    }
  }
  else
  {
    v11[1] = v7;
  }
  int v13 = *((unsigned __int8 *)v9 + 24);
  if (v9 != a2)
  {
    uint64_t v14 = a2[2];
    v9[2] = v14;
    *(void *)(v14 + 8 * (*(void *)a2[2] != (void)a2)) = v9;
    uint64_t v16 = *a2;
    uint64_t v15 = a2[1];
    *(void *)(v16 + 16) = v9;
    *size_t v9 = v16;
    v9[1] = v15;
    if (v15) {
      *(void *)(v15 + 16) = v9;
    }
    *((unsigned char *)v9 + 24) = *((unsigned char *)a2 + 24);
    if (v6 == a2) {
      uint64_t v6 = v9;
    }
  }
  if (!v13 || !v6) {
    goto LABEL_82;
  }
  if (!v10)
  {
    *(unsigned char *)(v7 + 24) = 1;
    goto LABEL_82;
  }
  while (1)
  {
    uint64_t v17 = v12[2];
    if (*(void **)v17 != v12) {
      break;
    }
    if (!*((unsigned char *)v12 + 24))
    {
      *((unsigned char *)v12 + 24) = 1;
      *(unsigned char *)(v17 + 24) = 0;
      uint64_t v23 = v12[1];
      *(void *)uint64_t v17 = v23;
      if (v23) {
        *(void *)(v23 + 16) = v17;
      }
      void v12[2] = *(void *)(v17 + 16);
      *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v12;
      v12[1] = v17;
      *(void *)(v17 + 16) = v12;
      if (v6 == (void *)v17) {
        uint64_t v6 = v12;
      }
      unint64_t v12 = *(void **)v17;
    }
    unint64_t v24 = (unsigned char *)*v12;
    if (*v12 && !v24[24]) {
      goto LABEL_77;
    }
    uint64_t v25 = (uint64_t *)v12[1];
    if (v25 && !*((unsigned char *)v25 + 24))
    {
      if (v24 && !v24[24])
      {
LABEL_77:
        uint64_t v25 = v12;
      }
      else
      {
        *((unsigned char *)v25 + 24) = 1;
        *((unsigned char *)v12 + 24) = 0;
        uint64_t v31 = *v25;
        v12[1] = *v25;
        if (v31) {
          *(void *)(v31 + 16) = v12;
        }
        v25[2] = v12[2];
        *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v25;
        *uint64_t v25 = (uint64_t)v12;
        void v12[2] = v25;
        unint64_t v24 = v12;
      }
      uint64_t v28 = v25[2];
      *((unsigned char *)v25 + 24) = *(unsigned char *)(v28 + 24);
      *(unsigned char *)(v28 + 24) = 1;
      v24[24] = 1;
      unint64_t v29 = *(uint64_t **)v28;
      uint64_t v32 = *(void *)(*(void *)v28 + 8);
      *(void *)uint64_t v28 = v32;
      if (v32) {
        *(void *)(v32 + 16) = v28;
      }
      v29[2] = *(void *)(v28 + 16);
      *(void *)(*(void *)(v28 + 16) + 8 * (**(void **)(v28 + 16) != v28)) = v29;
      v29[1] = v28;
      goto LABEL_81;
    }
    *((unsigned char *)v12 + 24) = 0;
    unint64_t v22 = (unsigned char *)v12[2];
    if (v22[24]) {
      BOOL v26 = v22 == (unsigned char *)v6;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_62;
    }
LABEL_59:
    unint64_t v12 = *(void **)(*((void *)v22 + 2) + 8 * (**((void **)v22 + 2) == (void)v22));
  }
  if (!*((unsigned char *)v12 + 24))
  {
    *((unsigned char *)v12 + 24) = 1;
    *(unsigned char *)(v17 + 24) = 0;
    int32x2_t v18 = *(uint64_t **)(v17 + 8);
    uint64_t v19 = *v18;
    *(void *)(v17 + 8) = *v18;
    if (v19) {
      *(void *)(v19 + 16) = v17;
    }
    v18[2] = *(void *)(v17 + 16);
    *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v18;
    *int32x2_t v18 = v17;
    *(void *)(v17 + 16) = v18;
    if (v6 == (void *)*v12) {
      uint64_t v6 = v12;
    }
    unint64_t v12 = *(void **)(*v12 + 8);
  }
  unsigned int v20 = (void *)*v12;
  if (!*v12 || *((unsigned char *)v20 + 24))
  {
    BOOL v21 = (void *)v12[1];
    if (v21 && !*((unsigned char *)v21 + 24)) {
      goto LABEL_68;
    }
    *((unsigned char *)v12 + 24) = 0;
    unint64_t v22 = (unsigned char *)v12[2];
    if (v22 == (unsigned char *)v6)
    {
      unint64_t v22 = v6;
LABEL_62:
      v22[24] = 1;
      goto LABEL_82;
    }
    if (!v22[24]) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  BOOL v21 = (void *)v12[1];
  if (v21 && !*((unsigned char *)v21 + 24))
  {
LABEL_68:
    unsigned int v20 = v12;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v12 + 24) = 0;
    uint64_t v27 = v20[1];
    void *v12 = v27;
    if (v27) {
      *(void *)(v27 + 16) = v12;
    }
    void v20[2] = v12[2];
    *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v20;
    v20[1] = v12;
    void v12[2] = v20;
    BOOL v21 = v12;
  }
  uint64_t v28 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v28 + 24);
  *(unsigned char *)(v28 + 24) = 1;
  *((unsigned char *)v21 + 24) = 1;
  unint64_t v29 = *(uint64_t **)(v28 + 8);
  uint64_t v30 = *v29;
  *(void *)(v28 + 8) = *v29;
  if (v30) {
    *(void *)(v30 + 16) = v28;
  }
  v29[2] = *(void *)(v28 + 16);
  *(void *)(*(void *)(v28 + 16) + 8 * (**(void **)(v28 + 16) != v28)) = v29;
  *unint64_t v29 = v28;
LABEL_81:
  *(void *)(v28 + 16) = v29;
LABEL_82:
  sub_2483E8DDC(a2 + 8);

  operator delete(a2);
}

uint64_t sub_248488A74(uint64_t a1, uint64_t a2, int a3, int8x8_t *a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = a2 + 16;
  unsigned int v6 = a2 + 8;
  if (a3) {
    unsigned int v6 = 1;
  }
  else {
    unint64_t v5 = a2 + 8;
  }
  a4->i32[0] = bswap32(v6);
  do
  {
    a4->i8[v4 + 4] = *(unsigned char *)(a1 + v4);
    ++v4;
  }
  while (v4 != 4);
  if (!a3) {
    return 8;
  }
  uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v5);
  a4[1] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2484DCEE0), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2484DCED0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2484DCF00), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2484DCEF0))));
  return 16;
}

uint64_t JxlEncoderVersion()
{
  return 10002;
}

uint64_t sub_248488B10(uint64_t a1)
{
  unint64_t v493 = 0;
  uint64_t v494 = 0;
  uint64_t v495 = 0;
  unint64_t v2 = *(unint64_t **)(a1 + 80);
  if (*(unsigned char *)(a1 + 2864)) {
    goto LABEL_2;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v492 = 0;
  int v30 = sub_24848BF18(a1, (uint64_t)__p);
  int v31 = *(_DWORD *)(a1 + 300);
  if (v31 == -1)
  {
    *(_DWORD *)(a1 + 300) = v30;
    int v31 = v30;
  }
  BOOL v32 = v31 != 5 || v30 == 5;
  if (!v32 || v30 == -1)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    uint64_t v34 = 1;
    int v35 = 1;
    goto LABEL_120;
  }
  if (*v2) {
    uint64_t v33 = *(void *)(*v2 + 768);
  }
  else {
    uint64_t v33 = 0;
  }
  double v490 = 0;
  long long v488 = 0u;
  long long v489 = 0u;
  v476[2] = 0;
  LOBYTE(v477) = 0;
  *(_OWORD *)double v476 = xmmword_2484DCF10;
  sub_2484106F0((size_t *)&v488 + 1, 2uLL);
  int v478 = v490;
  *((void *)&v488 + 1) = 2 * (*((void *)&v489 + 1) != 0);
  double v490 = v476;
  **((void **)&v489 + 1) = **((unsigned char **)&v489 + 1) | 0xFFLL;
  char v72 = v488;
  *(void *)&long long v488 = v488 + 8;
  *(void *)(*((void *)&v489 + 1) + ((unint64_t)v488 >> 3)) = (10 << (v72 & 7)) | *(unsigned __int8 *)(*((void *)&v489 + 1) + ((unint64_t)v488 >> 3));
  *(void *)&long long v488 = v488 + 8;
  sub_2484195C0((uint64_t)v476, &v488, 0, v33);
  if (sub_2484DA1C4(a1 + 728, &v488, 0, v33)) {
    goto LABEL_116;
  }
  if (sub_2484DA1C4(a1 + 304, &v488, 0, v33)) {
    goto LABEL_116;
  }
  *(unsigned char *)(a1 + 768) = *(unsigned char *)(a1 + 345);
  if (sub_2484DA1C4(a1 + 760, &v488, 0, v33)) {
    goto LABEL_116;
  }
  if (!*(unsigned char *)(a1 + 361)) {
    goto LABEL_798;
  }
  uint64_t v114 = *(void *)(a1 + 384);
  uint64_t v113 = *(void *)(a1 + 392);
  uint64_t v115 = v114 - v113;
  if (v114 == v113) {
    goto LABEL_116;
  }
  v507[0] = 0;
  v507[1] = 0;
  uint64_t v508 = 0;
  unint64_t v116 = v113 - v114;
  memset(v476, 0, sizeof(v476));
  unint64_t v496 = 0;
  int64x2_t v497 = 0uLL;
  if ((unint64_t)(v113 - v114) >> 30)
  {
    int v117 = 1;
    goto LABEL_759;
  }
  uint64_t v473 = v114;
  sub_2484106F0((size_t *)v507, 9uLL);
  uint64_t v123 = 0;
  uint64_t v124 = v508;
  uint64_t v125 = 9;
  if (!v508) {
    uint64_t v125 = 0;
  }
  v507[0] = (void *)v125;
  LOBYTE(v125) = v116;
  if (v116 >= 0x80)
  {
    uint64_t v126 = 0;
    unint64_t v127 = v116;
    do
    {
      uint64_t v123 = v126 + 1;
      *(unsigned char *)(v124 + v126) = v127 | 0x80;
      uint64_t v125 = v127 >> 7;
      unint64_t v128 = v127 >> 14;
      ++v126;
      v127 >>= 7;
    }
    while (v128);
  }
  uint64_t v129 = (char *)(v123 + 1);
  *(unsigned char *)(v124 + v123) = v125;
  sub_2484106F0((size_t *)v507, v123 + 1);
  if (v508) {
    uint64_t v130 = v129;
  }
  else {
    uint64_t v130 = 0;
  }
  v507[0] = v130;
  unint64_t v503 = 0;
  int64x2_t v504 = 0uLL;
  sub_2484106F0(&v503, 0x80uLL);
  int v131 = (_OWORD *)v504.i64[1];
  unint64_t v503 = 128;
  *(_OWORD *)(v504.i64[1] + 64) = xmmword_24854D048;
  v131[5] = unk_24854D058;
  v131[6] = xmmword_24854D068;
  v131[7] = unk_24854D078;
  *int v131 = xmmword_24854D008;
  v131[1] = *(_OWORD *)"RGB XYZ ";
  v131[2] = xmmword_24854D028;
  v131[3] = unk_24854D038;
  unsigned int v132 = bswap32(v116);
  if (v116 >= 0x80) {
    uint64_t v133 = 128;
  }
  else {
    uint64_t v133 = v116;
  }
  *(_DWORD *)int v131 = v132;
  if (v133)
  {
    for (uint64_t i = 0; i != v133; ++i)
    {
      sub_24841F2F4((unsigned char *)v473, v116, (uint64_t)v131, i);
      sub_24841DD6C(&v496, *(unsigned char *)(v473 + i) - *((unsigned char *)v131 + i));
    }
  }
  if (v116 < 0x81)
  {
    sub_2484106F0((size_t *)v507, (unint64_t)(v130 + 9));
    if (v508) {
      uint64_t v135 = v130 + 9;
    }
    else {
      uint64_t v135 = 0;
    }
    v507[0] = v135;
    v130[v508] = 0;
    sub_2484106F0((size_t *)v507, (unint64_t)(v130 + 1));
    if (v508) {
      unint64_t v136 = v130 + 1;
    }
    else {
      unint64_t v136 = 0;
    }
    v507[0] = v136;
    unint64_t v137 = v496;
    if (v496)
    {
      uint64_t v138 = (char *)v497.i64[1];
      do
      {
        char v139 = *v138++;
        sub_24841DD6C((size_t *)v507, v139);
        --v137;
      }
      while (v137);
    }
    int v117 = 0;
    goto LABEL_755;
  }
  uint64_t v440 = v115;
  unint64_t v146 = v116;
  char v147 = 0;
  uint64_t v444 = 0;
  long long v445 = 0;
  double v517 = 0;
  uint64_t v518 = 0;
  unint64_t v515 = 128;
  int v516 = (const void **)&v517;
  unint64_t v475 = v146;
  if (v146 >= 0x84)
  {
    unsigned int v148 = *(_DWORD *)(v473 + 128);
    unint64_t v515 = 132;
    sub_2484106F0((size_t *)v476, 9uLL);
    unint64_t v149 = bswap32(v148);
    unint64_t v150 = v149 + 1;
    uint64_t v151 = v476[2];
    uint64_t v152 = 9;
    if (!v476[2]) {
      uint64_t v152 = 0;
    }
    v476[0] = (void *)v152;
    unint64_t v441 = v149;
    if (v149 < 0x7F)
    {
      uint64_t v154 = 0;
      LOBYTE(v155) = v149 + 1;
    }
    else
    {
      uint64_t v153 = 0;
      do
      {
        uint64_t v154 = v153 + 1;
        v151[v153] = v150 | 0x80;
        unint64_t v155 = v150 >> 7;
        unint64_t v156 = v150 >> 14;
        ++v153;
        v150 >>= 7;
      }
      while (v156);
    }
    unint64_t v193 = (void *)(v154 + 1);
    v151[v154] = v155;
    sub_2484106F0((size_t *)v476, v154 + 1);
    if (v476[2]) {
      double v194 = v193;
    }
    else {
      double v194 = 0;
    }
    v476[0] = v194;
    if (v148)
    {
      unint64_t v195 = 0;
      char v147 = 0;
      uint64_t v196 = 0;
      unint64_t v457 = 0;
      unint64_t v460 = 0;
      uint64_t v444 = 0;
      long long v445 = 0;
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      unsigned int v199 = 0;
      uint64_t v200 = 0;
      uint64_t v201 = 12 * v441 + 128;
      while (1)
      {
        uint64_t v463 = v200;
        if (v515 + 12 > v475) {
          goto LABEL_500;
        }
        int v202 = 538976288;
        if (v515 + 4 <= v475) {
          int v202 = *(_DWORD *)(v473 + v515);
        }
        LODWORD(v512) = v202;
        if (v515 + 8 <= v475)
        {
          uint64_t v204 = v473;
          unsigned int v203 = bswap32(*(_DWORD *)(v473 + v515 + 4));
        }
        else
        {
          unsigned int v203 = 0;
          uint64_t v204 = v473;
        }
        unsigned int v466 = *(_DWORD *)(v204 + v515 + 8);
        v515 += 12;
        unsigned int v454 = v199;
        uint64_t v449 = v201;
        if ((unint64_t)v198 >= v195)
        {
          double v451 = v147;
          uint64_t v205 = v198 - v445;
          unint64_t v206 = v205 + 1;
          if ((unint64_t)(v205 + 1) >> 62) {
            sub_2483E92E8();
          }
          if ((uint64_t)(v195 - (void)v445) >> 1 > v206) {
            unint64_t v206 = (uint64_t)(v195 - (void)v445) >> 1;
          }
          if (v195 - (unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v207 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v207 = v206;
          }
          if (v207)
          {
            if (v207 >> 62) {
              sub_2483E9338();
            }
            unint64_t v208 = (char *)operator new(4 * v207);
          }
          else
          {
            unint64_t v208 = 0;
          }
          uint64_t v209 = (int *)&v208[4 * v205];
          *uint64_t v209 = v202;
          uint64_t v210 = v209 + 1;
          if (v198 != v445)
          {
            do
            {
              int v211 = *--v198;
              *--uint64_t v209 = v211;
            }
            while (v198 != v445);
            uint64_t v198 = v445;
          }
          long long v445 = v209;
          long long v446 = &v208[4 * v207];
          if (v198) {
            operator delete(v198);
          }
          uint64_t v198 = v210;
          char v147 = v451;
        }
        else
        {
          long long v446 = (char *)v195;
          *v198++ = v202;
        }
        unint64_t v212 = v203;
        unsigned int v442 = v203;
        if ((unint64_t)v196 >= v460)
        {
          uint64_t v213 = (v196 - v147) >> 3;
          unint64_t v214 = v213 + 1;
          if ((unint64_t)(v213 + 1) >> 61) {
            sub_2483E92E8();
          }
          if ((uint64_t)(v460 - (void)v147) >> 2 > v214) {
            unint64_t v214 = (uint64_t)(v460 - (void)v147) >> 2;
          }
          if (v460 - (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v215 = v214;
          }
          if (v215) {
            unint64_t v215 = (unint64_t)sub_2483F04AC(v215);
          }
          else {
            uint64_t v216 = 0;
          }
          uint64_t v217 = (char *)(v215 + 8 * v213);
          *(void *)uint64_t v217 = v212;
          unint64_t v218 = v217 + 8;
          while (v196 != v147)
          {
            uint64_t v219 = *((void *)v196 - 1);
            v196 -= 8;
            *((void *)v217 - 1) = v219;
            v217 -= 8;
          }
          unint64_t v460 = v215 + 8 * v216;
          if (v147) {
            operator delete(v147);
          }
          char v147 = v217;
          uint64_t v196 = v218;
        }
        else
        {
          *(void *)uint64_t v196 = v203;
          v196 += 8;
        }
        unint64_t v220 = bswap32(v466);
        unint64_t v470 = v220;
        long long v452 = v147;
        if ((unint64_t)v197 >= v457)
        {
          uint64_t v221 = (v197 - v444) >> 3;
          unint64_t v222 = v221 + 1;
          if ((unint64_t)(v221 + 1) >> 61) {
            sub_2483E92E8();
          }
          if ((uint64_t)(v457 - (void)v444) >> 2 > v222) {
            unint64_t v222 = (uint64_t)(v457 - (void)v444) >> 2;
          }
          if (v457 - (unint64_t)v444 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v223 = v222;
          }
          if (v223) {
            unint64_t v223 = (unint64_t)sub_2483F04AC(v223);
          }
          else {
            uint64_t v224 = 0;
          }
          unint64_t v225 = (char *)(v223 + 8 * v221);
          *(void *)unint64_t v225 = v470;
          unint64_t v226 = v225 + 8;
          if (v197 == v444)
          {
            unint64_t v227 = v444;
          }
          else
          {
            unint64_t v227 = v444;
            do
            {
              uint64_t v228 = *((void *)v197 - 1);
              v197 -= 8;
              *((void *)v225 - 1) = v228;
              v225 -= 8;
            }
            while (v197 != v444);
          }
          unint64_t v457 = v223 + 8 * v224;
          if (v227) {
            operator delete(v227);
          }
          uint64_t v444 = v225;
          uint64_t v197 = v226;
        }
        else
        {
          *(void *)uint64_t v197 = v220;
          v197 += 8;
        }
        uint64_t v229 = v517;
        unint64_t v230 = &v517;
LABEL_396:
        unint64_t v231 = v230;
        if (v229)
        {
          while (1)
          {
            unint64_t v230 = (uint64_t **)v229;
            unint64_t v232 = v229[4];
            if (v232 > v212)
            {
              uint64_t v229 = *v230;
              goto LABEL_396;
            }
            if (v232 >= v212) {
              break;
            }
            uint64_t v229 = v230[1];
            if (!v229)
            {
              unint64_t v231 = v230 + 1;
              goto LABEL_403;
            }
          }
          BOOL v233 = (uint64_t *)v230;
        }
        else
        {
LABEL_403:
          BOOL v233 = (uint64_t *)operator new(0x30uLL);
          v233[4] = v212;
          v233[5] = 0;
          *BOOL v233 = 0;
          v233[1] = 0;
          v233[2] = (uint64_t)v230;
          *unint64_t v231 = v233;
          long long v234 = v233;
          if (*v516)
          {
            int v516 = (const void **)*v516;
            long long v234 = *v231;
          }
          sub_2484510EC(v517, v234);
          ++v518;
        }
        uint64_t v235 = 0;
        v233[5] = v198 - v445 - 1;
        while (v512 != *(_DWORD *)*(&off_26523BDE0 + v235))
        {
          if (++v235 == 17)
          {
            char v236 = 1;
            goto LABEL_411;
          }
        }
        char v236 = v235 + 4;
LABEL_411:
        if (v512 == 1129469042)
        {
          if (v515 + 24 >= v475) {
            goto LABEL_459;
          }
          int v237 = 538976288;
          if (v515 + 4 <= v475) {
            int v237 = *(_DWORD *)(v473 + v515);
          }
          if (v515 + 16 > v475 || v237 != 1129469031 || *(_DWORD *)(v515 + v473 + 12) != 1129469026) {
            goto LABEL_459;
          }
          uint64_t v238 = 0;
          unint64_t v239 = v473 + v515;
          char v240 = 1;
          do
          {
            int v241 = *(unsigned __int8 *)(v239 + v238 - 8);
            if (v241 != *(unsigned __int8 *)(v239 + v238 + 4) || v241 != *(unsigned __int8 *)(v239 + v238 + 16)) {
              char v240 = 0;
            }
            ++v238;
          }
          while (v238 != 8);
          if (v240)
          {
            v515 += 24;
            v463 += 2;
            char v236 = 2;
          }
        }
        if (v512 == 1515804786 && v515 + 24 < v475)
        {
          int v243 = 538976288;
          if (v515 + 4 <= v475) {
            int v243 = *(_DWORD *)(v473 + v515);
          }
          int v244 = 538976288;
          if (v515 + 16 <= v475) {
            int v244 = *(_DWORD *)(v515 + v473 + 12);
          }
          BOOL v246 = v243 == 1515804775 && v244 == 1515804770;
          if (v515 + 8 <= v475) {
            unsigned int v247 = bswap32(*(_DWORD *)(v473 + v515 + 4));
          }
          else {
            unsigned int v247 = 0;
          }
          if (v515 + 20 <= v475) {
            unsigned int v248 = bswap32(*(_DWORD *)(v473 + v515 + 16));
          }
          else {
            unsigned int v248 = 0;
          }
          if (v515 + 12 <= v475) {
            unsigned int v249 = bswap32(*(_DWORD *)(v473 + v515 + 8));
          }
          else {
            unsigned int v249 = 0;
          }
          if (v515 + 24 <= v475) {
            unsigned int v250 = bswap32(*(_DWORD *)(v473 + v515 + 20));
          }
          else {
            unsigned int v250 = 0;
          }
          if (v466 != 335544320) {
            BOOL v246 = 0;
          }
          if (v248 == v442 + 40 && v247 == v442 + 20 && v246 && v249 == 20 && v250 == 20)
          {
            v515 += 24;
            v463 += 2;
            char v236 = 3;
          }
        }
LABEL_459:
        uint64_t v251 = v454;
        uint64_t v467 = v212;
        if (v449 + v454 == v212) {
          char v252 = v236;
        }
        else {
          char v252 = v236 | 0x40;
        }
        int v253 = (int)v512;
        if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v512), (int32x4_t)xmmword_2484DCF20))) & 1 | (v512 == 1515804775) | ((v512 & 0xFFFFFFEF) == 1515804770)) {
          uint64_t v251 = 20;
        }
        if (v251 == v470) {
          char v254 = v252;
        }
        else {
          char v254 = v252 | 0x80;
        }
        sub_24841DD6C((size_t *)v476, v254);
        if (v236 == 1)
        {
          unint64_t v255 = v496;
          char v256 = (void **)(v496 + 4);
          sub_2484106F0(&v496, v496 + 4);
          if (v497.i64[1]) {
            size_t v257 = v256;
          }
          else {
            size_t v257 = 0;
          }
          unint64_t v496 = (unint64_t)v257;
          *(_DWORD *)(v497.i64[1] + v255) = v253;
        }
        int v258 = v254;
        if ((v254 & 0x40) != 0)
        {
          unint64_t v259 = (char *)v476[0];
          size_t v260 = (char *)v476[0] + 9;
          sub_2484106F0((size_t *)v476, (unint64_t)v476[0] + 9);
          unint64_t v261 = v476[2];
          if (v476[2]) {
            unint64_t v262 = v260;
          }
          else {
            unint64_t v262 = 0;
          }
          v476[0] = v262;
          if (v442 < 0x80)
          {
            LOBYTE(v265) = v467;
            int v264 = v259;
          }
          else
          {
            unint64_t v263 = v467;
            do
            {
              int v264 = v259 + 1;
              v259[(void)v261] = v263 | 0x80;
              unint64_t v265 = v263 >> 7;
              unint64_t v266 = v263 >> 14;
              ++v259;
              v263 >>= 7;
            }
            while (v266);
          }
          unint64_t v267 = v264 + 1;
          v264[(void)v261] = v265;
          sub_2484106F0((size_t *)v476, (unint64_t)(v264 + 1));
          if (v476[2]) {
            unint64_t v268 = v267;
          }
          else {
            unint64_t v268 = 0;
          }
          v476[0] = v268;
        }
        uint64_t v201 = v467;
        if (v258 < 0)
        {
          unint64_t v269 = (char *)v476[0];
          unint64_t v270 = (char *)v476[0] + 9;
          sub_2484106F0((size_t *)v476, (unint64_t)v476[0] + 9);
          uint64_t v271 = v476[2];
          if (v476[2]) {
            uint64_t v272 = v270;
          }
          else {
            uint64_t v272 = 0;
          }
          v476[0] = v272;
          unint64_t v273 = v470;
          if (v470 < 0x80)
          {
            LOBYTE(v275) = v470;
            uint64_t v274 = v269;
          }
          else
          {
            do
            {
              uint64_t v274 = v269 + 1;
              v269[(void)v271] = v273 | 0x80;
              unint64_t v275 = v273 >> 7;
              unint64_t v276 = v273 >> 14;
              ++v269;
              v273 >>= 7;
            }
            while (v276);
          }
          uint64_t v277 = v274 + 1;
          v274[(void)v271] = v275;
          sub_2484106F0((size_t *)v476, (unint64_t)(v274 + 1));
          if (v476[2]) {
            uint64_t v278 = v277;
          }
          else {
            uint64_t v278 = 0;
          }
          v476[0] = v278;
          uint64_t v201 = v467;
        }
        uint64_t v200 = v463 + 1;
        unsigned int v199 = v470;
        char v147 = v452;
        unint64_t v195 = (unint64_t)v446;
        if (v463 + 1 >= v441) {
          goto LABEL_500;
        }
      }
    }
    char v147 = 0;
    uint64_t v444 = 0;
    long long v445 = 0;
  }
LABEL_500:
  long long v453 = v147;
  sub_24841DD6C((size_t *)v476, 0);
  unsigned int v279 = 0;
  int v280 = 0;
  int v281 = 0;
  int v282 = 0;
  unint64_t v447 = 0;
  unint64_t v450 = 0;
  uint64_t v471 = 0;
  unint64_t v468 = v515;
  do
  {
    unint64_t v283 = v515;
    if (v515 > v475)
    {
      uint64_t v381 = (char *)v476[0];
      unint64_t v382 = (char *)v507[0];
      sub_2484106F0((size_t *)v507, (unint64_t)v507[0] + 9);
      uint64_t v383 = v508;
      if (v508) {
        double v384 = v382 + 9;
      }
      else {
        double v384 = 0;
      }
      v507[0] = v384;
      if ((unint64_t)v381 < 0x80)
      {
        LOBYTE(v387) = (_BYTE)v381;
        uint64_t v386 = v382;
      }
      else
      {
        unint64_t v385 = (unint64_t)v381;
        do
        {
          uint64_t v386 = v382 + 1;
          v382[v383] = v385 | 0x80;
          unint64_t v387 = v385 >> 7;
          unint64_t v388 = v385 >> 14;
          ++v382;
          v385 >>= 7;
        }
        while (v388);
      }
      unint64_t v389 = v386 + 1;
      v386[v383] = v387;
      sub_2484106F0((size_t *)v507, (unint64_t)(v386 + 1));
      if (v508) {
        unint64_t v390 = v389;
      }
      else {
        unint64_t v390 = 0;
      }
      v507[0] = v390;
      if (v381)
      {
        uint64_t v391 = (char *)v476[2];
        do
        {
          char v392 = *v391++;
          sub_24841DD6C((size_t *)v507, v392);
          --v381;
        }
        while (v381);
      }
      unint64_t v393 = v496;
      if (v496)
      {
        double v394 = (char *)v497.i64[1];
        do
        {
          char v395 = *v394++;
          sub_24841DD6C((size_t *)v507, v395);
          --v393;
        }
        while (v393);
      }
      unsigned int v442 = 0;
      break;
    }
    int v512 = 0;
    uint64_t v513 = 0;
    if (v515 > v471 + v450) {
      unsigned int v284 = 0;
    }
    else {
      unsigned int v284 = v279;
    }
    uint64_t v514 = 0;
    if (v515 > v471 + v450) {
      int v285 = 0;
    }
    else {
      int v285 = v280;
    }
    if (v515 > v471 + v450) {
      int v286 = 0;
    }
    else {
      int v286 = v281;
    }
    if (v515 > v471 + v450) {
      int v287 = 0;
    }
    else {
      int v287 = v282;
    }
    v510[0] = 0;
    v510[1] = 0;
    long double v511 = 0;
    if (v450 <= 0x3FFFFFFE)
    {
      unsigned int v279 = v284;
      int v280 = v285;
      int v281 = v286;
      int v282 = v287;
    }
    uint64_t v288 = v517;
    if (!v517) {
      goto LABEL_563;
    }
    __int32 v289 = v517;
    while (1)
    {
      unint64_t v290 = v289[4];
      if (v515 >= v290) {
        break;
      }
LABEL_521:
      __int32 v289 = (uint64_t *)*v289;
      if (!v289) {
        goto LABEL_563;
      }
    }
    if (v290 < v515)
    {
      ++v289;
      goto LABEL_521;
    }
    unint64_t v291 = v515 + 4;
    if (v515 + 4 > v475) {
      goto LABEL_563;
    }
    do
    {
      while (1)
      {
        long long v292 = v288;
        unint64_t v293 = v288[4];
        if (v515 >= v293) {
          break;
        }
        uint64_t v288 = (uint64_t *)*v292;
        if (!*v292)
        {
          unint64_t v294 = (uint64_t **)v292;
          goto LABEL_530;
        }
      }
      if (v293 >= v515)
      {
        unint64_t v297 = v515;
        unint64_t v295 = v292;
        goto LABEL_534;
      }
      uint64_t v288 = (uint64_t *)v292[1];
    }
    while (v288);
    unint64_t v294 = (uint64_t **)(v292 + 1);
LABEL_530:
    unint64_t v295 = (uint64_t *)operator new(0x30uLL);
    v295[4] = v283;
    v295[5] = 0;
    *unint64_t v295 = 0;
    v295[1] = 0;
    v295[2] = (uint64_t)v292;
    *unint64_t v294 = v295;
    unint64_t v296 = v295;
    if (*v516)
    {
      int v516 = (const void **)*v516;
      unint64_t v296 = *v294;
    }
    sub_2484510EC(v517, v296);
    ++v518;
    unint64_t v297 = v515;
    unint64_t v291 = v515 + 4;
LABEL_534:
    unsigned int v298 = 538976288;
    if (v291 <= v475) {
      unsigned int v298 = *(_DWORD *)(v473 + v297);
    }
    uint64_t v299 = v295[5];
    int v281 = BYTE1(v298);
    int v464 = BYTE2(v298);
    unsigned int v461 = HIBYTE(v298);
    uint64_t v471 = *(void *)&v147[8 * v299];
    unint64_t v450 = *(void *)&v444[8 * v299];
    unint64_t v300 = v450 - 9;
    if (v298 == 1668639853 && v300 < 0x3FFFFFF6)
    {
      if (v297 + v450 > v475
        || *(unsigned char *)(v473 + v291)
        || *(unsigned char *)(v297 + v473 + 5)
        || *(unsigned char *)(v297 + v473 + 6)
        || *(unsigned char *)(v297 + v473 + 7))
      {
        int v282 = 109;
        goto LABEL_561;
      }
      sub_24841DD6C((size_t *)&v512, 19);
      v297 += 8;
      unint64_t v515 = v297;
      sub_24841DD6C((size_t *)&v512, 2);
      sub_2484721D8(v450 - 8, (size_t *)&v512);
      unint64_t v301 = v450 - 8;
      do
      {
        sub_24841DD6C(v510, *(unsigned char *)(v473 + v297++));
        --v301;
      }
      while (v301);
      unint64_t v515 = v297;
      sub_24847227C((uint64_t)v511, v450 - 8, 2uLL);
    }
    int v282 = v298;
    if (v298 != 1987212643 || v300 >= 0x3FFFFFF6) {
      goto LABEL_561;
    }
    char v147 = v453;
    if (v297 + v450 > v475 || *(unsigned char *)(v297 + v473 + 4))
    {
      int v282 = 99;
      goto LABEL_562;
    }
    if (*(unsigned char *)(v297 + v473 + 5)
      || *(unsigned char *)(v297 + v473 + 6)
      || *(unsigned char *)(v297 + v473 + 7)
      || v450 - 25 > 0xFFFFFEE)
    {
      int v282 = 99;
LABEL_561:
      char v147 = v453;
LABEL_562:
      int v280 = BYTE2(v298);
      unsigned int v279 = HIBYTE(v298);
      goto LABEL_563;
    }
    if (v297)
    {
      unint64_t v302 = v450 - 8;
      if (v297 + v450 - 8 <= v475)
      {
        sub_24841DD6C((size_t *)&v512, 21);
        unint64_t v515 = v297 + 8;
        sub_24841DD6C((size_t *)&v512, 4);
        sub_24841DD6C((size_t *)&v512, 5);
        sub_2484721D8(v302, (size_t *)&v512);
        unsigned int v442 = sub_24847234C(2uLL, 2uLL, 1, v302, v473, v475, (uint64_t *)&v515, v510);
        int v458 = 99;
        if (v442)
        {
          char v303 = 0;
          char v147 = v453;
          goto LABEL_657;
        }
        unsigned int v442 = 0;
      }
    }
    char v147 = v453;
    int v280 = BYTE2(v298);
    unsigned int v279 = HIBYTE(v298);
    int v282 = 99;
LABEL_563:
    int v455 = v281;
    int v458 = v282;
    int v304 = (v279 << 24) | (v280 << 16) | (v281 << 8) | v282;
    BOOL v305 = v304 == 541213037 || v304 == 541147757;
    int v464 = v280;
    unsigned int v461 = v279;
    if (v305)
    {
      unint64_t v306 = v515;
      unint64_t v307 = v515 + 4;
      int v308 = 538976288;
      if (v515 + 4 <= v475) {
        int v308 = *(_DWORD *)(v473 + v515);
      }
      unint64_t v309 = v515 + 12;
      if (v515 + 12 < v475 && (v308 == 1987212643 || v308 == 1952932726))
      {
        if (v515 + 8 <= v475)
        {
          if (*(_DWORD *)(v473 + v307)) {
            BOOL v310 = 1;
          }
          else {
            BOOL v310 = v309 > v475;
          }
          if (!v310) {
            goto LABEL_580;
          }
        }
        else
        {
          if (v309 > v475) {
            goto LABEL_585;
          }
LABEL_580:
          unint64_t v311 = 2 * bswap32(*(_DWORD *)(v473 + v515 + 8));
          if ((v311 - 17) <= 0xFFFFFEE && v309 + v311 <= v475)
          {
            v515 += 12;
            sub_24841DD6C((size_t *)&v512, 4);
            sub_24841DD6C((size_t *)&v512, 5);
            uint64_t v336 = v512;
            sub_2484106F0((size_t *)&v512, (unint64_t)v512 + 9);
            long long v337 = v514;
            if (v514) {
              uint64_t v338 = (void **)((char *)v336 + 9);
            }
            else {
              uint64_t v338 = 0;
            }
            int v512 = v338;
            if (v311 < 0x80)
            {
              LOBYTE(v341) = v311;
              long long v340 = v336;
            }
            else
            {
              unint64_t v339 = v311;
              do
              {
                long long v340 = (void **)((char *)v336 + 1);
                *((unsigned char *)v336 + (void)v337) = v339 | 0x80;
                unint64_t v341 = v339 >> 7;
                unint64_t v342 = v339 >> 14;
                uint64_t v336 = (void **)((char *)v336 + 1);
                v339 >>= 7;
              }
              while (v342);
            }
            uint64_t v343 = (void **)((char *)v340 + 1);
            *((unsigned char *)v340 + (void)v337) = v341;
            sub_2484106F0((size_t *)&v512, (unint64_t)v340 + 1);
            if (v514) {
              unint64_t v344 = v343;
            }
            else {
              unint64_t v344 = 0;
            }
            int v512 = v344;
            if (!sub_24847234C(2uLL, 2uLL, 1, v311, v473, v475, (uint64_t *)&v515, v510))
            {
              unsigned int v442 = 0;
              unint64_t v306 = v515;
              unint64_t v307 = v515 + 4;
              unint64_t v283 = v309;
              goto LABEL_585;
            }
            char v303 = 0;
            unsigned int v442 = 1;
LABEL_655:
            char v147 = v453;
LABEL_656:
            int v281 = v455;
LABEL_657:
            int v280 = v464;
            unsigned int v279 = v461;
            goto LABEL_713;
          }
        }
      }
LABEL_585:
      if (v306 == v471 + 24)
      {
        char v147 = v453;
        if (v307 < v475) {
          unint64_t v447 = v471 + bswap32(*(_DWORD *)(v473 + v306));
        }
      }
      else
      {
        char v147 = v453;
      }
      if (v306 != v447) {
        goto LABEL_610;
      }
      if (v306 + 16 >= v475) {
        goto LABEL_609;
      }
      uint64_t v313 = *(unsigned __int8 *)(v471 + v473 + 8);
      unint64_t v314 = *(unsigned __int8 *)(v473 + v306 + 16);
      unint64_t v315 = v314 * *(unsigned __int8 *)(v471 + v473 + 9);
      if (*(unsigned char *)(v471 + v473 + 8))
      {
        unint64_t v316 = v475;
        uint64_t v317 = (unsigned __int8 *)(v473 + v306);
        if (v306 < v475) {
          unint64_t v316 = v306;
        }
        uint64_t v318 = v440 + v316;
        unint64_t v315 = v314 * *(unsigned __int8 *)(v471 + v473 + 9);
        do
        {
          if (!v318) {
            break;
          }
          unsigned int v319 = *v317++;
          v315 *= v319;
          ++v318;
          --v313;
        }
        while (v313);
      }
      unint64_t v448 = v314 * *(unsigned __int8 *)(v471 + v473 + 9);
      if ((v314 - 1) > 1u
        || v315 < 0x41
        || v315 >> 28
        || v315 + v306 > v475
        || v306 <= 4 * v314 * *(unsigned __int8 *)(v471 + v473 + 9))
      {
LABEL_609:
        unint64_t v447 = v306;
        goto LABEL_610;
      }
      sub_24841DD6C((size_t *)&v512, 4);
      unint64_t v443 = v314;
      sub_24841DD6C((size_t *)&v512, (v314 - 1) | (16 * (v448 != v314)) | 4);
      unint64_t v320 = v512;
      if ((((v314 - 1) | (16 * (v448 != v314))) & 0x10) != 0)
      {
        sub_2484106F0((size_t *)&v512, (unint64_t)v512 + 9);
        uint64_t v321 = v514;
        if (v514) {
          unint64_t v322 = (void **)((char *)v320 + 9);
        }
        else {
          unint64_t v322 = 0;
        }
        int v512 = v322;
        unint64_t v323 = v448;
        if (v448 < 0x80)
        {
          LOBYTE(v325) = v448;
          long long v324 = v320;
        }
        else
        {
          do
          {
            long long v324 = (void **)((char *)v320 + 1);
            *((unsigned char *)v320 + (void)v321) = v323 | 0x80;
            unint64_t v325 = v323 >> 7;
            unint64_t v326 = v323 >> 14;
            unint64_t v320 = (void **)((char *)v320 + 1);
            v323 >>= 7;
          }
          while (v326);
        }
        long long v345 = (void **)((char *)v324 + 1);
        *((unsigned char *)v324 + (void)v321) = v325;
        sub_2484106F0((size_t *)&v512, (unint64_t)v324 + 1);
        if (v514) {
          unint64_t v320 = v345;
        }
        else {
          unint64_t v320 = 0;
        }
        int v512 = v320;
      }
      sub_2484106F0((size_t *)&v512, (unint64_t)v320 + 9);
      int8x16_t v346 = v514;
      if (v514) {
        long long v347 = (void **)((char *)v320 + 9);
      }
      else {
        long long v347 = 0;
      }
      int v512 = v347;
      if (v315 < 0x80)
      {
        LOBYTE(v350) = v315;
        uint64_t v349 = v320;
      }
      else
      {
        unint64_t v348 = v315;
        do
        {
          uint64_t v349 = (void **)((char *)v320 + 1);
          *((unsigned char *)v320 + (void)v346) = v348 | 0x80;
          unint64_t v350 = v348 >> 7;
          unint64_t v351 = v348 >> 14;
          unint64_t v320 = (void **)((char *)v320 + 1);
          v348 >>= 7;
        }
        while (v351);
      }
      signed int v327 = (void **)((char *)v349 + 1);
      *((unsigned char *)v349 + (void)v346) = v350;
      sub_2484106F0((size_t *)&v512, (unint64_t)v349 + 1);
      if (!v514) {
        signed int v327 = 0;
      }
      int v512 = v327;
      if (sub_24847234C(v448, v443, 1, v315, v473, v475, (uint64_t *)&v515, v510))
      {
        char v303 = 0;
        unsigned int v442 = 1;
        unint64_t v447 = v306;
        goto LABEL_655;
      }
      unsigned int v442 = 0;
      unint64_t v447 = v306;
      char v147 = v453;
      if (v327) {
        goto LABEL_685;
      }
LABEL_611:
      if (!v510[0])
      {
        if (v304 == 543449703
          && v450 - 9 < 0x3FFFFFF6
          && v515 == v471 + 8
          && (unint64_t)(v471 + 8) >= 0x11
          && v450 + v471 <= v475)
        {
          sub_24841DD6C((size_t *)&v512, 4);
          sub_24841DD6C((size_t *)&v512, 3);
          unint64_t v328 = v512;
          sub_2484106F0((size_t *)&v512, (unint64_t)v512 + 9);
          unint64_t v329 = v450 - 8;
          int v330 = v514;
          if (v514) {
            int v331 = (void **)((char *)v328 + 9);
          }
          else {
            int v331 = 0;
          }
          int v512 = v331;
          if (v329 < 0x80)
          {
            LOBYTE(v334) = v450 - 8;
            signed int v333 = v328;
          }
          else
          {
            unint64_t v332 = v450 - 8;
            do
            {
              signed int v333 = (void **)((char *)v328 + 1);
              *((unsigned char *)v328 + (void)v330) = v332 | 0x80;
              unint64_t v334 = v332 >> 7;
              unint64_t v335 = v332 >> 14;
              unint64_t v328 = (void **)((char *)v328 + 1);
              v332 >>= 7;
            }
            while (v335);
          }
          signed int v327 = (void **)((char *)v333 + 1);
          *((unsigned char *)v333 + (void)v330) = v334;
          sub_2484106F0((size_t *)&v512, (unint64_t)v333 + 1);
          if (!v514) {
            signed int v327 = 0;
          }
          int v512 = v327;
          if (sub_24847234C(4uLL, 4uLL, 0, v329, v473, v475, (uint64_t *)&v515, v510))
          {
            char v303 = 0;
            unsigned int v442 = 1;
            goto LABEL_656;
          }
          if (v327)
          {
            unsigned int v442 = 0;
LABEL_669:
            char v147 = v453;
            goto LABEL_685;
          }
          unsigned int v442 = 0;
          if (v510[0])
          {
            signed int v327 = 0;
            goto LABEL_669;
          }
          char v147 = v453;
        }
        unint64_t v352 = v515;
        if (v515 + 20 <= v475
          && v515 + 4 <= v475
          && *(_DWORD *)(v473 + v515) == 542792024
          && (v515 + 8 > v475 || !*(_DWORD *)(v473 + v515 + 4)))
        {
          sub_24841DD6C((size_t *)&v512, 10);
          for (uint64_t j = 0; j != 12; ++j)
            sub_24841DD6C(v510, *(unsigned char *)(v473 + 8 + v352 + j));
          v352 += 20;
          unint64_t v515 = v352;
          signed int v327 = v512;
          char v147 = v453;
          if (v512) {
            goto LABEL_685;
          }
        }
        if (!v510[0])
        {
          unint64_t v354 = v352 + 8;
          if (v352 + 8 > v475 || *(_DWORD *)(v473 + v352 + 4))
          {
            unint64_t v354 = v352;
          }
          else
          {
            int v379 = 538976288;
            if (v352 + 4 <= v475) {
              int v379 = *(_DWORD *)(v473 + v352);
            }
            uint64_t v380 = 0;
            int v509 = v379;
            while (v509 != *(_DWORD *)*(&off_26523BE68 + v380))
            {
              if (++v380 == 8)
              {
                unint64_t v354 = v352;
                char v147 = v453;
                goto LABEL_683;
              }
            }
            sub_24841DD6C((size_t *)&v512, v380 + 16);
            unint64_t v515 = v352 + 8;
            signed int v327 = v512;
            char v147 = v453;
            if (v512) {
              goto LABEL_685;
            }
          }
LABEL_683:
          if (v354 != v475)
          {
            int v281 = v455;
            int v280 = v464;
            unsigned int v279 = v461;
            goto LABEL_711;
          }
        }
      }
      signed int v327 = 0;
      goto LABEL_685;
    }
LABEL_610:
    signed int v327 = v512;
    if (!v512) {
      goto LABEL_611;
    }
LABEL_685:
    unint64_t v355 = v283 - v468;
    if (v283 > v468)
    {
      sub_24841DD6C((size_t *)v476, 1);
      unint64_t v356 = (char *)v476[0];
      uint64_t v357 = (char *)v476[0] + 9;
      sub_2484106F0((size_t *)v476, (unint64_t)v476[0] + 9);
      double v358 = v476[2];
      if (v476[2]) {
        unint64_t v359 = v357;
      }
      else {
        unint64_t v359 = 0;
      }
      v476[0] = v359;
      if (v355 < 0x80)
      {
        LOBYTE(v361) = v283 - v468;
        unsigned int v360 = v356;
      }
      else
      {
        do
        {
          unsigned int v360 = v356 + 1;
          v356[(void)v358] = v355 | 0x80;
          unint64_t v361 = v355 >> 7;
          unint64_t v362 = v355 >> 14;
          ++v356;
          v355 >>= 7;
        }
        while (v362);
      }
      unsigned __int8 v363 = v360 + 1;
      v360[(void)v358] = v361;
      sub_2484106F0((size_t *)v476, (unint64_t)(v360 + 1));
      if (v476[2]) {
        uint64_t v364 = v363;
      }
      else {
        uint64_t v364 = 0;
      }
      v476[0] = v364;
      double v365 = (char *)(v473 + v468);
      if (v283 >= v468) {
        unint64_t v366 = v283 - v468;
      }
      else {
        unint64_t v366 = 0;
      }
      while (v366)
      {
        char v367 = *v365++;
        --v366;
        sub_24841DD6C(&v496, v367);
      }
    }
    if (v327)
    {
      size_t v368 = v514;
      double v369 = v327;
      do
      {
        char v370 = *v368++;
        sub_24841DD6C((size_t *)v476, v370);
        double v369 = (void **)((char *)v369 - 1);
      }
      while (v369);
      long long v371 = v327;
    }
    else
    {
      long long v371 = 0;
    }
    size_t v372 = v510[0];
    if (v510[0])
    {
      uint64_t v373 = v511;
      size_t v374 = v510[0];
      do
      {
        char v375 = *v373++;
        sub_24841DD6C(&v496, v375);
        --v374;
      }
      while (v374);
      long long v371 = v327;
    }
    unint64_t v354 = v515;
    size_t v376 = (unint64_t)v371 | v372;
    int v281 = v455;
    int v280 = v464;
    unsigned int v279 = v461;
    unint64_t v468 = v515;
    if (!v376) {
LABEL_711:
    }
      unint64_t v515 = v354 + 1;
    char v303 = 1;
LABEL_713:
    uint64_t v377 = (uint64_t)v511;
    long double v511 = 0;
    int v282 = v458;
    if (v377)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v377 - 24));
      free(*(void **)(v377 - 32));
    }
    uint64_t v378 = v514;
    uint64_t v514 = 0;
    if (v378)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v378 - 3));
      free(*((void **)v378 - 4));
    }
  }
  while ((v303 & 1) != 0);
  sub_2484510A0(v517);
  if (v444) {
    operator delete(v444);
  }
  if (v147) {
    operator delete(v147);
  }
  if (v445) {
    operator delete(v445);
  }
  int v117 = v442;
LABEL_755:
  uint64_t v396 = v504.i64[1];
  v504.i64[1] = 0;
  if (v396)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v396 - 24));
    free(*(void **)(v396 - 32));
  }
  uint64_t v397 = v497.i64[1];
  v497.i64[1] = 0;
  if (v397)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v397 - 24));
    free(*(void **)(v397 - 32));
  }
LABEL_759:
  int v398 = v476[2];
  v476[2] = 0;
  if (v398)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(v398 - 3));
    free((void *)*(v398 - 4));
  }
  if (v117) {
    goto LABEL_795;
  }
  sub_248451DB0(&v516);
  int64x2_t v504 = (int64x2_t)xmmword_2484DCF30;
  LOBYTE(v505) = 0;
  unint64_t v503 = v488;
  uint64_t v399 = *((void *)&v488 + 1) + 16;
  sub_2484106F0((size_t *)&v488 + 1, *((void *)&v488 + 1) + 16);
  if (*((void *)&v489 + 1)) {
    uint64_t v400 = v399;
  }
  else {
    uint64_t v400 = 0;
  }
  double v506 = v490;
  *((void *)&v488 + 1) = v400;
  double v490 = (void **)&v503;
  int v401 = v507[0];
  sub_2484DA390((unint64_t)v507[0], (uint64_t *)&v488);
  sub_2484195C0((uint64_t)&v503, &v488, 0, v33);
  if (!v401)
  {
    unsigned int v425 = 3;
    goto LABEL_790;
  }
  unint64_t v402 = 0;
  uint64_t v403 = v508;
  while (2)
  {
    if (v402)
    {
      unsigned __int8 v404 = *(unsigned char *)(v402 + v403 - 1);
      if (v402 != 1)
      {
        unsigned __int8 v405 = *(unsigned char *)(v402 + v403 - 2);
        goto LABEL_772;
      }
    }
    else
    {
      unsigned __int8 v404 = 0;
    }
    unsigned __int8 v405 = 0;
LABEL_772:
    int v406 = v516;
    int v407 = sub_24841F55C(v402, v404, v405);
    int v408 = v407;
    int v409 = v406[1];
    unint64_t v410 = (unint64_t)v406[2];
    if ((unint64_t)v409 >= v410)
    {
      uint64_t v413 = ((char *)v409 - (unsigned char *)*v406) >> 3;
      unint64_t v414 = v413 + 1;
      if ((unint64_t)(v413 + 1) >> 61) {
        sub_2483E92E8();
      }
      uint64_t v415 = v410 - (void)*v406;
      if (v415 >> 2 > v414) {
        unint64_t v414 = v415 >> 2;
      }
      if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v416 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v416 = v414;
      }
      float v417 = (char *)sub_2483F04AC(v416);
      float v419 = &v417[8 * v413];
      int v420 = *(unsigned __int8 *)(v403 + v402);
      *(_DWORD *)float v419 = 2 * v408;
      *((_DWORD *)v419 + 1) = v420;
      int v422 = (char *)*v406;
      uint64_t v421 = (char *)v406[1];
      BOOL v423 = v419;
      if (v421 != *v406)
      {
        do
        {
          uint64_t v424 = *((void *)v421 - 1);
          v421 -= 8;
          *((void *)v423 - 1) = v424;
          v423 -= 8;
        }
        while (v421 != v422);
        uint64_t v421 = (char *)*v406;
      }
      int v412 = v419 + 8;
      char *v406 = v423;
      v406[1] = v419 + 8;
      v406[2] = &v417[8 * v418];
      if (v421) {
        operator delete(v421);
      }
    }
    else
    {
      int v411 = *(unsigned __int8 *)(v403 + v402);
      *int v409 = 2 * v407;
      v409[1] = v411;
      int v412 = v409 + 2;
    }
    v406[1] = v412;
    if ((void *)++v402 != v401) {
      continue;
    }
    break;
  }
  unsigned int v425 = (unint64_t)v401 >= 0x1000 ? 2 : 3;
LABEL_790:
  unint64_t v496 = 0x400000002;
  uint64_t v499 = 0;
  uint64_t v500 = -1;
  uint64_t v498 = 0;
  int v502 = 1;
  int64x2_t v497 = (int64x2_t)(v425 | 0x200000000uLL);
  memset(v476, 0, sizeof(v476));
  int v478 = 0;
  double v479 = 0;
  uint64_t v480 = 0;
  sub_2483F26D4((uint64_t)v481);
  long long v486 = 0uLL;
  *(void *)&long long v487 = 0;
  int v512 = 0;
  uint64_t v513 = 0;
  uint64_t v514 = 0;
  char v501 = 1;
  sub_248443880((uint64_t)&v496, 0x29uLL, (uint64_t)&v516, (uint64_t *)v476, (unint64_t *)&v512, (unint64_t *)&v488, 0, v33);
  sub_24844A2B4((uint64_t)v516, (uint64_t)v476, &v512, 0, (unint64_t *)&v488, 0, v33);
  if (v512) {
    operator delete(v512);
  }
  int v512 = (void **)&v486;
  sub_2483F77FC(&v512);
  if (v478)
  {
    double v479 = v478;
    operator delete(v478);
  }
  int v512 = v476;
  sub_2484415B0(&v512);
  v476[0] = &v516;
  sub_2483F87EC((void ***)v476);
  int v117 = 0;
LABEL_795:
  uint64_t v426 = v508;
  uint64_t v508 = 0;
  if (v426)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v426 - 24));
    free(*(void **)(v426 - 32));
  }
  if (v117)
  {
LABEL_116:
    uint64_t v34 = 1;
    *(_DWORD *)(a1 + 2852) = 1;
    goto LABEL_117;
  }
LABEL_798:
  *(_OWORD *)&v476[1] = xmmword_2484DCE40;
  LOBYTE(v477) = 0;
  v476[0] = (void *)v488;
  uint64_t v427 = *((void *)&v488 + 1) + 1;
  sub_2484106F0((size_t *)&v488 + 1, *((void *)&v488 + 1) + 1);
  if (*((void *)&v489 + 1)) {
    uint64_t v428 = v427;
  }
  else {
    uint64_t v428 = 0;
  }
  int v478 = v490;
  *((void *)&v488 + 1) = v428;
  double v490 = v476;
  uint64_t v429 = ((v488 + 7) & 0xFFFFFFFFFFFFFFF8) - v488;
  if (v429)
  {
    *(void *)(*((void *)&v489 + 1) + ((unint64_t)v488 >> 3)) = *(unsigned __int8 *)(*((void *)&v489 + 1)
                                                                                             + ((unint64_t)v488 >> 3));
    *(void *)&long long v488 = v488 + v429;
  }
  sub_2484195C0((uint64_t)v476, &v488, 0, v33);
  unint64_t v430 = (unint64_t)v488 >> 3;
  sub_2484106F0((size_t *)&v488 + 1, (unint64_t)v488 >> 3);
  uint64_t v431 = *((void *)&v489 + 1);
  if (*((void *)&v489 + 1)) {
    unint64_t v432 = v430;
  }
  else {
    unint64_t v432 = 0;
  }
  unint64_t v493 = v432;
  uint64_t v494 = v489;
  *((void *)&v488 + 1) = v432;
  *((void *)&v489 + 1) = 0;
  uint64_t v433 = v495;
  uint64_t v495 = v431;
  if (v433)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v433 - 24));
    free(*(void **)(v433 - 32));
    unint64_t v432 = v493;
  }
  *((void *)&v488 + 1) = 0;
  *(void *)&long long v489 = 0;
  *(void *)(a1 + 184) += v432;
  if (!*(unsigned char *)(a1 + 297))
  {
    int v437 = *(_DWORD *)(a1 + 300);
    if ((v437 == 5 || v437 == -1) && !*(unsigned char *)(a1 + 299) && !*(unsigned char *)(a1 + 298))
    {
LABEL_830:
      uint64_t v34 = 0;
      int v35 = 0;
      *(unsigned char *)(a1 + 2864) = 1;
      goto LABEL_118;
    }
  }
  sub_24848807C(&v496, a1 + 104, 0x20uLL, 0);
  uint64_t v34 = v499;
  if (!v499)
  {
    uint64_t v434 = (_OWORD *)v496;
    int64x2_t v504 = v497;
    unint64_t v503 = v496;
    uint64_t v505 = v498;
    unint64_t v496 = 0;
    v497.i64[0] = 0;
    *uint64_t v434 = xmmword_248550724;
    v434[1] = *(_OWORD *)"ftypjxl ";
    v503 += 32;
    int64x2_t v504 = vaddq_s64(v504, (int64x2_t)xmmword_2484DCF40);
    sub_24845C478(&v503);
    if (!v499) {
      sub_24845C478(&v496);
    }
    if (*(_DWORD *)(a1 + 300) == 5) {
      goto LABEL_813;
    }
    sub_24848807C(&v496, a1 + 104, 9uLL, 0);
    uint64_t v34 = v499;
    if (!v499)
    {
      unint64_t v438 = (void *)v496;
      int64x2_t v504 = v497;
      unint64_t v503 = v496;
      uint64_t v505 = v498;
      unint64_t v496 = 0;
      v497.i64[0] = 0;
      *unint64_t v438 = 0x6C6C786A09000000;
      unint64_t v439 = v503;
      int64x2_t v504 = vaddq_s64(v504, (int64x2_t)xmmword_2484DCF50);
      *(unsigned char *)(v503 + 8) = *(_DWORD *)(a1 + 300);
      unint64_t v503 = v439 + 9;
      int64x2_t v504 = vaddq_s64(v504, (int64x2_t)xmmword_2484DCF60);
      sub_24845C478(&v503);
      if (!v499) {
        sub_24845C478(&v496);
      }
LABEL_813:
      if (!*(unsigned char *)(a1 + 299) && (!*(unsigned char *)(a1 + 298) || *v2 || v2[4])) {
        goto LABEL_830;
      }
      LODWORD(v503) = 1886156906;
      unint64_t v496 = a1;
      v497.i64[0] = (uint64_t)&v493;
      uint64_t v34 = sub_24848C0E4(a1, (uint64_t)&v503, v493 + 4, (uint64_t *)&v496);
      if (!v34)
      {
        sub_2484106F0(&v493, 0);
        unint64_t v493 = 0;
        if (!*(unsigned char *)(a1 + 299)) {
          goto LABEL_830;
        }
        uint64_t v435 = *(void *)(a1 + 1984);
        uint64_t v436 = *(void *)(a1 + 1992);
        if (v435 == v436) {
          goto LABEL_830;
        }
        LODWORD(v503) = 1685217898;
        unint64_t v496 = a1;
        v497.i64[0] = a1 + 1984;
        uint64_t v34 = sub_24848C318(a1, (uint64_t)&v503, v436 - v435, (uint64_t)&v496);
        if (!v34) {
          goto LABEL_830;
        }
      }
    }
  }
LABEL_117:
  int v35 = 1;
LABEL_118:
  uint64_t v73 = *((void *)&v489 + 1);
  *((void *)&v489 + 1) = 0;
  if (v73)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v73 - 24));
    free(*(void **)(v73 - 32));
  }
LABEL_120:
  if (SHIBYTE(v492) < 0) {
    operator delete(__p[0]);
  }
  if (v35) {
    goto LABEL_184;
  }
LABEL_2:
  sub_248488418((void *)(a1 + 104));
  unint64_t v3 = *v2;
  uint64_t v4 = v2[4];
  if (*v2 | v4)
  {
    unint64_t *v2 = 0;
    uint64_t v20 = v2[1];
    unint64_t v503 = v3;
    v504.i64[0] = v20;
    v2[4] = 0;
    BOOL v21 = (void (*)(void))v2[5];
    unint64_t v22 = sub_24848C494((uint64_t *)(*(void *)(a1 + 80) + 48), *(uint64_t **)(a1 + 88), *(void **)(a1 + 80));
    uint64_t v23 = *(void *)(a1 + 88);
    if ((void *)v23 != v22)
    {
      do
      {
        v23 -= 48;
        sub_24848C540(v23);
      }
      while ((void *)v23 != v22);
      unint64_t v3 = v503;
    }
    *(void *)(a1 + 88) = v22;
    uint64_t v24 = *(void *)(a1 + 64) - 1;
    *(void *)(a1 + 64) = v24;
    if (!v3) {
      goto LABEL_45;
    }
    uint64_t v25 = *(void *)(v3 + 1176);
    unint64_t v26 = *(void *)(v3 + 1184) - v25;
    if (v26)
    {
      uint64_t v27 = 0;
      unsigned int v28 = 1;
      while (*(unsigned char *)(v25 + v27))
      {
        uint64_t v27 = v28;
        BOOL v310 = v26 > v28++;
        if (!v310) {
          goto LABEL_32;
        }
      }
      goto LABEL_149;
    }
LABEL_32:
    *(_DWORD *)(v3 + 72) = *(unsigned char *)(a1 + 345) == 0;
    if (*(unsigned char *)(a1 + 557)) {
      uint64_t v29 = *(void *)(v3 + 648);
    }
    else {
LABEL_45:
    }
      uint64_t v29 = 0;
    uint64_t v465 = v29;
    if (*(unsigned char *)(a1 + 2865)) {
      BOOL v36 = v24 == 0;
    }
    else {
      BOOL v36 = 0;
    }
    unsigned int v37 = v36;
    unsigned int v38 = *(_DWORD *)(a1 + 332);
    for (uint64_t k = *(void *)(a1 + 632); k != *(void *)(a1 + 640); k += 96)
    {
      if (v38 <= *(_DWORD *)(k + 28)) {
        unsigned int v38 = *(_DWORD *)(k + 28);
      }
    }
    unsigned int v40 = v38 + 3;
    if (v40 <= 0x18) {
      uint64_t v41 = 24;
    }
    else {
      uint64_t v41 = v40;
    }
    uint64_t v42 = sub_24841D660(a1 + 728);
    if (*(unsigned char *)(a1 + 736)) {
      unsigned int v43 = 8 * *(_DWORD *)(a1 + 740) + 8;
    }
    else {
      unsigned int v43 = *(_DWORD *)(a1 + 744);
    }
    uint64_t v45 = *(unsigned int *)(a1 + 624);
    if (*(_DWORD *)(a1 + 408) == 1) {
      uint64_t v46 = v45 + 1;
    }
    else {
      uint64_t v46 = v45 + 3;
    }
    unint64_t v459 = v42 * v41 * v43 * v46;
    if (v459 <= 0x7FF7FFFBFLL) {
      size_t v47 = 8;
    }
    else {
      size_t v47 = 16;
    }
    uint64_t v48 = *(void *)(a1 + 144);
    uint64_t v472 = v21;
    uint64_t v474 = v4;
    unsigned int v469 = v37;
    uint64_t v462 = v48;
    if (*(unsigned char *)(a1 + 297)
      || (int v53 = *(_DWORD *)(a1 + 300), v53 != 5) && v53 != -1
      || *(unsigned char *)(a1 + 299)
      || *(unsigned char *)(a1 + 298))
    {
      if (!v37 || *(void *)(a1 + 2856)) {
        v47 |= 4uLL;
      }
      size_t v49 = v47 + v48;
      uint64_t v50 = *(void **)(a1 + 176);
      if (v50)
      {
        long long v51 = (void (*)(void, size_t))v50[3];
        if (v51)
        {
          v51(*v50, v47 + v48);
          *(void *)(a1 + 160) = v49;
        }
      }
      *(void *)(a1 + 144) = v49;
    }
    else
    {
      size_t v49 = *(void *)(a1 + 144);
    }
    uint64_t v34 = sub_24845C0B4(a1 + 104, &v493);
    if (v34)
    {
      char v52 = 0;
      goto LABEL_180;
    }
    if (v3)
    {
      uint64_t v54 = *(void *)(a1 + 184);
      char v55 = *(unsigned char *)(v3 + 764);
      long long v57 = *(char **)(a1 + 208);
      unsigned int v56 = *(char **)(a1 + 216);
      if (v56 - v57 == 16 && *((void *)v57 + 1) == v54)
      {
        *(void *)(a1 + 216) = v57;
        unsigned int v56 = v57;
      }
      unint64_t v58 = *(void *)(a1 + 224);
      if ((unint64_t)v56 >= v58)
      {
        uint64_t v75 = (v56 - v57) >> 4;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 60) {
          sub_2483E92E8();
        }
        uint64_t v77 = v58 - (void)v57;
        if (v77 >> 3 > v76) {
          unint64_t v76 = v77 >> 3;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          char v456 = v55;
          if (v78 >> 60) {
            sub_2483E9338();
          }
          long long v79 = (char *)operator new(16 * v78);
          char v55 = v456;
        }
        else
        {
          long long v79 = 0;
        }
        long long v87 = &v79[16 * v75];
        *long long v87 = v55;
        *((_DWORD *)v87 + 1) = v465;
        *((void *)v87 + 1) = v54;
        uint64_t v59 = v87 + 16;
        if (v56 == v57)
        {
          BOOL v21 = v472;
          uint64_t v4 = v474;
        }
        else
        {
          BOOL v21 = v472;
          uint64_t v4 = v474;
          do
          {
            *((_OWORD *)v87 - 1) = *((_OWORD *)v56 - 1);
            v87 -= 16;
            v56 -= 16;
          }
          while (v56 != v57);
          long long v57 = *(char **)(a1 + 208);
        }
        *(void *)(a1 + 208) = v87;
        *(void *)(a1 + 216) = v59;
        *(void *)(a1 + 224) = &v79[16 * v78];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *unsigned int v56 = v55;
        *((_DWORD *)v56 + 1) = v465;
        uint64_t v59 = v56 + 16;
        *((void *)v56 + 1) = v54;
        BOOL v21 = v472;
      }
      *(void *)(a1 + 216) = v59;
      unint64_t v74 = v503;
      uint64_t v88 = *(unsigned int *)(v503 + 700);
      if (v88 >= 3)
      {
LABEL_149:
        char v52 = 0;
        *(_DWORD *)(a1 + 2852) = 129;
        uint64_t v34 = 1;
        goto LABEL_180;
      }
      LOWORD(v476[0]) = 256;
      HIDWORD(v476[0]) = 0;
      v476[1] = 0;
      uint64_t v480 = 0;
      v481[0] = 0;
      int v482 = 2;
      uint64_t v483 = 0;
      memset(v484, 0, 12);
      long long v485 = 0u;
      long long v486 = 0u;
      long long v487 = 0u;
      LOWORD(v476[2]) = v469;
      unsigned int v89 = (void *)*(unsigned int *)(v503 + 688);
      uint64_t v477 = v88;
      int v478 = v89;
      LOBYTE(v479) = *(_DWORD *)(v503 + 696) != 0;
      HIDWORD(v479) = *(_DWORD *)(v503 + 692);
      sub_24841C5B4((void *)&v486 + 1, *(unsigned int *)(a1 + 624));
      int8x16_t v90 = *(int8x16_t *)(v74 + 684);
      uint64_t v91 = *(unsigned int *)(a1 + 624);
      if (v91)
      {
        unint64_t v92 = 0;
        uint64_t v93 = *(void *)(v74 + 704);
        unint64_t v94 = (*(void *)(v74 + 712) - v93) >> 4;
        unint64_t v95 = (_DWORD *)(*((void *)&v486 + 1) + 20);
        uint64_t v48 = v462;
        do
        {
          int8x16_t v96 = v90;
          if (v92 < v94) {
            int8x16_t v96 = *(int8x16_t *)(v93 + 16 * v92);
          }
          *(int32x2_t *)(v95 - 3) = vzip1_s32(*(int32x2_t *)v96.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
          *unint64_t v95 = v96.i32[1];
          *((unsigned char *)v95 - 4) = v96.i32[3] != 0;
          ++v92;
          v95 += 10;
        }
        while (v91 != v92);
        int v97 = *(_DWORD *)(v74 + 684);
      }
      else
      {
        int v97 = *(_OWORD *)(v74 + 684);
        uint64_t v48 = v462;
      }
      uint64_t v480 = *(void *)(v74 + 668);
      int v482 = v97;
      v481[0] = v97 != 0;
      uint64_t v483 = *(void *)(v74 + 752);
      LODWORD(v484[0]) = *(_DWORD *)(v74 + 760);
      *(void *)((char *)v484 + 4) = v465;
      std::string::operator=((std::string *)&v485, (const std::string *)(v74 + 728));
      BOOL v98 = sub_248455DF4(v74 + 8, (uint64_t)v476, a1 + 304, v74 + 776, a1 + 232, *(void *)(a1 + 24), a1 + 104, *(void *)(v74 + 768));
      if (v98)
      {
        uint64_t v34 = 1;
        *(_DWORD *)(a1 + 2852) = 1;
      }
      else
      {
        uint64_t v34 = 0;
      }
      unint64_t v496 = (unint64_t)&v486 + 8;
      sub_2483FDB3C((void ***)&v496);
      if (SBYTE7(v486) < 0) {
        operator delete((void *)v485);
      }
      if (v98) {
        goto LABEL_179;
      }
    }
    else
    {
      sub_2484CD738(v4, v37, *(void *)(a1 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))sub_24848C8F0, (void *)(a1 + 104));
      unint64_t v74 = 0;
      uint64_t v34 = 0;
    }
    uint64_t v99 = *(void *)(a1 + 144);
    unint64_t v100 = v99 - v49;
    *(void *)(a1 + 184) += v100 - v493;
    if (!*(unsigned char *)(a1 + 297))
    {
      int v107 = *(_DWORD *)(a1 + 300);
      if ((v107 == 5 || v107 == -1) && !*(unsigned char *)(a1 + 299) && !*(unsigned char *)(a1 + 298))
      {
LABEL_198:
        sub_248488418((void *)(a1 + 104));
        if (v74) {
          sub_2484568E0(a1 + 2008, v74 + 8);
        }
        if (v469)
        {
          int v110 = *(unsigned char **)(a1 + 208);
          unint64_t v111 = *(unsigned char **)(a1 + 216);
          if (v110 != v111)
          {
            uint64_t v112 = *(unsigned char **)(a1 + 208);
            char v52 = 1;
            while ((*v112 & 1) == 0)
            {
              v112 += 16;
              if (v112 == v111) {
                goto LABEL_180;
              }
            }
            unsigned int v118 = 0;
            uint64_t v119 = 0;
            memset(v476, 0, sizeof(v476));
            unint64_t v120 = (v111 - v110) >> 4;
            if (v120 <= 1) {
              unint64_t v120 = 1;
            }
            do
            {
              if (!v119 || *v110) {
                ++v118;
              }
              ++v119;
              v110 += 16;
            }
            while (v120 != v119);
            if (30 * v118 == -18)
            {
              unint64_t v122 = 0;
              uint64_t v121 = 0;
            }
            else
            {
              sub_2483EE8AC((unint64_t *)v476, (int)(30 * v118 + 18));
              unint64_t v122 = v476[0];
              uint64_t v121 = v476[1];
            }
            LOBYTE(v140) = v118;
            if (v118 < 0x80)
            {
              unint64_t v141 = 0;
LABEL_252:
              v122[v141++] = v140;
            }
            else
            {
              unint64_t v141 = 0;
              unint64_t v142 = v121 - v122;
              unint64_t v143 = (int)v118;
              while (1)
              {
                unint64_t v144 = v141;
                if (v141 > v142) {
                  break;
                }
                ++v141;
                v122[v144] = v143 | 0x80;
                unint64_t v140 = v143 >> 7;
                unint64_t v145 = v143 >> 14;
                v143 >>= 7;
                if (!v145)
                {
                  if (v144 < v142) {
                    goto LABEL_252;
                  }
                  break;
                }
              }
            }
            unint64_t v157 = &v122[v141];
            *unint64_t v157 = bswap32(*(_DWORD *)(a1 + 196));
            v157[1] = bswap32(*(_DWORD *)(a1 + 200));
            unint64_t v158 = v141 + 8;
            uint64_t v159 = *(void *)(a1 + 208);
            uint64_t v160 = *(void *)(a1 + 216);
            if ((unint64_t)(v160 - v159) < 0x11)
            {
              unsigned int v162 = 0;
              int v163 = 0;
              unint64_t v179 = (unint64_t)(v160 - v159) >> 4;
              unint64_t v180 = *(void *)(v159 + 8);
              unint64_t v164 = v121 - v122;
            }
            else
            {
              unsigned int v161 = 0;
              unsigned int v162 = 0;
              int v163 = 0;
              unint64_t v164 = v121 - v122;
              int v165 = -1;
              unint64_t v166 = 1;
              do
              {
                if (*(unsigned char *)(v159 + 16 * v166))
                {
                  unint64_t v167 = *(void *)(v159 + 16 * v163 + 8);
                  if (v165 != -1) {
                    v167 -= *(void *)(v159 + 16 * v165 + 8);
                  }
                  if (v167 < 0x80)
                  {
                    unint64_t v168 = v158;
                    LOBYTE(v169) = v167;
LABEL_270:
                    if (v168 <= v164)
                    {
                      unint64_t v158 = v168 + 1;
                      v122[v168] = v169;
                    }
                    else
                    {
                      unint64_t v158 = v168;
                    }
                  }
                  else
                  {
                    while (v158 <= v164)
                    {
                      unint64_t v168 = v158 + 1;
                      v122[v158] = v167 | 0x80;
                      unint64_t v169 = v167 >> 7;
                      unint64_t v170 = v167 >> 14;
                      ++v158;
                      v167 >>= 7;
                      if (!v170) {
                        goto LABEL_270;
                      }
                    }
                  }
                  unint64_t v171 = (int)v162;
                  if (v162 < 0x80)
                  {
                    unint64_t v172 = v158;
                    LOBYTE(v173) = v171;
LABEL_278:
                    if (v172 <= v164)
                    {
                      unint64_t v158 = v172 + 1;
                      v122[v172] = v173;
                    }
                    else
                    {
                      unint64_t v158 = v172;
                    }
                  }
                  else
                  {
                    while (v158 <= v164)
                    {
                      unint64_t v172 = v158 + 1;
                      v122[v158] = v171 | 0x80;
                      unint64_t v173 = v171 >> 7;
                      unint64_t v174 = v171 >> 14;
                      ++v158;
                      v171 >>= 7;
                      if (!v174) {
                        goto LABEL_278;
                      }
                    }
                  }
                  unint64_t v175 = (int)v166 - v163;
                  if ((v166 - v163) < 0x80)
                  {
                    unint64_t v176 = v158;
                    LOBYTE(v177) = v166 - v163;
LABEL_286:
                    if (v176 <= v164)
                    {
                      unint64_t v158 = v176 + 1;
                      v122[v176] = v177;
                    }
                    else
                    {
                      unint64_t v158 = v176;
                    }
                  }
                  else
                  {
                    while (v158 <= v164)
                    {
                      unint64_t v176 = v158 + 1;
                      v122[v158] = v175 | 0x80;
                      unint64_t v177 = v175 >> 7;
                      unint64_t v178 = v175 >> 14;
                      ++v158;
                      v175 >>= 7;
                      if (!v178) {
                        goto LABEL_286;
                      }
                    }
                  }
                  uint64_t v159 = *(void *)(a1 + 208);
                  uint64_t v160 = *(void *)(a1 + 216);
                  unsigned int v162 = v161;
                  v161 += *(_DWORD *)(v159 + 16 * v166 + 4);
                  int v165 = v163;
                  int v163 = v166;
                }
                ++v166;
              }
              while (v166 < (v160 - v159) >> 4);
              unint64_t v179 = (v160 - v159) >> 4;
              unint64_t v180 = *(void *)(v159 + 16 * v163 + 8);
              if (v165 != -1) {
                v180 -= *(void *)(v159 + 16 * v165 + 8);
              }
            }
            if (v180 < 0x80)
            {
              unint64_t v181 = v158;
              LOBYTE(v182) = v180;
LABEL_299:
              if (v181 <= v164)
              {
                unint64_t v158 = v181 + 1;
                v122[v181] = v182;
              }
              else
              {
                unint64_t v158 = v181;
              }
            }
            else
            {
              while (v158 <= v164)
              {
                unint64_t v181 = v158 + 1;
                v122[v158] = v180 | 0x80;
                unint64_t v182 = v180 >> 7;
                unint64_t v183 = v180 >> 14;
                ++v158;
                v180 >>= 7;
                if (!v183) {
                  goto LABEL_299;
                }
              }
            }
            unsigned int v184 = v179 - v163;
            unint64_t v185 = (int)v162;
            if (v162 < 0x80)
            {
              unint64_t v186 = v158;
              LOBYTE(v187) = v185;
LABEL_307:
              if (v186 <= v164)
              {
                unint64_t v158 = v186 + 1;
                v122[v186] = v187;
              }
              else
              {
                unint64_t v158 = v186;
              }
            }
            else
            {
              while (v158 <= v164)
              {
                unint64_t v186 = v158 + 1;
                v122[v158] = v185 | 0x80;
                unint64_t v187 = v185 >> 7;
                unint64_t v188 = v185 >> 14;
                ++v158;
                v185 >>= 7;
                if (!v188) {
                  goto LABEL_307;
                }
              }
            }
            unint64_t v189 = (int)v184;
            if (v184 < 0x80)
            {
              unint64_t v190 = v158;
              LOBYTE(v191) = v189;
LABEL_315:
              if (v190 <= v164)
              {
                unint64_t v158 = v190 + 1;
                v122[v190] = v191;
              }
              else
              {
                unint64_t v158 = v190;
              }
            }
            else
            {
              while (v158 <= v164)
              {
                unint64_t v190 = v158 + 1;
                v122[v158] = v189 | 0x80;
                unint64_t v191 = v189 >> 7;
                unint64_t v192 = v189 >> 14;
                ++v158;
                v189 >>= 7;
                if (!v192) {
                  goto LABEL_315;
                }
              }
            }
            if (v158 <= v164)
            {
              if (v158 < v164) {
                uint64_t v121 = &v122[v158];
              }
            }
            else
            {
              sub_2483EE8AC((unint64_t *)v476, v158 - v164);
              unint64_t v122 = v476[0];
              uint64_t v121 = v476[1];
            }
            LODWORD(v516) = 1768716394;
            *(void *)&long long v488 = v122;
            *((void *)&v488 + 1) = v121 - v122;
            unint64_t v496 = a1;
            v497.i64[0] = (uint64_t)&v488;
            uint64_t v34 = sub_24848C59C(a1, (uint64_t)&v516, v121 - v122, &v496);
            if (v34)
            {
              if (!v122) {
                goto LABEL_179;
              }
              v476[1] = v122;
              uint64_t v104 = v122;
              goto LABEL_178;
            }
            if (v122)
            {
              v476[1] = v122;
              operator delete(v122);
            }
            uint64_t v34 = 0;
          }
        }
        char v52 = 1;
LABEL_180:
        if (v4) {
          v21(v4);
        }
        sub_24848C7C4(&v503, 0);
        if (v52) {
          goto LABEL_183;
        }
        goto LABEL_184;
      }
    }
    unint64_t v101 = *(void **)(a1 + 176);
    if (v101)
    {
      uint64_t v102 = (void (*)(void, uint64_t))v101[3];
      if (v102)
      {
        v102(*v101, v48);
        *(void *)(a1 + 160) = v48;
      }
    }
    *(void *)(a1 + 144) = v48;
    sub_248442AEC(v476, v47);
    if (v459 > 0x7FF7FFFBFLL || v100 < 0xFFFFFFF8)
    {
      if (v469 && !*(void *)(a1 + 2856))
      {
        LODWORD(v496) = 1668053098;
        sub_248488A74((uint64_t)&v496, v100, v459 > 0x7FF7FFFBFLL, (int8x8_t *)v476[0]);
      }
      else
      {
        LODWORD(v496) = 1886156906;
        sub_248488A74((uint64_t)&v496, v100 + 4, v459 > 0x7FF7FFFBFLL, (int8x8_t *)v476[0]);
        uint64_t v103 = *(void *)(a1 + 2856);
        *(void *)(a1 + 2856) = v103 + 1;
        if (v469) {
          LODWORD(v103) = v103 | 0x80000000;
        }
        *(_DWORD *)((char *)v476[0] + v47 - 4) = bswap32(v103);
      }
      uint64_t v34 = sub_248467EF8(a1 + 104, v476);
      if (!v34)
      {
        unsigned int v108 = *(void **)(a1 + 176);
        if (v108)
        {
          int v109 = (void (*)(void, uint64_t))v108[3];
          if (v109)
          {
            v109(*v108, v99);
            *(void *)(a1 + 160) = v99;
          }
        }
        *(void *)(a1 + 144) = v99;
        if (v476[0])
        {
          v476[1] = v476[0];
          operator delete(v476[0]);
        }
        uint64_t v34 = 0;
        goto LABEL_198;
      }
    }
    else
    {
      uint64_t v34 = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
    uint64_t v104 = v476[0];
    if (!v476[0])
    {
LABEL_179:
      char v52 = 0;
      goto LABEL_180;
    }
    v476[1] = v476[0];
LABEL_178:
    operator delete(v104);
    goto LABEL_179;
  }
  uint64_t v6 = v2[2];
  unint64_t v5 = v2[3];
  v2[2] = 0;
  *(void *)&long long v488 = v6;
  *((void *)&v488 + 1) = v5;
  uint64x2_t v7 = sub_24848C494((uint64_t *)(*(void *)(a1 + 80) + 48), *(uint64_t **)(a1 + 88), *(void **)(a1 + 80));
  uint64_t v8 = *(void *)(a1 + 88);
  if ((void *)v8 != v7)
  {
    do
    {
      v8 -= 48;
      sub_24848C540(v8);
    }
    while ((void *)v8 != v7);
    uint64_t v6 = v488;
  }
  *(void *)(a1 + 88) = v7;
  --*(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 32))
  {
    unint64_t v44 = *(void *)(v6 + 16) - *(void *)(v6 + 8);
    v476[0] = (void *)a1;
    v476[1] = (void *)(v6 + 8);
    uint64_t v34 = sub_24848C318(a1, v6, v44, (uint64_t)v476);
    if (!v34) {
      goto LABEL_63;
    }
    goto LABEL_111;
  }
  sub_24841DDC8(&v503, 4uLL);
  for (uint64_t m = 0; m != 4; ++m)
    *(unsigned char *)(v504.i64[1] + m) = *(unsigned char *)(v6 + m);
  if (*(int *)(a1 + 2872) < 0) {
    int v10 = 4;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 2872);
  }
  size_t v11 = *(const void ***)(v6 + 8);
  uint64_t v12 = *(void *)(v6 + 16);
  sub_2483D9E94();
  if (!v13)
  {
    sub_24848C860("%s:%d: BrotliEncoderCreateInstance failed\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 469);
    goto LABEL_108;
  }
  uint64_t v14 = v13;
  uint64_t v15 = (void **)(v12 - (void)v11);
  if (!*(_DWORD *)(v13 + 6980))
  {
    *(_DWORD *)(v13 + 4) = v10;
    *(void *)(v13 + 24) = v15;
  }
  sub_24841DDC8((size_t *)v476, 0x20000uLL);
  unint64_t v496 = (unint64_t)v15;
  int v516 = v11;
  int v512 = 0;
  while (1)
  {
    v510[0] = 0x20000;
    v507[0] = v476[2];
    int v16 = sub_2483DA228(v14, 2, &v496, (const void **)&v516, v510, v507, (size_t *)&v512);
    if (!v16) {
      break;
    }
    size_t v17 = (char *)v507[0] - (char *)v476[2];
    unint64_t v18 = (char *)v507[0] - (char *)v476[2] + v503;
    sub_2484106F0(&v503, v18);
    if (v504.i64[1]) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v503 = v19;
    memcpy((void *)(v504.i64[1] + v19 - v17), v476[2], v17);
    if (*(_DWORD *)(v14 + 6972) == 2 && !*(void *)(v14 + 6936)) {
      goto LABEL_94;
    }
  }
  sub_24848C860("%s:%d: Brotli compression failed\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 489);
LABEL_94:
  uint64_t v60 = v476[2];
  v476[2] = 0;
  if (v60)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(v60 - 3));
    free((void *)*(v60 - 4));
  }
  sub_2483DA048(v14);
  if (!v16)
  {
LABEL_108:
    uint64_t v34 = 1;
    *(_DWORD *)(a1 + 2852) = 1;
LABEL_109:
    uint64_t v71 = v504.i64[1];
    v504.i64[1] = 0;
    if (v71)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v71 - 24));
      free(*(void **)(v71 - 32));
    }
LABEL_111:
    sub_24848C89C(&v488, 0);
    goto LABEL_184;
  }
  LODWORD(v516) = 1651470946;
  unint64_t v61 = v503;
  uint64_t v62 = *(void *)(a1 + 144);
  if (v503 <= 0xFFFFFFF7) {
    unint64_t v63 = 8;
  }
  else {
    unint64_t v63 = 16;
  }
  uint64_t v64 = v62 + v63;
  uint64_t v65 = *(void **)(a1 + 176);
  if (v65)
  {
    char v66 = (void (*)(void, unint64_t))v65[3];
    if (v66)
    {
      v66(*v65, v62 + v63);
      *(void *)(a1 + 160) = v64;
    }
  }
  *(void *)(a1 + 144) = v64;
  uint64_t v34 = sub_24845C0B4(a1 + 104, &v503);
  if (v34) {
    goto LABEL_109;
  }
  uint64_t v67 = *(void *)(a1 + 144);
  int v68 = *(void **)(a1 + 176);
  if (v68)
  {
    uint64_t v69 = (void (*)(void, uint64_t))v68[3];
    if (v69)
    {
      v69(*v68, v62);
      *(void *)(a1 + 160) = v62;
    }
  }
  *(void *)(a1 + 144) = v62;
  uint64_t v70 = v67 - v64;
  if (v67 - v64 > v61) {
    goto LABEL_108;
  }
  sub_24848807C(v476, a1 + 104, v63, 0);
  uint64_t v34 = v478;
  if (v478) {
    goto LABEL_109;
  }
  long long v80 = (int8x8_t *)v476[0];
  char v81 = v476[1];
  long long v82 = v476[2];
  uint64_t v498 = v477;
  v476[0] = 0;
  v476[1] = 0;
  uint64_t v83 = sub_248488A74((uint64_t)&v516, v70, v61 > 0xFFFFFFF7, v80);
  unint64_t v496 = (unint64_t)v80 + v83;
  v497.i64[0] = (uint64_t)v81 - v83;
  v497.i64[1] = (uint64_t)v82 + v83;
  sub_24845C478(&v496);
  sub_24845C478(v476);
  long long v84 = *(void **)(a1 + 176);
  if (v84)
  {
    uint64_t v85 = (void (*)(void, uint64_t))v84[3];
    if (v85)
    {
      v85(*v84, v67);
      *(void *)(a1 + 160) = v67;
    }
  }
  *(void *)(a1 + 144) = v67;
  sub_248488418((void *)(a1 + 104));
  uint64_t v86 = v504.i64[1];
  v504.i64[1] = 0;
  if (v86)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v86 - 24));
    free(*(void **)(v86 - 32));
  }
LABEL_63:
  sub_24848C89C(&v488, 0);
LABEL_183:
  uint64_t v34 = 0;
LABEL_184:
  uint64_t v105 = v495;
  uint64_t v495 = 0;
  if (v105)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v105 - 24));
    free(*(void **)(v105 - 32));
  }
  return v34;
}

void sub_24848BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  uint64_t v72 = *(void *)(v70 - 160);
  *(void *)(v70 - 160) = 0;
  if (v72)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v72 - 24));
    free(*(void **)(v72 - 32));
  }
  uint64_t v73 = *(void *)(v70 - 136);
  *(void *)(v70 - 136) = 0;
  if (v73)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v73 - 24));
    free(*(void **)(v73 - 32));
  }
  sub_2484510A0(*(void **)(v70 - 112));
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a21) {
    operator delete(a21);
  }
  uint64_t v74 = *(void *)(v70 - 232);
  *(void *)(v70 - 232) = 0;
  if (v74)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v74 - 24));
    free(*(void **)(v74 - 32));
  }
  if (a70)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a70 - 24));
    free(*(void **)(a70 - 32));
  }
  if (a37)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a37 - 24));
    free(*(void **)(a37 - 32));
  }
  uint64_t v75 = *(void *)(v70 - 192);
  *(void *)(v70 - 192) = 0;
  if (v75)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v75 - 24));
    free(*(void **)(v75 - 32));
  }
  if (a56)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a56 - 24));
    free(*(void **)(a56 - 32));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a67)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a67 - 24));
    free(*(void **)(a67 - 32));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24848BF18(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24841D660(a1 + 728);
  if (*(unsigned char *)(a1 + 736)) {
    unsigned int v5 = 8 * *(_DWORD *)(a1 + 740) + 8;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a1 + 744);
  }
  if (*(unsigned char *)(a1 + 361)) {
    unint64_t v6 = *(void *)(a1 + 392) - *(void *)(a1 + 384);
  }
  else {
    unint64_t v6 = 0;
  }
  if (v4 > 0x40000000
    || ((v7 = v5, v8 = v5 > 0x40000000, unint64_t v9 = v4 * v5, !v8) ? (v10 = v9 >= 0x10000000001) : (v10 = 1), v10))
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    if (!a2) {
      return v11;
    }
LABEL_14:
    uint64_t v12 = "Too large image dimensions";
LABEL_15:
    MEMORY[0x24C579E00](a2, v12);
    return v11;
  }
  if (v6 >= 0x10000001)
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    if (!a2) {
      return v11;
    }
    uint64_t v12 = "Too large ICC profile size";
    goto LABEL_15;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 624);
  if (v14 >= 0x101)
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    if (!a2) {
      return v11;
    }
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 344))
  {
    uint64_t v11 = 10;
    if (!a2) {
      return v11;
    }
    uint64_t v12 = "Too high modular bit depth";
    goto LABEL_15;
  }
  if (v4 > 0x40000 || v7 > 0x40000 || v9 >= 0x10000001)
  {
    uint64_t v11 = 10;
    if (!a2) {
      return v11;
    }
    goto LABEL_14;
  }
  if (v6 > 0x400000)
  {
    uint64_t v11 = 10;
    if (!a2) {
      return v11;
    }
    uint64_t v12 = "Too large ICC profile";
    goto LABEL_15;
  }
  if (v14 > 4)
  {
    uint64_t v11 = 10;
    if (!a2) {
      return v11;
    }
LABEL_22:
    uint64_t v12 = "Too many extra channels";
    goto LABEL_15;
  }
  uint64_t v15 = *(void *)(a1 + 632);
  uint64_t v16 = *(void *)(a1 + 640) - v15;
  if (!v16) {
    return 5;
  }
  unint64_t v17 = v16 / 96;
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  unint64_t v18 = (int *)(v15 + 12);
  uint64_t v11 = 5;
  while (1)
  {
    int v19 = *v18;
    v18 += 24;
    if (v19 == 4) {
      break;
    }
    if (!--v17) {
      return v11;
    }
  }
  uint64_t v11 = 10;
  if (a2)
  {
    uint64_t v12 = "CMYK channel not allowed";
    goto LABEL_15;
  }
  return v11;
}

uint64_t sub_24848C0E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7) {
    unint64_t v9 = 8;
  }
  else {
    unint64_t v9 = 16;
  }
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void **)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = (void (*)(void, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v8 + v9);
      *(void *)(a1 + 160) = v10;
    }
  }
  *(void *)(a1 + 144) = v10;
  uint64_t v13 = *a4;
  sub_24848807C(&v36, *a4 + 104, *(void *)a4[1] + 4, 0);
  uint64_t result = v39;
  if (!v39)
  {
    uint64_t v15 = v36;
    uint64_t v35 = v38;
    BOOL v36 = 0;
    uint64_t v16 = (char *)v15 + 4;
    int64x2_t v17 = v37;
    v37.i64[0] = 0;
    uint64_t v18 = *(void *)(v13 + 2856);
    *(void *)(v13 + 2856) = v18 + 1;
    v15->i8[0] = BYTE3(v18);
    v15->i8[1] = BYTE2(v18);
    v15->i8[2] = BYTE1(v18);
    v15->i8[3] = v18;
    int64x2_t v32 = vaddq_s64(v17, (int64x2_t)xmmword_2484DCF70);
    uint64_t v19 = a4[1];
    unint64_t v20 = *(void *)v19;
    memcpy(v16, *(const void **)(v19 + 16), *(void *)v19);
    uint64_t v33 = &v16[v20];
    v21.i64[0] = v20;
    v21.i64[0] = vsubq_s64(v32, v21).u64[0];
    v21.i64[1] = vaddq_s64(v32, vdupq_n_s64(v20)).i64[1];
    int64x2_t v34 = v21;
    sub_24845C478(&v33);
    sub_24845C478(&v36);
    uint64_t v22 = *(void *)(a1 + 144);
    uint64_t v23 = *(void **)(a1 + 176);
    if (v23)
    {
      uint64_t v24 = (void (*)(void, uint64_t))v23[3];
      if (v24)
      {
        v24(*v23, v8);
        *(void *)(a1 + 160) = v8;
      }
    }
    *(void *)(a1 + 144) = v8;
    unint64_t v25 = v22 - v10;
    if (v25 <= a3)
    {
      sub_24848807C(&v36, a1 + 104, v9, 0);
      uint64_t result = v39;
      if (!v39)
      {
        BOOL v26 = a3 > 0xFFFFFFF7;
        uint64_t v27 = v36;
        int64x2_t v28 = v37;
        uint64_t v35 = v38;
        BOOL v36 = 0;
        v37.i64[0] = 0;
        uint64_t v29 = sub_248488A74(a2, v25, v26, v27);
        uint64_t v33 = (char *)v27 + v29;
        v34.i64[0] = v28.i64[0] - v29;
        v34.i64[1] = v28.i64[1] + v29;
        sub_24845C478(&v33);
        sub_24845C478(&v36);
        int v30 = *(void **)(a1 + 176);
        if (v30)
        {
          int v31 = (void (*)(void, uint64_t))v30[3];
          if (v31)
          {
            v31(*v30, v22);
            *(void *)(a1 + 160) = v22;
          }
        }
        *(void *)(a1 + 144) = v22;
        sub_248488418((void *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      uint64_t result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

uint64_t sub_24848C318(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7) {
    unint64_t v9 = 8;
  }
  else {
    unint64_t v9 = 16;
  }
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void **)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = (void (*)(void, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v8 + v9);
      *(void *)(a1 + 160) = v10;
    }
  }
  *(void *)(a1 + 144) = v10;
  uint64_t result = sub_248467EF8(*(void *)a4 + 104, *(void **)(a4 + 8));
  if (!result)
  {
    uint64_t v14 = *(void *)(a1 + 144);
    uint64_t v15 = *(void **)(a1 + 176);
    if (v15)
    {
      uint64_t v16 = (void (*)(void, uint64_t))v15[3];
      if (v16)
      {
        v16(*v15, v8);
        *(void *)(a1 + 160) = v8;
      }
    }
    *(void *)(a1 + 144) = v8;
    unint64_t v17 = v14 - v10;
    if (v17 <= a3)
    {
      sub_24848807C(&v26, a1 + 104, v9, 0);
      uint64_t result = v30;
      if (!v30)
      {
        BOOL v18 = a3 > 0xFFFFFFF7;
        uint64_t v19 = v26;
        uint64_t v20 = v27;
        uint64_t v21 = v28;
        v25[3] = v29;
        BOOL v26 = 0;
        uint64_t v27 = 0;
        uint64_t v22 = sub_248488A74(a2, v17, v18, v19);
        v25[0] = (char *)v19 + v22;
        v25[1] = v20 - v22;
        v25[2] = v21 + v22;
        sub_24845C478(v25);
        sub_24845C478(&v26);
        uint64_t v23 = *(void **)(a1 + 176);
        if (v23)
        {
          uint64_t v24 = (void (*)(void, uint64_t))v23[3];
          if (v24)
          {
            v24(*v23, v14);
            *(void *)(a1 + 160) = v14;
          }
        }
        *(void *)(a1 + 144) = v14;
        sub_248488418((void *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      uint64_t result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

void *sub_24848C494(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    do
    {
      unsigned int v5 = a3;
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      sub_24848C7C4(a3, v6);
      v5[1] = v4[1];
      uint64_t v7 = v4[2];
      v4[2] = 0;
      sub_24848C89C(v5 + 2, v7);
      v5[3] = v4[3];
      uint64_t v8 = v4[4];
      v4[4] = 0;
      uint64_t v9 = v5[4];
      v5[4] = v8;
      if (v9) {
        ((void (*)(void))v5[5])();
      }
      void v5[5] = v4[5];
      v4 += 6;
      a3 = v5 + 6;
    }
    while (v4 != a2);
    return v5 + 6;
  }
  return a3;
}

void *sub_24848C540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 40))();
  }
  sub_24848C89C((void *)(a1 + 16), 0);

  return sub_24848C7C4((void *)a1, 0);
}

uint64_t sub_24848C59C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7) {
    unint64_t v8 = 8;
  }
  else {
    unint64_t v8 = 16;
  }
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = *(void **)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = (void (*)(void, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v7 + v8);
      *(void *)(a1 + 160) = v10;
    }
  }
  *(void *)(a1 + 144) = v10;
  uint64_t v13 = (void *)a4[1];
  unint64_t v14 = v13[1];
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = *a4 + 104;
    while (1)
    {
      size_t v17 = v14 - v15;
      sub_24848807C(&__dst, v16, 1uLL, v14 - v15);
      uint64_t result = v35;
      if (v35) {
        break;
      }
      uint64_t v19 = __dst;
      uint64_t v29 = (char *)__dst;
      long long v30 = v33;
      uint64_t v31 = v34;
      int __dst = 0;
      *(void *)&long long v33 = 0;
      if ((unint64_t)v30 < v17) {
        size_t v17 = v30;
      }
      memcpy(v19, (const void *)(*v13 + v15), v17);
      v29 += v17;
      *(void *)&long long v30 = v30 - v17;
      *((void *)&v30 + 1) += v17;
      sub_24845C478(&v29);
      if (!v35) {
        sub_24845C478(&__dst);
      }
      v15 += v17;
      if (v15 >= v14)
      {
        uint64_t v10 = *(void *)(a1 + 144);
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    uint64_t v20 = *(void **)(a1 + 176);
    if (v20)
    {
      uint64_t v21 = (void (*)(void, uint64_t))v20[3];
      if (v21)
      {
        v21(*v20, v7);
        *(void *)(a1 + 160) = v7;
      }
    }
    *(void *)(a1 + 144) = v7;
    if (v10 - v9 <= a3)
    {
      sub_24848807C(&__dst, a1 + 104, v8, 0);
      uint64_t result = v35;
      if (!v35)
      {
        BOOL v22 = a3 > 0xFFFFFFF7;
        uint64_t v23 = (int8x8_t *)__dst;
        long long v24 = v33;
        uint64_t v31 = v34;
        int __dst = 0;
        *(void *)&long long v33 = 0;
        uint64_t v25 = sub_248488A74(a2, v10 - v9, v22, v23);
        uint64_t v29 = (char *)v23 + v25;
        *(void *)&long long v30 = v24 - v25;
        *((void *)&v30 + 1) = *((void *)&v24 + 1) + v25;
        sub_24845C478(&v29);
        sub_24845C478(&__dst);
        BOOL v26 = *(void **)(a1 + 176);
        if (v26)
        {
          uint64_t v27 = (void (*)(void, uint64_t))v26[3];
          if (v27)
          {
            v27(*v26, v10);
            *(void *)(a1 + 160) = v10;
          }
        }
        *(void *)(a1 + 144) = v10;
        sub_248488418((void *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      uint64_t result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

void *sub_24848C7C4(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    unint64_t v3 = result;
    unint64_t v4 = *(void **)(v2 + 1176);
    if (v4)
    {
      *(void *)(v2 + 1184) = v4;
      operator delete(v4);
    }
    uint64_t v6 = (void **)(v2 + 1152);
    sub_24846941C(&v6);
    sub_248453364(v2 + 848);
    if (*(char *)(v2 + 751) < 0) {
      operator delete(*(void **)(v2 + 728));
    }
    unsigned int v5 = *(void **)(v2 + 704);
    if (v5)
    {
      *(void *)(v2 + 712) = v5;
      operator delete(v5);
    }
    sub_2484414D4(v2 + 8);
    return (void *)(*(uint64_t (**)(void, uint64_t))(v3[1] + 16))(*(void *)v3[1], v2);
  }
  return result;
}

uint64_t sub_24848C860(char *a1, ...)
{
  va_start(va, a1);
  return vfprintf((FILE *)*MEMORY[0x263EF8348], a1, va);
}

void *sub_24848C89C(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    unint64_t v3 = result;
    unint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(void *)(v2 + 16) = v4;
      operator delete(v4);
    }
    return (void *)(*(uint64_t (**)(void, uint64_t))(v3[1] + 16))(*(void *)v3[1], v2);
  }
  return result;
}

uint64_t sub_24848C8F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  if (!a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    a1 = v8;
  }
  return sub_24848C938((uint64_t)a1, a4, (uint64_t)v5);
}

uint64_t sub_24848C938(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    v6[0] = sub_2483F1794;
    v6[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))result)(*(void *)(result + 8), v6, sub_24848CA00, sub_24848C9E8, 0, a2);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = a2;
      do
        uint64_t result = (**(uint64_t (***)(void, uint64_t))a3)(**(void **)(a3 + 8), v4++);
      while (v5 != v4);
    }
  }
  return result;
}

uint64_t sub_24848C9E8(uint64_t a1, unsigned int a2)
{
  return (***(uint64_t (****)(void, void))(a1 + 8))(**(void **)(*(void *)(a1 + 8) + 8), a2);
}

uint64_t sub_24848CA00(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t JxlEncoderSetColorEncoding(uint64_t a1, int *a2)
{
  if (!*(unsigned char *)(a1 + 2867) || *(unsigned char *)(a1 + 2868)) {
    goto LABEL_3;
  }
  if (sub_248418D88(a1 + 368, a2))
  {
    uint64_t result = 1;
    *(_DWORD *)(a1 + 2852) = 1;
    return result;
  }
  sub_2483EBC50(a1 + 352);
  int v4 = *(_DWORD *)(a1 + 2700);
  if (*(_DWORD *)(a1 + 408) != 1)
  {
    if (v4 == 3) {
      goto LABEL_10;
    }
LABEL_3:
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  if (v4 != 1) {
    goto LABEL_3;
  }
LABEL_10:
  *(unsigned char *)(a1 + 2868) = 1;
  if (*(unsigned char *)(a1 + 2869)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 416))
  {
    float v5 = 255.0;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 424);
    float v5 = 255.0;
    if (v6 == 18) {
      float v5 = 1000.0;
    }
    if (v6 == 16) {
      float v5 = 10000.0;
    }
  }
  uint64_t result = 0;
  *(float *)(a1 + 604) = v5;
  return result;
}

uint64_t JxlEncoderSetICCProfile(uint64_t a1, char *a2, unint64_t a3)
{
  if (!*(unsigned char *)(a1 + 2867) || *(unsigned char *)(a1 + 2868))
  {
    int v4 = 129;
LABEL_4:
    *(_DWORD *)(a1 + 2852) = v4;
    return 1;
  }
  if (!a3)
  {
    int v4 = 4;
    goto LABEL_4;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  sub_2483EFEC8(__p, a2, &a2[a3], a3);
  if (!*(unsigned char *)(a1 + 296))
  {
    unint64_t v8 = *(void **)(a1 + 384);
    if (v8)
    {
      *(void *)(a1 + 392) = v8;
      operator delete(v8);
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      *(void *)(a1 + 400) = 0;
    }
    *(_OWORD *)(a1 + 384) = *(_OWORD *)__p;
    *(void *)(a1 + 400) = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    *(unsigned char *)(a1 + 380) = 0;
    *(unsigned char *)(a1 + 361) = 1;
LABEL_14:
    int v9 = *(_DWORD *)(a1 + 2700);
    if (*(_DWORD *)(a1 + 408) == 1)
    {
      if (v9 != 1) {
        goto LABEL_16;
      }
    }
    else if (v9 != 3)
    {
      goto LABEL_16;
    }
    *(unsigned char *)(a1 + 2868) = 1;
    if (!*(unsigned char *)(a1 + 2869))
    {
      if (*(unsigned char *)(a1 + 416))
      {
        float v10 = 255.0;
      }
      else
      {
        int v11 = *(_DWORD *)(a1 + 424);
        float v10 = 255.0;
        if (v11 == 18) {
          float v10 = 1000.0;
        }
        if (v11 == 16) {
          float v10 = 10000.0;
        }
      }
      *(float *)(a1 + 604) = v10;
    }
    if (!*(_DWORD *)(a1 + 2684) && *(unsigned char *)(a1 + 296)) {
      sub_2483F0B98(a1 + 352, *(void *)(a1 + 232), *(unsigned int (**)(uint64_t, uint64_t, uint64_t, double *, int *))(a1 + 240));
    }
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  BOOL v7 = sub_248418CB0(a1 + 368, __p, *(void *)(a1 + 232), *(unsigned int (**)(uint64_t, void, void, int *, int *))(a1 + 240));
  *(unsigned char *)(a1 + 361) = !v7;
  if (!v7) {
    goto LABEL_14;
  }
LABEL_16:
  *(_DWORD *)(a1 + 2852) = 4;
  uint64_t v5 = 1;
LABEL_30:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_24848CC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double JxlEncoderInitBasicInfo(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_2484DCF80;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0x300000001;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)&double result = 0x10000000ALL;
  *(_OWORD *)(a1 + 80) = xmmword_2484DCF90;
  return result;
}

double JxlEncoderInitFrameHeader(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_2484DCFA0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  return result;
}

void *JxlEncoderInitBlendInfo(void *result)
{
  void *result = 0;
  result[1] = 0;
  return result;
}

uint64_t JxlEncoderSetBasicInfo(uint64_t a1, uint64_t a2)
{
  if (sub_24841D6C8(a1 + 728, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8))
    || sub_24848D014(*(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16)))
  {
    goto LABEL_3;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 332) = v6;
  int v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 336) = v7;
  *(unsigned char *)(a1 + 328) = v7 != 0;
  BOOL v8 = (!*(_DWORD *)(a2 + 36) || v6 <= 0xC) && *(_DWORD *)(a2 + 60) < 0xDu;
  *(unsigned char *)(a1 + 344) = v8;
  unint64_t v9 = *(unsigned int *)(a2 + 96);
  if (*(void *)(a2 + 96) && *(void *)(a2 + 96) != *(void *)(a2 + 4))
  {
    if (v9 > 0x40000000) {
      goto LABEL_3;
    }
    unint64_t v10 = *(unsigned int *)(a2 + 100);
    if (v10 > 0x40000000 || sub_24841D6C8(a1 + 560, v9, v10)) {
      goto LABEL_3;
    }
    *(unsigned char *)(a1 + 558) = 1;
  }
  unint64_t v11 = *(unsigned int *)(a2 + 56);
  *(_DWORD *)(a1 + 624) = v11;
  sub_248420890((int64x2_t *)(a1 + 632), v11);
  int v12 = *(_DWORD *)(a2 + 60);
  if (*(_DWORD *)(a2 + 56))
  {
    if (v12)
    {
      *(_OWORD *)&void v31[4] = 0u;
      long long v32 = 0u;
      LODWORD(__p) = 0;
      HIDWORD(__p) = v12;
      *(_DWORD *)uint64_t v31 = *(_DWORD *)(a2 + 64);
      if (JxlEncoderSetExtraChannelInfo(a1, 0, &__p)) {
        goto LABEL_3;
      }
    }
  }
  else if (v12)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + 345) = *(_DWORD *)(a2 + 36) == 0;
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 - 1) > 7) {
    goto LABEL_3;
  }
  *(_DWORD *)(a1 + 552) = v13;
  if ((*(_DWORD *)(a2 + 52) | 2) != 3) {
    goto LABEL_3;
  }
  float v14 = *(float *)(a2 + 20);
  if (v14 != 0.0) {
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 2868))
  {
    if (*(unsigned char *)(a1 + 416))
    {
      float v14 = 255.0;
    }
    else
    {
      int v29 = *(_DWORD *)(a1 + 424);
      float v14 = 255.0;
      if (v29 == 18) {
        float v14 = 1000.0;
      }
      if (v29 == 16) {
        float v14 = 10000.0;
      }
    }
LABEL_23:
    *(float *)(a1 + 604) = v14;
    *(unsigned char *)(a1 + 2869) = 1;
  }
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 612) = *(_DWORD *)(a2 + 28) != 0;
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 32);
  long long v15 = *(_OWORD *)(a2 + 188);
  long long v17 = *(_OWORD *)(a2 + 160);
  long long v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 2792) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 2808) = v17;
  *(_OWORD *)(a1 + 2824) = v16;
  *(_OWORD *)(a1 + 2836) = v15;
  long long v19 = *(_OWORD *)(a2 + 112);
  long long v18 = *(_OWORD *)(a2 + 128);
  long long v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 2728) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2744) = v20;
  *(_OWORD *)(a1 + 2760) = v19;
  *(_OWORD *)(a1 + 2776) = v18;
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v21 = *(_OWORD *)(a2 + 64);
  long long v23 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 2664) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2680) = v23;
  *(_OWORD *)(a1 + 2696) = v22;
  *(_OWORD *)(a1 + 2712) = v21;
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 2867) = 1;
  int v24 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 557) = v24 != 0;
  if (!v24) {
    goto LABEL_28;
  }
  int v25 = *(_DWORD *)(a2 + 84);
  if (!v25 || (int v26 = *(_DWORD *)(a2 + 80)) == 0)
  {
LABEL_3:
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  *(_DWORD *)(a1 + 696) = v26;
  *(_DWORD *)(a1 + 700) = v25;
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 708) = *(_DWORD *)(a2 + 92) != 0;
LABEL_28:
  long long __p = 0;
  *(void *)uint64_t v31 = 0;
  *(void *)&v31[8] = 0;
  int v27 = sub_24848BF18(a1, (uint64_t)&__p);
  if (v27 == -1 || (uint64_t v4 = 0, v28 = *(_DWORD *)(a1 + 300), v28 < v27) && v28 != -1)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    uint64_t v4 = 1;
  }
  if ((v31[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  return v4;
}

void sub_24848CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24848D014(unsigned int a1, unsigned int a2)
{
  if (!a2)
  {
    if (a1 - 1 >= 0x18)
    {
      sub_24848C860("%s:%d: Invalid value for bits_per_sample\n");
      return 1;
    }
    return 0;
  }
  if (a2 <= 8 && a2 + 24 >= a1 && a2 + 3 <= a1) {
    return 0;
  }
  sub_24848C860("%s:%d: Invalid float description\n");
  return 1;
}

uint64_t JxlEncoderSetExtraChannelInfo(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (*(unsigned int *)(a1 + 624) <= a2 || sub_24848D014(a3[1], a3[2]))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 632) + 96 * a2;
    *(_DWORD *)(v8 + 12) = *a3;
    unsigned int v9 = a3[1];
    *(_DWORD *)(v8 + 28) = v9;
    BOOL v11 = v9 < 0xD && *(unsigned char *)(a1 + 344) != 0;
    *(unsigned char *)(a1 + 344) = v11;
    int v12 = a3[2];
    *(_DWORD *)(v8 + 32) = v12;
    *(unsigned char *)(v8 + 24) = v12 != 0;
    *(_DWORD *)(v8 + 40) = a3[3];
    MEMORY[0x24C579E00](v8 + 48, &unk_248558F79);
    *(unsigned char *)(v8 + 72) = a3[5] != 0;
    *(_DWORD *)(v8 + 92) = a3[10];
    *(_DWORD *)(v8 + 76) = a3[6];
    *(_DWORD *)(v8 + 80) = a3[7];
    *(_DWORD *)(v8 + 84) = a3[8];
    *(_DWORD *)(v8 + 88) = a3[9];
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    int v13 = sub_24848BF18(a1, (uint64_t)__p);
    if (v13 == -1 || (uint64_t v6 = 0, v14 = *(_DWORD *)(a1 + 300), v14 < v13) && v14 != -1)
    {
      *(_DWORD *)(a1 + 2852) = 129;
      uint64_t v6 = 1;
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  return v6;
}

void sub_24848D1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double JxlEncoderInitExtraChannelInfo(int a1, uint64_t a2)
{
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = 8;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t JxlEncoderSetUpsamplingMode(_DWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = 0;
  switch(a2)
  {
    case 1uLL:
      return result;
    case 2uLL:
    case 4uLL:
    case 8uLL:
      if (a3 <= -2) {
        goto LABEL_3;
      }
      if (a3 >= 2)
      {
        int v5 = 128;
        goto LABEL_6;
      }
      int v7 = a1 + 230;
      if (a2 != 4) {
        int v7 = a1 + 285;
      }
      if (a2 == 2) {
        uint64_t v8 = a1 + 215;
      }
      else {
        uint64_t v8 = v7;
      }
      if (!a3)
      {
        uint64_t v9 = 840;
        if (a2 == 4) {
          uint64_t v9 = 220;
        }
        if (a2 == 2) {
          size_t v10 = 60;
        }
        else {
          size_t v10 = v9;
        }
        a1[214] |= a2 >> 1;
        bzero(v8, v10);
        switch(a2)
        {
          case 2uLL:
            uint64_t result = 0;
            a1[224] = 1065353216;
            return result;
          case 4uLL:
            uint64_t v13 = 0;
            *(void *)&long long v14 = 0x1800000013;
            DWORD2(v14) = 49;
            do
            {
              v8[*(int *)((char *)&v14 + v13)] = 1065353216;
              v13 += 4;
            }
            while (v13 != 12);
            break;
          case 8uLL:
            for (uint64_t i = 0; i != 10; ++i)
            {
              uint64_t result = 0;
              v8[dword_248550744[i]] = 1065353216;
            }
            return result;
        }
        return 0;
      }
      if (a3 == -1)
      {
        uint64_t result = 0;
        a1[214] &= ~(a2 >> 1);
        return result;
      }
      JxlEncoderSetUpsamplingMode(a1, a2, 0);
      if (a2 != 8)
      {
        if (a2 == 4)
        {
          uint64_t result = 0;
          v8[19] = 0;
          v8[24] = 1056964608;
          return result;
        }
        return 0;
      }
      uint64_t v12 = 0;
      long long v14 = xmmword_2484DCFB0;
      do
      {
        v8[*(int *)((char *)&v14 + v12)] = 0;
        v12 += 4;
      }
      while (v12 != 16);
      uint64_t result = 0;
      v8[54] = 1056964608;
      v8[124] = 1056964608;
      return result;
    default:
LABEL_3:
      int v5 = 129;
LABEL_6:
      a1[713] = v5;
      return 1;
  }
}

double JxlEncoderSetExtraChannelName(uint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 624) <= a2)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return result;
  }
  unint64_t v5 = a4;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2483F04E4();
  }
  if (a4 >= 0x17)
  {
    uint64_t v9 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v9 = a4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (long long *)operator new(v9 + 1);
    *((void *)&v15 + 1) = v5;
    unint64_t v16 = v10 | 0x8000000000000000;
    *(void *)&long long v15 = v8;
  }
  else
  {
    HIBYTE(v16) = a4;
    uint64_t v8 = &v15;
    if (!a4) {
      goto LABEL_11;
    }
  }
  do
  {
    char v11 = *a3++;
    *(unsigned char *)uint64_t v8 = v11;
    uint64_t v8 = (long long *)((char *)v8 + 1);
    --v5;
  }
  while (v5);
LABEL_11:
  *(unsigned char *)uint64_t v8 = 0;
  uint64_t v12 = *(void *)(a1 + 632) + 96 * a2;
  uint64_t v13 = v12 + 48;
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*(void **)v13);
  }
  double result = *(double *)&v15;
  *(_OWORD *)uint64_t v13 = v15;
  *(void *)(v13 + 16) = v16;
  return result;
}

char *JxlEncoderFrameSettingsCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(*(uint64_t (**)(void, uint64_t))(a1 + 8))(*(void *)a1, 784);
  unint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v42 = 0;
    uint64_t v43 = a1;
    goto LABEL_48;
  }
  bzero(v4, 0x310uLL);
  *((_DWORD *)v5 + 4) = 1065353216;
  *((void *)v5 + 3) = 0;
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 5) = 0;
  v5[48] = 0;
  *((void *)v5 + 8) = 0xFFFFFFFF00000003;
  *((_DWORD *)v5 + 25) = -1;
  *((_WORD *)v5 + 52) = -1;
  *((void *)v5 + 11) = -1;
  v5[96] = -1;
  *((void *)v5 + 14) = -1;
  *((void *)v5 + 15) = -1;
  *(void *)(v5 + 125) = -1;
  *(_DWORD *)(v5 + 201) = 16843009;
  v5[205] = 1;
  *(_OWORD *)(v5 + 216) = xmmword_2484DCB30;
  *((_DWORD *)v5 + 58) = 1056964608;
  *(void *)(v5 + 252) = 0;
  *((_DWORD *)v5 + 65) = 0;
  *(void *)(v5 + 236) = 0;
  *(void *)(v5 + 244) = 0;
  uint64_t v6 = operator new(0x20uLL);
  *((void *)v5 + 30) = v6;
  *((void *)v5 + 32) = v6 + 2;
  _OWORD *v6 = xmmword_24855076C;
  v6[1] = unk_24855077C;
  *((void *)v5 + 31) = v6 + 2;
  *((_DWORD *)v5 + 66) = 1119879168;
  *((void *)v5 + 34) = 32;
  *((void *)v5 + 35) = 0xFFFFFFFFLL;
  *((void *)v5 + 36) = 0x33F8147AELL;
  v5[296] = 0;
  *(_OWORD *)(v5 + 300) = xmmword_2484DCB20;
  *((_DWORD *)v5 + 79) = 2;
  *((void *)v5 + 40) = 0;
  *((void *)v5 + 41) = 0;
  *((void *)v5 + 42) = 0;
  *((void *)v5 + 43) = -1;
  *((_DWORD *)v5 + 88) = 256;
  v5[356] = 0;
  v5[360] = 0;
  *((void *)v5 + 46) = -1;
  *((void *)v5 + 47) = 0x42BE0000FFFFFFFFLL;
  *((void *)v5 + 48) = 0x40042A00000;
  v5[392] = 0;
  *(void *)(v5 + 396) = -1;
  v5[404] = 0;
  *((void *)v5 + 51) = 0x3F800000BF800000;
  *((void *)v5 + 52) = -1;
  v5[424] = 1;
  *(_OWORD *)(v5 + 492) = 0u;
  *((_OWORD *)v5 + 29) = 0u;
  *((_OWORD *)v5 + 30) = 0u;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((void *)v5 + 80) = 0;
  *((_OWORD *)v5 + 38) = 0u;
  *((_OWORD *)v5 + 39) = 0u;
  *((_OWORD *)v5 + 36) = 0u;
  *((_OWORD *)v5 + 37) = 0u;
  *((_OWORD *)v5 + 34) = 0u;
  *((_OWORD *)v5 + 35) = 0u;
  *((_OWORD *)v5 + 32) = 0u;
  *((_OWORD *)v5 + 33) = 0u;
  v5[772] = 0;
  *((void *)v5 + 97) = 0;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  uint64_t v42 = v5;
  uint64_t v43 = a1;
  *(void *)unint64_t v5 = a1;
  if (a2)
  {
    v5[8] = *(unsigned char *)(a2 + 8);
    sub_2484568E0((uint64_t)(v5 + 16), a2 + 16);
    long long v7 = *(_OWORD *)(a2 + 656);
    long long v8 = *(_OWORD *)(a2 + 672);
    long long v9 = *(_OWORD *)(a2 + 688);
    *((void *)v5 + 88) = *(void *)(a2 + 704);
    *((_OWORD *)v5 + 42) = v8;
    *((_OWORD *)v5 + 43) = v9;
    *((_OWORD *)v5 + 41) = v7;
    if (v5 == (char *)a2)
    {
LABEL_25:
      std::string::operator=((std::string *)(v5 + 736), (const std::string *)(a2 + 736));
      long long v24 = *(_OWORD *)(a2 + 760);
      *((void *)v5 + 97) = *(void *)(a2 + 776);
      *(_OWORD *)(v5 + 760) = v24;
      goto LABEL_26;
    }
    uint64_t v10 = *(char **)(a2 + 712);
    char v11 = *(unsigned char **)(a2 + 720);
    size_t v12 = v11 - v10;
    unint64_t v13 = (v11 - v10) >> 4;
    uint64_t v14 = *((void *)v5 + 91);
    long long v15 = (char *)*((void *)v5 + 89);
    if (v13 <= (v14 - (uint64_t)v15) >> 4)
    {
      long long v18 = (void **)(v5 + 720);
      long long v19 = (unsigned char *)*((void *)v5 + 90);
      unint64_t v20 = (v19 - v15) >> 4;
      if (v20 < v13)
      {
        long long v21 = &v10[16 * v20];
        if (v19 != v15)
        {
          memmove(*((void **)v5 + 89), *(const void **)(a2 + 712), v19 - v15);
          long long v15 = (char *)*v18;
        }
        size_t v12 = v11 - v21;
        if (v11 == v21) {
          goto LABEL_24;
        }
        long long v22 = v15;
        long long v23 = v21;
        goto LABEL_23;
      }
    }
    else
    {
      if (v15)
      {
        *((void *)v5 + 90) = v15;
        operator delete(v15);
        uint64_t v14 = 0;
        *((void *)v5 + 89) = 0;
        *((void *)v5 + 90) = 0;
        *((void *)v5 + 91) = 0;
      }
      if ((v12 & 0x8000000000000000) != 0) {
        sub_2483E92E8();
      }
      uint64_t v16 = v14 >> 3;
      if (v14 >> 3 <= v13) {
        uint64_t v16 = (v11 - v10) >> 4;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      sub_24844CDF8((void *)v5 + 89, v17);
      long long v18 = (void **)(v5 + 720);
      long long v15 = (char *)*((void *)v5 + 90);
    }
    if (v11 == v10)
    {
LABEL_24:
      *long long v18 = &v15[v12];
      goto LABEL_25;
    }
    long long v22 = v15;
    long long v23 = v10;
LABEL_23:
    memmove(v22, v23, v12);
    goto LABEL_24;
  }
  v5[8] = 0;
LABEL_26:
  *((_DWORD *)v5 + 104) = *(_DWORD *)(a1 + 300);
  unint64_t v25 = *(unsigned int *)(a1 + 624);
  int v41 = 0;
  sub_24848D9EC((char **)v5 + 3, v25, &v41);
  int v27 = *(char **)(a1 + 48);
  unint64_t v26 = *(void *)(a1 + 56);
  if ((unint64_t)v27 >= v26)
  {
    int v29 = *(char **)(a1 + 40);
    uint64_t v30 = (v27 - v29) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      sub_2483E92E8();
    }
    uint64_t v32 = v26 - (void)v29;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 60) {
        sub_2483E9338();
      }
      uint64_t v34 = (char *)operator new(16 * v33);
    }
    else
    {
      uint64_t v34 = 0;
    }
    unsigned int v35 = &v34[16 * v30];
    uint64_t v42 = 0;
    *(void *)unsigned int v35 = v5;
    *((void *)v35 + 1) = a1;
    int v28 = v35 + 16;
    if (v27 == v29)
    {
      int64x2_t v37 = vdupq_n_s64((unint64_t)v27);
    }
    else
    {
      do
      {
        uint64_t v36 = *((void *)v27 - 2);
        v27 -= 16;
        *(void *)int v27 = 0;
        *((void *)v35 - 2) = v36;
        v35 -= 16;
        *((void *)v35 + 1) = *((void *)v27 + 1);
      }
      while (v27 != v29);
      int64x2_t v37 = *(int64x2_t *)(a1 + 40);
    }
    *(void *)(a1 + 40) = v35;
    *(void *)(a1 + 48) = v28;
    *(void *)(a1 + 56) = &v34[16 * v33];
    unsigned int v39 = (void *)v37.i64[1];
    uint64_t v38 = (void *)v37.i64[0];
    while (v39 != v38)
    {
      v39 -= 2;
      sub_24848DB18(v39);
    }
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    uint64_t v42 = 0;
    int v28 = v27 + 16;
    *(void *)int v27 = v5;
    *((void *)v27 + 1) = a1;
  }
  *(void *)(a1 + 48) = v28;
LABEL_48:
  sub_24848DB18(&v42);
  return v5;
}

void sub_24848D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24848DB18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24848D9EC(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    long long v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      long long v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        sub_2483E92E8();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      unint64_t v13 = (char *)sub_2483E9300(v12);
      long long v15 = &v13[4 * v7];
      uint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      long long v18 = v15;
      do
      {
        *(_DWORD *)long long v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      long long v19 = &v13[4 * v14];
      unint64_t v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void *sub_24848DB18(void *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = result;
    if (*(char *)(v1 + 759) < 0) {
      operator delete(*(void **)(v1 + 736));
    }
    unint64_t v3 = *(void **)(v1 + 712);
    if (v3)
    {
      *(void *)(v1 + 720) = v3;
      operator delete(v3);
    }
    sub_2484414D4(v1 + 16);
    return (void *)(*(uint64_t (**)(void, uint64_t))(v2[1] + 16))(*(void *)v2[1], v1);
  }
  return result;
}

uint64_t JxlEncoderSetFrameLossless(unsigned char *a1, int a2)
{
  if (a2 && (uint64_t v2 = *(void *)a1, *(unsigned char *)(*(void *)a1 + 2867)) && *(unsigned char *)(v2 + 345))
  {
    *(_DWORD *)(v2 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t v3 = 0;
    a1[8] = a2 != 0;
  }
  return v3;
}

uint64_t JxlEncoderSetFrameDistance(float *a1, float a2)
{
  if (a2 >= 0.0 && a2 <= 25.0)
  {
    uint64_t result = 0;
    if (a2 < 0.01 && a2 > 0.0) {
      a2 = 0.01;
    }
    a1[4] = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)a1 + 2852) = 129;
    return 1;
  }
  return result;
}

uint64_t JxlEncoderSetExtraChannelDistance(char **a1, unint64_t a2, float a3)
{
  unint64_t v4 = *((unsigned int *)*a1 + 156);
  if (v4 > a2 && (a3 == -1.0 || (a3 >= 0.0 ? (BOOL v5 = a3 <= 25.0) : (BOOL v5 = 0), v5)))
  {
    if (a3 >= 0.01 || a3 <= 0.0) {
      float v8 = a3;
    }
    else {
      float v8 = 0.01;
    }
    long long v9 = a1[3];
    unint64_t v10 = a1 + 3;
    if (a2 >= (a1[4] - v9) >> 2)
    {
      int v11 = 0;
      sub_24848D9EC(v10, v4, &v11);
      long long v9 = *v10;
    }
    uint64_t result = 0;
    *(float *)&v9[4 * a2] = v8;
  }
  else
  {
    *((_DWORD *)*a1 + 713) = 129;
    return 1;
  }
  return result;
}

float JxlEncoderDistanceFromQuality(float a1)
{
  double v1 = 0.0;
  if (a1 < 100.0)
  {
    if (a1 >= 30.0) {
      return (float)(100.0 - a1) * 0.09 + 0.1;
    }
    else {
      return a1 * -1.15 + a1 * 0.0176666667 * a1 + 25.0;
    }
  }
  return v1;
}

uint64_t JxlEncoderFrameSettingsSetOption(uint64_t *a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      if (*(unsigned char *)(*a1 + 2870))
      {
        if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF4)
        {
LABEL_10:
          *(_DWORD *)(*a1 + 2852) = 128;
          return 1;
        }
      }
      else if ((unint64_t)(a3 - 11) <= 0xFFFFFFFFFFFFFFF5)
      {
        goto LABEL_10;
      }
      uint64_t result = 0;
      *((_DWORD *)a1 + 16) = 10 - a3;
      return result;
    case 1:
      if ((unint64_t)a3 >= 5) {
        goto LABEL_49;
      }
      uint64_t result = 0;
      a1[9] = a3;
      return result;
    case 2:
      if ((unint64_t)(a3 + 1) > 9 || ((1 << (a3 + 1)) & 0x22D) == 0) {
        goto LABEL_3;
      }
      uint64_t result = 0;
      *((_DWORD *)a1 + 99) = a3;
      return result;
    case 3:
      if ((unint64_t)(a3 + 1) > 9 || ((1 << (a3 + 1)) & 0x22D) == 0) {
        goto LABEL_3;
      }
      uint64_t result = 0;
      *((_DWORD *)a1 + 100) = a3;
      return result;
    case 4:
      if ((unint64_t)a3 > 1) {
        return 1;
      }
      uint64_t result = 0;
      *((unsigned char *)a1 + 404) = a3 == 1;
      return result;
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 23:
    case 30:
    case 33:
    case 35:
    case 36:
    case 37:
      if ((unint64_t)(a3 - 2) <= 0xFFFFFFFFFFFFFFFCLL) {
        goto LABEL_3;
      }
      switch(a2)
      {
        case 6:
          uint64_t result = 0;
          *((unsigned char *)a1 + 93) = a3;
          break;
        case 7:
          uint64_t result = 0;
          *((unsigned char *)a1 + 94) = a3;
          break;
        case 8:
          uint64_t result = 0;
          *((unsigned char *)a1 + 95) = a3;
          break;
        case 9:
          goto LABEL_22;
        case 10:
          uint64_t result = 0;
          *((unsigned char *)a1 + 96) = a3;
          break;
        case 11:
          uint64_t result = 0;
          *((unsigned char *)a1 + 84) = a3 == 1;
          break;
        case 12:
          uint64_t result = 0;
          *((unsigned char *)a1 + 132) = a3;
          break;
        case 13:
          uint64_t result = 0;
          *((unsigned char *)a1 + 106) = a3 == 1;
          break;
        case 14:
          goto LABEL_24;
        case 15:
          goto LABEL_26;
        case 16:
          uint64_t result = 0;
          *((_DWORD *)a1 + 92) = a3;
          break;
        case 17:
          uint64_t result = 0;
          *((unsigned char *)a1 + 104) = a3;
          break;
        case 18:
          uint64_t result = 0;
          *((unsigned char *)a1 + 105) = a3;
          break;
        case 19:
          goto LABEL_28;
        case 22:
          goto LABEL_30;
        case 23:
          uint64_t result = 0;
          *((unsigned char *)a1 + 392) = a3 == 1;
          break;
        case 24:
          goto LABEL_33;
        case 25:
          goto LABEL_36;
        case 26:
          goto LABEL_38;
        case 27:
          goto LABEL_40;
        case 29:
          goto LABEL_42;
        case 30:
          uint64_t result = 0;
          BOOL v7 = a3 == -1 || a3 != 0;
          *((unsigned char *)a1 + 201) = v7;
          break;
        case 31:
          goto LABEL_6;
        case 32:
          goto LABEL_45;
        case 33:
          uint64_t result = 0;
          *((unsigned char *)a1 + 202) = a3 != 0;
          break;
        case 34:
          goto LABEL_47;
        case 35:
          uint64_t result = 0;
          *((unsigned char *)a1 + 203) = a3 != 0;
          break;
        case 36:
          uint64_t result = 0;
          *((unsigned char *)a1 + 204) = a3 != 0;
          break;
        case 37:
          uint64_t result = 0;
          *((unsigned char *)a1 + 205) = a3 != 0;
          break;
        default:
          goto LABEL_49;
      }
      return result;
    case 9:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL) {
        goto LABEL_3;
      }
LABEL_22:
      uint64_t result = 0;
      *((_DWORD *)a1 + 25) = a3;
      return result;
    case 14:
      if (a3 <= -2) {
        goto LABEL_3;
      }
LABEL_24:
      uint64_t result = 0;
      a1[14] = a3;
      return result;
    case 15:
      if (a3 <= -2) {
        goto LABEL_3;
      }
LABEL_26:
      uint64_t result = 0;
      a1[15] = a3;
      return result;
    case 19:
      if ((unint64_t)(a3 - 3) <= 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_3;
      }
LABEL_28:
      uint64_t result = 0;
      *((_DWORD *)a1 + 32) = a3;
      return result;
    case 22:
      if ((unint64_t)(a3 - 70914) < 0xFFFFFFFFFFFEEAFDLL) {
        goto LABEL_3;
      }
LABEL_30:
      uint64_t result = 0;
      if (a3 == -1) {
        *((_DWORD *)a1 + 97) = 1024;
      }
      else {
        *((_DWORD *)a1 + 97) = a3;
      }
      return result;
    case 24:
      if ((unint64_t)(a3 - 3) <= 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_3;
      }
LABEL_33:
      uint64_t result = 0;
      if (a3 == -1) {
        *((_DWORD *)a1 + 20) = 0;
      }
      else {
        *((_DWORD *)a1 + 20) = a3;
      }
      return result;
    case 25:
      if ((unint64_t)(a3 - 42) <= 0xFFFFFFFFFFFFFFD4) {
        goto LABEL_3;
      }
LABEL_36:
      uint64_t result = 0;
      *((_DWORD *)a1 + 93) = a3;
      return result;
    case 26:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL) {
        goto LABEL_3;
      }
LABEL_38:
      uint64_t result = 0;
      *((_DWORD *)a1 + 22) = a3;
      return result;
    case 27:
      if ((unint64_t)(a3 - 16) <= 0xFFFFFFFFFFFFFFEELL) {
        goto LABEL_3;
      }
LABEL_40:
      uint64_t result = 0;
      *((_DWORD *)a1 + 70) = a3;
      return result;
    case 29:
      if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF2) {
        goto LABEL_3;
      }
LABEL_42:
      uint64_t result = 0;
      if (a3 == -1) {
        *((_DWORD *)a1 + 59) = 0;
      }
      else {
        *((_DWORD *)a1 + 59) = a3;
      }
      return result;
    case 31:
LABEL_6:
      if ((unint64_t)a3 >= 2) {
        goto LABEL_49;
      }
      uint64_t result = 0;
      *((unsigned char *)a1 + 772) = 1;
      return result;
    case 32:
      if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF2)
      {
LABEL_3:
        uint64_t v4 = *a1;
        int v5 = 129;
LABEL_50:
        *(_DWORD *)(v4 + 2852) = v5;
        return 1;
      }
      else
      {
LABEL_45:
        uint64_t result = 0;
        *((_DWORD *)a1 + 17) = a3;
        *(_DWORD *)(*a1 + 2872) = a3;
      }
      return result;
    case 34:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL) {
        goto LABEL_49;
      }
LABEL_47:
      uint64_t result = 0;
      *((_DWORD *)a1 + 105) = a3;
      return result;
    case 38:
      if ((unint64_t)a3 >= 2) {
        goto LABEL_49;
      }
      uint64_t result = 0;
      *((unsigned char *)a1 + 424) = a3 != 0;
      return result;
    default:
LABEL_49:
      uint64_t v4 = *a1;
      int v5 = 128;
      goto LABEL_50;
  }
}

uint64_t JxlEncoderFrameSettingsSetFloatOption(float *a1, int a2, float a3)
{
  switch(a2)
  {
    case 5:
      if (a3 < 0.0) {
        goto LABEL_4;
      }
      uint64_t v5 = 0;
      a1[52] = a3;
      break;
    case 20:
      if (a3 < -1.0 || a3 > 100.0) {
        goto LABEL_26;
      }
      uint64_t v5 = 0;
      if (a3 >= -0.5) {
        a1[95] = a3;
      }
      else {
        a1[95] = 95.0;
      }
      break;
    case 21:
      if (a3 < -1.0 || a3 > 100.0) {
        goto LABEL_26;
      }
      uint64_t v5 = 0;
      if (a3 >= -0.5) {
        a1[96] = a3;
      }
      else {
        a1[96] = 80.0;
      }
      break;
    case 28:
      if (a3 < -1.0 || a3 > 100.0)
      {
LABEL_26:
        uint64_t v3 = *(void *)a1;
        int v4 = 129;
        goto LABEL_3;
      }
      uint64_t v5 = 0;
      if (a3 >= -0.5) {
        a1[58] = a3 * 0.01;
      }
      else {
        a1[58] = 0.5;
      }
      break;
    default:
      uint64_t v3 = *(void *)a1;
      int v4 = 128;
LABEL_3:
      *(_DWORD *)(v3 + 2852) = v4;
LABEL_4:
      uint64_t v5 = 1;
      break;
  }
  return v5;
}

uint64_t JxlEncoderCreate(uint64_t *a1)
{
  if (!a1)
  {
    int v4 = sub_248421D40;
    uint64_t v5 = 0;
LABEL_9:
    uint64_t v2 = sub_248421D50;
    goto LABEL_10;
  }
  uint64_t v1 = a1[1];
  uint64_t v2 = (void (*)(int, void *))a1[2];
  if ((v1 == 0) != (v2 == 0)) {
    return 0;
  }
  uint64_t v5 = *a1;
  if (v1) {
    int v4 = (void *(*)(int, size_t))a1[1];
  }
  else {
    int v4 = sub_248421D40;
  }
  if (!v2) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v6 = v4(v5, 2880);
  uint64_t v3 = (uint64_t)v6;
  if (v6)
  {
    bzero(v6, 0xB40uLL);
    *(void *)(v3 + 32) = v3;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = 0;
    *(void *)(v3 + 96) = 0;
    *(void *)(v3 + 120) = 0;
    *(void *)(v3 + 112) = 0;
    *(void *)(v3 + 104) = v3 + 112;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 154) = 0u;
    *(void *)(v3 + 196) = 0x3E800000001;
    *(void *)(v3 + 208) = 0;
    *(void *)(v3 + 216) = 0;
    *(void *)(v3 + 224) = 0;
    sub_2484211E4(v3 + 304);
    sub_24841D81C((void *)(v3 + 728));
    sub_2484210E8(v3 + 760);
    *(void *)(v3 + 2000) = 0;
    *(_OWORD *)(v3 + 1984) = 0u;
    *(_DWORD *)(v3 + 2008) = 1065353216;
    *(_DWORD *)(v3 + 2044) = 0;
    *(void *)(v3 + 2048) = 0;
    *(void *)(v3 + 2016) = 0;
    *(unsigned char *)(v3 + 2040) = 0;
    *(_OWORD *)(v3 + 2024) = 0u;
    *(void *)(v3 + 2056) = 0xFFFFFFFF00000003;
    *(void *)(v3 + 2064) = 0;
    *(_DWORD *)(v3 + 2072) = 0;
    *(unsigned char *)(v3 + 2076) = 0;
    *(_DWORD *)(v3 + 2092) = -1;
    *(_WORD *)(v3 + 2096) = -1;
    *(void *)(v3 + 2080) = -1;
    *(unsigned char *)(v3 + 2088) = -1;
    *(unsigned char *)(v3 + 2098) = 0;
    *(void *)(v3 + 2117) = -1;
    *(void *)(v3 + 2112) = -1;
    *(void *)(v3 + 2104) = -1;
    *(unsigned char *)(v3 + 2192) = 0;
    *(_DWORD *)(v3 + 2193) = 16843009;
    *(unsigned char *)(v3 + 2197) = 1;
    *(_DWORD *)(v3 + 2200) = 0;
    *(_OWORD *)(v3 + 2208) = xmmword_2484DCB30;
    *(_DWORD *)(v3 + 2224) = 1056964608;
    *(void *)(v3 + 2244) = 0;
    *(_DWORD *)(v3 + 2252) = 0;
    *(void *)(v3 + 2228) = 0;
    *(void *)(v3 + 2236) = 0;
    BOOL v7 = operator new(0x20uLL);
    *(void *)(v3 + 2232) = v7;
    *(void *)(v3 + 2248) = v7 + 2;
    _OWORD *v7 = xmmword_24855076C;
    v7[1] = unk_24855077C;
    *(void *)(v3 + 2240) = v7 + 2;
    *(_DWORD *)(v3 + 2256) = 1119879168;
    *(void *)(v3 + 2264) = 32;
    *(void *)(v3 + 2272) = 0xFFFFFFFFLL;
    *(void *)(v3 + 2280) = 0x33F8147AELL;
    *(unsigned char *)(v3 + 2288) = 0;
    *(_OWORD *)(v3 + 2292) = xmmword_2484DCB20;
    *(_DWORD *)(v3 + 2308) = 2;
    *(void *)(v3 + 2312) = 0;
    *(void *)(v3 + 2328) = 0;
    *(void *)(v3 + 2320) = 0;
    *(void *)(v3 + 2336) = -1;
    *(_DWORD *)(v3 + 2344) = 256;
    *(unsigned char *)(v3 + 2348) = 0;
    *(unsigned char *)(v3 + 2352) = 0;
    *(void *)(v3 + 2360) = -1;
    *(void *)(v3 + 2368) = 0x42BE0000FFFFFFFFLL;
    *(void *)(v3 + 2376) = 0x40042A00000;
    *(unsigned char *)(v3 + 2384) = 0;
    *(void *)(v3 + 2388) = -1;
    *(unsigned char *)(v3 + 2396) = 0;
    *(void *)(v3 + 2400) = 0x3F800000BF800000;
    *(void *)(v3 + 2408) = -1;
    *(unsigned char *)(v3 + 2416) = 1;
    *(_OWORD *)(v3 + 2484) = 0u;
    *(_OWORD *)(v3 + 2456) = 0u;
    *(_OWORD *)(v3 + 2472) = 0u;
    *(_OWORD *)(v3 + 2424) = 0u;
    *(_OWORD *)(v3 + 2440) = 0u;
    *(_OWORD *)(v3 + 2504) = 0u;
    *(_OWORD *)(v3 + 2520) = 0u;
    *(_OWORD *)(v3 + 2536) = 0u;
    *(_OWORD *)(v3 + 2552) = 0u;
    *(_OWORD *)(v3 + 2568) = 0u;
    *(_OWORD *)(v3 + 2584) = 0u;
    *(_OWORD *)(v3 + 2600) = 0u;
    *(_OWORD *)(v3 + 2616) = 0u;
    *(void *)(v3 + 2632) = 0;
    *(_DWORD *)(v3 + 2852) = 0;
    *(unsigned char *)(v3 + 2870) = 0;
    *(_DWORD *)(v3 + 2872) = -1;
    *(void *)uint64_t v3 = v5;
    *(void *)(v3 + 8) = v4;
    *(void *)(v3 + 16) = v2;
    long long v8 = *(_OWORD *)&off_26FC63CA0;
    *(_OWORD *)(v3 + 264) = xmmword_26FC63C90;
    *(_OWORD *)(v3 + 280) = v8;
    long long v9 = xmmword_26FC63C70;
    *(_OWORD *)(v3 + 248) = off_26FC63C80;
    *(_OWORD *)(v3 + 232) = v9;
    *(unsigned char *)(v3 + 296) = 1;
    JxlEncoderReset(v3);
  }
  return v3;
}

void sub_24848E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 304) = &unk_26FC65EF0;
  a10 = (void **)(v10 + 632);
  sub_248410954(&a10);
  *(void *)(v10 + 352) = &unk_26FC65EC8;
  unint64_t v13 = *(void **)(v10 + 384);
  if (v13)
  {
    *(void *)(v10 + 392) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 216) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(v10 + 176);
  *(void *)(v10 + 176) = 0;
  if (v15) {
    MEMORY[0x24C579F90](v15, 0x80C402FCC0CB6);
  }
  sub_24846896C(*(void **)(v10 + 112));
  sub_24848F174(&a10);
  sub_24848F1F8(&a10);
  sub_24848F13C((uint64_t *)(v10 + 24), 0);
  _Unwind_Resume(a1);
}

double JxlEncoderReset(uint64_t a1)
{
  sub_24848F13C((uint64_t *)(a1 + 24), 0);
  uint64_t v3 = *(void *)(a1 + 80);
  for (uint64_t i = *(void *)(a1 + 88); i != v3; sub_24848C540(i))
    i -= 48;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(void **)(a1 + 40);
  for (uint64_t j = *(void **)(a1 + 48); j != v5; sub_24848DB18(j))
    j -= 2;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 2864) = 0;
  *(void *)(a1 + 2856) = 0;
  bzero(&v49, 0x690uLL);
  sub_2484211E4((uint64_t)&v49);
  sub_24841D81C((void *)v64 + 1);
  sub_2484210E8((uint64_t)&v64[2] + 8);
  *(unsigned char *)(a1 + 312) = v50[0];
  *(void *)(a1 + 328) = *(void *)&v50[16];
  *(_DWORD *)(a1 + 336) = *(_DWORD *)&v50[24];
  *(_WORD *)(a1 + 344) = *(_WORD *)&v50[32];
  *(_WORD *)(a1 + 360) = *(_WORD *)&v50[48];
  *(void *)(a1 + 368) = *(void *)&v50[56];
  *(void *)(a1 + 373) = *(void *)&v50[61];
  uint64_t v6 = *(void **)(a1 + 384);
  if (v6)
  {
    *(void *)(a1 + 392) = v6;
    operator delete(v6);
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)__p;
  *(void *)(a1 + 400) = *(void *)v52;
  __p[1] = 0;
  *(void *)char v52 = 0;
  __p[0] = 0;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)&v52[56];
  *(_OWORD *)(a1 + 408) = *(_OWORD *)&v52[8];
  *(_OWORD *)(a1 + 424) = *(_OWORD *)&v52[24];
  *(_OWORD *)(a1 + 440) = *(_OWORD *)&v52[40];
  uint64_t v7 = *((void *)&v55 + 1);
  *(void *)(a1 + 472) = *((void *)&v53 + 1);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)&v54[8];
  *(void *)(a1 + 512) = v7;
  long long v8 = v58;
  *(void *)(a1 + 528) = v57;
  *(void *)(a1 + 544) = v8;
  int v9 = v59;
  *(_DWORD *)(a1 + 555) = *(_DWORD *)((char *)&v59 + 3);
  *(_DWORD *)(a1 + 552) = v9;
  long long v10 = v60;
  *(void *)(a1 + 584) = *(void *)v61;
  *(_OWORD *)(a1 + 568) = v10;
  long long v11 = *(_OWORD *)&v61[16];
  *(_DWORD *)(a1 + 616) = *(_DWORD *)&v61[32];
  *(_OWORD *)(a1 + 600) = v11;
  *(_DWORD *)(a1 + 624) = *(_DWORD *)&v61[40];
  sub_248410A14((void **)(a1 + 632));
  *(void *)(a1 + 632) = v62[0];
  *(_OWORD *)(a1 + 640) = *(_OWORD *)&v62[1];
  memset(v62, 0, sizeof(v62));
  *(_OWORD *)(a1 + 664) = *(_OWORD *)&v63[8];
  uint64_t v12 = *(void *)&v63[40];
  *(void *)(a1 + 680) = *(void *)&v63[24];
  *(void *)(a1 + 696) = v12;
  *(void *)(a1 + 701) = *(void *)&v63[45];
  *(unsigned char *)(a1 + 720) = v64[0];
  *(void *)(a1 + 712) = *(void *)&v63[56];
  *(_OWORD *)(a1 + 736) = v64[1];
  *(void *)(a1 + 752) = *(void *)&v64[2];
  *(_WORD *)(a1 + 768) = *(_WORD *)v65;
  long long v13 = v67[1];
  *(_OWORD *)(a1 + 816) = v67[0];
  *(_OWORD *)(a1 + 832) = v13;
  *(_DWORD *)(a1 + 848) = v68[0];
  long long v14 = v66;
  *(_OWORD *)(a1 + 784) = *(_OWORD *)&v65[16];
  *(_OWORD *)(a1 + 800) = v14;
  memcpy((void *)(a1 + 856), (char *)v68 + 8, 0x464uLL);
  size_t v49 = &unk_26FC65EF0;
  uint64_t v69 = (void **)v62;
  sub_248410954(&v69);
  *(void *)&v50[40] = &unk_26FC65EC8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void *)(a1 + 2232);
  bzero(&v49, 0x280uLL);
  LODWORD(v49) = 1065353216;
  memset(v50, 0, 25);
  *(void *)&v50[40] = 0xFFFFFFFF00000003;
  HIDWORD(__p[0]) = -1;
  LOWORD(__p[1]) = -1;
  *(void *)&v50[64] = -1;
  LOBYTE(__p[0]) = -1;
  *(void *)char v52 = -1;
  *(void *)&v52[8] = -1;
  *(void *)&v52[13] = -1;
  *(_DWORD *)&v54[9] = 16843009;
  v54[13] = 1;
  long long v55 = xmmword_2484DCB30;
  LODWORD(v56) = 1056964608;
  uint64_t v16 = operator new(0x20uLL);
  *((void *)&v57 + 1) = v16 + 2;
  unint64_t v58 = v16 + 2;
  *uint64_t v16 = xmmword_24855076C;
  v16[1] = unk_24855077C;
  *(void *)&long long v57 = v16;
  LODWORD(v59) = 1119879168;
  *((void *)&v59 + 1) = 32;
  *(void *)&long long v60 = 0xFFFFFFFFLL;
  *((void *)&v60 + 1) = 0x33F8147AELL;
  v61[0] = 0;
  *(_OWORD *)&v61[4] = xmmword_2484DCB20;
  *(_DWORD *)&v61[20] = 2;
  memset(&v61[24], 0, 24);
  v62[0] = -1;
  LODWORD(v62[1]) = 256;
  BYTE4(v62[1]) = 0;
  LOBYTE(v62[2]) = 0;
  *(void *)unint64_t v63 = -1;
  *(void *)&v63[8] = 0x42BE0000FFFFFFFFLL;
  *(void *)&v63[16] = 0x40042A00000;
  v63[24] = 0;
  *(void *)&v63[28] = -1;
  v63[36] = 0;
  *(void *)&v63[40] = 0x3F800000BF800000;
  *(void *)&v63[48] = -1;
  long long v17 = 0uLL;
  v63[56] = 1;
  memset(v65, 0, 28);
  memset(v64, 0, sizeof(v64));
  long long v66 = 0u;
  memset(v67, 0, sizeof(v67));
  memset(v68, 0, 88);
  *(_DWORD *)(a1 + 2008) = 1065353216;
  long long v18 = *(void **)(a1 + 2016);
  if (v18)
  {
    *(void *)(a1 + 2024) = v18;
    operator delete(v18);
    *(void *)(a1 + 2016) = 0;
    *(void *)(a1 + 2024) = 0;
    *(void *)(a1 + 2032) = 0;
    long long v17 = *(_OWORD *)v50;
    uint64_t v19 = *(void *)&v50[16];
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(_OWORD *)(a1 + 2016) = v17;
  *(void *)(a1 + 2032) = v19;
  memset(v50, 0, 24);
  *(_DWORD *)(a1 + 2200) = *(_DWORD *)&v54[16];
  long long v20 = *(_OWORD *)v54;
  *(_OWORD *)(a1 + 2168) = v53;
  *(_OWORD *)(a1 + 2184) = v20;
  long long v21 = *(_OWORD *)&v52[16];
  *(_OWORD *)(a1 + 2104) = *(_OWORD *)v52;
  *(_OWORD *)(a1 + 2120) = v21;
  long long v22 = *(_OWORD *)&v52[48];
  *(_OWORD *)(a1 + 2136) = *(_OWORD *)&v52[32];
  *(_OWORD *)(a1 + 2152) = v22;
  long long v23 = *(_OWORD *)&v50[40];
  *(_OWORD *)(a1 + 2040) = *(_OWORD *)&v50[24];
  *(_OWORD *)(a1 + 2056) = v23;
  long long v24 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 2072) = *(_OWORD *)&v50[56];
  *(_OWORD *)(a1 + 2088) = v24;
  *(_OWORD *)(a1 + 2208) = v55;
  *(void *)(a1 + 2224) = v56;
  unint64_t v25 = *(void **)(a1 + 2232);
  if (v25)
  {
    *(void *)(a1 + 2240) = v25;
    operator delete(v25);
    *uint64_t v15 = 0;
    *(void *)(a1 + 2240) = 0;
    *(void *)(a1 + 2248) = 0;
  }
  *(_OWORD *)uint64_t v15 = v57;
  long long v26 = v60;
  *(_OWORD *)(a1 + 2256) = v59;
  *(void *)(a1 + 2248) = v58;
  unint64_t v58 = 0;
  long long v57 = 0uLL;
  *(_OWORD *)(a1 + 2272) = v26;
  *(void *)(a1 + 2288) = *(void *)v61;
  *(_OWORD *)(a1 + 2296) = *(_OWORD *)&v61[8];
  int v27 = *(void **)(a1 + 2312);
  if (v27)
  {
    *(void *)(a1 + 2320) = v27;
    operator delete(v27);
    *(void *)(a1 + 2312) = 0;
    *(void *)(a1 + 2320) = 0;
    *(void *)(a1 + 2328) = 0;
  }
  *(_OWORD *)(a1 + 2312) = *(_OWORD *)&v61[24];
  *(void *)(a1 + 2328) = *(void *)&v61[40];
  memset(&v61[24], 0, 24);
  *(void *)(a1 + 2336) = v62[0];
  *(void *)(a1 + 2341) = *(void *)((char *)v62 + 5);
  *(unsigned char *)(a1 + 2352) = v62[2];
  long long v28 = *(_OWORD *)&v63[32];
  long long v29 = *(_OWORD *)v63;
  *(_OWORD *)(a1 + 2376) = *(_OWORD *)&v63[16];
  *(_OWORD *)(a1 + 2392) = v28;
  *(_OWORD *)(a1 + 2360) = v29;
  *(_OWORD *)(a1 + 2401) = *(_OWORD *)&v63[41];
  uint64_t v30 = (void *)(a1 + 2424);
  unint64_t v31 = *(void **)(a1 + 2424);
  if (v31)
  {
    *(void *)(a1 + 2432) = v31;
    operator delete(v31);
    *uint64_t v30 = 0;
    *(void *)(a1 + 2432) = 0;
    *(void *)(a1 + 2440) = 0;
  }
  *(_OWORD *)uint64_t v30 = v64[0];
  *(void *)(a1 + 2440) = *(void *)&v64[1];
  memset(v64, 0, 24);
  uint64_t v32 = *(void **)(a1 + 2448);
  if (v32)
  {
    *(void *)(a1 + 2456) = v32;
    operator delete(v32);
    *(void *)(a1 + 2448) = 0;
    *(void *)(a1 + 2456) = 0;
    *(void *)(a1 + 2464) = 0;
  }
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)((char *)&v64[1] + 8);
  *(void *)(a1 + 2464) = *((void *)&v64[2] + 1);
  memset((char *)&v64[1] + 8, 0, 24);
  unint64_t v33 = (void *)(a1 + 2472);
  uint64_t v34 = *(void **)(a1 + 2472);
  if (v34)
  {
    *(void *)(a1 + 2480) = v34;
    operator delete(v34);
    void *v33 = 0;
    *(void *)(a1 + 2480) = 0;
    *(void *)(a1 + 2488) = 0;
  }
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v65;
  *(void *)(a1 + 2488) = *(void *)&v65[16];
  memset(v65, 0, 24);
  *(_DWORD *)(a1 + 2496) = *(_DWORD *)&v65[24];
  sub_24846870C((uint64_t *)(a1 + 2504));
  *(_OWORD *)(a1 + 2504) = v66;
  *(void *)(a1 + 2520) = *(void *)&v67[0];
  *(void *)&v67[0] = 0;
  long long v66 = 0uLL;
  unsigned int v35 = *(void **)(a1 + 2528);
  if (v35)
  {
    *(void *)(a1 + 2536) = v35;
    operator delete(v35);
    *(void *)(a1 + 2528) = 0;
    *(void *)(a1 + 2536) = 0;
    *(void *)(a1 + 2544) = 0;
  }
  *(_OWORD *)(a1 + 2528) = *(_OWORD *)((char *)v67 + 8);
  *(void *)(a1 + 2544) = *((void *)&v67[1] + 1);
  memset((char *)v67 + 8, 0, 24);
  uint64_t v36 = (void *)(a1 + 2552);
  int64x2_t v37 = *(void **)(a1 + 2552);
  if (v37)
  {
    *(void *)(a1 + 2560) = v37;
    operator delete(v37);
    *uint64_t v36 = 0;
    *(void *)(a1 + 2560) = 0;
    *(void *)(a1 + 2568) = 0;
  }
  *(_OWORD *)uint64_t v36 = v68[0];
  *(void *)(a1 + 2568) = *(void *)&v68[1];
  memset(v68, 0, 24);
  uint64_t v38 = *(void **)(a1 + 2576);
  if (v38)
  {
    *(void *)(a1 + 2584) = v38;
    operator delete(v38);
    *(void *)(a1 + 2576) = 0;
    *(void *)(a1 + 2584) = 0;
    *(void *)(a1 + 2592) = 0;
  }
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)((char *)&v68[1] + 8);
  *(void *)(a1 + 2592) = *((void *)&v68[2] + 1);
  v68[2] = 0uLL;
  *((void *)&v68[1] + 1) = 0;
  unsigned int v39 = (void *)(a1 + 2600);
  unsigned int v40 = *(void **)(a1 + 2600);
  if (v40)
  {
    *(void *)(a1 + 2608) = v40;
    operator delete(v40);
    void *v39 = 0;
    *(void *)(a1 + 2608) = 0;
    *(void *)(a1 + 2616) = 0;
  }
  *(_OWORD *)unsigned int v39 = v68[3];
  *(void *)(a1 + 2616) = *(void *)&v68[4];
  memset(&v68[3], 0, 24);
  *(void *)(a1 + 2640) = *((void *)&v68[5] + 1);
  *(_OWORD *)(a1 + 2624) = *(_OWORD *)((char *)&v68[4] + 8);
  sub_2484414D4((uint64_t)&v49);
  *(_WORD *)(a1 + 297) = 0;
  *(_DWORD *)(a1 + 2865) = 0;
  *(unsigned char *)(a1 + 2869) = 0;
  *(_DWORD *)(a1 + 300) = -1;
  memset(v50, 0, sizeof(v50));
  size_t v49 = v50;
  uint64_t v41 = a1 + 112;
  sub_24846896C(*(void **)(a1 + 112));
  uint64_t v42 = *(void *)v50;
  *(void *)(a1 + 104) = v49;
  *(void *)(a1 + 112) = v42;
  uint64_t v43 = *(void *)&v50[8];
  *(void *)(a1 + 120) = *(void *)&v50[8];
  if (v43)
  {
    *(void *)(v42 + 16) = v41;
    size_t v49 = v50;
    *(_OWORD *)uint64_t v50 = 0uLL;
  }
  else
  {
    *(void *)(a1 + 104) = v41;
  }
  long long v44 = *(_OWORD *)&v50[32];
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&v50[16];
  *(_OWORD *)(a1 + 144) = v44;
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v50[42];
  uint64_t v45 = *(void *)&v50[64];
  *(void *)&v50[64] = 0;
  uint64_t v46 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v45;
  if (v46)
  {
    MEMORY[0x24C579F90](v46, 0x80C402FCC0CB6);
    uint64_t v47 = *(void *)&v50[64];
    *(void *)&v50[64] = 0;
    if (v47) {
      MEMORY[0x24C579F90](v47, 0x80C402FCC0CB6);
    }
  }
  sub_24846896C(*(void **)v50);
  *(_OWORD *)(a1 + 2648) = xmmword_2484DCF80;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(void *)(a1 + 2696) = 0x300000001;
  *(void *)(a1 + 2744) = 0;
  *(void *)(a1 + 2704) = 0;
  *(void *)(a1 + 2720) = 0;
  *(void *)(a1 + 2712) = 0;
  *(void *)&double result = 0x10000000ALL;
  *(_OWORD *)(a1 + 2728) = xmmword_2484DCF90;
  return result;
}

void sub_24848F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(void *)(v52 - 96) = &a52;
  sub_248410954((void ***)(v52 - 96));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_24848F13C(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)(*(uint64_t (**)(void))(result[1] + 16))(*(void *)result[1]);
  }
  return result;
}

void sub_24848F174(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_24848C540(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_24848F1F8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_24848DB18(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *JxlEncoderDestroy(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    uint64_t v7 = (uint64_t (*)(uint64_t, void *))result[2];
    sub_2484414D4((uint64_t)(result + 251));
    uint64_t v3 = (void *)v1[248];
    if (v3)
    {
      v1[249] = v3;
      operator delete(v3);
    }
    v1[38] = &unk_26FC65EF0;
    long long v8 = (void **)(v1 + 79);
    sub_248410954(&v8);
    v1[44] = &unk_26FC65EC8;
    uint64_t v4 = (void *)v1[48];
    if (v4)
    {
      v1[49] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v1[26];
    if (v5)
    {
      v1[27] = v5;
      operator delete(v5);
    }
    uint64_t v6 = v1[22];
    v1[22] = 0;
    if (v6) {
      MEMORY[0x24C579F90](v6, 0x80C402FCC0CB6);
    }
    sub_24846896C((void *)v1[14]);
    long long v8 = (void **)(v1 + 10);
    sub_24848F174(&v8);
    long long v8 = (void **)(v1 + 5);
    sub_24848F1F8(&v8);
    sub_24848F13C(v1 + 3, 0);
    return (void *)v7(v2, v1);
  }
  return result;
}

uint64_t JxlEncoderGetError(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2852);
}

uint64_t JxlEncoderUseContainer(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 297) = a2 != 0;
  }
  return result;
}

uint64_t JxlEncoderStoreJPEGMetadata(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 299) = a2 != 0;
  }
  return result;
}

uint64_t JxlEncoderSetCodestreamLevel(uint64_t a1, int a2)
{
  if ((a2 + 1) > 0xB || ((1 << (a2 + 1)) & 0x841) == 0)
  {
    int v4 = 128;
    goto LABEL_9;
  }
  uint64_t v3 = *(unsigned __int8 *)(a1 + 2864);
  if (*(unsigned char *)(a1 + 2864))
  {
    int v4 = 129;
LABEL_9:
    *(_DWORD *)(a1 + 2852) = v4;
    return 1;
  }
  *(_DWORD *)(a1 + 300) = a2;
  return v3;
}

uint64_t JxlEncoderGetRequiredCodestreamLevel(uint64_t a1)
{
  return sub_24848BF18(a1, 0);
}

__n128 JxlEncoderSetCms(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 248) = v3;
  *(__n128 *)(a1 + 232) = result;
  *(unsigned char *)(a1 + 296) = 1;
  return result;
}

uint64_t JxlEncoderSetParallelRunner(uint64_t a1, uint64_t a2, void *a3)
{
  long long v4 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    int v5 = 129;
LABEL_3:
    *(_DWORD *)(a1 + 2852) = v5;
    return 1;
  }
  int v9 = (void *)(*(uint64_t (**)(void, uint64_t))(a1 + 8))(*(void *)a1, 16);
  if (v9)
  {
    if (a2) {
      long long v10 = a3;
    }
    else {
      long long v10 = v9;
    }
    *int v9 = a2;
    v9[1] = v10;
  }
  sub_24848F13C(v4, (uint64_t)v9);
  *(void *)(a1 + 32) = a1;
  if (!*(void *)(a1 + 24))
  {
    int v5 = 1;
    goto LABEL_3;
  }
  return 0;
}

uint64_t JxlEncoderAddJPEGFrame()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*(void *)v0 + 2865))
  {
    *(_DWORD *)(*(void *)v0 + 2852) = 129;
  }
  else
  {
    unint64_t v3 = v2;
    long long v4 = v1;
    uint64_t v5 = v0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long __dst = 0u;
    long long v13 = 0u;
    sub_2484211E4((uint64_t)v18);
    sub_24841D81C(v19);
    sub_2484210E8((uint64_t)&v20);
    sub_2483F7584((uint64_t)&v21, (uint64_t)v18);
    unint64_t v23 = 0;
    long long v22 = 0u;
    sub_248494964((uint64_t *)&v22);
    uint64_t v6 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) >= v23)
    {
      uint64_t v7 = sub_2484949D8((uint64_t *)&v22, (uint64_t)v18);
    }
    else
    {
      sub_2483F7584(*((uint64_t *)&v22 + 1), (uint64_t)v18);
      uint64_t v7 = v6 + 448;
    }
    *((void *)&v22 + 1) = v7;
    if (v3 >= 2 && *v4 == 255 && v4[1] == 216)
    {
      uint64_t v8 = v22;
      while (v7 != v8)
      {
        v7 -= 448;
        sub_248494224(v7);
      }
      *((void *)&v22 + 1) = v8;
      sub_248494964((uint64_t *)&v22);
      uint64_t v9 = *((void *)&v22 + 1);
      if (*((void *)&v22 + 1) >= v23)
      {
        uint64_t v10 = sub_2484949D8((uint64_t *)&v22, (uint64_t)v18);
      }
      else
      {
        sub_2483F7584(*((uint64_t *)&v22 + 1), (uint64_t)v18);
        uint64_t v10 = v9 + 448;
      }
      *((void *)&v22 + 1) = v10;
      operator new();
    }
    *(_DWORD *)(*(void *)v5 + 2852) = 4;
    sub_24849402C((uint64_t)&__dst);
  }
  return 1;
}

void sub_2484926F4(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  sub_248453364((uint64_t)&STACK[0xBC0]);
  sub_24849402C((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_248492AB8(uint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t v6 = *a1;
  *a2 = sub_24841D660(*a1 + 728);
  if (*(unsigned char *)(v6 + 736)) {
    LODWORD(v7) = 8 * *(_DWORD *)(v6 + 740) + 8;
  }
  else {
    LODWORD(v7) = *(_DWORD *)(v6 + 744);
  }
  unint64_t v7 = v7;
  *a3 = v7;
  if (*((_DWORD *)a1 + 168))
  {
    *a2 = *((unsigned int *)a1 + 171);
    unint64_t v7 = *((unsigned int *)a1 + 172);
    *a3 = v7;
  }
  if (*((unsigned char *)a1 + 404))
  {
    unint64_t v8 = *((int *)a1 + 99);
    *a2 = (v8 - 1 + *a2) / v8;
    unint64_t v7 = (v8 - 1 + *a3) / v8;
    *a3 = v7;
  }
  if (*a2 && v7) {
    return 0;
  }
  *(_DWORD *)(v6 + 2852) = 129;
  return 1;
}

uint64_t JxlEncoderAddBox(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, int a5)
{
  if (!*(unsigned char *)(a1 + 298)
    || *(unsigned char *)(a1 + 2866)
    || a5
    && (*(_WORD *)a2 == 30826 ? (BOOL v11 = *(unsigned char *)(a2 + 2) == 108) : (BOOL v11 = 0),
        v11 || *(_DWORD *)a2 == 1685217898 || *(_DWORD *)a2 == 1651470946))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*(void *)a1, 40);
    uint64_t v13 = v12;
    if (v12)
    {
      *(void *)(v12 + 32) = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    v29[0] = v12;
    v29[1] = a1;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)a2;
    sub_2483EFEC8((void *)(v12 + 8), a3, &a3[a4], a4);
    *(unsigned char *)(v13 + 32) = a5 != 0;
    uint64_t v30 = 0;
    uint64_t v31 = a1;
    uint64_t v32 = 0;
    uint64_t v33 = a1;
    uint64_t v34 = 0;
    unsigned int v35 = sub_2484BFC70;
    v29[0] = 0;
    sub_24848C89C(&v32, v13);
    uint64_t v33 = a1;
    long long v14 = *(void **)(a1 + 88);
    unint64_t v15 = *(void *)(a1 + 96);
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v19 = *(void *)(a1 + 80);
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v19) >> 4);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555) {
        sub_2483E92E8();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v19) >> 4);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v23 = 0x555555555555555;
      }
      else {
        unint64_t v23 = v21;
      }
      v36[4] = a1 + 96;
      uint64_t v24 = (char *)sub_248453088(v23);
      unint64_t v25 = &v24[48 * v20];
      v36[0] = v24;
      v36[1] = v25;
      v36[3] = &v24[48 * v26];
      uint64_t v27 = v30;
      uint64_t v30 = 0;
      *(void *)unint64_t v25 = v27;
      *((void *)v25 + 1) = v31;
      uint64_t v28 = v32;
      uint64_t v32 = 0;
      *((void *)v25 + 2) = v28;
      *((void *)v25 + 3) = a1;
      *((void *)v25 + 4) = v34;
      *((void *)v25 + 5) = v35;
      v36[2] = v25 + 48;
      sub_248494300((void *)(a1 + 80), v36);
      long long v18 = *(void **)(a1 + 88);
      sub_24849438C((uint64_t)v36);
    }
    else
    {
      uint64_t v16 = v30;
      uint64_t v30 = 0;
      *long long v14 = v16;
      v14[1] = v31;
      uint64_t v17 = v32;
      uint64_t v32 = 0;
      v14[2] = v17;
      v14[3] = a1;
      v14[4] = v34;
      v14[5] = v35;
      long long v18 = v14 + 6;
    }
    *(void *)(a1 + 88) = v18;
    ++*(void *)(a1 + 72);
    uint64_t v34 = 0;
    sub_24848C89C(&v32, 0);
    sub_24848C7C4(&v30, 0);
    sub_24848C89C(v29, 0);
    return 0;
  }
}

void sub_248492E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2484943DC((uint64_t)va1);
  sub_24848C89C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_248492E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  if (a1 != a2)
  {
    sub_248494430((uint64_t *)(a1 + 24), *(char ***)(a2 + 24), *(char ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    uint64_t v5 = *(char **)(a1 + 48);
    uint64_t v6 = *(char **)(a2 + 48);
    unint64_t v7 = *(unsigned char **)(a2 + 56);
    size_t v8 = v7 - v6;
    unint64_t v9 = (v7 - v6) >> 2;
    uint64_t v10 = *(void *)(a1 + 64);
    if (v9 <= (v10 - (uint64_t)v5) >> 2)
    {
      uint64_t v13 = *(unsigned char **)(a1 + 56);
      unint64_t v14 = (v13 - v5) >> 2;
      if (v14 < v9)
      {
        unint64_t v15 = &v6[4 * v14];
        if (v13 != v5)
        {
          memmove(*(void **)(a1 + 48), *(const void **)(a2 + 48), v13 - v5);
          uint64_t v5 = *(char **)(a1 + 56);
        }
        size_t v8 = v7 - v15;
        if (v7 == v15)
        {
LABEL_20:
          *(void *)(a1 + 56) = &v5[v8];
          sub_248494430((uint64_t *)(a1 + 72), *(char ***)(a2 + 72), *(char ***)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
          long long v18 = *(char **)(a1 + 96);
          uint64_t v19 = *(char **)(a2 + 96);
          unint64_t v20 = *(unsigned char **)(a2 + 104);
          uint64_t v21 = v20 - v19;
          unint64_t v22 = 0xF0B7672A07A44C6BLL * ((v20 - v19) >> 2);
          uint64_t v23 = *(void *)(a1 + 112);
          if (0xF0B7672A07A44C6BLL * ((v23 - (uint64_t)v18) >> 2) >= v22)
          {
            uint64_t v27 = *(unsigned char **)(a1 + 104);
            if (0xF0B7672A07A44C6BLL * ((v27 - v18) >> 2) < v22)
            {
              uint64_t v28 = &v19[4 * ((v27 - v18) >> 2)];
              if (v27 != v18)
              {
                memmove(*(void **)(a1 + 96), *(const void **)(a2 + 96), v27 - v18 - 3);
                long long v18 = *(char **)(a1 + 104);
              }
              uint64_t v21 = v20 - v28;
              if (v20 == v28)
              {
LABEL_38:
                uint64_t v32 = &v18[v21];
                uint64_t v33 = *(char **)(a1 + 120);
                *(void *)(a1 + 104) = v32;
                uint64_t v34 = *(char **)(a2 + 120);
                unsigned int v35 = *(unsigned char **)(a2 + 128);
                uint64_t v36 = v35 - v34;
                unint64_t v37 = 0xF128CFC4A33F128DLL * ((v35 - v34) >> 4);
                uint64_t v38 = *(void *)(a1 + 136);
                if (0xF128CFC4A33F128DLL * ((v38 - (uint64_t)v33) >> 4) >= v37)
                {
                  uint64_t v42 = *(unsigned char **)(a1 + 128);
                  if (0xF128CFC4A33F128DLL * ((v42 - v33) >> 4) < v37)
                  {
                    uint64_t v43 = &v34[16 * ((v42 - v33) >> 4)];
                    if (v42 != v33)
                    {
                      memmove(v33, *(const void **)(a2 + 120), v42 - v33 - 3);
                      uint64_t v33 = *(char **)(a1 + 128);
                    }
                    uint64_t v36 = v35 - v43;
                    if (v35 == v43)
                    {
LABEL_56:
                      uint64_t v47 = &v33[v36];
                      size_t v49 = (void **)(a1 + 144);
                      uint64_t v48 = *(void *)(a1 + 144);
                      *(void *)(a1 + 128) = v47;
                      long long v51 = *(long long **)(a2 + 144);
                      uint64_t v50 = *(long long **)(a2 + 152);
                      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (v50 - v51);
                      uint64_t v53 = *(void *)(a1 + 160);
                      if (0xAAAAAAAAAAAAAAABLL * ((v53 - v48) >> 4) >= v52)
                      {
                        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 152) - v48) >> 4) >= v52)
                        {
                          uint64_t v59 = sub_248494788(*(long long **)(a2 + 144), *(long long **)(a2 + 152), v48);
                          for (uint64_t i = *(void *)(a1 + 152); i != v59; i -= 48)
                          {
                            unint64_t v61 = *(void **)(i - 24);
                            if (v61)
                            {
                              *(void *)(i - 16) = v61;
                              operator delete(v61);
                            }
                          }
                          *(void *)(a1 + 152) = v59;
LABEL_74:
                          uint64_t v62 = (void **)(a1 + 168);
                          unint64_t v63 = *(void **)(a1 + 168);
                          uint64_t v65 = *(void *)(a2 + 168);
                          uint64_t v64 = *(void *)(a2 + 176);
                          unint64_t v66 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - v65) >> 3);
                          uint64_t v67 = *(void *)(a1 + 184);
                          if (0xEEEEEEEEEEEEEEEFLL * ((v67 - (uint64_t)v63) >> 3) >= v66)
                          {
                            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 176) - (void)v63) >> 3) >= v66)
                            {
                              uint64_t v75 = sub_2484945B4(*(void *)(a2 + 168), *(void *)(a2 + 176), *(void *)(a1 + 168));
                              for (uint64_t j = *(void **)(a1 + 176); j != (void *)v75; sub_248452C20(j))
                                j -= 15;
                              *(void *)(a1 + 176) = v75;
                              goto LABEL_93;
                            }
                            uint64_t v74 = v65 + 8 * ((uint64_t)(*(void *)(a1 + 176) - (void)v63) >> 3);
                            sub_2484945B4(*(void *)(a2 + 168), v74, *(void *)(a1 + 168));
                            uint64_t v73 = sub_248452CC8(a1 + 184, v74, v64, *(void *)(a1 + 176));
                          }
                          else
                          {
                            if (v63)
                            {
                              int v68 = *(void **)(a1 + 176);
                              uint64_t v69 = *(void **)(a1 + 168);
                              if (v68 != v63)
                              {
                                do
                                {
                                  v68 -= 15;
                                  sub_248452C20(v68);
                                }
                                while (v68 != v63);
                                uint64_t v69 = *v62;
                              }
                              *(void *)(a1 + 176) = v63;
                              operator delete(v69);
                              uint64_t v67 = 0;
                              *uint64_t v62 = 0;
                              *(void *)(a1 + 176) = 0;
                              *(void *)(a1 + 184) = 0;
                            }
                            if (v66 > 0x222222222222222) {
                              sub_2483E92E8();
                            }
                            unint64_t v70 = 0xEEEEEEEEEEEEEEEFLL * (v67 >> 3);
                            uint64_t v71 = 2 * v70;
                            if (2 * v70 <= v66) {
                              uint64_t v71 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - v65) >> 3);
                            }
                            if (v70 >= 0x111111111111111) {
                              unint64_t v72 = 0x222222222222222;
                            }
                            else {
                              unint64_t v72 = v71;
                            }
                            sub_248452C78((void *)(a1 + 168), v72);
                            uint64_t v73 = sub_248452CC8(a1 + 184, v65, v64, *(void *)(a1 + 176));
                          }
                          *(void *)(a1 + 176) = v73;
LABEL_93:
                          sub_2483EFEC8((void *)(a1 + 192), *(char **)(a2 + 192), *(char **)(a2 + 200), *(void *)(a2 + 200) - *(void *)(a2 + 192));
                          sub_248494430((uint64_t *)(a1 + 216), *(char ***)(a2 + 216), *(char ***)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 3));
                          sub_2483EFEC8((void *)(a1 + 240), *(char **)(a2 + 240), *(char **)(a2 + 248), *(void *)(a2 + 248) - *(void *)(a2 + 240));
                          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
                          sub_2483EFEC8((void *)(a1 + 272), *(char **)(a2 + 272), *(char **)(a2 + 280), *(void *)(a2 + 280) - *(void *)(a2 + 272));
                          return a1;
                        }
                        unint64_t v58 = &v51[(*(void *)(a1 + 152) - v48) >> 4];
                        sub_248494788(*(long long **)(a2 + 144), v58, v48);
                        uint64_t v57 = sub_248452EE0(a1 + 160, v58, v50, *(void *)(a1 + 152));
                      }
                      else
                      {
                        if (v48)
                        {
                          sub_248452BD0((uint64_t *)(a1 + 144));
                          operator delete(*v49);
                          uint64_t v53 = 0;
                          unsigned char *v49 = 0;
                          *(void *)(a1 + 152) = 0;
                          *(void *)(a1 + 160) = 0;
                        }
                        if (v52 > 0x555555555555555) {
                          sub_2483E92E8();
                        }
                        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v53 >> 4);
                        uint64_t v55 = 2 * v54;
                        if (2 * v54 <= v52) {
                          uint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (v50 - v51);
                        }
                        if (v54 >= 0x2AAAAAAAAAAAAAALL) {
                          unint64_t v56 = 0x555555555555555;
                        }
                        else {
                          unint64_t v56 = v55;
                        }
                        sub_248452E90((void *)(a1 + 144), v56);
                        uint64_t v57 = sub_248452EE0(a1 + 160, v51, v50, *(void *)(a1 + 152));
                      }
                      *(void *)(a1 + 152) = v57;
                      goto LABEL_74;
                    }
                    size_t v44 = v36 - 3;
                    uint64_t v45 = v33;
                    uint64_t v46 = v43;
LABEL_55:
                    memmove(v45, v46, v44);
                    goto LABEL_56;
                  }
                }
                else
                {
                  if (v33)
                  {
                    *(void *)(a1 + 128) = v33;
                    operator delete(v33);
                    uint64_t v38 = 0;
                    *(void *)(a1 + 120) = 0;
                    *(void *)(a1 + 128) = 0;
                    *(void *)(a1 + 136) = 0;
                  }
                  if (v37 > 0x3B5CC0ED7303B5) {
                    sub_2483E92E8();
                  }
                  unint64_t v39 = 0xF128CFC4A33F128DLL * (v38 >> 4);
                  uint64_t v40 = 2 * v39;
                  if (2 * v39 <= v37) {
                    uint64_t v40 = 0xF128CFC4A33F128DLL * ((v35 - v34) >> 4);
                  }
                  if (v39 >= 0x1DAE6076B981DALL) {
                    unint64_t v41 = 0x3B5CC0ED7303B5;
                  }
                  else {
                    unint64_t v41 = v40;
                  }
                  sub_2484530D0((void *)(a1 + 120), v41);
                  uint64_t v33 = *(char **)(a1 + 128);
                }
                if (v35 == v34) {
                  goto LABEL_56;
                }
                size_t v44 = v36 - 3;
                uint64_t v45 = v33;
                uint64_t v46 = v34;
                goto LABEL_55;
              }
              size_t v29 = v21 - 3;
              uint64_t v30 = v18;
              uint64_t v31 = v28;
LABEL_37:
              memmove(v30, v31, v29);
              goto LABEL_38;
            }
          }
          else
          {
            if (v18)
            {
              *(void *)(a1 + 104) = v18;
              operator delete(v18);
              uint64_t v23 = 0;
              *(void *)(a1 + 96) = 0;
              *(void *)(a1 + 104) = 0;
              *(void *)(a1 + 112) = 0;
            }
            if (v22 > 0xF4898D5F85BB39) {
              sub_2483E92E8();
            }
            unint64_t v24 = 0xF0B7672A07A44C6BLL * (v23 >> 2);
            uint64_t v25 = 2 * v24;
            if (2 * v24 <= v22) {
              uint64_t v25 = 0xF0B7672A07A44C6BLL * ((v20 - v19) >> 2);
            }
            if (v24 >= 0x7A44C6AFC2DD9CLL) {
              unint64_t v26 = 0xF4898D5F85BB39;
            }
            else {
              unint64_t v26 = v25;
            }
            sub_248453170((void *)(a1 + 96), v26);
            long long v18 = *(char **)(a1 + 104);
          }
          if (v20 == v19) {
            goto LABEL_38;
          }
          size_t v29 = v21 - 3;
          uint64_t v30 = v18;
          uint64_t v31 = v19;
          goto LABEL_37;
        }
        uint64_t v16 = v5;
        uint64_t v17 = v15;
LABEL_19:
        memmove(v16, v17, v8);
        goto LABEL_20;
      }
    }
    else
    {
      if (v5)
      {
        *(void *)(a1 + 56) = v5;
        operator delete(v5);
        uint64_t v10 = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
      }
      if ((v8 & 0x8000000000000000) != 0) {
        sub_2483E92E8();
      }
      uint64_t v11 = v10 >> 1;
      if (v10 >> 1 <= v9) {
        uint64_t v11 = (v7 - v6) >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      sub_2483E92A8((void *)(a1 + 48), v12);
      uint64_t v5 = *(char **)(a1 + 56);
    }
    if (v7 == v6) {
      goto LABEL_20;
    }
    uint64_t v16 = v5;
    uint64_t v17 = v6;
    goto LABEL_19;
  }
  return a1;
}

void sub_248493524(_Unwind_Exception *a1)
{
  *(void *)(v1 + 176) = v2;
  _Unwind_Resume(a1);
}

void sub_24849352C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

void sub_248493534(_Unwind_Exception *a1)
{
  *(void *)(v1 + 176) = v2;
  _Unwind_Resume(a1);
}

void sub_24849353C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_248493544(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_24844C318(a1 + 8, a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 648);
  long long v5 = *(_OWORD *)(a2 + 664);
  long long v6 = *(_OWORD *)(a2 + 680);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(_OWORD *)(a1 + 664) = v5;
  *(_OWORD *)(a1 + 680) = v6;
  *(_OWORD *)(a1 + 648) = v4;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  unint64_t v7 = *(unsigned char **)(a2 + 704);
  size_t v8 = *(unsigned char **)(a2 + 712);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    sub_24844CDF8((void *)(a1 + 704), v9 >> 4);
    uint64_t v10 = *(char **)(a1 + 712);
    memmove(v10, v7, v9);
    *(void *)(a1 + 712) = &v10[16 * (v9 >> 4)];
  }
  uint64_t v11 = (unsigned char *)(a1 + 728);
  if (*(char *)(a2 + 751) < 0)
  {
    sub_248410EE0(v11, *(void **)(a2 + 728), *(void *)(a2 + 736));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 728);
    *(void *)(a1 + 744) = *(void *)(a2 + 744);
    *(_OWORD *)uint64_t v11 = v12;
  }
  long long v13 = *(_OWORD *)(a2 + 752);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = v13;
  return a1;
}

void sub_248493644(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 712) = v5;
    operator delete(v5);
  }
  sub_2484414D4(v2);
  _Unwind_Resume(a1);
}

__n128 sub_24849366C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 72) = &unk_26FC66248;
  uint64_t v5 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v6 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v6;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  __n128 result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  uint64_t v8 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v8;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 312) = 0;
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v9 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v9;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 344) = 0;
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v10 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v10;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  return result;
}

double sub_248493850(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  long long v3 = *(_OWORD *)(a2 + 104);
  long long v4 = *(_OWORD *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(_OWORD *)(a1 + 104) = v3;
  long long v6 = *(_OWORD *)(a2 + 168);
  long long v7 = *(_OWORD *)(a2 + 184);
  int v8 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 200) = v8;
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  uint64_t v11 = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = v11;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  long long v12 = *(_OWORD *)(a2 + 256);
  long long v13 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 312) = 0;
  uint64_t v14 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v14;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  uint64_t v15 = *(void *)(a2 + 336);
  *(void *)(a1 + 341) = *(void *)(a2 + 341);
  *(void *)(a1 + 336) = v15;
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  long long v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 401);
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 360) = v16;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v19 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v19;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  *(_OWORD *)(a2 + 424) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 448) = 0u;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 504) = 0;
  uint64_t v20 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v20;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a2 + 616) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  long long v21 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v21;
  long long v22 = *(_OWORD *)(a2 + 648);
  long long v23 = *(_OWORD *)(a2 + 664);
  long long v24 = *(_OWORD *)(a2 + 680);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v24;
  *(_OWORD *)(a1 + 648) = v22;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = 0;
  *(_OWORD *)(a2 + 704) = 0u;
  long long v25 = *(_OWORD *)(a2 + 728);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = v25;
  *(void *)(a2 + 728) = 0;
  *(_OWORD *)(a2 + 736) = 0u;
  long long v26 = *(_OWORD *)(a2 + 752);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = v26;
  long long v27 = *(_OWORD *)(a2 + 792);
  long long v28 = *(_OWORD *)(a2 + 808);
  long long v29 = *(_OWORD *)(a2 + 824);
  *(unsigned char *)(a1 + 840) = *(unsigned char *)(a2 + 840);
  *(_OWORD *)(a1 + 808) = v28;
  *(_OWORD *)(a1 + 824) = v29;
  *(_OWORD *)(a1 + 792) = v27;
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 848) = &unk_26FC66248;
  uint64_t v30 = *(void *)(a2 + 856);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(void *)(a1 + 856) = v30;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a2 + 888) = 0;
  *(_OWORD *)(a2 + 872) = 0u;
  *(void *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 896) = 0u;
  *(void *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a2 + 936) = 0;
  *(_OWORD *)(a2 + 920) = 0u;
  *(void *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = 0;
  *(_OWORD *)(a2 + 944) = 0u;
  *(void *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a2 + 984) = 0;
  *(_OWORD *)(a2 + 968) = 0u;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a2 + 1008) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(void *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = 0;
  *(_OWORD *)(a2 + 1016) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a2 + 1104) = 0;
  *(_OWORD *)(a2 + 1088) = 0u;
  *(unsigned char *)(a1 + 1112) = *(unsigned char *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a2 + 1136) = 0;
  *(_OWORD *)(a2 + 1120) = 0u;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a2 + 1168) = 0;
  *(_OWORD *)(a2 + 1152) = 0u;
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a2 + 1192) = 0;
  *(_OWORD *)(a2 + 1176) = 0u;
  return result;
}

uint64_t sub_248493D80(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 1176);
  if (v2)
  {
    *(void *)(a1 + 1184) = v2;
    operator delete(v2);
  }
  long long v5 = (void **)(a1 + 1152);
  sub_24846941C(&v5);
  sub_248453364(a1 + 848);
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  long long v3 = *(void **)(a1 + 704);
  if (v3)
  {
    *(void *)(a1 + 712) = v3;
    operator delete(v3);
  }
  sub_2484414D4(a1 + 8);
  return a1;
}

void sub_248493DFC(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2483EE8AC(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void *sub_248493E24(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (a1[8])
  {
    *(unsigned char *)(v4 + 76) = 1;
    *(_DWORD *)(v4 + 8) = 0;
    long long v5 = *(unsigned char **)(v4 + 16);
    long long v6 = *(unsigned char **)(v4 + 24);
    if (v5 != v6) {
      bzero(v5, (v6 - v5) & 0xFFFFFFFFFFFFFFFCLL);
    }
    *(_DWORD *)(v4 + 72) = 1;
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v26 = 0;
  uint64_t v27 = v7;
  uint64_t v28 = 0;
  uint64_t v29 = v7;
  uint64_t v30 = 0;
  uint64_t v31 = sub_2484BFC70;
  *a2 = 0;
  sub_24848C7C4(&v26, v4);
  uint64_t v8 = a2[1];
  uint64_t v27 = v8;
  uint64_t v9 = *(void *)a1;
  long long v10 = *(void **)(*(void *)a1 + 88);
  unint64_t v11 = *(void *)(*(void *)a1 + 96);
  if ((unint64_t)v10 >= v11)
  {
    uint64_t v15 = *(void *)(v9 + 80);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v15) >> 4);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x555555555555555) {
      sub_2483E92E8();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v15) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x555555555555555;
    }
    else {
      unint64_t v19 = v17;
    }
    v32[4] = *(void *)a1 + 96;
    uint64_t v20 = (char *)sub_248453088(v19);
    long long v21 = &v20[48 * v16];
    v32[0] = v20;
    v32[1] = v21;
    v32[3] = &v20[48 * v22];
    uint64_t v23 = v26;
    uint64_t v26 = 0;
    *(void *)long long v21 = v23;
    *((void *)v21 + 1) = v8;
    uint64_t v24 = v28;
    uint64_t v28 = 0;
    *((void *)v21 + 2) = v24;
    *((void *)v21 + 3) = v29;
    *((void *)v21 + 4) = v30;
    *((void *)v21 + 5) = v31;
    v32[2] = v21 + 48;
    sub_248494300((void *)(v9 + 80), v32);
    uint64_t v14 = *(void **)(v9 + 88);
    sub_24849438C((uint64_t)v32);
  }
  else
  {
    uint64_t v12 = v26;
    uint64_t v26 = 0;
    *long long v10 = v12;
    v10[1] = v8;
    uint64_t v13 = v28;
    uint64_t v28 = 0;
    v10[2] = v13;
    v10[3] = v29;
    v10[4] = v30;
    v10[5] = v31;
    uint64_t v14 = v10 + 6;
  }
  *(void *)(v9 + 88) = v14;
  ++*(void *)(*(void *)a1 + 64);
  uint64_t v30 = 0;
  sub_24848C89C(&v28, 0);
  return sub_24848C7C4(&v26, 0);
}

void sub_248494018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484943DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24849402C(uint64_t a1)
{
  unint64_t v11 = (void **)(a1 + 2224);
  sub_2484941A0(&v11);
  unint64_t v11 = (void **)(a1 + 2192);
  sub_2483F77FC(&v11);
  *(void *)(a1 + 1992) = &unk_26FC65EC8;
  unint64_t v2 = *(void **)(a1 + 2024);
  if (v2)
  {
    *(void *)(a1 + 2032) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 1976; i != 1856; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));
  if (*(char *)(a1 + 1863) < 0) {
    operator delete(*(void **)(a1 + 1840));
  }
  uint64_t v4 = *(void *)(a1 + 1776);
  *(void *)(a1 + 1776) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 96) = &unk_26FC65EF0;
  unint64_t v11 = (void **)(a1 + 424);
  sub_248410954(&v11);
  *(void *)(a1 + 144) = &unk_26FC65EC8;
  long long v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(void *)(a1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_2484941A0(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 448;
        sub_248494224(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_248494224(uint64_t a1)
{
  long long v6 = (void **)(a1 + 416);
  sub_2483F77FC(&v6);
  *(void *)(a1 + 216) = &unk_26FC65EC8;
  unint64_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(void *)(a1 + 256) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 200; i != 80; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t result = *(void *)a1;
  *(void *)a1 = 0;
  if (result)
  {
    long long v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void *sub_248494300(void *result, void *a2)
{
  BOOL v3 = (void *)*result;
  unint64_t v2 = (void *)result[1];
  uint64_t v4 = (void *)a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 6);
    v2 -= 6;
    void *v2 = 0;
    *(v4 - 6) = v5;
    v4 -= 6;
    v4[1] = v2[1];
    uint64_t v6 = v2[2];
    v2[2] = 0;
    v4[2] = v6;
    v4[3] = v2[3];
    uint64_t v7 = v2[4];
    v2[4] = 0;
    v4[4] = v7;
    v4[5] = v2[5];
  }
  a2[1] = v4;
  uint64_t v8 = (void *)*result;
  void *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24849438C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_24848C540(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2484943DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 40))();
  }
  sub_24848C89C((void *)(a1 + 16), 0);
  sub_24848C7C4((void *)a1, 0);
  return a1;
}

void sub_248494430(uint64_t *a1, char **a2, char **a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = (char **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      sub_2483F8840(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    sub_248409DAC(a1, v13);
    uint64_t v14 = sub_248453210(v9, (uint64_t)a2, (uint64_t)a3, (void *)a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    uint64_t v15 = &a2[(a1[1] - (uint64_t)v10) >> 3];
    sub_248494900(a2, v15, v10);
    uint64_t v14 = sub_248453210(v9, (uint64_t)v15, (uint64_t)a3, (void *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v14;
    return;
  }
  unint64_t v16 = sub_248494900(a2, a3, v10);
  unint64_t v17 = (char **)a1[1];
  if (v17 != v16)
  {
    unint64_t v18 = (char **)a1[1];
    do
    {
      uint64_t v20 = *(v18 - 3);
      v18 -= 3;
      unint64_t v19 = v20;
      if (v20)
      {
        *(v17 - 2) = v19;
        operator delete(v19);
      }
      unint64_t v17 = v18;
    }
    while (v18 != v16);
  }
  a1[1] = (uint64_t)v16;
}

void sub_2484945A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2484945AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2484945B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    uint64_t v30 = a1;
    do
    {
      uint64_t v7 = a1 + v5;
      uint64_t v8 = v3 + v5;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + v5);
      long long v9 = *(_OWORD *)(a1 + v5 + 16);
      long long v10 = *(_OWORD *)(a1 + v5 + 32);
      long long v11 = *(_OWORD *)(a1 + v5 + 48);
      *(void *)(v8 + 64) = *(void *)(a1 + v5 + 64);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      if (a1 != v3)
      {
        sub_2483FB040((char *)(v8 + 72), *(char **)(v7 + 72), *(void *)(v7 + 80), (uint64_t)(*(void *)(v7 + 80) - *(void *)(v7 + 72)) >> 2);
        uint64_t v14 = *(char **)(v8 + 96);
        unint64_t v13 = (void *)(v8 + 96);
        uint64_t v12 = v14;
        uint64_t v15 = *(char **)(v7 + 96);
        unint64_t v16 = *(unsigned char **)(v7 + 104);
        uint64_t v17 = v16 - v15;
        unint64_t v18 = (v16 - v15) >> 3;
        uint64_t v19 = v13[2];
        if (v18 <= (v19 - (uint64_t)v14) >> 3)
        {
          uint64_t v22 = (void **)(v6 + 104);
          uint64_t v23 = v3 + v5;
          uint64_t v24 = *(unsigned char **)(v23 + 104);
          unint64_t v25 = (v24 - v12) >> 3;
          if (v25 >= v18)
          {
            if (v16 != v15) {
              memmove(v12, v15, v16 - v15);
            }
            uint64_t v3 = a3;
          }
          else
          {
            if (v24 != v12)
            {
              memmove(v12, v15, v24 - v12);
              uint64_t v12 = *(char **)(v23 + 104);
            }
            uint64_t v3 = a3;
            uint64_t v26 = &v15[8 * v25];
            uint64_t v17 = v16 - v26;
            if (v16 != v26) {
              memmove(v12, v26, v16 - v26);
            }
          }
          uint64_t v4 = a2;
        }
        else
        {
          if (v12)
          {
            *(void *)(v3 + v5 + 104) = v12;
            operator delete(v12);
            uint64_t v19 = 0;
            void *v13 = 0;
            v13[1] = 0;
            void v13[2] = 0;
          }
          if (v17 < 0) {
            sub_2483E92E8();
          }
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= v18) {
            uint64_t v20 = (v16 - v15) >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          sub_2484032DC(v13, v21);
          uint64_t v22 = (void **)(v3 + v5 + 104);
          uint64_t v12 = (char *)*v22;
          if (v16 != v15) {
            memmove(*(void **)(v3 + v5 + 104), v15, v16 - v15);
          }
        }
        a1 = v30;
        void *v22 = &v12[v17];
      }
      v6 += 120;
      v5 += 120;
    }
    while (a1 + v5 != v4);
    v3 += v5;
  }
  return v3;
}

uint64_t sub_248494788(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      if (v5 != (long long *)a3) {
        sub_248494800((char *)(a3 + 24), *((char **)v5 + 3), *((void *)v5 + 4), (uint64_t)(*((void *)v5 + 4) - *((void *)v5 + 3)) >> 1);
      }
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

char *sub_248494800(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_2483E92E8();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = sub_24845304C(v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  unint64_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  char *v12 = &v9[v17];
  return result;
}

char **sub_248494900(char **a1, char **a2, char **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (v5 != a3) {
        sub_2483EFEC8(a3, *v5, v5[1], v5[1] - *v5);
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_248494964(uint64_t *result)
{
  if (result[2] == *result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1] - *result;
    v3[4] = result + 2;
    v3[0] = operator new(0x1C0uLL);
    v3[1] = v3[0] + v2;
    v3[2] = v3[0] + v2;
    v3[3] = v3[0] + 448;
    sub_248494B6C(v1, v3);
    return (uint64_t *)sub_248494BF4((uint64_t)v3);
  }
  return result;
}

uint64_t sub_2484949D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 6);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x92492492492492) {
    sub_2483E92E8();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 6) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 6);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 6)) >= 0x49249249249249) {
    unint64_t v6 = 0x92492492492492;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v14 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x92492492492492) {
      sub_2483E9338();
    }
    uint64_t v7 = (char *)operator new(448 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[448 * v2];
  unint64_t v13 = &v7[448 * v6];
  sub_2483F7584((uint64_t)v11, a2);
  uint64_t v12 = v11 + 448;
  sub_248494B6C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_248494BF4((uint64_t)&v10);
  return v8;
}

void sub_248494AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_248494BF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_248494B08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_248494B6C(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    uint64_t result = sub_248440F88(result - 448, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_248494BF4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 448;
    sub_248494224(i - 448);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t JxlEncoderUseBoxes(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 298) = 1;
  }
  return result;
}

uint64_t JxlEncoderAddImageFrame(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if (sub_248492AB8(a1, &v77, (unint64_t *)&v76))
  {
    uint64_t v8 = *a1;
    uint64_t v9 = 1;
    *(_DWORD *)(v8 + 2852) = 1;
  }
  else
  {
    unint64_t v11 = v76;
    uint64_t v10 = v77;
    sub_248469238((uint64_t)v46, v77, v76, *(unsigned int *)(*a1 + 624));
    long long v44 = *(_OWORD *)a2;
    uint64_t v45 = *(void *)(a2 + 16);
    if (sub_248469350((uint64_t *)v46, 0, a3, a4, &v44))
    {
      v14[2] = v46[2];
      v14[3] = v46[3];
      char v15 = v47;
      v14[0] = v46[0];
      v14[1] = v46[1];
      v16[0] = &unk_26FC66248;
      v16[1] = v48[1];
      int v17 = v49;
      long long v18 = v50;
      uint64_t v19 = v51;
      long long v50 = 0uLL;
      long long v20 = v52;
      uint64_t v21 = v53;
      uint64_t v51 = 0;
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      long long v22 = v54;
      long long v54 = 0uLL;
      long long v24 = v56;
      uint64_t v23 = v55;
      uint64_t v25 = v57;
      uint64_t v55 = 0;
      long long v56 = 0uLL;
      uint64_t v57 = 0;
      long long v26 = v58;
      long long v58 = 0uLL;
      long long v28 = v60;
      uint64_t v27 = v59;
      uint64_t v29 = v61;
      uint64_t v59 = 0;
      long long v60 = 0uLL;
      uint64_t v61 = 0;
      long long v30 = v62;
      long long v62 = 0uLL;
      uint64_t v31 = v63;
      uint64_t v32 = v64;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      long long v12 = v65;
      long long v65 = 0uLL;
      long long v33 = v12;
      long long v34 = v66;
      long long v66 = 0uLL;
      uint64_t v35 = v67;
      uint64_t v36 = v68;
      long long v37 = v69;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      long long v69 = 0uLL;
      char v38 = v70;
      uint64_t v39 = v71;
      long long v40 = v72;
      uint64_t v71 = 0;
      long long v72 = 0uLL;
      char v41 = v73;
      uint64_t v42 = v74;
      long long v43 = v75;
      uint64_t v74 = 0;
      long long v75 = 0uLL;
      uint64_t v9 = sub_248494F54(a1, v10, v11, 0, (uint64_t)v14);
      unint64_t v78 = (void **)&v42;
      sub_24846941C(&v78);
      sub_248453364((uint64_t)v16);
    }
    else
    {
      *(_DWORD *)(*a1 + 2852) = 129;
      uint64_t v9 = 1;
    }
    unint64_t v78 = (void **)&v74;
    sub_24846941C(&v78);
    sub_248453364((uint64_t)v48);
  }
  return v9;
}

void sub_248494F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t sub_248494F54(unsigned char *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v71 = 0;
  long long v70 = xmmword_248550790;
  if (*(unsigned char *)(a5 + 64)) {
    (*(void (**)(void, long long *))(a5 + 24))(*(void *)(a5 + 16), &v70);
  }
  else {
    sub_248467EE0(a5, (__n128 *)&v70);
  }
  unsigned int v10 = v70;
  BOOL v12 = v70 == 2 || v70 == 4;
  uint64_t v13 = *(void *)a1;
  if (!*(unsigned char *)(*(void *)a1 + 2867) || *(unsigned char *)(v13 + 2865)) {
    goto LABEL_12;
  }
  int v16 = *(_DWORD *)(v13 + 2700);
  if (v70 > 2)
  {
    if (v16 == 3) {
      goto LABEL_18;
    }
LABEL_12:
    *(_DWORD *)(v13 + 2852) = 129;
    return 1;
  }
  if (v16 != 1) {
    goto LABEL_12;
  }
LABEL_18:
  if (a1[8] && *(unsigned char *)(v13 + 345)) {
    goto LABEL_12;
  }
  int v17 = *(_DWORD *)(v13 + 624);
  if (v12 && v17 == 0) {
    goto LABEL_12;
  }
  for (uint64_t i = *(void *)(v13 + 632); ; i += 96)
  {
    if (i == *(void *)(v13 + 640))
    {
      BOOL v20 = 0;
      if (!a1[8]) {
        goto LABEL_66;
      }
      goto LABEL_31;
    }
    if (!*(_DWORD *)(i + 12)) {
      break;
    }
  }
  BOOL v20 = *(_DWORD *)(i + 28) != 0;
  if (!a1[8]) {
    goto LABEL_66;
  }
LABEL_31:
  if (!a1[772] && !*((_DWORD *)a1 + 168) && !*(unsigned char *)(v13 + 557) && *((_DWORD *)a1 + 16) == 9)
  {
    int v21 = *((_DWORD *)a1 + 190);
    if (v21)
    {
      if (v21 == 2 && *((_DWORD *)a1 + 191) != *(_DWORD *)(v13 + 332)) {
        goto LABEL_66;
      }
    }
    else if ((a1[764] & 7) != 0)
    {
      goto LABEL_66;
    }
    if ((char)a1[759] < 0) {
      uint64_t v22 = *((void *)a1 + 93);
    }
    else {
      uint64_t v22 = a1[759];
    }
    if (!v22)
    {
      BOOL v23 = v17 == 1 && v20;
      if (v23 || !v17)
      {
        unint64_t v24 = *(unsigned int *)(v13 + 332);
        if (v24 <= 0x10 && DWORD1(v70) <= 5 && ((1 << SBYTE4(v70)) & 0x2C) != 0)
        {
          BOOL v25 = DWORD1(v70) == 3 || DWORD1(v70) == 5;
          BOOL v26 = v25;
          if (v24 < 9 != v26)
          {
            switch((int)v70)
            {
              case 1:
              case 3:
                if (v70 == 2) {
                  LOBYTE(v20) = 0;
                }
                if (!v20) {
                  goto LABEL_63;
                }
                break;
              case 2:
              case 4:
                if (!v20) {
                  break;
                }
LABEL_63:
                BOOL v27 = *(unsigned char *)(a5 + 64) == 0;
                if (*(unsigned char *)(a5 + 64))
                {
                  long long v28 = *(_OWORD *)(a5 + 32);
                  long long v67 = *(_OWORD *)(a5 + 16);
                  long long v68 = v28;
                  long long v69 = *(_OWORD *)(a5 + 48);
                }
                else
                {
                  *(void *)&long long v67 = a5;
                  *((void *)&v67 + 1) = sub_248467EE0;
                  *(void *)&long long v68 = sub_248467EB4;
                  *((void *)&v68 + 1) = sub_248467E94;
                  *(void *)&long long v69 = sub_248467E4C;
                  *((void *)&v69 + 1) = nullsub_31;
                }
                sub_2484BFDEC(&v67, a2, a3, v70, v24, DWORD2(v70) == 2, v27);
              default:
                break;
            }
          }
        }
      }
    }
  }
LABEL_66:
  if ((a4 & 1) == 0)
  {
    char v29 = sub_248495774((void *)a5);
    uint64_t v13 = *(void *)a1;
    if ((v29 & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (!*(unsigned char *)(v13 + 2868))
  {
    sub_2483F06F8((uint64_t)v61);
    if (DWORD1(v70) != 5 && DWORD1(v70)) {
      long long v30 = sub_2483F0A38(v10 < 3);
    }
    else {
      long long v30 = sub_2483F0AE8(v10 < 3);
    }
    sub_248418C10((uint64_t)v61, (uint64_t)v30);
    sub_248418C10(*(void *)a1 + 352, (uint64_t)v61);
    v61[0] = &unk_26FC65EC8;
    if (__p)
    {
      uint64_t v63 = __p;
      operator delete(__p);
    }
    uint64_t v13 = *(void *)a1;
  }
  sub_248493544((uint64_t)v61, (uint64_t)(a1 + 8));
  sub_24849366C((uint64_t)v64, a5);
  v64[25] = 0u;
  uint64_t v65 = 0;
  uint64_t v31 = (*(uint64_t (**)(void, uint64_t))(v13 + 8))(*(void *)v13, 1200);
  uint64_t v32 = v31;
  if (v31) {
    sub_248493850(v31, (uint64_t)v61);
  }
  v66[0] = v32;
  v66[1] = v13;
  sub_248493D80((uint64_t)v61);
  uint64_t v33 = *(void *)a1;
  if (!v32)
  {
    uint64_t v14 = 1;
    *(_DWORD *)(v33 + 2852) = 1;
    goto LABEL_122;
  }
  uint64_t v34 = *(void *)(v33 + 632);
  uint64_t v35 = *(void *)(v33 + 640);
  if (v34 == v35) {
    goto LABEL_120;
  }
  do
  {
    uint64_t v36 = (void *)v66[0];
    long long v37 = *(unsigned char **)(v66[0] + 1184);
    unint64_t v38 = *(void *)(v66[0] + 1192);
    if (!v12 || *(_DWORD *)(v34 + 12))
    {
      if ((unint64_t)v37 < v38)
      {
        *long long v37 = 0;
        uint64_t v39 = v37 + 1;
        goto LABEL_86;
      }
      unint64_t v41 = *(void *)(v66[0] + 1176);
      uint64_t v42 = &v37[-v41];
      uint64_t v43 = (uint64_t)&v37[-v41 + 1];
      if (v43 < 0) {
        sub_2483E92E8();
      }
      unint64_t v44 = v38 - v41;
      if (2 * v44 > v43) {
        uint64_t v43 = 2 * v44;
      }
      if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v45 = v43;
      }
      if (v45) {
        uint64_t v46 = (char *)operator new(v45);
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v53 = &v42[(void)v46];
      long long v54 = &v42[(void)v46];
      *long long v54 = 0;
      long long v40 = v54 + 1;
      if (v37 != (unsigned char *)v41)
      {
        uint64_t v55 = &v37[~v41];
        do
        {
          char v56 = *--v37;
          (v55--)[(void)v46] = v56;
        }
        while (v37 != (unsigned char *)v41);
        long long v37 = (unsigned char *)v36[147];
        uint64_t v53 = v46;
      }
      v36[147] = v53;
      v36[148] = v40;
      v36[149] = &v46[v45];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      if ((unint64_t)v37 < v38)
      {
        BOOL v12 = 0;
        *long long v37 = 1;
        uint64_t v39 = v37 + 1;
LABEL_86:
        long long v40 = v39;
        goto LABEL_118;
      }
      unint64_t v47 = *(void *)(v66[0] + 1176);
      uint64_t v48 = &v37[-v47];
      uint64_t v49 = (uint64_t)&v37[-v47 + 1];
      if (v49 < 0) {
        sub_2483E92E8();
      }
      unint64_t v50 = v38 - v47;
      if (2 * v50 > v49) {
        uint64_t v49 = 2 * v50;
      }
      if (v50 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v51 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v51 = v49;
      }
      if (v51) {
        long long v52 = (char *)operator new(v51);
      }
      else {
        long long v52 = 0;
      }
      uint64_t v57 = &v48[(void)v52];
      long long v58 = &v48[(void)v52];
      *long long v58 = 1;
      long long v40 = v58 + 1;
      if (v37 != (unsigned char *)v47)
      {
        uint64_t v59 = &v37[~v47];
        do
        {
          char v60 = *--v37;
          (v59--)[(void)v52] = v60;
        }
        while (v37 != (unsigned char *)v47);
        long long v37 = (unsigned char *)v36[147];
        uint64_t v57 = v52;
      }
      v36[147] = v57;
      v36[148] = v40;
      v36[149] = &v52[v51];
      if (v37) {
        operator delete(v37);
      }
      BOOL v12 = 0;
    }
LABEL_118:
    v36[148] = v40;
    v34 += 96;
  }
  while (v34 != v35);
  uint64_t v33 = *(void *)a1;
  uint64_t v32 = v66[0];
LABEL_120:
  *(_DWORD *)(v32 + 408) = *(_DWORD *)(v33 + 300);
  sub_248493E24(a1, v66);
  uint64_t v14 = 0;
LABEL_122:
  sub_24848C7C4(v66, 0);
  return v14;
}

void sub_248495564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  sub_24848C7C4((void *)(v14 - 176), 0);
  _Unwind_Resume(a1);
}

void *sub_2484955E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  v17[0] = 0;
  v17[1] = v4;
  v18[0] = 0;
  v18[1] = v4;
  uint64_t v19 = a2;
  BOOL v20 = sub_2484BFC70;
  uint64_t v5 = (void *)v4[11];
  unint64_t v6 = v4[12];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = v4[10];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v8) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      sub_2483E92E8();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    v21[4] = v4 + 12;
    uint64_t v13 = (char *)sub_248453088(v12);
    uint64_t v14 = &v13[48 * v9];
    v21[0] = v13;
    v21[1] = v14;
    v21[3] = &v13[48 * v15];
    v17[0] = 0;
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = v4;
    v18[0] = 0;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = v4;
    *((void *)v14 + 4) = a2;
    *((void *)v14 + 5) = sub_2484BFC70;
    void v21[2] = v14 + 48;
    sub_248494300(v4 + 10, v21);
    uint64_t v7 = (void *)v4[11];
    sub_24849438C((uint64_t)v21);
  }
  else
  {
    void *v5 = 0;
    v5[1] = v4;
    void v5[2] = 0;
    v5[3] = v4;
    v5[4] = a2;
    void v5[5] = sub_2484BFC70;
    uint64_t v7 = v5 + 6;
  }
  v4[11] = v7;
  ++*(void *)(*(void *)a1 + 64);
  uint64_t v19 = 0;
  sub_24848C89C(v18, 0);
  return sub_24848C7C4(v17, 0);
}

void sub_248495760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484943DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_248495774(void *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)a1 + 64))
  {
    sub_248469554(a1[47]);
    return 1;
  }
  uint64_t v15 = 0;
  long long v14 = xmmword_248550790;
  ((void (*)(void, long long *))a1[3])(a1[2], &v14);
  uint64_t v13 = 0;
  uint64_t v2 = (char *)((uint64_t (*)(void, void, void, void, void, uint64_t *))a1[4])(a1[2], 0, 0, *a1, a1[1], &v13);
  long long v18 = (uint64_t (**)())&unk_26FC63B78;
  uint64_t v19 = a1 + 2;
  BOOL v20 = &v18;
  int v16 = v2;
  sub_248467AA0((uint64_t)v17, (uint64_t)&v18);
  sub_248467B20(&v18);
  if (v16)
  {
    uint64_t v3 = (void *)a1[47];
    long long v11 = v14;
    uint64_t v12 = v15;
    sub_248495A14(v3, v16, &v11, *a1, a1[1], v13);
    sub_248467BA4((uint64_t *)&v16);
    sub_248467B20(v17);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 5) >= 2)
    {
      unint64_t v4 = 1;
      uint64_t v5 = 96;
      do
      {
        ((void (*)(void, unint64_t, long long *))a1[5])(a1[2], v4 - 1, &v14);
        unint64_t v6 = (char *)((uint64_t (*)(void, unint64_t, void, void, void, void, uint64_t *))a1[6])(a1[2], v4 - 1, 0, 0, *a1, a1[1], &v13);
        long long v18 = &off_26FC63C28;
        uint64_t v19 = a1 + 2;
        BOOL v20 = &v18;
        int v16 = v6;
        sub_248467AA0((uint64_t)v17, (uint64_t)&v18);
        sub_248467B20(&v18);
        if (v16)
        {
          uint64_t v7 = (void *)(a1[47] + v5);
          long long v9 = v14;
          uint64_t v10 = v15;
          sub_248495A14(v7, v16, &v9, *a1, a1[1], v13);
        }
        sub_248467BA4((uint64_t *)&v16);
        sub_248467B20(v17);
        ++v4;
        v5 += 96;
      }
      while (v4 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 5));
    }
    *((unsigned char *)a1 + 64) = 0;
    return 1;
  }
  sub_248467BA4((uint64_t *)&v16);
  sub_248467B20(v17);
  return 0;
}

void sub_2484959EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_248467BA4((uint64_t *)va);
  sub_248467B20(v12);
  _Unwind_Resume(a1);
}

void sub_248495A14(void *a1, char *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v14 = *a3;
  uint64_t v15 = *((void *)a3 + 2);
  sub_2484694EC((uint64_t)a1, (uint64_t)&v14, a4, a5);
  uint64_t v10 = a1[9];
  *a1 = 0;
  unint64_t v11 = a1[8] * a5;
  unint64_t v12 = a1[10] - v10;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      a1[10] = v10 + v11;
    }
  }
  else
  {
    sub_2483EE8AC(a1 + 9, v11 - v12);
  }
  if (a5)
  {
    uint64_t v13 = 0;
    do
    {
      memcpy((void *)(a1[9] + a1[8] * v13++), a2, a1[8]);
      a2 += a6;
    }
    while (a5 != v13);
  }
}

void *sub_248495AD8()
{
  return &unk_26FC63A10;
}

uint64_t sub_248495AE4(uint64_t a1, uint64_t a2)
{
  if (sub_248417674(*(void *)(a2 + 8), (uint64_t)"ZN3jxlL21GetExtraChannelBufferER26JxlChunkedFrameInputSourcemmmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_248495B20(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40))(**(void **)(a1 + 8), *a2);
}

uint64_t sub_248495B3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26FC63C28;
  a2[1] = v2;
  return result;
}

void *sub_248495B60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_26FC63C28;
  result[1] = v3;
  return result;
}

void sub_248495BA8()
{
}

void *sub_248495BC0()
{
  return &unk_26FC639F0;
}

uint64_t sub_248495BCC(uint64_t a1, uint64_t a2)
{
  if (sub_248417674(*(void *)(a2 + 8), (uint64_t)"ZN3jxlL14GetColorBufferER26JxlChunkedFrameInputSourcemmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_248495C08(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40))(**(void **)(a1 + 8), *a2);
}

uint64_t sub_248495C24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FC63B78;
  a2[1] = v2;
  return result;
}

void *sub_248495C48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FC63B78;
  result[1] = v3;
  return result;
}

void sub_248495C90()
{
}

uint64_t sub_248495CA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  if (!a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    a1 = v8;
  }
  return sub_248495CF0((uint64_t)a1, a4, (uint64_t)v5);
}

uint64_t sub_248495CF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    v6[0] = sub_2483F1794;
    v6[1] = a3;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))result)(*(void *)(result + 8), v6, sub_248495DB8, sub_248495DA0, 0, a2);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = a2;
      do
        uint64_t result = (**(uint64_t (***)(void, uint64_t))a3)(**(void **)(a3 + 8), v4++);
      while (v5 != v4);
    }
  }
  return result;
}

uint64_t sub_248495DA0(uint64_t a1, unsigned int a2)
{
  return (***(uint64_t (****)(void, void))(a1 + 8))(**(void **)(*(void *)(a1 + 8) + 8), a2);
}

uint64_t sub_248495DB8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t JxlEncoderAddChunkedFrame(uint64_t *a1, int a2, long long *a3)
{
  uint64_t v38 = 0;
  v39[0] = 0;
  int v6 = sub_248492AB8(a1, v39, (unint64_t *)&v38);
  uint64_t v7 = *a1;
  if (v6)
  {
    uint64_t v8 = 1;
    *(_DWORD *)(v7 + 2852) = 1;
  }
  else
  {
    uint64_t v23 = *(void *)(v7 + 176);
    unint64_t v10 = v38;
    uint64_t v9 = v39[0];
    sub_248469238((uint64_t)&v30, v39[0], v38, *(unsigned int *)(v7 + 624));
    long long v11 = a3[1];
    long long v31 = *a3;
    long long v32 = v11;
    long long v33 = a3[2];
    char v34 = 1;
    char v25 = 1;
    void v24[2] = v11;
    v24[3] = v33;
    v24[0] = v30;
    v24[1] = v31;
    sub_248452670((uint64_t)v26, (uint64_t)v35);
    v26[296] = v35[296];
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    uint64_t v12 = v36;
    uint64_t v13 = v37;
    v39[1] = (uint64_t)&v27;
    char v40 = 0;
    if (v37 != v36)
    {
      sub_24846963C(&v27, 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 5));
      uint64_t v43 = v28;
      uint64_t v44 = v28;
      v41[0] = (void **)&v29;
      v41[1] = (void **)&v43;
      v41[2] = (void **)&v44;
      char v42 = 0;
      uint64_t v14 = v28;
      do
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v12;
        long long v15 = *(_OWORD *)(v12 + 16);
        long long v16 = *(_OWORD *)(v12 + 32);
        long long v17 = *(_OWORD *)(v12 + 48);
        *(void *)(v14 + 64) = *(void *)(v12 + 64);
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v17;
        *(_OWORD *)(v14 + 16) = v15;
        *(void *)(v14 + 80) = 0;
        *(void *)(v14 + 88) = 0;
        *(void *)(v14 + 72) = 0;
        sub_2483F01FC((void *)(v14 + 72), *(const void **)(v12 + 72), *(void *)(v12 + 80), *(void *)(v12 + 80) - *(void *)(v12 + 72));
        uint64_t v14 = v44 + 96;
        v44 += 96;
        v12 += 96;
      }
      while (v12 != v13);
      char v42 = 1;
      sub_24849610C((uint64_t)v41);
      uint64_t v28 = v14;
    }
    int v18 = sub_248494F54(a1, v9, v10, v23 != 0, (uint64_t)v24);
    v41[0] = (void **)&v27;
    sub_24846941C(v41);
    sub_248453364((uint64_t)v26);
    if (v18)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v19 = *(void *)(*(void *)(*a1 + 88) - 48);
      if (v19)
      {
        BOOL v20 = *(unsigned char **)(v19 + 1176);
        uint64_t v21 = *(unsigned char **)(v19 + 1184);
        if (v20 != v21) {
          memset(v20, 1, v21 - v20);
        }
      }
      if (a2) {
        *(_WORD *)(*a1 + 2865) = 257;
      }
      if (v23) {
        uint64_t v8 = JxlEncoderFlushInput(*a1);
      }
      else {
        uint64_t v8 = 0;
      }
    }
    v41[0] = (void **)&v36;
    sub_24846941C(v41);
    sub_248453364((uint64_t)v35);
  }
  return v8;
}

void sub_248496060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t JxlEncoderFlushInput(uint64_t a1)
{
  if (*(void *)(a1 + 176))
  {
    while (*(void *)(a1 + 80) != *(void *)(a1 + 88))
    {
      if (sub_248488B10(a1)) {
        return 1;
      }
    }
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
}

uint64_t sub_24849610C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 96;
    }
  }
  return a1;
}

uint64_t JxlEncoderCloseInput(uint64_t result)
{
  *(_WORD *)(result + 2865) = 257;
  return result;
}

uint64_t JxlEncoderSetExtraChannelBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v5 = *a1;
  if (*(_DWORD *)(*a1 + 624) > a5)
  {
    if (*(unsigned char *)(v5 + 2867))
    {
      if (*(unsigned char *)(v5 + 2868))
      {
        uint64_t v6 = *(void *)(v5 + 88);
        if (*(void *)(v5 + 80) != v6 && !*(unsigned char *)(v5 + 2865))
        {
          uint64_t v9 = *(void *)(v6 - 48);
          int v11 = 1;
          long long v12 = *(_OWORD *)(a2 + 4);
          int v13 = *(_DWORD *)(a2 + 20);
          if (sub_248469350((uint64_t *)(v9 + 776), a5 + 1, a3, a4, (long long *)&v11))
          {
            uint64_t result = 0;
            *(unsigned char *)(*(void *)(v9 + 1176) + a5) = 1;
            return result;
          }
          uint64_t v5 = *a1;
        }
      }
    }
  }
  *(_DWORD *)(v5 + 2852) = 129;
  return 1;
}

uint64_t JxlEncoderCloseFrames(uint64_t result)
{
  *(unsigned char *)(result + 2865) = 1;
  return result;
}

uint64_t JxlEncoderCloseBoxes(uint64_t result)
{
  *(unsigned char *)(result + 2866) = 1;
  return result;
}

uint64_t JxlEncoderSetOutputProcessor(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 136) && a2[4] && a2[1] && a2[2]) {
    operator new();
  }
  *(_DWORD *)(a1 + 2852) = 129;
  return 1;
}

void sub_2484963A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t JxlEncoderProcessOutput(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 176))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    *(void *)(a1 + 128) = a2;
    *(void *)(a1 + 136) = a3;
    sub_248488474(a1 + 104);
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 80);
      uint64_t v6 = *(void *)(a1 + 88);
      if (!*a3 || v5 == v6) {
        break;
      }
      if (sub_248488B10(a1)) {
        return 1;
      }
    }
    if (v5 == v6) {
      return 2 * (*(void *)(a1 + 160) < *(void *)(a1 + 152));
    }
    else {
      return 2;
    }
  }
}

uint64_t JxlEncoderSetFrameHeader(uint64_t a1, long long *a2)
{
  if (*((_DWORD *)a2 + 10) < 4u)
  {
    unint64_t v2 = *((unsigned int *)a2 + 11);
    if (!v2
      || 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)a1 + 640) - *(void *)(*(void *)a1 + 632)) >> 5) > v2)
    {
      long long v3 = *a2;
      long long v4 = a2[1];
      long long v5 = a2[2];
      *(void *)(a1 + 704) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 672) = v4;
      *(_OWORD *)(a1 + 688) = v5;
      *(_OWORD *)(a1 + 656) = v3;
      MEMORY[0x24C579E00](a1 + 736, &unk_248558F79);
      return 0;
    }
    *(_DWORD *)(*(void *)a1 + 2852) = 129;
  }
  else
  {
    *(_DWORD *)(*(void *)a1 + 2852) = 129;
  }
  return 1;
}

__n128 JxlEncoderSetExtraChannelBlendInfo(void *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v3 = *(unsigned int *)(*a1 + 624);
  if (v3 <= a2)
  {
    *(_DWORD *)(*a1 + 2852) = 129;
  }
  else
  {
    uint64_t v7 = (void *)a1[90];
    uint64_t v8 = a1[89];
    uint64_t v9 = (uint64_t)v7 - v8;
    if (v3 != ((uint64_t)v7 - v8) >> 4)
    {
      uint64_t v10 = v9 >> 4;
      BOOL v11 = v3 >= v9 >> 4;
      unint64_t v12 = v3 - (v9 >> 4);
      if (v12 != 0 && v11)
      {
        uint64_t v13 = a1[91];
        if (v12 <= (v13 - (uint64_t)v7) >> 4)
        {
          BOOL v26 = &v7[2 * v12];
          uint64_t v27 = 16 * v3 - 16 * v10;
          do
          {
            void *v7 = 0;
            v7[1] = 0;
            v7 += 2;
            v27 -= 16;
          }
          while (v27);
          a1[90] = v26;
        }
        else
        {
          unint64_t v14 = v13 - v8;
          unint64_t v15 = (v13 - v8) >> 3;
          if (v15 <= v3) {
            unint64_t v15 = *(unsigned int *)(*a1 + 624);
          }
          if (v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          long long v17 = (char *)sub_2483F3EB0(v16);
          uint64_t v19 = &v17[16 * v10];
          BOOL v20 = &v17[16 * v3];
          uint64_t v21 = 16 * v3 - 16 * v10;
          uint64_t v22 = v19;
          do
          {
            *(_OWORD *)uint64_t v22 = 0uLL;
            v22 += 16;
            v21 -= 16;
          }
          while (v21);
          uint64_t v23 = &v17[16 * v18];
          unint64_t v24 = (char *)a1[90];
          char v25 = (char *)a1[89];
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v24 - 1);
              v19 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            unint64_t v24 = (char *)a1[89];
          }
          a1[89] = v19;
          a1[90] = v20;
          a1[91] = v23;
          if (v24) {
            operator delete(v24);
          }
        }
      }
      else if (!v11)
      {
        a1[90] = v8 + 16 * v3;
      }
      uint64_t v8 = a1[89];
    }
    __n128 result = *a3;
    *(__n128 *)(v8 + 16 * a2) = *a3;
  }
  return result;
}

uint64_t JxlEncoderSetFrameName(uint64_t a1, char *a2)
{
  if (!a2) {
    a2 = (char *)&unk_248558F79;
  }
  sub_2483EEA38(&__str, a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0x430)
  {
    *(_DWORD *)(*(void *)a1 + 2852) = 129;
    uint64_t v3 = 1;
LABEL_9:
    operator delete(__str.__r_.__value_.__l.__data_);
    return v3;
  }
  std::string::operator=((std::string *)(a1 + 736), &__str);
  uint64_t v3 = 0;
  uint64_t result = 0;
  int v5 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  int v6 = __str.__r_.__value_.__r.__words[1];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  *(_DWORD *)(a1 + 664) = v6;
  if (v5 < 0) {
    goto LABEL_9;
  }
  return result;
}

void sub_2484966EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JxlEncoderSetFrameBitDepth(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)a2 >= 2u)
  {
    sub_24848C860("%s:%d: Only JXL_BIT_DEPTH_FROM_PIXEL_FORMAT and JXL_BIT_DEPTH_FROM_CODESTREAM is implemented for input buffers.\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 2598);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = *a2;
    *(_DWORD *)(a1 + 768) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 760) = v4;
  }
  return result;
}

__n128 JxlColorEncodingSetToSRGB(uint64_t a1, int a2)
{
  uint64_t v3 = sub_2483F0A38(a2 != 0);
  sub_2483EBCC0((uint64_t)v7, (uint64_t)(v3 + 16));
  long long v4 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = v8;
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

__n128 JxlColorEncodingSetToLinearSRGB(uint64_t a1, int a2)
{
  uint64_t v3 = sub_2483F0AE8(a2 != 0);
  sub_2483EBCC0((uint64_t)v7, (uint64_t)(v3 + 16));
  long long v4 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = v8;
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t JxlEncoderAllowExpertOptions(uint64_t result)
{
  *(unsigned char *)(result + 2870) = 1;
  return result;
}

uint64_t JxlEncoderSetDebugImageCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 640) = a2;
  *(void *)(result + 648) = a3;
  return result;
}

void JxlEncoderStatsCreate()
{
}

uint64_t JxlEncoderStatsDestroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t JxlEncoderCollectStats(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(void *)(result + 776) = a2;
  }
  return result;
}

uint64_t JxlEncoderStatsGet(uint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        __n128 result = *(void *)(result + 24);
        break;
      case 1:
        __n128 result = *(void *)(result + 64);
        break;
      case 2:
        __n128 result = *(void *)(result + 104);
        break;
      case 3:
        __n128 result = *(void *)(result + 144);
        break;
      case 4:
        __n128 result = *(void *)(result + 184);
        break;
      case 5:
        __n128 result = *(void *)(result + 224);
        break;
      case 6:
        __n128 result = *(void *)(result + 264);
        break;
      case 7:
        __n128 result = *(void *)(result + 304);
        break;
      case 8:
        __n128 result = *(void *)(result + 344);
        break;
      case 9:
        __n128 result = *(void *)(result + 384);
        break;
      case 10:
        __n128 result = *(void *)(result + 424);
        break;
      case 11:
        __n128 result = *(void *)(result + 464);
        break;
      case 12:
        __n128 result = *(void *)(result + 504);
        break;
      case 13:
        __n128 result = *(void *)(result + 544);
        break;
      case 14:
        __n128 result = *(void *)(result + 584);
        break;
      case 15:
        __n128 result = *(void *)(result + 608);
        break;
      case 16:
        __n128 result = *(void *)(result + 616);
        break;
      case 17:
        __n128 result = *(void *)(result + 624);
        break;
      case 18:
        __n128 result = *(void *)(result + 632);
        break;
      case 19:
        __n128 result = *(void *)(result + 656);
        break;
      case 20:
        __n128 result = *(void *)(result + 664);
        break;
      case 21:
        __n128 result = *(void *)(result + 672);
        break;
      case 22:
      case 23:
        __n128 result = *(void *)(result + 680);
        break;
      case 24:
        __n128 result = *(void *)(result + 688);
        break;
      case 25:
        __n128 result = *(int *)(result + 696);
        break;
      default:
        __n128 result = 0;
        break;
    }
  }
  return result;
}

double JxlEncoderStatsMerge(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      *(void *)&double result = sub_2484D9334(a1, a2).u64[0];
    }
  }
  return result;
}

void sub_248496A3C(void *a1, uint64_t a2)
{
  uint64_t v83 = 0;
  long long __dst = 0;
  uint64_t v85 = 0;
  uint64_t v3 = (unsigned __int8 **)a1[3];
  long long v4 = (unsigned __int8 **)a1[4];
  if (v3 == v4)
  {
    long long __p = 0;
    BOOL v20 = 0;
    unint64_t v21 = 0;
LABEL_74:
    unint64_t v45 = 0;
    uint64_t v46 = __p;
    for (uint64_t i = __p + 3; ; i += 2)
    {
      BOOL v48 = v21 == v45;
      if (v21 == v45)
      {
        uint64_t v7 = v20;
        goto LABEL_79;
      }
      ++v45;
      if (((*(void *)((char *)v20 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
        break;
      }
      uint64_t v49 = (char *)*(i - 1);
      int64_t v50 = *i;
      size_t v51 = &v49[*i];
      sub_2483EFFD4((uint64_t)&v83, (char *)__dst, v49, v51, v50);
    }
    BOOL v48 = 0;
    goto LABEL_95;
  }
  long long __p = 0;
  long long v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  long long v10 = 0uLL;
  char v11 = 1;
  while (1)
  {
    uint64_t v13 = *v3;
    unint64_t v12 = v3[1];
    if (*v3 == v12
      || *v13 != 226
      || (uint64_t v14 = v12 - v13, v15 = (unint64_t)(v12 - v13) >= 3, v16 = v12 - v13 - 3, !v15)
      || ((uint64_t v17 = __rev16(*(unsigned __int16 *)(v13 + 1)), v16 >= 0xC) ? (v18 = v17 == v14 - 1) : (v18 = 0),
          !v18
       || (*(void *)(v13 + 3) == 0x464F52505F434349 ? (BOOL v19 = *(_DWORD *)(v13 + 11) == 4541513) : (BOOL v19 = 0), !v19)))
    {
      BOOL v20 = v7;
      unint64_t v21 = v8;
      goto LABEL_17;
    }
    if ((unint64_t)(v14 - 15) < 2 || (v22 = v13[15], ++v9, v9 != v22) || (unsigned __int8 v23 = v13[16]) == 0)
    {
LABEL_97:
      BOOL v48 = 0;
      goto LABEL_99;
    }
    unint64_t v21 = v13[16];
    if (v11)
    {
      unint64_t v24 = v21 + 1;
      unint64_t v25 = ((char *)v5 - (char *)__p) >> 4;
      if (v25 <= v21)
      {
        unint64_t v26 = v24 - v25;
        if (v24 - v25 <= (v6 - (char *)v5) >> 4)
        {
          if (v24 != v25)
          {
            long long v72 = v10;
            unsigned __int8 v76 = v13[16];
            long long v79 = v6;
            unsigned __int8 v32 = v13[15];
            unint64_t v66 = v26;
            bzero(v5, 16 * v26);
            unint64_t v24 = v21 + 1;
            unsigned __int8 v23 = v76;
            int v6 = v79;
            LOBYTE(v22) = v32;
            long long v10 = v72;
            v5 += 2 * v66;
          }
        }
        else
        {
          unint64_t v65 = v24 - v25;
          unsigned __int8 v68 = v13[15];
          unsigned __int8 v75 = v13[16];
          long long v71 = v10;
          unint64_t v27 = (v6 - (char *)__p) >> 3;
          if (v27 <= v24) {
            unint64_t v27 = v21 + 1;
          }
          if ((unint64_t)(v6 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          if (v27 >> 60) {
            sub_2483E9338();
          }
          unint64_t v78 = v27;
          uint64_t v63 = (char *)operator new(16 * v27);
          uint64_t v28 = &v63[16 * v25];
          bzero(v28, 16 * v65);
          uint64_t v29 = v28;
          if (v5 == __p)
          {
            long long v31 = __p;
          }
          else
          {
            long long v30 = v28;
            long long v31 = __p;
            do
            {
              uint64_t v28 = v30 - 16;
              *((_OWORD *)v30 - 1) = *((_OWORD *)v5 - 1);
              v5 -= 2;
              v30 -= 16;
            }
            while (v5 != __p);
          }
          int v6 = &v63[16 * v78];
          long long v5 = (int64_t *)&v29[16 * v65];
          if (v31)
          {
            operator delete(v31);
            int v6 = &v63[16 * v78];
          }
          long long __p = (int64_t *)v28;
          long long v10 = v71;
          LOBYTE(v22) = v68;
          unint64_t v24 = v21 + 1;
          unsigned __int8 v23 = v75;
        }
      }
      else if (v24 < v25)
      {
        long long v5 = &__p[2 * v24];
      }
      uint64_t v33 = v10;
      if ((unint64_t)v10 > v21)
      {
        *(void *)&long long v10 = v24;
        BOOL v20 = v7;
        goto LABEL_69;
      }
      unint64_t v67 = v24 - v10;
      BOOL v34 = *((void *)&v10 + 1) << 6 < v24 - (unint64_t)v10
         || (unint64_t)v10 > (*((void *)&v10 + 1) << 6) - (v24 - (unint64_t)v10);
      unsigned __int8 v77 = v23;
      long long v80 = v6;
      if (!v34)
      {
        uint64_t v36 = &v7[(unint64_t)v10 >> 6];
        LODWORD(v37) = v10 & 0x3F;
        *(void *)&long long v10 = v24;
        BOOL v20 = v7;
        goto LABEL_67;
      }
      uint64_t v64 = v10;
      char v69 = v22;
      unint64_t v70 = v24;
      if (*((void *)&v10 + 1) << 6 > 0x3FFFFFFFFFFFFFFEuLL)
      {
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v35 = *((void *)&v10 + 1) << 7;
        if (*((void *)&v10 + 1) << 7 <= (unint64_t)(((_WORD)v21 + 64) & 0x1C0)) {
          uint64_t v35 = ((_WORD)v21 + 64) & 0x1C0;
        }
        if (!v35)
        {
          BOOL v20 = 0;
          *((void *)&v10 + 1) = 0;
          goto LABEL_60;
        }
        if (v35 < 0) {
          sub_2483E92E8();
        }
      }
      BOOL v20 = sub_2483F04AC(((unint64_t)(v35 - 1) >> 6) + 1);
      *((void *)&v10 + 1) = v38;
      *BOOL v20 = 0;
      unsigned __int8 v23 = v77;
      int v6 = v80;
      LOBYTE(v22) = v69;
      unint64_t v24 = v70;
      uint64_t v33 = v64;
LABEL_60:
      *(void *)&long long v10 = v24;
      uint64_t v36 = v20;
      long long v73 = v10;
      if (v33 < 1) {
        goto LABEL_65;
      }
      uint64_t v39 = v33 >> 6;
      if ((unint64_t)(v33 + 63) >= 0x7F)
      {
        uint64_t v61 = v33 >> 6;
        memmove(v20, v7, 8 * v39);
        uint64_t v39 = v61;
        uint64_t v33 = v64;
        LOBYTE(v22) = v69;
        unint64_t v24 = v70;
        unsigned __int8 v23 = v77;
        int v6 = v80;
        long long v10 = v73;
      }
      uint64_t v37 = v33 - (v39 << 6);
      uint64_t v36 = &v20[v39];
      if (v37 < 1)
      {
LABEL_65:
        LODWORD(v37) = 0;
        if (!v7) {
          goto LABEL_67;
        }
      }
      else
      {
        *uint64_t v36 = *v36 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v39 << 6) - v33)) | v7[v39] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v39 << 6) - v33));
      }
      int v60 = v37;
      long long v62 = v36;
      char v40 = v7;
      unsigned __int8 v41 = v23;
      operator delete(v40);
      LODWORD(v37) = v60;
      uint64_t v36 = v62;
      uint64_t v33 = v64;
      LOBYTE(v22) = v69;
      unint64_t v24 = v70;
      unsigned __int8 v23 = v41;
      int v6 = v80;
      long long v10 = v73;
LABEL_67:
      if (v24 != v33)
      {
        uint64_t v86 = v36;
        int v87 = v37;
        long long v74 = v10;
        char v42 = v22;
        sub_2483F802C((uint64_t)&v86, v67);
        unsigned __int8 v23 = v77;
        int v6 = v80;
        LOBYTE(v22) = v42;
        long long v10 = v74;
      }
      goto LABEL_69;
    }
    if (v8 != v21) {
      goto LABEL_97;
    }
    BOOL v20 = v7;
    unint64_t v21 = v8;
LABEL_69:
    if ((v22 - 1) >= v23) {
      break;
    }
    uint64_t v43 = v20[v9 >> 6];
    if ((v43 & (1 << v9)) != 0)
    {
      BOOL v48 = 0;
      uint64_t v46 = __p;
      goto LABEL_95;
    }
    char v11 = 0;
    v20[v9 >> 6] = v43 | (1 << v9);
    uint64_t v44 = &__p[2 * v9];
    *uint64_t v44 = (int64_t)(v13 + 17);
    v44[1] = v14 - 17;
LABEL_17:
    v3 += 3;
    uint64_t v7 = v20;
    unint64_t v8 = v21;
    if (v3 == v4) {
      goto LABEL_74;
    }
  }
  BOOL v48 = 0;
  uint64_t v7 = v20;
LABEL_99:
  uint64_t v46 = __p;
LABEL_79:
  BOOL v20 = v7;
  if (v7)
  {
LABEL_95:
    operator delete(v20);
    if (v46) {
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (!v46) {
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v46);
LABEL_82:
  long long v52 = v83;
  if (!v48 || (uint64_t v53 = __dst, v83 == __dst))
  {
    uint64_t v55 = sub_2483F0A38(a1[19] - a1[18] == 48);
    *(_WORD *)(a2 + 8) = *((_WORD *)v55 + 4);
    uint64_t v56 = *((void *)v55 + 2);
    *(void *)(a2 + 21) = *(void *)(v55 + 21);
    *(void *)(a2 + 16) = v56;
    if (v55 != (char *)a2) {
      sub_2483EFEC8((void *)(a2 + 32), *((char **)v55 + 4), *((char **)v55 + 5), *((void *)v55 + 5) - *((void *)v55 + 4));
    }
    long long v57 = *(_OWORD *)(v55 + 56);
    long long v58 = *(_OWORD *)(v55 + 72);
    long long v59 = *(_OWORD *)(v55 + 88);
    *(_DWORD *)(a2 + 104) = *((_DWORD *)v55 + 26);
    *(_OWORD *)(a2 + 88) = v59;
    *(_OWORD *)(a2 + 72) = v58;
    *(_OWORD *)(a2 + 56) = v57;
    *(void *)(a2 + 120) = *((void *)v55 + 15);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(v55 + 136);
    *(void *)(a2 + 160) = *((void *)v55 + 20);
    *(void *)(a2 + 176) = *((void *)v55 + 22);
    *(void *)(a2 + 192) = *((void *)v55 + 24);
    if (v52)
    {
      operator delete(v52);
    }
  }
  else
  {
    long long v54 = *(void **)(a2 + 32);
    if (v54)
    {
      *(void *)(a2 + 40) = v54;
      operator delete(v54);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
    }
    *(void *)(a2 + 32) = v52;
    *(void *)(a2 + 40) = v53;
    *(void *)(a2 + 48) = v85;
    *(unsigned char *)(a2 + 28) = 0;
    *(unsigned char *)(a2 + 9) = 1;
  }
}

void sub_2484971A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,void *a22)
{
  if (v22) {
    operator delete(v22);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484971FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  if ((v3 & 0xFFFFFFFFFFFFFFFDLL) != 1) {
    return 1;
  }
  if (v3 == 1)
  {
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a1 + 4);
    int v13 = *(_DWORD *)(a1 + 8);
    do
    {
      v15[v11] = v12;
      v14[v11++] = v13;
    }
    while (v11 != 3);
    unint64_t v8 = v15;
    unint64_t v9 = v14;
    return sub_2484972C8(a3, (uint64_t)v8, (uint64_t)v9);
  }
  if (v3 == 3)
  {
    uint64_t v5 = 0;
    int v6 = (int *)(a1 + 8);
    do
    {
      v17[v5] = *(v6 - 1);
      int v7 = *v6;
      v6 += 12;
      v16[v5++] = v7;
    }
    while (v5 != 3);
    unint64_t v8 = v17;
    unint64_t v9 = v16;
    return sub_2484972C8(a3, (uint64_t)v8, (uint64_t)v9);
  }
  return 0;
}

uint64_t sub_2484972C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v4 = 0;
    uint64_t v5 = i ^ 1;
    if (i == 2) {
      uint64_t v5 = 2;
    }
    while (1 << byte_248550964[v4] != *(unsigned __int8 *)(a2 + v5)
         || 1 << byte_248550968[v4] != *(unsigned __int8 *)(a3 + v5))
    {
      if (++v4 == 4) {
        return 1;
      }
    }
    *(_DWORD *)(a1 + 4 * i + 8) = v4;
  }
  uint64_t v6 = 0;
  unsigned __int8 v7 = 0;
  unsigned __int8 v8 = 0;
  do
  {
    uint64_t v9 = *(unsigned int *)(a1 + 8 + v6);
    unsigned int v10 = byte_248550964[v9];
    unsigned int v11 = byte_248550968[v9];
    if (v7 <= v10) {
      unsigned __int8 v7 = v10;
    }
    if (v8 <= v11) {
      unsigned __int8 v8 = v11;
    }
    v6 += 4;
  }
  while (v6 != 12);
  uint64_t v12 = 0;
  *(unsigned char *)(a1 + 20) = v7;
  *(unsigned char *)(a1 + 21) = v8;
  return v12;
}

uint64_t sub_248497398(void *a1, int *a2)
{
  unint64_t v2 = (_DWORD *)a1[18];
  uint64_t v3 = a1[19] - (void)v2;
  if (((0xAAAAAAAAAAAAAAABLL * (v3 >> 4)) & 0xFFFFFFFFFFFFFFFDLL) != 1) {
    return 1;
  }
  uint64_t v4 = (unsigned __int8 *)a1[24];
  uint64_t v5 = (unsigned __int8 *)a1[25];
  unint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    BOOL v11 = 0;
    goto LABEL_25;
  }
  unsigned __int8 v7 = (unsigned __int8 *)a1[24];
  while (*v7 != 224)
  {
    if (++v7 == v5)
    {
      unsigned __int8 v7 = (unsigned __int8 *)a1[25];
      break;
    }
  }
  if (v7 != v5)
  {
    BOOL v8 = 1;
    goto LABEL_32;
  }
  uint64_t v10 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = a1[3];
  if (v6 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v6;
  }
  while (1)
  {
    int v15 = v4[v10];
    if ((v15 & 0xF0) == 0xE0) {
      break;
    }
LABEL_23:
    if (v14 == ++v10)
    {
      BOOL v11 = 0;
      uint64_t v10 = v14;
      goto LABEL_25;
    }
  }
  if (v15 != 238
    || (unint64_t v16 = *(unsigned char **)(v13 + 24 * v12), *(void *)(v13 + 24 * v12 + 8) - (void)v16 != 15)
    || v16[3] != 65
    || v16[4] != 100
    || v16[5] != 111
    || v16[6] != 98
    || v16[7] != 101)
  {
    ++v12;
    goto LABEL_23;
  }
  BOOL v11 = v16[14] == 0;
LABEL_25:
  if (v10 == v6) {
    BOOL v11 = v3 == 144 && *v2 == 82 && v2[12] == 71 && v2[24] == 66;
  }
  BOOL v8 = !v11;
LABEL_32:
  uint64_t result = 0;
  if (v3 == 48 || v8) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  *a2 = v18;
  return result;
}

uint64_t sub_24849751C(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 8) = *(void *)a2;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
  uint64_t v8 = a1[6];
  unsigned __int8 v7 = (_DWORD *)a1[7];
  uint64_t v9 = (char *)v7 - v8;
  unint64_t v10 = ((uint64_t)v7 - v8) >> 2;
  if (v6 <= v10)
  {
    if (v6 < v10) {
      a1[7] = v8 - 0x5555555555555554 * ((uint64_t)(a1[4] - a1[3]) >> 3);
    }
  }
  else
  {
    uint64_t v11 = a1[8];
    if (v6 - v10 <= (v11 - (uint64_t)v7) >> 2)
    {
      unint64_t v25 = &v7[v6 - v10];
      unint64_t v26 = 0xAAAAAAAAAAAAAAACLL * ((uint64_t)(a1[4] - a1[3]) >> 3) - (void)v9;
      do
      {
        *v7++ = 0;
        v26 -= 4;
      }
      while (v26);
      a1[7] = v25;
    }
    else
    {
      if (v6 >> 62) {
        sub_2483E92E8();
      }
      unint64_t v12 = v11 - v8;
      unint64_t v13 = (v11 - v8) >> 1;
      if (v13 <= v6) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
      }
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      int v15 = (char *)sub_2483E9300(v14);
      uint64_t v17 = &v15[4 * v10];
      int v18 = &v15[4 * v6];
      unint64_t v19 = 4 * v6 - (void)v9;
      BOOL v20 = v17;
      do
      {
        *(_DWORD *)BOOL v20 = 0;
        v20 += 4;
        v19 -= 4;
      }
      while (v19);
      unint64_t v21 = &v15[4 * v16];
      uint64_t v22 = (char *)a1[6];
      for (uint64_t i = (char *)a1[7]; i != v22; i -= 4)
      {
        int v24 = *((_DWORD *)i - 1);
        *((_DWORD *)v17 - 1) = v24;
        v17 -= 4;
      }
      a1[6] = v17;
      a1[7] = v18;
      a1[8] = v21;
      if (v22) {
        operator delete(v22);
      }
    }
  }
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4] - v27;
  if (!v28)
  {
    uint64_t v56 = 0;
    goto LABEL_73;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = v28 / 24;
  unsigned __int8 v32 = (_DWORD *)a1[6];
  if (v31 <= 1) {
    unint64_t v31 = 1;
  }
  uint64_t v33 = (unsigned __int8 **)a1[3];
  unint64_t v34 = v31;
  do
  {
    uint64_t v35 = (uint64_t)*v33;
    if (**v33 == 226
      && __rev16(*(unsigned __int16 *)(v35 + 1)) >= 0xE
      && *(void *)(v35 + 3) == 0x464F52505F434349
      && *(_DWORD *)(v35 + 11) == 4541513)
    {
      uint64_t v37 = *(unsigned __int8 *)(v35 + 15);
      if (v29 + 1 == v37)
      {
        uint64_t v38 = *(unsigned __int8 *)(v35 + 16);
        if (!v30) {
          uint64_t v30 = v38;
        }
        if (v30 == v38)
        {
          *unsigned __int8 v32 = 1;
          uint64_t v30 = v38;
          uint64_t v29 = v37;
        }
      }
    }
    ++v32;
    v33 += 3;
    --v34;
  }
  while (v34);
  if (v29 != v30) {
    return 1;
  }
  char v39 = 0;
  char v40 = 0;
  unsigned __int8 v41 = (_DWORD *)a1[6];
  char v42 = (unsigned __int8 **)(v27 + 8);
  unint64_t v43 = v31;
  do
  {
    uint64_t v44 = *(v42 - 1);
    unint64_t v45 = *v42;
    if (v44 != *v42 && *v44 == 225)
    {
      int64_t v46 = v45 - v44;
      BOOL v47 = (unint64_t)(v45 - v44) >= 3;
      unint64_t v48 = v45 - v44 - 3;
      if (v47 && __rev16(*(unsigned __int16 *)(v44 + 1)) == v46 - 1)
      {
        if ((v39 & 1) == 0)
        {
          if (v48 < 6 || *(_DWORD *)(v44 + 3) ^ 0x66697845 | *(unsigned __int16 *)(v44 + 7))
          {
            char v39 = 0;
            if (v40)
            {
LABEL_65:
              char v40 = 1;
              goto LABEL_66;
            }
LABEL_51:
            if (v48 < 0x1D
              || ((uint64_t v49 = *(void *)(v44 + 3),
                   uint64_t v50 = *(void *)(v44 + 11),
                   uint64_t v51 = *(void *)(v44 + 19),
                   uint64_t v52 = *((void *)v44 + 3),
                   v49 == 0x6E2F2F3A70747468)
                ? (BOOL v53 = v50 == 0x2E65626F64612E73)
                : (BOOL v53 = 0),
                  v53 ? (BOOL v54 = v51 == 0x2F7061782F6D6F63) : (BOOL v54 = 0),
                  v54 ? (BOOL v55 = v52 == 0x2F302E312F7061) : (BOOL v55 = 0),
                  !v55))
            {
              char v40 = 0;
              goto LABEL_66;
            }
            *unsigned __int8 v41 = 3;
            goto LABEL_65;
          }
          *unsigned __int8 v41 = 2;
        }
        char v39 = 1;
        if (v40) {
          goto LABEL_65;
        }
        goto LABEL_51;
      }
    }
LABEL_66:
    ++v41;
    v42 += 3;
    --v43;
  }
  while (v43);
  uint64_t v56 = 0;
  long long v57 = (_DWORD *)a1[6];
  long long v58 = (void *)(v27 + 8);
  do
  {
    if (!*v57++) {
      uint64_t v56 = v56 + *v58 - *(v58 - 1);
    }
    v58 += 3;
    --v31;
  }
  while (v31);
LABEL_73:
  uint64_t v60 = a1[9];
  uint64_t v61 = a1[10] - v60;
  if (v61)
  {
    unint64_t v62 = v61 / 24;
    if (v62 <= 1) {
      unint64_t v62 = 1;
    }
    uint64_t v63 = (void *)(v60 + 8);
    do
    {
      uint64_t v56 = v56 + *v63 - *(v63 - 1);
      v63 += 3;
      --v62;
    }
    while (v62);
  }
  uint64_t v64 = a1[27];
  uint64_t v65 = a1[28] - v64;
  if (v65)
  {
    unint64_t v66 = v65 / 24;
    if (v66 <= 1) {
      unint64_t v66 = 1;
    }
    unint64_t v67 = (void *)(v64 + 8);
    do
    {
      uint64_t v56 = v56 + *v67 - *(v67 - 1);
      v67 += 3;
      --v66;
    }
    while (v66);
  }
  unint64_t v68 = a1[31] - a1[30] + v56;
  if (v68)
  {
    if (v68 + 4 * (v68 >> 14) + 6 >= v68) {
      uint64_t v69 = v68 + 4 * (v68 >> 14) + 6;
    }
    else {
      uint64_t v69 = 0;
    }
  }
  else
  {
    uint64_t v69 = 2;
  }
  uint64_t v102 = v69;
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  uint64_t v70 = sub_2484DA1C4((uint64_t)a1, &v99, 0, 0);
  if (!v70)
  {
    unint64_t v71 = v99;
    uint64_t v72 = ((v99 + 7) & 0xFFFFFFFFFFFFFFF8) - v99;
    if (v72)
    {
      *(void *)(*((void *)&v100 + 1) + ((unint64_t)v99 >> 3)) = *(unsigned __int8 *)(*((void *)&v100 + 1)
                                                                                              + ((unint64_t)v99 >> 3));
      unint64_t v71 = v99 + v72;
      *(void *)&long long v99 = v99 + v72;
    }
    int64_t v73 = v71 >> 3;
    sub_2484106F0((size_t *)&v99 + 1, v71 >> 3);
    long long v74 = (char *)*((void *)&v100 + 1);
    if (!*((void *)&v100 + 1)) {
      int64_t v73 = 0;
    }
    *((void *)&v99 + 1) = 0;
    long long v100 = 0uLL;
    sub_24844A110((unint64_t *)a2, v69 + v73);
    sub_2483EFFD4(a2, *(char **)(a2 + 8), v74, &v74[v73], v73);
    if (v74)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v74 - 3));
      free(*((void **)v74 - 4));
    }
    sub_2483D9E94();
    uint64_t v76 = v75;
    if (*(_DWORD *)(v75 + 6980))
    {
      unint64_t v77 = *(void *)a2;
      size_t v78 = *(void *)(a2 + 8) - *(void *)a2;
      size_t v79 = v78;
    }
    else
    {
      int v80 = *(_DWORD *)(a3 + 52);
      if (v80 < 0) {
        int v80 = 11 - *(_DWORD *)(a3 + 48);
      }
      *(_DWORD *)(v75 + 4) = v80;
      size_t v78 = *(void *)(a2 + 8) - *(void *)a2;
      *(void *)(v75 + 24) = v68;
      unint64_t v77 = *(void *)a2;
      size_t v79 = *(void *)(a2 + 8) - *(void *)a2;
    }
    if (v102 + v78 <= v79)
    {
      if (v102 + v78 < v79) {
        *(void *)(a2 + 8) = v77 + v102 + v78;
      }
    }
    else
    {
      sub_2483EE8AC((unint64_t *)a2, v102 + v78 - v79);
    }
    size_t v98 = 0;
    uint64_t v82 = a1[3];
    uint64_t v81 = a1[4];
    if (v81 != v82)
    {
      unint64_t v83 = 0;
      do
      {
        if (!*(_DWORD *)(a1[6] + 4 * v83))
        {
          uint64_t v84 = v82 + 24 * v83;
          uint64_t v85 = *(const void **)v84;
          unint64_t v105 = *(void *)(v84 + 8) - *(void *)v84;
          size_t v103 = *(void *)a2 + v98 + v78;
          uint64_t v104 = v85;
          do
            sub_2483DA228(v76, 0, &v105, &v104, (size_t *)&v102, (void **)&v103, &v98);
          while (*(void *)(v76 + 6936) | v105);
          uint64_t v82 = a1[3];
          uint64_t v81 = a1[4];
        }
        ++v83;
      }
      while (v83 < 0xAAAAAAAAAAAAAAABLL * ((v81 - v82) >> 3));
    }
    uint64_t v86 = a1[9];
    if (a1[10] != v86)
    {
      unint64_t v87 = 0;
      do
      {
        uint64_t v88 = v86 + 24 * v87;
        unsigned int v89 = *(const void **)v88;
        unint64_t v105 = *(void *)(v88 + 8) - *(void *)v88;
        size_t v103 = *(void *)a2 + v98 + v78;
        uint64_t v104 = v89;
        do
          sub_2483DA228(v76, 0, &v105, &v104, (size_t *)&v102, (void **)&v103, &v98);
        while (*(void *)(v76 + 6936) | v105);
        ++v87;
        uint64_t v86 = a1[9];
      }
      while (v87 < 0xAAAAAAAAAAAAAAABLL * ((a1[10] - v86) >> 3));
    }
    uint64_t v90 = a1[27];
    if (a1[28] != v90)
    {
      unint64_t v91 = 0;
      do
      {
        uint64_t v92 = v90 + 24 * v91;
        uint64_t v93 = *(const void **)v92;
        unint64_t v105 = *(void *)(v92 + 8) - *(void *)v92;
        size_t v103 = *(void *)a2 + v98 + v78;
        uint64_t v104 = v93;
        do
          sub_2483DA228(v76, 0, &v105, &v104, (size_t *)&v102, (void **)&v103, &v98);
        while (*(void *)(v76 + 6936) | v105);
        ++v91;
        uint64_t v90 = a1[27];
      }
      while (v91 < 0xAAAAAAAAAAAAAAABLL * ((a1[28] - v90) >> 3));
    }
    unint64_t v94 = (const void *)a1[30];
    unint64_t v105 = a1[31] - (void)v94;
    size_t v103 = *(void *)a2 + v98 + v78;
    uint64_t v104 = v94;
    do
      sub_2483DA228(v76, 2, &v105, &v104, (size_t *)&v102, (void **)&v103, &v98);
    while (*(void *)(v76 + 6936) | v105);
    sub_2483DA048(v76);
    size_t v95 = *(void *)(a2 + 8) - *(void *)a2;
    if (v98 + v78 <= v95)
    {
      if (v98 + v78 < v95) {
        *(void *)(a2 + 8) = *(void *)a2 + v98 + v78;
      }
    }
    else
    {
      sub_2483EE8AC((unint64_t *)a2, v98 + v78 - v95);
    }
    uint64_t v70 = 0;
  }
  uint64_t v96 = *((void *)&v100 + 1);
  *((void *)&v100 + 1) = 0;
  if (v96)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v96 - 24));
    free(*(void **)(v96 - 32));
  }
  return v70;
}

void sub_248497D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a14 - 24));
    free(*(void **)(a14 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248497D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 2224);
  uint64_t v5 = *(void *)(a1 + 2232) - v4;
  if (v5)
  {
    unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 6);
    unsigned __int8 v7 = (int *)(v4 + 48);
    uint64_t v5 = -1;
    do
    {
      int v8 = *v7;
      unint64_t v9 = v5 + 2;
      ++v5;
      v7 += 112;
      if (v8) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v9 >= v6;
      }
    }
    while (!v10);
  }
  sub_24841F728(v4 + 448 * v5, a2, a3);
  if (*(unsigned char *)(a1 + 208))
  {
    float v11 = 255.0;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 216);
    float v11 = 255.0;
    if (v12 == 18) {
      float v11 = 1000.0;
    }
    if (v12 == 16) {
      float v11 = 10000.0;
    }
  }
  *(float *)(a1 + 396) = v11;
  uint64_t v13 = *(void *)(a1 + 2232);
  uint64_t v14 = *(void *)(a1 + 2224);
  unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v14) >> 6);
  if (v13 == v14)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v16 = (int *)(v14 + 48);
    uint64_t v17 = -1;
    do
    {
      int v18 = *v16;
      unint64_t v19 = v17 + 2;
      ++v17;
      v16 += 112;
      if (v18) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v19 >= v15;
      }
    }
    while (!v20);
  }
  unsigned int v21 = *(_DWORD *)(v14 + 448 * v17 + 96);
  if (!v21)
  {
    uint64_t v22 = v14 + 448 * v17;
    unsigned __int8 v23 = *(unsigned int **)(v22 + 416);
    if (v23 == *(unsigned int **)(v22 + 424)) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = *v23;
    }
  }
  if (v13 == v14)
  {
    uint64_t v25 = 0;
  }
  else
  {
    int v24 = (int *)(v14 + 48);
    uint64_t v25 = -1;
    do
    {
      int v26 = *v24;
      unint64_t v27 = v25 + 2;
      ++v25;
      v24 += 112;
      if (v26) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v27 >= v15;
      }
    }
    while (!v28);
  }
  unsigned int v29 = *(_DWORD *)(v14 + 448 * v25 + 100);
  if (!v29)
  {
    uint64_t v30 = v14 + 448 * v25;
    uint64_t v31 = *(void *)(v30 + 416);
    if (v31 == *(void *)(v30 + 424)) {
      unsigned int v29 = 0;
    }
    else {
      unsigned int v29 = *(_DWORD *)(v31 + 4);
    }
  }

  return sub_24841D6C8(a1 + 520, v21, v29);
}

void *sub_248497F2C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v2 = (char *)operator new(0x2F60uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 12128;
  uint64_t v3 = v2 + 2;
  uint64_t v4 = 3032;
  do
  {
    *((unsigned char *)v3 - 2) = 0;
    _WORD *v3 = -1;
    v3 += 2;
    --v4;
  }
  while (v4);
  a1[1] = v2 + 12128;
  return a1;
}

uint64_t sub_248497F90(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2483E92E8();
  }
  unint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_2483F8ED4(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  uint64_t v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *unint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_2483F01FC(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v13 += 3;
  sub_2483F8F1C(a1, v12);
  uint64_t v10 = a1[1];
  sub_2483F8F8C((uint64_t)v12);
  return v10;
}

void sub_24849808C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2483F8F8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2484980A0(void *a1, unsigned __int8 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = operator new(0x20uLL);
  *a1 = v4;
  int v5 = *a2;
  *(_OWORD *)(a1 + 1) = xmmword_2484DCFC0;
  v4[3] = 0;
  if (v5)
  {
    *(void *)&long long v6 = -1;
    *((void *)&v6 + 1) = -1;
    *(_OWORD *)uint64_t v4 = v6;
    *((_OWORD *)v4 + 1) = v6;
  }
  else
  {
    uint64_t v8 = v4;
    int v9 = 0;
    sub_2483F802C((uint64_t)&v8, 0x100uLL);
  }
  return a1;
}

uint64_t sub_24849811C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  unint64_t v5 = a1[1].u64[0];
  unint64_t v6 = a1->u64[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - a1->i64[0]) >> 3);
    if (v9 + 1 > 0x222222222222222) {
      sub_2483E92E8();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x111111111111111) {
      unint64_t v12 = 0x222222222222222;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v25 = (uint64_t *)v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_248452E48(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v22 = v12;
    v23.i64[0] = v12 + 120 * v9;
    unint64_t v24 = v12 + 120 * v13;
    sub_24849863C(v23.i64[0], a2);
    uint64_t v14 = v23.i64[0];
    uint64_t v8 = v23.i64[0] + 120;
    v23.i64[1] = v23.i64[0] + 120;
    uint64_t v16 = a1->i64[0];
    unint64_t v15 = a1->u64[1];
    if (v15 == a1->i64[0])
    {
      int64x2_t v20 = vdupq_n_s64(v15);
    }
    else
    {
      do
      {
        *(_OWORD *)(v14 - 120) = *(_OWORD *)(v15 - 120);
        long long v17 = *(_OWORD *)(v15 - 104);
        long long v18 = *(_OWORD *)(v15 - 88);
        uint64_t v19 = *(void *)(v15 - 56);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v15 - 72);
        *(_OWORD *)(v14 - 88) = v18;
        *(_OWORD *)(v14 - 104) = v17;
        *(void *)(v14 - 56) = v19;
        *(void *)(v14 - 48) = 0;
        *(void *)(v14 - 40) = 0;
        *(void *)(v14 - 32) = 0;
        *(_OWORD *)(v14 - 48) = *(_OWORD *)(v15 - 48);
        *(void *)(v14 - 32) = *(void *)(v15 - 32);
        *(void *)(v15 - 48) = 0;
        *(void *)(v15 - 40) = 0;
        *(void *)(v15 - 32) = 0;
        *(void *)(v14 - 24) = 0;
        *(void *)(v14 - 16) = 0;
        *(void *)(v14 - 8) = 0;
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v15 - 24);
        *(void *)(v14 - 8) = *(void *)(v15 - 8);
        v14 -= 120;
        *(void *)(v15 - 24) = 0;
        *(void *)(v15 - 16) = 0;
        *(void *)(v15 - 8) = 0;
        v15 -= 120;
      }
      while (v15 != v16);
      int64x2_t v20 = *a1;
      uint64_t v8 = v23.i64[1];
    }
    a1->i64[0] = v14;
    a1->i64[1] = v8;
    int64x2_t v23 = v20;
    unint64_t v21 = a1[1].u64[0];
    a1[1].i64[0] = v24;
    unint64_t v24 = v21;
    unint64_t v22 = v20.i64[0];
    uint64_t result = sub_2484986E4((uint64_t)&v22);
  }
  else
  {
    uint64_t result = (uint64_t)sub_24849863C(a1->i64[1], a2);
    uint64_t v8 = v6 + 120;
    a1->i64[1] = v6 + 120;
  }
  a1->i64[1] = v8;
  return result;
}

void sub_2484982D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2484986E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2484982F0(void *a1)
{
  unint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_248498334(uint64_t *result)
{
  int v1 = *((_DWORD *)result + 8);
  if (v1 <= 16)
  {
    unint64_t v3 = result[2];
    uint64_t v2 = result[3];
    int v4 = v1 - 8;
    unint64_t v5 = result[5];
    do
    {
      uint64_t v6 = v2 << 8;
      result[3] = v6;
      if (v3 >= v5)
      {
        unsigned int v9 = 0;
        unint64_t v8 = v3 + 1;
        result[2] = v3 + 1;
      }
      else
      {
        uint64_t v7 = *result;
        unint64_t v8 = v3 + 1;
        result[2] = v3 + 1;
        unsigned int v9 = *(unsigned __int8 *)(v7 + v3);
        if (v9 == 255)
        {
          if (*(unsigned char *)(v7 + v8))
          {
            result[5] = v3;
            unsigned int v9 = 255;
            unint64_t v5 = v3;
          }
          else
          {
            unint64_t v8 = v3 + 2;
            result[2] = v3 + 2;
            unsigned int v9 = 255;
          }
        }
      }
      uint64_t v2 = v6 | v9;
      result[3] = v2;
      *((_DWORD *)result + 8) = v4 + 16;
      v4 += 8;
      unint64_t v3 = v8;
    }
    while (v4 < 49);
  }
  return result;
}

BOOL sub_2484983D4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = v4 & 7;
  if ((v4 & 7) != 0)
  {
    unsigned int v29 = a3;
    unint64_t v7 = (*(void *)(a1 + 24) >> (v4 & 0xF8)) & ~(-1 << v5);
    if (v7 != ~(-1 << v5)) {
      *(unsigned char *)(a2 + 264) = 1;
    }
    unint64_t v8 = *(unsigned char **)(a2 + 280);
    do
    {
      uint64_t v9 = (v7 >> (v5 - 1)) & 1;
      unint64_t v10 = *(void *)(a2 + 288);
      if ((unint64_t)v8 >= v10)
      {
        unint64_t v12 = *(void *)(a2 + 272);
        uint64_t v13 = &v8[-v12];
        uint64_t v14 = (uint64_t)&v8[-v12 + 1];
        if (v14 < 0) {
          sub_2483E92E8();
        }
        unint64_t v15 = v10 - v12;
        if (2 * v15 > v14) {
          uint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          long long v17 = (char *)operator new(v16);
        }
        else {
          long long v17 = 0;
        }
        long long v18 = &v13[(void)v17];
        uint64_t v19 = &v13[(void)v17];
        *uint64_t v19 = v9;
        uint64_t v11 = v19 + 1;
        if (v8 != (unsigned char *)v12)
        {
          int64x2_t v20 = &v8[~v12];
          do
          {
            char v21 = *--v8;
            (v20--)[(void)v17] = v21;
          }
          while (v8 != (unsigned char *)v12);
          unint64_t v8 = *(unsigned char **)(a2 + 272);
          long long v18 = v17;
        }
        *(void *)(a2 + 272) = v18;
        *(void *)(a2 + 280) = v11;
        *(void *)(a2 + 288) = &v17[v16];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        unsigned char *v8 = v9;
        uint64_t v11 = v8 + 1;
      }
      *(void *)(a2 + 280) = v11;
      unint64_t v8 = v11;
    }
    while (v5-- > 1);
    int v4 = *(_DWORD *)(a1 + 32);
    a3 = v29;
  }
  unint64_t v23 = *(void *)(a1 + 40);
  if (v4 <= 7)
  {
    unint64_t v26 = *(void *)(a1 + 16);
  }
  else
  {
    unint64_t v24 = *(void *)(a1 + 16);
    unsigned int v25 = (v4 >> 3) + 1;
    do
    {
      unint64_t v26 = v24 - 1;
      *(void *)(a1 + 16) = v24 - 1;
      if (v24 - 1 < v23 && !*(unsigned char *)(*(void *)a1 + v26))
      {
        unint64_t v27 = v24 - 2;
        if (*(unsigned __int8 *)(*(void *)a1 + v27) == 255)
        {
          *(void *)(a1 + 16) = v27;
          unint64_t v26 = v27;
        }
      }
      --v25;
      unint64_t v24 = v26;
    }
    while (v25 > 1);
  }
  if (v26 <= v23) {
    *a3 = v26;
  }
  return v26 <= v23;
}

uint64_t sub_2484985B0(uint64_t a1, uint64_t a2)
{
  sub_248498334((uint64_t *)a2);
  unint64_t v4 = *(void *)(a2 + 24);
  int v5 = *(_DWORD *)(a2 + 32);
  uint64_t v6 = (unsigned __int8 *)(a1 + 4 * (v4 >> (v5 - 8)));
  unsigned int v7 = *v6;
  if (v7 >= 9)
  {
    v6 += 4 * *(unsigned __int16 *)(a1 + 4 * (v4 >> (v5 - 8)) + 2)
        + 4 * ((v4 >> (v5 - v7)) & ~(-1 << (v7 - 8)));
    unsigned int v7 = *v6;
    v5 -= 8;
  }
  *(_DWORD *)(a2 + 32) = v5 - v7;
  return *((unsigned __int16 *)v6 + 1);
}

void *sub_24849863C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_24844CB80((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  return sub_248452DCC((void *)(a1 + 96), *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
}

void sub_2484986C8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484986E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    sub_248452C20((void *)(i - 120));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_248498734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  unsigned int v7 = *(void **)(a1 + 8);
  unint64_t v8 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v9 = (int *)(a2 + 4 * a3);
  uint64_t v10 = **(void **)(a1 + 24);
  uint64_t v174 = *(void *)(a1 + 16);
  unint64_t v175 = v7;
  if (**(unsigned char **)a1)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (a3)
    {
      int v13 = *(v9 - 1);
      uint64_t v14 = v13;
      if (!a4)
      {
        char v23 = 0;
        uint64_t v15 = v13;
        uint64_t v16 = v13;
        uint64_t v24 = v13;
LABEL_14:
        uint64_t v25 = v14;
        if (a3 >= 2) {
          uint64_t v25 = *(v9 - 2);
        }
        uint64_t v26 = v16;
        if (a4 >= 2) {
          uint64_t v26 = v9[-2 * v10];
        }
        char v27 = v23 ^ 1;
        if ((int)a3 + 2 >= v8) {
          char v27 = 1;
        }
        if (v27) {
          uint64_t v171 = v24;
        }
        else {
          uint64_t v171 = v9[2 - v10];
        }
        goto LABEL_39;
      }
      uint64_t v15 = v9[~v10];
      uint64_t v16 = v9[-v10];
    }
    else
    {
      if (!a4)
      {
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        uint64_t v16 = 0;
        int v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v25 = 0;
        uint64_t v171 = 0;
LABEL_39:
        uint64_t v33 = 0;
        unint64_t v34 = (_DWORD *)*v7;
        if (v16 >= 0) {
          LODWORD(v35) = v16;
        }
        else {
          uint64_t v35 = -v16;
        }
        v34[3] = a3;
        v34[4] = v35;
        if (v14 >= 0) {
          LODWORD(v36) = v14;
        }
        else {
          uint64_t v36 = -v14;
        }
        int v37 = v13 - v34[9];
        v34[5] = v36;
        v34[6] = v16;
        v34[7] = v13;
        v34[8] = v37;
        uint64_t v38 = v14 + v16;
        v34[9] = v14 + v16 - v15;
        v34[10] = v13 - v15;
        v34[11] = v15 - v16;
        v34[12] = v16 - v24;
        unint64_t v39 = v8 + 2;
        if (a4) {
          unint64_t v40 = v8 + 2;
        }
        else {
          unint64_t v40 = 0;
        }
        unint64_t v41 = v40 + (int)a3;
        if (v8 - 1 <= (int)a3) {
          unint64_t v42 = v40 + (int)a3;
        }
        else {
          unint64_t v42 = v41 + 1;
        }
        v34[13] = v16 - v26;
        v34[14] = v13 - v25;
        if (a3) {
          unint64_t v40 = v41 - 1;
        }
        for (uint64_t i = 40; i != 136; i += 24)
        {
          unint64_t v44 = (*(_DWORD *)(*(void *)(v12 + i) + 4 * v42)
                             + *(_DWORD *)(*(void *)(v12 + i) + 4 * v41)
                             + *(_DWORD *)(*(void *)(v12 + i) + 4 * v40));
          int v45 = __clz(v44 + 1) ^ 0x3F;
          if (v45 <= 5) {
            LOBYTE(v45) = 5;
          }
          v176.i32[v33] = ((*(_DWORD *)(v12 + 4 * (v44 >> (v45 - 5)) + 216)
                                        * *(_DWORD *)(v12 + v33 * 4 + 200)) >> (v45 - 5))
                        + 4;
          ++v33;
        }
        unint64_t v173 = v9;
        uint64_t v46 = 8 * v16;
        uint64_t v47 = 8 * v14;
        uint64_t v48 = 8 * v24;
        uint64_t v49 = v11;
        if (a3)
        {
          if (a4) {
            unint64_t v50 = 0;
          }
          else {
            unint64_t v50 = v39;
          }
          uint64_t v51 = *(void *)(v12 + 136);
          uint64_t v52 = *(int *)(v51 + 4 * ((int)a3 + v50) - 4);
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v51 = *(void *)(v12 + 136);
        }
        uint64_t v53 = 0;
        uint64_t v54 = *(int *)(v51 + 4 * v41);
        uint64_t v55 = *(int *)(v51 + 4 * v40);
        uint64_t v56 = v52 + v54;
        uint64_t v57 = *(int *)(v51 + 4 * v42);
        if (v54 >= 0) {
          unint64_t v58 = v54;
        }
        else {
          unint64_t v58 = -v54;
        }
        if (v52 >= 0) {
          unint64_t v59 = v52;
        }
        else {
          unint64_t v59 = -v52;
        }
        if (v58 <= v59) {
          uint64_t v60 = v52;
        }
        else {
          uint64_t v60 = v54;
        }
        if (v55 >= 0) {
          unint64_t v61 = v55;
        }
        else {
          unint64_t v61 = -v55;
        }
        if (v60 >= 0) {
          unint64_t v62 = v60;
        }
        else {
          unint64_t v62 = -v60;
        }
        if (v61 <= v62) {
          uint64_t v63 = v60;
        }
        else {
          uint64_t v63 = v55;
        }
        if (v57 >= 0) {
          unint64_t v64 = v57;
        }
        else {
          unint64_t v64 = -v57;
        }
        if (v63 >= 0) {
          unint64_t v65 = v63;
        }
        else {
          unint64_t v65 = -v63;
        }
        if (v64 > v65) {
          LODWORD(v63) = v57;
        }
        v34[15] = v63;
        uint64_t v66 = *(int *)(v12 + 176);
        uint64_t v67 = v46 - (((v56 + v57) * *(int *)(v12 + 172)) >> 5);
        *(void *)uint64_t v12 = v48 - v46 + v47;
        *(void *)(v12 + 8) = v67;
        uint64_t v68 = v47 - (((v56 + v55) * v66) >> 5);
        uint64_t v69 = v46
            - ((*(int *)(v12 + 180) * (uint64_t)(int)v55
              + *(int *)(v12 + 184) * (uint64_t)(int)v54
              + *(int *)(v12 + 188) * (uint64_t)(int)v57
              + 8 * ((v26 - v16) * *(int *)(v12 + 192) + (v15 - v14) * *(int *)(v12 + 196))) >> 5);
        *(void *)(v12 + 16) = v68;
        *(void *)(v12 + 24) = v69;
        int32x4_t v177 = (int32x4_t)vshlq_u32(v176, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v176)) ^ 0x1F) - 4)));
        unsigned int v70 = vaddvq_s32(v177);
        uint64_t v71 = (v70 >> 1) - 1;
        do
        {
          v71 += *(void *)(v12 + 8 * v53) * v177.u32[v53];
          ++v53;
        }
        while (v53 != 4);
        uint64_t v72 = (v71 * *(unsigned int *)(v12 + 4 * (v70 - 1) + 216)) >> 24;
        if (v48 <= v46) {
          uint64_t v73 = 8 * v16;
        }
        else {
          uint64_t v73 = 8 * v24;
        }
        if (v47 > v73) {
          uint64_t v73 = 8 * v14;
        }
        if (v46 >= v48) {
          uint64_t v74 = 8 * v24;
        }
        else {
          uint64_t v74 = 8 * v16;
        }
        if (v74 < v47) {
          uint64_t v47 = v74;
        }
        if (v72 < v73) {
          uint64_t v73 = (v71 * *(unsigned int *)(v12 + 4 * (v70 - 1) + 216)) >> 24;
        }
        if (v47 <= v73) {
          uint64_t v47 = v73;
        }
        if ((v55 ^ v54 | v52 ^ v54) <= 0) {
          uint64_t v72 = v47;
        }
        *(void *)(v12 + 32) = v72;
        uint64_t v75 = (v72 + 3) >> 3;
        uint64_t v76 = v49[5];
        if (v76)
        {
          unint64_t v77 = (int *)(v49[3] + v49[2] * (int)a3);
          size_t v78 = v34 + 16;
          do
          {
            int v79 = *v77++;
            *v78++ = v79;
            --v76;
          }
          while (v76);
        }
        uint64_t v80 = 0;
        uint64_t v81 = v16 + v24;
        if (v16 + v24 < 0 != __OFADD__(v16, v24)) {
          ++v81;
        }
        uint64_t v82 = v15 + v16;
        if (v15 + v16 < 0 != __OFADD__(v15, v16)) {
          ++v82;
        }
        if (v15 + v14 < 0 != __OFADD__(v15, v14)) {
          uint64_t v83 = v15 + v14 + 1;
        }
        else {
          uint64_t v83 = v15 + v14;
        }
        if (v38 >= 0) {
          uint64_t v84 = v14 + v16;
        }
        else {
          uint64_t v84 = v38 + 1;
        }
        if (v13 >= (int)v16) {
          int v85 = v16;
        }
        else {
          int v85 = v13;
        }
        if (v13 <= (int)v16) {
          int v86 = v16;
        }
        else {
          int v86 = v13;
        }
        int v87 = v13 + v16 - v15;
        if (v85 > (int)v15) {
          int v87 = v86;
        }
        char v148 = v86 < (int)v15;
        uint64_t result = v81 >> 1;
        uint64_t v89 = v83 >> 1;
        if (v148) {
          int v90 = v85;
        }
        else {
          int v90 = v87;
        }
        uint64_t v91 = v90;
        unint64_t v92 = v16 - v15;
        if (v16 - v15 < 0) {
          unint64_t v92 = v15 - v16;
        }
        unint64_t v93 = v14 - v15;
        if (v14 - v15 < 0) {
          unint64_t v93 = v15 - v14;
        }
        if (v92 >= v93) {
          uint64_t v94 = v16;
        }
        else {
          uint64_t v94 = v14;
        }
        uint64_t v9 = v173;
        uint64_t v95 = 3 * v24 - 2 * v26 + 6 * (int)v16 - v14 + 8 * v14 + v25 + v171;
        uint64_t v96 = v95 + 8;
        uint64_t v97 = v95 + 23;
        if (v96 >= 0) {
          uint64_t v97 = v96;
        }
        size_t v98 = v175;
        do
        {
          switch((int)v80)
          {
            case 1:
              uint64_t v99 = v14;
              break;
            case 2:
              uint64_t v99 = v16;
              break;
            case 3:
              uint64_t v99 = v84 >> 1;
              break;
            case 4:
              uint64_t v99 = v94;
              break;
            case 5:
              uint64_t v99 = v91;
              break;
            case 6:
              uint64_t v99 = v75;
              break;
            case 7:
              uint64_t v99 = v24;
              break;
            case 8:
              uint64_t v99 = v15;
              break;
            case 9:
              uint64_t v99 = v25;
              break;
            case 10:
              uint64_t v99 = v89;
              break;
            case 11:
              uint64_t v99 = v82 >> 1;
              break;
            case 12:
              uint64_t v99 = result;
              break;
            case 13:
              uint64_t v99 = v97 >> 4;
              break;
            default:
              uint64_t v99 = 0;
              break;
          }
          v177.i64[v80++] = v99;
        }
        while (v80 != 14);
        uint64_t v100 = v174;
        goto LABEL_268;
      }
      int v13 = v9[-v10];
      uint64_t v16 = v13;
      uint64_t v14 = v13;
      uint64_t v15 = v13;
    }
    char v23 = 1;
    if ((int)a3 + 1 >= v8) {
      uint64_t v24 = v16;
    }
    else {
      uint64_t v24 = v9[1 - v10];
    }
    goto LABEL_14;
  }
  long long v17 = *(int **)(*(void *)(a1 + 48) + 120);
  long long v18 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (a3)
  {
    int v19 = *(v9 - 1);
    uint64_t v20 = v19;
    if (!a4)
    {
      char v28 = 0;
      uint64_t v21 = v19;
      uint64_t v22 = v19;
      uint64_t v29 = v19;
LABEL_29:
      uint64_t v30 = v20;
      if (a3 >= 2) {
        uint64_t v30 = *(v9 - 2);
      }
      uint64_t v31 = v22;
      if (a4 >= 2) {
        uint64_t v31 = v9[-2 * v10];
      }
      char v32 = v28 ^ 1;
      if ((int)a3 + 2 >= v8) {
        char v32 = 1;
      }
      if (v32) {
        uint64_t v172 = v29;
      }
      else {
        uint64_t v172 = v9[2 - v10];
      }
      goto LABEL_159;
    }
    uint64_t v21 = v9[~v10];
    uint64_t v22 = v9[-v10];
LABEL_25:
    char v28 = 1;
    if ((int)a3 + 1 >= v8) {
      uint64_t v29 = v22;
    }
    else {
      uint64_t v29 = v9[1 - v10];
    }
    goto LABEL_29;
  }
  if (a4)
  {
    int v19 = v9[-v10];
    uint64_t v22 = v19;
    uint64_t v20 = v19;
    uint64_t v21 = v19;
    goto LABEL_25;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v22 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v30 = 0;
  uint64_t v172 = 0;
LABEL_159:
  uint64_t v101 = 0;
  uint64_t v102 = *v17;
  size_t v103 = (_DWORD *)*v7;
  if (v22 >= 0) {
    LODWORD(v104) = v22;
  }
  else {
    uint64_t v104 = -v22;
  }
  v103[3] = a3;
  float32x4_t v103[4] = v104;
  if (v20 >= 0) {
    LODWORD(v105) = v20;
  }
  else {
    uint64_t v105 = -v20;
  }
  int v106 = v19 - v103[9];
  v103[5] = v105;
  v103[6] = v22;
  v103[7] = v19;
  v103[8] = v106;
  v103[9] = v20 + v22 - v21;
  v103[10] = v19 - v21;
  v103[11] = v21 - v22;
  v103[12] = v22 - v29;
  unint64_t v107 = v8 + 2;
  if (a4) {
    unint64_t v108 = v8 + 2;
  }
  else {
    unint64_t v108 = 0;
  }
  unint64_t v109 = v108 + (int)a3;
  if (v8 - 1 <= (int)a3) {
    unint64_t v110 = v108 + (int)a3;
  }
  else {
    unint64_t v110 = v109 + 1;
  }
  v103[13] = v22 - v31;
  v103[14] = v19 - v30;
  if (a3) {
    unint64_t v111 = v109 - 1;
  }
  else {
    unint64_t v111 = v108;
  }
  for (uint64_t j = 40; j != 136; j += 24)
  {
    unint64_t v113 = (*(_DWORD *)(*(void *)(v12 + j) + 4 * v110)
                        + *(_DWORD *)(*(void *)(v12 + j) + 4 * v109)
                        + *(_DWORD *)(*(void *)(v12 + j) + 4 * v111));
    int v114 = __clz(v113 + 1) ^ 0x3F;
    if (v114 <= 5) {
      LOBYTE(v114) = 5;
    }
    v176.i32[v101] = ((*(_DWORD *)(v12 + 4 * (v113 >> (v114 - 5)) + 216)
                                   * *(_DWORD *)(v12 + v101 * 4 + 200)) >> (v114 - 5))
                   + 4;
    ++v101;
  }
  uint64_t v115 = 8 * v22;
  uint64_t v116 = 8 * v20;
  uint64_t v117 = 8 * v29;
  if (a3)
  {
    if (a4) {
      unint64_t v118 = 0;
    }
    else {
      unint64_t v118 = v107;
    }
    uint64_t v119 = *(void *)(v12 + 136);
    uint64_t v120 = *(int *)(v119 + 4 * ((int)a3 + v118) - 4);
  }
  else
  {
    uint64_t v120 = 0;
    uint64_t v119 = *(void *)(v12 + 136);
  }
  uint64_t v121 = 0;
  uint64_t v122 = *(int *)(v119 + 4 * v109);
  uint64_t v123 = *(int *)(v119 + 4 * v111);
  uint64_t v124 = v120 + v122;
  uint64_t v125 = *(int *)(v119 + 4 * v110);
  if (v122 >= 0) {
    unint64_t v126 = v122;
  }
  else {
    unint64_t v126 = -v122;
  }
  if (v120 >= 0) {
    unint64_t v127 = v120;
  }
  else {
    unint64_t v127 = -v120;
  }
  if (v126 <= v127) {
    uint64_t v128 = v120;
  }
  else {
    uint64_t v128 = v122;
  }
  if (v123 >= 0) {
    unint64_t v129 = v123;
  }
  else {
    unint64_t v129 = -v123;
  }
  if (v128 >= 0) {
    unint64_t v130 = v128;
  }
  else {
    unint64_t v130 = -v128;
  }
  if (v129 <= v130) {
    uint64_t v131 = v128;
  }
  else {
    uint64_t v131 = v123;
  }
  if (v125 >= 0) {
    unint64_t v132 = v125;
  }
  else {
    unint64_t v132 = -v125;
  }
  if (v131 >= 0) {
    unint64_t v133 = v131;
  }
  else {
    unint64_t v133 = -v131;
  }
  if (v132 > v133) {
    LODWORD(v131) = v125;
  }
  v103[15] = v131;
  uint64_t v134 = *(int *)(v12 + 176);
  uint64_t v135 = v115 - (((v124 + v125) * *(int *)(v12 + 172)) >> 5);
  *(void *)uint64_t v12 = v117 - v115 + v116;
  *(void *)(v12 + 8) = v135;
  uint64_t v136 = v116 - (((v124 + v123) * v134) >> 5);
  uint64_t v137 = v115
       - ((*(int *)(v12 + 180) * (uint64_t)(int)v123
         + *(int *)(v12 + 184) * (uint64_t)(int)v122
         + *(int *)(v12 + 188) * (uint64_t)(int)v125
         + 8 * ((v31 - v22) * *(int *)(v12 + 192) + (v21 - v20) * *(int *)(v12 + 196))) >> 5);
  *(void *)(v12 + 16) = v136;
  *(void *)(v12 + 24) = v137;
  int32x4_t v177 = (int32x4_t)vshlq_u32(v176, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v176)) ^ 0x1F) - 4)));
  unsigned int v138 = vaddvq_s32(v177);
  uint64_t v139 = (v138 >> 1) - 1;
  do
  {
    v139 += *(void *)(v12 + 8 * v121) * v177.u32[v121];
    ++v121;
  }
  while (v121 != 4);
  uint64_t result = v123 ^ v122 | v120 ^ v122;
  if (v117 <= v115) {
    uint64_t v140 = 8 * v22;
  }
  else {
    uint64_t v140 = 8 * v29;
  }
  if (v116 > v140) {
    uint64_t v140 = 8 * v20;
  }
  if (v115 >= v117) {
    uint64_t v141 = 8 * v29;
  }
  else {
    uint64_t v141 = 8 * v22;
  }
  if (v141 < v116) {
    uint64_t v116 = v141;
  }
  if ((v139 * *(unsigned int *)(v12 + 4 * (v138 - 1) + 216)) >> 24 < v140) {
    uint64_t v140 = (v139 * *(unsigned int *)(v12 + 4 * (v138 - 1) + 216)) >> 24;
  }
  if (v116 <= v140) {
    uint64_t v116 = v140;
  }
  if (result <= 0) {
    uint64_t v142 = v116;
  }
  else {
    uint64_t v142 = (v139 * *(unsigned int *)(v12 + 4 * (v138 - 1) + 216)) >> 24;
  }
  *(void *)(v12 + 32) = v142;
  uint64_t v143 = v18[5];
  if (v143)
  {
    unint64_t v144 = (int *)(v18[3] + v18[2] * (int)a3);
    unint64_t v145 = v103 + 16;
    do
    {
      int v146 = *v144++;
      *v145++ = v146;
      --v143;
    }
    while (v143);
  }
  size_t v98 = v175;
  uint64_t v100 = v174;
  switch((int)v102)
  {
    case 1:
      break;
    case 2:
      uint64_t v20 = v22;
      break;
    case 3:
      uint64_t v147 = v20 + v22;
      char v148 = v20 + v22 < 0;
      goto LABEL_261;
    case 4:
      unint64_t v149 = v22 - v21;
      if (v22 - v21 < 0) {
        unint64_t v149 = v21 - v22;
      }
      unint64_t v150 = v20 - v21;
      if (v20 - v21 < 0) {
        unint64_t v150 = v21 - v20;
      }
      if (v149 >= v150) {
        uint64_t v20 = v22;
      }
      break;
    case 5:
      if (v19 >= (int)v22) {
        int v151 = v22;
      }
      else {
        int v151 = v19;
      }
      if (v19 <= (int)v22) {
        int v152 = v22;
      }
      else {
        int v152 = v19;
      }
      int v153 = v19 + v22 - v21;
      if (v151 > (int)v21) {
        int v153 = v152;
      }
      if (v152 >= (int)v21) {
        int v151 = v153;
      }
      uint64_t v20 = v151;
      break;
    case 6:
      uint64_t v20 = (v142 + 3) >> 3;
      break;
    case 7:
      uint64_t v20 = v29;
      break;
    case 8:
      uint64_t v20 = v21;
      break;
    case 9:
      uint64_t v20 = v30;
      break;
    case 10:
      uint64_t v147 = v21 + v20;
      char v148 = (v21 + v20 < 0) ^ __OFADD__(v21, v20);
      goto LABEL_261;
    case 11:
      uint64_t v147 = v21 + v22;
      char v148 = (v21 + v22 < 0) ^ __OFADD__(v21, v22);
      goto LABEL_261;
    case 12:
      uint64_t v147 = v22 + v29;
      char v148 = (v22 + v29 < 0) ^ __OFADD__(v22, v29);
LABEL_261:
      if (v148) {
        ++v147;
      }
      uint64_t v20 = v147 >> 1;
      break;
    case 13:
      uint64_t v154 = 3 * v29 - 2 * v31 + 6 * (int)v22 - v20 + 8 * v20 + v30 + v172;
      uint64_t v155 = v154 + 8;
      uint64_t v156 = v154 + 23;
      if (v155 >= 0) {
        uint64_t v156 = v155;
      }
      uint64_t v20 = v156 >> 4;
      break;
    default:
      uint64_t v20 = 0;
      uint64_t v100 = v174;
      break;
  }
  v177.i64[v102] = v20;
LABEL_268:
  ++***(void ***)(a1 + 56);
  unint64_t v157 = *(uint64_t ***)(a1 + 64);
  unint64_t v158 = *v157;
  uint64_t v159 = **v157;
  unint64_t v160 = (*v157)[1];
  uint64_t *v158 = v160;
  v158[1] = (v160 >> 5) ^ ((v159 ^ (unint64_t)(v159 << 23)) >> 18) ^ v160 ^ v159 ^ (v159 << 23);
  if (*v157[1] >= (v160 + v159) >> 32)
  {
    uint64_t result = sub_2484A1B84(*(void *)(a1 + 48), *v9, v98, (uint64_t)&v177);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v100 = *(void *)(a1 + 16);
  }
  uint64_t v161 = 0;
  uint64_t v162 = *(void *)(v100 + 40) + 2;
  if (a4) {
    uint64_t v163 = 0;
  }
  else {
    uint64_t v163 = *(void *)(v100 + 40) + 2;
  }
  uint64_t v164 = 8 * *v9;
  uint64_t v165 = v163 + a3;
  *(_DWORD *)(*(void *)(v12 + 136) + 4 * v165) = *(_DWORD *)(v12 + 32) - v164;
  uint64_t v166 = a3 + ((a4 << 63 >> 63) & v162) + 1;
  unint64_t v167 = (uint64_t *)(v12 + 40);
  do
  {
    uint64_t v168 = *(void *)(v12 + v161) - v164;
    if (v168 < 0) {
      uint64_t v168 = v164 - *(void *)(v12 + v161);
    }
    unint64_t v169 = (unint64_t)(v168 + 3) >> 3;
    uint64_t v170 = *v167;
    v167 += 3;
    *(_DWORD *)(v170 + 4 * v165) = v169;
    *(_DWORD *)(v170 + 4 * v166) += v169;
    v161 += 8;
  }
  while (v161 != 32);
  return result;
}

void sub_2484992F4(unint64_t *a1, int a2, unint64_t a3)
{
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    long long v5 = operator new(0x28uLL);
    long long v6 = (char *)(v5 + 20);
    a1[2] = (unint64_t)(v5 + 20);
    *(_DWORD *)long long v5 = 0;
    void v5[2] = -1;
    *((void *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
    *((void *)v5 + 3) = 0;
LABEL_9:
    *((_DWORD *)v5 + 8) = 1;
    *a1 = (unint64_t)v5;
    a1[1] = (unint64_t)v6;
    return;
  }
  if (a2 == 5)
  {
    unsigned int v7 = operator new(0x84uLL);
    unint64_t v297 = (char *)(v7 + 33);
    v7[32] = 500;
    *((_OWORD *)v7 + 4) = xmmword_248550B24;
    *((_OWORD *)v7 + 5) = unk_248550B34;
    *((_OWORD *)v7 + 6) = xmmword_248550B44;
    *((_OWORD *)v7 + 7) = unk_248550B54;
    *(_OWORD *)unsigned int v7 = xmmword_248550AE4;
    *((_OWORD *)v7 + 1) = unk_248550AF4;
    *((_OWORD *)v7 + 2) = xmmword_248550B04;
    *((_OWORD *)v7 + 3) = unk_248550B14;
    unint64_t v295 = v7;
    unint64_t v296 = (char *)(v7 + 33);
    sub_24849B324(a1, 15, &v295, 6, a3);
LABEL_12:
    operator delete(v7);
    return;
  }
  if (a2 != 4)
  {
    if (a2 == 3)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_8:
      long long v5 = operator new(0x28uLL);
      long long v6 = (char *)(v5 + 20);
      a1[2] = (unint64_t)(v5 + 20);
      *(_DWORD *)long long v5 = 0;
      void v5[2] = -1;
      *((void *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 1;
      *((void *)v5 + 3) = 0;
      goto LABEL_9;
    }
    unsigned int v7 = operator new(0x84uLL);
    unint64_t v297 = (char *)(v7 + 33);
    v7[32] = 500;
    *((_OWORD *)v7 + 4) = xmmword_248550B24;
    *((_OWORD *)v7 + 5) = unk_248550B34;
    *((_OWORD *)v7 + 6) = xmmword_248550B44;
    *((_OWORD *)v7 + 7) = unk_248550B54;
    *(_OWORD *)unsigned int v7 = xmmword_248550AE4;
    *((_OWORD *)v7 + 1) = unk_248550AF4;
    *((_OWORD *)v7 + 2) = xmmword_248550B04;
    *((_OWORD *)v7 + 3) = unk_248550B14;
    unint64_t v295 = v7;
    unint64_t v296 = (char *)(v7 + 33);
    sub_24849B324(a1, 9, &v295, 5, a3);
    goto LABEL_12;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 <= 0x3FF) {
    goto LABEL_8;
  }
  unint64_t v8 = operator new(0x28uLL);
  *(_DWORD *)unint64_t v8 = 1;
  void v8[2] = 0;
  *((void *)v8 + 1) = 0x200000001;
  *((_DWORD *)v8 + 4) = 0;
  *((void *)v8 + 3) = 0;
  *((_DWORD *)v8 + 8) = 1;
  *a1 = (unint64_t)v8;
  a1[1] = (unint64_t)(v8 + 20);
  a1[2] = (unint64_t)(v8 + 20);
  uint64_t v9 = sub_248403444(2uLL);
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  v9[10] = 2;
  uint64_t v12 = (char *)(v9 + 10);
  uint64_t v14 = (char *)&v9[10 * v13];
  *((_WORD *)v9 + 22) = 0;
  *((void *)v9 + 6) = 0x400000003;
  v9[14] = 0;
  *((void *)v9 + 8) = 0;
  v9[18] = 1;
  uint64_t v15 = (char *)(v9 + 20);
  if (v11 == v10)
  {
    long long v18 = (char *)(v9 + 10);
  }
  else
  {
    do
    {
      long long v16 = *(_OWORD *)(v11 - 40);
      long long v17 = *(_OWORD *)(v11 - 24);
      long long v18 = v12 - 40;
      *((_DWORD *)v12 - 2) = *((_DWORD *)v11 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      *(_OWORD *)(v12 - 40) = v16;
      v11 -= 40;
      v12 -= 40;
    }
    while (v11 != v10);
  }
  *a1 = (unint64_t)v18;
  a1[1] = (unint64_t)v15;
  a1[2] = (unint64_t)v14;
  if (v10)
  {
    operator delete(v10);
    uint64_t v14 = (char *)a1[2];
  }
  a1[1] = (unint64_t)v15;
  if (v15 >= v14)
  {
    uint64_t v20 = (char *)*a1;
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v15[-*a1] >> 3);
    unint64_t v22 = v21 + 1;
    if (v21 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v20) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x333333333333333) {
      unint64_t v24 = 0x666666666666666;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      unint64_t v24 = (unint64_t)sub_248403444(v24);
      uint64_t v20 = (char *)*a1;
      uint64_t v15 = (char *)a1[1];
    }
    else
    {
      uint64_t v25 = 0;
    }
    unint64_t v26 = v24 + 40 * v21;
    *(_DWORD *)unint64_t v26 = 0;
    *(_WORD *)(v26 + 4) = 0;
    uint64_t v14 = (char *)(v24 + 40 * v25);
    *(void *)(v26 + 8) = 0x600000005;
    *(_DWORD *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = 0;
    *(_DWORD *)(v26 + 32) = 1;
    int v19 = (char *)(v26 + 40);
    if (v15 == v20)
    {
      unint64_t v29 = v26;
    }
    else
    {
      do
      {
        long long v27 = *(_OWORD *)(v15 - 40);
        long long v28 = *(_OWORD *)(v15 - 24);
        unint64_t v29 = v26 - 40;
        *(_DWORD *)(v26 - 8) = *((_DWORD *)v15 - 2);
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        v15 -= 40;
        v26 -= 40;
      }
      while (v15 != v20);
    }
    *a1 = v29;
    a1[1] = (unint64_t)v19;
    a1[2] = (unint64_t)v14;
    if (v20)
    {
      operator delete(v20);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    v9[20] = 0;
    *((_WORD *)v9 + 42) = 0;
    *((void *)v9 + 11) = 0x600000005;
    v9[24] = 0;
    *((void *)v9 + 13) = 0;
    v9[28] = 1;
    int v19 = (char *)(v9 + 30);
  }
  a1[1] = (unint64_t)v19;
  if (v19 >= v14)
  {
    uint64_t v31 = (char *)*a1;
    unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v19[-*a1] >> 3);
    unint64_t v33 = v32 + 1;
    if (v32 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v31) >> 3);
    if (2 * v34 > v33) {
      unint64_t v33 = 2 * v34;
    }
    if (v34 >= 0x333333333333333) {
      unint64_t v35 = 0x666666666666666;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      unint64_t v35 = (unint64_t)sub_248403444(v35);
      uint64_t v31 = (char *)*a1;
      int v19 = (char *)a1[1];
    }
    else
    {
      uint64_t v36 = 0;
    }
    unint64_t v37 = v35 + 40 * v32;
    *(_WORD *)(v37 + 4) = 6;
    *(_DWORD *)unint64_t v37 = 0;
    uint64_t v14 = (char *)(v35 + 40 * v36);
    *(void *)(v37 + 8) = 0x1600000015;
    *(_DWORD *)(v37 + 16) = 0;
    *(void *)(v37 + 24) = 0;
    *(_DWORD *)(v37 + 32) = 1;
    uint64_t v30 = (char *)(v37 + 40);
    if (v19 == v31)
    {
      unint64_t v40 = v37;
    }
    else
    {
      do
      {
        long long v38 = *(_OWORD *)(v19 - 40);
        long long v39 = *(_OWORD *)(v19 - 24);
        unint64_t v40 = v37 - 40;
        *(_DWORD *)(v37 - 8) = *((_DWORD *)v19 - 2);
        *(_OWORD *)(v37 - 24) = v39;
        *(_OWORD *)(v37 - 40) = v38;
        v19 -= 40;
        v37 -= 40;
      }
      while (v19 != v31);
    }
    *a1 = v40;
    a1[1] = (unint64_t)v30;
    a1[2] = (unint64_t)v14;
    if (v31)
    {
      operator delete(v31);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)int v19 = 0;
    *((_WORD *)v19 + 2) = 6;
    *((void *)v19 + 1) = 0x1600000015;
    *((_DWORD *)v19 + 4) = 0;
    *((void *)v19 + 3) = 0;
    *((_DWORD *)v19 + 8) = 1;
    uint64_t v30 = v19 + 40;
  }
  a1[1] = (unint64_t)v30;
  if (v30 >= v14)
  {
    unint64_t v42 = (char *)*a1;
    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v30[-*a1] >> 3);
    unint64_t v44 = v43 + 1;
    if (v43 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v42) >> 3);
    if (2 * v45 > v44) {
      unint64_t v44 = 2 * v45;
    }
    if (v45 >= 0x333333333333333) {
      unint64_t v46 = 0x666666666666666;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      unint64_t v46 = (unint64_t)sub_248403444(v46);
      unint64_t v42 = (char *)*a1;
      uint64_t v30 = (char *)a1[1];
    }
    else
    {
      uint64_t v47 = 0;
    }
    unint64_t v48 = v46 + 40 * v43;
    *(_WORD *)(v48 + 4) = 2;
    *(_DWORD *)unint64_t v48 = 0;
    uint64_t v14 = (char *)(v46 + 40 * v47);
    *(void *)(v48 + 8) = 0x800000007;
    *(_DWORD *)(v48 + 16) = 0;
    *(void *)(v48 + 24) = 0;
    *(_DWORD *)(v48 + 32) = 1;
    unint64_t v41 = (char *)(v48 + 40);
    if (v30 == v42)
    {
      unint64_t v51 = v48;
    }
    else
    {
      do
      {
        long long v49 = *(_OWORD *)(v30 - 40);
        long long v50 = *(_OWORD *)(v30 - 24);
        unint64_t v51 = v48 - 40;
        *(_DWORD *)(v48 - 8) = *((_DWORD *)v30 - 2);
        *(_OWORD *)(v48 - 24) = v50;
        *(_OWORD *)(v48 - 40) = v49;
        v30 -= 40;
        v48 -= 40;
      }
      while (v30 != v42);
    }
    *a1 = v51;
    a1[1] = (unint64_t)v41;
    a1[2] = (unint64_t)v14;
    if (v42)
    {
      operator delete(v42);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v30 = 0;
    *((_WORD *)v30 + 2) = 2;
    *((void *)v30 + 1) = 0x800000007;
    *((_DWORD *)v30 + 4) = 0;
    *((void *)v30 + 3) = 0;
    *((_DWORD *)v30 + 8) = 1;
    unint64_t v41 = v30 + 40;
  }
  a1[1] = (unint64_t)v41;
  if (v41 >= v14)
  {
    uint64_t v53 = (char *)*a1;
    unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v41[-*a1] >> 3);
    unint64_t v55 = v54 + 1;
    if (v54 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v53) >> 3);
    if (2 * v56 > v55) {
      unint64_t v55 = 2 * v56;
    }
    if (v56 >= 0x333333333333333) {
      unint64_t v57 = 0x666666666666666;
    }
    else {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      unint64_t v57 = (unint64_t)sub_248403444(v57);
      uint64_t v53 = (char *)*a1;
      unint64_t v41 = (char *)a1[1];
    }
    else
    {
      uint64_t v58 = 0;
    }
    unint64_t v59 = v57 + 40 * v54;
    *(_WORD *)(v59 + 4) = -1;
    *(_DWORD *)unint64_t v59 = 0;
    uint64_t v14 = (char *)(v57 + 40 * v58);
    *(void *)(v59 + 8) = 0;
    *(_DWORD *)(v59 + 16) = 5;
    *(void *)(v59 + 24) = 0;
    *(_DWORD *)(v59 + 32) = 1;
    uint64_t v52 = (char *)(v59 + 40);
    if (v41 == v53)
    {
      unint64_t v62 = v59;
    }
    else
    {
      do
      {
        long long v60 = *(_OWORD *)(v41 - 40);
        long long v61 = *(_OWORD *)(v41 - 24);
        unint64_t v62 = v59 - 40;
        *(_DWORD *)(v59 - 8) = *((_DWORD *)v41 - 2);
        *(_OWORD *)(v59 - 24) = v61;
        *(_OWORD *)(v59 - 40) = v60;
        v41 -= 40;
        v59 -= 40;
      }
      while (v41 != v53);
    }
    *a1 = v62;
    a1[1] = (unint64_t)v52;
    a1[2] = (unint64_t)v14;
    if (v53)
    {
      operator delete(v53);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v41 = 0;
    *((_WORD *)v41 + 2) = -1;
    *((void *)v41 + 1) = 0;
    *((_DWORD *)v41 + 4) = 5;
    *((void *)v41 + 3) = 0;
    uint64_t v52 = v41 + 40;
    *((_DWORD *)v41 + 8) = 1;
  }
  a1[1] = (unint64_t)v52;
  if (v52 >= v14)
  {
    unint64_t v64 = (char *)*a1;
    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v52[-*a1] >> 3);
    unint64_t v66 = v65 + 1;
    if (v65 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v64) >> 3);
    if (2 * v67 > v66) {
      unint64_t v66 = 2 * v67;
    }
    if (v67 >= 0x333333333333333) {
      unint64_t v68 = 0x666666666666666;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68)
    {
      unint64_t v68 = (unint64_t)sub_248403444(v68);
      unint64_t v64 = (char *)*a1;
      uint64_t v52 = (char *)a1[1];
    }
    else
    {
      uint64_t v69 = 0;
    }
    unint64_t v70 = v68 + 40 * v65;
    *(_WORD *)(v70 + 4) = -1;
    *(_DWORD *)unint64_t v70 = 0;
    uint64_t v14 = (char *)(v68 + 40 * v69);
    *(void *)(v70 + 8) = 0;
    *(_DWORD *)(v70 + 16) = 5;
    *(void *)(v70 + 24) = 0;
    *(_DWORD *)(v70 + 32) = 1;
    uint64_t v63 = (char *)(v70 + 40);
    if (v52 == v64)
    {
      unint64_t v73 = v70;
    }
    else
    {
      do
      {
        long long v71 = *(_OWORD *)(v52 - 40);
        long long v72 = *(_OWORD *)(v52 - 24);
        unint64_t v73 = v70 - 40;
        *(_DWORD *)(v70 - 8) = *((_DWORD *)v52 - 2);
        *(_OWORD *)(v70 - 24) = v72;
        *(_OWORD *)(v70 - 40) = v71;
        v52 -= 40;
        v70 -= 40;
      }
      while (v52 != v64);
    }
    *a1 = v73;
    a1[1] = (unint64_t)v63;
    a1[2] = (unint64_t)v14;
    if (v64)
    {
      operator delete(v64);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v52 = 0;
    *((_WORD *)v52 + 2) = -1;
    *((void *)v52 + 1) = 0;
    *((_DWORD *)v52 + 4) = 5;
    *((void *)v52 + 3) = 0;
    uint64_t v63 = v52 + 40;
    *((_DWORD *)v52 + 8) = 1;
  }
  a1[1] = (unint64_t)v63;
  if (v63 >= v14)
  {
    uint64_t v75 = (char *)*a1;
    unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v63[-*a1] >> 3);
    unint64_t v77 = v76 + 1;
    if (v76 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v75) >> 3);
    if (2 * v78 > v77) {
      unint64_t v77 = 2 * v78;
    }
    if (v78 >= 0x333333333333333) {
      unint64_t v79 = 0x666666666666666;
    }
    else {
      unint64_t v79 = v77;
    }
    if (v79)
    {
      unint64_t v79 = (unint64_t)sub_248403444(v79);
      uint64_t v75 = (char *)*a1;
      uint64_t v63 = (char *)a1[1];
    }
    else
    {
      uint64_t v80 = 0;
    }
    unint64_t v81 = v79 + 40 * v76;
    *(_DWORD *)unint64_t v81 = 5;
    *(_WORD *)(v81 + 4) = 7;
    uint64_t v14 = (char *)(v79 + 40 * v80);
    *(void *)(v81 + 8) = 0xA00000009;
    *(_DWORD *)(v81 + 16) = 0;
    *(void *)(v81 + 24) = 0;
    *(_DWORD *)(v81 + 32) = 1;
    uint64_t v74 = (char *)(v81 + 40);
    if (v63 == v75)
    {
      unint64_t v84 = v81;
    }
    else
    {
      do
      {
        long long v82 = *(_OWORD *)(v63 - 40);
        long long v83 = *(_OWORD *)(v63 - 24);
        unint64_t v84 = v81 - 40;
        *(_DWORD *)(v81 - 8) = *((_DWORD *)v63 - 2);
        *(_OWORD *)(v81 - 24) = v83;
        *(_OWORD *)(v81 - 40) = v82;
        v63 -= 40;
        v81 -= 40;
      }
      while (v63 != v75);
    }
    *a1 = v84;
    a1[1] = (unint64_t)v74;
    a1[2] = (unint64_t)v14;
    if (v75)
    {
      operator delete(v75);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v63 = 5;
    *((_WORD *)v63 + 2) = 7;
    *((void *)v63 + 1) = 0xA00000009;
    *((_DWORD *)v63 + 4) = 0;
    *((void *)v63 + 3) = 0;
    *((_DWORD *)v63 + 8) = 1;
    uint64_t v74 = v63 + 40;
  }
  a1[1] = (unint64_t)v74;
  if (v74 >= v14)
  {
    int v86 = (char *)*a1;
    unint64_t v87 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v74[-*a1] >> 3);
    unint64_t v88 = v87 + 1;
    if (v87 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v86) >> 3);
    if (2 * v89 > v88) {
      unint64_t v88 = 2 * v89;
    }
    if (v89 >= 0x333333333333333) {
      unint64_t v90 = 0x666666666666666;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      unint64_t v90 = (unint64_t)sub_248403444(v90);
      int v86 = (char *)*a1;
      uint64_t v74 = (char *)a1[1];
    }
    else
    {
      uint64_t v91 = 0;
    }
    unint64_t v92 = v90 + 40 * v87;
    *(_DWORD *)unint64_t v92 = 5;
    *(_WORD *)(v92 + 4) = 7;
    uint64_t v14 = (char *)(v90 + 40 * v91);
    *(void *)(v92 + 8) = 0x100000000FLL;
    *(_DWORD *)(v92 + 16) = 0;
    *(void *)(v92 + 24) = 0;
    *(_DWORD *)(v92 + 32) = 1;
    int v85 = (char *)(v92 + 40);
    if (v74 == v86)
    {
      unint64_t v95 = v92;
    }
    else
    {
      do
      {
        long long v93 = *(_OWORD *)(v74 - 40);
        long long v94 = *(_OWORD *)(v74 - 24);
        unint64_t v95 = v92 - 40;
        *(_DWORD *)(v92 - 8) = *((_DWORD *)v74 - 2);
        *(_OWORD *)(v92 - 24) = v94;
        *(_OWORD *)(v92 - 40) = v93;
        v74 -= 40;
        v92 -= 40;
      }
      while (v74 != v86);
    }
    *a1 = v95;
    a1[1] = (unint64_t)v85;
    a1[2] = (unint64_t)v14;
    if (v86)
    {
      operator delete(v86);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v74 = 5;
    *((_WORD *)v74 + 2) = 7;
    *((void *)v74 + 1) = 0x100000000FLL;
    *((_DWORD *)v74 + 4) = 0;
    *((void *)v74 + 3) = 0;
    *((_DWORD *)v74 + 8) = 1;
    int v85 = v74 + 40;
  }
  a1[1] = (unint64_t)v85;
  if (v85 >= v14)
  {
    uint64_t v97 = (char *)*a1;
    unint64_t v98 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v85[-*a1] >> 3);
    unint64_t v99 = v98 + 1;
    if (v98 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v100 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v97) >> 3);
    if (2 * v100 > v99) {
      unint64_t v99 = 2 * v100;
    }
    if (v100 >= 0x333333333333333) {
      unint64_t v101 = 0x666666666666666;
    }
    else {
      unint64_t v101 = v99;
    }
    if (v101)
    {
      unint64_t v101 = (unint64_t)sub_248403444(v101);
      uint64_t v97 = (char *)*a1;
      int v85 = (char *)a1[1];
    }
    else
    {
      uint64_t v102 = 0;
    }
    unint64_t v103 = v101 + 40 * v98;
    *(_DWORD *)unint64_t v103 = 11;
    *(_WORD *)(v103 + 4) = 7;
    uint64_t v14 = (char *)(v101 + 40 * v102);
    *(void *)(v103 + 8) = 0xC0000000BLL;
    *(_DWORD *)(v103 + 16) = 0;
    *(void *)(v103 + 24) = 0;
    *(_DWORD *)(v103 + 32) = 1;
    uint64_t v96 = (char *)(v103 + 40);
    if (v85 == v97)
    {
      unint64_t v106 = v103;
    }
    else
    {
      do
      {
        long long v104 = *(_OWORD *)(v85 - 40);
        long long v105 = *(_OWORD *)(v85 - 24);
        unint64_t v106 = v103 - 40;
        *(_DWORD *)(v103 - 8) = *((_DWORD *)v85 - 2);
        *(_OWORD *)(v103 - 24) = v105;
        *(_OWORD *)(v103 - 40) = v104;
        v85 -= 40;
        v103 -= 40;
      }
      while (v85 != v97);
    }
    *a1 = v106;
    a1[1] = (unint64_t)v96;
    a1[2] = (unint64_t)v14;
    if (v97)
    {
      operator delete(v97);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)int v85 = 11;
    *((_WORD *)v85 + 2) = 7;
    *((void *)v85 + 1) = 0xC0000000BLL;
    *((_DWORD *)v85 + 4) = 0;
    *((void *)v85 + 3) = 0;
    *((_DWORD *)v85 + 8) = 1;
    uint64_t v96 = v85 + 40;
  }
  a1[1] = (unint64_t)v96;
  if (v96 >= v14)
  {
    unint64_t v108 = (char *)*a1;
    unint64_t v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v96[-*a1] >> 3);
    unint64_t v110 = v109 + 1;
    if (v109 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v111 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v108) >> 3);
    if (2 * v111 > v110) {
      unint64_t v110 = 2 * v111;
    }
    if (v111 >= 0x333333333333333) {
      unint64_t v112 = 0x666666666666666;
    }
    else {
      unint64_t v112 = v110;
    }
    if (v112)
    {
      unint64_t v112 = (unint64_t)sub_248403444(v112);
      unint64_t v108 = (char *)*a1;
      uint64_t v96 = (char *)a1[1];
    }
    else
    {
      uint64_t v113 = 0;
    }
    unint64_t v114 = v112 + 40 * v109;
    *(_DWORD *)unint64_t v114 = 3;
    *(_WORD *)(v114 + 4) = 7;
    uint64_t v14 = (char *)(v112 + 40 * v113);
    *(void *)(v114 + 8) = 0xE0000000DLL;
    *(_DWORD *)(v114 + 16) = 0;
    *(void *)(v114 + 24) = 0;
    *(_DWORD *)(v114 + 32) = 1;
    unint64_t v107 = (char *)(v114 + 40);
    if (v96 == v108)
    {
      unint64_t v117 = v114;
    }
    else
    {
      do
      {
        long long v115 = *(_OWORD *)(v96 - 40);
        long long v116 = *(_OWORD *)(v96 - 24);
        unint64_t v117 = v114 - 40;
        *(_DWORD *)(v114 - 8) = *((_DWORD *)v96 - 2);
        *(_OWORD *)(v114 - 24) = v116;
        *(_OWORD *)(v114 - 40) = v115;
        v96 -= 40;
        v114 -= 40;
      }
      while (v96 != v108);
    }
    *a1 = v117;
    a1[1] = (unint64_t)v107;
    a1[2] = (unint64_t)v14;
    if (v108)
    {
      operator delete(v108);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v96 = 3;
    *((_WORD *)v96 + 2) = 7;
    *((void *)v96 + 1) = 0xE0000000DLL;
    *((_DWORD *)v96 + 4) = 0;
    *((void *)v96 + 3) = 0;
    *((_DWORD *)v96 + 8) = 1;
    unint64_t v107 = v96 + 40;
  }
  a1[1] = (unint64_t)v107;
  if (v107 >= v14)
  {
    uint64_t v119 = (char *)*a1;
    unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v107[-*a1] >> 3);
    unint64_t v121 = v120 + 1;
    if (v120 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v122 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v119) >> 3);
    if (2 * v122 > v121) {
      unint64_t v121 = 2 * v122;
    }
    if (v122 >= 0x333333333333333) {
      unint64_t v123 = 0x666666666666666;
    }
    else {
      unint64_t v123 = v121;
    }
    if (v123)
    {
      unint64_t v123 = (unint64_t)sub_248403444(v123);
      uint64_t v119 = (char *)*a1;
      unint64_t v107 = (char *)a1[1];
    }
    else
    {
      uint64_t v124 = 0;
    }
    unint64_t v125 = v123 + 40 * v120;
    *(_DWORD *)unint64_t v125 = 0;
    *(_WORD *)(v125 + 4) = -1;
    uint64_t v14 = (char *)(v123 + 40 * v124);
    *(void *)(v125 + 8) = 0;
    *(_DWORD *)(v125 + 16) = 1;
    *(void *)(v125 + 24) = 0;
    *(_DWORD *)(v125 + 32) = 1;
    unint64_t v118 = (char *)(v125 + 40);
    if (v107 == v119)
    {
      unint64_t v128 = v125;
    }
    else
    {
      do
      {
        long long v126 = *(_OWORD *)(v107 - 40);
        long long v127 = *(_OWORD *)(v107 - 24);
        unint64_t v128 = v125 - 40;
        *(_DWORD *)(v125 - 8) = *((_DWORD *)v107 - 2);
        *(_OWORD *)(v125 - 24) = v127;
        *(_OWORD *)(v125 - 40) = v126;
        v107 -= 40;
        v125 -= 40;
      }
      while (v107 != v119);
    }
    *a1 = v128;
    a1[1] = (unint64_t)v118;
    a1[2] = (unint64_t)v14;
    if (v119)
    {
      operator delete(v119);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v107 = 0;
    *((_WORD *)v107 + 2) = -1;
    *((void *)v107 + 1) = 0;
    *((_DWORD *)v107 + 4) = 1;
    *((void *)v107 + 3) = 0;
    unint64_t v118 = v107 + 40;
    *((_DWORD *)v107 + 8) = 1;
  }
  a1[1] = (unint64_t)v118;
  if (v118 >= v14)
  {
    unint64_t v130 = (char *)*a1;
    unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v118[-*a1] >> 3);
    unint64_t v132 = v131 + 1;
    if (v131 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v130) >> 3);
    if (2 * v133 > v132) {
      unint64_t v132 = 2 * v133;
    }
    if (v133 >= 0x333333333333333) {
      unint64_t v134 = 0x666666666666666;
    }
    else {
      unint64_t v134 = v132;
    }
    if (v134)
    {
      unint64_t v134 = (unint64_t)sub_248403444(v134);
      unint64_t v130 = (char *)*a1;
      unint64_t v118 = (char *)a1[1];
    }
    else
    {
      uint64_t v135 = 0;
    }
    unint64_t v136 = v134 + 40 * v131;
    *(_DWORD *)unint64_t v136 = 0;
    *(_WORD *)(v136 + 4) = -1;
    uint64_t v14 = (char *)(v134 + 40 * v135);
    *(void *)(v136 + 8) = 0;
    *(_DWORD *)(v136 + 16) = 1;
    *(void *)(v136 + 24) = 0;
    *(_DWORD *)(v136 + 32) = 1;
    unint64_t v129 = (char *)(v136 + 40);
    if (v118 == v130)
    {
      unint64_t v139 = v136;
    }
    else
    {
      do
      {
        long long v137 = *(_OWORD *)(v118 - 40);
        long long v138 = *(_OWORD *)(v118 - 24);
        unint64_t v139 = v136 - 40;
        *(_DWORD *)(v136 - 8) = *((_DWORD *)v118 - 2);
        *(_OWORD *)(v136 - 24) = v138;
        *(_OWORD *)(v136 - 40) = v137;
        v118 -= 40;
        v136 -= 40;
      }
      while (v118 != v130);
    }
    *a1 = v139;
    a1[1] = (unint64_t)v129;
    a1[2] = (unint64_t)v14;
    if (v130)
    {
      operator delete(v130);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v118 = 0;
    *((_WORD *)v118 + 2) = -1;
    *((void *)v118 + 1) = 0;
    *((_DWORD *)v118 + 4) = 1;
    *((void *)v118 + 3) = 0;
    unint64_t v129 = v118 + 40;
    *((_DWORD *)v118 + 8) = 1;
  }
  a1[1] = (unint64_t)v129;
  if (v129 >= v14)
  {
    uint64_t v141 = (char *)*a1;
    unint64_t v142 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v129[-*a1] >> 3);
    unint64_t v143 = v142 + 1;
    if (v142 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v144 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v141) >> 3);
    if (2 * v144 > v143) {
      unint64_t v143 = 2 * v144;
    }
    if (v144 >= 0x333333333333333) {
      unint64_t v145 = 0x666666666666666;
    }
    else {
      unint64_t v145 = v143;
    }
    if (v145)
    {
      unint64_t v145 = (unint64_t)sub_248403444(v145);
      uint64_t v141 = (char *)*a1;
      unint64_t v129 = (char *)a1[1];
    }
    else
    {
      uint64_t v146 = 0;
    }
    unint64_t v147 = v145 + 40 * v142;
    *(_DWORD *)unint64_t v147 = 0;
    *(_WORD *)(v147 + 4) = -1;
    uint64_t v14 = (char *)(v145 + 40 * v146);
    *(void *)(v147 + 8) = 0;
    *(_DWORD *)(v147 + 16) = 1;
    *(void *)(v147 + 24) = 0;
    *(_DWORD *)(v147 + 32) = 1;
    uint64_t v140 = (char *)(v147 + 40);
    if (v129 == v141)
    {
      unint64_t v150 = v147;
    }
    else
    {
      do
      {
        long long v148 = *(_OWORD *)(v129 - 40);
        long long v149 = *(_OWORD *)(v129 - 24);
        unint64_t v150 = v147 - 40;
        *(_DWORD *)(v147 - 8) = *((_DWORD *)v129 - 2);
        *(_OWORD *)(v147 - 24) = v149;
        *(_OWORD *)(v147 - 40) = v148;
        v129 -= 40;
        v147 -= 40;
      }
      while (v129 != v141);
    }
    *a1 = v150;
    a1[1] = (unint64_t)v140;
    a1[2] = (unint64_t)v14;
    if (v141)
    {
      operator delete(v141);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v129 = 0;
    *((_WORD *)v129 + 2) = -1;
    *((void *)v129 + 1) = 0;
    *((_DWORD *)v129 + 4) = 1;
    *((void *)v129 + 3) = 0;
    uint64_t v140 = v129 + 40;
    *((_DWORD *)v129 + 8) = 1;
  }
  a1[1] = (unint64_t)v140;
  if (v140 >= v14)
  {
    int v152 = (char *)*a1;
    unint64_t v153 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v140[-*a1] >> 3);
    unint64_t v154 = v153 + 1;
    if (v153 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v155 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v152) >> 3);
    if (2 * v155 > v154) {
      unint64_t v154 = 2 * v155;
    }
    if (v155 >= 0x333333333333333) {
      unint64_t v156 = 0x666666666666666;
    }
    else {
      unint64_t v156 = v154;
    }
    if (v156)
    {
      unint64_t v156 = (unint64_t)sub_248403444(v156);
      int v152 = (char *)*a1;
      uint64_t v140 = (char *)a1[1];
    }
    else
    {
      uint64_t v157 = 0;
    }
    unint64_t v158 = v156 + 40 * v153;
    *(_DWORD *)unint64_t v158 = 0;
    *(_WORD *)(v158 + 4) = -1;
    uint64_t v14 = (char *)(v156 + 40 * v157);
    *(void *)(v158 + 8) = 0;
    *(_DWORD *)(v158 + 16) = 1;
    *(void *)(v158 + 24) = 0;
    *(_DWORD *)(v158 + 32) = 1;
    int v151 = (char *)(v158 + 40);
    if (v140 == v152)
    {
      unint64_t v161 = v158;
    }
    else
    {
      do
      {
        long long v159 = *(_OWORD *)(v140 - 40);
        long long v160 = *(_OWORD *)(v140 - 24);
        unint64_t v161 = v158 - 40;
        *(_DWORD *)(v158 - 8) = *((_DWORD *)v140 - 2);
        *(_OWORD *)(v158 - 24) = v160;
        *(_OWORD *)(v158 - 40) = v159;
        v140 -= 40;
        v158 -= 40;
      }
      while (v140 != v152);
    }
    *a1 = v161;
    a1[1] = (unint64_t)v151;
    a1[2] = (unint64_t)v14;
    if (v152)
    {
      operator delete(v152);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v140 = 0;
    *((_WORD *)v140 + 2) = -1;
    *((void *)v140 + 1) = 0;
    *((_DWORD *)v140 + 4) = 1;
    *((void *)v140 + 3) = 0;
    int v151 = v140 + 40;
    *((_DWORD *)v140 + 8) = 1;
  }
  a1[1] = (unint64_t)v151;
  if (v151 >= v14)
  {
    uint64_t v163 = (char *)*a1;
    unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v151[-*a1] >> 3);
    unint64_t v165 = v164 + 1;
    if (v164 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v166 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v163) >> 3);
    if (2 * v166 > v165) {
      unint64_t v165 = 2 * v166;
    }
    if (v166 >= 0x333333333333333) {
      unint64_t v167 = 0x666666666666666;
    }
    else {
      unint64_t v167 = v165;
    }
    if (v167)
    {
      unint64_t v167 = (unint64_t)sub_248403444(v167);
      uint64_t v163 = (char *)*a1;
      int v151 = (char *)a1[1];
    }
    else
    {
      uint64_t v168 = 0;
    }
    unint64_t v169 = v167 + 40 * v164;
    *(_DWORD *)unint64_t v169 = 11;
    *(_WORD *)(v169 + 4) = 7;
    uint64_t v14 = (char *)(v167 + 40 * v168);
    *(void *)(v169 + 8) = 0x1200000011;
    *(_DWORD *)(v169 + 16) = 0;
    *(void *)(v169 + 24) = 0;
    *(_DWORD *)(v169 + 32) = 1;
    uint64_t v162 = (char *)(v169 + 40);
    if (v151 == v163)
    {
      unint64_t v172 = v169;
    }
    else
    {
      do
      {
        long long v170 = *(_OWORD *)(v151 - 40);
        long long v171 = *(_OWORD *)(v151 - 24);
        unint64_t v172 = v169 - 40;
        *(_DWORD *)(v169 - 8) = *((_DWORD *)v151 - 2);
        *(_OWORD *)(v169 - 24) = v171;
        *(_OWORD *)(v169 - 40) = v170;
        v151 -= 40;
        v169 -= 40;
      }
      while (v151 != v163);
    }
    *a1 = v172;
    a1[1] = (unint64_t)v162;
    a1[2] = (unint64_t)v14;
    if (v163)
    {
      operator delete(v163);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)int v151 = 11;
    *((_WORD *)v151 + 2) = 7;
    *((void *)v151 + 1) = 0x1200000011;
    *((_DWORD *)v151 + 4) = 0;
    *((void *)v151 + 3) = 0;
    *((_DWORD *)v151 + 8) = 1;
    uint64_t v162 = v151 + 40;
  }
  a1[1] = (unint64_t)v162;
  if (v162 >= v14)
  {
    uint64_t v174 = (char *)*a1;
    unint64_t v175 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v162[-*a1] >> 3);
    unint64_t v176 = v175 + 1;
    if (v175 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v177 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v174) >> 3);
    if (2 * v177 > v176) {
      unint64_t v176 = 2 * v177;
    }
    if (v177 >= 0x333333333333333) {
      unint64_t v178 = 0x666666666666666;
    }
    else {
      unint64_t v178 = v176;
    }
    if (v178)
    {
      unint64_t v178 = (unint64_t)sub_248403444(v178);
      uint64_t v174 = (char *)*a1;
      uint64_t v162 = (char *)a1[1];
    }
    else
    {
      uint64_t v179 = 0;
    }
    unint64_t v180 = v178 + 40 * v175;
    *(_DWORD *)unint64_t v180 = 3;
    *(_WORD *)(v180 + 4) = 7;
    uint64_t v14 = (char *)(v178 + 40 * v179);
    *(void *)(v180 + 8) = 0x1400000013;
    *(_DWORD *)(v180 + 16) = 0;
    *(void *)(v180 + 24) = 0;
    *(_DWORD *)(v180 + 32) = 1;
    unint64_t v173 = (char *)(v180 + 40);
    if (v162 == v174)
    {
      unint64_t v183 = v180;
    }
    else
    {
      do
      {
        long long v181 = *(_OWORD *)(v162 - 40);
        long long v182 = *(_OWORD *)(v162 - 24);
        unint64_t v183 = v180 - 40;
        *(_DWORD *)(v180 - 8) = *((_DWORD *)v162 - 2);
        *(_OWORD *)(v180 - 24) = v182;
        *(_OWORD *)(v180 - 40) = v181;
        v162 -= 40;
        v180 -= 40;
      }
      while (v162 != v174);
    }
    *a1 = v183;
    a1[1] = (unint64_t)v173;
    a1[2] = (unint64_t)v14;
    if (v174)
    {
      operator delete(v174);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v162 = 3;
    *((_WORD *)v162 + 2) = 7;
    *((void *)v162 + 1) = 0x1400000013;
    *((_DWORD *)v162 + 4) = 0;
    *((void *)v162 + 3) = 0;
    *((_DWORD *)v162 + 8) = 1;
    unint64_t v173 = v162 + 40;
  }
  a1[1] = (unint64_t)v173;
  if (v173 >= v14)
  {
    unint64_t v185 = (char *)*a1;
    unint64_t v186 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v173[-*a1] >> 3);
    unint64_t v187 = v186 + 1;
    if (v186 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v188 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v185) >> 3);
    if (2 * v188 > v187) {
      unint64_t v187 = 2 * v188;
    }
    if (v188 >= 0x333333333333333) {
      unint64_t v189 = 0x666666666666666;
    }
    else {
      unint64_t v189 = v187;
    }
    if (v189)
    {
      unint64_t v189 = (unint64_t)sub_248403444(v189);
      unint64_t v185 = (char *)*a1;
      unint64_t v173 = (char *)a1[1];
    }
    else
    {
      uint64_t v190 = 0;
    }
    unint64_t v191 = v189 + 40 * v186;
    *(_DWORD *)unint64_t v191 = 0;
    *(_WORD *)(v191 + 4) = -1;
    uint64_t v14 = (char *)(v189 + 40 * v190);
    *(void *)(v191 + 8) = 0;
    *(_DWORD *)(v191 + 16) = 0;
    *(void *)(v191 + 24) = 0;
    *(_DWORD *)(v191 + 32) = 1;
    unsigned int v184 = (char *)(v191 + 40);
    if (v173 == v185)
    {
      unint64_t v194 = v191;
    }
    else
    {
      do
      {
        long long v192 = *(_OWORD *)(v173 - 40);
        long long v193 = *(_OWORD *)(v173 - 24);
        unint64_t v194 = v191 - 40;
        *(_DWORD *)(v191 - 8) = *((_DWORD *)v173 - 2);
        *(_OWORD *)(v191 - 24) = v193;
        *(_OWORD *)(v191 - 40) = v192;
        v173 -= 40;
        v191 -= 40;
      }
      while (v173 != v185);
    }
    *a1 = v194;
    a1[1] = (unint64_t)v184;
    a1[2] = (unint64_t)v14;
    if (v185)
    {
      operator delete(v185);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v173 = 0;
    *((_WORD *)v173 + 2) = -1;
    *((void *)v173 + 1) = 0;
    *((_DWORD *)v173 + 4) = 0;
    *((void *)v173 + 3) = 0;
    unsigned int v184 = v173 + 40;
    *((_DWORD *)v173 + 8) = 1;
  }
  a1[1] = (unint64_t)v184;
  if (v184 >= v14)
  {
    uint64_t v196 = (char *)*a1;
    unint64_t v197 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v184[-*a1] >> 3);
    unint64_t v198 = v197 + 1;
    if (v197 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v199 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v196) >> 3);
    if (2 * v199 > v198) {
      unint64_t v198 = 2 * v199;
    }
    if (v199 >= 0x333333333333333) {
      unint64_t v200 = 0x666666666666666;
    }
    else {
      unint64_t v200 = v198;
    }
    if (v200)
    {
      unint64_t v200 = (unint64_t)sub_248403444(v200);
      uint64_t v196 = (char *)*a1;
      unsigned int v184 = (char *)a1[1];
    }
    else
    {
      uint64_t v201 = 0;
    }
    unint64_t v202 = v200 + 40 * v197;
    *(_DWORD *)unint64_t v202 = 0;
    *(_WORD *)(v202 + 4) = -1;
    uint64_t v14 = (char *)(v200 + 40 * v201);
    *(void *)(v202 + 8) = 0;
    *(_DWORD *)(v202 + 16) = 0;
    *(void *)(v202 + 24) = 0;
    *(_DWORD *)(v202 + 32) = 1;
    unint64_t v195 = (char *)(v202 + 40);
    if (v184 == v196)
    {
      unint64_t v205 = v202;
    }
    else
    {
      do
      {
        long long v203 = *(_OWORD *)(v184 - 40);
        long long v204 = *(_OWORD *)(v184 - 24);
        unint64_t v205 = v202 - 40;
        *(_DWORD *)(v202 - 8) = *((_DWORD *)v184 - 2);
        *(_OWORD *)(v202 - 24) = v204;
        *(_OWORD *)(v202 - 40) = v203;
        v184 -= 40;
        v202 -= 40;
      }
      while (v184 != v196);
    }
    *a1 = v205;
    a1[1] = (unint64_t)v195;
    a1[2] = (unint64_t)v14;
    if (v196)
    {
      operator delete(v196);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unsigned int v184 = 0;
    *((_WORD *)v184 + 2) = -1;
    *((void *)v184 + 1) = 0;
    *((_DWORD *)v184 + 4) = 0;
    *((void *)v184 + 3) = 0;
    unint64_t v195 = v184 + 40;
    *((_DWORD *)v184 + 8) = 1;
  }
  a1[1] = (unint64_t)v195;
  if (v195 >= v14)
  {
    unint64_t v207 = (char *)*a1;
    unint64_t v208 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v195[-*a1] >> 3);
    unint64_t v209 = v208 + 1;
    if (v208 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v210 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v207) >> 3);
    if (2 * v210 > v209) {
      unint64_t v209 = 2 * v210;
    }
    if (v210 >= 0x333333333333333) {
      unint64_t v211 = 0x666666666666666;
    }
    else {
      unint64_t v211 = v209;
    }
    if (v211)
    {
      unint64_t v211 = (unint64_t)sub_248403444(v211);
      unint64_t v207 = (char *)*a1;
      unint64_t v195 = (char *)a1[1];
    }
    else
    {
      uint64_t v212 = 0;
    }
    unint64_t v213 = v211 + 40 * v208;
    *(_DWORD *)unint64_t v213 = 0;
    *(_WORD *)(v213 + 4) = -1;
    uint64_t v14 = (char *)(v211 + 40 * v212);
    *(void *)(v213 + 8) = 0;
    *(_DWORD *)(v213 + 16) = 0;
    *(void *)(v213 + 24) = 0;
    *(_DWORD *)(v213 + 32) = 1;
    unint64_t v206 = (char *)(v213 + 40);
    if (v195 == v207)
    {
      unint64_t v216 = v213;
    }
    else
    {
      do
      {
        long long v214 = *(_OWORD *)(v195 - 40);
        long long v215 = *(_OWORD *)(v195 - 24);
        unint64_t v216 = v213 - 40;
        *(_DWORD *)(v213 - 8) = *((_DWORD *)v195 - 2);
        *(_OWORD *)(v213 - 24) = v215;
        *(_OWORD *)(v213 - 40) = v214;
        v195 -= 40;
        v213 -= 40;
      }
      while (v195 != v207);
    }
    *a1 = v216;
    a1[1] = (unint64_t)v206;
    a1[2] = (unint64_t)v14;
    if (v207)
    {
      operator delete(v207);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v195 = 0;
    *((_WORD *)v195 + 2) = -1;
    *((void *)v195 + 1) = 0;
    *((_DWORD *)v195 + 4) = 0;
    *((void *)v195 + 3) = 0;
    unint64_t v206 = v195 + 40;
    *((_DWORD *)v195 + 8) = 1;
  }
  a1[1] = (unint64_t)v206;
  if (v206 >= v14)
  {
    unint64_t v218 = (char *)*a1;
    unint64_t v219 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v206[-*a1] >> 3);
    unint64_t v220 = v219 + 1;
    if (v219 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v221 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v218) >> 3);
    if (2 * v221 > v220) {
      unint64_t v220 = 2 * v221;
    }
    if (v221 >= 0x333333333333333) {
      unint64_t v222 = 0x666666666666666;
    }
    else {
      unint64_t v222 = v220;
    }
    if (v222)
    {
      unint64_t v222 = (unint64_t)sub_248403444(v222);
      unint64_t v218 = (char *)*a1;
      unint64_t v206 = (char *)a1[1];
    }
    else
    {
      uint64_t v223 = 0;
    }
    unint64_t v224 = v222 + 40 * v219;
    *(_DWORD *)unint64_t v224 = 0;
    *(_WORD *)(v224 + 4) = -1;
    uint64_t v14 = (char *)(v222 + 40 * v223);
    *(void *)(v224 + 8) = 0;
    *(_DWORD *)(v224 + 16) = 0;
    *(void *)(v224 + 24) = 0;
    *(_DWORD *)(v224 + 32) = 1;
    uint64_t v217 = (char *)(v224 + 40);
    if (v206 == v218)
    {
      unint64_t v227 = v224;
    }
    else
    {
      do
      {
        long long v225 = *(_OWORD *)(v206 - 40);
        long long v226 = *(_OWORD *)(v206 - 24);
        unint64_t v227 = v224 - 40;
        *(_DWORD *)(v224 - 8) = *((_DWORD *)v206 - 2);
        *(_OWORD *)(v224 - 24) = v226;
        *(_OWORD *)(v224 - 40) = v225;
        v206 -= 40;
        v224 -= 40;
      }
      while (v206 != v218);
    }
    *a1 = v227;
    a1[1] = (unint64_t)v217;
    a1[2] = (unint64_t)v14;
    if (v218)
    {
      operator delete(v218);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v206 = 0;
    *((_WORD *)v206 + 2) = -1;
    *((void *)v206 + 1) = 0;
    *((_DWORD *)v206 + 4) = 0;
    *((void *)v206 + 3) = 0;
    uint64_t v217 = v206 + 40;
    *((_DWORD *)v206 + 8) = 1;
  }
  a1[1] = (unint64_t)v217;
  if (v217 >= v14)
  {
    uint64_t v229 = (char *)*a1;
    unint64_t v230 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v217[-*a1] >> 3);
    unint64_t v231 = v230 + 1;
    if (v230 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v232 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v229) >> 3);
    if (2 * v232 > v231) {
      unint64_t v231 = 2 * v232;
    }
    if (v232 >= 0x333333333333333) {
      unint64_t v233 = 0x666666666666666;
    }
    else {
      unint64_t v233 = v231;
    }
    if (v233)
    {
      unint64_t v233 = (unint64_t)sub_248403444(v233);
      uint64_t v229 = (char *)*a1;
      uint64_t v217 = (char *)a1[1];
    }
    else
    {
      uint64_t v234 = 0;
    }
    unint64_t v235 = v233 + 40 * v230;
    *(_WORD *)(v235 + 4) = 7;
    *(_DWORD *)unint64_t v235 = 0;
    uint64_t v14 = (char *)(v233 + 40 * v234);
    *(void *)(v235 + 8) = 0x1800000017;
    *(_DWORD *)(v235 + 16) = 0;
    *(void *)(v235 + 24) = 0;
    *(_DWORD *)(v235 + 32) = 1;
    uint64_t v228 = (char *)(v235 + 40);
    if (v217 == v229)
    {
      unint64_t v238 = v235;
    }
    else
    {
      do
      {
        long long v236 = *(_OWORD *)(v217 - 40);
        long long v237 = *(_OWORD *)(v217 - 24);
        unint64_t v238 = v235 - 40;
        *(_DWORD *)(v235 - 8) = *((_DWORD *)v217 - 2);
        *(_OWORD *)(v235 - 24) = v237;
        *(_OWORD *)(v235 - 40) = v236;
        v217 -= 40;
        v235 -= 40;
      }
      while (v217 != v229);
    }
    *a1 = v238;
    a1[1] = (unint64_t)v228;
    a1[2] = (unint64_t)v14;
    if (v229)
    {
      operator delete(v229);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v217 = 0;
    *((_WORD *)v217 + 2) = 7;
    *((void *)v217 + 1) = 0x1800000017;
    *((_DWORD *)v217 + 4) = 0;
    *((void *)v217 + 3) = 0;
    *((_DWORD *)v217 + 8) = 1;
    uint64_t v228 = v217 + 40;
  }
  a1[1] = (unint64_t)v228;
  if (v228 >= v14)
  {
    char v240 = (char *)*a1;
    unint64_t v241 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v228[-*a1] >> 3);
    unint64_t v242 = v241 + 1;
    if (v241 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v243 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v240) >> 3);
    if (2 * v243 > v242) {
      unint64_t v242 = 2 * v243;
    }
    if (v243 >= 0x333333333333333) {
      unint64_t v244 = 0x666666666666666;
    }
    else {
      unint64_t v244 = v242;
    }
    if (v244)
    {
      unint64_t v244 = (unint64_t)sub_248403444(v244);
      char v240 = (char *)*a1;
      uint64_t v228 = (char *)a1[1];
    }
    else
    {
      uint64_t v245 = 0;
    }
    unint64_t v246 = v244 + 40 * v241;
    *(_WORD *)(v246 + 4) = 7;
    *(_DWORD *)unint64_t v246 = 0;
    uint64_t v14 = (char *)(v244 + 40 * v245);
    *(void *)(v246 + 8) = 0x1A00000019;
    *(_DWORD *)(v246 + 16) = 0;
    *(void *)(v246 + 24) = 0;
    *(_DWORD *)(v246 + 32) = 1;
    unint64_t v239 = (char *)(v246 + 40);
    if (v228 == v240)
    {
      unint64_t v249 = v246;
    }
    else
    {
      do
      {
        long long v247 = *(_OWORD *)(v228 - 40);
        long long v248 = *(_OWORD *)(v228 - 24);
        unint64_t v249 = v246 - 40;
        *(_DWORD *)(v246 - 8) = *((_DWORD *)v228 - 2);
        *(_OWORD *)(v246 - 24) = v248;
        *(_OWORD *)(v246 - 40) = v247;
        v228 -= 40;
        v246 -= 40;
      }
      while (v228 != v240);
    }
    *a1 = v249;
    a1[1] = (unint64_t)v239;
    a1[2] = (unint64_t)v14;
    if (v240)
    {
      operator delete(v240);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v228 = 0;
    *((_WORD *)v228 + 2) = 7;
    *((void *)v228 + 1) = 0x1A00000019;
    *((_DWORD *)v228 + 4) = 0;
    *((void *)v228 + 3) = 0;
    *((_DWORD *)v228 + 8) = 1;
    unint64_t v239 = v228 + 40;
  }
  a1[1] = (unint64_t)v239;
  if (v239 >= v14)
  {
    uint64_t v251 = (char *)*a1;
    unint64_t v252 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v239[-*a1] >> 3);
    unint64_t v253 = v252 + 1;
    if (v252 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v254 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v251) >> 3);
    if (2 * v254 > v253) {
      unint64_t v253 = 2 * v254;
    }
    if (v254 >= 0x333333333333333) {
      unint64_t v255 = 0x666666666666666;
    }
    else {
      unint64_t v255 = v253;
    }
    if (v255)
    {
      unint64_t v255 = (unint64_t)sub_248403444(v255);
      uint64_t v251 = (char *)*a1;
      unint64_t v239 = (char *)a1[1];
    }
    else
    {
      uint64_t v256 = 0;
    }
    unint64_t v257 = v255 + 40 * v252;
    *(_DWORD *)unint64_t v257 = 0;
    *(_WORD *)(v257 + 4) = -1;
    uint64_t v14 = (char *)(v255 + 40 * v256);
    *(void *)(v257 + 8) = 0;
    *(_DWORD *)(v257 + 16) = 0;
    *(void *)(v257 + 24) = 0;
    *(_DWORD *)(v257 + 32) = 1;
    unsigned int v250 = (char *)(v257 + 40);
    if (v239 == v251)
    {
      unint64_t v260 = v257;
    }
    else
    {
      do
      {
        long long v258 = *(_OWORD *)(v239 - 40);
        long long v259 = *(_OWORD *)(v239 - 24);
        unint64_t v260 = v257 - 40;
        *(_DWORD *)(v257 - 8) = *((_DWORD *)v239 - 2);
        *(_OWORD *)(v257 - 24) = v259;
        *(_OWORD *)(v257 - 40) = v258;
        v239 -= 40;
        v257 -= 40;
      }
      while (v239 != v251);
    }
    *a1 = v260;
    a1[1] = (unint64_t)v250;
    a1[2] = (unint64_t)v14;
    if (v251)
    {
      operator delete(v251);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v239 = 0;
    *((_WORD *)v239 + 2) = -1;
    *((void *)v239 + 1) = 0;
    *((_DWORD *)v239 + 4) = 0;
    *((void *)v239 + 3) = 0;
    unsigned int v250 = v239 + 40;
    *((_DWORD *)v239 + 8) = 1;
  }
  a1[1] = (unint64_t)v250;
  if (v250 >= v14)
  {
    unint64_t v262 = (char *)*a1;
    unint64_t v263 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v250[-*a1] >> 3);
    unint64_t v264 = v263 + 1;
    if (v263 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v265 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v262) >> 3);
    if (2 * v265 > v264) {
      unint64_t v264 = 2 * v265;
    }
    if (v265 >= 0x333333333333333) {
      unint64_t v266 = 0x666666666666666;
    }
    else {
      unint64_t v266 = v264;
    }
    if (v266)
    {
      unint64_t v266 = (unint64_t)sub_248403444(v266);
      unint64_t v262 = (char *)*a1;
      unsigned int v250 = (char *)a1[1];
    }
    else
    {
      uint64_t v267 = 0;
    }
    unint64_t v268 = v266 + 40 * v263;
    *(_DWORD *)unint64_t v268 = 0;
    *(_WORD *)(v268 + 4) = -1;
    uint64_t v14 = (char *)(v266 + 40 * v267);
    *(void *)(v268 + 8) = 0;
    *(_DWORD *)(v268 + 16) = 0;
    *(void *)(v268 + 24) = 0;
    *(_DWORD *)(v268 + 32) = 1;
    unint64_t v261 = (char *)(v268 + 40);
    if (v250 == v262)
    {
      unint64_t v271 = v268;
    }
    else
    {
      do
      {
        long long v269 = *(_OWORD *)(v250 - 40);
        long long v270 = *(_OWORD *)(v250 - 24);
        unint64_t v271 = v268 - 40;
        *(_DWORD *)(v268 - 8) = *((_DWORD *)v250 - 2);
        *(_OWORD *)(v268 - 24) = v270;
        *(_OWORD *)(v268 - 40) = v269;
        v250 -= 40;
        v268 -= 40;
      }
      while (v250 != v262);
    }
    *a1 = v271;
    a1[1] = (unint64_t)v261;
    a1[2] = (unint64_t)v14;
    if (v262)
    {
      operator delete(v262);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unsigned int v250 = 0;
    *((_WORD *)v250 + 2) = -1;
    *((void *)v250 + 1) = 0;
    *((_DWORD *)v250 + 4) = 0;
    *((void *)v250 + 3) = 0;
    unint64_t v261 = v250 + 40;
    *((_DWORD *)v250 + 8) = 1;
  }
  a1[1] = (unint64_t)v261;
  if (v261 >= v14)
  {
    unint64_t v273 = (char *)*a1;
    unint64_t v274 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v261[-*a1] >> 3);
    unint64_t v275 = v274 + 1;
    if (v274 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v276 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v273) >> 3);
    if (2 * v276 > v275) {
      unint64_t v275 = 2 * v276;
    }
    if (v276 >= 0x333333333333333) {
      unint64_t v277 = 0x666666666666666;
    }
    else {
      unint64_t v277 = v275;
    }
    if (v277)
    {
      unint64_t v277 = (unint64_t)sub_248403444(v277);
      unint64_t v273 = (char *)*a1;
      unint64_t v261 = (char *)a1[1];
    }
    else
    {
      uint64_t v278 = 0;
    }
    unint64_t v279 = v277 + 40 * v274;
    *(_DWORD *)unint64_t v279 = 0;
    *(_WORD *)(v279 + 4) = -1;
    uint64_t v14 = (char *)(v277 + 40 * v278);
    *(void *)(v279 + 8) = 0;
    *(_DWORD *)(v279 + 16) = 0;
    *(void *)(v279 + 24) = 0;
    *(_DWORD *)(v279 + 32) = 1;
    uint64_t v272 = (char *)(v279 + 40);
    if (v261 == v273)
    {
      unint64_t v282 = v279;
    }
    else
    {
      do
      {
        long long v280 = *(_OWORD *)(v261 - 40);
        long long v281 = *(_OWORD *)(v261 - 24);
        unint64_t v282 = v279 - 40;
        *(_DWORD *)(v279 - 8) = *((_DWORD *)v261 - 2);
        *(_OWORD *)(v279 - 24) = v281;
        *(_OWORD *)(v279 - 40) = v280;
        v261 -= 40;
        v279 -= 40;
      }
      while (v261 != v273);
    }
    *a1 = v282;
    a1[1] = (unint64_t)v272;
    a1[2] = (unint64_t)v14;
    if (v273)
    {
      operator delete(v273);
      uint64_t v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)unint64_t v261 = 0;
    *((_WORD *)v261 + 2) = -1;
    *((void *)v261 + 1) = 0;
    *((_DWORD *)v261 + 4) = 0;
    *((void *)v261 + 3) = 0;
    uint64_t v272 = v261 + 40;
    *((_DWORD *)v261 + 8) = 1;
  }
  a1[1] = (unint64_t)v272;
  if (v272 >= v14)
  {
    unsigned int v284 = (char *)*a1;
    unint64_t v285 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v272[-*a1] >> 3);
    unint64_t v286 = v285 + 1;
    if (v285 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v287 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v284) >> 3);
    if (2 * v287 > v286) {
      unint64_t v286 = 2 * v287;
    }
    if (v287 >= 0x333333333333333) {
      unint64_t v288 = 0x666666666666666;
    }
    else {
      unint64_t v288 = v286;
    }
    if (v288)
    {
      unint64_t v288 = (unint64_t)sub_248403444(v288);
      unsigned int v284 = (char *)*a1;
      uint64_t v272 = (char *)a1[1];
    }
    else
    {
      uint64_t v289 = 0;
    }
    unint64_t v290 = v288 + 40 * v285;
    *(_DWORD *)unint64_t v290 = 0;
    *(_WORD *)(v290 + 4) = -1;
    unint64_t v291 = v288 + 40 * v289;
    *(void *)(v290 + 8) = 0;
    *(_DWORD *)(v290 + 16) = 0;
    *(void *)(v290 + 24) = 0;
    *(_DWORD *)(v290 + 32) = 1;
    unint64_t v283 = v290 + 40;
    if (v272 == v284)
    {
      unint64_t v294 = v290;
    }
    else
    {
      do
      {
        long long v292 = *(_OWORD *)(v272 - 40);
        long long v293 = *(_OWORD *)(v272 - 24);
        unint64_t v294 = v290 - 40;
        *(_DWORD *)(v290 - 8) = *((_DWORD *)v272 - 2);
        *(_OWORD *)(v290 - 24) = v293;
        *(_OWORD *)(v290 - 40) = v292;
        v272 -= 40;
        v290 -= 40;
      }
      while (v272 != v284);
    }
    *a1 = v294;
    a1[1] = v283;
    a1[2] = v291;
    if (v284) {
      operator delete(v284);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v272 = 0;
    *((_WORD *)v272 + 2) = -1;
    *((void *)v272 + 1) = 0;
    *((_DWORD *)v272 + 4) = 0;
    *((void *)v272 + 3) = 0;
    unint64_t v283 = (unint64_t)(v272 + 40);
    *((_DWORD *)v272 + 8) = 1;
  }
  a1[1] = v283;
}

void sub_24849B294(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24849B324(unint64_t *a1, __int16 a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8 = __clz(a5) ^ 0x3F;
  if ((a5 & (a5 - 1)) != 0) {
    ++v8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  if (v8 >= 0xE) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 112 - 8 * v8;
  }
  uint64_t v52 = v9;
  *(_OWORD *)long long __p = 0uLL;
  uint64_t v10 = (char *)operator new(0x28uLL);
  uint64_t v11 = v10 + 40;
  *(_DWORD *)uint64_t v10 = 0;
  *((_WORD *)v10 + 2) = -1;
  *((void *)v10 + 1) = 0;
  *((_DWORD *)v10 + 4) = a4;
  *((void *)v10 + 3) = 0;
  *((_DWORD *)v10 + 8) = 1;
  *a1 = (unint64_t)v10;
  a1[1] = (unint64_t)(v10 + 40);
  a1[2] = (unint64_t)(v10 + 40);
  long long v49 = a3;
  uint64_t v12 = (uint64_t)(a3[1] - *a3) >> 2;
  v53.n128_u64[0] = 0;
  v53.n128_u64[1] = v12;
  unint64_t v54 = 0;
  sub_24849B83C((uint64_t)__p, &v53);
  uint64_t v13 = *((void *)&v57 + 1);
  if (*((void *)&v57 + 1))
  {
    uint64_t v14 = v10 + 40;
    while (1)
    {
      while (1)
      {
        uint64_t v15 = a4;
        long long v16 = (char *)__p[1];
        uint64_t v17 = v57;
        long long v18 = (unint64_t *)(*((void *)__p[1] + (unint64_t)v57 / 0xAA)
                                 + 24 * ((unint64_t)v57 % 0xAA));
        unint64_t v19 = *v18;
        unint64_t v20 = v18[1];
        unint64_t v21 = v18[2];
        --v13;
        *(void *)&long long v57 = v57 + 1;
        *((void *)&v57 + 1) = v13;
        if ((unint64_t)v57 >= 0x154)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = v16 + 8;
          *(void *)&long long v57 = v17 - 169;
        }
        if (v19 + v52 < v20) {
          break;
        }
        a4 = v15;
        if (!v13) {
          goto LABEL_48;
        }
      }
      unint64_t v22 = v20 + v19;
      unint64_t v23 = (v20 + v19) >> 1;
      unint64_t v24 = &v10[40 * v21];
      *(_DWORD *)unint64_t v24 = *(_DWORD *)(*v49 + 4 * v23);
      *((_WORD *)v24 + 2) = a2;
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 3);
      *((_DWORD *)v24 + 2) = v25;
      *((_DWORD *)v24 + 3) = v25 + 1;
      *((_DWORD *)v24 + 4) = 0;
      *((void *)v24 + 3) = 0;
      *((_DWORD *)v24 + 8) = 1;
      v53.n128_u64[0] = (v23 + 1);
      v53.n128_u64[1] = v20;
      unint64_t v54 = v25;
      sub_24849B83C((uint64_t)__p, &v53);
      if (v14 >= v11)
      {
        long long v27 = (char *)*a1;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-*a1] >> 3);
        unint64_t v29 = v28 + 1;
        if (v28 + 1 > 0x666666666666666) {
          sub_2483E92E8();
        }
        if (0x999999999999999ALL * ((v11 - v27) >> 3) > v29) {
          unint64_t v29 = 0x999999999999999ALL * ((v11 - v27) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v27) >> 3) >= 0x333333333333333) {
          unint64_t v30 = 0x666666666666666;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30) {
          unint64_t v30 = (unint64_t)sub_248403444(v30);
        }
        else {
          uint64_t v31 = 0;
        }
        unint64_t v32 = v30 + 40 * v28;
        *(_DWORD *)unint64_t v32 = 0;
        *(_WORD *)(v32 + 4) = -1;
        *(void *)(v32 + 8) = 0;
        a4 = v15;
        *(_DWORD *)(v32 + 16) = v15;
        *(void *)(v32 + 24) = 0;
        *(_DWORD *)(v32 + 32) = 1;
        unint64_t v33 = v32;
        if (v14 != v27)
        {
          do
          {
            long long v34 = *(_OWORD *)(v14 - 40);
            long long v35 = *(_OWORD *)(v14 - 24);
            *(_DWORD *)(v33 - 8) = *((_DWORD *)v14 - 2);
            *(_OWORD *)(v33 - 24) = v35;
            *(_OWORD *)(v33 - 40) = v34;
            v33 -= 40;
            v14 -= 40;
          }
          while (v14 != v27);
          uint64_t v14 = v27;
        }
        unint64_t v26 = (char *)(v32 + 40);
        *a1 = v33;
        a1[1] = v32 + 40;
        a1[2] = v30 + 40 * v31;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v14 = 0;
        *((_WORD *)v14 + 2) = -1;
        *((void *)v14 + 1) = 0;
        a4 = v15;
        *((_DWORD *)v14 + 4) = v15;
        *((void *)v14 + 3) = 0;
        unint64_t v26 = v14 + 40;
        *((_DWORD *)v14 + 8) = 1;
      }
      a1[1] = (unint64_t)v26;
      v53.n128_u64[0] = v19;
      v53.n128_u64[1] = (v22 >> 1);
      uint64_t v10 = (char *)*a1;
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v26[-*a1] >> 3);
      unint64_t v54 = v36;
      sub_24849B83C((uint64_t)__p, &v53);
      uint64_t v11 = (char *)a1[2];
      if (v26 >= v11) {
        break;
      }
      *(_DWORD *)unint64_t v26 = 0;
      *((_WORD *)v26 + 2) = -1;
      *((void *)v26 + 1) = 0;
      *((_DWORD *)v26 + 4) = a4;
      *((void *)v26 + 3) = 0;
      uint64_t v14 = v26 + 40;
      *((_DWORD *)v26 + 8) = 1;
LABEL_47:
      a1[1] = (unint64_t)v14;
      uint64_t v13 = *((void *)&v57 + 1);
      if (!*((void *)&v57 + 1)) {
        goto LABEL_48;
      }
    }
    unint64_t v37 = v36 + 1;
    if (v36 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    if (0x999999999999999ALL * ((v11 - v10) >> 3) > v37) {
      unint64_t v37 = 0x999999999999999ALL * ((v11 - v10) >> 3);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3) >= 0x333333333333333) {
      unint64_t v38 = 0x666666666666666;
    }
    else {
      unint64_t v38 = v37;
    }
    if (v38) {
      unint64_t v38 = (unint64_t)sub_248403444(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    unint64_t v40 = (char *)(v38 + 40 * v36);
    *(_DWORD *)unint64_t v40 = 0;
    *((_WORD *)v40 + 2) = -1;
    *((void *)v40 + 1) = 0;
    uint64_t v11 = (char *)(v38 + 40 * v39);
    *((_DWORD *)v40 + 4) = a4;
    *((void *)v40 + 3) = 0;
    *((_DWORD *)v40 + 8) = 1;
    uint64_t v14 = v40 + 40;
    if (v26 == v10)
    {
      *a1 = (unint64_t)v40;
      a1[1] = (unint64_t)v14;
      uint64_t v10 = v26;
      a1[2] = (unint64_t)v11;
    }
    else
    {
      do
      {
        long long v41 = *(_OWORD *)(v26 - 40);
        long long v42 = *(_OWORD *)(v26 - 24);
        *((_DWORD *)v40 - 2) = *((_DWORD *)v26 - 2);
        *(_OWORD *)(v40 - 24) = v42;
        *(_OWORD *)(v40 - 40) = v41;
        v40 -= 40;
        v26 -= 40;
      }
      while (v26 != v10);
      *a1 = (unint64_t)v40;
      a1[1] = (unint64_t)v14;
      a1[2] = (unint64_t)v11;
      if (!v10) {
        goto LABEL_46;
      }
    }
    operator delete(v10);
LABEL_46:
    uint64_t v10 = v40;
    goto LABEL_47;
  }
LABEL_48:
  unint64_t v43 = (void **)__p[1];
  unint64_t v44 = (void **)v56;
  unint64_t v45 = v56 - (unint64_t)__p[1];
  if ((unint64_t)v56 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      unint64_t v46 = *v43++;
      operator delete(v46);
      v45 -= 8;
    }
    while (v45 > 0x10);
  }
  while (v43 != v44)
  {
    uint64_t v47 = *v43++;
    operator delete(v47);
  }
  unint64_t v48 = __p[0];
  if (__p[0])
  {
    operator delete(v48);
  }
}

void sub_24849B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_24849BDA0((uint64_t)va);
  uint64_t v10 = *(void **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

__n128 sub_24849B83C(uint64_t a1, __n128 *a2)
{
  long long v4 = *(char **)(a1 + 16);
  long long v5 = *(char **)(a1 + 8);
  uint64_t v6 = (v4 - v5) >> 3;
  uint64_t v7 = v4 - v5;
  if (v4 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 170 * v6 - 1;
  }
  unint64_t v9 = *(void *)(a1 + 32);
  if (v8 == *(void *)(a1 + 40) + v9)
  {
    BOOL v10 = v9 >= 0xAA;
    unint64_t v11 = v9 - 170;
    if (v10)
    {
      *(void *)(a1 + 32) = v11;
      uint64_t v14 = *(void *)v5;
      uint64_t v12 = v5 + 8;
      uint64_t v13 = v14;
      *(void *)(a1 + 8) = v12;
      if (v4 == *(char **)(a1 + 24))
      {
        uint64_t v15 = *(char **)a1;
        if ((unint64_t)v12 <= *(void *)a1)
        {
          if (v4 == v15) {
            unint64_t v36 = 1;
          }
          else {
            unint64_t v36 = (v4 - v15) >> 2;
          }
          if (v36 >> 61) {
            goto LABEL_98;
          }
          unint64_t v37 = (char *)operator new(8 * v36);
          unint64_t v38 = &v37[8 * (v36 >> 2)];
          uint64_t v40 = v4 - v12;
          BOOL v39 = v4 == v12;
          long long v4 = v38;
          if (!v39)
          {
            long long v4 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v41 = 8 * (v40 >> 3);
            long long v42 = &v37[8 * (v36 >> 2)];
            do
            {
              uint64_t v43 = *(void *)v12;
              v12 += 8;
              *(void *)long long v42 = v43;
              v42 += 8;
              v41 -= 8;
            }
            while (v41);
          }
          *(void *)a1 = v37;
          *(void *)(a1 + 8) = v38;
          *(void *)(a1 + 16) = v4;
          *(void *)(a1 + 24) = &v37[8 * v36];
          if (v15)
          {
            operator delete(v15);
            long long v4 = *(char **)(a1 + 16);
          }
        }
        else
        {
          uint64_t v16 = (uint64_t)&v12[-*(void *)a1] >> 3;
          if (v16 >= -1) {
            uint64_t v17 = v16 + 1;
          }
          else {
            uint64_t v17 = v16 + 2;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v12[-8 * v19];
          int64_t v21 = v4 - v12;
          if (v4 != v12)
          {
            memmove(&v12[-8 * v19], v12, v4 - v12);
            long long v4 = *(char **)(a1 + 8);
          }
          unint64_t v22 = &v4[8 * v18];
          long long v4 = &v20[v21];
          *(void *)(a1 + 8) = v22;
          *(void *)(a1 + 16) = &v20[v21];
        }
      }
      *(void *)long long v4 = v13;
      goto LABEL_37;
    }
    unint64_t v23 = *(char **)(a1 + 24);
    unint64_t v24 = *(char **)a1;
    uint64_t v25 = (uint64_t)&v23[-*(void *)a1];
    if (v6 < (unint64_t)(v25 >> 3))
    {
      unint64_t v26 = operator new(0xFF0uLL);
      long long v27 = v26;
      if (v23 != v4)
      {
        *(void *)long long v4 = v26;
LABEL_37:
        *(void *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v5 == v24)
      {
        if (v4 == v5) {
          unint64_t v64 = 1;
        }
        else {
          unint64_t v64 = (v23 - v5) >> 2;
        }
        if (v64 >> 61) {
          goto LABEL_98;
        }
        unint64_t v65 = (char *)operator new(8 * v64);
        uint64_t v47 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
        unint64_t v66 = v47;
        if (v4 != v5)
        {
          uint64_t v67 = 8 * v6;
          unint64_t v68 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v69 = v5;
          unint64_t v66 = &v47[8 * v6];
          do
          {
            uint64_t v70 = *(void *)v69;
            v69 += 8;
            *(void *)unint64_t v68 = v70;
            v68 += 8;
            v67 -= 8;
          }
          while (v67);
        }
        *(void *)a1 = v65;
        *(void *)(a1 + 8) = v47;
        *(void *)(a1 + 16) = v66;
        *(void *)(a1 + 24) = &v65[8 * v64];
        if (v5)
        {
          operator delete(v5);
          uint64_t v47 = *(char **)(a1 + 8);
        }
      }
      else
      {
        uint64_t v47 = v5;
      }
      *((void *)v47 - 1) = v27;
      long long v71 = *(char **)(a1 + 8);
      long long v72 = *(char **)(a1 + 16);
      *(void *)(a1 + 8) = v71 - 8;
      uint64_t v73 = *((void *)v71 - 1);
      *(void *)(a1 + 8) = v71;
      if (v72 != *(char **)(a1 + 24))
      {
LABEL_96:
        *(void *)long long v72 = v73;
        goto LABEL_37;
      }
      uint64_t v74 = *(char **)a1;
      if ((unint64_t)v71 > *(void *)a1)
      {
        uint64_t v75 = (uint64_t)&v71[-*(void *)a1] >> 3;
        if (v75 >= -1) {
          uint64_t v76 = v75 + 1;
        }
        else {
          uint64_t v76 = v75 + 2;
        }
        uint64_t v77 = -(v76 >> 1);
        uint64_t v78 = v76 >> 1;
        unint64_t v79 = &v71[-8 * v78];
        size_t v80 = v72 - v71;
        if (v80)
        {
          memmove(&v71[-8 * v78], v71, v80);
          long long v71 = *(char **)(a1 + 8);
        }
        long long v72 = &v79[v80];
        *(void *)(a1 + 8) = &v71[8 * v77];
        *(void *)(a1 + 16) = v72;
        goto LABEL_96;
      }
      if (v72 == v74) {
        unint64_t v81 = 1;
      }
      else {
        unint64_t v81 = (v72 - v74) >> 2;
      }
      if (!(v81 >> 61))
      {
        long long v82 = (char *)operator new(8 * v81);
        long long v83 = &v82[8 * (v81 >> 2)];
        uint64_t v84 = v72 - v71;
        BOOL v39 = v72 == v71;
        long long v72 = v83;
        if (!v39)
        {
          long long v72 = &v83[v84 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v85 = 8 * (v84 >> 3);
          int v86 = &v82[8 * (v81 >> 2)];
          do
          {
            uint64_t v87 = *(void *)v71;
            v71 += 8;
            *(void *)int v86 = v87;
            v86 += 8;
            v85 -= 8;
          }
          while (v85);
        }
        *(void *)a1 = v82;
        *(void *)(a1 + 8) = v83;
        *(void *)(a1 + 16) = v72;
        *(void *)(a1 + 24) = &v82[8 * v81];
        if (v74)
        {
          operator delete(v74);
          long long v72 = *(char **)(a1 + 16);
        }
        goto LABEL_96;
      }
LABEL_98:
      sub_2483E9338();
    }
    uint64_t v28 = v25 >> 2;
    if (v23 == v24) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29 >> 61) {
      goto LABEL_98;
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = operator new(0xFF0uLL);
    unint64_t v32 = &v30[8 * v6];
    unint64_t v33 = &v30[8 * v29];
    if (v6 == v29)
    {
      long long v34 = v31;
      if (v7 < 1)
      {
        if (v4 == v5) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = v7 >> 2;
        }
        if (v48 >> 61) {
          sub_2483E9338();
        }
        unint64_t v32 = (char *)operator new(8 * v48);
        unint64_t v33 = &v32[8 * v48];
        operator delete(v30);
        long long v5 = *(char **)(a1 + 8);
        long long v4 = *(char **)(a1 + 16);
        unint64_t v30 = v32;
      }
      else
      {
        unint64_t v35 = v6 + 2;
        if (v6 >= -1) {
          unint64_t v35 = v6 + 1;
        }
        v32 -= 8 * (v35 >> 1);
      }
      uint64_t v31 = v34;
    }
    *(void *)unint64_t v32 = v31;
    long long v49 = v32 + 8;
    if (v4 == v5)
    {
      unint64_t v62 = v32;
      unint64_t v51 = v32 + 8;
    }
    else
    {
      do
      {
        if (v32 == v30)
        {
          if (v49 >= v33)
          {
            if (v33 == v32) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v33 - v32) >> 2;
            }
            if (v54 >> 61) {
              sub_2483E9338();
            }
            unint64_t v55 = (char *)operator new(8 * v54);
            unint64_t v30 = v55;
            long long v50 = &v55[(2 * v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            unint64_t v51 = v50;
            uint64_t v56 = v49 - v32;
            if (v49 != v32)
            {
              unint64_t v51 = &v50[v56 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v57 = 8 * (v56 >> 3);
              uint64_t v58 = &v55[(2 * v54 + 6) & 0xFFFFFFFFFFFFFFF8];
              unint64_t v59 = v32;
              do
              {
                uint64_t v60 = *(void *)v59;
                v59 += 8;
                *(void *)uint64_t v58 = v60;
                v58 += 8;
                v57 -= 8;
              }
              while (v57);
            }
            unint64_t v33 = &v55[8 * v54];
            operator delete(v32);
          }
          else
          {
            uint64_t v52 = (v33 - v49) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            unint64_t v51 = &v49[8 * (v53 >> 1)];
            long long v50 = &v32[8 * (v53 >> 1)];
            if (v49 == v32)
            {
              unint64_t v30 = v49;
            }
            else
            {
              memmove(&v32[8 * (v53 >> 1)], v32, v49 - v32);
              unint64_t v30 = v32;
            }
          }
        }
        else
        {
          long long v50 = v32;
          unint64_t v51 = v49;
        }
        uint64_t v61 = *((void *)v4 - 1);
        v4 -= 8;
        *((void *)v50 - 1) = v61;
        unint64_t v62 = v50 - 8;
        long long v49 = v51;
        unint64_t v32 = v62;
      }
      while (v4 != *(char **)(a1 + 8));
    }
    uint64_t v63 = *(char **)a1;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = v62;
    *(void *)(a1 + 16) = v51;
    *(void *)(a1 + 24) = v33;
    if (v63) {
      operator delete(v63);
    }
  }
LABEL_38:
  unint64_t v44 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
  unint64_t v45 = (__n128 *)(*(void *)(*(void *)(a1 + 8) + 8 * (v44 / 0xAA)) + 24 * (v44 % 0xAA));
  __n128 result = *a2;
  v45[1].n128_u64[0] = a2[1].n128_u64[0];
  *unint64_t v45 = result;
  ++*(void *)(a1 + 40);
  return result;
}

void sub_24849BD6C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24849BDA0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24849BE68(char **a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v346 = *MEMORY[0x263EF8340];
  if (*a2 != a2[1] && *(void *)*a2 != *(void *)(*a2 + 8))
  {
    uint64_t v13 = a2 + 22;
    uint64_t v12 = (void *)a2[22];
    unint64_t v14 = a2[21];
    if (v12)
    {
      a2[23] = v12;
      operator delete(v12);
    }
    void *v13 = 0;
    a2[23] = 0;
    a2[24] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    float v15 = *(float *)(a4 + 48);
    float v263 = *(float *)(a4 + 72);
    uint64_t v16 = sub_248403444(1uLL);
    *(_DWORD *)uint64_t v16 = 0;
    void v16[2] = -1;
    *((void *)v16 + 1) = 0;
    *((_DWORD *)v16 + 4) = 0;
    *((void *)v16 + 3) = 0;
    *((_DWORD *)v16 + 8) = 1;
    *a1 = (char *)v16;
    a1[1] = (char *)(v16 + 20);
    a1[2] = (char *)&v16[20 * v17];
    uint64_t v18 = (_DWORD *)a2[15];
    *((_DWORD *)v16 + 4) = *v18;
    uint64_t v20 = a2[3];
    uint64_t v19 = a2[4];
    int64_t v21 = (int8x16_t *)operator new(0x30uLL);
    unint64_t v22 = v21;
    v23.i64[0] = a6;
    v23.i64[1] = a7;
    v24.i64[0] = 0xFFFFFFFFLL;
    v24.i64[1] = 0xFFFFFFFFLL;
    int8x16_t v25 = (int8x16_t)vcgtq_u64(v23, v24);
    v26.i64[0] = 0xFFFFFFFF00000000;
    v26.i64[1] = 0xFFFFFFFF00000000;
    float v27 = (float)((float)v14 / (float)a3) * 0.9 + 0.1;
    float v28 = v15 * v27;
    v29.i64[0] = 0xFFFFFFFFLL;
    v29.i64[1] = 0xFFFFFFFFLL;
    unint64_t v30 = v21 + 3;
    v21->i64[0] = 0;
    v21->i64[1] = 0;
    v21[1].i64[0] = (v19 - v20) >> 1;
    v21[1].i64[1] = 0;
    void v21[2] = vorrq_s8(vandq_s8(vornq_s8(vandq_s8((int8x16_t)v23, v25), v25), v26), vandq_s8((int8x16_t)v23, v29));
    unsigned int v284 = (_DWORD *)a2[16];
    unint64_t v31 = v284 - v18;
    uint64_t v264 = a2[12];
    uint64_t v265 = a2[13];
    unint64_t v32 = (v265 - v264) >> 2;
    float v277 = v28;
    float v33 = 800.0 / (float)(v28 + 100.0);
    if (v31 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v284 - v18;
    }
    uint64_t v291 = v34;
    int32x2_t v35 = vdup_n_s32(0x7F7FFFFFu);
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    unint64_t v282 = v32;
    float32x2_t v295 = (float32x2_t)vpaddq_f32((float32x4_t)0, (float32x4_t)0).u64[0];
    unint64_t v36 = v21;
    uint64_t v272 = v21 + 3;
    unint64_t v294 = (uint64_t **)a2;
    unint64_t v283 = v18;
    uint64_t v269 = v284 - v18;
    while (1)
    {
      unint64_t v37 = v30[-3].u64[1];
      uint64_t v279 = v30[-3].i64[0];
      unint64_t v292 = v30[-2].u64[0];
      unint64_t v287 = v292 - v37;
      if (v292 == v37)
      {
        v30 -= 3;
        goto LABEL_330;
      }
      unint64_t v38 = v30 - 1;
      uint64_t v281 = v30[-2].i64[1];
      unint64_t v273 = v30 - 3;
      unint64_t v275 = (void *)v30[-1].i64[1];
      unint64_t v276 = (void *)v30[-1].i64[0];
      uint64_t v340 = 0;
      int v341 = 0;
      uint64_t v342 = 0;
      v343[0] = v35;
      v343[1] = 0;
      uint64_t v336 = 0;
      int v337 = 0;
      uint64_t v338 = 0;
      v339[0] = v35;
      v339[1] = 0;
      uint64_t v332 = 0;
      int v333 = 0;
      uint64_t v334 = 0;
      v335[0] = v35;
      v335[1] = 0;
      uint64_t v328 = 0;
      int v329 = 0;
      uint64_t v330 = 0;
      uint64_t v286 = 2 * v37;
      v331[0] = v35;
      v331[1] = 0;
      long long v270 = v36;
      unint64_t v39 = 0;
      if (v284 != v18)
      {
        uint64_t v40 = 0;
        do
        {
          if (v292 > v37)
          {
            uint64_t v41 = (unsigned __int8 *)((*v294)[3 * v40] + v286);
            unint64_t v42 = v292 - v37;
            do
            {
              unsigned int v44 = *v41;
              v41 += 2;
              uint64_t v43 = v44;
              if (v39 <= (unint64_t)v44 + 1) {
                unint64_t v39 = v43 + 1;
              }
              --v42;
            }
            while (v42);
          }
          ++v40;
        }
        while (v40 != v291);
      }
      unint64_t v268 = v30;
      unint64_t v274 = v22;
      unint64_t v45 = v39 + 3;
      unint64_t v46 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      sub_2483F23D8(v327, v46 * v31);
      sub_2483E9AC0(v326, v31);
      if (v284 != v18)
      {
        uint64_t v47 = 0;
        unint64_t v48 = *v294;
        long long v49 = v327[0];
        long long v50 = v326[0];
        uint64_t v51 = (uint64_t)v294[3] + 2 * v37;
        do
        {
          if (v292 > v37)
          {
            unint64_t v52 = v292 - v37;
            unint64_t v53 = (unsigned __int8 *)(v48[3 * v47] + v286 + 1);
            unint64_t v54 = (unsigned __int16 *)v51;
            do
            {
              int v56 = *v54++;
              int v55 = v56;
              v49[v47 * v46 + *(v53 - 1)] += v56;
              int v57 = *v53;
              v53 += 2;
              v50[v47] += v57 * v55;
              --v52;
            }
            while (v52);
          }
          ++v47;
        }
        while (v47 != v291);
      }
      uint64_t v58 = (uint64_t)&(*a1)[40 * v279];
      int v59 = *(_DWORD *)(v58 + 16);
      unint64_t v296 = (int *)(v58 + 16);
      uint64_t v60 = (char *)v294[15];
      uint64_t v61 = (char *)v294[16];
      uint64_t v267 = v38;
      unint64_t v271 = *a1;
      unint64_t v62 = v60;
      if (v60 != v61)
      {
        do
        {
          if (*(_DWORD *)v62 == v59) {
            goto LABEL_31;
          }
          v62 += 4;
        }
        while (v62 != v61);
        unint64_t v62 = (char *)v294[16];
      }
LABEL_31:
      uint64_t v63 = (char *)(v62 - v60);
      float v64 = sub_2484A1008((int32x4_t *)((char *)v327[0] + 4 * ((unint64_t)(v62 - v60) >> 2) * v46), v46);
      float v65 = v64 + (float)*(unsigned int *)((char *)v326[0] + (unint64_t)v63);
      uint64_t v321 = 0;
      unsigned int v322 = 0;
      unint64_t v323 = 0;
      int32x2_t v324 = v35;
      uint64_t v325 = 0;
      uint64_t v66 = *a5;
      uint64_t v67 = a5[1];
      uint64_t v68 = v67 - *a5;
      unint64_t v290 = v37;
      if (v67 == *a5) {
        goto LABEL_60;
      }
      uint64_t v69 = 0;
      unint64_t v70 = v68 / 20;
      if (v70 <= 1) {
        unint64_t v70 = 1;
      }
      do
      {
        LODWORD(v71) = 0;
        int v72 = 0;
        uint64_t v73 = 0;
        char v74 = 0;
        v319[0] = v276;
        v319[1] = v275;
        int8x16_t v344 = *(int8x16_t *)(v66 + 20 * v69);
        char v75 = 1;
        while (1)
        {
          int v76 = v71;
          uint64_t v71 = v73;
LABEL_36:
          char v77 = v75;
          uint64_t v78 = (unsigned int *)&v344 + 2 * v71;
          unsigned int v79 = *v78;
          size_t v80 = &v319[v71];
          unsigned int v81 = *((_DWORD *)v80 + 1);
          if (*v78 >= v81) {
            break;
          }
          unsigned int v82 = v78[1];
          unsigned int v83 = *(_DWORD *)v80;
          if (v82 <= v83) {
            break;
          }
          if (v79 > v83) {
            goto LABEL_43;
          }
          if (v82 >= v81)
          {
            char v75 = 0;
            uint64_t v71 = 1;
            if ((v77 & 1) == 0)
            {
              LODWORD(v71) = v76;
              if (v74) {
                goto LABEL_48;
              }
              *(_DWORD *)&v271[40 * v279 + 32] = *(_DWORD *)(v66 + 20 * v69 + 16);
              goto LABEL_60;
            }
            goto LABEL_36;
          }
          unsigned int v79 = v82;
LABEL_43:
          char v75 = 0;
          int v72 = v79 - 1;
          uint64_t v73 = 1;
          char v74 = 1;
          if ((v77 & 1) == 0)
          {
LABEL_48:
            if (v72 <= -511) {
              int v84 = -511;
            }
            else {
              int v84 = v72;
            }
            if (v84 >= 511) {
              int v84 = 511;
            }
            unsigned int v85 = *(unsigned __int8 *)(v294[18][3 * v71] + (v84 + 511));
            unsigned int v322 = v85;
            uint64_t v321 = v71;
            float v86 = (float)(v65 * 0.5) - v277;
            *(float *)&v324.i32[1] = v86;
            *(float *)v324.i32 = v86;
            HIDWORD(v325) = v59;
            LODWORD(v325) = v59;
            unint64_t v323 = v37;
            unint64_t v87 = v292 - v37;
            if (v292 <= v37)
            {
              long long v93 = (float *)&v321;
              float v94 = (float)(v65 * 0.5) - v277;
              uint64_t v91 = a1;
              unint64_t v22 = v274;
              unint64_t v31 = v269;
            }
            else
            {
              unint64_t v88 = (unsigned __int8 *)(v294[6][3 * v71] + v37);
              unint64_t v89 = v37;
              unint64_t v90 = v37;
              uint64_t v91 = a1;
              unint64_t v22 = v274;
              unint64_t v31 = v269;
              do
              {
                unsigned int v92 = *v88++;
                if (v92 <= v85) {
                  unint64_t v89 = ++v90;
                }
                --v87;
              }
              while (v87);
              unint64_t v323 = v89;
              long long v93 = (float *)&v321;
              float v94 = (float)(v65 * 0.5) - v277;
            }
            goto LABEL_227;
          }
        }
        ++v69;
      }
      while (v69 != v70);
LABEL_60:
      v319[1] = 0;
      v319[0] = 0;
      uint64_t v320 = 0;
      int8x16_t v344 = 0uLL;
      uint64_t v345 = 0;
      unint64_t v316 = 0;
      uint64_t v317 = 0;
      uint64_t v318 = 0;
      uint64_t v313 = 0;
      unint64_t v314 = 0;
      uint64_t v315 = 0;
      BOOL v310 = 0;
      unint64_t v311 = 0;
      uint64_t v312 = 0;
      sub_2483F23D8(__dst, v46);
      sub_2483F23D8(__p, v46);
      unint64_t v95 = 0;
      float v96 = INFINITY;
      if (v265 != v264 && v65 > v277)
      {
        unint64_t v95 = 0;
        unint64_t v97 = 0;
        __uint64_t n = 4 * v46;
        uint64_t v280 = (4 * v45) & 0x7FFFFFFFFFFFFFF0;
        unint64_t v306 = (4 * v45) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          unint64_t v314 = v313;
          unint64_t v311 = v310;
          unint64_t v98 = ((v294[9][3 * v97 + 1] - v294[9][3 * v97]) >> 2) + 1;
          BOOL v99 = v98 > (v317 - (uint64_t)v95) >> 3;
          unint64_t v100 = v98;
          if (v99)
          {
            sub_2483EB1C4((char **)&v344, v98 * v46);
            sub_2483FEEE4(&v316, v100);
            unint64_t v98 = v100;
          }
          v319[1] = v319[0];
          sub_2483EB1C4((char **)v319, v98);
          unint64_t v101 = v100;
          if (v292 <= v37)
          {
            unint64_t v102 = 0;
          }
          else
          {
            unint64_t v102 = 0;
            unint64_t v103 = v319[0];
            long long v104 = (unsigned __int8 *)(v294[6][3 * v97] + v37);
            unint64_t v105 = v287;
            do
            {
              unsigned int v107 = *v104++;
              unint64_t v106 = v107;
              ++v103[v107];
              if (v102 <= v107) {
                unint64_t v102 = v106;
              }
              if (v101 >= v106) {
                unint64_t v101 = v106;
              }
              --v105;
            }
            while (v105);
          }
          unint64_t v298 = v101;
          unint64_t v299 = v102;
          unint64_t v108 = v102 - v101;
          sub_2484A1188((char **)&v313, v102 - v101);
          sub_2484A1188((char **)&v310, v108);
          unint64_t v293 = v97;
          unint64_t v109 = v298;
          unint64_t v110 = v299;
          if (v284 != v18)
          {
            uint64_t v111 = 0;
            unint64_t v300 = v310;
            unint64_t v112 = v313;
            uint64_t v113 = v344.i64[0];
            unint64_t v114 = v316;
            int v304 = v319[0];
            unint64_t v285 = v344.i64[0] + v306 * v298;
            uint64_t v289 = v344.i64[0];
            do
            {
              if (v292 > v290)
              {
                long long v115 = (unsigned __int8 *)((*v294)[3 * v111] + v286 + 1);
                long long v116 = (unsigned __int16 *)((char *)v294[3] + v286);
                unint64_t v117 = (unsigned __int8 *)(v294[6][3 * v293] + v290);
                unint64_t v118 = v287;
                do
                {
                  unsigned int v120 = *v117++;
                  uint64_t v119 = v120;
                  unsigned int v122 = *v116++;
                  unsigned int v121 = v122;
                  unint64_t v123 = *(v115 - 1) + v46 * v119;
                  *(_DWORD *)(v113 + 4 * v123) += v122;
                  unsigned int v124 = *v115;
                  v115 += 2;
                  *(void *)&v114[8 * v119] += v124 * (unint64_t)v121;
                  --v118;
                }
                while (v118);
              }
              memcpy(__dst[0], (char *)v327[0] + 4 * v111 * v46, __n);
              bzero(__p[0], __n);
              unint64_t v109 = v298;
              unint64_t v110 = v299;
              if (v299 > v298)
              {
                unint64_t v125 = 0;
                long long v126 = (int32x4_t *)__dst[0];
                long long v127 = (int32x4_t *)__p[0];
                unint64_t v297 = (unsigned int *)v326[0];
                unint64_t v128 = v285;
                unint64_t v129 = v298;
                unint64_t v302 = v294[15];
                do
                {
                  if (v304[v129])
                  {
                    uint64_t v130 = *(void *)&v114[8 * v129];
                    *(void *)&v114[8 * v129] = 0;
                    if (v46)
                    {
                      for (uint64_t i = 0; i != v46; ++i)
                      {
                        v126->i32[i] -= *(_DWORD *)(v128 + 4 * i);
                        v127->i32[i] += *(_DWORD *)(v128 + 4 * i);
                        *(_DWORD *)(v128 + 4 * i) = 0;
                      }
                      float v132 = sub_2484A1008(v126, v46);
                    }
                    else
                    {
                      float v132 = vaddv_f32(v295);
                    }
                    v125 += v130;
                    float v133 = (float)(v132 + (float)v297[v111]) - (float)v125;
                    float v134 = sub_2484A1008(v127, v46);
                    int v135 = *((_DWORD *)v302 + v111);
                    if (*v296 == 6 || v135 == *v296) {
                      float v137 = 0.0;
                    }
                    else {
                      float v137 = v33;
                    }
                    if (v135 == 6)
                    {
                      float v138 = v137 + 0.00000001;
                      float v137 = v138;
                    }
                    if (!v135)
                    {
                      float v139 = v137 + -0.00000001;
                      float v137 = v139;
                    }
                    unint64_t v109 = v298;
                    unint64_t v140 = v129 - v298;
                    uint64_t v141 = (float *)&v300[3 * (v129 - v298)];
                    if ((float)(v133 + v137) < (float)(*v141 + v141[1]))
                    {
                      *uint64_t v141 = v133;
                      v141[1] = v137;
                      v300[3 * v140 + 2] = v135;
                    }
                    float v142 = v134 + (float)v125;
                    unint64_t v143 = (float *)&v112[3 * v140];
                    unint64_t v110 = v299;
                    if ((float)(v142 + v137) < (float)(*v143 + v143[1]))
                    {
                      float *v143 = v142;
                      v143[1] = v137;
                      v112[3 * v140 + 2] = *((_DWORD *)v302 + v111);
                    }
                  }
                  ++v129;
                  v128 += v306;
                }
                while (v129 != v110);
              }
              ++v111;
              uint64_t v113 = v289;
            }
            while (v111 != v291);
          }
          if (v110 > v109)
          {
            unint64_t v144 = (int *)v319[0];
            unint64_t v145 = v294[12];
            uint64_t v146 = (float *)((char *)v310 + 8);
            unint64_t v147 = (float *)((char *)v313 + 8);
            unint64_t v148 = v290;
            do
            {
              uint64_t v149 = v144[v109];
              if (v149)
              {
                float v150 = *(v146 - 2);
                float v151 = *(v147 - 2);
                unint64_t v152 = v293;
                if (*((_DWORD *)v145 + v293) == 15 && ((1 << v293) & v281) == 0)
                {
                  BOOL v155 = v150 == 0.0;
                  if (v151 == 0.0) {
                    BOOL v155 = 1;
                  }
                  if (v155) {
                    uint64_t v168 = (unint64_t *)&v340;
                  }
                  else {
                    uint64_t v168 = (unint64_t *)&v336;
                  }
                  if (v155) {
                    uint64_t v163 = (float *)v343;
                  }
                  else {
                    uint64_t v163 = (float *)v339;
                  }
                  if (v155) {
                    unint64_t v158 = (float *)v343 + 1;
                  }
                  else {
                    unint64_t v158 = (float *)v339 + 1;
                  }
                  if (v293 >= 2) {
                    unint64_t v166 = (unint64_t *)&v332;
                  }
                  else {
                    unint64_t v166 = v168;
                  }
                  if (v293 >= 2) {
                    uint64_t v163 = (float *)v335;
                  }
                  BOOL v165 = 1;
                  unint64_t v167 = (float *)v335 + 1;
                }
                else if (*(_DWORD *)v147 == 6 || *(_DWORD *)v146 == 6)
                {
                  int v154 = *v296;
                  BOOL v155 = v150 == 0.0;
                  if (v151 == 0.0) {
                    BOOL v155 = 1;
                  }
                  if (v155) {
                    unint64_t v156 = (unint64_t *)&v340;
                  }
                  else {
                    unint64_t v156 = (unint64_t *)&v336;
                  }
                  if (v155) {
                    uint64_t v157 = (float *)v343;
                  }
                  else {
                    uint64_t v157 = (float *)v339;
                  }
                  if (v155) {
                    unint64_t v158 = (float *)v343 + 1;
                  }
                  else {
                    unint64_t v158 = (float *)v339 + 1;
                  }
                  unint64_t v152 = v293;
                  if (v293 >= 2) {
                    long long v159 = (unint64_t *)&v328;
                  }
                  else {
                    long long v159 = v156;
                  }
                  unint64_t v160 = v109;
                  if (v293 >= 2) {
                    unint64_t v161 = (float *)v331;
                  }
                  else {
                    unint64_t v161 = v157;
                  }
                  if (v293 >= 2) {
                    uint64_t v162 = (unint64_t *)&v332;
                  }
                  else {
                    uint64_t v162 = v156;
                  }
                  if (v293 >= 2) {
                    uint64_t v163 = (float *)v335;
                  }
                  else {
                    uint64_t v163 = v157;
                  }
                  BOOL v164 = v154 == 6;
                  if (v154 == 6) {
                    uint64_t v163 = v161;
                  }
                  unint64_t v109 = v160;
                  BOOL v165 = v154 != 6;
                  if (v164) {
                    unint64_t v166 = v159;
                  }
                  else {
                    unint64_t v166 = v162;
                  }
                  unint64_t v110 = v299;
                  unint64_t v167 = (float *)v331 + 1;
                  if (!v164) {
                    unint64_t v167 = (float *)v335 + 1;
                  }
                }
                else
                {
                  BOOL v165 = 0;
                  BOOL v155 = v150 == 0.0;
                  if (v151 == 0.0) {
                    BOOL v155 = 1;
                  }
                  if (v155) {
                    uint64_t v174 = (unint64_t *)&v340;
                  }
                  else {
                    uint64_t v174 = (unint64_t *)&v336;
                  }
                  if (v155) {
                    unint64_t v175 = (float *)v343;
                  }
                  else {
                    unint64_t v175 = (float *)v339;
                  }
                  if (v155) {
                    unint64_t v158 = (float *)v343 + 1;
                  }
                  else {
                    unint64_t v158 = (float *)v339 + 1;
                  }
                  unint64_t v152 = v293;
                  if (v293 >= 2) {
                    unint64_t v166 = (unint64_t *)&v328;
                  }
                  else {
                    unint64_t v166 = v174;
                  }
                  if (v293 >= 2) {
                    uint64_t v163 = (float *)v331;
                  }
                  else {
                    uint64_t v163 = v175;
                  }
                  unint64_t v167 = (float *)v331 + 1;
                }
                v148 += v149;
                if (v152 >= 2) {
                  unint64_t v169 = v167;
                }
                else {
                  unint64_t v169 = v158;
                }
                if ((float)(v150 + v151) < (float)(*v163 + *v169))
                {
                  *unint64_t v166 = v152;
                  if (v155) {
                    long long v170 = &v340;
                  }
                  else {
                    long long v170 = &v336;
                  }
                  if (v165) {
                    long long v171 = &v332;
                  }
                  else {
                    long long v171 = &v328;
                  }
                  if (v152 >= 2) {
                    long long v170 = v171;
                  }
                  *((_DWORD *)v170 + 2) = v109;
                  v170[2] = v148;
                  *uint64_t v163 = v151;
                  float v172 = *v147;
                  *unint64_t v169 = v150;
                  float v173 = *v146;
                  *((float *)v170 + 8) = v172;
                  *((float *)v170 + 9) = v173;
                }
              }
              ++v109;
              v146 += 3;
              v147 += 3;
            }
            while (v110 != v109);
          }
          unint64_t v95 = v316;
          *(void *)&v316[8 * v110] = 0;
          if (v46) {
            bzero((void *)(v344.i64[0] + v280 * v110), v280);
          }
          unint64_t v97 = v293 + 1;
          uint64_t v18 = v283;
          unint64_t v37 = v290;
        }
        while (v293 + 1 != v282);
        float v96 = *(float *)v331 + *((float *)v331 + 1);
      }
      if ((float)(v96 + v277) >= v65)
      {
        unint64_t v176 = (float *)&v332;
        unint64_t v22 = v274;
      }
      else
      {
        unint64_t v22 = v274;
        if (v96 <= (float)((float)(*(float *)v335 + *((float *)v335 + 1)) * v263)) {
          unint64_t v176 = (float *)&v328;
        }
        else {
          unint64_t v176 = (float *)&v332;
        }
      }
      if ((float)((float)(*(float *)v339 + *((float *)v339 + 1)) + v277) < v65
        && (float)(*(float *)v339 + *((float *)v339 + 1)) <= (float)((float)(v176[6] + v176[7]) * v263))
      {
        unint64_t v176 = (float *)&v336;
      }
      float v177 = (float)(*(float *)v343 + *((float *)v343 + 1)) + v277;
      if (v177 >= v65) {
        long long v93 = v176;
      }
      else {
        long long v93 = (float *)&v340;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if (v310) {
        operator delete(v310);
      }
      if (v313) {
        operator delete(v313);
      }
      if (v95) {
        operator delete(v95);
      }
      if (v344.i64[0]) {
        operator delete((void *)v344.i64[0]);
      }
      unint64_t v31 = v269;
      if (v319[0]) {
        operator delete(v319[0]);
      }
      if (v177 >= v65) {
        unint64_t v178 = v176;
      }
      else {
        unint64_t v178 = (float *)&v340;
      }
      float v94 = v178[6];
      float v86 = v178[7];
      uint64_t v91 = a1;
LABEL_227:
      if ((float)((float)(v94 + v86) + v277) >= v65)
      {
        unint64_t v30 = v273;
        goto LABEL_325;
      }
      unsigned int v179 = *((_DWORD *)v294[12] + *(void *)v93);
      uint64_t v303 = v179;
      BOOL v305 = v93;
      int v180 = *(_DWORD *)(v294[9][3 * *(void *)v93] + 4 * *((unsigned int *)v93 + 2));
      int v181 = *((_DWORD *)v93 + 8);
      int v182 = *((_DWORD *)v93 + 9);
      unsigned int v184 = v91[1];
      unint64_t v183 = v91[2];
      unint64_t v185 = v271;
      unint64_t v186 = 0xCCCCCCCCCCCCCCCDLL * ((v184 - v271) >> 3);
      unint64_t v187 = &v271[40 * v279];
      *((_DWORD *)v187 + 2) = v186;
      *((_DWORD *)v187 + 3) = v186 + 1;
      int v301 = v180;
      *(_DWORD *)unint64_t v187 = v180;
      *((_WORD *)v187 + 2) = v179;
      if (v184 < v183)
      {
        *(_DWORD *)unsigned int v184 = 0;
        *((_WORD *)v184 + 2) = -1;
        *((void *)v184 + 1) = 0;
        *((_DWORD *)v184 + 4) = 0;
        *((void *)v184 + 3) = 0;
        unint64_t v188 = v184 + 40;
        *((_DWORD *)v184 + 8) = 1;
        unint64_t v189 = v290;
        goto LABEL_245;
      }
      unint64_t v190 = v186 + 1;
      if (v186 + 1 > 0x666666666666666) {
        goto LABEL_333;
      }
      if (0x999999999999999ALL * ((v183 - v271) >> 3) > v190) {
        unint64_t v190 = 0x999999999999999ALL * ((v183 - v271) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v183 - v271) >> 3) >= 0x333333333333333) {
        unint64_t v191 = 0x666666666666666;
      }
      else {
        unint64_t v191 = v190;
      }
      long long v192 = (char *)sub_248403444(v191);
      unint64_t v185 = &v192[8 * ((v184 - v271) >> 3)];
      *(_DWORD *)unint64_t v185 = 0;
      *((_WORD *)v185 + 2) = -1;
      *((void *)v185 + 1) = 0;
      unint64_t v183 = &v192[40 * v193];
      *((_DWORD *)v185 + 4) = 0;
      *((void *)v185 + 3) = 0;
      *((_DWORD *)v185 + 8) = 1;
      unint64_t v188 = v185 + 40;
      if (v184 == v271)
      {
        *a1 = v185;
        a1[1] = v188;
        a1[2] = v183;
      }
      else
      {
        do
        {
          long long v194 = *(_OWORD *)(v184 - 40);
          long long v195 = *(_OWORD *)(v184 - 24);
          *((_DWORD *)v185 - 2) = *((_DWORD *)v184 - 2);
          *(_OWORD *)(v185 - 24) = v195;
          *(_OWORD *)(v185 - 40) = v194;
          v185 -= 40;
          v184 -= 40;
        }
        while (v184 != v271);
        *a1 = v185;
        a1[1] = v188;
        a1[2] = v183;
        if (!v271) {
          goto LABEL_244;
        }
      }
      operator delete(v271);
LABEL_244:
      unint64_t v189 = v290;
LABEL_245:
      a1[1] = v188;
      *((_WORD *)v188 - 18) = -1;
      *((_DWORD *)v188 - 6) = v182;
      *((void *)v188 - 2) = 0;
      *((_DWORD *)v188 - 2) = 1;
      if (v188 < v183)
      {
        *(_DWORD *)unint64_t v188 = 0;
        *((_WORD *)v188 + 2) = -1;
        *((void *)v188 + 1) = 0;
        *((_DWORD *)v188 + 4) = 0;
        *((void *)v188 + 3) = 0;
        uint64_t v196 = v188 + 40;
        *((_DWORD *)v188 + 8) = 1;
        unint64_t v197 = a1;
        goto LABEL_259;
      }
      unint64_t v198 = 0xCCCCCCCCCCCCCCCDLL * ((v188 - v185) >> 3) + 1;
      if (v198 > 0x666666666666666) {
LABEL_333:
      }
        sub_2483E92E8();
      if (0x999999999999999ALL * ((v183 - v185) >> 3) > v198) {
        unint64_t v198 = 0x999999999999999ALL * ((v183 - v185) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v183 - v185) >> 3) >= 0x333333333333333) {
        unint64_t v199 = 0x666666666666666;
      }
      else {
        unint64_t v199 = v198;
      }
      unint64_t v200 = (char *)sub_248403444(v199);
      uint64_t v201 = &v200[8 * ((v188 - v185) >> 3)];
      *(_DWORD *)uint64_t v201 = 0;
      *((_WORD *)v201 + 2) = -1;
      *((void *)v201 + 1) = 0;
      long long v203 = &v200[40 * v202];
      *((_DWORD *)v201 + 4) = 0;
      *((void *)v201 + 3) = 0;
      *((_DWORD *)v201 + 8) = 1;
      uint64_t v196 = v201 + 40;
      unint64_t v189 = v290;
      if (v188 == v185)
      {
        unint64_t v197 = a1;
        *a1 = v201;
        a1[1] = v196;
        a1[2] = v203;
LABEL_258:
        operator delete(v185);
        goto LABEL_259;
      }
      do
      {
        long long v204 = *(_OWORD *)(v188 - 40);
        long long v205 = *(_OWORD *)(v188 - 24);
        *((_DWORD *)v201 - 2) = *((_DWORD *)v188 - 2);
        *(_OWORD *)(v201 - 24) = v205;
        *(_OWORD *)(v201 - 40) = v204;
        v201 -= 40;
        v188 -= 40;
      }
      while (v188 != v185);
      unint64_t v197 = a1;
      *a1 = v201;
      a1[1] = v196;
      a1[2] = v203;
      if (v185) {
        goto LABEL_258;
      }
LABEL_259:
      v197[1] = v196;
      *((_WORD *)v196 - 18) = -1;
      *((_DWORD *)v196 - 6) = v181;
      *((void *)v196 - 2) = 0;
      uint64_t v206 = v189 + 1;
      *((_DWORD *)v196 - 2) = 1;
      if (v189 + 1 >= v292) {
        goto LABEL_281;
      }
      unint64_t v307 = *((void *)v305 + 2);
      uint64_t v207 = *(void *)v305;
      unint64_t v208 = 0xBF58476D1CE4E5B9;
      unint64_t v209 = 0x94D049BB133111EBLL;
      uint64_t v210 = v290;
      unint64_t v211 = v292;
      while (2)
      {
        unint64_t v212 = v209 ^ (v209 << 23);
        sub_2484A1120((uint64_t)v294, v210, (v209 + v208) % (v211 - v210) + v210);
        unint64_t v213 = v206;
        unint64_t v214 = v210;
        while (2)
        {
          long long v215 = v294[6];
          uint64_t v216 = v215[3 * v207];
          unsigned int v217 = *(unsigned __int8 *)(v216 + v206);
          unsigned int v218 = *(unsigned __int8 *)(v216 + v214);
          if (v217 >= v218)
          {
            if (v217 == v218)
            {
              sub_2484A1120((uint64_t)v294, v213, v206);
              goto LABEL_276;
            }
          }
          else
          {
            if (v213 == v206)
            {
              sub_2484A1120((uint64_t)v294, v214, v206);
            }
            else
            {
              unint64_t v219 = *v294;
              unint64_t v220 = v294[1];
              if (*v294 == v220)
              {
                uint64_t v223 = v294;
              }
              else
              {
                do
                {
                  __int16 v221 = *(_WORD *)(*v219 + 2 * v214);
                  *(_WORD *)(*v219 + 2 * v214) = *(_WORD *)(*v219 + 2 * v206);
                  *(_WORD *)(*v219 + 2 * v206) = *(_WORD *)(*v219 + 2 * v213);
                  uint64_t v222 = *v219;
                  v219 += 3;
                  *(_WORD *)(v222 + 2 * v213) = v221;
                }
                while (v219 != v220);
                uint64_t v223 = v294;
                long long v215 = v294[6];
              }
              unint64_t v224 = v223[7];
              while (v215 != v224)
              {
                char v225 = *(unsigned char *)(*v215 + v214);
                *(unsigned char *)(*v215 + v214) = *(unsigned char *)(*v215 + v206);
                *(unsigned char *)(*v215 + v206) = *(unsigned char *)(*v215 + v213);
                uint64_t v226 = *v215;
                v215 += 3;
                *(unsigned char *)(v226 + v213) = v225;
              }
              unint64_t v227 = v294[3];
              __int16 v228 = *((_WORD *)v227 + v214);
              *((_WORD *)v227 + v214) = *((_WORD *)v227 + v206);
              *((_WORD *)v227 + v206) = *((_WORD *)v227 + v213);
              *((_WORD *)v227 + v213) = v228;
            }
            ++v214;
LABEL_276:
            ++v213;
          }
          if (++v206 < v211) {
            continue;
          }
          break;
        }
        if (v214 > v307 || (v214 = v211, uint64_t v210 = v213, v213 < v307))
        {
          unint64_t v209 = v208;
          v208 ^= (v208 >> 5) ^ (v212 >> 18) ^ v212;
          uint64_t v206 = v210 + 1;
          unint64_t v211 = v214;
          if (v214 > v210 + 1) {
            continue;
          }
        }
        break;
      }
LABEL_281:
      uint64_t v229 = v303;
      if (v303 >= 2)
      {
        uint64_t v234 = v305;
        v281 |= 1 << *(_DWORD *)v305;
        v319[0] = v276;
        unint64_t v22 = v274;
        v319[1] = v275;
        unint64_t v230 = a1;
        uint64_t v18 = v283;
        unint64_t v231 = v270;
        unint64_t v232 = v268;
        unint64_t v233 = v273;
      }
      else
      {
        v319[0] = v276;
        unint64_t v22 = v274;
        v319[1] = v275;
        HIDWORD(v319[v303]) = v301 + 1;
        unint64_t v230 = a1;
        uint64_t v18 = v283;
        unint64_t v231 = v270;
        unint64_t v232 = v268;
        unint64_t v233 = v273;
        uint64_t v234 = v305;
      }
      uint64_t v235 = *(unsigned int *)&(*v230)[40 * v279 + 12];
      uint64_t v236 = *((void *)v234 + 2);
      int8x16_t v344 = *(int8x16_t *)v319;
      if (v233 >= v272)
      {
        unint64_t v239 = 0xAAAAAAAAAAAAAAABLL * (v233 - v231);
        unint64_t v240 = v239 + 1;
        if (v239 + 1 > 0x555555555555555) {
          sub_2483E92E8();
        }
        if (0x5555555555555556 * (v272 - v231) > v240) {
          unint64_t v240 = 0x5555555555555556 * (v272 - v231);
        }
        if (0xAAAAAAAAAAAAAAABLL * (v272 - v231) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v241 = 0x555555555555555;
        }
        else {
          unint64_t v241 = v240;
        }
        if (v241)
        {
          if (v241 > 0x555555555555555) {
            sub_2483E9338();
          }
          unint64_t v242 = (char *)operator new(48 * v241);
          unint64_t v233 = v273;
        }
        else
        {
          unint64_t v242 = 0;
        }
        unint64_t v243 = &v242[48 * v239];
        *(void *)unint64_t v243 = v235;
        *((void *)v243 + 1) = v290;
        *((void *)v243 + 2) = v236;
        *((void *)v243 + 3) = v281;
        *((_OWORD *)v243 + 2) = *(_OWORD *)v319;
        if (v233 == v270)
        {
          unint64_t v22 = (int8x16_t *)&v242[48 * v239];
          long long v237 = a1;
          unint64_t v238 = v305;
        }
        else
        {
          unint64_t v244 = &v242[48 * v239];
          long long v237 = a1;
          unint64_t v238 = v305;
          do
          {
            int8x16_t v245 = v233[-3];
            int8x16_t v246 = v233[-1];
            unint64_t v22 = (int8x16_t *)(v244 - 48);
            *((int8x16_t *)v244 - 2) = v233[-2];
            *((int8x16_t *)v244 - 1) = v246;
            *((int8x16_t *)v244 - 3) = v245;
            v233 -= 3;
            v244 -= 48;
          }
          while (v233 != v270);
        }
        uint64_t v272 = (int8x16_t *)&v242[48 * v241];
        unint64_t v232 = (int8x16_t *)(v243 + 48);
        if (v270) {
          operator delete(v270);
        }
        uint64_t v229 = v303;
      }
      else
      {
        v232[-3].i64[0] = v235;
        v232[-3].i64[1] = v290;
        v232[-2].i64[0] = v236;
        v232[-2].i64[1] = v281;
        *uint64_t v267 = v344;
        long long v237 = a1;
        unint64_t v238 = v305;
      }
      v319[0] = v276;
      v319[1] = v275;
      if (v229 <= 1) {
        LODWORD(v319[v229]) = v301 + 1;
      }
      uint64_t v247 = *(unsigned int *)&(*v237)[40 * v279 + 8];
      uint64_t v248 = *((void *)v238 + 2);
      int8x16_t v344 = *(int8x16_t *)v319;
      if (v232 >= v272)
      {
        unint64_t v249 = 0xAAAAAAAAAAAAAAABLL * (v232 - v22);
        unint64_t v250 = v249 + 1;
        if (v249 + 1 > 0x555555555555555) {
          sub_2483E92E8();
        }
        uint64_t v251 = v232;
        if (0x5555555555555556 * (v272 - v22) > v250) {
          unint64_t v250 = 0x5555555555555556 * (v272 - v22);
        }
        if (0xAAAAAAAAAAAAAAABLL * (v272 - v22) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v252 = 0x555555555555555;
        }
        else {
          unint64_t v252 = v250;
        }
        if (v252)
        {
          if (v252 > 0x555555555555555) {
            sub_2483E9338();
          }
          unint64_t v253 = (char *)operator new(48 * v252);
        }
        else
        {
          unint64_t v253 = 0;
        }
        unint64_t v254 = (int8x16_t *)&v253[48 * v249];
        uint64_t v272 = (int8x16_t *)&v253[48 * v252];
        v254->i64[0] = v247;
        v254->i64[1] = v248;
        v254[1].i64[0] = v292;
        v254[1].i64[1] = v281;
        v254[2] = *(int8x16_t *)v319;
        unint64_t v30 = v254 + 3;
        if (v251 == v22) {
          goto LABEL_322;
        }
        unint64_t v255 = v251;
        do
        {
          int8x16_t v256 = v255[-3];
          int8x16_t v257 = v255[-1];
          v254[-2] = v255[-2];
          v254[-1] = v257;
          v254[-3] = v256;
          v254 -= 3;
          v255 -= 3;
        }
        while (v255 != v22);
        if (v22) {
LABEL_322:
        }
          operator delete(v22);
        unint64_t v22 = v254;
      }
      else
      {
        v232->i64[0] = v247;
        v232->i64[1] = v248;
        v232[1].i64[0] = v292;
        v232[1].i64[1] = v281;
        v232[2] = v344;
        unint64_t v30 = v232 + 3;
      }
      unint64_t v31 = v269;
LABEL_325:
      if (v326[0])
      {
        v326[1] = v326[0];
        operator delete(v326[0]);
      }
      if (v327[0])
      {
        v327[1] = v327[0];
        operator delete(v327[0]);
      }
      unint64_t v36 = v22;
LABEL_330:
      if (v36 == v30)
      {
        operator delete(v30);
        return;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  long long v258 = a1 + 1;
  a1[2] = 0;
  unint64_t v260 = a1 + 2;
  unint64_t v261 = sub_248403444(1uLL);
  *(_DWORD *)unint64_t v261 = 0;
  v261[2] = -1;
  *((void *)v261 + 1) = 0;
  *((_DWORD *)v261 + 4) = 0;
  *((void *)v261 + 3) = 0;
  *((_DWORD *)v261 + 8) = 1;
  *a1 = (char *)v261;
  *long long v258 = v261 + 20;
  void *v260 = &v261[20 * v262];
  *((_DWORD *)v261 + 4) = *(_DWORD *)a2[15];
}

void sub_24849D558(_Unwind_Exception *a1)
{
}

uint64_t sub_24849D658(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (char *)operator new(0x10uLL);
  unint64_t v4 = v3 + 16;
  *(void *)uint64_t v3 = 0x1FFFFFFFDFFLL;
  *((void *)v3 + 1) = 0;
  uint64_t v80 = a2 + 2048;
  uint64_t v81 = a2;
  unint64_t v5 = v3 + 16;
  uint64_t v6 = v3 + 16;
  while (1)
  {
    int v8 = *((_DWORD *)v6 - 4);
    v6 -= 16;
    int v7 = v8;
    if ((v8 - 511) < 0xFFFFFC00) {
      break;
    }
    int v9 = *((_DWORD *)v6 + 1);
    if (v9 > 511) {
      break;
    }
    uint64_t v10 = *((void *)v6 + 1);
    uint64_t v11 = *a1;
    uint64_t v12 = *a1 + 24 * v10;
    uint64_t v13 = (__int16 *)(v12 + 20);
    if (*(_DWORD *)v12 != -1)
    {
      uint64_t v14 = v11 + 24 * v10;
      unsigned int v17 = *(_DWORD *)(v14 + 16);
      float v15 = (_DWORD *)(v14 + 16);
      uint64_t v16 = v17;
      if (*v13 < 2)
      {
        int v23 = *(_DWORD *)(v11 + 24 * v10 + 4);
        if (v6 < v4)
        {
          *((_DWORD *)v5 - 4) = v23;
          *((void *)v5 - 1) = v16;
          goto LABEL_64;
        }
        uint64_t v83 = *a1 + 24 * v10;
        int v84 = v15;
        uint64_t v28 = (v6 - v3) >> 4;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60) {
          sub_2483E92E8();
        }
        uint64_t v30 = v16;
        if ((v4 - v3) >> 3 > v29) {
          unint64_t v29 = (v4 - v3) >> 3;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31) {
          unint64_t v31 = (unint64_t)sub_2483F3EB0(v31);
        }
        else {
          uint64_t v32 = 0;
        }
        unint64_t v36 = v31 + 16 * v28;
        *(_DWORD *)unint64_t v36 = v23;
        *(_DWORD *)(v36 + 4) = v9;
        *(void *)(v36 + 8) = v30;
        if (v6 != v3)
        {
          unint64_t v37 = v31 + 16 * v28;
          do
          {
            unint64_t v38 = (char *)(v37 - 16);
            *(_OWORD *)(v37 - 16) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v37 -= 16;
          }
          while (v6 != v3);
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v18 = v11 + 24 * v10;
        int v21 = *(_DWORD *)(v18 + 8);
        uint64_t v19 = (int *)(v18 + 8);
        int v20 = v21;
        uint64_t v83 = *a1 + 24 * v10;
        int v84 = v15;
        if (v6 >= v4)
        {
          uint64_t v82 = v16;
          uint64_t v24 = (v6 - v3) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            sub_2483E92E8();
          }
          if ((v4 - v3) >> 3 > v25) {
            unint64_t v25 = (v4 - v3) >> 3;
          }
          if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            unint64_t v26 = (unint64_t)sub_2483F3EB0(v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v33 = v26 + 16 * v24;
          *(_DWORD *)unint64_t v33 = v20;
          *(_DWORD *)(v33 + 4) = v9;
          *(void *)(v33 + 8) = v82;
          if (v6 == v3)
          {
            int32x2_t v35 = (char *)(v26 + 16 * v24);
          }
          else
          {
            unint64_t v34 = v26 + 16 * v24;
            do
            {
              int32x2_t v35 = (char *)(v34 - 16);
              *(_OWORD *)(v34 - 16) = *((_OWORD *)v6 - 1);
              v6 -= 16;
              v34 -= 16;
            }
            while (v6 != v3);
          }
          unint64_t v4 = (char *)(v26 + 16 * v27);
          unint64_t v5 = (char *)(v33 + 16);
          if (v3) {
            operator delete(v3);
          }
          uint64_t v3 = v35;
          uint64_t v12 = v83;
          float v15 = v84;
        }
        else
        {
          *((_DWORD *)v5 - 4) = v20;
          *((void *)v5 - 1) = v16;
        }
        int v39 = *(_DWORD *)(v11 + 24 * v10 + 4);
        int v40 = *v19;
        uint64_t v41 = (*v15 + 1);
        if (v5 < v4)
        {
          *(_DWORD *)unint64_t v5 = v39;
          *((_DWORD *)v5 + 1) = v40;
          *((void *)v5 + 1) = v41;
          v5 += 16;
LABEL_64:
          if (*(__int16 *)(v12 + 22) < 2)
          {
            int v52 = *(_DWORD *)(v11 + 24 * v10 + 4);
            uint64_t v53 = (*v15 + 2);
            if (v5 >= v4)
            {
              uint64_t v59 = (v5 - v3) >> 4;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v60) {
                unint64_t v60 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v60;
              }
              if (v61) {
                unint64_t v61 = (unint64_t)sub_2483F3EB0(v61);
              }
              else {
                uint64_t v62 = 0;
              }
              unint64_t v66 = v61 + 16 * v59;
              *(_DWORD *)unint64_t v66 = v7;
              *(_DWORD *)(v66 + 4) = v52;
              *(void *)(v66 + 8) = v53;
              if (v5 == v3)
              {
                uint64_t v68 = (char *)(v61 + 16 * v59);
              }
              else
              {
                unint64_t v67 = v61 + 16 * v59;
                do
                {
                  uint64_t v68 = (char *)(v67 - 16);
                  *(_OWORD *)(v67 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v67 -= 16;
                }
                while (v5 != v3);
              }
              unint64_t v4 = (char *)(v61 + 16 * v62);
              uint64_t v6 = (char *)(v66 + 16);
              if (v3) {
                operator delete(v3);
              }
              uint64_t v3 = v68;
            }
            else
            {
              *(_DWORD *)unint64_t v5 = v7;
              *((_DWORD *)v5 + 1) = v52;
              uint64_t v6 = v5 + 16;
              *((void *)v5 + 1) = v53;
            }
          }
          else
          {
            uint64_t v45 = v11 + 24 * v10;
            int v48 = *(_DWORD *)(v45 + 12);
            unint64_t v46 = (int *)(v45 + 12);
            int v47 = v48;
            int v49 = *(v46 - 2);
            uint64_t v50 = (*v15 + 2);
            if (v5 >= v4)
            {
              unint64_t v54 = v15;
              uint64_t v55 = (v5 - v3) >> 4;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v56) {
                unint64_t v56 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v56;
              }
              if (v57) {
                unint64_t v57 = (unint64_t)sub_2483F3EB0(v57);
              }
              else {
                uint64_t v58 = 0;
              }
              unint64_t v63 = v57 + 16 * v55;
              *(_DWORD *)unint64_t v63 = v47;
              *(_DWORD *)(v63 + 4) = v49;
              *(void *)(v63 + 8) = v50;
              if (v5 == v3)
              {
                float v65 = (char *)(v57 + 16 * v55);
              }
              else
              {
                unint64_t v64 = v57 + 16 * v55;
                do
                {
                  float v65 = (char *)(v64 - 16);
                  *(_OWORD *)(v64 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v64 -= 16;
                }
                while (v5 != v3);
              }
              unint64_t v4 = (char *)(v57 + 16 * v58);
              uint64_t v51 = (char *)(v63 + 16);
              if (v3) {
                operator delete(v3);
              }
              uint64_t v3 = v65;
              float v15 = v54;
            }
            else
            {
              *(_DWORD *)unint64_t v5 = v47;
              *((_DWORD *)v5 + 1) = v49;
              uint64_t v51 = v5 + 16;
              *((void *)v5 + 1) = v50;
            }
            int v69 = *v46;
            uint64_t v70 = (*v15 + 3);
            if (v51 >= v4)
            {
              uint64_t v71 = (v51 - v3) >> 4;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v72) {
                unint64_t v72 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73) {
                unint64_t v73 = (unint64_t)sub_2483F3EB0(v73);
              }
              else {
                uint64_t v74 = 0;
              }
              unint64_t v75 = v73 + 16 * v71;
              *(_DWORD *)unint64_t v75 = v7;
              *(_DWORD *)(v75 + 4) = v69;
              *(void *)(v75 + 8) = v70;
              if (v51 == v3)
              {
                char v77 = (char *)(v73 + 16 * v71);
              }
              else
              {
                unint64_t v76 = v73 + 16 * v71;
                do
                {
                  char v77 = (char *)(v76 - 16);
                  *(_OWORD *)(v76 - 16) = *((_OWORD *)v51 - 1);
                  v51 -= 16;
                  v76 -= 16;
                }
                while (v51 != v3);
              }
              unint64_t v4 = (char *)(v73 + 16 * v74);
              uint64_t v6 = (char *)(v75 + 16);
              if (v3) {
                operator delete(v3);
              }
              uint64_t v3 = v77;
            }
            else
            {
              *(_DWORD *)uint64_t v51 = v7;
              *((_DWORD *)v51 + 1) = v69;
              uint64_t v6 = v51 + 16;
              *((void *)v51 + 1) = v70;
            }
          }
          goto LABEL_122;
        }
        uint64_t v42 = (v5 - v3) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          sub_2483E92E8();
        }
        if ((v4 - v3) >> 3 > v43) {
          unint64_t v43 = (v4 - v3) >> 3;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v43;
        }
        if (v31) {
          unint64_t v31 = (unint64_t)sub_2483F3EB0(v31);
        }
        else {
          uint64_t v32 = 0;
        }
        unint64_t v36 = v31 + 16 * v42;
        *(_DWORD *)unint64_t v36 = v39;
        *(_DWORD *)(v36 + 4) = v40;
        *(void *)(v36 + 8) = v41;
        if (v5 != v3)
        {
          unint64_t v44 = v31 + 16 * v42;
          do
          {
            unint64_t v38 = (char *)(v44 - 16);
            *(_OWORD *)(v44 - 16) = *((_OWORD *)v5 - 1);
            v5 -= 16;
            v44 -= 16;
          }
          while (v5 != v3);
          goto LABEL_61;
        }
      }
      unint64_t v38 = (char *)v36;
LABEL_61:
      unint64_t v4 = (char *)(v31 + 16 * v32);
      unint64_t v5 = (char *)(v36 + 16);
      if (v3) {
        operator delete(v3);
      }
      uint64_t v3 = v38;
      uint64_t v12 = v83;
      float v15 = v84;
      goto LABEL_64;
    }
    if (*(_DWORD *)v13 != (char)*(_DWORD *)v13 || *(_DWORD *)(v11 + 24 * v10 + 8) != 1) {
      break;
    }
    if (v7 < v9)
    {
      do
      {
        unsigned int v22 = v7 + 513;
        *(_WORD *)(v81 + 2 * v22) = *(_DWORD *)(v11 + 24 * v10 + 16);
        *(unsigned char *)(v80 + v22) = *(_DWORD *)v13;
        ++v7;
      }
      while (v9 != v7);
    }
LABEL_122:
    unint64_t v5 = v6;
    if (v3 == v6)
    {
      uint64_t v78 = 1;
      goto LABEL_125;
    }
  }
  uint64_t v78 = 0;
  uint64_t result = 0;
  if (!v3) {
    return result;
  }
LABEL_125:
  operator delete(v3);
  return v78;
}

void sub_24849DC88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24849DCCC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, signed int a5, unsigned int a6, int a7)
{
  if (!a5)
  {
    if (!a6)
    {
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      uint64_t v10 = 0;
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v13 = 0;
      uint64_t v16 = 0;
      goto LABEL_20;
    }
    int v7 = *(_DWORD *)(a3 - 4 * a4);
    uint64_t v10 = v7;
    uint64_t v8 = v7;
    uint64_t v9 = v7;
    goto LABEL_6;
  }
  int v7 = *(_DWORD *)(a3 - 4);
  uint64_t v8 = v7;
  if (a6)
  {
    uint64_t v9 = *(int *)(a3 + 4 * ~a4);
    uint64_t v10 = *(int *)(a3 - 4 * a4);
LABEL_6:
    char v11 = 1;
    if (a5 + 1 >= a2) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = *(int *)(a3 + 4 * (1 - a4));
    }
    goto LABEL_10;
  }
  char v11 = 0;
  uint64_t v9 = v7;
  uint64_t v10 = v7;
  uint64_t v12 = v7;
LABEL_10:
  uint64_t v13 = v8;
  if (a5 >= 2) {
    uint64_t v13 = *(int *)(a3 - 8);
  }
  uint64_t v14 = v10;
  if (a6 >= 2) {
    uint64_t v14 = *(int *)(a3 - 8 * a4);
  }
  char v15 = v11 ^ 1;
  if (a5 + 2 >= a2) {
    char v15 = 1;
  }
  if (v15) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = *(int *)(a3 + 4 * (2 - a4));
  }
LABEL_20:
  uint64_t v17 = 0;
  *(_DWORD *)uint64_t result = 0;
  switch(a7)
  {
    case 1:
      uint64_t v17 = v8;
      break;
    case 2:
      uint64_t v17 = v10;
      break;
    case 3:
      BOOL v18 = __OFADD__(v8, v10);
      uint64_t v20 = v8 + v10;
      char v19 = (v20 < 0) ^ v18;
      goto LABEL_48;
    case 4:
      uint64_t v21 = v8 + v10 - v9;
      uint64_t v22 = v10 - v9;
      if (v22 < 0) {
        uint64_t v22 = -v22;
      }
      uint64_t v23 = v21 - v10;
      if (v23 < 0) {
        uint64_t v23 = -v23;
      }
      if (v22 >= (unint64_t)v23) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = v8;
      }
      break;
    case 5:
      if (v7 >= (int)v10) {
        int v24 = v10;
      }
      else {
        int v24 = v7;
      }
      if (v7 <= (int)v10) {
        int v25 = v10;
      }
      else {
        int v25 = v7;
      }
      int v26 = v7 + v10 - v9;
      if (v24 > (int)v9) {
        int v26 = v25;
      }
      if (v25 >= (int)v9) {
        int v24 = v26;
      }
      uint64_t v17 = v24;
      break;
    case 7:
      uint64_t v17 = v12;
      break;
    case 8:
      uint64_t v17 = v9;
      break;
    case 9:
      uint64_t v17 = v13;
      break;
    case 10:
      BOOL v18 = __OFADD__(v9, v8);
      uint64_t v20 = v9 + v8;
      char v19 = (v20 < 0) ^ v18;
      goto LABEL_48;
    case 11:
      uint64_t v20 = v9 + v10;
      char v19 = (v9 + v10 < 0) ^ __OFADD__(v9, v10);
      goto LABEL_48;
    case 12:
      uint64_t v20 = v10 + v12;
      char v19 = (v10 + v12 < 0) ^ __OFADD__(v10, v12);
LABEL_48:
      if (v19) {
        ++v20;
      }
      uint64_t v17 = v20 >> 1;
      break;
    case 13:
      uint64_t v27 = 3 * v12 - 2 * v14 + 6 * (int)v10 - v8 + 8 * v8 + v13 + v16;
      uint64_t v28 = v27 + 8;
      uint64_t v29 = v27 + 23;
      if (v28 >= 0) {
        uint64_t v29 = v28;
      }
      uint64_t v17 = v29 >> 4;
      break;
    default:
      break;
  }
  *(void *)(result + 8) = v17;
  *(_DWORD *)(result + 16) = a7;
  return result;
}

uint64_t sub_24849DEF8(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, _OWORD *a7, unint64_t *a8, uint64_t *a9, uint64_t a10, void **a11, unint64_t *a12)
{
  uint64_t v398 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)a1 + 80))
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = v14 - *a1;
    if (v14 == *a1) {
      return 0;
    }
    sub_2484294B8((uint64_t)v345);
    if (a10) {
      uint64_t v21 = (void *)a10;
    }
    else {
      uint64_t v21 = v345;
    }
    *(_OWORD *)&v359[1] = xmmword_2484DC960;
    v359[0] = &unk_26FC65A00;
    v359[3] = 0;
    (*(void (**)(void *, void **))(*v21 + 16))(v21, v359);
    if (*(_DWORD *)(a2 + 64) == 6)
    {
      uint64_t v22 = *(unsigned int *)(a2 + 68);
      if (v22 > 3)
      {
        int v32 = 4;
        int v28 = 5;
        int v26 = 10;
        int v23 = 12;
        int v24 = 12;
        int v25 = 12;
        int v27 = 10;
        int v29 = 5;
        int v30 = 5;
        int v31 = 12;
      }
      else
      {
        int v23 = dword_2484DD0F0[v22];
        int v24 = dword_2484DD100[v22];
        int v25 = dword_2484DD110[v22];
        int v26 = dword_2484DD120[v22];
        int v27 = dword_2484DD130[v22];
        int v28 = dword_248550BB8[v22];
        int v29 = dword_2484DD140[v22];
        int v30 = dword_2484DD150[v22];
        int v31 = dword_2484DD160[v22];
        int v32 = dword_2484DD170[v22];
      }
      unint64_t v33 = v345;
      if (a10) {
        unint64_t v33 = (_DWORD *)a10;
      }
      v33[15] = v23;
      v33[16] = v24;
      v33[17] = v25;
      v33[7] = v26;
      v33[8] = v27;
      v33[9] = v28;
      v33[10] = v29;
      v33[11] = v30;
      v33[12] = v31;
      v33[13] = v32;
      v33[14] = 13;
    }
    if (a10) {
      unint64_t v34 = (unsigned char *)(a10 + 72);
    }
    else {
      unint64_t v34 = v347;
    }
    if (v34 != (unsigned char *)(a1 + 3)) {
      sub_24840A270((uint64_t)v34, a1[3], a1[4], 0x8E38E38E38E38E39 * ((uint64_t)(a1[4] - a1[3]) >> 3));
    }
    unsigned int v322 = a9;
    if (a9)
    {
      int32x2_t v35 = v345;
      if (a10) {
        int32x2_t v35 = (void *)a10;
      }
      *((unsigned char *)v35 + 8) = 1;
      BOOL v36 = a7 == 0;
    }
    else if (a7)
    {
      BOOL v36 = 0;
    }
    else
    {
      uint64_t v12 = sub_2484DA1C4((uint64_t)v21, a3, a5, a4);
      if (v12) {
        goto LABEL_477;
      }
      BOOL v36 = 1;
    }
    uint64_t v344 = 0;
    unint64_t v37 = v15 >> 6;
    memset(v343, 0, sizeof(v343));
    uint64_t v342 = 0;
    if (!a8) {
      a8 = (unint64_t *)&v342;
    }
    unint64_t v38 = *a8;
    uint64_t v39 = a2;
    if (!*a8)
    {
      unint64_t v40 = 0;
      if (v37 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v37;
      }
      uint64_t v42 = (uint64_t *)(*a1 + 48);
      while (1)
      {
        unint64_t v43 = *(v42 - 1);
        if (v40 >= a1[9])
        {
          if (v43 > *(void *)a2 || (uint64_t v44 = *v42, (unint64_t)*v42 > *(void *)a2))
          {
LABEL_38:
            if (v38 <= 1) {
              unint64_t v38 = 1;
            }
            *a8 = v38;
            break;
          }
        }
        else
        {
          uint64_t v44 = *v42;
        }
        v38 += v44 * v43;
        *a8 = v38;
        ++v40;
        v42 += 8;
        if (v41 == v40) {
          goto LABEL_38;
        }
      }
    }
    if (a9 || *(_DWORD *)(a2 + 84) != 1) {
      goto LABEL_364;
    }
    uint64_t v324 = (uint64_t)a8;
    BOOL v316 = v36;
    if (!v36)
    {
LABEL_58:
      unsigned int v319 = a3;
      uint64_t v320 = a5;
      unint64_t v46 = 0;
      if (v37 <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v37;
      }
      int v48 = &v346;
      if (a10) {
        int v48 = (uint64_t *)(a10 + 24);
      }
      uint64_t v318 = (long long *)v48;
      unint64_t v315 = v37;
      uint64_t v323 = v47;
      while (1)
      {
        uint64_t v49 = *a1;
        uint64_t v50 = *a1 + (v46 << 6);
        unint64_t v51 = *(void *)(v50 + 40);
        if (v51)
        {
          unint64_t v52 = *(void *)(v50 + 48);
          if (v52)
          {
            if (v46 >= a1[9])
            {
              BOOL v53 = v51 > *(void *)v39 || v52 > *(void *)v39;
              if (v53)
              {
LABEL_363:
                a5 = v320;
                a3 = v319;
                unint64_t v37 = v315;
                a8 = (unint64_t *)v324;
                if (!v316)
                {
                  uint64_t v12 = 0;
                  goto LABEL_476;
                }
LABEL_364:
                v340[0] = 0;
                v340[1] = 0;
                uint64_t v341 = 0;
                sub_248451DB0(v339);
                if (!a9)
                {
                  memset(v359, 0, 24);
                  unsigned int v360 = 0;
                  uint64_t v362 = 0;
                  unint64_t v361 = 0;
                  sub_2483F26D4((uint64_t)v363);
                  uint64_t v365 = 0;
                  uint64_t v364 = 0;
                  *(void *)unint64_t v366 = 0;
                  long long v395 = 0uLL;
                  *(void *)&v396[0] = 0;
                  sub_248451DB0(&v386);
                  int v245 = *(_DWORD *)(v39 + 84);
                  unint64_t v246 = *a8;
                  if (v245 == 1)
                  {
                    long long v356 = 0uLL;
                    unint64_t v355 = 0;
                    sub_24849BE68((char **)&__p, v343, v246, v39, (uint64_t *)&v355, 0, 0);
                    uint64_t v247 = (void *)__p;
                    *(_OWORD *)uint64_t v340 = __p;
                    uint64_t v341 = v349;
                    *(void *)&long long v349 = 0;
                    long long __p = 0uLL;
                    if (v355)
                    {
                      uint64_t v338 = v247;
                      operator delete(v355);
                      uint64_t v247 = v338;
                    }
                  }
                  else
                  {
                    sub_2484992F4((unint64_t *)&__p, v245, v246);
                    uint64_t v247 = (void *)__p;
                    *(_OWORD *)uint64_t v340 = __p;
                    uint64_t v341 = v349;
                    *(void *)&long long v349 = 0;
                    long long __p = 0uLL;
                  }
                  uint64_t v248 = v247;
                  a11 = (void **)v339[0];
                  long long __p = 0uLL;
                  *(void *)&long long v349 = 0;
                  sub_2484A39BC(v340, (void **)v386, (char **)&__p);
                  if (v248) {
                    operator delete(v248);
                  }
                  *(_OWORD *)uint64_t v340 = __p;
                  uint64_t v341 = v349;
                  *(void *)&long long v349 = 0;
                  long long __p = 0uLL;
                  sub_248443880(a2 + 88, 6uLL, (uint64_t)&v386, (uint64_t *)v359, (unint64_t *)&v395, a3, 6, a4);
                  sub_24844A2B4((uint64_t)v386, (uint64_t)v359, &v395, 0, a3, 6, a4);
                  *(void *)&long long __p = &v386;
                  sub_2483F87EC((void ***)&__p);
                  if ((void)v395) {
                    operator delete((void *)v395);
                  }
                  *(void *)&long long v395 = &v364;
                  sub_2483F77FC((void ***)&v395);
                  if (v360)
                  {
                    unint64_t v361 = v360;
                    operator delete(v360);
                  }
                  *(void *)&long long v395 = v359;
                  sub_2484415B0((void ***)&v395);
                  unsigned int v322 = (uint64_t *)v340;
                  uint64_t v39 = a2;
                }
                unint64_t v249 = 0;
                unint64_t v250 = 0;
                unint64_t v251 = 0;
                unint64_t v252 = *(void *)v39;
                if (v37 <= 1) {
                  uint64_t v253 = 1;
                }
                else {
                  uint64_t v253 = v37;
                }
                unint64_t v254 = (unint64_t *)(*a1 + 48);
                do
                {
                  unint64_t v255 = *(v254 - 1);
                  if (v249 >= a1[9])
                  {
                    if (v255 > v252) {
                      break;
                    }
                    unint64_t v256 = *v254;
                    if (*v254 > v252) {
                      break;
                    }
                  }
                  else
                  {
                    unint64_t v256 = *v254;
                  }
                  if (v255 > v251) {
                    unint64_t v251 = *(v254 - 1);
                  }
                  v250 += v256 * v255;
                  ++v249;
                  v254 += 8;
                }
                while (v253 != v249);
                uint64_t v330 = a1;
                int v257 = *(unsigned __int8 *)(v39 + 144);
                long long v258 = (char *)*a11;
                long long v259 = (char *)a11[1];
                unint64_t v260 = (v259 - (unsigned char *)*a11) >> 3;
                unint64_t v261 = v250 + v260;
                unint64_t v317 = v251;
                if (v257)
                {
                  if (v260 >= v250 + v260)
                  {
                    uint64_t v267 = a2;
                    if (v260 > v250 + v260) {
                      a11[1] = &v258[8 * v261];
                    }
                  }
                  else
                  {
                    uint64_t v262 = a11[2];
                    if (v250 <= (v262 - v259) >> 3)
                    {
                      uint64_t v289 = 8 * v250;
                      unint64_t v290 = &v259[8 * v250];
                      do
                      {
                        *(void *)long long v259 = 0;
                        v259 += 8;
                        v289 -= 8;
                      }
                      while (v289);
                      a11[1] = v290;
                      uint64_t v267 = a2;
                    }
                    else
                    {
                      if (v261 >> 61) {
                        sub_2483E92E8();
                      }
                      uint64_t v263 = v262 - v258;
                      if (v263 >> 2 > v261) {
                        unint64_t v261 = v263 >> 2;
                      }
                      if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v264 = v261;
                      }
                      uint64_t v265 = (char *)sub_2483F04AC(v264);
                      uint64_t v267 = a2;
                      unint64_t v268 = &v265[8 * v260];
                      uint64_t v269 = &v268[8 * v250];
                      uint64_t v270 = 8 * v250;
                      unint64_t v271 = v268;
                      do
                      {
                        *(void *)unint64_t v271 = 0;
                        v271 += 8;
                        v270 -= 8;
                      }
                      while (v270);
                      uint64_t v272 = &v265[8 * v266];
                      unint64_t v274 = (char *)*a11;
                      unint64_t v273 = (char *)a11[1];
                      if (v273 != *a11)
                      {
                        do
                        {
                          uint64_t v275 = *((void *)v273 - 1);
                          v273 -= 8;
                          *((void *)v268 - 1) = v275;
                          v268 -= 8;
                        }
                        while (v273 != v274);
                        unint64_t v273 = (char *)*a11;
                      }
                      *a11 = v268;
                      a11[1] = v269;
                      a11[2] = v272;
                      if (v273) {
                        operator delete(v273);
                      }
                    }
                  }
LABEL_425:
                  uint64_t v291 = v345;
                  if (a10) {
                    uint64_t v291 = (void *)a10;
                  }
                  if (*((unsigned char *)v291 + 8))
                  {
                    uint64_t v12 = 0;
                    *a12 = v317;
                  }
                  else
                  {
                    memset(v359, 0, 24);
                    unsigned int v360 = 0;
                    uint64_t v362 = 0;
                    unint64_t v361 = 0;
                    sub_2483F26D4((uint64_t)v363);
                    uint64_t v365 = 0;
                    uint64_t v364 = 0;
                    *(void *)unint64_t v366 = 0;
                    unint64_t v387 = 0;
                    uint64_t v386 = 0;
                    uint64_t v388 = 0;
                    long long v395 = *(_OWORD *)(v267 + 88);
                    unint64_t v292 = *(const void **)(v267 + 104);
                    uint64_t v293 = *(void *)(v267 + 112);
                    memset(v396, 0, 24);
                    sub_24840331C(v396, v292, v293, (v293 - (uint64_t)v292) >> 3);
                    *((void *)&v396[1] + 1) = *(void *)(v267 + 128);
                    *(void *)((char *)&v396[1] + 13) = *(void *)(v267 + 133);
                    unint64_t v294 = (char *)*((void *)&v396[0] + 1);
                    if (*((void *)&v396[0] + 1) >= *(void *)&v396[1])
                    {
                      unint64_t v296 = *(char **)&v396[0];
                      uint64_t v297 = (uint64_t)(*((void *)&v396[0] + 1) - *(void *)&v396[0]) >> 3;
                      unint64_t v298 = v297 + 1;
                      if ((unint64_t)(v297 + 1) >> 61) {
                        sub_2483E92E8();
                      }
                      uint64_t v299 = *(void *)&v396[1] - *(void *)&v396[0];
                      if ((uint64_t)(*(void *)&v396[1] - *(void *)&v396[0]) >> 2 > v298) {
                        unint64_t v298 = v299 >> 2;
                      }
                      if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v300 = v298;
                      }
                      if (v300) {
                        unint64_t v300 = (unint64_t)sub_2483F04AC(v300);
                      }
                      else {
                        uint64_t v301 = 0;
                      }
                      uint64_t v312 = (unint64_t *)(v300 + 8 * v297);
                      *uint64_t v312 = v317;
                      float32x2_t v295 = v312 + 1;
                      while (v294 != v296)
                      {
                        unint64_t v313 = *((void *)v294 - 1);
                        v294 -= 8;
                        *--uint64_t v312 = v313;
                      }
                      *(void *)&v396[0] = v312;
                      *(void *)&v396[1] = v300 + 8 * v301;
                      if (v296) {
                        operator delete(v296);
                      }
                    }
                    else
                    {
                      **((void **)&v396[0] + 1) = v317;
                      float32x2_t v295 = v294 + 8;
                    }
                    *((void *)&v396[0] + 1) = v295;
                    sub_248443880((uint64_t)&v395, (0xCCCCCCCCCCCCCCCDLL * ((v322[1] - *v322) >> 3) + 1) >> 1, (uint64_t)v339, (uint64_t *)v359, (unint64_t *)&v386, a3, a5, a4);
                    sub_24844A2B4(v339[0], (uint64_t)v359, &v386, 0, a3, a5, a4);
                    if (*(void *)&v396[0]) {
                      operator delete(*(void **)&v396[0]);
                    }
                    if (v386) {
                      operator delete(v386);
                    }
                    *(void *)&long long v395 = &v364;
                    sub_2483F77FC((void ***)&v395);
                    if (v360)
                    {
                      unint64_t v361 = v360;
                      operator delete(v360);
                    }
                    *(void *)&long long v395 = v359;
                    sub_2484415B0((void ***)&v395);
                    uint64_t v12 = 0;
                  }
                  goto LABEL_474;
                }
                unsigned int v328 = a6;
                if (v260 >= v250 + v260)
                {
                  if (v260 <= v250 + v260) {
                    goto LABEL_441;
                  }
                  unint64_t v288 = &v258[8 * v261];
                }
                else
                {
                  unint64_t v276 = a11[2];
                  if (v250 > (v276 - v259) >> 3)
                  {
                    if (v261 >> 61) {
                      sub_2483E92E8();
                    }
                    uint64_t v277 = v253;
                    uint64_t v278 = v276 - v258;
                    if (v278 >> 2 > v261) {
                      unint64_t v261 = v278 >> 2;
                    }
                    if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v279 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v279 = v261;
                    }
                    uint64_t v280 = (char *)sub_2483F04AC(v279);
                    uint64_t v281 = &v280[8 * v260];
                    unint64_t v283 = &v280[8 * v282];
                    bzero(v281, 8 * v250);
                    unsigned int v284 = &v281[8 * v250];
                    uint64_t v286 = (char *)*a11;
                    unint64_t v285 = (char *)a11[1];
                    uint64_t v253 = v277;
                    if (v285 != *a11)
                    {
                      do
                      {
                        uint64_t v287 = *((void *)v285 - 1);
                        v285 -= 8;
                        *((void *)v281 - 1) = v287;
                        v281 -= 8;
                      }
                      while (v285 != v286);
                      unint64_t v285 = (char *)*a11;
                    }
                    *a11 = v281;
                    a11[1] = v284;
                    a11[2] = v283;
                    if (v285)
                    {
                      operator delete(v285);
                      uint64_t v253 = v277;
                    }
LABEL_441:
                    unint64_t v303 = 0;
                    uint64_t v267 = a2;
                    uint64_t v321 = v253;
                    while (1)
                    {
                      uint64_t v304 = *v330 + (v303 << 6);
                      unint64_t v305 = *(void *)(v304 + 40);
                      if (v305)
                      {
                        unint64_t v306 = *(void *)(v304 + 48);
                        if (v306)
                        {
                          if (v303 >= v330[9] && (v305 > *(void *)v267 || v306 > *(void *)v267)) {
                            goto LABEL_425;
                          }
                          unint64_t v325 = v303;
                          uint64_t v308 = *v330 + ((uint64_t)(int)v303 << 6);
                          uint64_t v397 = 0;
                          memset(v396, 0, sizeof(v396));
                          long long v395 = 0u;
                          sub_2483F0C3C((uint64_t)v359, *(void *)(v308 + 40), *(void *)(v308 + 48));
                          uint64_t v12 = v366[0];
                          if (!v366[0])
                          {
                            sub_2483F0E78((uint64_t)&v386, (uint64_t)v359);
                            sub_2483F7944((uint64_t)&v395, (uint64_t)&v386);
                            for (uint64_t i = 104; i != -16; i -= 40)
                              sub_2483E8DDC((uint64_t *)((char *)&v386 + i));
                            if (!v366[0])
                            {
                              for (uint64_t j = 13; j != -2; j -= 5)
                                sub_2483E8DDC((uint64_t *)&v359[j]);
                            }
                            unint64_t v383 = __PAIR64__(v328, v325);
                            __int16 v382 = 0;
                            BOOL v381 = 0;
                            unint64_t v380 = 0;
                            sub_24842253C((unint64_t *)&v378, v322, (uint64_t)&v383, (uint64_t *)&v380, (unsigned char *)&v382 + 1, (BOOL *)&v382, &v381);
                            sub_2483F23D8(v377, v380);
                            operator new();
                          }
                          for (uint64_t k = 104; k != -16; k -= 40)
                            sub_2483E8DDC((uint64_t *)((char *)&v396[-1] + k));
                          unint64_t v303 = v325;
                          uint64_t v267 = a2;
                          uint64_t v253 = v321;
                          if (v12) {
                            break;
                          }
                        }
                      }
                      if (++v303 == v253) {
                        goto LABEL_425;
                      }
                    }
LABEL_474:
                    v359[0] = v339;
                    sub_2483F87EC((void ***)v359);
                    if (v340[0]) {
                      operator delete(v340[0]);
                    }
                    goto LABEL_476;
                  }
                  uint64_t v302 = v253;
                  bzero(v259, 8 * v250);
                  uint64_t v253 = v302;
                  unint64_t v288 = &v259[8 * v250];
                }
                a11[1] = v288;
                goto LABEL_441;
              }
            }
            v339[0] = v324;
            sub_2483F23D8(&v378, 4 * *(int *)(v39 + 20) + 16);
            float v54 = fminf(*(float *)(v39 + 16), 1.0);
            double v55 = v54;
            uint64_t v56 = v49 + ((uint64_t)(int)v46 << 6);
            uint64_t v59 = *(void *)(v56 + 40);
            uint64_t v58 = (uint64_t *)(v56 + 40);
            uint64_t v57 = v59;
            uint64_t v335 = (int)v46;
            if (v54 > 0.0)
            {
              double v60 = fmin(1024.0 / (double)(unint64_t)(*(void *)(v49 + ((uint64_t)(int)v46 << 6) + 48) * v57), 1.0);
              if (v60 > v55) {
                double v55 = v60;
              }
            }
            unint64_t v331 = v46;
            unint64_t v383 = (unint64_t)(v55 * 4294967300.0);
            long long v384 = xmmword_2484DD0E0;
            v340[0] = &v384;
            v340[1] = &v383;
            uint64_t v327 = v49 + ((uint64_t)(int)v46 << 6);
            unint64_t v380 = *(void *)(v327 + 16) >> 2;
            uint64_t v61 = (v379 - (unsigned char *)v378) >> 2;
            uint64_t v62 = v61 - 16;
            sub_2484017B8((uint64_t)v359, v61 - 16, v57);
            uint64_t v12 = v361;
            if (v361)
            {
              uint64_t v39 = a2;
              unint64_t v46 = v331;
            }
            else
            {
              long long __p = *(_OWORD *)v359;
              long long v349 = *(_OWORD *)&v359[2];
              unint64_t v350 = v360;
              uint64_t v351 = v62;
              uint64_t v352 = v57;
              uint64_t v353 = 0;
              unint64_t v355 = &unk_26FC66948;
              long long v63 = v318[1];
              long long v356 = *v318;
              long long v357 = v63;
              long long v358 = v318[2];
              sub_248428438((uint64_t)v359, (uint64_t)&v355, *v58);
              int v329 = (unint64_t *)(v49 + (v335 << 6) + 48);
              unint64_t v64 = (unint64_t)(v55 * (double)*v329 * (double)(unint64_t)*v58 + 64.0);
              float v65 = *(void ***)a7;
              unint64_t v66 = (void **)*((void *)a7 + 1);
              while (v65 != v66)
              {
                uint64_t v67 = (unsigned char *)v65[1] - (unsigned char *)*v65;
                unint64_t v68 = v64 + (v67 >> 1);
                if (v68 > ((unsigned char *)v65[2] - (unsigned char *)*v65) >> 1)
                {
                  if ((v68 & 0x8000000000000000) != 0) {
                    sub_2483E92E8();
                  }
                  int v69 = (char *)sub_2483F0344(v68);
                  unint64_t v72 = (char *)*v65;
                  uint64_t v71 = (char *)v65[1];
                  unint64_t v73 = &v69[2 * (v67 >> 1)];
                  if (v71 != *v65)
                  {
                    do
                    {
                      __int16 v74 = *((_WORD *)v71 - 1);
                      v71 -= 2;
                      *((_WORD *)v73 - 1) = v74;
                      v73 -= 2;
                    }
                    while (v71 != v72);
                    uint64_t v71 = (char *)*v65;
                  }
                  char *v65 = v73;
                  v65[1] = &v69[2 * (v67 >> 1)];
                  v65[2] = &v69[2 * v70];
                  if (v71) {
                    operator delete(v71);
                  }
                }
                v65 += 3;
              }
              uint64_t v334 = v58;
              unint64_t v75 = (unint64_t *)*((void *)a7 + 6);
              unint64_t v76 = (unint64_t *)*((void *)a7 + 7);
              for (uint64_t m = v327; v75 != v76; v75 += 3)
                sub_24844A110(v75, v75[1] + v64 - *v75);
              unint64_t v78 = 3 * (v64 + ((uint64_t)(*((void *)a7 + 4) - *((void *)a7 + 3)) >> 1));
              unint64_t v79 = __clz(v78 >> 1) ^ 0x3F;
              if ((((v78 >> 1) - 1) & (v78 >> 1)) != 0) {
                char v80 = v79 + 1;
              }
              else {
                char v80 = v79;
              }
              if (1 << v80 != (uint64_t)(*((void *)a7 + 23) - *((void *)a7 + 22)) >> 2)
              {
                sub_2483F1FEC((char **)a7 + 22, 1 << v80, &dword_248550BC8);
                uint64_t v82 = *((void *)a7 + 3);
                uint64_t v81 = *((void *)a7 + 4);
                if (v81 != v82)
                {
                  unint64_t v83 = 0;
                  do
                  {
                    if (*(__int16 *)(v82 + 2 * v83) != -1)
                    {
                      sub_2484A19AC((uint64_t)a7, v83);
                      uint64_t v82 = *((void *)a7 + 3);
                      uint64_t v81 = *((void *)a7 + 4);
                    }
                    ++v83;
                  }
                  while (v83 < (v81 - v82) >> 1);
                }
              }
              LOBYTE(v354) = *((void *)a7 + 16) - *((void *)a7 + 15) != 4;
              uint64_t v386 = &v354;
              unint64_t v387 = &v378;
              uint64_t v388 = v327;
              unint64_t v389 = &v380;
              p_p = &__p;
              uint64_t v391 = v359;
              char v392 = a7;
              unint64_t v393 = v339;
              double v394 = v340;
              if (*v329)
              {
                unint64_t v84 = 0;
                do
                {
                  uint64_t v85 = *(void *)(m + 24) + *(void *)(m + 16) * v84;
                  sub_2484285D8(m, v84, a1, v331, (unsigned int *)&__p);
                  float v86 = v378;
                  *(_DWORD *)uint64_t v378 = v331;
                  v86[1] = a6;
                  v86[2] = v84;
                  v86[9] = 0;
                  unint64_t v87 = *v58;
                  if (v84 >= 2 && (v87 >= 9 ? (BOOL v88 = v351 == 0) : (BOOL v88 = 0), v88))
                  {
                    uint64_t v90 = 0;
                    char v91 = 1;
                    do
                    {
                      char v92 = v91;
                      sub_248498734((uint64_t)&v386, v85, v90, v84);
                      char v91 = 0;
                      uint64_t v90 = 1;
                    }
                    while ((v92 & 1) != 0);
                    unint64_t v95 = *v58;
                    unint64_t v96 = *v58 - 2;
                    if (v96 >= 3)
                    {
                      unint64_t v97 = 2;
                      do
                      {
                        unint64_t v98 = (int *)(v85 + 4 * v97);
                        if ((_BYTE)v354)
                        {
                          uint64_t v99 = 0;
                          uint64_t v100 = v98[~v380];
                          v93.i64[0] = *(void *)&v98[-v380];
                          uint64_t v101 = v93.i32[0];
                          uint64_t v103 = *(v98 - 2);
                          uint64_t v102 = *(v98 - 1);
                          uint64_t v104 = v98[-2 * v380];
                          uint64_t v336 = v98[2 - v380];
                          unint64_t v105 = (char *)v378;
                          if (v93.i32[0] >= 0) {
                            LODWORD(v106) = *(void *)&v98[-v380];
                          }
                          else {
                            uint64_t v106 = -(uint64_t)v93.i32[0];
                          }
                          *((_DWORD *)v378 + 3) = v97;
                          *((_DWORD *)v105 + 4) = v106;
                          if (v102 >= 0) {
                            LODWORD(v107) = v102;
                          }
                          else {
                            uint64_t v107 = -v102;
                          }
                          *((_DWORD *)v105 + 5) = v107;
                          *((_DWORD *)v105 + 6) = v93.i32[0];
                          int v108 = v102 - *((_DWORD *)v105 + 9);
                          *((_DWORD *)v105 + 7) = v102;
                          *((_DWORD *)v105 + 8) = v108;
                          int v109 = v93.i32[0] + v102 - v100;
                          *((_DWORD *)v105 + 9) = v109;
                          *((_DWORD *)v105 + 10) = v102 - v100;
                          v94.i32[0] = v100;
                          v110.i64[0] = vzip1q_s32(v94, v93).u64[0];
                          v110.i64[1] = __PAIR64__(v102, v110.u32[1]);
                          v111.i64[0] = v93.i64[0];
                          v111.i64[1] = __PAIR64__(v103, v104);
                          *(int32x4_t *)(v105 + 44) = vsubq_s32(v110, v111);
                          unint64_t v112 = v95 + 2;
                          if (v84) {
                            unint64_t v113 = v95 + 2;
                          }
                          else {
                            unint64_t v113 = 0;
                          }
                          unint64_t v114 = v113 + (int)v97;
                          if (v95 - 1 <= (int)v97) {
                            unint64_t v115 = v113 + (int)v97;
                          }
                          else {
                            unint64_t v115 = v114 + 1;
                          }
                          if (v97) {
                            unint64_t v116 = v114 - 1;
                          }
                          else {
                            unint64_t v116 = v113;
                          }
                          for (uint64_t n = 5; n != 17; n += 3)
                          {
                            unint64_t v118 = (*((_DWORD *)v359[n] + v115)
                                                + *((_DWORD *)v359[n] + v114)
                                                + *((_DWORD *)v359[n] + v116));
                            int v119 = __clz(v118 + 1) ^ 0x3F;
                            if (v119 <= 5) {
                              LOBYTE(v119) = 5;
                            }
                            v385.i32[v99] = ((*(_DWORD *)&v376[4 * (v118 >> (v119 - 5))
                                                                           + 16]
                                                          * *(_DWORD *)&v376[v99 * 4]) >> (v119 - 5))
                                          + 4;
                            ++v99;
                          }
                          if (v97)
                          {
                            if (v84) {
                              unint64_t v120 = 0;
                            }
                            else {
                              unint64_t v120 = v112;
                            }
                            unsigned int v121 = (int *)v367;
                            uint64_t v122 = *((int *)v367 + (int)v97 + v120 - 1);
                          }
                          else
                          {
                            uint64_t v122 = 0;
                            unsigned int v121 = (int *)v367;
                          }
                          uint64_t v149 = 0;
                          uint64_t v150 = v93.i32[1];
                          uint64_t v151 = 8 * v93.i32[0];
                          uint64_t v152 = 8 * v102;
                          uint64_t v153 = v121[v114];
                          uint64_t v154 = v121[v116];
                          uint64_t v155 = 8 * v93.i32[1];
                          uint64_t v156 = v122 + v153;
                          uint64_t v157 = v121[v115];
                          if (v153 >= 0) {
                            unint64_t v158 = v153;
                          }
                          else {
                            unint64_t v158 = -v153;
                          }
                          if (v122 >= 0) {
                            unint64_t v159 = v122;
                          }
                          else {
                            unint64_t v159 = -v122;
                          }
                          if (v158 <= v159) {
                            uint64_t v160 = v122;
                          }
                          else {
                            uint64_t v160 = v153;
                          }
                          if (v154 >= 0) {
                            unint64_t v161 = v154;
                          }
                          else {
                            unint64_t v161 = -v154;
                          }
                          if (v160 >= 0) {
                            unint64_t v162 = v160;
                          }
                          else {
                            unint64_t v162 = -v160;
                          }
                          if (v161 > v162) {
                            uint64_t v160 = v154;
                          }
                          if (v157 >= 0) {
                            unint64_t v163 = v157;
                          }
                          else {
                            unint64_t v163 = -v157;
                          }
                          if (v160 >= 0) {
                            unint64_t v164 = v160;
                          }
                          else {
                            unint64_t v164 = -v160;
                          }
                          if (v163 > v164) {
                            LODWORD(v160) = v157;
                          }
                          *((_DWORD *)v105 + 15) = v160;
                          v359[0] = (void *)(v152 - v151 + v155);
                          v359[1] = (void *)(v151 - (((v156 + v157) * v369) >> 5));
                          v359[2] = (void *)(v152 - (((v156 + v154) * v370) >> 5));
                          v359[3] = (void *)(v151
                                           - ((v371 * (uint64_t)(int)v154
                                             + v372 * (uint64_t)(int)v153
                                             + v373 * (uint64_t)(int)v157
                                             + 8 * ((v104 - v93.i32[0]) * v374 + (v100 - v102) * v375)) >> 5));
                          int32x4_t v94 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v385)) ^ 0x1F) - 4));
                          int32x4_t v93 = (int32x4_t)vshlq_u32((uint32x4_t)v385, (uint32x4_t)v94);
                          *(int32x4_t *)uint64_t v377 = v93;
                          unsigned int v165 = vaddvq_s32(v93);
                          uint64_t v166 = (v165 >> 1) - 1;
                          do
                          {
                            v166 += (void)v359[v149] * *((unsigned int *)v377 + v149);
                            ++v149;
                          }
                          while (v149 != 4);
                          uint64_t v167 = 0;
                          uint64_t v168 = (v166 * *(unsigned int *)&v376[4 * v165 + 12]) >> 24;
                          uint64_t v169 = v154 ^ v153 | v122 ^ v153;
                          if (v155 <= v151) {
                            uint64_t v170 = 8 * v101;
                          }
                          else {
                            uint64_t v170 = v155;
                          }
                          if (v152 > v170) {
                            uint64_t v170 = 8 * v102;
                          }
                          if (v151 >= v155) {
                            uint64_t v151 = v155;
                          }
                          if (v151 < v152) {
                            uint64_t v152 = v151;
                          }
                          if (v168 < v170) {
                            uint64_t v170 = v168;
                          }
                          if (v152 > v170) {
                            uint64_t v170 = v152;
                          }
                          if (v169 <= 0) {
                            uint64_t v168 = v170;
                          }
                          uint64_t v171 = v150 + v101;
                          if (v150 + v101 < 0 != __OFADD__(v150, v101)) {
                            ++v171;
                          }
                          uint64_t v172 = v100 + v101;
                          if (v100 + v101 < 0 != __OFADD__(v100, v101)) {
                            ++v172;
                          }
                          if (v100 + v102 < 0 != __OFADD__(v100, v102)) {
                            uint64_t v173 = v100 + v102 + 1;
                          }
                          else {
                            uint64_t v173 = v100 + v102;
                          }
                          if (v101 + v102 < 0 != __OFADD__(v101, v102)) {
                            uint64_t v174 = v101 + v102 + 1;
                          }
                          else {
                            uint64_t v174 = v101 + v102;
                          }
                          if ((int)v101 >= (int)v102) {
                            int v175 = v102;
                          }
                          else {
                            int v175 = v101;
                          }
                          if ((int)v102 <= (int)v101) {
                            int v176 = v101;
                          }
                          else {
                            int v176 = v102;
                          }
                          if (v175 <= (int)v100) {
                            int v177 = v109;
                          }
                          else {
                            int v177 = v176;
                          }
                          BOOL v53 = v176 < (int)v100;
                          unsigned int v360 = (void *)v168;
                          uint64_t v178 = (v168 + 3) >> 3;
                          uint64_t v179 = v171 >> 1;
                          uint64_t v180 = v173 >> 1;
                          uint64_t v181 = v174 >> 1;
                          if (v53) {
                            int v182 = v175;
                          }
                          else {
                            int v182 = v177;
                          }
                          uint64_t v183 = v182;
                          unint64_t v184 = v101 - v100;
                          if (v101 - v100 < 0) {
                            unint64_t v184 = v100 - v101;
                          }
                          unint64_t v185 = v102 - v100;
                          if (v102 - v100 < 0) {
                            unint64_t v185 = v100 - v102;
                          }
                          if (v184 >= v185) {
                            uint64_t v186 = v101;
                          }
                          else {
                            uint64_t v186 = v102;
                          }
                          uint64_t v58 = v334;
                          uint64_t v187 = 6 * (int)v101 - v102 + 8 * v102 + v103 + 3 * v150 - 2 * v104 + v336;
                          uint64_t v188 = v187 + 8;
                          uint64_t v189 = v187 + 23;
                          if (v188 >= 0) {
                            uint64_t v189 = v188;
                          }
                          uint64_t v190 = v189 >> 4;
                          do
                          {
                            switch((int)v167)
                            {
                              case 1:
                                uint64_t v191 = v102;
                                break;
                              case 2:
                                uint64_t v191 = v101;
                                break;
                              case 3:
                                uint64_t v191 = v181;
                                break;
                              case 4:
                                uint64_t v191 = v186;
                                break;
                              case 5:
                                uint64_t v191 = v183;
                                break;
                              case 6:
                                uint64_t v191 = v178;
                                break;
                              case 7:
                                uint64_t v191 = v150;
                                break;
                              case 8:
                                uint64_t v191 = v100;
                                break;
                              case 9:
                                uint64_t v191 = v103;
                                break;
                              case 10:
                                uint64_t v191 = v180;
                                break;
                              case 11:
                                uint64_t v191 = v172 >> 1;
                                break;
                              case 12:
                                uint64_t v191 = v179;
                                break;
                              case 13:
                                uint64_t v191 = v190;
                                break;
                              default:
                                uint64_t v191 = 0;
                                break;
                            }
                            *((void *)&v396[-1] + v167++) = v191;
                          }
                          while (v167 != 14);
                        }
                        else
                        {
                          uint64_t v123 = 0;
                          uint64_t v124 = **((int **)a7 + 15);
                          uint64_t v125 = v98[~v380];
                          v93.i64[0] = *(void *)&v98[-v380];
                          uint64_t v126 = v93.i32[0];
                          uint64_t v127 = *(v98 - 2);
                          uint64_t v128 = *(v98 - 1);
                          uint64_t v129 = v98[-2 * v380];
                          uint64_t v130 = v98[2 - v380];
                          unint64_t v131 = (char *)v378;
                          if (v93.i32[0] >= 0) {
                            LODWORD(v132) = *(void *)&v98[-v380];
                          }
                          else {
                            uint64_t v132 = -(uint64_t)v93.i32[0];
                          }
                          *((_DWORD *)v378 + 3) = v97;
                          *((_DWORD *)v131 + 4) = v132;
                          if (v128 >= 0) {
                            LODWORD(v133) = v128;
                          }
                          else {
                            uint64_t v133 = -v128;
                          }
                          *((_DWORD *)v131 + 5) = v133;
                          *((_DWORD *)v131 + 6) = v93.i32[0];
                          int v134 = v128 - *((_DWORD *)v131 + 9);
                          *((_DWORD *)v131 + 7) = v128;
                          *((_DWORD *)v131 + 8) = v134;
                          int v135 = v93.i32[0] + v128 - v125;
                          *((_DWORD *)v131 + 9) = v135;
                          *((_DWORD *)v131 + 10) = v128 - v125;
                          v94.i32[0] = v125;
                          v136.i64[0] = vzip1q_s32(v94, v93).u64[0];
                          v136.i64[1] = __PAIR64__(v128, v136.u32[1]);
                          v137.i64[0] = v93.i64[0];
                          v137.i64[1] = __PAIR64__(v127, v129);
                          uint64_t v337 = v127;
                          *(int32x4_t *)(v131 + 44) = vsubq_s32(v136, v137);
                          unint64_t v138 = v95 + 2;
                          if (v84) {
                            unint64_t v139 = v95 + 2;
                          }
                          else {
                            unint64_t v139 = 0;
                          }
                          unint64_t v140 = v139 + (int)v97;
                          if (v95 - 1 <= (int)v97) {
                            unint64_t v141 = v139 + (int)v97;
                          }
                          else {
                            unint64_t v141 = v140 + 1;
                          }
                          if (v97) {
                            unint64_t v142 = v140 - 1;
                          }
                          else {
                            unint64_t v142 = v139;
                          }
                          for (iuint64_t i = 5; ii != 17; ii += 3)
                          {
                            unint64_t v144 = (*((_DWORD *)v359[ii] + v141)
                                                + *((_DWORD *)v359[ii] + v140)
                                                + *((_DWORD *)v359[ii] + v142));
                            int v145 = __clz(v144 + 1) ^ 0x3F;
                            if (v145 <= 5) {
                              LOBYTE(v145) = 5;
                            }
                            v385.i32[v123] = ((*(_DWORD *)&v376[4 * (v144 >> (v145 - 5))
                                                                            + 16]
                                                           * *(_DWORD *)&v376[v123 * 4]) >> (v145 - 5))
                                           + 4;
                            ++v123;
                          }
                          uint64_t v332 = v130;
                          if (v97)
                          {
                            if (v84) {
                              unint64_t v146 = 0;
                            }
                            else {
                              unint64_t v146 = v138;
                            }
                            unint64_t v147 = (int *)v367;
                            uint64_t v148 = *((int *)v367 + (int)v97 + v146 - 1);
                          }
                          else
                          {
                            uint64_t v148 = 0;
                            unint64_t v147 = (int *)v367;
                          }
                          uint64_t v192 = 0;
                          uint64_t v193 = v93.i32[1];
                          uint64_t v194 = 8 * v93.i32[0];
                          uint64_t v195 = 8 * v128;
                          uint64_t v196 = v147[v140];
                          uint64_t v197 = v147[v142];
                          uint64_t v198 = 8 * v93.i32[1];
                          uint64_t v199 = v148 + v196;
                          uint64_t v200 = v147[v141];
                          if (v196 >= 0) {
                            unint64_t v201 = v196;
                          }
                          else {
                            unint64_t v201 = -v196;
                          }
                          if (v148 >= 0) {
                            unint64_t v202 = v148;
                          }
                          else {
                            unint64_t v202 = -v148;
                          }
                          if (v201 <= v202) {
                            uint64_t v203 = v148;
                          }
                          else {
                            uint64_t v203 = v196;
                          }
                          if (v197 >= 0) {
                            unint64_t v204 = v197;
                          }
                          else {
                            unint64_t v204 = -v197;
                          }
                          if (v203 >= 0) {
                            unint64_t v205 = v203;
                          }
                          else {
                            unint64_t v205 = -v203;
                          }
                          if (v204 <= v205) {
                            uint64_t v206 = v203;
                          }
                          else {
                            uint64_t v206 = v197;
                          }
                          if (v200 >= 0) {
                            unint64_t v207 = v200;
                          }
                          else {
                            unint64_t v207 = -v200;
                          }
                          if (v206 >= 0) {
                            unint64_t v208 = v206;
                          }
                          else {
                            unint64_t v208 = -v206;
                          }
                          if (v207 > v208) {
                            LODWORD(v206) = v200;
                          }
                          *((_DWORD *)v131 + 15) = v206;
                          v359[0] = (void *)(v195 - v194 + v198);
                          v359[1] = (void *)(v194 - (((v199 + v200) * v369) >> 5));
                          v359[2] = (void *)(v195 - (((v199 + v197) * v370) >> 5));
                          v359[3] = (void *)(v194
                                           - ((v371 * (uint64_t)(int)v197
                                             + v372 * (uint64_t)(int)v196
                                             + v373 * (uint64_t)(int)v200
                                             + 8 * ((v129 - v93.i32[0]) * v374 + (v125 - v128) * v375)) >> 5));
                          int32x4_t v94 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v385)) ^ 0x1F) - 4));
                          int32x4_t v93 = (int32x4_t)vshlq_u32((uint32x4_t)v385, (uint32x4_t)v94);
                          *(int32x4_t *)uint64_t v377 = v93;
                          unsigned int v209 = vaddvq_s32(v93);
                          uint64_t v210 = (v209 >> 1) - 1;
                          do
                          {
                            v210 += (void)v359[v192] * *((unsigned int *)v377 + v192);
                            ++v192;
                          }
                          while (v192 != 4);
                          uint64_t v211 = (v210 * *(unsigned int *)&v376[4 * v209 + 12]) >> 24;
                          uint64_t v212 = v197 ^ v196 | v148 ^ v196;
                          if (v198 <= v194) {
                            uint64_t v213 = 8 * v126;
                          }
                          else {
                            uint64_t v213 = v198;
                          }
                          if (v195 > v213) {
                            uint64_t v213 = 8 * v128;
                          }
                          if (v194 >= v198) {
                            uint64_t v214 = v198;
                          }
                          else {
                            uint64_t v214 = 8 * v126;
                          }
                          if (v214 >= v195) {
                            uint64_t v214 = 8 * v128;
                          }
                          if (v211 < v213) {
                            uint64_t v213 = v211;
                          }
                          if (v214 > v213) {
                            uint64_t v213 = v214;
                          }
                          if (v212 <= 0) {
                            long long v215 = (void *)v213;
                          }
                          else {
                            long long v215 = (void *)v211;
                          }
                          unsigned int v360 = v215;
                          uint64_t v58 = v334;
                          switch((int)v124)
                          {
                            case 1:
                              break;
                            case 2:
                              uint64_t v128 = v126;
                              break;
                            case 3:
                              BOOL v223 = __OFADD__(v126, v128);
                              uint64_t v217 = v126 + v128;
                              char v216 = (v217 < 0) ^ v223;
                              goto LABEL_331;
                            case 4:
                              uint64_t v224 = v126 + v128 - v125;
                              unint64_t v225 = v224 - v128;
                              if (v224 - v128 < 0) {
                                unint64_t v225 = v128 - v224;
                              }
                              uint64_t v226 = v224 - v126;
                              if (v226 < 0) {
                                uint64_t v226 = -v226;
                              }
                              if (v225 >= v226) {
                                uint64_t v128 = v126;
                              }
                              break;
                            case 5:
                              if ((int)v126 >= (int)v128) {
                                int v218 = v128;
                              }
                              else {
                                int v218 = v126;
                              }
                              if ((int)v128 <= (int)v126) {
                                LODWORD(v128) = v126;
                              }
                              if (v218 <= (int)v125) {
                                int v219 = v135;
                              }
                              else {
                                int v219 = v128;
                              }
                              if ((int)v128 >= (int)v125) {
                                LODWORD(v128) = v219;
                              }
                              else {
                                LODWORD(v128) = v218;
                              }
                              uint64_t v128 = (int)v128;
                              break;
                            case 6:
                              uint64_t v128 = ((uint64_t)v215 + 3) >> 3;
                              break;
                            case 7:
                              uint64_t v128 = v193;
                              break;
                            case 8:
                              uint64_t v128 = v125;
                              break;
                            case 9:
                              uint64_t v128 = v337;
                              break;
                            case 10:
                              BOOL v223 = __OFADD__(v125, v128);
                              uint64_t v217 = v125 + v128;
                              char v216 = (v217 < 0) ^ v223;
                              goto LABEL_331;
                            case 11:
                              uint64_t v217 = v125 + v126;
                              char v216 = (v125 + v126 < 0) ^ __OFADD__(v125, v126);
                              goto LABEL_331;
                            case 12:
                              uint64_t v217 = v193 + v126;
                              char v216 = (v193 + v126 < 0) ^ __OFADD__(v193, v126);
LABEL_331:
                              if (v216) {
                                ++v217;
                              }
                              uint64_t v128 = v217 >> 1;
                              break;
                            case 13:
                              uint64_t v220 = 6 * (int)v126 - v128 + 8 * v128 + v337 + 3 * v193 - 2 * v129 + v332;
                              uint64_t v221 = v220 + 8;
                              uint64_t v222 = v220 + 23;
                              if (v221 >= 0) {
                                uint64_t v222 = v221;
                              }
                              uint64_t v128 = v222 >> 4;
                              break;
                            default:
                              uint64_t v128 = 0;
                              break;
                          }
                          *((void *)&v396[-1] + v124) = v128;
                        }
                        ++*(void *)v339[0];
                        unint64_t v227 = v340[0];
                        unint64_t v228 = *((void *)v340[0] + 1);
                        unint64_t v229 = v228 + *(void *)v340[0];
                        unint64_t v230 = (v228 >> 5) ^ ((*(void *)v340[0] ^ (*(void *)v340[0] << 23)) >> 18) ^ v228 ^ *(void *)v340[0] ^ (*(void *)v340[0] << 23);
                        *(void *)v340[0] = v228;
                        v227[1] = v230;
                        if (*(void *)v340[1] >= HIDWORD(v229)) {
                          sub_2484A1B84((uint64_t)a7, *v98, &v378, (uint64_t)&v395);
                        }
                        uint64_t v231 = 0;
                        unint64_t v95 = *v58;
                        uint64_t v232 = *v58 + 2;
                        if (v84) {
                          uint64_t v233 = 0;
                        }
                        else {
                          uint64_t v233 = *v58 + 2;
                        }
                        uint64_t v234 = 8 * *v98;
                        unint64_t v235 = v233 + v97;
                        *((_DWORD *)v367 + v235) = v360 - v234;
                        uint64_t v236 = ++v97 + (((uint64_t)(v84 << 63) >> 63) & v232);
                        long long v237 = &v361;
                        do
                        {
                          unint64_t v238 = (char *)v359[v231] - v234;
                          if ((uint64_t)v238 < 0) {
                            unint64_t v238 = (char *)(v234 - (void)v359[v231]);
                          }
                          unint64_t v239 = (unint64_t)(v238 + 3) >> 3;
                          unint64_t v240 = *v237;
                          v237 += 3;
                          v240[v235] = v239;
                          v240[v236] += v239;
                          ++v231;
                        }
                        while (v231 != 4);
                        unint64_t v96 = v95 - 2;
                      }
                      while (v97 < v95 - 2);
                      uint64_t m = v327;
                    }
                    if (v96 < v95)
                    {
                      do
                        sub_248498734((uint64_t)&v386, v85, v96++, v84);
                      while (v96 < *v58);
                    }
                  }
                  else if (v87)
                  {
                    unint64_t v89 = 0;
                    do
                      sub_248498734((uint64_t)&v386, v85, v89++, v84);
                    while (v89 < *v58);
                  }
                  ++v84;
                }
                while (v84 < *v329);
              }
              if (v367)
              {
                size_t v368 = v367;
                operator delete(v367);
              }
              uint64_t v241 = 0;
              unint64_t v46 = v331;
              do
              {
                unint64_t v242 = *(void **)&v366[v241 - 2];
                if (v242)
                {
                  *(void *)&v366[v241] = v242;
                  operator delete(v242);
                }
                v241 -= 6;
              }
              while (v241 != -24);
              uint64_t v243 = *((void *)&v349 + 1);
              *((void *)&v349 + 1) = 0;
              if (v243)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v243 - 24));
                free(*(void **)(v243 - 32));
              }
              uint64_t v12 = 0;
              uint64_t v39 = a2;
            }
            if (v378)
            {
              int v379 = v378;
              operator delete(v378);
            }
            uint64_t v47 = v323;
            if (v12) {
              goto LABEL_476;
            }
          }
        }
        if (++v46 == v47) {
          goto LABEL_363;
        }
      }
    }
    unint64_t v45 = v37;
    if (sub_2484A132C((uint64_t)v343, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 76)))
    {
      uint64_t v12 = 1;
      goto LABEL_476;
    }
    uint64_t v12 = sub_2484A1894((uint64_t)v343, a2 + 24, *(_DWORD *)(a2 + 76));
    if (!v12)
    {
      memset(v359, 0, 24);
      long long v395 = 0uLL;
      *(void *)&v396[0] = 0;
      unint64_t v387 = 0;
      uint64_t v386 = 0;
      uint64_t v388 = 0;
      long long __p = 0uLL;
      *(void *)&long long v349 = 0;
      sub_2484A3370(a1, a2, 0, (uint64_t)&v386, (uint64_t)&__p, (uint64_t)v359, (uint64_t)&v395);
      sub_2484A2040((uint64_t)v343, &v355, 0, 0, (char **)&v386, (char **)&__p, (int **)v359, (int **)&v395, *(void *)(a2 + 56));
      if ((void)__p) {
        operator delete((void *)__p);
      }
      unint64_t v37 = v45;
      if (v386) {
        operator delete(v386);
      }
      if ((void)v395) {
        operator delete((void *)v395);
      }
      if (v359[0]) {
        operator delete(v359[0]);
      }
      a7 = v343;
      goto LABEL_58;
    }
LABEL_476:
    sub_24847B828((char **)v343);
LABEL_477:
    v345[0] = &unk_26FC65988;
    v359[0] = v347;
    sub_2483FDBFC((void ***)v359);
    return v12;
  }
  return 1;
}

void sub_2484A0B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  STACK[0x568] = 0;
  if (v47)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v47 - 24));
    free(*(void **)(v47 - 32));
  }
  MEMORY[0x24C579F90](a35, 0x1000C408E7E3807);
  uint64_t v50 = (void *)STACK[0x4C0];
  if (STACK[0x4C0])
  {
    STACK[0x4C8] = (unint64_t)v50;
    operator delete(v50);
  }
  if (STACK[0x4E0]) {
    operator delete((void *)STACK[0x4E0]);
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(v48 - 256 + i));
  *(void *)(v48 - 256) = &a40;
  sub_2483F87EC((void ***)(v48 - 256));
  if (a43) {
    operator delete(a43);
  }
  sub_24847B828((char **)&a47);
  STACK[0x200] = (unint64_t)&unk_26FC65988;
  a47 = (uint64_t)&STACK[0x248];
  sub_2483FDBFC((void ***)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_2484A0E7C(void *a1, long long *a2, unint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, _OWORD *a7, unint64_t *a8, uint64_t *a9, uint64_t a10, void **a11, unint64_t *a12)
{
  if (a1[6]) {
    BOOL v12 = a1[7] == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    return 0;
  }
  long long v28 = *a2;
  uint64_t v23 = *((void *)a2 + 2);
  uint64_t v22 = (const void *)*((void *)a2 + 3);
  uint64_t v29 = v23;
  int v30 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  sub_24844CB80(&v30, v22, *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - (void)v22) >> 2);
  long long v24 = a2[4];
  long long v33 = a2[3];
  long long v34 = v24;
  uint64_t v35 = *((void *)a2 + 10);
  long long v36 = *(long long *)((char *)a2 + 88);
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  int v25 = (const void *)*((void *)a2 + 13);
  uint64_t v26 = *((void *)a2 + 14);
  long long __p = 0;
  sub_24840331C(&__p, v25, v26, (v26 - (uint64_t)v25) >> 3);
  v40[0] = *((void *)a2 + 16);
  *(void *)((char *)v40 + 5) = *(void *)((char *)a2 + 133);
  char v41 = *((unsigned char *)a2 + 144);
  if (v34 == -1) {
    LODWORD(v34) = 5;
  }
  uint64_t v13 = sub_24849DEF8(a1, (uint64_t)&v28, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (__p)
  {
    unint64_t v38 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
  return v13;
}

void sub_2484A0FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
}

float sub_2484A1008(int32x4_t *a1, unint64_t a2)
{
  if (a2)
  {
    signed int v2 = 0;
    unint64_t v3 = 4 * a2;
    unint64_t v4 = a1;
    do
    {
      __int32 v5 = v4->i32[0];
      unint64_t v4 = (int32x4_t *)((char *)v4 + 4);
      v2 += v5;
      v3 -= 4;
    }
    while (v3);
    int32x4_t v6 = vdupq_n_s32(v2);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x39800000u);
    int32x4_t v8 = vdupq_n_s32(0xC0D55555);
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    float32x4_t v15 = 0uLL;
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V20.4S, #-1.0 }
    do
    {
      int32x4_t v22 = *a1++;
      float32x4_t v23 = vcvtq_f32_s32(v22);
      int32x4_t v24 = (int32x4_t)vmaxnmq_f32(vmulq_n_f32(v23, 1.0 / (float)v2), v7);
      int32x4_t v25 = vaddq_s32(v24, v8);
      float32x4_t v26 = vaddq_f32((float32x4_t)vsubq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)v25, v16)), _Q20);
      float32x4_t v15 = vsubq_f32(v15, vmulq_f32((float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(vdivq_f32(vmlaq_f32(v13, v26, vmlaq_f32(v10, v9, v26)), vmlaq_f32(v14, v26, vmlaq_f32(v12, v11, v26))), vcvtq_f32_s32(vshrq_n_s32(v25, 0x17uLL))), (int8x16_t)vceqq_s32(v22, v6)), v23));
      v3 += 4;
    }
    while (v3 < a2);
  }
  else
  {
    float32x4_t v15 = 0uLL;
  }
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15));
}

uint64_t sub_2484A1120(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    unint64_t v3 = *(uint64_t **)result;
    unint64_t v4 = *(uint64_t **)(result + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *v3;
      v3 += 3;
      __int16 v6 = *(_WORD *)(v5 + 2 * a2);
      *(_WORD *)(v5 + 2 * a2) = *(_WORD *)(v5 + 2 * a3);
      *(_WORD *)(v5 + 2 * a3) = v6;
    }
    float32x4_t v7 = *(uint64_t **)(result + 48);
    int32x4_t v8 = *(uint64_t **)(result + 56);
    while (v7 != v8)
    {
      uint64_t v9 = *v7;
      v7 += 3;
      char v10 = *(unsigned char *)(v9 + a2);
      *(unsigned char *)(v9 + a2) = *(unsigned char *)(v9 + a3);
      *(unsigned char *)(v9 + a3) = v10;
    }
    uint64_t v11 = *(void *)(result + 24);
    __int16 v12 = *(_WORD *)(v11 + 2 * a2);
    *(_WORD *)(v11 + 2 * a2) = *(_WORD *)(v11 + 2 * a3);
    *(_WORD *)(v11 + 2 * a3) = v12;
  }
  return result;
}

void sub_2484A1188(char **a1, unint64_t a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    BOOL v18 = &v5[12 * a2];
    goto LABEL_23;
  }
  int32x4_t v8 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 2) >= v7)
  {
    BOOL v18 = &v4[12 * v7];
    uint64_t v19 = 12 * a2 - 4 * ((v4 - *a1) >> 2);
    uint64_t v20 = v4 + 8;
    do
    {
      *uint64_t v20 = 0;
      *((void *)v20 - 1) = 2139095039;
      v20 += 3;
      v19 -= 12;
    }
    while (v19);
LABEL_23:
    a1[1] = v18;
    return;
  }
  if (a2 > 0x1555555555555555) {
    sub_2483E92E8();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 2);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x1555555555555555;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > 0x1555555555555555) {
    sub_2483E9338();
  }
  __int16 v12 = (char *)operator new(12 * v11);
  float32x4_t v13 = &v12[12 * v6];
  float32x4_t v14 = v13 + 8;
  uint64_t v15 = 12 * a2 - 12 * v6;
  do
  {
    *float32x4_t v14 = 0;
    *((void *)v14 - 1) = 2139095039;
    v14 += 3;
    v15 -= 12;
  }
  while (v15);
  if (v4 != v5)
  {
    do
    {
      uint64_t v16 = *(void *)(v4 - 12);
      v4 -= 12;
      int v17 = *((_DWORD *)v4 + 2);
      *(void *)(v13 - 12) = v16;
      v13 -= 12;
      *((_DWORD *)v13 + 2) = v17;
    }
    while (v4 != v5);
    unint64_t v4 = v5;
  }
  *a1 = v13;
  a1[1] = &v12[12 * a2];
  a1[2] = &v12[12 * v11];
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t sub_2484A132C(uint64_t a1, int a2, int a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (a3 == 1)
  {
    LODWORD(v46) = 6;
    sub_2484A1760((void *)(a1 + 120), (char *)&v46, (char *)&v46 + 4, 1uLL);
    unint64_t v4 = 1;
  }
  else
  {
    if (a2 == 6 && a3 == 2) {
      return 1;
    }
    if (a2 == 14)
    {
      uint64_t v46 = 0x500000006;
      sub_2484A1760((void *)(a1 + 120), (char *)&v46, (char *)&v47, 2uLL);
    }
    else if (a2 == 15)
    {
      uint64_t v7 = 0;
      int32x4_t v8 = *(char **)(a1 + 128);
      do
      {
        unint64_t v9 = *(void *)(a1 + 136);
        if ((unint64_t)v8 >= v9)
        {
          unint64_t v11 = *(char **)(a1 + 120);
          uint64_t v12 = (v8 - v11) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            sub_2483E92E8();
          }
          uint64_t v14 = v9 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v15 = (unint64_t)sub_2483E9300(v15);
            unint64_t v11 = *(char **)(a1 + 120);
            int32x4_t v8 = *(char **)(a1 + 128);
          }
          else
          {
            uint64_t v16 = 0;
          }
          int v17 = (_DWORD *)(v15 + 4 * v12);
          *int v17 = v7;
          uint64_t v10 = (char *)(v17 + 1);
          while (v8 != v11)
          {
            int v18 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *--int v17 = v18;
          }
          *(void *)(a1 + 120) = v17;
          *(void *)(a1 + 128) = v10;
          *(void *)(a1 + 136) = v15 + 4 * v16;
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(_DWORD *)int32x4_t v8 = v7;
          uint64_t v10 = v8 + 4;
        }
        *(void *)(a1 + 128) = v10;
        ++v7;
        int32x4_t v8 = v10;
      }
      while (v7 != 14);
      uint64_t v19 = *(void *)(a1 + 120);
      int32x2_t v20 = *(int32x2_t *)v19;
      *(int32x2_t *)uint64_t v19 = vrev64_s32(*(int32x2_t *)(v19 + 20));
      *(int32x2_t *)(v19 + 20) = vrev64_s32(v20);
    }
    else
    {
      LODWORD(v46) = a2;
      sub_2484A1760((void *)(a1 + 120), (char *)&v46, (char *)&v46 + 4, 1uLL);
    }
    if (a3 == 2)
    {
      int32x4_t v22 = *(char **)(a1 + 120);
      uint64_t v21 = *(char **)(a1 + 128);
      if (v22 != v21)
      {
        while (*(_DWORD *)v22 != 6)
        {
          v22 += 4;
          if (v22 == v21)
          {
            int32x4_t v22 = *(char **)(a1 + 128);
            break;
          }
        }
      }
      if (v22 != v21)
      {
        int64_t v23 = v21 - (v22 + 4);
        if (v21 != v22 + 4) {
          memmove(v22, v22 + 4, v21 - (v22 + 4));
        }
        uint64_t v21 = &v22[v23];
        *(void *)(a1 + 128) = &v22[v23];
      }
    }
    else
    {
      uint64_t v21 = *(char **)(a1 + 128);
    }
    unint64_t v4 = (uint64_t)&v21[-*(void *)(a1 + 120)] >> 2;
  }
  int32x4_t v25 = *(void **)a1;
  int32x4_t v24 = *(void **)(a1 + 8);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *(void *)a1) >> 3);
  unint64_t v27 = v4 - v26;
  if (v4 > v26)
  {
    uint64_t v28 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v24) >> 3) >= v27)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v27 - 24) / 0x18) + 24);
      uint64_t result = 0;
      *(void *)(a1 + 8) = &v24[3 * ((24 * v27 - 24) / 0x18) + 3];
      return result;
    }
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v25) >> 3);
    if (2 * v29 > v4) {
      unint64_t v4 = 2 * v29;
    }
    if (v29 >= 0x555555555555555) {
      unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v30 = v4;
    }
    if (v30 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E9338();
    }
    int v31 = (char *)operator new(24 * v30);
    uint64_t v32 = &v31[24 * v26];
    long long v33 = &v31[24 * v30];
    size_t v34 = 24 * ((24 * v27 - 24) / 0x18) + 24;
    bzero(v32, v34);
    uint64_t v35 = &v32[v34];
    if (v24 != v25)
    {
      do
      {
        long long v36 = v32;
        *((void *)v32 - 1) = 0;
        long long v37 = *(_OWORD *)(v24 - 3);
        v24 -= 3;
        *(_OWORD *)(v32 - 24) = v37;
        v32 -= 24;
        *((void *)v36 - 1) = v24[2];
        *int32x4_t v24 = 0;
        v24[1] = 0;
        void v24[2] = 0;
      }
      while (v24 != v25);
      unint64_t v38 = *(void **)a1;
      int32x4_t v24 = *(void **)(a1 + 8);
      *(void *)a1 = v32;
      *(void *)(a1 + 8) = v35;
      *(void *)(a1 + 16) = v33;
      if (v24 != v38)
      {
        uint64_t v39 = v24;
        do
        {
          char v41 = (void *)*(v39 - 3);
          v39 -= 3;
          unint64_t v40 = v41;
          if (v41)
          {
            *(v24 - 2) = v40;
            operator delete(v40);
          }
          int32x4_t v24 = v39;
        }
        while (v39 != v38);
        int32x4_t v24 = v38;
      }
      if (!v24) {
        return 0;
      }
      goto LABEL_68;
    }
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = v35;
    *(void *)(a1 + 16) = v33;
    if (v24) {
LABEL_68:
    }
      operator delete(v24);
    return 0;
  }
  if (v4 >= v26) {
    return 0;
  }
  uint64_t v42 = &v25[3 * v4];
  if (v24 != v42)
  {
    unint64_t v43 = *(void **)(a1 + 8);
    do
    {
      unint64_t v45 = (void *)*(v43 - 3);
      v43 -= 3;
      uint64_t v44 = v45;
      if (v45)
      {
        *(v24 - 2) = v44;
        operator delete(v44);
      }
      int32x4_t v24 = v43;
    }
    while (v43 != v42);
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = v42;
  return result;
}

void *sub_2484A1760(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 62) {
      sub_2483E92E8();
    }
    uint64_t result = sub_2483E9300(v11);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + 4 * v12;
    size_t v13 = a3 - v6;
    if (v13) {
      uint64_t result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v14 = (void **)(result + 1);
  unint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 2;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int v18 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v18, __src, v13);
    goto LABEL_21;
  }
  int v17 = &__src[4 * v16];
  if (v15 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v15 - v9);
    unint64_t v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    int v18 = v9;
    __src = v17;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v14 = &v9[v13];
  return result;
}

uint64_t sub_2484A1894(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (char *)(a1 + 96);
  if (a1 + 96 != a2) {
    sub_2483FB040((char *)(a1 + 96), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  if (!a3)
  {
    int __src = 9;
    unint64_t v6 = &v16;
    p_src = &__src;
LABEL_8:
    sub_248473074(v5, (char *)p_src, (uint64_t)v6, 1uLL);
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    if (a3 != 1) {
      goto LABEL_15;
    }
    int v16 = 15;
    unint64_t v6 = (int *)&v17;
    p_src = &v16;
    goto LABEL_8;
  }
  uint64_t v8 = *(__int32 **)(a1 + 104);
  unint64_t v9 = wmemchr(*(__int32 **)(a1 + 96), 15, ((uint64_t)v8 - *(void *)(a1 + 96)) >> 2);
  if (v9) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = *(__int32 **)(a1 + 104);
  if (v8 != v10)
  {
    int64_t v11 = (char *)v10 - (char *)(v8 + 1);
    if (v10 != v8 + 1) {
      memmove(v8, v8 + 1, (char *)v10 - (char *)(v8 + 1));
    }
    *(void *)(a1 + 104) = (char *)v8 + v11;
  }
LABEL_15:
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 104);
  if (v12 == v13) {
    return 1;
  }
  sub_2483F8D48((uint64_t *)(a1 + 48), (v13 - v12) >> 2);
  return 0;
}

uint64_t sub_2484A19AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2484A1A14(a1, a2);
  uint64_t result = sub_2484A1A8C(a1, a2);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = (_DWORD *)(v6 + 4 * v4);
  if (*v7 == -1 || (uint64_t v7 = (_DWORD *)(v6 + 4 * result), *v7 == -1)) {
    _DWORD *v7 = a2;
  }
  return result;
}

uint64_t sub_2484A1A14(uint64_t a1, uint64_t a2)
{
  signed int v2 = *(uint64_t **)a1;
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = 506832829;
  if (*(uint64_t **)a1 != v3)
  {
    unint64_t v4 = 506832829;
    do
    {
      uint64_t v5 = *v2;
      v2 += 3;
      unint64_t v4 = *(unsigned __int8 *)(v5 + 2 * a2 + 1) + 506832829 * (*(unsigned __int8 *)(v5 + 2 * a2) + 506832829 * v4);
    }
    while (v2 != v3);
  }
  for (uint64_t i = *(uint64_t **)(a1 + 48); i != *(uint64_t **)(a1 + 56); i += 3)
  {
    uint64_t v7 = *i;
    unint64_t v4 = *(unsigned __int8 *)(v7 + a2) + 506832829 * v4;
  }
  return (((*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 2) - 1) & (v4 >> 16);
}

uint64_t sub_2484A1A8C(uint64_t a1, uint64_t a2)
{
  signed int v2 = *(uint64_t **)(a1 + 48);
  unint64_t v3 = 0x1E35A7BD1E35A7BDLL;
  while (v2 != *(uint64_t **)(a1 + 56))
  {
    uint64_t v4 = *v2;
    v2 += 3;
    unint64_t v3 = (0x1E35A7BD1E35A7BDLL * v3) ^ *(unsigned __int8 *)(v4 + a2);
  }
  for (uint64_t i = *(uint64_t **)a1; i != *(uint64_t **)(a1 + 8); i += 3)
  {
    uint64_t v6 = *i;
    unint64_t v3 = (0x1E35A7BD1E35A7BDLL * ((0x1E35A7BD1E35A7BDLL * v3) ^ *(unsigned __int8 *)(v6 + 2 * a2))) ^ *(unsigned __int8 *)(v6 + 2 * a2 + 1);
  }
  return (((*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 2) - 1) & (v3 >> 16);
}

uint64_t sub_2484A1B14(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = 1;
  while (v4 != v5)
  {
    uint64_t v7 = *v4;
    v4 += 3;
    uint64_t v8 = (unsigned __int8 *)(v7 + 2 * a2);
    unint64_t v9 = (unsigned __int8 *)(v7 + 2 * a3);
    BOOL v11 = v8[1] == v9[1] && *v8 == *v9;
    uint64_t result = v11 & result;
  }
  uint64_t v13 = a1[6];
  uint64_t v12 = a1[7];
  while (v13 != v12)
  {
    uint64_t v14 = *v13;
    v13 += 3;
    uint64_t result = (*(unsigned __int8 *)(v14 + a2) == *(unsigned __int8 *)(v14 + a3)) & result;
  }
  return result;
}

uint64_t sub_2484A1B84(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) != v5)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = a2 - *(void *)(a4 + 8 * *(int *)(v5 + 4 * v8));
      unsigned int v10 = (2 * v9) ^ (v9 >> 31);
      if (v10 >= 0x10)
      {
        unsigned int v12 = __clz(v10);
        unsigned int v10 = (((-1 << (v12 ^ 0x1F)) + v10) & 3) - 8 * v12 + 4 * (((-1 << (v12 ^ 0x1F)) + v10) >> (30 - v12)) + 232;
        __int16 v11 = 28 - v12;
      }
      else
      {
        __int16 v11 = 0;
      }
      uint64_t v13 = (void **)(*(void *)a1 + 24 * v8);
      unint64_t v15 = v13 + 1;
      uint64_t v14 = v13[1];
      unint64_t v16 = (unint64_t)v13[2];
      if ((unint64_t)v14 >= v16)
      {
        uint64_t v18 = (char *)v14 - (unsigned char *)*v13;
        if (v18 <= -3) {
          sub_2483E92E8();
        }
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - (void)*v13;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)sub_2483F0344(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        int32x4_t v24 = (_WORD *)(v22 + 2 * v19);
        *int32x4_t v24 = v10 | (unsigned __int16)(v11 << 8);
        uint64_t v17 = v24 + 1;
        int32x4_t v25 = (char *)*v15;
        unint64_t v26 = (char *)*v13;
        if (*v15 != *v13)
        {
          do
          {
            __int16 v27 = *((_WORD *)v25 - 1);
            v25 -= 2;
            *--int32x4_t v24 = v27;
          }
          while (v25 != v26);
          int32x4_t v25 = (char *)*v13;
        }
        uint64_t *v13 = v24;
        *unint64_t v15 = v17;
        void v13[2] = (void *)(v22 + 2 * v23);
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v14 = v10 | (unsigned __int16)(v11 << 8);
        uint64_t v17 = v14 + 1;
      }
      *unint64_t v15 = v17;
      ++v8;
      uint64_t v5 = *(void *)(a1 + 120);
    }
    while (v8 < (*(void *)(a1 + 128) - v5) >> 2);
  }
  uint64_t v28 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 104) != v28)
  {
    unint64_t v29 = 0;
    do
    {
      unint64_t v30 = (unint64_t *)(*(void *)(a1 + 48) + 24 * v29);
      int v31 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(v28 + 4 * v29));
      if (v31 <= -511) {
        int v31 = -511;
      }
      if (v31 >= 511) {
        int v31 = 511;
      }
      char v32 = *(unsigned char *)(*(void *)(*(void *)(a1 + 144) + 24 * v29) + (v31 + 511));
      size_t v34 = v30 + 1;
      long long v33 = (unsigned char *)v30[1];
      unint64_t v35 = v30[2];
      if ((unint64_t)v33 >= v35)
      {
        unint64_t v37 = *v30;
        unint64_t v38 = &v33[-*v30];
        unint64_t v39 = (unint64_t)(v38 + 1);
        if ((uint64_t)(v38 + 1) < 0) {
          sub_2483E92E8();
        }
        unint64_t v40 = v35 - v37;
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v41 = v39;
        }
        if (v41) {
          uint64_t v42 = (char *)operator new(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        unint64_t v43 = &v38[(void)v42];
        uint64_t v44 = &v38[(void)v42];
        *uint64_t v44 = v32;
        long long v36 = v44 + 1;
        if (v33 != (unsigned char *)v37)
        {
          unint64_t v45 = &v33[~v37];
          do
          {
            char v46 = *--v33;
            (v45--)[(void)v42] = v46;
          }
          while (v33 != (unsigned char *)v37);
          long long v33 = (unsigned char *)*v30;
          unint64_t v43 = v42;
        }
        *unint64_t v30 = (unint64_t)v43;
        *size_t v34 = v36;
        v30[2] = (unint64_t)&v42[v41];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        unsigned char *v33 = v32;
        long long v36 = v33 + 1;
      }
      *size_t v34 = v36;
      ++v29;
      uint64_t v28 = *(void *)(a1 + 96);
    }
    while (v29 < (*(void *)(a1 + 104) - v28) >> 2);
  }
  uint64_t v48 = *(char **)(a1 + 32);
  unint64_t v47 = *(void *)(a1 + 40);
  if ((unint64_t)v48 >= v47)
  {
    uint64_t v50 = *(char **)(a1 + 24);
    uint64_t v51 = v48 - v50;
    if (v48 - v50 <= -3) {
      sub_2483E92E8();
    }
    uint64_t v52 = v51 >> 1;
    unint64_t v53 = v47 - (void)v50;
    if (v53 <= (v51 >> 1) + 1) {
      unint64_t v54 = v52 + 1;
    }
    else {
      unint64_t v54 = v53;
    }
    BOOL v55 = v53 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v55) {
      uint64_t v56 = v54;
    }
    if (v56)
    {
      uint64_t v56 = (uint64_t)sub_2483F0344(v56);
      uint64_t v50 = *(char **)(a1 + 24);
      uint64_t v48 = *(char **)(a1 + 32);
    }
    else
    {
      uint64_t v57 = 0;
    }
    uint64_t v58 = (_WORD *)(v56 + 2 * v52);
    uint64_t v59 = v56 + 2 * v57;
    *uint64_t v58 = 1;
    uint64_t v49 = v58 + 1;
    while (v48 != v50)
    {
      __int16 v60 = *((_WORD *)v48 - 1);
      v48 -= 2;
      *--uint64_t v58 = v60;
    }
    *(void *)(a1 + 24) = v58;
    *(void *)(a1 + 32) = v49;
    *(void *)(a1 + 40) = v59;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *(_WORD *)uint64_t v48 = 1;
    uint64_t v49 = v48 + 2;
  }
  *(void *)(a1 + 32) = v49;
  ++*(void *)(a1 + 168);
  uint64_t v61 = *(void *)(a1 + 24);
  uint64_t v62 = (((uint64_t)v49 - v61) >> 1) - 1;
  uint64_t v63 = sub_2484A1A14(a1, v62);
  uint64_t v64 = sub_2484A1A8C(a1, v62);
  uint64_t v65 = *(void *)(a1 + 176);
  unint64_t v66 = (_DWORD *)(v65 + 4 * v63);
  uint64_t v67 = *v66;
  if ((v67 == -1 || (uint64_t result = sub_2484A1B14((uint64_t **)a1, v62, *v66), !result))
    && ((unint64_t v66 = (_DWORD *)(v65 + 4 * v64), v67 = *v66, v67 == -1)
     || (uint64_t result = sub_2484A1B14((uint64_t **)a1, v62, *v66), !result)))
  {
    return sub_2484A19AC(a1, v62);
  }
  else
  {
    __int16 v69 = *(_WORD *)(v61 + 2 * v67) + 1;
    *(_WORD *)(v61 + 2 * v67) = v69;
    if (v69 == -1) {
      *unint64_t v66 = -1;
    }
    uint64_t v70 = *(void *)a1;
    uint64_t v71 = *(void *)(a1 + 8);
    while (v70 != v71)
    {
      *(void *)(v70 + 8) -= 2;
      v70 += 24;
    }
    uint64_t v72 = *(void *)(a1 + 48);
    uint64_t v73 = *(void *)(a1 + 56);
    while (v72 != v73)
    {
      --*(void *)(v72 + 8);
      v72 += 24;
    }
    *(void *)(a1 + 32) -= 2;
  }
  return result;
}

void sub_2484A2040(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, char **a5, char **a6, int **a7, int **a8, unint64_t a9)
{
  int v175 = 0;
  int v176 = 0;
  unint64_t v177 = 0;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  unint64_t v174 = 0;
  if (a3 == a4)
  {
    uint64_t v61 = a1;
  }
  else
  {
    int v9 = a3;
    __int16 v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = v173;
    uint64_t v169 = v176;
    do
    {
      if (*v9 != *a2)
      {
        int v18 = *v9 - 1;
        if ((unint64_t)v12 >= v16)
        {
          uint64_t v19 = v12 - v15;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
          {
            uint64_t v172 = v15;
            uint64_t v173 = v17;
            int v175 = v13;
            int v176 = v169;
            sub_2483E92E8();
          }
          unint64_t v21 = v14;
          if ((uint64_t)(v16 - (void)v15) >> 1 > v20) {
            unint64_t v20 = (uint64_t)(v16 - (void)v15) >> 1;
          }
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)sub_2483E9300(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          int32x4_t v24 = (int *)(v22 + 4 * v19);
          *int32x4_t v24 = v18;
          uint64_t v17 = v24 + 1;
          while (v12 != v15)
          {
            int v25 = *--v12;
            *--int32x4_t v24 = v25;
          }
          unint64_t v16 = v22 + 4 * v23;
          if (v15)
          {
            unint64_t v26 = v22 + 4 * v23;
            operator delete(v15);
            unint64_t v16 = v26;
          }
          unsigned int v12 = v17;
          unint64_t v15 = v24;
          unint64_t v14 = v21;
        }
        else
        {
          *v12++ = v18;
          uint64_t v17 = v12;
        }
      }
      int v27 = v9[1];
      if (v27 != a2[1])
      {
        int v28 = v27 - 1;
        if ((unint64_t)v12 >= v16)
        {
          uint64_t v29 = v12 - v15;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
          {
            uint64_t v172 = v15;
            uint64_t v173 = v17;
            int v175 = v13;
            int v176 = v169;
            sub_2483E92E8();
          }
          unint64_t v31 = v14;
          if ((uint64_t)(v16 - (void)v15) >> 1 > v30) {
            unint64_t v30 = (uint64_t)(v16 - (void)v15) >> 1;
          }
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32) {
            unint64_t v32 = (unint64_t)sub_2483E9300(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          size_t v34 = (int *)(v32 + 4 * v29);
          *size_t v34 = v28;
          uint64_t v17 = v34 + 1;
          while (v12 != v15)
          {
            int v35 = *--v12;
            *--size_t v34 = v35;
          }
          unint64_t v16 = v32 + 4 * v33;
          if (v15)
          {
            unint64_t v36 = v32 + 4 * v33;
            operator delete(v15);
            unint64_t v16 = v36;
          }
          unsigned int v12 = v17;
          unint64_t v15 = v34;
          unint64_t v14 = v31;
        }
        else
        {
          *v12++ = v28;
          uint64_t v17 = v12;
        }
      }
      int v37 = v9[2];
      if (v37 != a2[2])
      {
        int v38 = v37 - 1;
        if ((unint64_t)v11 >= v14)
        {
          uint64_t v39 = (v11 - v13) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
          {
            uint64_t v172 = v15;
            uint64_t v173 = v17;
            int v175 = v13;
            int v176 = v169;
            sub_2483E92E8();
          }
          unint64_t v41 = v16;
          unint64_t v42 = v14 - (void)v13;
          unint64_t v43 = (uint64_t)(v14 - (void)v13) >> 1;
          if (v43 > v40) {
            unint64_t v40 = v43;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v40;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)sub_2483E9300(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          char v46 = (char *)(v44 + 4 * v39);
          *(_DWORD *)char v46 = v38;
          uint64_t v169 = v46 + 4;
          while (v11 != v13)
          {
            int v47 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v46 - 1) = v47;
            v46 -= 4;
          }
          unint64_t v14 = v44 + 4 * v45;
          if (v13)
          {
            unint64_t v48 = v44 + 4 * v45;
            operator delete(v13);
            unint64_t v14 = v48;
          }
          __int16 v11 = v169;
          uint64_t v13 = v46;
          unint64_t v16 = v41;
        }
        else
        {
          *(_DWORD *)__int16 v11 = v38;
          v11 += 4;
          uint64_t v169 = v11;
        }
      }
      int v49 = v9[3];
      if (v49 != a2[3])
      {
        int v50 = v49 - 1;
        if ((unint64_t)v11 >= v14)
        {
          uint64_t v51 = (v11 - v13) >> 2;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62)
          {
            uint64_t v172 = v15;
            uint64_t v173 = v17;
            int v175 = v13;
            int v176 = v169;
            sub_2483E92E8();
          }
          unint64_t v53 = v16;
          unint64_t v54 = v14 - (void)v13;
          unint64_t v55 = (uint64_t)(v14 - (void)v13) >> 1;
          if (v55 > v52) {
            unint64_t v52 = v55;
          }
          if (v54 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v52;
          }
          if (v56) {
            unint64_t v56 = (unint64_t)sub_2483E9300(v56);
          }
          else {
            uint64_t v57 = 0;
          }
          uint64_t v58 = (char *)(v56 + 4 * v51);
          *(_DWORD *)uint64_t v58 = v50;
          uint64_t v169 = v58 + 4;
          while (v11 != v13)
          {
            int v59 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v58 - 1) = v59;
            v58 -= 4;
          }
          unint64_t v14 = v56 + 4 * v57;
          if (v13)
          {
            unint64_t v60 = v56 + 4 * v57;
            operator delete(v13);
            unint64_t v14 = v60;
          }
          __int16 v11 = v169;
          uint64_t v13 = v58;
          unint64_t v16 = v53;
        }
        else
        {
          *(_DWORD *)__int16 v11 = v50;
          v11 += 4;
          uint64_t v169 = v11;
        }
      }
      v9 += 5;
    }
    while (v9 != a4);
    uint64_t v173 = v17;
    unint64_t v174 = v16;
    uint64_t v172 = v15;
    int v176 = v169;
    unint64_t v177 = v14;
    int v175 = v13;
    uint64_t v61 = a1;
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v63 = v172;
  uint64_t v62 = v173;
  if (v172 == v173)
  {
    uint64_t v62 = (int *)v172;
  }
  else
  {
    uint64_t v64 = (int *)((char *)v172 + 4);
    while (v64 != v173)
    {
      uint64_t v65 = v64 - 1;
      int v66 = *(v64 - 1);
      int v67 = *v64++;
      if (v66 == v67)
      {
        unint64_t v68 = v65 + 2;
        if (v65 + 2 != v173)
        {
          do
          {
            int v69 = v66;
            int v66 = *v68;
            if (v69 != *v68)
            {
              v65[1] = v66;
              ++v65;
            }
            ++v68;
          }
          while (v68 != v62);
          uint64_t v63 = v172;
        }
        uint64_t v62 = v65 + 1;
        break;
      }
    }
  }
  sub_2483EB1C4((char **)&v172, ((char *)v62 - v63) >> 2);
  uint64_t v71 = v175;
  uint64_t v70 = v176;
  std::__sort<std::__less<int,int> &,int *>();
  if (v71 == v70)
  {
    uint64_t v70 = v71;
  }
  else
  {
    uint64_t v72 = v71 + 4;
    while (v72 != v70)
    {
      uint64_t v73 = v72 - 4;
      int v74 = *((_DWORD *)v72 - 1);
      int v75 = *(_DWORD *)v72;
      v72 += 4;
      if (v74 == v75)
      {
        unint64_t v76 = v73 + 8;
        if (v73 + 8 != v70)
        {
          do
          {
            int v77 = v74;
            int v74 = *(_DWORD *)v76;
            if (v77 != *(_DWORD *)v76)
            {
              *((_DWORD *)v73 + 1) = v74;
              v73 += 4;
            }
            v76 += 4;
          }
          while (v76 != v70);
          uint64_t v71 = v175;
        }
        uint64_t v70 = v73 + 4;
        break;
      }
    }
  }
  sub_2483EB1C4(&v175, (v70 - v71) >> 2);
  unint64_t v79 = (uint64_t *)(v61 + 72);
  uint64_t v78 = *(void *)(v61 + 72);
  uint64_t v80 = *(void *)(v61 + 104) - *(void *)(v61 + 96);
  unint64_t v81 = v80 >> 2;
  uint64_t v82 = *(void *)(v61 + 80);
  unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v78) >> 3);
  unint64_t v84 = (v80 >> 2) - v83;
  if (v80 >> 2 <= v83)
  {
    if (v80 >> 2 < v83)
    {
      uint64_t v92 = v78 + 24 * v81;
      if (v82 != v92)
      {
        uint64_t v93 = *(void *)(v61 + 80);
        do
        {
          unint64_t v95 = *(void **)(v93 - 24);
          v93 -= 24;
          int32x4_t v94 = v95;
          if (v95)
          {
            *(void *)(v82 - 16) = v94;
            operator delete(v94);
          }
          uint64_t v82 = v93;
        }
        while (v93 != v92);
      }
      *(void *)(v61 + 80) = v92;
    }
  }
  else
  {
    uint64_t v85 = *(void *)(v61 + 88);
    if (0xAAAAAAAAAAAAAAABLL * ((v85 - v82) >> 3) >= v84)
    {
      size_t v96 = 24 * ((24 * v84 - 24) / 0x18) + 24;
      bzero(*(void **)(v61 + 80), v96);
      *(void *)(v61 + 80) = v82 + v96;
    }
    else
    {
      if ((unint64_t)v80 >= 0x2AAAAAAAAAAAAAA9) {
        sub_2483E92E8();
      }
      uint64_t v181 = v61 + 88;
      unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v78) >> 3);
      if (2 * v86 > v81) {
        unint64_t v81 = 2 * v86;
      }
      if (v86 >= 0x555555555555555) {
        unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v87 = v81;
      }
      BOOL v88 = (char *)sub_2483F8ED4(v87);
      unint64_t v89 = &v88[24 * v83];
      *(void *)&long long v178 = v88;
      *((void *)&v178 + 1) = v89;
      uint64_t v180 = &v88[24 * v90];
      size_t v91 = 24 * ((24 * v84 - 24) / 0x18) + 24;
      bzero(v89, v91);
      uint64_t v179 = &v89[v91];
      sub_2483F8F1C((void *)(v61 + 72), &v178);
      sub_2483F8F8C((uint64_t)&v178);
    }
  }
  unint64_t v97 = (void *)(v61 + 144);
  sub_2483F8D48((uint64_t *)(v61 + 144), (uint64_t)(*(void *)(v61 + 104) - *(void *)(v61 + 96)) >> 2);
  uint64_t v98 = *(void *)(v61 + 96);
  if (*(void *)(v61 + 104) != v98)
  {
    unint64_t v99 = 0;
    uint64_t v100 = 0;
    unint64_t v159 = 0;
    char __pa = 0;
    uint64_t v101 = 0;
    unint64_t v102 = a9;
    unint64_t v103 = a9 - 1;
    long long v160 = 0u;
    long long v158 = 0u;
    unint64_t v161 = (uint64_t *)(v61 + 72);
    while (1)
    {
      unsigned int v104 = *(_DWORD *)(v98 + 4 * v99);
      switch(v104)
      {
        case 0u:
          if (v172 == v173)
          {
            sub_2484A2FB0((char **)&v178, a6, v102);
          }
          else
          {
            long long v178 = 0uLL;
            uint64_t v179 = 0;
            sub_2483F2450(&v178, v172, (uint64_t)v173, ((char *)v173 - (unsigned char *)v172) >> 2);
          }
          goto LABEL_173;
        case 1u:
          if (v175 == v176)
          {
            sub_2484A2FB0((char **)&v178, a5, v102);
          }
          else
          {
            long long v178 = 0uLL;
            uint64_t v179 = 0;
            sub_2483F2450(&v178, v175, (uint64_t)v176, (v176 - v175) >> 2);
          }
          goto LABEL_173;
        case 2u:
        case 3u:
          long long v178 = 0uLL;
          uint64_t v179 = 0;
          sub_2484A3184((void **)&v178, v103);
          if (v102 >= 2)
          {
            unint64_t v164 = v101;
            unsigned int v165 = v100;
            int32x4_t v110 = (char *)*((void *)&v178 + 1);
            unint64_t v111 = (unint64_t)v179;
            uint64_t v112 = 1;
            unint64_t v113 = (char *)v178;
            do
            {
              int v114 = (v112 << 8) / v102 - 1;
              if ((unint64_t)v110 >= v111)
              {
                uint64_t v116 = (v110 - v113) >> 2;
                unint64_t v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 62)
                {
                  uint64_t v179 = (char *)v111;
                  *(void *)&long long v178 = v113;
                  sub_2483E92E8();
                }
                if ((uint64_t)(v111 - (void)v113) >> 1 > v117) {
                  unint64_t v117 = (uint64_t)(v111 - (void)v113) >> 1;
                }
                if (v111 - (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v118 = v117;
                }
                if (v118) {
                  unint64_t v118 = (unint64_t)sub_2483E9300(v118);
                }
                else {
                  uint64_t v119 = 0;
                }
                unint64_t v120 = (char *)(v118 + 4 * v116);
                *(_DWORD *)unint64_t v120 = v114;
                unint64_t v115 = v120 + 4;
                while (v110 != v113)
                {
                  int v121 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *((_DWORD *)v120 - 1) = v121;
                  v120 -= 4;
                }
                unint64_t v111 = v118 + 4 * v119;
                *((void *)&v178 + 1) = v115;
                if (v113) {
                  operator delete(v113);
                }
                unint64_t v113 = v120;
                unint64_t v102 = a9;
              }
              else
              {
                *(_DWORD *)int32x4_t v110 = v114;
                unint64_t v115 = v110 + 4;
              }
              *((void *)&v178 + 1) = v115;
              ++v112;
              int32x4_t v110 = v115;
            }
            while (v112 != v102);
            uint64_t v179 = (char *)v111;
            *(void *)&long long v178 = v113;
            unint64_t v103 = a9 - 1;
            uint64_t v61 = a1;
            uint64_t v101 = v164;
            uint64_t v100 = v165;
            unint64_t v79 = v161;
          }
LABEL_173:
          uint64_t v106 = *v79;
          uint64_t v128 = *v79 + 24 * v99;
          uint64_t v129 = *(void **)v128;
          if (*(void *)v128)
          {
            *(void *)(v106 + 24 * v99 + 8) = v129;
            operator delete(v129);
            *(void *)uint64_t v128 = 0;
            *(void *)(v128 + 8) = 0;
            *(void *)(v128 + 16) = 0;
          }
          *(_OWORD *)uint64_t v128 = v178;
          int v109 = v179;
          goto LABEL_176;
        case 6u:
        case 7u:
        case 8u:
          goto LABEL_120;
        default:
          if (v104 >= 0x10)
          {
            int v122 = v104 & 3;
            if (v122)
            {
              if (v122 != 2)
              {
                if (v122 == 1)
                {
LABEL_120:
                  uint64_t v105 = (uint64_t)__pa;
                  if (v101 == __pa)
                  {
                    sub_2484A322C((uint64_t)&v178, a7, v102);
                    if (__pa) {
                      operator delete(__pa);
                    }
                    uint64_t v105 = *((void *)&v178 + 1);
                    uint64_t v101 = (void *)v178;
                  }
                  long long v182 = 0uLL;
                  uint64_t v183 = 0;
                  char __pa = (void *)v105;
                  sub_2483F2450(&v182, v101, v105, (v105 - (uint64_t)v101) >> 2);
                }
                else
                {
LABEL_195:
                  uint64_t v141 = *((void *)&v160 + 1);
                  unint64_t v142 = (const void *)v160;
                  if ((void)v160 == *((void *)&v160 + 1))
                  {
                    sub_2484A322C((uint64_t)&v178, a8, a9);
                    if ((void)v160) {
                      operator delete((void *)v160);
                    }
                    unint64_t v142 = (const void *)v178;
                    long long v160 = v178;
                    uint64_t v141 = *((void *)&v178 + 1);
                  }
                  long long v182 = 0uLL;
                  uint64_t v183 = 0;
                  sub_2483F2450(&v182, v142, v141, (v141 - (uint64_t)v142) >> 2);
                }
                uint64_t v106 = *v79;
                uint64_t v107 = *v79 + 24 * v99;
                int v108 = *(void **)v107;
                if (*(void *)v107)
                {
                  *(void *)(v106 + 24 * v99 + 8) = v108;
                  operator delete(v108);
                  *(void *)uint64_t v107 = 0;
                  *(void *)(v107 + 8) = 0;
                  *(void *)(v107 + 16) = 0;
                }
                *(_OWORD *)uint64_t v107 = v182;
                int v109 = v183;
LABEL_176:
                *(void *)(v106 + 24 * v99 + 16) = v109;
                goto LABEL_177;
              }
              uint64_t v143 = *((void *)&v158 + 1);
              unint64_t v144 = (const void *)v158;
              if ((void)v158 == *((void *)&v158 + 1))
              {
                uint64_t v145 = *((void *)&v160 + 1);
                unint64_t v146 = (const void *)v160;
                if ((void)v160 == *((void *)&v160 + 1))
                {
                  sub_2484A322C((uint64_t)&v178, a8, a9);
                  if ((void)v160) {
                    operator delete((void *)v160);
                  }
                  unint64_t v146 = (const void *)v178;
                  long long v160 = v178;
                  uint64_t v145 = *((void *)&v178 + 1);
                }
                long long v178 = 0uLL;
                uint64_t v179 = 0;
                sub_2483F2450(&v178, v146, v145, (v145 - (uint64_t)v146) >> 2);
                if ((void)v178)
                {
                  *((void *)&v178 + 1) = v178;
                  operator delete((void *)v178);
                }
                unint64_t v147 = *a8;
                uint64_t v148 = a8[1];
                while (v147 != v148)
                {
                  int v149 = *v147;
                  if (*v147 < 0) {
                    int v149 = -v149;
                  }
                  *v147++ = v149;
                }
                sub_2484A322C((uint64_t)&v182, a8, a9);
                if ((void)v158) {
                  operator delete((void *)v158);
                }
                unint64_t v144 = (const void *)v182;
                long long v158 = v182;
                uint64_t v143 = *((void *)&v182 + 1);
              }
              long long v170 = 0uLL;
              uint64_t v171 = 0;
              sub_2483F2450(&v170, v144, v143, (v143 - (uint64_t)v144) >> 2);
            }
            else
            {
LABEL_159:
              uint64_t v123 = (uint64_t)v159;
              if (v100 == v159)
              {
                uint64_t v124 = (uint64_t)__pa;
                if (v101 == __pa)
                {
                  sub_2484A322C((uint64_t)&v178, a7, v102);
                  if (__pa) {
                    operator delete(__pa);
                  }
                  uint64_t v124 = *((void *)&v178 + 1);
                  uint64_t v101 = (void *)v178;
                }
                long long v178 = 0uLL;
                uint64_t v179 = 0;
                char __pa = (void *)v124;
                sub_2483F2450(&v178, v101, v124, (v124 - (uint64_t)v101) >> 2);
                if ((void)v178)
                {
                  *((void *)&v178 + 1) = v178;
                  operator delete((void *)v178);
                }
                uint64_t v125 = *a7;
                uint64_t v126 = a7[1];
                while (v125 != v126)
                {
                  int v127 = *v125;
                  if (*v125 < 0) {
                    int v127 = -v127;
                  }
                  *v125++ = v127;
                }
                sub_2484A322C((uint64_t)&v182, a7, v102);
                if (v100) {
                  operator delete(v100);
                }
                uint64_t v123 = *((void *)&v182 + 1);
                uint64_t v100 = (void *)v182;
              }
              long long v170 = 0uLL;
              uint64_t v171 = 0;
              unint64_t v159 = (void *)v123;
              sub_2483F2450(&v170, v100, v123, (v123 - (uint64_t)v100) >> 2);
            }
            uint64_t v106 = *v79;
            uint64_t v150 = *v79 + 24 * v99;
            uint64_t v151 = *(void **)v150;
            if (*(void *)v150)
            {
              *(void *)(v106 + 24 * v99 + 8) = v151;
              operator delete(v151);
              *(void *)uint64_t v150 = 0;
              *(void *)(v150 + 8) = 0;
              *(void *)(v150 + 16) = 0;
            }
            *(_OWORD *)uint64_t v150 = v170;
            int v109 = v171;
            goto LABEL_176;
          }
          if (v104 - 4 < 2) {
            goto LABEL_159;
          }
          if (v104 != 15) {
            goto LABEL_195;
          }
          if (v102 > 0x1F)
          {
            if (v102 > 0x3F)
            {
              *(void *)&long long v139 = operator new(0xDCuLL);
              uint64_t v140 = v139 + 220;
              *(_OWORD *)(v139 + 160) = xmmword_248550D1C;
              *(_OWORD *)(v139 + 176) = unk_248550D2C;
              *(_OWORD *)(v139 + 192) = xmmword_248550D3C;
              *(_OWORD *)(v139 + 204) = *(long long *)((char *)&xmmword_248550D3C + 12);
              *(_OWORD *)(v139 + 96) = xmmword_248550CDC;
              *(_OWORD *)(v139 + 112) = unk_248550CEC;
              *(_OWORD *)(v139 + 128) = xmmword_248550CFC;
              *(_OWORD *)(v139 + 144) = unk_248550D0C;
              *(_OWORD *)(v139 + 32) = xmmword_248550C9C;
              *(_OWORD *)(v139 + 48) = unk_248550CAC;
              *(_OWORD *)(v139 + 64) = xmmword_248550CBC;
              *(_OWORD *)(v139 + 80) = unk_248550CCC;
              *(_OWORD *)long long v139 = xmmword_248550C7C;
              *(_OWORD *)(v139 + 16) = unk_248550C8C;
            }
            else
            {
              *(void *)&long long v139 = operator new(0x74uLL);
              uint64_t v140 = v139 + 116;
              *(_DWORD *)(v139 + 112) = 255;
              *(_OWORD *)(v139 + 64) = xmmword_248550C48;
              *(_OWORD *)(v139 + 80) = unk_248550C58;
              *(_OWORD *)(v139 + 96) = xmmword_248550C68;
              *(_OWORD *)long long v139 = xmmword_248550C08;
              *(_OWORD *)(v139 + 16) = unk_248550C18;
              *(_OWORD *)(v139 + 32) = xmmword_248550C28;
              *(_OWORD *)(v139 + 48) = unk_248550C38;
            }
          }
          else
          {
            *(void *)&long long v139 = operator new(0x3CuLL);
            uint64_t v140 = v139 + 60;
            *(_OWORD *)long long v139 = xmmword_248550BCC;
            *(_OWORD *)(v139 + 16) = unk_248550BDC;
            *(_OWORD *)(v139 + 32) = xmmword_248550BEC;
            *(_OWORD *)(v139 + 44) = *(long long *)((char *)&xmmword_248550BEC + 12);
          }
          uint64_t v152 = *v79;
          uint64_t v153 = *v79 + 24 * v99;
          uint64_t v154 = *(void **)v153;
          if (*(void *)v153)
          {
            *(void *)(v152 + 24 * v99 + 8) = v154;
            uint64_t v166 = v139;
            operator delete(v154);
            *(void *)&long long v139 = v166;
            *(void *)uint64_t v153 = 0;
            *(void *)(v153 + 8) = 0;
            *(void *)(v153 + 16) = 0;
          }
          *((void *)&v139 + 1) = v140;
          *(_OWORD *)uint64_t v153 = v139;
          *(void *)(v152 + 24 * v99 + 16) = v140;
          unint64_t v103 = a9 - 1;
LABEL_177:
          uint64_t v130 = (unint64_t *)(*v97 + 24 * v99);
          unint64_t v131 = v130[1];
          unint64_t v132 = *v130;
          unint64_t v133 = v131 - *v130;
          unint64_t v102 = a9;
          if (v133 > 0x3FE)
          {
            if (v133 != 1023)
            {
              v130[1] = v132 + 1023;
LABEL_183:
              unint64_t v134 = 0;
              unint64_t v135 = 0;
              do
              {
                uint64_t v136 = *(void *)(*v79 + 24 * v99);
                uint64_t v137 = *(void *)(*v79 + 24 * v99 + 8) - v136;
                if (v135 < v137 >> 2)
                {
                  uint64_t v138 = v137 >> 2;
                  while ((int)v134 - 511 > *(_DWORD *)(v136 + 4 * v135))
                  {
                    if (v138 == ++v135)
                    {
                      unint64_t v135 = v138;
                      break;
                    }
                  }
                }
                *(unsigned char *)(v132 + v134++) = v135;
                unint64_t v132 = *(void *)(*v97 + 24 * v99);
              }
              while (v134 < *(void *)(*v97 + 24 * v99 + 8) - v132);
              goto LABEL_190;
            }
          }
          else
          {
            sub_2483EE8AC(v130, 1023 - v133);
            unint64_t v132 = *(void *)(*v97 + 24 * v99);
            unint64_t v131 = *(void *)(*v97 + 24 * v99 + 8);
          }
          if (v131 != v132) {
            goto LABEL_183;
          }
LABEL_190:
          ++v99;
          uint64_t v98 = *(void *)(v61 + 96);
          if (v99 >= (*(void *)(v61 + 104) - v98) >> 2) {
            goto LABEL_230;
          }
          break;
      }
    }
  }
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  *(void *)&long long v160 = 0;
  *(void *)&long long v158 = 0;
LABEL_230:
  if ((void)v160) {
    operator delete((void *)v160);
  }
  if ((void)v158) {
    operator delete((void *)v158);
  }
  if (v101) {
    operator delete(v101);
  }
  if (v100) {
    operator delete(v100);
  }
  if (v172) {
    operator delete(v172);
  }
  if (v175) {
    operator delete(v175);
  }
}

void sub_2484A2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if ((void)a16) {
    operator delete((void *)a16);
  }
  if ((void)a13) {
    operator delete((void *)a13);
  }
  if (v33) {
    operator delete(v33);
  }
  if (v32) {
    operator delete(v32);
  }
  if (a31) {
    operator delete(a31);
  }
  unint64_t v36 = *(void **)(v34 - 184);
  if (v36) {
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484A2FB0(char **a1, char **a2, unint64_t a3)
{
  uint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v4 != v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v4;
    do
    {
      unsigned int v8 = *(_DWORD *)v7;
      v7 += 4;
      v6 += v8;
    }
    while (v7 != v3);
    if ((unint64_t)(v3 - v4) >= 5)
    {
      int v9 = 0;
      unint64_t v10 = 0;
      __int16 v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v14 = 1;
      uint64_t v15 = 1;
      int v27 = a2;
      do
      {
        uint64_t v16 = v14;
        v13 += *(unsigned int *)&v4[4 * v12];
        if (v13 >= v15 * v6 / a3)
        {
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v18 = (v11 - v9) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_2483E92E8();
            }
            if ((uint64_t)(v10 - (void)v9) >> 1 > v19) {
              unint64_t v19 = (uint64_t)(v10 - (void)v9) >> 1;
            }
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)sub_2483E9300(v20);
            }
            else {
              uint64_t v21 = 0;
            }
            unint64_t v22 = (char *)(v20 + 4 * v18);
            *(_DWORD *)unint64_t v22 = v12;
            uint64_t v17 = v22 + 4;
            while (v11 != v9)
            {
              int v23 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            unint64_t v10 = v20 + 4 * v21;
            *a1 = v22;
            a1[1] = v17;
            a1[2] = (char *)v10;
            if (v9)
            {
              unint64_t v24 = v20 + 4 * v21;
              operator delete(v9);
              unint64_t v10 = v24;
            }
            int v9 = v22;
            a2 = v27;
          }
          else
          {
            *(_DWORD *)__int16 v11 = v12;
            uint64_t v17 = v11 + 4;
          }
          a1[1] = v17;
          unint64_t v25 = v6 * v15--;
          do
          {
            unint64_t v26 = v25 / a3;
            ++v15;
            v25 += v6;
          }
          while (v13 > v26);
          uint64_t v4 = *a2;
          unint64_t v3 = a2[1];
          __int16 v11 = v17;
        }
        uint64_t v14 = v16 + 1;
        uint64_t v12 = v16;
      }
      while (v16 + 1 < (unint64_t)((v3 - v4) >> 2));
    }
  }
}

void sub_2484A315C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __int16 v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484A3184(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_2483E92E8();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_2483E9300(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    unsigned int v8 = (char *)*a1;
    int v9 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v9 != *a1)
    {
      unint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_2484A322C(uint64_t a1, int **a2, unint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    unsigned int v8 = v4 + 1;
    if (v4 + 1 != v5)
    {
      int v9 = *v4;
      unint64_t v10 = v4 + 1;
      do
      {
        int v12 = *v10++;
        int v11 = v12;
        if (v12 < v9)
        {
          int v9 = v11;
          uint64_t v4 = v8;
        }
        unsigned int v8 = v10;
      }
      while (v10 != v5);
    }
    int v13 = *v4;
    if (v13 <= -512) {
      int v13 = -512;
    }
    if (v13 >= 512) {
      int v14 = 512;
    }
    else {
      int v14 = v13;
    }
    sub_2483E9AC0(__p, 0x401uLL);
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    if (*a2 != v16)
    {
      uint64_t v17 = __p[0];
      do
      {
        int v19 = *v15++;
        int v18 = v19;
        if (v19 <= -512) {
          int v18 = -512;
        }
        if (v18 >= 512) {
          int v18 = 512;
        }
        ++v17[v18 - v14];
      }
      while (v15 != v16);
    }
    sub_2484A2FB0((char **)a1, (char **)__p, a3);
    unint64_t v20 = *(char **)a1;
    uint64_t v21 = *(char **)(a1 + 8);
    while (v20 != v21)
    {
      *(_DWORD *)v20 += v14;
      v20 += 4;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_2484A3354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2484A3370(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(float *)(a2 + 16) == 0.0) {
    return;
  }
  unint64_t v83 = a1;
  if (a3 >= (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2)
  {
    sub_2483EB1C4((char **)a4, a3 + 1);
    a1 = v83;
  }
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  unint64_t v15 = (v13 - *a1) >> 6;
  if (v15 > (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    uint64_t v16 = a1;
    sub_2483EB1C4((char **)a5, v15);
    uint64_t v14 = *v16;
    uint64_t v13 = v16[1];
  }
  double v17 = *(float *)(a2 + 16) * 0.1;
  if (v17 > 0.99) {
    double v17 = 0.99;
  }
  float v18 = v17;
  float v19 = logf(1.0 - v18);
  unint64_t v20 = v83;
  if (v13 == v14) {
    return;
  }
  uint64_t v80 = (unint64_t *)a2;
  unint64_t v81 = (void *)a4;
  uint64_t v82 = (void *)a5;
  uint64_t v84 = a7;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  unint64_t v27 = a3 - 0x40A7B892E31B1A47;
  float v28 = 1.0 / v19;
  while (1)
  {
    uint64_t v29 = v14 + (v26 << 6);
    unint64_t v30 = *(void *)(v29 + 40);
    if (v30 >= 2)
    {
      unint64_t v31 = *(void *)(v29 + 48);
      if (v31) {
        break;
      }
    }
LABEL_36:
    if (++v26 >= (v13 - v14) >> 6) {
      goto LABEL_37;
    }
  }
  if (v26 < v20[9] || (v30 <= *v80 ? (BOOL v32 = v31 > *v80) : (BOOL v32 = 1), !v32))
  {
    if ((unint64_t)v24 >= v23)
    {
      uint64_t v33 = v24 - v21;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
        sub_2483E92E8();
      }
      if ((uint64_t)(v23 - (void)v21) >> 2 > v34) {
        unint64_t v34 = (uint64_t)(v23 - (void)v21) >> 2;
      }
      if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35)
      {
        unint64_t v35 = (unint64_t)sub_2483F04AC(v35);
        unint64_t v24 = v22;
      }
      else
      {
        uint64_t v36 = 0;
      }
      int v37 = (unint64_t *)(v35 + 8 * v33);
      *int v37 = v26;
      unint64_t v22 = v37 + 1;
      while (v24 != v21)
      {
        unint64_t v38 = *--v24;
        *--int v37 = v38;
      }
      unint64_t v23 = v35 + 8 * v36;
      if (v21) {
        operator delete(v21);
      }
      uint64_t v21 = v37;
      unint64_t v20 = v83;
    }
    else
    {
      *unint64_t v24 = v26;
      unint64_t v22 = v24 + 1;
    }
    uint64_t v14 = *v20;
    uint64_t v13 = v20[1];
    uint64_t v39 = *(void *)(*v20 + (v26 << 6) + 48) * *(void *)(*v20 + (v26 << 6) + 40);
    *(_DWORD *)(*v81 + 4 * a3) += v39;
    *(_DWORD *)(*v82 + 4 * v26) += v39;
    v25 += v39;
    unint64_t v24 = v22;
    goto LABEL_36;
  }
LABEL_37:
  if (v21 == v24)
  {
    if (v21) {
      goto LABEL_89;
    }
  }
  else
  {
    sub_2484A3184((void **)a6, (unint64_t)(float)((float)(unint64_t)((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)+ (float)(v18 * (float)v25)));
    sub_2484A3184((void **)v84, (unint64_t)(float)((float)(unint64_t)((uint64_t)(*(void *)(v84 + 8) - *(void *)v84) >> 2)+ (float)(v18 * (float)v25)));
    unint64_t v40 = (float)(logf(1.0 - (float)(COERCE_FLOAT(((a3 + 0x542891283015F7A4) >> 41) | 0x3F800000) + -1.0))
                              * v28);
    uint64_t v41 = *v83;
    unint64_t v42 = *(void *)(*v83 + (*v21 << 6) + 40);
    unint64_t v43 = v27;
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    for (unint64_t i = v22 - v21; v40 >= v42; v42 = *(void *)(v41 + (v47 << 6) + 40))
    {
      v40 -= v42;
      ++v45;
      unint64_t v47 = v21[v44];
      if (v45 == *(void *)(v41 + (v47 << 6) + 48))
      {
        if (++v44 >= i)
        {
          uint64_t v45 = 0;
          break;
        }
        uint64_t v45 = 0;
        unint64_t v47 = v21[v44];
      }
    }
    if (v44 < i)
    {
      uint64_t v48 = v27 ^ (v27 >> 5) ^ 0x4959C36592FDE847;
      unint64_t v49 = v22 - v21;
      do
      {
        unint64_t v50 = v43;
        uint64_t v51 = *(void *)(v41 + (v21[v44] << 6) + 24) + *(void *)(v41 + (v21[v44] << 6) + 16) * v45;
        unint64_t v53 = *(_DWORD **)(a6 + 8);
        unint64_t v52 = *(void *)(a6 + 16);
        if ((unint64_t)v53 >= v52)
        {
          unint64_t v55 = *(_DWORD **)a6;
          uint64_t v56 = ((uint64_t)v53 - *(void *)a6) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            sub_2483E92E8();
          }
          uint64_t v58 = v52 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          BOOL v59 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v59) {
            unint64_t v60 = v57;
          }
          if (v60)
          {
            unint64_t v60 = (unint64_t)sub_2483E9300(v60);
            unint64_t v55 = *(_DWORD **)a6;
            unint64_t v53 = *(_DWORD **)(a6 + 8);
          }
          else
          {
            uint64_t v61 = 0;
          }
          uint64_t v62 = (_DWORD *)(v60 + 4 * v56);
          *uint64_t v62 = *(_DWORD *)(v51 + 4 * v40);
          unint64_t v54 = v62 + 1;
          while (v53 != v55)
          {
            int v63 = *--v53;
            *--uint64_t v62 = v63;
          }
          *(void *)a6 = v62;
          *(void *)(a6 + 8) = v54;
          *(void *)(a6 + 16) = v60 + 4 * v61;
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *unint64_t v53 = *(_DWORD *)(v51 + 4 * v40);
          unint64_t v54 = v53 + 1;
        }
        *(void *)(a6 + 8) = v54;
        uint64_t v64 = v40 - 1;
        if (!v40) {
          uint64_t v64 = 1;
        }
        int v65 = *(_DWORD *)(v51 + 4 * v40) - *(_DWORD *)(v51 + 4 * v64);
        int v67 = *(int **)(v84 + 8);
        unint64_t v66 = *(void *)(v84 + 16);
        if ((unint64_t)v67 >= v66)
        {
          uint64_t v70 = *(int **)v84;
          uint64_t v71 = ((uint64_t)v67 - *(void *)v84) >> 2;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            sub_2483E92E8();
          }
          uint64_t v73 = v66 - (void)v70;
          if (v73 >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          BOOL v59 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v59) {
            unint64_t v74 = v72;
          }
          if (v74)
          {
            unint64_t v74 = (unint64_t)sub_2483E9300(v74);
            uint64_t v70 = *(int **)v84;
            int v67 = *(int **)(v84 + 8);
          }
          else
          {
            uint64_t v75 = 0;
          }
          unint64_t v76 = (int *)(v74 + 4 * v71);
          *unint64_t v76 = v65;
          unint64_t v68 = v76 + 1;
          unint64_t v43 = v48;
          while (v67 != v70)
          {
            int v77 = *--v67;
            *--unint64_t v76 = v77;
          }
          uint64_t v69 = v84;
          *(void *)uint64_t v84 = v76;
          *(void *)(v84 + 8) = v68;
          *(void *)(v84 + 16) = v74 + 4 * v75;
          if (v70) {
            operator delete(v70);
          }
        }
        else
        {
          *int v67 = v65;
          unint64_t v68 = v67 + 1;
          unint64_t v43 = v48;
          uint64_t v69 = v84;
        }
        *(void *)(v69 + 8) = v68;
        v40 += (float)(v28 * logf(1.0 - (float)(COERCE_FLOAT(((v43 + v50) >> 41) | 0x3F800000) + -1.0)))
             + 1;
        uint64_t v41 = *v83;
LABEL_82:
        unint64_t v78 = v21[v44];
        while (1)
        {
          unint64_t v79 = *(void *)(v41 + (v78 << 6) + 40);
          if (v40 < v79) {
            break;
          }
          v40 -= v79;
          ++v45;
          unint64_t v78 = v21[v44];
          if (v45 == *(void *)(v41 + (v78 << 6) + 48))
          {
            if (++v44 < v49)
            {
              uint64_t v45 = 0;
              goto LABEL_82;
            }
            uint64_t v45 = 0;
            break;
          }
        }
        uint64_t v48 = (v43 >> 5) ^ ((v50 ^ (v50 << 23)) >> 18) ^ v43 ^ v50 ^ (v50 << 23);
      }
      while (v44 < v49);
    }
LABEL_89:
    operator delete(v21);
  }
}

void sub_2484A3988(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484A39BC(void *a1, void **a2, char **a3)
{
  long long v147 = 0u;
  memset(v146, 0, sizeof(v146));
  int v145 = 0;
  sub_2484A426C(v146, &v145);
  a3[1] = *a3;
  uint64_t v6 = *((void *)&v147 + 1);
  if (*((void *)&v147 + 1))
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v144 = v7;
      int v8 = *(_DWORD *)(*(void *)(*((void *)&v146[0] + 1) + (((unint64_t)v147 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v147 & 0x3FF));
      *(void *)&long long v147 = v147 + 1;
      *((void *)&v147 + 1) = v6 - 1;
      if ((unint64_t)v147 >= 0x800)
      {
        operator delete(**((void ***)&v146[0] + 1));
        *((void *)&v146[0] + 1) += 8;
        *(void *)&long long v147 = v147 - 1024;
      }
      int v9 = *(__int16 *)(*a1 + 40 * v8 + 4) + 1;
      int v11 = a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - (unsigned char *)*a2) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          sub_2483E92E8();
        }
        uint64_t v15 = v10 - (void)*a2;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        double v17 = (char *)sub_2483F04AC(v16);
        float v19 = &v17[8 * v13];
        *(_DWORD *)float v19 = 2;
        *((_DWORD *)v19 + 1) = v9;
        uint64_t v21 = (char *)*a2;
        unint64_t v20 = (char *)a2[1];
        unint64_t v22 = v19;
        if (v20 != *a2)
        {
          do
          {
            uint64_t v23 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v22 - 1) = v23;
            v22 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = (char *)*a2;
        }
        int v12 = v19 + 8;
        *a2 = v22;
        a2[1] = v19 + 8;
        a2[2] = &v17[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *int v11 = 2;
        v11[1] = v9;
        int v12 = v11 + 2;
      }
      a2[1] = v12;
      uint64_t v24 = *a1 + 40 * v8;
      unsigned __int16 v25 = *(_WORD *)(v24 + 4);
      if (v25 == 0xFFFF)
      {
        int v32 = *(_DWORD *)(*a1 + 40 * v8 + 16);
        unint64_t v33 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v33)
        {
          uint64_t v62 = ((char *)v12 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v62 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v63 = v33 - (void)*a2;
          uint64_t v64 = v63 >> 2;
          if (v63 >> 2 <= (unint64_t)(v62 + 1)) {
            uint64_t v64 = v62 + 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v64;
          }
          unint64_t v66 = (char *)sub_2483F04AC(v65);
          unint64_t v68 = &v66[8 * v62];
          *(_DWORD *)unint64_t v68 = 4;
          *((_DWORD *)v68 + 1) = v32;
          uint64_t v70 = (char *)*a2;
          uint64_t v69 = (char *)a2[1];
          uint64_t v71 = v68;
          if (v69 != *a2)
          {
            do
            {
              uint64_t v72 = *((void *)v69 - 1);
              v69 -= 8;
              *((void *)v71 - 1) = v72;
              v71 -= 8;
            }
            while (v69 != v70);
            uint64_t v69 = (char *)*a2;
          }
          unint64_t v34 = v68 + 8;
          *a2 = v71;
          a2[1] = v68 + 8;
          a2[2] = &v66[8 * v67];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          _DWORD *v12 = 4;
          v12[1] = v32;
          unint64_t v34 = v12 + 2;
        }
        a2[1] = v34;
        int v73 = *(_DWORD *)(*a1 + 40 * v8 + 24);
        int v74 = (2 * v73) ^ (v73 >> 31);
        unint64_t v75 = (unint64_t)a2[2];
        if ((unint64_t)v34 >= v75)
        {
          uint64_t v77 = ((char *)v34 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v77 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v78 = v75 - (void)*a2;
          uint64_t v79 = v78 >> 2;
          if (v78 >> 2 <= (unint64_t)(v77 + 1)) {
            uint64_t v79 = v77 + 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v79;
          }
          unint64_t v81 = (char *)sub_2483F04AC(v80);
          unint64_t v83 = &v81[8 * v77];
          *(_DWORD *)unint64_t v83 = 6;
          *((_DWORD *)v83 + 1) = v74;
          uint64_t v85 = (char *)*a2;
          uint64_t v84 = (char *)a2[1];
          unint64_t v86 = v83;
          if (v84 != *a2)
          {
            do
            {
              uint64_t v87 = *((void *)v84 - 1);
              v84 -= 8;
              *((void *)v86 - 1) = v87;
              v86 -= 8;
            }
            while (v84 != v85);
            uint64_t v84 = (char *)*a2;
          }
          unint64_t v76 = v83 + 8;
          *a2 = v86;
          a2[1] = v83 + 8;
          a2[2] = &v81[8 * v82];
          if (v84) {
            operator delete(v84);
          }
        }
        else
        {
          *unint64_t v34 = 6;
          v34[1] = v74;
          unint64_t v76 = v34 + 2;
        }
        a2[1] = v76;
        unsigned int v88 = *(_DWORD *)(*a1 + 40 * v8 + 32);
        unsigned int v89 = __clz(__rbit32(v88));
        unint64_t v90 = (unint64_t)a2[2];
        if ((unint64_t)v76 >= v90)
        {
          uint64_t v92 = ((char *)v76 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v92 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v93 = v90 - (void)*a2;
          uint64_t v94 = v93 >> 2;
          if (v93 >> 2 <= (unint64_t)(v92 + 1)) {
            uint64_t v94 = v92 + 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v94;
          }
          size_t v96 = (char *)sub_2483F04AC(v95);
          uint64_t v98 = &v96[8 * v92];
          *(_DWORD *)uint64_t v98 = 8;
          *((_DWORD *)v98 + 1) = v89;
          uint64_t v100 = (char *)*a2;
          unint64_t v99 = (char *)a2[1];
          uint64_t v101 = v98;
          if (v99 != *a2)
          {
            do
            {
              uint64_t v102 = *((void *)v99 - 1);
              v99 -= 8;
              *((void *)v101 - 1) = v102;
              v101 -= 8;
            }
            while (v99 != v100);
            unint64_t v99 = (char *)*a2;
          }
          size_t v91 = v98 + 8;
          *a2 = v101;
          a2[1] = v98 + 8;
          a2[2] = &v96[8 * v97];
          if (v99) {
            operator delete(v99);
          }
        }
        else
        {
          *unint64_t v76 = 8;
          v76[1] = v89;
          size_t v91 = v76 + 2;
        }
        int v103 = (v88 >> v89) - 1;
        a2[1] = v91;
        unint64_t v104 = (unint64_t)a2[2];
        if ((unint64_t)v91 >= v104)
        {
          uint64_t v106 = ((char *)v91 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v106 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v107 = v104 - (void)*a2;
          uint64_t v108 = v107 >> 2;
          if (v107 >> 2 <= (unint64_t)(v106 + 1)) {
            uint64_t v108 = v106 + 1;
          }
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v109 = v108;
          }
          int32x4_t v110 = (char *)sub_2483F04AC(v109);
          uint64_t v112 = &v110[8 * v106];
          *(_DWORD *)uint64_t v112 = 10;
          *((_DWORD *)v112 + 1) = v103;
          int v114 = (char *)*a2;
          unint64_t v113 = (char *)a2[1];
          unint64_t v115 = v112;
          if (v113 != *a2)
          {
            do
            {
              uint64_t v116 = *((void *)v113 - 1);
              v113 -= 8;
              *((void *)v115 - 1) = v116;
              v115 -= 8;
            }
            while (v113 != v114);
            unint64_t v113 = (char *)*a2;
          }
          uint64_t v105 = v112 + 8;
          *a2 = v115;
          a2[1] = v112 + 8;
          a2[2] = &v110[8 * v111];
          if (v113) {
            operator delete(v113);
          }
        }
        else
        {
          *size_t v91 = 10;
          v91[1] = v103;
          uint64_t v105 = v91 + 2;
        }
        a2[1] = v105;
        uint64_t v117 = *a1 + 40 * v8;
        unint64_t v118 = (int *)(v117 + 16);
        uint64_t v119 = (uint64_t *)(v117 + 24);
        unint64_t v120 = (int *)(v117 + 32);
        unint64_t v121 = (unint64_t)a3[1];
        unint64_t v122 = (unint64_t)a3[2];
        if (v121 >= v122)
        {
          unint64_t v128 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v121 - (void)*a3) >> 3);
          unint64_t v129 = v128 + 1;
          if (v128 + 1 > 0x666666666666666) {
            sub_2483E92E8();
          }
          unint64_t v130 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v122 - (void)*a3) >> 3);
          if (2 * v130 > v129) {
            unint64_t v129 = 2 * v130;
          }
          if (v130 >= 0x333333333333333) {
            unint64_t v131 = 0x666666666666666;
          }
          else {
            unint64_t v131 = v129;
          }
          unint64_t v132 = (char *)sub_248403444(v131);
          unint64_t v134 = &v132[40 * v128];
          int v135 = *v118;
          uint64_t v136 = *v119;
          int v137 = *v120;
          *(_DWORD *)unint64_t v134 = 0;
          *((_WORD *)v134 + 2) = -1;
          uint64_t v126 = v144;
          *((void *)v134 + 1) = v144;
          *((_DWORD *)v134 + 4) = v135;
          *((void *)v134 + 3) = v136;
          *((_DWORD *)v134 + 8) = v137;
          long long v139 = *a3;
          uint64_t v138 = a3[1];
          uint64_t v140 = v134;
          if (v138 != *a3)
          {
            do
            {
              long long v141 = *(_OWORD *)(v138 - 40);
              long long v142 = *(_OWORD *)(v138 - 24);
              *((_DWORD *)v140 - 2) = *((_DWORD *)v138 - 2);
              *(_OWORD *)(v140 - 24) = v142;
              *(_OWORD *)(v140 - 40) = v141;
              v140 -= 40;
              v138 -= 40;
            }
            while (v138 != v139);
            uint64_t v138 = *a3;
          }
          int v127 = v134 + 40;
          *a3 = v140;
          a3[1] = v134 + 40;
          a3[2] = &v132[40 * v133];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          int v123 = *v118;
          uint64_t v124 = *v119;
          int v125 = *v120;
          *(_DWORD *)unint64_t v121 = 0;
          *(_WORD *)(v121 + 4) = -1;
          uint64_t v126 = v144;
          *(void *)(v121 + 8) = v144;
          *(_DWORD *)(v121 + 16) = v123;
          *(void *)(v121 + 24) = v124;
          *(_DWORD *)(v121 + 32) = v125;
          int v127 = (char *)(v121 + 40);
        }
        a3[1] = v127;
        uint64_t v7 = v126 + 1;
      }
      else
      {
        unint64_t v26 = (unint64_t)a3[1];
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (void)*a3) >> 3);
        int v28 = v27 + DWORD2(v147) + 1;
        int v29 = v27 + DWORD2(v147) + 2;
        unint64_t v30 = (unint64_t)a3[2];
        if (v26 >= v30)
        {
          unint64_t v35 = v27 + 1;
          if (v27 + 1 > 0x666666666666666) {
            sub_2483E92E8();
          }
          if (0x999999999999999ALL * ((uint64_t)(v30 - (void)*a3) >> 3) > v35) {
            unint64_t v35 = 0x999999999999999ALL * ((uint64_t)(v30 - (void)*a3) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - (void)*a3) >> 3) >= 0x333333333333333) {
            unint64_t v36 = 0x666666666666666;
          }
          else {
            unint64_t v36 = v35;
          }
          int v37 = (char *)sub_248403444(v36);
          uint64_t v39 = &v37[40 * v27];
          __int16 v40 = *(_WORD *)(v24 + 4);
          *(_DWORD *)uint64_t v39 = *(_DWORD *)v24;
          *((_WORD *)v39 + 2) = v40;
          *((_DWORD *)v39 + 2) = v28;
          *((_DWORD *)v39 + 3) = v29;
          *((_DWORD *)v39 + 4) = 0;
          *((void *)v39 + 3) = 0;
          *((_DWORD *)v39 + 8) = 1;
          unint64_t v42 = *a3;
          uint64_t v41 = a3[1];
          unint64_t v43 = v39;
          if (v41 != *a3)
          {
            do
            {
              long long v44 = *(_OWORD *)(v41 - 40);
              long long v45 = *(_OWORD *)(v41 - 24);
              *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
              *(_OWORD *)(v43 - 24) = v45;
              *(_OWORD *)(v43 - 40) = v44;
              v43 -= 40;
              v41 -= 40;
            }
            while (v41 != v42);
            uint64_t v41 = *a3;
          }
          unint64_t v31 = v39 + 40;
          *a3 = v43;
          a3[1] = v39 + 40;
          a3[2] = &v37[40 * v38];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v26 = *(_DWORD *)v24;
          *(_WORD *)(v26 + 4) = v25;
          *(_DWORD *)(v26 + 8) = v28;
          *(_DWORD *)(v26 + 12) = v29;
          *(_DWORD *)(v26 + 16) = 0;
          *(void *)(v26 + 24) = 0;
          *(_DWORD *)(v26 + 32) = 1;
          unint64_t v31 = (char *)(v26 + 40);
        }
        a3[1] = v31;
        int v145 = *(_DWORD *)(*a1 + 40 * v8 + 8);
        sub_2484A426C(v146, &v145);
        int v145 = *(_DWORD *)(*a1 + 40 * v8 + 12);
        sub_2484A426C(v146, &v145);
        int v46 = *(_DWORD *)(*a1 + 40 * v8);
        int v47 = (2 * v46) ^ (v46 >> 31);
        unint64_t v49 = a2[1];
        unint64_t v48 = (unint64_t)a2[2];
        if ((unint64_t)v49 >= v48)
        {
          uint64_t v51 = ((char *)v49 - (unsigned char *)*a2) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
            sub_2483E92E8();
          }
          uint64_t v53 = v48 - (void)*a2;
          if (v53 >> 2 > v52) {
            unint64_t v52 = v53 >> 2;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v52;
          }
          unint64_t v55 = (char *)sub_2483F04AC(v54);
          unint64_t v57 = &v55[8 * v51];
          *(_DWORD *)unint64_t v57 = 0;
          *((_DWORD *)v57 + 1) = v47;
          BOOL v59 = (char *)*a2;
          uint64_t v58 = (char *)a2[1];
          unint64_t v60 = v57;
          if (v58 == *a2)
          {
            uint64_t v7 = v144;
          }
          else
          {
            uint64_t v7 = v144;
            do
            {
              uint64_t v61 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v60 - 1) = v61;
              v60 -= 8;
            }
            while (v58 != v59);
            uint64_t v58 = (char *)*a2;
          }
          unint64_t v50 = v57 + 8;
          *a2 = v60;
          a2[1] = v57 + 8;
          a2[2] = &v55[8 * v56];
          if (v58) {
            operator delete(v58);
          }
        }
        else
        {
          _DWORD *v49 = 0;
          v49[1] = v47;
          unint64_t v50 = v49 + 2;
          uint64_t v7 = v144;
        }
        a2[1] = v50;
      }
      uint64_t v6 = *((void *)&v147 + 1);
    }
    while (*((void *)&v147 + 1));
  }
  return sub_2484A47F0((uint64_t)v146);
}

void sub_2484A4210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2484A47F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2484A426C(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v5;
      int v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v43 = (char *)sub_2483F04AC(v42);
          long long v45 = &v43[8 * (v42 >> 2)];
          int v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            unint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)unint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          uint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            uint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            uint64_t v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unsigned __int16 v25 = (char *)a1[3];
    unint64_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      int v28 = operator new(0x1000uLL);
      int v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          unint64_t v54 = (char *)sub_2483F04AC(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          unint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            unint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            unint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)unint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          uint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        uint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            uint64_t v98 = (char *)sub_2483F04AC(v97);
            uint64_t v100 = &v98[8 * (v97 >> 2)];
            uint64_t v101 = (uint64_t *)a1[1];
            uint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              uint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              unint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)unint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            uint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              uint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            uint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            uint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)uint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    unint64_t v31 = (char *)sub_2483F04AC(v30);
    uint64_t v33 = v32;
    unint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    unint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      unint64_t v76 = (char *)sub_2483F04AC(v75);
      unint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)unint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        unint64_t v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          uint64_t v87 = (char *)sub_2483F04AC(v86);
          unint64_t v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unsigned int v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            unsigned int v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          unint64_t v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            unint64_t v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        unint64_t v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    size_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(void *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}