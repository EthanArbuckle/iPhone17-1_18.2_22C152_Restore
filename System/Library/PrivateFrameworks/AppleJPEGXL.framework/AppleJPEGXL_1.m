BOOL sub_2483DD9A0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(void *)(a1 + 1528);
  if (v1 >> 30 >= 3) {
    LODWORD(v1) = (((2 * (int)v1) >> 1) & 0xC0000000 | v1 & 0x3FFFFFFF) ^ 0x80000000;
  }
  v2 = *(void *)(a1 + 1432);
  v3 = (((2 * (int)v2) >> 1) & 0xC0000000 | v2 & 0x3FFFFFFF) ^ 0x80000000;
  if (v2 <= 0xBFFFFFFF) {
    v3 = *(void *)(a1 + 1432);
  }
  *(void *)(a1 + 1528) = v2;
  return v3 < v1;
}

__n128 sub_2483DD9E8(__n128 *a1, uint64_t a2)
{
  unsigned __int32 v2 = a1[3].n128_u32[3];
  unsigned __int32 v3 = a1[4].n128_u32[0];
  *(_DWORD *)(a2 + 16) = 64 - v2;
  unsigned __int32 v4 = a1[4].n128_u32[2];
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> (-8 * a1[4].n128_u8[4]);
  *(void *)(a2 + 48) = a1;
  *(void *)(a2 + 24) = v5;
  *(void *)a2 = 1 << v2;
  *(void *)(a2 + 8) = 1 << v3;
  *(_DWORD *)(a2 + 32) = (1 << v3) - 1;
  *(_DWORD *)(a2 + 36) = v3;
  *(_DWORD *)(a2 + 40) = v4;
  __n128 result = *a1;
  *(__n128 *)(a2 + 56) = *a1;
  return result;
}

void sub_2483DDA3C(_DWORD *a1, int a2, unint64_t a3, uint64_t a4)
{
  if (a2 && a3 <= 0x1000)
  {
    if (a3)
    {
      for (uint64_t i = 0; i != a3; ++i)
      {
        int v5 = 0;
        unint64_t v6 = (0xBD1E35A7BD000000 * *(void *)(a4 + i)) >> 47;
        do
        {
          a1[(v6 + v5) & 0x1FFFF] = 0;
          v5 += 8;
        }
        while (v5 != 32);
      }
    }
  }
  else
  {
    bzero(a1, 0x80000uLL);
  }
}

void sub_2483DDA9C(unint64_t *a1, int a2, unint64_t a3, int *a4)
{
  int v5 = (_WORD *)a1[5];
  unint64_t v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      int v7 = *((_DWORD *)a1 + 4);
      do
      {
        int v8 = *a4;
        a4 = (int *)((char *)a4 + 1);
        v5[(506832829 * v8) >> v7] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void sub_2483DDAEC(unint64_t *a1, int a2, unint64_t a3, uint64_t *a4)
{
  int v5 = (_WORD *)a1[7];
  unint64_t v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      unint64_t v7 = a1[3];
      int v8 = *((_DWORD *)a1 + 4);
      do
      {
        uint64_t v9 = *a4;
        a4 = (uint64_t *)((char *)a4 + 1);
        v5[((0x1FE35A7BD3579BD3 * (v9 & v7)) >> v8)] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void sub_2483DDB4C(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      int v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      unsigned int v7 = (506832829 * v6) >> 17;
      *(_DWORD *)(v5 + 4 * v7) = -858993460;
      *(_WORD *)(v5 + 0x20000 + 2 * v7) = -13108;
    }
  }
  else
  {
    memset(*(void **)(a1 + 16), 204, 0x20000uLL);
    bzero((void *)(v5 + 0x20000), 0x10000uLL);
  }
  bzero((void *)(v5 + 196608), 0x10000uLL);
  *(_WORD *)a1 = 0;
}

void sub_2483DDBE8(void **a1, int a2, unint64_t a3, int *a4)
{
  uint64_t v5 = a1[129];
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      int v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      unsigned int v7 = (506832829 * v6) >> 17;
      v5[v7] = -858993460;
      *((_WORD *)v5 + v7 + 0x10000) = -13108;
    }
  }
  else
  {
    memset(a1[129], 204, 0x20000uLL);
    bzero(v5 + 0x8000, 0x10000uLL);
  }
  bzero(v5 + 49152, 0x10000uLL);

  bzero(a1, 0x400uLL);
}

void sub_2483DDC98(_DWORD *a1, int a2, unint64_t a3, uint64_t a4)
{
  if (a2 && a3 <= 0x8000)
  {
    if (a3)
    {
      for (uint64_t i = 0; i != a3; ++i)
      {
        int v5 = 0;
        unint64_t v6 = (unint64_t)(0x35A7BD1E35A7BD00 * *(void *)(a4 + i)) >> 44;
        do
        {
          a1[(v6 + v5) & 0xFFFFF] = 0;
          v5 += 8;
        }
        while (v5 != 32);
      }
    }
  }
  else
  {
    bzero(a1, 0x400000uLL);
  }
}

void sub_2483DDCFC(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    uint64_t v8 = *(void *)(a1 + 216);
    uint64_t v9 = *(void **)v8;
    *(void *)(a1 + 56) = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 64) = v10;
    v11 = *(void **)(v8 + 16);
    *(void *)(a1 + 136) = v11;
    uint64_t v12 = *(void *)(v8 + 24);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = v12;
    *(void *)a1 = a1 + 56;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
    if (!a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 8);
    if (!a2)
    {
LABEL_10:
      bzero(v9, 0x40000uLL);
      goto LABEL_11;
    }
  }
  if (a3 > 0x800) {
    goto LABEL_10;
  }
  if (!a3) {
    return;
  }
  v13 = a4;
  unint64_t v14 = a3;
  do
  {
    uint64_t v15 = *v13;
    v13 = (uint64_t *)((char *)v13 + 1);
    unint64_t v16 = (0xBD1E35A7BD000000 * v15) >> 48;
    *((_DWORD *)v9 + v16) = 0;
    *((_DWORD *)v9 + (unsigned __int16)(v16 + 8)) = 0;
    --v14;
  }
  while (v14);
LABEL_11:
  if (a3 >= 0x20)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      int v18 = *((unsigned __int8 *)a4 + v17) + v18 * *(_DWORD *)(a1 + 44) + 1;
      BOOL v19 = v17 >= 0x1C;
      v17 += 4;
    }
    while (!v19);
    *(_DWORD *)(a1 + 16) = v18;
  }
}

void sub_2483DDE30(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    uint64_t v8 = *(void *)(a1 + 216);
    uint64_t v9 = *(_DWORD **)v8;
    *(void *)(a1 + 56) = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 64) = v10;
    v11 = *(void **)(v8 + 16);
    *(void *)(a1 + 136) = v11;
    uint64_t v12 = *(void *)(v8 + 24);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = v12;
    *(void *)a1 = a1 + 56;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
  }
  else
  {
    uint64_t v9 = *(_DWORD **)(a1 + 8);
  }
  sub_2483DDC98(v9, a2, a3, a4);
  if (a3 >= 0x20)
  {
    unint64_t v13 = 0;
    int v14 = 0;
    do
    {
      int v14 = *(unsigned __int8 *)(a4 + v13) + v14 * *(_DWORD *)(a1 + 44) + 1;
      BOOL v15 = v13 >= 0x1C;
      v13 += 4;
    }
    while (!v15);
    *(_DWORD *)(a1 + 16) = v14;
  }
}

void sub_2483DDF1C(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  if (*(_DWORD *)(a1 + 280))
  {
    *(_DWORD *)(a1 + 280) = 0;
    uint64_t v8 = *(uint64_t **)(a1 + 272);
    uint64_t v9 = *v8;
    *(void *)(a1 + 112) = *v8;
    uint64_t v10 = v8[1];
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 120) = v10;
    int v11 = *(_DWORD *)(a1 + 172);
    int v12 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 16) = 64 - v11;
    int v13 = *(_DWORD *)(a1 + 184);
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(unsigned char *)(a1 + 180));
    BOOL v15 = (void *)v8[2];
    *(void *)(a1 + 192) = v15;
    uint64_t v16 = v8[3];
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 200) = v16;
    *(void *)(a1 + 24) = v14;
    *(void *)a1 = 1 << v11;
    *(void *)(a1 + 8) = 1 << v12;
    *(_DWORD *)(a1 + 32) = (1 << v12) - 1;
    *(_DWORD *)(a1 + 36) = v12;
    *(_DWORD *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = a1 + 112;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 100) = 0xF1EBF08100010DCDLL;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = 0;
    memset(v15, 255, 0x4000000uLL);
  }
  sub_2483DDAEC((unint64_t *)a1, a2, a3, a4);
  if (a3 >= 0x20)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
      int v18 = *((unsigned __int8 *)a4 + v17++) + v18 * *(_DWORD *)(a1 + 100) + 1;
    while (v17 != 32);
    *(_DWORD *)(a1 + 72) = v18;
  }
}

uint64_t sub_2483DE03C(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(result + 1488);
  uint64_t v4 = *(void *)(result + 1496) - 1;
  int v5 = (unsigned int *)(v3 + 16 * v4);
  unint64_t v6 = v5 + 1;
  unint64_t v7 = v5[1] & 0x1FFFFFF;
  if (*(void *)(result + 1528) - v7 >= (1 << *(_DWORD *)(result + 8)) - 16) {
    unint64_t v8 = (1 << *(_DWORD *)(result + 8)) - 16;
  }
  else {
    unint64_t v8 = *(void *)(result + 1528) - v7;
  }
  unint64_t v9 = *(int *)(result + 1536);
  unsigned int v10 = *((unsigned __int16 *)v5 + 7);
  unsigned int v11 = v10 & 0x3FF;
  int v12 = *(_DWORD *)(result + 68);
  if (v11 >= v12 + 16) {
    unsigned int v11 = v12
  }
        + 16
        + ((v11 - v12 - 16) & ~(-1 << *(_DWORD *)(result + 64)))
        + ((v5[2] + ((((v11 - v12 - 16) >> *(_DWORD *)(result + 64)) & 1 | 2) << (v10 >> 10)) - 4) << *(_DWORD *)(result + 64));
  if (v11 < 0x10 || v11 - 15 == v9)
  {
    uint64_t v14 = *(void *)(result + 1472);
    uint64_t v15 = *(unsigned int *)(result + 1444);
    BOOL v16 = v9 >= v8;
    unint64_t v17 = v9 - v8;
    if (v17 != 0 && v16)
    {
      unint64_t v18 = *(void *)(result + 104);
      if (v17 - 1 < v18 && v17 > v7)
      {
        unint64_t v20 = v18 - v17 + v7;
        uint64_t v21 = 47;
        do
        {
          uint64_t v22 = v21;
          unint64_t v23 = *(void *)(result + 8 * v21++);
        }
        while (v20 >= v23);
        if (*a2)
        {
          uint64_t v24 = v22 - 47;
          uint64_t v25 = result + 8 * v24;
          uint64_t v26 = *(void *)(v25 + 368);
          uint64_t v27 = v23 - v26;
          uint64_t v28 = *(void *)(v25 + 240);
          uint64_t v29 = v20 - v26;
          uint64_t v30 = *a3;
          do
          {
            if (*(unsigned __int8 *)(v14 + (v30 & v15)) != *(unsigned __int8 *)(v28 + v29)) {
              break;
            }
            ++*v6;
            --*a2;
            uint64_t v30 = (*a3 + 1);
            *a3 = v30;
            if (++v29 == v27)
            {
              uint64_t v31 = v24 + 1;
              if (v24 + 1 == *(void *)(result + 96)) {
                break;
              }
              uint64_t v29 = 0;
              uint64_t v28 = *(void *)(result + 8 * v31 + 240);
              uint64_t v27 = *(void *)(result + 368 + 8 * v24++ + 16) - *(void *)(result + 368 + 8 * v31);
            }
          }
          while (*a2);
        }
      }
    }
    else if (*a2)
    {
      uint64_t v32 = *a3;
      do
      {
        if (*(unsigned __int8 *)(v14 + (v32 & v15)) != *(unsigned __int8 *)(v14
                                                                           + ((v32 - v9) & v15)))
          break;
        ++*v6;
        --*a2;
        uint64_t v32 = (*a3 + 1);
        *a3 = v32;
      }
      while (*a2);
    }
    unint64_t v33 = *v5;
    uint64_t v34 = (*v6 & 0x1FFFFFFu) + (*v6 >> 25);
    int v35 = v10 & 0x3FF;
    if (v33 > 5)
    {
      if (v33 > 0x81)
      {
        if (v33 > 0x841)
        {
          if (v33 >> 1 >= 0xC21)
          {
            if (v33 < 0x5842) {
              LOWORD(v33) = 22;
            }
            else {
              LOWORD(v33) = 23;
            }
          }
          else
          {
            LOWORD(v33) = 21;
          }
        }
        else
        {
          LODWORD(v33) = (__clz(v33 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v33 -= 2;
        unsigned int v36 = (__clz(v33) ^ 0x1F) - 1;
        LODWORD(v33) = (v33 >> v36) + 2 * v36 + 2;
      }
    }
    uint64_t v37 = v3 + 16 * v4;
    if (v34 > 9)
    {
      unsigned int v39 = (__clz(v34 - 70) ^ 0x1F) + 12;
      if (v34 <= 0x845) {
        __int16 v40 = v39;
      }
      else {
        __int16 v40 = 23;
      }
      unsigned int v41 = (__clz(v34 - 6) ^ 0x1F) - 1;
      int v38 = ((unint64_t)(v34 - 6) >> v41) + 2 * v41 + 4;
      if (v34 > 0x85) {
        LOWORD(v38) = v40;
      }
    }
    else
    {
      LOWORD(v38) = v34 - 2;
    }
    v42 = (_WORD *)(v37 + 12);
    unsigned int v43 = v38 & 7 | (8 * (v33 & 7));
    if (v35 || (unsigned __int16)v33 > 7u || (unsigned __int16)v38 > 0xFu)
    {
      int v44 = 3 * ((unsigned __int16)v33 >> 3) + ((unsigned __int16)(v38 & 0xFFF8) >> 3);
      unsigned int v43 = ((((0x520D40u >> (2 * v44)) & 0xC0) + (v44 << 6)) | v43) + 64;
    }
    else if ((v38 & 0xFFF8) != 0)
    {
      LOWORD(v43) = v43 | 0x40;
    }
    _WORD *v42 = v43;
  }
  return result;
}

uint64_t sub_2483DE370(uint64_t a1, void *a2)
{
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), a2[14]);
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), a2[15]);
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), a2[17]);
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), a2[19]);
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), a2[20]);
  uint64_t v4 = a2[7];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);

  return v6(v5, v4);
}

uint64_t sub_2483DE3E8(int a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v4) = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  v8[0] = -1;
  while (1)
  {
    while (1)
    {
      uint64_t v5 = a1;
      if ((*(__int16 *)(a2 + 8 * a1 + 4) & 0x80000000) == 0) {
        break;
      }
      *(unsigned char *)(a3 + *(__int16 *)(a2 + 8 * a1 + 6)) = v4;
      if ((v4 & 0x80000000) != 0) {
        return 1;
      }
      while (1)
      {
        a1 = v8[v4];
        if (a1 != -1) {
          break;
        }
        BOOL v6 = (int)v4 <= 0;
        LODWORD(v4) = v4 - 1;
        if (v6) {
          return 1;
        }
      }
      v8[v4] = -1;
    }
    if ((int)v4 >= a4) {
      break;
    }
    a1 = *(unsigned __int16 *)(a2 + 8 * a1 + 4);
    uint64_t v4 = (int)v4 + 1;
    v8[v4] = *(__int16 *)(a2 + 8 * v5 + 6);
  }
  return 0;
}

uint64_t sub_2483DE4BC(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v45 = a2 - 1;
  uint64_t v10 = a4 + 8;
  for (unsigned int i = 1; ; i *= 2)
  {
    unint64_t v12 = 0;
    if (a2) {
      break;
    }
    uint64_t v16 = -1;
    *(void *)a4 = -1;
    *(void *)(a4 + 8) = -1;
    uint64_t v23 = 1;
LABEL_37:
    uint64_t v34 = 0;
    int v35 = (void *)(v10 - 8 * v16 + 16 * v12);
    do
    {
      unsigned int v36 = *(_DWORD *)(a4 + 8 * v34);
      unsigned int v37 = *(_DWORD *)(a4 + 8 * v23);
      BOOL v38 = v36 > v37;
      if (v36 > v37) {
        uint64_t v39 = v34;
      }
      else {
        uint64_t v39 = v34 + 1;
      }
      if (v38) {
        uint64_t v40 = v23 + 1;
      }
      else {
        uint64_t v40 = v23;
      }
      unsigned int v41 = *(_DWORD *)(a4 + 8 * v39);
      unsigned int v42 = *(_DWORD *)(a4 + 8 * v40);
      if (!v38) {
        uint64_t v23 = v34;
      }
      BOOL v43 = v41 > v42;
      if (v41 > v42) {
        uint64_t v44 = v40;
      }
      else {
        uint64_t v44 = v39;
      }
      *((_DWORD *)v35 - 2) = *(_DWORD *)(a4 + 8 * v44) + *(_DWORD *)(a4 + 8 * v23);
      *((_WORD *)v35 - 2) = v23;
      if (v43) {
        uint64_t v34 = v39;
      }
      else {
        uint64_t v34 = v39 + 1;
      }
      if (v43) {
        uint64_t v23 = v40 + 1;
      }
      else {
        uint64_t v23 = v40;
      }
      *((_WORD *)v35 - 1) = v44;
      *v35++ = -1;
      --v16;
    }
    while (v16);
    __n128 result = sub_2483DE3E8(2 * (int)v12 - 1, a4, a5, a3);
    if (result) {
      return result;
    }
  }
  uint64_t v13 = v45;
  do
  {
    unsigned int v14 = *(_DWORD *)(v9 + 4 * v13);
    if (v14)
    {
      if (v14 <= i) {
        unsigned int v14 = i;
      }
      unint64_t v15 = a4 + 8 * v12;
      *(_DWORD *)unint64_t v15 = v14;
      ++v12;
      *(_WORD *)(v15 + 4) = -1;
      *(_WORD *)(v15 + 6) = v13;
    }
    --v13;
  }
  while (v13 != -1);
  uint64_t v16 = v12 - 1;
  if (v12 != 1)
  {
    if (v12 <= 0xC)
    {
      if (v12 >= 2)
      {
        uint64_t v17 = 0;
        for (uint64_t j = 1; j != v12; ++j)
        {
          uint64_t v19 = *(void *)(a4 + 8 * j);
          uint64_t v20 = v17;
          uint64_t v21 = j;
          do
          {
            unsigned int v22 = *(_DWORD *)(a4 + v20);
            if (v22 == v19)
            {
              if (*(__int16 *)(a4 + v20 + 6) >= SHIWORD(v19)) {
                break;
              }
            }
            else if (v22 <= v19)
            {
              break;
            }
            *(void *)(a4 + 8 * v21) = *(void *)(a4 + v20);
            v20 -= 8;
            --v21;
          }
          while (v21);
          *(void *)(a4 + 8 * v21) = v19;
          v17 += 8;
        }
      }
LABEL_36:
      uint64_t v23 = v12 + 1;
      *(void *)&long long v33 = -1;
      *((void *)&v33 + 1) = -1;
      *(_OWORD *)(a4 + 8 * v12) = v33;
      goto LABEL_37;
    }
    uint64_t v24 = 2 * (v12 < 0x39);
LABEL_23:
    unint64_t v25 = qword_24854B348[v24];
    if (v25 >= v12) {
      goto LABEL_35;
    }
    uint64_t v26 = 0;
    unint64_t v27 = qword_24854B348[v24];
LABEL_25:
    uint64_t v28 = *(void *)(a4 + 8 * v27);
    unint64_t v29 = v27;
    if (v27 < v25) {
      goto LABEL_34;
    }
    uint64_t v30 = v26;
    unint64_t v31 = v27;
    while (1)
    {
      unsigned int v32 = *(_DWORD *)(a4 + v30);
      if (v32 == v28)
      {
        if (*(__int16 *)(a4 + v30 + 6) >= SHIWORD(v28)) {
          goto LABEL_33;
        }
      }
      else if (v32 <= v28)
      {
LABEL_33:
        unint64_t v29 = v31;
LABEL_34:
        *(void *)(a4 + 8 * v29) = v28;
        ++v27;
        v26 += 8;
        if (v27 == v12)
        {
LABEL_35:
          if (++v24 == 6) {
            goto LABEL_36;
          }
          goto LABEL_23;
        }
        goto LABEL_25;
      }
      unint64_t v29 = v31 - v25;
      *(void *)(a4 + 8 * v31) = *(void *)(a4 + v30);
      v30 -= 8 * v25;
      unint64_t v31 = v29;
      if (v29 < v25) {
        goto LABEL_34;
      }
    }
  }
  *(unsigned char *)(a5 + *(__int16 *)(a4 + 6)) = 1;
  return result;
}

void sub_2483DE764(uint64_t a1, int *a2, char *a3)
{
  if (a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (a2[v5]) {
        ++v6;
      }
      ++v5;
    }
    while (a1 != v5);
    if (v6 >= 0x10)
    {
      unint64_t v7 = a1 - 1;
      while (v7 != -1)
      {
        unint64_t v8 = v7;
        if (a2[v7--])
        {
          unint64_t v10 = 0;
          uint64_t v11 = 0;
          unint64_t v12 = v8 + 2;
          size_t v13 = v8 + 1;
          unint64_t v14 = v7 + 3;
          unint64_t v15 = v7 + 2;
          unsigned int v16 = 0x40000000;
          do
          {
            unsigned int v17 = a2[v11];
            if (v16 >= v17) {
              unsigned int v18 = a2[v11];
            }
            else {
              unsigned int v18 = v16;
            }
            if (v17)
            {
              ++v10;
              unsigned int v16 = v18;
            }
            ++v11;
          }
          while (v15 != v11);
          if (v10 >= 5)
          {
            if (v16 <= 3 && v13 - v10 <= 5 && v8 >= 2)
            {
              uint64_t v21 = 0;
              do
              {
                if (a2[v21])
                {
                  unsigned int v22 = &a2[v21];
                  if (!v22[1])
                  {
                    if (v22[2]) {
                      v22[1] = 1;
                    }
                  }
                }
                ++v21;
              }
              while (v7 != v21);
            }
            if (v10 >= 0x1C)
            {
              bzero(a3, v13);
              size_t v23 = 0;
              uint64_t v24 = 0;
              int v25 = *a2;
              do
              {
                if (v15 == v24 || a2[v24] != v25)
                {
                  if (!v25 && v23 > 4 || v25 && v23 > 6) {
                    memset(&a3[v24 - v23], 1, v23);
                  }
                  if (v15 != v24) {
                    int v25 = a2[v24];
                  }
                  size_t v23 = 1;
                }
                else
                {
                  ++v23;
                }
                ++v24;
              }
              while (v14 != v24);
              unint64_t v26 = 0;
              uint64_t v27 = 0;
              unint64_t v28 = 0;
              unint64_t v29 = ((a2[1] + *a2 + a2[2]) << 8) / 3u + 420;
              uint64_t v30 = a2 - 1;
              do
              {
                if (v26 == v13
                  || a3[v26]
                  || v26 && a3[v26 - 1]
                  || (uint64_t v36 = a2[v26], (v36 << 8) - v29 - 1240 <= 0xFFFFFFFFFFFFF64FLL))
                {
                  if (v28 > 3 || v28 == 3 && !v27)
                  {
                    unint64_t v31 = v27 + (v28 >> 1);
                    if (v28 > v31) {
                      int v32 = 1;
                    }
                    else {
                      int v32 = v31 / v28;
                    }
                    if (v27) {
                      int v33 = v32;
                    }
                    else {
                      int v33 = 0;
                    }
                    uint64_t v34 = v30;
                    do
                    {
                      *v34-- = v33;
                      --v28;
                    }
                    while (v28);
                  }
                  if (v26 >= v13 - 2)
                  {
                    if (v26 >= v13) {
                      unsigned int v35 = 0;
                    }
                    else {
                      unsigned int v35 = a2[v26] << 8;
                    }
                  }
                  else
                  {
                    unsigned int v35 = ((a2[v26 + 1] + a2[v26] + a2[v26 + 2]) << 8) / 3u + 420;
                  }
                  unint64_t v29 = v35;
                  if (v26 == v13) {
                    uint64_t v27 = 0;
                  }
                  else {
                    uint64_t v27 = a2[v26];
                  }
                  unint64_t v28 = 1;
                }
                else
                {
                  ++v28;
                  v27 += v36;
                  if (v28 >= 4)
                  {
                    unint64_t v29 = ((v27 << 8) + (v28 >> 1)) / v28;
                    if (v28 == 4) {
                      v29 += 120;
                    }
                  }
                }
                ++v26;
                ++v30;
              }
              while (v26 != v12);
            }
          }
          return;
        }
      }
    }
  }
}

unsigned __int8 *sub_2483DEA50(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(v14, 0, sizeof(v14));
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    do
    {
      unsigned int v5 = *v3++;
      ++*((_WORD *)v14 + v5);
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  int v7 = 0;
  LOWORD(v14[0]) = 0;
  do
  {
    int v7 = 2 * (v7 + *(unsigned __int16 *)((char *)v14 + v6));
    *(_WORD *)&v13[v6 + 2] = v7;
    v6 += 2;
  }
  while (v6 != 30);
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = result[i];
      if (result[i])
      {
        unsigned __int16 v10 = *(_WORD *)&v13[2 * v9];
        *(_WORD *)&v13[2 * v9] = v10 + 1;
        unint64_t v11 = qword_248553450[v10 & 0xF];
        if (v9 >= 5)
        {
          for (unint64_t j = 4; j < v9; j += 4)
          {
            v10 >>= 4;
            unint64_t v11 = qword_248553450[v10] | (16 * v11);
          }
        }
        *(_WORD *)(a3 + 2 * i) = v11 >> (-(char)v9 & 3);
      }
    }
  }
  return result;
}

uint64_t sub_2483DEB70(uint64_t result, int a2, unsigned int a3, int a4)
{
  *(_DWORD *)__n128 result = a2;
  *(_DWORD *)(result + 4) = a3;
  unsigned int v4 = a3 + 16;
  char v5 = a2 + 1;
  if (a4)
  {
    if (a3 > 0x7FFFFFFB)
    {
      int v13 = -2147483636;
      a3 = 2147483644;
    }
    else
    {
      int v6 = -1;
      unsigned int v7 = ((2147483644 - a3) >> a2) + 4;
      do
      {
        int v8 = v6++;
        BOOL v9 = v7 > 3;
        v7 >>= 1;
      }
      while (v9);
      if ((((((2147483644 - a3) >> a2) + 4) >> v6) & 1 | (2 * (v8 + 2))) == 4)
      {
        int v13 = a3 + 16;
      }
      else
      {
        unsigned int v10 = (((((2147483644 - a3) >> a2) + 4) >> v6) & 1 | (2 * (v8 + 2))) - 5;
        unsigned int v11 = v10 >> 1;
        int v12 = (v10 & 1) << ((v10 >> 1) + 1);
        int v13 = a3 + ((v10 << a2) | ~(-1 << a2)) + 17;
        a3 = a3 - (-1 << a2) + (((6 << v11) + v12 - 5) << a2);
      }
    }
    int v14 = v4 + (62 << v5);
  }
  else
  {
    int v14 = v4 + (24 << v5);
    a3 += (1 << (a2 + 26)) + (-1 << (a2 + 2));
    int v13 = v14;
  }
  *(_DWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 12) = v13;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t sub_2483DEC84(uint64_t a1, uint64_t a2, size_t a3, size_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, size_t a9, int a10, unint64_t *a11)
{
  long long v254 = *(_OWORD *)(a5 + 64);
  uint64_t v255 = *(void *)(a5 + 80);
  long long v252 = *(_OWORD *)(a5 + 64);
  uint64_t v253 = *(void *)(a5 + 80);
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 2192);
  if (!v16) {
    goto LABEL_246;
  }
  unsigned int v17 = (void *)v16;
  unsigned int v18 = 0;
  int v19 = 0;
  v238 = (_DWORD *)a5;
  uint64_t v20 = a5 + 64;
  uint64_t v21 = a6;
  int v22 = 1;
  uint64_t v23 = v254;
  double v24 = 1.0e99;
  uint64_t v25 = a7;
  do
  {
    if (v18 <= 0xF)
    {
      while (1)
      {
        double v251 = 0.0;
        sub_2483DEB70((uint64_t)&v252, v19, v18 << v19, v238[9]);
        if (v18 << v19 == HIDWORD(v23) && v19 == v23) {
          int v22 = 0;
        }
        if (!sub_2483DFEEC(a8, a9, &v254, (uint64_t)&v252, &v251, v17)) {
          break;
        }
        double v27 = v251;
        if (v251 > v24) {
          break;
        }
        *(_OWORD *)uint64_t v20 = v252;
        *(void *)(v20 + 16) = v253;
        ++v18;
        double v24 = v27;
        if (v18 == 16)
        {
          double v24 = v27;
          break;
        }
      }
    }
    unsigned int v28 = v18 - 1;
    if (!v18) {
      unsigned int v28 = 0;
    }
    unsigned int v18 = v28 >> 1;
    ++v19;
  }
  while (v19 != 4);
  if (v22)
  {
    double v251 = 0.0;
    sub_2483DFEEC(a8, a9, &v254, (uint64_t)&v254, &v251, v17);
    if (v251 < v24)
    {
      *(_OWORD *)uint64_t v20 = v254;
      *(void *)(v20 + 16) = v255;
    }
  }
  (*(void (**)(void, void *))(a1 + 8))(*(void *)(a1 + 16), v17);
  if (v23 == *(_DWORD *)v20)
  {
    unint64_t v29 = a11;
    if (!a9 || HIDWORD(v23) == v238[17]) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v29 = a11;
    if (!a9) {
      goto LABEL_34;
    }
  }
  unsigned int v30 = HIDWORD(v23) + 16;
  size_t v31 = a9;
  uint64_t v32 = a8 + 8;
  do
  {
    if ((*(_DWORD *)(v32 - 4) & 0x1FFFFFF) != 0 && *(unsigned __int16 *)(v32 + 4) >= 0x80u)
    {
      unsigned int v33 = *(unsigned __int16 *)(v32 + 6);
      unsigned int v34 = v33 & 0x3FF;
      if (v34 >= v30) {
        unsigned int v34 = ((v34 - HIDWORD(v23) - 16) & ~(-1 << v23))
      }
            + v30
            + ((((((v34 - HIDWORD(v23) - 16) >> v23) & 1 | 2) << (v33 >> 10)) + *(_DWORD *)v32 - 4) << v23);
      LOWORD(v35) = v34;
      uint64_t v36 = v238[17];
      int v37 = v36 + 16;
      if (v36 + 16 <= (unint64_t)v34)
      {
        unint64_t v39 = v34 - v36 + (4 << *(_DWORD *)v20) - 16;
        unsigned int v40 = (__clz(v39) ^ 0x1F) - 1;
        uint64_t v41 = ((v39 >> v40) & 1 | 2) << v40;
        int v35 = ((v39 & ~(-1 << *(_DWORD *)v20))
             + v37
             + ((((v39 >> v40) & 1 | (2 * (v40 - *(_DWORD *)v20))) + 65534) << *(_DWORD *)v20)) | ((v40 - *(_DWORD *)v20) << 10);
        unint64_t v38 = (v39 - v41) >> *(_DWORD *)v20;
      }
      else
      {
        LODWORD(v38) = 0;
      }
      *(_WORD *)(v32 + 6) = v35;
      *(_DWORD *)uint64_t v32 = v38;
    }
    v32 += 16;
    --v31;
  }
  while (v31);
LABEL_34:
  unsigned int v42 = (uint64_t *)(v29 + 12);
  sub_2483C767C(a1, a8, a9, a2, a3, a4, (uint64_t)v238, a11, (uint64_t)(v29 + 6), (uint64_t)(v29 + 12));
  unint64_t v43 = *a11;
  if (v238[8])
  {
    uint64_t v44 = 0;
    uint64_t v45 = 1;
    goto LABEL_44;
  }
  if (!v43)
  {
    uint64_t v44 = 0;
LABEL_43:
    uint64_t v45 = 64;
    goto LABEL_44;
  }
  uint64_t v46 = (*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v43);
  if (!v46) {
    goto LABEL_246;
  }
  uint64_t v44 = v46;
  unint64_t v43 = *a11;
  if (!*a11) {
    goto LABEL_43;
  }
  unint64_t v47 = 0;
  uint64_t v45 = 64;
  do
  {
    *(_DWORD *)(v46 + 4 * v47++) = a10;
    unint64_t v43 = *a11;
  }
  while (v47 < *a11);
LABEL_44:
  unint64_t v48 = v43 * v45;
  *(void *)v241 = v43 * v45;
  if (v43 * v45)
  {
    uint64_t v49 = (*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 1040 * v48);
    if (!v49) {
      goto LABEL_246;
    }
    uint64_t v50 = v49;
    unint64_t v51 = v48;
    v52 = (void *)v49;
    do
    {
      bzero(v52, 0x408uLL);
      v52[129] = 0x7FF0000000000000;
      v52 += 130;
      --v51;
    }
    while (v51);
    unint64_t v48 = *(void *)v241;
  }
  else
  {
    uint64_t v50 = 0;
  }
  uint64_t v53 = *v42;
  uint64_t v54 = 4 * *v42;
  if (v54)
  {
    uint64_t v55 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 8768 * v53);
    if (!v55) {
      goto LABEL_246;
    }
    uint64_t v240 = v55;
    v56 = (void *)v55;
    do
    {
      bzero(v56, 0x888uLL);
      v56[273] = 0x7FF0000000000000;
      v56 += 274;
      --v54;
    }
    while (v54);
    unint64_t v48 = *(void *)v241;
  }
  else
  {
    uint64_t v240 = 0;
  }
  v57 = a11;
  unint64_t v58 = a11[6];
  a11[25] = v58;
  if (v58)
  {
    uint64_t v59 = (*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 2832 * v58);
    if (!v59) {
      goto LABEL_246;
    }
    v60 = (void *)v59;
    v57 = a11;
    unint64_t v61 = a11[25];
    a11[24] = v59;
    if (v61)
    {
      do
      {
        bzero(v60, 0xB08uLL);
        v60[353] = 0x7FF0000000000000;
        v60 += 354;
        --v61;
      }
      while (v61);
      v57 = a11;
      v60 = (void *)a11[24];
      unint64_t v48 = *(void *)v241;
    }
  }
  else
  {
    v60 = 0;
    a11[24] = 0;
  }
  v62 = (unsigned int *)v57[3];
  if (v62) {
    uint64_t v63 = *v62;
  }
  else {
    uint64_t v63 = 0;
  }
  v64 = (unsigned int *)v57[9];
  if (v64) {
    uint64_t v65 = *v64;
  }
  else {
    uint64_t v65 = 0;
  }
  v66 = (unsigned int *)v57[15];
  if (v66) {
    uint64_t v67 = *v66;
  }
  else {
    uint64_t v67 = 0;
  }
  if (a9)
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    do
    {
      if (!v65)
      {
        ++v72;
        uint64_t v71 = *(unsigned __int8 *)(a11[8] + v72);
        uint64_t v65 = v64[v72];
      }
      v75 = (unsigned int *)(a8 + 16 * v68);
      v76 = &v60[354 * v71];
      unsigned int v77 = *((unsigned __int16 *)v75 + 6);
      ++*((_DWORD *)v76 + *((unsigned __int16 *)v75 + 6));
      ++v76[352];
      uint64_t v78 = *v75;
      if (v78)
      {
        do
        {
          uint64_t v79 = v21;
          if (!v63)
          {
            ++v74;
            uint64_t v73 = *(unsigned __int8 *)(a11[2] + v74);
            uint64_t v63 = v62[v74];
          }
          uint64_t v80 = v73;
          if (v44)
          {
            v81 = (char *)&unk_248551B18 + (*(_DWORD *)(v44 + 4 * v73) << 9);
            uint64_t v80 = (v73 << 6) + (v81[v25 + 256] | v81[v79]);
          }
          uint64_t v82 = v50 + 1040 * v80;
          --v63;
          ++*(_DWORD *)(v82 + 4 * *(unsigned __int8 *)(a2 + (a3 & a4)));
          ++*(void *)(v82 + 1024);
          uint64_t v21 = *(unsigned __int8 *)(a2 + (a3++ & a4));
          uint64_t v25 = v79;
          --v78;
        }
        while (v78);
      }
      else
      {
        uint64_t v79 = v25;
      }
      uint64_t v83 = *(_DWORD *)(a8 + 16 * v68 + 4) & 0x1FFFFFF;
      a3 += v83;
      if (v83)
      {
        uint64_t v79 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a4));
        uint64_t v21 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a4));
        if (v77 >= 0x80)
        {
          if (!v67)
          {
            ++v70;
            uint64_t v69 = *(unsigned __int8 *)(a11[14] + v70);
            uint64_t v67 = v66[v70];
          }
          --v67;
          unsigned int v84 = v77 >> 6;
          BOOL v87 = v77 >> 6 != 2 && v84 != 4 && v84 != 7 || (v77 & 7) >= 3;
          uint64_t v88 = 3;
          if (!v87) {
            uint64_t v88 = v77 & 7;
          }
          uint64_t v89 = v240 + 2192 * (v88 | (4 * v69));
          uint64_t v90 = *(_WORD *)(a8 + 16 * v68 + 14) & 0x3FF;
          ++*(_DWORD *)(v89 + 4 * v90);
          ++*(void *)(v89 + 2176);
        }
      }
      --v65;
      ++v68;
      uint64_t v25 = v79;
      unint64_t v48 = *(void *)v241;
    }
    while (v68 != a9);
  }
  (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), v44);
  v91 = a11;
  unint64_t v92 = *a11;
  unint64_t v93 = *a11 << 6;
  a11[19] = v93;
  if (v93)
  {
    uint64_t v94 = (*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), v92 << 8);
    if (!v94) {
      goto LABEL_246;
    }
    v91 = a11;
    unint64_t v95 = a11[19];
    a11[23] = v95;
    v96 = a11 + 23;
    a11[18] = v94;
    v97 = (uint64_t *)(a11 + 18);
    if (v95)
    {
      uint64_t v98 = (*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 1040 * v95);
      if (!v98) {
        goto LABEL_246;
      }
      uint64_t v99 = v98;
      uint64_t v94 = *v97;
      v91 = a11;
    }
    else
    {
      uint64_t v99 = 0;
    }
  }
  else
  {
    uint64_t v94 = 0;
    uint64_t v99 = 0;
    a11[18] = 0;
    v97 = (uint64_t *)(a11 + 18);
    a11[23] = 0;
    v96 = a11 + 23;
  }
  v246 = (_DWORD *)v94;
  v91[22] = v99;
  if (v48)
  {
    __b = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v48);
    if (!__b) {
      goto LABEL_246;
    }
    v249 = (unsigned int *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v48);
    if (!v249) {
      goto LABEL_246;
    }
  }
  else
  {
    __b = 0;
    v249 = 0;
  }
  uint64_t v100 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 49176);
  if (!v100) {
    goto LABEL_246;
  }
  v101 = (unsigned int *)v100;
  uint64_t v102 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 1040);
  if (!v102) {
    goto LABEL_246;
  }
  v103 = (char *)v102;
  size_t v235 = 4 * v48;
  v236 = v96;
  v234 = v97;
  if (v48)
  {
    memset_pattern16(__b, &unk_2484DD090, 4 * v48);
    uint64_t v104 = 0;
    for (uint64_t i = 0; i != v48; ++i)
    {
      memcpy((void *)(v99 + v104), (const void *)(v50 + v104), 0x410uLL);
      sub_2483C6A54(v50 + v104);
      *(void *)(v99 + v104 + 1032) = v106;
      v246[i] = i;
      v104 += 1040;
    }
    unint64_t v107 = 0;
    unint64_t v108 = 0;
    unint64_t v109 = v48;
    do
    {
      unint64_t v110 = v109 - 64;
      if (v109 >= 0x40) {
        unint64_t v109 = 64;
      }
      if (v48 - v107 >= 0x40) {
        unint64_t v111 = 64;
      }
      else {
        unint64_t v111 = v48 - v107;
      }
      if (v111)
      {
        uint64_t v112 = 0;
        do
        {
          v249[v108 + v112] = v107 + v112;
          ++v112;
        }
        while (v109 != v112);
        unint64_t v113 = sub_2483CE1C4(v99, v103, (uint64_t)__b, &v246[v107], &v249[v108], v101, v111, v111, 0x100uLL, 0x800uLL);
      }
      else
      {
        unint64_t v113 = 0;
      }
      v108 += v113;
      v107 += 64;
      unint64_t v109 = v110;
    }
    while (v107 < v48);
  }
  else
  {
    unint64_t v108 = 0;
  }
  if (v108 << 6 >= (v108 >> 1) * v108) {
    unint64_t v114 = (v108 >> 1) * v108;
  }
  else {
    unint64_t v114 = v108 << 6;
  }
  if (v114 < 0x800)
  {
    uint64_t v117 = a1;
  }
  else
  {
    uint64_t v115 = 2048;
    do
    {
      unint64_t v116 = v115;
      v115 *= 2;
    }
    while (v116 <= v114);
    uint64_t v117 = a1;
    v118 = (unsigned int *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 24 * v116);
    if (!v118) {
      goto LABEL_246;
    }
    v119 = v118;
    memcpy(v118, v101, 0xC000uLL);
    (*(void (**)(void, unsigned int *))(a1 + 8))(*(void *)(a1 + 16), v101);
    v101 = v119;
  }
  unint64_t v233 = v114;
  v120 = v246;
  unint64_t v121 = sub_2483CE1C4(v99, v103, (uint64_t)__b, v246, v249, v101, v108, v48, 0x100uLL, v233);
  unint64_t v122 = v48;
  unint64_t v123 = v121;
  (*(void (**)(void, unsigned int *))(v117 + 8))(*(void *)(v117 + 16), v101);
  (*(void (**)(void, void *))(v117 + 8))(*(void *)(v117 + 16), __b);
  if (v122)
  {
    uint64_t v124 = 0;
    do
    {
      uint64_t v125 = v124 - 1;
      if (!v124) {
        uint64_t v125 = 0;
      }
      unsigned int v126 = v120[v125];
      double v127 = sub_2483CE49C((void *)(v50 + 1040 * v124), v99 + 1040 * v126, v103);
      if (v123)
      {
        double v128 = v127;
        v129 = v249;
        unint64_t v130 = v123;
        do
        {
          double v131 = sub_2483CE49C((void *)(v50 + 1040 * v124), v99 + 1040 * *v129, v103);
          if (v131 < v128)
          {
            unsigned int v126 = *v129;
            double v128 = v131;
          }
          ++v129;
          --v130;
        }
        while (v130);
      }
      v120 = v246;
      v246[v124++] = v126;
    }
    while (v124 != *(void *)v241);
  }
  if (v123)
  {
    v132 = v249;
    do
    {
      unsigned int v133 = *v132++;
      bzero((void *)(v99 + 1040 * v133), 0x408uLL);
      *(void *)(v99 + 1040 * v133 + 1032) = 0x7FF0000000000000;
      --v123;
    }
    while (v123);
  }
  unint64_t v134 = *(void *)v241;
  if (*(void *)v241)
  {
    uint64_t v135 = 0;
    uint64_t v136 = v50;
    do
    {
      uint64_t v137 = 0;
      uint64_t v138 = v99 + 1040 * v246[v135];
      *(void *)(v138 + 1024) += *(void *)(v50 + 1040 * v135 + 1024);
      do
      {
        *(_DWORD *)(v138 + v137) += *(_DWORD *)(v136 + v137);
        v137 += 4;
      }
      while (v137 != 1024);
      ++v135;
      v136 += 1040;
    }
    while (v135 != *(void *)v241);
    uint64_t v139 = a1;
    (*(void (**)(void, char *))(a1 + 8))(*(void *)(a1 + 16), v103);
    (*(void (**)(void, unsigned int *))(v139 + 8))(*(void *)(v139 + 16), v249);
    v140 = (_DWORD *)(*(uint64_t (**)(void, size_t))a1)(*(void *)(a1 + 16), v235);
    if (!v140) {
      goto LABEL_246;
    }
    v141 = v140;
    memset(v140, 255, v235);
    unsigned int v142 = 0;
    v143 = v246;
    v144 = v246;
    unint64_t v145 = *(void *)v241;
    do
    {
      unsigned int v147 = *v144++;
      uint64_t v146 = v147;
      if (v141[v147] == -1) {
        v141[v146] = v142++;
      }
      --v145;
    }
    while (v145);
    if (v142)
    {
      uint64_t v148 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 1040 * v142);
      v143 = v246;
      uint64_t v149 = v148;
      if (!v148) {
        goto LABEL_246;
      }
    }
    else
    {
      uint64_t v149 = 0;
    }
    unsigned int v151 = 0;
    do
    {
      uint64_t v152 = *v143;
      unsigned int v153 = v141[v152];
      if (v153 == v151)
      {
        v154 = v143;
        memcpy((void *)(v149 + 1040 * v151), (const void *)(v99 + 1040 * v152), 0x410uLL);
        v143 = v154;
        ++v151;
        unsigned int v153 = v141[*v154];
      }
      *v143++ = v153;
      --v134;
    }
    while (v134);
    (*(void (**)(void, _DWORD *))(a1 + 8))(*(void *)(a1 + 16), v141);
    if (v151)
    {
      uint64_t v155 = 0;
      uint64_t v150 = v151;
      uint64_t v156 = 1040 * v151;
      do
      {
        memcpy((void *)(v99 + v155), (const void *)(v149 + v155), 0x410uLL);
        v155 += 1040;
      }
      while (v156 != v155);
    }
    else
    {
      uint64_t v150 = 0;
    }
  }
  else
  {
    uint64_t v139 = a1;
    (*(void (**)(void, char *))(a1 + 8))(*(void *)(a1 + 16), v103);
    (*(void (**)(void, unsigned int *))(v139 + 8))(*(void *)(v139 + 16), v249);
    (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), 0);
    uint64_t v150 = 0;
    uint64_t v149 = 0;
  }
  (*(void (**)(void, uint64_t))(v139 + 8))(*(void *)(v139 + 16), v149);
  void *v236 = v150;
  (*(void (**)(void, uint64_t))(v139 + 8))(*(void *)(v139 + 16), v50);
  v157 = a11;
  if (v238[8])
  {
    unint64_t v158 = *a11;
    if (*a11)
    {
      uint64_t v159 = *v234;
      uint64_t v160 = *v234 + (v158 << 8);
      do
      {
        --v158;
        uint64_t v161 = -256;
        do
        {
          *(_DWORD *)(v160 + v161) = *(_DWORD *)(v159 + 4 * v158);
          v161 += 4;
        }
        while (v161);
        v160 -= 256;
      }
      while (v158);
    }
  }
  unint64_t v162 = a11[12];
  a11[21] = 4 * v162;
  if (!(4 * v162))
  {
    v164 = 0;
    a11[27] = 0;
    v166 = a11 + 27;
    a11[20] = 0;
LABEL_192:
    uint64_t v168 = 0;
    *(void *)v250 = 0;
    v176 = 0;
    v174 = 0;
    v157[26] = 0;
LABEL_193:
    char v175 = 1;
    goto LABEL_194;
  }
  uint64_t v163 = (*(uint64_t (**)(void, unint64_t))v139)(*(void *)(v139 + 16), 16 * v162);
  if (!v163) {
    goto LABEL_246;
  }
  v164 = (unsigned int *)v163;
  v157 = a11;
  unint64_t v165 = a11[21];
  a11[27] = v165;
  v166 = a11 + 27;
  a11[20] = v163;
  if (!v165) {
    goto LABEL_192;
  }
  uint64_t v167 = (*(uint64_t (**)(void, unint64_t))v139)(*(void *)(v139 + 16), 2192 * v165);
  if (!v167) {
    goto LABEL_246;
  }
  uint64_t v168 = v167;
  v164 = (unsigned int *)a11[20];
  unint64_t v169 = a11[21];
  a11[26] = v167;
  if (!v169)
  {
    *(void *)v250 = 0;
    v176 = 0;
    v174 = 0;
    goto LABEL_193;
  }
  *(void *)v250 = v169;
  uint64_t v170 = 4 * v169;
  uint64_t v171 = (*(uint64_t (**)(void, unint64_t))v139)(*(void *)(v139 + 16), 4 * v169);
  if (!v171) {
    goto LABEL_246;
  }
  v172 = (void *)v171;
  uint64_t v173 = (*(uint64_t (**)(void, uint64_t))v139)(*(void *)(v139 + 16), v170);
  if (!v173) {
    goto LABEL_246;
  }
  v174 = (unsigned int *)v173;
  char v175 = 0;
  v176 = v172;
LABEL_194:
  uint64_t v177 = (*(uint64_t (**)(void, uint64_t))v139)(*(void *)(v139 + 16), 49176);
  if (!v177) {
    goto LABEL_246;
  }
  v178 = (unsigned int *)v177;
  uint64_t v179 = (*(uint64_t (**)(void, uint64_t))v139)(*(void *)(v139 + 16), 2192);
  if (!v179) {
    goto LABEL_246;
  }
  v180 = (char *)v179;
  v239 = v166;
  uint64_t v242 = (uint64_t)v176;
  __ba = v178;
  v247 = v174;
  if (v175)
  {
    unint64_t v181 = 0;
    uint64_t v182 = *(void *)v250;
  }
  else
  {
    memset_pattern16(v176, &unk_2484DD090, 4 * *(void *)v250);
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    do
    {
      memcpy((void *)(v168 + v183), (const void *)(v240 + v183), 0x890uLL);
      sub_2483C726C(v240 + v183);
      *(void *)(v168 + v183 + 2184) = v185;
      v164[v184] = v184;
      ++v184;
      v183 += 2192;
    }
    while (*(void *)v250 != v184);
    unint64_t v186 = 0;
    unint64_t v181 = 0;
    unint64_t v187 = *(void *)v250;
    uint64_t v182 = *(void *)v250;
    do
    {
      unint64_t v188 = v187 - 64;
      if (v187 >= 0x40) {
        unint64_t v187 = 64;
      }
      if (*(void *)v250 - v186 >= 0x40) {
        unint64_t v189 = 64;
      }
      else {
        unint64_t v189 = *(void *)v250 - v186;
      }
      if (v189)
      {
        uint64_t v190 = 0;
        do
        {
          v174[v181 + v190] = v186 + v190;
          ++v190;
        }
        while (v187 != v190);
        unint64_t v191 = sub_2483CECFC(v168, v180, v242, &v164[v186], &v174[v181], __ba, v189, v189, 0x100uLL, 0x800uLL);
      }
      else
      {
        unint64_t v191 = 0;
      }
      v181 += v191;
      v186 += 64;
      unint64_t v187 = v188;
    }
    while (v186 < *(void *)v250);
  }
  if (v181 << 6 >= (v181 >> 1) * v181) {
    unint64_t v192 = (v181 >> 1) * v181;
  }
  else {
    unint64_t v192 = v181 << 6;
  }
  if (v192 < 0x800)
  {
    uint64_t v194 = a1;
    v198 = __ba;
  }
  else
  {
    uint64_t v193 = 2048;
    uint64_t v194 = a1;
    do
    {
      unint64_t v195 = v193;
      v193 *= 2;
    }
    while (v195 <= v192);
    v196 = (unsigned int *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 24 * v195);
    if (!v196) {
      goto LABEL_246;
    }
    v197 = v196;
    memcpy(v196, __ba, 0xC000uLL);
    (*(void (**)(void, unsigned int *))(a1 + 8))(*(void *)(a1 + 16), __ba);
    v198 = v197;
  }
  unint64_t v199 = sub_2483CECFC(v168, v180, v242, v164, v174, v198, v181, v182, 0x100uLL, v192);
  uint64_t v200 = v182;
  unint64_t v201 = v199;
  (*(void (**)(void, unsigned int *))(v194 + 8))(*(void *)(v194 + 16), v198);
  (*(void (**)(void, uint64_t))(v194 + 8))(*(void *)(v194 + 16), v242);
  if (v200)
  {
    uint64_t v202 = 0;
    do
    {
      uint64_t v203 = v202 - 1;
      if (!v202) {
        uint64_t v203 = 0;
      }
      unsigned int v204 = v164[v203];
      double v205 = sub_2483CEFD4((void *)(v240 + 2192 * v202), v168 + 2192 * v204, v180);
      if (v201)
      {
        double v206 = v205;
        v207 = v247;
        unint64_t v208 = v201;
        do
        {
          double v209 = sub_2483CEFD4((void *)(v240 + 2192 * v202), v168 + 2192 * *v207, v180);
          if (v209 < v206)
          {
            unsigned int v204 = *v207;
            double v206 = v209;
          }
          ++v207;
          --v208;
        }
        while (v208);
      }
      v164[v202++] = v204;
    }
    while (v202 != *(void *)v250);
  }
  if (v201)
  {
    v210 = v247;
    do
    {
      unsigned int v211 = *v210++;
      bzero((void *)(v168 + 2192 * v211), 0x888uLL);
      *(void *)(v168 + 2192 * v211 + 2184) = 0x7FF0000000000000;
      --v201;
    }
    while (v201);
  }
  uint64_t v212 = *(void *)v250;
  if (!*(void *)v250)
  {
    (*(void (**)(void, char *))(a1 + 8))(*(void *)(a1 + 16), v180);
    (*(void (**)(void, unsigned int *))(a1 + 8))(*(void *)(a1 + 16), v247);
    (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), 0);
    uint64_t v225 = 0;
    uint64_t v224 = 0;
    goto LABEL_259;
  }
  uint64_t v213 = 0;
  uint64_t v214 = v240;
  do
  {
    uint64_t v215 = 0;
    uint64_t v216 = v168 + 2192 * v164[v213];
    *(void *)(v216 + 2176) += *(void *)(v240 + 2192 * v213 + 2176);
    do
    {
      *(_DWORD *)(v216 + v215) += *(_DWORD *)(v214 + v215);
      v215 += 4;
    }
    while (v215 != 2176);
    ++v213;
    v214 += 2192;
  }
  while (v213 != *(void *)v250);
  (*(void (**)(void, char *))(a1 + 8))(*(void *)(a1 + 16), v180);
  (*(void (**)(void, unsigned int *))(a1 + 8))(*(void *)(a1 + 16), v247);
  v217 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 4 * *(void *)v250);
  if (!v217) {
LABEL_246:
  }
    exit(1);
  v218 = v217;
  memset(v217, 255, 4 * *(void *)v250);
  unsigned int v219 = 0;
  v220 = v164;
  uint64_t v221 = *(void *)v250;
  do
  {
    unsigned int v223 = *v220++;
    uint64_t v222 = v223;
    if (v218[v223] == -1) {
      v218[v222] = v219++;
    }
    --v221;
  }
  while (v221);
  if (v219)
  {
    uint64_t v224 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 2192 * v219);
    if (!v224) {
      goto LABEL_246;
    }
  }
  else
  {
    uint64_t v224 = 0;
  }
  unsigned int v226 = 0;
  do
  {
    uint64_t v227 = *v164;
    unsigned int v228 = v218[v227];
    if (v228 == v226)
    {
      memcpy((void *)(v224 + 2192 * v226++), (const void *)(v168 + 2192 * v227), 0x890uLL);
      unsigned int v228 = v218[*v164];
    }
    *v164++ = v228;
    --v212;
  }
  while (v212);
  (*(void (**)(void, _DWORD *))(a1 + 8))(*(void *)(a1 + 16), v218);
  if (v226)
  {
    uint64_t v229 = 0;
    uint64_t v225 = v226;
    do
    {
      memcpy((void *)(v168 + v229), (const void *)(v224 + v229), 0x890uLL);
      v229 += 2192;
    }
    while (2192 * v226 != v229);
  }
  else
  {
    uint64_t v225 = 0;
  }
LABEL_259:
  (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), v224);
  void *v239 = v225;
  v231 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 8);
  uint64_t v230 = *(void *)(a1 + 16);

  return v231(v230, v240);
}

uint64_t sub_2483DFEEC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double *a5, void *a6)
{
  bzero(a6, 0x888uLL);
  *((void *)a6 + 273) = 0x7FF0000000000000;
  if (*a3 == *(_DWORD *)a4)
  {
    BOOL v12 = a3[1] != *(_DWORD *)(a4 + 4);
    if (a2)
    {
LABEL_3:
      uint64_t v13 = 0;
      uint64_t v14 = a1 + 8;
      double v15 = 0.0;
      while (1)
      {
        if ((*(_DWORD *)(v14 - 4) & 0x1FFFFFF) != 0 && *(unsigned __int16 *)(v14 + 4) >= 0x80u)
        {
          unsigned int v16 = *(unsigned __int16 *)(v14 + 6);
          if (v12)
          {
            unsigned int v17 = v16 & 0x3FF;
            int v18 = a3[1];
            if (v17 >= v18 + 16) {
              unsigned int v17 = v18
            }
                  + 16
                  + ((v17 - v18 - 16) & ~(-1 << *a3))
                  + ((*(_DWORD *)v14 + ((((v17 - v18 - 16) >> *a3) & 1 | 2) << (v16 >> 10)) - 4) << *a3);
            if (*(void *)(a4 + 16) < (unint64_t)v17) {
              return 0;
            }
            uint64_t v19 = *(unsigned int *)(a4 + 4);
            int v20 = v19 + 16;
            if (v19 + 16 <= (unint64_t)v17)
            {
              unint64_t v21 = v17 - v19 + (4 << *(_DWORD *)a4) - 16;
              unsigned int v22 = (__clz(v21) ^ 0x1F) - 1;
              unsigned int v16 = ((v21 & ~(-1 << *(_DWORD *)a4))
                   + v20
                   + ((((v21 >> v22) & 1 | (2 * (v22 - *(_DWORD *)a4))) + 65534) << *(_DWORD *)a4)) | ((v22 - *(_DWORD *)a4) << 10);
            }
            else
            {
              LOWORD(v16) = v17;
            }
          }
          ++*((_DWORD *)a6 + (v16 & 0x3FF));
          *((void *)a6 + 272) = ++v13;
          double v15 = v15 + (double)((unsigned __int16)v16 >> 10);
        }
        v14 += 16;
        if (!--a2) {
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
    BOOL v12 = 1;
    if (a2) {
      goto LABEL_3;
    }
  }
  double v15 = 0.0;
LABEL_18:
  sub_2483C726C((uint64_t)a6);
  *a5 = v15 + v23;
  return 1;
}

uint64_t sub_2483E00C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t a9, unsigned int *a10, unint64_t a11, uint64_t *a12)
{
  int v18 = a12;
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 12488);
  if (!v19) {
    goto LABEL_88;
  }
  uint64_t v20 = v19;
  uint64_t v99 = a1;
  if (a8 == 1)
  {
    if (a11)
    {
      unint64_t v21 = 0;
      unsigned int v22 = a10;
      unint64_t v23 = a11;
      do
      {
        unsigned int v24 = *v22;
        v22 += 4;
        v21 += v24;
        --v23;
      }
      while (v23);
      unint64_t v25 = v21 >> 9;
    }
    else
    {
      unint64_t v25 = 0;
    }
    size_t v31 = a12 + 23;
    unint64_t v32 = v25 + 1;
    *(_OWORD *)uint64_t v19 = xmmword_2484DC9D0;
    *(void *)(v19 + 16) = 0x4079000000000000;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = a12;
    *(void *)(v19 + 48) = a12 + 23;
    *(void *)(v19 + 2136) = 512;
    *(void *)(v19 + 2192) = 0;
    *(_OWORD *)(v19 + 2144) = 0u;
    unint64_t v33 = a12[4];
    if (v33 <= v25)
    {
      if (!v33) {
        unint64_t v33 = v25 + 1;
      }
      do
      {
        unint64_t v34 = v33;
        v33 *= 2;
      }
      while (v34 <= v25);
      int v35 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), v34);
      if (!v35) {
        goto LABEL_88;
      }
      uint64_t v36 = (uint64_t)v35;
      size_t v37 = a12[4];
      if (v37) {
        memcpy(v35, (const void *)a12[2], v37);
      }
      (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a12[2]);
      a12[2] = v36;
      a12[4] = v34;
      size_t v31 = a12 + 23;
    }
    unint64_t v38 = a12[5];
    if (v38 <= v25)
    {
      if (!v38) {
        unint64_t v38 = v25 + 1;
      }
      do
      {
        unint64_t v39 = v38;
        v38 *= 2;
      }
      while (v39 <= v25);
      unsigned int v40 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v39);
      if (!v40) {
        goto LABEL_88;
      }
      uint64_t v41 = (uint64_t)v40;
      uint64_t v42 = a12[5];
      if (v42) {
        memcpy(v40, (const void *)a12[3], 4 * v42);
      }
      (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a12[3]);
      a12[3] = v41;
      a12[5] = v39;
      int v18 = a12;
      size_t v31 = a12 + 23;
    }
    uint64_t v43 = 257;
    if (v32 < 0x101) {
      uint64_t v43 = v25 + 1;
    }
    *(void *)(*(void *)(v20 + 32) + 8) = v32;
    *size_t v31 = v43;
    uint64_t v44 = (void *)(*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 1040 * v43);
    if (v44)
    {
      uint64_t v45 = v44;
      v18[22] = v44;
      *(void *)(v20 + 40) = v44;
      bzero(v44, 0x408uLL);
      v45[129] = 0x7FF0000000000000;
      *(_OWORD *)(v20 + 2160) = 0u;
      v101 = (double *)(v20 + 2200);
      sub_2483E0834(a1, v20 + 2200, a11, (uint64_t)(v18 + 6), v18 + 24, v18 + 25);
      v97 = (double *)(v20 + 7984);
      sub_2483E09E8(a1, v20 + 7984, a11, (uint64_t)(v18 + 12), v18 + 26, v18 + 27);
      if (a11)
      {
        for (uint64_t i = 0; i != a11; ++i)
        {
          unint64_t v47 = &a10[4 * i];
          uint64_t v48 = *v47;
          unsigned int v49 = v47[1];
          unsigned int v50 = *((unsigned __int16 *)v47 + 6);
          __int16 v51 = *((_WORD *)v47 + 7);
          sub_2483E0B98((uint64_t)v101, *((unsigned __int16 *)v47 + 6));
          if (v48)
          {
            do
            {
              uint64_t v52 = *(void *)(v20 + 40) + 1040 * *(void *)(v20 + 2152);
              ++*(_DWORD *)(v52 + 4 * *(unsigned __int8 *)(a2 + (a3 & a4)));
              ++*(void *)(v52 + 1024);
              uint64_t v53 = *(void *)(v20 + 2144) + 1;
              *(void *)(v20 + 2144) = v53;
              if (v53 == *(void *)(v20 + 2136)) {
                sub_2483E0C30((double *)v20, 0);
              }
              ++a3;
              --v48;
            }
            while (v48);
          }
          if ((v49 & 0x1FFFFFF) != 0 && v50 >= 0x80) {
            sub_2483E0BE4((uint64_t)v97, v51 & 0x3FF);
          }
          a3 += v49 & 0x1FFFFFF;
        }
      }
      sub_2483E0C30((double *)v20, 1);
      sub_2483E1208(v101, 1);
      sub_2483E17E8(v97, 1);
      uint64_t v54 = v99;
      goto LABEL_85;
    }
LABEL_88:
    exit(1);
  }
  unsigned int v92 = a6;
  if (a11)
  {
    unint64_t v26 = 0;
    double v27 = a10;
    unint64_t v28 = a11;
    do
    {
      unsigned int v29 = *v27;
      v27 += 4;
      v26 += v29;
      --v28;
    }
    while (v28);
    unint64_t v30 = v26 >> 9;
  }
  else
  {
    unint64_t v30 = 0;
  }
  uint64_t v55 = a12;
  *(void *)uint64_t v19 = 256;
  *(void *)(v19 + 8) = a8;
  *(void *)(v19 + 16) = 0x100 / a8;
  *(void *)(v19 + 24) = 512;
  *(void *)(v19 + 32) = 0x4079000000000000;
  *(void *)(v19 + 40) = 0;
  *(void *)(v19 + 48) = a12;
  *(void *)(v19 + 64) = a12 + 23;
  *(void *)(v19 + 72) = 512;
  *(void *)(v19 + 320) = 0;
  if (v30 + 1 >= 0x100 / a8 + 1) {
    unint64_t v56 = 0x100 / a8 + 1;
  }
  else {
    unint64_t v56 = v30 + 1;
  }
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 88) = 0;
  unint64_t v57 = a12[4];
  unint64_t v88 = a8;
  unint64_t v94 = v56;
  if (v57 <= v30)
  {
    if (!v57) {
      unint64_t v57 = v30 + 1;
    }
    do
    {
      unint64_t v58 = v57;
      v57 *= 2;
    }
    while (v58 <= v30);
    uint64_t v59 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), v58);
    if (!v59) {
      goto LABEL_88;
    }
    uint64_t v60 = (uint64_t)v59;
    uint64_t v55 = a12;
    size_t v61 = a12[4];
    if (v61) {
      memcpy(v59, (const void *)a12[2], v61);
    }
    (*(void (**)(void, uint64_t))(v99 + 8))(*(void *)(v99 + 16), a12[2]);
    a12[2] = v60;
    a12[4] = v58;
    a8 = v88;
    unint64_t v56 = v94;
  }
  unint64_t v62 = v55[5];
  if (v62 <= v30)
  {
    if (!v62) {
      unint64_t v62 = v30 + 1;
    }
    do
    {
      unint64_t v63 = v62;
      v62 *= 2;
    }
    while (v63 <= v30);
    v64 = (void *)(*(uint64_t (**)(void, unint64_t))v99)(*(void *)(v99 + 16), 4 * v63);
    if (!v64) {
      goto LABEL_88;
    }
    uint64_t v65 = (uint64_t)v64;
    uint64_t v55 = a12;
    uint64_t v66 = a12[5];
    if (v66) {
      memcpy(v64, (const void *)a12[3], 4 * v66);
    }
    (*(void (**)(void, uint64_t))(v99 + 8))(*(void *)(v99 + 16), a12[3]);
    a12[3] = v65;
    a12[5] = v63;
    a8 = v88;
    unint64_t v56 = v94;
  }
  v55[1] = v30 + 1;
  v55[23] = v56 * a8;
  uint64_t v67 = v55;
  if (a8)
  {
    a8 = (*(uint64_t (**)(void, unint64_t))v99)(*(void *)(v99 + 16), 1040 * v56 * a8);
    if (!a8) {
      goto LABEL_88;
    }
  }
  uint64_t v68 = a5;
  v67[22] = a8;
  *(void *)(v20 + 56) = a8;
  unint64_t v69 = v88;
  uint64_t v70 = v92;
  do
  {
    bzero((void *)a8, 0x408uLL);
    *(void *)(a8 + 1032) = 0x7FF0000000000000;
    a8 += 1040;
    --v69;
  }
  while (v69);
  *(void *)(v20 + 96) = 0;
  *(void *)(v20 + 104) = 0;
  uint64_t v90 = (double *)(v20 + 2200);
  sub_2483E0834(v99, v20 + 2200, a11, (uint64_t)(a12 + 6), a12 + 24, a12 + 25);
  uint64_t v89 = (double *)(v20 + 7984);
  sub_2483E09E8(v99, v20 + 7984, a11, (uint64_t)(a12 + 12), a12 + 26, a12 + 27);
  if (a11)
  {
    uint64_t v71 = 0;
    do
    {
      uint64_t v98 = v71;
      uint64_t v72 = &a10[4 * v71];
      uint64_t v73 = *v72;
      __int16 v91 = *((_WORD *)v72 + 7);
      uint64_t v93 = *((unsigned __int16 *)v72 + 6);
      unsigned int v95 = v72[1];
      sub_2483E0B98((uint64_t)v90, v93);
      if (v73)
      {
        do
        {
          char v74 = *(unsigned char *)(a7 + 256 + v70);
          uint64_t v70 = v68;
          uint64_t v68 = *(unsigned __int8 *)(a2 + (a3 & a4));
          uint64_t v75 = *(void *)(v20 + 56)
              + 1040
              * (*(void *)(v20 + 88) + *(unsigned int *)(a9 + 4 * (v74 | *(unsigned char *)(a7 + v70))));
          ++*(_DWORD *)(v75 + 4 * v68);
          ++*(void *)(v75 + 1024);
          uint64_t v76 = *(void *)(v20 + 72);
          uint64_t v77 = *(void *)(v20 + 80) + 1;
          *(void *)(v20 + 80) = v77;
          if (v77 == v76) {
            sub_2483E1DC8((void *)v20, v99, 0);
          }
          ++a3;
          --v73;
        }
        while (v73);
      }
      uint64_t v78 = v95 & 0x1FFFFFF;
      a3 += v78;
      if (v78)
      {
        uint64_t v70 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a4));
        uint64_t v68 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a4));
        if (v93 >= 0x80) {
          sub_2483E0BE4((uint64_t)v89, v91 & 0x3FF);
        }
      }
      uint64_t v71 = v98 + 1;
    }
    while (v98 + 1 != a11);
  }
  uint64_t v54 = v99;
  sub_2483E1DC8((void *)v20, v99, 1);
  sub_2483E1208(v90, 1);
  sub_2483E17E8(v89, 1);
  uint64_t v79 = *a12;
  uint64_t v80 = *a12 << 6;
  a12[19] = v80;
  if (v80)
  {
    uint64_t v81 = (*(uint64_t (**)(void, uint64_t))v99)(*(void *)(v99 + 16), v79 << 8);
    int v82 = v88;
    if (!v81) {
      goto LABEL_88;
    }
    uint64_t v79 = *a12;
  }
  else
  {
    uint64_t v81 = 0;
    int v82 = v88;
  }
  a12[18] = v81;
  if (v79)
  {
    for (uint64_t j = 0; j != v79; ++j)
    {
      for (uint64_t k = 0; k != 256; k += 4)
        *(_DWORD *)(v81 + k) = *(_DWORD *)(a9 + k) + j * v82;
      v81 += 256;
    }
  }
LABEL_85:
  v86 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8);
  uint64_t v85 = *(void *)(v54 + 16);

  return v86(v85, v20);
}

double sub_2483E0834(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t *a6)
{
  unint64_t v11 = a3 >> 10;
  unint64_t v12 = (a3 >> 10) + 1;
  *(_OWORD *)a2 = xmmword_2484DC9E0;
  *(void *)(a2 + 16) = 0x407F400000000000;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = a4;
  *(void *)(a2 + 48) = a6;
  *(void *)(a2 + 5720) = 1024;
  *(void *)(a2 + 5776) = 0;
  *(_OWORD *)(a2 + 5728) = 0u;
  unint64_t v13 = *(void *)(a4 + 32);
  if (v13 <= a3 >> 10)
  {
    if (!v13) {
      unint64_t v13 = (a3 >> 10) + 1;
    }
    do
    {
      unint64_t v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    double v15 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), v14);
    if (!v15) {
      goto LABEL_21;
    }
    unsigned int v16 = v15;
    size_t v17 = *(void *)(a4 + 32);
    if (v17) {
      memcpy(v15, *(const void **)(a4 + 16), v17);
    }
    (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a4 + 16));
    *(void *)(a4 + 16) = v16;
    *(void *)(a4 + 32) = v14;
  }
  unint64_t v18 = *(void *)(a4 + 40);
  if (v18 > v11) {
    goto LABEL_17;
  }
  if (!v18) {
    unint64_t v18 = v12;
  }
  do
  {
    unint64_t v19 = v18;
    v18 *= 2;
  }
  while (v19 <= v11);
  uint64_t v20 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v19);
  if (!v20) {
LABEL_21:
  }
    exit(1);
  unint64_t v21 = v20;
  uint64_t v22 = *(void *)(a4 + 40);
  if (v22) {
    memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
  }
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a4 + 24));
  *(void *)(a4 + 24) = v21;
  *(void *)(a4 + 40) = v19;
LABEL_17:
  uint64_t v23 = 257;
  if (v12 < 0x101) {
    uint64_t v23 = v12;
  }
  *(void *)(*(void *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  unsigned int v24 = (void *)(*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 2832 * v23);
  if (!v24) {
    goto LABEL_21;
  }
  unint64_t v25 = v24;
  *a5 = v24;
  *(void *)(a2 + 40) = v24;
  bzero(v24, 0xB08uLL);
  v25[353] = 0x7FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 5744) = 0u;
  return result;
}

double sub_2483E09E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t *a6)
{
  unint64_t v11 = a3 >> 9;
  unint64_t v12 = (a3 >> 9) + 1;
  *(_OWORD *)a2 = xmmword_2484DC9F0;
  *(void *)(a2 + 16) = 0x4059000000000000;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = a4;
  *(void *)(a2 + 48) = a6;
  *(void *)(a2 + 4440) = 512;
  *(void *)(a2 + 4496) = 0;
  *(_OWORD *)(a2 + 4448) = 0u;
  unint64_t v13 = *(void *)(a4 + 32);
  if (v13 <= a3 >> 9)
  {
    if (!v13) {
      unint64_t v13 = (a3 >> 9) + 1;
    }
    do
    {
      unint64_t v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    double v15 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), v14);
    if (!v15) {
      goto LABEL_21;
    }
    unsigned int v16 = v15;
    size_t v17 = *(void *)(a4 + 32);
    if (v17) {
      memcpy(v15, *(const void **)(a4 + 16), v17);
    }
    (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a4 + 16));
    *(void *)(a4 + 16) = v16;
    *(void *)(a4 + 32) = v14;
  }
  unint64_t v18 = *(void *)(a4 + 40);
  if (v18 > v11) {
    goto LABEL_17;
  }
  if (!v18) {
    unint64_t v18 = v12;
  }
  do
  {
    unint64_t v19 = v18;
    v18 *= 2;
  }
  while (v19 <= v11);
  uint64_t v20 = (void *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 4 * v19);
  if (!v20) {
LABEL_21:
  }
    exit(1);
  unint64_t v21 = v20;
  uint64_t v22 = *(void *)(a4 + 40);
  if (v22) {
    memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
  }
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a4 + 24));
  *(void *)(a4 + 24) = v21;
  *(void *)(a4 + 40) = v19;
LABEL_17:
  uint64_t v23 = 257;
  if (v12 < 0x101) {
    uint64_t v23 = v12;
  }
  *(void *)(*(void *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  unsigned int v24 = (void *)(*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 16), 2192 * v23);
  if (!v24) {
    goto LABEL_21;
  }
  unint64_t v25 = v24;
  *a5 = v24;
  *(void *)(a2 + 40) = v24;
  bzero(v24, 0x888uLL);
  v25[273] = 0x7FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 4464) = 0u;
  return result;
}

void sub_2483E0B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40) + 2832 * *(void *)(a1 + 5736);
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(void *)(v2 + 2816);
  uint64_t v3 = *(void *)(a1 + 5728) + 1;
  *(void *)(a1 + 5728) = v3;
  if (v3 == *(void *)(a1 + 5720)) {
    sub_2483E1208((double *)a1, 0);
  }
}

void sub_2483E0BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40) + 2192 * *(void *)(a1 + 4456);
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(void *)(v2 + 2176);
  uint64_t v3 = *(void *)(a1 + 4448) + 1;
  *(void *)(a1 + 4448) = v3;
  if (v3 == *(void *)(a1 + 4440)) {
    sub_2483E17E8((double *)a1, 0);
  }
}

void sub_2483E0C30(double *a1, int a2)
{
  int v2 = a2;
  v88[2] = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)*((void *)a1 + 4);
  char v5 = (unsigned int *)*((void *)a1 + 5);
  unint64_t v6 = *((void *)a1 + 1);
  if (*((void *)a1 + 268) > v6) {
    unint64_t v6 = *((void *)a1 + 268);
  }
  *((void *)a1 + 268) = v6;
  if (!*((void *)a1 + 3))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(unsigned char *)v4[2] = 0;
    unint64_t v15 = (unint64_t)&v5[*(void *)a1];
    double v16 = 0.0;
    size_t v17 = v5;
    if (*(void *)a1) {
      goto LABEL_13;
    }
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        double v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF) {
            double v27 = log2((double)v13);
          }
          else {
            double v27 = dbl_248552498[v13];
          }
          double v16 = v16 + v26 * v27;
        }
        if (v16 >= v26) {
          double v28 = v16;
        }
        else {
          double v28 = (double)v13;
        }
        a1[272] = v28;
        a1[273] = v28;
        ++*((void *)a1 + 3);
        ++*v4;
        unint64_t v29 = *((void *)a1 + 269) + 1;
        *((void *)a1 + 269) = v29;
        if (v29 < **((void **)a1 + 6))
        {
          unint64_t v30 = &v5[260 * v29];
          bzero(v30, 0x408uLL);
          *((void *)v30 + 129) = 0x7FF0000000000000;
        }
        a1[268] = 0.0;
        goto LABEL_85;
      }
      unsigned int v19 = *v17++;
      uint64_t v18 = v19;
      unint64_t v14 = v13 + v19;
      double v20 = (double)v19;
      if (v19 > 0xFF) {
        double v21 = log2(v20);
      }
      else {
        double v21 = dbl_248552498[v18];
      }
      double v16 = v16 - v20 * v21;
LABEL_13:
      unsigned int v23 = *v17++;
      uint64_t v22 = v23;
      unint64_t v13 = v14 + v23;
      double v24 = (double)v23;
      if (v23 > 0xFF) {
        double v25 = log2(v24);
      }
      else {
        double v25 = dbl_248552498[v22];
      }
      double v16 = v16 - v24 * v25;
    }
  }
  if (!v6) {
    goto LABEL_85;
  }
  uint64_t v80 = *((void *)a1 + 3);
  int v81 = v6;
  int v82 = v4;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  BOOL v9 = &v5[260 * *((void *)a1 + 269)];
  double v10 = *a1;
  unint64_t v11 = &v9[*(void *)a1];
  double v12 = 0.0;
  __src = v9;
  uint64_t v85 = (uint64_t *)(a1 + 272);
  if ((*(void *)a1 & 1) == 0) {
    goto LABEL_28;
  }
  while (1)
  {
    unsigned int v36 = *v9++;
    uint64_t v35 = v36;
    unint64_t v7 = v8 + v36;
    double v37 = (double)v36;
    double v38 = v36 > 0xFF ? log2(v37) : dbl_248552498[v35];
    double v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11) {
      break;
    }
    unsigned int v32 = *v9++;
    uint64_t v31 = v32;
    unint64_t v8 = v7 + v32;
    double v33 = (double)v32;
    if (v32 > 0xFF) {
      double v34 = log2(v33);
    }
    else {
      double v34 = dbl_248552498[v31];
    }
    double v12 = v12 - v33 * v34;
  }
  double v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF) {
      double v40 = log2((double)v7);
    }
    else {
      double v40 = dbl_248552498[v7];
    }
    double v12 = v12 + v39 * v40;
  }
  uint64_t v41 = 0;
  if (v12 < v39) {
    double v12 = (double)v7;
  }
  char v42 = 1;
  do
  {
    char v43 = v42;
    double v44 = a1[v41 + 270];
    uint64_t v45 = (uint64_t *)&a1[130 * v41];
    uint64_t v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x410uLL);
    uint64_t v47 = 0;
    uint64_t v48 = v5;
    unsigned int v49 = &v5[260 * *(void *)&v44];
    v45[135] += *((void *)v49 + 128);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 256);
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    uint64_t v52 = &v46[*(void *)&v10];
    double v53 = 0.0;
    if (LOBYTE(v10)) {
      goto LABEL_57;
    }
    while (v46 < v52)
    {
      unsigned int v55 = *v46++;
      uint64_t v54 = v55;
      unint64_t v51 = v50 + v55;
      double v56 = (double)v55;
      if (v55 > 0xFF) {
        double v57 = log2(v56);
      }
      else {
        double v57 = dbl_248552498[v54];
      }
      double v53 = v53 - v56 * v57;
LABEL_57:
      unsigned int v61 = *v46++;
      uint64_t v60 = v61;
      unint64_t v50 = v51 + v61;
      double v62 = (double)v61;
      if (v61 > 0xFF) {
        double v63 = log2(v62);
      }
      else {
        double v63 = dbl_248552498[v60];
      }
      double v53 = v53 - v62 * v63;
    }
    double v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF) {
        double v59 = log2((double)v50);
      }
      else {
        double v59 = dbl_248552498[v50];
      }
      char v5 = v48;
      double v53 = v53 + v58 * v59;
    }
    else
    {
      char v5 = v48;
    }
    char v42 = 0;
    if (v53 >= v58) {
      double v64 = v53;
    }
    else {
      double v64 = v58;
    }
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    uint64_t v41 = 1;
  }
  while ((v43 & 1) != 0);
  unsigned int v4 = v82;
  uint64_t v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    double v68 = v86;
    double v67 = v87;
    int v2 = a2;
  }
  else
  {
    double v66 = a1[2];
    double v68 = v86;
    double v67 = v87;
    BOOL v69 = v86 <= v66 || v87 <= v66;
    int v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(unsigned char *)(v82[2] + v80) = v65;
      a1[271] = a1[270];
      *((void *)a1 + 270) = *(unsigned __int8 *)v82;
      a1[273] = a1[272];
      a1[272] = v12;
      ++*((void *)a1 + 3);
      ++*v82;
      unint64_t v70 = *((void *)a1 + 269) + 1;
      *((void *)a1 + 269) = v70;
      if (v70 < **((void **)a1 + 6))
      {
        uint64_t v71 = &v5[260 * v70];
        bzero(v71, 0x408uLL);
        *((void *)v71 + 129) = 0x7FF0000000000000;
      }
      a1[268] = 0.0;
LABEL_79:
      a1[274] = 0.0;
      uint64_t v76 = *((void *)a1 + 1);
LABEL_84:
      *((void *)a1 + 267) = v76;
      goto LABEL_85;
    }
  }
  uint64_t v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(unsigned char *)(v82[2] + v80) = *(unsigned char *)(v82[2] + v80 - 2);
    uint64_t v73 = *((void *)a1 + 270);
    uint64_t v74 = *((void *)a1 + 271);
    *((void *)a1 + 270) = v74;
    *((void *)a1 + 271) = v73;
    memcpy(&v5[260 * v74], a1 + 137, 0x410uLL);
    a1[273] = a1[272];
    a1[272] = *(double *)&v88[1];
    ++*((void *)a1 + 3);
    a1[268] = 0.0;
    uint64_t v75 = &v5[260 * *((void *)a1 + 269)];
    bzero(v75, 0x408uLL);
    *((void *)v75 + 129) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[260 * *((void *)a1 + 270)], a1 + 7, 0x410uLL);
  uint64_t v77 = v88[0];
  a1[272] = *(double *)v88;
  if (*v82 == 1) {
    *((void *)a1 + 273) = v77;
  }
  a1[268] = 0.0;
  uint64_t v78 = &v5[260 * *((void *)a1 + 269)];
  bzero(v78, 0x408uLL);
  *((void *)v78 + 129) = 0x7FF0000000000000;
  unint64_t v79 = *((void *)a1 + 274) + 1;
  *((void *)a1 + 274) = v79;
  if (v79 >= 2)
  {
    uint64_t v76 = *((void *)a1 + 267) + *((void *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((void **)a1 + 6) = *v4;
    v4[1] = *((void *)a1 + 3);
  }
}

void sub_2483E1208(double *a1, int a2)
{
  int v2 = a2;
  v88[2] = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)*((void *)a1 + 4);
  char v5 = (unsigned int *)*((void *)a1 + 5);
  unint64_t v6 = *((void *)a1 + 1);
  if (*((void *)a1 + 716) > v6) {
    unint64_t v6 = *((void *)a1 + 716);
  }
  *((void *)a1 + 716) = v6;
  if (!*((void *)a1 + 3))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(unsigned char *)v4[2] = 0;
    unint64_t v15 = (unint64_t)&v5[*(void *)a1];
    double v16 = 0.0;
    size_t v17 = v5;
    if (*(void *)a1) {
      goto LABEL_13;
    }
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        double v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF) {
            double v27 = log2((double)v13);
          }
          else {
            double v27 = dbl_248552498[v13];
          }
          double v16 = v16 + v26 * v27;
        }
        if (v16 >= v26) {
          double v28 = v16;
        }
        else {
          double v28 = (double)v13;
        }
        a1[720] = v28;
        a1[721] = v28;
        ++*((void *)a1 + 3);
        ++*v4;
        unint64_t v29 = *((void *)a1 + 717) + 1;
        *((void *)a1 + 717) = v29;
        if (v29 < **((void **)a1 + 6))
        {
          unint64_t v30 = &v5[708 * v29];
          bzero(v30, 0xB08uLL);
          *((void *)v30 + 353) = 0x7FF0000000000000;
        }
        a1[716] = 0.0;
        goto LABEL_85;
      }
      unsigned int v19 = *v17++;
      uint64_t v18 = v19;
      unint64_t v14 = v13 + v19;
      double v20 = (double)v19;
      if (v19 > 0xFF) {
        double v21 = log2(v20);
      }
      else {
        double v21 = dbl_248552498[v18];
      }
      double v16 = v16 - v20 * v21;
LABEL_13:
      unsigned int v23 = *v17++;
      uint64_t v22 = v23;
      unint64_t v13 = v14 + v23;
      double v24 = (double)v23;
      if (v23 > 0xFF) {
        double v25 = log2(v24);
      }
      else {
        double v25 = dbl_248552498[v22];
      }
      double v16 = v16 - v24 * v25;
    }
  }
  if (!v6) {
    goto LABEL_85;
  }
  uint64_t v80 = *((void *)a1 + 3);
  int v81 = v6;
  int v82 = v4;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v85 = (uint64_t *)(a1 + 720);
  BOOL v9 = &v5[708 * *((void *)a1 + 717)];
  double v10 = *a1;
  unint64_t v11 = &v9[*(void *)a1];
  double v12 = 0.0;
  __src = v9;
  if ((*(void *)a1 & 1) == 0) {
    goto LABEL_28;
  }
  while (1)
  {
    unsigned int v36 = *v9++;
    uint64_t v35 = v36;
    unint64_t v7 = v8 + v36;
    double v37 = (double)v36;
    double v38 = v36 > 0xFF ? log2(v37) : dbl_248552498[v35];
    double v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11) {
      break;
    }
    unsigned int v32 = *v9++;
    uint64_t v31 = v32;
    unint64_t v8 = v7 + v32;
    double v33 = (double)v32;
    if (v32 > 0xFF) {
      double v34 = log2(v33);
    }
    else {
      double v34 = dbl_248552498[v31];
    }
    double v12 = v12 - v33 * v34;
  }
  double v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF) {
      double v40 = log2((double)v7);
    }
    else {
      double v40 = dbl_248552498[v7];
    }
    double v12 = v12 + v39 * v40;
  }
  uint64_t v41 = 0;
  if (v12 < v39) {
    double v12 = (double)v7;
  }
  char v42 = 1;
  do
  {
    char v43 = v42;
    double v44 = a1[v41 + 718];
    uint64_t v45 = (uint64_t *)&a1[354 * v41];
    uint64_t v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0xB10uLL);
    uint64_t v47 = 0;
    uint64_t v48 = v5;
    unsigned int v49 = &v5[708 * *(void *)&v44];
    v45[359] += *((void *)v49 + 352);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 704);
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    uint64_t v52 = &v46[*(void *)&v10];
    double v53 = 0.0;
    if (LOBYTE(v10)) {
      goto LABEL_57;
    }
    while (v46 < v52)
    {
      unsigned int v55 = *v46++;
      uint64_t v54 = v55;
      unint64_t v51 = v50 + v55;
      double v56 = (double)v55;
      if (v55 > 0xFF) {
        double v57 = log2(v56);
      }
      else {
        double v57 = dbl_248552498[v54];
      }
      double v53 = v53 - v56 * v57;
LABEL_57:
      unsigned int v61 = *v46++;
      uint64_t v60 = v61;
      unint64_t v50 = v51 + v61;
      double v62 = (double)v61;
      if (v61 > 0xFF) {
        double v63 = log2(v62);
      }
      else {
        double v63 = dbl_248552498[v60];
      }
      double v53 = v53 - v62 * v63;
    }
    double v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF) {
        double v59 = log2((double)v50);
      }
      else {
        double v59 = dbl_248552498[v50];
      }
      char v5 = v48;
      double v53 = v53 + v58 * v59;
    }
    else
    {
      char v5 = v48;
    }
    char v42 = 0;
    if (v53 >= v58) {
      double v64 = v53;
    }
    else {
      double v64 = v58;
    }
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    uint64_t v41 = 1;
  }
  while ((v43 & 1) != 0);
  unsigned int v4 = v82;
  uint64_t v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    double v68 = v86;
    double v67 = v87;
    int v2 = a2;
  }
  else
  {
    double v66 = a1[2];
    double v68 = v86;
    double v67 = v87;
    BOOL v69 = v86 <= v66 || v87 <= v66;
    int v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(unsigned char *)(v82[2] + v80) = v65;
      a1[719] = a1[718];
      *((void *)a1 + 718) = *(unsigned __int8 *)v82;
      a1[721] = a1[720];
      a1[720] = v12;
      ++*((void *)a1 + 3);
      ++*v82;
      unint64_t v70 = *((void *)a1 + 717) + 1;
      *((void *)a1 + 717) = v70;
      if (v70 < **((void **)a1 + 6))
      {
        uint64_t v71 = &v5[708 * v70];
        bzero(v71, 0xB08uLL);
        *((void *)v71 + 353) = 0x7FF0000000000000;
      }
      a1[716] = 0.0;
LABEL_79:
      a1[722] = 0.0;
      uint64_t v76 = *((void *)a1 + 1);
LABEL_84:
      *((void *)a1 + 715) = v76;
      goto LABEL_85;
    }
  }
  uint64_t v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(unsigned char *)(v82[2] + v80) = *(unsigned char *)(v82[2] + v80 - 2);
    uint64_t v73 = *((void *)a1 + 718);
    uint64_t v74 = *((void *)a1 + 719);
    *((void *)a1 + 718) = v74;
    *((void *)a1 + 719) = v73;
    memcpy(&v5[708 * v74], a1 + 361, 0xB10uLL);
    a1[721] = a1[720];
    a1[720] = *(double *)&v88[1];
    ++*((void *)a1 + 3);
    a1[716] = 0.0;
    uint64_t v75 = &v5[708 * *((void *)a1 + 717)];
    bzero(v75, 0xB08uLL);
    *((void *)v75 + 353) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[708 * *((void *)a1 + 718)], a1 + 7, 0xB10uLL);
  uint64_t v77 = v88[0];
  a1[720] = *(double *)v88;
  if (*v82 == 1) {
    *((void *)a1 + 721) = v77;
  }
  a1[716] = 0.0;
  uint64_t v78 = &v5[708 * *((void *)a1 + 717)];
  bzero(v78, 0xB08uLL);
  *((void *)v78 + 353) = 0x7FF0000000000000;
  unint64_t v79 = *((void *)a1 + 722) + 1;
  *((void *)a1 + 722) = v79;
  if (v79 >= 2)
  {
    uint64_t v76 = *((void *)a1 + 715) + *((void *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((void **)a1 + 6) = *v4;
    v4[1] = *((void *)a1 + 3);
  }
}

void sub_2483E17E8(double *a1, int a2)
{
  int v2 = a2;
  v88[2] = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)*((void *)a1 + 4);
  char v5 = (unsigned int *)*((void *)a1 + 5);
  unint64_t v6 = *((void *)a1 + 1);
  if (*((void *)a1 + 556) > v6) {
    unint64_t v6 = *((void *)a1 + 556);
  }
  *((void *)a1 + 556) = v6;
  if (!*((void *)a1 + 3))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(unsigned char *)v4[2] = 0;
    unint64_t v15 = (unint64_t)&v5[*(void *)a1];
    double v16 = 0.0;
    size_t v17 = v5;
    if (*(void *)a1) {
      goto LABEL_13;
    }
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        double v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF) {
            double v27 = log2((double)v13);
          }
          else {
            double v27 = dbl_248552498[v13];
          }
          double v16 = v16 + v26 * v27;
        }
        if (v16 >= v26) {
          double v28 = v16;
        }
        else {
          double v28 = (double)v13;
        }
        a1[560] = v28;
        a1[561] = v28;
        ++*((void *)a1 + 3);
        ++*v4;
        unint64_t v29 = *((void *)a1 + 557) + 1;
        *((void *)a1 + 557) = v29;
        if (v29 < **((void **)a1 + 6))
        {
          unint64_t v30 = &v5[548 * v29];
          bzero(v30, 0x888uLL);
          *((void *)v30 + 273) = 0x7FF0000000000000;
        }
        a1[556] = 0.0;
        goto LABEL_85;
      }
      unsigned int v19 = *v17++;
      uint64_t v18 = v19;
      unint64_t v14 = v13 + v19;
      double v20 = (double)v19;
      if (v19 > 0xFF) {
        double v21 = log2(v20);
      }
      else {
        double v21 = dbl_248552498[v18];
      }
      double v16 = v16 - v20 * v21;
LABEL_13:
      unsigned int v23 = *v17++;
      uint64_t v22 = v23;
      unint64_t v13 = v14 + v23;
      double v24 = (double)v23;
      if (v23 > 0xFF) {
        double v25 = log2(v24);
      }
      else {
        double v25 = dbl_248552498[v22];
      }
      double v16 = v16 - v24 * v25;
    }
  }
  if (!v6) {
    goto LABEL_85;
  }
  uint64_t v80 = *((void *)a1 + 3);
  int v81 = v6;
  int v82 = v4;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v85 = (uint64_t *)(a1 + 560);
  BOOL v9 = &v5[548 * *((void *)a1 + 557)];
  double v10 = *a1;
  unint64_t v11 = &v9[*(void *)a1];
  double v12 = 0.0;
  __src = v9;
  if ((*(void *)a1 & 1) == 0) {
    goto LABEL_28;
  }
  while (1)
  {
    unsigned int v36 = *v9++;
    uint64_t v35 = v36;
    unint64_t v7 = v8 + v36;
    double v37 = (double)v36;
    double v38 = v36 > 0xFF ? log2(v37) : dbl_248552498[v35];
    double v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11) {
      break;
    }
    unsigned int v32 = *v9++;
    uint64_t v31 = v32;
    unint64_t v8 = v7 + v32;
    double v33 = (double)v32;
    if (v32 > 0xFF) {
      double v34 = log2(v33);
    }
    else {
      double v34 = dbl_248552498[v31];
    }
    double v12 = v12 - v33 * v34;
  }
  double v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF) {
      double v40 = log2((double)v7);
    }
    else {
      double v40 = dbl_248552498[v7];
    }
    double v12 = v12 + v39 * v40;
  }
  uint64_t v41 = 0;
  if (v12 < v39) {
    double v12 = (double)v7;
  }
  char v42 = 1;
  do
  {
    char v43 = v42;
    double v44 = a1[v41 + 558];
    uint64_t v45 = (uint64_t *)&a1[274 * v41];
    uint64_t v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x890uLL);
    uint64_t v47 = 0;
    uint64_t v48 = v5;
    unsigned int v49 = &v5[548 * *(void *)&v44];
    v45[279] += *((void *)v49 + 272);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 544);
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    uint64_t v52 = &v46[*(void *)&v10];
    double v53 = 0.0;
    if (LOBYTE(v10)) {
      goto LABEL_57;
    }
    while (v46 < v52)
    {
      unsigned int v55 = *v46++;
      uint64_t v54 = v55;
      unint64_t v51 = v50 + v55;
      double v56 = (double)v55;
      if (v55 > 0xFF) {
        double v57 = log2(v56);
      }
      else {
        double v57 = dbl_248552498[v54];
      }
      double v53 = v53 - v56 * v57;
LABEL_57:
      unsigned int v61 = *v46++;
      uint64_t v60 = v61;
      unint64_t v50 = v51 + v61;
      double v62 = (double)v61;
      if (v61 > 0xFF) {
        double v63 = log2(v62);
      }
      else {
        double v63 = dbl_248552498[v60];
      }
      double v53 = v53 - v62 * v63;
    }
    double v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF) {
        double v59 = log2((double)v50);
      }
      else {
        double v59 = dbl_248552498[v50];
      }
      char v5 = v48;
      double v53 = v53 + v58 * v59;
    }
    else
    {
      char v5 = v48;
    }
    char v42 = 0;
    if (v53 >= v58) {
      double v64 = v53;
    }
    else {
      double v64 = v58;
    }
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    uint64_t v41 = 1;
  }
  while ((v43 & 1) != 0);
  unsigned int v4 = v82;
  uint64_t v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    double v68 = v86;
    double v67 = v87;
    int v2 = a2;
  }
  else
  {
    double v66 = a1[2];
    double v68 = v86;
    double v67 = v87;
    BOOL v69 = v86 <= v66 || v87 <= v66;
    int v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(unsigned char *)(v82[2] + v80) = v65;
      a1[559] = a1[558];
      *((void *)a1 + 558) = *(unsigned __int8 *)v82;
      a1[561] = a1[560];
      a1[560] = v12;
      ++*((void *)a1 + 3);
      ++*v82;
      unint64_t v70 = *((void *)a1 + 557) + 1;
      *((void *)a1 + 557) = v70;
      if (v70 < **((void **)a1 + 6))
      {
        uint64_t v71 = &v5[548 * v70];
        bzero(v71, 0x888uLL);
        *((void *)v71 + 273) = 0x7FF0000000000000;
      }
      a1[556] = 0.0;
LABEL_79:
      a1[562] = 0.0;
      uint64_t v76 = *((void *)a1 + 1);
LABEL_84:
      *((void *)a1 + 555) = v76;
      goto LABEL_85;
    }
  }
  uint64_t v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(unsigned char *)(v82[2] + v80) = *(unsigned char *)(v82[2] + v80 - 2);
    uint64_t v73 = *((void *)a1 + 558);
    uint64_t v74 = *((void *)a1 + 559);
    *((void *)a1 + 558) = v74;
    *((void *)a1 + 559) = v73;
    memcpy(&v5[548 * v74], a1 + 281, 0x890uLL);
    a1[561] = a1[560];
    a1[560] = *(double *)&v88[1];
    ++*((void *)a1 + 3);
    a1[556] = 0.0;
    uint64_t v75 = &v5[548 * *((void *)a1 + 557)];
    bzero(v75, 0x888uLL);
    *((void *)v75 + 273) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[548 * *((void *)a1 + 558)], a1 + 7, 0x890uLL);
  uint64_t v77 = v88[0];
  a1[560] = *(double *)v88;
  if (*v82 == 1) {
    *((void *)a1 + 561) = v77;
  }
  a1[556] = 0.0;
  uint64_t v78 = &v5[548 * *((void *)a1 + 557)];
  bzero(v78, 0x888uLL);
  *((void *)v78 + 273) = 0x7FF0000000000000;
  unint64_t v79 = *((void *)a1 + 562) + 1;
  *((void *)a1 + 562) = v79;
  if (v79 >= 2)
  {
    uint64_t v76 = *((void *)a1 + 555) + *((void *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((void **)a1 + 6) = *v4;
    v4[1] = *((void *)a1 + 3);
  }
}

void sub_2483E1DC8(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  unsigned int v4 = a1;
  v118[13] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[1];
  unint64_t v6 = (double *)(a1 + 14);
  unint64_t v7 = (void *)a1[6];
  unint64_t v8 = (unsigned int *)a1[7];
  unint64_t v9 = a1[10];
  unint64_t v10 = a1[3];
  if (v9 < v10)
  {
    a1[10] = v10;
    unint64_t v9 = v10;
  }
  uint64_t v110 = v5;
  if (a1[5])
  {
    if (!v9) {
      goto LABEL_107;
    }
    unint64_t v109 = (double *)(a1 + 14);
    uint64_t v112 = v8;
    uint64_t v104 = v7;
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      unint64_t v108 = (char *)(*(uint64_t (**)(void, uint64_t))a2)(*(void *)(a2 + 16), 2080 * v5);
      if (!v108) {
        exit(1);
      }
      double v115 = 0.0;
      double v116 = 0.0;
      goto LABEL_36;
    }
    unint64_t v108 = 0;
    double v115 = 0.0;
    double v116 = 0.0;
    if (v5)
    {
LABEL_36:
      uint64_t v37 = 0;
      uint64_t v107 = 1040 * v5;
      uint64_t v38 = *v4;
      unint64_t v113 = v108;
      unint64_t v114 = v8;
      while (1)
      {
        unint64_t v39 = 0;
        unint64_t v40 = 0;
        uint64_t v41 = &v112[260 * v4[11] + 260 * v37];
        char v42 = &v41[v38];
        double v43 = 0.0;
        __src = v41;
        if (v38) {
          goto LABEL_46;
        }
        while (v41 < v42)
        {
          unsigned int v45 = *v41++;
          uint64_t v44 = v45;
          unint64_t v40 = v39 + v45;
          double v46 = (double)v45;
          if (v45 > 0xFF) {
            double v47 = log2(v46);
          }
          else {
            double v47 = dbl_248552498[v44];
          }
          double v43 = v43 - v46 * v47;
LABEL_46:
          unsigned int v51 = *v41++;
          uint64_t v50 = v51;
          unint64_t v39 = v40 + v51;
          double v52 = (double)v51;
          if (v51 > 0xFF) {
            double v53 = log2(v52);
          }
          else {
            double v53 = dbl_248552498[v50];
          }
          double v43 = v43 - v52 * v53;
        }
        double v48 = (double)v39;
        if (v39)
        {
          if (v39 > 0xFF) {
            double v49 = log2((double)v39);
          }
          else {
            double v49 = dbl_248552498[v39];
          }
          double v43 = v43 + v48 * v49;
        }
        uint64_t v54 = 0;
        if (v43 < v48) {
          double v43 = (double)v39;
        }
        *(double *)&v118[v37] = v43;
        char v55 = 1;
        do
        {
          char v56 = v55;
          uint64_t v57 = v37 + v54 * v5;
          double v58 = v4;
          uint64_t v59 = v4[v54 + 12];
          uint64_t v60 = &v108[1040 * v57];
          memcpy(v60, __src, 0x410uLL);
          uint64_t v61 = 0;
          *((void *)v60 + 128) += *(void *)&v112[260 * v59 + 256 + 260 * v37];
          do
          {
            *(_DWORD *)&v113[v107 * v54 + v61 * 4] += v114[260 * v59 + v61];
            ++v61;
          }
          while (v61 != 256);
          unint64_t v62 = 0;
          unint64_t v63 = 0;
          uint64_t v38 = *v58;
          double v64 = &v60[4 * *v58];
          double v65 = 0.0;
          if (*v58) {
            goto LABEL_66;
          }
          while (v60 < v64)
          {
            unsigned int v67 = *(_DWORD *)v60;
            v60 += 4;
            uint64_t v66 = v67;
            unint64_t v63 = v62 + v67;
            double v68 = (double)v67;
            if (v67 > 0xFF) {
              double v69 = log2(v68);
            }
            else {
              double v69 = dbl_248552498[v66];
            }
            double v65 = v65 - v68 * v69;
LABEL_66:
            unsigned int v73 = *(_DWORD *)v60;
            v60 += 4;
            uint64_t v72 = v73;
            unint64_t v62 = v63 + v73;
            double v74 = (double)v73;
            if (v73 > 0xFF) {
              double v75 = log2(v74);
            }
            else {
              double v75 = dbl_248552498[v72];
            }
            double v65 = v65 - v74 * v75;
          }
          double v70 = (double)v62;
          if (v62)
          {
            unint64_t v6 = v109;
            if (v62 > 0xFF) {
              double v71 = log2((double)v62);
            }
            else {
              double v71 = dbl_248552498[v62];
            }
            unsigned int v4 = v58;
            uint64_t v5 = v110;
            double v65 = v65 + v70 * v71;
          }
          else
          {
            unsigned int v4 = v58;
            unint64_t v6 = v109;
            uint64_t v5 = v110;
          }
          char v55 = 0;
          if (v65 >= v70) {
            double v76 = v65;
          }
          else {
            double v76 = v70;
          }
          v117[v57] = v76;
          *(&v115 + v54) = *(&v115 + v54) + v76 - v43 - v6[v57];
          uint64_t v54 = 1;
        }
        while ((v56 & 1) != 0);
        ++v37;
        v113 += 1040;
        v114 += 260;
        if (v37 == v5)
        {
          char v77 = 0;
          uint64_t v3 = a2;
          unint64_t v7 = v104;
          goto LABEL_79;
        }
      }
    }
    char v77 = 1;
LABEL_79:
    uint64_t v78 = *v7;
    if (*v7 >= v4[2])
    {
      double v81 = v115;
      double v80 = v116;
      uint64_t v82 = v4[10];
      uint64_t v83 = v4[5];
    }
    else
    {
      double v79 = *((double *)v4 + 4);
      double v81 = v115;
      double v80 = v116;
      uint64_t v82 = v4[10];
      uint64_t v83 = v4[5];
      if (v115 > v79 && v116 > v79)
      {
        *(_DWORD *)(v7[3] + 4 * v83) = v82;
        *(unsigned char *)(v7[2] + v83) = v78;
        v4[13] = v4[12];
        v4[12] = *v7 * v5;
        if ((v77 & 1) == 0)
        {
          uint64_t v85 = v118;
          uint64_t v86 = v5;
          do
          {
            v6[v5] = *v6;
            uint64_t v87 = *v85++;
            *(void *)v6++ = v87;
            --v86;
          }
          while (v86);
        }
        ++v4[5];
        ++*v7;
        unint64_t v88 = v4[11] + v5;
        v4[11] = v88;
        if (v88 < *(void *)v4[8])
        {
          uint64_t v89 = v4[1];
          if (v89)
          {
            uint64_t v90 = (void *)(v4[7] + 1040 * v88);
            do
            {
              bzero(v90, 0x408uLL);
              v90[129] = 0x7FF0000000000000;
              v90 += 130;
              --v89;
            }
            while (v89);
          }
        }
        v4[40] = 0;
        uint64_t v91 = v4[3];
        v4[10] = 0;
        goto LABEL_105;
      }
    }
    uint64_t v92 = v7[3];
    if (v80 < v81 + -20.0)
    {
      *(_DWORD *)(v92 + 4 * v83) = v82;
      *(unsigned char *)(v7[2] + v83) = *(unsigned char *)(v7[2] + v83 - 2);
      *((int8x16_t *)v4 + 6) = vextq_s8(*((int8x16_t *)v4 + 6), *((int8x16_t *)v4 + 6), 8uLL);
      if ((v77 & 1) == 0)
      {
        uint64_t v93 = 0;
        unint64_t v94 = &v108[1040 * v5];
        unsigned int v95 = &v6[v5];
        do
        {
          memcpy(&v112[260 * v93 + 260 * v4[12]], v94, 0x410uLL);
          v95[v93] = v6[v93];
          v6[v93] = v117[v5 + v93];
          v96 = &v112[260 * v93 + 260 * v4[11]];
          bzero(v96, 0x408uLL);
          *((void *)v96 + 129) = 0x7FF0000000000000;
          unint64_t v6 = v109;
          ++v93;
          v94 += 1040;
        }
        while (v5 != v93);
      }
      ++v4[5];
      v4[40] = 0;
      v4[9] = v4[3];
      v4[10] = 0;
      uint64_t v3 = a2;
      unint64_t v7 = v104;
      goto LABEL_106;
    }
    *(_DWORD *)(v92 + 4 * v83 - 4) += v82;
    v97 = v112;
    if ((v77 & 1) == 0)
    {
      uint64_t v98 = 0;
      uint64_t v99 = v108;
      do
      {
        memcpy(&v97[260 * v98 + 260 * v4[12]], v99, 0x410uLL);
        double v100 = v117[v98];
        v6[v98] = v100;
        if (*v7 == 1) {
          *(double *)&v4[v5 + 14 + v98] = v100;
        }
        v97 = v112;
        v101 = &v112[260 * v98 + 260 * v4[11]];
        bzero(v101, 0x408uLL);
        *((void *)v101 + 129) = 0x7FF0000000000000;
        ++v98;
        v99 += 1040;
        unint64_t v6 = v109;
      }
      while (v5 != v98);
    }
    v4[10] = 0;
    unint64_t v102 = v4[40] + 1;
    v4[40] = v102;
    uint64_t v3 = a2;
    if (v102 < 2) {
      goto LABEL_106;
    }
    uint64_t v91 = v4[9] + v4[3];
LABEL_105:
    v4[9] = v91;
LABEL_106:
    (*(void (**)(void, char *))(v3 + 8))(*(void *)(v3 + 16), v108);
    goto LABEL_107;
  }
  *(_DWORD *)v7[3] = v9;
  v105 = v7;
  *(unsigned char *)v7[2] = 0;
  if (v5)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *a1;
    for (uint64_t i = v5; i; --i)
    {
      unint64_t v14 = v6;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      size_t v17 = v8;
      unint64_t v18 = (unint64_t)&v8[v12];
      double v19 = 0.0;
      double v20 = v17;
      if (v11) {
        goto LABEL_19;
      }
      while ((unint64_t)v17 < v18)
      {
        unsigned int v22 = *v17++;
        uint64_t v21 = v22;
        unint64_t v16 = v15 + v22;
        double v23 = (double)v22;
        if (v22 > 0xFF) {
          double v24 = log2(v23);
        }
        else {
          double v24 = dbl_248552498[v21];
        }
        double v19 = v19 - v23 * v24;
LABEL_19:
        unsigned int v30 = *v17++;
        uint64_t v29 = v30;
        unint64_t v15 = v16 + v30;
        double v31 = (double)v30;
        if (v30 > 0xFF) {
          double v32 = log2(v31);
        }
        else {
          double v32 = dbl_248552498[v29];
        }
        double v19 = v19 - v31 * v32;
      }
      double v25 = (double)v15;
      if (v15)
      {
        double v26 = v14;
        double v27 = v20;
        if (v15 > 0xFF) {
          double v28 = log2((double)v15);
        }
        else {
          double v28 = dbl_248552498[v15];
        }
        double v19 = v19 + v25 * v28;
      }
      else
      {
        double v26 = v14;
        double v27 = v20;
      }
      if (v19 >= v25) {
        double v33 = v19;
      }
      else {
        double v33 = (double)v15;
      }
      *double v26 = v33;
      v26[v110] = v33;
      unint64_t v6 = v26 + 1;
      unint64_t v8 = v27 + 260;
    }
  }
  ++v4[5];
  unint64_t v7 = v105;
  ++*v105;
  uint64_t v5 = v110;
  unint64_t v34 = v4[11] + v110;
  v4[11] = v34;
  if (v34 < *(void *)v4[8])
  {
    uint64_t v35 = v4[1];
    if (v35)
    {
      unsigned int v36 = (void *)(v4[7] + 1040 * v34);
      do
      {
        bzero(v36, 0x408uLL);
        v36[129] = 0x7FF0000000000000;
        v36 += 130;
        --v35;
      }
      while (v35);
    }
  }
  v4[10] = 0;
LABEL_107:
  if (a3)
  {
    *(void *)v4[8] = *v7 * v5;
    v7[1] = v4[5];
  }
}

void sub_2483E25D8(unsigned int a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2[23])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      sub_2483DE764(256, (int *)(a2[22] + v4), v10);
      ++v5;
      v4 += 1040;
    }
    while (v5 < a2[23]);
  }
  if (a2[25])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      sub_2483DE764(704, (int *)(a2[24] + v6), v10);
      ++v7;
      v6 += 2832;
    }
    while (v7 < a2[25]);
  }
  if (a2[27])
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      sub_2483DE764(a1, (int *)(a2[26] + v8), v10);
      ++v9;
      v8 += 2192;
    }
    while (v9 < a2[27]);
  }
}

uint64_t sub_2483E26EC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2483E2820((uint64_t *)a1, a2, a3, a4, a5);
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11 && *(unsigned __int8 *)(v11 + 4) >= 2u)
  {
    uint64_t v12 = *(uint64_t **)(v11 + 72);
    if (v12 == (uint64_t *)a1) {
      uint64_t v12 = *(uint64_t **)(v11 + 80);
    }
    memset_pattern16(v18, &unk_2484DD080, 0x98uLL);
    int v13 = sub_2483E2820(v12, a2, a3, a4, (uint64_t)v18);
    for (uint64_t i = 0; i != 152; i += 4)
    {
      int v15 = *(_DWORD *)&v18[i];
      if (v15 != 0xFFFFFFF)
      {
        unsigned int v16 = v15 + 32 * *(_DWORD *)(a1 + 8) * ((1 << *(unsigned char *)(*(void *)a1 + (v15 & 0x1F))) & 0x7FFFFFE);
        if (*(_DWORD *)(a5 + i) < v16) {
          unsigned int v16 = *(_DWORD *)(a5 + i);
        }
        *(_DWORD *)(a5 + i) = v16;
      }
    }
    return v13 | v10;
  }
  return v10;
}

uint64_t sub_2483E2820(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (*((_DWORD *)a1 + 24))
  {
    uint64_t v5 = 0;
    if (a4)
    {
      unint64_t v6 = 0;
      unint64_t v7 = a1 + 10;
      while (1)
      {
        if (v6 >= a3 && *((unsigned char *)v7 + 2))
        {
          unsigned int v8 = *((unsigned __int8 *)v7 + 2) + 32 * *((_DWORD *)v7 + 1);
          if (*(_DWORD *)(a5 + 4 * v6) < v8) {
            unsigned int v8 = *(_DWORD *)(a5 + 4 * v6);
          }
          *(_DWORD *)(a5 + 4 * v6) = v8;
          uint64_t v5 = 1;
        }
        unsigned int v9 = a2[v6];
        if (*(unsigned char *)v7)
        {
          if (*((unsigned __int8 *)v7 + 1) != v9) {
            return v5;
          }
          uint64_t v10 = a1[7];
          unsigned int v11 = *((_DWORD *)v7 + 2);
          if (!v10) {
            return v5;
          }
        }
        else
        {
          int v12 = *((_DWORD *)v7 + 2);
          if (!v12) {
            return v5;
          }
          uint64_t v10 = a1[7];
          int v13 = *(_DWORD *)(v10 + 12 * (v12 + (v9 >> 4)) + 8);
          if (!v13) {
            return v5;
          }
          unsigned int v11 = v13 + (v9 & 0xF);
          if (!v10) {
            return v5;
          }
        }
        unint64_t v7 = (uint64_t *)(v10 + 12 * v11);
        if (++v6 >= a4) {
          return v5;
        }
      }
    }
    return v5;
  }
  uint64_t v14 = a1[5];
  unsigned int v15 = (506832829 * *(_DWORD *)a2) >> 17;
  uint64_t v16 = *(unsigned __int16 *)(v14 + 2 * v15);
  if (*(_WORD *)(v14 + 2 * v15))
  {
    uint64_t v5 = 0;
    size_t v17 = a2 + 1;
    uint64_t v18 = a1[6];
    uint64_t v19 = *a1;
    while (1)
    {
      double v20 = (char *)(v18 + 4 * v16);
      char v21 = *v20;
      int v22 = v20[1];
      int v23 = *((unsigned __int16 *)v20 + 1);
      unint64_t v24 = *v20 & 0x1F;
      char v25 = *(unsigned char *)(v19 + v24);
      if (!v20[1])
      {
        unint64_t v35 = *(void *)(v19 + 168)
            + *(unsigned int *)(v19 + 4 * (*v20 & 0x1F) + 32)
            + *((unsigned __int16 *)v20 + 1) * (unint64_t)(*v20 & 0x1F);
        if (v24 >= a4) {
          unint64_t v36 = a4;
        }
        else {
          unint64_t v36 = v21 & 0x1F;
        }
        if (v36 < 8)
        {
          unint64_t v38 = 0;
          unint64_t v39 = a2;
LABEL_258:
          unint64_t v104 = v36 & 7;
          if (v104)
          {
            unint64_t v105 = v38 | v104;
            while (*(unsigned __int8 *)(v35 + v38) == *v39)
            {
              ++v39;
              ++v38;
              if (!--v104)
              {
                unint64_t v38 = v105;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v37 = 0;
          unint64_t v38 = v36 & 0x18;
          unint64_t v39 = &a2[v38];
          while (1)
          {
            uint64_t v40 = *(void *)&a2[v37];
            uint64_t v41 = *(void *)(v35 + v37);
            if (v40 != v41) {
              break;
            }
            v37 += 8;
            if ((v36 & 0xFFFFFFFFFFFFFFF8) == v37) {
              goto LABEL_258;
            }
          }
          unint64_t v38 = v37 + (__clz(__rbit64(v41 ^ v40)) >> 3);
        }
        if (v38 == v24)
        {
          unsigned int v42 = *(_DWORD *)(a5 + 4 * v24);
          if (v42 >= (v24 | (32 * v23))) {
            unsigned int v42 = v24 | (32 * v23);
          }
          *(_DWORD *)(a5 + 4 * v24) = v42;
          uint64_t v5 = 1;
        }
        unint64_t v43 = v24 - 1;
        if (v38 >= v24 - 1)
        {
          unsigned int v44 = v24 | (32 * ((12 << v25) + v23));
          if (*(_DWORD *)(a5 + 4 * v43) < v44) {
            unsigned int v44 = *(_DWORD *)(a5 + 4 * v43);
          }
          *(_DWORD *)(a5 + 4 * v43) = v44;
          if (v24 + 2 < a4 && a2[v43] == 105 && a2[v24] == 110 && a2[v24 + 1] == 103 && a2[v24 + 2] == 32)
          {
            unsigned int v45 = v24 | (32 * ((49 << v25) + v23));
            uint64_t v46 = a5 + 4 * v24;
            if (*(_DWORD *)(v46 + 12) < v45) {
              unsigned int v45 = *(_DWORD *)(v46 + 12);
            }
            *(_DWORD *)(v46 + 12) = v45;
          }
          uint64_t v5 = 1;
        }
        unint64_t v47 = v24 - 9;
        if (a3 > v24 - 9) {
          unint64_t v47 = a3;
        }
        if (v24 <= 9) {
          unint64_t v48 = a3;
        }
        else {
          unint64_t v48 = v47;
        }
        unint64_t v49 = v24 - 2;
        if (v38 < v24 - 2) {
          unint64_t v49 = v38;
        }
        if (v48 <= v49)
        {
          unint64_t v50 = a1[2];
          uint64_t v51 = v49 - v48 + 1;
          double v52 = (unsigned int *)(a5 + 4 * v48);
          char v53 = 6 * v24 - 6 * v48;
          int v54 = 4 * v24 - 4 * v48;
          do
          {
            unsigned int v55 = v24 | (32 * (((unint64_t)(v54 + ((v50 >> v53) & 0x3F)) << v25) + v23));
            if (*v52 < v55) {
              unsigned int v55 = *v52;
            }
            *v52++ = v55;
            v53 -= 6;
            v54 -= 4;
            --v51;
          }
          while (v51);
          uint64_t v5 = 1;
        }
        if (v38 >= v24)
        {
          unint64_t v56 = v24 + 6;
          if (v24 + 6 < a4)
          {
            uint64_t v57 = &a2[v24];
            unsigned int v58 = a2[v24];
            if (v58 > 0x3C)
            {
              switch(a2[v24])
              {
                case 'a':
                  if (v57[1] == 108 && v57[2] == 32)
                  {
                    unint64_t v56 = v24 + 3;
                    uint64_t v63 = 84;
                    goto LABEL_193;
                  }
                  break;
                case 'b':
                case 'c':
                case 'd':
                case 'g':
                case 'h':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                  goto LABEL_196;
                case 'e':
                  int v92 = v57[1];
                  if (v92 == 115)
                  {
                    if (v57[2] == 116 && v57[3] == 32)
                    {
                      unint64_t v56 = v24 + 4;
                      uint64_t v63 = 95;
                      goto LABEL_193;
                    }
                  }
                  else if (v92 == 114)
                  {
                    if (v57[2] == 32)
                    {
                      unint64_t v56 = v24 + 3;
                      uint64_t v63 = 82;
                      goto LABEL_193;
                    }
                  }
                  else if (v92 == 100 && v57[2] == 32)
                  {
                    unint64_t v56 = v24 + 3;
                    uint64_t v63 = 53;
                    goto LABEL_193;
                  }
                  break;
                case 'f':
                  if (v57[1] == 117 && v57[2] == 108 && v57[3] == 32)
                  {
                    unint64_t v56 = v24 + 4;
                    uint64_t v63 = 90;
                    goto LABEL_193;
                  }
                  break;
                case 'i':
                  int v93 = v57[1];
                  if (v93 == 122)
                  {
                    if (v57[2] == 101 && v57[3] == 32)
                    {
                      unint64_t v56 = v24 + 4;
                      uint64_t v63 = 100;
                      goto LABEL_193;
                    }
                  }
                  else if (v93 == 118 && v57[2] == 101 && v57[3] == 32)
                  {
                    unint64_t v56 = v24 + 4;
                    uint64_t v63 = 92;
                    goto LABEL_193;
                  }
                  break;
                case 'l':
                  int v94 = v57[1];
                  if (v94 == 121)
                  {
                    if (v57[2] == 32)
                    {
                      unint64_t v56 = v24 + 3;
                      uint64_t v63 = 61;
                      goto LABEL_193;
                    }
                  }
                  else if (v94 == 101 && v57[2] == 115 && v57[3] == 115 && v57[4] == 32)
                  {
                    unint64_t v56 = v24 + 5;
                    uint64_t v63 = 93;
                    goto LABEL_193;
                  }
                  break;
                case 'o':
                  if (v57[1] == 117 && v57[2] == 115 && v57[3] == 32)
                  {
                    unint64_t v56 = v24 + 4;
                    uint64_t v63 = 106;
                    goto LABEL_193;
                  }
                  break;
                default:
                  if (v58 == 61)
                  {
                    int v97 = v57[1];
                    if (v97 == 39)
                    {
                      unint64_t v56 = v24 + 2;
                      uint64_t v63 = 86;
                      goto LABEL_193;
                    }
                    if (v97 == 34)
                    {
                      unint64_t v56 = v24 + 2;
                      uint64_t v63 = 70;
                      goto LABEL_193;
                    }
                  }
                  else if (v58 == 93)
                  {
                    unint64_t v56 = v24 + 1;
                    uint64_t v63 = 24;
                    goto LABEL_193;
                  }
                  break;
              }
            }
            else
            {
              switch(a2[v24])
              {
                case ' ':
                  unsigned int v59 = v24 | (32 * ((1 << v25) + v23));
                  uint64_t v60 = a5 + 4 * v24;
                  if (*(_DWORD *)(v60 + 4) < v59) {
                    unsigned int v59 = *(_DWORD *)(v60 + 4);
                  }
                  *(_DWORD *)(v60 + 4) = v59;
                  int v61 = v57[1];
                  switch(v57[1])
                  {
                    case 'a':
                      unsigned int v62 = v57[2];
                      if (v62 > 0x72)
                      {
                        if (v62 == 115)
                        {
                          if (v57[3] == 32)
                          {
                            unint64_t v56 = v24 + 4;
                            uint64_t v63 = 46;
                            goto LABEL_193;
                          }
                        }
                        else if (v62 == 116 && v57[3] == 32)
                        {
                          unint64_t v56 = v24 + 4;
                          uint64_t v63 = 60;
                          goto LABEL_193;
                        }
                      }
                      else
                      {
                        if (v62 == 32)
                        {
                          unint64_t v56 = v24 + 3;
                          uint64_t v63 = 28;
                          goto LABEL_193;
                        }
                        if (v62 == 110 && v57[3] == 100 && v57[4] == 32)
                        {
                          unint64_t v56 = v24 + 5;
                          uint64_t v63 = 10;
                          goto LABEL_193;
                        }
                      }
                      break;
                    case 'b':
                      if (v57[2] == 121 && v57[3] == 32)
                      {
                        unint64_t v56 = v24 + 4;
                        uint64_t v63 = 38;
                        goto LABEL_193;
                      }
                      break;
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'g':
                    case 'h':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                      goto LABEL_196;
                    case 'f':
                      int v99 = v57[2];
                      if (v99 == 114)
                      {
                        if (v57[3] == 111 && v57[4] == 109 && v57[5] == 32)
                        {
                          uint64_t v63 = 37;
                          goto LABEL_193;
                        }
                      }
                      else if (v99 == 111 && v57[3] == 114 && v57[4] == 32)
                      {
                        unint64_t v56 = v24 + 5;
                        uint64_t v63 = 25;
                        goto LABEL_193;
                      }
                      break;
                    case 'i':
                      int v100 = v57[2];
                      if (v100 == 115)
                      {
                        if (v57[3] == 32)
                        {
                          unint64_t v56 = v24 + 4;
                          uint64_t v63 = 47;
                          goto LABEL_193;
                        }
                      }
                      else if (v100 == 110 && v57[3] == 32)
                      {
                        unint64_t v56 = v24 + 4;
                        uint64_t v63 = 16;
                        goto LABEL_193;
                      }
                      break;
                    case 'n':
                      if (v57[2] == 111 && v57[3] == 116 && v57[4] == 32)
                      {
                        unint64_t v56 = v24 + 5;
                        uint64_t v63 = 80;
                        goto LABEL_193;
                      }
                      break;
                    case 'o':
                      int v101 = v57[2];
                      if (v101 == 110)
                      {
                        if (v57[3] == 32)
                        {
                          unint64_t v56 = v24 + 4;
                          uint64_t v63 = 45;
                          goto LABEL_193;
                        }
                      }
                      else if (v101 == 102 && v57[3] == 32)
                      {
                        unint64_t v56 = v24 + 4;
                        uint64_t v63 = 8;
                        goto LABEL_193;
                      }
                      break;
                    default:
                      if (v61 == 116)
                      {
                        int v102 = v57[2];
                        if (v102 == 111)
                        {
                          if (v57[3] == 32)
                          {
                            unint64_t v56 = v24 + 4;
                            uint64_t v63 = 17;
                            goto LABEL_193;
                          }
                        }
                        else if (v102 == 104)
                        {
                          int v103 = v57[3];
                          if (v103 == 97)
                          {
                            if (v57[4] == 116 && v57[5] == 32)
                            {
                              uint64_t v63 = 29;
                              goto LABEL_193;
                            }
                          }
                          else if (v103 == 101 && v57[4] == 32)
                          {
                            unint64_t v56 = v24 + 5;
                            uint64_t v63 = 5;
                            goto LABEL_193;
                          }
                        }
                      }
                      else if (v61 == 119 && v57[2] == 105 && v57[3] == 116 && v57[4] == 104 && v57[5] == 32)
                      {
                        uint64_t v63 = 35;
                        goto LABEL_193;
                      }
                      break;
                  }
                  goto LABEL_196;
                case '!':
                case '#':
                case '$':
                case '%':
                case '&':
                case ')':
                case '*':
                case '+':
                case '-':
                  goto LABEL_196;
                case '""':
                  unsigned int v84 = v24 | (32 * ((19 << v25) + v23));
                  uint64_t v85 = a5 + 4 * v24;
                  if (*(_DWORD *)(v85 + 4) < v84) {
                    unsigned int v84 = *(_DWORD *)(v85 + 4);
                  }
                  *(_DWORD *)(v85 + 4) = v84;
                  if (v57[1] != 62) {
                    goto LABEL_196;
                  }
                  unint64_t v56 = v24 + 2;
                  uint64_t v63 = 21;
                  goto LABEL_193;
                case '\'':
                  unint64_t v56 = v24 + 1;
                  uint64_t v63 = 36;
                  goto LABEL_193;
                case '(':
                  unint64_t v56 = v24 + 1;
                  uint64_t v63 = 57;
                  goto LABEL_193;
                case ',':
                  unsigned int v86 = v24 | (32 * ((76 << v25) + v23));
                  uint64_t v87 = a5 + 4 * v24;
                  if (*(_DWORD *)(v87 + 4) < v86) {
                    unsigned int v86 = *(_DWORD *)(v87 + 4);
                  }
                  *(_DWORD *)(v87 + 4) = v86;
                  if (v57[1] != 32) {
                    goto LABEL_196;
                  }
                  unint64_t v56 = v24 + 2;
                  uint64_t v63 = 14;
                  goto LABEL_193;
                case '.':
                  unsigned int v88 = v24 | (32 * ((20 << v25) + v23));
                  uint64_t v89 = a5 + 4 * v24;
                  if (*(_DWORD *)(v89 + 4) < v88) {
                    unsigned int v88 = *(_DWORD *)(v89 + 4);
                  }
                  *(_DWORD *)(v89 + 4) = v88;
                  if (v57[1] != 32) {
                    goto LABEL_196;
                  }
                  unsigned int v90 = v24 | (32 * ((31 << v25) + v23));
                  if (*(_DWORD *)(v89 + 8) < v90) {
                    unsigned int v90 = *(_DWORD *)(v89 + 8);
                  }
                  *(_DWORD *)(v89 + 8) = v90;
                  if (v57[2] != 84 || v57[3] != 104) {
                    goto LABEL_196;
                  }
                  int v91 = v57[4];
                  if (v91 == 105)
                  {
                    if (v57[5] == 115 && v57[6] == 32)
                    {
                      unint64_t v56 = v24 + 7;
                      uint64_t v63 = 75;
                      goto LABEL_193;
                    }
                  }
                  else if (v91 == 101 && v57[5] == 32)
                  {
                    uint64_t v63 = 43;
                    goto LABEL_193;
                  }
                  goto LABEL_196;
                default:
                  if (v58 != 10)
                  {
                    if (v58 != 58) {
                      goto LABEL_196;
                    }
                    unint64_t v56 = v24 + 1;
                    uint64_t v63 = 51;
                    goto LABEL_193;
                  }
                  unsigned int v95 = v24 | (32 * ((22 << v25) + v23));
                  uint64_t v96 = a5 + 4 * v24;
                  if (*(_DWORD *)(v96 + 4) < v95) {
                    unsigned int v95 = *(_DWORD *)(v96 + 4);
                  }
                  *(_DWORD *)(v96 + 4) = v95;
                  if (v57[1] == 9)
                  {
                    unint64_t v56 = v24 + 2;
                    uint64_t v63 = 50;
                    goto LABEL_193;
                  }
                  break;
              }
            }
          }
        }
        goto LABEL_196;
      }
      if (v24 <= a4)
      {
        double v26 = (unsigned __int8 *)(*(void *)(v19 + 168)
                                + *(unsigned int *)(v19 + 4 * (*v20 & 0x1F) + 32)
                                + *((unsigned __int16 *)v20 + 1) * (unint64_t)(*v20 & 0x1F));
        if (v22 == 10)
        {
          int v27 = *v26;
          if ((v27 - 97) > 0x19 || (v27 ^ 0x20) != *a2) {
            goto LABEL_196;
          }
          int v28 = v24 - 1;
          unint64_t v29 = (v24 - 1);
          if (v29 < 8)
          {
            uint64_t v31 = 0;
            double v32 = a2 + 1;
LABEL_272:
            uint64_t v106 = v28 & 7;
            if (v106)
            {
              uint64_t v107 = v31 | v106;
              uint64_t v108 = v31 + 1;
              while (v26[v108] == *v32)
              {
                ++v32;
                ++v108;
                if (!--v106)
                {
                  uint64_t v31 = v107;
                  goto LABEL_97;
                }
              }
              uint64_t v31 = v108 - 1;
            }
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v31 = v28 & 0xFFFFFFF8;
            double v32 = &v17[v31];
            while (1)
            {
              uint64_t v33 = *(void *)&v17[v30];
              uint64_t v34 = *(void *)&v26[v30 + 1];
              if (v33 != v34) {
                break;
              }
              v30 += 8;
              if ((v29 & 0xFFFFFFF8) == v30) {
                goto LABEL_272;
              }
            }
            uint64_t v31 = v30 + (__clz(__rbit64(v34 ^ v33)) >> 3);
          }
LABEL_97:
          if (v31 != v29) {
            goto LABEL_196;
          }
          uint64_t v68 = 9;
        }
        else
        {
          double v64 = a2;
          uint64_t v65 = v21 & 0x1F;
          if (v24)
          {
            do
            {
              int v67 = *v26++;
              int v66 = v67;
              if ((v67 - 97) <= 0x19) {
                v66 ^= 0x20u;
              }
              if (v66 != *v64) {
                goto LABEL_196;
              }
              ++v64;
            }
            while (--v65);
          }
          uint64_t v68 = 44;
        }
        unsigned int v69 = v24 | (32 * ((v68 << v25) + v23));
        if (*(_DWORD *)(a5 + 4 * v24) < v69) {
          unsigned int v69 = *(_DWORD *)(a5 + 4 * v24);
        }
        *(_DWORD *)(a5 + 4 * v24) = v69;
        unint64_t v56 = v24 + 1;
        if (v24 + 1 >= a4)
        {
LABEL_134:
          uint64_t v5 = 1;
        }
        else
        {
          double v70 = &a2[v24];
          uint64_t v5 = 1;
          switch(a2[v24])
          {
            case ' ':
              BOOL v71 = v22 == 10;
              uint64_t v72 = 68;
              uint64_t v73 = 4;
              goto LABEL_119;
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case ')':
            case '*':
            case '+':
            case '-':
              goto LABEL_196;
            case '""':
              uint64_t v75 = 87;
              if (v22 == 10) {
                uint64_t v75 = 66;
              }
              unsigned int v76 = v24 | (32 * ((v75 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v76) {
                unsigned int v76 = *(_DWORD *)(a5 + 4 * v56);
              }
              *(_DWORD *)(a5 + 4 * v56) = v76;
              if (v70[1] != 62) {
                goto LABEL_134;
              }
              BOOL v77 = v22 == 10;
              uint64_t v78 = 97;
              uint64_t v79 = 69;
              goto LABEL_188;
            case '\'':
              BOOL v71 = v22 == 10;
              uint64_t v72 = 94;
              uint64_t v73 = 74;
              goto LABEL_119;
            case '(':
              BOOL v71 = v22 == 10;
              uint64_t v72 = 113;
              uint64_t v73 = 78;
LABEL_119:
              if (v71) {
                uint64_t v63 = v73;
              }
              else {
                uint64_t v63 = v72;
              }
              goto LABEL_192;
            case ',':
              uint64_t v80 = 112;
              if (v22 == 10) {
                uint64_t v80 = 99;
              }
              unsigned int v81 = v24 | (32 * ((v80 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v81) {
                unsigned int v81 = *(_DWORD *)(a5 + 4 * v56);
              }
              *(_DWORD *)(a5 + 4 * v56) = v81;
              if (v70[1] != 32) {
                goto LABEL_134;
              }
              BOOL v77 = v22 == 10;
              uint64_t v78 = 107;
              uint64_t v79 = 58;
              goto LABEL_188;
            case '.':
              uint64_t v82 = 101;
              if (v22 == 10) {
                uint64_t v82 = 79;
              }
              unsigned int v83 = v24 | (32 * ((v82 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v83) {
                unsigned int v83 = *(_DWORD *)(a5 + 4 * v56);
              }
              *(_DWORD *)(a5 + 4 * v56) = v83;
              if (v70[1] != 32) {
                goto LABEL_134;
              }
              BOOL v77 = v22 == 10;
              uint64_t v78 = 114;
              uint64_t v79 = 88;
              goto LABEL_188;
            default:
              if (a2[v24] != 61) {
                goto LABEL_196;
              }
              int v74 = v70[1];
              if (v74 == 39)
              {
                BOOL v77 = v22 == 10;
                uint64_t v78 = 116;
                uint64_t v79 = 108;
LABEL_188:
                if (v77) {
                  uint64_t v63 = v79;
                }
                else {
                  uint64_t v63 = v78;
                }
              }
              else
              {
                if (v74 != 34) {
                  goto LABEL_134;
                }
                if (v22 == 10) {
                  uint64_t v63 = 104;
                }
                else {
                  uint64_t v63 = 105;
                }
              }
              unint64_t v56 = v24 + 2;
LABEL_192:
              uint64_t v5 = 1;
              break;
          }
LABEL_193:
          unsigned int v98 = v24 | (32 * ((v63 << v25) + v23));
          if (*(_DWORD *)(a5 + 4 * v56) < v98) {
            unsigned int v98 = *(_DWORD *)(a5 + 4 * v56);
          }
          *(_DWORD *)(a5 + 4 * v56) = v98;
        }
      }
LABEL_196:
      ++v16;
      if (v21 < 0) {
        goto LABEL_279;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_279:
  unint64_t v109 = a4 - 5;
  if (a4 >= 5)
  {
    int v110 = *a2;
    if (v110 == 46 || v110 == 32)
    {
      unint64_t v111 = a2 + 1;
      uint64_t v112 = *(unsigned __int16 *)(v14 + 2 * ((506832829 * *(_DWORD *)(a2 + 1)) >> 17));
      if (v112)
      {
        unint64_t v113 = a4 - 1;
        uint64_t v114 = a1[6];
        uint64_t v115 = *a1;
        if (v110 == 32) {
          uint64_t v116 = 6;
        }
        else {
          uint64_t v116 = 32;
        }
        if (v110 == 32) {
          uint64_t v117 = 89;
        }
        else {
          uint64_t v117 = 67;
        }
        if (v110 == 32) {
          uint64_t v118 = 2;
        }
        else {
          uint64_t v118 = 77;
        }
        while (1)
        {
          v119 = (char *)(v114 + 4 * v112);
          char v120 = *v119;
          int v121 = v119[1];
          int v122 = *((unsigned __int16 *)v119 + 1);
          unint64_t v123 = *v119 & 0x1F;
          char v124 = *(unsigned char *)(v115 + v123);
          if (!v119[1]) {
            break;
          }
          if (v110 != 32 || v113 < v123) {
            goto LABEL_368;
          }
          uint64_t v125 = (unsigned __int8 *)(*(void *)(v115 + 168)
                                   + *(unsigned int *)(v115 + 4 * (*v119 & 0x1F) + 32)
                                   + *((unsigned __int16 *)v119 + 1) * (unint64_t)(*v119 & 0x1F));
          if (v121 == 10)
          {
            int v126 = *v125;
            if ((v126 - 97) > 0x19 || (v126 ^ 0x20) != *v111) {
              goto LABEL_368;
            }
            uint64_t v127 = v116;
            unint64_t v128 = v109;
            uint64_t v129 = v118;
            int v130 = v123 - 1;
            unint64_t v131 = (v123 - 1);
            uint64_t v132 = v117;
            if (v131 < 8)
            {
              uint64_t v134 = 0;
              uint64_t v230 = a2 + 2;
LABEL_388:
              uint64_t v172 = v130 & 7;
              if (v172)
              {
                uint64_t v173 = v134 | v172;
                uint64_t v174 = v134 + 1;
                char v175 = v230;
                while (v125[v174] == *v175)
                {
                  ++v175;
                  ++v174;
                  if (!--v172)
                  {
                    uint64_t v134 = v173;
                    goto LABEL_336;
                  }
                }
                uint64_t v134 = v174 - 1;
              }
            }
            else
            {
              uint64_t v133 = 0;
              uint64_t v134 = v130 & 0xFFFFFFF8;
              uint64_t v135 = a2 + 2;
              uint64_t v230 = &a2[v134 + 2];
              while (1)
              {
                uint64_t v136 = *(void *)&v135[v133];
                uint64_t v137 = *(void *)&v125[v133 + 1];
                if (v136 != v137) {
                  break;
                }
                v133 += 8;
                uint64_t v135 = a2 + 2;
                if ((v131 & 0xFFFFFFF8) == v133) {
                  goto LABEL_388;
                }
              }
              uint64_t v134 = v133 + (__clz(__rbit64(v137 ^ v136)) >> 3);
            }
LABEL_336:
            uint64_t v117 = v132;
            uint64_t v118 = v129;
            unint64_t v109 = v128;
            uint64_t v116 = v127;
            if (v134 != v131) {
              goto LABEL_368;
            }
            uint64_t v154 = 30;
          }
          else
          {
            uint64_t v150 = a2 + 1;
            uint64_t v151 = v120 & 0x1F;
            if (v123)
            {
              do
              {
                int v153 = *v125++;
                int v152 = v153;
                if ((v153 - 97) <= 0x19) {
                  v152 ^= 0x20u;
                }
                if (v152 != *v150) {
                  goto LABEL_368;
                }
                ++v150;
              }
              while (--v151);
            }
            uint64_t v154 = 85;
          }
          int v155 = (v154 << v124) + v122;
          unint64_t v156 = v123 + 1;
          unsigned int v157 = v123 | (32 * v155);
          if (*(_DWORD *)(a5 + 4 * (v123 + 1)) < v157) {
            unsigned int v157 = *(_DWORD *)(a5 + 4 * (v123 + 1));
          }
          *(_DWORD *)(a5 + 4 * v156) = v157;
          unint64_t v146 = v123 + 2;
          if (v123 + 2 >= a4) {
            goto LABEL_367;
          }
          unint64_t v158 = &a2[v156];
          int v159 = a2[v156];
          uint64_t v5 = 1;
          if (v159 > 45)
          {
            if (v159 == 46)
            {
              uint64_t v165 = 115;
              if (v121 == 10) {
                uint64_t v165 = 96;
              }
              unsigned int v166 = v123 | (32 * ((v165 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v166) {
                unsigned int v166 = *(_DWORD *)(a5 + 4 * v146);
              }
              *(_DWORD *)(a5 + 4 * v146) = v166;
              if (v158[1] == 32)
              {
                BOOL v161 = v121 == 10;
                uint64_t v149 = 117;
                uint64_t v162 = 91;
                goto LABEL_361;
              }
              goto LABEL_367;
            }
            if (v159 == 61)
            {
              int v163 = v158[1];
              if (v163 != 39)
              {
                if (v163 == 34)
                {
                  BOOL v161 = v121 == 10;
                  uint64_t v149 = 110;
                  uint64_t v162 = 118;
                  goto LABEL_361;
                }
LABEL_367:
                uint64_t v5 = 1;
                goto LABEL_368;
              }
              uint64_t v149 = 119;
              if (v121 == 10) {
                uint64_t v149 = 120;
              }
LABEL_363:
              unint64_t v146 = v123 + 3;
LABEL_364:
              unsigned int v167 = v123 | (32 * ((v149 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v167) {
                unsigned int v167 = *(_DWORD *)(a5 + 4 * v146);
              }
              *(_DWORD *)(a5 + 4 * v146) = v167;
              goto LABEL_367;
            }
          }
          else
          {
            if (v159 == 32)
            {
              uint64_t v149 = 83;
              if (v121 == 10) {
                uint64_t v149 = 15;
              }
              goto LABEL_364;
            }
            if (v159 == 44)
            {
              if (v121 == 10)
              {
                unsigned int v160 = v123 | (32 * ((109 << v124) + v122));
                if (*(_DWORD *)(a5 + 4 * v146) < v160) {
                  unsigned int v160 = *(_DWORD *)(a5 + 4 * v146);
                }
                *(_DWORD *)(a5 + 4 * v146) = v160;
              }
              if (v158[1] != 32) {
                goto LABEL_367;
              }
              BOOL v161 = v121 == 10;
              uint64_t v149 = 111;
              uint64_t v162 = 65;
LABEL_361:
              if (v161) {
                uint64_t v149 = v162;
              }
              goto LABEL_363;
            }
          }
LABEL_368:
          ++v112;
          if (v120 < 0) {
            goto LABEL_394;
          }
        }
        if (v113 < v123) {
          goto LABEL_368;
        }
        unint64_t v138 = *(void *)(v115 + 168)
             + *(unsigned int *)(v115 + 4 * (*v119 & 0x1F) + 32)
             + *((unsigned __int16 *)v119 + 1) * (unint64_t)(*v119 & 0x1F);
        if (v123 < 8)
        {
          unint64_t v140 = 0;
          v141 = a2 + 1;
LABEL_382:
          unint64_t v170 = v123 & 7;
          if ((v123 & 7) != 0)
          {
            uint64_t v171 = v140 | v170;
            while (*(unsigned __int8 *)(v138 + v140) == *v141)
            {
              ++v141;
              ++v140;
              if (!--v170)
              {
                unint64_t v140 = v171;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v139 = 0;
          unint64_t v140 = v123 & 0x18;
          v141 = &v111[v140];
          while (1)
          {
            uint64_t v142 = *(void *)&v111[v139];
            uint64_t v143 = *(void *)(v138 + v139);
            if (v142 != v143) {
              break;
            }
            v139 += 8;
            if (v140 == v139) {
              goto LABEL_382;
            }
          }
          unint64_t v140 = v139 + (__clz(__rbit64(v143 ^ v142)) >> 3);
        }
        if (v140 != v123) {
          goto LABEL_368;
        }
        unint64_t v144 = v123 + 1;
        unsigned int v145 = v123 | (32 * ((v116 << v124) + v122));
        if (*(_DWORD *)(a5 + 4 * (v123 + 1)) < v145) {
          unsigned int v145 = *(_DWORD *)(a5 + 4 * (v123 + 1));
        }
        *(_DWORD *)(a5 + 4 * v144) = v145;
        unint64_t v146 = v123 + 2;
        if (v123 + 2 >= a4) {
          goto LABEL_367;
        }
        unsigned int v147 = &a2[v144];
        int v148 = *v147;
        if (v148 == 32)
        {
          uint64_t v149 = v118;
        }
        else if (v148 == 40)
        {
          uint64_t v149 = v117;
        }
        else
        {
          if (v110 != 32) {
            goto LABEL_367;
          }
          switch(v148)
          {
            case '=':
              int v168 = v147[1];
              if (v168 == 39)
              {
                unint64_t v146 = v123 + 3;
                uint64_t v149 = 98;
              }
              else
              {
                if (v168 != 34) {
                  goto LABEL_367;
                }
                unint64_t v146 = v123 + 3;
                uint64_t v149 = 81;
              }
              break;
            case '.':
              unsigned int v169 = v123 | (32 * ((71 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v169) {
                unsigned int v169 = *(_DWORD *)(a5 + 4 * v146);
              }
              *(_DWORD *)(a5 + 4 * v146) = v169;
              if (v147[1] != 32) {
                goto LABEL_367;
              }
              unint64_t v146 = v123 + 3;
              uint64_t v149 = 52;
              break;
            case ',':
              unsigned int v164 = v123 | (32 * ((103 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v164) {
                unsigned int v164 = *(_DWORD *)(a5 + 4 * v146);
              }
              *(_DWORD *)(a5 + 4 * v146) = v164;
              if (v147[1] != 32) {
                goto LABEL_367;
              }
              unint64_t v146 = v123 + 3;
              uint64_t v149 = 33;
              break;
            default:
              goto LABEL_367;
          }
        }
        goto LABEL_364;
      }
    }
LABEL_394:
    if (a4 < 6) {
      return v5;
    }
    int v176 = a2[1];
    int v177 = *a2;
    if (v176 == 32)
    {
      if (v177 != 44 && v177 != 101 && v177 != 115) {
        goto LABEL_437;
      }
    }
    else if (v176 != 160 || v177 != 194)
    {
      goto LABEL_437;
    }
    uint64_t v178 = a1[5];
    uint64_t v179 = a2 + 2;
    uint64_t v180 = *(unsigned __int16 *)(v178 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17));
    if (!*(_WORD *)(v178 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17)))
    {
LABEL_437:
      if (a4 < 9) {
        return v5;
      }
      int v201 = *a2;
      if (v201 == 46)
      {
        if (a2[1] != 99 || a2[2] != 111 || a2[3] != 109 || a2[4] != 47) {
          return v5;
        }
      }
      else if (v201 != 32 || a2[1] != 116 || a2[2] != 104 || a2[3] != 101 || a2[4] != 32)
      {
        return v5;
      }
      uint64_t v202 = a2 + 5;
      unsigned int v203 = (506832829 * *(_DWORD *)(a2 + 5)) >> 17;
      uint64_t v204 = *(unsigned __int16 *)(a1[5] + 2 * v203);
      if (!*(_WORD *)(a1[5] + 2 * v203)) {
        return v5;
      }
      uint64_t v205 = a1[6];
      uint64_t v206 = *a1;
      while (1)
      {
        v207 = (char *)(v205 + 4 * v204);
        char v208 = *v207;
        unint64_t v209 = *v207 & 0x1F;
        if (v207[1]) {
          BOOL v210 = 0;
        }
        else {
          BOOL v210 = v109 >= v209;
        }
        if (!v210) {
          goto LABEL_486;
        }
        unsigned int v211 = *((unsigned __int16 *)v207 + 1);
        unint64_t v212 = *(void *)(v206 + 168)
             + *(unsigned int *)(v206 + 4 * v209 + 32)
             + v211 * (unint64_t)v209;
        if (v209 < 8)
        {
          unint64_t v214 = 0;
          uint64_t v215 = a2 + 5;
LABEL_489:
          unint64_t v227 = v209 & 7;
          if ((v209 & 7) != 0)
          {
            uint64_t v228 = v214 | v227;
            while (*(unsigned __int8 *)(v212 + v214) == *v215)
            {
              ++v215;
              ++v214;
              if (!--v227)
              {
                unint64_t v214 = v228;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v213 = 0;
          unint64_t v214 = v209 & 0x18;
          uint64_t v215 = &v202[v214];
          while (1)
          {
            uint64_t v216 = *(void *)&v202[v213];
            uint64_t v217 = *(void *)(v212 + v213);
            if (v216 != v217) {
              break;
            }
            v213 += 8;
            if (v214 == v213) {
              goto LABEL_489;
            }
          }
          unint64_t v214 = v213 + (__clz(__rbit64(v217 ^ v216)) >> 3);
        }
        if (v214 != v209) {
          goto LABEL_486;
        }
        char v218 = *(unsigned char *)(v206 + v209);
        if (*a2 == 32) {
          uint64_t v219 = 41;
        }
        else {
          uint64_t v219 = 72;
        }
        unint64_t v220 = v209 + 5;
        unsigned int v221 = v209 | (32 * ((v219 << v218) + v211));
        if (*(_DWORD *)(a5 + 4 * (v209 + 5)) < v221) {
          unsigned int v221 = *(_DWORD *)(a5 + 4 * (v209 + 5));
        }
        *(_DWORD *)(a5 + 4 * v220) = v221;
        if (v220 < a4)
        {
          uint64_t v5 = 1;
          if (*a2 != 32 || v209 + 8 >= a4) {
            goto LABEL_486;
          }
          uint64_t v222 = &a2[v220];
          if (a2[v220] == 32 && v222[1] == 111 && v222[2] == 102 && v222[3] == 32)
          {
            unsigned int v223 = v209 | (32 * ((62 << v218) + v211));
            uint64_t v224 = a5 + 4 * v209;
            if (*(_DWORD *)(v224 + 36) < v223) {
              unsigned int v223 = *(_DWORD *)(v224 + 36);
            }
            *(_DWORD *)(v224 + 36) = v223;
            if (v209 + 12 < a4 && v222[4] == 116 && v222[5] == 104 && v222[6] == 101 && v222[7] == 32)
            {
              unsigned int v225 = v209 | (32 * ((73 << v218) + v211));
              uint64_t v226 = a5 + 4 * v209;
              if (*(_DWORD *)(v226 + 52) < v225) {
                unsigned int v225 = *(_DWORD *)(v226 + 52);
              }
              *(_DWORD *)(v226 + 52) = v225;
            }
          }
        }
        uint64_t v5 = 1;
LABEL_486:
        ++v204;
        if (v208 < 0) {
          return v5;
        }
      }
    }
    uint64_t v181 = a1[6];
    uint64_t v182 = *a1;
    while (1)
    {
      uint64_t v183 = (char *)(v181 + 4 * v180);
      char v184 = *v183;
      unint64_t v185 = *v183 & 0x1F;
      if (v183[1]) {
        BOOL v186 = 0;
      }
      else {
        BOOL v186 = a4 - 2 >= v185;
      }
      if (!v186) {
        goto LABEL_429;
      }
      int v187 = *((unsigned __int16 *)v183 + 1);
      unint64_t v188 = *(void *)(v182 + 168)
           + *(unsigned int *)(v182 + 4 * (*v183 & 0x1F) + 32)
           + *((unsigned __int16 *)v183 + 1) * (unint64_t)(*v183 & 0x1F);
      if (v185 < 8)
      {
        unint64_t v190 = 0;
        unint64_t v191 = a2 + 2;
LABEL_432:
        unint64_t v199 = v185 & 7;
        if ((v185 & 7) != 0)
        {
          unint64_t v200 = v190 | v199;
          while (*(unsigned __int8 *)(v188 + v190) == *v191)
          {
            ++v191;
            ++v190;
            if (!--v199)
            {
              unint64_t v190 = v200;
              break;
            }
          }
        }
      }
      else
      {
        uint64_t v189 = 0;
        unint64_t v190 = *v183 & 0x18;
        unint64_t v191 = &v179[v190];
        while (1)
        {
          uint64_t v192 = *(void *)&v179[v189];
          uint64_t v193 = *(void *)(v188 + v189);
          if (v192 != v193) {
            break;
          }
          v189 += 8;
          if (v190 == v189) {
            goto LABEL_432;
          }
        }
        unint64_t v190 = v189 + (__clz(__rbit64(v193 ^ v192)) >> 3);
      }
      if (v190 != v185) {
        goto LABEL_429;
      }
      int v194 = *a2;
      if (v194 == 194) {
        break;
      }
      if (v185 + 2 < a4 && a2[v185 + 2] == 32)
      {
        if (v194 == 115) {
          uint64_t v195 = 7;
        }
        else {
          uint64_t v195 = 13;
        }
        if (v194 == 101) {
          uint64_t v195 = 18;
        }
        uint64_t v196 = 3;
        goto LABEL_418;
      }
LABEL_429:
      ++v180;
      if (v184 < 0) {
        goto LABEL_437;
      }
    }
    uint64_t v195 = 102;
    uint64_t v196 = 2;
LABEL_418:
    unint64_t v197 = v196 + v185;
    unsigned int v198 = v185 | (32 * ((v195 << *(unsigned char *)(v182 + v185)) + v187));
    if (*(_DWORD *)(a5 + 4 * v197) < v198) {
      unsigned int v198 = *(_DWORD *)(a5 + 4 * v197);
    }
    *(_DWORD *)(a5 + 4 * v197) = v198;
    uint64_t v5 = 1;
    goto LABEL_429;
  }
  return v5;
}

BOOL sub_2483E3F8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a4)
  {
    double v19 = 0.0;
    return (double)a4 * 0.75 < v19;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    unint64_t v6 = (char *)(a1 + ((v4 + a2) & a3));
    unsigned int v7 = *v6;
    if (*v6 <= 0)
    {
      unint64_t v8 = a4 - v4;
      if (a4 - v4 >= 2)
      {
        if ((v7 & 0xE0) == 0xC0)
        {
          unsigned __int8 v9 = v6[1];
          if ((v9 & 0xC0) == 0x80)
          {
            unsigned int v10 = v9 & 0x3F | ((v7 & 0x1F) << 6);
            if (v10 > 0x7F)
            {
              unsigned int v7 = v10;
              uint64_t v11 = 2;
              goto LABEL_24;
            }
          }
        }
        if (v8 >= 3)
        {
          if ((v7 & 0xF0) == 0xE0)
          {
            unsigned __int8 v12 = v6[1];
            if ((v12 & 0xC0) == 0x80)
            {
              unsigned __int8 v13 = v6[2];
              if ((v13 & 0xC0) == 0x80 && (((v7 & 0xF) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F) > 0x7FF)
              {
                unsigned int v7 = ((v7 & 0xF) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F;
                uint64_t v11 = 3;
                goto LABEL_24;
              }
            }
          }
          if (v8 >= 4 && (v7 & 0xF8) == 0xF0)
          {
            unsigned __int8 v14 = v6[1];
            if ((v14 & 0xC0) == 0x80)
            {
              unsigned __int8 v15 = v6[2];
              if ((v15 & 0xC0) == 0x80)
              {
                unsigned __int8 v16 = v6[3];
                if ((v16 & 0xC0) == 0x80)
                {
                  int v17 = ((v7 & 7) << 18) | ((v14 & 0x3F) << 12);
                  if ((v17 - 0x10000) < 0x100000)
                  {
                    unsigned int v7 = v16 & 0x3F | ((v15 & 0x3F) << 6) | v17;
                    uint64_t v11 = 4;
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
      }
      v7 |= 0x110000u;
    }
    uint64_t v11 = 1;
LABEL_24:
    v4 += v11;
    if (v7 >= 0x110000) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v11;
    }
    v5 += v18;
  }
  while (v4 < a4);
  double v19 = (double)v5;
  return (double)a4 * 0.75 < v19;
}

uint64_t sub_2483E4100(unint64_t *a1)
{
  if (*((_DWORD *)a1 + 2) != 64) {
    return 1;
  }
  unint64_t v1 = a1[3];
  if (v1)
  {
    unint64_t v2 = *a1;
    *a1 >>= 8;
    uint64_t v3 = (unsigned __int8 *)a1[2];
    *((void *)&v4 + 1) = *v3;
    *(void *)&long long v4 = v2;
    *a1 = v4 >> 8;
    *((_DWORD *)a1 + 2) = 56;
    a1[2] = (unint64_t)(v3 + 1);
    a1[3] = v1 - 1;
    return 1;
  }
  return 0;
}

uint64_t sub_2483E4150(void *a1)
{
  unsigned int v7 = (uint64_t (*)(uint64_t, void *))a1[6];
  uint64_t v2 = a1[7];
  sub_2483E8AD8((uint64_t)a1);
  ((void (*)(void, void))a1[6])(a1[7], a1[89]);
  a1[89] = 0;
  uint64_t v3 = (void *)a1[88];
  if (v3)
  {
    long long v4 = (void (*)(uint64_t, void *))v3[174];
    uint64_t v5 = v3[175];
    v4(v5, (void *)v3[169]);
    v4(v5, (void *)v3[171]);
    v4(v5, (void *)v3[172]);
    v4(v5, v3);
  }
  a1[88] = 0;
  ((void (*)(void, void))a1[6])(a1[7], a1[15]);
  a1[15] = 0;
  ((void (*)(void, void))a1[6])(a1[7], a1[30]);
  a1[30] = 0;

  return v7(v2, a1);
}

uint64_t sub_2483E422C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 116) = a2;
  *(void *)(a1 + 648) += a3;
  if (a2 - 1 >= 3) {
    return 0;
  }
  else {
    return a2;
  }
}

uint64_t sub_2483E424C(uint64_t a1, size_t *a2, void **a3, int a4)
{
  uint64_t v4 = *(int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 76) >= (int)v4) {
    int v5 = *(_DWORD *)(a1 + 88);
  }
  else {
    int v5 = *(_DWORD *)(a1 + 76);
  }
  uint64_t v6 = *(void *)(a1 + 376);
  uint64_t v7 = *(void *)(a1 + 368) * v4 - v6;
  size_t v8 = v7 + v5;
  size_t v9 = *a2;
  if (*a2 >= v8) {
    size_t v10 = v7 + v5;
  }
  else {
    size_t v10 = *a2;
  }
  if ((*(_DWORD *)(a1 + 264) & 0x80000000) != 0) {
    return 4294967287;
  }
  if (a3)
  {
    unsigned __int8 v15 = (void *)(*(void *)(a1 + 120) + (v6 & *(int *)(a1 + 92)));
    if (*a3)
    {
      memcpy(*a3, v15, v10);
      *a3 = (char *)*a3 + v10;
      size_t v16 = *a2;
      LODWORD(v4) = *(_DWORD *)(a1 + 88);
      goto LABEL_14;
    }
    *a3 = v15;
  }
  size_t v16 = v9;
LABEL_14:
  *a2 = v16 - v10;
  *(void *)(a1 + 376) += v10;
  int v18 = 1 << *(_DWORD *)(a1 + 676);
  if (v8 <= v9)
  {
    if (v4 == v18)
    {
      int v20 = *(_DWORD *)(a1 + 76);
      BOOL v21 = __OFSUB__(v20, v4);
      int v22 = v20 - v4;
      if (v22 < 0 == v21)
      {
        *(_DWORD *)(a1 + 76) = v22;
        ++*(void *)(a1 + 368);
        *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xFFF7 | (8 * (v22 != 0));
      }
    }
    return 1;
  }
  else if (v4 != v18 && a4 == 0)
  {
    return 1;
  }
  else
  {
    return 3;
  }
}

uint64_t sub_2483E4388(uint64_t a1, unint64_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 656);
  while (2)
  {
    switch(v2)
    {
      case 0:
        int v3 = *((_DWORD *)a2 + 2);
        if (v3 == 64)
        {
          unint64_t v4 = a2[3];
          if (!v4) {
            return 2;
          }
          unint64_t v5 = *a2;
          *a2 >>= 8;
          uint64_t v6 = (unsigned __int8 *)a2[2];
          *((void *)&v8 + 1) = *v6;
          *(void *)&long long v8 = v5;
          unint64_t v7 = v8 >> 8;
          *a2 = v7;
          a2[2] = (unint64_t)(v6 + 1);
          a2[3] = v4 - 1;
          int v3 = 56;
        }
        else
        {
          unint64_t v7 = *a2;
        }
        *((_DWORD *)a2 + 2) = v3 + 1;
        uint64_t v10 = v7 & (1 << v3);
        __int16 v11 = *(_WORD *)(a1 + 672) & 0xFFF8 | (v10 != 0);
        *(_DWORD *)(a1 + 264) = 0;
        *(_WORD *)(a1 + 672) = v11;
        if (v10)
        {
          *(_DWORD *)(a1 + 656) = 1;
          goto LABEL_10;
        }
        int v2 = 2;
        goto LABEL_22;
      case 1:
LABEL_10:
        int v12 = *((_DWORD *)a2 + 2);
        if (v12 == 64)
        {
          unint64_t v13 = a2[3];
          if (!v13) {
            return 2;
          }
          unint64_t v14 = *a2;
          *a2 >>= 8;
          unsigned __int8 v15 = (unsigned __int8 *)a2[2];
          *((void *)&v17 + 1) = *v15;
          *(void *)&long long v17 = v14;
          unint64_t v16 = v17 >> 8;
          *a2 = v16;
          a2[2] = (unint64_t)(v15 + 1);
          a2[3] = v13 - 1;
          int v12 = 56;
        }
        else
        {
          unint64_t v16 = *a2;
        }
        int v9 = v12 + 1;
        *((_DWORD *)a2 + 2) = v12 + 1;
        if ((v16 >> v12)) {
          goto LABEL_84;
        }
        *(_DWORD *)(a1 + 656) = 2;
LABEL_16:
        if ((v9 - 63) >= 2)
        {
          unint64_t v21 = *a2;
        }
        else
        {
          unint64_t v18 = a2[3];
          if (!v18) {
            return 2;
          }
          unint64_t v19 = *a2;
          *a2 >>= 8;
          int v20 = (unsigned __int8 *)a2[2];
          *((void *)&v22 + 1) = *v20;
          *(void *)&long long v22 = v19;
          unint64_t v21 = v22 >> 8;
          *a2 = v21;
          v9 -= 8;
          a2[2] = (unint64_t)(v20 + 1);
          a2[3] = v18 - 1;
        }
        int v23 = (v21 >> v9) & 3;
        *((_DWORD *)a2 + 2) = v9 + 2;
        int v24 = *(_WORD *)(a1 + 672) & 0xC03F | (v23 << 6);
        unsigned int v25 = v24 | 0x100;
        *(_WORD *)(a1 + 672) = v24 | 0x100;
        *(_DWORD *)(a1 + 4) = 0;
        if (v23 == 3)
        {
          *(_WORD *)(a1 + 672) = v24 | 0x104;
          int v2 = 5;
LABEL_22:
          *(_DWORD *)(a1 + 656) = v2;
          continue;
        }
        int v26 = 0;
        *(_DWORD *)(a1 + 656) = 3;
LABEL_27:
        if (v26 < (v25 >> 6))
        {
          int v28 = *((_DWORD *)a2 + 2);
          int v29 = 4 * v26;
          do
          {
            if ((v28 - 61) >= 4)
            {
              unint64_t v33 = *a2;
            }
            else
            {
              unint64_t v30 = a2[3];
              if (!v30)
              {
LABEL_85:
                *(_DWORD *)(a1 + 4) = v26;
                return 2;
              }
              unint64_t v31 = *a2;
              *a2 >>= 8;
              double v32 = (unsigned __int8 *)a2[2];
              *((void *)&v34 + 1) = *v32;
              *(void *)&long long v34 = v31;
              unint64_t v33 = v34 >> 8;
              *a2 = v33;
              v28 -= 8;
              a2[2] = (unint64_t)(v32 + 1);
              a2[3] = v30 - 1;
            }
            uint64_t v35 = (v33 >> v28) & 0xF;
            v28 += 4;
            *((_DWORD *)a2 + 2) = v28;
            ++v26;
            unsigned int v25 = *(unsigned __int16 *)(a1 + 672);
            unsigned int v36 = (v25 >> 6);
            if (v26 == v36 && v36 >= 5 && v35 == 0) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)(a1 + 264) |= v35 << v29;
            v29 += 4;
          }
          while (v26 < (int)v36);
        }
        *(_DWORD *)(a1 + 656) = 4;
        if ((v25 & 1) == 0)
        {
LABEL_44:
          int v39 = *((_DWORD *)a2 + 2);
          if (v39 == 64)
          {
            unint64_t v40 = a2[3];
            if (!v40) {
              return 2;
            }
            unint64_t v41 = *a2;
            *a2 >>= 8;
            unsigned int v42 = (unsigned __int8 *)a2[2];
            *((void *)&v44 + 1) = *v42;
            *(void *)&long long v44 = v41;
            unint64_t v43 = v44 >> 8;
            *a2 = v43;
            a2[2] = (unint64_t)(v42 + 1);
            a2[3] = v40 - 1;
            int v39 = 56;
          }
          else
          {
            unint64_t v43 = *a2;
          }
          *((_DWORD *)a2 + 2) = v39 + 1;
          *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xFFFD | (2 * ((v43 >> v39) & 1));
        }
LABEL_54:
        int v53 = *(_DWORD *)(a1 + 264) + 1;
LABEL_83:
        *(_DWORD *)(a1 + 264) = v53;
LABEL_84:
        *(_DWORD *)(a1 + 656) = 0;
        return 1;
      case 2:
        int v9 = *((_DWORD *)a2 + 2);
        goto LABEL_16;
      case 3:
        int v26 = *(_DWORD *)(a1 + 4);
        unsigned int v25 = *(unsigned __int16 *)(a1 + 672);
        goto LABEL_27;
      case 4:
        if ((*(_WORD *)(a1 + 672) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_54;
      case 5:
        int v45 = *((_DWORD *)a2 + 2);
        if (v45 == 64)
        {
          unint64_t v46 = a2[3];
          if (!v46) {
            return 2;
          }
          unint64_t v47 = *a2;
          *a2 >>= 8;
          unint64_t v48 = (unsigned __int8 *)a2[2];
          *((void *)&v50 + 1) = *v48;
          *(void *)&long long v50 = v47;
          unint64_t v49 = v50 >> 8;
          *a2 = v49;
          a2[2] = (unint64_t)(v48 + 1);
          a2[3] = v46 - 1;
          int v45 = 56;
        }
        else
        {
          unint64_t v49 = *a2;
        }
        int v51 = v45 + 1;
        *((_DWORD *)a2 + 2) = v45 + 1;
        if ((v49 >> v45)) {
          return 4294967294;
        }
        *(_DWORD *)(a1 + 656) = 6;
LABEL_60:
        if ((v51 - 63) >= 2)
        {
          unint64_t v57 = *a2;
        }
        else
        {
          unint64_t v54 = a2[3];
          if (!v54) {
            return 2;
          }
          unint64_t v55 = *a2;
          *a2 >>= 8;
          unint64_t v56 = (unsigned __int8 *)a2[2];
          *((void *)&v58 + 1) = *v56;
          *(void *)&long long v58 = v55;
          unint64_t v57 = v58 >> 8;
          *a2 = v57;
          v51 -= 8;
          a2[2] = (unint64_t)(v56 + 1);
          a2[3] = v54 - 1;
        }
        *((_DWORD *)a2 + 2) = v51 + 2;
        int v59 = (v57 >> v51) & 3;
        if (!v59) {
          goto LABEL_84;
        }
        unsigned int v52 = *(_WORD *)(a1 + 672) & 0xC03F | (v59 << 6);
        *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xC03F | ((_WORD)v59 << 6);
        *(_DWORD *)(a1 + 656) = 7;
LABEL_66:
        int v26 = *(_DWORD *)(a1 + 4);
        if (v26 >= (v52 >> 6))
        {
          int v71 = *(_DWORD *)(a1 + 264);
        }
        else
        {
          int v60 = *((_DWORD *)a2 + 2);
          int v61 = 8 * v26;
          do
          {
            if ((v60 - 57) >= 8)
            {
              unint64_t v65 = *a2;
            }
            else
            {
              unint64_t v62 = a2[3];
              if (!v62) {
                goto LABEL_85;
              }
              unint64_t v63 = *a2;
              *a2 >>= 8;
              double v64 = (unsigned __int8 *)a2[2];
              *((void *)&v66 + 1) = *v64;
              *(void *)&long long v66 = v63;
              unint64_t v65 = v66 >> 8;
              *a2 = v65;
              v60 -= 8;
              a2[2] = (unint64_t)(v64 + 1);
              a2[3] = v62 - 1;
            }
            int v67 = (v65 >> v60);
            v60 += 8;
            *((_DWORD *)a2 + 2) = v60;
            ++v26;
            unsigned int v68 = (*(unsigned __int16 *)(a1 + 672) >> 6);
            if (v26 == v68 && v68 >= 2 && v67 == 0) {
              return 4294967293;
            }
            int v71 = *(_DWORD *)(a1 + 264) | (v67 << v61);
            *(_DWORD *)(a1 + 264) = v71;
            v61 += 8;
          }
          while (v26 < (int)v68);
        }
        int v53 = v71 + 1;
        goto LABEL_83;
      case 6:
        int v51 = *((_DWORD *)a2 + 2);
        goto LABEL_60;
      case 7:
        unsigned int v52 = *(unsigned __int16 *)(a1 + 672);
        goto LABEL_66;
      default:
        return 4294967265;
    }
  }
}

uint64_t sub_2483E4854(uint64_t result)
{
  int v1 = 1 << *(_DWORD *)(result + 676);
  int v2 = *(_DWORD *)(result + 88);
  if (v2) {
    int v3 = *(_DWORD *)(result + 88);
  }
  else {
    int v3 = 1024;
  }
  if (v2 != v1)
  {
    __int16 v4 = *(_WORD *)(result + 672);
    if ((v4 & 4) == 0)
    {
      uint64_t v5 = *(void *)(result + 120);
      if (v5) {
        LODWORD(v5) = *(_DWORD *)(result + 76);
      }
      int v6 = *(_DWORD *)(result + 264) + v5;
      if (v3 <= v6) {
        int v3 = v6;
      }
      if ((v4 & 0x10) != 0)
      {
        do
        {
          int v7 = v1;
          v1 >>= 1;
        }
        while (v1 >= v3);
      }
      else
      {
        int v7 = 1 << *(_DWORD *)(result + 676);
      }
      *(_DWORD *)(result + 680) = v7;
    }
  }
  return result;
}

uint64_t sub_2483E48C0(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  int v3 = *(_DWORD *)(a1 + 664);
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2) {
        return 4294967265;
      }
      unsigned int v4 = *a3;
      goto LABEL_18;
    }
    int v11 = *((_DWORD *)a2 + 2);
  }
  else
  {
    int v5 = *((_DWORD *)a2 + 2);
    if (v5 == 64)
    {
      unint64_t v6 = a2[3];
      if (!v6) {
        return 2;
      }
      unint64_t v7 = *a2;
      *a2 >>= 8;
      long long v8 = (unsigned __int8 *)a2[2];
      *((void *)&v10 + 1) = *v8;
      *(void *)&long long v10 = v7;
      unint64_t v9 = v10 >> 8;
      *a2 = v9;
      a2[2] = (unint64_t)(v8 + 1);
      a2[3] = v6 - 1;
      int v5 = 56;
    }
    else
    {
      unint64_t v9 = *a2;
    }
    int v11 = v5 + 1;
    *((_DWORD *)a2 + 2) = v5 + 1;
    if (((v9 >> v5) & 1) == 0)
    {
      *a3 = 0;
      return 1;
    }
  }
  if ((v11 - 62) >= 3)
  {
    unint64_t v16 = *a2;
    goto LABEL_16;
  }
  unint64_t v13 = a2[3];
  if (!v13)
  {
    *(_DWORD *)(a1 + 664) = 1;
    return 2;
  }
  unint64_t v14 = *a2;
  *a2 >>= 8;
  unsigned __int8 v15 = (unsigned __int8 *)a2[2];
  *((void *)&v17 + 1) = *v15;
  *(void *)&long long v17 = v14;
  unint64_t v16 = v17 >> 8;
  *a2 = v16;
  v11 -= 8;
  a2[2] = (unint64_t)(v15 + 1);
  a2[3] = v13 - 1;
LABEL_16:
  *((_DWORD *)a2 + 2) = v11 + 3;
  unsigned int v4 = (v16 >> v11) & 7;
  if (!v4)
  {
    uint64_t v12 = 1;
    *a3 = 1;
LABEL_26:
    *(_DWORD *)(a1 + 664) = 0;
    return v12;
  }
  *a3 = v4;
LABEL_18:
  int v18 = *((_DWORD *)a2 + 2);
  unsigned int v19 = 64 - v18;
  if (64 - v18 >= v4)
  {
    unint64_t v23 = *a2;
LABEL_24:
    int v25 = (v23 >> v18) & ~(-1 << v4);
    *((_DWORD *)a2 + 2) = v18 + v4;
    uint64_t v12 = 1;
    *a3 = (1 << *a3) + v25;
    goto LABEL_26;
  }
  uint64_t v20 = a2[3] - 1;
  while (v20 != -1)
  {
    unint64_t v21 = *a2;
    *a2 >>= 8;
    long long v22 = (unsigned __int8 *)a2[2];
    *((void *)&v24 + 1) = *v22;
    *(void *)&long long v24 = v21;
    unint64_t v23 = v24 >> 8;
    *a2 = v23;
    v18 -= 8;
    *((_DWORD *)a2 + 2) = v18;
    a2[2] = (unint64_t)(v22 + 1);
    a2[3] = v20--;
    v19 += 8;
    if (v19 >= v4) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = 2;
  *(_DWORD *)(a1 + 664) = 2;
  return v12;
}

uint64_t sub_2483E4A70(int a1, unsigned int a2, char *__src, int *a4, uint64_t a5)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  long long v8 = (unint64_t *)(a5 + 8);
  int v9 = *(_DWORD *)(a5 + 760);
  long long v10 = (int *)(a5 + 780);
  int v11 = (_OWORD *)(a5 + 2514);
  if (!v9)
  {
    int v12 = *(_DWORD *)(a5 + 16);
    if ((v12 - 63) >= 2)
    {
      unint64_t v16 = *v8;
    }
    else
    {
      uint64_t v13 = *(void *)(a5 + 32);
      if (!v13) {
        return 2;
      }
      unint64_t v14 = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = v14 >> 8;
      unsigned __int8 v15 = *(unsigned __int8 **)(a5 + 24);
      *((void *)&v17 + 1) = *v15;
      *(void *)&long long v17 = v14;
      unint64_t v16 = v17 >> 8;
      *(void *)(a5 + 8) = v16;
      v12 -= 8;
      *(void *)(a5 + 24) = v15 + 1;
      *(void *)(a5 + 32) = v13 - 1;
    }
    uint64_t v18 = (v16 >> v12) & 3;
    *(_DWORD *)(a5 + 764) = v18;
    int v19 = v12 + 2;
    *(_DWORD *)(a5 + 16) = v19;
    if (v18 != 1)
    {
      *(void *)long long v10 = 0x2000000000;
      *(void *)(a5 + 2504) = 0;
      *(void *)(a5 + 2512) = 0;
      *(void *)(a5 + 2496) = 0;
      *(void *)(a5 + 2518) = 0;
      int v9 = 4;
      *(_DWORD *)(a5 + 760) = 4;
      goto LABEL_8;
    }
LABEL_10:
    if ((v19 - 63) >= 2)
    {
      unint64_t v23 = *v8;
    }
    else
    {
      uint64_t v20 = *(void *)(a5 + 32);
      if (!v20)
      {
        int v45 = 1;
LABEL_227:
        *(_DWORD *)(a5 + 760) = v45;
        return 2;
      }
      unint64_t v21 = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = v21 >> 8;
      long long v22 = *(unsigned __int8 **)(a5 + 24);
      *((void *)&v24 + 1) = *v22;
      *(void *)&long long v24 = v21;
      unint64_t v23 = v24 >> 8;
      *(void *)(a5 + 8) = v23;
      v19 -= 8;
      *(void *)(a5 + 24) = v22 + 1;
      *(void *)(a5 + 32) = v20 - 1;
    }
    *(_DWORD *)(a5 + 776) = (v23 >> v19) & 3;
    *(_DWORD *)(a5 + 16) = v19 + 2;
    *(_DWORD *)(a5 + 764) = 0;
LABEL_38:
    unsigned int v52 = 0;
    unsigned int v53 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        ++v52;
        BOOL v54 = v53 > 1;
        v53 >>= 1;
      }
      while (v54);
    }
    unsigned int v55 = *(_DWORD *)(a5 + 764);
    uint64_t v25 = *(unsigned int *)(a5 + 776);
    if (v55 <= v25)
    {
      int v60 = *(_DWORD *)(a5 + 16);
      do
      {
        unsigned int v61 = 64 - v60;
        if (64 - v60 >= v52)
        {
          unint64_t v65 = *v8;
        }
        else
        {
          uint64_t v62 = *(void *)(a5 + 32) - 1;
          do
          {
            if (v62 == -1)
            {
              *(_DWORD *)(a5 + 764) = v55;
              uint64_t result = 2;
              *(_DWORD *)(a5 + 760) = 2;
              return result;
            }
            unint64_t v63 = *(void *)(a5 + 8);
            *(void *)(a5 + 8) = v63 >> 8;
            double v64 = *(unsigned __int8 **)(a5 + 24);
            *((void *)&v66 + 1) = *v64;
            *(void *)&long long v66 = v63;
            unint64_t v65 = v66 >> 8;
            *(void *)(a5 + 8) = v65;
            v60 -= 8;
            *(_DWORD *)(a5 + 16) = v60;
            *(void *)(a5 + 24) = v64 + 1;
            *(void *)(a5 + 32) = v62--;
            v61 += 8;
          }
          while (v61 < v52);
        }
        unsigned int v67 = (v65 >> v60) & ~(-1 << v52);
        v60 += v52;
        *(_DWORD *)(a5 + 16) = v60;
        if (v67 >= a2) {
          return 4294967292;
        }
        *(_WORD *)(a5 + 2 * v55++ + 928) = v67;
      }
      while (v55 <= v25);
    }
    if (!v25)
    {
      uint64_t v96 = (unsigned __int16 *)(a5 + 928);
LABEL_81:
      *(_DWORD *)__src = *v96 << 16;
LABEL_82:
      for (unsigned int i = 1; i != 256; i *= 2)
LABEL_235:
        memcpy(&__src[4 * i], __src, 4 * i);
      if (a4) {
        *a4 = 256;
      }
      goto LABEL_238;
    }
    uint64_t v56 = 0;
    while (2)
    {
      uint64_t v57 = a5 + 2 * v56++;
      int v58 = *(unsigned __int16 *)(v57 + 928);
      unsigned int v59 = v56;
      do
      {
        if (v58 == *(unsigned __int16 *)(a5 + 2 * v59 + 928)) {
          return 4294967291;
        }
        ++v59;
      }
      while (v59 <= v25);
      if (v56 != v25) {
        continue;
      }
      break;
    }
LABEL_14:
    if (v25 != 3)
    {
LABEL_80:
      uint64_t v96 = (unsigned __int16 *)(a5 + 928);
      switch((int)v25)
      {
        case 0:
          goto LABEL_81;
        case 1:
          unsigned int v195 = *(unsigned __int16 *)(a5 + 930);
          unsigned int v196 = *(unsigned __int16 *)(a5 + 928);
          if (v195 <= v196)
          {
            *(_DWORD *)__src = (v195 << 16) | 1;
            int v197 = (*v96 << 16) | 1;
          }
          else
          {
            *(_DWORD *)__src = (v196 << 16) | 1;
            int v197 = (*(unsigned __int16 *)(a5 + 930) << 16) | 1;
          }
          *((_DWORD *)__src + 1) = v197;
          unsigned int i = 2;
          goto LABEL_235;
        case 2:
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          unsigned int v198 = *(unsigned __int16 *)(a5 + 932);
          unsigned int v199 = *(unsigned __int16 *)(a5 + 930);
          if (v198 <= v199)
          {
            *((_DWORD *)__src + 1) = (v198 << 16) | 2;
            int v207 = *(unsigned __int16 *)(a5 + 930);
LABEL_233:
            int v200 = (v207 << 16) | 2;
          }
          else
          {
            *((_DWORD *)__src + 1) = (v199 << 16) | 2;
            int v200 = (*(unsigned __int16 *)(a5 + 932) << 16) | 2;
          }
          *((_DWORD *)__src + 3) = v200;
          unsigned int i = 4;
          break;
        case 3:
          uint64_t v201 = 0;
          uint64_t v202 = 0;
          uint64_t v203 = a5 + 930;
          do
          {
            unsigned __int16 v204 = v96[v202];
            uint64_t v205 = v201;
            do
            {
              unsigned int v206 = *(unsigned __int16 *)(v203 + v205);
              if (v206 < v204)
              {
                *(_WORD *)(v203 + v205) = v204;
                v96[v202] = v206;
                unsigned __int16 v204 = v206;
              }
              v205 += 2;
            }
            while (v205 != 6);
            ++v202;
            v201 += 2;
          }
          while (v202 != 3);
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 2;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 1) = (*(unsigned __int16 *)(a5 + 932) << 16) | 2;
          int v207 = *(unsigned __int16 *)(a5 + 934);
          goto LABEL_233;
        case 4:
          unsigned int v208 = *(unsigned __int16 *)(a5 + 934);
          unsigned int v209 = *(unsigned __int16 *)(a5 + 932);
          if (v208 < v209)
          {
            *(_WORD *)(a5 + 934) = v209;
            *(_WORD *)(a5 + 932) = v208;
          }
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 1) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 3) = (*(unsigned __int16 *)(a5 + 932) << 16) | 3;
          *((_DWORD *)__src + 4) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 5) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 6) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 7) = (*(unsigned __int16 *)(a5 + 934) << 16) | 3;
          unsigned int i = 8;
          goto LABEL_235;
        default:
          goto LABEL_82;
      }
      goto LABEL_235;
    }
    int v26 = *(_DWORD *)(a5 + 16);
    if (v26 != 64)
    {
      unint64_t v30 = *v8;
      goto LABEL_79;
    }
    uint64_t v27 = *(void *)(a5 + 32);
    if (v27)
    {
      unint64_t v28 = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = v28 >> 8;
      int v29 = *(unsigned __int8 **)(a5 + 24);
      *((void *)&v31 + 1) = *v29;
      *(void *)&long long v31 = v28;
      unint64_t v30 = v31 >> 8;
      *(void *)(a5 + 8) = v30;
      *(void *)(a5 + 24) = v29 + 1;
      *(void *)(a5 + 32) = v27 - 1;
      int v26 = 56;
LABEL_79:
      *(_DWORD *)(a5 + 16) = v26 + 1;
      LODWORD(v25) = ((v30 >> v26) & 1) + 3;
      *(_DWORD *)(a5 + 776) = v25;
      goto LABEL_80;
    }
    int v45 = 3;
    goto LABEL_227;
  }
LABEL_8:
  switch(v9)
  {
    case 1:
      int v19 = *(_DWORD *)(a5 + 16);
      goto LABEL_10;
    case 2:
      goto LABEL_38;
    case 3:
      LODWORD(v25) = *(_DWORD *)(a5 + 776);
      goto LABEL_14;
    case 4:
      int v32 = *(_DWORD *)(a5 + 780);
      int v33 = *(_DWORD *)(a5 + 784);
      uint64_t v34 = *(unsigned int *)(a5 + 764);
      if (v34 > 0x11) {
        goto LABEL_59;
      }
      int v35 = *(_DWORD *)(a5 + 16);
      break;
    case 5:
      unsigned int v211 = a4;
      unint64_t v212 = (int *)(a5 + 780);
      unsigned int v213 = a2;
      unsigned int v46 = *(_DWORD *)(a5 + 776);
      int v47 = *(_DWORD *)(a5 + 780);
      int v48 = *(_DWORD *)(a5 + 784);
      int v210 = *(_DWORD *)(a5 + 772);
      LODWORD(v49) = *(_DWORD *)(a5 + 768);
      uint64_t v50 = *(void *)(a5 + 920);
      goto LABEL_88;
    default:
      return 4294967265;
  }
  do
  {
    uint64_t v36 = byte_2485517FE[v34];
    if ((v35 - 61) >= 4)
    {
      unint64_t v40 = *v8;
      goto LABEL_24;
    }
    uint64_t v37 = *(void *)(a5 + 32);
    if (v37)
    {
      unint64_t v38 = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = v38 >> 8;
      int v39 = *(unsigned __int8 **)(a5 + 24);
      *((void *)&v41 + 1) = *v39;
      *(void *)&long long v41 = v38;
      unint64_t v40 = v41 >> 8;
      *(void *)(a5 + 8) = v40;
      v35 -= 8;
      *(void *)(a5 + 24) = v39 + 1;
      *(void *)(a5 + 32) = v37 - 1;
LABEL_24:
      uint64_t v42 = (v40 >> v35) & 0xF;
      unsigned int v43 = byte_24854B378[v42];
      goto LABEL_25;
    }
    if (v35 == 64) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *v8 >> v35;
    }
    unsigned int v43 = byte_24854B378[v42];
    if (64 - v35 < v43)
    {
      *(_DWORD *)(a5 + 764) = v34;
      *(_DWORD *)(a5 + 780) = v32;
      *(_DWORD *)(a5 + 784) = v33;
      int v45 = 4;
      goto LABEL_227;
    }
LABEL_25:
    unsigned int v44 = byte_24854B388[v42];
    v35 += v43;
    *(_DWORD *)(a5 + 16) = v35;
    *(unsigned char *)(a5 + v36 + 2496) = v44;
    if (((0x1111uLL >> v42) & 1) == 0)
    {
      v33 -= 0x20u >> v44;
      ++v32;
      ++*(_WORD *)(a5 + 2 * v44 + 2514);
      if ((v33 - 33) < 0xFFFFFFE0) {
        break;
      }
    }
    ++v34;
  }
  while (v34 != 18);
LABEL_59:
  if (v32 != 1 && v33 != 0) {
    return 4294967290;
  }
  uint64_t v69 = 0;
  int v70 = *(unsigned __int16 *)(a5 + 2516) - 1;
  int v71 = v70 + *(unsigned __int16 *)(a5 + 2518) + *(unsigned __int16 *)(a5 + 2520);
  v214[2] = v70 + *(unsigned __int16 *)(a5 + 2518);
  v214[3] = v71;
  int v72 = v71 + *(unsigned __int16 *)(a5 + 2522);
  int v73 = v72 + *(unsigned __int16 *)(a5 + 2524);
  v214[4] = v72;
  v214[5] = v73;
  v214[0] = 17;
  v214[1] = v70;
  uint64_t v74 = a5 + 2513;
  do
  {
    uint64_t v75 = *(unsigned __int8 *)(v74 + v69);
    uint64_t v76 = (int)v214[v75];
    v215[v76] = v69 + 17;
    v214[v75] = v76 - 1;
    uint64_t v77 = *(unsigned __int8 *)(v74 + v69 - 1);
    uint64_t v78 = (int)v214[v77];
    v214[v77] = v78 - 1;
    uint64_t v79 = *(unsigned __int8 *)(v74 + v69 - 2);
    uint64_t v80 = (int)v214[v79];
    v215[v78] = v69 + 16;
    v215[v80] = v69 + 15;
    v214[v79] = v80 - 1;
    uint64_t v81 = *(unsigned __int8 *)(v74 + v69 - 3);
    uint64_t v82 = (int)v214[v81];
    v214[v81] = v82 - 1;
    uint64_t v83 = *(unsigned __int8 *)(v74 + v69 - 4);
    uint64_t v84 = (int)v214[v83];
    v215[v82] = v69 + 14;
    v215[v84] = v69 + 13;
    v214[v83] = v84 - 1;
    uint64_t v85 = *(unsigned __int8 *)(v74 + v69 - 5);
    uint64_t v86 = (int)v214[v85];
    v214[v85] = v86 - 1;
    v215[v86] = v69 + 12;
    v69 -= 6;
  }
  while (v69 != -18);
  if (v214[0])
  {
    unint64_t v87 = 0;
    LODWORD(v88) = 0;
    int v89 = 2;
    unint64_t v90 = 0x8000000000000000;
    for (uint64_t j = 1; j != 6; ++j)
    {
      int v92 = *((unsigned __int16 *)v11 + j);
      if (*((_WORD *)v11 + j))
      {
        uint64_t v88 = (int)v88;
        do
        {
          int v93 = j | (v215[v88] << 16);
          unint64_t v94 = a5 - 4 * v89 + 4 * __rbit64(v87);
          uint64_t v95 = 229;
          do
          {
            *(_DWORD *)(v94 + 4 * v95) = v93;
            v95 -= v89;
          }
          while (v95 - 197 > 0);
          ++v88;
          v87 += v90;
          --v92;
        }
        while (v92);
      }
      v89 *= 2;
      v90 >>= 1;
    }
  }
  else
  {
    uint64_t v98 = 0;
    int32x4_t v99 = vdupq_n_s32(v215[0] << 16);
    do
    {
      *(int32x4_t *)(a5 + 788 + v98) = v99;
      v98 += 16;
    }
    while (v98 != 128);
  }
  unsigned int v211 = a4;
  unint64_t v212 = v10;
  unint64_t v100 = 0;
  _OWORD *v11 = 0u;
  v11[1] = 0u;
  int v101 = (_OWORD *)(a5 + 2368);
  *(void *)&long long v102 = -1;
  *((void *)&v102 + 1) = -1;
  uint64_t v50 = *(void *)(a5 + 920);
  do
  {
    int32x2_t v103 = vdup_n_s32(v100);
    int64x2_t v104 = vaddq_s64(vdupq_n_s64(v100), (int64x2_t)xmmword_2484DCA00);
    *(int32x2_t *)&long long v105 = vmovn_s64(v104);
    *((int32x2_t *)&v105 + 1) = vadd_s32(v103, (int32x2_t)0xFFFFFFF3FFFFFFF2);
    int32x2_t v106 = vadd_s32(v103, (int32x2_t)0xFFFFFFF7FFFFFFF6);
    *(int32x2_t *)&long long v107 = vadd_s32(v103, (int32x2_t)0xFFFFFFF5FFFFFFF4);
    *((int32x2_t *)&v107 + 1) = v106;
    _OWORD *v101 = v105;
    v101[1] = v107;
    v101 += 2;
    *(_OWORD *)(v50 + 2 * v104.i64[0]) = v102;
    v100 += 8;
  }
  while (v100 != 16);
  unsigned int v213 = a2;
  LODWORD(v49) = 0;
  int v47 = 0;
  unsigned int v46 = 0;
  *(_OWORD *)(a5 + 768) = xmmword_2484DCA10;
  int v48 = 0x8000;
  *(_DWORD *)(a5 + 784) = 0x8000;
  *(_DWORD *)(a5 + 760) = 5;
  int v210 = 8;
LABEL_88:
  uint64_t v108 = a5 + 2368;
  unint64_t v109 = v8;
  if (!sub_2483E4100(v8))
  {
    unsigned int v46 = *(_DWORD *)(a5 + 776);
    int v48 = *(_DWORD *)(a5 + 784);
    unsigned int v110 = v213;
    goto LABEL_133;
  }
  unsigned int v110 = v213;
  if (v46 >= v213 || v48 == 0)
  {
LABEL_94:
    *(_DWORD *)(a5 + 784) = v48;
  }
  else
  {
    unint64_t v112 = *(void *)(a5 + 32);
    int v113 = v210;
    while (1)
    {
      unint64_t v114 = v112 - 4;
      if (v112 < 4) {
        break;
      }
      unsigned int v115 = *(_DWORD *)(a5 + 16);
      unint64_t v116 = *(void *)(a5 + 8);
      if (v115 >= 0x20)
      {
        uint64_t v117 = *(unsigned int **)(a5 + 24);
        *((void *)&v118 + 1) = *v117;
        *(void *)&long long v118 = *(void *)(a5 + 8);
        unint64_t v116 = v118 >> 32;
        *(void *)(a5 + 8) = v116;
        v115 ^= 0x20u;
        *(void *)(a5 + 24) = v117 + 1;
        *(void *)(a5 + 32) = v114;
        unint64_t v112 = v114;
      }
      v119 = (unsigned __int8 *)(a5 + 788 + 4 * ((v116 >> v115) & 0x1F));
      unsigned int v120 = v115 + *v119;
      *(_DWORD *)(a5 + 16) = v120;
      uint64_t v121 = *((unsigned __int16 *)v119 + 1);
      if (v121 > 0xF)
      {
        BOOL v122 = v121 == 16;
        if (v121 == 16) {
          int v123 = 2;
        }
        else {
          int v123 = 3;
        }
        int v124 = (v116 >> v120) & ~(-1 << v123);
        *(_DWORD *)(a5 + 16) = v123 + v120;
        if (v122) {
          unsigned int v125 = v113;
        }
        else {
          unsigned int v125 = 0;
        }
        int v126 = (v47 - 2) << v123;
        if (v47) {
          int v127 = v47;
        }
        else {
          int v127 = 0;
        }
        if (!v47) {
          int v126 = 0;
        }
        BOOL v128 = v49 == v125;
        if (v49 == v125) {
          uint64_t v49 = v49;
        }
        else {
          uint64_t v49 = v125;
        }
        if (v128) {
          int v129 = v127;
        }
        else {
          int v129 = 0;
        }
        if (v128) {
          int v130 = v126;
        }
        else {
          int v130 = 0;
        }
        int v47 = v124 + v130 + 3;
        int v131 = v47 - v129;
        unsigned int v132 = v47 - v129 + v46;
        if (v132 > v213)
        {
          int v48 = 0xFFFFF;
          goto LABEL_94;
        }
        if (v49)
        {
          unsigned int v133 = *(_DWORD *)(v108 + 4 * v49);
          int v134 = v130 + v124 - v129 + 3;
          do
          {
            unsigned int v135 = v133;
            unsigned int v133 = v46;
            *(_WORD *)(v50 + 2 * (int)v135) = v46++;
            --v134;
          }
          while (v134);
          *(_DWORD *)(v108 + 4 * v49) = v133;
          v48 -= v131 << (15 - v49);
          *((_WORD *)v11 + v49) += v131;
        }
        unsigned int v46 = v132;
      }
      else
      {
        if (*((_WORD *)v119 + 1))
        {
          *(_WORD *)(v50 + 2 * *(int *)(v108 + 4 * v121)) = v46;
          *(_DWORD *)(v108 + 4 * v121) = v46;
          v48 -= 0x8000u >> v121;
          ++*((_WORD *)v11 + v121);
          int v113 = v121;
        }
        int v47 = 0;
        ++v46;
      }
      if (v46 >= v213 || !v48) {
        goto LABEL_94;
      }
    }
    *(_DWORD *)(a5 + 776) = v46;
    *(_DWORD *)(a5 + 780) = v47;
    *(_DWORD *)(a5 + 772) = v113;
    *(_DWORD *)(a5 + 768) = v49;
    *(_DWORD *)(a5 + 784) = v48;
LABEL_133:
    if (v46 < v110)
    {
      int v136 = 0;
      uint64_t v137 = a5 + 788;
      do
      {
        if (!v48) {
          goto LABEL_168;
        }
        if (v136)
        {
          uint64_t v138 = *(void *)(a5 + 32);
          if (!v138) {
            return 2;
          }
          unint64_t v139 = *(void *)(a5 + 8);
          *(void *)(a5 + 8) = v139 >> 8;
          unint64_t v140 = *(unsigned __int8 **)(a5 + 24);
          *((void *)&v141 + 1) = *v140;
          *(void *)&long long v141 = v139;
          *(void *)(a5 + 8) = v141 >> 8;
          int v142 = *(_DWORD *)(a5 + 16) - 8;
          *(_DWORD *)(a5 + 16) = v142;
          *(void *)(a5 + 24) = v140 + 1;
          *(void *)(a5 + 32) = v138 - 1;
        }
        else
        {
          int v142 = *(_DWORD *)(a5 + 16);
        }
        if (v142 == 64) {
          LODWORD(v143) = 0;
        }
        else {
          unint64_t v143 = *v109 >> v142;
        }
        unsigned int v144 = *(unsigned __int8 *)(v137 + 4 * (v143 & 0x1F));
        if (64 - v142 < v144) {
          goto LABEL_144;
        }
        uint64_t v145 = *(unsigned __int16 *)(v137 + 4 * (v143 & 0x1F) + 2);
        if (v145 <= 0xF)
        {
          *(_DWORD *)(a5 + 16) = v142 + v144;
          uint64_t v146 = *(void *)(a5 + 920);
          *(_DWORD *)(a5 + 780) = 0;
          if (v145)
          {
            *(_WORD *)(v146 + 2 * *(int *)(v108 + 4 * v145)) = v46;
            *(_DWORD *)(v108 + 4 * v145) = v46;
            *(_DWORD *)(a5 + 772) = v145;
            v48 -= 0x8000u >> v145;
            *(_DWORD *)(a5 + 784) = v48;
            ++*((_WORD *)v11 + v145);
          }
          int v136 = 0;
          *(_DWORD *)(a5 + 776) = ++v46;
          continue;
        }
        char v147 = v145 - 14;
        unsigned int v148 = v145 - 14 + v144;
        if (64 - v142 < v148)
        {
LABEL_144:
          int v136 = 1;
        }
        else
        {
          *(_DWORD *)(a5 + 16) = v148 + v142;
          if (v145 == 16)
          {
            unsigned int v149 = *(_DWORD *)(a5 + 772);
            char v150 = 2;
          }
          else
          {
            unsigned int v149 = 0;
            char v150 = 3;
          }
          if (*(_DWORD *)(a5 + 768) == v149)
          {
            int v151 = *v212;
            if (*v212) {
              int v152 = (v151 - 2) << v150;
            }
            else {
              int v152 = 0;
            }
          }
          else
          {
            int v152 = 0;
            int v151 = 0;
            *(_DWORD *)(a5 + 768) = v149;
          }
          unsigned int v153 = (v143 >> v144) & ~(-1 << v147);
          uint64_t v154 = *(void *)(a5 + 920);
          int v155 = v153 + v152 + 3;
          *unint64_t v212 = v155;
          int v156 = v155 - v151;
          unsigned int v157 = v155 - v151 + v46;
          if (v157 > v110)
          {
            *(_DWORD *)(a5 + 776) = v110;
            *(_DWORD *)(a5 + 784) = 0xFFFFF;
            return 4294967289;
          }
          if (v149)
          {
            unsigned int v158 = *(_DWORD *)(v108 + 4 * v149);
            int v159 = v152 + v153 - v151 + 3;
            do
            {
              unsigned int v160 = v158;
              unsigned int v158 = v46;
              *(_WORD *)(v154 + 2 * (int)v160) = v46++;
              --v159;
            }
            while (v159);
            int v136 = 0;
            *(_DWORD *)(a5 + 776) = v157;
            *(_DWORD *)(v108 + 4 * v149) = v158;
            v48 -= v156 << (15 - v149);
            *(_DWORD *)(a5 + 784) = v48;
            *((_WORD *)v11 + v149) += v156;
          }
          else
          {
            int v136 = 0;
            *(_DWORD *)(a5 + 776) = v157;
          }
          unsigned int v46 = v157;
        }
      }
      while (v46 < v110);
    }
  }
  if (v48) {
    return 4294967289;
  }
LABEL_168:
  uint64_t v161 = 0;
  uint64_t v162 = *(void *)(a5 + 920);
  do
    int v163 = *(__int16 *)(v162 - 2 + 2 * v161--);
  while (v163 == -1);
  unint64_t v164 = 0;
  int v165 = v161 + 16;
  uint64_t v166 = 1;
  if ((int)v161 >= -8) {
    int v167 = 256;
  }
  else {
    int v167 = 1 << (v161 + 16);
  }
  if (v165 >= 8) {
    int v168 = 8;
  }
  else {
    int v168 = v161 + 16;
  }
  if (v168 <= 1) {
    int v168 = 1;
  }
  uint64_t v169 = (v168 + 1);
  int v170 = 2;
  unint64_t v171 = 0x8000000000000000;
  do
  {
    int v172 = *((unsigned __int16 *)v11 + v166);
    if (*((_WORD *)v11 + v166))
    {
      int v173 = v166 - 16;
      do
      {
        int v173 = *(unsigned __int16 *)(v162 + 2 * v173);
        uint64_t v174 = &__src[4 * __rbit64(v164)];
        int v175 = v167;
        do
        {
          *(_DWORD *)&v174[4 * (v175 - v170)] = v166 | (v173 << 16);
          v175 -= v170;
        }
        while (v175 > 0);
        v164 += v171;
        --v172;
      }
      while (v172);
    }
    v170 *= 2;
    v171 >>= 1;
    ++v166;
  }
  while (v166 != v169);
  while (v167 != 256)
  {
    memcpy(&__src[4 * v167], __src, 4 * v167);
    v167 *= 2;
  }
  if ((int)v161 < -7)
  {
    int v181 = 256;
  }
  else
  {
    uint64_t v176 = 0;
    unint64_t v177 = 0;
    if (v165 <= 9) {
      uint64_t v178 = 9;
    }
    else {
      uint64_t v178 = v165;
    }
    unint64_t v179 = 0x8000000000000000;
    int v180 = 2;
    int v181 = 256;
    unint64_t v182 = 8;
    uint64_t v183 = __src;
    int v184 = 256;
    do
    {
      unint64_t v185 = v182 + 1;
      if (*((_WORD *)v11 + v182 + 1))
      {
        int v186 = v182 - 15;
        do
        {
          if (!v177)
          {
            unsigned __int8 v187 = v182 + 1;
            if (v182 <= 0xD)
            {
              uint64_t v188 = v176;
              int v189 = 1 << (v182 - 7);
              while (1)
              {
                int v190 = v189 - *(unsigned __int16 *)(a5 + 2532 + 2 * v188);
                if (v190 < 1) {
                  break;
                }
                int v189 = 2 * v190;
                if (++v188 == 6)
                {
                  unsigned __int8 v187 = 15;
                  goto LABEL_202;
                }
              }
              unsigned __int8 v187 = v188 + 9;
            }
LABEL_202:
            v183 += 4 * v184;
            int v184 = 1 << (v187 - 8);
            v181 += v184;
            unint64_t v191 = __rbit64(v164);
            v164 += 0x100000000000000;
            *(_DWORD *)&__src[4 * v191] = v187 | ((((v183 - __src) >> 2) - v191) << 16);
          }
          int v186 = *(unsigned __int16 *)(v162 + 2 * v186);
          uint64_t v192 = &v183[4 * __rbit64(v177)];
          int v193 = v184;
          do
          {
            *(_DWORD *)&v192[4 * (v193 - v180)] = (v182 - 7) | (v186 << 16);
            v193 -= v180;
          }
          while (v193 > 0);
          v177 += v179;
          __int16 v194 = *((_WORD *)v11 + v185) - 1;
          *((_WORD *)v11 + v185) = v194;
        }
        while (v194);
      }
      v180 *= 2;
      v179 >>= 1;
      ++v176;
      ++v182;
    }
    while (v185 != v178);
  }
  if (v211) {
    *unsigned int v211 = v181;
  }
LABEL_238:
  *(_DWORD *)(a5 + 760) = 0;
  return 1;
}

uint64_t sub_2483E59B4(unsigned char *a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3 != 64)
  {
    unsigned int v5 = 64 - v3;
    uint64_t v6 = *(void *)a2 >> v3;
    unint64_t v7 = &a1[4 * v6];
    unsigned int v8 = *v7;
    if (v8 > 8)
    {
      if (v5 < 9) {
        return 0;
      }
      uint64_t v10 = *(unsigned __int16 *)&a1[4 * v6 + 2] + ((v6 & ~(-1 << v8)) >> 8);
      unsigned int v11 = v7[4 * v10];
      if (56 - v3 < v11) {
        return 0;
      }
      *(_DWORD *)(a2 + 8) = v3 + v11 + 8;
      int v9 = &v7[4 * v10];
    }
    else
    {
      if (v5 < v8) {
        return 0;
      }
      *(_DWORD *)(a2 + 8) = v3 + v8;
      int v9 = &a1[4 * v6];
    }
    unsigned int v4 = (unsigned __int16 *)(v9 + 2);
    goto LABEL_12;
  }
  if (*a1) {
    return 0;
  }
  unsigned int v4 = (unsigned __int16 *)(a1 + 2);
LABEL_12:
  *a3 = *v4;
  return 1;
}

uint64_t sub_2483E5A70(size_t *a1, void **a2, uint64_t a3)
{
  if (!sub_2483E6048(a3)) {
    return 4294967270;
  }
  for (int i = *(_DWORD *)(a3 + 660); ; int i = 0)
  {
    do
    {
      if (i == 1) {
        goto LABEL_24;
      }
    }
    while (i);
    unint64_t v7 = *(void *)(a3 + 32);
    int v8 = *(_DWORD *)(a3 + 16);
    if (v7 <= 0x40000000) {
      LODWORD(v7) = v7 + ((64 - v8) >> 3);
    }
    else {
      LODWORD(v7) = 0x40000000;
    }
    if (*(_DWORD *)(a3 + 264) < (int)v7) {
      LODWORD(v7) = *(_DWORD *)(a3 + 264);
    }
    uint64_t v9 = *(int *)(a3 + 76);
    int v10 = *(_DWORD *)(a3 + 88);
    if ((int)v9 + (int)v7 > v10) {
      LODWORD(v7) = v10 - v9;
    }
    unsigned int v11 = (unsigned char *)(*(void *)(a3 + 120) + v9);
    int v12 = v7;
    if ((v8 - 65) <= 0xFFFFFFF7 && v7)
    {
      unint64_t v7 = (int)v7;
      do
      {
        *v11++ = *(void *)(a3 + 8) >> v8;
        int v13 = *(_DWORD *)(a3 + 16);
        LOBYTE(v8) = v13 + 8;
        *(_DWORD *)(a3 + 16) = v13 + 8;
        size_t v14 = v7 - 1;
      }
      while ((v13 - 57) <= 0xFFFFFFF7 && v7-- != 1);
    }
    else
    {
      size_t v14 = (int)v7;
    }
    memcpy(v11, *(const void **)(a3 + 24), v14);
    size_t v16 = *(void *)(a3 + 32) - v14;
    *(void *)(a3 + 24) += v14;
    *(void *)(a3 + 32) = v16;
    int v17 = *(_DWORD *)(a3 + 76) + v12;
    *(_DWORD *)(a3 + 76) = v17;
    int v18 = *(_DWORD *)(a3 + 264);
    *(_DWORD *)(a3 + 264) = v18 - v12;
    if (v17 < 1 << *(_DWORD *)(a3 + 676)) {
      break;
    }
    *(_DWORD *)(a3 + 660) = 1;
LABEL_24:
    uint64_t result = sub_2483E424C(a3, a1, a2, 0);
    if (result != 1) {
      return result;
    }
    if (*(_DWORD *)(a3 + 88) == 1 << *(_DWORD *)(a3 + 676)) {
      *(_DWORD *)(a3 + 84) = *(_DWORD *)(a3 + 80);
    }
    *(_DWORD *)(a3 + 660) = 0;
  }
  if (v18 == v12) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_2483E5C0C(unsigned int a1, unsigned int *a2, unsigned __int8 **a3, uint64_t a4)
{
  int v8 = (unint64_t *)(a4 + 8);
  switch(*(_DWORD *)(a4 + 756))
  {
    case 0:
      uint64_t result = sub_2483E48C0(a4, (unint64_t *)(a4 + 8), a2);
      if (result == 1)
      {
        ++*a2;
        *(_DWORD *)(a4 + 2560) = 0;
        int v10 = (unsigned __int8 *)(*(uint64_t (**)(void, void))(a4 + 40))(*(void *)(a4 + 56), a1);
        *a3 = v10;
        if (v10)
        {
          if (*a2 > 1)
          {
            *(_DWORD *)(a4 + 756) = 1;
            goto LABEL_11;
          }
          bzero(v10, a1);
          return 1;
        }
        else
        {
          return 4294967271;
        }
      }
      return result;
    case 1:
LABEL_11:
      int v13 = *(_DWORD *)(a4 + 16);
      if ((v13 - 60) >= 5)
      {
        unint64_t v17 = *v8;
      }
      else
      {
        uint64_t v14 = *(void *)(a4 + 32);
        if (!v14) {
          return 2;
        }
        unint64_t v15 = *(void *)(a4 + 8);
        *(void *)(a4 + 8) = v15 >> 8;
        size_t v16 = *(unsigned __int8 **)(a4 + 24);
        *((void *)&v18 + 1) = *v16;
        *(void *)&long long v18 = v15;
        unint64_t v17 = v18 >> 8;
        *(void *)(a4 + 8) = v17;
        v13 -= 8;
        *(void *)(a4 + 24) = v16 + 1;
        *(void *)(a4 + 32) = v14 - 1;
      }
      unint64_t v19 = v17 >> v13;
      BOOL v25 = (v19 & 1) == 0;
      unsigned int v11 = ((int)(v19 << 31) >> 31) & (((v19 >> 1) & 0xF) + 1);
      if (v25) {
        int v20 = v13 + 1;
      }
      else {
        int v20 = v13 + 5;
      }
      *(_DWORD *)(a4 + 2564) = v11;
      *(_DWORD *)(a4 + 16) = v20;
      *(_DWORD *)(a4 + 756) = 2;
      goto LABEL_19;
    case 2:
      unsigned int v11 = *(_DWORD *)(a4 + 2564);
LABEL_19:
      uint64_t result = sub_2483E4A70(v11 + *a2, v11 + *a2, (char *)(a4 + 2572), 0, a4);
      if (result != 1) {
        return result;
      }
      unsigned int v12 = 0xFFFF;
      *(_DWORD *)(a4 + 2568) = 0xFFFF;
      *(_DWORD *)(a4 + 756) = 3;
LABEL_21:
      unsigned int v21 = *(_DWORD *)(a4 + 2560);
      unsigned int v22 = *(_DWORD *)(a4 + 2564);
      unint64_t v23 = *a3;
      unsigned int v52 = v12;
      BOOL v24 = v12 != 0xFFFF;
      BOOL v25 = v21 >= a1 && v12 == 0xFFFF;
      if (v25) {
        goto LABEL_52;
      }
      uint64_t v26 = a4 + 2572;
      break;
    case 3:
      unsigned int v12 = *(_DWORD *)(a4 + 2568);
      goto LABEL_21;
    case 4:
      goto LABEL_52;
    default:
      return 4294967265;
  }
  while (1)
  {
    int v27 = *(_DWORD *)(a4 + 16);
    if (v24) {
      break;
    }
    if ((v27 - 50) >= 0xF)
    {
      unint64_t v31 = *v8;
LABEL_33:
      unint64_t v34 = v31 >> v27;
      int v35 = (unsigned __int8 *)(v26 + 4 * (v31 >> v27));
      unsigned int v36 = *v35;
      if (v36 >= 9)
      {
        v27 += 8;
        v35 += 4 * (BYTE1(v34) & ~(-1 << (v36 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)(v26 + 4 * v34 + 2);
        unsigned int v36 = *v35;
      }
      *(_DWORD *)(a4 + 16) = v27 + v36;
      unsigned int v12 = *((unsigned __int16 *)v35 + 1);
      unsigned int v52 = v12;
      if (!v12) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v28 = *(void *)(a4 + 32) - 1;
      while (v28 != -1)
      {
        unint64_t v29 = *(void *)(a4 + 8);
        *(void *)(a4 + 8) = v29 >> 8;
        unint64_t v30 = *(unsigned __int8 **)(a4 + 24);
        *((void *)&v32 + 1) = *v30;
        *(void *)&long long v32 = v29;
        unint64_t v31 = v32 >> 8;
        *(void *)(a4 + 8) = v31;
        int v33 = v27 - 8;
        *(_DWORD *)(a4 + 16) = v27 - 8;
        *(void *)(a4 + 24) = v30 + 1;
        *(void *)(a4 + 32) = v28--;
        LODWORD(v30) = v27 - 58;
        v27 -= 8;
        if (v30 >= 0xF)
        {
          int v27 = v33;
          goto LABEL_33;
        }
      }
      if (!sub_2483E59B4((unsigned char *)(a4 + 2572), (uint64_t)v8, &v52))
      {
        unsigned int v12 = 0xFFFF;
        goto LABEL_63;
      }
      unsigned int v12 = v52;
      if (!v52)
      {
LABEL_49:
        unsigned __int8 v37 = 0;
        goto LABEL_50;
      }
    }
    unsigned __int8 v37 = v12 - v22;
    if (v12 <= v22)
    {
      int v27 = *(_DWORD *)(a4 + 16);
      break;
    }
LABEL_50:
    v23[v21++] = v37;
LABEL_51:
    BOOL v24 = 0;
    if (v21 >= a1)
    {
LABEL_52:
      int v45 = *(_DWORD *)(a4 + 16);
      if (v45 == 64)
      {
        uint64_t v46 = *(void *)(a4 + 32);
        if (v46)
        {
          unint64_t v47 = *(void *)(a4 + 8);
          *(void *)(a4 + 8) = v47 >> 8;
          int v48 = *(unsigned __int8 **)(a4 + 24);
          *((void *)&v50 + 1) = *v48;
          *(void *)&long long v50 = v47;
          unint64_t v49 = v50 >> 8;
          *(void *)(a4 + 8) = v49;
          *(void *)(a4 + 24) = v48 + 1;
          *(void *)(a4 + 32) = v46 - 1;
          int v45 = 56;
          goto LABEL_56;
        }
        uint64_t result = 2;
        int v51 = 4;
      }
      else
      {
        unint64_t v49 = *v8;
LABEL_56:
        *(_DWORD *)(a4 + 16) = v45 + 1;
        if ((v49 >> v45)) {
          sub_2483E8A08(*a3, a1, (_DWORD *)a4);
        }
        int v51 = 0;
        uint64_t result = 1;
      }
      *(_DWORD *)(a4 + 756) = v51;
      return result;
    }
  }
  unsigned int v38 = 64 - v27;
  if (64 - v27 >= v12)
  {
    unint64_t v42 = *v8;
LABEL_44:
    *(_DWORD *)(a4 + 16) = v27 + v12;
    int v44 = ((v42 >> v27) & ~(-1 << v12)) + (1 << v12);
    if (v44 + v21 > a1) {
      return 4294967288;
    }
    do
    {
      v23[v21++] = 0;
      --v44;
    }
    while (v44);
    goto LABEL_51;
  }
  uint64_t v39 = *(void *)(a4 + 32) - 1;
  while (v39 != -1)
  {
    unint64_t v40 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v40 >> 8;
    long long v41 = *(unsigned __int8 **)(a4 + 24);
    *((void *)&v43 + 1) = *v41;
    *(void *)&long long v43 = v40;
    unint64_t v42 = v43 >> 8;
    *(void *)(a4 + 8) = v42;
    v27 -= 8;
    *(_DWORD *)(a4 + 16) = v27;
    *(void *)(a4 + 24) = v41 + 1;
    *(void *)(a4 + 32) = v39--;
    v38 += 8;
    if (v38 >= v12) {
      goto LABEL_44;
    }
  }
LABEL_63:
  *(_DWORD *)(a4 + 2568) = v12;
  *(_DWORD *)(a4 + 2560) = v21;
  return 2;
}

uint64_t sub_2483E6048(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 680);
  if (*(_DWORD *)(a1 + 88) == v1) {
    return 1;
  }
  int v3 = *(const void **)(a1 + 120);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 56), v1 + 542);
  *(void *)(a1 + 120) = result;
  if (result)
  {
    *(unsigned char *)(*(int *)(a1 + 680) + result - 2) = 0;
    *(unsigned char *)(*(int *)(a1 + 680) + *(void *)(a1 + 120) - 1) = 0;
    if (v3)
    {
      memcpy(*(void **)(a1 + 120), v3, *(int *)(a1 + 76));
      (*(void (**)(void, const void *))(a1 + 48))(*(void *)(a1 + 56), v3);
    }
    uint64_t v5 = *(int *)(a1 + 680);
    *(_DWORD *)(a1 + 88) = v5;
    *(_DWORD *)(a1 + 92) = v5 - 1;
    *(void *)(a1 + 128) = *(void *)(a1 + 120) + v5;
    return 1;
  }
  *(void *)(a1 + 120) = v3;
  return result;
}

uint64_t sub_2483E60F4(uint64_t a1)
{
  int i = *(_DWORD *)(a1 + 76);
  size_t v3 = *(unsigned int *)(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 712);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 4);
  }
  else {
    int v5 = 0;
  }
  if (*(void *)(a1 + 32) < 0x1CuLL) {
    goto LABEL_5;
  }
  unint64_t v139 = (unint64_t *)(a1 + 8);
  sub_2483E4100((unint64_t *)(a1 + 8));
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_10;
    case 8:
      goto LABEL_22;
    case 9:
      goto LABEL_60;
    case 0xA:
      uint64_t v7 = i;
      break;
    default:
      return 4294967265;
  }
LABEL_118:
  int v131 = i - *(_DWORD *)(a1 + 88);
  while (1)
  {
    BOOL v116 = __OFSUB__(v3, 1);
    LODWORD(v3) = v3 - 1;
    if (((v3 & 0x80000000) != 0) != v116) {
      break;
    }
    *(unsigned char *)(*(void *)(a1 + 120) + v7) = *(unsigned char *)(*(void *)(a1 + 120)
                                                      + (((int)v7 - *(_DWORD *)(a1 + 360)) & *(_DWORD *)(a1 + 92)));
    ++v7;
    if (__CFADD__(v131++, 1))
    {
      int v133 = 16;
LABEL_140:
      *(_DWORD *)a1 = v133;
      uint64_t result = 1;
      int i = v7;
      goto LABEL_57;
    }
  }
  if (*(int *)(a1 + 264) <= 0)
  {
    int v133 = 14;
    goto LABEL_140;
  }
  for (int i = v7; ; int i = v127)
  {
    while (1)
    {
LABEL_10:
      unint64_t v8 = *(void *)(a1 + 32);
      if (v8 < 0x1C)
      {
        *(_DWORD *)a1 = 7;
LABEL_5:
        uint64_t result = 2;
        goto LABEL_57;
      }
      int v9 = *(_DWORD *)(a1 + 276);
      if (v9) {
        break;
      }
      sub_2483E84A4(a1);
    }
    uint64_t v10 = *(void *)(a1 + 136);
    unsigned int v11 = *(_DWORD *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 8);
    if (v11 >= 0x30)
    {
      int v13 = *(void **)(a1 + 24);
      *((void *)&v14 + 1) = *v13;
      *(void *)&long long v14 = *(void *)(a1 + 8);
      unint64_t v12 = v14 >> 48;
      *(void *)(a1 + 8) = v12;
      v11 ^= 0x30u;
      v8 -= 6;
      *(void *)(a1 + 24) = (char *)v13 + 6;
      *(void *)(a1 + 32) = v8;
    }
    unint64_t v15 = v12 >> v11;
    size_t v16 = (unsigned __int8 *)(v10 + 4 * (v12 >> v11));
    unsigned int v17 = *v16;
    if (v17 >= 9)
    {
      v11 += 8;
      v16 += 4 * ((v15 >> 8) & ~(-1 << (v17 - 8)))
           + 4 * *(unsigned __int16 *)(v10 + 4 * v15 + 2);
      unsigned int v17 = *v16;
    }
    unsigned int v18 = v11 + v17;
    *(_DWORD *)(a1 + 16) = v11 + v17;
    unint64_t v19 = (unsigned __int8 *)&unk_24854B398 + 8 * *((unsigned __int16 *)v16 + 1);
    int v20 = *v19;
    int v21 = v19[1];
    uint64_t v22 = v19[3];
    *(_DWORD *)(a1 + 360) = (char)v19[2];
    *(_DWORD *)(a1 + 260) = v22;
    int v23 = *((unsigned __int16 *)v19 + 2);
    int v24 = *((unsigned __int16 *)v19 + 3);
    *(unsigned char *)(a1 + 352) = *(unsigned char *)(*(void *)(a1 + 160) + v22);
    if (v20)
    {
      if (v18 >= 0x20)
      {
        uint64_t v137 = *(unsigned int **)(a1 + 24);
        *((void *)&v138 + 1) = *v137;
        *(void *)&long long v138 = v12;
        unint64_t v12 = v138 >> 32;
        *(void *)(a1 + 8) = v12;
        v18 ^= 0x20u;
        v8 -= 4;
        *(void *)(a1 + 24) = v137 + 1;
        *(void *)(a1 + 32) = v8;
      }
      int v25 = (v12 >> v18) & ~(-1 << v20);
      v18 += v20;
      *(_DWORD *)(a1 + 16) = v18;
    }
    else
    {
      int v25 = 0;
    }
    if (v18 >= 0x20)
    {
      uint64_t v26 = *(unsigned int **)(a1 + 24);
      *((void *)&v27 + 1) = *v26;
      *(void *)&long long v27 = v12;
      unint64_t v12 = v27 >> 32;
      *(void *)(a1 + 8) = v12;
      v18 ^= 0x20u;
      *(void *)(a1 + 24) = v26 + 1;
      *(void *)(a1 + 32) = v8 - 4;
    }
    *(_DWORD *)(a1 + 16) = v18 + v21;
    *(_DWORD *)(a1 + 356) = ((v12 >> v18) & ~(-1 << v21)) + v24;
    *(_DWORD *)(a1 + 276) = v9 - 1;
    size_t v3 = (v25 + v23);
    if (!(v25 + v23)) {
      goto LABEL_60;
    }
    *(_DWORD *)(a1 + 264) -= v3;
LABEL_22:
    size_t v28 = v3;
    int v29 = i;
    if (!*(_DWORD *)(a1 + 256))
    {
LABEL_43:
      uint64_t v59 = *(void *)(a1 + 120);
      uint64_t v38 = v29;
      uint64_t v60 = *(int *)(a1 + 92);
      uint64_t v61 = *(unsigned __int8 *)(v59 + (v60 & (v29 - 1)));
      uint64_t v62 = *(unsigned __int8 *)(v59 + (v60 & (v29 - 2)));
      int v63 = v29 + 1;
      size_t v3 = v28;
      while (1)
      {
        uint64_t v64 = v61;
        if (*(void *)(a1 + 32) <= 0x1BuLL) {
          break;
        }
        if (!*(_DWORD *)(a1 + 272))
        {
          sub_2483E8654(a1);
          int v53 = *(_DWORD *)(a1 + 256);
          if (v53) {
            goto LABEL_54;
          }
        }
        uint64_t v65 = *(void *)(*(void *)(a1 + 168)
                        + 8
                        * *(unsigned __int8 *)(*(void *)(a1 + 152)
                                             + (*(unsigned char *)(*(void *)(a1 + 144) + v62 + 256) | *(unsigned char *)(*(void *)(a1 + 144) + v64))));
        unsigned int v66 = *(_DWORD *)(a1 + 16);
        unint64_t v67 = *(void *)(a1 + 8);
        if (v66 >= 0x30)
        {
          unsigned int v68 = *(void **)(a1 + 24);
          uint64_t v69 = *(void *)(a1 + 32);
          *((void *)&v70 + 1) = *v68;
          *(void *)&long long v70 = *(void *)(a1 + 8);
          unint64_t v67 = v70 >> 48;
          *(void *)(a1 + 8) = v67;
          v66 ^= 0x30u;
          *(void *)(a1 + 24) = (char *)v68 + 6;
          *(void *)(a1 + 32) = v69 - 6;
        }
        unint64_t v71 = v67 >> v66;
        int v72 = (unsigned __int8 *)(v65 + 4 * (v67 >> v66));
        unsigned int v73 = *v72;
        if (v73 >= 9)
        {
          v66 += 8;
          v72 += 4 * ((v71 >> 8) & ~(-1 << (v73 - 8)))
               + 4 * *(unsigned __int16 *)(v65 + 4 * v71 + 2);
          unsigned int v73 = *v72;
        }
        *(_DWORD *)(a1 + 16) = v66 + v73;
        uint64_t v61 = v72[2];
        *(unsigned char *)(*(void *)(a1 + 120) + v38) = v61;
        --*(_DWORD *)(a1 + 272);
        int i = *(_DWORD *)(a1 + 88);
        if (v63 == i) {
          goto LABEL_147;
        }
        ++v63;
        ++v38;
        uint64_t v62 = v64;
        size_t v3 = (v3 - 1);
        if (!v3) {
          goto LABEL_59;
        }
      }
LABEL_56:
      *(_DWORD *)a1 = 8;
      uint64_t result = 2;
      int i = v38;
      goto LABEL_57;
    }
LABEL_23:
    unsigned int v30 = *(_DWORD *)(a1 + 16);
    unint64_t v31 = *(void *)(a1 + 8);
    if (v30 >= 0x38)
    {
      long long v32 = *(void **)(a1 + 24);
      uint64_t v33 = *(void *)(a1 + 32);
      *((void *)&v34 + 1) = *v32;
      *(void *)&long long v34 = *(void *)(a1 + 8);
      unint64_t v31 = v34 >> 56;
      *(void *)(a1 + 8) = v31;
      v30 ^= 0x38u;
      *(_DWORD *)(a1 + 16) = v30;
      *(void *)(a1 + 24) = (char *)v32 + 7;
      *(void *)(a1 + 32) = v33 - 7;
    }
    int v35 = (unsigned __int8 *)(*(void *)(a1 + 344) + 4 * (v31 >> v30));
    unsigned int v36 = *v35;
    uint64_t v37 = *((unsigned __int16 *)v35 + 1);
    uint64_t v38 = v29;
    int v39 = v29 + 1;
    size_t v3 = v28;
    do
    {
      if (*(void *)(a1 + 32) <= 0x1BuLL) {
        goto LABEL_56;
      }
      if (*(_DWORD *)(a1 + 272))
      {
        uint64_t v40 = *(void *)(a1 + 344);
        unsigned int v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        sub_2483E8654(a1);
        unsigned int v41 = *(_DWORD *)(a1 + 16);
        unint64_t v49 = *(void *)(a1 + 8);
        if (v41 >= 0x38)
        {
          long long v50 = *(void **)(a1 + 24);
          uint64_t v51 = *(void *)(a1 + 32);
          *((void *)&v52 + 1) = *v50;
          *(void *)&long long v52 = *(void *)(a1 + 8);
          unint64_t v49 = v52 >> 56;
          *(void *)(a1 + 8) = v49;
          v41 ^= 0x38u;
          *(_DWORD *)(a1 + 16) = v41;
          *(void *)(a1 + 24) = (char *)v50 + 7;
          *(void *)(a1 + 32) = v51 - 7;
        }
        int v53 = *(_DWORD *)(a1 + 256);
        if (!v53)
        {
LABEL_54:
          size_t v28 = v3;
          int v29 = v38;
          if (!v53) {
            goto LABEL_43;
          }
          goto LABEL_23;
        }
        uint64_t v40 = *(void *)(a1 + 344);
        BOOL v54 = (unsigned __int8 *)(v40 + 4 * (v49 >> v41));
        unsigned int v36 = *v54;
        uint64_t v37 = *((unsigned __int16 *)v54 + 1);
      }
      if (v36 >= 9)
      {
        unint64_t v44 = *v139;
        if (v41 >= 0x30)
        {
          unsigned int v55 = *(void **)(a1 + 24);
          uint64_t v56 = *(void *)(a1 + 32);
          *((void *)&v57 + 1) = *v55;
          *(void *)&long long v57 = *v139;
          unint64_t v44 = v57 >> 48;
          *(void *)(a1 + 8) = v44;
          v41 ^= 0x30u;
          *(void *)(a1 + 24) = (char *)v55 + 6;
          *(void *)(a1 + 32) = v56 - 6;
        }
        int v58 = (unsigned __int8 *)(v40
                                + 4 * (v44 >> v41)
                                + 4 * v37
                                + 4 * (((v44 >> v41) >> 8) & ~(-1 << (v36 - 8))));
        unsigned int v42 = v41 + *v58 + 8;
        *(_DWORD *)(a1 + 16) = v42;
        unsigned __int8 v43 = v58[2];
      }
      else
      {
        unsigned int v42 = v41 + v36;
        *(_DWORD *)(a1 + 16) = v42;
        unsigned __int8 v43 = v37;
        unint64_t v44 = *(void *)(a1 + 8);
      }
      if (v42 >= 0x38)
      {
        int v45 = *(void **)(a1 + 24);
        uint64_t v46 = *(void *)(a1 + 32);
        *((void *)&v47 + 1) = *v45;
        *(void *)&long long v47 = v44;
        unint64_t v44 = v47 >> 56;
        *(void *)(a1 + 8) = v44;
        v42 ^= 0x38u;
        *(_DWORD *)(a1 + 16) = v42;
        *(void *)(a1 + 24) = (char *)v45 + 7;
        *(void *)(a1 + 32) = v46 - 7;
      }
      int v48 = (unsigned __int8 *)(v40 + 4 * (v44 >> v42));
      unsigned int v36 = *v48;
      uint64_t v37 = *((unsigned __int16 *)v48 + 1);
      *(unsigned char *)(*(void *)(a1 + 120) + v38) = v43;
      --*(_DWORD *)(a1 + 272);
      int i = *(_DWORD *)(a1 + 88);
      if (v39 == i)
      {
LABEL_147:
        *(_DWORD *)a1 = 13;
        LODWORD(v3) = v3 - 1;
        goto LABEL_148;
      }
      ++v39;
      ++v38;
      size_t v3 = (v3 - 1);
    }
    while (v3);
LABEL_59:
    int i = v28 + v29;
    if (*(int *)(a1 + 264) <= 0)
    {
      LODWORD(v3) = 0;
      int v136 = 14;
      goto LABEL_145;
    }
LABEL_60:
    int v74 = *(_DWORD *)(a1 + 360);
    if ((v74 & 0x80000000) == 0)
    {
      unsigned int v75 = v74 == 0;
      *(_DWORD *)(a1 + 260) = v75;
      int v76 = *(_DWORD *)(a1 + 96) - 1;
      *(_DWORD *)(a1 + 96) = v76;
      signed int v77 = *(_DWORD *)(a1 + 4 * (v76 & 3) + 100);
      goto LABEL_82;
    }
    if (!*(_DWORD *)(a1 + 280)) {
      sub_2483E8844(a1);
    }
    uint64_t v78 = *(void *)(*(void *)(a1 + 216) + 8 * *(unsigned __int8 *)(a1 + 352));
    unsigned int v79 = *(_DWORD *)(a1 + 16);
    unint64_t v80 = *(void *)(a1 + 8);
    if (v79 >= 0x30)
    {
      uint64_t v81 = *(void **)(a1 + 24);
      uint64_t v82 = *(void *)(a1 + 32);
      *((void *)&v83 + 1) = *v81;
      *(void *)&long long v83 = *(void *)(a1 + 8);
      unint64_t v80 = v83 >> 48;
      *(void *)(a1 + 8) = v80;
      v79 ^= 0x30u;
      *(void *)(a1 + 24) = (char *)v81 + 6;
      *(void *)(a1 + 32) = v82 - 6;
    }
    unint64_t v84 = v80 >> v79;
    uint64_t v85 = (unsigned __int8 *)(v78 + 4 * (v80 >> v79));
    unsigned int v86 = *v85;
    if (v86 >= 9)
    {
      v79 += 8;
      v85 += 4 * ((v84 >> 8) & ~(-1 << (v86 - 8)))
           + 4 * *(unsigned __int16 *)(v78 + 4 * v84 + 2);
      unsigned int v86 = *v85;
    }
    unsigned int v87 = v79 + v86;
    *(_DWORD *)(a1 + 16) = v79 + v86;
    uint64_t v88 = *((unsigned __int16 *)v85 + 1);
    --*(_DWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 260) = 0;
    if (v88 > 0xF)
    {
      int v91 = *(unsigned __int8 *)(a1 + 752 + v88);
      if (v87 >= 0x20)
      {
        int v92 = *(unsigned int **)(a1 + 24);
        uint64_t v93 = *(void *)(a1 + 32);
        *((void *)&v94 + 1) = *v92;
        *(void *)&long long v94 = v80;
        unint64_t v80 = v94 >> 32;
        *(void *)(a1 + 8) = v80;
        v87 ^= 0x20u;
        *(void *)(a1 + 24) = v92 + 1;
        *(void *)(a1 + 32) = v93 - 4;
      }
      unsigned int v75 = 0;
      *(_DWORD *)(a1 + 16) = v87 + v91;
      signed int v77 = (((v80 >> v87) & ~(-1 << v91)) << *(_DWORD *)(a1 + 320)) + *(_DWORD *)(a1 + 4 * v88 + 1296);
    }
    else
    {
      *(_DWORD *)(a1 + 360) = v88;
      if (v88 <= 3)
      {
        char v89 = ~(_BYTE)v88;
        unsigned int v75 = 1u >> v88;
        *(_DWORD *)(a1 + 260) = 1u >> v88;
        int v90 = *(_DWORD *)(a1 + 96);
        signed int v77 = *(_DWORD *)(a1 + 4 * (((_BYTE)v90 + v89) & 3) + 100);
        *(_DWORD *)(a1 + 360) = v77;
        *(_DWORD *)(a1 + 96) = v90 - v75;
        goto LABEL_83;
      }
      unsigned int v75 = 0;
      if (v88 >= 0xA) {
        char v95 = -10;
      }
      else {
        char v95 = -4;
      }
      if (v88 >= 0xA) {
        char v96 = 2;
      }
      else {
        char v96 = 3;
      }
      signed int v77 = ((0x605142u >> (4 * (v95 + v88))) & 7)
          + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 96) + v96) & 3) + 100)
          - 3;
      if (v77 < 1) {
        signed int v77 = 0x7FFFFFFF;
      }
    }
LABEL_82:
    *(_DWORD *)(a1 + 360) = v77;
LABEL_83:
    int v97 = *(_DWORD *)(a1 + 80);
    int v98 = *(_DWORD *)(a1 + 84);
    if (v98 != v97)
    {
      if (i >= v97) {
        int v98 = *(_DWORD *)(a1 + 80);
      }
      else {
        int v98 = i;
      }
      *(_DWORD *)(a1 + 84) = v98;
    }
    size_t v3 = *(unsigned int *)(a1 + 356);
    int v99 = v77 - v98;
    if (v77 > v98) {
      break;
    }
    int v122 = *(_DWORD *)(a1 + 96);
    int v123 = *(_DWORD *)(a1 + 92) & (i - v77);
    uint64_t v124 = *(void *)(a1 + 120);
    uint64_t v7 = i;
    unsigned int v125 = (_OWORD *)(v124 + i);
    int v126 = (_OWORD *)(v124 + v123);
    int v127 = v3 + i;
    *(_DWORD *)(a1 + 4 * (v122 & 3) + 100) = v77;
    *(_DWORD *)(a1 + 96) = v122 + 1;
    *(_DWORD *)(a1 + 264) -= v3;
    *unsigned int v125 = *v126;
    if (v123 + (int)v3 > i && v127 > v123) {
      goto LABEL_118;
    }
    int v129 = *(_DWORD *)(a1 + 88);
    if (v127 >= v129 || v123 + (int)v3 >= v129) {
      goto LABEL_118;
    }
    if ((int)v3 >= 17)
    {
      int v134 = v125 + 1;
      unsigned int v135 = v126 + 1;
      if (v3 < 0x21) {
        *int v134 = *v135;
      }
      else {
        memcpy(v134, v135, (v3 - 16));
      }
    }
LABEL_135:
    if (*(int *)(a1 + 264) <= 0)
    {
      *(_DWORD *)a1 = 14;
      uint64_t result = 1;
      int i = v127;
      goto LABEL_57;
    }
  }
  if (v77 > 2147483644) {
    return 4294967280;
  }
  if (v5 >= v99)
  {
    if (sub_2483E83A0(a1, v5 - v99, *(_DWORD *)(a1 + 356)))
    {
      i += sub_2483E78EC(a1, i);
      goto LABEL_133;
    }
    return 4294967278;
  }
  if ((v3 - 4) > 0x1B) {
    return 4294967284;
  }
  unsigned int v100 = 0;
  uint64_t v101 = *(void *)(a1 + 704);
  if (*(_DWORD *)(v101 + 248)) {
    unsigned int v100 = *(unsigned __int8 *)(v101
  }
                              + (*(unsigned char *)(*(void *)(a1 + 144)
                                                           + *(unsigned __int8 *)(*(void *)(a1 + 120)
                                                                                + (*(int *)(a1 + 92) & (unint64_t)(i - 2)))
                                                           + 256) | *(unsigned char *)(*(void *)(a1 + 144)
                                                                               + *(unsigned __int8 *)(*(void *)(a1 + 120) + (*(int *)(a1 + 92) & (unint64_t)(i - 1)))))
                              + 252);
  uint64_t v102 = v100;
  uint64_t v103 = v101 + 8 * v100;
  uint64_t v104 = *(void *)(v103 + 320);
  uint64_t v105 = *(void *)(v103 + 832);
  LODWORD(v103) = *(_DWORD *)(v104 + 4 * v3 + 32);
  char v106 = *(unsigned char *)(v104 + v3);
  int v107 = v77 - v5 + ~v98;
  int v108 = v107 >> v106;
  *(_DWORD *)(a1 + 96) += v75;
  int v109 = v103 + (v107 & ~(-1 << v106)) * v3;
  int v110 = *(_DWORD *)(v105 + 24);
  if (v107 >> v106 < v110 && *(unsigned char *)(v104 + v3) || (unint64_t v111 = *(unsigned __int8 *)(v101 + 316), v111 < 2))
  {
LABEL_103:
    uint64_t v113 = v104;
    goto LABEL_104;
  }
  int v112 = v107 - v110 * ((1 << v106) & 0xFFFFFFFE);
  while (2)
  {
    if (!v102 || (uint64_t v113 = *(void *)(v101 + 320), (v114 = *(unsigned char *)(v113 + v3)) == 0))
    {
LABEL_102:
      v101 += 8;
      --v102;
      if (!--v111) {
        goto LABEL_103;
      }
      continue;
    }
    break;
  }
  unsigned int v115 = *(_DWORD *)(*(void *)(v101 + 832) + 24) * ((1 << v114) & 0xFFFFFFFE);
  BOOL v116 = __OFSUB__(v112, v115);
  int v117 = v112 - v115;
  if (v117 < 0 == v116)
  {
    int v112 = v117;
    goto LABEL_102;
  }
  int v108 = v112 >> v114;
  int v109 = *(_DWORD *)(v113 + 4 * v3 + 32) + (v112 & ~(-1 << v114)) * v3;
  uint64_t v105 = *(void *)(v101 + 832);
LABEL_104:
  if (!*(unsigned char *)(v113 + v3)) {
    return 4294967284;
  }
  uint64_t v118 = *(void *)(v113 + 168);
  if (!v118) {
    return 4294967277;
  }
  if (v108 >= *(_DWORD *)(v105 + 24)) {
    return 4294967285;
  }
  v119 = (void *)(v118 + v109);
  unsigned int v120 = (void *)(*(void *)(a1 + 120) + i);
  if (v108 == *(__int16 *)(v105 + 48))
  {
    memcpy(v120, v119, v3);
    int v121 = v3;
    goto LABEL_132;
  }
  int v121 = sub_2483AB52C((uint64_t)v120, (char *)v119, v3, (void *)v105, v108);
  if (!v121 && *(int *)(a1 + 360) < 121) {
    return 4294967285;
  }
LABEL_132:
  i += v121;
  *(_DWORD *)(a1 + 264) -= v121;
LABEL_133:
  if (i < *(_DWORD *)(a1 + 88))
  {
    int v127 = i;
    goto LABEL_135;
  }
  int v136 = 15;
LABEL_145:
  *(_DWORD *)a1 = v136;
LABEL_148:
  uint64_t result = 1;
LABEL_57:
  *(_DWORD *)(a1 + 76) = i;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_2483E6BF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 712);
  if (v2) {
    uint64_t v3 = *(unsigned int *)(v2 + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  int i = *(_DWORD *)(a1 + 76);
  size_t v5 = *(unsigned int *)(a1 + 4);
  uint64_t v6 = (unint64_t *)(a1 + 8);
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_7;
    case 8:
      goto LABEL_37;
    case 9:
      goto LABEL_81;
    case 0xA:
      uint64_t v7 = i;
      break;
    default:
      return 4294967265;
  }
LABEL_153:
  int v147 = i - *(_DWORD *)(a1 + 88);
  while (1)
  {
    BOOL v131 = __OFSUB__(v5, 1);
    LODWORD(v5) = v5 - 1;
    if (((v5 & 0x80000000) != 0) != v131) {
      break;
    }
    *(unsigned char *)(*(void *)(a1 + 120) + v7) = *(unsigned char *)(*(void *)(a1 + 120)
                                                      + (((int)v7 - *(_DWORD *)(a1 + 360)) & *(_DWORD *)(a1 + 92)));
    ++v7;
    if (__CFADD__(v147++, 1))
    {
      int v149 = 16;
LABEL_170:
      *(_DWORD *)a1 = v149;
      uint64_t result = 1;
      int i = v7;
      goto LABEL_175;
    }
  }
  if (*(int *)(a1 + 264) <= 0)
  {
    int v149 = 14;
    goto LABEL_170;
  }
  for (int i = v7; ; int i = v142)
  {
LABEL_7:
    while (1)
    {
      *(_DWORD *)a1 = 7;
      if (*(_DWORD *)(a1 + 276)) {
        break;
      }
      if (!sub_2483E79C0(a1)) {
        goto LABEL_174;
      }
    }
    unsigned int v151 = 0;
    unint64_t v9 = *(void *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = *(unsigned char **)(a1 + 136);
    unint64_t v14 = v9;
    int v15 = v10;
    if ((v10 - 50) > 0xE)
    {
LABEL_14:
      unint64_t v21 = v14 >> v15;
      uint64_t v22 = &v13[4 * (v14 >> v15)];
      unsigned int v23 = *v22;
      if (v23 >= 9)
      {
        v15 += 8;
        v22 += 4 * (BYTE1(v21) & ~(-1 << (v23 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v13[4 * v21 + 2];
        unsigned int v23 = *v22;
      }
      *(_DWORD *)(a1 + 16) = v15 + v23;
      unsigned int v24 = *((unsigned __int16 *)v22 + 1);
    }
    else
    {
      uint64_t v16 = v11 + 1;
      uint64_t v17 = v12 - 1;
      unint64_t v14 = *(void *)(a1 + 8);
      int v18 = *(_DWORD *)(a1 + 16);
      while (v17 != -1)
      {
        *(void *)(a1 + 8) = v14 >> 8;
        *((void *)&v19 + 1) = *(unsigned __int8 *)(v16 - 1);
        *(void *)&long long v19 = v14;
        unint64_t v14 = v19 >> 8;
        *(void *)(a1 + 8) = v14;
        int v15 = v18 - 8;
        *(_DWORD *)(a1 + 16) = v18 - 8;
        *(void *)(a1 + 24) = v16;
        *(void *)(a1 + 32) = v17;
        ++v16;
        --v17;
        unsigned int v20 = v18 - 58;
        v18 -= 8;
        if (v20 >= 0xF) {
          goto LABEL_14;
        }
      }
      if (!sub_2483E59B4(v13, a1 + 8, &v151)) {
        goto LABEL_174;
      }
      unsigned int v24 = v151;
    }
    int v25 = 0;
    uint64_t v26 = (unsigned __int8 *)&unk_24854B398 + 8 * v24;
    unsigned int v27 = *v26;
    unsigned int v28 = v26[1];
    int v29 = (char)v26[2];
    uint64_t v30 = v26[3];
    LODWORD(v5) = *((unsigned __int16 *)v26 + 2);
    int v31 = *((unsigned __int16 *)v26 + 3);
    *(_DWORD *)(a1 + 360) = v29;
    *(_DWORD *)(a1 + 260) = v30;
    *(unsigned char *)(a1 + 352) = *(unsigned char *)(*(void *)(a1 + 160) + v30);
    if (v27)
    {
      int v32 = *(_DWORD *)(a1 + 16);
      unsigned int v33 = 64 - v32;
      if (64 - v32 < v27)
      {
        uint64_t v34 = *(void *)(a1 + 32) - 1;
        while (v34 != -1)
        {
          unint64_t v35 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v35 >> 8;
          unsigned int v36 = *(unsigned __int8 **)(a1 + 24);
          *((void *)&v38 + 1) = *v36;
          *(void *)&long long v38 = v35;
          unint64_t v37 = v38 >> 8;
          *(void *)(a1 + 8) = v37;
          v32 -= 8;
          *(_DWORD *)(a1 + 16) = v32;
          *(void *)(a1 + 24) = v36 + 1;
          *(void *)(a1 + 32) = v34--;
          v33 += 8;
          if (v33 >= v27) {
            goto LABEL_26;
          }
        }
LABEL_173:
        *(void *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = v12;
        goto LABEL_174;
      }
      unint64_t v37 = *v6;
LABEL_26:
      int v25 = (v37 >> v32) & ~(-1 << v27);
      *(_DWORD *)(a1 + 16) = v32 + v27;
    }
    int v39 = 0;
    if (v28)
    {
      int v40 = *(_DWORD *)(a1 + 16);
      unsigned int v41 = 64 - v40;
      if (64 - v40 < v28)
      {
        uint64_t v42 = *(void *)(a1 + 32) - 1;
        while (v42 != -1)
        {
          unint64_t v43 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v43 >> 8;
          unint64_t v44 = *(unsigned __int8 **)(a1 + 24);
          *((void *)&v46 + 1) = *v44;
          *(void *)&long long v46 = v43;
          unint64_t v45 = v46 >> 8;
          *(void *)(a1 + 8) = v45;
          v40 -= 8;
          *(_DWORD *)(a1 + 16) = v40;
          *(void *)(a1 + 24) = v44 + 1;
          *(void *)(a1 + 32) = v42--;
          v41 += 8;
          if (v41 >= v28) {
            goto LABEL_34;
          }
        }
        goto LABEL_173;
      }
      unint64_t v45 = *v6;
LABEL_34:
      int v39 = (v45 >> v40) & ~(-1 << v28);
      *(_DWORD *)(a1 + 16) = v40 + v28;
    }
    *(_DWORD *)(a1 + 356) = v39 + v31;
    --*(_DWORD *)(a1 + 276);
    if (!(v25 + v5))
    {
      LODWORD(v5) = 0;
      goto LABEL_81;
    }
    *(_DWORD *)(a1 + 264) -= v25 + v5;
    size_t v5 = (v25 + v5);
LABEL_37:
    uint64_t v47 = v3;
    int v48 = *(_DWORD *)(a1 + 256);
    LODWORD(v3) = i;
LABEL_38:
    *(_DWORD *)a1 = 8;
    if (v48)
    {
      uint64_t v49 = (int)v3;
      int v50 = *(_DWORD *)(a1 + 272);
      size_t v51 = v5;
      while (1)
      {
        if (!v50)
        {
          if (!sub_2483E7CEC(a1)) {
            goto LABEL_91;
          }
          if (!*(_DWORD *)(a1 + 256)) {
            break;
          }
        }
        unsigned int v151 = 0;
        long long v52 = *(unsigned char **)(a1 + 344);
        int v53 = *(_DWORD *)(a1 + 16);
        if ((v53 - 50) >= 0xF)
        {
          unint64_t v57 = *v6;
LABEL_47:
          unint64_t v60 = v57 >> v53;
          uint64_t v61 = &v52[4 * (v57 >> v53)];
          unsigned int v62 = *v61;
          if (v62 >= 9)
          {
            v53 += 8;
            v61 += 4 * (BYTE1(v60) & ~(-1 << (v62 - 8)) & 0x7F)
                 + 4 * *(unsigned __int16 *)&v52[4 * v60 + 2];
            unsigned int v62 = *v61;
          }
          *(_DWORD *)(a1 + 16) = v53 + v62;
          __int16 v63 = *((_WORD *)v61 + 1);
        }
        else
        {
          uint64_t v54 = *(void *)(a1 + 32) - 1;
          while (v54 != -1)
          {
            unint64_t v55 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v55 >> 8;
            uint64_t v56 = *(unsigned __int8 **)(a1 + 24);
            *((void *)&v58 + 1) = *v56;
            *(void *)&long long v58 = v55;
            unint64_t v57 = v58 >> 8;
            *(void *)(a1 + 8) = v57;
            int v59 = v53 - 8;
            *(_DWORD *)(a1 + 16) = v53 - 8;
            *(void *)(a1 + 24) = v56 + 1;
            *(void *)(a1 + 32) = v54--;
            LODWORD(v56) = v53 - 58;
            v53 -= 8;
            if (v56 >= 0xF)
            {
              int v53 = v59;
              goto LABEL_47;
            }
          }
          if (!sub_2483E59B4(v52, a1 + 8, &v151))
          {
LABEL_91:
            uint64_t result = 2;
            LODWORD(v5) = v51;
            int i = v49;
            goto LABEL_175;
          }
          LOBYTE(v63) = v151;
        }
        *(unsigned char *)(*(void *)(a1 + 120) + v49) = v63;
        int v50 = *(_DWORD *)(a1 + 272) - 1;
        *(_DWORD *)(a1 + 272) = v50;
        ++v49;
        int i = *(_DWORD *)(a1 + 88);
        if (i == v49)
        {
          *(_DWORD *)a1 = 13;
          LODWORD(v5) = v51 - 1;
          goto LABEL_187;
        }
        size_t v51 = (v51 - 1);
        if (!v51)
        {
          int i = v5 + v3;
          goto LABEL_78;
        }
      }
      *(_DWORD *)a1 = 8;
      LODWORD(v3) = v49;
    }
    else
    {
      size_t v51 = v5;
    }
    uint64_t v64 = *(void *)(a1 + 120);
    int v65 = v3;
    uint64_t v66 = *(int *)(a1 + 92);
    uint64_t v67 = *(unsigned __int8 *)(v64 + (v66 & ((int)v3 - 1)));
    uint64_t v68 = *(unsigned __int8 *)(v64 + (v66 & ((int)v3 - 2)));
    int v69 = *(_DWORD *)(a1 + 272);
    uint64_t v3 = (int)v3;
    size_t v5 = v51;
    do
    {
      uint64_t v70 = v67;
      if (!v69)
      {
        if (!sub_2483E7CEC(a1)) {
          goto LABEL_112;
        }
        if (*(_DWORD *)(a1 + 256))
        {
          int v48 = 1;
          goto LABEL_38;
        }
      }
      unint64_t v71 = *(unsigned char **)(*(void *)(a1 + 168)
                      + 8
                      * *(unsigned __int8 *)(*(void *)(a1 + 152)
                                           + (*(unsigned char *)(*(void *)(a1 + 144) + v68 + 256) | *(unsigned char *)(*(void *)(a1 + 144) + v70))));
      unsigned int v151 = 0;
      int v72 = *(_DWORD *)(a1 + 16);
      if ((v72 - 50) >= 0xF)
      {
        unint64_t v76 = *v6;
LABEL_67:
        unint64_t v79 = v76 >> v72;
        unint64_t v80 = &v71[4 * (v76 >> v72)];
        unsigned int v81 = *v80;
        if (v81 >= 9)
        {
          v72 += 8;
          v80 += 4 * (BYTE1(v79) & ~(-1 << (v81 - 8)) & 0x7F)
               + 4 * *(unsigned __int16 *)&v71[4 * v79 + 2];
          unsigned int v81 = *v80;
        }
        *(_DWORD *)(a1 + 16) = v72 + v81;
        uint64_t v67 = v80[2];
      }
      else
      {
        uint64_t v73 = *(void *)(a1 + 32) - 1;
        while (v73 != -1)
        {
          unint64_t v74 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v74 >> 8;
          unsigned int v75 = *(unsigned __int8 **)(a1 + 24);
          *((void *)&v77 + 1) = *v75;
          *(void *)&long long v77 = v74;
          unint64_t v76 = v77 >> 8;
          *(void *)(a1 + 8) = v76;
          int v78 = v72 - 8;
          *(_DWORD *)(a1 + 16) = v72 - 8;
          *(void *)(a1 + 24) = v75 + 1;
          *(void *)(a1 + 32) = v73--;
          LODWORD(v75) = v72 - 58;
          v72 -= 8;
          if (v75 >= 0xF)
          {
            int v72 = v78;
            goto LABEL_67;
          }
        }
        if (!sub_2483E59B4(v71, a1 + 8, &v151))
        {
LABEL_112:
          uint64_t result = 2;
          int i = v3;
          goto LABEL_175;
        }
        uint64_t v67 = v151;
      }
      *(unsigned char *)(*(void *)(a1 + 120) + v3) = v67;
      int v69 = *(_DWORD *)(a1 + 272) - 1;
      *(_DWORD *)(a1 + 272) = v69;
      ++v3;
      int i = *(_DWORD *)(a1 + 88);
      if (i == v3)
      {
        *(_DWORD *)a1 = 13;
        LODWORD(v5) = v5 - 1;
        goto LABEL_187;
      }
      uint64_t v68 = v70;
      size_t v5 = (v5 - 1);
    }
    while (v5);
    int i = v51 + v65;
LABEL_78:
    if (*(int *)(a1 + 264) <= 0)
    {
      LODWORD(v5) = 0;
      int v150 = 14;
      goto LABEL_181;
    }
    LODWORD(v5) = 0;
    uint64_t v3 = v47;
LABEL_81:
    *(_DWORD *)a1 = 9;
    int v82 = *(_DWORD *)(a1 + 360);
    if ((v82 & 0x80000000) == 0)
    {
      unsigned int v83 = v82 == 0;
      *(_DWORD *)(a1 + 260) = v83;
      int v84 = *(_DWORD *)(a1 + 96) - 1;
      *(_DWORD *)(a1 + 96) = v84;
      int v85 = *(_DWORD *)(a1 + 4 * (v84 & 3) + 100);
      goto LABEL_116;
    }
    if (!*(_DWORD *)(a1 + 280) && !sub_2483E8060(a1))
    {
LABEL_174:
      uint64_t result = 2;
      goto LABEL_175;
    }
    uint64_t v86 = a1 + 752;
    unsigned int v151 = 0;
    unsigned int v87 = *(unsigned char **)(*(void *)(a1 + 216) + 8 * *(unsigned __int8 *)(a1 + 352));
    unint64_t v9 = *(void *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v88 = v9;
    int v89 = v10;
    if ((v10 - 50) > 0xE)
    {
LABEL_88:
      unint64_t v95 = v88 >> v89;
      char v96 = &v87[4 * (v88 >> v89)];
      unsigned int v97 = *v96;
      if (v97 >= 9)
      {
        v89 += 8;
        v96 += 4 * (BYTE1(v95) & ~(-1 << (v97 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v87[4 * v95 + 2];
        unsigned int v97 = *v96;
      }
      *(_DWORD *)(a1 + 16) = v89 + v97;
      unsigned int v98 = *((unsigned __int16 *)v96 + 1);
    }
    else
    {
      uint64_t v90 = v11 + 1;
      uint64_t v91 = v12 - 1;
      unint64_t v88 = *(void *)(a1 + 8);
      int v92 = *(_DWORD *)(a1 + 16);
      while (v91 != -1)
      {
        *(void *)(a1 + 8) = v88 >> 8;
        *((void *)&v93 + 1) = *(unsigned __int8 *)(v90 - 1);
        *(void *)&long long v93 = v88;
        unint64_t v88 = v93 >> 8;
        *(void *)(a1 + 8) = v88;
        int v89 = v92 - 8;
        *(_DWORD *)(a1 + 16) = v92 - 8;
        *(void *)(a1 + 24) = v90;
        *(void *)(a1 + 32) = v91;
        ++v90;
        --v91;
        unsigned int v94 = v92 - 58;
        v92 -= 8;
        if (v94 >= 0xF) {
          goto LABEL_88;
        }
      }
      if (!sub_2483E59B4(v87, a1 + 8, &v151)) {
        goto LABEL_174;
      }
      unsigned int v98 = v151;
    }
    int v99 = *(_DWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 280) = v99 - 1;
    *(_DWORD *)(a1 + 260) = 0;
    if (v98 > 0xF)
    {
      int v101 = 0;
      unsigned int v102 = *(unsigned __int8 *)(v86 + v98);
      if (*(unsigned char *)(v86 + v98))
      {
        int v103 = *(_DWORD *)(a1 + 16);
        unsigned int v104 = 64 - v103;
        if (64 - v103 < v102)
        {
          uint64_t v105 = *(void *)(a1 + 32) - 1;
          while (v105 != -1)
          {
            unint64_t v106 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v106 >> 8;
            int v107 = *(unsigned __int8 **)(a1 + 24);
            *((void *)&v109 + 1) = *v107;
            *(void *)&long long v109 = v106;
            unint64_t v108 = v109 >> 8;
            *(void *)(a1 + 8) = v108;
            v103 -= 8;
            *(_DWORD *)(a1 + 16) = v103;
            *(void *)(a1 + 24) = v107 + 1;
            *(void *)(a1 + 32) = v105--;
            v104 += 8;
            if (v104 >= v102) {
              goto LABEL_114;
            }
          }
          *(_DWORD *)(a1 + 280) = v99;
          goto LABEL_173;
        }
        unint64_t v108 = *v6;
LABEL_114:
        int v101 = (v108 >> v103) & ~(-1 << v102);
        *(_DWORD *)(a1 + 16) = v103 + v102;
      }
      unsigned int v83 = 0;
      int v85 = (v101 << *(_DWORD *)(a1 + 320)) + *(_DWORD *)(a1 + 4 * v98 + 1296);
      goto LABEL_116;
    }
    *(_DWORD *)(a1 + 360) = v98;
    if (v98 <= 3)
    {
      unsigned int v83 = 1u >> v98;
      *(_DWORD *)(a1 + 260) = 1u >> v98;
      int v100 = *(_DWORD *)(a1 + 96);
      int v85 = *(_DWORD *)(a1 + 4 * (((_BYTE)v100 + ~(_BYTE)v98) & 3) + 100);
      *(_DWORD *)(a1 + 360) = v85;
      *(_DWORD *)(a1 + 96) = v100 - v83;
      goto LABEL_117;
    }
    unsigned int v83 = 0;
    if (v98 >= 0xA) {
      char v110 = 10;
    }
    else {
      char v110 = 3;
    }
    if (v98 >= 0xA) {
      char v111 = -10;
    }
    else {
      char v111 = -4;
    }
    int v85 = ((0x605142u >> (4 * (v111 + v98))) & 7)
        + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 96) + v110) & 3) + 100)
        - 3;
    if (v85 < 1) {
      int v85 = 0x7FFFFFFF;
    }
LABEL_116:
    *(_DWORD *)(a1 + 360) = v85;
LABEL_117:
    int v112 = *(_DWORD *)(a1 + 80);
    int v113 = *(_DWORD *)(a1 + 84);
    if (v113 != v112)
    {
      if (i >= v112) {
        int v113 = *(_DWORD *)(a1 + 80);
      }
      else {
        int v113 = i;
      }
      *(_DWORD *)(a1 + 84) = v113;
    }
    size_t v5 = *(unsigned int *)(a1 + 356);
    int v114 = v85 - v113;
    if (v85 > v113) {
      break;
    }
    int v137 = *(_DWORD *)(a1 + 96);
    int v138 = *(_DWORD *)(a1 + 92) & (i - v85);
    uint64_t v139 = *(void *)(a1 + 120);
    uint64_t v7 = i;
    unint64_t v140 = (_OWORD *)(v139 + i);
    long long v141 = (_OWORD *)(v139 + v138);
    int v142 = v5 + i;
    *(_DWORD *)(a1 + 4 * (v137 & 3) + 100) = v85;
    *(_DWORD *)(a1 + 96) = v137 + 1;
    *(_DWORD *)(a1 + 264) -= v5;
    _OWORD *v140 = *v141;
    if (v138 + (int)v5 > i && v142 > v138) {
      goto LABEL_153;
    }
    int v144 = *(_DWORD *)(a1 + 88);
    if (v142 >= v144 || v138 + (int)v5 >= v144) {
      goto LABEL_153;
    }
    if ((int)v5 >= 17)
    {
      uint64_t v145 = v140 + 1;
      uint64_t v146 = v141 + 1;
      if (v5 < 0x21) {
        *uint64_t v145 = *v146;
      }
      else {
        memcpy(v145, v146, (v5 - 16));
      }
    }
LABEL_167:
    if (*(int *)(a1 + 264) <= 0)
    {
      *(_DWORD *)a1 = 14;
      uint64_t result = 1;
      int i = v142;
      goto LABEL_175;
    }
  }
  if (v85 > 2147483644) {
    return 4294967280;
  }
  if ((int)v3 >= v114)
  {
    if (sub_2483E83A0(a1, (int)v3 - v114, *(_DWORD *)(a1 + 356)))
    {
      i += sub_2483E78EC(a1, i);
      goto LABEL_165;
    }
    return 4294967278;
  }
  if ((v5 - 4) > 0x1B) {
    return 4294967284;
  }
  unsigned int v115 = 0;
  uint64_t v116 = *(void *)(a1 + 704);
  if (*(_DWORD *)(v116 + 248)) {
    unsigned int v115 = *(unsigned __int8 *)(v116
  }
                              + (*(unsigned char *)(*(void *)(a1 + 144)
                                                           + *(unsigned __int8 *)(*(void *)(a1 + 120)
                                                                                + (*(int *)(a1 + 92) & (unint64_t)(i - 2)))
                                                           + 256) | *(unsigned char *)(*(void *)(a1 + 144)
                                                                               + *(unsigned __int8 *)(*(void *)(a1 + 120) + (*(int *)(a1 + 92) & (unint64_t)(i - 1)))))
                              + 252);
  uint64_t v117 = v115;
  uint64_t v118 = v116 + 8 * v115;
  uint64_t v119 = *(void *)(v118 + 320);
  uint64_t v120 = *(void *)(v118 + 832);
  LODWORD(v118) = *(_DWORD *)(v119 + 4 * v5 + 32);
  char v121 = *(unsigned char *)(v119 + v5);
  int v122 = v85 - v3 + ~v113;
  int v123 = v122 >> v121;
  *(_DWORD *)(a1 + 96) += v83;
  int v124 = v118 + (v122 & ~(-1 << v121)) * v5;
  int v125 = *(_DWORD *)(v120 + 24);
  if (v122 >> v121 < v125 && *(unsigned char *)(v119 + v5) || (unint64_t v126 = *(unsigned __int8 *)(v116 + 316), v126 < 2))
  {
LABEL_137:
    uint64_t v128 = v119;
    goto LABEL_138;
  }
  int v127 = v122 - v125 * ((1 << v121) & 0xFFFFFFFE);
  while (2)
  {
    if (!v117 || (uint64_t v128 = *(void *)(v116 + 320), (v129 = *(unsigned char *)(v128 + v5)) == 0))
    {
LABEL_136:
      v116 += 8;
      --v117;
      if (!--v126) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  unsigned int v130 = *(_DWORD *)(*(void *)(v116 + 832) + 24) * ((1 << v129) & 0xFFFFFFFE);
  BOOL v131 = __OFSUB__(v127, v130);
  int v132 = v127 - v130;
  if (v132 < 0 == v131)
  {
    int v127 = v132;
    goto LABEL_136;
  }
  int v123 = v127 >> v129;
  int v124 = *(_DWORD *)(v128 + 4 * v5 + 32) + (v127 & ~(-1 << v129)) * v5;
  uint64_t v120 = *(void *)(v116 + 832);
LABEL_138:
  if (!*(unsigned char *)(v128 + v5)) {
    return 4294967284;
  }
  uint64_t v133 = *(void *)(v128 + 168);
  if (!v133) {
    return 4294967277;
  }
  if (v123 >= *(_DWORD *)(v120 + 24)) {
    return 4294967285;
  }
  int v134 = (void *)(v133 + v124);
  unsigned int v135 = (void *)(*(void *)(a1 + 120) + i);
  if (v123 == *(__int16 *)(v120 + 48))
  {
    memcpy(v135, v134, v5);
    int v136 = v5;
    goto LABEL_164;
  }
  int v136 = sub_2483AB52C((uint64_t)v135, (char *)v134, v5, (void *)v120, v123);
  if (!v136 && *(int *)(a1 + 360) < 121) {
    return 4294967285;
  }
LABEL_164:
  i += v136;
  *(_DWORD *)(a1 + 264) -= v136;
LABEL_165:
  if (i < *(_DWORD *)(a1 + 88))
  {
    int v142 = i;
    goto LABEL_167;
  }
  int v150 = 15;
LABEL_181:
  *(_DWORD *)a1 = v150;
LABEL_187:
  uint64_t result = 1;
LABEL_175:
  *(_DWORD *)(a1 + 76) = i;
  *(_DWORD *)(a1 + 4) = v5;
  return result;
}

void **sub_2483E78A8(void **result)
{
  if (((_WORD)result[84] & 8) != 0)
  {
    uint64_t v1 = result;
    uint64_t result = (void **)memcpy(result[15], v1[16], *((int *)v1 + 19));
    *((_WORD *)v1 + 336) &= ~8u;
  }
  return result;
}

uint64_t sub_2483E78EC(uint64_t a1, int a2)
{
  uint64_t v4 = *(int **)(a1 + 712);
  int v5 = v4[5];
  int v6 = a2;
  do
  {
    int v7 = v4[4] - v5;
    if (!v7) {
      break;
    }
    uint64_t v8 = v4[2];
    uint64_t v9 = v4[3];
    int v10 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    if (v7 >= v10) {
      int v7 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    }
    int v11 = v7 >= *(_DWORD *)(a1 + 88) - v6 ? *(_DWORD *)(a1 + 88) - v6 : v7;
    memcpy((void *)(*(void *)(a1 + 120) + v6), (const void *)(*(void *)&v4[2 * v8 + 6] + v9), v11);
    v4[3] += v11;
    int v5 = v4[5] + v11;
    v4[5] = v5;
    if (v11 == v10) {
      *((void *)v4 + 1) = (v4[2] + 1);
    }
    v6 += v11;
  }
  while (v6 != *(_DWORD *)(a1 + 88));
  return (v6 - a2);
}

uint64_t sub_2483E79C0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 288);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = (unsigned char *)(*(void *)(a1 + 240) + 2528);
  int v5 = (unint64_t *)(a1 + 8);
  int v46 = 0;
  unint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = v6;
  int v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    unint64_t v17 = v10 >> v11;
    int v18 = &v4[4 * (v10 >> v11)];
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v4[4 * v17 + 2];
      unsigned int v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    int v46 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    uint64_t v12 = v8 + 1;
    uint64_t v13 = v9 - 1;
    unint64_t v10 = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(void *)(a1 + 8) = v10 >> 8;
      *((void *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(void *)&long long v15 = v10;
      unint64_t v10 = v15 >> 8;
      *(void *)(a1 + 8) = v10;
      int v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      ++v12;
      --v13;
      unsigned int v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF) {
        goto LABEL_6;
      }
    }
    if (!sub_2483E59B4(v4, a1 + 8, &v46)) {
      return 0;
    }
  }
  unsigned int v47 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    unsigned int v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    unint64_t v21 = (unsigned char *)(v3 + 1584);
    int v22 = *(_DWORD *)(a1 + 16);
    if ((v22 - 50) >= 0xF)
    {
      unint64_t v26 = *v5;
LABEL_19:
      unint64_t v29 = v26 >> v22;
      uint64_t v30 = &v21[4 * (v26 >> v22)];
      unsigned int v31 = *v30;
      if (v31 >= 9)
      {
        v22 += 8;
        v30 += 4 * (BYTE1(v29) & ~(-1 << (v31 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v21[4 * v29 + 2];
        unsigned int v31 = *v30;
      }
      *(_DWORD *)(a1 + 16) = v22 + v31;
      unsigned int v20 = *((unsigned __int16 *)v30 + 1);
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 32) - 1;
      while (v23 != -1)
      {
        unint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v24 >> 8;
        int v25 = *(unsigned __int8 **)(a1 + 24);
        *((void *)&v27 + 1) = *v25;
        *(void *)&long long v27 = v24;
        unint64_t v26 = v27 >> 8;
        *(void *)(a1 + 8) = v26;
        int v28 = v22 - 8;
        *(_DWORD *)(a1 + 16) = v22 - 8;
        *(void *)(a1 + 24) = v25 + 1;
        *(void *)(a1 + 32) = v23--;
        LODWORD(v25) = v22 - 58;
        v22 -= 8;
        if (v25 >= 0xF)
        {
          int v22 = v28;
          goto LABEL_19;
        }
      }
      if (!sub_2483E59B4(v21, a1 + 8, &v47)) {
        goto LABEL_32;
      }
      unsigned int v20 = v47;
    }
  }
  int v32 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * v20);
  unsigned int v33 = *((unsigned __int8 *)v32 + 2);
  int v34 = *v32;
  int v35 = *(_DWORD *)(a1 + 16);
  unsigned int v36 = 64 - v35;
  if (64 - v35 < v33)
  {
    uint64_t v37 = *(void *)(a1 + 32) - 1;
    while (v37 != -1)
    {
      unint64_t v38 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v38 >> 8;
      int v39 = *(unsigned __int8 **)(a1 + 24);
      *((void *)&v41 + 1) = *v39;
      *(void *)&long long v41 = v38;
      unint64_t v40 = v41 >> 8;
      *(void *)(a1 + 8) = v40;
      v35 -= 8;
      *(_DWORD *)(a1 + 16) = v35;
      *(void *)(a1 + 24) = v39 + 1;
      *(void *)(a1 + 32) = v37--;
      v36 += 8;
      if (v36 >= v33) {
        goto LABEL_28;
      }
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    return 0;
  }
  unint64_t v40 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v35 + v33;
  *(_DWORD *)(a1 + 276) = ((v40 >> v35) & ~(-1 << v33)) + v34;
  *(_DWORD *)(a1 + 668) = 0;
  if (v46)
  {
    if (v46 == 1) {
      unsigned int v42 = *(_DWORD *)(a1 + 308) + 1;
    }
    else {
      unsigned int v42 = v46 - 2;
    }
  }
  else
  {
    unsigned int v42 = *(_DWORD *)(a1 + 304);
  }
  if (v42 >= v1) {
    unsigned int v44 = v1;
  }
  else {
    unsigned int v44 = 0;
  }
  unsigned int v45 = v42 - v44;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = v45;
  *(void *)(a1 + 136) = *(void *)(*(void *)(a1 + 192) + 8 * v45);
  return 1;
}

uint64_t sub_2483E7CEC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 284);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v3 = *(unsigned char **)(a1 + 240);
  uint64_t v4 = *(unsigned char **)(a1 + 248);
  int v5 = (unint64_t *)(a1 + 8);
  int v47 = 0;
  unint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = v6;
  int v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    unint64_t v17 = v10 >> v11;
    int v18 = &v3[4 * (v10 >> v11)];
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v3[4 * v17 + 2];
      unsigned int v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    int v47 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    uint64_t v12 = v8 + 1;
    uint64_t v13 = v9 - 1;
    unint64_t v10 = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(void *)(a1 + 8) = v10 >> 8;
      *((void *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(void *)&long long v15 = v10;
      unint64_t v10 = v15 >> 8;
      *(void *)(a1 + 8) = v10;
      int v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      ++v12;
      --v13;
      unsigned int v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF) {
        goto LABEL_6;
      }
    }
    if (!sub_2483E59B4(v3, a1 + 8, &v47)) {
      return 0;
    }
  }
  unsigned int v48 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    unsigned int v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    int v21 = *(_DWORD *)(a1 + 16);
    if ((v21 - 50) >= 0xF)
    {
      unint64_t v25 = *v5;
LABEL_19:
      unint64_t v28 = v25 >> v21;
      unint64_t v29 = &v4[4 * (v25 >> v21)];
      unsigned int v30 = *v29;
      if (v30 >= 9)
      {
        v21 += 8;
        v29 += 4 * (BYTE1(v28) & ~(-1 << (v30 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v4[4 * v28 + 2];
        unsigned int v30 = *v29;
      }
      *(_DWORD *)(a1 + 16) = v21 + v30;
      unsigned int v20 = *((unsigned __int16 *)v29 + 1);
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 32) - 1;
      while (v22 != -1)
      {
        unint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23 >> 8;
        unint64_t v24 = *(unsigned __int8 **)(a1 + 24);
        *((void *)&v26 + 1) = *v24;
        *(void *)&long long v26 = v23;
        unint64_t v25 = v26 >> 8;
        *(void *)(a1 + 8) = v25;
        int v27 = v21 - 8;
        *(_DWORD *)(a1 + 16) = v21 - 8;
        *(void *)(a1 + 24) = v24 + 1;
        *(void *)(a1 + 32) = v22--;
        LODWORD(v24) = v21 - 58;
        v21 -= 8;
        if (v24 >= 0xF)
        {
          int v21 = v27;
          goto LABEL_19;
        }
      }
      if (!sub_2483E59B4(v4, a1 + 8, &v48)) {
        goto LABEL_32;
      }
      unsigned int v20 = v48;
    }
  }
  unsigned int v31 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * v20);
  unsigned int v32 = *((unsigned __int8 *)v31 + 2);
  int v33 = *v31;
  int v34 = *(_DWORD *)(a1 + 16);
  unsigned int v35 = 64 - v34;
  if (64 - v34 < v32)
  {
    uint64_t v36 = *(void *)(a1 + 32) - 1;
    while (v36 != -1)
    {
      unint64_t v37 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v37 >> 8;
      unint64_t v38 = *(unsigned __int8 **)(a1 + 24);
      *((void *)&v40 + 1) = *v38;
      *(void *)&long long v40 = v37;
      unint64_t v39 = v40 >> 8;
      *(void *)(a1 + 8) = v39;
      v34 -= 8;
      *(_DWORD *)(a1 + 16) = v34;
      *(void *)(a1 + 24) = v38 + 1;
      *(void *)(a1 + 32) = v36--;
      v35 += 8;
      if (v35 >= v32) {
        goto LABEL_28;
      }
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    return 0;
  }
  unint64_t v39 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v34 + v32;
  *(_DWORD *)(a1 + 272) = ((v39 >> v34) & ~(-1 << v32)) + v33;
  *(_DWORD *)(a1 + 668) = 0;
  if (v47)
  {
    if (v47 == 1) {
      unsigned int v41 = *(_DWORD *)(a1 + 300) + 1;
    }
    else {
      unsigned int v41 = v47 - 2;
    }
  }
  else
  {
    unsigned int v41 = *(_DWORD *)(a1 + 296);
  }
  if (v41 >= v1) {
    unsigned int v43 = v1;
  }
  else {
    unsigned int v43 = 0;
  }
  unsigned int v44 = v41 - v43;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = v44;
  uint64_t v45 = v44 << 6;
  uint64_t v46 = *(void *)(a1 + 688);
  *(void *)(a1 + 152) = v46 + v45;
  *(_DWORD *)(a1 + 256) = (*(_DWORD *)(a1 + 4 * (v44 >> 5) + 720) >> v44) & 1;
  *(void *)(a1 + 344) = *(void *)(*(void *)(a1 + 168) + 8 * *(unsigned __int8 *)(v46 + v45));
  *(void *)(a1 + 144) = (char *)&unk_248551B18 + 512 * (unint64_t)(*(unsigned char *)(*(void *)(a1 + 696) + v44) & 3);
  return 1;
}

uint64_t sub_2483E8060(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 292);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = (unsigned char *)(*(void *)(a1 + 240) + 5056);
  int v5 = (unint64_t *)(a1 + 8);
  int v47 = 0;
  unint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = v6;
  int v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    unint64_t v17 = v10 >> v11;
    int v18 = &v4[4 * (v10 >> v11)];
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v4[4 * v17 + 2];
      unsigned int v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    int v47 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    uint64_t v12 = v8 + 1;
    uint64_t v13 = v9 - 1;
    unint64_t v10 = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(void *)(a1 + 8) = v10 >> 8;
      *((void *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(void *)&long long v15 = v10;
      unint64_t v10 = v15 >> 8;
      *(void *)(a1 + 8) = v10;
      int v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      ++v12;
      --v13;
      unsigned int v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF) {
        goto LABEL_6;
      }
    }
    if (!sub_2483E59B4(v4, a1 + 8, &v47)) {
      return 0;
    }
  }
  unsigned int v48 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    unsigned int v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    int v21 = (unsigned char *)(v3 + 3168);
    int v22 = *(_DWORD *)(a1 + 16);
    if ((v22 - 50) >= 0xF)
    {
      unint64_t v26 = *v5;
LABEL_19:
      unint64_t v29 = v26 >> v22;
      unsigned int v30 = &v21[4 * (v26 >> v22)];
      unsigned int v31 = *v30;
      if (v31 >= 9)
      {
        v22 += 8;
        v30 += 4 * (BYTE1(v29) & ~(-1 << (v31 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v21[4 * v29 + 2];
        unsigned int v31 = *v30;
      }
      *(_DWORD *)(a1 + 16) = v22 + v31;
      unsigned int v20 = *((unsigned __int16 *)v30 + 1);
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 32) - 1;
      while (v23 != -1)
      {
        unint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v24 >> 8;
        unint64_t v25 = *(unsigned __int8 **)(a1 + 24);
        *((void *)&v27 + 1) = *v25;
        *(void *)&long long v27 = v24;
        unint64_t v26 = v27 >> 8;
        *(void *)(a1 + 8) = v26;
        int v28 = v22 - 8;
        *(_DWORD *)(a1 + 16) = v22 - 8;
        *(void *)(a1 + 24) = v25 + 1;
        *(void *)(a1 + 32) = v23--;
        LODWORD(v25) = v22 - 58;
        v22 -= 8;
        if (v25 >= 0xF)
        {
          int v22 = v28;
          goto LABEL_19;
        }
      }
      if (!sub_2483E59B4(v21, a1 + 8, &v48)) {
        goto LABEL_32;
      }
      unsigned int v20 = v48;
    }
  }
  unsigned int v32 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * v20);
  unsigned int v33 = *((unsigned __int8 *)v32 + 2);
  int v34 = *v32;
  int v35 = *(_DWORD *)(a1 + 16);
  unsigned int v36 = 64 - v35;
  if (64 - v35 < v33)
  {
    uint64_t v37 = *(void *)(a1 + 32) - 1;
    while (v37 != -1)
    {
      unint64_t v38 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v38 >> 8;
      unint64_t v39 = *(unsigned __int8 **)(a1 + 24);
      *((void *)&v41 + 1) = *v39;
      *(void *)&long long v41 = v38;
      unint64_t v40 = v41 >> 8;
      *(void *)(a1 + 8) = v40;
      v35 -= 8;
      *(_DWORD *)(a1 + 16) = v35;
      *(void *)(a1 + 24) = v39 + 1;
      *(void *)(a1 + 32) = v37--;
      v36 += 8;
      if (v36 >= v33) {
        goto LABEL_28;
      }
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    return 0;
  }
  unint64_t v40 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v35 + v33;
  *(_DWORD *)(a1 + 280) = ((v40 >> v35) & ~(-1 << v33)) + v34;
  *(_DWORD *)(a1 + 668) = 0;
  if (v47)
  {
    if (v47 == 1) {
      unsigned int v42 = *(_DWORD *)(a1 + 316) + 1;
    }
    else {
      unsigned int v42 = v47 - 2;
    }
  }
  else
  {
    unsigned int v42 = *(_DWORD *)(a1 + 312);
  }
  if (v42 >= v1) {
    unsigned int v44 = v1;
  }
  else {
    unsigned int v44 = 0;
  }
  unsigned int v45 = v42 - v44;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 316) = v45;
  uint64_t v46 = *(void *)(a1 + 336) + 4 * v45;
  *(void *)(a1 + 160) = v46;
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(v46 + *(int *)(a1 + 260));
  return 1;
}

uint64_t sub_2483E83A0(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 712);
  int v4 = v3[54];
  if (v4 == -1)
  {
    int v5 = v3[1];
    signed int v6 = 32 - __clz(v5 - 1);
    if (v6 <= 8) {
      signed int v6 = 8;
    }
    int v4 = v6 - 8;
    v3[54] = v4;
    if (v5 >= 1)
    {
      LODWORD(v7) = 0;
      for (int i = 0; i < v5; i += 1 << v4)
      {
        uint64_t v9 = (int)v7;
        do
          uint64_t v7 = v9++;
        while (v3[v7 + 39] < i);
        *((unsigned char *)v3 + (i >> v4) + 220) = v7;
      }
    }
  }
  uint64_t v10 = *((unsigned __int8 *)v3 + (a2 >> v4) + 220);
  do
    uint64_t v11 = v10++;
  while (v3[v11 + 39] <= a2);
  if (v3[1] < a3 + a2) {
    return 0;
  }
  int v13 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 4 * (v13 & 3) + 100) = *(_DWORD *)(a1 + 360);
  *(_DWORD *)(a1 + 96) = v13 + 1;
  *(_DWORD *)(a1 + 264) -= a3;
  int v14 = a2 - v3[v11 + 38];
  v3[2] = v11;
  v3[3] = v14;
  v3[4] = a3;
  v3[5] = 0;
  return 1;
}

uint64_t sub_2483E84A4(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 288);
  if (v1 >= 2)
  {
    uint64_t v2 = *(void *)(result + 240) + 2528;
    unsigned int v3 = *(_DWORD *)(result + 16);
    unint64_t v4 = *(void *)(result + 8);
    if (v3 >= 0x30)
    {
      int v5 = *(void **)(result + 24);
      uint64_t v6 = *(void *)(result + 32);
      *((void *)&v7 + 1) = *v5;
      *(void *)&long long v7 = *(void *)(result + 8);
      unint64_t v4 = v7 >> 48;
      *(void *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(void *)(result + 24) = (char *)v5 + 6;
      *(void *)(result + 32) = v6 - 6;
    }
    unint64_t v8 = v4 >> v3;
    uint64_t v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    unsigned int v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      unsigned int v10 = *v9;
    }
    uint64_t v11 = *(void *)(result + 248) + 1584;
    unsigned int v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    int v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      int v14 = *(void **)(result + 24);
      uint64_t v15 = *(void *)(result + 32);
      *((void *)&v16 + 1) = *v14;
      *(void *)&long long v16 = v4;
      unint64_t v4 = v16 >> 48;
      *(void *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(void *)(result + 24) = (char *)v14 + 6;
      *(void *)(result + 32) = v15 - 6;
    }
    unint64_t v17 = v4 >> v12;
    int v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      unsigned int v19 = *v18;
    }
    unsigned int v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    int v21 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * *((unsigned __int16 *)v18 + 1));
    int v22 = *((unsigned __int8 *)v21 + 2);
    int v23 = *v21;
    if (v20 >= 0x20)
    {
      unint64_t v24 = *(unsigned int **)(result + 24);
      uint64_t v25 = *(void *)(result + 32);
      *((void *)&v26 + 1) = *v24;
      *(void *)&long long v26 = v4;
      unint64_t v4 = v26 >> 32;
      *(void *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(void *)(result + 24) = v24 + 1;
      *(void *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 276) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1) {
        unsigned int v27 = *(_DWORD *)(result + 308) + 1;
      }
      else {
        unsigned int v27 = v13 - 2;
      }
    }
    else
    {
      unsigned int v27 = *(_DWORD *)(result + 304);
    }
    if (v27 < v1) {
      unsigned int v1 = 0;
    }
    unsigned int v28 = v27 - v1;
    *(_DWORD *)(result + 304) = *(_DWORD *)(result + 308);
    *(_DWORD *)(result + 308) = v28;
    *(void *)(result + 136) = *(void *)(*(void *)(result + 192) + 8 * v28);
  }
  return result;
}

uint64_t sub_2483E8654(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 284);
  if (v1 >= 2)
  {
    uint64_t v2 = *(void *)(result + 240);
    unsigned int v3 = *(_DWORD *)(result + 16);
    unint64_t v4 = *(void *)(result + 8);
    if (v3 >= 0x30)
    {
      int v5 = *(void **)(result + 24);
      uint64_t v6 = *(void *)(result + 32);
      *((void *)&v7 + 1) = *v5;
      *(void *)&long long v7 = *(void *)(result + 8);
      unint64_t v4 = v7 >> 48;
      *(void *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(void *)(result + 24) = (char *)v5 + 6;
      *(void *)(result + 32) = v6 - 6;
    }
    unint64_t v8 = v4 >> v3;
    uint64_t v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    unsigned int v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      unsigned int v10 = *v9;
    }
    uint64_t v11 = *(void *)(result + 248);
    unsigned int v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    int v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      int v14 = *(void **)(result + 24);
      uint64_t v15 = *(void *)(result + 32);
      *((void *)&v16 + 1) = *v14;
      *(void *)&long long v16 = v4;
      unint64_t v4 = v16 >> 48;
      *(void *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(void *)(result + 24) = (char *)v14 + 6;
      *(void *)(result + 32) = v15 - 6;
    }
    unint64_t v17 = v4 >> v12;
    int v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      unsigned int v19 = *v18;
    }
    unsigned int v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    int v21 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * *((unsigned __int16 *)v18 + 1));
    int v22 = *((unsigned __int8 *)v21 + 2);
    int v23 = *v21;
    if (v20 >= 0x20)
    {
      unint64_t v24 = *(unsigned int **)(result + 24);
      uint64_t v25 = *(void *)(result + 32);
      *((void *)&v26 + 1) = *v24;
      *(void *)&long long v26 = v4;
      unint64_t v4 = v26 >> 32;
      *(void *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(void *)(result + 24) = v24 + 1;
      *(void *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 272) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1) {
        unsigned int v27 = *(_DWORD *)(result + 300) + 1;
      }
      else {
        unsigned int v27 = v13 - 2;
      }
    }
    else
    {
      unsigned int v27 = *(_DWORD *)(result + 296);
    }
    if (v27 < v1) {
      unsigned int v1 = 0;
    }
    unsigned int v28 = v27 - v1;
    *(_DWORD *)(result + 296) = *(_DWORD *)(result + 300);
    *(_DWORD *)(result + 300) = v28;
    uint64_t v29 = v28 << 6;
    uint64_t v30 = *(void *)(result + 688);
    *(void *)(result + 152) = v30 + v29;
    *(_DWORD *)(result + 256) = (*(_DWORD *)(result + 4 * (v28 >> 5) + 720) >> v28) & 1;
    *(void *)(result + 344) = *(void *)(*(void *)(result + 168)
                                          + 8 * *(unsigned __int8 *)(v30 + v29));
    *(void *)(result + 144) = (char *)&unk_248551B18
                              + 512 * (unint64_t)(*(unsigned char *)(*(void *)(result + 696) + v28) & 3);
  }
  return result;
}

uint64_t sub_2483E8844(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 292);
  if (v1 >= 2)
  {
    uint64_t v2 = *(void *)(result + 240) + 5056;
    unsigned int v3 = *(_DWORD *)(result + 16);
    unint64_t v4 = *(void *)(result + 8);
    if (v3 >= 0x30)
    {
      int v5 = *(void **)(result + 24);
      uint64_t v6 = *(void *)(result + 32);
      *((void *)&v7 + 1) = *v5;
      *(void *)&long long v7 = *(void *)(result + 8);
      unint64_t v4 = v7 >> 48;
      *(void *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(void *)(result + 24) = (char *)v5 + 6;
      *(void *)(result + 32) = v6 - 6;
    }
    unint64_t v8 = v4 >> v3;
    uint64_t v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    unsigned int v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      unsigned int v10 = *v9;
    }
    uint64_t v11 = *(void *)(result + 248) + 3168;
    unsigned int v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    int v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      int v14 = *(void **)(result + 24);
      uint64_t v15 = *(void *)(result + 32);
      *((void *)&v16 + 1) = *v14;
      *(void *)&long long v16 = v4;
      unint64_t v4 = v16 >> 48;
      *(void *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(void *)(result + 24) = (char *)v14 + 6;
      *(void *)(result + 32) = v15 - 6;
    }
    unint64_t v17 = v4 >> v12;
    int v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    unsigned int v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      unsigned int v19 = *v18;
    }
    unsigned int v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    int v21 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * *((unsigned __int16 *)v18 + 1));
    int v22 = *((unsigned __int8 *)v21 + 2);
    int v23 = *v21;
    if (v20 >= 0x20)
    {
      unint64_t v24 = *(unsigned int **)(result + 24);
      uint64_t v25 = *(void *)(result + 32);
      *((void *)&v26 + 1) = *v24;
      *(void *)&long long v26 = v4;
      unint64_t v4 = v26 >> 32;
      *(void *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(void *)(result + 24) = v24 + 1;
      *(void *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 280) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1) {
        unsigned int v27 = *(_DWORD *)(result + 316) + 1;
      }
      else {
        unsigned int v27 = v13 - 2;
      }
    }
    else
    {
      unsigned int v27 = *(_DWORD *)(result + 312);
    }
    if (v27 < v1) {
      unsigned int v1 = 0;
    }
    unsigned int v28 = v27 - v1;
    *(_DWORD *)(result + 312) = *(_DWORD *)(result + 316);
    *(_DWORD *)(result + 316) = v28;
    uint64_t v29 = *(void *)(result + 336) + 4 * v28;
    *(void *)(result + 160) = v29;
    *(unsigned char *)(result + 352) = *(unsigned char *)(v29 + *(int *)(result + 260));
  }
  return result;
}

unsigned __int8 *sub_2483E8A08(unsigned __int8 *result, unsigned int a2, _DWORD *a3)
{
  unint64_t v4 = result;
  int v5 = a3[96];
  uint64_t v6 = a3 + 98;
  a3[98] = 50462976;
  if ((v5 + 1) > 2) {
    uint64_t v7 = (v5 + 1);
  }
  else {
    uint64_t v7 = 2;
  }
  uint64_t v8 = v7 - 1;
  uint64_t v9 = a3 + 99;
  int v10 = 117835012;
  do
  {
    *v9++ = v10;
    v10 += 67372036;
    --v8;
  }
  while (v8);
  if (a2)
  {
    unsigned int v11 = 0;
    unsigned int v12 = (unsigned __int8 *)a3 + 391;
    uint64_t v13 = a2;
    do
    {
      uint64_t v14 = *v4;
      unsigned __int8 v15 = v6[v14];
      *v4++ = v15;
      *unsigned int v12 = v15;
      uint64_t result = (unsigned __int8 *)memmove(v6, (char *)a3 + 391, v14 + 1);
      v11 |= v14;
      --v13;
    }
    while (v13);
    unsigned int v16 = v11 >> 2;
  }
  else
  {
    unsigned int v16 = 0;
  }
  a3[96] = v16;
  return result;
}

uint64_t sub_2483E8AD8(uint64_t a1)
{
  (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 696));
  *(void *)(a1 + 696) = 0;
  (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 688));
  *(void *)(a1 + 688) = 0;
  (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 336));
  *(void *)(a1 + 336) = 0;
  (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 192));
  *(void *)(a1 + 192) = 0;
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(a1 + 216));
  *(void *)(a1 + 216) = 0;
  return result;
}

unint64_t sub_2483E8B58(int a1, uint64_t a2)
{
  unint64_t v2 = byte_2485534EC[a1];
  unint64_t v3 = byte_248553507[a1];
  if (v3 >= v2) {
    unint64_t v4 = byte_2485534EC[a1];
  }
  else {
    unint64_t v4 = byte_248553507[a1];
  }
  if (v3 <= v2) {
    unint64_t v5 = byte_2485534EC[a1];
  }
  else {
    unint64_t v5 = byte_248553507[a1];
  }
  unint64_t v6 = v5 / v4;
  unint64_t v7 = v6 - 1;
  unint64_t v8 = __clz(v6) ^ 0x3F;
  if ((v6 & (v6 - 1)) != 0) {
    char v9 = v8 + 1;
  }
  else {
    char v9 = v8;
  }
  unint64_t v10 = byte_248553507[a1] * (unint64_t)byte_2485534EC[a1];
  unint64_t v11 = 8 * v5;
  if (v5)
  {
    unint64_t v12 = 0;
    if (v11 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = 8 * v5;
    }
    do
    {
      unint64_t v14 = 0;
      unint64_t v15 = v12;
      do
      {
        if (v12) {
          unint64_t v16 = v14;
        }
        else {
          unint64_t v16 = v15;
        }
        if ((v16 & v7) == 0)
        {
          if (v12) {
            unint64_t v17 = v15;
          }
          else {
            unint64_t v17 = v14;
          }
          unint64_t v18 = v16 >> v9;
          BOOL v19 = v17 >= v5 || v18 >= v4;
          int v20 = v19;
          uint64_t v21 = v18 * v5;
          if (v19) {
            unint64_t v22 = v10 + 1;
          }
          else {
            unint64_t v22 = v10;
          }
          if (!v20) {
            unint64_t v10 = v21 + v17;
          }
          *(_DWORD *)(a2 + 4 * v10) = v17 + 8 * v21;
          unint64_t v10 = v22;
        }
        ++v14;
        --v15;
      }
      while (v15 != -1);
      ++v12;
    }
    while (v12 != v13);
  }
  uint64_t v23 = 0;
  uint64_t v24 = 1;
  unint64_t v25 = v11 - 1;
  LOBYTE(v26) = 8 * v5;
  do
  {
    char v27 = v26;
    unint64_t v26 = v25;
    uint64_t v28 = v24;
    unint64_t result = v11 - 1;
    do
    {
      if (v27) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = result;
      }
      if ((v30 & v7) == 0)
      {
        unint64_t v31 = v30 >> v9;
        if (v27) {
          int v32 = result;
        }
        else {
          int v32 = v28;
        }
        *(_DWORD *)(a2 + 4 * v10++) = v32 + v31 * v11;
      }
      --result;
      ++v28;
    }
    while (v23 + result);
    --v23;
    ++v24;
    unint64_t v25 = v26 - 1;
  }
  while (v26 != 1);
  return result;
}

void sub_2483E8C88(uint64_t a1, unsigned int a2, unsigned int a3)
{
  sub_2483E8CE0((uint64_t)&v8, a2, a3);
  int v4 = v12;
  if (!v12)
  {
    uint64_t v5 = v9;
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    *(_OWORD *)a1 = v8;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v5;
  }
  *(_DWORD *)(a1 + 56) = v4;
}

double sub_2483E8CE0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(a3, a2);
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = a2 + 142;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x1FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x1FFFFFF80) + 128;
    }
  }
  long long v11 = (unint64_t)v4;
  uint64_t v12 = 1;
  if (sub_24841F648((uint64_t)&v10))
  {
    uint64_t v7 = *((void *)&v11 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((void *)&v11 + 1) = 0;
    if (v7)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
      long long v8 = *(void **)(v7 - 32);
      free(v8);
    }
  }
  else
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v12;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2483E8DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2483E8DDC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v1 - 24));
    free(*(void **)(v1 - 32));
  }
}

void sub_2483E8E08(void *a1)
{
}

uint64_t sub_2483E8E1C(unsigned int *a1, unsigned __int8 a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v6 = (unsigned __int8 *)*((void *)a1 + 3);
  uint64_t v8 = *a1;
  do
  {
    long long v9 = v6;
    uint64_t v10 = v8;
    if (v8)
    {
      do
      {
        int v11 = *v9++;
        if (((2 * a2) | 1) == v11) {
          ++result;
        }
        --v10;
      }
      while (v10);
    }
    ++v4;
    v6 += v7;
  }
  while (v4 != v2);
  return result;
}

float *sub_2483E8E7C(float *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  if (a5)
  {
    if (a4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = *(void *)result;
      uint64_t v10 = *((void *)result + 1);
      uint64_t v11 = *a3;
      uint64_t v12 = a3[1];
      uint64_t v14 = a2[2];
      uint64_t v13 = a2[3];
      uint64_t v15 = *((void *)result + 2);
      uint64_t result = (float *)*((void *)result + 3);
      uint64_t v16 = a3[2];
      uint64_t v17 = a3[3];
      do
      {
        float v18 = *(float *)(v13 + 4 * v6);
        float v19 = fminf(v18, 1.0);
        if (v19 < 0.0) {
          float v19 = 0.0;
        }
        if (a6) {
          float v18 = v19;
        }
        float v20 = 1.0 - v18;
        *(float *)(v11 + 4 * v6) = *(float *)(v7 + 4 * v6) + (float)(*(float *)(v9 + 4 * v6) * v20);
        *(float *)(v12 + 4 * v6) = *(float *)(v8 + 4 * v6) + (float)(*(float *)(v10 + 4 * v6) * v20);
        *(float *)(v16 + 4 * v6) = *(float *)(v14 + 4 * v6) + (float)(*(float *)(v15 + 4 * v6) * v20);
        *(float *)(v17 + 4 * v6) = 1.0 - (float)(v20 * (float)(1.0 - result[v6]));
        ++v6;
      }
      while (a4 != v6);
    }
  }
  else if (a4)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a2;
    uint64_t v23 = a2[1];
    uint64_t v24 = *(void *)result;
    uint64_t v25 = *((void *)result + 1);
    uint64_t v26 = *a3;
    uint64_t v27 = a3[1];
    uint64_t v29 = a2[2];
    uint64_t v28 = a2[3];
    unint64_t v31 = result + 4;
    uint64_t result = (float *)*((void *)result + 2);
    uint64_t v30 = v31[1];
    uint64_t v32 = a3[2];
    uint64_t v33 = a3[3];
    do
    {
      float v34 = *(float *)(v28 + 4 * v21);
      float v35 = fminf(v34, 1.0);
      if (v35 < 0.0) {
        float v35 = 0.0;
      }
      if (a6) {
        float v34 = v35;
      }
      float v36 = 1.0 - v34;
      float v37 = *(float *)(v30 + 4 * v21);
      float v38 = 1.0 - (float)((float)(1.0 - v34) * (float)(1.0 - v37));
      float v39 = 1.0 / v38;
      if (v38 <= 0.0) {
        float v39 = 0.0;
      }
      *(float *)(v26 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(v37 * *(float *)(v24 + 4 * v21)))
                                        + (float)(*(float *)(v22 + 4 * v21) * v34));
      *(float *)(v27 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(*(float *)(v25 + 4 * v21) * *(float *)(v30 + 4 * v21)))
                                        + (float)(*(float *)(v23 + 4 * v21) * v34));
      *(float *)(v32 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(result[v21] * *(float *)(v30 + 4 * v21)))
                                        + (float)(*(float *)(v29 + 4 * v21) * v34));
      *(float *)(v33 + 4 * v21++) = v38;
    }
    while (a4 != v21);
  }
  return result;
}

float *sub_2483E8FE0(float *result, float *a2, float *a3, float *a4, float *a5, uint64_t a6, char a7, int a8)
{
  if (result == a2 && a3 == a4)
  {
    for (; a6; --a6)
    {
      float v8 = *a3++;
      float v9 = v8;
      float v10 = fminf(v8, 1.0);
      if (v10 < 0.0) {
        float v10 = 0.0;
      }
      if (!a8) {
        float v9 = v10;
      }
      float v11 = *result++;
      *a5++ = 1.0 - (float)((float)(1.0 - v9) * (float)(1.0 - v11));
    }
  }
  else if (a7)
  {
    for (; a6; --a6)
    {
      float v12 = *a4++;
      float v13 = v12;
      float v14 = fminf(v12, 1.0);
      if (v14 < 0.0) {
        float v14 = 0.0;
      }
      float v15 = *a3++;
      float v16 = v15;
      float v17 = *result++;
      float v18 = v17;
      if (!a8) {
        float v13 = v14;
      }
      *a5++ = v16 + (float)(v18 * (float)(1.0 - v13));
    }
  }
  else
  {
    for (; a6; --a6)
    {
      float v19 = *a4++;
      float v20 = v19;
      float v21 = fminf(v19, 1.0);
      if (v21 < 0.0) {
        float v21 = 0.0;
      }
      if (!a8) {
        float v20 = v21;
      }
      float v22 = *a2++;
      float v23 = v22;
      float v24 = 1.0 - (float)((float)(1.0 - v20) * (float)(1.0 - v22));
      float v25 = 1.0 / v24;
      BOOL v26 = v24 <= 0.0;
      float v27 = *a3++;
      float v28 = v27;
      float v29 = *result++;
      float v30 = v23 * v29;
      if (v26) {
        float v25 = 0.0;
      }
      *a5++ = v25 * (float)((float)((float)(1.0 - v20) * v30) + (float)(v28 * v20));
    }
  }
  return result;
}

float sub_2483E90E4(float *__src, float *a2, float *a3, float *__dst, uint64_t a5, char a6)
{
  uint64_t v6 = __src;
  if (a2 == a3)
  {
    memcpy(__dst, __src, 4 * a5);
  }
  else if (a6)
  {
    if (a5)
    {
      float result = 1.0;
      do
      {
        float v8 = *v6++;
        float v9 = v8;
        float v10 = *a2++;
        float v11 = v10;
        float v12 = *a3++;
        float v13 = fminf(v12, 1.0);
        if (v13 < 0.0) {
          float v13 = 0.0;
        }
        *__dst++ = v9 + (float)(v11 * v13);
        --a5;
      }
      while (a5);
    }
  }
  else
  {
    for (; a5; --a5)
    {
      float v14 = *v6++;
      float v15 = v14;
      float v16 = *a2++;
      float v17 = v16;
      float v18 = *a3++;
      float result = v15 + (float)(v17 * v18);
      *__dst++ = result;
    }
  }
  return result;
}

float sub_2483E9160(float *a1, float *a2, float *a3, uint64_t a4, char a5)
{
  if (a5)
  {
    if (a4)
    {
      float result = 1.0;
      do
      {
        float v6 = *a1++;
        float v7 = v6;
        float v8 = *a2++;
        float v9 = fminf(v8, 1.0);
        if (v9 < 0.0) {
          float v9 = 0.0;
        }
        *a3++ = v7 * v9;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      float v10 = *a1++;
      float v11 = v10;
      float v12 = *a2++;
      float result = v11 * v12;
      *a3++ = result;
    }
  }
  return result;
}

void *sub_2483E91B8(void *a1, int a2)
{
  int v3 = 4096 / a2;
  int v7 = 4096 / a2;
  float result = sub_2483E9224(a1, a2, &v7);
  uint64_t v5 = (4096 - v3 * a2);
  if ((int)v5 >= 1)
  {
    float v6 = (_DWORD *)*result;
    do
    {
      ++*v6++;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *sub_2483E9224(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    float v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2483E928C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2483E92A8(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_2483E92E8();
  }
  float result = (char *)sub_2483E9300(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_2483E92E8()
{
}

void *sub_2483E9300(unint64_t a1)
{
  if (a1 >> 62) {
    sub_2483E9338();
  }
  return operator new(4 * a1);
}

void sub_2483E9338()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void sub_2483E936C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2483E93C8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26523BB38, MEMORY[0x263F8C060]);
}

void sub_2483E93B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2483E93C8(std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_2483E93FC(_DWORD **a1, char a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *a1;
  float v6 = (_DWORD *)v4[1];
  if (v5 == v6)
  {
LABEL_6:
    unint64_t v9 = v4[2];
    if ((unint64_t)v5 >= v9)
    {
      uint64_t v11 = v9 - (void)v5;
      uint64_t v12 = v11 >> 1;
      if ((unint64_t)(v11 >> 1) <= 1) {
        uint64_t v12 = 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v5 = sub_2483E9300(v13);
      float v14 = (_DWORD *)*v4;
      float v15 = (_DWORD *)v4[1];
      float v17 = &v5[v16];
      *uint64_t v5 = 4096;
      float v10 = v5 + 1;
      while (v15 != v14)
      {
        int v18 = *--v15;
        *--uint64_t v5 = v18;
      }
      *uint64_t v4 = v5;
      v4[1] = v10;
      v4[2] = v17;
      if (v14)
      {
        operator delete(v14);
        uint64_t v5 = (_DWORD *)*v4;
      }
    }
    else
    {
      *uint64_t v5 = 4096;
      float v10 = v5 + 1;
    }
    v4[1] = v10;
  }
  else
  {
    int v7 = v6 - 1;
    while (!*v7)
    {
      v4[1] = v7;
      if (v7-- == v5) {
        goto LABEL_6;
      }
    }
    float v10 = v7 + 1;
  }
  unint64_t v19 = 1 << a2;
  uint64_t v20 = 0x1000u >> a2;
  if (v10 == v5)
  {
LABEL_25:
    sub_2483E9AC0(v99, 1 << a2);
    float v23 = (_DWORD *)*v4;
    uint64_t v24 = v4[1] - *v4;
    unsigned int v97 = v4;
    float v25 = 0;
    BOOL v26 = 0;
    unint64_t v27 = 0;
    float v28 = 0;
    float v29 = 0;
    unint64_t v30 = 0;
    if (v24)
    {
      unint64_t v31 = 0;
      unint64_t v96 = v19;
      do
      {
        unsigned int v32 = v23[v31];
        *(_DWORD *)(v99[0] + 4 * v31) = v32;
        if (v32 <= v20)
        {
          if (v32 < v20)
          {
            if ((unint64_t)v26 >= v27)
            {
              uint64_t v39 = (v26 - v25) >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
                sub_2483E92E8();
              }
              if ((uint64_t)(v27 - (void)v25) >> 1 > v40) {
                unint64_t v40 = (uint64_t)(v27 - (void)v25) >> 1;
              }
              if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              unint64_t v94 = v30;
              if (v41) {
                unint64_t v41 = (unint64_t)sub_2483E9300(v41);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v46 = (char *)(v41 + 4 * v39);
              *(_DWORD *)uint64_t v46 = v31;
              int v47 = v46 + 4;
              while (v26 != v25)
              {
                int v48 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v46 - 1) = v48;
                v46 -= 4;
              }
              unint64_t v27 = v41 + 4 * v42;
              if (v25)
              {
                unint64_t v49 = v41 + 4 * v42;
                operator delete(v25);
                unint64_t v27 = v49;
              }
              float v25 = v46;
              BOOL v26 = v47;
              unint64_t v30 = v94;
            }
            else
            {
              *(_DWORD *)BOOL v26 = v31;
              v26 += 4;
            }
          }
        }
        else if ((unint64_t)v29 >= v30)
        {
          uint64_t v33 = (v29 - v28) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            sub_2483E92E8();
          }
          uint64_t v35 = v20;
          unint64_t v36 = v27;
          if ((uint64_t)(v30 - (void)v28) >> 1 > v34) {
            unint64_t v34 = (uint64_t)(v30 - (void)v28) >> 1;
          }
          if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v34;
          }
          if (v37) {
            unint64_t v37 = (unint64_t)sub_2483E9300(v37);
          }
          else {
            uint64_t v38 = 0;
          }
          unsigned int v43 = (char *)(v37 + 4 * v33);
          *(_DWORD *)unsigned int v43 = v31;
          unsigned int v44 = v43 + 4;
          while (v29 != v28)
          {
            int v45 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *((_DWORD *)v43 - 1) = v45;
            v43 -= 4;
          }
          unint64_t v30 = v37 + 4 * v38;
          if (v28) {
            operator delete(v28);
          }
          float v28 = v43;
          float v29 = v44;
          unint64_t v27 = v36;
          uint64_t v20 = v35;
          unint64_t v19 = v96;
          uint64_t v4 = v97;
        }
        else
        {
          *(_DWORD *)float v29 = v31;
          v29 += 4;
        }
        ++v31;
        float v23 = (_DWORD *)*v4;
        uint64_t v24 = v4[1] - *v4;
      }
      while (v31 < v24 >> 2);
    }
    uint64_t v50 = v24 >> 2;
    unint64_t v51 = (v24 >> 2);
    if (v51 >= v19)
    {
      int v53 = v26;
    }
    else
    {
      unint64_t v52 = v30;
      do
      {
        *(_DWORD *)(v99[0] + 4 * v51) = 0;
        if ((unint64_t)v26 >= v27)
        {
          uint64_t v54 = (v26 - v25) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            sub_2483E92E8();
          }
          if ((uint64_t)(v27 - (void)v25) >> 1 > v55) {
            unint64_t v55 = (uint64_t)(v27 - (void)v25) >> 1;
          }
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v55;
          }
          if (v56) {
            unint64_t v56 = (unint64_t)sub_2483E9300(v56);
          }
          else {
            uint64_t v57 = 0;
          }
          long long v58 = (char *)(v56 + 4 * v54);
          *(_DWORD *)long long v58 = v50;
          int v53 = v58 + 4;
          while (v26 != v25)
          {
            int v59 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v58 - 1) = v59;
            v58 -= 4;
          }
          unint64_t v27 = v56 + 4 * v57;
          if (v25)
          {
            unint64_t v60 = v56 + 4 * v57;
            operator delete(v25);
            unint64_t v27 = v60;
          }
          float v25 = v58;
          unint64_t v30 = v52;
        }
        else
        {
          *(_DWORD *)BOOL v26 = v50;
          int v53 = v26 + 4;
        }
        BOOL v26 = v53;
        LODWORD(v50) = v50 + 1;
        unint64_t v51 = v50;
      }
      while (v50 < v19);
    }
    if (v28 != v29)
    {
      uint64_t v61 = v29;
      do
      {
        unsigned int v63 = *((_DWORD *)v61 - 1);
        v61 -= 4;
        unsigned int v62 = v63;
        int v65 = v53 - 4;
        uint64_t v64 = *((unsigned int *)v53 - 1);
        unsigned int v66 = *(_DWORD *)(v99[0] + 4 * v64) - v20 + *(_DWORD *)(v99[0] + 4 * v63);
        *(_DWORD *)(v99[0] + 4 * v63) = v66;
        uint64_t v67 = a3 + 8 * v64;
        *(unsigned char *)(v67 + 1) = v63;
        *(_WORD *)(v67 + 4) = v66;
        if (v66 >= v20)
        {
          if (v66 > v20)
          {
            if ((unint64_t)v61 >= v30)
            {
              uint64_t v72 = (v61 - v28) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
LABEL_145:
              }
                sub_2483E92E8();
              unint64_t v95 = v27;
              if ((uint64_t)(v30 - (void)v28) >> 1 > v73) {
                unint64_t v73 = (uint64_t)(v30 - (void)v28) >> 1;
              }
              if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74) {
                unint64_t v74 = (unint64_t)sub_2483E9300(v74);
              }
              else {
                uint64_t v75 = 0;
              }
              unint64_t v79 = (char *)(v74 + 4 * v72);
              *(_DWORD *)unint64_t v79 = v62;
              unint64_t v80 = v79 + 4;
              while (v61 != v28)
              {
                int v81 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v79 - 1) = v81;
                v79 -= 4;
              }
              unint64_t v82 = v74 + 4 * v75;
              if (v28) {
                operator delete(v28);
              }
              int v53 = v65;
              float v28 = v79;
              uint64_t v61 = v80;
              unint64_t v30 = v82;
              unint64_t v27 = v95;
            }
            else
            {
              *(_DWORD *)uint64_t v61 = v62;
              v53 -= 4;
              uint64_t v61 = v29;
            }
          }
          else
          {
            v53 -= 4;
          }
        }
        else if ((unint64_t)v65 >= v27)
        {
          uint64_t v68 = (v65 - v25) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
            goto LABEL_145;
          }
          if ((uint64_t)(v27 - (void)v25) >> 1 > v69) {
            unint64_t v69 = (uint64_t)(v27 - (void)v25) >> 1;
          }
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v69;
          }
          if (v70) {
            unint64_t v70 = (unint64_t)sub_2483E9300(v70);
          }
          else {
            uint64_t v71 = 0;
          }
          unint64_t v76 = (char *)(v70 + 4 * v68);
          *(_DWORD *)unint64_t v76 = v62;
          int v53 = v76 + 4;
          while (v65 != v25)
          {
            int v77 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          unint64_t v27 = v70 + 4 * v71;
          if (v25)
          {
            unint64_t v78 = v70 + 4 * v71;
            operator delete(v25);
            unint64_t v27 = v78;
          }
          float v25 = v76;
        }
        else
        {
          *(_DWORD *)int v65 = v62;
        }
        float v29 = v61;
      }
      while (v28 != v61);
    }
    unint64_t v83 = 0;
    int v84 = (_DWORD *)v99[0];
    uint64_t v85 = *v97;
    unint64_t v86 = (uint64_t)(v97[1] - *v97) >> 2;
    unsigned int v87 = (_WORD *)(a3 + 4);
    do
    {
      int v88 = v84[v83];
      if (v88 == v20)
      {
        LOBYTE(v88) = 0;
        *((unsigned char *)v87 - 3) = v83;
        *unsigned int v87 = 0;
      }
      else
      {
        *v87 -= v88;
      }
      *((unsigned char *)v87 - 4) = v88;
      if (v86 <= v83) {
        LOWORD(v89) = 0;
      }
      else {
        int v89 = *(_DWORD *)(v85 + 4 * v83);
      }
      unint64_t v90 = *((unsigned __int8 *)v87 - 3);
      if (v86 <= v90) {
        LOWORD(v91) = 0;
      }
      else {
        int v91 = *(_DWORD *)(v85 + 4 * v90);
      }
      *(v87 - 1) = v89;
      v87[1] = v91 ^ v89;
      ++v83;
      v87 += 4;
    }
    while (v19 > v83);
    v99[1] = v84;
    operator delete(v84);
    if (v28) {
      operator delete(v28);
    }
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = v10 - v5;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    while (v5[v21] != 4096)
    {
      if (v22 == ++v21) {
        goto LABEL_25;
      }
    }
    uint64_t v92 = 0;
    long long v93 = (_WORD *)(a3 + 4);
    do
    {
      *((unsigned char *)v93 - 3) = v21;
      *((unsigned char *)v93 - 4) = 0;
      *long long v93 = v92;
      *(v93 - 1) = 0;
      v93[1] = 4096;
      v93 += 4;
      v92 += v20;
      --v19;
    }
    while (v19);
  }
}

void sub_2483E9A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    if (!v16)
    {
LABEL_3:
      if (!v15) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  if (!v15) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v15);
  goto LABEL_5;
}

void *sub_2483E9AC0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2483E9B1C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483E9B38(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14 = *a8;
  uint64_t v13 = a8[1];
  unint64_t v15 = (v13 - *a8) / 96;
  if (v13 == *a8)
  {
    BOOL v20 = 0;
  }
  else
  {
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = (v13 - *a8) / 96;
    }
    if (*(_DWORD *)(v14 + 12))
    {
      unint64_t v17 = 0;
      int v18 = (int *)(v14 + 108);
      while (v16 - 1 != v17)
      {
        int v19 = *v18;
        v18 += 24;
        ++v17;
        if (!v19) {
          goto LABEL_13;
        }
      }
      unint64_t v17 = v16;
LABEL_13:
      BOOL v20 = v17 < v15;
    }
    else
    {
      BOOL v20 = 1;
    }
  }
  unint64_t v21 = v15 + 3;
  sub_2483EA250((uint64_t)v113, a5, v15 + 3);
  uint64_t result = v116;
  if (!v116)
  {
    char v97 = v20;
    uint64_t v23 = v114;
    uint64_t v101 = v115;
    uint64_t __n = 4 * a5;
    uint64_t v24 = v13;
    uint64_t v25 = 4 * a4;
    uint64_t v115 = 0;
    if (v24 != v14)
    {
      uint64_t v26 = 0;
      if (v15 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v15;
      }
      uint64_t v102 = v27;
      float v28 = (float *)(v101 + 3 * v114);
      do
      {
        switch(*(unsigned char *)(a7 + 12 * v26))
        {
          case 1:
            float v29 = (void *)(v101 + v23 * (v26 + 3));
            unint64_t v30 = &a2[v26 + 3];
            goto LABEL_24;
          case 2:
            if (a5)
            {
              uint64_t v31 = 8 * v26 + 24;
              uint64_t v32 = *(void *)((char *)a1 + v31);
              uint64_t v33 = (float *)(*(void *)((char *)a2 + v31) + v25);
              unint64_t v34 = (float *)(v32 + v25);
              uint64_t v35 = v28;
              uint64_t v36 = a5;
              do
              {
                float v37 = *v34++;
                float v38 = v37;
                float v39 = *v33++;
                *v35++ = v38 + v39;
                --v36;
              }
              while (v36);
            }
            break;
          case 3:
            sub_2483E9160((float *)(a1[v26 + 3] + 4 * a4), (float *)(a2[v26 + 3] + 4 * a4), (float *)(v101 + v23 * (v26 + 3)), a5, *(unsigned char *)(a7 + 12 * v26 + 8));
            break;
          case 4:
            uint64_t v40 = a7 + 12 * v26;
            uint64_t v41 = *(unsigned int *)(v40 + 4);
            char v42 = *(unsigned char *)(*a8 + 96 * v41 + 72);
            uint64_t v43 = v26 + 3;
            uint64_t v44 = a1[v26 + 3];
            uint64_t v45 = 8 * v41 + 24;
            uint64_t v46 = *(void *)((char *)a1 + v45);
            uint64_t v47 = a2[v26 + 3];
            uint64_t v48 = *(void *)((char *)a2 + v45);
            goto LABEL_32;
          case 5:
            uint64_t v40 = a7 + 12 * v26;
            uint64_t v49 = *(unsigned int *)(v40 + 4);
            char v42 = *(unsigned char *)(*a8 + 96 * v49 + 72);
            uint64_t v43 = v26 + 3;
            uint64_t v44 = a2[v26 + 3];
            uint64_t v50 = 8 * v49 + 24;
            uint64_t v46 = *(void *)((char *)a2 + v50);
            uint64_t v47 = a1[v26 + 3];
            uint64_t v48 = *(void *)((char *)a1 + v50);
LABEL_32:
            sub_2483E8FE0((float *)(v44 + 4 * a4), (float *)(v46 + 4 * a4), (float *)(v47 + 4 * a4), (float *)(v48 + 4 * a4), (float *)(v101 + v23 * v43), a5, v42, *(unsigned __int8 *)(v40 + 8));
            break;
          case 6:
            uint64_t v51 = a7 + 12 * v26;
            uint64_t v52 = v26 + 3;
            uint64_t v53 = a1[v26 + 3];
            uint64_t v54 = a2[v26 + 3];
            unint64_t v55 = &a2[*(unsigned int *)(v51 + 4)];
            goto LABEL_35;
          case 7:
            uint64_t v51 = a7 + 12 * v26;
            uint64_t v52 = v26 + 3;
            uint64_t v53 = a2[v26 + 3];
            uint64_t v54 = a1[v26 + 3];
            unint64_t v55 = &a1[*(unsigned int *)(v51 + 4)];
LABEL_35:
            sub_2483E90E4((float *)(v53 + 4 * a4), (float *)(v54 + 4 * a4), (float *)(v55[3] + 4 * a4), (float *)(v101 + v23 * v52), a5, *(unsigned char *)(v51 + 8));
            break;
          default:
            if (a5)
            {
              float v29 = (void *)(v101 + v23 * (v26 + 3));
              unint64_t v30 = &a1[v26 + 3];
LABEL_24:
              memcpy(v29, (const void *)(*v30 + 4 * a4), __n);
            }
            break;
        }
        ++v26;
        float v28 = (float *)((char *)v28 + v23);
      }
      while (v26 != v102);
    }
    unint64_t v56 = a6;
    int v57 = *a6;
    if (v57 != 2)
    {
      uint64_t v58 = *((unsigned int *)a6 + 1);
      if (v57 == 6)
      {
        if (v97)
        {
          uint64_t v59 = 0;
          uint64_t v60 = v58 + 3;
          uint64_t v61 = (float *)v101;
          do
          {
            sub_2483E90E4((float *)(a1[v59] + 4 * a4), (float *)(a2[v59] + 4 * a4), (float *)(a2[v60] + 4 * a4), v61, a5, v56[8]);
            unint64_t v56 = a6;
            ++v59;
            uint64_t v61 = (float *)((char *)v61 + v23);
          }
          while (v59 != 3);
          goto LABEL_56;
        }
      }
      else
      {
        char v62 = v97;
        if (v57 != 7) {
          char v62 = 1;
        }
        if (v62)
        {
          char v63 = v97 ^ 1;
          if (v57 == 4) {
            char v64 = v97 ^ 1;
          }
          else {
            char v64 = 1;
          }
          if (v64)
          {
            if (v57 != 5) {
              char v63 = 1;
            }
            if (v63)
            {
              switch(*a6)
              {
                case 1u:
                case 4u:
                case 5u:
                  uint64_t v86 = 0;
                  unsigned int v87 = (char *)v101;
                  do
                  {
                    memcpy(v87, (const void *)(a2[v86++] + 4 * a4), __n);
                    v87 += v23;
                  }
                  while (v86 != 3);
                  break;
                case 3u:
                  uint64_t v90 = 0;
                  int v91 = (float *)v101;
                  uint64_t v92 = a6;
                  do
                  {
                    sub_2483E9160((float *)(a1[v90] + 4 * a4), (float *)(a2[v90] + 4 * a4), v91, a5, v92[8]);
                    uint64_t v92 = a6;
                    ++v90;
                    int v91 = (float *)((char *)v91 + v23);
                  }
                  while (v90 != 3);
                  break;
                case 7u:
                  uint64_t v93 = 0;
                  uint64_t v94 = v58 + 3;
                  unint64_t v95 = (float *)v101;
                  unint64_t v96 = a6;
                  do
                  {
                    sub_2483E90E4((float *)(a2[v93] + 4 * a4), (float *)(a1[v93] + 4 * a4), (float *)(a1[v94] + 4 * a4), v95, a5, v96[8]);
                    unint64_t v96 = a6;
                    ++v93;
                    unint64_t v95 = (float *)((char *)v95 + v23);
                  }
                  while (v93 != 3);
                  break;
                default:
                  uint64_t v88 = 0;
                  int v89 = (char *)v101;
                  do
                  {
                    memcpy(v89, (const void *)(a1[v88++] + 4 * a4), __n);
                    v89 += v23;
                  }
                  while (v88 != 3);
                  break;
              }
              goto LABEL_56;
            }
            char v65 = *(unsigned char *)(*a8 + 96 * v58 + 72);
            uint64_t v83 = a2[1] + 4 * a4;
            uint64_t v109 = *a2 + 4 * a4;
            uint64_t v110 = v83;
            uint64_t v67 = v58 + 3;
            uint64_t v84 = a2[v67] + 4 * a4;
            uint64_t v111 = a2[2] + 4 * a4;
            uint64_t v112 = v84;
            uint64_t v85 = a1[1] + 4 * a4;
            uint64_t v105 = *a1 + 4 * a4;
            uint64_t v106 = v85;
            uint64_t v70 = a1[2];
            uint64_t v71 = a1[v67];
          }
          else
          {
            char v65 = *(unsigned char *)(*a8 + 96 * v58 + 72);
            uint64_t v66 = a1[1] + 4 * a4;
            uint64_t v109 = *a1 + 4 * a4;
            uint64_t v110 = v66;
            uint64_t v67 = v58 + 3;
            uint64_t v68 = a1[v67] + 4 * a4;
            uint64_t v111 = a1[2] + 4 * a4;
            uint64_t v112 = v68;
            uint64_t v69 = a2[1] + 4 * a4;
            uint64_t v105 = *a2 + 4 * a4;
            uint64_t v106 = v69;
            uint64_t v70 = a2[2];
            uint64_t v71 = a2[v67];
          }
          uint64_t v107 = v70 + 4 * a4;
          uint64_t v108 = v71 + 4 * a4;
          v104[0] = v101;
          v104[1] = v101 + v23;
          v104[2] = v101 + 2 * v23;
          v104[3] = v101 + v23 * v67;
          sub_2483E8E7C((float *)&v109, &v105, v104, a5, v65, a6[8]);
LABEL_56:
          if (v21)
          {
            int v81 = (char *)v101;
            do
            {
              if (a5) {
                memcpy((void *)(*a3 + 4 * a4), v81, __n);
              }
              v81 += v23;
              ++a3;
              --v21;
            }
            while (v21);
          }
          if (!v101
            || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v101 - 24)), free(*(void **)(v101 - 32)), !v116))
          {
            uint64_t v82 = v115;
            uint64_t v115 = 0;
            if (v82)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v82 - 24));
              free(*(void **)(v82 - 32));
            }
          }
          return 0;
        }
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = (float *)v101;
    do
    {
      if (a5)
      {
        unint64_t v74 = (float *)(a2[v72] + v25);
        uint64_t v75 = (float *)(a1[v72] + v25);
        unint64_t v76 = v73;
        uint64_t v77 = a5;
        do
        {
          float v78 = *v75++;
          float v79 = v78;
          float v80 = *v74++;
          *v76++ = v79 + v80;
          --v77;
        }
        while (v77);
      }
      ++v72;
      unint64_t v73 = (float *)((char *)v73 + v23);
    }
    while (v72 != 3);
    goto LABEL_56;
  }
  return result;
}

double sub_2483EA250(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(a3, a2);
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = 4 * a2 + 139;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x7FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x7FFFFFF80) + 128;
    }
  }
  long long v11 = (unint64_t)v4;
  uint64_t v12 = 4;
  if (sub_24841F648((uint64_t)&v10))
  {
    uint64_t v7 = *((void *)&v11 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((void *)&v11 + 1) = 0;
    if (v7)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
      uint64_t v8 = *(void **)(v7 - 32);
      free(v8);
    }
  }
  else
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v12;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2483EA31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2483EA350(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6 = (unint64_t)(a2 + 63) >> 6;
  unint64_t v7 = (unint64_t)(a3 + 63) >> 6;
  sub_2483EA544((uint64_t)v31, v6, v7);
  if (v36)
  {
    *(_DWORD *)(a1 + 120) = v36;
  }
  else
  {
    size_t v8 = v31[0];
    uint64_t v9 = v31[1];
    uint64_t v11 = v33;
    long long v10 = v34;
    unint64_t v34 = 0;
    uint64_t v12 = v35;
    sub_2483EA544((uint64_t)v25, v6, v7);
    if (v30)
    {
      *(_DWORD *)(a1 + 120) = v30;
      if (v10)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)v10 - 3));
        uint64_t v13 = (void *)*((void *)v10 - 4);
        free(v13);
      }
    }
    else
    {
      size_t v14 = v25[0];
      uint64_t v24 = v25[1];
      uint64_t v15 = v27;
      uint64_t v22 = v12;
      uint64_t v23 = v28;
      float v28 = 0;
      uint64_t v21 = v29;
      if (v8 && v9)
      {
        uint64_t v16 = v10;
        uint64_t v17 = v9;
        do
        {
          bzero(v16, v8);
          v16 += v11;
          --v17;
        }
        while (v17);
      }
      if (v14 && v24)
      {
        int v18 = v23;
        uint64_t v19 = v24;
        do
        {
          bzero(v18, v14);
          v18 += v15;
          --v19;
        }
        while (v19);
      }
      *(_DWORD *)(a1 + 120) = 0;
      float v20 = 0.0;
      if (a4) {
        float v20 = 1.0;
      }
      *(_DWORD *)a1 = v8;
      *(_DWORD *)(a1 + 4) = v9;
      *(void *)(a1 + 8) = v32;
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v22;
      *(_DWORD *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 44) = v24;
      *(void *)(a1 + 48) = v26;
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v23;
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 80) = 0;
      *(float *)(a1 + 88) = v20;
      *(void *)(a1 + 92) = 0x5400000000;
      *(void *)(a1 + 100) = 1011026993;
      *(float *)(a1 + 108) = v20;
      *(void *)(a1 + 112) = 0;
    }
  }
}

void sub_2483EA518(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v1 - 24));
    free(*(void **)(v1 - 32));
  }
  _Unwind_Resume(exception_object);
}

double sub_2483EA544(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(a3, a2);
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = a2 + 142;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x1FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x1FFFFFF80) + 128;
    }
  }
  long long v11 = (unint64_t)v4;
  uint64_t v12 = 1;
  if (sub_24841F648((uint64_t)&v10))
  {
    uint64_t v7 = *((void *)&v11 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((void *)&v11 + 1) = 0;
    if (v7)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
      size_t v8 = *(void **)(v7 - 32);
      free(v8);
    }
  }
  else
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v12;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2483EA60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2483EA640(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = (char *)v1[1];
      do
      {
        size_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2483EA6D0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  long long v9 = (unint64_t *)(a1 + 48);
  *(unsigned char *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = 1245184;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  long long v10 = (_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 84) = xmmword_2484DCA20;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(void *)(a1 + 580) = 0;
  *(_OWORD *)(a1 + 564) = 0u;
  *(_OWORD *)(a1 + 548) = 0u;
  *(_OWORD *)(a1 + 532) = 0u;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_OWORD *)(a1 + 500) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  if (v7)
  {
    *(_DWORD *)(a1 + 20) = 1245184;
  }
  else
  {
    uint64_t v12 = (void *)a3[2];
    if ((unint64_t)v12 > a3[3])
    {
      sub_2483EB0C0(a3);
      unint64_t v14 = *a3;
      uint64_t v15 = a3[1];
    }
    else
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = *a3 | (*v12 << v13);
      a3[2] = (unint64_t)v12 + ((63 - v13) >> 3);
      uint64_t v15 = v13 | 0x38;
      *a3 = v14;
      a3[1] = v13 | 0x38;
    }
    *a3 = HIDWORD(v14);
    a3[1] = v15 - 32;
    *(_DWORD *)(a1 + 20) = v14;
    int v16 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(a1 + 32) = v16;
    *(_DWORD *)(a1 + 36) = 12 - v16;
    *(_DWORD *)(a1 + 40) = ~(-1 << (12 - v16));
  }
  if (*(unsigned char *)(a2 + 96))
  {
    unint64_t v17 = sub_2484D7BCC(0x400000, (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
    unint64_t v18 = *v9;
    *long long v9 = v17;
    if (v18)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v18 - 24));
      free(*(void **)(v18 - 32));
      unint64_t v17 = *v9;
    }
    *(void *)(a1 + 56) = v17;
    *(_DWORD *)(a1 + 76) = *(void *)(a2 + 128);
    *long long v10 = *(_OWORD *)(a2 + 108);
    *(int32x2_t *)(a1 + 80) = vrev64_s32(*(int32x2_t *)(a2 + 100));
    if (a4) {
      int v19 = 120;
    }
    else {
      int v19 = 0;
    }
    *(_DWORD *)(a1 + 584) = v19;
    if (a4)
    {
      unint64_t v20 = 0;
      uint64_t v21 = &byte_24854EAAD;
      do
      {
        int v22 = *(v21 - 1) + *v21 * a4;
        if (v22 <= 1) {
          int v22 = 1;
        }
        *(_DWORD *)(a1 + 104 + 4 * v20++) = v22;
        v21 += 2;
      }
      while (v20 < *(unsigned int *)(a1 + 584));
    }
  }
  return a1;
}

void sub_2483EA950(_Unwind_Exception *a1)
{
  sub_2483E8DDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2483EA964(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, void *a6)
{
  sub_2483E9AC0(v37, a2);
  sub_2483E9AC0(__p, 2 * a2);
  unsigned int v12 = __clz(a2);
  unsigned int v13 = (((-1 << (v12 ^ 0x1F)) + a2) >> (v12 ^ 0x1F)) - v12 + 32;
  if (!a2) {
    unsigned int v13 = 0;
  }
  if (v13 >= 7) {
    unsigned int v13 = 7;
  }
  unint64_t v14 = sub_2483EAC28(a5, *(unsigned __int8 *)(*a6 + v13), a4) + a1;
  if (v14 > a2)
  {
LABEL_6:
    a3 = 1;
    goto LABEL_33;
  }
  if (v14 > a1)
  {
    LODWORD(v15) = 0;
    unint64_t v16 = a2 - a1;
    do
    {
      unsigned int v17 = __clz(v15);
      unsigned int v18 = (((-1 << (v17 ^ 0x1F)) + v15) >> (v17 ^ 0x1F)) - v17 + 32;
      if (!v15) {
        unsigned int v18 = 0;
      }
      if (v18 >= 7) {
        unsigned int v18 = 7;
      }
      unint64_t v15 = sub_2483EAC28(a5, *(unsigned __int8 *)(*a6 + v18), a4);
      *((_DWORD *)v37[0] + a1) = v15;
      if (v16 <= v15) {
        goto LABEL_6;
      }
      ++a1;
      --v16;
    }
    while (v14 != a1);
  }
  if (a3)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v37[0];
    uint64_t v21 = __p[0];
    unint64_t v22 = __clz(a2) ^ 0x3F;
    if ((a2 & (a2 - 1)) != 0) {
      char v23 = v22 + 1;
    }
    else {
      char v23 = v22;
    }
    unint64_t v24 = 1 << v23;
    int v25 = -1;
    do
    {
      v21[v19] = v25-- & (v19 + 1);
      ++v19;
    }
    while (v24 != v19);
    if (a2)
    {
      uint64_t v26 = 0;
      uint64_t v27 = v22 + ((a2 & (a2 - 1)) != 0) + 1;
      do
      {
        uint64_t v28 = 0;
        unsigned int v29 = v20[v26] + 1;
        uint64_t v30 = v27;
        unint64_t v31 = v24;
        do
        {
          uint64_t v32 = v28 + v31;
          v31 >>= 1;
          unsigned int v33 = v21[v32 - 1];
          if (v33 < v29) {
            uint64_t v28 = v32;
          }
          else {
            unsigned int v33 = 0;
          }
          v29 -= v33;
          --v30;
        }
        while (v30);
        *(_DWORD *)(a3 + 4 * v26) = v28;
        for (unint64_t i = v28 + 1; i <= v24; i += i & -(uint64_t)i)
          --v21[i - 1];
        ++v26;
      }
      while (v26 != a2);
    }
    a3 = 0;
  }
LABEL_33:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return a3;
}

void sub_2483EABA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483EABC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 8);
  sub_2483EA640(&v5);
  sub_2483E8DDC((uint64_t *)a1);
  return a1;
}

uint64_t sub_2483EAC28(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v4 = *(_DWORD *)(a1 + 68);
  if (v4)
  {
    uint64_t v36 = *(void *)(a1 + 56);
    int v40 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v40 + 1;
    LODWORD(v18) = *(_DWORD *)(v36 + 4 * (*(void *)&v40 & 0xFFFFFLL));
    *(_DWORD *)(a1 + 68) = v4 - 1;
    goto LABEL_19;
  }
  int v7 = (void *)a3[2];
  if ((unint64_t)v7 > a3[3])
  {
    sub_2483EB0C0(a3);
  }
  else
  {
    unint64_t v8 = a3[1];
    unint64_t v9 = *a3 | (*v7 << v8);
    a3[2] = (unint64_t)v7 + ((63 - v8) >> 3);
    *a3 = v9;
    a3[1] = v8 | 0x38;
  }
  int v10 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v18 = sub_248409FB4(*(void *)(*(void *)(a1 + 8) + 24 * a2), a3);
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 20);
    unint64_t v12 = (unint64_t)(v11 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    unint64_t v13 = *(_DWORD *)(a1 + 40) & v11 & 0xFFFu;
    uint64_t v14 = *(void *)(*(void *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v12);
    if (v14 <= v13) {
      unint64_t v15 = *(void *)(*(void *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v12);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = HIDWORD(v15);
    unint64_t v17 = HIWORD(v15);
    if (v14 <= v13) {
      unint64_t v18 = BYTE1(v14);
    }
    else {
      unint64_t v18 = (unint64_t)(v11 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    }
    unsigned int v19 = v13 + (unsigned __int16)v16 + (v17 ^ WORD1(v14)) * (*(_DWORD *)(a1 + 20) >> 12);
    BOOL v20 = v19 < 0x10000;
    unint64_t v21 = a3[1];
    unint64_t v22 = *a3 >> (16 * v20);
    if (v19 < 0x10000) {
      unsigned int v19 = (unsigned __int16)*a3 | ((unsigned __int16)v19 << 16);
    }
    *(_DWORD *)(a1 + 20) = v19;
    *a3 = v22;
    a3[1] = v21 - 16 * v20;
  }
  unint64_t v23 = *(unsigned int *)(a1 + 84);
  BOOL v24 = v18 >= v23;
  unint64_t v25 = v18 - v23;
  if (v24)
  {
    unint64_t v41 = *(unsigned int *)(a1 + 92);
    BOOL v24 = v25 >= v41;
    unint64_t v42 = v25 - v41;
    if (v24)
    {
      int v44 = *(_DWORD *)(a1 + 96);
      int v43 = *(_DWORD *)(a1 + 100);
      char v45 = *(_DWORD *)(a1 + 88) - (v44 + v43) + (v42 >> (v44 + v43));
      int v46 = *a3 & ~(-1 << v45);
      unint64_t v47 = a3[1] - (v45 & 0x1F);
      *a3 >>= v45 & 0x1F;
      a3[1] = v47;
      LODWORD(v25) = v25 & ~(-1 << v43) | ((unint64_t)(v46 | (((v25 >> v43) & ((1 << v44)
                                                                                                  - 1) | (1 << v44)) << v45)) << v43);
    }
    unsigned int v48 = *(_DWORD *)(a1 + 80);
    unsigned int v49 = v48 + v25;
    *(_DWORD *)(a1 + 68) = v48 + v25;
    uint64_t v50 = (void *)a3[2];
    if ((unint64_t)v50 > a3[3])
    {
      unsigned int v83 = v48;
      sub_2483EB0C0(a3);
      unsigned int v48 = v83;
    }
    else
    {
      unint64_t v51 = a3[1];
      unint64_t v52 = *a3 | (*v50 << v51);
      a3[2] = (unint64_t)v50 + ((63 - v51) >> 3);
      *a3 = v52;
      a3[1] = v51 | 0x38;
    }
    uint64_t v53 = *(unsigned int *)(a1 + 76);
    if (v10)
    {
      unsigned int v84 = v48;
      uint64_t v80 = *(unsigned int *)(a1 + 76);
      unsigned int v81 = sub_248409FB4(*(void *)(*(void *)(a1 + 8) + 24 * v53), a3);
      uint64_t v53 = v80;
      unsigned int v48 = v84;
      unint64_t v61 = v81;
    }
    else
    {
      int v54 = *(_DWORD *)(a1 + 20);
      unint64_t v55 = (unint64_t)(v54 & 0xFFF) >> *(_DWORD *)(a1 + 36);
      unint64_t v56 = *(_DWORD *)(a1 + 40) & v54 & 0xFFFu;
      uint64_t v57 = *(void *)(*(void *)a1 + 8 * (v53 << *(_DWORD *)(a1 + 32)) + 8 * v55);
      if (v57 <= v56) {
        unint64_t v58 = *(void *)(*(void *)a1 + 8 * (v53 << *(_DWORD *)(a1 + 32)) + 8 * v55);
      }
      else {
        unint64_t v58 = 0;
      }
      unint64_t v59 = HIDWORD(v58);
      unint64_t v60 = HIWORD(v58);
      if (v57 <= v56) {
        unint64_t v61 = BYTE1(v57);
      }
      else {
        unint64_t v61 = (unint64_t)(v54 & 0xFFF) >> *(_DWORD *)(a1 + 36);
      }
      unsigned int v62 = v56 + (unsigned __int16)v59 + (v60 ^ WORD1(v57)) * (*(_DWORD *)(a1 + 20) >> 12);
      BOOL v63 = v62 < 0x10000;
      unint64_t v64 = a3[1];
      unint64_t v65 = *a3 >> (16 * v63);
      if (v62 < 0x10000) {
        unsigned int v62 = (unsigned __int16)*a3 | ((unsigned __int16)v62 << 16);
      }
      *(_DWORD *)(a1 + 20) = v62;
      *a3 = v65;
      a3[1] = v64 - 16 * v63;
    }
    uint64_t v66 = (_DWORD *)(*(void *)(a1 + 24) + 16 * v53);
    unint64_t v67 = v66[1];
    BOOL v24 = v61 >= v67;
    unint64_t v68 = v61 - v67;
    if (v24)
    {
      char v69 = *v66;
      uint64_t v72 = v66 + 2;
      int v70 = v66[2];
      int v71 = v72[1];
      char v73 = v69 - (v70 + v71) + (v68 >> (v70 + v71));
      int v74 = *a3 & ~(-1 << v73);
      unint64_t v75 = a3[1] - (v73 & 0x1F);
      *a3 >>= v73 & 0x1F;
      a3[1] = v75;
      LODWORD(v61) = v61 & ~(-1 << v71) | ((unint64_t)(v74 | (((v61 >> v71) & ((1 << v70)
                                                                                                  - 1) | (1 << v70)) << v73)) << v71);
    }
    uint64_t v76 = *(unsigned int *)(a1 + 584);
    if (v61 >= v76) {
      unint64_t v77 = v61 - v76 + 1;
    }
    else {
      unint64_t v77 = *(unsigned int *)(a1 + 4 * v61 + 104);
    }
    float v37 = (_DWORD *)(a1 + 64);
    unint64_t v78 = *(unsigned int *)(a1 + 64);
    if (v77 > v78) {
      unint64_t v77 = *(unsigned int *)(a1 + 64);
    }
    if (v77 > 0x100000)
    {
      *(_DWORD *)(a1 + 72) = v78 - 0x100000;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = v78 - v77;
      if (!v77)
      {
        if (v49 >= 0x100000) {
          int v82 = 0x100000;
        }
        else {
          int v82 = v49;
        }
        bzero(*(void **)(a1 + 56), (4 * v82));
        unsigned int v49 = *(_DWORD *)(a1 + 68);
        unsigned int v48 = *(_DWORD *)(a1 + 80);
      }
    }
    if (v49 < v48)
    {
      LODWORD(v18) = 0;
      return v18;
    }
    uint64_t v36 = *(void *)(a1 + 56);
    int v79 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v79 + 1;
    LODWORD(v18) = *(_DWORD *)(v36 + 4 * (*(void *)&v79 & 0xFFFFFLL));
    *(_DWORD *)(a1 + 68) = v49 - 1;
    goto LABEL_20;
  }
  uint64_t v26 = (int *)(*(void *)(a1 + 24) + 16 * a2);
  unint64_t v27 = v26[1];
  BOOL v24 = v18 >= v27;
  unint64_t v28 = v18 - v27;
  if (v24)
  {
    int v29 = *v26;
    uint64_t v32 = v26 + 2;
    int v30 = v26[2];
    int v31 = v32[1];
    char v33 = v29 - (v30 + v31) + (v28 >> (v30 + v31));
    int v34 = *a3 & ~(-1 << v33);
    unint64_t v35 = a3[1] - (v33 & 0x1F);
    *a3 >>= v33 & 0x1F;
    a3[1] = v35;
    LODWORD(v18) = v18 & ~(-1 << v31) | ((unint64_t)(v34 | (((v18 >> v31) & ((1 << v30)
                                                                                                - 1) | (1 << v30)) << v33)) << v31);
  }
  uint64_t v36 = *(void *)(a1 + 56);
  if (v36)
  {
LABEL_19:
    float v37 = (_DWORD *)(a1 + 64);
LABEL_20:
    int v38 = (*v37)++;
    *(_DWORD *)(v36 + 4 * (*(void *)&v38 & 0xFFFFFLL)) = v18;
  }
  return v18;
}

void *sub_2483EB0C0(void *result)
{
  unint64_t v1 = result[1];
  if (v1 <= 0x37)
  {
    uint64_t v2 = (unsigned __int8 *)result[2];
    unint64_t v3 = result[3] + 8;
    while ((unint64_t)v2 < v3)
    {
      result[2] = v2 + 1;
      unint64_t v4 = v1 + 8;
      *result |= (unint64_t)*v2 << v1;
      result[1] = v1 + 8;
      ++v2;
      BOOL v5 = v1 >= 0x30;
      v1 += 8;
      if (v5) {
        goto LABEL_8;
      }
    }
  }
  unint64_t v4 = v1;
LABEL_8:
  result[5] += (63 - v4) >> 3;
  result[1] = ((63 - v4) & 0xFFFFFFFFFFFFFFF8) + v4;
  return result;
}

void sub_2483EB138(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v2 - 24));
    free(*(void **)(v2 - 32));
  }
}

uint64_t *sub_2483EB164(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_2483E8DDC((uint64_t *)(v2 + 48));
    JUMPOUT(0x24C579F90);
  }
  return result;
}

void sub_2483EB1C4(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unsigned int v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    unsigned int v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = (char *)sub_2483E9300(v10);
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  uint64_t v14 = &v11[4 * v5];
  unint64_t v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  unint64_t v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t sub_2483EB2D8(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = (2 * *(_DWORD *)(a1 + 8)) ^ (*(int *)(a1 + 8) >> 31);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x100001200000012, 0x400001402000013, 0, &v6);
  if (!result)
  {
    *(_DWORD *)(a1 + 8) = -(v6 & 1) ^ (v6 >> 1);
    unsigned int v5 = (2 * *(_DWORD *)(a1 + 12)) ^ (*(int *)(a1 + 12) >> 31);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x100001200000012, 0x400001402000013, 0, &v5);
    if (!result) {
      *(_DWORD *)(a1 + 12) = -(v5 & 1) ^ (v5 >> 1);
    }
  }
  return result;
}

void sub_2483EB3EC()
{
}

uint64_t sub_2483EB404(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    *(unsigned char *)(a1 + 12) = 1;
    *(void *)(a1 + 16) = 0x20032DCD5;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v4 != 2)) {
    return 0;
  }
  unsigned int v6 = (unsigned char *)(a1 + 12);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 12);
  if (!result)
  {
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *v6))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 24, 10000000, a1 + 16);
      if (result) {
        return result;
      }
      if ((*(_DWORD *)(a1 + 16) - 10000001) < 0xFF676E44) {
        return 1;
      }
    }
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v6 == 0)) {
      return 0;
    }
    unsigned int v9 = *(_DWORD *)(a1 + 20);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 13, &v9);
    if (!result)
    {
      unint64_t v7 = v9;
      *(_DWORD *)(a1 + 20) = v9;
      BOOL v8 = ((1 << v7) & 0x72106) == 0 || v7 > 0x3F;
      uint64_t result = v8;
      if (!v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_2483EB614()
{
}

uint64_t sub_2483EB62C(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  int v4 = (unsigned char *)(a1 + 9);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 9);
  if (!result)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 0, &v11);
    if (!result)
    {
      unsigned int v6 = v11;
      *(_DWORD *)(a1 + 56) = v11;
      uint64_t result = v6 > 3;
      if (v6 <= 3)
      {
        if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 0)) {
          return (!*v4 || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) & 1) == 0)
        }
              && *(void *)(a1 + 32) == *(void *)(a1 + 40);
        unint64_t v7 = (_DWORD *)(a1 + 16);
        int v8 = *(_DWORD *)(a1 + 56);
        if (v8 == 2) {
          *unint64_t v7 = 1;
        }
        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v8 != 2))
        {
          uint64_t result = sub_2483EBAA8(a2, (unsigned int *)(a1 + 16));
          if (result) {
            return result;
          }
          if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v7 == 2))
          {
            *(void *)(a1 + 120) = *(void *)(a1 + 76);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 112);
            if (result) {
              return result;
            }
            *(void *)(a1 + 76) = *(void *)(a1 + 120);
          }
        }
        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, (*(_DWORD *)(a1 + 56) - 3) < 0xFFFFFFFE))
        {
          uint64_t result = sub_2483EBB3C(a2, (unsigned int *)(a1 + 20));
          if (result) {
            return result;
          }
          if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 20) == 2))
          {
            *(void *)(a1 + 160) = *(void *)(a1 + 84);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 152);
            if (result) {
              return result;
            }
            *(void *)(a1 + 84) = *(void *)(a1 + 160);
            *(void *)(a1 + 176) = *(void *)(a1 + 92);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 168);
            if (result) {
              return result;
            }
            *(void *)(a1 + 92) = *(void *)(a1 + 176);
            *(void *)(a1 + 192) = *(void *)(a1 + 100);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 184);
            if (result) {
              return result;
            }
            *(void *)(a1 + 100) = *(void *)(a1 + 192);
          }
        }
        unsigned int v9 = (void *)(a1 + 64);
        *(void *)(a1 + 140) = *(void *)(a1 + 64);
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 148) = *(_DWORD *)(a1 + 72);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 128);
        if (!result)
        {
          *unsigned int v9 = *(void *)(a1 + 140);
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 148);
          uint64_t result = sub_2483EBBD0(a2, (unsigned int *)(a1 + 24));
          if (!result)
          {
            if (*(_DWORD *)(a1 + 56) == 3 || !*(unsigned char *)v9 && *(_DWORD *)(a1 + 72) == 2) {
              return 1;
            }
            sub_2483EBC50(a1);
            if (v10) {
              return 1;
            }
            return (!*v4 || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) & 1) == 0)
                && *(void *)(a1 + 32) == *(void *)(a1 + 40);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2483EBAA8(uint64_t a1, unsigned int *a2)
{
  unsigned int v6 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, 0x8000000180000000, 0x24500000043, 1, &v6);
  if (!result)
  {
    unint64_t v4 = v6;
    *a2 = v6;
    return ((1 << v4) & 0xC06) == 0 || v4 > 0x3F;
  }
  return result;
}

uint64_t sub_2483EBB3C(uint64_t a1, unsigned int *a2)
{
  unsigned int v6 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, 0x8000000180000000, 0x24500000043, 1, &v6);
  if (!result)
  {
    unint64_t v4 = v6;
    *a2 = v6;
    return ((1 << v4) & 0xA06) == 0 || v4 > 0x3F;
  }
  return result;
}

uint64_t sub_2483EBBD0(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, 0x8000000180000000, 0x24500000043, 1, &v5);
  if (!result)
  {
    unsigned int v4 = v5;
    *a2 = v5;
    return v4 > 3;
  }
  return result;
}

void sub_2483EBC50(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_2483EBCC0((uint64_t)v4, a1 + 16);
  sub_2483EBE44((double *)v4, v2);
  if (v3) {
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
}

void sub_2483EBCC0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(unsigned char *)(a2 + 12))
  {
    int v4 = *(_DWORD *)(a2 + 40);
    int v5 = *(_DWORD *)a2;
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    v6.f64[0] = sub_2483F04FC((int *)a2);
    *(float64_t *)(a1 + 8) = v6.f64[0];
    *(void *)(a1 + 16) = v7;
    if (v4 == 3 || !v4)
    {
      int v8 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a1 + 24) = v8;
      if (v8 > 8)
      {
        if (v8 == 9)
        {
          float64x2_t v9 = (float64x2_t)xmmword_2484DCA90;
          float64x2_t v6 = (float64x2_t)xmmword_2484DCAA0;
          float64x2_t v10 = (float64x2_t)xmmword_2484DCAB0;
        }
        else
        {
          float64x2_t v9 = (float64x2_t)xmmword_2484DCA60;
          float64x2_t v6 = (float64x2_t)xmmword_2484DCA70;
          float64x2_t v10 = (float64x2_t)xmmword_2484DCA80;
        }
      }
      else if (v8 == 1)
      {
        float64x2_t v9 = (float64x2_t)xmmword_2484DCA30;
        float64x2_t v6 = (float64x2_t)xmmword_2484DCA40;
        float64x2_t v10 = (float64x2_t)xmmword_2484DCA50;
      }
      else
      {
        uint64_t v11 = *(void *)(a2 + 68);
        v12.i64[0] = (int)v11;
        v12.i64[1] = SHIDWORD(v11);
        float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
        float64x2_t v6 = vmulq_f64(vcvtq_f64_s64(v12), v13);
        uint64_t v14 = *(void *)(a2 + 76);
        v12.i64[0] = (int)v14;
        v12.i64[1] = SHIDWORD(v14);
        float64x2_t v10 = vmulq_f64(vcvtq_f64_s64(v12), v13);
        uint64_t v15 = *(void *)(a2 + 84);
        v12.i64[0] = (int)v15;
        v12.i64[1] = SHIDWORD(v15);
        float64x2_t v9 = vmulq_f64(vcvtq_f64_s64(v12), v13);
      }
      *(float64x2_t *)(a1 + 32) = v6;
      *(float64x2_t *)(a1 + 48) = v10;
      *(float64x2_t *)(a1 + 64) = v9;
    }
    if (*(unsigned char *)(a2 + 48))
    {
      LODWORD(v6.f64[0]) = *(_DWORD *)(a2 + 52);
      v6.f64[0] = (double)*(unint64_t *)&v6.f64[0] * 0.0000001;
      int v16 = 0xFFFF;
    }
    else
    {
      int v16 = *(_DWORD *)(a2 + 56);
      v6.f64[0] = 0.0;
    }
    *(_DWORD *)(a1 + 80) = v16;
    *(float64_t *)(a1 + 88) = v6.f64[0];
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 2;
    *(_DWORD *)(a1 + 80) = 2;
    *(void *)a1 = 0x200000003;
  }
}

void sub_2483EBE44(double *a1, uint64_t a2)
{
  uint64_t v388 = *MEMORY[0x263EF8340];
  v369[0] = 0;
  v369[1] = 0;
  uint64_t v370 = 0;
  v367[0] = 0;
  v367[1] = 0;
  uint64_t v368 = 0;
  v365[0] = 0;
  v365[1] = 0;
  uint64_t v366 = 0;
  if (*(_DWORD *)a1 <= 2u)
  {
    int v3 = *((_DWORD *)a1 + 20);
    if (v3 != 2 && (*(_DWORD *)a1 != 2 || !*((_DWORD *)a1 + 24)))
    {
      __str[0] = 0;
      sub_2483EE700(v369, 0x80uLL, __str);
      sub_2483EE828(0, 0, (unint64_t *)v369);
      int v5 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)7)
      {
        sub_2483EE8AC((unint64_t *)v369, 8 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        int v5 = v369[0];
      }
      v5[1] = 543979626;
      sub_2483EE828(71303168, 8, (unint64_t *)v369);
      int v6 = *(_DWORD *)a1;
      uint64_t v7 = v369[0];
      unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0xF)
      {
        sub_2483EE8AC((unint64_t *)v369, 16 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v6 == 2) {
        int v9 = 1919837043;
      }
      else {
        int v9 = 1920233069;
      }
      v7[3] = v9;
      int v10 = *(_DWORD *)a1;
      if (v8 <= 0x13)
      {
        sub_2483EE8AC((unint64_t *)v369, 20 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v10 == 1) {
        int v11 = 1497453127;
      }
      else {
        int v11 = 541214546;
      }
      v7[4] = v11;
      if (sub_2483EE9E4(a1)) {
        int v12 = 543318348;
      }
      else {
        int v12 = 542792024;
      }
      if (v8 <= 0x17)
      {
        sub_2483EE8AC((unint64_t *)v369, 24 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[5] = v12;
      if (v8 <= 0x19)
      {
        sub_2483EE8AC((unint64_t *)v369, 26 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 12) = -7417;
      if (v8 <= 0x1B)
      {
        sub_2483EE8AC((unint64_t *)v369, 28 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 13) = 3072;
      if (v8 <= 0x1D)
      {
        sub_2483EE8AC((unint64_t *)v369, 30 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 14) = 256;
      if (v8 <= 0x1F)
      {
        sub_2483EE8AC((unint64_t *)v369, 32 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 15) = 0;
      if (v8 <= 0x21)
      {
        sub_2483EE8AC((unint64_t *)v369, 34 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 16) = 0;
      if (v8 <= 0x23)
      {
        sub_2483EE8AC((unint64_t *)v369, 36 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 17) = 0;
      if (v8 <= 0x27)
      {
        sub_2483EE8AC((unint64_t *)v369, 40 - v8);
        uint64_t v7 = v369[0];
        unint64_t v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[9] = 1886610273;
      if (v8 <= 0x2B)
      {
        sub_2483EE8AC((unint64_t *)v369, 44 - v8);
        uint64_t v7 = v369[0];
      }
      v7[10] = 1280331841;
      sub_2483EE828(0, 44, (unint64_t *)v369);
      sub_2483EE828(0, 48, (unint64_t *)v369);
      sub_2483EE828(0, 52, (unint64_t *)v369);
      sub_2483EE828(0, 56, (unint64_t *)v369);
      sub_2483EE828(0, 60, (unint64_t *)v369);
      sub_2483EE828(*((_DWORD *)a1 + 24), 64, (unint64_t *)v369);
      sub_2483EE828(63190, 68, (unint64_t *)v369);
      sub_2483EE828(0x10000, 72, (unint64_t *)v369);
      sub_2483EE828(54061, 76, (unint64_t *)v369);
      float64x2_t v13 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0x53)
      {
        sub_2483EE8AC((unint64_t *)v369, 84 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        float64x2_t v13 = v369[0];
      }
      v13[20] = 543979626;
      v362 = 0;
      v363 = 0;
      uint64_t v364 = 0;
      sub_2483EE828(0, 0, (unint64_t *)v367);
      uint64_t v360 = 0;
      uint64_t v361 = 0;
      sub_2483EEA38(&v379, off_26523BEA8[*(int *)a1]);
      int v14 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != 2)
      {
        std::string::push_back(&v379, 95);
        int v15 = *((_DWORD *)a1 + 1);
        if (v15 == 2)
        {
          double v16 = a1[1];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v16);
          unint64_t v17 = (std::string *)sub_2483EEA38(&v380, __str);
          std::string::push_back(v17, 59);
          *(void *)&long long v386 = v381;
          long long v385 = v380;
          v381 = 0;
          long long v380 = 0uLL;
          if ((SBYTE7(v386) & 0x80u) == 0) {
            int v18 = (const std::string::value_type *)&v385;
          }
          else {
            int v18 = (const std::string::value_type *)v385;
          }
          if ((SBYTE7(v386) & 0x80u) == 0) {
            std::string::size_type v19 = BYTE7(v386);
          }
          else {
            std::string::size_type v19 = *((void *)&v385 + 1);
          }
          std::string::append(&v379, v18, v19);
          if (SBYTE7(v386) < 0) {
            operator delete((void *)v385);
          }
          if (SHIBYTE(v381) < 0) {
            operator delete((void *)v380);
          }
          double v20 = a1[2];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v20);
          sub_2483EEA38(&v385, __str);
          if ((SBYTE7(v386) & 0x80u) == 0) {
            unint64_t v21 = (const std::string::value_type *)&v385;
          }
          else {
            unint64_t v21 = (const std::string::value_type *)v385;
          }
          if ((SBYTE7(v386) & 0x80u) == 0) {
            std::string::size_type v22 = BYTE7(v386);
          }
          else {
            std::string::size_type v22 = *((void *)&v385 + 1);
          }
          std::string::append(&v379, v21, v22);
          if (SBYTE7(v386) < 0)
          {
            unint64_t v23 = (void *)v385;
LABEL_73:
            operator delete(v23);
          }
        }
        else
        {
          if (v15 == 1)
          {
            BOOL v24 = "D65";
          }
          else if (v15 == 11)
          {
            BOOL v24 = "DCI";
          }
          else
          {
            BOOL v24 = "EER";
          }
          sub_2483EEA38(__str, v24);
          if (v376[7] >= 0) {
            unint64_t v25 = __str;
          }
          else {
            unint64_t v25 = *(char **)__str;
          }
          if (v376[7] >= 0) {
            std::string::size_type v26 = v376[7];
          }
          else {
            std::string::size_type v26 = *(void *)&__str[8];
          }
          std::string::append(&v379, v25, v26);
          if ((v376[7] & 0x80000000) != 0)
          {
            unint64_t v23 = *(void **)__str;
            goto LABEL_73;
          }
        }
      }
      if ((*(_DWORD *)a1 - 1) < 2) {
        goto LABEL_148;
      }
      std::string::push_back(&v379, 95);
      int v27 = *((_DWORD *)a1 + 6);
      if (v27 == 2)
      {
        double v28 = a1[4];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v28);
        int v29 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v29, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          int v30 = (const std::string::value_type *)&v385;
        }
        else {
          int v30 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v31 = BYTE7(v386);
        }
        else {
          std::string::size_type v31 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v30, v31);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v32 = a1[5];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v32);
        char v33 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v33, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          int v34 = (const std::string::value_type *)&v385;
        }
        else {
          int v34 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v35 = BYTE7(v386);
        }
        else {
          std::string::size_type v35 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v34, v35);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v36 = a1[6];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v36);
        float v37 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v37, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          int v38 = (const std::string::value_type *)&v385;
        }
        else {
          int v38 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v39 = BYTE7(v386);
        }
        else {
          std::string::size_type v39 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v38, v39);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v40 = a1[7];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v40);
        unint64_t v41 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v41, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          unint64_t v42 = (const std::string::value_type *)&v385;
        }
        else {
          unint64_t v42 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v43 = BYTE7(v386);
        }
        else {
          std::string::size_type v43 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v42, v43);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v44 = a1[8];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v44);
        char v45 = (std::string *)sub_2483EEA38(&v380, __str);
        std::string::push_back(v45, 59);
        *(void *)&long long v386 = v381;
        long long v385 = v380;
        v381 = 0;
        long long v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0) {
          int v46 = (const std::string::value_type *)&v385;
        }
        else {
          int v46 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v47 = BYTE7(v386);
        }
        else {
          std::string::size_type v47 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v46, v47);
        if (SBYTE7(v386) < 0) {
          operator delete((void *)v385);
        }
        if (SHIBYTE(v381) < 0) {
          operator delete((void *)v380);
        }
        double v48 = a1[9];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v48);
        sub_2483EEA38(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0) {
          unsigned int v49 = (const std::string::value_type *)&v385;
        }
        else {
          unsigned int v49 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v50 = BYTE7(v386);
        }
        else {
          std::string::size_type v50 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v49, v50);
        if (SBYTE7(v386) < 0)
        {
          unint64_t v51 = (void *)v385;
LABEL_147:
          operator delete(v51);
        }
      }
      else
      {
        if (v27 == 1)
        {
          unint64_t v52 = "SRG";
        }
        else if (v27 == 11)
        {
          unint64_t v52 = "DCI";
        }
        else
        {
          unint64_t v52 = "202";
        }
        sub_2483EEA38(__str, v52);
        if (v376[7] >= 0) {
          uint64_t v53 = __str;
        }
        else {
          uint64_t v53 = *(char **)__str;
        }
        if (v376[7] >= 0) {
          std::string::size_type v54 = v376[7];
        }
        else {
          std::string::size_type v54 = *(void *)&__str[8];
        }
        std::string::append(&v379, v53, v54);
        if ((v376[7] & 0x80000000) != 0)
        {
          unint64_t v51 = *(void **)__str;
          goto LABEL_147;
        }
      }
LABEL_148:
      std::string::push_back(&v379, 95);
      sub_2483EEA38(__str, off_26523BEC8[*((int *)a1 + 24)]);
      if (v376[7] >= 0) {
        unint64_t v55 = __str;
      }
      else {
        unint64_t v55 = *(char **)__str;
      }
      if (v376[7] >= 0) {
        std::string::size_type v56 = v376[7];
      }
      else {
        std::string::size_type v56 = *(void *)&__str[8];
      }
      std::string::append(&v379, v55, v56);
      if ((v376[7] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (v14 != 2)
      {
        int v57 = *((_DWORD *)a1 + 20);
        std::string::push_back(&v379, 95);
        if (v57 != 0xFFFF)
        {
          unsigned int v62 = "SRG";
          switch(v57)
          {
            case 8:
              unsigned int v62 = "Lin";
              goto LABEL_174;
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
LABEL_495:
              __break(1u);
              return;
            case 13:
              goto LABEL_174;
            case 16:
              unsigned int v62 = "PeQ";
              goto LABEL_174;
            case 17:
              unsigned int v62 = "DCI";
              goto LABEL_174;
            case 18:
              unsigned int v62 = "HLG";
              goto LABEL_174;
            default:
              if (v57 == 1) {
                unsigned int v62 = "709";
              }
              else {
                unsigned int v62 = "TF?";
              }
LABEL_174:
              sub_2483EEA38(__str, v62);
              if (v376[7] >= 0) {
                BOOL v63 = __str;
              }
              else {
                BOOL v63 = *(char **)__str;
              }
              if (v376[7] >= 0) {
                std::string::size_type v64 = v376[7];
              }
              else {
                std::string::size_type v64 = *(void *)&__str[8];
              }
              std::string::append(&v379, v63, v64);
              if ((v376[7] & 0x80000000) == 0) {
                goto LABEL_183;
              }
              unint64_t v61 = *(void **)__str;
              break;
          }
          goto LABEL_182;
        }
        std::string::push_back(&v379, 103);
        double v58 = a1[11];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v58);
        sub_2483EEA38(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0) {
          unint64_t v59 = (const std::string::value_type *)&v385;
        }
        else {
          unint64_t v59 = (const std::string::value_type *)v385;
        }
        if ((SBYTE7(v386) & 0x80u) == 0) {
          std::string::size_type v60 = BYTE7(v386);
        }
        else {
          std::string::size_type v60 = *((void *)&v385 + 1);
        }
        std::string::append(&v379, v59, v60);
        if (SBYTE7(v386) < 0)
        {
          unint64_t v61 = (void *)v385;
LABEL_182:
          operator delete(v61);
        }
      }
LABEL_183:
      sub_2483EEAE8((uint64_t)&v379, (unint64_t *)v365);
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v379.__r_.__value_.__l.__data_);
      }
      sub_2483EED94((uint64_t)v365, &v361, &v360);
      sub_2483EEEC0("desc", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      sub_2483EEA38(__p, "CC0");
      sub_2483EEAE8((uint64_t)__p, (unint64_t *)v365);
      sub_2483EED94((uint64_t)v365, &v361, &v360);
      sub_2483EEEC0("cprt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      if (*(_DWORD *)a1 == 1)
      {
        double v65 = a1[2];
        if (fabs(v65) < 1.0e-12) {
          goto LABEL_379;
        }
        double v66 = a1[1];
        float v67 = 1.0 / v65;
        double v68 = v67;
        float v69 = v66 * v68;
        *(float *)__str = v69;
        *(_DWORD *)&__str[4] = 1065353216;
        float v70 = (1.0 - v66 - v65) * v68;
        *(float *)&__str[8] = v70;
        int v71 = sub_2483EF004((uint64_t)__str, (unint64_t *)v365);
      }
      else
      {
        int v71 = sub_2483EF004((uint64_t)&unk_248552CC8, (unint64_t *)v365);
      }
      if (!v71)
      {
        sub_2483EED94((uint64_t)v365, &v361, &v360);
        sub_2483EEEC0("wtpt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
        if (*(_DWORD *)a1 == 1)
        {
LABEL_191:
          if (sub_2483EE9E4(a1))
          {
            double v72 = a1[1];
            double v73 = a1[2];
            double v74 = a1[4];
            double v75 = a1[5];
            double v76 = a1[6];
            double v77 = a1[7];
            double v78 = a1[8];
            double v79 = a1[9];
            int v345 = *((_DWORD *)a1 + 20);
            uint64_t v80 = (char *)v365[0];
            int64_t v81 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2483EE8AC((unint64_t *)v365, 4uLL);
              uint64_t v80 = (char *)v365[0];
            }
            *(_DWORD *)&v80[v81] = 829711981;
            sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            int v82 = v365[0];
            int64_t v83 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              int v82 = v365[0];
            }
            v82[v83] = 3;
            unsigned int v84 = v365[0];
            int64_t v85 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              unsigned int v84 = v365[0];
            }
            v84[v85] = 3;
            uint64_t v86 = v365[0];
            int64_t v87 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              uint64_t v86 = v365[0];
            }
            v86[v87] = 9;
            uint64_t v88 = v365[0];
            int64_t v89 = (char *)v365[1] - (char *)v365[0];
            double v353 = v79;
            if ((char *)v365[1] - (char *)v365[0] == -1)
            {
              double v90 = v77;
              double v91 = v74;
            }
            else
            {
              sub_2483EE8AC((unint64_t *)v365, 1uLL);
              double v90 = v77;
              double v91 = v74;
              uint64_t v88 = v365[0];
            }
            uint64_t v147 = 0;
            v88[v89] = 0;
            do
            {
              for (uint64_t i = 0; i != 3; ++i)
              {
                if (v147 == i) {
                  float v149 = 1.0;
                }
                else {
                  float v149 = 0.0;
                }
                sub_2483EE828((int)(float)((float)(v149 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              }
              ++v147;
            }
            while (v147 != 3);
            for (uint64_t j = 0; j != 3; ++j)
            {
              for (uint64_t k = 0; k != 256; ++k)
              {
                int v152 = v365[0];
                int64_t v153 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2483EE8AC((unint64_t *)v365, 1uLL);
                  int v152 = v365[0];
                }
                v152[v153] = k;
              }
            }
            uint64_t v341 = a2;
            unint64_t v154 = 0;
            int v155 = (float *)v379.__r_.__value_.__r.__words + 1;
            float v156 = v91;
            float v157 = v75;
            float v350 = v157;
            float v351 = v156;
            float v158 = v76;
            float v159 = v90;
            float v160 = v78;
            float v346 = v160;
            float v347 = v158;
            float v161 = v353;
            float v348 = v161;
            float v349 = v159;
            float v162 = v72;
            float v355 = v162;
            float v163 = v73;
            float v354 = v163;
            float v164 = 0.125;
            int v165 = &xmmword_2484DD000;
LABEL_271:
            unint64_t v342 = v154;
            float v166 = (float)v154 * v164;
            double v167 = pow(v166, 0.0126833135);
            double v168 = v167 + -0.8359375;
            if (v167 + -0.8359375 < 0.0) {
              double v168 = 0.0;
            }
            long double v169 = pow(v168 / (v167 * -18.6875 + 18.8515625), 6.27739464);
            unint64_t v170 = 0;
            *(float *)&long double v169 = v169;
            float v171 = fabsf(*(float *)&v169);
            float v352 = v166;
            if (v166 == 0.0) {
              float v171 = 0.0;
            }
            *(float *)&std::string::size_type v344 = v171;
LABEL_276:
            unint64_t v343 = v170;
            float v172 = (float)v170 * v164;
            double v173 = pow(v172, 0.0126833135);
            double v174 = v173 + -0.8359375;
            if (v173 + -0.8359375 < 0.0) {
              double v174 = 0.0;
            }
            unint64_t v175 = 0;
            float v176 = pow(v174 / (v173 * -18.6875 + 18.8515625), 6.27739464);
            float v177 = fabsf(v176);
            if (v172 == 0.0) {
              float v177 = 0.0;
            }
            *((float *)&v344 + 1) = v177;
            while (1)
            {
              *(float *)v372 = v352;
              *(float *)&v372[1] = v172;
              float v178 = (float)v175 * v164;
              *(float *)&v372[2] = v178;
              if (sub_2483EF310((uint64_t)&v385, v351, v350, v347, v349, v346, v348, v355, v354)) {
                break;
              }
              float v181 = *((float *)&v385 + 3);
              uint64_t v182 = v386;
              if (v345 == 16)
              {
                float v183 = *(float *)&v386;
                v379.__r_.__value_.__r.__words[0] = v344;
                float v184 = 0.0;
                if (v178 != 0.0)
                {
                  double v185 = pow(v178, 0.0126833135);
                  double v186 = v185 + -0.8359375;
                  if (v185 + -0.8359375 < 0.0) {
                    double v186 = 0.0;
                  }
                  float v187 = pow(v186 / (v185 * -18.6875 + 18.8515625), 6.27739464);
                  float v184 = fabsf(v187);
                }
                *(float *)&v379.__r_.__value_.__r.__words[1] = v184;
                *(_OWORD *)__str = xmmword_2484DCAC0;
                float v181 = *(float *)&v182;
                *(_DWORD *)v376 = v182;
                *(float *)&v376[4] = v183;
                float v188 = *((float *)&v182 + 1);
                *(_DWORD *)&v376[8] = HIDWORD(v182);
                *(_OWORD *)&v376[12] = xmmword_2484DCAD0;
                v189.i64[1] = 0x3FD6B4FF3ECEC3F3;
                long long v377 = xmmword_2484DCAE0;
                v189.i64[0] = 0x3B83126F42200000;
                uint64_t v378 = 0x3B83126F42200000;
                sub_2483EF9A0((float *)__str, (float *)&v379, v155, (float *)&v379.__r_.__value_.__r.__words[1], v189);
                float v191 = *((float *)v379.__r_.__value_.__r.__words + 1);
                float v190 = *(float *)&v379.__r_.__value_.__l.__data_;
                float v192 = *(float *)&v379.__r_.__value_.__r.__words[1];
              }
              else
              {
                for (uint64_t m = 0; m != 3; ++m)
                {
                  v180.i32[0] = v372[m];
                  v179.i32[0] = 0;
                  if (*(float *)v180.i32 != 0.0)
                  {
                    double v194 = fabs(*(float *)v180.i32);
                    if (v194 <= 0.5)
                    {
                      *(double *)v179.i64 = *(float *)v180.i32 * *(float *)v180.i32;
                      double v195 = 0.333333333;
                    }
                    else
                    {
                      int8x16_t v356 = v180;
                      *(double *)v179.i64 = exp((v194 + *((double *)v165 + 157)) * 5.59181631);
                      int8x16_t v180 = v356;
                      *(double *)v179.i64 = *(double *)v179.i64 + 0.28466892;
                      double v195 = 0.0833333333;
                    }
                    *(double *)v179.i64 = *(double *)v179.i64 * v195;
                    *(float *)v179.i32 = *(double *)v179.i64;
                    v196.i64[0] = 0x8000000080000000;
                    v196.i64[1] = 0x8000000080000000;
                    int8x16_t v179 = vbslq_s8(v196, v179, v180);
                  }
                  *(_DWORD *)((char *)&v379.__r_.__value_.__l.__data_ + m * 4) = v179.i32[0];
                }
                float v197 = *(float *)&v379.__r_.__value_.__l.__data_;
                float v198 = v172;
                float v199 = *(float *)&v379.__r_.__value_.__r.__words[1];
                float v200 = *((float *)v379.__r_.__value_.__r.__words + 1);
                float v188 = *((float *)&v182 + 1);
                float v201 = powf((float)((float)(*(float *)&v182 * *((float *)v379.__r_.__value_.__r.__words + 1))+ (float)(v181 * *(float *)&v379.__r_.__value_.__l.__data_))+ (float)(*((float *)&v182 + 1) * *(float *)&v379.__r_.__value_.__r.__words[1]), -0.18186);
                float v202 = v201 <= 1000000000.0 ? v201 : 1000000000.0;
                float v190 = v197 * v202;
                float v191 = v200 * v202;
                float v172 = v198;
                *(float *)&v379.__r_.__value_.__l.__data_ = v197 * v202;
                *((float *)v379.__r_.__value_.__r.__words + 1) = v191;
                float v192 = v199 * v202;
                float v183 = *(float *)&v182;
                *(float *)&v379.__r_.__value_.__r.__words[1] = v192;
              }
              uint64_t v203 = 0;
              float v204 = (float)((float)(v183 * v191) + (float)(v181 * v190)) + (float)(v188 * v192);
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)v376 = &v379.__r_.__value_.__l.__size_;
              float v205 = 0.0;
              float v206 = 0.0;
              do
              {
                int v207 = *(float **)&__str[v203];
                float v208 = *v207 - v204;
                float v209 = 1.0 / v208;
                if (v208 == 0.0) {
                  float v209 = 1.0;
                }
                float v210 = *v207 * v209;
                if (v206 < v210 && v208 < 0.0) {
                  float v206 = *v207 * v209;
                }
                float v212 = v210 - v209;
                if (v208 <= 0.0) {
                  float v212 = v206;
                }
                if (v205 < v212) {
                  float v205 = v212;
                }
                v203 += 8;
              }
              while (v203 != 24);
              uint64_t v213 = 0;
              float v214 = v205 + (float)((float)(v206 - v205) * 0.3);
              float v215 = v214 <= 1.0 ? v214 : 1.0;
              float v216 = v214 >= 0.0 ? v215 : 0.0;
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)v376 = &v379.__r_.__value_.__l.__size_;
              do
              {
                **(float **)&__str[v213] = **(float **)&__str[v213]
                                         + (float)(v216 * (float)(v204 - **(float **)&__str[v213]));
                v213 += 8;
              }
              while (v213 != 24);
              *(_DWORD *)__str = 1065353216;
              *(void *)&__str[4] = v379.__r_.__value_.__r.__words[0];
              *(_DWORD *)&__str[12] = v379.__r_.__value_.__r.__words[1];
              uint64_t v217 = __str;
              float v218 = 1.0;
              for (uint64_t n = 4; n != 16; n += 4)
              {
                if (v218 < *(float *)&__str[n])
                {
                  float v218 = *(float *)&__str[n];
                  uint64_t v217 = &__str[n];
                }
              }
              uint64_t v220 = 0;
              float v221 = *(float *)v217;
              *(void *)__str = &v379;
              *(void *)&__str[8] = v155;
              *(void *)v376 = &v379.__r_.__value_.__l.__size_;
              float v222 = 1.0 / v221;
              do
              {
                **(float **)&__str[v220] = v222 * **(float **)&__str[v220];
                v220 += 8;
              }
              while (v220 != 24);
              if (sub_2483EF0E0((uint64_t)__str, v355, v354)) {
                break;
              }
              unsigned int v223 = &v380;
              sub_2483EF4CC((uint64_t)__str, (int *)&v385, (uint64_t)&v380);
              uint64_t v224 = 0;
              float v374 = 0.0;
              uint64_t v373 = 0;
              do
              {
                uint64_t v225 = 0;
                float v226 = *((float *)&v373 + v224);
                do
                {
                  float v226 = v226
                       + (float)(*(float *)((char *)&v379.__r_.__value_.__l.__data_ + v225)
                               * *(float *)((char *)v223 + v225));
                  v225 += 4;
                }
                while (v225 != 12);
                *((float *)&v373 + v224++) = v226;
                unsigned int v223 = (long long *)((char *)v223 + 12);
              }
              while (v224 != 3);
              float v227 = *(float *)&v373 / 0.96421;
              if ((float)(*(float *)&v373 / 0.96421) <= 0.0088565) {
                float v228 = (float)(v227 * 7.787) + 0.13793;
              }
              else {
                float v228 = cbrtf(v227);
              }
              if (*((float *)&v373 + 1) <= 0.0088565) {
                float v229 = (float)(*((float *)&v373 + 1) * 7.787) + 0.13793;
              }
              else {
                float v229 = cbrtf(*((float *)&v373 + 1));
              }
              uint64_t v230 = v165;
              v231 = v155;
              float v232 = v374 / 0.82519;
              if ((float)(v374 / 0.82519) <= 0.0088565) {
                float v233 = (float)(v232 * 7.787) + 0.13793;
              }
              else {
                float v233 = cbrtf(v232);
              }
              uint64_t v234 = 0;
              float v235 = (float)(v229 * 1.16) + -0.16;
              if (v235 <= 1.0) {
                float v236 = (float)(v229 * 1.16) + -0.16;
              }
              else {
                float v236 = 1.0;
              }
              if (v235 >= 0.0) {
                float v237 = v236;
              }
              else {
                float v237 = 0.0;
              }
              v371[0] = (int)(float)((float)(v237 * 255.0) + 0.5);
              float v238 = (float)(v228 - v229) * 500.0;
              float v239 = v238 + 128.5;
              if (v238 > 127.0) {
                float v239 = 255.5;
              }
              if (v238 >= -128.0) {
                float v240 = v239;
              }
              else {
                float v240 = 0.5;
              }
              v371[1] = (int)v240;
              float v241 = (float)(v229 - v233) * 200.0;
              float v242 = v241 + 128.5;
              if (v241 > 127.0) {
                float v242 = 255.5;
              }
              if (v241 >= -128.0) {
                float v243 = v242;
              }
              else {
                float v243 = 0.5;
              }
              v371[2] = (int)v243;
              float v164 = 0.125;
              do
              {
                char v244 = v371[v234];
                v245 = v365[0];
                int64_t v246 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2483EE8AC((unint64_t *)v365, 1uLL);
                  v245 = v365[0];
                }
                v245[v246] = v244;
                ++v234;
              }
              while (v234 != 3);
              ++v175;
              int v155 = v231;
              int v165 = v230;
              if (v175 == 9)
              {
                unint64_t v170 = v343 + 1;
                if (v343 != 8) {
                  goto LABEL_276;
                }
                unint64_t v154 = v342 + 1;
                if (v342 != 8) {
                  goto LABEL_271;
                }
                for (iuint64_t i = 0; ii != 3; ++ii)
                {
                  for (juint64_t j = 0; jj != 256; ++jj)
                  {
                    v249 = v365[0];
                    int64_t v250 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v249 = v365[0];
                    }
                    v249[v250] = jj;
                  }
                }
                sub_2483EED94((uint64_t)v365, &v361, &v360);
                sub_2483EEEC0("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                if (!sub_2483EF788((unint64_t *)v365))
                {
                  sub_2483EED94((uint64_t)v365, &v361, &v360);
                  a2 = v341;
                  goto LABEL_371;
                }
                goto LABEL_379;
              }
            }
          }
          else
          {
            switch(v3)
            {
              case 8:
                uint64_t v145 = operator new(4uLL);
                *uint64_t v145 = 1065353216;
                *((void *)&v385 + 1) = v145 + 1;
                *(void *)&long long v386 = v145 + 1;
                *(void *)&long long v385 = v145;
                int v146 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                goto LABEL_378;
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
                goto LABEL_495;
              case 13:
                uint64_t v145 = operator new(0x14uLL);
                *((void *)&v385 + 1) = v145 + 5;
                *(void *)&long long v386 = v145 + 5;
                v145[4] = 1025879782;
                *(_OWORD *)uint64_t v145 = xmmword_248552CD4;
                *(void *)&long long v385 = v145;
                int v146 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                goto LABEL_378;
              case 16:
                sub_2483EFC28(__str, 1);
                sub_2483EFDC0((uint64_t *)__str, (unint64_t *)v365);
                goto LABEL_392;
              case 17:
                long long v254 = operator new(0x14uLL);
                *((void *)&v385 + 1) = v254 + 5;
                *(void *)&long long v386 = v254 + 5;
                v254[4] = 0;
                *(_OWORD *)long long v254 = *(_OWORD *)"ff&@";
                *(void *)&long long v385 = v254;
                int v255 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                *((void *)&v385 + 1) = v254;
                operator delete(v254);
                if (v255) {
                  goto LABEL_379;
                }
                goto LABEL_394;
              case 18:
                sub_2483EFC28(__str, 2);
                sub_2483EFDC0((uint64_t *)__str, (unint64_t *)v365);
LABEL_392:
                if (*(void *)__str)
                {
                  *(void *)&__str[8] = *(void *)__str;
                  operator delete(*(void **)__str);
                }
                goto LABEL_394;
              default:
                if (v3 == 1)
                {
                  uint64_t v145 = operator new(0x14uLL);
                  *((void *)&v385 + 1) = v145 + 5;
                  *(void *)&long long v386 = v145 + 5;
                  v145[4] = 1034281812;
                  *(_OWORD *)uint64_t v145 = xmmword_248552CE8;
                  *(void *)&long long v385 = v145;
                  int v146 = sub_2483EF5FC((float **)&v385, 3, (unint64_t *)v365);
                }
                else
                {
                  double v256 = a1[11];
                  uint64_t v145 = operator new(4uLL);
                  float v257 = 1.0 / v256;
                  *(float *)uint64_t v145 = v257;
                  *((void *)&v385 + 1) = v145 + 1;
                  *(void *)&long long v386 = v145 + 1;
                  *(void *)&long long v385 = v145;
                  int v146 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                }
LABEL_378:
                int v258 = v146;
                *((void *)&v385 + 1) = v145;
                operator delete(v145);
                if (v258) {
                  goto LABEL_379;
                }
LABEL_394:
                sub_2483EED94((uint64_t)v365, &v361, &v360);
                int v259 = *(_DWORD *)a1;
                int v252 = v360;
                uint64_t v251 = v361;
                if (v259 == 1)
                {
                  uint64_t v253 = "kTRC";
                }
                else
                {
                  sub_2483EEEC0("rTRC", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  sub_2483EEEC0("gTRC", v251, v252, (unint64_t *)v367, (uint64_t)&v362);
                  uint64_t v253 = "bTRC";
                }
                break;
            }
LABEL_397:
            sub_2483EEEC0(v253, v251, v252, (unint64_t *)v367, (uint64_t)&v362);
            v260 = (int *)v362;
            v261 = v363;
            uint64_t v262 = (char *)v363 - (unsigned char *)v362;
            sub_2483EE828((unint64_t)((char *)v363 - (unsigned char *)v362) >> 3, 0, (unint64_t *)v367);
            if (v261 != v260)
            {
              int v264 = (int)v369[0];
              int v263 = (int)v369[1];
              if ((unint64_t)(v262 >> 3) <= 1) {
                uint64_t v265 = 1;
              }
              else {
                uint64_t v265 = v262 >> 3;
              }
              uint64_t v266 = 8;
              do
              {
                int v267 = *v260;
                v260 += 2;
                sub_2483EE828(v267 + v263 + LODWORD(v367[1]) - (v264 + LODWORD(v367[0])), v266, (unint64_t *)v367);
                v266 += 12;
                --v265;
              }
              while (v265);
            }
            long long v357 = *(_OWORD *)v367;
            int64x2_t v268 = vaddq_s64(vaddq_s64(*(int64x2_t *)v369, *(int64x2_t *)v367), *(int64x2_t *)v365);
            sub_2483EE828(vsubq_s64(vdupq_laneq_s64(v268, 1), v268).i32[0], 0, (unint64_t *)v369);
            sub_2483EFEC8((void *)a2, (char *)v369[0], (char *)v369[1], (char *)v369[1] - (char *)v369[0]);
            sub_2483EFFD4(a2, *(char **)(a2 + 8), (char *)v357, *((char **)&v357 + 1), *((void *)&v357 + 1) - v357);
            sub_2483EFFD4(a2, *(char **)(a2 + 8), (char *)v365[0], (char *)v365[1], (char *)v365[1] - (char *)v365[0]);
            long long v380 = 0uLL;
            v381 = 0;
            sub_2483F01FC(&v380, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
            long long v269 = v380;
            size_t v270 = *((void *)&v380 + 1) - v380;
            if (*((void *)&v380 + 1) - (void)v380 >= 0x44uLL)
            {
              *(_DWORD *)(v380 + 44) = 0;
              *(_DWORD *)(v269 + 64) = 0;
            }
            memset(__str, 0, sizeof(__str));
            *(void *)v376 = 0;
            sub_2483F01FC(__str, (const void *)v269, *((uint64_t *)&v269 + 1), v270);
            v271 = *(char **)&__str[8];
            if (*(void *)&__str[8] >= *(void *)v376)
            {
              unint64_t v274 = *(void *)__str;
              uint64_t v275 = *(void *)&__str[8] - *(void *)__str;
              uint64_t v276 = *(void *)&__str[8] - *(void *)__str + 1;
              if (v276 < 0) {
                sub_2483E92E8();
              }
              unint64_t v277 = *(void *)v376 - *(void *)__str;
              if (2 * (*(void *)v376 - *(void *)__str) > (unint64_t)v276) {
                uint64_t v276 = 2 * v277;
              }
              if (v277 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v278 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v278 = v276;
              }
              if (v278) {
                v272 = operator new(v278);
              }
              else {
                v272 = 0;
              }
              v279 = (char *)v272 + v278;
              *((unsigned char *)v272 + v275) = 0x80;
              v273 = (char *)v272 + v275 + 1;
              if (v271 == (char *)v274)
              {
                v272 = (char *)v272 + v275;
              }
              else
              {
                v280 = &v271[~v274];
                do
                {
                  char v281 = *--v271;
                  (v280--)[(void)v272] = v281;
                }
                while (v271 != (char *)v274);
                v271 = *(char **)__str;
              }
              *(void *)__str = v272;
              *(void *)v376 = v279;
              if (v271) {
                operator delete(v271);
              }
            }
            else
            {
              **(unsigned char **)&__str[8] = 0x80;
              v272 = *(void **)__str;
              v273 = v271 + 1;
            }
            *(void *)&__str[8] = v273;
            unint64_t v282 = (56 - ((_BYTE)v273 - (_BYTE)v272)) & 0x3F;
            unint64_t v283 = v282 + v273 - (unsigned char *)v272;
            v379.__r_.__value_.__s.__data_[0] = 0;
            if (v273 - (unsigned char *)v272 >= v283)
            {
              if (v273 - (unsigned char *)v272 > v283)
              {
                v273 += v282;
                *(void *)&__str[8] = (char *)v272 + v283;
              }
            }
            else
            {
              sub_2483EE700(__str, v282, &v379);
              v273 = *(unsigned char **)&__str[8];
            }
            unint64_t v284 = 0;
            do
            {
              unint64_t v285 = (unint64_t)(8 * (*((void *)&v380 + 1) - v380)) >> v284;
              if ((unint64_t)v273 >= *(void *)v376)
              {
                unint64_t v286 = *(void *)__str;
                v287 = &v273[-*(void *)__str];
                uint64_t v288 = (uint64_t)&v273[-*(void *)__str + 1];
                if (v288 < 0) {
                  sub_2483E92E8();
                }
                unint64_t v289 = *(void *)v376 - *(void *)__str;
                if (2 * (*(void *)v376 - *(void *)__str) > (unint64_t)v288) {
                  uint64_t v288 = 2 * v289;
                }
                if (v289 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v290 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v290 = v288;
                }
                if (v290) {
                  v291 = (char *)operator new(v290);
                }
                else {
                  v291 = 0;
                }
                v292 = &v287[(void)v291];
                v293 = &v287[(void)v291];
                unsigned char *v293 = v285;
                v294 = v293 + 1;
                if (v273 != (unsigned char *)v286)
                {
                  v295 = &v273[~v286];
                  do
                  {
                    char v296 = *--v273;
                    (v295--)[(void)v291] = v296;
                  }
                  while (v273 != (unsigned char *)v286);
                  v273 = *(unsigned char **)__str;
                  v292 = v291;
                }
                *(void *)__str = v292;
                *(void *)&__str[8] = v294;
                *(void *)v376 = &v291[v290];
                if (v273) {
                  operator delete(v273);
                }
                v273 = v294;
              }
              else
              {
                *v273++ = v285;
              }
              *(void *)&__str[8] = v273;
              BOOL v297 = v284 >= 0x38;
              v284 += 8;
            }
            while (!v297);
            int v298 = -271733879;
            int v299 = -1732584194;
            int v300 = 1732584193;
            int v301 = 271733878;
            if (v273 != *(unsigned char **)__str)
            {
              unint64_t v302 = 0;
              do
              {
                char v303 = 0;
                unint64_t v304 = 0;
                char v305 = 1;
                char v306 = 5;
                int v307 = v301;
                int v308 = v299;
                int v309 = v298;
                int v310 = v300;
                do
                {
                  int v311 = v310;
                  int v312 = v309;
                  int v313 = v308;
                  int v310 = v307;
                  int v314 = (v309 | ~v307) ^ v308;
                  int v315 = v303 & 0xF;
                  int v316 = v308 ^ v310 ^ v312;
                  if (v304 <= 0x2F)
                  {
                    int v314 = v316;
                    int v315 = v306 & 0xF;
                  }
                  if (v304 <= 0x1F)
                  {
                    int v314 = v312 & v310 | v313 & ~v310;
                    int v315 = v305 & 0xF;
                  }
                  if (v304 <= 0xF) {
                    int v315 = v304;
                  }
                  uint64_t v317 = (4 * v315) + v302;
                  if (v304 <= 0xF) {
                    int v314 = v310 & ~v312 | v312 & v313;
                  }
                  int v309 = __ROR4__(v314+ v311+ dword_248552E38[v304]+ (*(unsigned __int8 *)(*(void *)__str + v317) | (*(unsigned __int8 *)(*(void *)__str+ (v317 | 1)) << 8) | (*(unsigned __int8 *)(*(void *)__str + (v317 | 2)) << 16) | (*(unsigned __int8 *)(*(void *)__str + (v317 | 3)) << 24)), -byte_248552F38[4 * v304])+ v312;
                  ++v304;
                  v303 += 7;
                  v306 += 3;
                  v305 += 5;
                  int v307 = v313;
                  int v308 = v312;
                }
                while (v304 != 64);
                v300 += v310;
                v298 += v309;
                v299 += v312;
                v301 += v313;
                v302 += 64;
              }
              while (v302 < (unint64_t)&v273[-*(void *)__str]);
            }
            if (*(void *)__str) {
              operator delete(*(void **)__str);
            }
            v318 = *(_DWORD **)a2;
            v318[21] = v300;
            v318[22] = v298;
            v318[23] = v299;
            v318[24] = v301;
            if ((void)v380) {
              operator delete((void *)v380);
            }
          }
          goto LABEL_379;
        }
        double v92 = a1[2];
        if (v92 != 0.0)
        {
          float v93 = a1[1];
          float v94 = v92;
          if (!sub_2483EF0E0((uint64_t)__str, v93, v94))
          {
            long long v385 = *(_OWORD *)__str;
            long long v386 = *(_OWORD *)v376;
            int v387 = *(_DWORD *)&v376[16];
            unint64_t v95 = (char *)v365[0];
            int64_t v96 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2483EE8AC((unint64_t *)v365, 4uLL);
              unint64_t v95 = (char *)v365[0];
            }
            *(_DWORD *)&v95[v96] = 842229363;
            sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            for (kuint64_t k = 0; kk != 36; kk += 4)
            {
              float v98 = *(float *)((char *)&v385 + kk);
              if (v98 < -32768.0 || v98 > 32768.0) {
                goto LABEL_379;
              }
              sub_2483EE828((int)(float)((float)(v98 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("chad", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            int v99 = *(_DWORD *)a1;
            if (*(_DWORD *)a1)
            {
LABEL_211:
              if (v99 != 2) {
                goto LABEL_191;
              }
              int v100 = (char *)v365[0];
              int64_t v101 = (char *)v365[1] - (char *)v365[0];
              if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
              {
                sub_2483EE8AC((unint64_t *)v365, 4uLL);
                int v100 = (char *)v365[0];
              }
              *(_DWORD *)&v100[v101] = 541213037;
              sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              uint64_t v102 = v365[0];
              int64_t v103 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2483EE8AC((unint64_t *)v365, 1uLL);
                uint64_t v102 = v365[0];
              }
              v102[v103] = 3;
              unsigned int v104 = v365[0];
              int64_t v105 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2483EE8AC((unint64_t *)v365, 1uLL);
                unsigned int v104 = v365[0];
              }
              v104[v105] = 3;
              sub_2483EF598(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(244, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(148, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(80, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2483EE828(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              uint64_t v106 = operator new(4uLL);
              *uint64_t v106 = 1065353216;
              *(void *)&__str[8] = v106 + 1;
              *(void *)v376 = v106 + 1;
              *(void *)__str = v106;
              int v107 = sub_2483EF5FC((float **)__str, 0, (unint64_t *)v365);
              operator delete(v106);
              if (!v107)
              {
                uint64_t v108 = operator new(4uLL);
                *uint64_t v108 = 1065353216;
                *((void *)&v385 + 1) = v108 + 1;
                *(void *)&long long v386 = v108 + 1;
                *(void *)&long long v385 = v108;
                int v109 = sub_2483EF5FC((float **)&v385, 0, (unint64_t *)v365);
                operator delete(v108);
                if (!v109)
                {
                  uint64_t v110 = operator new(4uLL);
                  *uint64_t v110 = 1065353216;
                  *((void *)&v380 + 1) = v110 + 1;
                  v381 = v110 + 1;
                  *(void *)&long long v380 = v110;
                  int v111 = sub_2483EF5FC((float **)&v380, 0, (unint64_t *)v365);
                  operator delete(v110);
                  if (!v111)
                  {
                    uint64_t v340 = a2;
                    for (unsigned int mm = 0; mm != 16; ++mm)
                    {
                      int v113 = v365[0];
                      int64_t v114 = (char *)v365[1] - (char *)v365[0];
                      if ((char *)v365[1] - (char *)v365[0] != -1)
                      {
                        sub_2483EE8AC((unint64_t *)v365, 1uLL);
                        int v113 = v365[0];
                      }
                      v113[v114] = 2 * (mm < 3);
                    }
                    uint64_t v115 = v365[0];
                    int64_t v116 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v115 = v365[0];
                    }
                    v115[v116] = 2;
                    uint64_t v117 = v365[0];
                    int64_t v118 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      uint64_t v117 = v365[0];
                    }
                    v117[v118] = 0;
                    sub_2483EF598(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    uint64_t v119 = 0;
                    char v120 = 1;
                    do
                    {
                      uint64_t v121 = 0;
                      char v122 = v120;
                      int v123 = (char *)&unk_248552DD8 + 48 * v119;
                      char v124 = 1;
                      do
                      {
                        uint64_t v125 = 0;
                        char v126 = v124;
                        int v127 = &v123[24 * v121];
                        char v128 = 1;
                        do
                        {
                          uint64_t v129 = 0;
                          char v130 = v128;
                          BOOL v131 = &v127[12 * v125];
                          do
                          {
                            sub_2483EF598((int)(float)((float)(*(float *)&v131[v129] * 65535.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                            v129 += 4;
                          }
                          while (v129 != 12);
                          char v128 = 0;
                          uint64_t v125 = 1;
                        }
                        while ((v130 & 1) != 0);
                        char v124 = 0;
                        uint64_t v121 = 1;
                      }
                      while ((v126 & 1) != 0);
                      char v120 = 0;
                      uint64_t v119 = 1;
                    }
                    while ((v122 & 1) != 0);
                    uint64_t v132 = 0;
                    while (1)
                    {
                      float v133 = *(float *)&dword_248552D64[v132];
                      float v134 = *(float *)((char *)&xmmword_248552D70 + v132 * 4);
                      float v135 = *(float *)&dword_248552D80[v132];
                      int v136 = (float *)operator new(0x14uLL);
                      float v137 = (float)-v133 - cbrtf(v134);
                      *int v136 = 3.0;
                      v136[1] = 1.0 / v135;
                      v136[2] = v137;
                      v136[3] = 0.0;
                      v136[4] = fmaxf(-(float)(v137 * v135), 0.0);
                      memset(&v379, 0, sizeof(v379));
                      sub_2483EF70C(&v379, v136, (uint64_t)(v136 + 5), 5uLL);
                      int v138 = sub_2483EF5FC((float **)&v379, 3, (unint64_t *)v365);
                      if (v379.__r_.__value_.__r.__words[0])
                      {
                        v379.__r_.__value_.__l.__size_ = v379.__r_.__value_.__r.__words[0];
                        operator delete(v379.__r_.__value_.__l.__data_);
                      }
                      operator delete(v136);
                      if (v138) {
                        break;
                      }
                      if (++v132 == 3)
                      {
                        uint64_t v139 = 0;
                        while (1)
                        {
                          float v140 = *(double *)&qword_248552D90[v139];
                          if (v140 < -32768.0 || v140 > 32768.0) {
                            goto LABEL_379;
                          }
                          sub_2483EE828((int)(float)((float)(v140 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                          if (++v139 == 9)
                          {
                            uint64_t v141 = 0;
                            int v142 = qword_248552D90;
                            while (1)
                            {
                              uint64_t v143 = 0;
                              float v144 = 0.0;
                              do
                              {
                                float v144 = v144 + *(double *)&v142[v143] * *((float *)&xmmword_248552D70 + v143);
                                ++v143;
                              }
                              while (v143 != 3);
                              if (v144 < -32768.0 || v144 > 32768.0) {
                                goto LABEL_379;
                              }
                              sub_2483EE828((int)(float)((float)(v144 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                              ++v141;
                              v142 += 3;
                              if (v141 == 3)
                              {
                                sub_2483EED94((uint64_t)v365, &v361, &v360);
                                a2 = v340;
                                sub_2483EEEC0("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                                if (sub_2483EF788((unint64_t *)v365)) {
                                  goto LABEL_379;
                                }
                                sub_2483EED94((uint64_t)v365, &v361, &v360);
LABEL_371:
                                int v252 = v360;
                                uint64_t v251 = v361;
                                uint64_t v253 = "B2A0";
                                goto LABEL_397;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_379;
            }
            int v319 = *((_DWORD *)a1 + 6);
            if (v319 != 2)
            {
              if (v319 == 11)
              {
                int v320 = *((_DWORD *)a1 + 1);
                if (v320 == 1)
                {
                  LOBYTE(v319) = 12;
                  goto LABEL_474;
                }
                if (v320 == 11)
                {
                  LOBYTE(v319) = 11;
LABEL_474:
                  int v321 = *((_DWORD *)a1 + 20);
                  if (v321 != 2 && v321 != 0xFFFF)
                  {
                    v322 = (char *)v365[0];
                    int64_t v323 = (char *)v365[1] - (char *)v365[0];
                    if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 4uLL);
                      v322 = (char *)v365[0];
                    }
                    *(_DWORD *)&v322[v323] = 1885563235;
                    sub_2483EE828(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v324 = v365[0];
                    int64_t v325 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v324 = v365[0];
                    }
                    v324[v325] = v319;
                    v326 = v365[0];
                    int64_t v327 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v326 = v365[0];
                    }
                    v326[v327] = v321;
                    v328 = v365[0];
                    int64_t v329 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v328 = v365[0];
                    }
                    v328[v329] = 0;
                    v330 = v365[0];
                    int64_t v331 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2483EE8AC((unint64_t *)v365, 1uLL);
                      v330 = v365[0];
                    }
                    v330[v331] = 1;
                    sub_2483EED94((uint64_t)v365, &v361, &v360);
                    sub_2483EEEC0("cicp", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  }
                }
              }
              else if (*((_DWORD *)a1 + 1) == 1)
              {
                goto LABEL_474;
              }
            }
            float v332 = a1[4];
            float v333 = a1[5];
            float v334 = a1[6];
            float v335 = a1[7];
            float v336 = a1[8];
            float v337 = a1[9];
            float v338 = a1[1];
            float v339 = a1[2];
            if (sub_2483EF310((uint64_t)__str, v332, v333, v334, v335, v336, v337, v338, v339)) {
              goto LABEL_379;
            }
            if (sub_2483EF0E0((uint64_t)&v385, v338, v339)) {
              goto LABEL_379;
            }
            sub_2483EF4CC((uint64_t)&v385, (int *)__str, (uint64_t)&v380);
            *(_DWORD *)__str = v380;
            *(_DWORD *)&__str[4] = HIDWORD(v380);
            *(_DWORD *)&__str[8] = v382;
            *(void *)&long long v385 = __PAIR64__(v381, DWORD1(v380));
            DWORD2(v385) = v383;
            *(void *)&long long v380 = __PAIR64__(HIDWORD(v381), DWORD2(v380));
            DWORD2(v380) = v384;
            if (sub_2483EF004((uint64_t)__str, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("rXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2483EF004((uint64_t)&v385, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("gXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2483EF004((uint64_t)&v380, (unint64_t *)v365)) {
              goto LABEL_379;
            }
            sub_2483EED94((uint64_t)v365, &v361, &v360);
            sub_2483EEEC0("bXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            int v99 = *(_DWORD *)a1;
            goto LABEL_211;
          }
        }
      }
LABEL_379:
      if (v359 < 0) {
        operator delete(__p[0]);
      }
      if (v362) {
        operator delete(v362);
      }
      if (v365[0])
      {
        v365[1] = v365[0];
        operator delete(v365[0]);
      }
    }
  }
  if (v367[0]) {
    operator delete(v367[0]);
  }
  if (v369[0]) {
    operator delete(v369[0]);
  }
}

void sub_2483EE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a58) {
    operator delete(a58);
  }
  _Unwind_Resume(a1);
}

void sub_2483EE700(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      float64x2_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      sub_2483E92E8();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      int v12 = operator new(v11);
    }
    else {
      int v12 = 0;
    }
    int v14 = &v8[(void)v12];
    int v15 = &v8[(void)v12 + v4];
    double v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    unint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--int v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_2483EE828(int a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1] - *a3;
  BOOL v8 = a2 + 4 >= v7;
  size_t v9 = a2 + 4 - v7;
  if (v9 != 0 && v8)
  {
    sub_2483EE8AC(a3, v9);
    unint64_t v6 = *a3;
  }
  *(unsigned char *)(v6 + a2) = HIBYTE(a1);
  *(unsigned char *)(a2 + *a3 + 1) = BYTE2(a1);
  *(unsigned char *)(a2 + *a3 + 2) = BYTE1(a1);
  *(unsigned char *)(a2 + *a3 + 3) = a1;
}

void sub_2483EE8AC(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_2483E92E8();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    float64x2_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

BOOL sub_2483EE9E4(_DWORD *a1)
{
  if (*a1 || (a1[20] & 0xFFFFFFFD) != 0x10) {
    return 0;
  }
  int v1 = a1[6];
  int v2 = a1[1];
  if (v1 == 11 && (v2 == 1 || v2 == 11)) {
    return 1;
  }
  return v1 != 2 && v2 == 1;
}

void *sub_2483EEA38(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2483F04E4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_2483EEAE8(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1] - *a2;
  if (v5 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a2, 4uLL);
    unint64_t v4 = *a2;
  }
  *(_DWORD *)(v4 + v5) = 1668639853;
  sub_2483EE828(0, a2[1] - *a2, a2);
  sub_2483EE828(1, a2[1] - *a2, a2);
  sub_2483EE828(12, a2[1] - *a2, a2);
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1] - *a2;
  if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a2, 4uLL);
    unint64_t v6 = *a2;
  }
  *(_DWORD *)(v6 + v7) = 1398107749;
  int v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0) {
    int v8 = *(_DWORD *)(a1 + 8);
  }
  sub_2483EE828(2 * v8, a2[1] - *a2, a2);
  sub_2483EE828(28, a2[1] - *a2, a2);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) == 0) {
    size_t v10 = (char *)a1;
  }
  else {
    size_t v10 = *(char **)a1;
  }
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  if (v9)
  {
    unint64_t v11 = &v10[v9];
    int v12 = (unsigned char *)a2[1];
    do
    {
      char v13 = *v10;
      unint64_t v14 = a2[2];
      if ((unint64_t)v12 >= v14)
      {
        unint64_t v16 = *a2;
        unint64_t v17 = &v12[-*a2];
        unint64_t v18 = (unint64_t)(v17 + 1);
        if ((uint64_t)(v17 + 1) < 0) {
          goto LABEL_51;
        }
        unint64_t v19 = v14 - v16;
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v20 = v18;
        }
        if (v20) {
          unint64_t v21 = (char *)operator new(v20);
        }
        else {
          unint64_t v21 = 0;
        }
        std::string::size_type v22 = &v17[(void)v21];
        unint64_t v23 = &v17[(void)v21];
        *unint64_t v23 = 0;
        char v15 = v23 + 1;
        if (v12 != (unsigned char *)v16)
        {
          BOOL v24 = &v12[~v16];
          do
          {
            char v25 = *--v12;
            (v24--)[(void)v21] = v25;
          }
          while (v12 != (unsigned char *)v16);
          int v12 = (unsigned char *)*a2;
          std::string::size_type v22 = v21;
        }
        *a2 = (unint64_t)v22;
        a2[1] = (unint64_t)v15;
        a2[2] = (unint64_t)&v21[v20];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *int v12 = 0;
        char v15 = v12 + 1;
      }
      a2[1] = (unint64_t)v15;
      unint64_t v26 = a2[2];
      if ((unint64_t)v15 >= v26)
      {
        unint64_t v27 = *a2;
        double v28 = &v15[-*a2];
        unint64_t v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0) {
LABEL_51:
        }
          sub_2483E92E8();
        unint64_t v30 = v26 - v27;
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v29;
        }
        if (v31) {
          unint64_t v32 = (unint64_t)operator new(v31);
        }
        else {
          unint64_t v32 = 0;
        }
        char v33 = (char *)(v32 + v31);
        v28[v32] = v13;
        int v12 = &v28[v32 + 1];
        if (v15 == (unsigned char *)v27)
        {
          *a2 = (unint64_t)&v28[v32];
          a2[1] = (unint64_t)v12;
          a2[2] = (unint64_t)v33;
        }
        else
        {
          int v34 = &v15[~v27];
          do
          {
            char v35 = *--v15;
            (v34--)[v32] = v35;
          }
          while (v15 != (unsigned char *)v27);
          char v15 = (unsigned char *)*a2;
          *a2 = v32;
          a2[1] = (unint64_t)v12;
          a2[2] = (unint64_t)v33;
          if (!v15) {
            goto LABEL_49;
          }
        }
        operator delete(v15);
      }
      else
      {
        *char v15 = v13;
        int v12 = v15 + 1;
      }
LABEL_49:
      a2[1] = (unint64_t)v12;
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_2483EED94(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = *(unsigned char **)a1;
  unint64_t v6 = *(unsigned char **)(a1 + 8);
  for (uint64_t i = (uint64_t)&v6[-*(void *)a1]; (i & 3) != 0; v6 = (unsigned char *)v10)
  {
    unint64_t v9 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v9)
    {
      unint64_t v11 = i + 1;
      if (i + 1 < 0) {
        sub_2483E92E8();
      }
      unint64_t v12 = v9 - (void)v5;
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        unint64_t v14 = (char *)operator new(v13);
      }
      else {
        unint64_t v14 = 0;
      }
      char v15 = &v14[i];
      v14[i] = 0;
      uint64_t v10 = (uint64_t)&v14[i + 1];
      if (v6 != v5)
      {
        uint64_t v16 = i - 1;
        do
        {
          char v17 = *--v6;
          v14[v16--] = v17;
        }
        while (v6 != v5);
        unint64_t v5 = *(unsigned char **)a1;
        char v15 = v14;
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = &v14[v13];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *unint64_t v6 = 0;
      uint64_t v10 = (uint64_t)(v6 + 1);
    }
    *(void *)(a1 + 8) = v10;
    unint64_t v5 = *(unsigned char **)a1;
    uint64_t i = v10 - *(void *)a1;
  }
  uint64_t v18 = *a2 + *a3;
  *a2 = v18;
  *a3 = i - v18;
}

void sub_2483EEEC0(_DWORD *a1, uint64_t a2, int a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v10 = *a4;
  unint64_t v11 = a4[1] - *a4;
  if (v11 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a4, 4uLL);
    unint64_t v10 = *a4;
  }
  *(_DWORD *)(v10 + v11) = *a1;
  sub_2483EE828(0, a4[1] - *a4, a4);
  size_t v13 = *(void **)(a5 + 8);
  unint64_t v12 = *(void *)(a5 + 16);
  if ((unint64_t)v13 >= v12)
  {
    char v15 = *(void **)a5;
    uint64_t v16 = ((uint64_t)v13 - *(void *)a5) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v18 = v12 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v19) {
      unint64_t v20 = v17;
    }
    if (v20)
    {
      unint64_t v20 = (unint64_t)sub_2483F04AC(v20);
      char v15 = *(void **)a5;
      size_t v13 = *(void **)(a5 + 8);
    }
    else
    {
      uint64_t v21 = 0;
    }
    std::string::size_type v22 = (void *)(v20 + 8 * v16);
    unint64_t v23 = v20 + 8 * v21;
    *std::string::size_type v22 = a2;
    unint64_t v14 = v22 + 1;
    while (v13 != v15)
    {
      uint64_t v24 = *--v13;
      *--std::string::size_type v22 = v24;
    }
    *(void *)a5 = v22;
    *(void *)(a5 + 8) = v14;
    *(void *)(a5 + 16) = v23;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v13 = a2;
    unint64_t v14 = v13 + 1;
  }
  *(void *)(a5 + 8) = v14;
  uint64_t v25 = a4[1] - *a4;

  sub_2483EE828(a3, v25, a4);
}

uint64_t sub_2483EF004(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1] - *a2;
  if (v5 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a2, 4uLL);
    unint64_t v4 = *a2;
  }
  *(_DWORD *)(v4 + v5) = 542792024;
  sub_2483EE828(0, a2[1] - *a2, a2);
  uint64_t v6 = 0;
  while (1)
  {
    float v7 = *(float *)(a1 + v6);
    uint64_t result = 1;
    if (v7 < -32768.0 || v7 > 32768.0) {
      break;
    }
    sub_2483EE828((int)(float)((float)(v7 * 65536.0) + 0.5), a2[1] - *a2, a2);
    v6 += 4;
    if (v6 == 12) {
      return 0;
    }
  }
  return result;
}

BOOL sub_2483EF0E0(uint64_t a1, float a2, float a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  BOOL result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    float v6 = a2 / a3;
    v32[1] = 1.0;
    float v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      BOOL result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        uint64_t v8 = 0;
        unint64_t v9 = (char *)dword_24854C9E0;
        do
        {
          uint64_t v10 = 0;
          double v11 = 0.0;
          do
          {
            double v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          float v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        uint64_t v13 = 0;
        unint64_t v14 = (char *)dword_24854C9E0;
        do
        {
          uint64_t v15 = 0;
          double v16 = 0.0;
          do
          {
            double v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_248552D10[v15]);
            ++v15;
          }
          while (v15 != 3);
          float v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        BOOL result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          float v19 = v26 / v29;
          uint64_t v20 = 0;
          int v21 = 0;
          float v22 = v27 / v30;
          uint64_t v23 = 0;
          int v24 = 0;
          float v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2483EF4CC((uint64_t)&v19, dword_24854C9E0, (uint64_t)v18);
            sub_2483EF4CC((uint64_t)&unk_24854CA04, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2483EF310(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  BOOL result = 1;
  if (a9 <= 1.0)
  {
    BOOL v12 = a8 < 0.0 || a8 > 1.0;
    if (!v12 && a9 > 0.0)
    {
      *(void *)&long long v31 = __PAIR64__(LODWORD(a4), LODWORD(a2));
      *((void *)&v31 + 1) = __PAIR64__(LODWORD(a3), LODWORD(a6));
      *(void *)&long long v32 = __PAIR64__(LODWORD(a7), LODWORD(a5));
      *((float *)&v32 + 2) = (float)(1.0 - a2) - a3;
      *((float *)&v32 + 3) = (float)(1.0 - a4) - a5;
      float v33 = (float)(1.0 - a6) - a7;
      v29[0] = v31;
      v29[1] = v32;
      float v30 = v33;
      if (sub_2483F0378((float *)v29)) {
        return 1;
      }
      v28[0] = a8 / a9;
      v28[1] = 1.0;
      v28[2] = (float)((float)(1.0 - a8) - a9) / a9;
      if (COERCE_INT(fabs(a8 / a9)) > 2139095039)
      {
        return 1;
      }
      else
      {
        int v14 = fabs((float)((float)(1.0 - a8) - a9) / a9);
        BOOL result = v14 > 2139095039;
        if (v14 <= 2139095039)
        {
          uint64_t v15 = 0;
          double v16 = v29;
          do
          {
            uint64_t v17 = 0;
            double v18 = 0.0;
            do
            {
              double v18 = v18 + (float)(*(float *)((char *)v16 + v17 * 4) * v28[v17]);
              ++v17;
            }
            while (v17 != 3);
            float v19 = v18;
            *(float *)&v27[v15++] = v19;
            double v16 = (_OWORD *)((char *)v16 + 12);
          }
          while (v15 != 3);
          int v20 = v27[0];
          uint64_t v21 = 0;
          int v22 = 0;
          int v23 = v27[1];
          uint64_t v24 = 0;
          int v25 = 0;
          int v26 = v27[2];
          sub_2483EF4CC((uint64_t)&v31, &v20, a1);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2483EF4CC(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      int v6 = *v5;
      v5 += 3;
      *(_DWORD *)&v12[v4] = v6;
      v4 += 4;
    }
    while (v4 != 12);
    uint64_t v7 = 0;
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = 0;
      double v10 = 0.0;
      do
      {
        double v10 = v10 + (float)(*(float *)(v8 + v9) * *(float *)&v12[v9]);
        v9 += 4;
      }
      while (v9 != 12);
      float v11 = v10;
      *(float *)(a3 + 4 * (3 * v7++ + v3)) = v11;
      v8 += 12;
    }
    while (v7 != 3);
    ++v3;
    ++a2;
  }
  while (v3 != 3);
  return result;
}

void sub_2483EF598(__int16 a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1] - *a3;
  BOOL v8 = a2 + 2 >= v7;
  size_t v9 = a2 + 2 - v7;
  if (v9 != 0 && v8)
  {
    sub_2483EE8AC(a3, v9);
    unint64_t v6 = *a3;
  }
  *(unsigned char *)(v6 + a2) = HIBYTE(a1);
  *(unsigned char *)(a2 + *a3 + 1) = a1;
}

uint64_t sub_2483EF5FC(float **a1, __int16 a2, unint64_t *a3)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1] - *a3;
  if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a3, 4uLL);
    unint64_t v6 = *a3;
  }
  *(_DWORD *)(v6 + v7) = 1634886000;
  sub_2483EE828(0, a3[1] - *a3, a3);
  sub_2483EF598(a2, a3[1] - *a3, a3);
  sub_2483EF598(0, a3[1] - *a3, a3);
  size_t v9 = *a1;
  BOOL v8 = a1[1];
  if (v9 == v8) {
    return 0;
  }
  while (1)
  {
    float v10 = *v9;
    uint64_t result = 1;
    if (*v9 < -32768.0 || v10 > 32768.0) {
      break;
    }
    sub_2483EE828((int)(float)((float)(v10 * 65536.0) + 0.5), a3[1] - *a3, a3);
    if (++v9 == v8) {
      return 0;
    }
  }
  return result;
}

void *sub_2483EF70C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2483E92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2483EF76C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483EF788(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1] - *a1;
  if (v3 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2483EE8AC(a1, 4uLL);
    unint64_t v2 = *a1;
  }
  *(_DWORD *)(v2 + v3) = 541147757;
  sub_2483EE828(0, a1[1] - *a1, a1);
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  if (v5 != -1)
  {
    sub_2483EE8AC(a1, 1uLL);
    unint64_t v4 = *a1;
  }
  *(unsigned char *)(v4 + v5) = 3;
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1] - *a1;
  if (v7 != -1)
  {
    sub_2483EE8AC(a1, 1uLL);
    unint64_t v6 = *a1;
  }
  *(unsigned char *)(v6 + v7) = 3;
  sub_2483EF598(0, a1[1] - *a1, a1);
  sub_2483EE828(32, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  sub_2483EE828(0, a1[1] - *a1, a1);
  size_t v8 = (float *)operator new(4uLL);
  *size_t v8 = 1.0;
  v17[1] = v8 + 1;
  v17[2] = v8 + 1;
  v17[0] = v8;
  int v9 = sub_2483EF5FC(v17, 0, a1);
  operator delete(v8);
  if (v9) {
    return 1;
  }
  float v10 = (float *)operator new(4uLL);
  *float v10 = 1.0;
  v16[1] = v10 + 1;
  v16[2] = v10 + 1;
  v16[0] = v10;
  int v11 = sub_2483EF5FC(v16, 0, a1);
  operator delete(v10);
  if (v11) {
    return 1;
  }
  int v14 = (float *)operator new(4uLL);
  *int v14 = 1.0;
  v15[1] = v14 + 1;
  v15[2] = v14 + 1;
  v15[0] = v14;
  uint64_t v12 = sub_2483EF5FC(v15, 0, a1);
  operator delete(v14);
  return v12;
}

void sub_2483EF984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2483EF9A0(float *a1, float *a2, float *a3, float *a4, int8x16_t a5)
{
  v35[3] = *MEMORY[0x263EF8340];
  *(float *)v5.i32 = a1[1] * (float)((float)((float)(a1[5] * *a3) + (float)(a1[4] * *a2)) + (float)(a1[6] * *a4));
  float v10 = 0.0;
  if (*(float *)v5.i32 != 0.0)
  {
    int8x16_t v33 = v5;
    long double v11 = pow(fabsf(*(float *)v5.i32) * 0.0000999999975, 0.159301758);
    *(double *)a5.i64 = pow((v11 * 18.8515625 + 0.8359375) / (v11 * 18.6875 + 1.0), 78.84375);
    v5.i32[0] = v33.i32[0];
    *(float *)a5.i32 = *(double *)a5.i64;
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    LODWORD(v10) = vbslq_s8(v12, a5, v33).u32[0];
  }
  float v13 = a1[7];
  float v14 = fminf((float)(v10 - v13) * a1[10], 1.0);
  float v15 = a1[13];
  if (v14 >= v15)
  {
    float v16 = (float)(v14 - v15) * a1[14];
    float v14 = (float)((float)((float)(1.0 - v15)
                        * (float)(v16 + (float)((float)(v16 * (float)(v16 * v16)) + (float)((float)(v16 * v16) * -2.0))))
                + (float)((float)(1.0
                                - (float)((float)((float)(v16 * v16) * 3.0)
                                        - (float)((float)(v16 * (float)(v16 * v16)) * 2.0)))
                        * v15))
        + (float)((float)((float)((float)(v16 * v16) * 3.0) + (float)((float)(v16 * (float)(v16 * v16)) * -2.0)) * a1[12]);
  }
  *(float *)a5.i32 = v13
                   + (float)((float)(v14
                                   + (float)(a1[11]
                                           * (float)((float)((float)(1.0 - v14) * (float)(1.0 - v14))
                                                   * (float)((float)(1.0 - v14) * (float)(1.0 - v14)))))
                           * a1[9]);
  float v17 = 0.0;
  if (*(float *)a5.i32 != 0.0)
  {
    int8x16_t v32 = a5;
    __int32 v34 = v5.i32[0];
    double v18 = pow(fabsf(*(float *)a5.i32), 0.0126833135);
    double v19 = v18 + -0.8359375;
    if (v18 + -0.8359375 < 0.0) {
      double v19 = 0.0;
    }
    long double v20 = pow(v19 / (v18 * -18.6875 + 18.8515625), 6.27739464);
    v5.i32[0] = v34;
    *(double *)v21.i64 = v20 * 10000.0;
    *(float *)v21.i32 = *(double *)v21.i64;
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    LODWORD(v17) = vbslq_s8(v22, v21, v32).u32[0];
  }
  uint64_t v23 = 0;
  float v24 = a1[3];
  if (v17 <= v24) {
    float v24 = v17;
  }
  if (v17 >= 0.0) {
    float v25 = v24;
  }
  else {
    float v25 = 0.0;
  }
  if (*(float *)v5.i32 >= 0.000001) {
    float v26 = *(float *)v5.i32;
  }
  else {
    float v26 = 0.000001;
  }
  float v27 = v25 / v26;
  float v28 = a1[16] * v25;
  float v29 = a1[15] * v27;
  v35[0] = a2;
  v35[1] = a3;
  v35[2] = a4;
  do
  {
    float v30 = (float *)v35[v23];
    float v31 = v28;
    if (*(float *)v5.i32 > 0.000001) {
      float v31 = v29 * *v30;
    }
    *float v30 = v31;
    ++v23;
  }
  while (v23 != 3);
}

void sub_2483EFC28(void *a1, int a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = *sub_2483F02B8(a1, 64);
  do
  {
    float v5 = (float)v3 / 63.0;
    long double v6 = v5;
    double v7 = 0.0;
    if (a2 == 2)
    {
      if (v5 == 0.0) {
        goto LABEL_13;
      }
      if (v5 <= 0.5)
      {
        double v8 = v6 * v6;
        double v9 = 0.333333333;
      }
      else
      {
        double v8 = exp((v6 + -0.559910729) * 5.59181631) + 0.28466892;
        double v9 = 0.0833333333;
      }
      double v12 = v8 * v9;
    }
    else
    {
      if (v5 == 0.0) {
        goto LABEL_13;
      }
      double v10 = pow(v6, 0.0126833135);
      double v11 = v10 + -0.8359375;
      if (v10 + -0.8359375 < 0.0) {
        double v11 = 0.0;
      }
      double v12 = pow(v11 / (v10 * -18.6875 + 18.8515625), 6.27739464);
    }
    float v13 = v12;
    double v7 = fabsf(v13);
LABEL_13:
    double v14 = v7 * 65535.0;
    if (v7 > 1.0) {
      double v14 = 65535.0;
    }
    float v15 = v14;
    *(_WORD *)(v4 + 2 * v3++) = llroundf(v15);
  }
  while (v3 != 64);
}

void sub_2483EFDC0(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v6 = v5 - *a2;
  uint64_t v7 = v6 + 12;
  unint64_t v8 = a1[1] - *a1 + v6 + 12;
  char v12 = 0;
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      unint64_t v5 = v4 + v8;
      a2[1] = v4 + v8;
    }
  }
  else
  {
    sub_2483EE700(a2, v8 - v6, &v12);
    unint64_t v4 = *a2;
    unint64_t v5 = a2[1];
  }
  unint64_t v9 = v5 - v4;
  if (v6 + 4 > v9)
  {
    sub_2483EE8AC(a2, v6 + 4 - v9);
    unint64_t v4 = *a2;
  }
  *(_DWORD *)(v4 + v6) = 1987212643;
  sub_2483EE828(0, v6 + 4, a2);
  sub_2483EE828((unint64_t)(a1[1] - *a1) >> 1, v6 + 8, a2);
  uint64_t v10 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v11 = 0;
    do
    {
      sub_2483EF598(*(_WORD *)(v10 + 2 * v11++), v7, a2);
      uint64_t v10 = *a1;
      v7 += 2;
    }
    while (v11 < (a1[1] - *a1) >> 1);
  }
}

void *sub_2483EFEC8(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_2483E92E8();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_2483F0278(v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  char v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    float v15 = &v9[v16];
    goto LABEL_20;
  }
  double v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  float v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_2483EFFD4(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_2483E92E8();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      size_t v16 = (char *)operator new(v15);
    }
    else {
      size_t v16 = 0;
    }
    float v26 = &v13[(void)v16];
    memcpy(&v13[(void)v16], __src, a5);
    if (v11 == __dst)
    {
      float v27 = &v13[(void)v16];
    }
    else
    {
      do
      {
        v13[(void)v16 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      uint64_t v10 = *(unsigned char **)(a1 + 8);
      float v27 = v16;
    }
    float v28 = &v26[a5];
    float v29 = &v16[v15];
    if (v10 != __dst) {
      memmove(v28, __dst, v10 - __dst);
    }
    float v30 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v28[v10 - __dst];
    *(void *)(a1 + 16) = v29;
    if (v30)
    {
      operator delete(v30);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    double v18 = &__src[a5];
    long double v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    int8x16_t v21 = &__dst[a5];
    int8x16_t v22 = &v20[-a5];
    uint64_t v23 = v20;
    if (&v20[-a5] < v10)
    {
      float v24 = (char *)(&v10[a5] - v20);
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[a5], __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
    return;
  }
  double v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  long double v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void *sub_2483F01FC(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2483F0278(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2483F025C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2483F0278(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_2483E92E8();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *sub_2483F02B8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 < 0) {
      sub_2483E92E8();
    }
    unint64_t v4 = (char *)sub_2483F0344(a2);
    *a1 = v4;
    a1[2] = &v4[2 * v5];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_2483F0328(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2483F0344(uint64_t a1)
{
  if (a1 < 0) {
    sub_2483E9338();
  }
  return operator new(2 * a1);
}

uint64_t sub_2483F0378(float *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  double v1 = a1[4];
  double v2 = a1[8];
  double v3 = a1[5];
  float v4 = a1[6];
  double v5 = a1[7];
  float v6 = a1[3];
  double v7 = a1[2];
  float v8 = *a1;
  double v9 = a1[1];
  v18[0] = v1 * v2 - v3 * v5;
  v18[1] = v7 * v5 - v9 * v2;
  double v10 = v4;
  double v11 = v6;
  v18[2] = v9 * v3 - v7 * v1;
  double v19 = v3 * v10 - v11 * v2;
  double v12 = v8;
  double v20 = v12 * v2 - v7 * v10;
  double v21 = v7 * v11 - v12 * v3;
  double v22 = v11 * v5 - v1 * v10;
  double v23 = v9 * v10 - v12 * v5;
  double v24 = v12 * v1 - v9 * v11;
  double v13 = v19 * v9 + v12 * v18[0] + v7 * v22;
  if (fabs(v13) < 1.0e-10) {
    return 1;
  }
  uint64_t v15 = 0;
  double v16 = 1.0 / v13;
  do
  {
    float v17 = v16 * v18[v15];
    a1[v15++] = v17;
  }
  while (v15 != 9);
  return 0;
}

void *sub_2483F04AC(unint64_t a1)
{
  if (a1 >> 61) {
    sub_2483E9338();
  }
  return operator new(8 * a1);
}

void sub_2483F04E4()
{
}

double sub_2483F04FC(int *a1)
{
  int v1 = *a1;
  if (*a1 > 9)
  {
    if (v1 == 10) {
      return 0.333333333;
    }
    else {
      return 0.314;
    }
  }
  else if (v1 == 1)
  {
    return 0.3127;
  }
  else
  {
    return (double)a1[15] * 0.000001;
  }
}

void sub_2483F0570(void *a1)
{
  *a1 = &unk_26FC65EC8;
  double v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x24C579F90);
}

void *sub_2483F05E0(void *a1)
{
  *a1 = &unk_26FC65EC8;
  double v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2483F0630(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_2483F06F8(a1) + 200;
  sub_2483F06F8(v6);
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a2;
  *(unsigned char *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a3;
  sub_2483EBC50(a1);
  *(_DWORD *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = a2;
  *(unsigned char *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = a3;
  sub_2483EBC50(v6);
}

void sub_2483F06AC(_Unwind_Exception *a1)
{
  sub_2483F09C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2483F06F8(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65EC8;
  *(void *)(a1 + 16) = 0x100000001;
  *(_DWORD *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 53) = 0;
  *(void *)(a1 + 68) = 0xD00000000;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 112) = &unk_26FC66920;
  *(void *)(a1 + 120) = 0;
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483EB2D8(a1 + 112, (uint64_t)&v3);
  *(void *)(a1 + 128) = &unk_26FC66170;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(void *)(a1 + 144) = 0xD00000000;
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483EB404(a1 + 128, (uint64_t)&v3);
  *(void *)(a1 + 152) = &unk_26FC66920;
  *(void *)(a1 + 160) = 0;
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483EB2D8(a1 + 152, (uint64_t)&v3);
  *(void *)(a1 + 168) = &unk_26FC66920;
  *(void *)(a1 + 176) = 0;
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483EB2D8(a1 + 168, (uint64_t)&v3);
  *(void *)(a1 + 184) = &unk_26FC66920;
  *(void *)(a1 + 192) = 0;
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483EB2D8(a1 + 184, (uint64_t)&v3);
  double v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_2483F0994(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483F09C4(uint64_t a1)
{
  for (uint64_t i = 0; i != -400; i -= 200)
  {
    *(void *)(a1 + i + 200) = &unk_26FC65EC8;
    double v3 = *(void **)(a1 + i + 232);
    if (v3)
    {
      *(void *)(a1 + i + 240) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

char *sub_2483F0A38(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_269319550, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_269319550))
  {
    sub_2483F0630((uint64_t)&unk_2693193C0, 1, 13);
    __cxa_atexit((void (*)(void *))sub_2483F09C4, &unk_2693193C0, &dword_248384000);
    __cxa_guard_release(&qword_269319550);
  }
  return (char *)&unk_2693193C0 + 200 * a1;
}

void sub_2483F0AD0(_Unwind_Exception *a1)
{
}

char *sub_2483F0AE8(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2693196E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2693196E8))
  {
    sub_2483F0630((uint64_t)&unk_269319558, 1, 8);
    __cxa_atexit((void (*)(void *))sub_2483F09C4, &unk_269319558, &dword_248384000);
    __cxa_guard_release(&qword_2693196E8);
  }
  return (char *)&unk_269319558 + 200 * a1;
}

void sub_2483F0B80(_Unwind_Exception *a1)
{
}

void sub_2483F0B98(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t, double *, int *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    int v9 = 0;
    if (a3(a2, v3, v4 - v3, v10, &v9) && v9 == 0)
    {
      memset(__p, 0, sizeof(__p));
      sub_2483EBE44(v10, (uint64_t)__p);
      if (!v7) {
        *(unsigned char *)(a1 + 9) = 0;
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_2483F0C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2483F0C3C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  sub_2483EA250((uint64_t)&v35, a2, a3);
  if (v39)
  {
    *(_DWORD *)(a1 + 120) = v39;
  }
  else
  {
    sub_2483EA250((uint64_t)&v30, a2, a3);
    if (v34)
    {
      *(_DWORD *)(a1 + 120) = v34;
    }
    else
    {
      sub_2483EA250((uint64_t)&v25, a2, a3);
      if (v29)
      {
        *(_DWORD *)(a1 + 120) = v29;
      }
      else
      {
        long long v13 = v35;
        uint64_t v6 = v37;
        uint64_t v37 = 0;
        uint64_t v7 = v32;
        uint64_t v32 = 0;
        uint64_t v8 = v27;
        uint64_t v27 = 0;
        uint64_t v14 = v36;
        uint64_t v15 = v6;
        uint64_t v16 = v38;
        uint64_t v18 = v31;
        uint64_t v19 = v7;
        long long v17 = v30;
        uint64_t v20 = v33;
        long long v21 = v25;
        uint64_t v22 = v26;
        uint64_t v23 = v8;
        uint64_t v24 = v28;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2483F0E78(a1, (uint64_t)&v13);
        for (uint64_t i = 104; i != -16; i -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&v13 + i));
        if (!v29)
        {
          uint64_t v10 = v27;
          uint64_t v27 = 0;
          if (v10)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v34)
      {
        uint64_t v11 = v32;
        uint64_t v32 = 0;
        if (v11)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v11 - 24));
          free(*(void **)(v11 - 32));
        }
      }
    }
    if (!v39)
    {
      uint64_t v12 = v37;
      uint64_t v37 = 0;
      if (v12)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
        free(*(void **)(v12 - 32));
      }
    }
  }
}

void sub_2483F0E0C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (!v3
    || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24)), free(*(void **)(v3 - 32)), !*(_DWORD *)(v1 - 40)))
  {
    uint64_t v4 = *(void *)(v1 - 56);
    *(void *)(v1 - 56) = 0;
    if (v4)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
      free(*(void **)(v4 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2483F0E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  do
  {
    uint64_t v5 = a1 + v4;
    long long v6 = *(_OWORD *)(a2 + v4);
    *(void *)(v5 + 16) = *(void *)(a2 + v4 + 16);
    *(_OWORD *)uint64_t v5 = v6;
    uint64_t v7 = *(void *)(a2 + v4 + 24);
    *(void *)(a2 + v4 + 24) = 0;
    uint64_t v8 = *(void *)(a1 + v4 + 24);
    *(void *)(v5 + 24) = v7;
    if (v8)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v8 - 24));
      free(*(void **)(v8 - 32));
    }
    *(void *)(v5 + 32) = *(void *)(a2 + v4 + 32);
    v4 += 40;
  }
  while (v4 != 120);
  return a1;
}

uint64_t sub_2483F0F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(uint64_t (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2483F176C, sub_2483F0FBC, 1, a2);
  }
  unsigned int v5 = 1;
  do
    uint64_t result = sub_2483F0FBC((uint64_t)v6, v5++);
  while (v3 != v5);
  return result;
}

uint64_t sub_2483F0FBC(uint64_t a1, unsigned int a2)
{
  char v6 = 0;
  uint64_t v7 = 0;
  v120[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(void **)(v8 + 8);
  uint64_t v10 = **(void ***)v8;
  uint64_t v11 = v10[2];
  uint64_t v12 = v10[3];
  uint64_t v13 = v11 * (a2 - 1);
  uint64_t v14 = v10[8];
  uint64_t v15 = v10[13];
  uint64_t v16 = v11 * a2;
  v120[0] = v12 + v16;
  v120[1] = v14 + v16;
  uint64_t v17 = v15 + v16;
  v120[2] = v15 + v16;
  uint64_t result = v11 * (a2 + 1);
  uint64_t v19 = v9[3];
  uint64_t v20 = v9[2] * a2;
  uint64_t v21 = v19 + v20;
  uint64_t v22 = v9[8];
  uint64_t v23 = v22 + v20;
  v119[0] = v19 + v20;
  v119[1] = v22 + v20;
  uint64_t v24 = v9[13];
  uint64_t v25 = v24 + v20;
  v119[2] = v24 + v20;
  unint64_t v26 = **(void **)(v8 + 16) - 1;
  v118[0] = 0;
  v118[1] = v26;
  do
  {
    uint64_t v27 = 0;
    char v28 = v6;
    uint64_t v29 = v118[v7];
    do
    {
      *(_DWORD *)(v119[v27] + 4 * v29) = *(_DWORD *)(v120[v27] + 4 * v29);
      ++v27;
    }
    while (v27 != 3);
    char v6 = 1;
    uint64_t v7 = 1;
  }
  while ((v28 & 1) == 0);
  unint64_t v30 = 4;
  if (v26 < 4) {
    unint64_t v30 = v26;
  }
  __asm
  {
    FMOV            V0.2S, #-4.0
    FMOV            V1.2S, #3.0
  }
  if (v30 < 2)
  {
    unint64_t v45 = 1;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = v20 + 4;
    uint64_t v39 = v24 + v20 + 4;
    uint64_t v40 = v22 + v38;
    uint64_t v41 = v19 + v38;
    float32x2_t v42 = (float32x2_t)vdup_n_s32(0x3D561170u);
    float32x2_t v43 = (float32x2_t)vdup_n_s32(0x3E505590u);
    float32x2_t v44 = (float32x2_t)vdup_n_s32(0x3D092563u);
    unint64_t v45 = 1;
    do
    {
      int v46 = **(const float ***)(v8 + 24);
      v2.i32[0] = *(_DWORD *)(v12 + v16 + 8 + v37 - 4);
      float32x2_t v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.f32, 0);
      float32x2_t v48 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, v2.f32[0]), v43, (float)(*(float *)(v12 + v16 + v37) + *(float *)(v12 + v16 + 8 + v37))+ (float)(*(float *)(v12 + v13 + 8 + v37 - 4) + *(float *)(v12 + result + 8 + v37 - 4))), v44, (float)(*(float *)(v12 + v13 + v37) + *(float *)(v12 + v13 + 8 + v37))+ (float)(*(float *)(v12 + result + v37) + *(float *)(v12 + result + 8 + v37)));
      unsigned int v49 = v46 + 2;
      float32x2_t v50 = vld1_dup_f32(v46++);
      v3.i32[0] = *(_DWORD *)(v14 + v16 + 8 + v37 - 4);
      float32x2_t v51 = (float32x2_t)vdup_lane_s32(v3, 0);
      *(float32x2_t *)v2.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, *(float *)v3.i32), v43, (float)(*(float *)(v14 + v16 + v37) + *(float *)(v14 + v16 + 8 + v37))+ (float)(*(float *)(v14 + v13 + 8 + v37 - 4) + *(float *)(v14 + result + 8 + v37 - 4))), v44, (float)(*(float *)(v14 + v13 + v37) + *(float *)(v14 + v13 + 8 + v37))+ (float)(*(float *)(v14 + result + v37) + *(float *)(v14 + result + 8 + v37)));
      float32x2_t v52 = vld1_dup_f32(v46);
      float32x2_t v53 = vmaxnm_f32(vmaxnm_f32(vabs_f32(vdiv_f32(vsub_f32(v47, v48), v50)), (float32x2_t)0x3F0000003F000000), vabs_f32(vdiv_f32(vsub_f32(v51, *(float32x2_t *)v2.f32), v52)));
      v5.i32[0] = *(_DWORD *)(v17 + v37 + 4);
      float32x2_t v54 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0);
      float32x2_t v55 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, v5.f32[0]), v43, (float)(*(float *)(v17 + v37) + *(float *)(v17 + v37 + 8))+ (float)(*(float *)(v15 + v13 + v37 + 4) + *(float *)(v15 + result + v37 + 4))), v44, (float)(*(float *)(v15 + v13 + v37) + *(float *)(v15 + v13 + v37 + 8))+ (float)(*(float *)(v15 + result + v37) + *(float *)(v15 + result + v37 + 8)));
      float32x2_t v56 = vld1_dup_f32(v49);
      float32x2_t v57 = vmaxnm_f32(vmla_f32(_D1, _D0, vmaxnm_f32(v53, vabs_f32(vdiv_f32(vsub_f32(v54, v55), v56)))), 0);
      *(_DWORD *)(v41 + v37) = vmla_f32(v47, v57, vsub_f32(v48, v47)).u32[0];
      *(float32x2_t *)v4.f32 = vmla_f32(v51, v57, vsub_f32(*(float32x2_t *)v2.f32, v51));
      *(_DWORD *)(v40 + v37) = v4.i32[0];
      *(_DWORD *)(v39 + v37) = vmla_f32(v54, v57, vsub_f32(v55, v54)).u32[0];
      ++v45;
      unint64_t v26 = **(void **)(v8 + 16) - 1;
      if (v26 >= 4) {
        unint64_t v58 = 4;
      }
      else {
        unint64_t v58 = **(void **)(v8 + 16) - 1;
      }
      v37 += 4;
    }
    while (v45 < v58);
  }
  if (v45 + 4 <= v26)
  {
    uint64_t v59 = 4 * v45;
    uint64_t v60 = v12 + v13 + 4;
    uint64_t v61 = v12 + v16 + 4;
    uint64_t v62 = result + v15 - 4;
    uint64_t v63 = v12 + result + 4;
    uint64_t v64 = v14 + v13 + 4;
    float32x4_t v65 = (float32x4_t)vdupq_n_s32(0x3D561170u);
    uint64_t v66 = v16 + v15 - 4;
    uint64_t v67 = v14 + v16 + 4;
    float32x4_t v68 = (float32x4_t)vdupq_n_s32(0x3E505590u);
    float32x4_t v69 = (float32x4_t)vdupq_n_s32(0x3D092563u);
    uint64_t v70 = v14 + result + 4;
    v71.i64[0] = 0x3F0000003F000000;
    v71.i64[1] = 0x3F0000003F000000;
    uint64_t v72 = v13 + v15 - 4;
    __asm
    {
      FMOV            V6.4S, #-4.0
      FMOV            V7.4S, #3.0
    }
    uint64_t v75 = v21;
    uint64_t v76 = v23;
    uint64_t v77 = v25;
    do
    {
      double v78 = **(const float ***)(v8 + 24);
      float32x4_t v79 = *(float32x4_t *)(v61 + v59 - 4);
      uint64_t v80 = v78 + 2;
      float32x4_t v81 = vld1q_dup_f32(v78++);
      float32x4_t v82 = vmlaq_f32(vmlaq_f32(vmulq_f32(v79, v65), v68, vaddq_f32(vaddq_f32(*(float32x4_t *)(v61 + v59 - 8), *(float32x4_t *)(v61 + v59)), vaddq_f32(*(float32x4_t *)(v60 + v59 - 4), *(float32x4_t *)(v63 + v59 - 4)))), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v60 + v59 - 8), *(float32x4_t *)(v60 + v59)), vaddq_f32(*(float32x4_t *)(v63 + v59 - 8), *(float32x4_t *)(v63 + v59))));
      float32x4_t v83 = *(float32x4_t *)(v67 + v59 - 4);
      float32x4_t v84 = vmlaq_f32(vmlaq_f32(vmulq_f32(v83, v65), v68, vaddq_f32(vaddq_f32(*(float32x4_t *)(v67 + v59 - 8), *(float32x4_t *)(v67 + v59)), vaddq_f32(*(float32x4_t *)(v64 + v59 - 4), *(float32x4_t *)(v70 + v59 - 4)))), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v64 + v59 - 8), *(float32x4_t *)(v64 + v59)), vaddq_f32(*(float32x4_t *)(v70 + v59 - 8), *(float32x4_t *)(v70 + v59))));
      float32x4_t v85 = vld1q_dup_f32(v78);
      float32x4_t v86 = *(float32x4_t *)(v66 + v59 + 4);
      float32x4_t v4 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v66 + v59), *(float32x4_t *)(v66 + v59 + 8)), vaddq_f32(*(float32x4_t *)(v72 + v59 + 4), *(float32x4_t *)(v62 + v59 + 4)));
      float32x4_t v87 = vmaxnmq_f32(vmaxnmq_f32(vabsq_f32(vdivq_f32(vsubq_f32(v79, v82), v81)), v71), vabsq_f32(vdivq_f32(vsubq_f32(v83, v84), v85)));
      float32x4_t v88 = vmlaq_f32(vmlaq_f32(vmulq_f32(v86, v65), v68, v4), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v72 + v59), *(float32x4_t *)(v72 + v59 + 8)), vaddq_f32(*(float32x4_t *)(v62 + v59), *(float32x4_t *)(v62 + v59 + 8))));
      float32x4_t v89 = vld1q_dup_f32(v80);
      float32x4_t v2 = vsubq_f32(v86, v88);
      float32x4_t v90 = vmaxnmq_f32(vmlaq_f32(_Q7, _Q6, vmaxnmq_f32(v87, vabsq_f32(vdivq_f32(v2, v89)))), (float32x4_t)0);
      *(float32x4_t *)(v75 + v59) = vmlaq_f32(v79, v90, vsubq_f32(v82, v79));
      float32x4_t v5 = vmlaq_f32(v83, v90, vsubq_f32(v84, v83));
      *(float32x4_t *)(v76 + v59) = v5;
      *(float32x4_t *)(v77 + v59) = vmlaq_f32(v86, v90, vsubq_f32(v88, v86));
      unint64_t v91 = v45 + 8;
      v45 += 4;
      v77 += 16;
      v76 += 16;
      v75 += 16;
      v60 += 16;
      v61 += 16;
      v62 += 16;
      v63 += 16;
      unint64_t v26 = **(void **)(v8 + 16) - 1;
      v64 += 16;
      v66 += 16;
      v67 += 16;
      v70 += 16;
      v72 += 16;
    }
    while (v91 <= v26);
  }
  if (v45 < v26)
  {
    uint64_t v92 = 4 * v45;
    uint64_t v93 = v12 + v13 + 4;
    uint64_t v94 = v16 + 4;
    float32x2_t v95 = (float32x2_t)vdup_n_s32(0x3D561170u);
    float32x2_t v96 = (float32x2_t)vdup_n_s32(0x3E505590u);
    uint64_t v97 = v12 + v16 + 4;
    float32x2_t v98 = (float32x2_t)vdup_n_s32(0x3D092563u);
    uint64_t v99 = result + v15 - 4;
    uint64_t v100 = result + 4;
    uint64_t v101 = v12 + result + 4;
    uint64_t result = v14 + v13 + 4;
    uint64_t v102 = v16 + v15 - 4;
    uint64_t v103 = v14 + v94;
    uint64_t v104 = v14 + v100;
    uint64_t v105 = v13 + v15 - 4;
    unint64_t v106 = v45;
    do
    {
      int v107 = **(const float ***)(v8 + 24);
      v2.i32[0] = *(_DWORD *)(v97 + v92 - 4);
      float32x2_t v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.f32, 0);
      int v109 = v107 + 2;
      float32x2_t v110 = vld1_dup_f32(v107++);
      v4.i32[0] = *(_DWORD *)(v103 + v92 - 4);
      float32x2_t v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 0);
      float32x2_t v112 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v2.f32[0]), v96, (float)(*(float *)(v97 + 4 * v45 - 8) + *(float *)(v97 + 4 * v45))+ (float)(*(float *)(v93 + 4 * v45 - 4) + *(float *)(v101 + 4 * v45 - 4))), v98, (float)(*(float *)(v93 + 4 * v45 - 8) + *(float *)(v93 + 4 * v45))+ (float)(*(float *)(v101 + 4 * v45 - 8) + *(float *)(v101 + 4 * v45)));
      float32x2_t v113 = vld1_dup_f32(v107);
      *(float32x2_t *)v2.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v4.f32[0]), v96, (float)(*(float *)(v103 + 4 * v45 - 8) + *(float *)(v103 + 4 * v45))+ (float)(*(float *)(result + 4 * v45 - 4) + *(float *)(v104 + 4 * v45 - 4))), v98, (float)(*(float *)(result + 4 * v45 - 8) + *(float *)(result + 4 * v45))+ (float)(*(float *)(v104 + 4 * v45 - 8) + *(float *)(v104 + 4 * v45)));
      v5.i32[0] = *(_DWORD *)(v102 + v92 + 4);
      float32x2_t v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0);
      float32x2_t v115 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v5.f32[0]), v96, (float)(*(float *)(v102 + 4 * v45) + *(float *)(v102 + 4 * v45 + 8))+ (float)(*(float *)(v105 + 4 * v45 + 4) + *(float *)(v99 + 4 * v45 + 4))), v98, (float)(*(float *)(v105 + 4 * v45) + *(float *)(v105 + 4 * v45 + 8))+ (float)(*(float *)(v99 + 4 * v45) + *(float *)(v99 + 4 * v45 + 8)));
      float32x2_t v116 = vld1_dup_f32(v109);
      float32x2_t v117 = vmaxnm_f32(vmla_f32(_D1, _D0, vmaxnm_f32(vmaxnm_f32(vmaxnm_f32(vabs_f32(vdiv_f32(vsub_f32(v108, v112), v110)), (float32x2_t)0x3F0000003F000000), vabs_f32(vdiv_f32(vsub_f32(v111, *(float32x2_t *)v2.f32), v113))), vabs_f32(vdiv_f32(vsub_f32(v114, v115), v116)))), 0);
      *(_DWORD *)(v21 + 4 * v45) = vmla_f32(v108, v117, vsub_f32(v112, v108)).u32[0];
      *(_DWORD *)(v23 + 4 * v45) = vmla_f32(v111, v117, vsub_f32(*(float32x2_t *)v2.f32, v111)).u32[0];
      *(_DWORD *)(v25 + 4 * v45) = vmla_f32(v114, v117, vsub_f32(v115, v114)).u32[0];
      ++v106;
      v25 += 4;
      v23 += 4;
      v21 += 4;
      v93 += 4;
      v97 += 4;
      v99 += 4;
      v101 += 4;
      result += 4;
      v102 += 4;
      v103 += 4;
      v104 += 4;
      v105 += 4;
    }
    while (v106 < **(void **)(v8 + 16) - 1);
  }
  return result;
}

uint64_t sub_2483F176C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_2483F1794()
{
  return 0;
}

BOOL sub_2483F179C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 20);
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v1 == byte_248550964[v2]
    && (int v3 = *(unsigned __int8 *)(a1 + 21), v3 == byte_248550968[v2])
    && (uint64_t v4 = *(unsigned int *)(a1 + 16), v1 == byte_248550964[v4])
    && v3 == byte_248550968[v4]
    && (uint64_t v5 = *(unsigned int *)(a1 + 12), v1 == byte_248550964[v5]))
  {
    return v3 == byte_248550968[v5];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2483F1814(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v22 = v4;
  if (v3 < 3 || v4 < 3) {
    return 0;
  }
  sub_2483F0C3C((uint64_t)v20, v4, v3);
  uint64_t result = v21;
  if (!v21)
  {
    sub_2483F0E78((uint64_t)v17, (uint64_t)v20);
    uint64_t v9 = 0;
    size_t v10 = 4 * v4;
    do
    {
      uint64_t v11 = 0;
      unint64_t v26 = 0;
      uint64_t v27 = (unsigned char *)(v3 - 1);
      do
      {
        memcpy((void *)(v19[5 * v9] + v18 * (void)(&v26)[v11]), (const void *)(*(void *)&a2[10 * v9 + 6] + *((void *)a2 + 2) * (void)(&v26)[v11]), v10);
        ++v11;
      }
      while (v11 != 2);
      ++v9;
    }
    while (v9 != 3);
    unint64_t v26 = &v23;
    uint64_t v27 = v17;
    char v28 = &v22;
    uint64_t v29 = &v24;
    uint64_t v12 = (v3 - 1);
    if (a3)
    {
      sub_2483F0F28(a3, v12, (uint64_t)&v26);
    }
    else
    {
      v25[0] = 0;
      v25[1] = v25;
      sub_2483F0F28((uint64_t)v25, v12, (uint64_t)&v26);
    }
    uint64_t v13 = 0;
    uint64_t v14 = v23;
    do
    {
      sub_24841F6D4((int *)&v17[v13 * 4], (int *)&v14[v13]);
      v13 += 10;
    }
    while (v13 != 30);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)&v17[i]);
    if (!v21)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v20[j]);
    }
    return 0;
  }
  return result;
}

void sub_2483F19EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a11 + i));
  if (!a41)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a26 + j));
  }
  _Unwind_Resume(a1);
}

void sub_2483F1A40(void *a1, void *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7, int **a8, float a9)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (sub_2483F179C(a7))
  {
    unint64_t v18 = a1[3];
    if (v18)
    {
      unint64_t v19 = 0;
      float v20 = *a5 * a9;
      float v21 = a5[1] * a9;
      float v22 = a5[2] * a9;
      float v23 = *a6;
      float v24 = a6[2];
      unint64_t v25 = a1[2];
      do
      {
        if (v25)
        {
          unint64_t v26 = 0;
          uint64_t v27 = a2[2] * (a1[1] + v19) + 4 * *a1;
          char v28 = (float32x4_t *)(a2[13] + v27);
          uint64_t v29 = (float32x4_t *)(a2[3] + v27);
          uint64_t v30 = (float32x4_t *)(a2[8] + v27);
          uint64_t v31 = (int32x4_t *)(*(void *)(*(void *)a4 + 152) + *(void *)(*(void *)a4 + 144) * v19);
          uint64_t v32 = (int32x4_t *)(*(void *)(*(void *)a4 + 24) + *(void *)(*(void *)a4 + 16) * v19);
          uint64_t v33 = (int32x4_t *)(*(void *)(*(void *)a4 + 88) + *(void *)(*(void *)a4 + 80) * v19);
          do
          {
            int32x4_t v34 = *v33++;
            int32x4_t v35 = v34;
            int32x4_t v36 = *v32++;
            int32x4_t v37 = v36;
            int32x4_t v38 = *v31++;
            float32x4_t v39 = vmulq_n_f32(vcvtq_f32_s32(v37), v21);
            *v30++ = v39;
            *v29++ = vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_s32(v35), v20), v39, v23);
            *v28++ = vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_s32(v38), v22), v39, v24);
            v26 += 4;
            unint64_t v25 = a1[2];
          }
          while (v26 < v25);
          unint64_t v18 = a1[3];
        }
        ++v19;
      }
      while (v19 < v18);
    }
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v81 = 1;
    int v82 = 2;
    do
    {
      unint64_t v41 = *((int *)&v81 + v40);
      uint64_t v42 = *(unsigned int *)(a7 + 4 * v41 + 8);
      char v43 = *(unsigned char *)(a7 + 21) - byte_248550968[v42];
      uint64_t v44 = a1[3] >> v43;
      if (v44)
      {
        uint64_t v45 = 0;
        char v46 = *(unsigned char *)(a7 + 20) - byte_248550964[v42];
        uint64_t v47 = *a1 >> v46;
        uint64_t v48 = a1[1] >> v43;
        unint64_t v49 = a1[2] >> v46;
        unint64_t v50 = *(void *)a4 + (((v41 < 2) ^ v41) << 6);
        float v51 = a5[v41] * a9;
        float32x2_t v52 = &a2[5 * (int)v41 + 3];
        uint64_t v53 = 4 * v47;
        do
        {
          if (v49)
          {
            unint64_t v54 = 0;
            float32x2_t v55 = (float32x4_t *)(*v52 + v53 + a2[2] * v48);
            float32x2_t v56 = (int32x4_t *)(*(void *)(v50 + 24) + *(void *)(v50 + 16) * v45);
            do
            {
              int32x4_t v57 = *v56++;
              *v55++ = vmulq_n_f32(vcvtq_f32_s32(v57), v51);
              v54 += 4;
            }
            while (v54 < v49);
          }
          ++v45;
          ++v48;
        }
        while (v45 != v44);
      }
      ++v40;
    }
    while (v40 != 3);
    unint64_t v18 = a1[3];
  }
  if ((unint64_t)a8[16] >= 2)
  {
    if (v18)
    {
      unint64_t v59 = 0;
      unint64_t v60 = a1[2];
      do
      {
        if (v60)
        {
          unint64_t v61 = 0;
          char v62 = *(unsigned char *)(a7 + 21);
          unint64_t v63 = *(void *)(*(void *)a4 + 88)
              + (v59 >> (v62 - byte_248550968[*(unsigned int *)(a7 + 8)])) * *(void *)(*(void *)a4 + 80);
          unint64_t v64 = *(void *)(*(void *)a4 + 24)
              + (v59 >> (v62 - byte_248550968[*(unsigned int *)(a7 + 12)])) * *(void *)(*(void *)a4 + 16);
          uint64_t v65 = *(void *)(a3 + 24) + *(void *)(a3 + 16) * (a1[1] + v59) + *a1;
          unint64_t v66 = *(void *)(*(void *)a4 + 152)
              + (v59 >> (v62 - byte_248550968[*(unsigned int *)(a7 + 16)])) * *(void *)(*(void *)a4 + 144);
          do
          {
            float32x4_t v68 = *a8;
            uint64_t v67 = a8[1];
            if (*a8 == v67)
            {
              char v69 = 0;
            }
            else
            {
              char v69 = 0;
              do
              {
                int v70 = *v68++;
                if (*(_DWORD *)(v63 + 4 * (v61 >> (*(unsigned char *)(a7 + 20) - byte_248550964[*(unsigned int *)(a7 + 8)]))) > v70) {
                  ++v69;
                }
              }
              while (v68 != v67);
            }
            uint64_t v72 = a8[3];
            float32x4_t v71 = a8[4];
            if (v72 == v71)
            {
              char v73 = 0;
            }
            else
            {
              char v73 = 0;
              double v74 = a8[3];
              do
              {
                int v75 = *v74++;
                if (*(_DWORD *)(v64 + 4 * (v61 >> (*(unsigned char *)(a7 + 20) - byte_248550964[*(unsigned int *)(a7 + 12)]))) > v75) {
                  ++v73;
                }
              }
              while (v74 != v71);
            }
            uint64_t v76 = a8[6];
            uint64_t v77 = a8[7];
            if (v76 == v77)
            {
              char v78 = 0;
            }
            else
            {
              char v78 = 0;
              float32x4_t v79 = a8[6];
              do
              {
                int v80 = *v79++;
                if (*(_DWORD *)(v66 + 4 * (v61 >> (*(unsigned char *)(a7 + 20) - byte_248550964[*(unsigned int *)(a7 + 16)]))) > v80) {
                  ++v78;
                }
              }
              while (v79 != v77);
            }
            *(unsigned char *)(v65 + v61++) = v78
                                    + v69
                                    + v69 * ((v77 - v76) >> 2)
                                    + (v78 + v69 + v69 * ((v77 - v76) >> 2))
                                    * ((v71 - v72) >> 2)
                                    + v73;
            unint64_t v60 = a1[2];
          }
          while (v61 < v60);
          unint64_t v18 = a1[3];
        }
        ++v59;
      }
      while (v59 < v18);
    }
  }
  else if (v18)
  {
    unint64_t v58 = 0;
    do
    {
      bzero((void *)(*(void *)(a3 + 24) + *(void *)(a3 + 16) * (v58 + a1[1]) + *a1), a1[2]);
      ++v58;
    }
    while (v58 < a1[3]);
  }
}

uint64_t sub_2483F1E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 8);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *v4))
    {
      return 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x80000200800000E0, 0x10E80001000, 224, a1 + 12);
      if (!result)
      {
        char v6 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);
        return v6(a2, 0x8000000480000003, 0x127000000A1, 3, a1 + 16);
      }
    }
  }
  return result;
}

void sub_2483F1FD4()
{
}

void sub_2483F1FEC(char **a1, unint64_t a2, _DWORD *a3)
{
  char v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      float v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)uint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        sub_2483E92E8();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)sub_2483E9300(v12);
      uint64_t v15 = &v13[4 * v7];
      uint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      unint64_t v18 = v15;
      do
      {
        *(_DWORD *)unint64_t v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      unint64_t v19 = &v13[4 * v14];
      float v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void sub_2483F2118(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v16 = &v4[4 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 2)
  {
    bzero(a1[1], 4 * v6);
    uint64_t v16 = &v3[4 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 62) {
    sub_2483E9338();
  }
  unint64_t v11 = (char *)operator new(4 * v10);
  unint64_t v12 = &v11[4 * v5];
  uint64_t v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  uint64_t v14 = &v12[4 * v6];
  if (v3 != v4)
  {
    do
    {
      int v15 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *((_DWORD *)v12 - 1) = v15;
      v12 -= 4;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t sub_2483F223C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (unsigned int *)(*(void *)(result + 32) + 16 * a2);
  if (*(unsigned char *)(result + 96) && *(void *)(result + 128) != a2)
  {
    unint64_t v4 = *(unsigned int *)(result + 100);
    BOOL v5 = a3 >= v4;
    unint64_t v6 = a3 - v4;
    if (v5) {
      uint64_t v3 = (unsigned int *)(result + 108);
    }
    if (v5) {
      a3 = v6;
    }
  }
  unint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  BOOL v5 = a3 >= v8;
  unint64_t v9 = a3 - v8;
  if (v5)
  {
    unint64_t v10 = v3[2] + (unint64_t)v3[3];
    unint64_t v7 = v10 + v7 - v10 + (v9 >> v10) + 1;
  }
  unint64_t v11 = *(void *)(result + 136);
  if (v11 <= v7) {
    unint64_t v11 = v7;
  }
  *(void *)(result + 136) = v11;
  return result;
}

uint64_t sub_2483F22A8(unint64_t *a1)
{
  uint64_t v2 = (void *)a1[2];
  if ((unint64_t)v2 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  else
  {
    unint64_t v3 = a1[1];
    unint64_t v4 = *a1 | (*v2 << v3);
    a1[2] = (unint64_t)v2 + ((63 - v3) >> 3);
    uint64_t v5 = v3 | 0x38;
  }
  uint64_t v6 = v5 - 1;
  *a1 = v4 >> 1;
  a1[1] = v5 - 1;
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v8 = (void *)a1[2];
  if ((unint64_t)v8 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v9 = *a1;
    uint64_t v10 = a1[1];
  }
  else
  {
    unint64_t v9 = (*v8 << v6) | (v4 >> 1);
    a1[2] = (unint64_t)v8 + ((unint64_t)(64 - v5) >> 3);
    uint64_t v10 = v6 | 0x38;
  }
  uint64_t v11 = v10 - 3;
  *a1 = v9 >> 3;
  a1[1] = v10 - 3;
  uint64_t v12 = v9 & 7;
  if ((v9 & 7) == 0) {
    return 1;
  }
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v14 = *a1;
    uint64_t v15 = a1[1];
  }
  else
  {
    unint64_t v14 = (*v13 << v11) | (v9 >> 3);
    a1[2] = (unint64_t)v13 + ((unint64_t)(66 - v10) >> 3);
    uint64_t v15 = v11 | 0x38;
  }
  *a1 = v14 >> v12;
  a1[1] = v15 - v12;
  return (1 << v12) + (v14 & ~(-1 << v12));
}

void *sub_2483F23D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2483F2434(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2483F2450(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_2483E92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2483F24B0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483F24CC(uint64_t a1, _DWORD *a2, unint64_t *a3)
{
  uint64_t v7 = (void *)a3[2];
  unint64_t v6 = a3[3];
  if ((unint64_t)v7 > v6)
  {
    sub_2483EB0C0(a3);
    uint64_t v10 = (void *)a3[2];
    unint64_t v6 = a3[3];
  }
  else
  {
    unint64_t v8 = a3[1];
    unint64_t v9 = *a3 | (*v7 << v8);
    uint64_t v10 = (void *)((char *)v7 + ((63 - v8) >> 3));
    *a3 = v9;
    a3[1] = v8 | 0x38;
    a3[2] = (unint64_t)v10;
  }
  unint64_t v11 = __clz(a1 + 1) ^ 0x3F;
  if (((a1 + 1) & a1) != 0) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = v11;
  }
  if ((unint64_t)v10 > v6)
  {
    sub_2483EB0C0(a3);
    unint64_t v14 = *a3;
    uint64_t v15 = a3[1];
  }
  else
  {
    unint64_t v13 = a3[1];
    unint64_t v14 = *a3 | (*v10 << v13);
    a3[2] = (unint64_t)v10 + ((63 - v13) >> 3);
    uint64_t v15 = v13 | 0x38;
  }
  unint64_t v16 = v14 & ~(-1 << v12);
  unint64_t v17 = v15 - v12;
  unint64_t v18 = v14 >> v12;
  *a3 = v14 >> v12;
  a3[1] = v17;
  if (v16 == a1)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v21 = __clz(v16 + 1);
    uint64_t v22 = v21 ^ 0x3F;
    unint64_t v23 = 64 - v21;
    if (((v16 + 1) & v16) != 0) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = v22;
    }
    unint64_t v25 = (void *)a3[2];
    if ((unint64_t)v25 > a3[3])
    {
      sub_2483EB0C0(a3);
      unint64_t v26 = *a3;
      uint64_t v27 = a3[1];
    }
    else
    {
      unint64_t v26 = (*v25 << v17) | v18;
      a3[2] = (unint64_t)v25 + ((63 - v17) >> 3);
      uint64_t v27 = v17 | 0x38;
    }
    unint64_t v20 = v26 & ~(-1 << v24);
    uint64_t v28 = v27 - v24;
    unint64_t v29 = v26 >> v24;
    *a3 = v29;
    a3[1] = v27 - v24;
    unint64_t v30 = v16 - v20;
    if (v16 < v20) {
      return 1;
    }
    unint64_t v32 = __clz(v30 + 1) ^ 0x3F;
    if (((v30 + 1) & v30) != 0) {
      unint64_t v33 = v32 + 1;
    }
    else {
      unint64_t v33 = v32;
    }
    int32x4_t v34 = (void *)a3[2];
    if ((unint64_t)v34 > a3[3])
    {
      unint64_t v37 = v33;
      sub_2483EB0C0(a3);
      unint64_t v33 = v37;
      unint64_t v35 = *a3;
      uint64_t v36 = a3[1];
    }
    else
    {
      unint64_t v35 = (*v34 << v28) | v29;
      a3[2] = (unint64_t)v34 + ((unint64_t)(63 - v28) >> 3);
      uint64_t v36 = v28 | 0x38;
    }
    uint64_t v19 = v35 & ~(-1 << v33);
    *a3 = v35 >> v33;
    a3[1] = v36 - v33;
  }
  uint64_t result = 1;
  if (v20 + v19 <= v16)
  {
    *a2 = v16;
    a2[1] = 1 << v16;
    a2[2] = v20;
    a2[3] = v19;
    return 0;
  }
  return result;
}

uint64_t sub_2483F26D4(uint64_t a1)
{
  *(void *)a1 = &unk_26FC658E8;
  *(_OWORD *)(a1 + 20) = xmmword_2484DCAF0;
  unint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483F1E90(a1, (uint64_t)&v3);
  return a1;
}

uint64_t sub_2483F2760(unint64_t *a1, unint64_t a2, uint64_t a3, unint64_t *a4, char a5)
{
  uint64_t v7 = a3;
  uint64_t v289 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_24841A614((uint64_t)a1, a3 + 88);
  if (v10) {
    return v10;
  }
  if (*(unsigned char *)(v7 + 96))
  {
    uint64_t v10 = sub_2483F24CC(8, (_DWORD *)(v7 + 108), a1);
    if (v10) {
      return v10;
    }
    ++a2;
    if (*(unsigned char *)(v7 + 96))
    {
      if (a5) {
        return 1;
      }
    }
  }
  unint64_t v277 = 1;
  unint64_t v12 = a4[1] - *a4;
  if (a2 <= v12)
  {
    if (a2 < v12) {
      a4[1] = *a4 + a2;
    }
  }
  else
  {
    sub_2483EE8AC(a4, a2 - v12);
  }
  if (a2 >= 2)
  {
    uint64_t v10 = sub_2483F7A48((void **)a4, &v277, a1);
    if (v10) {
      return v10;
    }
  }
  *(void *)(v7 + 128) = *(unsigned __int8 *)(a4[1] - 1);
  unint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v15 = *a1;
    uint64_t v16 = a1[1];
  }
  else
  {
    unint64_t v14 = a1[1];
    unint64_t v15 = *a1 | (*v13 << v14);
    a1[2] = (unint64_t)v13 + ((63 - v14) >> 3);
    uint64_t v16 = v14 | 0x38;
  }
  uint64_t v17 = v16 - 1;
  *a1 = v15 >> 1;
  a1[1] = v16 - 1;
  *(unsigned char *)(v7 + 80) = v15 & 1;
  if (v15)
  {
    char v21 = 15;
  }
  else
  {
    unint64_t v18 = (void *)a1[2];
    if ((unint64_t)v18 > a1[3])
    {
      sub_2483EB0C0(a1);
      unint64_t v19 = *a1;
      uint64_t v20 = a1[1];
    }
    else
    {
      unint64_t v19 = (*v18 << v17) | (v15 >> 1);
      a1[2] = (unint64_t)v18 + ((unint64_t)(64 - v16) >> 3);
      uint64_t v20 = v17 | 0x38;
    }
    *a1 = v19 >> 2;
    a1[1] = v20 - 2;
    char v21 = (v19 & 3) + 5;
  }
  *(unsigned char *)(v7 + 81) = v21;
  unint64_t v22 = v277;
  sub_2483F3D70((void **)(v7 + 32), v277);
  uint64_t v23 = *(unsigned __int8 *)(v7 + 81);
  unint64_t v25 = *(_DWORD **)(v7 + 32);
  uint64_t v24 = *(_DWORD **)(v7 + 40);
  if (v25 != v24)
  {
    do
    {
      if (sub_2483F24CC(v23, v25, a1)) {
        return 1;
      }
      v25 += 4;
    }
    while (v25 != v24);
    LOBYTE(v23) = *(unsigned char *)(v7 + 81);
  }
  LODWORD(v287) = -1;
  size_t v270 = (void *)(v7 + 56);
  sub_2483F1FEC((char **)(v7 + 56), v22, &v287);
  unint64_t __src = 1 << v23;
  uint64_t v276 = v7;
  unint64_t v269 = v22;
  if (!*(unsigned char *)(v7 + 80))
  {
    unint64_t v45 = sub_2484D7BCC(8 * v22 * (1 << *(unsigned char *)(v7 + 81)), (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
    unint64_t v46 = *(void *)v7;
    *(void *)uint64_t v7 = v45;
    if (v46)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v46 - 24));
      free(*(void **)(v46 - 32));
      unint64_t v47 = *(void *)v7;
    }
    else
    {
      unint64_t v47 = v45;
    }
    if (!v22) {
      return 0;
    }
    uint64_t v52 = 0;
    unint64_t v267 = v47;
    while (1)
    {
      v281[0] = 0;
      v281[1] = 0;
      uint64_t v282 = 0;
      uint64_t v53 = (void *)a1[2];
      if ((unint64_t)v53 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v55 = *a1;
        uint64_t v56 = a1[1];
      }
      else
      {
        unint64_t v54 = a1[1];
        unint64_t v55 = *a1 | (*v53 << v54);
        a1[2] = (unint64_t)v53 + ((63 - v54) >> 3);
        uint64_t v56 = v54 | 0x38;
        *a1 = v55;
        a1[1] = v54 | 0x38;
      }
      uint64_t v57 = v56 - 1;
      unint64_t v58 = v55 >> 1;
      *a1 = v55 >> 1;
      a1[1] = v56 - 1;
      if ((v55 & 1) == 0) {
        break;
      }
      *(void *)&long long v287 = 0;
      char v69 = (void *)a1[2];
      if ((unint64_t)v69 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v70 = *a1;
        uint64_t v72 = a1[1];
      }
      else
      {
        unint64_t v70 = (*v69 << v57) | v58;
        float32x4_t v71 = (char *)v69 + ((unint64_t)(64 - v56) >> 3);
        uint64_t v72 = v57 | 0x38;
        *a1 = v70;
        a1[1] = v57 | 0x38;
        a1[2] = (unint64_t)v71;
      }
      uint64_t v73 = 0;
      int v74 = 0;
      *a1 = v70 >> 1;
      a1[1] = v72 - 1;
      do
      {
        int v75 = sub_2483F22A8(a1);
        *(_DWORD *)((char *)&v287 + v73) = v75;
        if (v75 > v74) {
          int v74 = v75;
        }
        v73 += 4;
      }
      while (4 * (v70 & 1) + 4 != v73);
      sub_2483EB1C4((char **)v281, v74 + 1);
      unint64_t v47 = v267;
      uint64_t v76 = (int)v287;
      if ((v70 & 1) == 0)
      {
        uint64_t v77 = (char *)v281[0];
        *((_DWORD *)v281[0] + (int)v287) = 4096;
        goto LABEL_131;
      }
      uint64_t v101 = SDWORD1(v287);
      if (v287 == DWORD1(v287)) {
        goto LABEL_164;
      }
      uint64_t v102 = (void *)a1[2];
      if ((unint64_t)v102 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v104 = *a1;
        uint64_t v105 = a1[1];
      }
      else
      {
        unint64_t v103 = a1[1];
        unint64_t v104 = *a1 | (*v102 << v103);
        a1[2] = (unint64_t)v102 + ((63 - v103) >> 3);
        uint64_t v105 = v103 | 0x38;
        *a1 = v104;
        a1[1] = v103 | 0x38;
      }
      *a1 = v104 >> 12;
      a1[1] = v105 - 12;
      int v106 = v104 & 0xFFF;
      uint64_t v77 = (char *)v281[0];
      *((_DWORD *)v281[0] + v76) = v106;
      *(_DWORD *)&v77[4 * v101] = 4096 - v106;
LABEL_131:
      char v128 = (char *)v281[1];
      if (__src < ((char *)v281[1] - (char *)v77) >> 2)
      {
LABEL_164:
        if (v281[0]) {
          operator delete(v281[0]);
        }
        return 1;
      }
      if (v77 == v281[1])
      {
        unint64_t v131 = 0;
        int v132 = 0;
LABEL_138:
        char v128 = v77;
      }
      else
      {
        uint64_t v129 = (char *)v281[1];
        while (1)
        {
          int v130 = *((_DWORD *)v129 - 1);
          v129 -= 4;
          if (v130) {
            break;
          }
          char v128 = v129;
          if (v129 == v77)
          {
            unint64_t v131 = 0;
            int v132 = 0;
            v281[1] = v77;
            goto LABEL_138;
          }
        }
        v281[1] = v128;
        unint64_t v133 = v128 - v77;
        unint64_t v131 = (v128 - v77) >> 2;
        if (v128 != v77)
        {
          unint64_t v134 = 0;
          if (v131 <= 1) {
            uint64_t v135 = 1;
          }
          else {
            uint64_t v135 = (v128 - v77) >> 2;
          }
          do
          {
            if (*(_DWORD *)&v77[4 * v134]) {
              sub_2483F223C(v276, v52, v134);
            }
            ++v134;
          }
          while (v135 != v134);
        }
        int v132 = (v133 >> 2) - 1;
        if (v132 < 1)
        {
          unint64_t v22 = v269;
        }
        else
        {
          int v136 = v77;
          uint64_t v137 = (v133 >> 2) - 1;
          unint64_t v22 = v269;
          while (1)
          {
            int v138 = *(_DWORD *)v136;
            v136 += 4;
            if (v138) {
              break;
            }
            if (!--v137) {
              goto LABEL_139;
            }
          }
          int v132 = -1;
        }
      }
LABEL_139:
      *(_DWORD *)(*v270 + 4 * v52) = v132;
      v279 = 0;
      uint64_t v280 = 0;
      size_t v278 = 0;
      sub_2483F2450(&v278, v77, (uint64_t)v128, v131);
      sub_2483E93FC((_DWORD **)&v278, *(unsigned char *)(v276 + 81), v47 + 8 * v52 * (1 << *(unsigned char *)(v276 + 81)));
      if (v278)
      {
        v279 = v278;
        operator delete(v278);
      }
      if (v281[0]) {
        operator delete(v281[0]);
      }
      if (++v52 == v22) {
        return 0;
      }
    }
    unint64_t v59 = (void *)a1[2];
    if ((unint64_t)v59 > a1[3])
    {
      sub_2483EB0C0(a1);
      unint64_t v60 = *a1;
      uint64_t v61 = a1[1];
    }
    else
    {
      unint64_t v60 = (*v59 << v57) | v58;
      a1[2] = (unint64_t)v59 + ((unint64_t)(64 - v56) >> 3);
      uint64_t v61 = v57 | 0x38;
      *a1 = v60;
      a1[1] = v57 | 0x38;
    }
    uint64_t v62 = v61 - 1;
    unint64_t v63 = v60 >> 1;
    *a1 = v60 >> 1;
    a1[1] = v62;
    if (v60)
    {
      int v78 = sub_2483F22A8(a1);
      sub_2483E91B8(&v287, v78 + 1);
      *(_OWORD *)char v281 = v287;
      uint64_t v282 = v288;
      uint64_t v77 = (char *)v287;
      goto LABEL_131;
    }
    for (unsigned int i = 0; i != 3; ++i)
    {
      uint64_t v65 = (void *)a1[2];
      if ((unint64_t)v65 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v66 = *a1;
        uint64_t v68 = a1[1];
      }
      else
      {
        unint64_t v66 = (*v65 << v62) | v63;
        uint64_t v67 = (char *)v65 + ((unint64_t)(63 - v62) >> 3);
        uint64_t v68 = v62 | 0x38;
        *a1 = v66;
        a1[1] = v62 | 0x38;
        a1[2] = (unint64_t)v67;
      }
      uint64_t v62 = v68 - 1;
      unint64_t v63 = v66 >> 1;
      *a1 = v66 >> 1;
      a1[1] = v68 - 1;
      if ((v66 & 1) == 0) {
        break;
      }
    }
    float32x4_t v79 = (void *)a1[2];
    if ((unint64_t)v79 > a1[3])
    {
      sub_2483EB0C0(a1);
      unint64_t v80 = *a1;
      uint64_t v81 = a1[1];
    }
    else
    {
      unint64_t v80 = (*v79 << v62) | v63;
      uint64_t v81 = v62 | 0x38;
      *a1 = v80;
      a1[1] = v81;
      a1[2] = (unint64_t)v79 + ((unint64_t)(64 - v68) >> 3);
    }
    *a1 = v80 >> i;
    a1[1] = v81 - i;
    unsigned int v266 = (1 << i) | v80 & ~(-1 << i);
    if (v266 > 0xE) {
      goto LABEL_164;
    }
    int v82 = sub_2483F22A8(a1);
    sub_2483EB1C4((char **)v281, v82 + 3);
    unint64_t v83 = ((char *)v281[1] - (char *)v281[0]) >> 2;
    sub_2483F23D8(&v287, v83);
    LODWORD(v283[0]) = 0;
    sub_2483E9224(__p, v83, v283);
    float32x4_t v84 = (void *)*((void *)&v287 + 1);
    float32x4_t v85 = (_DWORD *)v287;
    if (*((void *)&v287 + 1) == (void)v287)
    {
      BOOL v107 = 1;
      goto LABEL_125;
    }
    uint64_t v264 = *((void *)&v287 + 1);
    unint64_t v86 = 0;
    float32x4_t v87 = __p[0];
    unint64_t v88 = (uint64_t)(*((void *)&v287 + 1) - v287) >> 2;
    uint64_t v89 = 0xFFFFFFFFLL;
    int v90 = -1;
    do
    {
      unint64_t v91 = (void *)a1[2];
      if ((unint64_t)v91 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v93 = *a1;
        uint64_t v94 = a1[1];
      }
      else
      {
        unint64_t v92 = a1[1];
        unint64_t v93 = *a1 | (*v91 << v92);
        a1[2] = (unint64_t)v91 + ((63 - v92) >> 3);
        uint64_t v94 = v92 | 0x38;
        *a1 = v93;
        a1[1] = v92 | 0x38;
      }
      unint64_t v95 = v93 & 0x7F;
      float32x2_t v96 = (unsigned __int8 *)&unk_24854CA3B + 2 * v95;
      uint64_t v97 = *v96;
      *a1 = v93 >> v97;
      a1[1] = v94 - v97;
      int v98 = v96[1];
      v85[v86] = v98;
      if (v95 == 65)
      {
        int v99 = sub_2483F22A8(a1);
        v87[v86] = v99 + 5;
        v86 += v99 + 3;
      }
      else
      {
        BOOL v100 = v90 < v98;
        if (v90 <= v98) {
          int v90 = v98;
        }
        if (v100) {
          uint64_t v89 = v86;
        }
      }
      ++v86;
    }
    while (v86 < v88);
    if ((v89 & 0x80000000) != 0 || v89 + 1 < v88 && v85[v89 + 1] == 4097)
    {
      BOOL v107 = 1;
      goto LABEL_124;
    }
    uint64_t v108 = 0;
    int v109 = 0;
    int v110 = 0;
    int v111 = 0;
    float32x2_t v112 = v281[0];
    float32x2_t v113 = __p[0];
    uint64_t v114 = *((void *)&v287 + 1);
    float32x2_t v115 = (_DWORD *)v287;
    uint64_t v116 = v264;
    while (1)
    {
      int v117 = v113[v108];
      if (v117)
      {
        int v109 = v117 - 1;
        if (v108) {
          int v110 = v112[v108 - 1];
        }
        else {
          int v110 = 0;
        }
      }
      if (v109 < 1)
      {
        if (v89 == v108) {
          goto LABEL_121;
        }
        int v118 = v85[v108];
        if (!v118) {
          goto LABEL_121;
        }
        uint64_t v119 = v116;
        int v120 = v118 - 1;
        if (v118 != 1)
        {
          int v121 = v266 + ~((13 - v118) >> 1);
          if (v121 >= v120) {
            int v122 = v120;
          }
          else {
            int v122 = v121;
          }
          int v123 = (void *)a1[2];
          if ((unint64_t)v123 > a1[3])
          {
            int v263 = v115;
            uint64_t v265 = v113;
            uint64_t v127 = v114;
            int v262 = v122;
            sub_2483EB0C0(a1);
            int v122 = v262;
            float32x2_t v115 = v263;
            float32x2_t v113 = v265;
            uint64_t v114 = v127;
            unint64_t v125 = *a1;
            uint64_t v126 = a1[1];
            float32x4_t v85 = v263;
            uint64_t v119 = v114;
          }
          else
          {
            unint64_t v124 = a1[1];
            unint64_t v125 = *a1 | (*v123 << v124);
            a1[2] = (unint64_t)v123 + ((63 - v124) >> 3);
            uint64_t v126 = v124 | 0x38;
            *a1 = v125;
            a1[1] = v124 | 0x38;
          }
          *a1 = v125 >> (v122 & ~(v122 >> 31));
          a1[1] = v126 - (v122 & ~(v122 >> 31));
          int v118 = (1 << v120)
               + ((unint64_t)(v125 & ~(-1 << (v122 & ~(v122 >> 31)))) << (v120 - (v122 & ~(v122 >> 31))));
        }
        v112[v108] = v118;
        uint64_t v116 = v119;
      }
      else
      {
        v112[v108] = v110;
        int v118 = v110;
        --v109;
      }
      v111 += v118;
LABEL_121:
      if (++v108 >= (unint64_t)((v116 - (uint64_t)v85) >> 2))
      {
        v112[v89] = 4096 - v111;
        BOOL v107 = v111 > 4095;
LABEL_124:
        float32x4_t v84 = v85;
        unint64_t v47 = v267;
        unint64_t v22 = v269;
LABEL_125:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          float32x4_t v84 = (void *)v287;
        }
        if (v84)
        {
          *((void *)&v287 + 1) = v84;
          operator delete(v84);
        }
        if (!v107)
        {
          uint64_t v77 = (char *)v281[0];
          goto LABEL_131;
        }
        goto LABEL_164;
      }
    }
  }
  unint64_t v26 = *(void **)(v7 + 8);
  uint64_t v27 = *(void **)(v7 + 16);
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v27 - v26);
  unint64_t v29 = v22 - v28;
  if (v22 <= v28)
  {
    if (v22 < v28)
    {
      uint64_t v48 = &v26[3 * v22];
      if (v27 != v48)
      {
        unint64_t v49 = *(void **)(v7 + 16);
        do
        {
          float v51 = (void *)*(v49 - 3);
          v49 -= 3;
          unint64_t v50 = v51;
          if (v51)
          {
            *(v27 - 2) = v50;
            operator delete(v50);
          }
          uint64_t v27 = v49;
        }
        while (v49 != v48);
      }
      *(void *)(v7 + 16) = v48;
    }
  }
  else
  {
    uint64_t v30 = *(void *)(v7 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v27) >> 3) >= v29)
    {
      bzero(*(void **)(v7 + 16), 24 * ((24 * v29 - 24) / 0x18) + 24);
      *(void *)(v7 + 16) = &v27[3 * ((24 * v29 - 24) / 0x18) + 3];
      sub_2483F02B8(&v278, v22);
      goto LABEL_170;
    }
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v26) >> 3);
    uint64_t v32 = 2 * v31;
    if (2 * v31 <= v22) {
      uint64_t v32 = v22;
    }
    if (v31 >= 0x555555555555555) {
      unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v33 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E9338();
    }
    uint64_t v34 = 3 * v33;
    unint64_t v35 = (char *)operator new(24 * v33);
    uint64_t v36 = &v35[8 * (v27 - v26)];
    unint64_t v37 = &v35[8 * v34];
    size_t v38 = 24 * ((24 * v29 - 24) / 0x18) + 24;
    bzero(v36, v38);
    float32x4_t v39 = &v36[v38];
    if (v27 == v26)
    {
      *(void *)(v7 + 8) = v36;
      *(void *)(v7 + 16) = v39;
      *(void *)(v7 + 24) = v37;
    }
    else
    {
      do
      {
        *((void *)v36 - 3) = 0;
        *((void *)v36 - 2) = 0;
        v36 -= 24;
        *((void *)v36 + 2) = 0;
        long long v40 = *(_OWORD *)(v27 - 3);
        v27 -= 3;
        *(_OWORD *)uint64_t v36 = v40;
        *((void *)v36 + 2) = v27[2];
        *uint64_t v27 = 0;
        v27[1] = 0;
        v27[2] = 0;
      }
      while (v27 != v26);
      unint64_t v41 = *(void **)(v7 + 8);
      uint64_t v27 = *(void **)(v7 + 16);
      *(void *)(v7 + 8) = v36;
      *(void *)(v7 + 16) = v39;
      *(void *)(v7 + 24) = v37;
      if (v27 != v41)
      {
        uint64_t v42 = v27;
        do
        {
          uint64_t v44 = (void *)*(v42 - 3);
          v42 -= 3;
          char v43 = v44;
          if (v44)
          {
            *(v27 - 2) = v43;
            operator delete(v43);
          }
          uint64_t v27 = v42;
        }
        while (v42 != v41);
        uint64_t v27 = v41;
      }
    }
    if (v27) {
      operator delete(v27);
    }
  }
  sub_2483F02B8(&v278, v22);
  if (!v22)
  {
LABEL_309:
    int v156 = 0;
    uint64_t v10 = 1;
    goto LABEL_313;
  }
LABEL_170:
  uint64_t v139 = 0;
  float v140 = v278;
  do
  {
    uint64_t v141 = (void *)a1[2];
    if ((unint64_t)v141 > a1[3])
    {
      sub_2483EB0C0(a1);
      unint64_t v143 = *a1;
      uint64_t v144 = a1[1];
    }
    else
    {
      unint64_t v142 = a1[1];
      unint64_t v143 = *a1 | (*v141 << v142);
      a1[2] = (unint64_t)v141 + ((63 - v142) >> 3);
      uint64_t v144 = v142 | 0x38;
    }
    uint64_t v145 = v144 - 1;
    *a1 = v143 >> 1;
    a1[1] = v144 - 1;
    if (v143)
    {
      uint64_t v147 = (void *)a1[2];
      if ((unint64_t)v147 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v148 = *a1;
        uint64_t v149 = a1[1];
      }
      else
      {
        unint64_t v148 = (*v147 << v145) | (v143 >> 1);
        a1[2] = (unint64_t)v147 + ((unint64_t)(64 - v144) >> 3);
        uint64_t v149 = v145 | 0x38;
      }
      uint64_t v150 = v149 - 4;
      *a1 = v148 >> 4;
      a1[1] = v149 - 4;
      unint64_t v151 = v148 & 0xF;
      if ((v148 & 0xF) != 0)
      {
        int v152 = (void *)a1[2];
        if ((unint64_t)v152 > a1[3])
        {
          sub_2483EB0C0(a1);
          unint64_t v153 = *a1;
          uint64_t v154 = a1[1];
        }
        else
        {
          unint64_t v153 = (*v152 << v150) | (v148 >> 4);
          a1[2] = (unint64_t)v152 + ((unint64_t)(67 - v149) >> 3);
          uint64_t v154 = v150 | 0x38;
        }
        *a1 = v153 >> v151;
        a1[1] = v154 - v151;
        int v146 = (1 << v151) + (v153 & ~(-1 << v151));
      }
      else
      {
        LOWORD(v146) = 1;
      }
    }
    else
    {
      LOWORD(v146) = 0;
    }
    unsigned __int16 v155 = v146 + 1;
    v140[v139] = v155;
    if (__src < v155)
    {
      int v156 = 1;
LABEL_316:
      uint64_t v10 = 1;
LABEL_317:
      v279 = v140;
      operator delete(v140);
      goto LABEL_318;
    }
    ++v139;
  }
  while (v22 != v139);
  uint64_t v157 = 0;
  while (1)
  {
    unint64_t v158 = *((unsigned __int16 *)v278 + v157);
    uint64_t v159 = *(void *)(v7 + 8) + 24 * v157;
    if (v158 < 2)
    {
      *(void *)(v159 + 8) = *(void *)v159;
      sub_2483F2118((char **)v159, 0x100uLL);
      goto LABEL_271;
    }
    if (v158 > 0x8000) {
      goto LABEL_310;
    }
    float v160 = (void *)a1[2];
    if ((unint64_t)v160 > a1[3])
    {
      sub_2483EB0C0(a1);
      unint64_t v162 = *a1;
      uint64_t v163 = a1[1];
    }
    else
    {
      unint64_t v161 = a1[1];
      unint64_t v162 = *a1 | (*v160 << v161);
      a1[2] = (unint64_t)v160 + ((63 - v161) >> 3);
      uint64_t v163 = v161 | 0x38;
      *a1 = v162;
      a1[1] = v161 | 0x38;
    }
    unint64_t v164 = v162 & 3;
    *a1 = v162 >> 2;
    a1[1] = v163 - 2;
    if (v164 == 1) {
      break;
    }
    LOBYTE(v287) = 0;
    sub_248409F34(v281, v158, &v287);
    int64x2_t v268 = (char **)v159;
    int v182 = 0;
    v283[0] = 0;
    v283[1] = 0;
    int v183 = 32;
    __int16 v284 = 0;
    do
    {
      uint64_t v184 = byte_2485517FE[v164];
      double v185 = (void *)a1[2];
      if ((unint64_t)v185 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v187 = *a1;
        uint64_t v188 = a1[1];
      }
      else
      {
        unint64_t v186 = a1[1];
        unint64_t v187 = *a1 | (*v185 << v186);
        a1[2] = (unint64_t)v185 + ((63 - v186) >> 3);
        uint64_t v188 = v186 | 0x38;
        *a1 = v187;
        a1[1] = v186 | 0x38;
      }
      int8x16_t v189 = (unsigned __int8 *)&unk_24854CC94 + 4 * (v187 & 0xF);
      uint64_t v190 = *v189;
      *a1 = v187 >> v190;
      a1[1] = v188 - v190;
      __int16 v191 = *((_WORD *)v189 + 1);
      *((unsigned char *)v283 + v184) = v191;
      BOOL v192 = v191 == 0;
      if ((_BYTE)v191) {
        unsigned int v193 = 0x20u >> v191;
      }
      else {
        unsigned int v193 = 0;
      }
      if (!v192) {
        ++v182;
      }
      v183 -= v193;
      if (v164 > 0x10) {
        break;
      }
      ++v164;
    }
    while (v183 > 0);
    if (v182 == 1 || v183 == 0)
    {
      uint64_t v195 = 0;
      __srcb = v281[0];
      *(_OWORD *)__p = 0u;
      long long v286 = 0u;
      do
        ++*((_WORD *)__p + *((unsigned __int8 *)v283 + v195++));
      while (v195 != 18);
      if (!sub_24841D89C((char *)&v287, 5u, (uint64_t)v283, 18, (uint64_t)__p)) {
        goto LABEL_267;
      }
      unsigned __int8 v196 = 0;
      int v197 = 0;
      int v198 = 0;
      int v272 = 8;
      int v199 = 0x8000;
      do
      {
        float v200 = (void *)a1[2];
        if ((unint64_t)v200 > a1[3])
        {
          sub_2483EB0C0(a1);
          unint64_t v202 = *a1;
          uint64_t v203 = a1[1];
        }
        else
        {
          unint64_t v201 = a1[1];
          unint64_t v202 = *a1 | (*v200 << v201);
          a1[2] = (unint64_t)v200 + ((63 - v201) >> 3);
          uint64_t v203 = v201 | 0x38;
        }
        float v204 = (unsigned __int8 *)&v287 + 4 * (v202 & 0x1F);
        uint64_t v205 = *v204;
        unint64_t v206 = v203 - v205;
        unint64_t v207 = v202 >> v205;
        *a1 = v207;
        a1[1] = v206;
        unsigned int v208 = v204[2];
        if (v208 > 0xF)
        {
          uint64_t v209 = v208 - 14;
          if (v208 == 16) {
            int v210 = v272;
          }
          else {
            int v210 = 0;
          }
          if (v196 == v210) {
            int v211 = v197;
          }
          else {
            int v211 = 0;
          }
          if (v211 <= 0) {
            int v212 = v211;
          }
          else {
            int v212 = (v211 - 2) << (v208 - 14);
          }
          uint64_t v213 = (void *)a1[2];
          if ((unint64_t)v213 > a1[3])
          {
            sub_2483EB0C0(a1);
            unint64_t v214 = *a1;
            uint64_t v215 = a1[1];
          }
          else
          {
            unint64_t v214 = (*v213 << v206) | v207;
            a1[2] = (unint64_t)v213 + ((63 - v206) >> 3);
            uint64_t v215 = v206 | 0x38;
          }
          *a1 = v214 >> v209;
          a1[1] = v215 - v209;
          int v197 = v212 + (v214 & ~(-1 << v209)) + 3;
          int v216 = v197 - v211;
          int v217 = v197 - v211 + v198;
          if (v217 > (int)v158) {
            goto LABEL_267;
          }
          float v218 = &__srcb[v198];
          size_t v219 = v216;
          int v220 = v216 << (15 - v210);
          if ((_BYTE)v210) {
            int v221 = v220;
          }
          else {
            int v221 = 0;
          }
          memset(v218, v210, v219);
          v199 -= v221;
          int v198 = v217;
          unsigned __int8 v196 = v210;
        }
        else
        {
          __srcb[v198] = v208;
          int v197 = 0;
          if (v208)
          {
            v199 -= 0x8000u >> v208;
            ++v198;
            int v272 = v208;
          }
          else
          {
            ++v198;
          }
        }
      }
      while ((int)v158 > v198 && v199 > 0);
      if (!v199)
      {
        bzero(&__srcb[v198], (int)v158 - v198);
        long long v287 = 0u;
        long long v288 = 0u;
        unint64_t v236 = v158;
        float v237 = (unsigned __int8 *)v281[0];
        do
        {
          unsigned int v238 = *v237++;
          ++*((_WORD *)&v287 + v238);
          --v236;
        }
        while (v236);
        sub_2483F2118(v268, v158 + 376);
        uint64_t v7 = v276;
        unsigned int v239 = sub_24841D89C(*v268, 8u, (uint64_t)v281[0], v158, (uint64_t)&v287);
        sub_2483F2118(v268, v239);
        BOOL v222 = v239 != 0;
      }
      else
      {
LABEL_267:
        BOOL v222 = 0;
        uint64_t v7 = v276;
      }
    }
    else
    {
      BOOL v222 = 0;
      uint64_t v7 = v276;
    }
    if (v281[0])
    {
      v281[1] = v281[0];
      operator delete(v281[0]);
    }
    if (!v222)
    {
LABEL_310:
      uint64_t v173 = a1[1];
      goto LABEL_311;
    }
LABEL_271:
    uint64_t v233 = *(void *)(v7 + 8) + 24 * v157;
    uint64_t v234 = *(unsigned __int8 **)v233;
    float v235 = *(unsigned __int8 **)(v233 + 8);
    while (v234 != v235)
    {
      if (*v234 <= 8u) {
        sub_2483F223C(v7, v157, *((unsigned __int16 *)v234 + 1));
      }
      v234 += 4;
    }
    if (++v157 == v22) {
      goto LABEL_309;
    }
  }
  sub_2483F2118((char **)v159, 0x100uLL);
  int v165 = (void *)a1[2];
  __srca = *(char **)v159;
  if ((unint64_t)v165 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v167 = *a1;
    uint64_t v168 = a1[1];
  }
  else
  {
    unint64_t v166 = a1[1];
    unint64_t v167 = *a1 | (*v165 << v166);
    a1[2] = (unint64_t)v165 + ((63 - v166) >> 3);
    uint64_t v168 = v166 | 0x38;
    *a1 = v167;
    a1[1] = v166 | 0x38;
  }
  uint64_t v169 = 0;
  unint64_t v170 = __clz(v158 - 1) ^ 0x3F;
  unint64_t v171 = v170 + 1;
  unint64_t v172 = v167 & 3;
  uint64_t v173 = v168 - 2;
  unint64_t v174 = v167 >> 2;
  *a1 = v174;
  a1[1] = v173;
  uint64_t v175 = v172 + 1;
  *(void *)&long long v287 = 0;
  uint64_t v176 = ~(-2 << v170);
  while (1)
  {
    float v177 = (void *)a1[2];
    if ((unint64_t)v177 > a1[3])
    {
      uint64_t v271 = v175;
      sub_2483EB0C0(a1);
      uint64_t v175 = v271;
      unint64_t v178 = *a1;
      uint64_t v180 = a1[1];
    }
    else
    {
      unint64_t v178 = v174 | (*v177 << v173);
      int8x16_t v179 = (char *)v177 + ((unint64_t)(63 - v173) >> 3);
      uint64_t v180 = v173 | 0x38;
      *a1 = v178;
      a1[1] = v180;
      a1[2] = (unint64_t)v179;
    }
    unsigned __int16 v181 = v178 & v176;
    uint64_t v173 = v180 - v171;
    unint64_t v174 = v178 >> v171;
    *a1 = v174;
    a1[1] = v173;
    if (v158 <= v181) {
      break;
    }
    *(_WORD *)((char *)&v287 + v169) = v181;
    v169 += 2;
    if (2 * v172 + 2 == v169)
    {
      uint64_t v7 = v276;
      if (!v172)
      {
LABEL_263:
        __int16 v230 = v287;
        v231 = __srca;
        char *__srca = 0;
        *((_WORD *)__srca + 1) = v230;
        for (uint64_t j = 1; j != 256; j *= 2)
LABEL_264:
          memcpy(&v231[4 * j], v231, 4 * j);
        goto LABEL_271;
      }
      uint64_t v223 = 0;
LABEL_254:
      uint64_t v224 = v223++;
      int v225 = *((unsigned __int16 *)&v287 + v224);
      while (v225 != *((unsigned __int16 *)&v287 + v224 + 1))
      {
        if (v172 == ++v224)
        {
          if (v223 == v172)
          {
            if (v175 == 4)
            {
              float v226 = (void *)a1[2];
              if ((unint64_t)v226 > a1[3])
              {
                sub_2483EB0C0(a1);
                unint64_t v227 = *a1;
                uint64_t v229 = a1[1];
              }
              else
              {
                unint64_t v227 = v174 | (*v226 << v173);
                float v228 = (char *)v226 + ((unint64_t)(63 - v173) >> 3);
                uint64_t v229 = v173 | 0x38;
                *a1 = v227;
                a1[1] = v229;
                a1[2] = (unint64_t)v228;
              }
              uint64_t v173 = v229 - 1;
              *a1 = v227 >> 1;
              a1[1] = v173;
              uint64_t v175 = v227 & 1 | 4;
              uint64_t v7 = v276;
            }
            switch(v175)
            {
              case 1:
                goto LABEL_263;
              case 2:
                __int16 v240 = v287;
                if ((unsigned __int16)v287 <= WORD1(v287)) {
                  __int16 v241 = WORD1(v287);
                }
                else {
                  __int16 v241 = v287;
                }
                if ((unsigned __int16)v287 >= WORD1(v287)) {
                  __int16 v240 = WORD1(v287);
                }
                v231 = __srca;
                char *__srca = 1;
                *((_WORD *)__srca + 1) = v240;
                __srca[4] = 1;
                *((_WORD *)__srca + 3) = v241;
                uint64_t j = 2;
                goto LABEL_264;
              case 3:
                __int16 v242 = WORD1(v287);
                if (WORD1(v287) <= WORD2(v287)) {
                  __int16 v243 = WORD2(v287);
                }
                else {
                  __int16 v243 = WORD1(v287);
                }
                if (WORD1(v287) >= WORD2(v287)) {
                  __int16 v242 = WORD2(v287);
                }
                __int16 v244 = v287;
                v231 = __srca;
                char *__srca = 1;
                *((_WORD *)__srca + 1) = v244;
                __srca[8] = 1;
                *((_WORD *)__srca + 5) = v244;
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v242;
                __srca[12] = 2;
                *((_WORD *)__srca + 7) = v243;
                uint64_t j = 4;
                goto LABEL_264;
              case 4:
                uint64_t v245 = 0;
                uint64_t v246 = 2;
                do
                {
                  uint64_t v247 = v245++;
                  unsigned int v248 = *((unsigned __int16 *)&v287 + v247);
                  uint64_t v249 = v246;
                  do
                  {
                    unsigned int v250 = *(unsigned __int16 *)((char *)&v287 + v249);
                    if (v248 > v250)
                    {
                      *(_WORD *)((char *)&v287 + v249) = v248;
                      *((_WORD *)&v287 + v247) = v250;
                      unsigned int v248 = v250;
                    }
                    v249 += 2;
                  }
                  while (v249 != 8);
                  v246 += 2;
                }
                while (v245 != 3);
                __int16 v251 = v287;
                v231 = __srca;
                uint64_t v7 = v276;
                char *__srca = 2;
                *((_WORD *)__srca + 1) = v251;
                __int16 v252 = WORD1(v287);
                __srca[8] = 2;
                *((_WORD *)__srca + 5) = v252;
                __int16 v253 = WORD2(v287);
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v253;
                __int16 v254 = WORD3(v287);
                __srca[12] = 2;
                *((_WORD *)__srca + 7) = v254;
                uint64_t j = 4;
                goto LABEL_264;
              case 5:
                __int16 v255 = WORD2(v287);
                if (WORD2(v287) <= WORD3(v287)) {
                  __int16 v256 = WORD3(v287);
                }
                else {
                  __int16 v256 = WORD2(v287);
                }
                if (WORD2(v287) >= WORD3(v287)) {
                  __int16 v255 = WORD3(v287);
                }
                __int16 v257 = v287;
                v231 = __srca;
                char *__srca = 1;
                *((_WORD *)__srca + 1) = v257;
                __int16 v258 = WORD1(v287);
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v258;
                __srca[8] = 1;
                *((_WORD *)__srca + 5) = v257;
                __srca[12] = 3;
                *((_WORD *)__srca + 7) = v255;
                __srca[16] = 1;
                *((_WORD *)__srca + 9) = v257;
                __srca[20] = 2;
                *((_WORD *)__srca + 11) = v258;
                __srca[24] = 1;
                *((_WORD *)__srca + 13) = v257;
                __srca[28] = 3;
                *((_WORD *)__srca + 15) = v256;
                uint64_t j = 8;
                goto LABEL_264;
              default:
                goto LABEL_311;
            }
          }
          goto LABEL_254;
        }
      }
      break;
    }
  }
LABEL_311:
  unint64_t v259 = a1[4];
  unint64_t v260 = a1[3];
  unint64_t v261 = 8 * (a1[2] - v259 + a1[5]) - v173;
  a1[7] = v261;
  int v156 = 1;
  if (v261 <= 8 * (v260 - v259) + 64)
  {
    float v140 = v278;
    goto LABEL_316;
  }
  uint64_t v10 = 0xFFFFFFFFLL;
LABEL_313:
  float v140 = v278;
  if (v278) {
    goto LABEL_317;
  }
LABEL_318:
  if (!v156) {
    return 0;
  }
  return v10;
}

void sub_2483F3CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2483F3D70(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)*a1;
  long long v4 = (char *)a1[1];
  unint64_t v6 = (v4 - (unsigned char *)*a1) >> 4;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[16 * a2];
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (a2 - v6 <= (v7 - v4) >> 4)
    {
      uint64_t v20 = &v4[16 * (a2 - v6)];
      uint64_t v21 = 16 * a2 - 16 * v6;
      do
      {
        *(_OWORD *)long long v4 = xmmword_2484DCB00;
        v4 += 16;
        v21 -= 16;
      }
      while (v21);
      a1[1] = v20;
    }
    else
    {
      if (a2 >> 60) {
        sub_2483E92E8();
      }
      unint64_t v8 = v7 - v5;
      unint64_t v9 = (v7 - v5) >> 3;
      if (v9 <= a2) {
        unint64_t v9 = a2;
      }
      if (v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)sub_2483F3EB0(v10);
      unint64_t v13 = &v11[16 * v6];
      unint64_t v14 = &v11[16 * a2];
      uint64_t v15 = 16 * a2 - 16 * v6;
      uint64_t v16 = v13;
      do
      {
        *(_OWORD *)uint64_t v16 = xmmword_2484DCB00;
        v16 += 16;
        v15 -= 16;
      }
      while (v15);
      uint64_t v17 = &v11[16 * v12];
      unint64_t v19 = (char *)*a1;
      unint64_t v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *((_OWORD *)v18 - 1);
          v13 -= 16;
          v18 -= 16;
        }
        while (v18 != v19);
        unint64_t v18 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (v18)
      {
        operator delete(v18);
      }
    }
  }
}

void *sub_2483F3EB0(unint64_t a1)
{
  if (a1 >> 60) {
    sub_2483E9338();
  }
  return operator new(16 * a1);
}

void sub_2483F3EE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (*(_DWORD *)(*(void *)(a2 + 408) + 320) + 3);
  if (a4 & 0x1000000) != 0 && (*(unsigned char *)(a2 + 24)) {
    v8 += 3;
  }
  if (!*(unsigned char *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1 && (!*(_DWORD *)(a2 + 376) || *(_DWORD *)(a2 + 396)))
  {
    sub_2483F7584((uint64_t)&v90, *(void *)(a3 + 88));
    sub_2483F767C((uint64_t *)(a1 + 4496), (uint64_t *)&v90);
    *(void *)&long long v86 = &v96;
    sub_2483F77FC((void ***)&v86);
    unint64_t v93 = &unk_26FC65EC8;
    if (__p)
    {
      unint64_t v95 = __p;
      operator delete(__p);
    }
    for (uint64_t i = 200; i != 80; i -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&v90 + i));
    if (v92 < 0) {
      operator delete(v91);
    }
    uint64_t v10 = v90;
    *(void *)&long long v90 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  long long v86 = 0uLL;
  uint64_t v87 = 0;
  uint64_t v88 = v8;
  char v89 = a4 & 1;
  if (!sub_2483F179C(a2 + 40))
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 48;
    do
    {
      if (*(unsigned __int8 *)(a2 + 60) != byte_248550964[*(unsigned int *)(v12 + 4 * v11)]) {
        operator new();
      }
      if (*(unsigned __int8 *)(a2 + 61) != byte_248550968[*(unsigned int *)(v12 + 4 * v11)]) {
        operator new();
      }
      ++v11;
    }
    while (v11 != 3);
  }
  if (*(unsigned char *)(a2 + 425)) {
    operator new();
  }
  unsigned int v13 = *(_DWORD *)(a2 + 452);
  if (v13 >= 3) {
    operator new();
  }
  if (v13) {
    operator new();
  }
  if (*(_DWORD *)(a2 + 452) >= 2u) {
    operator new();
  }
  int v14 = *(_DWORD *)(a2 + 268);
  BOOL v15 = v14 != 1;
  uint64_t v16 = *(int **)(a2 + 272);
  uint64_t v17 = *(int **)(a2 + 280);
  if (v16 != v17)
  {
    unint64_t v18 = *(int **)(a2 + 272);
    do
    {
      int v19 = *v18++;
      LOBYTE(v15) = v19 == v14 && v15;
    }
    while (v18 != v17);
    if (v15)
    {
      BOOL v15 = 1;
    }
    else
    {
      unint64_t v20 = 0;
      do
      {
        if (v16[v20] != 1) {
          sub_2484BD43C();
        }
        ++v20;
        uint64_t v16 = *(int **)(a2 + 272);
      }
      while (v20 < (uint64_t)(*(void *)(a2 + 280) - (void)v16) >> 2);
      BOOL v15 = 0;
    }
  }
  if ((*(unsigned char *)(a2 + 24) & 2) != 0) {
    operator new();
  }
  if ((*(unsigned char *)(a2 + 24) & 0x10) != 0) {
    operator new();
  }
  if (*(_DWORD *)(a2 + 268) != 1)
  {
    if (v15 ? ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 2) + 3 : 3) {
      sub_2484BD43C();
    }
  }
  if (a4 & 0x1000000) != 0 && (*(unsigned char *)(a2 + 24)) {
    operator new();
  }
  if (*(_DWORD *)(a2 + 404)) {
    operator new();
  }
  if (!*(unsigned char *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1)
  {
    BOOL v22 = *(_DWORD *)(a2 + 396) || *(_DWORD *)(a2 + 376) == 0;
    if (v22 && *(unsigned char *)(a2 + 400))
    {
      uint64_t v68 = &unk_26FC65EC8;
      __int16 v69 = *(_WORD *)(a1 + 5200);
      uint64_t v23 = *(void *)(a1 + 5213);
      v70[0] = *(void *)(a1 + 5208);
      *(void *)((char *)v70 + 5) = v23;
      memset(v71, 0, sizeof(v71));
      sub_2483F01FC(v71, *(const void **)(a1 + 5224), *(void *)(a1 + 5232), *(void *)(a1 + 5232) - *(void *)(a1 + 5224));
      long long v72 = *(_OWORD *)(a1 + 5248);
      long long v73 = *(_OWORD *)(a1 + 5264);
      long long v74 = *(_OWORD *)(a1 + 5280);
      int v75 = *(_DWORD *)(a1 + 5296);
      uint64_t v24 = *(void *)(a1 + 5312);
      uint64_t v76 = &unk_26FC66920;
      uint64_t v77 = v24;
      int v78 = &unk_26FC66170;
      long long v79 = *(_OWORD *)(a1 + 5328);
      uint64_t v25 = *(void *)(a1 + 5352);
      unint64_t v80 = &unk_26FC66920;
      uint64_t v81 = v25;
      uint64_t v26 = *(void *)(a1 + 5368);
      int v82 = &unk_26FC66920;
      uint64_t v83 = v26;
      uint64_t v27 = *(void *)(a1 + 5384);
      float32x4_t v84 = &unk_26FC66920;
      uint64_t v85 = v27;
      sub_2484BE9EC();
    }
  }
  uint64_t v28 = *(void *)(a3 + 88);
  uint64_t v30 = *(void *)(v28 + 328);
  uint64_t v29 = *(void *)(v28 + 336);
  if (v29 != v30)
  {
    uint64_t v31 = (unint64_t)((v29 - v30) / 96) <= 1 ? 1 : (v29 - v30) / 96;
    if (*(_DWORD *)(v30 + 12))
    {
      uint64_t v32 = 0;
      unint64_t v33 = (int *)(v30 + 108);
      uint64_t v34 = v31 - 1;
      do
      {
        if (v34 == v32) {
          break;
        }
        int v35 = *v33;
        v33 += 24;
        ++v32;
      }
      while (v35);
    }
  }
  if (*(unsigned char *)(a1 + 4448))
  {
    if (v89) {
      operator new();
    }
    operator new();
  }
  int v36 = *(_DWORD *)(a2 + 32);
  if (!v36) {
    operator new();
  }
  if (v36 == 2) {
    operator new();
  }
  if ((a4 & 0x100) != 0)
  {
    int v37 = *(_DWORD *)(a2 + 16);
    if (v37 == 3 || !v37)
    {
      char v38 = *(_DWORD *)(a2 + 312) == 0;
      for (uint64_t j = *(void *)(a2 + 344); j != *(void *)(a2 + 352); j += 40)
        v38 &= *(_DWORD *)(j + 8) == 0;
      if (*(unsigned char *)(a2 + 256) || (v38 & 1) == 0) {
        operator new();
      }
    }
    if (!*(unsigned char *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1)
    {
      BOOL v48 = *(_DWORD *)(a2 + 396) || *(_DWORD *)(a2 + 376) == 0;
      if (v48 && !*(unsigned char *)(a2 + 400))
      {
        memset(v53, 0, sizeof(v53));
        sub_2483F01FC(v53, *(const void **)(a1 + 5224), *(void *)(a1 + 5232), *(void *)(a1 + 5232) - *(void *)(a1 + 5224));
        long long v54 = *(_OWORD *)(a1 + 5248);
        long long v55 = *(_OWORD *)(a1 + 5264);
        long long v56 = *(_OWORD *)(a1 + 5280);
        int v57 = *(_DWORD *)(a1 + 5296);
        uint64_t v49 = *(void *)(a1 + 5312);
        unint64_t v58 = &unk_26FC66920;
        uint64_t v59 = v49;
        unint64_t v60 = &unk_26FC66170;
        long long v61 = *(_OWORD *)(a1 + 5328);
        uint64_t v50 = *(void *)(a1 + 5352);
        uint64_t v62 = &unk_26FC66920;
        uint64_t v63 = v50;
        uint64_t v51 = *(void *)(a1 + 5368);
        unint64_t v64 = &unk_26FC66920;
        uint64_t v65 = v51;
        uint64_t v52 = *(void *)(a1 + 5384);
        unint64_t v66 = &unk_26FC66920;
        uint64_t v67 = v52;
        sub_2484BE9EC();
      }
    }
  }
  if ((a4 & 0x10000) != 0)
  {
    uint64_t v40 = *(void *)(a2 + 408);
    uint64_t v41 = *(void *)(v40 + 328);
    uint64_t v42 = *(void *)(v40 + 336);
    while (1)
    {
      if (v41 == v42) {
        goto LABEL_81;
      }
      if (*(_DWORD *)(v41 + 12) == 2) {
        break;
      }
      v41 += 96;
    }
    uint64_t v43 = *(void *)(a3 + 88);
    uint64_t v44 = *(void *)(v43 + 328);
    if (*(void *)(v43 + 336) != v44)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      do
      {
        if (*(_DWORD *)(v44 + v45 + 12) == 2) {
          operator new();
        }
        ++v46;
        uint64_t v47 = *(void *)(a3 + 88);
        uint64_t v44 = *(void *)(v47 + 328);
        v45 += 96;
      }
      while (v46 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v47 + 336) - v44) >> 5));
    }
  }
LABEL_81:
  operator new();
}

void sub_2483F6FE4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 168) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 136) = v6;
    operator delete(v6);
  }
  MEMORY[0x24C579F90](v1, 0x10E1C4001FEA094);
  STACK[0x468] = (unint64_t)&STACK[0x440];
  sub_2483F7884((void ***)&STACK[0x468]);
  _Unwind_Resume(a1);
}

uint64_t sub_2483F7584(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  sub_24841CC24((void *)(a1 + 16));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a2;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  sub_2483F06F8(a1 + 216);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return a1;
}

void sub_2483F7610(_Unwind_Exception *a1)
{
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC(&v1[i]);
  if (*((char *)v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2483F767C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[3];
  *(uint64_t *)((char *)a1 + 30) = *(uint64_t *)((char *)a2 + 30);
  a1[3] = v6;
  long long v7 = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  *(_OWORD *)(a1 + 5) = v7;
  uint64_t v8 = (void **)(a1 + 8);
  if (*((char *)a1 + 87) < 0) {
    operator delete(*v8);
  }
  long long v9 = *((_OWORD *)a2 + 4);
  a1[10] = a2[10];
  *(_OWORD *)uint64_t v8 = v9;
  *((unsigned char *)a2 + 87) = 0;
  *((unsigned char *)a2 + 64) = 0;
  a1[11] = a2[11];
  sub_2483F7944((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  uint64_t v10 = (void *)a1[31];
  *((_WORD *)a1 + 112) = *((_WORD *)a2 + 112);
  uint64_t v11 = a2[29];
  *(uint64_t *)((char *)a1 + 237) = *(uint64_t *)((char *)a2 + 237);
  a1[29] = v11;
  if (v10)
  {
    a1[32] = (uint64_t)v10;
    operator delete(v10);
    a1[31] = 0;
    a1[32] = 0;
    a1[33] = 0;
  }
  *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
  a1[33] = a2[33];
  a2[31] = 0;
  a2[32] = 0;
  a2[33] = 0;
  long long v12 = *((_OWORD *)a2 + 17);
  long long v13 = *((_OWORD *)a2 + 18);
  long long v14 = *((_OWORD *)a2 + 19);
  *((_DWORD *)a1 + 80) = *((_DWORD *)a2 + 80);
  *((_OWORD *)a1 + 18) = v13;
  *((_OWORD *)a1 + 19) = v14;
  *((_OWORD *)a1 + 17) = v12;
  a1[42] = a2[42];
  *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
  a1[47] = a2[47];
  a1[49] = a2[49];
  a1[51] = a2[51];
  sub_2483F79DC((void **)a1 + 52);
  *((_OWORD *)a1 + 26) = *((_OWORD *)a2 + 26);
  uint64_t v15 = a2[55];
  a1[54] = a2[54];
  a2[52] = 0;
  a2[53] = 0;
  a2[54] = 0;
  a1[55] = v15;
  return a1;
}

void sub_2483F77FC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 5;
        sub_2483E8DDC(v4 - 2);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2483F7884(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2483F78D8(v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_2483F78D8(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_2483F7944(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 120; i += 40)
  {
    uint64_t v5 = a1 + i;
    long long v6 = *(_OWORD *)(a2 + i);
    *(void *)(v5 + 16) = *(void *)(a2 + i + 16);
    *(_OWORD *)uint64_t v5 = v6;
    uint64_t v7 = *(void *)(a2 + i + 24);
    *(void *)(a2 + i + 24) = 0;
    uint64_t v8 = *(void *)(a1 + i + 24);
    *(void *)(v5 + 24) = v7;
    if (v8)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v8 - 24));
      free(*(void **)(v8 - 32));
    }
    *(void *)(v5 + 32) = *(void *)(a2 + i + 32);
  }
  return a1;
}

void sub_2483F79DC(void **a1)
{
  uint64_t v1 = (uint64_t *)*a1;
  if (*a1)
  {
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 5;
        sub_2483E8DDC(v3 - 2);
        unint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2483F7A48(void **a1, void *a2, unint64_t *a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  long long v6 = (void *)a3[2];
  unint64_t v7 = a3[3];
  if ((unint64_t)v6 > v7)
  {
    sub_2483EB0C0(a3);
    unint64_t v9 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v10 = (void *)a3[2];
    unint64_t v7 = a3[3];
  }
  else
  {
    unint64_t v8 = a3[1];
    unint64_t v9 = *a3 | (*v6 << v8);
    uint64_t v10 = (void *)((char *)v6 + ((63 - v8) >> 3));
    uint64_t v11 = v8 | 0x38;
    *a3 = v9;
    a3[1] = v8 | 0x38;
    a3[2] = (unint64_t)v10;
  }
  uint64_t v12 = v11 - 1;
  unint64_t v13 = v9 >> 1;
  *a3 = v9 >> 1;
  a3[1] = v11 - 1;
  if (v9)
  {
    if ((unint64_t)v10 > v7)
    {
      sub_2483EB0C0(a3);
      unint64_t v19 = *a3;
      uint64_t v21 = a3[1];
    }
    else
    {
      unint64_t v19 = (*v10 << v12) | v13;
      unint64_t v20 = (char *)v10 + ((unint64_t)(64 - v11) >> 3);
      uint64_t v21 = v12 | 0x38;
      *a3 = v19;
      a3[1] = v12 | 0x38;
      a3[2] = (unint64_t)v20;
    }
    *a3 = v19 >> 2;
    a3[1] = v21 - 2;
    BOOL v22 = (unsigned __int8 *)*a1;
    unint64_t v23 = v19 & 3;
    if ((v19 & 3) != 0)
    {
      for (uint64_t i = (unsigned __int8 *)a1[1]; v22 != i; ++v22)
      {
        uint64_t v25 = (void *)a3[2];
        if ((unint64_t)v25 > a3[3])
        {
          sub_2483EB0C0(a3);
          unint64_t v27 = *a3;
          uint64_t v28 = a3[1];
        }
        else
        {
          unint64_t v26 = a3[1];
          unint64_t v27 = *a3 | (*v25 << v26);
          a3[2] = (unint64_t)v25 + ((63 - v26) >> 3);
          uint64_t v28 = v26 | 0x38;
          *a3 = v27;
          a3[1] = v26 | 0x38;
        }
        *a3 = v27 >> v23;
        a3[1] = v28 - v23;
        *BOOL v22 = v27 & ~(-1 << v23);
      }
    }
    else
    {
      int64_t v29 = (unsigned char *)a1[1] - v22;
      if (v29 >= 1) {
        bzero(*a1, v29);
      }
    }
  }
  else
  {
    if ((unint64_t)v10 > v7)
    {
      sub_2483EB0C0(a3);
      unint64_t v14 = *a3;
      uint64_t v16 = a3[1];
    }
    else
    {
      unint64_t v14 = (*v10 << v12) | v13;
      uint64_t v15 = (char *)v10 + ((unint64_t)(64 - v11) >> 3);
      uint64_t v16 = v12 | 0x38;
      *a3 = v14;
      a3[1] = v12 | 0x38;
      a3[2] = (unint64_t)v15;
    }
    *a3 = v14 >> 1;
    a3[1] = v16 - 1;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v72 = 0u;
    memset(v71, 0, sizeof(v71));
    sub_2483F26D4((uint64_t)v75);
    v75[6] = 0;
    memset(__p, 0, sizeof(__p));
    uint64_t v17 = sub_2483F2760(a3, 1, v71, __p, (unint64_t)((unsigned char *)a1[1] - (unsigned char *)*a1) < 3);
    if (v17)
    {
      int v18 = 1;
    }
    else
    {
      sub_2483EA6D0((uint64_t)&v66, (uint64_t)v71, a3, 0);
      uint64_t v30 = (unsigned __int8 *)a1[1];
      if (v30 == *a1)
      {
        unsigned int v31 = 0;
        LODWORD(v35) = 0;
      }
      else
      {
        unsigned int v31 = 0;
        unint64_t v32 = 0;
        unint64_t v33 = (unsigned __int8 *)__p[0];
        do
        {
          unsigned int v34 = sub_2483EAC28((uint64_t)&v66, *v33, a3);
          *((unsigned char *)*a1 + v32) = v34;
          if (v31 <= v34) {
            unsigned int v31 = v34;
          }
          ++v32;
          uint64_t v30 = (unsigned __int8 *)*a1;
          unint64_t v35 = (unsigned char *)a1[1] - (unsigned char *)*a1;
        }
        while (v32 < v35);
      }
      BOOL v36 = v31 <= 0xFF && v68 == 1245184;
      uint64_t v17 = !v36;
      if (v36 && (v14 & 1) != 0)
      {
        uint64_t v37 = 0;
        int8x16_t v38 = (int8x16_t)xmmword_2484DCB10;
        v39.i64[0] = 0x1010101010101010;
        v39.i64[1] = 0x1010101010101010;
        do
        {
          *(int8x16_t *)&v76[v37] = v38;
          v37 += 16;
          int8x16_t v38 = vaddq_s8(v38, v39);
        }
        while (v37 != 256);
        if ((int)v35 >= 1)
        {
          uint64_t v40 = 0;
          do
          {
            uint64_t v41 = v30[v40];
            unsigned __int8 v42 = v76[v41];
            v30[v40] = v42;
            if (v41)
            {
              if (v41 > 3)
              {
                unsigned int v43 = v41 & 0xF;
                if ((v41 & 0xF) == 0
                  || (*(int8x16_t *)&v76[(v41 - v43) + 1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v43), (uint8x16_t)xmmword_2484DCB10), *(int8x16_t *)&v76[(v41 - v43)], *(int8x16_t *)&v76[(v41 - v43)+ 1]), LODWORD(v41) = v41 - v43, (_BYTE)v41))
                {
                  do
                  {
                    LODWORD(v41) = v41 - 16;
                    *(_OWORD *)&v76[v41 + 1] = *(_OWORD *)&v76[v41];
                  }
                  while ((_BYTE)v41);
                }
              }
              else
              {
                do
                {
                  v76[v41] = v76[(v41 - 1)];
                  --v41;
                }
                while ((_BYTE)v41);
              }
              v76[0] = v42;
            }
            ++v40;
          }
          while (v40 != v35);
        }
        uint64_t v17 = 0;
      }
      uint64_t v44 = v69;
      uint64_t v69 = 0;
      if (v44)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v44 - 24));
        free(*(void **)(v44 - 32));
      }
      int v18 = v17;
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*((void *)&v73 + 1))
    {
      *(void *)&long long v74 = *((void *)&v73 + 1);
      operator delete(*((void **)&v73 + 1));
    }
    if ((void)v72)
    {
      *((void *)&v72 + 1) = v72;
      operator delete((void *)v72);
    }
    unint64_t v66 = (void **)&v71[1];
    sub_2483EA640(&v66);
    uint64_t v45 = v71[0];
    v71[0] = 0;
    if (v45)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v45 - 24));
      free(*(void **)(v45 - 32));
    }
    if (v18) {
      return v17;
    }
  }
  unint64_t v46 = (unsigned __int8 *)*a1;
  uint64_t v47 = (unsigned __int8 *)a1[1];
  if (*a1 != v47)
  {
    BOOL v48 = v46 + 1;
    if (v46 + 1 != v47)
    {
      unsigned __int8 v49 = *v46;
      uint64_t v50 = v46 + 1;
      do
      {
        unsigned int v52 = *v50++;
        unsigned __int8 v51 = v52;
        BOOL v53 = v49 >= v52;
        if (v49 <= v52) {
          unsigned __int8 v49 = v51;
        }
        if (!v53) {
          unint64_t v46 = v48;
        }
        BOOL v48 = v50;
      }
      while (v50 != v47);
    }
  }
  unint64_t v54 = *v46;
  *a2 = v54 + 1;
  long long v55 = (void **)sub_2483F04AC((v54 >> 6) + 1);
  long long v56 = v55;
  if (v54 >= 0x40) {
    unint64_t v57 = v54 >> 6;
  }
  else {
    unint64_t v57 = 0;
  }
  v55[v57] = 0;
  unint64_t v66 = v55;
  int v67 = 0;
  sub_2483F802C((uint64_t)&v66, v54 + 1);
  unint64_t v58 = (unsigned __int8 *)*a1;
  uint64_t v59 = (unsigned __int8 *)a1[1];
  if (*a1 != v59)
  {
    uint64_t v60 = 0;
    while (1)
    {
      unint64_t v61 = *v58;
      if (v54 < v61) {
        break;
      }
      unint64_t v62 = v61 >> 6;
      uint64_t v63 = 1 << v61;
      unint64_t v64 = (unint64_t)v56[v62];
      if ((v64 & v63) == 0)
      {
        v56[v62] = (void *)(v64 | v63);
        ++v60;
      }
      if (++v58 == v59) {
        goto LABEL_80;
      }
    }
    uint64_t v17 = 1;
    if (!v56) {
      return v17;
    }
LABEL_81:
    operator delete(v56);
    return v17;
  }
  uint64_t v60 = 0;
LABEL_80:
  uint64_t v17 = v60 != v54 + 1;
  if (v56) {
    goto LABEL_81;
  }
  return v17;
}

void sub_2483F7F9C(_Unwind_Exception *a1)
{
  if (STACK[0x258]) {
    operator delete((void *)STACK[0x258]);
  }
  sub_2483EABC4((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_2483F802C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_2483F80DC(const void *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5, unint64_t a6, void *a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v77 = a3;
  unint64_t v78 = a2;
  uint64_t v75 = a8;
  unint64_t v76 = a6;
  uint64_t v10 = *(void *)(a10 + 8);
  if ((a8 == 0) != (v10 != 0)) {
    return 1;
  }
  unint64_t v16 = a2;
  __p = 0;
  long long v73 = 0;
  long long v74 = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_2483E92E8();
    }
    uint64_t v18 = a2;
    unint64_t v19 = (unsigned int **)operator new(8 * a2);
    __p = v19;
    long long v73 = v19;
    long long v74 = &v19[v16];
    memcpy(v19, a1, 8 * v16);
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  long long v73 = &v19[v18];
  memset(v71, 0, sizeof(v71));
  uint64_t v69 = 0;
  uint64_t v70 = a10;
  v68[0] = a10;
  v68[1] = &v69;
  v68[2] = &v76;
  v68[3] = v71;
  memset(v81, 0, sizeof(v81));
  uint64_t v67 = 0;
  uint64_t v20 = (uint64_t)*v19;
  uint64_t v21 = **v19;
  uint64_t v67 = v21;
  unint64_t v22 = ((unint64_t)(a3 + 7) >> 3) * v16 * v21;
  if (v22 <= a6)
  {
    uint64_t v23 = *(unsigned int *)(v20 + 4);
    if (v10 || v22 + (v23 - 1) * a6 <= a9)
    {
      BOOL v66 = a5 < 2;
      uint64_t v65 = 0;
      long long v63 = 0uLL;
      long long v64 = 0uLL;
      if (v16)
      {
        while (*v19)
        {
          ++v19;
          if (!--v16) {
            goto LABEL_14;
          }
        }
        sub_2483EA250((uint64_t)&v43, v21, 1u);
        uint64_t v11 = p_p;
        if (p_p) {
          goto LABEL_48;
        }
        long long v63 = v43;
        unint64_t v26 = v45;
        uint64_t v45 = 0;
        unint64_t v27 = v46;
        uint64_t v28 = *((void *)&v64 + 1);
        *(void *)&long long v64 = v44;
        *((void *)&v64 + 1) = v26;
        if (v28)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v28 - 24));
          free(*(void **)(v28 - 32));
        }
        uint64_t v65 = v27;
        uint64_t v29 = DWORD1(v63);
        if (DWORD1(v63))
        {
          uint64_t v30 = (char *)*((void *)&v64 + 1);
          uint64_t v31 = v64;
          int v32 = v63;
          size_t v33 = 4 * v63;
          do
          {
            if (v32) {
              memset_pattern16(v30, &unk_2484DD0D0, v33);
            }
            v30 += v31;
            --v29;
          }
          while (v29);
        }
        if (!p_p)
        {
          unsigned int v34 = v45;
          uint64_t v45 = 0;
          if (v34)
          {
            atomic_fetch_add(&qword_26931BDF8, -(uint64_t)*(v34 - 3));
            free((void *)*(v34 - 4));
          }
        }
      }
LABEL_14:
      if (a4)
      {
        if (v77 == 32)
        {
          long long v56 = v68;
          *(void *)&long long v43 = a10;
          *((void *)&v43 + 1) = v71;
          uint64_t v44 = &v75;
          uint64_t v45 = &v76;
          unint64_t v46 = &v78;
          p_p = &__p;
          BOOL v48 = (void **)&v63;
          unsigned __int8 v49 = &v66;
          uint64_t v50 = (unint64_t *)&v67;
          unsigned __int8 v51 = (float *)&v69;
          if (a7)
          {
            BOOL v36 = sub_2483F8FF0(a7, v23, (uint64_t ***)&v56, (uint64_t ***)&v43);
          }
          else
          {
            *(void *)&long long v60 = 0;
            *((void *)&v60 + 1) = &v60;
            BOOL v36 = sub_2483F8FF0(&v60, v23, (uint64_t ***)&v56, (uint64_t ***)&v43);
          }
          uint64_t v11 = v36;
        }
        else
        {
          if (v77 != 16)
          {
            uint64_t v11 = 1;
            goto LABEL_48;
          }
          LOBYTE(v55) = !v66;
          uint64_t v62 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v56 = &v67;
          unint64_t v57 = &v78;
          unint64_t v58 = &v60;
          uint64_t v59 = v68;
          *(void *)&long long v43 = &v78;
          *((void *)&v43 + 1) = &__p;
          uint64_t v44 = (uint64_t *)&v63;
          uint64_t v45 = (unint64_t *)&v60;
          unint64_t v46 = (unint64_t *)&v67;
          p_p = (void **)a10;
          BOOL v48 = v71;
          unsigned __int8 v49 = (BOOL *)&v75;
          uint64_t v50 = &v76;
          unsigned __int8 v51 = &v55;
          unsigned int v52 = &v69;
          if (a7)
          {
            BOOL v24 = sub_2483F9348(a7, v23, &v56, (uint64_t **)&v43);
          }
          else
          {
            uint64_t v79 = 0;
            unint64_t v80 = &v79;
            BOOL v24 = sub_2483F9348(&v79, v23, &v56, (uint64_t **)&v43);
          }
          uint64_t v11 = v24;
          uint64_t v37 = *((void *)&v61 + 1);
          *((void *)&v61 + 1) = 0;
          if (v37)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v37 - 24));
            free(*(void **)(v37 - 32));
          }
        }
        if (v11)
        {
LABEL_48:
          uint64_t v38 = *((void *)&v64 + 1);
          *((void *)&v64 + 1) = 0;
          if (v38)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v38 - 24));
            free(*(void **)(v38 - 32));
          }
          goto LABEL_50;
        }
      }
      else
      {
        float v55 = (float)(unint64_t)~(-1 << v77);
        uint64_t v62 = 0;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v56 = &v67;
        unint64_t v57 = &v78;
        unint64_t v58 = &v60;
        uint64_t v59 = v68;
        *(void *)&long long v43 = a10;
        *((void *)&v43 + 1) = v71;
        uint64_t v44 = &v75;
        uint64_t v45 = &v76;
        unint64_t v46 = &v78;
        p_p = &__p;
        BOOL v48 = (void **)&v63;
        unsigned __int8 v49 = (BOOL *)&v60;
        uint64_t v50 = (unint64_t *)&v67;
        unsigned __int8 v51 = &v55;
        unsigned int v52 = &v77;
        BOOL v53 = &v66;
        unint64_t v54 = &v69;
        if (a7)
        {
          BOOL v25 = sub_2483F8738(a7, v23, &v56, (uint64_t **)&v43);
        }
        else
        {
          uint64_t v79 = 0;
          unint64_t v80 = &v79;
          BOOL v25 = sub_2483F8738(&v79, v23, &v56, (uint64_t **)&v43);
        }
        uint64_t v11 = v25;
        uint64_t v35 = *((void *)&v61 + 1);
        *((void *)&v61 + 1) = 0;
        if (v25)
        {
          if (v35)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v35 - 24));
            free(*(void **)(v35 - 32));
          }
          goto LABEL_48;
        }
        if (v35)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v35 - 24));
          free(*(void **)(v35 - 32));
        }
      }
      uint64_t v11 = 0;
      goto LABEL_48;
    }
  }
  uint64_t v11 = 1;
LABEL_50:
  for (uint64_t i = 144; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)((char *)v81 + i));
  uint64_t v40 = v69;
  uint64_t v69 = 0;
  if (v40) {
    (*(void (**)(void))(v70 + 16))();
  }
  *(void *)&v81[0] = v71;
  sub_2483F87EC((void ***)v81);
  if (__p)
  {
    long long v73 = (unsigned int **)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_2483F865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  if (a38)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a38 - 24));
    free(*(void **)(a38 - 32));
  }
  for (uint64_t i = 144; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(v53 - 256 + i));
  if (a47) {
    (*(void (**)(void))(a48 + 16))();
  }
  *(void *)(v53 - 256) = &a49;
  sub_2483F87EC((void ***)(v53 - 256));
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2483F8738(void *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_2483F8898(v8, 1uLL)) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_2483F8A80((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, uint64_t ***, uint64_t (*)(uint64_t ***, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_2483F8898, sub_2483F8A80, 0, a2) != 0;
}

void sub_2483F87EC(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_2483F8840((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2483F8840(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_2483F8898(uint64_t ***a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = ***a1;
  *(void *)&long long v23 = __PAIR64__(*(_DWORD *)(*a1)[1] * (int)a2, v4);
  *((void *)&v23 + 1) = v23;
  uint64_t v4 = v4;
  if (v4)
  {
    uint64_t v5 = 4 * v4 + 139;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x7FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x7FFFFFF80) + 128;
    }
  }
  uint64_t v24 = v4;
  uint64_t v25 = 0;
  uint64_t v26 = 4;
  if (sub_24841F648((uint64_t)&v23))
  {
    uint64_t v6 = v25;
    uint64_t v25 = 0;
    if (v6)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v6 - 24));
      free(*(void **)(v6 - 32));
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  uint64_t v11 = v3[2];
  *(_OWORD *)uint64_t v11 = v23;
  uint64_t v12 = v11[3];
  v11[2] = v8;
  v11[3] = v9;
  if (v12)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
    free(*(void **)(v12 - 32));
  }
  v11[4] = v10;
  unint64_t v13 = v3[3];
  if (*(void *)(*v13 + 8))
  {
    unint64_t v14 = (uint64_t *)v13[1];
    uint64_t v17 = (*(uint64_t (**)(void, unint64_t, void))*v13)(*(void *)(*v13 + 24), v2, *(void *)v13[2]);
    uint64_t v18 = *v14;
    *unint64_t v14 = v17;
    if (v18) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14[1] + 16))(v18, v15, v16);
    }
    if (!*(void *)v13[1]) {
      return 0xFFFFFFFFLL;
    }
    sub_2483F8D48((uint64_t *)v13[3], v2);
    if (v2)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = (unint64_t *)(*(void *)v13[3] + v19);
        unint64_t v21 = *(void *)v13[2];
        unint64_t v22 = v20[1] - *v20;
        if (v21 <= v22)
        {
          if (v21 < v22) {
            v20[1] = *v20 + v21;
          }
        }
        else
        {
          sub_2483EE8AC(v20, v21 - v22);
        }
        v19 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 0;
}

void sub_2483F8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t sub_2483F8A80(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 8);
  if (*(void *)(*(void *)v3 + 8)) {
    uint64_t v4 = *(unsigned char **)(**(void **)(v3 + 8) + 24 * a3);
  }
  else {
    uint64_t v4 = (unsigned char *)(**(void **)(v3 + 16) + **(void **)(v3 + 24) * a2);
  }
  memset(v51, 0, sizeof(v51));
  unint64_t v5 = **(void **)(v3 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = **(void **)(v3 + 40);
    do
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      if (v8) {
        uint64_t v9 = *(void *)(v8 + 24) + *(void *)(v8 + 16) * a2;
      }
      else {
        uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 24);
      }
      *((void *)v51 + v6++) = v9;
    }
    while (v5 != v6);
    unint64_t v10 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      uint64_t v16 = v5 * a3;
      uint64_t v17 = *(void *)(v3 + 56);
      uint64_t result = *(void *)(v3 + 64);
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t v18 = *(void *)(v17 + 24);
      *((void *)&v49 + v10) = v18 + v19 * (v5 * a3 + v10);
      unint64_t v20 = *(void *)result;
      if (*(void *)result)
      {
        unint64_t v21 = 0;
        unint64_t v22 = (float32x4_t *)*((void *)v51 + v10);
        uint64_t result = *(void *)(v3 + 72);
        float32x4_t v23 = vld1q_dup_f32((const float *)result);
        uint64_t v24 = (int32x4_t *)(v18 + v19 * (v10 + v16));
        do
        {
          float32x4_t v25 = *v22++;
          *v24++ = vcvtnq_s32_f32(vmulq_f32(v23, vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)0), _Q1)));
          v21 += 4;
        }
        while (v21 < v20);
        unint64_t v5 = **(void **)(v3 + 32);
      }
      ++v10;
    }
    while (v10 < v5);
  }
  else
  {
    long long v49 = 0uLL;
    long long v50 = 0uLL;
  }
  if (**(void **)(v3 + 80) >= 9uLL)
  {
    uint64_t v33 = **(void **)(v3 + 64);
    if (**(unsigned char **)(v3 + 88))
    {
      if (v33)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v4 + 1;
        do
        {
          if (v5)
          {
            BOOL v36 = (uint64_t *)&v49;
            uint64_t v37 = v35;
            unint64_t v38 = v5;
            do
            {
              uint64_t v39 = *v36++;
              *(_WORD *)(v37 - 1) = *(_DWORD *)(v39 + 4 * v34);
              v37 += 2;
              --v38;
            }
            while (v38);
          }
          ++v34;
          v35 += 2 * v5;
        }
        while (v34 != v33);
      }
    }
    else if (v33)
    {
      uint64_t v40 = 0;
      uint64_t v41 = v4 + 1;
      do
      {
        if (v5)
        {
          unsigned __int8 v42 = (uint64_t *)&v49;
          long long v43 = v41;
          unint64_t v44 = v5;
          do
          {
            uint64_t v45 = *v42++;
            *(_WORD *)(v43 - 1) = bswap32(*(_DWORD *)(v45 + 4 * v40)) >> 16;
            v43 += 2;
            --v44;
          }
          while (v44);
        }
        ++v40;
        v41 += 2 * v5;
      }
      while (v40 != v33);
    }
  }
  else
  {
    uint64_t v26 = **(void **)(v3 + 64);
    if (v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = v4;
      do
      {
        if (v5)
        {
          uint64_t v29 = (uint64_t *)&v49;
          uint64_t v30 = v28;
          unint64_t v31 = v5;
          do
          {
            uint64_t v32 = *v29++;
            *v30++ = *(_DWORD *)(v32 + 4 * v27);
            --v31;
          }
          while (v31);
        }
        ++v27;
        v28 += v5;
      }
      while (v27 != v26);
    }
  }
  unint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned char *))(*(void *)v3 + 8);
  if (v46)
  {
    uint64_t v47 = **(void **)(v3 + 96);
    uint64_t v48 = **(void **)(v3 + 64);
    return v46(v47, a3, 0, a2, v48, v4);
  }
  return result;
}

void sub_2483F8D48(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        uint64_t v16 = a1[1];
        do
        {
          uint64_t v18 = *(void **)(v16 - 24);
          v16 -= 24;
          uint64_t v17 = v18;
          if (v18)
          {
            *(void *)(v4 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        sub_2483E92E8();
      }
      v20[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v11 = (char *)sub_2483F8ED4(v10);
      uint64_t v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      sub_2483F8F1C(a1, v20);
      sub_2483F8F8C((uint64_t)v20);
    }
  }
}

void *sub_2483F8ED4(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2483E9338();
  }
  return operator new(24 * a1);
}

void *sub_2483F8F1C(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  unint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *unint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2483F8F8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_2483F8FF0(void *a1, uint64_t a2, uint64_t ***a3, uint64_t ***a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_2483F90A4(v8, 1uLL)) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_2483F9180((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, uint64_t ****, uint64_t (*)(uint64_t ****, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_2483F90A4, sub_2483F9180, 0, a2) != 0;
}

uint64_t sub_2483F90A4(uint64_t ****a1, unint64_t a2)
{
  uint64_t v2 = **a1;
  if (!(*v2)[1]) {
    return 0;
  }
  unint64_t v3 = a2;
  int v4 = v2[1];
  uint64_t v5 = ((uint64_t (*)(uint64_t, unint64_t, void))**v2)((*v2)[3], a2, *v2[2]);
  uint64_t v6 = *v4;
  *int v4 = v5;
  if (v6) {
    (*(void (**)(void))(v4[1] + 16))();
  }
  if (*v2[1])
  {
    sub_2483F8D48(v2[3], v3);
    if (v3)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = (unint64_t *)(*v2[3] + v7);
        unint64_t v9 = *v2[2];
        unint64_t v10 = v8[1] - *v8;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v8[1] = *v8 + v9;
          }
        }
        else
        {
          sub_2483EE8AC(v8, v9 - v10);
        }
        v7 += 24;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2483F9180(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 8);
  if (*(void *)(*(void *)v3 + 8)) {
    int v4 = *(_DWORD **)(**(void **)(v3 + 8) + 24 * a3);
  }
  else {
    int v4 = (_DWORD *)(**(void **)(v3 + 16) + **(void **)(v3 + 24) * a2);
  }
  memset(v26, 0, sizeof(v26));
  uint64_t v5 = **(void **)(v3 + 32);
  if (v5)
  {
    uint64_t v6 = **(void **)(v3 + 40);
    uint64_t v7 = v26;
    uint64_t v8 = **(void **)(v3 + 32);
    do
    {
      if (*(void *)v6) {
        uint64_t v9 = *(void *)(*(void *)v6 + 24) + *(void *)(*(void *)v6 + 16) * a2;
      }
      else {
        uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 24);
      }
      *v7++ = v9;
      v6 += 8;
      --v8;
    }
    while (v8);
  }
  uint64_t v10 = **(void **)(v3 + 64);
  if (**(unsigned char **)(v3 + 56))
  {
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v4;
      do
      {
        if (v5)
        {
          uint64_t v13 = (uint64_t *)v26;
          size_t v14 = v12;
          uint64_t v15 = v5;
          do
          {
            uint64_t v16 = *v13++;
            *v14++ = *(_DWORD *)(v16 + 4 * v11);
            --v15;
          }
          while (v15);
        }
        ++v11;
        v12 += v5;
      }
      while (v11 != v10);
    }
  }
  else if (v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v4;
    do
    {
      if (v5)
      {
        size_t v19 = (uint64_t *)v26;
        unint64_t v20 = v18;
        uint64_t v21 = v5;
        do
        {
          uint64_t v22 = *v19++;
          *v20++ = bswap32(*(_DWORD *)(v22 + 4 * v17));
          --v21;
        }
        while (v21);
      }
      ++v17;
      v18 += v5;
    }
    while (v17 != v10);
  }
  float32x4_t v23 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, _DWORD *))(*(void *)v3 + 8);
  if (v23)
  {
    uint64_t v24 = **(void **)(v3 + 72);
    uint64_t v25 = **(void **)(v3 + 64);
    return v23(v24, a3, 0, a2, v25, v4);
  }
  return result;
}

BOOL sub_2483F9348(void *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_2483F93FC(v8, 1uLL)) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_2483F95E4((unint64_t *)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, uint64_t ***, uint64_t (*)(uint64_t ***, unint64_t), unint64_t *(*)(unint64_t *, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_2483F93FC, sub_2483F95E4, 0, a2) != 0;
}

uint64_t sub_2483F93FC(uint64_t ***a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = ***a1;
  *(void *)&long long v23 = __PAIR64__(*(_DWORD *)(*a1)[1] * (int)a2, v4);
  *((void *)&v23 + 1) = v23;
  uint64_t v4 = v4;
  if (v4)
  {
    uint64_t v5 = 2 * v4 + 141;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x3FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x3FFFFFF80) + 128;
    }
  }
  uint64_t v24 = v4;
  uint64_t v25 = 0;
  uint64_t v26 = 2;
  if (sub_24841F648((uint64_t)&v23))
  {
    uint64_t v6 = v25;
    uint64_t v25 = 0;
    if (v6)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v6 - 24));
      free(*(void **)(v6 - 32));
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  uint64_t v11 = v3[2];
  *(_OWORD *)uint64_t v11 = v23;
  uint64_t v12 = v11[3];
  v11[2] = v8;
  v11[3] = v9;
  if (v12)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
    free(*(void **)(v12 - 32));
  }
  v11[4] = v10;
  uint64_t v13 = v3[3];
  if (*(void *)(*v13 + 8))
  {
    size_t v14 = (uint64_t *)v13[1];
    uint64_t v17 = (*(uint64_t (**)(void, unint64_t, void))*v13)(*(void *)(*v13 + 24), v2, *(void *)v13[2]);
    uint64_t v18 = *v14;
    *size_t v14 = v17;
    if (v18) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14[1] + 16))(v18, v15, v16);
    }
    if (!*(void *)v13[1]) {
      return 0xFFFFFFFFLL;
    }
    sub_2483F8D48((uint64_t *)v13[3], v2);
    if (v2)
    {
      uint64_t v19 = 0;
      do
      {
        unint64_t v20 = (unint64_t *)(*(void *)v13[3] + v19);
        unint64_t v21 = *(void *)v13[2];
        unint64_t v22 = v20[1] - *v20;
        if (v21 <= v22)
        {
          if (v21 < v22) {
            v20[1] = *v20 + v21;
          }
        }
        else
        {
          sub_2483EE8AC(v20, v21 - v22);
        }
        v19 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 0;
}

void sub_2483F95A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

unint64_t *sub_2483F95E4(unint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unint64_t **)result[1];
  memset(v34, 0, sizeof(v34));
  unint64_t v4 = **v3;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *v3[1];
    do
    {
      uint64_t v7 = *(void *)(v6 + 8 * v5);
      if (v7) {
        unint64_t v8 = *(void *)(v7 + 24) + *(void *)(v7 + 16) * a2;
      }
      else {
        unint64_t v8 = v3[2][3];
      }
      *((void *)v34 + v5++) = v8;
    }
    while (v4 != v5);
    unint64_t v9 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    do
    {
      uint64_t v10 = v4 * a3;
      uint64_t v11 = (uint64_t *)v3[3];
      uint64_t result = v3[4];
      uint64_t v13 = v11[2];
      uint64_t v12 = v11[3];
      *((void *)&v32 + v9) = v12 + v13 * (v4 * a3 + v9);
      unint64_t v14 = *result;
      if (*result)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (float32x4_t *)*((void *)v34 + v9);
        uint64_t v17 = (float16x4_t *)(v12 + v13 * (v9 + v10));
        do
        {
          float32x4_t v18 = *v16++;
          *v17++ = vcvt_f16_f32(v18);
          v15 += 4;
        }
        while (v15 < v14);
        unint64_t v4 = **v3;
      }
      ++v9;
    }
    while (v9 < v4);
  }
  else
  {
    long long v32 = 0uLL;
    long long v33 = 0uLL;
  }
  if (v3[5][1]) {
    unint64_t v19 = *(void *)(*v3[6] + 24 * a3);
  }
  else {
    unint64_t v19 = *v3[7] + *v3[8] * a2;
  }
  unint64_t v20 = *v3[4];
  if (v20)
  {
    unint64_t v21 = 0;
    unint64_t v22 = v4;
    do
    {
      if (v22)
      {
        for (unint64_t i = 0; i < v22; ++i)
        {
          *(_WORD *)(v19 + 2 * (i + v21 * v22)) = *(_WORD *)(*((void *)&v32 + i) + 2 * v21);
          unint64_t v22 = **v3;
        }
        unint64_t v20 = *v3[4];
        unint64_t v4 = **v3;
      }
      ++v21;
    }
    while (v21 < v20);
  }
  unint64_t v24 = 2 * v20 * v4;
  if (*(unsigned char *)v3[9]) {
    BOOL v25 = v24 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = (unsigned char *)(v19 + v26);
      char v28 = *(unsigned char *)(v19 + v26);
      *uint64_t v27 = *(unsigned char *)(v19 + v26 + 1);
      v27[1] = v28;
      v26 += 2;
    }
    while (v26 < v24);
  }
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, unint64_t))v3[5][1];
  if (v29)
  {
    uint64_t v30 = *v3[10];
    uint64_t v31 = *v3[4];
    return (unint64_t *)v29(v30, a3, 0, a2, v31, v19);
  }
  return result;
}

unsigned int *sub_2483F9824(unsigned int *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v5 = result[1];
  if (*result) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = v6;
  size_t v8 = 4 * *result;
  do
  {
    if ((v7 & 1) == 0)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a2 + 40 * v4;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v11 = *(char **)(v10 + 24);
      do
      {
        uint64_t result = (unsigned int *)memcpy(v11, (const void *)(*(void *)&v3[10 * v4 + 6] + *(void *)&v3[10 * v4 + 4] * v9++), v8);
        v11 += v12;
      }
      while (v5 != v9);
    }
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_2483F98C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2483FA020((uint64_t)&v28, a1, a6, a2);
  uint64_t v19 = a3;
  unint64_t v20 = a4;
  sub_2483FA1E8((uint64_t)v23, (uint64_t)&v19);
  if (!sub_2483FA250(&v28, v23, a5, 0) && !sub_2483FA9E8((uint64_t)&v28))
  {
    unint64_t v9 = 8 * (v23[2] - v24 + v25) - v23[1];
    unint64_t v27 = v9;
    if (v9 <= 8 * (v23[3] - v24) + 64)
    {
      unint64_t v10 = v9 >> 3;
      char v26 = 1;
      int v22 = 0;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      if (v29 == v30)
      {
        unint64_t v12 = v10;
        BOOL v13 = sub_2483FB1BC((uint64_t)&v28, 0, 0, 0) == 0;
      }
      else
      {
        uint64_t v11 = *v29;
        if ((unint64_t)*v29 + v10 <= a4)
        {
          v16[0] = (void **)(a3 + v10);
          v16[1] = v11;
          operator new();
        }
        BOOL v13 = 0;
        unint64_t v12 = v10;
      }
      v16[0] = (void **)&v17;
      sub_2483FD7BC(v16);
      if (v22) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13;
      }
      if (v14 && !sub_2483FD840((uint64_t)&v28)) {
        *(void *)(a5 + 440) = v12;
      }
      *(void *)&long long v17 = &v19;
      sub_2483FD8DC((void ***)&v17);
    }
  }
  return sub_2483FD974((uint64_t)&v28);
}

void sub_2483F9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char **a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  a17 = &a19;
  sub_2483FD7BC((void ***)&a17);
  a19 = &a22;
  sub_2483FD8DC((void ***)&a19);
  sub_2483FD974((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_2483FA020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_24841CCA4(a1 + 48, a3);
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 840) = 8;
  *(void *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 856) = 1;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 1034) = 1;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  sub_2483F26D4(a1 + 1152);
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  sub_2484294B8(a1 + 1232);
  *(_WORD *)(a1 + 1328) = 257;
  *(void *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(unsigned char *)(a1 + 1410) = 1;
  *(void *)(a1 + 1416) = 0;
  *(_WORD *)(a1 + 1424) = 1;
  *(_DWORD *)(a1 + 1484) = 0;
  *(void *)(a1 + 1468) = 0;
  *(void *)(a1 + 1476) = 0;
  *(void *)(a1 + 1460) = 0;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1440) = 0;
  *(_WORD *)(a1 + 1456) = 0;
  return a1;
}

void sub_2483FA138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = *(void **)(v10 + 1208);
  if (v16)
  {
    *(void *)(v10 + 1216) = v16;
    operator delete(v16);
  }
  sub_2483EABC4(v13);
  long long v17 = *(void **)(v10 + 1040);
  if (v17)
  {
    *(void *)(v10 + 1048) = v17;
    operator delete(v17);
  }
  a10 = (void **)(v10 + 864);
  sub_2483FDBFC(&a10);
  sub_2484039E8(v12);
  sub_248403970(v11);
  uint64_t v18 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 24) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2483FA1E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(uint64_t **)a2;
  unint64_t v4 = *(void *)a2 + *(void *)(a2 + 8) - 8;
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if ((unint64_t)v3 > v4)
  {
    sub_2483EB0C0((void *)a1);
  }
  else
  {
    uint64_t v5 = *v3;
    *(void *)(a1 + 16) = (char *)v3 + 7;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 56;
  }
  return a1;
}

uint64_t sub_2483FA250(uint64x2_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  a1[48].i64[0] = a3;
  sub_24842F040((uint64_t)&v77);
  uint64_t v8 = a1->i64[0];
  *(_DWORD *)(v8 + 208) = v77.i32[0];
  uint64_t v9 = v77.i64[1];
  v77.i64[1] = 0;
  sub_248401764((uint64_t *)(v8 + 216), v9);
  *(uint64x2_t *)(v8 + 224) = v78;
  memcpy((void *)(v8 + 240), v79, 0x2B0uLL);
  sub_248403628((void **)(v8 + 928));
  *(_OWORD *)(v8 + 928) = v80;
  *(void *)(v8 + 944) = v81;
  uint64_t v81 = 0;
  long long v80 = 0u;
  *(void *)&v82[0] = &v80;
  sub_248403688((void ***)v82);
  sub_2483FED94(&v77.i64[1]);
  a1[38].i8[0] = a4;
  uint64_t v10 = sub_24841A614((uint64_t)a2, (uint64_t)a1[3].i64);
  if (v10) {
    return v10;
  }
  sub_24840370C(&v77, (uint64_t)a1[3].i64);
  uint64x2_t v11 = (uint64x2_t)v79[5];
  a1[45] = (uint64x2_t)v79[4];
  a1[46] = v11;
  a1[47] = (uint64x2_t)v79[6];
  uint64x2_t v12 = (uint64x2_t)v79[1];
  a1[41] = (uint64x2_t)v79[0];
  a1[42] = v12;
  uint64x2_t v13 = (uint64x2_t)v79[3];
  a1[43] = (uint64x2_t)v79[2];
  a1[44] = v13;
  uint64x2_t v14 = v78;
  a1[39] = v77;
  a1[40] = v14;
  uint64_t v15 = a1[10].u32[0];
  uint64_t v16 = a1[46].i64[0];
  uint64x2_t v78 = 0u;
  memset(v79, 0, 88);
  uint64x2_t v77 = 0u;
  sub_2483F7944(a3 + 96, (uint64_t)&v77);
  for (uint64_t i = 13; i != -2; i -= 5)
    sub_2483E8DDC(&v77.i64[i]);
  uint64_t v19 = *(void *)(a3 + 416);
  uint64_t v18 = *(void *)(a3 + 424);
  if (v18 != v19)
  {
    do
    {
      uint64_t v20 = v18 - 40;
      sub_2483E8DDC((uint64_t *)(v18 - 16));
      uint64_t v18 = v20;
    }
    while (v20 != v19);
  }
  *(void *)(a3 + 424) = v19;
  int v21 = a1[26].i32[2];
  *(_DWORD *)(a3 + 48) = v21;
  if (!a1[38].i8[0] && (a1[27].i8[8] || v21) && ((int v22 = a1[4].i32[0], v22 == 3) || !v22))
  {
    uint64_t v23 = a1->i64[0];
    *(void *)(v23 + 4456) = *(void *)(a1->i64[0] + 4456) + 1;
    *(void *)(v23 + 4464) = 0;
  }
  else
  {
    ++*(void *)(a1->i64[0] + 4464);
  }
  if (v16 == 1 && v15 == 1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = a1[46].i64[1] + v16 * v15 + 2;
  }
  __p = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  float32x4_t v71 = 0;
  long long v72 = 0;
  uint64_t v73 = 0;
  if (v25 <= 0x10000)
  {
    uint64_t v75 = 0;
    sub_2483EB1C4((char **)&__p, v25);
    unint64_t v28 = a2[1];
    unint64_t v27 = (void *)a2[2];
    unint64_t v29 = a2[3];
    if (8 * ((void)v27 + a2[5] - a2[4]) - v28 < 8 * (v29 - a2[4]) + 64)
    {
      if ((unint64_t)v27 > v29)
      {
        sub_2483EB0C0(a2);
        unint64_t v30 = *a2;
        uint64_t v31 = a2[1];
      }
      else
      {
        unint64_t v30 = *a2 | (*v27 << v28);
        a2[2] = (unint64_t)v27 + ((63 - v28) >> 3);
        uint64_t v31 = v28 | 0x38;
      }
      uint64_t v32 = v31 - 1;
      *a2 = v30 >> 1;
      a2[1] = v32;
      if (v30)
      {
        unint64_t v40 = a2[4];
        unint64_t v41 = 8 * (a2[3] - v40) + 64;
        unint64_t v42 = 8 * (a2[2] - v40 + a2[5]) - v32;
        BOOL v36 = v41 >= v42;
        unint64_t v43 = v41 - v42;
        if (!v36 || 12 * v25 > v43) {
          goto LABEL_41;
        }
        sub_2483EB1C4(&v71, v25);
        unint64_t v44 = v71;
        memset(v87, 0, 24);
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        memset(v82, 0, sizeof(v82));
        sub_2483F26D4((uint64_t)v86);
        v86[6] = 0;
        uint64_t v10 = sub_2483F2760(a2, 8uLL, (uint64_t)v82, v87, 0);
        if (!v10)
        {
          sub_2483EA6D0((uint64_t)&v77, (uint64_t)v82, a2, 0);
          unsigned int v45 = sub_2483EA964(0, v25, (uint64_t)v44, a2, (uint64_t)&v77, v87);
          uint64_t v10 = v45 ? v45 : (v78.i32[1] != 1245184);
          uint64_t v46 = *(void *)&v79[1];
          *(void *)&v79[1] = 0;
          if (v46)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v46 - 24));
            free(*(void **)(v46 - 32));
          }
        }
        if (*((void *)&v84 + 1))
        {
          *(void *)&long long v85 = *((void *)&v84 + 1);
          operator delete(*((void **)&v84 + 1));
        }
        if ((void)v83)
        {
          *((void *)&v83 + 1) = v83;
          operator delete((void *)v83);
        }
        v77.i64[0] = (uint64_t)v82 + 8;
        sub_2483EA640((void ***)&v77);
        uint64_t v47 = *(void *)&v82[0];
        *(void *)&v82[0] = 0;
        if (v47)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v47 - 24));
          free(*(void **)(v47 - 32));
        }
        if (v87[0]) {
          operator delete((void *)v87[0]);
        }
        if (v10) {
          goto LABEL_42;
        }
      }
      uint64_t v10 = sub_2484165BC(a2);
      if (v10) {
        goto LABEL_42;
      }
      unint64_t v33 = a2[4];
      unint64_t v34 = 8 * (a2[3] - v33) + 64;
      unint64_t v35 = 8 * (a2[2] - v33 + a2[5]) - a2[1];
      BOOL v36 = v34 >= v35;
      unint64_t v37 = v34 - v35;
      if (v36 && 12 * v25 <= v37)
      {
        if (v25)
        {
          unint64_t v38 = __p;
          unint64_t v39 = v25;
          do
          {
            *v38++ = sub_24841AE94(0x800D00000009, 0x808801D00088015, a2);
            --v39;
          }
          while (v39);
        }
        if (sub_2484165BC(a2))
        {
LABEL_37:
          uint64_t v10 = 1;
          goto LABEL_42;
        }
        if (8 * (a2[2] - a2[4] + a2[5]) - a2[1] <= 8 * (a2[3] - a2[4]) + 64)
        {
          uint64_t v48 = v71;
          long long v49 = v72;
          unsigned __int8 v51 = (unsigned char *)a1[1].i64[0];
          long long v50 = (char *)a1[1].i64[1];
          unint64_t v52 = (v50 - v51) >> 4;
          if (v25 <= v52)
          {
            if (v25 < v52) {
              a1[1].i64[1] = (uint64_t)&v51[16 * v25];
            }
          }
          else
          {
            unint64_t v53 = v25 - v52;
            uint64_t v54 = a1[2].i64[0];
            if (v25 - v52 <= (v54 - (uint64_t)v50) >> 4)
            {
              bzero((void *)a1[1].i64[1], 16 * v53);
              a1[2].i64[1] = 0;
              uint64_t v62 = &a1[2].i64[1];
              a1[1].i64[1] = (uint64_t)&v50[16 * v53];
              long long v63 = v48;
LABEL_81:
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              BOOL v66 = (unsigned int *)__p;
              uint64_t v67 = (void *)a1[1].i64[0];
              int v68 = v67;
              while (1)
              {
                uint64_t v69 = v66[v65];
                *int v68 = v69;
                uint64_t v70 = v65;
                if (v48 != v49) {
                  uint64_t v70 = *(unsigned int *)&v63[4 * v65];
                }
                v67[2 * v70 + 1] = v65;
                BOOL v36 = __CFADD__(v64, v69);
                v64 += v69;
                if (v36) {
                  goto LABEL_37;
                }
                uint64_t *v62 = v64;
                ++v65;
                v68 += 2;
                if (v25 == v65) {
                  goto LABEL_86;
                }
              }
            }
            if (v25 >> 60) {
              sub_2483E92E8();
            }
            uint64_t v55 = v54 - (void)v51;
            uint64_t v56 = v55 >> 3;
            if (v55 >> 3 <= v25) {
              uint64_t v56 = v25;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v56;
            }
            if (v57 >> 60) {
              sub_2483E9338();
            }
            unint64_t v58 = (char *)operator new(16 * v57);
            uint64_t v59 = &v58[16 * v52];
            long long v60 = &v58[16 * v57];
            bzero(v59, 16 * v53);
            long long v61 = &v59[16 * v53];
            if (v50 != v51)
            {
              do
              {
                *((_OWORD *)v59 - 1) = *((_OWORD *)v50 - 1);
                v59 -= 16;
                v50 -= 16;
              }
              while (v50 != v51);
              long long v50 = (char *)a1[1].i64[0];
            }
            a1[1].i64[0] = (uint64_t)v59;
            a1[1].i64[1] = (uint64_t)v61;
            a1[2].i64[0] = (uint64_t)v60;
            if (v50) {
              operator delete(v50);
            }
          }
          a1[2].i64[1] = 0;
          uint64_t v62 = &a1[2].i64[1];
          if (v25)
          {
            long long v63 = v71;
            goto LABEL_81;
          }
          uint64_t v64 = 0;
LABEL_86:
          if (__CFADD__(v64, (8 * (a2[2] - a2[4] + a2[5]) - a2[1]) >> 3)
            || !sub_2483F179C((uint64_t)&a1[5].i64[1]) && (a1[4].i8[8] & 0x80) == 0 && !a1[3].i32[3])
          {
            goto LABEL_37;
          }
          uint64_t v10 = 0;
LABEL_42:
          if (v71) {
            operator delete(v71);
          }
          goto LABEL_22;
        }
      }
    }
LABEL_41:
    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_42;
  }
  uint64_t v10 = 1;
LABEL_22:
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_2483FA90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483FA9E8(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void **)a1;
  **(void **)a1 = *(void *)(a1 + 456);
  sub_24840370C(&v68, a1 + 48);
  *(_OWORD *)(v3 + 11) = v72;
  *(_OWORD *)(v3 + 13) = v73;
  *(_OWORD *)(v3 + 15) = v74;
  *(_OWORD *)(v3 + 17) = v75;
  *(_OWORD *)(v3 + 3) = v69;
  *(_OWORD *)(v3 + 5) = *(_OWORD *)v70;
  *(_OWORD *)(v3 + 7) = *(_OWORD *)&v70[16];
  *(_OWORD *)(v3 + 9) = v71;
  *(uint64x2_t *)(v3 + 1) = v68;
  v3[157] = v3;
  sub_2483E8C88((uint64_t)&v62, v3[9], v3[10]);
  uint64_t v4 = v67;
  if (v67) {
    return v4;
  }
  uint64_t v6 = v63;
  uint64_t v5 = v64;
  uint64_t v64 = 0;
  uint64_t v7 = v65;
  uint64x2_t v68 = v66;
  *(_OWORD *)(v3 + 19) = v62;
  uint64_t v8 = v3[22];
  v3[21] = v6;
  v3[22] = v5;
  if (v8)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v8 - 24));
    free(*(void **)(v8 - 32));
  }
  v3[23] = v7;
  *((uint64x2_t *)v3 + 12) = v68;
  sub_2484017B8((uint64_t)&v57, v3[9], v3[10]);
  uint64_t v4 = v61;
  if (!v61)
  {
    uint64_t v9 = v58;
    uint64_t v10 = v59;
    uint64_t v59 = 0;
    uint64_t v11 = v60;
    *((_OWORD *)v3 + 64) = v57;
    v3[130] = v9;
    uint64_t v12 = v3[131];
    v3[131] = v10;
    if (v12)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
      free(*(void **)(v12 - 32));
    }
    v3[132] = v11;
    sub_2483E8CE0((uint64_t)&v52, v3[9], v3[10]);
    uint64_t v4 = v56;
    if (v56) {
      goto LABEL_40;
    }
    uint64_t v13 = v54;
    uint64_t v54 = 0;
    uint64_t v14 = v55;
    v3[135] = v53;
    *(_OWORD *)(v3 + 133) = v52;
    uint64_t v15 = v3[136];
    v3[136] = v13;
    if (v15)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v15 - 24));
      free(*(void **)(v15 - 32));
    }
    v3[137] = v14;
    sub_2483EA350((uint64_t)&v68, v3[1], v3[2], 1);
    uint64_t v4 = DWORD2(v74);
    if (DWORD2(v74)) {
      goto LABEL_37;
    }
    long long v36 = *(_OWORD *)&v70[8];
    uint64_t v16 = *((void *)&v69 + 1);
    uint64_t v17 = *(void *)v70;
    uint64_t v18 = v71;
    uint64_t v37 = *(void *)&v70[24];
    uint64_t v19 = *((void *)&v71 + 1);
    *(void *)&long long v40 = v74;
    *((void *)&v69 + 1) = 0;
    *(void *)&long long v71 = 0;
    long long v38 = v72;
    long long v39 = v73;
    uint64x2_t v20 = v68;
    v3[140] = v69;
    *((uint64x2_t *)v3 + 69) = v20;
    uint64_t v21 = v3[141];
    v3[141] = v16;
    if (v21)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v21 - 24));
      free(*(void **)(v21 - 32));
    }
    v3[142] = v17;
    v3[145] = v37;
    *(_OWORD *)(v3 + 143) = v36;
    uint64_t v22 = v3[146];
    v3[146] = v18;
    if (v22)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v22 - 24));
      free(*(void **)(v22 - 32));
    }
    v3[147] = v19;
    long long v23 = v39;
    *((_OWORD *)v3 + 74) = v38;
    *((_OWORD *)v3 + 75) = v23;
    v3[152] = v40;
    v3[195] = 393984;
    sub_2483E8CE0((uint64_t)&v47, v3[9], v3[10]);
    uint64_t v4 = v51;
    if (v51)
    {
LABEL_37:
      sub_24842D240((uint64_t)&v68);
      if (!v56)
      {
        uint64_t v32 = v54;
        uint64_t v54 = 0;
        if (v32)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v32 - 24));
          free(*(void **)(v32 - 32));
        }
      }
LABEL_40:
      if (!v61)
      {
        uint64_t v33 = v59;
        uint64_t v59 = 0;
        if (v33)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v33 - 24));
          free(*(void **)(v33 - 32));
        }
      }
      goto LABEL_43;
    }
    uint64_t v24 = v49;
    uint64_t v49 = 0;
    uint64_t v25 = v50;
    v3[201] = v48;
    *(_OWORD *)(v3 + 199) = v47;
    sub_2483EB138(v3 + 202, v24);
    v3[203] = v25;
    if ((*(unsigned char *)(a1 + 72) & 0x20) != 0)
    {
      if (*(_DWORD *)(a1 + 452) == 4) {
        goto LABEL_33;
      }
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      sub_2483F7944((uint64_t)(v3 + 204), (uint64_t)&v38);
      for (uint64_t i = 104; i != -16; i -= 40)
        sub_2483E8DDC((uint64_t *)((char *)&v38 + i));
      unint64_t v29 = &v3[15 * *(unsigned int *)(a1 + 452) + 237];
      v3[219] = v29;
      if (!*v29)
      {
LABEL_33:
        uint64_t v4 = 1;
        goto LABEL_34;
      }
      if (*((_DWORD *)v3 + 398) && *((_DWORD *)v3 + 399))
      {
        unint64_t v30 = 0;
        do
          bzero((void *)(v3[202] + v3[201] * v30++), *((unsigned int *)v3 + 398));
        while (v30 < *((unsigned int *)v3 + 399));
      }
    }
    else
    {
      sub_2483F0C3C((uint64_t)&v38, v3[9], v3[10]);
      uint64_t v4 = v46;
      if (v46)
      {
LABEL_34:
        if (!v51)
        {
          uint64_t v31 = v49;
          uint64_t v49 = 0;
          if (v31)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v31 - 24));
            free(*(void **)(v31 - 32));
          }
        }
        goto LABEL_37;
      }
      sub_2483F0E78((uint64_t)&v36, (uint64_t)&v38);
      sub_2483F7944((uint64_t)(v3 + 204), (uint64_t)&v36);
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)((char *)&v36 + j));
      v3[219] = v3 + 204;
      if (!v46)
      {
        for (uint64_t k = 104; k != -16; k -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&v38 + k));
      }
    }
    uint64_t v4 = 0;
    goto LABEL_34;
  }
LABEL_43:
  if (!v67)
  {
    uint64_t v34 = v64;
    uint64_t v64 = 0;
    if (v34)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v34 - 24));
      free(*(void **)(v34 - 32));
    }
  }
  if (!v4) {
    sub_24840348C(*(void *)a1, v2);
  }
  return v4;
}

void sub_2483FAF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_24842D240(v66 - 208);
  if (!a52 && a50)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a50 - 24));
    free(*(void **)(a50 - 32));
  }
  if (!a58 && a56)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a56 - 24));
    free(*(void **)(a56 - 32));
  }
  if (!a66)
  {
    if (a62)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a62 - 24));
      free(*(void **)(a62 - 32));
    }
  }
  _Unwind_Resume(a1);
}

char *sub_2483FB040(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_2483E92E8();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_2483E92A8(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t *sub_2483FB148(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(void *)v1 && sub_248403398(*(void *)v1)) {
      **(_DWORD **)(v1 + 8) = 1;
    }
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_2483FB1BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *__b)
{
  uint64_t v395 = *MEMORY[0x263EF8340];
  uint64_t v370 = a3;
  uint64_t v371 = a2;
  v369 = __b;
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a3;
  if (a3 >= 1) {
    memset_pattern16(__b, &unk_2484DD090, 4 * (a3 - ((a3 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  sub_2483FEDE8(&v367, *(void *)(a1 + 744), &v370);
  unint64_t v6 = *(void *)(a1 + 736);
  sub_2483FEDE8(&__p, *(unsigned int *)(a1 + 160), &v370);
  uint64_t v364 = 0;
  v365 = 0;
  uint64_t v366 = 0;
  v372[0] = &v364;
  LOBYTE(v372[1]) = 0;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    uint64_t v7 = 3 * v6;
    size_t v8 = 24 * v6;
    uint64_t v9 = (char **)operator new(v8);
    uint64_t v364 = v9;
    v365 = v9;
    uint64_t v10 = &v9[v7];
    uint64_t v366 = v10;
    do
    {
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      sub_24840331C(v9, __p, v384, (uint64_t)(v384 - (void)__p) >> 3);
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
    v365 = v10;
  }
  if (__p)
  {
    *(void *)&long long v384 = __p;
    operator delete(__p);
  }
  sub_2483FEE6C(v363, *(void *)(a1 + 736));
  if (*(void *)(a1 + 736) == 1 && *(_DWORD *)(a1 + 160) == 1)
  {
    unint64_t v11 = *(unsigned char **)(a1 + 1336);
    if (*v11)
    {
      _DWORD *v369 = 2;
      uint64_t v12 = v4;
    }
    else
    {
      unsigned char *v11 = 1;
      sub_2483FEEE4(v364, 1uLL);
      uint64_t v4 = 0;
      uint64_t v12 = 0;
      *(void *)*uint64_t v364 = 0;
      *(void *)v367 = 0;
      *(void *)v363[0] = 1;
    }
    goto LABEL_42;
  }
  unint64_t v13 = v370;
  if (v370)
  {
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 744);
    unint64_t v16 = v15 + 1;
    uint64_t v17 = 8;
    uint64_t v12 = v4;
    while (1)
    {
      uint64_t v18 = v371;
      unint64_t v19 = *(void *)(v371 + v17);
      uint64_t v20 = *(void *)(a1 + 1336);
      if (!*(unsigned char *)(v20 + v19)) {
        break;
      }
      v369[v14] = 2;
LABEL_29:
      ++v14;
      v17 += 24;
      if (v14 >= v13) {
        goto LABEL_33;
      }
    }
    if (v19)
    {
      if (v19 < v16)
      {
        uint64_t v21 = (char *)v367 + 8 * v19 - 8;
LABEL_27:
        *(void *)uint64_t v21 = v14;
        uint64_t v22 = *(void *)(v18 + v17);
        goto LABEL_28;
      }
      if (v19 != v16)
      {
        unint64_t v23 = v19 - v15 - 2;
        unint64_t v24 = *(void *)(a1 + 736);
        if (v23 / v24 >= *(unsigned int *)(a1 + 160)) {
          goto LABEL_438;
        }
        uint64_t v21 = &v364[3 * (v23 % v24)][8 * (v23 / v24)];
        goto LABEL_27;
      }
      uint64_t v22 = v15 + 1;
      uint64_t v4 = v14;
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v12 = v14;
    }
LABEL_28:
    *(unsigned char *)(v20 + v22) = 1;
    unint64_t v13 = v370;
    goto LABEL_29;
  }
  uint64_t v12 = v4;
LABEL_33:
  char v26 = v364;
  if (v365 != v364)
  {
    uint64_t v27 = 0;
    unint64_t v28 = ((char *)v365 - (char *)v364) / 24;
    uint64_t v29 = *(void *)(a1 + 1360);
    unint64_t v30 = *(unsigned int *)(a1 + 160);
    uint64_t v31 = v363[0];
    if (v28 <= 1) {
      unint64_t v28 = 1;
    }
    do
    {
      unint64_t v32 = *(unsigned __int8 *)(v29 + v27);
      unint64_t v33 = 0;
      unint64_t v34 = v30 - v32;
      if (v30 > v32)
      {
        uint64_t v35 = (uint64_t)&v26[3 * v27][8 * v32];
        while (*(void *)(v35 + 8 * v33) != v370)
        {
          if (v34 == ++v33)
          {
            unint64_t v33 = v34;
            break;
          }
        }
      }
      v31[v27++] = v33;
    }
    while (v27 != v28);
  }
LABEL_42:
  if (v12 == v370) {
    goto LABEL_275;
  }
  long long v36 = *(unint64_t **)(v371 + 24 * v12);
  uint64_t v37 = *(void *)a1;
  long long v38 = (void *)(*(void *)a1 + 1256);
  uint64_t v362 = v12;
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    unint64_t v103 = *(void *)(a1 + 672);
    unint64_t v104 = *(void *)(a1 + 680);
    *(void *)(v37 + 1272) = *(void *)(v37 + 1264);
    v380[1] = 0;
    v380[0] = 0;
    *(void *)&long long v381 = 0;
    memset(v373, 0, 64);
    *(_OWORD *)v372 = 0u;
    sub_2483F26D4((uint64_t)&v373[4] + 8);
    *((void *)&v373[7] + 1) = 0;
    uint64_t v25 = sub_2483F2760(v36, 0xAuLL, (uint64_t)v372, (unint64_t *)v380, 0);
    if (v25)
    {
      char v105 = 0;
      goto LABEL_134;
    }
    sub_2483EA6D0((uint64_t)&__p, (uint64_t)v372, v36, 0);
    unint64_t v106 = sub_2483EAC28((uint64_t)&__p, *(unsigned __int8 *)v380[0], v36);
    unint64_t v107 = ((v104 * v103) >> 2) + 1024;
    if (v106 > v107)
    {
      char v105 = 0;
      goto LABEL_131;
    }
    unint64_t v112 = v106;
    float v354 = (int64x2_t *)(v37 + 1272);
    long long v357 = v38;
    if (v106)
    {
      unint64_t v345 = v104;
      unint64_t v346 = v103;
      char v105 = 0;
      uint64_t v348 = 0;
      uint64_t v113 = 0;
      unint64_t v343 = 4 * v107;
      uint64_t v360 = *(unsigned int *)(**(void **)(v37 + 1256) + 320);
      uint64_t v340 = v360 + 1;
      unint64_t v341 = 16 * v107;
      uint64_t v114 = 1;
LABEL_151:
      float32x2_t v115 = (unsigned __int8 *)v380[0];
      unint64_t v116 = sub_2483EAC28((uint64_t)&__p, *((unsigned __int8 *)v380[0] + 1), v36);
      *(void *)&v374[0] = v116;
      if (v116 > 3) {
        goto LABEL_131;
      }
      unint64_t v335 = v112;
      uint64_t v117 = *v357 + 456 * v116;
      uint64_t v118 = v117 + 2376;
      if (!*(_DWORD *)(v117 + 2472))
      {
        uint64_t v119 = *(_DWORD **)(v117 + 2792);
        if (v119 == *(_DWORD **)(v118 + 424) || !*v119) {
          goto LABEL_131;
        }
      }
      if (!*(unsigned char *)(*v357 + 456 * v116 + 2824)) {
        goto LABEL_131;
      }
      unint64_t v350 = v114;
      uint64_t v334 = v113;
      uint64_t v120 = sub_2483EAC28((uint64_t)&__p, v115[3], v36);
      *((void *)&v374[0] + 1) = v120;
      uint64_t v121 = sub_2483EAC28((uint64_t)&__p, v115[3], v36);
      *(void *)&v374[1] = v121;
      uint64_t v122 = sub_2483EAC28((uint64_t)&__p, v115[2], v36) + 1;
      *((void *)&v374[1] + 1) = v122;
      uint64_t v123 = sub_2483EAC28((uint64_t)&__p, v115[2], v36);
      *(void *)&v374[2] = v123 + 1;
      unint64_t v124 = *(unsigned int *)(v118 + 96);
      if (!v124)
      {
        unint64_t v125 = *(unsigned int **)(v118 + 416);
        if (v125 == *(unsigned int **)(v118 + 424)) {
          unint64_t v124 = 0;
        }
        else {
          unint64_t v124 = *v125;
        }
      }
      if (v122 + v120 > v124) {
        goto LABEL_131;
      }
      unint64_t v126 = *(unsigned int *)(v118 + 100);
      unint64_t v127 = v350;
      if (!v126)
      {
        uint64_t v128 = *(void *)(v118 + 416);
        if (v128 == *(void *)(v118 + 424)) {
          unint64_t v126 = 0;
        }
        else {
          unint64_t v126 = *(unsigned int *)(v128 + 4);
        }
      }
      if (v121 + v123 + 1 > v126) {
        goto LABEL_131;
      }
      unint64_t v129 = sub_2483EAC28((uint64_t)&__p, v115[7], v36);
      if (v129 > v343) {
        goto LABEL_131;
      }
      unint64_t v130 = v129;
      unint64_t v131 = v129 + v348 + 1;
      if (v131 > v343) {
        goto LABEL_131;
      }
      uint64_t v132 = 2 * v350;
      if (v343 < 2 * v350) {
        uint64_t v132 = v343;
      }
      if (v350 < v131) {
        unint64_t v127 = v132;
      }
      unint64_t v133 = v127 * v340;
      if (v127 * v340 > v341) {
        goto LABEL_131;
      }
      v348 += v129 + 1;
      uint64_t v134 = *(void *)(v37 + 1264);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v37 + 1280) - v134) >> 3) < v127)
      {
        if (v127 > 0xAAAAAAAAAAAAAAALL) {
          sub_2483E92E8();
        }
        uint64_t v135 = v354->i64[0];
        int v136 = (char *)sub_2483F8ED4(v127);
        int v138 = *(char **)(v37 + 1272);
        uint64_t v139 = *(char **)(v37 + 1264);
        float v140 = &v136[24 * ((v135 - v134) / 24)];
        if (v138 != v139)
        {
          do
          {
            long long v141 = *(_OWORD *)(v138 - 24);
            *((void *)v140 - 1) = *((void *)v138 - 1);
            *(_OWORD *)(v140 - 24) = v141;
            v140 -= 24;
            v138 -= 24;
          }
          while (v138 != v139);
          int v138 = *(char **)(v37 + 1264);
        }
        *(void *)(v37 + 1264) = v140;
        *(void *)(v37 + 1272) = &v136[24 * ((v135 - v134) / 24)];
        *(void *)(v37 + 1280) = &v136[24 * v137];
        if (v138) {
          operator delete(v138);
        }
      }
      uint64_t v142 = *(void *)(v37 + 1312);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v37 + 1328) - v142) >> 2) < v133)
      {
        if (v133 > 0x1555555555555555) {
          sub_2483E92E8();
        }
        uint64_t v143 = *(void *)(v37 + 1320);
        uint64_t v144 = (char *)sub_24840C754(v133);
        int v146 = *(_DWORD **)(v37 + 1320);
        uint64_t v147 = *(_DWORD **)(v37 + 1312);
        unint64_t v148 = &v144[12 * ((v143 - v142) / 12)];
        if (v146 != v147)
        {
          do
          {
            uint64_t v149 = *(void *)(v146 - 3);
            v146 -= 3;
            int v150 = v146[2];
            *(void *)(v148 - 12) = v149;
            v148 -= 12;
            *((_DWORD *)v148 + 2) = v150;
          }
          while (v146 != v147);
          int v146 = *(_DWORD **)(v37 + 1312);
        }
        *(void *)(v37 + 1312) = v148;
        *(void *)(v37 + 1320) = &v144[12 * ((v143 - v142) / 12)];
        *(void *)(v37 + 1328) = &v144[12 * v145];
        if (v146) {
          operator delete(v146);
        }
      }
      unint64_t v336 = v130;
      uint64_t v151 = 0;
      unint64_t v351 = v127;
LABEL_188:
      uint64_t v152 = *(void *)(v37 + 1296);
      uint64_t v153 = *(void *)(v37 + 1288);
      uint64_t v154 = (unsigned __int8 *)v380[0];
      uint64_t v342 = v151;
      if (v151)
      {
        unint64_t v155 = sub_2483EAC28((uint64_t)&__p, *((unsigned __int8 *)v380[0] + 6), v36);
        unint64_t v156 = -(uint64_t)(v155 & 1) ^ (v155 >> 1);
        uint64_t v157 = v354->i64[0];
        if ((v156 & 0x8000000000000000) != 0)
        {
          unint64_t v158 = *(void *)(v157 - 24);
          if (v158 < -(uint64_t)v156) {
            goto LABEL_131;
          }
        }
        else
        {
          unint64_t v158 = *(void *)(v157 - 24);
        }
        unint64_t v161 = sub_2483EAC28((uint64_t)&__p, v154[6], v36);
        unint64_t v162 = -(uint64_t)(v161 & 1) ^ (v161 >> 1);
        uint64_t v163 = v354->i64[0];
        if ((v162 & 0x8000000000000000) != 0)
        {
          unint64_t v164 = *(void *)(v163 - 16);
          if (v164 < -(uint64_t)v162) {
            goto LABEL_131;
          }
        }
        else
        {
          unint64_t v164 = *(void *)(v163 - 16);
        }
        uint64_t v159 = v158 + v156;
        uint64_t v160 = v164 + v162;
      }
      else
      {
        uint64_t v159 = sub_2483EAC28((uint64_t)&__p, *((unsigned __int8 *)v380[0] + 4), v36);
        uint64_t v160 = sub_2483EAC28((uint64_t)&__p, v154[4], v36);
      }
      if (*((void *)&v374[1] + 1) + v159 > v346 || *(void *)&v374[2] + v160 > v345) {
        goto LABEL_131;
      }
      uint64_t v338 = v160;
      uint64_t v339 = v159;
      uint64_t v165 = 0;
      unint64_t v337 = 0xCCCCCCCCCCCCCCCDLL * ((v152 - v153) >> 3);
      while (1)
      {
        unint64_t v166 = (unsigned __int8 *)v380[0];
        unint64_t v167 = sub_2483EAC28((uint64_t)&__p, *((unsigned __int8 *)v380[0] + 5), v36);
        if (v167 > 7) {
          goto LABEL_131;
        }
        char v168 = v167;
        if ((v167 & 0xFC) == 4)
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(void *)(*(void *)*v357 + 336) - *(void *)(*(void *)*v357 + 328)) >> 5) < 2)
          {
            int v170 = 0;
            char v105 = 1;
          }
          else
          {
            unint64_t v169 = sub_2483EAC28((uint64_t)&__p, v166[8], v36);
            int v170 = v169;
            char v105 = 1;
            if (v169 >= 0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(*(void *)(*(void *)*v357 + 336) - *(void *)(*(void *)*v357 + 328)) >> 5))
              goto LABEL_131;
          }
        }
        else
        {
          int v170 = 0;
          BOOL v171 = 0;
          if ((_BYTE)v167) {
            BOOL v172 = v165 == 0;
          }
          else {
            BOOL v172 = 1;
          }
          if (!v172) {
            char v105 = 1;
          }
          if (v167 != 3) {
            goto LABEL_214;
          }
        }
        BOOL v171 = sub_2483EAC28((uint64_t)&__p, v166[9], v36) != 0;
LABEL_214:
        uint64_t v173 = *(char **)(v37 + 1320);
        unint64_t v174 = *(void *)(v37 + 1328);
        if ((unint64_t)v173 >= v174)
        {
          uint64_t v176 = *(char **)(v37 + 1312);
          unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((v173 - v176) >> 2);
          unint64_t v178 = v177 + 1;
          if (v177 + 1 > 0x1555555555555555) {
            sub_2483E92E8();
          }
          unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - (void)v176) >> 2);
          if (2 * v179 > v178) {
            unint64_t v178 = 2 * v179;
          }
          if (v179 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v180 = 0x1555555555555555;
          }
          else {
            unint64_t v180 = v178;
          }
          if (v180)
          {
            unint64_t v180 = (unint64_t)sub_24840C754(v180);
            uint64_t v173 = *(char **)(v37 + 1320);
            uint64_t v176 = *(char **)(v37 + 1312);
          }
          else
          {
            uint64_t v181 = 0;
          }
          unint64_t v182 = v180 + 12 * v177;
          *(unsigned char *)unint64_t v182 = v168;
          *(_DWORD *)(v182 + 4) = v170;
          *(unsigned char *)(v182 + 8) = v171;
          unint64_t v183 = v182;
          if (v173 != v176)
          {
            do
            {
              uint64_t v184 = *(void *)(v173 - 12);
              v173 -= 12;
              int v185 = *((_DWORD *)v173 + 2);
              *(void *)(v183 - 12) = v184;
              v183 -= 12;
              *(_DWORD *)(v183 + 8) = v185;
            }
            while (v173 != v176);
            uint64_t v176 = *(char **)(v37 + 1312);
          }
          *(void *)(v37 + 1312) = v183;
          uint64_t v175 = (_DWORD *)(v182 + 12);
          *(void *)(v37 + 1320) = v182 + 12;
          *(void *)(v37 + 1328) = v180 + 12 * v181;
          if (v176) {
            operator delete(v176);
          }
        }
        else
        {
          *uint64_t v173 = v168;
          *((_DWORD *)v173 + 1) = v170;
          uint64_t v175 = v173 + 12;
          v173[8] = v171;
        }
        *(void *)(v37 + 1320) = v175;
        BOOL v172 = v165++ == v360;
        if (v172)
        {
          unint64_t v186 = *(char **)(v37 + 1272);
          unint64_t v187 = *(void *)(v37 + 1280);
          if ((unint64_t)v186 >= v187)
          {
            int8x16_t v189 = *(char **)(v37 + 1264);
            unint64_t v190 = 0xAAAAAAAAAAAAAAABLL * ((v186 - v189) >> 3);
            unint64_t v191 = v190 + 1;
            uint64_t v114 = v351;
            if (v190 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2483E92E8();
            }
            unint64_t v192 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - (void)v189) >> 3);
            if (2 * v192 > v191) {
              unint64_t v191 = 2 * v192;
            }
            if (v192 >= 0x555555555555555) {
              unint64_t v193 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v193 = v191;
            }
            if (v193)
            {
              unint64_t v193 = (unint64_t)sub_2483F8ED4(v193);
              unint64_t v186 = *(char **)(v37 + 1272);
              int8x16_t v189 = *(char **)(v37 + 1264);
            }
            else
            {
              uint64_t v194 = 0;
            }
            uint64_t v195 = (uint64_t *)(v193 + 24 * v190);
            *uint64_t v195 = v339;
            v195[1] = v338;
            v195[2] = v337;
            unsigned __int8 v196 = v195;
            if (v186 != v189)
            {
              do
              {
                long long v197 = *(_OWORD *)(v186 - 24);
                *(v196 - 1) = *((void *)v186 - 1);
                *(_OWORD *)(v196 - 3) = v197;
                v196 -= 3;
                v186 -= 24;
              }
              while (v186 != v189);
              int8x16_t v189 = *(char **)(v37 + 1264);
            }
            *(void *)(v37 + 1264) = v196;
            uint64_t v188 = v195 + 3;
            *(void *)(v37 + 1272) = v195 + 3;
            *(void *)(v37 + 1280) = v193 + 24 * v194;
            if (v189) {
              operator delete(v189);
            }
          }
          else
          {
            *(void *)unint64_t v186 = v339;
            *((void *)v186 + 1) = v338;
            uint64_t v188 = v186 + 24;
            *((void *)v186 + 2) = v337;
            uint64_t v114 = v351;
          }
          v354->i64[0] = (uint64_t)v188;
          uint64_t v151 = v342 + 1;
          if (v342 != v336) {
            goto LABEL_188;
          }
          sub_24840C79C((void **)(v37 + 1288), v374);
          unint64_t v112 = v335;
          uint64_t v113 = v334 + 1;
          if (v334 + 1 != v335) {
            goto LABEL_151;
          }
          goto LABEL_252;
        }
      }
    }
    char v105 = 0;
LABEL_252:
    int v198 = *(char **)(v37 + 1264);
    int64x2_t v199 = vshrq_n_s64(vsubq_s64(*v354, vdupq_n_s64((unint64_t)v198)), 3uLL);
    unint64_t v200 = 0xAAAAAAAAAAAAAAABLL * v199.i64[0];
    unint64_t v201 = v200;
    if (0xAAAAAAAAAAAAAAABLL * v199.i64[1] <= v200)
    {
LABEL_434:
      if (HIDWORD(v384) == 1245184)
      {
        sub_24840C8C4(v357);
        uint64_t v25 = 0;
LABEL_132:
        uint64_t v108 = v388;
        uint64_t v388 = 0;
        if (v108)
        {
          atomic_fetch_add(&qword_26931BDF8, -(uint64_t)*(v108 - 3));
          free(*(v108 - 4));
        }
LABEL_134:
        if (*((void *)&v373[2] + 1))
        {
          *(void *)&v373[3] = *((void *)&v373[2] + 1);
          operator delete(*((void **)&v373[2] + 1));
        }
        if (*(void *)&v373[1])
        {
          *((void *)&v373[1] + 1) = *(void *)&v373[1];
          operator delete(*(void **)&v373[1]);
        }
        __p = &v372[1];
        sub_2483EA640((void ***)&__p);
        int v109 = v372[0];
        v372[0] = 0;
        if (v109)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(v109 - 3));
          free((void *)*(v109 - 4));
        }
        if (v380[0]) {
          operator delete(v380[0]);
        }
        if (v25) {
          goto LABEL_272;
        }
        if (v105)
        {
          int v110 = *(_DWORD *)(a1 + 316);
          if (v110 != 1)
          {
            for (uint64_t i = *(_DWORD **)(a1 + 320); i != *(_DWORD **)(a1 + 328); ++i)
            {
              if (*i != v110) {
                goto LABEL_438;
              }
            }
          }
        }
        goto LABEL_45;
      }
LABEL_131:
      uint64_t v25 = 1;
      goto LABEL_132;
    }
    if ((char *)v354->i64[0] == v198)
    {
      unint64_t v206 = 0;
      uint64_t v204 = 24 * v200;
    }
    else
    {
      unint64_t v202 = (char *)sub_2483F8ED4(v200);
      int v198 = *(char **)(v37 + 1272);
      uint64_t v203 = *(char **)(v37 + 1264);
      uint64_t v204 = (uint64_t)&v202[24 * v201];
      unint64_t v206 = &v202[24 * v205];
      if (v198 != v203)
      {
        uint64_t v207 = v204;
        do
        {
          long long v208 = *(_OWORD *)(v198 - 24);
          *(void *)(v207 - 8) = *((void *)v198 - 1);
          *(_OWORD *)(v207 - 24) = v208;
          v207 -= 24;
          v198 -= 24;
        }
        while (v198 != v203);
        int v198 = *(char **)(v37 + 1264);
LABEL_432:
        *(void *)(v37 + 1264) = v207;
        *(void *)(v37 + 1272) = v204;
        *(void *)(v37 + 1280) = v206;
        if (v198) {
          operator delete(v198);
        }
        goto LABEL_434;
      }
    }
    uint64_t v207 = v204;
    goto LABEL_432;
  }
  *(void *)(v37 + 1272) = *(void *)(v37 + 1264);
  sub_24840C8C4(v38);
LABEL_45:
  *(_DWORD *)(v37 + 1432) = 0;
  sub_248411584((uint64_t *)(v37 + 1440));
  *(void *)(v37 + 1472) = *(void *)(v37 + 1464);
  *(void *)(v37 + 1496) = *(void *)(v37 + 1488);
  *(void *)(v37 + 1520) = *(void *)(v37 + 1512);
  *(void *)(v37 + 1544) = *(void *)(v37 + 1536);
  uint64_t v39 = *(void *)(a1 + 72);
  if ((v39 & 0x10) == 0) {
    goto LABEL_306;
  }
  uint64_t v40 = *(void *)(a1 + 624);
  uint64_t v41 = *(void *)(a1 + 632);
  memset(v379, 0, sizeof(v379));
  *(_OWORD *)v375 = 0u;
  long long v376 = 0u;
  memset(v374, 0, sizeof(v374));
  sub_2483F26D4((uint64_t)v378);
  v378[6] = 0;
  uint64_t v25 = sub_2483F2760(v36, 6uLL, (uint64_t)v374, (unint64_t *)v379, 0);
  if (v25) {
    goto LABEL_263;
  }
  sub_2483EA6D0((uint64_t)&__p, (uint64_t)v374, v36, 0);
  long long v42 = (unsigned __int8 *)v379[0];
  unint64_t v43 = sub_2483EAC28((uint64_t)&__p, *((unsigned __int8 *)v379[0] + 2), v36);
  unint64_t v44 = (unint64_t)(v41 * v40) >> 1;
  if (v44 >= 0x100000) {
    unint64_t v44 = 0x100000;
  }
  if (v43 >= v44)
  {
LABEL_260:
    uint64_t v25 = 1;
    goto LABEL_261;
  }
  unint64_t v349 = v44;
  float v355 = (char **)(v37 + 1464);
  unint64_t v359 = v43;
  *(void *)(v37 + 1472) = *(void *)(v37 + 1464);
  unint64_t v353 = v43 + 1;
  sub_248430A8C((void **)(v37 + 1464), v43 + 1);
  float v347 = (uint64_t *)(v37 + 1440);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  do
  {
    unint64_t v48 = sub_2483EAC28((uint64_t)&__p, v42[1], v36);
    unint64_t v49 = sub_2483EAC28((uint64_t)&__p, v42[1], v36);
    if (v47) {
      v46 += -(uint64_t)(v49 & 1) ^ (v49 >> 1);
    }
    else {
      uint64_t v46 = v49;
    }
    if (v47) {
      v45 += -(uint64_t)(v48 & 1) ^ (v48 >> 1);
    }
    else {
      uint64_t v45 = v48;
    }
    if ((unint64_t)(v45 - 0x800000) < 0xFFFFFFFFFF000001
      || (unint64_t)(v46 - 0x800000) < 0xFFFFFFFFFF000001)
    {
      goto LABEL_260;
    }
    float v51 = (float)v45;
    float v52 = (float)v46;
    uint64_t v53 = *(float **)(v37 + 1472);
    unint64_t v54 = *(void *)(v37 + 1480);
    if ((unint64_t)v53 >= v54)
    {
      uint64_t v56 = ((char *)v53 - *v355) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        sub_2483E92E8();
      }
      uint64_t v58 = v54 - (void)*v355;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      uint64_t v60 = (char *)sub_2483F04AC(v59);
      long long v62 = (float *)&v60[8 * v56];
      float *v62 = v51;
      v62[1] = v52;
      uint64_t v63 = *(char **)(v37 + 1472);
      uint64_t v64 = *(char **)(v37 + 1464);
      uint64_t v65 = v62;
      if (v63 != v64)
      {
        do
        {
          uint64_t v66 = *((void *)v63 - 1);
          v63 -= 8;
          *((void *)v65 - 1) = v66;
          v65 -= 2;
        }
        while (v63 != v64);
        uint64_t v63 = *v355;
      }
      *(void *)(v37 + 1464) = v65;
      uint64_t v55 = v62 + 2;
      *(void *)(v37 + 1472) = v62 + 2;
      *(void *)(v37 + 1480) = &v60[8 * v61];
      if (v63) {
        operator delete(v63);
      }
    }
    else
    {
      *uint64_t v53 = v51;
      v53[1] = v52;
      uint64_t v55 = v53 + 2;
    }
    *(void *)(v37 + 1472) = v55;
    BOOL v172 = v47++ == v359;
  }
  while (!v172);
  unint64_t v67 = sub_2483EAC28((uint64_t)&__p, *v42, v36);
  *(_DWORD *)(v37 + 1432) = (v67 >> 1) ^ -(v67 & 1);
  uint64x2_t v68 = (void *)(v37 + 1440);
  sub_248411584(v347);
  uint64_t v69 = *(void *)(v37 + 1440);
  if (0xF0B7672A07A44C6BLL * ((*(void *)(v37 + 1456) - v69) >> 3) <= v359)
  {
    uint64_t v70 = *(void *)(v37 + 1448);
    *(void *)&v373[1] = v37 + 1456;
    v372[0] = sub_248430B34(v353);
    v372[1] = (char *)v372[0] + v70 - v69;
    *(void **)&v373[0] = v372[1];
    *((void *)&v373[0] + 1) = (char *)v372[0] + 536 * v71;
    sub_248430B80(v347, v372);
    sub_248430C60((uint64_t)v372);
  }
  uint64_t v72 = 0;
  do
  {
    bzero(v372, 0x218uLL);
    unint64_t v73 = sub_2483EAC28((uint64_t)&__p, v42[3], v36);
    if (v73 > v349)
    {
      long long v74 = 0;
      char v75 = 0;
      goto LABEL_85;
    }
    unint64_t v76 = v73;
    v353 += v73;
    if (v353 <= v349)
    {
      if (v73)
      {
        *(void *)int8x16_t v356 = v72;
        uint64x2_t v77 = sub_2483F3EB0(v73);
        uint64_t v79 = &v77[2 * v78];
        bzero(v77, 16 * v76);
        long long v80 = &v77[2 * v76];
        v372[0] = v77;
        v372[1] = v80;
        std::string::size_type v344 = v79;
        *(void *)&v373[0] = v79;
        if (16 * v76)
        {
          uint64x2_t v68 = (void *)(v37 + 1440);
          uint64_t v72 = *(void *)v356;
          while (1)
          {
            unint64_t v81 = sub_2483EAC28((uint64_t)&__p, v42[4], v36);
            *uint64x2_t v77 = -(uint64_t)(v81 & 1) ^ (v81 >> 1);
            unint64_t v82 = sub_2483EAC28((uint64_t)&__p, v42[4], v36);
            uint64_t v83 = -(uint64_t)(v82 & 1) ^ (v82 >> 1);
            v77[1] = v83;
            BOOL v84 = (unint64_t)(*v77 - 0x40000000) >= 0xFFFFFFFF80000001 && v83 <= 0x3FFFFFFF;
            if (!v84 || v83 < -1073741823) {
              goto LABEL_83;
            }
            v77 += 2;
            if (v77 == v80) {
              goto LABEL_105;
            }
          }
        }
        uint64x2_t v68 = (void *)(v37 + 1440);
        uint64_t v72 = *(void *)v356;
      }
      else
      {
        std::string::size_type v344 = 0;
      }
LABEL_105:
      uint64_t v86 = 0;
      uint64_t v87 = (char *)v373 + 8;
LABEL_106:
      uint64_t v88 = 0;
      while (1)
      {
        unint64_t v89 = sub_2483EAC28((uint64_t)&__p, v42[5], v36);
        int v90 = (v89 >> 1) ^ -(v89 & 1);
        *(_DWORD *)&v87[v88] = v90;
        if (v90 == 0x80000000) {
          break;
        }
        v88 += 4;
        if (v88 == 128)
        {
          ++v86;
          v87 += 128;
          if (v86 != 3) {
            goto LABEL_106;
          }
          uint64_t v91 = 408;
          while (1)
          {
            unint64_t v92 = sub_2483EAC28((uint64_t)&__p, v42[5], v36);
            int v93 = (v92 >> 1) ^ -(v92 & 1);
            *(_DWORD *)((char *)v372 + v91) = v93;
            if (v93 == 0x80000000) {
              goto LABEL_83;
            }
            v91 += 4;
            if (v91 == 536)
            {
              unint64_t v94 = *(void *)(v37 + 1448);
              unint64_t v95 = *(void *)(v37 + 1456);
              if (v94 >= v95)
              {
                unint64_t v97 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v94 - *v68) >> 3);
                unint64_t v98 = v97 + 1;
                if (v97 + 1 > 0x7A44C6AFC2DD9CLL) {
                  sub_2483E92E8();
                }
                unint64_t v99 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v95 - *v68) >> 3);
                if (2 * v99 > v98) {
                  unint64_t v98 = 2 * v99;
                }
                if (v99 >= 0x3D226357E16ECELL) {
                  unint64_t v100 = 0x7A44C6AFC2DD9CLL;
                }
                else {
                  unint64_t v100 = v98;
                }
                uint64_t v382 = v37 + 1456;
                if (v100) {
                  unint64_t v100 = (unint64_t)sub_248430B34(v100);
                }
                else {
                  uint64_t v101 = 0;
                }
                uint64_t v102 = (void *)(v100 + 536 * v97);
                v380[0] = (void *)v100;
                v380[1] = v102;
                *((void *)&v381 + 1) = v100 + 536 * v101;
                *(_OWORD *)uint64_t v102 = *(_OWORD *)v372;
                v102[2] = v344;
                v372[0] = 0;
                v372[1] = 0;
                *(void *)&v373[0] = 0;
                memcpy(v102 + 3, (char *)v373 + 8, 0x200uLL);
                *(void *)&long long v381 = v102 + 67;
                uint64x2_t v68 = (void *)(v37 + 1440);
                sub_248430B80(v347, v380);
                unint64_t v96 = *(void *)(v37 + 1448);
                sub_248430C60((uint64_t)v380);
              }
              else
              {
                *(_OWORD *)unint64_t v94 = *(_OWORD *)v372;
                *(void *)(v94 + 16) = v344;
                v372[1] = 0;
                *(void *)&v373[0] = 0;
                v372[0] = 0;
                memcpy((void *)(v94 + 24), (char *)v373 + 8, 0x200uLL);
                unint64_t v96 = v94 + 536;
              }
              *(void *)(v37 + 1448) = v96;
              char v75 = 1;
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_83:
    char v75 = 0;
LABEL_84:
    long long v74 = v372[0];
LABEL_85:
    if (v74) {
      operator delete(v74);
    }
    if ((v75 & 1) == 0) {
      goto LABEL_260;
    }
    BOOL v172 = v72++ == v359;
  }
  while (!v172);
  if (HIDWORD(v384) != 1245184) {
    goto LABEL_260;
  }
  uint64_t v25 = *(void *)(v37 + 1440) == *(void *)(v37 + 1448);
LABEL_261:
  uint64_t v209 = v388;
  uint64_t v388 = 0;
  if (v209)
  {
    atomic_fetch_add(&qword_26931BDF8, -(uint64_t)*(v209 - 3));
    free(*(v209 - 4));
  }
LABEL_263:
  if (v375[1])
  {
    *(void **)&long long v376 = v375[1];
    operator delete(v375[1]);
  }
  if (*(void *)&v374[2])
  {
    *((void *)&v374[2] + 1) = *(void *)&v374[2];
    operator delete(*(void **)&v374[2]);
  }
  __p = (char *)v374 + 8;
  sub_2483EA640((void ***)&__p);
  uint64_t v210 = *(void *)&v374[0];
  *(void *)&v374[0] = 0;
  if (v210)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v210 - 24));
    free(*(void **)(v210 - 32));
  }
  if (v379[0]) {
    operator delete(v379[0]);
  }
  if (v25)
  {
LABEL_272:
    if ((int)v25 <= 0)
    {
      int v211 = 3;
      goto LABEL_274;
    }
    goto LABEL_439;
  }
  uint64_t v39 = *(void *)(a1 + 72);
LABEL_306:
  if (v39)
  {
    for (uint64_t j = 0; j != 32; j += 4)
    {
      __int16 v243 = (void *)v36[2];
      if ((unint64_t)v243 > v36[3])
      {
        sub_2483EB0C0(v36);
        unint64_t v245 = *v36;
        uint64_t v246 = v36[1];
      }
      else
      {
        unint64_t v244 = v36[1];
        unint64_t v245 = *v36 | (*v243 << v244);
        v36[2] = (unint64_t)v243 + ((63 - v244) >> 3);
        uint64_t v246 = v244 | 0x38;
      }
      *long long v36 = v245 >> 10;
      v36[1] = v246 - 10;
      *(float *)(v37 + 1224 + j) = (float)(v245 & 0x3FF) * 0.00097656;
    }
  }
  uint64_t v25 = sub_24842EF20(*(void *)a1 + 208, v36);
  if (v25) {
    goto LABEL_439;
  }
  if (!*(_DWORD *)(a1 + 60))
  {
    uint64_t v247 = *(void *)a1;
    v372[0] = &unk_26FC66068;
    long long v384 = xmmword_2484DC960;
    __p = &unk_26FC65A00;
    long long v385 = 0;
    sub_248430298((uint64_t)v372, (uint64_t)&__p);
    uint64_t v25 = sub_24841A614((uint64_t)v36, (uint64_t)v372);
    if (v25) {
      goto LABEL_272;
    }
    *(void **)(v247 + 984) = v372[1];
    sub_248430380(v247 + 952);
    unsigned int v248 = (void *)v36[2];
    if ((unint64_t)v248 > v36[3])
    {
      sub_2483EB0C0(v36);
      unint64_t v250 = *v36;
      uint64_t v251 = v36[1];
    }
    else
    {
      unint64_t v249 = v36[1];
      unint64_t v250 = *v36 | (*v248 << v249);
      v36[2] = (unint64_t)v248 + ((63 - v249) >> 3);
      uint64_t v251 = v249 | 0x38;
    }
    __int16 v252 = (void **)(v247 + 1832);
    *long long v36 = v250 >> 1;
    v36[1] = v251 - 1;
    if (v250)
    {
      sub_248417374((uint64_t)&__p);
      for (uint64_t k = 0; k != 72; k += 24)
      {
        uint64_t v305 = v247 + k;
        char v306 = (void **)(v247 + k + 1760);
        int v307 = *v306;
        if (*v306)
        {
          *(void *)(v305 + 1768) = v307;
          operator delete(v307);
          *char v306 = 0;
          *(void *)(v247 + k + 1768) = 0;
          *(void *)(v247 + k + 1776) = 0;
        }
        int v308 = (void **)((char *)&__p + k);
        *(_OWORD *)char v306 = *(_OWORD *)((char *)&__p + k);
        *(void *)(v305 + 1776) = *(void *)((char *)&v384 + k + 8);
        *int v308 = 0;
        v308[1] = 0;
        v308[2] = 0;
      }
      int v309 = *v252;
      if (*v252)
      {
        *(void *)(v247 + 1840) = v309;
        operator delete(v309);
      }
      *(_OWORD *)__int16 v252 = *(_OWORD *)&v389[2];
      *(void *)(v247 + 1848) = v389[4];
      memset(&v389[2], 0, 24);
      int v310 = *(void **)(v247 + 1856);
      if (v310)
      {
        *(void *)(v247 + 1864) = v310;
        operator delete(v310);
        int v310 = (void *)v389[2];
      }
      *(_OWORD *)(v247 + 1856) = *(_OWORD *)&v389[5];
      *(void *)(v247 + 1872) = v390;
      v389[6] = 0;
      v390 = 0;
      v389[5] = 0;
      *(_OWORD *)(v247 + 1880) = v391;
      if (v310)
      {
        v389[3] = v310;
        operator delete(v310);
      }
      for (uint64_t m = 0; m != -9; m -= 3)
      {
        int v312 = (void *)v389[m - 1];
        if (v312)
        {
          v389[m] = v312;
          operator delete(v312);
        }
      }
    }
    else
    {
      uint64_t v253 = 0;
      v358 = (unint64_t *)(v247 + 1856);
      *(void *)(v247 + 1888) = 1;
      __p = (void *)0x100000000;
      LODWORD(v384) = 2;
      do
      {
        int v254 = *((_DWORD *)&__p + v253);
        __int16 v255 = (void *)v36[2];
        if ((unint64_t)v255 > v36[3])
        {
          sub_2483EB0C0(v36);
          unint64_t v257 = *v36;
          uint64_t v258 = v36[1];
        }
        else
        {
          unint64_t v256 = v36[1];
          unint64_t v257 = *v36 | (*v255 << v256);
          v36[2] = (unint64_t)v255 + ((63 - v256) >> 3);
          uint64_t v258 = v256 | 0x38;
        }
        uint64_t v259 = v247 + 1760 + 24 * v254;
        *long long v36 = v257 >> 4;
        v36[1] = v258 - 4;
        sub_2483EB1C4((char **)v259, v257 & 0xF);
        unint64_t v260 = *(char **)(v259 + 8);
        unint64_t v261 = *(char **)v259;
        for (*(void *)(v247 + 1888) += *(void *)(v247 + 1888) * ((v260 - v261) >> 2); v261 != v260; v261 += 4)
        {
          unsigned int v262 = sub_24841AE94(0x20700000003, 0x20221F0000220FLL, v36);
          *(_DWORD *)unint64_t v261 = -(v262 & 1) ^ (v262 >> 1);
        }
        ++v253;
      }
      while (v253 != 3);
      int v314 = (void *)v36[2];
      if ((unint64_t)v314 > v36[3])
      {
        sub_2483EB0C0(v36);
        unint64_t v316 = *v36;
        uint64_t v317 = v36[1];
      }
      else
      {
        unint64_t v315 = v36[1];
        unint64_t v316 = *v36 | (*v314 << v315);
        v36[2] = (unint64_t)v314 + ((63 - v315) >> 3);
        uint64_t v317 = v315 | 0x38;
      }
      *long long v36 = v316 >> 4;
      v36[1] = v317 - 4;
      sub_2483EB1C4((char **)(v247 + 1832), v316 & 0xF);
      v318 = *(_DWORD **)(v247 + 1832);
      int v319 = *(_DWORD **)(v247 + 1840);
      if (v318 == v319)
      {
        uint64_t v320 = *(void *)(v247 + 1832);
      }
      else
      {
        do
          *v318++ = sub_24841AE94(0x8200000001, 0x58700000184, v36) + 1;
        while (v318 != v319);
        uint64_t v320 = *(void *)(v247 + 1840);
        v318 = *(_DWORD **)(v247 + 1832);
      }
      unint64_t v321 = *(void *)(v247 + 1888) + *(void *)(v247 + 1888) * ((v320 - (uint64_t)v318) >> 2);
      if (v321 > 0x40) {
        goto LABEL_438;
      }
      unint64_t v323 = 39 * v321;
      uint64_t v324 = *(void *)(v247 + 1856);
      unint64_t v325 = *(void *)(v247 + 1864) - v324;
      if (v323 <= v325)
      {
        if (v323 < v325) {
          *(void *)(v247 + 1864) = v324 + v323;
        }
      }
      else
      {
        sub_2483EE8AC(v358, v323 - v325);
      }
      v326 = (void *)(v247 + 1880);
      uint64_t v25 = sub_2483F7A48((void **)v358, (void *)(v247 + 1880), v36);
      if (v25) {
        goto LABEL_272;
      }
      uint64_t v25 = *v326 > 0x10uLL;
      if (*v326 > 0x10uLL) {
        goto LABEL_272;
      }
    }
    sub_248403090(v247 + 1104, v36);
    uint64_t v25 = v313;
    if (v313) {
      goto LABEL_439;
    }
    sub_248403294(255, (unsigned int *)(v247 + 152));
  }
  if ((*(unsigned char *)(a1 + 72) & 0x10) != 0)
  {
    uint64_t v25 = sub_2484310C4((void *)(v37 + 1432), *(void *)(a1 + 640), *(void *)(a1 + 648), (float *)(*(void *)(*(void *)a1 + 4208) + 1104));
    if (v25) {
      goto LABEL_272;
    }
  }
  uint64_t v228 = *(void *)(a1 + 456);
  BOOL v229 = *(_DWORD *)(a1 + 80) == 1 && *(_DWORD *)(v228 + 104) == 1;
  uint64_t v230 = v229 ? 1 : 3;
  *(unsigned char *)(a1 + 1032) = *(_DWORD *)(a1 + 60) == 1;
  uint64_t v231 = *(void *)(v228 + 336);
  uint64_t v232 = (unsigned __int128)((v231 - *(void *)(v228 + 328)) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v233 = (void *)v36[2];
  uint64_t v361 = *(void *)(v228 + 328);
  if ((unint64_t)v233 > v36[3])
  {
    sub_2483EB0C0(v36);
    unint64_t v235 = *v36;
    uint64_t v236 = v36[1];
  }
  else
  {
    unint64_t v234 = v36[1];
    unint64_t v235 = *v36 | (*v233 << v234);
    v36[2] = (unint64_t)v233 + ((63 - v234) >> 3);
    uint64_t v236 = v234 | 0x38;
    *long long v36 = v235;
    v36[1] = v234 | 0x38;
  }
  unint64_t v237 = (v232 >> 4) + ((unint64_t)v232 >> 63);
  *long long v36 = v235 >> 1;
  v36[1] = v236 - 1;
  if (v235)
  {
    unint64_t v271 = (*(void *)(a1 + 888) * (v237 + v230) * *(void *)(a1 + 896)) >> 4;
    if (v271 >= 0x3FFC00) {
      unint64_t v271 = 4193280;
    }
    uint64_t v25 = sub_248421D58(v36, (uint64_t *)(a1 + 1040), v271 + 1024);
    if (v25) {
      goto LABEL_272;
    }
    uint64_t v25 = sub_2483F2760(v36, (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 1048) - *(void *)(a1 + 1040)) >> 3) + 1) >> 1, a1 + 1064, (unint64_t *)(a1 + 1208), 0);
    if (v25) {
      goto LABEL_272;
    }
  }
  int v238 = *(unsigned __int8 *)(a1 + 1032);
  if (*(unsigned char *)(a1 + 1032)) {
    unint64_t v239 = v230;
  }
  else {
    unint64_t v239 = 0;
  }
  unsigned int v240 = *(_DWORD *)(v228 + 28);
  if (v240 >= 0x20 && *(unsigned char *)(a1 + 1032) && *(_DWORD *)(a1 + 80))
  {
    BOOL v241 = *(unsigned char *)(v228 + 24) == 0;
    uint64_t v25 = 1;
    if (v240 != 32) {
      BOOL v241 = 0;
    }
    if (v240 > 0x20 || v241) {
      goto LABEL_439;
    }
  }
  sub_24842A0C4((uint64_t)v372, *(void *)(a1 + 888), *(void *)(a1 + 896), v240, v239 + v237);
  uint64_t v25 = DWORD2(v373[4]);
  if (DWORD2(v373[4]))
  {
    sub_24840A478((uint64_t)v372);
    goto LABEL_272;
  }
  int v272 = v372[0];
  v374[0] = *(_OWORD *)v372;
  v372[0] = 0;
  v372[1] = 0;
  *(long long *)((char *)&v374[1] + 8) = *(_OWORD *)((char *)v373 + 8);
  *(void *)&v374[1] = *(void *)&v373[0];
  *((void *)&v374[2] + 1) = *((void *)&v373[1] + 1);
  memset(v373, 0, 32);
  *(_OWORD *)v375 = v373[2];
  long long v376 = v373[3];
  char v377 = v373[4];
  *(unsigned char *)(a1 + 1035) = 1;
  v273 = v272;
  unint64_t v352 = v239;
  if (*(_DWORD *)(a1 + 80) == 2 && v238)
  {
    unint64_t v274 = 0;
    if (v239 <= 1) {
      uint64_t v275 = 1;
    }
    else {
      uint64_t v275 = v239;
    }
    uint64_t v276 = (unsigned int *)(a1 + 96);
    uint64_t v277 = v275 << 6;
    do
    {
      int v278 = *(unsigned __int8 *)(a1 + 108) - byte_248550964[*v276];
      uint64_t v279 = (uint64_t)&v273[v274 / 4];
      *(_DWORD *)(v279 + 56) = v278;
      int v280 = *v276++;
      int v281 = *(unsigned __int8 *)(a1 + 109) - byte_248550968[v280];
      *(_DWORD *)(v279 + 60) = v281;
      uint64_t v282 = (int)((*(void *)(a1 + 896) + (1 << v281) - 1) / (unint64_t)(1 << v281));
      *(void *)(v279 + 40) = (int)((*(void *)(a1 + 888) + (1 << v278) - 1) / (unint64_t)(1 << v278));
      *(void *)(v279 + 48) = v282;
      uint64_t v25 = sub_24840A0F4(v279);
      if (v25) {
        goto LABEL_458;
      }
      v273 = *(_DWORD **)&v374[0];
      if (*(_DWORD *)(*(void *)&v374[0] + v274 + 56) != *(_DWORD *)(*(void *)&v374[0] + 56)
        || *(_DWORD *)(*(void *)&v374[0] + v274 + 60) != *(_DWORD *)(*(void *)&v374[0] + 60))
      {
        *(unsigned char *)(a1 + 1035) = 0;
      }
      v274 += 64;
    }
    while (v277 != v274);
  }
  if (v231 != v361)
  {
    uint64_t v283 = 0;
    if (v237 <= 1) {
      uint64_t v284 = 1;
    }
    else {
      uint64_t v284 = v237;
    }
    unint64_t v285 = v352 << 6;
    do
    {
      unint64_t v286 = *(unsigned int *)(*(void *)(a1 + 320) + 4 * v283);
      long long v287 = (char *)v273 + v285;
      uint64_t v288 = (int)((v286 - 1 + *(void *)(a1 + 912)) / v286);
      *((void *)v287 + 5) = (int)((v286 - 1 + *(void *)(a1 + 904)) / v286);
      *((void *)v287 + 6) = v288;
      uint64_t v25 = sub_24840A0F4((uint64_t)v273 + v285);
      if (v25) {
        goto LABEL_458;
      }
      int v289 = __clz(v286) ^ 0x3F;
      unsigned int v290 = *(_DWORD *)(a1 + 316);
      BOOL v291 = (v290 & (v290 - 1)) != 0;
      unsigned int v292 = __clz(v290) ^ 0xFFFFFFE0;
      if ((v286 & (v286 - 1)) != 0) {
        ++v289;
      }
      unsigned int v293 = v292 + v289 - v291 + 1;
      v273 = *(_DWORD **)&v374[0];
      *(int32x2_t *)(*(void *)&v374[0] + v285 + 56) = vdup_n_s32(v293);
      if (v273[14] != v293 || v273[15] != v293) {
        *(unsigned char *)(a1 + 1035) = 0;
      }
      ++v283;
      v285 += 64;
    }
    while (v284 != v283);
  }
  *((void *)&v384 + 1) = 1056964608;
  v294 = (void **)operator new(0x20uLL);
  int v387 = v294 + 4;
  *(_OWORD *)v294 = xmmword_24855076C;
  *((_OWORD *)v294 + 1) = unk_24855077C;
  long long v385 = v294;
  long long v386 = (uint64_t *)(v294 + 4);
  LODWORD(v388) = 1119879168;
  v389[0] = 32;
  v389[1] = 0xFFFFFFFFLL;
  v389[2] = 0x33F8147AELL;
  LOBYTE(v389[3]) = 0;
  *(_OWORD *)((char *)&v389[3] + 4) = xmmword_2484DCB20;
  HIDWORD(v389[5]) = 2;
  v389[6] = 0;
  v390 = 0;
  *(void *)&long long v391 = 0;
  *((void *)&v391 + 1) = -1;
  int v392 = 256;
  char v393 = 0;
  char v394 = 0;
  __p = *(void **)(a1 + 1016);
  *(void *)&long long v384 = __p;
  *(_OWORD *)long long v380 = 0u;
  long long v381 = 0u;
  uint64_t v295 = sub_24840A1D8((uint64_t)v380, *(void *)(a1 + 1000), *(void *)(a1 + 1008));
  uint64_t v25 = sub_24842980C(v36, (uint64_t)v374, a1 + 1232, v295, (unint64_t *)&__p, 0, (void *)(a1 + 1040), (unsigned char *)(a1 + 1064), a1 + 1208);
  if (!v25)
  {
    *(unsigned char *)(a1 + 1033) = 0;
    if (*((void *)&v374[0] + 1) != *(void *)&v374[0])
    {
      unint64_t v296 = 0;
      unint64_t v297 = (uint64_t)(*((void *)&v374[0] + 1) - *(void *)&v374[0]) >> 6;
      unint64_t v298 = *((void *)&v376 + 1);
      if (v297 <= 1) {
        unint64_t v297 = 1;
      }
      uint64_t v299 = *(void *)&v374[0] + 48;
      char v300 = 1;
LABEL_398:
      int v301 = (unint64_t *)(v299 + (v296 << 6));
      do
      {
        if (v296 >= v298)
        {
          unint64_t v302 = *(void *)(a1 + 1016);
          if (*(v301 - 1) <= v302 && *v301 <= v302)
          {
            char v300 = 0;
            *(unsigned char *)(a1 + 1033) = 1;
            if (++v296 != v297) {
              goto LABEL_398;
            }
            goto LABEL_455;
          }
        }
        ++v296;
        v301 += 8;
      }
      while (v297 != v296);
      if ((v300 & 1) == 0) {
        goto LABEL_455;
      }
    }
    if (*(unsigned char *)(a1 + 1035)
      && (int64_t v327 = *(void (****)(void))&v374[2],
          v328 = (void (***)(void))*((void *)&v374[1] + 1),
          *(void *)&v374[2] - *((void *)&v374[1] + 1) == 72)
      && !*(_DWORD *)(*((void *)&v374[1] + 1) + 8))
    {
      if ((long long *)(a1 + 864) != (long long *)((char *)&v374[1] + 8))
      {
        sub_24840A270(a1 + 864, *((uint64_t *)&v374[1] + 1), *(uint64_t *)&v374[2], 1uLL);
        int64_t v327 = *(void (****)(void))&v374[2];
        v328 = (void (***)(void))*((void *)&v374[1] + 1);
      }
      if (v327 == v328)
      {
        *(void *)&v374[2] = v328;
        goto LABEL_455;
      }
      int64_t v329 = v327 - 9;
      v330 = v327 - 9;
      int64_t v331 = v327 - 9;
      do
      {
        float v332 = *v331;
        v331 -= 9;
        (*v332)(v330);
        v329 -= 9;
        BOOL v172 = v330 == v328;
        v330 = v331;
      }
      while (!v172);
      float v333 = (void *)v389[6];
      *(void *)&v374[2] = v328;
      sub_24842A35C(a1 + 776, (uint64_t)v374);
      if (v333)
      {
        v390 = v333;
        operator delete(v333);
      }
    }
    else
    {
LABEL_455:
      sub_24842A35C(a1 + 776, (uint64_t)v374);
    }
  }
  if (v385) {
    operator delete(v385);
  }
LABEL_458:
  __p = (char *)&v374[1] + 8;
  sub_2483FDBFC((void ***)&__p);
  __p = v374;
  sub_2483FDCBC((void ***)&__p);
  sub_24840A478((uint64_t)v372);
  if (v25) {
    goto LABEL_272;
  }
  int v211 = 0;
  *(unsigned char *)(a1 + 1408) = 1;
LABEL_274:
  v369[v362] = v211;
LABEL_275:
  LOBYTE(v380[0]) = 0;
  if (*(unsigned char *)(a1 + 1408))
  {
    uint64_t v212 = *(void *)(a1 + 8);
    uint64_t v213 = (unint64_t)(v368 - (unsigned char *)v367) >> 3;
    __p = (void *)a1;
    *(void *)&long long v384 = &v367;
    *((void *)&v384 + 1) = &v370;
    long long v385 = &v371;
    long long v386 = (uint64_t *)&v369;
    int v387 = v380;
    if (v212)
    {
      BOOL v214 = sub_2483FEFF8(v212, v213, (uint64_t)&__p);
    }
    else
    {
      v372[0] = 0;
      v372[1] = v372;
      BOOL v214 = sub_2483FEFF8((uint64_t)v372, v213, (uint64_t)&__p);
    }
    uint64_t v25 = v214;
    if (v214) {
      goto LABEL_439;
    }
  }
  unsigned __int8 v215 = atomic_load((unsigned __int8 *)v380);
  if (v215)
  {
LABEL_438:
    uint64_t v25 = 1;
    goto LABEL_439;
  }
  for (uint64_t n = *(unsigned char **)(a1 + 1384); n != *(unsigned char **)(a1 + 1392); ++n)
  {
    if (!*n) {
      goto LABEL_286;
    }
  }
  if (!*(unsigned char *)(a1 + 1410)) {
    sub_2483F3EE8(*(void *)a1, a1 + 48, *(void *)(a1 + 768), *(unsigned __int8 *)(a1 + 1457) | (*(unsigned __int8 *)(a1 + 1329) << 8) | (*(unsigned __int8 *)(a1 + 1328) << 16) | 0x1000000);
  }
LABEL_286:
  if (*(unsigned char *)(a1 + 1410)) {
    BOOL v217 = v4 == v370;
  }
  else {
    BOOL v217 = 1;
  }
  if (!v217 && !*(unsigned char *)(a1 + 1409))
  {
    uint64_t v25 = sub_2483FF1C8(a1, *(unint64_t **)(v371 + 24 * v4));
    if (v25) {
      goto LABEL_439;
    }
    v369[v4] = 0;
  }
  if (*(int *)(a1 + 1460) >= 2)
  {
    uint64_t v218 = sub_2483FFBA0((void *)a1);
    if (v365 != v364)
    {
      unint64_t v219 = ((char *)v365 - (char *)v364) / 24;
      int v220 = (unint64_t *)v363[0];
      int v221 = *(unsigned __int8 **)(a1 + 1360);
      if (v219 <= 1) {
        unint64_t v219 = 1;
      }
      do
      {
        unsigned int v222 = *v221++;
        unint64_t v223 = v218 - v222;
        if (v223 >= *v220) {
          unint64_t v223 = *v220;
        }
        *v220++ = v223;
        --v219;
      }
      while (v219);
    }
  }
  if (!*(unsigned char *)(a1 + 1409)) {
    goto LABEL_356;
  }
  int v225 = v364;
  uint64_t v224 = v365;
  if (v365 == v364)
  {
    unint64_t v227 = 0xAAAAAAAAAAAAAAABLL * (v365 - v364);
  }
  else
  {
    unint64_t v226 = 0;
    do
    {
      if (*((void *)v363[0] + v226))
      {
        (*(void (**)(void, unint64_t))(**(void **)(*(void *)a1 + 4488) + 16))(*(void *)(*(void *)a1 + 4488), v226);
        int v225 = v364;
        uint64_t v224 = v365;
      }
      ++v226;
      unint64_t v227 = 0xAAAAAAAAAAAAAAABLL * (v224 - v225);
    }
    while (v226 < v227);
  }
  int v263 = *(void **)(a1 + 8);
  *(void *)&v374[0] = a1;
  __p = (void *)a1;
  *(void *)&long long v384 = &v364;
  *((void *)&v384 + 1) = v363;
  long long v385 = &v370;
  long long v386 = &v371;
  int v387 = (void **)&v369;
  uint64_t v388 = v380;
  if (v263)
  {
    BOOL v264 = sub_2483FFC38(v263, v227, (uint64_t *)v374, (uint64_t)&__p);
  }
  else
  {
    v372[0] = 0;
    v372[1] = v372;
    BOOL v264 = sub_2483FFC38(v372, v227, (uint64_t *)v374, (uint64_t)&__p);
  }
  uint64_t v25 = v264;
  if (!v264)
  {
LABEL_356:
    unsigned __int8 v265 = atomic_load((unsigned __int8 *)v380);
    if ((v265 & 1) == 0)
    {
      uint64_t v266 = v370;
      uint64_t v267 = v371;
      int64x2_t v268 = v369;
      *(void *)(a1 + 1416) += v370;
      if (v266)
      {
        unint64_t v269 = (void *)(v267 + 8);
        do
        {
          if (*v268++)
          {
            *(unsigned char *)(*(void *)(a1 + 1336) + *v269) = 0;
            --*(void *)(a1 + 1416);
          }
          v269 += 3;
          --v266;
        }
        while (v266);
      }
      uint64_t v25 = 0;
      goto LABEL_439;
    }
    goto LABEL_438;
  }
LABEL_439:
  if (v363[0])
  {
    v363[1] = v363[0];
    operator delete(v363[0]);
  }
  __p = &v364;
  sub_2483EA640((void ***)&__p);
  if (v367)
  {
    uint64_t v368 = v367;
    operator delete(v367);
  }
  return v25;
}

void sub_2483FD530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (__p) {
    operator delete(__p);
  }
  STACK[0x320] = (unint64_t)&a32;
  sub_2483EA640((void ***)&STACK[0x320]);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_2483FD7BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2483FB148(--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2483FD840(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1424);
  uint64_t result = 1;
  if (!v2)
  {
    *(unsigned char *)(a1 + 1424) = 1;
    uint64_t result = sub_24840BDD0(a1 + 776, a1 + 48, *(void *)a1, *(long long **)(a1 + 8), 1);
    if (!result)
    {
      if (*(unsigned char *)(a1 + 440)) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 64) == 1) {
        return 0;
      }
      unsigned int v4 = *(_DWORD *)(a1 + 444);
      if (*(_DWORD *)(a1 + 424) && !v4)
      {
        return 0;
      }
      else
      {
        uint64_t v5 = *(void *)a1 + 456 * v4;
        sub_2483F767C((uint64_t *)(v5 + 2376), (uint64_t *)(*(void *)a1 + 4496));
        uint64_t result = 0;
        *(unsigned char *)(v5 + 2824) = *(unsigned char *)(a1 + 448);
      }
    }
  }
  return result;
}

void sub_2483FD8DC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    unsigned int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unsigned int v4 = 0;
        if (v7) {
          MEMORY[0x24C579F90](v6, 0x1050C402DCFFC91);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2483FD974(uint64_t a1)
{
  int v2 = *(void **)(a1 + 1464);
  if (v2)
  {
    *(void *)(a1 + 1472) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(uint64_t **)(a1 + 1432);
  if (v3)
  {
    unsigned int v4 = *(uint64_t **)(a1 + 1440);
    uint64_t v5 = *(void **)(a1 + 1432);
    if (v4 != v3)
    {
      do
      {
        v4 -= 184;
        sub_2483FEC70(v4);
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 1432);
    }
    *(void *)(a1 + 1440) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 1384);
  if (v6)
  {
    *(void *)(a1 + 1392) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1360);
  if (v7)
  {
    *(void *)(a1 + 1368) = v7;
    operator delete(v7);
  }
  size_t v8 = *(void **)(a1 + 1336);
  if (v8)
  {
    *(void *)(a1 + 1344) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 1232) = &unk_26FC65988;
  unint64_t v16 = (void **)(a1 + 1304);
  sub_2483FDBFC(&v16);
  uint64_t v9 = *(void **)(a1 + 1208);
  if (v9)
  {
    *(void *)(a1 + 1216) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 1120);
  if (v10)
  {
    *(void *)(a1 + 1128) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 1096);
  if (v11)
  {
    *(void *)(a1 + 1104) = v11;
    operator delete(v11);
  }
  unint64_t v16 = (void **)(a1 + 1072);
  sub_2483EA640(&v16);
  sub_2483E8DDC((uint64_t *)(a1 + 1064));
  uint64_t v12 = *(void **)(a1 + 1040);
  if (v12)
  {
    *(void *)(a1 + 1048) = v12;
    operator delete(v12);
  }
  unint64_t v16 = (void **)(a1 + 864);
  sub_2483FDBFC(&v16);
  unint64_t v16 = (void **)(a1 + 800);
  sub_2483FDBFC(&v16);
  unint64_t v16 = (void **)(a1 + 776);
  sub_2483FDCBC(&v16);
  *(void *)(a1 + 48) = &unk_26FC65960;
  unint64_t v16 = (void **)(a1 + 392);
  sub_2483FDB3C(&v16);
  unint64_t v13 = *(void **)(a1 + 320);
  if (v13)
  {
    *(void *)(a1 + 328) = v13;
    operator delete(v13);
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  unint64_t v14 = *(void **)(a1 + 16);
  if (v14)
  {
    *(void *)(a1 + 24) = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_2483FDB3C(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      size_t v8 = v4 - 40;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2483FDBFC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 72;
      uint64_t v7 = v4 - 72;
      size_t v8 = v4 - 72;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2483FDCBC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    unsigned int v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 8;
        sub_2483E8DDC(v4 - 5);
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2483FDD44(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void *))(*(void *)a2 + 24))(a2, 0, a1 + 1);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 88))(a2, a1 + 2);
    if (!result)
    {
      uint64_t v5 = a1 + 9;
      unsigned int v30 = 954437177 * ((a1[10] - a1[9]) >> 3);
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x24700000043, 0, &v30);
      if (!result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2))
        {
          uint64_t v6 = v30;
          uint64_t v7 = a1[9];
          size_t v8 = (int64x2_t *)a1[10];
          unint64_t v9 = 0x8E38E38E38E38E39 * (((uint64_t)v8->i64 - v7) >> 3);
          unint64_t v10 = v30 - v9;
          if (v30 <= v9)
          {
            if (v30 < v9)
            {
              uint64_t v20 = (int64x2_t *)(v7 + 72 * v30);
              if (v8 != v20)
              {
                uint64_t v21 = &v8[-5].i64[1];
                uint64_t v22 = (int64x2_t *)v21;
                unint64_t v23 = (int64x2_t *)v21;
                do
                {
                  unint64_t v24 = (void (**)(int64x2_t *))v23->i64[0];
                  unint64_t v23 = (int64x2_t *)((char *)v23 - 72);
                  (*v24)(v22);
                  v21 -= 9;
                  BOOL v25 = v22 == v20;
                  uint64_t v22 = v23;
                }
                while (!v25);
              }
              a1[10] = v20;
            }
          }
          else
          {
            uint64_t v11 = a1[11];
            if (0x8E38E38E38E38E39 * ((v11 - (uint64_t)v8) >> 3) >= v10)
            {
              char v26 = &v8->i8[72 * v10];
              uint64_t v27 = 72 * v30 - 8 * (((uint64_t)v8->i64 - v7) >> 3);
              do
              {
                sub_24842BFC8(v8, 3);
                size_t v8 = (int64x2_t *)((char *)v8 + 72);
                v27 -= 72;
              }
              while (v27);
              a1[10] = v26;
            }
            else
            {
              unint64_t v34 = a1 + 11;
              unint64_t v12 = 0x8E38E38E38E38E39 * ((v11 - v7) >> 3);
              uint64_t v13 = 2 * v12;
              if (2 * v12 <= v30) {
                uint64_t v13 = v30;
              }
              if (v12 >= 0x1C71C71C71C71C7) {
                unint64_t v14 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v14 = v13;
              }
              uint64_t v15 = (char *)sub_2483FE084(v14);
              unint64_t v16 = (int64x2_t *)&v15[72 * v9];
              v31[0] = v15;
              v31[1] = v16;
              unint64_t v32 = v16;
              unint64_t v33 = &v15[72 * v17];
              uint64_t v18 = (int64x2_t *)&v15[72 * v6];
              uint64_t v19 = 72 * v6 - 72 * v9;
              do
              {
                sub_24842BFC8(v16, 3);
                unint64_t v16 = (int64x2_t *)((char *)v16 + 72);
                v19 -= 72;
              }
              while (v19);
              unint64_t v32 = v18;
              sub_2483FE0D0(v5, v31);
              sub_2483FE19C((uint64_t)v31);
            }
          }
        }
        if (v30)
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          while (1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, *v5 + v28);
            if (result) {
              break;
            }
            ++v29;
            v28 += 72;
            if (v29 >= v30) {
              return 0;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_2483FE060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 80) = v13;
  _Unwind_Resume(exception_object);
}

void *sub_2483FE084(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    sub_2483E9338();
  }
  return operator new(72 * a1);
}

uint64_t *sub_2483FE0D0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 72) = &unk_26FC66970;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = v8;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      uint64_t v9 = *(void *)(v2 + v5 - 16);
      *(_WORD *)(v6 - 8) = *(_WORD *)(v2 + v5 - 8);
      *(void *)(v6 - 16) = v9;
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *uint64_t result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2483FE19C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 72);
    *(void *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2483FE208(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = &a1->i32[2];
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, void, uint64_t *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, &a1->i64[1]);
  if (!result)
  {
    if (*v4 == 3) {
      return 1;
    }
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 < 2)
      || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x10500000002, 0x890C00000909, 0, (uint64_t)&a1->i64[1] + 4), !result))
    {
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 0))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int64x2_t *))(*(void *)a2 + 32))(a2, 0x180000006, 0x14500000043, 6, a1 + 1);
        if (result) {
          return result;
        }
        if (a1[1].i32[0] > 0x29u) {
          return 1;
        }
      }
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 1))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000380000001, 0x2C80000004, 3, (uint64_t)a1[1].i64 + 4);
        if (result) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 32))(a2, 0x200900000007, 0x2A00F0000A00BLL, 256, &a1[1].i64[1]);
        if (result) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x2780000000, 0xA02F00002029, 0, (uint64_t)&a1[1].i64[1] + 4);
        if (result) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 4, 0, (uint64_t)&a1[3].i64[1] + 4);
        if (result) {
          return result;
        }
        if (a1[3].i32[3] > 0xDu) {
          return 1;
        }
      }
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 2)) {
        return 0;
      }
      uint64_t v6 = a1[2].i64[0];
      uint64_t v7 = a1[2].i64[1];
      uint64_t v8 = a1 + 2;
      unsigned int v11 = -1431655765 * ((unint64_t)(v7 - v6) >> 3);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x2380000000, 0x52700000125, 0, &v11);
      if (!result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2)) {
          sub_2483FE62C(v8, v11);
        }
        if (!v11) {
          return 0;
        }
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, v8->i64[0] + v9);
          if (result) {
            break;
          }
          ++v10;
          v9 += 24;
          if (v10 >= v11) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

int64x2_t *sub_2483FE62C(int64x2_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result->i64[0];
  uint64_t v5 = (void *)result->i64[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - result->i64[0]) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v24 = (void *)(v4 + 24 * a2);
      if (v5 != v24)
      {
        BOOL v25 = (uint64_t (***)(void))(v5 - 3);
        char v26 = v25;
        uint64_t v27 = v25;
        do
        {
          uint64_t v28 = *v27;
          v27 -= 3;
          uint64_t result = (int64x2_t *)(*v28)(v26);
          v25 -= 3;
          BOOL v29 = v26 == v24;
          char v26 = v27;
        }
        while (!v29);
      }
      v3->i64[1] = (uint64_t)v24;
    }
  }
  else
  {
    uint64_t v8 = result[1].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      unsigned int v30 = &v5[3 * v7];
      uint64_t v31 = 24 * a2 - 8 * (((uint64_t)v5 - result->i64[0]) >> 3);
      do
      {
        uint64_t result = (int64x2_t *)sub_24842BF48(v5);
        v5 += 3;
        v31 -= 24;
      }
      while (v31);
      v3->i64[1] = (uint64_t)v30;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        sub_2483E92E8();
      }
      long long v36 = result + 1;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)sub_2483F8ED4(v11);
      uint64_t v13 = &v12[24 * v6];
      unint64_t v33 = v12;
      v34.i64[0] = (uint64_t)v13;
      v34.i64[1] = (uint64_t)v13;
      uint64_t v35 = &v12[24 * v14];
      uint64_t v15 = 3 * a2;
      unint64_t v16 = &v12[24 * a2];
      uint64_t v17 = 8 * v15 - 24 * v6;
      do
      {
        sub_24842BF48(v13);
        v13 += 24;
        v17 -= 24;
      }
      while (v17);
      uint64_t v18 = v3->i64[0];
      unint64_t v19 = v3->u64[1];
      uint64_t v20 = v34.i64[0];
      if (v19 == v3->i64[0])
      {
        int64x2_t v23 = vdupq_n_s64(v19);
      }
      else
      {
        uint64_t v21 = v34.i64[0] - 24;
        do
        {
          *(void *)(v20 - 24) = &unk_26FC65F40;
          v20 -= 24;
          uint64_t v22 = *(void *)(v19 - 16);
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v19 - 8);
          *(void *)(v20 + 8) = v22;
          v21 -= 24;
          v19 -= 24;
        }
        while (v19 != v18);
        int64x2_t v23 = *v3;
      }
      v3->i64[0] = v20;
      v3->i64[1] = (uint64_t)v16;
      int64x2_t v34 = v23;
      unint64_t v32 = (char *)v3[1].i64[0];
      v3[1].i64[0] = (uint64_t)v35;
      uint64_t v35 = v32;
      unint64_t v33 = (char *)v23.i64[0];
      return (int64x2_t *)sub_2483FE860((uint64_t)&v33);
    }
  }
  return result;
}

void sub_2483FE83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2483FE860(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 24);
    *(void *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2483FE8CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 8);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 9);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x10500000002, 0x890C00000909, 0, a1 + 12);
      if (!result)
      {
        uint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);
        return v5(a2, 0x8000000280000001, 0x8380000003, 2, a1 + 16);
      }
    }
  }
  return result;
}

void sub_2483FE9F8()
{
}

void sub_2483FEA10(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66970;
  uint64_t v1 = (void **)(a1 + 32);
  sub_2483FEA88(&v1);

  JUMPOUT(0x24C579F90);
}

void sub_2483FEA88(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 24;
      unint64_t v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2483FEB48(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66970;
  uint64_t v3 = (void **)(a1 + 32);
  sub_2483FEA88(&v3);
  return a1;
}

void sub_2483FEBA0(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65988;
  uint64_t v1 = (void **)(a1 + 72);
  sub_2483FDBFC(&v1);

  JUMPOUT(0x24C579F90);
}

uint64_t sub_2483FEC18(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65988;
  uint64_t v3 = (void **)(a1 + 72);
  sub_2483FDBFC(&v3);
  return a1;
}

void sub_2483FEC70(uint64_t *a1)
{
  sub_2483FECEC(a1 + 180);
  sub_2483FED40(a1 + 177);
  sub_2483FED94(a1 + 174);
  uint64_t v2 = a1 + 169;
  sub_2483E8DDC(a1 + 172);
  uint64_t v3 = a1 + 4;
  uint64_t v4 = a1 + 167;
  do
  {
    uint64_t v5 = 0;
    v2 -= 15;
    do
    {
      sub_2483E8DDC(&v4[v5]);
      v5 -= 5;
    }
    while (v5 != -15);
    v4 -= 15;
  }
  while (v2 != v3);
}

void sub_2483FECEC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    uint64_t v2 = (void (*)(uint64_t, void))a1[1];
    if (v2)
    {
      v2(a1[2], *(void *)(v1 - 16));
    }
    else
    {
      uint64_t v3 = *(void **)(v1 - 16);
      free(v3);
    }
  }
}

void sub_2483FED40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    uint64_t v2 = (void (*)(uint64_t, void))a1[1];
    if (v2)
    {
      v2(a1[2], *(void *)(v1 - 16));
    }
    else
    {
      uint64_t v3 = *(void **)(v1 - 16);
      free(v3);
    }
  }
}

void sub_2483FED94(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    uint64_t v2 = (void (*)(uint64_t, void))a1[1];
    if (v2)
    {
      v2(a1[2], *(void *)(v1 - 16));
    }
    else
    {
      uint64_t v3 = *(void **)(v1 - 16);
      free(v3);
    }
  }
}

void *sub_2483FEDE8(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2484032DC(a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2483FEE50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2483FEE6C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2484032DC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2483FEEC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2483FEEE4(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    unint64_t v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    sub_2483E92E8();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_2483F04AC(v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = &v11[8 * v5];
  unint64_t v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  uint64_t v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

BOOL sub_2483FEFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_248403068, sub_248402488, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_248402488((uint64_t)v6, i);
  return 0;
}

uint64_t sub_2483FF0A8(uint64_t *a1)
{
  if (*((_DWORD *)a1 + 15)
    || (a1[9] & 0xA0) != 0
    || (uint64_t result = sub_2483F1814(*(void *)(*a1 + 4208) + 952, (unsigned int *)(*a1 + 1632), a1[1]), !result))
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + 1410) = 1;
  }
  return result;
}

void sub_2483FF104(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1425))
  {
    if (*(void *)(a1 + 800) == *(void *)(a1 + 808) && !*(unsigned char *)(a1 + 1033))
    {
      if (*(unsigned char *)(a1 + 1035))
      {
        *(unsigned char *)(a1 + 1034) = 0;
        uint64_t v2 = *(void *)(a1 + 776);
        for (uint64_t i = *(void *)(a1 + 784); v2 != i; v2 += 64)
        {
          uint64_t v4 = *(void *)(v2 + 24);
          *(_OWORD *)uint64_t v2 = 0u;
          *(_OWORD *)(v2 + 16) = 0u;
          if (v4)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
            free(*(void **)(v4 - 32));
          }
          *(void *)(v2 + 32) = 0;
        }
      }
    }
    *(void *)(*(void *)(a1 + 768) + 40) = *(void *)(a1 + 344);
    sub_248402404(*(void *)a1, *(unsigned int *)(a1 + 160));
    *(unsigned char *)(a1 + 1425) = 1;
  }
}

uint64_t sub_2483FF1C8(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (unsigned int *)a1;
  if (*(_DWORD *)(a1 + 60))
  {
    uint64_t v3 = 0;
    *(unsigned char *)(a1 + 1409) = 1;
  }
  else
  {
    uint64_t v4 = a2;
    uint64_t v3 = sub_24842DFDC(*(void *)a1 + 208, a2, a1 + 776);
    if (!v3)
    {
      uint64_t v5 = *(void *)v2 + 208;
      unsigned int v6 = atomic_load((unsigned int *)(*(void *)v2 + 4472));
      uint64_t v3 = sub_24842F368(v5, v6);
      if (!v3)
      {
        uint64_t v8 = *(int64x2_t **)v2;
        unint64_t v9 = *(void *)(*(void *)(*(void *)v2 + 4208) + 120);
        unint64_t v10 = __clz(v9) ^ 0x3F;
        if ((v9 & (v9 - 1)) != 0) {
          unint64_t v11 = v10 + 1;
        }
        else {
          unint64_t v11 = v10;
        }
        uint64_t v12 = (void *)v4[2];
        if ((unint64_t)v12 > v4[3])
        {
          sub_2483EB0C0(v4);
          unint64_t v14 = *v4;
          uint64_t v15 = v4[1];
          uint64_t v8 = *(int64x2_t **)v2;
        }
        else
        {
          unint64_t v13 = v4[1];
          unint64_t v14 = *v4 | (*v12 << v13);
          v4[2] = (unint64_t)v12 + ((63 - v13) >> 3);
          uint64_t v15 = v13 | 0x38;
        }
        *uint64_t v4 = v14 >> v11;
        v4[1] = v15 - v11;
        v8[262].i64[1] = (v14 & ~(-1 << v11)) + 1;
        uint64_t v16 = v8[264].i64[1];
        uint64_t v17 = v8[264].i64[0];
        unint64_t v18 = 0x8E38E38E38E38E39 * ((v16 - v17) >> 4);
        if (v18 > 0xA)
        {
          if (v16 - v17 != 1584)
          {
            uint64_t v39 = v17 + 1584;
            while (v16 != v39)
            {
              v16 -= 144;
              sub_2484022B8(v16);
            }
            v8[264].i64[1] = v39;
          }
        }
        else
        {
          uint64_t v19 = v8[265].i64[0];
          if (0x8E38E38E38E38E39 * ((v19 - v16) >> 4) >= 11 - v18)
          {
            unint64_t v40 = v16 + 144 * (11 - v18);
            uint64_t v41 = 1584 - 16 * ((v16 - v17) >> 4);
            do
            {
              sub_248402324(v16);
              v16 += 144;
              v41 -= 144;
            }
            while (v41);
            v8[264].i64[1] = v40;
          }
          else
          {
            unint64_t v20 = 0x8E38E38E38E38E39 * ((v19 - v17) >> 4);
            uint64_t v21 = 2 * v20;
            if (2 * v20 <= 0xB) {
              uint64_t v21 = 11;
            }
            if (v20 >= 0xE38E38E38E38E3) {
              unint64_t v22 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v22 = v21;
            }
            v83[0] = &v8[265];
            if (v22 > 0x1C71C71C71C71C7) {
              sub_2483E9338();
            }
            uint64_t v23 = 9 * v22;
            unint64_t v24 = (char *)operator new(144 * v22);
            uint64_t v25 = (uint64_t)&v24[144 * v18];
            *(void *)&v82[0] = v24;
            *((void *)&v82[0] + 1) = v25;
            *(void *)&v82[1] = v25;
            *((void *)&v82[1] + 1) = &v24[16 * v23];
            char v26 = v24 + 1584;
            unint64_t v27 = v18 - 11;
            do
            {
              sub_248402324(v25);
              v25 += 144;
            }
            while (!__CFADD__(v27++, 1));
            *(void *)&v82[1] = v26;
            unint64_t v29 = v8[264].u64[1];
            uint64_t v30 = v8[264].i64[0];
            uint64_t v31 = *((void *)&v82[0] + 1);
            if (v29 == v30)
            {
              int64x2_t v38 = vdupq_n_s64(v29);
            }
            else
            {
              uint64_t v32 = 0;
              do
              {
                uint64_t v33 = v31 + v32;
                uint64_t v34 = v29 + v32;
                uint64_t v35 = *(void *)(v29 + v32 - 144);
                *(void *)(v34 - 144) = 0;
                *(void *)(v33 - 144) = v35;
                *(void *)(v33 - 136) = 0;
                *(void *)(v33 - 128) = 0;
                *(void *)(v33 - 120) = 0;
                *(_OWORD *)(v33 - 136) = *(_OWORD *)(v29 + v32 - 136);
                *(void *)(v33 - 120) = *(void *)(v29 + v32 - 120);
                *(void *)(v34 - 136) = 0;
                *(void *)(v34 - 128) = 0;
                *(void *)(v34 - 120) = 0;
                *(void *)(v33 - 112) = 0;
                *(void *)(v33 - 104) = 0;
                *(void *)(v33 - 96) = 0;
                *(_OWORD *)(v33 - 112) = *(_OWORD *)(v29 + v32 - 112);
                *(void *)(v33 - 96) = *(void *)(v29 + v32 - 96);
                *(void *)(v34 - 112) = 0;
                *(void *)(v34 - 104) = 0;
                *(void *)(v34 - 96) = 0;
                *(void *)(v33 - 88) = 0;
                *(void *)(v33 - 80) = 0;
                *(void *)(v33 - 72) = 0;
                *(_OWORD *)(v33 - 88) = *(_OWORD *)(v29 + v32 - 88);
                *(void *)(v33 - 72) = *(void *)(v29 + v32 - 72);
                *(void *)(v34 - 80) = 0;
                *(void *)(v34 - 72) = 0;
                *(void *)(v34 - 88) = 0;
                *(_WORD *)(v33 - 64) = *(_WORD *)(v29 + v32 - 64);
                *(void *)(v33 - 56) = &unk_26FC658E8;
                long long v36 = *(_OWORD *)(v29 + v32 - 48);
                long long v37 = *(_OWORD *)(v29 + v32 - 32);
                *(void *)(v33 - 16) = *(void *)(v29 + v32 - 16);
                *(_OWORD *)(v33 - 48) = v36;
                *(_OWORD *)(v33 - 32) = v37;
                *(void *)(v33 - 8) = *(void *)(v29 + v32 - 8);
                v32 -= 144;
              }
              while (v29 + v32 != v30);
              v31 += v32;
              int64x2_t v38 = v8[264];
              char v26 = *(char **)&v82[1];
            }
            v8[264].i64[0] = v31;
            v8[264].i64[1] = (uint64_t)v26;
            *(int64x2_t *)((char *)v82 + 8) = v38;
            uint64_t v42 = v8[265].i64[0];
            v8[265].i64[0] = *((void *)&v82[1] + 1);
            *((void *)&v82[1] + 1) = v42;
            *(void *)&v82[0] = v38.i64[0];
            sub_2484023B4((uint64_t)v82);
          }
        }
        sub_2483F8D48((uint64_t *)(*(void *)v2 + 4248), 0xBuLL);
        if (!v2[40])
        {
          LODWORD(v70) = 0;
          unint64_t v44 = 0;
LABEL_79:
          uint64_t v71 = __clz(v70) ^ 0x1F;
          if ((v70 & (v70 - 1)) != 0) {
            unint64_t v72 = v44 + 1;
          }
          else {
            unint64_t v72 = v44;
          }
          if (v72 + v71 <= 0xF) {
            sub_2484018B8();
          }
          sub_248401C9C();
        }
        unint64_t v43 = 0;
        unint64_t v44 = 0;
        unint64_t v73 = v2;
        uint64x2_t v77 = v4;
        while (1)
        {
          __int16 v45 = sub_24841AE94(0x800000138000005FLL, 0xC80000000, v4);
          unsigned int v46 = atomic_load((unsigned int *)(*(void *)v2 + 4472));
          uint64_t v47 = *(void *)(*(void *)v2 + 1560);
          uint64_t v48 = *(void *)(*(void *)v2 + 1568);
          memset(v87, 0, 24);
          *(_OWORD *)__p = 0u;
          long long v85 = 0u;
          *(_OWORD *)uint64_t v83 = 0u;
          memset(v82, 0, sizeof(v82));
          sub_2483F26D4((uint64_t)v86);
          v86[6] = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          unint64_t __src = 0;
          uint64_t v79 = 0;
          if (v45)
          {
            uint64_t v3 = sub_2483F2760(v4, 8uLL, (uint64_t)v82, v87, 0);
            if (!v3) {
              operator new();
            }
          }
          else
          {
            uint64_t v49 = 0;
            uint64_t v50 = v47 * v43;
            int v51 = 0;
            uint64_t v52 = v48 + 4 * v50;
            do
            {
              if ((v46 >> v49)) {
                v51 |= 1 << byte_24854FEF4[v49];
              }
              ++v49;
            }
            while (v49 != 27);
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            int v55 = 0;
            int v56 = v51;
            int v74 = v51;
            do
            {
              unsigned int v57 = byte_24854FEF4[v54];
              int v58 = 1 << v57;
              if (((1 << v57) & v55) == 0)
              {
                v55 |= (unsigned __int16)(1 << v57);
                if ((v58 & v56) != 0)
                {
                  int v76 = v55;
                  unint64_t v59 = byte_248553507[v54] * (unint64_t)byte_2485534EC[v54];
                  if (v59 << 6 > (v79 - (uint64_t)v53) >> 2)
                  {
                    sub_2483EB1C4((char **)&__src, v59 << 6);
                    uint64_t v53 = __src;
                  }
                  int v75 = v51;
                  sub_2483E8B58(v54, (uint64_t)v53);
                  if ((v58 & v51) != 0)
                  {
                    uint64_t v60 = 0;
                    uint64_t v53 = __src;
                    size_t v61 = v59 << 8;
                    do
                      memcpy((void *)(v52 + (qword_24854EFA0[3 * v57 + v60++] << 8)), v53, v61);
                    while (v60 != 3);
                  }
                  int v51 = v75;
                  int v55 = v76;
                  int v56 = v74;
                }
              }
              ++v54;
            }
            while (v54 != 27);
            uint64_t v4 = v77;
            uint64_t v3 = 0;
            uint64_t v2 = v73;
          }
          if (__src) {
            operator delete(__src);
          }
          uint64_t v62 = v81;
          if (v81)
          {
            sub_2483E8DDC((uint64_t *)(v81 + 48));
            MEMORY[0x24C579F90](v62, 0x1070C40D148930ELL);
          }
          if (__p[1])
          {
            *(void **)&long long v85 = __p[1];
            operator delete(__p[1]);
          }
          if (v83[0])
          {
            v83[1] = v83[0];
            operator delete(v83[0]);
          }
          unint64_t __src = (char *)v82 + 8;
          sub_2483EA640((void ***)&__src);
          uint64_t v63 = *(void *)&v82[0];
          *(void *)&v82[0] = 0;
          if (v63)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v63 - 24));
            free(*(void **)(v63 - 32));
          }
          if (v87[0]) {
            operator delete((void *)v87[0]);
          }
          if (v3) {
            break;
          }
          unint64_t v64 = (495 * *(_DWORD *)(*(void *)v2 + 1880))
              * *(void *)(*(void *)(*(void *)v2 + 4208) + 4200);
          uint64_t v65 = sub_2483F2760(v4, v64, *(void *)(*(void *)v2 + 4224) + 144 * v43, (unint64_t *)(*(void *)(*(void *)v2 + 4248) + 24 * v43), 0);
          if (v65) {
            return v65;
          }
          uint64_t v66 = *(int64x2_t **)v2;
          unint64_t v67 = (unint64_t *)(*(void *)(*(void *)v2 + 4248) + 24 * v43);
          unint64_t v68 = v67[1] - *v67;
          if (v64 + 16 <= v68)
          {
            if (v64 + 16 < v68) {
              v67[1] = *v67 + v64 + 16;
            }
          }
          else
          {
            sub_2483EE8AC(v67, v64 + 16 - v68);
            uint64_t v66 = *(int64x2_t **)v2;
          }
          unint64_t v69 = *(void *)(v66[264].i64[0] + 144 * v43 + 136);
          if (v44 <= v69) {
            unint64_t v44 = v69;
          }
          ++v43;
          unint64_t v70 = v2[40];
          if (v43 >= v70) {
            goto LABEL_79;
          }
        }
      }
    }
  }
  return v3;
}

void sub_2483FFAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v33 = v31;
  MEMORY[0x24C579F90](v33, 0x1070C40D148930ELL);
  sub_2483EB164(&a22, 0);
  sub_2483EABC4((uint64_t)&a23);
  uint64_t v35 = *(void **)(v32 - 112);
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2483FFBA0(void *a1)
{
  uint64_t v1 = (int *)a1[183];
  uint64_t v2 = (int *)a1[184];
  uint64_t v3 = (unsigned __int8 *)a1[170];
  uint64_t v4 = (unsigned __int8 *)a1[171];
  uint64_t v5 = v3 + 1;
  if (v3 != v4 && v5 != v4)
  {
    unsigned __int8 v7 = *v3;
    uint64_t v8 = v3 + 1;
    do
    {
      unsigned int v10 = *v8++;
      unsigned __int8 v9 = v10;
      if (v10 < v7)
      {
        unsigned __int8 v7 = v9;
        uint64_t v3 = v5;
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  if (v2 != v1)
  {
    unint64_t v11 = *v3;
    unint64_t v12 = v2 - v1;
    do
    {
      unint64_t v13 = v12 >> 1;
      unint64_t v14 = &v1[v12 >> 1];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v11 < v16) {
        unint64_t v12 = v13;
      }
      else {
        uint64_t v1 = v15;
      }
    }
    while (v12);
  }
  if (v1 == v2) {
    return -1;
  }
  else {
    return *v1;
  }
}

BOOL sub_2483FFC38(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_2483FFCF8(*a3, 1uLL, *(void *)(*a3 + 1368) - *(void *)(*a3 + 1360))) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_2483FFFE4((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, void *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_24840012C, sub_2483FFFE4, 0, a2) != 0;
}

uint64_t sub_2483FFCF8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = a3;
  }
  unsigned __int8 v7 = *(uint64_t **)(a1 + 1440);
  uint64_t v8 = *(uint64_t **)(a1 + 1432);
  unint64_t v9 = 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v8) >> 6);
  unint64_t v10 = v6 - v9;
  if (v6 <= v9) {
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(a1 + 1448);
  if (0xD37A6F4DE9BD37A7 * ((v11 - (uint64_t)v7) >> 6) >= v10)
  {
    bzero(*(void **)(a1 + 1440), 1472 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472);
    *(void *)(a1 + 1440) = &v7[184 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64)
                               + 184];
    goto LABEL_26;
  }
  if (v6 > 0x2C8590B21642C8) {
    sub_2483E92E8();
  }
  unint64_t v12 = 0xD37A6F4DE9BD37A7 * ((v11 - (uint64_t)v8) >> 6);
  uint64_t v13 = 2 * v12;
  if (2 * v12 <= v6) {
    uint64_t v13 = v6;
  }
  if (v12 >= 0x1642C8590B2164) {
    unint64_t v14 = 0x2C8590B21642C8;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 > 0x2C8590B21642C8) {
    sub_2483E9338();
  }
  uint64_t v15 = 1472 * v14;
  unint64_t v16 = (char *)operator new(1472 * v14);
  uint64_t v17 = &v16[64 * (((char *)v7 - (char *)v8) >> 6)];
  uint64_t v34 = &v16[v15];
  size_t v18 = 1472 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472;
  bzero(v17, v18);
  if (v7 == v8)
  {
    *(void *)(a1 + 1432) = v17;
    *(void *)(a1 + 1440) = &v17[v18];
    *(void *)(a1 + 1448) = v34;
    if (!v7) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v33 = &v17[v18];
  do
  {
    uint64_t v19 = v17 - 1472;
    unint64_t v20 = v7 - 184;
    long long v21 = *((_OWORD *)v7 - 91);
    *(_OWORD *)uint64_t v19 = *((_OWORD *)v7 - 92);
    *((_OWORD *)v19 + 1) = v21;
    for (uint64_t i = 0x1FFFFFFFFFFFFF4CLL; i != -15; i += 15)
      sub_2483F0E78((uint64_t)&v17[i * 8], (uint64_t)&v7[i]);
    long long v23 = *(_OWORD *)(v7 - 15);
    *((void *)v17 - 13) = *(v7 - 13);
    *(_OWORD *)(v17 - 120) = v23;
    uint64_t v24 = *(v7 - 12);
    uint64_t v25 = *(v7 - 11);
    *(v7 - 12) = 0;
    *((void *)v17 - 12) = v24;
    *((void *)v17 - 11) = v25;
    uint64_t v26 = *(v7 - 10);
    *(v7 - 10) = 0;
    *((void *)v17 - 10) = v26;
    *(_OWORD *)(v17 - 72) = *(_OWORD *)(v7 - 9);
    uint64_t v27 = *(v7 - 7);
    *(v7 - 7) = 0;
    *((void *)v17 - 7) = v27;
    *((_OWORD *)v17 - 3) = *((_OWORD *)v7 - 3);
    uint64_t v28 = *(v7 - 4);
    *(v7 - 4) = 0;
    *((void *)v17 - 4) = v28;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)(v7 - 3);
    *((void *)v17 - 1) = *(v7 - 1);
    v17 -= 1472;
    v7 -= 184;
  }
  while (v20 != v8);
  unint64_t v29 = *(uint64_t **)(a1 + 1432);
  unsigned __int8 v7 = *(uint64_t **)(a1 + 1440);
  *(void *)(a1 + 1432) = v19;
  *(void *)(a1 + 1440) = v33;
  *(void *)(a1 + 1448) = v34;
  if (v7 != v29)
  {
    do
    {
      v7 -= 184;
      sub_2483FEC70(v7);
    }
    while (v7 != v29);
    unsigned __int8 v7 = v29;
  }
  if (v7) {
LABEL_25:
  }
    operator delete(v7);
LABEL_26:
  *(unsigned char *)(a1 + 1456) = a3 < a2;
  char v30 = *(unsigned char *)(a1 + 1034);
  if (v30) {
    char v30 = (*(_DWORD *)(a1 + 60) == 0) | *(unsigned char *)(a1 + 72);
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 4488);
  if (!v31) {
    return 0;
  }
  uint64_t result = sub_2484B6770(v31, v6, v30 & 1);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t sub_2483FFFE4(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(result + 8);
  uint64_t v4 = *(void *)(*(void *)v3[2] + 8 * a2);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = *v3;
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(*v3 + 1360) + a2);
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    uint64_t v9 = *(void *)v3[4];
    uint64_t v10 = *(void *)(*(void *)v3[1] + 24 * a2) + 8 * v8;
    do
    {
      *((void *)v16 + v5) = *(void *)(v9 + 24 * *(void *)(v10 + 8 * v5));
      ++v5;
    }
    while (v4 != v5);
    if (*(unsigned char *)(v7 + 1456)) {
      a3 = a2;
    }
    uint64_t result = sub_248400160((void *)v7, a2, (unint64_t **)v16, v4, a3, 0);
    if (result)
    {
      atomic_store(1u, (unsigned __int8 *)v3[6]);
    }
    else
    {
      uint64_t v12 = *(void *)(*(void *)v3[2] + 8 * v6);
      if (v12)
      {
        uint64_t v13 = *(void *)v3[5];
        unint64_t v14 = (uint64_t *)(*(void *)(*(void *)v3[1] + 24 * v6) + 8 * v8);
        do
        {
          uint64_t v15 = *v14++;
          *(_DWORD *)(v13 + 4 * v15) = 0;
          --v12;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_24840012C(uint64_t **a1, unint64_t a2)
{
  if (sub_2483FFCF8(**a1, a2, *(void *)(**a1 + 1368) - *(void *)(**a1 + 1360))) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_248400160(void *a1, unint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = a1;
  uint64_t v178 = *MEMORY[0x263EF8340];
  unint64_t v157 = a1[94];
  unint64_t v10 = a1[88];
  uint64_t v11 = *(void *)(*a1 + 4488);
  unint64_t v163 = a2;
  uint64_t v164 = a5;
  uint64_t v162 = v11;
  (*(void (**)(int64x2_t *__return_ptr))(*(void *)v11 + 24))(&v167);
  int64x2_t v165 = v167;
  uint64_t v166 = v168;
  uint64_t v146 = (uint64_t)(v9 + 48);
  unint64_t v156 = v9;
  if (!*((_DWORD *)v9 + 15))
  {
    uint64_t v20 = *((void *)v9 + 179) + 1472 * a5;
    uint64_t v21 = *((unsigned int *)v9 + 40);
    uint64_t v22 = atomic_load((unsigned int *)(*(void *)v9 + 4472));
    uint64_t v23 = sub_2484011E0(v20, v21, v22, v12, v13, v14, v15, v16);
    if (v23) {
      goto LABEL_92;
    }
    uint64_t v138 = *(void *)v9;
    uint64_t v24 = *(unsigned __int8 *)(*((void *)v9 + 170) + a2);
    uint64_t v25 = *((void *)v9 + 179);
    if (v24 + a4 == *((_DWORD *)v9 + 40)) {
      int v26 = 1;
    }
    else {
      int v26 = a6;
    }
    if (v24 | a4 || !v26) {
      operator new();
    }
    uint64_t v129 = v25 + 1472 * a5 + 1352;
    if (*(_DWORD *)v129) {
      goto LABEL_11;
    }
    sub_2483EA250((uint64_t)&v167, 0x40u, 0x24u);
    uint64_t v23 = v171;
    if (v171) {
      goto LABEL_92;
    }
    unint64_t v123 = v169;
    uint64_t v124 = v170;
    unint64_t v169 = 0;
    *(int64x2_t *)uint64_t v129 = v167;
    *(void *)(v25 + 1472 * a5 + 1368) = v168;
    uint64_t v125 = v25 + 1472 * a5;
    uint64_t v126 = *(void *)(v125 + 1376);
    *(void *)(v125 + 1376) = v123;
    if (v126)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v126 - 24));
      free(*(void **)(v126 - 32));
      unsigned int v127 = v171;
      *(void *)(v25 + 1472 * a5 + 1384) = v124;
      if (v127) {
        goto LABEL_11;
      }
    }
    else
    {
      *(void *)(v25 + 1472 * a5 + 1384) = v124;
    }
    unint64_t v128 = v169;
    unint64_t v169 = 0;
    if (v128)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v128 - 24));
      free(*(void **)(v128 - 32));
    }
LABEL_11:
    unint64_t v130 = v10;
    uint64_t v134 = a4;
    int v135 = a6;
    uint64_t v27 = 0;
    uint64_t v176 = 0x100000000;
    int v177 = 2;
    uint64_t v139 = a5;
    uint64_t v28 = v25 + 1472 * a5;
    unint64_t v29 = (uint64_t *)(v28 + 1376);
    char v30 = (uint64_t *)(v28 + 1368);
    uint64_t v31 = *(void **)(v138 + 4208);
    uint64_t v144 = v31;
    while (1)
    {
      uint64_t v132 = v27;
      uint64_t v32 = *((int *)&v176 + v27);
      uint64_t v33 = *(unsigned int *)&v9[4 * v32 + 96];
      char v34 = v9[108] - byte_248550964[v33];
      char v35 = v9[109] - byte_248550968[v33];
      unint64_t v37 = v31[10];
      unint64_t v36 = v31[11];
      unint64_t v38 = a2 / v36;
      unint64_t v39 = v31[17];
      unint64_t v40 = v39 >> 3;
      unint64_t v41 = (v39 >> 3) * (a2 % v36);
      unint64_t v42 = (v39 >> 3) * v38;
      unint64_t v43 = v31[9];
      unint64_t v44 = v43 - v41;
      if (v43 < v41) {
        unint64_t v44 = 0;
      }
      if (v41 + (v39 >> 3) <= v43) {
        unint64_t v45 = v39 >> 3;
      }
      else {
        unint64_t v45 = v44;
      }
      unint64_t v46 = v42 + (v39 >> 3);
      unint64_t v47 = v37 - v42;
      if (v37 < v42) {
        unint64_t v47 = 0;
      }
      if (v46 <= v37) {
        unint64_t v48 = v40;
      }
      else {
        unint64_t v48 = v47;
      }
      unint64_t v49 = v41 >> v34;
      unint64_t v50 = v42 >> v35;
      char v131 = v34;
      unint64_t v51 = v45 >> v34;
      unint64_t v52 = v48 >> v35;
      uint64_t v53 = (unsigned int *)(v31[219] + 40 * (int)v32);
      if (v41 >> v34 >= 2) {
        uint64_t v54 = 2;
      }
      else {
        uint64_t v54 = v41 >> v34;
      }
      uint64_t v55 = *v53;
      if (v55 - (v51 + v49) >= 2) {
        uint64_t v56 = 2;
      }
      else {
        uint64_t v56 = v55 - (v51 + v49);
      }
      if (v50 >= 2) {
        uint64_t v57 = 2;
      }
      else {
        uint64_t v57 = v42 >> v35;
      }
      unint64_t v141 = v52 + v50;
      int v142 = v32;
      unint64_t v58 = v53[1] - (v52 + v50);
      if (v58 >= 2) {
        unint64_t v58 = 2;
      }
      unint64_t v140 = v45 >> v34;
      uint64_t v59 = v51 + v54 + v56;
      unint64_t v133 = v52;
      unint64_t v60 = v52 + v57 + v58;
      if (v59) {
        BOOL v61 = v60 == 0;
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61)
      {
        unint64_t __srca = v49 - v54;
        size_t v151 = 4 * v59;
        uint64_t v145 = 64 - 4 * v54;
        uint64_t v62 = *(void *)(v129 + 16);
        uint64_t v63 = *(void *)(v129 + 24) + v62 * (2 - v57);
        unint64_t v64 = v50 - v57;
        do
        {
          memcpy((void *)(v63 + v145), (const void *)(*((void *)v53 + 3) + *((void *)v53 + 2) * v64 + 4 * __srca), v151);
          v63 += v62;
          ++v64;
          --v60;
        }
        while (v60);
      }
      if (v133 != -4)
      {
        uint64_t v65 = 0;
        uint64_t v66 = (unsigned int *)v144[219];
        unint64_t v67 = ((unint64_t)v66[10 * v142] >> v131) - v49 + 16;
        unint64_t v68 = (unint64_t)*v66 >> v131;
        do
        {
          uint64_t v69 = 0;
          char v70 = 1;
          do
          {
            char v71 = v70;
            if (!v49) {
              *(_DWORD *)(*v29 + *v30 * v65 + 4 * (v69 ^ 0xF)) = *(_DWORD *)(*v29 + *v30 * v65 + ((4 * v69) | 0x40));
            }
            if (v49 + v140 + 2 >= v68) {
              *(_DWORD *)(*v29 + *v30 * v65 + 4 * (v69 + v67)) = *(_DWORD *)(*v29 + *v30 * v65 + 4 * (v67 + ~v69));
            }
            char v70 = 0;
            uint64_t v69 = 1;
          }
          while ((v71 & 1) != 0);
          ++v65;
        }
        while (v65 != v133 + 4);
      }
      unint64_t v72 = (uint64_t *)(v165.i64[0] + 40 * v142);
      uint64_t v74 = v72[1];
      unint64_t v73 = (char *)v72[2];
      uint64_t v75 = *v72;
      sub_248408C04(v173, 5uLL);
      sub_248408C7C(&v167, 1uLL, (uint64_t)v173);
      if (v173[0])
      {
        v173[1] = v173[0];
        operator delete(v173[0]);
      }
      sub_248408C04(&__p, 8uLL);
      sub_248408C7C(v173, 1uLL, (uint64_t)&__p);
      if (__p.i64[0])
      {
        __p.i64[1] = __p.i64[0];
        operator delete((void *)__p.i64[0]);
      }
      if (v50 < v141) {
        break;
      }
LABEL_66:
      __p.i64[0] = (uint64_t)v173;
      sub_2483EA640((void ***)&__p);
      v173[0] = (void **)&v167;
      sub_2483EA640(v173);
      uint64_t v27 = v132 + 1;
      uint64_t v9 = v156;
      uint64_t v31 = v144;
      if (v132 == 2)
      {
        a6 = v135;
        a4 = v134;
        unint64_t v10 = v130;
        goto LABEL_2;
      }
    }
    int v76 = v73;
    uint64_t v77 = *v30;
    uint64_t v78 = *v29;
    uint64_t v152 = *(void *)(v138 + 4216);
    uint64_t v79 = 4 * v74 - 64;
    unint64_t v80 = v50;
    while (1)
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        unint64_t v82 = (unint64_t)*(unsigned int *)(v144[219] + 40 * v142 + 4) >> v35;
        unint64_t v83 = i + v80 - 2;
        LOBYTE(v84) = (uint64_t)(i + v80) < 2;
        if ((uint64_t)(i + v80) < 2 || (uint64_t)v83 >= (uint64_t)v82)
        {
          do
          {
            unint64_t v85 = ~v83;
            if (v84) {
              uint64_t v86 = 0;
            }
            else {
              uint64_t v86 = 2 * v82;
            }
            unint64_t v83 = v86 + v85;
            unint64_t v84 = v83 >> 63;
          }
          while (v83 >= v82);
        }
        *(void *)(*(void *)v167.i64[0] + 8 * i) = v78 + v77 * (v83 - v50 + 2);
      }
      uint64_t v87 = 0;
      uint64_t v88 = *(void *)(v75 + 16);
      __srcb = v76;
      uint64_t v89 = v88 * (void)v76;
      do
      {
        *(void *)((char *)*v173[0] + v87) = *(void *)(v75 + 24) + v79 + v89;
        v87 += 8;
        v89 += v88;
      }
      while (v87 != 64);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, int64x2_t *, void ***, void, unint64_t, void, void, uint64_t))(*(void *)v152 + 16))(v152, &v167, v173, 0, v140, 0, 0, v139);
      if (v23) {
        break;
      }
      ++v80;
      int v76 = __srcb + 8;
      if (v80 == v141) {
        goto LABEL_66;
      }
    }
    __p.i64[0] = (uint64_t)v173;
    sub_2483EA640((void ***)&__p);
    v173[0] = (void **)&v167;
    sub_2483EA640(v173);
    goto LABEL_92;
  }
LABEL_2:
  unint64_t v150 = a2 % v10;
  unint64_t __src = a2 / v10;
  __p.i64[0] = a2 % v10 * v157;
  __p.i64[1] = a2 / v10 * v157;
  unint64_t v160 = v157;
  unint64_t v161 = v157;
  uint64_t v17 = *((void *)v9 + 170);
  unint64_t v18 = *(unsigned __int8 *)(v17 + a2);
  if (a6) {
    unint64_t v19 = *((unsigned int *)v9 + 40);
  }
  else {
    unint64_t v19 = v18 + a4;
  }
  if (v19 <= v18)
  {
    LOBYTE(v90) = 0;
LABEL_78:
    *(unsigned char *)(v17 + a2) = v18 + a4;
    if (v9[72])
    {
      char v143 = v90;
      char v137 = a6;
      int v97 = *(_DWORD *)(*((void *)v9 + 57) + 320);
      memset(v175, 0, sizeof(v175));
      long long v174 = 0u;
      memset(v173, 0, sizeof(v173));
      unint64_t v98 = *((unsigned int *)v9 + 79);
      if (v98)
      {
        unint64_t v99 = 0;
        int64x2_t v100 = vdupq_n_s64(v157);
        uint64_t v101 = 40 * (v97 + 3);
        int64x2_t v149 = v100;
        do
        {
          if (v98)
          {
            unint64_t v102 = 0;
            do
            {
              uint64_t v103 = 0;
              uint64_t v105 = v165.i64[0] + v101;
              do
              {
                unint64_t v106 = &v173[v103];
                *unint64_t v106 = *(void ***)(v105 + v103 * 8);
                int64x2_t v107 = *(int64x2_t *)(v105 + v103 * 8 + 8);
                uint64x2_t v108 = (uint64x2_t)vaddq_s64(*(int64x2_t *)(v105 + v103 * 8 + 24), v107);
                v104.i64[1] = v99 * v157;
                v104.i64[0] = v102 * v157;
                int64x2_t v109 = vaddq_s64(v107, v104);
                *(int64x2_t *)(v106 + 1) = v109;
                *(int8x16_t *)(v106 + 3) = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v109, v100), v108), (int8x16_t)vqsubq_u64(v108, (uint64x2_t)v109), (int8x16_t)v100);
                v103 += 5;
              }
              while (v103 != 15);
              uint64_t v110 = 0;
              unint64_t v111 = (*(void *)(*(void *)v9 + 4456) << 32)
                   - 0x61C8864680B583EBLL
                   + *(unsigned int *)(*(void *)v9 + 4464);
              uint64_t v112 = ((v102 + v98 * v150) * v157);
              uint64_t v113 = ((v99 + v98 * __src) * v157);
              unint64_t v114 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v111 ^ (v111 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v111 ^ (v111 >> 30))) >> 27));
              unint64_t v115 = v114 ^ (v114 >> 31);
              v167.i64[0] = v115;
              unint64_t v116 = 0xBF58476D1CE4E5B9
                   * (((v112 << 32) - 0x61C8864680B583EBLL + v113) ^ ((unint64_t)((v112 << 32)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + v113) >> 30));
              unint64_t v117 = (0x94D049BB133111EBLL * (v116 ^ (v116 >> 27))) ^ ((0x94D049BB133111EBLL * (v116 ^ (v116 >> 27))) >> 31);
              unint64_t v172 = v117;
              do
              {
                unint64_t v118 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) >> 27));
                unint64_t v115 = v118 ^ (v118 >> 31);
                uint64_t v119 = &v167.i8[v110];
                *((void *)v119 + 1) = v115;
                unint64_t v120 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v117 ^ (v117 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v117 ^ (v117 >> 30))) >> 27));
                unint64_t v117 = v120 ^ (v120 >> 31);
                *((void *)v119 + 9) = v117;
                v110 += 8;
              }
              while (v110 != 56);
              sub_24840C5A4(&v167, (uint64_t *)&v173[1], (uint64_t)v173[0]);
              sub_24840C5A4(&v167, v175, *((uint64_t *)&v174 + 1));
              sub_24840C5A4(&v167, &v175[5], v175[4]);
              ++v102;
              uint64_t v9 = v156;
              unint64_t v98 = *((unsigned int *)v156 + 79);
              int64x2_t v100 = v149;
            }
            while (v102 < v98);
          }
          ++v99;
        }
        while (v99 < v98);
      }
      LOBYTE(a6) = v137;
      LOBYTE(v90) = v143;
    }
    if (!v9[1034])
    {
      if ((v90 & 1) == 1)
      {
        uint64_t v122 = v162;
        ++*(unsigned char *)(*(void *)(v162 + 224) + v163);
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v122 + 32))(v122);
        if (v23) {
          goto LABEL_92;
        }
      }
      else if (a6)
      {
        uint64_t v23 = 1;
        goto LABEL_92;
      }
    }
    uint64_t v23 = 0;
    goto LABEL_92;
  }
  char v136 = a6;
  int v90 = 0;
  uint64_t v91 = (uint64_t)(v9 + 152);
  unint64_t v92 = v18 + a4;
  uint64_t v93 = (uint64_t)(v9 + 776);
  while (1)
  {
    int v94 = v90;
    LODWORD(v173[0]) = 0;
    LODWORD(v176) = 0;
    sub_248401470(v91, v18, v173, &v176);
    char v158 = 1;
    if (v18 >= v92)
    {
      v167.i32[0] = 5;
      v167.i64[1] = 0;
      uint64_t v168 = a2;
      unint64_t v169 = v18;
      uint64_t v96 = sub_24840AA5C(v93, v146, &__p, 0, (int)v173[0], v176, (uint64_t)&v167, 1, *(void *)v156, (uint64_t)&v162, &v158);
    }
    else
    {
      unint64_t v95 = *a3;
      v167.i32[0] = 5;
      v167.i64[1] = 0;
      uint64_t v168 = a2;
      unint64_t v169 = v18;
      uint64_t v96 = sub_24840AA5C(v93, v146, &__p, v95, (int)v173[0], v176, (uint64_t)&v167, 0, *(void *)v156, (uint64_t)&v162, &v158);
    }
    uint64_t v23 = v96;
    if (v96) {
      break;
    }
    int v90 = (v158 != 0) | v94;
    ++v18;
    ++a3;
    if (v19 == v18)
    {
      uint64_t v9 = v156;
      uint64_t v17 = *((void *)v156 + 170);
      LOBYTE(v18) = *(unsigned char *)(v17 + a2);
      LOBYTE(a6) = v136;
      goto LABEL_78;
    }
  }
LABEL_92:
  if (v165.i64[0])
  {
    v165.i64[1] = v165.i64[0];
    operator delete((void *)v165.i64[0]);
  }
  return v23;
}

void sub_248401110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,char a47)
{
  (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484011E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v12 = a1 + 120 * i;
      int v14 = *(_DWORD *)(v12 + 32);
      uint64_t v13 = v12 + 32;
      if (!v14)
      {
        sub_248401528((uint64_t)&v46, 0x20u, 0x20u);
        uint64_t result = v48;
        if (v48) {
          return result;
        }
        sub_2483F0E78((uint64_t)v45, (uint64_t)&v46);
        sub_2483F7944(v13, (uint64_t)v45);
        for (uint64_t j = 104; j != -16; j -= 40)
          sub_2483E8DDC((uint64_t *)&v45[j]);
        if (!v48)
        {
          for (uint64_t k = 104; k != -16; k -= 40)
            sub_2483E8DDC((uint64_t *)((char *)&v46 + k));
        }
      }
    }
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  do
  {
    if (((1 << v18) & v8) != 0
      && (byte_2485534EC[v18] * (unint64_t)byte_248553507[v18]) << 6 > v19)
    {
      unint64_t v19 = (byte_2485534EC[v18] * (unint64_t)byte_248553507[v18]) << 6;
    }
    ++v18;
  }
  while (v18 != 27);
  unint64_t v20 = *(void *)(a1 + 1464);
  if (v19 > v20)
  {
    *(void *)(a1 + 1464) = v19;
    if ((7 * v19) >> 62) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = sub_2483AB3A8(28 * v19, a2, a3, a4, a5, a6, a7, a8);
    }
    uint64_t v46 = 0;
    long long v47 = 0uLL;
    sub_248401764((uint64_t *)(a1 + 1392), v21);
    *(_OWORD *)(a1 + 1400) = v47;
    sub_2483FED94(&v46);
    unint64_t v29 = 0;
    if (!((unint64_t)(3 * *(void *)(a1 + 1464)) >> 62)) {
      unint64_t v29 = sub_2483AB3A8(12 * *(void *)(a1 + 1464), v22, v23, v24, v25, v26, v27, v28);
    }
    uint64_t v46 = 0;
    long long v47 = 0uLL;
    uint64_t v30 = *(void *)(a1 + 1416);
    *(void *)(a1 + 1416) = v29;
    if (v30)
    {
      uint64_t v31 = *(void (**)(void, void))(a1 + 1424);
      if (v31) {
        v31(*(void *)(a1 + 1432), *(void *)(v30 - 16));
      }
      else {
        free(*(void **)(v30 - 16));
      }
    }
    *(_OWORD *)(a1 + 1424) = v47;
    sub_2483FED40(&v46);
    uint64_t v39 = *(void *)(a1 + 1464);
    if (3 * v39 < 0) {
      unint64_t v40 = 0;
    }
    else {
      unint64_t v40 = sub_2483AB3A8(6 * v39, v32, v33, v34, v35, v36, v37, v38);
    }
    uint64_t v46 = 0;
    long long v47 = 0uLL;
    uint64_t v41 = *(void *)(a1 + 1440);
    *(void *)(a1 + 1440) = v40;
    if (v41)
    {
      unint64_t v42 = *(void (**)(void, void))(a1 + 1448);
      if (v42) {
        v42(*(void *)(a1 + 1456), *(void *)(v41 - 16));
      }
      else {
        free(*(void **)(v41 - 16));
      }
    }
    *(_OWORD *)(a1 + 1448) = v47;
    sub_2483FECEC(&v46);
    unint64_t v20 = *(void *)(a1 + 1464);
  }
  uint64_t result = 0;
  uint64_t v43 = *(void *)(a1 + 1392);
  uint64_t v44 = *(void *)(a1 + 1416);
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v44;
  *(void *)(a1 + 16) = *(void *)(a1 + 1440);
  *(void *)(a1 + 24) = v43 + 12 * v20;
  return result;
}

uint64_t sub_248401470(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = 0;
  *a4 = 2;
  *a3 = 3;
  while (1)
  {
    if (*(_DWORD *)(result + 12))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = result + 4 * v5;
        if (v4 == *(_DWORD *)(v6 + 60))
        {
          int v7 = *(_DWORD *)(v6 + 16);
          if (v7 == 8)
          {
            *a3 = 3;
            int v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 4)
          {
            *a3 = 2;
            int v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 2)
          {
            *a3 = 1;
            int v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 1) {
            *a3 = 0;
          }
        }
        ++v5;
      }
      while (v5 < *(unsigned int *)(result + 12));
    }
    if (v4 == *(_DWORD *)(result + 8) - 1) {
      *a3 = 0;
    }
    if (v4 == a2) {
      break;
    }
    *a4 = *a3 - 1;
    ++v4;
  }
  return result;
}

void sub_248401528(uint64_t a1, unsigned int a2, unsigned int a3)
{
  sub_2484017B8((uint64_t)&v35, a2, a3);
  if (v39)
  {
    *(_DWORD *)(a1 + 120) = v39;
  }
  else
  {
    sub_2484017B8((uint64_t)&v30, a2, a3);
    if (v34)
    {
      *(_DWORD *)(a1 + 120) = v34;
    }
    else
    {
      sub_2484017B8((uint64_t)&v25, a2, a3);
      if (v29)
      {
        *(_DWORD *)(a1 + 120) = v29;
      }
      else
      {
        long long v13 = v35;
        uint64_t v6 = v37;
        uint64_t v37 = 0;
        uint64_t v7 = v32;
        uint64_t v32 = 0;
        uint64_t v8 = v27;
        uint64_t v27 = 0;
        uint64_t v14 = v36;
        uint64_t v15 = v6;
        uint64_t v16 = v38;
        uint64_t v18 = v31;
        uint64_t v19 = v7;
        long long v17 = v30;
        uint64_t v20 = v33;
        long long v21 = v25;
        uint64_t v22 = v26;
        uint64_t v23 = v8;
        uint64_t v24 = v28;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2483F0E78(a1, (uint64_t)&v13);
        for (uint64_t i = 104; i != -16; i -= 40)
          sub_2483E8DDC((uint64_t *)((char *)&v13 + i));
        if (!v29)
        {
          uint64_t v10 = v27;
          uint64_t v27 = 0;
          if (v10)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v34)
      {
        uint64_t v11 = v32;
        uint64_t v32 = 0;
        if (v11)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v11 - 24));
          free(*(void **)(v11 - 32));
        }
      }
    }
    if (!v39)
    {
      uint64_t v12 = v37;
      uint64_t v37 = 0;
      if (v12)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
        free(*(void **)(v12 - 32));
      }
    }
  }
}

void sub_2484016F8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (!v3
    || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24)), free(*(void **)(v3 - 32)), !*(_DWORD *)(v1 - 40)))
  {
    uint64_t v4 = *(void *)(v1 - 56);
    *(void *)(v1 - 56) = 0;
    if (v4)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
      free(*(void **)(v4 - 32));
    }
  }
  _Unwind_Resume(a1);
}

void sub_248401764(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (void (*)(uint64_t, void))a1[1];
    if (v3)
    {
      v3(a1[2], *(void *)(v2 - 16));
    }
    else
    {
      uint64_t v4 = *(void **)(v2 - 16);
      free(v4);
    }
  }
}

double sub_2484017B8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(a3, a2);
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = 4 * a2 + 139;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x7FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x7FFFFFF80) + 128;
    }
  }
  long long v11 = (unint64_t)v4;
  uint64_t v12 = 4;
  if (sub_24841F648((uint64_t)&v10))
  {
    uint64_t v7 = *((void *)&v11 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((void *)&v11 + 1) = 0;
    if (v7)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
      uint64_t v8 = *(void **)(v7 - 32);
      free(v8);
    }
  }
  else
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v12;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_248401884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2484018B8()
{
}

void sub_248401BC4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 136);
  *(void *)(v2 - 136) = 0;
  if (!v4
    || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24)), free(*(void **)(v4 - 32)), !*(_DWORD *)(v2 - 72)))
  {
    uint64_t v5 = *(void *)(v2 - 88);
    *(void *)(v2 - 88) = 0;
    if (v5)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v5 - 24));
      free(*(void **)(v5 - 32));
    }
  }
  sub_248401C40(v1);
  _Unwind_Resume(a1);
}

void sub_248401C40(uint64_t a1)
{
  for (uint64_t i = 112; i != -8; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));

  JUMPOUT(0x24C579F90);
}

void sub_248401C9C()
{
}

void sub_248401DC4(_Unwind_Exception *a1)
{
  sub_248401C40(v1);
  _Unwind_Resume(a1);
}

BOOL sub_248401DD8(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) == 0;
}

void sub_248401DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 40 * a2;
  int v4 = *(_DWORD *)(v2 + 8);
  uint64_t v3 = (unsigned int *)(v2 + 8);
  if (v4 && v3[1])
  {
    unint64_t v5 = 0;
    do
      bzero((void *)(*((void *)v3 + 3) + *((void *)v3 + 2) * v5++), 4 * *v3);
    while (v5 < v3[1]);
  }
}

void sub_248401E54(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 8;
  unint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = v4;
  do
  {
    if (v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(unsigned int *)(a1 + 8);
        if (v7)
        {
          bzero((void *)(*(void *)(v3 + 40 * v2 + 24) + *(void *)(a1 + 24) * v6), 4 * v7);
          unint64_t v4 = *(unsigned int *)(a1 + 12);
        }
        ++v6;
        unint64_t v5 = v4;
      }
      while (v6 < v4);
    }
    ++v2;
  }
  while (v2 != 3);
}

uint64_t sub_248401EE4(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 2;
}

uint64_t sub_248401EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a1 + 40 * a2 + 32) + *(void *)(a1 + 24) * a3 + 4 * a4;
}

uint64_t sub_248401F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a1 + 40 * a2 + 32) + *(void *)(a1 + 24) * a3 + 4 * a4;
}

uint64_t sub_248401F28()
{
  return 1;
}

void sub_248401F30(uint64_t a1)
{
  for (uint64_t i = 112; i != -8; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));

  JUMPOUT(0x24C579F90);
}

uint64_t sub_248401F8C(uint64_t a1)
{
  for (uint64_t i = 112; i != -8; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));
  return a1;
}

double sub_248401FC8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(a3, a2);
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = 2 * a2 + 141;
    if ((v5 & 0x780) != 0) {
      uint64_t v4 = v5 & 0x3FFFFFF80;
    }
    else {
      uint64_t v4 = (v5 & 0x3FFFFFF80) + 128;
    }
  }
  long long v11 = (unint64_t)v4;
  uint64_t v12 = 2;
  if (sub_24841F648((uint64_t)&v10))
  {
    uint64_t v7 = *((void *)&v11 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((void *)&v11 + 1) = 0;
    if (v7)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v7 - 24));
      uint64_t v8 = *(void **)(v7 - 32);
      free(v8);
    }
  }
  else
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v12;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_248402094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2484020C8(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) == 0;
}

void sub_2484020E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 40 * a2;
  int v4 = *(_DWORD *)(v2 + 8);
  uint64_t v3 = (unsigned int *)(v2 + 8);
  if (v4 && v3[1])
  {
    unint64_t v5 = 0;
    do
      bzero((void *)(*((void *)v3 + 3) + *((void *)v3 + 2) * v5++), 2 * *v3);
    while (v5 < v3[1]);
  }
}

void sub_248402144(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 8;
  unint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = v4;
  do
  {
    if (v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(unsigned int *)(a1 + 8);
        if (v7)
        {
          bzero((void *)(*(void *)(v3 + 40 * v2 + 24) + *(void *)(a1 + 24) * v6), 2 * v7);
          unint64_t v4 = *(unsigned int *)(a1 + 12);
        }
        ++v6;
        unint64_t v5 = v4;
      }
      while (v6 < v4);
    }
    ++v2;
  }
  while (v2 != 3);
}

uint64_t sub_2484021D4(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 1;
}

uint64_t sub_2484021E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a1 + 40 * a2 + 32) + *(void *)(a1 + 24) * a3 + 2 * a4;
}

uint64_t sub_2484021FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a1 + 40 * a2 + 32) + *(void *)(a1 + 24) * a3 + 2 * a4;
}

uint64_t sub_248402218()
{
  return 0;
}

void sub_248402220(uint64_t a1)
{
  for (uint64_t i = 112; i != -8; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));

  JUMPOUT(0x24C579F90);
}

uint64_t sub_24840227C(uint64_t a1)
{
  for (uint64_t i = 112; i != -8; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));
  return a1;
}

void sub_2484022B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a1 + 8);
  sub_2483EA640(&v4);

  sub_2483E8DDC((uint64_t *)a1);
}

uint64_t sub_248402324(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = sub_2483F26D4(a1 + 88);
  *(void *)(a1 + 136) = 0;
  return result;
}

void sub_248402370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(void **)(v10 + 56);
  if (v12)
  {
    *(void *)(v10 + 64) = v12;
    operator delete(v12);
  }
  long long v13 = *(void **)(v10 + 32);
  if (v13)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  a10 = (void **)(v10 + 8);
  sub_2483EA640(&a10);
  sub_2483E8DDC((uint64_t *)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2484023B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_2484022B8(i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_248402404(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(void *)(a1 + 1560) = 0;
  do
  {
    unsigned int v3 = atomic_load((unsigned int *)(a1 + 4472));
    if ((v3 >> v2))
    {
      unint64_t v4 = qword_24854EFA0[3 * byte_24854FEF4[v2] + 3] << 6;
      if (v4 <= *(void *)(a1 + 1560)) {
        unint64_t v4 = *(void *)(a1 + 1560);
      }
      *(void *)(a1 + 1560) = v4;
    }
    ++v2;
  }
  while (v2 != 27);
  unint64_t v5 = *(void *)(a1 + 1560) * a2;
  if (v5 > (uint64_t)(*(void *)(a1 + 1576) - *(void *)(a1 + 1568)) >> 2) {
    sub_2483EB1C4((char **)(a1 + 1568), v5);
  }
}

uint64_t sub_248402488(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(result + 8);
  unsigned int v3 = (int *)*v2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)v2[5]);
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = a2;
    uint64_t v6 = *(void *)(*v2[1] + 8 * a2);
    if (v6 != *v2[2])
    {
      uint64_t v7 = *(unint64_t **)(*v2[3] + 24 * v6);
      unint64_t v8 = *((void *)v3 + 90);
      if (!v3[15] && (v3[18] & 0x20) == 0)
      {
        uint64_t v9 = *(void *)v3;
        uint64_t v10 = *(void **)(*(void *)v3 + 4208);
        unint64_t v11 = v10[13];
        uint64_t v12 = v10[17];
        unint64_t v13 = v12 * (a2 / v11);
        unint64_t v15 = v10[9];
        unint64_t v14 = v10[10];
        unint64_t v191 = v12 * (a2 % v11);
        unint64_t v192 = v13;
        uint64_t v16 = v15 - v191;
        if (v15 < v191) {
          uint64_t v16 = 0;
        }
        if (v191 + v12 <= v15) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v16;
        }
        unint64_t v18 = v13 + v12;
        BOOL v19 = v14 >= v13;
        uint64_t v20 = v14 - v13;
        if (!v19) {
          uint64_t v20 = 0;
        }
        if (v18 <= v14) {
          uint64_t v21 = v12;
        }
        else {
          uint64_t v21 = v20;
        }
        uint64_t v193 = v17;
        uint64_t v194 = v21;
        sub_24842A0C4((uint64_t)&v183, v17, v21, v3[210], 3);
        if (v190) {
          goto LABEL_54;
        }
        long long v176 = v183;
        long long v183 = 0uLL;
        long long v178 = v185;
        uint64_t v177 = v184;
        uint64_t v179 = v186;
        uint64_t v184 = 0;
        long long v185 = 0uLL;
        uint64_t v186 = 0;
        long long v180 = v187;
        long long v181 = v188;
        char v182 = v189;
        LODWORD(v148) = 1;
        *((void *)&v148 + 1) = 0;
        uint64_t v149 = v5;
        unint64_t v150 = 0;
        uint64_t v139 = sub_24840A1D8((uint64_t)&v148, *((void *)v3 + 125), *((void *)v3 + 126));
        uint64_t v23 = (void *)v7[2];
        unint64_t v22 = v7[3];
        if ((unint64_t)v23 > v22)
        {
          sub_2483EB0C0(v7);
          uint64_t v26 = (void *)v7[2];
          unint64_t v22 = v7[3];
        }
        else
        {
          unint64_t v24 = v7[1];
          unint64_t v25 = *v7 | (*v23 << v24);
          uint64_t v26 = (void *)((char *)v23 + ((63 - v24) >> 3));
          *uint64_t v7 = v25;
          v7[1] = v24 | 0x38;
          v7[2] = (unint64_t)v26;
        }
        uint64_t v137 = v9;
        if ((unint64_t)v26 > v22)
        {
          sub_2483EB0C0(v7);
          unint64_t v28 = *v7;
          uint64_t v29 = v7[1];
        }
        else
        {
          unint64_t v27 = v7[1];
          unint64_t v28 = *v7 | (*v26 << v27);
          uint64_t v29 = v27 | 0x38;
          *uint64_t v7 = v28;
          v7[1] = v27 | 0x38;
          v7[2] = (unint64_t)v26 + ((63 - v27) >> 3);
        }
        *uint64_t v7 = v28 >> 2;
        v7[1] = v29 - 2;
        long long v148 = xmmword_2484DCB30;
        uint64_t v149 = 1056964608;
        long long v30 = operator new(0x20uLL);
        uint64_t v31 = 0;
        *long long v30 = xmmword_24855076C;
        v30[1] = unk_24855077C;
        uint64_t v155 = 0xFFFFFFFFLL;
        long long v158 = xmmword_2484DCB20;
        size_t v151 = v30 + 2;
        uint64_t v152 = v30 + 2;
        unint64_t v150 = v30;
        int v153 = 1119879168;
        uint64_t v154 = 32;
        uint64_t v156 = 0x33F8147AELL;
        char v157 = 0;
        int v159 = 2;
        uint64x2_t __p = 0;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = -1;
        int v164 = 256;
        char v165 = 0;
        char v166 = 0;
        do
        {
          uint64_t v32 = v31 ^ 1;
          if (v31 == 2) {
            uint64_t v32 = 2;
          }
          uint64_t v33 = v176 + (v32 << 6);
          uint64_t v34 = v3[v31 + 24];
          unint64_t v35 = *(void *)(v33 + 48);
          *(void *)(v33 + 40) >>= *((unsigned char *)v3 + 108) - byte_248550964[v34];
          *(void *)(v33 + 48) = v35 >> (*((unsigned char *)v3 + 109) - byte_248550968[v34]);
          if (sub_24840A0F4(v33)) {
            goto LABEL_26;
          }
          ++v31;
        }
        while (v31 != 3);
        if (sub_24842980C(v7, (uint64_t)&v176, 0, v139, (unint64_t *)&v148, 1, (void *)v3 + 130, (unsigned char *)v3 + 1064, (uint64_t)(v3 + 302)))
        {
LABEL_26:
          char v36 = 0;
          goto LABEL_27;
        }
        sub_2483F1A40(&v191, (void *)(v137 + 1632), v137 + 1592, (uint64_t)&v176, (float *)(*(void *)(v137 + 4208) + 952), (float *)(*(void *)(v137 + 4208) + 1184), (uint64_t)(v3 + 22), (int **)(*(void *)(v137 + 4208) + 1760), 1.0 / (float)(1 << (v28 & 3)));
        char v36 = 1;
LABEL_27:
        operator delete(v30);
        *(void *)&long long v148 = &v178;
        sub_2483FDBFC((void ***)&v148);
        *(void *)&long long v148 = &v176;
        sub_2483FDCBC((void ***)&v148);
        uint64_t result = sub_24840A478((uint64_t)&v183);
        if ((v36 & 1) == 0) {
          goto LABEL_55;
        }
      }
      uint64_t v37 = *((void *)v3 + 95);
      v142.i64[0] = v37 * (v5 % v8);
      v142.i64[1] = v37 * (v5 / v8);
      uint64_t v143 = v37;
      uint64_t v144 = v37;
      LODWORD(v148) = 2;
      *((void *)&v148 + 1) = 0;
      uint64_t v149 = v5;
      unint64_t v150 = 0;
      uint64_t result = sub_24840AA5C((uint64_t)(v3 + 194), (uint64_t)(v3 + 12), &v142, v7, 3, 1000, (uint64_t)&v148, 0, 0, 0, 0);
      if (result)
      {
LABEL_55:
        atomic_store(1u, (unsigned __int8 *)v2[5]);
        return result;
      }
      if (v3[15])
      {
        if (v3[125])
        {
          uint64_t v38 = *(void *)v3;
          uint64_t v39 = *(unsigned int *)(*(void *)v3 + 4284);
          if (v39)
          {
            uint64_t v40 = 0;
            uint64_t v41 = *(float **)(v38 + 4304);
            uint64_t v42 = *(void *)(v38 + 4296);
            uint64_t v43 = *(unsigned int *)(v38 + 4280);
            float v44 = -1.1716 / *((float *)v3 + 146);
            do
            {
              unint64_t v45 = v41;
              uint64_t v46 = v43;
              if (v43)
              {
                do
                {
                  *v45++ = v44;
                  --v46;
                }
                while (v46);
              }
              ++v40;
              uint64_t v41 = (float *)((char *)v41 + v42);
            }
            while (v40 != v39);
          }
        }
        goto LABEL_36;
      }
      uint64_t v47 = *(void *)v3;
      unsigned int v48 = *(void **)(*(void *)v3 + 4208);
      unint64_t v49 = v48[13];
      uint64_t v50 = v48[17];
      unint64_t v51 = v50 * (v5 % v49);
      unint64_t v52 = v50 * (v5 / v49);
      unint64_t v54 = v48[9];
      unint64_t v53 = v48[10];
      unint64_t v191 = v51;
      unint64_t v192 = v52;
      unint64_t v55 = v54 - v51;
      if (v54 < v51) {
        unint64_t v55 = 0;
      }
      if (v51 + v50 <= v54) {
        unint64_t v55 = v50;
      }
      uint64_t v56 = v53 - v52;
      if (v53 < v52) {
        uint64_t v56 = 0;
      }
      if (v52 + v50 <= v53) {
        uint64_t v57 = v50;
      }
      else {
        uint64_t v57 = v56;
      }
      uint64_t v193 = v55;
      uint64_t v194 = v57;
      unint64_t v141 = v55;
      unint64_t v58 = v55 * v57;
      unint64_t v60 = (void *)v7[2];
      unint64_t v59 = v7[3];
      if ((unint64_t)v60 > v59)
      {
        sub_2483EB0C0(v7);
        uint64_t v63 = (void *)v7[2];
        unint64_t v59 = v7[3];
      }
      else
      {
        unint64_t v61 = v7[1];
        unint64_t v62 = *v7 | (*v60 << v61);
        uint64_t v63 = (void *)((char *)v60 + ((63 - v61) >> 3));
        *uint64_t v7 = v62;
        v7[1] = v61 | 0x38;
        v7[2] = (unint64_t)v63;
      }
      unint64_t v64 = __clz(v58) ^ 0x3F;
      if ((v58 & (v58 - 1)) != 0) {
        unint64_t v65 = v64 + 1;
      }
      else {
        unint64_t v65 = v64;
      }
      uint64_t v138 = v47;
      unint64_t v140 = v51;
      if ((unint64_t)v63 > v59)
      {
        sub_2483EB0C0(v7);
        unint64_t v67 = *v7;
        uint64_t v68 = v7[1];
      }
      else
      {
        unint64_t v66 = v7[1];
        unint64_t v67 = *v7 | (*v63 << v66);
        uint64_t v68 = v66 | 0x38;
        *uint64_t v7 = v67;
        v7[1] = v66 | 0x38;
        v7[2] = (unint64_t)v63 + ((63 - v66) >> 3);
      }
      *uint64_t v7 = v67 >> v65;
      v7[1] = v68 - v65;
      LODWORD(v148) = 3;
      *((void *)&v148 + 1) = 0;
      uint64_t v149 = v5;
      unint64_t v150 = 0;
      uint64_t v69 = sub_24840A1D8((uint64_t)&v148, *((void *)v3 + 125), *((void *)v3 + 126));
      sub_24842A0C4((uint64_t)&v183, v141, v57, v3[210], 4);
      if (v190)
      {
LABEL_54:
        uint64_t result = sub_24840A478((uint64_t)&v183);
        goto LABEL_55;
      }
      unint64_t v132 = v67;
      char v134 = v65;
      uint64_t v130 = v69;
      long long v176 = v183;
      long long v183 = 0uLL;
      long long v178 = v185;
      uint64_t v177 = v184;
      uint64_t v179 = v186;
      uint64_t v184 = 0;
      long long v185 = 0uLL;
      uint64_t v186 = 0;
      long long v180 = v187;
      long long v181 = v188;
      char v182 = v189;
      unint64_t v129 = v52;
      unint64_t v70 = v52 >> 3;
      unint64_t v71 = (v141 + 7) >> 3;
      unint64_t v72 = (unint64_t)(v57 + 7) >> 3;
      v173[0] = v140 >> 3;
      v173[1] = v70;
      unint64_t v174 = v71;
      unint64_t v175 = v72;
      sub_2484017B8((uint64_t)&v148, v71, v72);
      if (v152)
      {
        int v73 = 1;
        goto LABEL_71;
      }
      uint64_t v74 = v57;
      long long v75 = v148;
      long long v171 = v148;
      uint64_t v76 = v149;
      uint64_t v77 = v150;
      uint64_t v172 = v149;
      uint64_t v78 = v151;
      uint64_t v79 = v176;
      *(void *)(v176 + 40) = v71;
      *(void *)(v79 + 48) = v72;
      *(void *)(v79 + 56) = 0x300000003;
      *(_OWORD *)uint64_t v79 = v75;
      uint64_t v80 = *(void *)(v79 + 24);
      *(void *)(v79 + 16) = v76;
      *(void *)(v79 + 24) = v77;
      if (v80)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v80 - 24));
        free(*(void **)(v80 - 32));
        unint64_t v71 = v174;
        unint64_t v72 = v175;
      }
      *(void *)(v79 + 32) = v78;
      sub_2484017B8((uint64_t)&v148, v71, v72);
      int v73 = (int)v152;
      if (v152) {
        goto LABEL_71;
      }
      uint64_t v81 = v132 & ~(-1 << v134);
      uint64_t v135 = v81 + 1;
      long long v82 = v148;
      long long v169 = v148;
      uint64_t v83 = v149;
      unint64_t v84 = v150;
      uint64_t v170 = v149;
      unint64_t v85 = v151;
      uint64_t v86 = v176;
      *(void *)(v176 + 104) = v71;
      *(void *)(v86 + 112) = v72;
      *(void *)(v86 + 120) = 0x300000003;
      *(_OWORD *)(v86 + 64) = v82;
      uint64_t v87 = *(void *)(v86 + 88);
      *(void *)(v86 + 80) = v83;
      *(void *)(v86 + 88) = v84;
      if (v87)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v87 - 24));
        free(*(void **)(v87 - 32));
      }
      *(void *)(v86 + 96) = v85;
      sub_2484017B8((uint64_t)&v148, v135, 2u);
      unint64_t v88 = v140;
      int v73 = (int)v152;
      if (v152)
      {
LABEL_71:
        *(void *)&long long v148 = &v178;
        sub_2483FDBFC((void ***)&v148);
        *(void *)&long long v148 = &v176;
        sub_2483FDCBC((void ***)&v148);
        uint64_t result = sub_24840A478((uint64_t)&v183);
        if (!v73)
        {
LABEL_36:
          *(unsigned char *)(*((void *)v3 + 173) + v5) = 1;
          *(_DWORD *)(*v2[4] + 4 * *(void *)(*v2[1] + 8 * v5)) = 0;
          return result;
        }
        goto LABEL_55;
      }
      unint64_t v133 = v81;
      long long v89 = v148;
      long long v167 = v148;
      uint64_t v91 = v149;
      int v90 = v150;
      uint64_t v168 = v149;
      unint64_t v92 = v151;
      uint64_t v93 = v176;
      *(void *)(v176 + 168) = v135;
      *(void *)(v93 + 176) = 2;
      *(void *)(v93 + 184) = 0;
      *(void *)(v93 + 144) = v91;
      *(_OWORD *)(v93 + 128) = v89;
      sub_2483EB138((uint64_t *)(v93 + 152), (uint64_t)v90);
      *(void *)(v93 + 160) = v92;
      long long v148 = xmmword_2484DCB30;
      uint64_t v149 = 1056964608;
      int v94 = operator new(0x20uLL);
      size_t v151 = v94 + 2;
      uint64_t v152 = v94 + 2;
      *int v94 = xmmword_24855076C;
      v94[1] = unk_24855077C;
      unint64_t v150 = v94;
      int v153 = 1119879168;
      uint64_t v154 = 32;
      uint64_t v155 = 0xFFFFFFFFLL;
      uint64_t v156 = 0x33F8147AELL;
      char v157 = 0;
      long long v158 = xmmword_2484DCB20;
      int v159 = 2;
      uint64x2_t __p = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = -1;
      int v164 = 256;
      char v165 = 0;
      char v166 = 0;
      uint64_t v95 = v138;
      if (!sub_24842980C(v7, (uint64_t)&v176, 0, v130, (unint64_t *)&v148, 1, (void *)v3 + 130, (unsigned char *)v3 + 1064, (uint64_t)(v3 + 302)))
      {
        *(void *)&long long v96 = *(void *)v176;
        *((void *)&v96 + 1) = HIDWORD(*(void *)v176);
        uint64_t v145 = 0;
        uint64_t v146 = 0;
        long long v147 = v96;
        sub_24840BCB4(&v145, v176, v173, v138 + 1104);
        uint64_t v145 = 0;
        uint64_t v146 = 0;
        uint64_t v97 = *(void *)(v176 + 64);
        *(void *)&long long v96 = v97;
        *((void *)&v96 + 1) = HIDWORD(v97);
        long long v147 = v96;
        sub_24840BCB4(&v145, v176 + 64, v173, v138 + 1144);
        BOOL v136 = sub_2483F179C((uint64_t)(v3 + 22));
        unint64_t v98 = *(unsigned int *)(v138 + 152);
        if (v141 + v140 < v98) {
          unint64_t v98 = v141 + v140;
        }
        unint64_t v131 = v98;
        if (!v74)
        {
          unsigned int v101 = 0;
LABEL_112:
          atomic_fetch_or((atomic_uint *volatile)(v95 + 4472), v101);
          if (v3[125]) {
            sub_24841989C((unint64_t)(v3 + 116), &v191, (void *)v95);
          }
          int v73 = 0;
          goto LABEL_67;
        }
        unint64_t v99 = 0;
        uint64_t v100 = 0;
        unsigned int v101 = 0;
        if (v74 + v129 >= *(unsigned int *)(v138 + 156)) {
          unint64_t v102 = *(unsigned int *)(v138 + 156);
        }
        else {
          unint64_t v102 = v74 + v129;
        }
        if (v141 <= 1) {
          uint64_t v103 = 1;
        }
        else {
          uint64_t v103 = v141;
        }
        unint64_t v104 = v141;
        uint64_t v122 = v74;
        uint64_t v119 = v103;
        unint64_t v120 = v102;
        while (!v104)
        {
LABEL_109:
          if (++v100 == v74) {
            goto LABEL_112;
          }
        }
        uint64_t v105 = 0;
        uint64_t v106 = v129 + v100;
        uint64_t v125 = *(void *)(v95 + 1048) + *(void *)(v95 + 1040) * (v129 + v100) + 4 * v88;
        uint64_t v126 = v129 + v100;
        unint64_t v107 = *(void *)(v95 + 1088) + *(void *)(v95 + 1080) * (v129 + v100) + v88;
        uint64_t v128 = *(void *)(v176 + 152);
        uint64_t v123 = v128 + *(void *)(v176 + 144);
        unint64_t v124 = v107;
        unint64_t v108 = ((v129 + v100) & 0xFFFFFFFFFFFFFFE0) + 32;
        if (v108 >= v102) {
          unint64_t v108 = v102;
        }
        unint64_t v127 = v108;
        uint64_t v121 = v100;
        int64x2_t v109 = (unsigned int *)(*(void *)(v176 + 216) + *(void *)(v176 + 208) * v100);
        while (1)
        {
          unsigned int v111 = *v109++;
          char v110 = v111;
          if (v111 > 7) {
            break;
          }
          uint64_t v112 = v88 + v105;
          *(unsigned char *)(v107 + v105) = v110;
          if (*(unsigned __int8 *)(*(void *)(v95 + 192) + v88 + v105 + *(void *)(v95 + 200) * v106) == 255)
          {
            if (v99 > v133) {
              break;
            }
            uint64_t v113 = *(unsigned int *)(v128 + 4 * v99);
            if (v113 > 0x1A) {
              break;
            }
            if ((0x7FC0EB0uLL >> v113))
            {
              if (!v136) {
                break;
              }
            }
            else
            {
              char v114 = v136;
              if (((0x7FC0D70uLL >> v113) & 1) == 0) {
                char v114 = 1;
              }
              if ((v114 & 1) == 0) {
                break;
              }
            }
            unint64_t v115 = v112 + byte_2485534EC[v113];
            BOOL v116 = v115 > (v112 & 0xFFFFFFFFFFFFFFE0) + 32 || v115 > v131;
            if (v116 || v106 + (unint64_t)byte_248553507[v113] > v127) {
              break;
            }
            unint64_t v117 = v99;
            int v73 = 1;
            if (sub_24840BD3C(v138 + 152, v112, v106, *(_DWORD *)(v128 + 4 * v99), 1)) {
              goto LABEL_67;
            }
            v101 |= 1 << v113;
            unint64_t v107 = v124;
            int v118 = *(_DWORD *)(v123 + 4 * v117);
            if (v118 >= 255) {
              int v118 = 255;
            }
            uint64_t v106 = v126;
            *(_DWORD *)(v125 + 4 * v105) = (v118 & ~(v118 >> 31)) + 1;
            unint64_t v99 = v117 + 1;
            uint64_t v95 = v138;
            unint64_t v88 = v140;
            uint64_t v74 = v122;
          }
          ++v105;
          if (!--v103)
          {
            unint64_t v104 = v141;
            unint64_t v102 = v120;
            uint64_t v100 = v121;
            uint64_t v103 = v119;
            goto LABEL_109;
          }
        }
      }
      int v73 = 1;
LABEL_67:
      if (__p) {
        operator delete(__p);
      }
      if (v150) {
        operator delete(v150);
      }
      goto LABEL_71;
    }
  }
  return result;
}

void sub_248403024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_24840A434(&a39);
  sub_2484039E8((void **)&STACK[0x210]);
  sub_24840A478(v39 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_248403068(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

float sub_248403090(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 v4 = (void *)a2[2];
  if ((unint64_t)v4 > a2[3])
  {
    sub_2483EB0C0(a2);
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  else
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = *a2 | (*v4 << v5);
    a2[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    uint64_t v7 = v5 | 0x38;
  }
  *a2 = v6 >> 1;
  a2[1] = v7 - 1;
  if ((v6 & 1) == 0)
  {
    unsigned int v8 = sub_24841AE94(0x8000010080000054, 0x204F00000047, a2);
    float v9 = *(float *)(a1 + 108);
    float v10 = 1.0 / (float)v8;
    int v11 = *(_DWORD *)(a1 + 116);
    float v12 = *(float *)(a1 + 104) + (float)((float)*(int *)(a1 + 112) * v10);
    *(_DWORD *)(a1 + 96) = v8;
    *(float *)(a1 + 100) = v10;
    *(float *)(a1 + 80) = v12;
    *(float *)(a1 + 88) = v9 + (float)((float)v11 * v10);
    if (!sub_24841A984(a2, (float *)(a1 + 104)))
    {
      float result = fabsf(*(float *)(a1 + 104));
      if (result <= 4.0 && !sub_24841A984(a2, (float *)(a1 + 108)))
      {
        float result = fabsf(*(float *)(a1 + 108));
        if (result <= 4.0)
        {
          unint64_t v15 = (void *)a2[2];
          unint64_t v14 = a2[3];
          if ((unint64_t)v15 > v14)
          {
            sub_2483EB0C0(a2);
            unint64_t v17 = *a2;
            uint64_t v19 = a2[1];
            unint64_t v18 = (void *)a2[2];
            unint64_t v14 = a2[3];
          }
          else
          {
            unint64_t v16 = a2[1];
            unint64_t v17 = *a2 | (*v15 << v16);
            unint64_t v18 = (void *)((char *)v15 + ((63 - v16) >> 3));
            a2[2] = (unint64_t)v18;
            uint64_t v19 = v16 | 0x38;
          }
          uint64_t v20 = v19 - 8;
          unint64_t v21 = v17 >> 8;
          *a2 = v17 >> 8;
          a2[1] = v19 - 8;
          int v22 = v17 - 128;
          *(_DWORD *)(a1 + 112) = v22;
          if ((unint64_t)v18 > v14)
          {
            sub_2483EB0C0(a2);
            unint64_t v23 = *a2;
            uint64_t v24 = a2[1];
            int v22 = *(_DWORD *)(a1 + 112);
          }
          else
          {
            unint64_t v23 = (*v18 << v20) | v21;
            a2[2] = (unint64_t)v18 + ((unint64_t)(71 - v19) >> 3);
            uint64_t v24 = v20 | 0x38;
          }
          *a2 = v23 >> 8;
          a2[1] = v24 - 8;
          int v25 = v23 - 128;
          *(_DWORD *)(a1 + 116) = v25;
          float v26 = *(float *)(a1 + 100);
          *(float *)(a1 + 80) = *(float *)(a1 + 104) + (float)((float)v22 * v26);
          float result = *(float *)(a1 + 108) + (float)((float)v25 * v26);
          *(float *)(a1 + 88) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_248403294(uint64_t result, unsigned int *a2)
{
  unint64_t v2 = a2[1];
  if (v2)
  {
    unint64_t v3 = 0;
    LODWORD(v4) = *a2;
    do
    {
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = *((void *)a2 + 3) + *((void *)a2 + 2) * v3;
        do
        {
          *(unsigned char *)(v6 + v5++) = result;
          unint64_t v4 = *a2;
        }
        while (v5 < v4);
        unint64_t v2 = a2[1];
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

char *sub_2484032DC(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2483E92E8();
  }
  float result = (char *)sub_2483F04AC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_24840331C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = sub_2484032DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24840337C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_248403398(uint64_t a1)
{
  *(unsigned char *)(a1 + 48) = 1;
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL result = 0;
  if (v1)
  {
    unint64_t v2 = 8 * (*(void *)(a1 + 16) - v1 + *(void *)(a1 + 40)) - *(void *)(a1 + 8);
    if (v2 > *(void *)(a1 + 56) && v2 > 8 * (*(void *)(a1 + 24) - v1) + 64) {
      return 1;
    }
  }
  return result;
}

char *sub_2484033F4(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_2483E92E8();
  }
  BOOL result = (char *)sub_248403444(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_248403444(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    sub_2483E9338();
  }
  return operator new(40 * a1);
}

void sub_24840348C(uint64_t a1, uint64_t a2)
{
  *(float *)(a1 + 4272) = powf(0.8, (float)*(unsigned int *)(a2 + 68) + -2.0);
  *(float *)(a1 + 4276) = powf(0.8, (float)*(unsigned int *)(a2 + 72) + -2.0);
  *(_OWORD *)(a1 + 4384) = 0u;
  *(void *)(a1 + 4400) = 0;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(void *)(a1 + 4432) = *(void *)(a1 + 4424);
  *(_WORD *)(a1 + 4448) = 0;
  *(_DWORD *)(a1 + 4452) = 1;
  atomic_store(0, (unsigned int *)(a1 + 4472));
  sub_2484BD43C();
}

void sub_248403628(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_248403910(v3 - 560);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_248403688(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_248403910(v4 - 560);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64x2_t *sub_24840370C(uint64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_2484037C4(a2);
  uint64_t v5 = sub_2484037EC(a2);
  if (*(_DWORD *)(a2 + 260)) {
    unint64_t v6 = *(unsigned int *)(a2 + 260);
  }
  else {
    unint64_t v6 = v4;
  }
  if (*(_DWORD *)(a2 + 264)) {
    unint64_t v7 = *(unsigned int *)(a2 + 264);
  }
  else {
    unint64_t v7 = v5;
  }
  int v8 = *(_DWORD *)(a2 + 404);
  if (v8)
  {
    unint64_t v9 = 1 << (3 * v8);
    unint64_t v6 = (v6 + v9 - 1) / v9;
    unint64_t v7 = (v7 + v9 - 1) / v9;
  }
  unint64_t v10 = *(unsigned int *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 60);
  char v12 = *(unsigned char *)(a2 + 61);
  BOOL v13 = *(_DWORD *)(a2 + 12) == 1;
  unint64_t v14 = *(unsigned int *)(a2 + 268);

  return sub_24840383C(a1, v6, v7, v10, v11, v12, v13, v14);
}

uint64_t sub_2484037C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 408);
  if (!v1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 560)) {
    return sub_24841D7BC(v1 + 352);
  }
  return sub_24841D660(v1 + 424);
}

uint64_t sub_2484037EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 408);
  if (v1)
  {
    if (*(unsigned char *)(a1 + 560))
    {
      if (*(unsigned char *)(v1 + 360)) {
        LODWORD(v1) = 8 * *(_DWORD *)(v1 + 364);
      }
      else {
        LODWORD(v1) = *(_DWORD *)(v1 + 368);
      }
    }
    else if (*(unsigned char *)(v1 + 432))
    {
      LODWORD(v1) = 8 * *(_DWORD *)(v1 + 436) + 8;
    }
    else
    {
      LODWORD(v1) = *(_DWORD *)(v1 + 440);
    }
  }
  return v1;
}

uint64x2_t *sub_24840383C(uint64x2_t *result, uint64_t a2, uint64_t a3, unint64_t a4, char a5, char a6, int a7, unint64_t a8)
{
  uint64x2_t v8 = vshlq_u64((uint64x2_t)xmmword_2484DCB40, (uint64x2_t)vdupq_n_s64(a4));
  result[8] = v8;
  result[1].i64[0] = a2;
  result[1].i64[1] = a3;
  unint64_t v9 = (a8 - 1 + a2) / a8;
  unint64_t v10 = (a8 - 1 + a3) / a8;
  result->i64[0] = v9;
  result->i64[1] = v10;
  unint64_t v11 = (v9 - 1 + (8 << a5)) >> (a5 + 3) << a5;
  unint64_t v12 = (v10 - 1 + (8 << a6)) >> (a6 + 3) << a6;
  result[4].i64[0] = v11;
  result[4].i64[1] = v12;
  unint64_t v13 = 8 * v11;
  unint64_t v14 = 8 * v12;
  result[3].i64[0] = 8 * v11;
  result[3].i64[1] = 8 * v12;
  if (a7)
  {
    result[3].i64[0] = v9;
    result[3].i64[1] = v10;
    unint64_t v14 = (a8 - 1 + a3) / a8;
    unint64_t v13 = (a8 - 1 + a2) / a8;
  }
  result[2].i64[0] = v13 * a8;
  result[2].i64[1] = v14 * a8;
  unint64_t v15 = (v9 - 1 + v8.i64[0]) >> (a4 + 7);
  unint64_t v16 = (v10 - 1 + v8.i64[0]) >> (a4 + 7);
  result[5].i64[0] = v15;
  result[5].i64[1] = v16;
  unint64_t v17 = (v8.i64[0] - 1 + v11) >> (a4 + 7);
  unint64_t v18 = (v8.i64[0] - 1 + v12) >> (a4 + 7);
  result[6].i64[0] = v17;
  result[6].i64[1] = v18;
  result[7].i64[0] = v16 * v15;
  result[7].i64[1] = v18 * v17;
  return result;
}

uint64_t sub_248403910(uint64_t a1)
{
  if (*(_DWORD *)a1 == 7)
  {
    uint64_t v2 = *(void *)(a1 + 224);
    if (v2)
    {
      uint64_t v3 = *(void **)v2;
      if (*(void *)v2)
      {
        *(void *)(v2 + 8) = v3;
        operator delete(v3);
      }
      MEMORY[0x24C579F90](v2, 0x10C402FEFCB83);
    }
  }
  return a1;
}

uint64_t sub_248403970(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65960;
  uint64_t v4 = (void **)(a1 + 344);
  sub_2483FDB3C(&v4);
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return a1;
}

void **sub_2484039E8(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_2483FDBFC(&v3);
  uint64_t v3 = a1;
  sub_2483FDCBC(&v3);
  return a1;
}

BOOL sub_248403A30(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_2483FFCF8(*a3, 1uLL, *(void *)(*a3 + 1368) - *(void *)(*a3 + 1360))) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_248403AF0((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, void *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_248403BB4, sub_248403AF0, 0, a2) != 0;
}

uint64_t sub_248403AF0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = *(void *)v3;
  unsigned __int8 v5 = atomic_load(*(unsigned __int8 **)(v3 + 8));
  if ((v5 & 1) == 0 && *(_DWORD *)(result + 160) != *(unsigned __int8 *)(*(void *)(result + 1360) + a2))
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    if (*(unsigned char *)(result + 1456)) {
      a3 = a2;
    }
    uint64_t result = sub_248400160((void *)result, a2, (unint64_t **)v7, 0, a3, 1);
    if (result) {
      atomic_store(1u, *(unsigned __int8 **)(v3 + 8));
    }
  }
  return result;
}

uint64_t sub_248403BB4(uint64_t **a1, unint64_t a2)
{
  if (sub_2483FFCF8(**a1, a2, *(void *)(**a1 + 1368) - *(void *)(**a1 + 1360))) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_248403BE8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = a4;
  uint64_t v9 = 0;
  uint64_t v395 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a4 + 4208);
  unint64_t v11 = *(void *)(v10 + 88);
  uint64_t v12 = *(void *)(v10 + 136) >> 3;
  unint64_t v13 = v12 * (a5 % v11);
  unint64_t v14 = v12 * (a5 / v11);
  unint64_t v16 = *(void *)(v10 + 72);
  unint64_t v15 = *(void *)(v10 + 80);
  unint64_t v17 = v13 + v12;
  unint64_t v325 = v14;
  unint64_t v18 = v14 + v12;
  unint64_t v19 = *(void *)(*(void *)(v10 + 1752) + 16);
  uint64_t v322 = v10;
  float v20 = *(float *)(v10 + 992);
  unint64_t v21 = *(uint64_t **)(a6 + 24);
  do
  {
    uint64_t v22 = *v21;
    v21 += 5;
    v373[v9++] = *(void *)(v22 + 16) >> 2;
  }
  while (v9 != 3);
  unint64_t v324 = v13;
  if (v16 >= v13) {
    unint64_t v23 = v16 - v13;
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = v15 - v325;
  if (v15 < v325) {
    unint64_t v24 = 0;
  }
  if (v18 <= v15) {
    unint64_t v25 = v12;
  }
  else {
    unint64_t v25 = v24;
  }
  int v26 = (*(uint64_t (**)(void))(**(void **)(a4 + 4480) + 16))(*(void *)(a4 + 4480));
  unsigned int v327 = (*(uint64_t (**)(void))(**(void **)(v7 + 4480) + 64))(*(void *)(v7 + 4480));
  uint64_t v27 = 0;
  uint64_t v28 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v29 = *(unsigned int *)(a1 + 48);
  uint64_t v30 = *(unsigned int *)(a1 + 52);
  uint64_t v31 = v28 - byte_248550964[v30];
  v371.i64[0] = v28 - byte_248550964[v29];
  v371.i64[1] = v31;
  uint64_t v32 = *(unsigned int *)(a1 + 56);
  uint64_t v372 = v28 - byte_248550964[v32];
  uint64_t v33 = *(unsigned __int8 *)(a1 + 61);
  uint64_t v34 = v33 - byte_248550968[v30];
  uint64_t v368 = v33 - byte_248550968[v29];
  uint64_t v369 = v34;
  uint64_t v370 = v33 - byte_248550968[v32];
  long long v366 = 0u;
  long long v367 = 0u;
  long long v364 = 0u;
  long long v365 = 0u;
  long long v362 = 0u;
  long long v363 = 0u;
  unint64_t v35 = (unint64_t *)&v363;
  if (v17 <= v16) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = v23;
  }
  int v342 = v26;
  uint64_t v37 = sub_248407224;
  if (!v26) {
    uint64_t v37 = sub_248408A0C;
  }
  float v333 = (void (*)(unint64_t *, void, void, uint64_t, uint64_t, unint64_t, int32x4_t *, uint64_t *, float, float, float, __n128, __n128, unint64_t, uint64_t, void *, void, void))v37;
  unint64_t v334 = v19 >> 2;
  uint64_t v38 = (unsigned int *)(*(void *)(*(void *)(v7 + 4208) + 1752) + 4);
  do
  {
    uint64_t v39 = v371.i64[v27];
    uint64_t v40 = *(uint64_t *)((char *)&v368 + v27 * 8);
    *(v35 - 2) = v324 >> v39;
    *(v35 - 1) = v325 >> v40;
    *unint64_t v35 = v36 >> v39;
    v35[1] = v25 >> v40;
    if ((v36 >> v39) + (v324 >> v39) > *(v38 - 1) || (v25 >> v40) + (v325 >> v40) > *v38) {
      return 1;
    }
    v38 += 10;
    ++v27;
    v35 += 4;
  }
  while (v27 != 3);
  if (!v25) {
    return 0;
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v316 = v25;
  unint64_t v317 = v36 + 7;
  unint64_t v318 = v324 >> 3;
  uint64_t v328 = v7 + 5772;
  if ((v36 + 7) >> 3 <= 1) {
    unint64_t v43 = 1;
  }
  else {
    unint64_t v43 = (v36 + 7) >> 3;
  }
  unint64_t v321 = v43;
  float v44 = (float32x4_t *)v361;
  unint64_t v45 = (float32x4_t *)v357;
  unint64_t v46 = a5;
  uint64_t v47 = v327;
  uint64_t v345 = v7;
  unint64_t v336 = v36;
  do
  {
    (**(void (***)(uint64_t, unint64_t))a2)(a2, v42);
    uint64_t v49 = 0;
    v361[0] = v42 >> v368;
    v361[1] = v42 >> v369;
    uint64_t v50 = *(void **)(v7 + 4208);
    uint64_t v51 = v50[131] + v50[130] * (v42 + v325);
    uint64_t v359 = 0;
    uint64_t v360 = 0;
    unint64_t v52 = (void *)v50[219];
    uint64_t v53 = v52[2];
    unint64_t v54 = v52[3] + v53 * (*((void *)&v362 + 1) + (v42 >> v368));
    v361[2] = v42 >> v370;
    uint64_t v358 = v54 + 4 * v362;
    uint64_t v55 = v52[13] + (*((void *)&v366 + 1) + (v42 >> v370)) * v53 + 4 * v366;
    uint64_t v359 = v52[8] + (*((void *)&v364 + 1) + (v42 >> v369)) * v53 + 4 * v364;
    uint64_t v360 = v55;
    unint64_t v56 = (v42 + v325) >> 3;
    uint64_t v57 = *(void *)(v322 + 176) + *(void *)(v322 + 168) * (v42 + v325);
    uint64_t v319 = v50[146] + v50[145] * v56;
    uint64_t v320 = v50[141] + v50[140] * v56;
    memset(v357, 0, sizeof(v357));
    unint64_t v58 = (void *)(*(void *)(a6 + 24) + 8);
    do
    {
      v45->i64[v49] = *(void *)(*(v58 - 1) + 24)
                    + *(void *)(*(v58 - 1) + 16) * (v58[1] + 8 * v44->i64[v49])
                    + 4 * *v58;
      ++v49;
      v58 += 5;
    }
    while (v49 != 3);
    if (v317 >= 8)
    {
      unint64_t v60 = 0;
      uint64_t v326 = 0;
      unint64_t v335 = v57 + v324;
      unint64_t v329 = v51 + 4 * v324;
      unint64_t v61 = v336;
      uint64_t v344 = v42;
      do
      {
        if (v60 < v61)
        {
          unint64_t v62 = *(float **)(v7 + 4208);
          float v63 = v62[301];
          *(float *)v48.i32 = v62[303] + (float)((float)*(char *)(v319 + v326 + v318) * v63);
          int32x4_t v64 = vdupq_lane_s32(*(int32x2_t *)v48.i8, 0);
          *(float *)v48.i32 = v62[302] + (float)((float)*(char *)(v320 + v326 + v318) * v63);
          int32x4_t v48 = vdupq_lane_s32(*(int32x2_t *)v48.i8, 0);
          __n128 v330 = (__n128)v48;
          __n128 v331 = (__n128)v64;
          while (v60 < 8 * v326 + 8)
          {
            int32x4_t v48 = (int32x4_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v60), (uint64x2_t)vnegq_s64(v371));
            int32x4_t v355 = v48;
            unint64_t v356 = v60 >> v372;
            unint64_t v65 = *(unsigned __int8 *)(v335 + v60);
            unint64_t v351 = (v65 >> 1) & 0xFFFFFFFEFFFFFFFFLL | ((v65 & 1) << 32);
            uint64_t v66 = byte_2485534EC[v65 >> 1];
            if (v65)
            {
              int v67 = 1 << byte_24854EE58[v65 >> 1];
              uint64_t v68 = v67;
              unint64_t v350 = v60;
              uint64_t v343 = byte_2485534EC[v65 >> 1];
              if (v47)
              {
                if (v342)
                {
                  uint64_t v69 = (char *)a3[1];
                  bzero(v69, 768 * v67);
                  for (uint64_t i = 0; i != 3; ++i)
                  {
                    v354[i] = v69;
                    v69 += 256 * (uint64_t)v67;
                  }
                }
                else
                {
                  unint64_t v72 = (char *)a3[2];
                  bzero(v72, 384 * v67);
                  for (uint64_t j = 0; j != 3; ++j)
                  {
                    v354[j] = v72;
                    v72 += 128 * (uint64_t)v67;
                  }
                }
              }
              else
              {
                for (uint64_t k = 0; k != 3; ++k)
                  v354[k] = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(v7 + 4480)
                                                                                                  + 24))(*(void *)(v7 + 4480), k, v46, v41);
              }
              uint64_t v74 = (uint64_t)v67 << 6;
              unint64_t v42 = v344;
              uint64_t v349 = v74;
              uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t *))(*(void *)a2 + 8))(a2, v60, v344, &v351);
              if (result) {
                return result;
              }
              if (a7 != 1)
              {
                unint64_t v75 = v46;
                uint64_t v76 = v47;
                uint64_t v77 = *a3;
                v333(&v351, *(unsigned int *)(v329 + 4 * v60), v351, v349, *(void *)(v7 + 4208) + 952, byte_2485534EC[v351]* (unint64_t)byte_248553507[v351], &v355, &v358, v20, *(float *)(v7 + 4272), *(float *)(v7 + 4276), v330, v331, v334, v328, v354, *a3, a3[3]);
                uint64_t v78 = 0;
                uint64_t v352 = 1;
                int v353 = 2;
                uint64_t v341 = v68 << 8;
                uint64_t v347 = v77;
                uint64_t v337 = v77 + 32;
                uint64_t v338 = v77 + 4;
                uint64_t v47 = v76;
                unint64_t v46 = v75;
                unint64_t v45 = (float32x4_t *)v357;
                uint64_t v346 = v41;
                do
                {
                  uint64_t v79 = *((int *)&v352 + v78);
                  uint64_t v80 = v355.i64[v79];
                  if (v80 << v371.i64[v79] == v350 && v44->i64[v79] << *(&v368 + v79) == v42)
                  {
                    uint64_t v81 = v45->i64[v79];
                    float v44 = (float32x4_t *)(v81 + 32 * v80);
                    unint64_t v45 = (float32x4_t *)(v347 + 4 * v349 * v79);
                    uint64_t v7 = v373[v79];
                    long long v82 = (float32x4_t *)a3[3];
                    switch((int)v351)
                    {
                      case 0:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[16];
                        v394[0].i64[0] = 8;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406F6C, (uint64_t)v394, (uint64_t)&v374, 8, (uint64_t)&v82[16]);
                        v394[0].i64[0] = 8;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v45;
                        sub_2484065E0(v394, &v374);
                        v394[0].i64[0] = 8;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_248406F6C;
                        goto LABEL_98;
                      case 1:
                        uint64_t v85 = 0;
                        float v86 = v45->f32[0];
                        float v87 = v45->f32[1];
                        float v88 = v45[2].f32[0];
                        float v89 = v45[2].f32[1];
                        float v90 = v45->f32[0] + v87;
                        v394[0].f32[0] = (float)(v90 + v88) + v89;
                        v394[0].f32[1] = (float)(v90 - v88) - v89;
                        float v91 = v86 - v87;
                        v394[0].f32[2] = (float)(v91 + v88) - v89;
                        v394[0].f32[3] = (float)(v91 - v88) + v89;
                        uint64_t v92 = v81 + 32 * v80;
                        uint64_t v93 = v347 + v341 * v79;
                        char v94 = 1;
                        do
                        {
                          uint64_t v95 = 0;
                          char v96 = v94;
                          uint64_t v97 = 2 * v85;
                          uint64_t v98 = 8 * v85;
                          char v99 = 1;
                          uint64_t v100 = ((4 * v85) | 1) * v7 + 1;
                          uint64_t v101 = 4 * v85 * v7;
                          uint64_t v102 = v92 + 16 * v7 * v85;
                          uint64_t v103 = v93 + 32 * v85;
                          do
                          {
                            uint64_t v104 = 0;
                            char v105 = v99;
                            uint64_t v106 = v95 | v98;
                            unint64_t v107 = (float *)(v103 + 4 * v95);
                            float v108 = 0.0;
                            int64x2_t v109 = v107;
                            do
                            {
                              uint64_t v110 = 0;
                              unsigned int v111 = v109;
                              do
                              {
                                if (v110 | v104) {
                                  float v108 = v108 + *v111;
                                }
                                ++v110;
                                v111 += 2;
                              }
                              while (v110 != 4);
                              ++v104;
                              v109 += 16;
                            }
                            while (v104 != 4);
                            uint64_t v112 = 0;
                            uint64_t v113 = v95;
                            uint64_t v114 = v100 + 4 * v95;
                            v44->f32[v114] = v394[0].f32[v95 | v97] + (float)(v108 * -0.0625);
                            uint64_t v115 = v102 + 16 * v95;
                            do
                            {
                              uint64_t v116 = 0;
                              unint64_t v117 = v107;
                              do
                              {
                                if (v112 != 1 || v116 != 4) {
                                  *(float *)(v115 + v116) = *v117 + v44->f32[v114];
                                }
                                v116 += 4;
                                v117 += 2;
                              }
                              while (v116 != 16);
                              ++v112;
                              v115 += 4 * v7;
                              v107 += 16;
                            }
                            while (v112 != 4);
                            char v99 = 0;
                            v44[v113].f32[v101] = *(float *)((char *)v45->f32 + ((4 * v106) | 0x48)) + v44->f32[v114];
                            uint64_t v95 = 1;
                          }
                          while ((v105 & 1) != 0);
                          char v94 = 0;
                          uint64_t v85 = 1;
                        }
                        while ((v96 & 1) != 0);
                        uint64_t v7 = v345;
                        uint64_t v41 = v346;
                        unint64_t v42 = v344;
                        float v44 = (float32x4_t *)v361;
                        unint64_t v45 = (float32x4_t *)v357;
                        break;
                      case 2:
                        uint64_t v118 = 0;
                        float32x4_t v386 = v45[12];
                        float32x4_t v387 = v45[13];
                        float32x4_t v388 = v45[14];
                        float32x4_t v389 = v45[15];
                        float32x4_t v382 = v45[8];
                        float32x4_t v383 = v45[9];
                        float32x4_t v384 = v45[10];
                        float32x4_t v385 = v45[11];
                        float32x4_t v378 = v45[4];
                        float32x4_t v379 = v45[5];
                        float32x4_t v380 = v45[6];
                        float32x4_t v381 = v45[7];
                        float32x4_t v374 = *v45;
                        float32x4_t v375 = v45[1];
                        float32x4_t v376 = v45[2];
                        float32x4_t v377 = v45[3];
                        float32_t v119 = (float)((float)(v374.f32[0] + v374.f32[1]) - v376.f32[0]) - v376.f32[1];
                        *(float *)&unsigned int v120 = (float)((float)(v374.f32[0] - v374.f32[1]) + v376.f32[0]) - v376.f32[1];
                        *(float *)&unsigned int v121 = (float)((float)(v374.f32[0] - v374.f32[1]) - v376.f32[0]) + v376.f32[1];
                        v374.f32[0] = (float)((float)(v374.f32[0] + v374.f32[1]) + v376.f32[0]) + v376.f32[1];
                        v374.f32[1] = v119;
                        v376.i64[0] = __PAIR64__(v121, v120);
                        char v122 = 1;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v123 = 0;
                          char v124 = v122;
                          uint64_t v125 = 8 * v118;
                          uint64_t v126 = 16 * v118;
                          char v127 = 1;
                          do
                          {
                            char v128 = v127;
                            unint64_t v129 = 4 * (v123 | v125);
                            float v130 = v374.f32[v129 / 4];
                            float v131 = *(float *)((char *)v374.f32 + (v129 | 8));
                            float v132 = *(float *)((char *)v374.f32 + (v129 | 0x40));
                            float v133 = *(float *)((char *)v374.f32 + (v129 | 0x48));
                            float v134 = (float)((float)(v130 + v131) + v132) + v133;
                            float v135 = (float)((float)(v130 + v131) - v132) - v133;
                            float v136 = v130 - v131;
                            uint64_t v137 = (8 * v123) | (4 * v126);
                            *(float *)((char *)v394[0].f32 + v137) = v134;
                            *(float *)((char *)v394[0].f32 + (v137 | 4)) = v135;
                            *(float *)((char *)v394[0].f32 + (v137 | 0x20)) = (float)(v136 + v132) - v133;
                            *(float *)((char *)v394[0].f32 + (v137 | 0x24)) = (float)(v136 - v132) + v133;
                            uint64_t v123 = 1;
                            char v127 = 0;
                          }
                          while ((v128 & 1) != 0);
                          char v122 = 0;
                          uint64_t v118 = 1;
                        }
                        while ((v124 & 1) != 0);
                        for (uint64_t m = 0; m != 8; m += 2)
                          *(float32x4_t *)((char *)&v374 + m * 16) = v394[m];
                        uint64_t v139 = 0;
                        unint64_t v140 = &v382;
                        do
                        {
                          float32x4_t v141 = v140[-8];
                          float32x4_t v142 = v140[-7];
                          float32x4_t v143 = *v140;
                          float32x4_t v144 = v140[1];
                          v140 += 2;
                          float32x4_t v145 = vaddq_f32(v141, v142);
                          v396.val[0] = vaddq_f32(vaddq_f32(v145, v143), v144);
                          v396.val[1] = vsubq_f32(vsubq_f32(v145, v143), v144);
                          float32x4_t v146 = vsubq_f32(v141, v142);
                          v397.val[0] = vsubq_f32(vaddq_f32(v146, v143), v144);
                          long long v147 = &v394[v139];
                          vst2q_f32(v147->f32, v396);
                          v147 += 2;
                          v397.val[1] = vaddq_f32(vsubq_f32(v146, v143), v144);
                          vst2q_f32(v147->f32, v397);
                          v139 += 4;
                        }
                        while (v139 != 16);
                        uint64_t v148 = 0;
                        float32x4_t v386 = v394[12];
                        float32x4_t v387 = v394[13];
                        float32x4_t v388 = v394[14];
                        float32x4_t v389 = v394[15];
                        float32x4_t v382 = v394[8];
                        float32x4_t v383 = v394[9];
                        float32x4_t v384 = v394[10];
                        float32x4_t v385 = v394[11];
                        float32x4_t v378 = v394[4];
                        float32x4_t v379 = v394[5];
                        float32x4_t v380 = v394[6];
                        float32x4_t v381 = v394[7];
                        float32x4_t v374 = v394[0];
                        float32x4_t v375 = v394[1];
                        float32x4_t v376 = v394[2];
                        float32x4_t v377 = v394[3];
                        do
                        {
                          *float v44 = *(float32x4_t *)((char *)&v374 + v148);
                          int32x4_t v48 = *(int32x4_t *)((char *)&v374 + v148 + 16);
                          v44[1] = (float32x4_t)v48;
                          v148 += 32;
                          float v44 = (float32x4_t *)((char *)v44 + 4 * v7);
                        }
                        while (v148 != 256);
                        uint64_t v7 = v345;
                        float v44 = (float32x4_t *)v361;
                        break;
                      case 3:
                        uint64_t v149 = 0;
                        float v150 = v45->f32[0];
                        float v151 = v45->f32[1];
                        float v152 = v45[2].f32[0];
                        float v153 = v45[2].f32[1];
                        float v154 = v45->f32[0] + v151;
                        v374.f32[0] = (float)(v154 + v152) + v153;
                        v374.f32[1] = (float)(v154 - v152) - v153;
                        float v155 = v150 - v151;
                        v374.f32[2] = (float)(v155 + v152) - v153;
                        v374.f32[3] = (float)(v155 - v152) + v153;
                        uint64_t v156 = v347 + v341 * v79;
                        char v157 = 1;
                        do
                        {
                          uint64_t v158 = 0;
                          char v159 = v157;
                          uint64_t v160 = 2 * v149;
                          uint64_t v161 = &v44->i8[4 * 4 * v7 * v149];
                          uint64_t v162 = v156 + 32 * v149;
                          char v163 = 1;
                          do
                          {
                            uint64_t v164 = 0;
                            char v165 = v163;
                            v394[0].i32[0] = v374.i32[v158 | v160];
                            char v166 = (__int32 *)(v162 + 4 * v158);
                            long long v167 = v394;
                            do
                            {
                              uint64_t v168 = 0;
                              long long v169 = v166;
                              do
                              {
                                if (v168 | v164) {
                                  v167->i32[v168] = *v169;
                                }
                                ++v168;
                                v169 += 2;
                              }
                              while (v168 != 4);
                              ++v164;
                              ++v167;
                              v166 += 16;
                            }
                            while (v164 != 4);
                            sub_248406194((uint64_t)v394, v7, (uint64_t)&v161[16 * v158], (uint64_t)v82);
                            char v163 = 0;
                            uint64_t v158 = 1;
                          }
                          while ((v165 & 1) != 0);
                          char v157 = 0;
                          uint64_t v149 = 1;
                        }
                        while ((v159 & 1) != 0);
                        goto LABEL_126;
                      case 4:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[64];
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406FE0, (uint64_t)v394, (uint64_t)&v374, 16, (uint64_t)&v82[64]);
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248406244(v394, &v374);
                        v394[0].i64[0] = 16;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_248406FE0;
                        goto LABEL_107;
                      case 5:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[256];
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406EF8, (uint64_t)v394, (uint64_t)&v374, 32, (uint64_t)&v82[256]);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 32, 32);
                        v394[0].i64[0] = 32;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_248406EF8;
                        goto LABEL_237;
                      case 6:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[32];
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406F6C, (uint64_t)v394, (uint64_t)&v374, 16, (uint64_t)&v82[32]);
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v45;
                        sub_24840632C(v394, &v374);
                        v394[0].i64[0] = 8;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        uint64_t v170 = sub_248406FE0;
                        goto LABEL_97;
                      case 7:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[32];
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v82;
                        sub_24840632C(v394, &v374);
                        v394[0].i64[0] = 8;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406FE0, (uint64_t)v394, (uint64_t)&v374, 8, (uint64_t)&v82[32]);
                        v394[0].i64[0] = 8;
                        unint64_t v42 = v344;
                        v394[0].i64[1] = (uint64_t)v45;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248406414(v394, &v374);
                        v394[0].i64[0] = 16;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v82;
                        long long v171 = sub_248406F6C;
                        goto LABEL_106;
                      case 8:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[64];
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406F6C, (uint64_t)v394, (uint64_t)&v374, 32, (uint64_t)&v82[64]);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v45;
                        sub_2484064F8(v394, &v374);
                        v394[0].i64[0] = 8;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        uint64_t v170 = sub_248406EF8;
LABEL_97:
                        unint64_t v84 = v170;
LABEL_98:
                        uint64_t v172 = 8;
                        goto LABEL_250;
                      case 9:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 8;
                        v374.i64[1] = (uint64_t)v82;
                        sub_2484064F8(v394, &v374);
                        v394[0].i64[0] = 8;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 8;
                        uint64_t v41 = v346;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406EF8, (uint64_t)v394, (uint64_t)&v374, 8, (uint64_t)&v82[64]);
                        unint64_t v173 = 0;
                        float v44 = (float32x4_t *)v361;
                        do
                        {
                          uint64_t v174 = 0;
                          char v175 = 1;
                          long long v176 = &v82[v173 / 4];
                          do
                          {
                            char v177 = v175;
                            int32x4_t v178 = (int32x4_t)v45[2 * v173 + v174];
                            int32x4_t v179 = *(int32x4_t *)((char *)&v45[v174] + ((32 * v173) | 0x20));
                            int32x4_t v180 = *(int32x4_t *)((char *)&v45[v174] + ((32 * v173) | 0x40));
                            int32x4_t v181 = *(int32x4_t *)((char *)&v45[v174] + ((32 * v173) | 0x60));
                            float32x2x2_t v182 = (float32x2x2_t)vzip1q_s32(v178, v180);
                            int32x4_t v183 = vzip1q_s32(v179, v181);
                            float32x2x2_t v184 = (float32x2x2_t)vzip2q_s32(v178, v180);
                            int32x4_t v185 = vzip2q_s32(v179, v181);
                            f32 = v176[2 * v174].f32;
                            uint64_t v187 = (v174 * 4) << 7;
                            vst2_f32(f32, v182);
                            *(int32x4_t *)((char *)v176 + (v187 | 0x80)) = vzip2q_s32((int32x4_t)v182, v183);
                            long long v188 = (float *)((char *)v176->f32 + (v187 | 0x100));
                            vst2_f32(v188, v184);
                            *(int32x4_t *)((char *)v176 + (v187 | 0x180)) = vzip2q_s32((int32x4_t)v184, v185);
                            uint64_t v174 = 1;
                            char v175 = 0;
                          }
                          while ((v177 & 1) != 0);
                          BOOL v189 = v173 >= 0x1C;
                          v173 += 4;
                        }
                        while (!v189);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406F6C, (uint64_t)v394, (uint64_t)&v392, 32, (uint64_t)&v82[64]);
                        uint64_t v7 = v345;
                        unint64_t v45 = (float32x4_t *)v357;
                        goto LABEL_233;
                      case 10:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[128];
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406FE0, (uint64_t)v394, (uint64_t)&v374, 32, (uint64_t)&v82[128]);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 16, 32);
                        v394[0].i64[0] = 16;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        long long v171 = sub_248406EF8;
LABEL_106:
                        unint64_t v84 = v171;
LABEL_107:
                        uint64_t v172 = 16;
                        goto LABEL_250;
                      case 11:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[128];
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 16, 32);
                        v394[0].i64[0] = 16;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 16;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406EF8, (uint64_t)v394, (uint64_t)&v374, 16, (uint64_t)&v82[128]);
                        v394[0].i64[0] = 16;
                        unint64_t v42 = v344;
                        v394[0].i64[1] = (uint64_t)v45;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 32, 16);
                        v394[0].i64[0] = 32;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v82;
                        int v190 = sub_248406FE0;
                        goto LABEL_236;
                      case 12:
                        uint64_t v191 = 0;
                        float v192 = v45[2].f32[0];
                        float v193 = v45->f32[0] - v192;
                        *(float *)&uint64_t v392 = v45->f32[0] + v192;
                        *((float *)&v392 + 1) = v193;
                        uint64_t v194 = v347 + v341 * v79;
                        char v195 = 1;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v196 = 0;
                          char v197 = v195;
                          v394[0].i32[0] = *((_DWORD *)&v392 + v191);
                          uint64_t v198 = v194 + 32 * v191;
                          int64x2_t v199 = v394;
                          do
                          {
                            for (uint64_t n = 0; n != 8; ++n)
                            {
                              if (n | v196) {
                                v199->i32[n] = *(_DWORD *)(v198 + 4 * n);
                              }
                            }
                            ++v196;
                            v199 += 2;
                            v198 += 64;
                          }
                          while (v196 != 4);
                          v374.i64[0] = v7;
                          v374.i64[1] = (uint64_t)v44->i64 + 4 * 4 * v7 * v191;
                          sub_2484060E0(v394, (uint64_t)&v374, v82);
                          char v195 = 0;
                          uint64_t v191 = 1;
                        }
                        while ((v197 & 1) != 0);
                        unint64_t v46 = a5;
                        uint64_t v7 = v345;
                        uint64_t v41 = v346;
                        goto LABEL_232;
                      case 13:
                        uint64_t v201 = 0;
                        float v202 = v45[2].f32[0];
                        float v203 = v45->f32[0] - v202;
                        *(float *)&uint64_t v390 = v45->f32[0] + v202;
                        *((float *)&v390 + 1) = v203;
                        uint64_t v204 = v347 + v341 * v79;
                        char v205 = 1;
                        do
                        {
                          uint64_t v206 = 0;
                          char v207 = v205;
                          v394[0].i32[0] = *((_DWORD *)&v390 + v201);
                          uint64_t v208 = v204 + 32 * v201;
                          uint64_t v209 = v394;
                          do
                          {
                            for (iuint64_t i = 0; ii != 8; ++ii)
                            {
                              if (ii | v206) {
                                v209->i32[ii] = *(_DWORD *)(v208 + 4 * ii);
                              }
                            }
                            ++v206;
                            v209 += 2;
                            v208 += 64;
                          }
                          while (v206 != 4);
                          v374.i64[0] = 8;
                          v374.i64[1] = (uint64_t)v394;
                          int v211 = &v44[v201];
                          uint64_t v392 = 8;
                          char v393 = v82;
                          sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484071B0, (uint64_t)&v374, (uint64_t)&v392, 8, (uint64_t)&v82[8]);
                          v374.i64[0] = 8;
                          v374.i64[1] = (uint64_t)v82;
                          uint64_t v392 = 4;
                          char v393 = v394;
                          sub_248405F04(&v374, &v392);
                          sub_248405FAC(v394, 4, v211, v7, v82 + 8);
                          char v205 = 0;
                          uint64_t v201 = 1;
                        }
                        while ((v207 & 1) != 0);
LABEL_126:
                        unint64_t v46 = a5;
                        uint64_t v7 = v345;
                        uint64_t v41 = v346;
                        uint64_t v47 = v327;
                        unint64_t v42 = v344;
                        float v44 = (float32x4_t *)v361;
                        unint64_t v45 = (float32x4_t *)v357;
                        goto LABEL_233;
                      case 14:
                        uint64_t v212 = 0;
                        float v213 = v45->f32[0];
                        float v214 = v45->f32[1];
                        float v215 = v45[2].f32[0];
                        float v216 = v45->f32[0] + v215;
                        *(float *)&uint64_t v392 = (float)(v214 + v216) * 4.0;
                        BOOL v217 = &v392;
                        do
                        {
                          uint64_t v218 = 0;
                          unint64_t v219 = v45;
                          do
                          {
                            if (v218 | v212) {
                              *((_DWORD *)v217 + v218) = v219->i32[0];
                            }
                            ++v218;
                            unint64_t v219 = (float32x4_t *)((char *)v219 + 8);
                          }
                          while (v218 != 4);
                          ++v212;
                          v217 += 2;
                          v45 += 4;
                        }
                        while (v212 != 4);
                        unint64_t v220 = 0;
                        int v221 = (float32x4_t *)&unk_24854E670;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v222 = 0;
                          float32x4_t v223 = 0uLL;
                          do
                          {
                            float32x4_t v223 = vmlaq_n_f32(v223, v221[v222], *(float *)((char *)&v392 + v222));
                            v222 += 4;
                          }
                          while (v222 != 64);
                          *(float32x4_t *)((char *)&v374 + 4 * v220) = v223;
                          ++v221;
                          BOOL v189 = v220 >= 0xC;
                          v220 += 4;
                        }
                        while (!v189);
                        uint64_t v224 = 0;
                        int v225 = v44;
                        do
                        {
                          *int v225 = *(float32x4_t *)((char *)&v374 + v224);
                          v224 += 16;
                          int v225 = (float32x4_t *)((char *)v225 + 4 * v7);
                        }
                        while (v224 != 64);
                        uint64_t v226 = 0;
                        v374.f32[0] = v216 - v214;
                        uint64_t v227 = v341 * v79;
                        uint64_t v228 = (__int32 *)(v338 + v341 * v79);
                        BOOL v229 = &v374;
                        do
                        {
                          uint64_t v230 = 0;
                          uint64_t v231 = v228;
                          do
                          {
                            if (v230 | v226) {
                              v229->i32[v230] = *v231;
                            }
                            ++v230;
                            v231 += 2;
                          }
                          while (v230 != 4);
                          ++v226;
                          ++v229;
                          v228 += 16;
                        }
                        while (v226 != 4);
                        float32_t v232 = v213 - v215;
                        uint64_t v233 = &v374;
                        sub_248406194((uint64_t)&v374, v7, (uint64_t)&v44[1], (uint64_t)v394);
                        uint64_t v234 = 0;
                        v374.f32[0] = v232;
                        uint64_t v235 = v337 + v227;
                        uint64_t v41 = v346;
                        do
                        {
                          for (juint64_t j = 0; jj != 8; ++jj)
                          {
                            if (jj | v234) {
                              v233->i32[jj] = *(_DWORD *)(v235 + 4 * jj);
                            }
                          }
                          ++v234;
                          v233 += 2;
                          v235 += 64;
                        }
                        while (v234 != 4);
                        uint64_t v390 = v7;
                        long long v391 = &v44[v7];
                        sub_2484060E0(&v374, (uint64_t)&v390, v394);
                        unint64_t v42 = v344;
                        uint64_t v7 = v345;
                        float v44 = (float32x4_t *)v361;
                        goto LABEL_233;
                      case 15:
                        uint64_t v237 = 0;
                        float v238 = v45->f32[0];
                        float v239 = v45->f32[1];
                        float v240 = v45[2].f32[0];
                        float v241 = v45->f32[0] + v240;
                        *(float *)&uint64_t v392 = (float)(v239 + v241) * 4.0;
                        __int16 v242 = &v392;
                        do
                        {
                          uint64_t v243 = 0;
                          unint64_t v244 = v45;
                          do
                          {
                            if (v243 | v237) {
                              *((_DWORD *)v242 + v243) = v244->i32[0];
                            }
                            ++v243;
                            unint64_t v244 = (float32x4_t *)((char *)v244 + 8);
                          }
                          while (v243 != 4);
                          ++v237;
                          v242 += 2;
                          v45 += 4;
                        }
                        while (v237 != 4);
                        unint64_t v245 = 0;
                        uint64_t v246 = (float32x4_t *)&unk_24854E670;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v247 = 0;
                          float32x4_t v248 = 0uLL;
                          do
                          {
                            float32x4_t v248 = vmlaq_n_f32(v248, v246[v247], *(float *)((char *)&v392 + v247));
                            v247 += 4;
                          }
                          while (v247 != 64);
                          *(float32x4_t *)((char *)&v374 + 4 * v245) = v248;
                          ++v246;
                          BOOL v189 = v245 >= 0xC;
                          v245 += 4;
                        }
                        while (!v189);
                        uint64_t v249 = 0;
                        unint64_t v250 = (int8x16_t *)(v81 + 32 * v80 + 16);
                        do
                        {
                          int8x16_t v251 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v374 + v249));
                          *unint64_t v250 = vextq_s8(v251, v251, 8uLL);
                          v249 += 16;
                          unint64_t v250 = (int8x16_t *)((char *)v250 + 4 * v7);
                        }
                        while (v249 != 64);
                        uint64_t v252 = 0;
                        v374.f32[0] = v241 - v239;
                        uint64_t v253 = v341 * v79;
                        int v254 = (__int32 *)(v338 + v341 * v79);
                        __int16 v255 = &v374;
                        do
                        {
                          uint64_t v256 = 0;
                          unint64_t v257 = v254;
                          do
                          {
                            if (v256 | v252) {
                              v255->i32[v256] = *v257;
                            }
                            ++v256;
                            v257 += 2;
                          }
                          while (v256 != 4);
                          ++v252;
                          ++v255;
                          v254 += 16;
                        }
                        while (v252 != 4);
                        float32_t v258 = v238 - v240;
                        uint64_t v259 = &v374;
                        sub_248406194((uint64_t)&v374, v7, (uint64_t)v44, (uint64_t)v394);
                        uint64_t v260 = 0;
                        v374.f32[0] = v258;
                        uint64_t v261 = v337 + v253;
                        uint64_t v41 = v346;
                        do
                        {
                          for (kuint64_t k = 0; kk != 8; ++kk)
                          {
                            if (kk | v260) {
                              v259->i32[kk] = *(_DWORD *)(v261 + 4 * kk);
                            }
                          }
                          ++v260;
                          v259 += 2;
                          v261 += 64;
                        }
                        while (v260 != 4);
                        uint64_t v390 = v7;
                        long long v391 = &v44[v7];
                        goto LABEL_231;
                      case 16:
                        uint64_t v263 = 0;
                        float v264 = v45->f32[0];
                        float v265 = v45->f32[1];
                        float v266 = v45[2].f32[0];
                        float v267 = v45->f32[0] + v266;
                        *(float *)&uint64_t v392 = (float)(v265 + v267) * 4.0;
                        int64x2_t v268 = &v392;
                        do
                        {
                          uint64_t v269 = 0;
                          size_t v270 = v45;
                          do
                          {
                            if (v269 | v263) {
                              *((_DWORD *)v268 + v269) = v270->i32[0];
                            }
                            ++v269;
                            size_t v270 = (float32x4_t *)((char *)v270 + 8);
                          }
                          while (v269 != 4);
                          ++v263;
                          v268 += 2;
                          v45 += 4;
                        }
                        while (v263 != 4);
                        unint64_t v271 = 0;
                        int v272 = (float32x4_t *)&unk_24854E670;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v273 = 0;
                          float32x4_t v274 = 0uLL;
                          do
                          {
                            float32x4_t v274 = vmlaq_n_f32(v274, v272[v273], *(float *)((char *)&v392 + v273));
                            v273 += 4;
                          }
                          while (v273 != 64);
                          *(float32x4_t *)((char *)&v374 + 4 * v271) = v274;
                          ++v272;
                          BOOL v189 = v271 >= 0xC;
                          v271 += 4;
                        }
                        while (!v189);
                        uint64_t v275 = (float32x4_t *)(v81 + 32 * v80 + 16 * v7);
                        for (uint64_t mm = 48; mm != -16; mm -= 16)
                        {
                          *uint64_t v275 = *(float32x4_t *)((char *)&v374 + mm);
                          uint64_t v275 = (float32x4_t *)((char *)v275 + 4 * v7);
                        }
                        uint64_t v277 = 0;
                        v374.f32[0] = v267 - v265;
                        uint64_t v278 = v341 * v79;
                        uint64_t v279 = (__int32 *)(v338 + v341 * v79);
                        int v280 = &v374;
                        do
                        {
                          uint64_t v281 = 0;
                          uint64_t v282 = v279;
                          do
                          {
                            if (v281 | v277) {
                              v280->i32[v281] = *v282;
                            }
                            ++v281;
                            v282 += 2;
                          }
                          while (v281 != 4);
                          ++v277;
                          ++v280;
                          v279 += 16;
                        }
                        while (v277 != 4);
                        float32_t v283 = v264 - v266;
                        uint64_t v284 = &v374;
                        sub_248406194((uint64_t)&v374, v7, (uint64_t)&v44[v7 + 1], (uint64_t)v394);
                        uint64_t v285 = 0;
                        v374.f32[0] = v283;
                        uint64_t v286 = v337 + v278;
                        uint64_t v41 = v346;
                        do
                        {
                          for (nuint64_t n = 0; nn != 8; ++nn)
                          {
                            if (nn | v285) {
                              v284->i32[nn] = *(_DWORD *)(v286 + 4 * nn);
                            }
                          }
                          ++v285;
                          v284 += 2;
                          v286 += 64;
                        }
                        while (v285 != 4);
                        goto LABEL_230;
                      case 17:
                        uint64_t v288 = 0;
                        float v289 = v45->f32[0];
                        float v290 = v45->f32[1];
                        float v291 = v45[2].f32[0];
                        float v292 = v45->f32[0] + v291;
                        *(float *)&uint64_t v392 = (float)(v290 + v292) * 4.0;
                        unsigned int v293 = &v392;
                        do
                        {
                          uint64_t v294 = 0;
                          uint64_t v295 = v45;
                          do
                          {
                            if (v294 | v288) {
                              *((_DWORD *)v293 + v294) = v295->i32[0];
                            }
                            ++v294;
                            uint64_t v295 = (float32x4_t *)((char *)v295 + 8);
                          }
                          while (v294 != 4);
                          ++v288;
                          v293 += 2;
                          v45 += 4;
                        }
                        while (v288 != 4);
                        unint64_t v296 = 0;
                        unint64_t v297 = (float32x4_t *)&unk_24854E670;
                        unint64_t v45 = (float32x4_t *)v357;
                        do
                        {
                          uint64_t v298 = 0;
                          float32x4_t v299 = 0uLL;
                          do
                          {
                            float32x4_t v299 = vmlaq_n_f32(v299, v297[v298], *(float *)((char *)&v392 + v298));
                            v298 += 4;
                          }
                          while (v298 != 64);
                          *(float32x4_t *)((char *)&v374 + 4 * v296) = v299;
                          ++v297;
                          BOOL v189 = v296 >= 0xC;
                          v296 += 4;
                        }
                        while (!v189);
                        char v300 = (int8x16_t *)(v81 + 32 * v80 + 16 * v7 + 16);
                        for (uint64_t i1 = 48; i1 != -16; i1 -= 16)
                        {
                          int8x16_t v302 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v374 + i1));
                          *char v300 = vextq_s8(v302, v302, 8uLL);
                          char v300 = (int8x16_t *)((char *)v300 + 4 * v7);
                        }
                        uint64_t v303 = 0;
                        v374.f32[0] = v292 - v290;
                        uint64_t v304 = v341 * v79;
                        uint64_t v305 = (__int32 *)(v338 + v341 * v79);
                        char v306 = &v374;
                        do
                        {
                          uint64_t v307 = 0;
                          int v308 = v305;
                          do
                          {
                            if (v307 | v303) {
                              v306->i32[v307] = *v308;
                            }
                            ++v307;
                            v308 += 2;
                          }
                          while (v307 != 4);
                          ++v303;
                          ++v306;
                          v305 += 16;
                        }
                        while (v303 != 4);
                        float32_t v309 = v289 - v291;
                        int v310 = &v374;
                        sub_248406194((uint64_t)&v374, v7, (uint64_t)&v44[v7], (uint64_t)v394);
                        uint64_t v311 = 0;
                        v374.f32[0] = v309;
                        uint64_t v312 = v337 + v304;
                        uint64_t v41 = v346;
                        do
                        {
                          for (uint64_t i2 = 0; i2 != 8; ++i2)
                          {
                            if (i2 | v311) {
                              v310->i32[i2] = *(_DWORD *)(v312 + 4 * i2);
                            }
                          }
                          ++v311;
                          v310 += 2;
                          v312 += 64;
                        }
                        while (v311 != 4);
LABEL_230:
                        uint64_t v390 = v7;
                        long long v391 = v44;
LABEL_231:
                        sub_2484060E0(&v374, (uint64_t)&v390, v394);
                        uint64_t v7 = v345;
LABEL_232:
                        unint64_t v42 = v344;
                        float v44 = (float32x4_t *)v361;
LABEL_233:
                        unint64_t v60 = v350;
                        break;
                      case 18:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[1024];
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406DA0, (uint64_t)v394, (uint64_t)&v374, 64, (uint64_t)&v82[1024]);
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 64, 64);
                        v394[0].i64[0] = 64;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_248406DA0;
                        goto LABEL_242;
                      case 19:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[512];
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406EF8, (uint64_t)v394, (uint64_t)&v374, 64, (uint64_t)&v82[512]);
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 32, 64);
                        v394[0].i64[0] = 32;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        int v190 = sub_248406DA0;
LABEL_236:
                        unint64_t v84 = v190;
LABEL_237:
                        uint64_t v172 = 32;
                        goto LABEL_250;
                      case 20:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[512];
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 32, 64);
                        v394[0].i64[0] = 32;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 32;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406DA0, (uint64_t)v394, (uint64_t)&v374, 32, (uint64_t)&v82[512]);
                        v394[0].i64[0] = 32;
                        unint64_t v42 = v344;
                        v394[0].i64[1] = (uint64_t)v45;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 64, 32);
                        v394[0].i64[0] = 64;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v82;
                        int v314 = sub_248406EF8;
                        goto LABEL_241;
                      case 21:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[4096];
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406D2C, (uint64_t)v394, (uint64_t)&v374, 128, (uint64_t)&v82[4096]);
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 128, 128);
                        v394[0].i64[0] = 128;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_248406D2C;
                        goto LABEL_247;
                      case 22:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[2048];
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406DA0, (uint64_t)v394, (uint64_t)&v374, 128, (uint64_t)&v82[2048]);
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 64, 128);
                        v394[0].i64[0] = 64;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        int v314 = sub_248406D2C;
LABEL_241:
                        unint64_t v84 = v314;
LABEL_242:
                        uint64_t v172 = 64;
                        goto LABEL_250;
                      case 23:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[2048];
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 64, 128);
                        v394[0].i64[0] = 64;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 64;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406D2C, (uint64_t)v394, (uint64_t)&v374, 64, (uint64_t)&v82[2048]);
                        v394[0].i64[0] = 64;
                        unint64_t v42 = v344;
                        v394[0].i64[1] = (uint64_t)v45;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 128, 64);
                        v394[0].i64[0] = 128;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v82;
                        unint64_t v315 = sub_248406DA0;
                        goto LABEL_246;
                      case 24:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[0x4000];
                        v394[0].i64[0] = 256;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 256;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484066C8, (uint64_t)v394, (uint64_t)&v374, 256, (uint64_t)&v82[0x4000]);
                        v394[0].i64[0] = 256;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 256;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 256, 256);
                        v394[0].i64[0] = 256;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v84 = sub_2484066C8;
                        goto LABEL_249;
                      case 25:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[0x2000];
                        v394[0].i64[0] = 256;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 256;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406D2C, (uint64_t)v394, (uint64_t)&v374, 256, (uint64_t)&v82[0x2000]);
                        v394[0].i64[0] = 256;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 128, 256);
                        v394[0].i64[0] = 128;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v45;
                        unint64_t v315 = sub_2484066C8;
LABEL_246:
                        unint64_t v84 = v315;
LABEL_247:
                        uint64_t v172 = 128;
                        goto LABEL_250;
                      case 26:
                        uint64_t v392 = v373[v79];
                        char v393 = (float32x4_t *)(v81 + 32 * v80);
                        uint64_t v83 = (uint64_t)&v82[0x2000];
                        v394[0].i64[0] = 256;
                        v394[0].i64[1] = v347 + 4 * v349 * v79;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 128, 256);
                        v394[0].i64[0] = 128;
                        v394[0].i64[1] = (uint64_t)v82;
                        v374.i64[0] = 128;
                        v374.i64[1] = (uint64_t)v45;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484066C8, (uint64_t)v394, (uint64_t)&v374, 128, (uint64_t)&v82[0x2000]);
                        v394[0].i64[0] = 128;
                        unint64_t v42 = v344;
                        v394[0].i64[1] = (uint64_t)v45;
                        v374.i64[0] = 256;
                        v374.i64[1] = (uint64_t)v82;
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)v394, (uint64_t)&v374, 256, 128);
                        v394[0].i64[0] = 256;
                        uint64_t v41 = v346;
                        v394[0].i64[1] = (uint64_t)v82;
                        unint64_t v84 = sub_248406D2C;
LABEL_249:
                        uint64_t v172 = 256;
LABEL_250:
                        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v84, (uint64_t)v394, (uint64_t)&v392, v172, v83);
                        unint64_t v60 = v350;
                        uint64_t v7 = v345;
                        float v44 = (float32x4_t *)v361;
                        unint64_t v45 = (float32x4_t *)v357;
                        break;
                      default:
                        break;
                    }
                  }
                  ++v78;
                }
                while (v78 != 3);
              }
              v41 += v349;
              unint64_t v61 = v336;
              uint64_t v66 = v343;
            }
            v60 += v66;
            if (v60 >= v61) {
              break;
            }
          }
        }
        ++v326;
      }
      while (v326 != v321);
    }
    uint64_t result = 0;
    ++v42;
  }
  while (v42 != v316);
  return result;
}

uint64_t sub_248405EEC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1(a2, a3, a4, a5);
}

int32x4_t sub_248405F04(void *a1, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    int v4 = (int32x4_t *)(a1[1] + 4 * v2);
    int32x4_t v5 = *(int32x4_t *)((char *)v4 + 4 * *a1);
    int32x4_t v6 = *(int32x4_t *)((char *)v4 + 8 * *a1);
    int32x4_t v7 = *(int32x4_t *)((char *)v4 + 12 * *a1);
    float32x2x2_t v8 = (float32x2x2_t)vzip1q_s32(*v4, v6);
    float32x2x2_t v9 = (float32x2x2_t)vzip2q_s32(*v4, v6);
    int32x4_t v10 = vzip1q_s32(v5, v7);
    unint64_t v11 = (float *)(a2[1] + 4 * *a2 * v2);
    vst2_f32(v11, v8);
    *(int32x4_t *)(a2[1] + 4 * *a2 * (v2 | 1)) = vzip2q_s32((int32x4_t)v8, v10);
    int32x4_t v12 = vzip2q_s32(v5, v7);
    unint64_t v13 = (float *)(a2[1] + 4 * *a2 * (v2 | 2));
    char v14 = v3;
    vst2_f32(v13, v9);
    int32x4_t result = vzip2q_s32((int32x4_t)v9, v12);
    *(int32x4_t *)(a2[1] + 4 * *a2 * (v2 | 3)) = result;
    uint64_t v2 = 4;
    char v3 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

float32_t sub_248405FAC(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  int32x4_t v10 = a1;
  do
  {
    a5[v8++] = *v10;
    int32x4_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 4);
  unint64_t v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (uint64_t i = 4; i != 8; ++i)
  {
    a5[i] = *v11;
    unint64_t v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_248407054(a5, 4, (uint64_t)a5, 4, a5 + 8);
  uint64_t v13 = 0;
  char v14 = a5 + 4;
  do
  {
    a5[v13 + 7] = vaddq_f32(a5[v13 + 7], a5[v13 + 6]);
    --v13;
  }
  while (v13 != -3);
  *char v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_248407054(v14, 4, (uint64_t)&a5[4], 4, a5 + 8);
  uint64_t v16 = 0;
  unint64_t v17 = (float32x4_t *)((char *)a3 + 28 * a4);
  do
  {
    v15.f32[0] = flt_2484DD0C0[v16];
    unint64_t v18 = &a5[v16];
    float32x4_t v19 = v18[4];
    float32x4_t v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *unint64_t v17 = v20;
    ++v16;
    unint64_t v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 4);
  return v15.f32[0];
}

uint64_t sub_2484060E0(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  int32x4_t v6 = a3 + 8;
  uint64_t v10 = 8;
  unint64_t v11 = a1;
  uint64_t v8 = 4;
  uint64_t v9 = a3;
  sub_248405F04(&v10, &v8);
  sub_248405FAC(a3, 4, a1, 4, v6);
  uint64_t v10 = 4;
  unint64_t v11 = a1;
  uint64_t v8 = 8;
  uint64_t v9 = a3;
  sub_248407100(&v10, &v8);
  uint64_t v10 = 8;
  unint64_t v11 = a3;
  return sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484071B0, (uint64_t)&v10, a2, 8, (uint64_t)v6);
}

float32_t sub_248406194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (float32x4_t *)(a4 + 64);
  sub_248407054((float32x4_t *)a1, 4, a4, 4, (float32x4_t *)(a4 + 64));
  int32x4_t v9 = *(int32x4_t *)(a4 + 16);
  int32x4_t v10 = *(int32x4_t *)(a4 + 32);
  int32x4_t v11 = *(int32x4_t *)(a4 + 48);
  float32x2x2_t v12 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)a4, v10);
  int32x4_t v13 = vzip1q_s32(v9, v11);
  float32x2x2_t v14 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)a4, v10);
  int32x4_t v15 = vzip2q_s32(v9, v11);
  uint64_t v16 = (float *)a1;
  vst2_f32(v16, v12);
  v16 += 4;
  *(int32x4_t *)uint64_t v16 = vzip2q_s32((int32x4_t)v12, v13);
  unint64_t v17 = (float *)(a1 + 32);
  vst2_f32(v17, v14);
  *(int32x4_t *)(a1 + 48) = vzip2q_s32((int32x4_t)v14, v15);

  return sub_248407054((float32x4_t *)a1, 4, a3, a2, v8);
}

void *sub_248406244(void *result, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = 12;
  uint64_t v5 = 8;
  uint64_t v6 = 4;
  do
  {
    uint64_t v7 = 0;
    uint64_t v8 = -4;
    do
    {
      uint64_t v9 = result[1];
      int32x4_t v10 = *(int32x4_t *)(v9 + v2 * *result + v7);
      int32x4_t v11 = *(int32x4_t *)(v9 + v6 * *result + v7);
      int32x4_t v12 = *(int32x4_t *)(v9 + v5 * *result + v7);
      uint64_t v13 = v8 + 5;
      uint64_t v14 = v8 + 6;
      uint64_t v15 = v8 + 7;
      unint64_t v16 = v8 + 4;
      int32x4_t v17 = *(int32x4_t *)(v9 + v4 * *result + v7);
      float32x2x2_t v18 = (float32x2x2_t)vzip1q_s32(v10, v12);
      int32x4_t v19 = vzip1q_s32(v11, v17);
      float32x2x2_t v20 = (float32x2x2_t)vzip2q_s32(v10, v12);
      unint64_t v21 = (float *)(a2[1] + 4 * *a2 * (v8 + 4) + 4 * v3);
      vst2_f32(v21, v18);
      uint64_t v22 = 4 * v3;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v22) = vzip2q_s32((int32x4_t)v18, v19);
      int32x4_t v23 = vzip2q_s32(v11, v17);
      unint64_t v24 = (float *)(a2[1] + 4 * *a2 * v14 + 4 * v3);
      vst2_f32(v24, v20);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v15 + v22) = vzip2q_s32((int32x4_t)v20, v23);
      v7 += 16;
      uint64_t v8 = v16;
    }
    while (v16 < 0xC);
    v4 += 16;
    v5 += 16;
    v6 += 16;
    v2 += 16;
    BOOL v25 = v3 >= 0xC;
    v3 += 4;
  }
  while (!v25);
  return result;
}

void *sub_24840632C(void *result, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = 0;
    char v5 = v3;
    uint64_t v6 = -4;
    do
    {
      uint64_t v7 = result[1];
      int32x4_t v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + v4);
      int32x4_t v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + v4);
      int32x4_t v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + v4);
      uint64_t v11 = v6 + 5;
      uint64_t v12 = v6 + 6;
      uint64_t v13 = v6 + 7;
      unint64_t v14 = v6 + 4;
      int32x4_t v15 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + v4);
      float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v8, v10);
      int32x4_t v17 = vzip1q_s32(v9, v15);
      float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v8, v10);
      int32x4_t v19 = (float *)(a2[1] + 4 * *a2 * (v6 + 4) + 4 * v2);
      vst2_f32(v19, v16);
      uint64_t v20 = 4 * v2;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v11 + v20) = vzip2q_s32((int32x4_t)v16, v17);
      int32x4_t v21 = vzip2q_s32(v9, v15);
      uint64_t v22 = (float *)(a2[1] + 4 * *a2 * v12 + 4 * v2);
      vst2_f32(v22, v18);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v20) = vzip2q_s32((int32x4_t)v18, v21);
      v4 += 16;
      uint64_t v6 = v14;
    }
    while (v14 < 0xC);
    char v3 = 0;
    uint64_t v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

void *sub_248406414(void *result, void *a2)
{
  unint64_t v2 = 0;
  do
  {
    uint64_t v3 = 0;
    char v4 = 1;
    do
    {
      uint64_t v5 = result[1];
      int32x4_t v6 = *(int32x4_t *)(v5 + 4 * *result * v2 + 4 * v3);
      int32x4_t v7 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 1) + 4 * v3);
      int32x4_t v8 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 2) + 4 * v3);
      int32x4_t v9 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 3) + 4 * v3);
      float32x2x2_t v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      int32x4_t v11 = vzip1q_s32(v7, v9);
      uint64_t v12 = (float *)(a2[1] + 4 * *a2 * v3 + 4 * v2);
      uint64_t v13 = 4 * v2;
      float32x2x2_t v14 = (float32x2x2_t)vzip2q_s32(v6, v8);
      vst2_f32(v12, v10);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 1) + v13) = vzip2q_s32((int32x4_t)v10, v11);
      int32x4_t v15 = vzip2q_s32(v7, v9);
      float32x2x2_t v16 = (float *)(a2[1] + 4 * *a2 * (v3 | 2) + 4 * v2);
      char v17 = v4;
      vst2_f32(v16, v14);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 3) + v13) = vzip2q_s32((int32x4_t)v14, v15);
      uint64_t v3 = 4;
      char v4 = 0;
    }
    while ((v17 & 1) != 0);
    BOOL v18 = v2 >= 0xC;
    v2 += 4;
  }
  while (!v18);
  return result;
}

void *sub_2484064F8(void *result, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = 0;
    char v5 = v3;
    uint64_t v6 = -4;
    do
    {
      uint64_t v7 = result[1];
      int32x4_t v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + v4);
      int32x4_t v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + v4);
      int32x4_t v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + v4);
      uint64_t v11 = v6 + 5;
      uint64_t v12 = v6 + 6;
      uint64_t v13 = v6 + 7;
      unint64_t v14 = v6 + 4;
      int32x4_t v15 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + v4);
      float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v8, v10);
      int32x4_t v17 = vzip1q_s32(v9, v15);
      float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v8, v10);
      int32x4_t v19 = (float *)(a2[1] + 4 * *a2 * (v6 + 4) + 4 * v2);
      vst2_f32(v19, v16);
      uint64_t v20 = 4 * v2;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v11 + v20) = vzip2q_s32((int32x4_t)v16, v17);
      int32x4_t v21 = vzip2q_s32(v9, v15);
      uint64_t v22 = (float *)(a2[1] + 4 * *a2 * v12 + 4 * v2);
      vst2_f32(v22, v18);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v20) = vzip2q_s32((int32x4_t)v18, v21);
      v4 += 16;
      uint64_t v6 = v14;
    }
    while (v14 < 0x1C);
    char v3 = 0;
    uint64_t v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

void *sub_2484065E0(void *result, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = 0;
    char v5 = v3;
    char v6 = 1;
    do
    {
      uint64_t v7 = result[1];
      int32x4_t v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + 4 * v4);
      int32x4_t v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + 4 * v4);
      int32x4_t v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + 4 * v4);
      int32x4_t v11 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + 4 * v4);
      float32x2x2_t v12 = (float32x2x2_t)vzip1q_s32(v8, v10);
      int32x4_t v13 = vzip1q_s32(v9, v11);
      unint64_t v14 = (float *)(a2[1] + 4 * *a2 * v4 + 4 * v2);
      uint64_t v15 = 4 * v2;
      float32x2x2_t v16 = (float32x2x2_t)vzip2q_s32(v8, v10);
      vst2_f32(v14, v12);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v4 | 1) + v15) = vzip2q_s32((int32x4_t)v12, v13);
      int32x4_t v17 = vzip2q_s32(v9, v11);
      float32x2x2_t v18 = (float *)(a2[1] + 4 * *a2 * (v4 | 2) + 4 * v2);
      char v19 = v6;
      vst2_f32(v18, v16);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v4 | 3) + v15) = vzip2q_s32((int32x4_t)v16, v17);
      uint64_t v4 = 4;
      char v6 = 0;
    }
    while ((v19 & 1) != 0);
    char v3 = 0;
    uint64_t v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_2484066C8(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    int32x4_t v9 = a4 + 256;
    int32x4_t v10 = a4 + 128;
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v11 = 0;
      uint64_t v13 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      float32x2x2_t v16 = (float32x4_t *)(v12 + v7);
      uint64_t v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        float32x2x2_t v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 128);
      uint64_t v18 = v12 + 4 * v13;
      for (uint64_t i = 128; i != 256; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_248406858(a4, 4, a4, 4, v9);
      for (uint64_t j = 0; j != -127; --j)
        a4[j + 255] = vaddq_f32(a4[j + 255], a4[j + 254]);
      *int32x4_t v10 = vmulq_f32(*v10, v27);
      sub_248406858(v10, 4, v10, 4, v9);
      uint64_t v22 = 0;
      uint64_t v23 = v15 + 1020 * v14;
      do
      {
        v21.i32[0] = dword_24854FBE0[v22];
        unint64_t v24 = &a4[v22];
        float32x4_t v25 = v24[128];
        float32x4_t v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 128);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

float32_t sub_248406858(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  int32x4_t v10 = a1;
  do
  {
    a5[v8++] = *v10;
    int32x4_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 64);
  uint64_t v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (uint64_t i = 64; i != 128; ++i)
  {
    a5[i] = *v11;
    uint64_t v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_248406990(a5, 4, a5, 4, a5 + 128);
  uint64_t v13 = 0;
  uint64_t v14 = a5 + 64;
  do
  {
    a5[v13 + 127] = vaddq_f32(a5[v13 + 127], a5[v13 + 126]);
    --v13;
  }
  while (v13 != -63);
  *uint64_t v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_248406990(v14, 4, a5 + 64, 4, a5 + 128);
  uint64_t v16 = 0;
  uint64_t v17 = (float32x4_t *)((char *)a3 + 508 * a4);
  do
  {
    v15.i32[0] = dword_24854FAE0[v16];
    uint64_t v18 = &a5[v16];
    float32x4_t v19 = v18[64];
    float32x4_t v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *uint64_t v17 = v20;
    ++v16;
    uint64_t v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 64);
  return v15.f32[0];
}

float32_t sub_248406990(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  int32x4_t v10 = a1;
  do
  {
    a5[v8++] = *v10;
    int32x4_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 32);
  uint64_t v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (uint64_t i = 32; i != 64; ++i)
  {
    a5[i] = *v11;
    uint64_t v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_248406AC4(a5, 4, a5, 4, a5 + 64);
  uint64_t v13 = 0;
  uint64_t v14 = a5 + 32;
  do
  {
    a5[v13 + 63] = vaddq_f32(a5[v13 + 63], a5[v13 + 62]);
    --v13;
  }
  while (v13 != -31);
  *uint64_t v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_248406AC4(v14, 4, a5 + 32, 4, a5 + 64);
  uint64_t v16 = 0;
  uint64_t v17 = (float32x4_t *)((char *)a3 + 252 * a4);
  do
  {
    v15.i32[0] = dword_24854FA60[v16];
    uint64_t v18 = &a5[v16];
    float32x4_t v19 = v18[32];
    float32x4_t v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *uint64_t v17 = v20;
    ++v16;
    uint64_t v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 32);
  return v15.f32[0];
}

float32_t sub_248406AC4(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  int32x4_t v10 = a1;
  do
  {
    a5[v8++] = *v10;
    int32x4_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 16);
  uint64_t v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (uint64_t i = 16; i != 32; ++i)
  {
    a5[i] = *v11;
    uint64_t v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_248406BF8(a5, 4, a5, 4, a5 + 32);
  uint64_t v13 = 0;
  uint64_t v14 = a5 + 16;
  do
  {
    a5[v13 + 31] = vaddq_f32(a5[v13 + 31], a5[v13 + 30]);
    --v13;
  }
  while (v13 != -15);
  *uint64_t v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_248406BF8(v14, 4, a5 + 16, 4, a5 + 32);
  uint64_t v16 = 0;
  uint64_t v17 = (float32x4_t *)((char *)a3 + 124 * a4);
  do
  {
    v15.i32[0] = dword_24854F61C[v16];
    uint64_t v18 = &a5[v16];
    float32x4_t v19 = v18[16];
    float32x4_t v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *uint64_t v17 = v20;
    ++v16;
    uint64_t v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 16);
  return v15.f32[0];
}

float32_t sub_248406BF8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  int32x4_t v10 = a1;
  do
  {
    a5[v8++] = *v10;
    int32x4_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 8);
  uint64_t v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (uint64_t i = 8; i != 16; ++i)
  {
    a5[i] = *v11;
    uint64_t v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_248405FAC(a5, 4, a5, 4, a5 + 16);
  uint64_t v13 = 0;
  uint64_t v14 = a5 + 8;
  do
  {
    a5[v13 + 15] = vaddq_f32(a5[v13 + 15], a5[v13 + 14]);
    --v13;
  }
  while (v13 != -7);
  *uint64_t v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_248405FAC(v14, 4, a5 + 8, 4, a5 + 16);
  uint64_t v16 = 0;
  uint64_t v17 = (float32x4_t *)((char *)a3 + 60 * a4);
  do
  {
    v15.i32[0] = dword_24854F5FC[v16];
    uint64_t v18 = &a5[v16];
    float32x4_t v19 = v18[8];
    float32x4_t v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *uint64_t v17 = v20;
    ++v16;
    uint64_t v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 8);
  return v15.f32[0];
}

void sub_248406D2C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406858((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_248406DA0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406990((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void *sub_248406E14(void *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 12;
    uint64_t v7 = 8;
    uint64_t v8 = 4;
    do
    {
      if (a4)
      {
        uint64_t v9 = 0;
        for (unint64_t i = 0; i < a4; i += 4)
        {
          uint64_t v11 = result[1];
          int32x4_t v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          int32x4_t v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          int32x4_t v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          int32x4_t v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          int32x4_t v17 = vzip1q_s32(v13, v15);
          float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          int32x4_t v19 = vzip2q_s32(v13, v15);
          float32x4_t v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          uint64_t v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          uint64_t v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_248406EF8(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406AC4((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_248406F6C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248405FAC((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_248406FE0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406BF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

float32_t sub_248407054(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v5 = 0;
  float32x4_t v6 = *(float32x4_t *)((char *)a1 + 8 * a2);
  float32x4_t v7 = *(float32x4_t *)((char *)a1 + 4 * a2);
  float32x4_t v8 = *(float32x4_t *)((char *)a1 + 12 * a2);
  float32x4_t v9 = vaddq_f32(*a1, v6);
  float32x4_t v10 = vsubq_f32(*a1, v6);
  *a5 = v9;
  a5[1] = v10;
  float32x4_t v11 = vaddq_f32(v7, v8);
  float32x4_t v12 = vmulq_f32(v7, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  float32x4_t v13 = vaddq_f32(v12, v11);
  float32x4_t v14 = vsubq_f32(v12, v11);
  a5[2] = v13;
  a5[3] = v14;
  char v15 = 1;
  do
  {
    char v16 = v15;
    v14.i32[0] = dword_2484DDA28[v5];
    float32x4_t v17 = *(float32x4_t *)((char *)a5 + ((16 * v5) | 0x20));
    float32x4_t v18 = vmlsq_lane_f32(a5[v5], v17, *(float32x2_t *)v14.f32, 0);
    *(float32x4_t *)(a3 + 4 * v5 * a4) = vmlaq_n_f32(a5[v5], v17, v14.f32[0]);
    *(float32x4_t *)(a3 + 4 * (v5 ^ 3) * a4) = v18;
    uint64_t v5 = 1;
    char v15 = 0;
  }
  while ((v16 & 1) != 0);
  return v14.f32[0];
}

int32x4_t sub_248407100(void *a1, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = a1[1];
    int32x4_t v5 = *(int32x4_t *)(v4 + 4 * *a1 * v2);
    int32x4_t v6 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 1));
    int32x4_t v7 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 2));
    int32x4_t v8 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 3));
    char v9 = v3;
    float32x2x2_t v10 = (float32x2x2_t)vzip1q_s32(v5, v7);
    int32x4_t v11 = vzip1q_s32(v6, v8);
    float32x2x2_t v12 = (float32x2x2_t)vzip2q_s32(v5, v7);
    int32x4_t v13 = vzip2q_s32(v6, v8);
    int32x4_t result = vzip2q_s32((int32x4_t)v10, v11);
    char v15 = (float *)(a2[1] + 4 * v2);
    uint64_t v16 = 4 * v2;
    vst2_f32(v15, v10);
    *(int32x4_t *)(a2[1] + 4 * *a2 + v16) = result;
    float32x4_t v17 = (float *)(a2[1] + 8 * *a2 + 4 * v2);
    vst2_f32(v17, v12);
    *(int32x4_t *)(a2[1] + 12 * *a2 + v16) = vzip2q_s32((int32x4_t)v12, v13);
    uint64_t v2 = 4;
    char v3 = 0;
  }
  while ((v9 & 1) != 0);
  return result;
}

void sub_2484071B0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248407054((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

void sub_248407224(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int8x16_t a14, double a15, int32x2_t a16, uint64_t a17, unsigned __int32 *a18, uint64_t *a19, float32x4_t *a20,float32x4_t *a21)
{
  float32x4_t v25 = a20;
  if (a6 << 6)
  {
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = *(void *)(*(void *)(a5 + 64) + 32) + 4 * *(void *)(*(void *)(a5 + 64) + 24 * a3 + 72);
    *(float *)&a9 = *(float *)&a9 / (float)a2;
    *(float *)&a11 = *(float *)&a9 * *(float *)&a11;
    *(float *)&a10 = *(float *)&a9 * *(float *)&a10;
    uint64_t v29 = *a19;
    uint64_t v30 = a19[1];
    uint64_t v31 = a19[2];
    a14.i32[0] = *a18;
    a16.i32[0] = a18[1];
    a14 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
    uint64_t v32 = (const float *)(a18 + 3);
    float32x4_t v33 = vld1q_dup_f32(v32);
    float32x4_t v34 = vnegq_f32(v33);
    int8x16_t v35 = (int8x16_t)vdupq_lane_s32(a16, 0);
    v21.i32[0] = a18[2];
    int8x16_t v36 = (int8x16_t)vdupq_lane_s32(v21, 0);
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    __asm { FMOV            V18.4S, #1.125 }
    do
    {
      float32x4_t v43 = vcvtq_f32_s32(*(int32x4_t *)(v29 + v26));
      int8x16_t v44 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v45 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + v26), *(float *)&a10), (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)vmlaq_f32(v43, vrecpeq_f32(v43), v34), v44), vandq_s8(veorq_s8(a14, vandq_s8((int8x16_t)v43, v37)), vandq_s8(v44, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))))));
      float32x4_t v46 = vcvtq_f32_s32(*(int32x4_t *)(v30 + v26));
      int8x16_t v47 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v48 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 4 * a4 + v26), *(float *)&a9), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v35, vandq_s8((int8x16_t)v46, v37)), vandq_s8(v47, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v46, vrecpeq_f32(v46), v34), v47)));
      float32x4_t v49 = vcvtq_f32_s32(*(int32x4_t *)(v31 + v26));
      int8x16_t v50 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v51 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 8 * a4 + v26), *(float *)&a11), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v36, vandq_s8((int8x16_t)v49, v37)), vandq_s8(v50, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v49, vrecpeq_f32(v49), v34), v50)));
      a20[v26 / 0x10] = vmlaq_f32(v45, v48, a12);
      *(float32x4_t *)((char *)a20 + 4 * a4 + v26) = v48;
      *(float32x4_t *)((char *)a20 + 8 * a4 + v26) = vmlaq_f32(v51, v48, a13);
      v27 += 4;
      v26 += 16;
    }
    while (v27 < a6 << 6);
  }
  uint64_t v52 = 0;
  uint64_t v53 = 4 * a4;
  do
  {
    sub_248407410(*a1, (float32x2_t *)(*(void *)(a8 + v52) + 4 * *(void *)(a7 + v52)), a17, v25, a21, a9, a10, a11, *(double *)a12.i64, *(double *)a13.i64, *(double *)a14.i64);
    v52 += 8;
    float32x4_t v25 = (float32x4_t *)((char *)v25 + v53);
  }
  while (v52 != 24);
}

void sub_248407410(int a1, float32x2_t *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  int32x4_t v11 = a5;
  float32x2x2_t v12 = a4;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      a4->i32[0] = a2->i32[0];
      break;
    case 4:
      float32x2_t v13 = *(float32x2_t *)((char *)a2 + 4 * a3);
      int32x2_t v14 = (int32x2_t)vmul_f32(vadd_f32(*a2, v13), (float32x2_t)0x3F0000003F000000);
      int32x2_t v15 = (int32x2_t)vmul_f32(vsub_f32(*a2, v13), (float32x2_t)0x3F0000003F000000);
      float32x2_t v16 = (float32x2_t)vzip1_s32(v14, v15);
      float32x2_t v17 = (float32x2_t)vzip2_s32(v14, v15);
      float32x2_t v18 = vmul_f32(vadd_f32(v16, v17), (float32x2_t)0x3F0000003F000000);
      float32x2_t v19 = vmul_f32(vsub_f32(v16, v17), (float32x2_t)0x3F0000003F000000);
      a4->i32[0] = v18.i32[0];
      a4->f32[1] = vmuls_lane_f32(1.1089, v18, 1);
      a4[4].f32[0] = 1.1089 * v19.f32[0];
      a4[4].f32[1] = vmuls_lane_f32(1.1089, v19, 1) * 1.1089;
      break;
    case 5:
      uint64_t v82 = 4;
      uint64_t v83 = (float32x4_t *)&v89;
      sub_248408184(a3, (float32x4_t *)a2, &v82, v88);
      float32x2x2_t v20 = (float32x2x2_t)vzip1q_s32(v89, v91);
      int32x4_t v21 = vzip1q_s32(v90, v92);
      float32x2x2_t v22 = (float32x2x2_t)vzip2q_s32(v89, v91);
      int32x4_t v23 = vzip2q_s32(v90, v92);
      unint64_t v24 = &v84;
      vst2_f32(v24->f32, v20);
      *(int32x4_t *)++unint64_t v24 = vzip2q_s32((int32x4_t)v20, v21);
      float32x4_t v25 = (float *)&v86;
      vst2_f32(v25, v22);
      int32x4_t v87 = vzip2q_s32((int32x4_t)v22, v23);
      uint64_t v82 = 4;
      uint64_t v83 = (float32x4_t *)&v89;
      sub_248408184(4, &v84, &v82, v88);
      for (uint64_t i = 0; i != 4; ++i)
      {
        *float32x2x2_t v12 = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + i), *((float *)&xmmword_2484DCB50 + i)), (float32x4_t)xmmword_2484DCB50);
        v12 += 8;
      }
      break;
    case 6:
      LODWORD(a6) = a2->i32[0];
      LODWORD(a7) = a2->i32[a3];
      float32x2_t v27 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a7), (int32x2_t)vsub_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a7)), (float32x2_t)0x3F0000003F000000);
      a4->i32[0] = v27.i32[0];
      a4->f32[1] = vmuls_lane_f32(1.1089, v27, 1);
      break;
    case 7:
      float32_t v28 = (float)(0.5 * vsub_f32(*a2, (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1)).f32[0]) * 1.1089;
      a4->f32[0] = vaddv_f32(*a2) * 0.5;
      a4->f32[1] = v28;
      break;
    case 8:
      uint64_t v82 = 1;
      uint64_t v83 = (float32x4_t *)&v89;
      sub_248408008(a3, a2, &v82, (uint64_t)&v85, a6, a7, a8, a9, a10, a11);
      float32x4_t v84 = (float32x4_t)v89;
      float32x4_t v29 = (float32x4_t)v89;
      goto LABEL_12;
    case 9:
      float32x4_t v84 = *(float32x4_t *)a2->f32;
      float32x4_t v85 = v84;
      int32x4_t v89 = (int32x4_t)v84;
      uint64_t v82 = 1;
      uint64_t v83 = &v84;
      sub_248408008(1, &v89, &v82, (uint64_t)&v85, *(double *)v84.i64, a7, a8, a9, a10, a11);
      int32x4_t v89 = (int32x4_t)v84;
      float32x4_t v29 = v84;
LABEL_12:
      *float32x2x2_t v12 = vmulq_f32(v29, (float32x4_t)xmmword_2484DCB50);
      break;
    case 10:
      uint64_t v82 = 2;
      uint64_t v83 = (float32x4_t *)&v89;
      sub_2484080C8(a3, a2, &v82, (float32x2_t *)&v86);
      uint64_t v30 = 0;
      float32x4x2_t v94 = vld2q_f32((const float *)v89.i32);
      float32x4_t v31 = vaddq_f32(v94.val[0], v94.val[1]);
      v94.val[0] = vsubq_f32(v94.val[0], v94.val[1]);
      v94.val[1].i64[0] = 0x3F0000003F000000;
      v94.val[1].i64[1] = 0x3F0000003F000000;
      int32x4_t v89 = (int32x4_t)vmulq_f32(v31, v94.val[1]);
      int32x4_t v90 = (int32x4_t)vmulq_f32(v94.val[0], v94.val[1]);
      char v32 = 1;
      do
      {
        char v33 = v32;
        v12[8 * v30] = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + v30), flt_2484DDA20[v30]), (float32x4_t)xmmword_2484DCB50);
        uint64_t v30 = 1;
        char v32 = 0;
      }
      while ((v33 & 1) != 0);
      break;
    case 11:
      uint64_t v34 = 0;
      float32x4_t v35 = *(float32x4_t *)&a2->f32[a3];
      float32x4_t v36 = vaddq_f32(*(float32x4_t *)a2->f32, v35);
      float32x4_t v37 = vsubq_f32(*(float32x4_t *)a2->f32, v35);
      v35.i64[0] = 0x3F0000003F000000;
      v35.i64[1] = 0x3F0000003F000000;
      float32x4_t v84 = vmulq_f32(v36, v35);
      float32x4_t v85 = vmulq_f32(v37, v35);
      float32x4_t v86 = v36;
      int32x4_t v87 = (int32x4_t)v37;
      char v38 = 1;
      do
      {
        uint64_t v39 = 0;
        char v40 = v38;
        uint64_t v41 = v34;
        unint64_t v42 = &v84 + v34;
        do
        {
          v89.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        char v38 = 0;
        uint64_t v34 = 1;
      }
      while ((v40 & 1) != 0);
      uint64_t v82 = 2;
      uint64_t v83 = &v84;
      sub_2484080C8(2, (float32x2_t *)&v89, &v82, (float32x2_t *)&v86);
      uint64_t v43 = 0;
      float32x4x2_t v95 = vld2q_f32(v84.f32);
      int32x4_t v89 = (int32x4_t)v95.val[0];
      int32x4_t v90 = (int32x4_t)v95.val[1];
      char v44 = 1;
      do
      {
        char v45 = v44;
        v12[8 * v43] = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + v43), flt_2484DDA20[v43]), (float32x4_t)xmmword_2484DCB50);
        uint64_t v43 = 1;
        char v44 = 0;
      }
      while ((v45 & 1) != 0);
      break;
    case 18:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840885C, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[32]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[16];
      sub_2484065E0(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[16];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840885C, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[32]);
      for (uint64_t j = 0; j != 8; ++j)
      {
        uint64_t v47 = 0;
        float32x4_t v48 = (const float *)xmmword_24854CB88 + j;
        float32x4_t v49 = vld1q_dup_f32(v48);
        do
        {
          v12[v47] = vmulq_f32(vmulq_f32(v11[v47], v49), (float32x4_t)xmmword_24854CB88[v47]);
          ++v47;
        }
        while (v47 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 19:
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)a5;
      sub_248408240(a3, (float32x4_t *)a2, &v84, a5 + 16);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[8];
      sub_248407100(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248408928, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[16]);
      for (uint64_t k = 0; k != 4; ++k)
      {
        uint64_t v51 = 0;
        uint64_t v52 = (const float *)&xmmword_2484DCB50 + k;
        float32x4_t v53 = vld1q_dup_f32(v52);
        do
        {
          v12[v51] = vmulq_f32(vmulq_f32(v11[v51], v53), (float32x4_t)xmmword_24854CB88[v51]);
          ++v51;
        }
        while (v51 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 20:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&a5[8];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248408928, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[16]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 4;
      v89.i64[1] = (uint64_t)v11;
      sub_248405F04(&v84, &v89);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)&v11[8];
      sub_248408240(4, v11, &v84, v11 + 16);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_248407100(&v84, &v89);
      for (uint64_t m = 0; m != 4; ++m)
      {
        uint64_t v55 = 0;
        unint64_t v56 = (const float *)&xmmword_2484DCB50 + m;
        float32x4_t v57 = vld1q_dup_f32(v56);
        do
        {
          v12[v55] = vmulq_f32(vmulq_f32(v11[v55], v57), (float32x4_t)xmmword_24854CB88[v55]);
          ++v55;
        }
        while (v55 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 21:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[128]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[64];
      sub_248406244(&v84, &v89);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[64];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[128]);
      for (uint64_t n = 0; n != 16; ++n)
      {
        uint64_t v59 = 0;
        unint64_t v60 = (const float *)xmmword_24854CBA8 + n;
        float32x4_t v61 = vld1q_dup_f32(v60);
        do
        {
          v12[v59] = vmulq_f32(vmulq_f32(v11[v59], v61), (float32x4_t)xmmword_24854CBA8[v59]);
          ++v59;
        }
        while (v59 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 22:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[64]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[32];
      sub_248406414(&v84, &v89);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840885C, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[64]);
      for (iuint64_t i = 0; ii != 8; ++ii)
      {
        uint64_t v63 = 0;
        int32x4_t v64 = (const float *)xmmword_24854CB88 + ii;
        float32x4_t v65 = vld1q_dup_f32(v64);
        do
        {
          v12[v63] = vmulq_f32(vmulq_f32(v11[v63], v65), (float32x4_t)xmmword_24854CBA8[v63]);
          ++v63;
        }
        while (v63 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 23:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&a5[32];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840885C, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[64]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_24840632C(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[32];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[64]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_248406414(&v84, &v89);
      for (juint64_t j = 0; jj != 8; ++jj)
      {
        uint64_t v67 = 0;
        uint64_t v68 = (const float *)xmmword_24854CB88 + jj;
        float32x4_t v69 = vld1q_dup_f32(v68);
        do
        {
          v12[v67] = vmulq_f32(vmulq_f32(v11[v67], v69), (float32x4_t)xmmword_24854CBA8[v67]);
          ++v67;
        }
        while (v67 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 24:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484082BC, (uint64_t)&v82, (uint64_t)&v84, 32, (uint64_t)&a5[512]);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)&v11[256];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)&v84, (uint64_t)&v89, 32, 32);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[256];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484082BC, (uint64_t)&v84, (uint64_t)&v89, 32, (uint64_t)&v11[512]);
      for (kuint64_t k = 0; kk != 32; ++kk)
      {
        uint64_t v71 = 0;
        unint64_t v72 = (const float *)xmmword_24854CBE8 + kk;
        float32x4_t v73 = vld1q_dup_f32(v72);
        do
        {
          v12[v71] = vmulq_f32(vmulq_f32(v11[v71], v73), (float32x4_t)xmmword_24854CBE8[v71]);
          ++v71;
        }
        while (v71 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    case 25:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)a5;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484082BC, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[256]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)&v11[128];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)&v84, (uint64_t)&v89, 32, 16);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v84, (uint64_t)&v89, 32, (uint64_t)&v11[256]);
      for (uint64_t mm = 0; mm != 16; ++mm)
      {
        uint64_t v75 = 0;
        uint64_t v76 = (const float *)xmmword_24854CBA8 + mm;
        float32x4_t v77 = vld1q_dup_f32(v76);
        do
        {
          v12[v75] = vmulq_f32(vmulq_f32(v11[v75], v77), (float32x4_t)xmmword_24854CBE8[v75]);
          ++v75;
        }
        while (v75 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    case 26:
      uint64_t v82 = a3;
      uint64_t v83 = (float32x4_t *)a2;
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&a5[128];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24840877C, (uint64_t)&v82, (uint64_t)&v84, 32, (uint64_t)&a5[256]);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)&v84, (uint64_t)&v89, 16, 32);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[128];
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2484082BC, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[256]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_248406E14, (uint64_t)&v84, (uint64_t)&v89, 32, 16);
      for (nuint64_t n = 0; nn != 16; ++nn)
      {
        uint64_t v79 = 0;
        uint64_t v80 = (const float *)xmmword_24854CBA8 + nn;
        float32x4_t v81 = vld1q_dup_f32(v80);
        do
        {
          v12[v79] = vmulq_f32(vmulq_f32(v11[v79], v81), (float32x4_t)xmmword_24854CBE8[v79]);
          ++v79;
        }
        while (v79 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    default:
      return;
  }
}

uint64_t sub_248408008(uint64_t result, _DWORD *a2, void *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  for (uint64_t i = 0; i != 16; i += 4)
  {
    *(_DWORD *)(a4 + i) = *a2;
    a2 += result;
  }
  uint64_t v11 = 0;
  float v12 = *(float *)a4;
  float v13 = *(float *)(a4 + 4);
  float v14 = *(float *)(a4 + 8);
  LODWORD(a7) = *(_DWORD *)(a4 + 12);
  *(float *)&a9 = *(float *)a4 + *(float *)&a7;
  float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  *(float *)&a10 = v13 + v14;
  float32x2_t v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
  int32x2_t v17 = (int32x2_t)vadd_f32(v15, v16);
  int32x2_t v18 = (int32x2_t)vsub_f32(v15, v16);
  *(int32x2_t *)(a4 + 16) = vzip1_s32(v17, v18);
  float v19 = (float)(v12 - *(float *)&a7) * 0.5412;
  float v20 = (float)(v13 - v14) * 1.3066;
  *(float *)&a7 = v19 - v20;
  int32x2_t v21 = (int32x2_t)vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), (float32x2_t)vdup_n_s32(0x3FB504F3u), v19 + v20);
  *(_DWORD *)(a4 + 24) = v21.i32[0];
  *(float *)(a4 + 28) = v19 - v20;
  *(int32x2_t *)a4 = vzip1_s32(v17, v21);
  *(_DWORD *)(a4 + 8) = v18.i32[0];
  *(float *)(a4 + 12) = v19 - v20;
  do
  {
    *(float *)(a3[1] + 4 * *a3 * v11) = *(float *)(a4 + 4 * v11) * 0.25;
    ++v11;
  }
  while (v11 != 4);
  return result;
}

uint64_t sub_2484080C8(uint64_t result, float32x2_t *a2, void *a3, float32x2_t *a4)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x2_t *)((char *)a2 + 4 * result);
  }
  uint64_t v5 = 0;
  float32x2_t v6 = a4[1];
  float32x2_t v8 = a4[2];
  float32x2_t v7 = a4[3];
  float32x2_t v9 = vadd_f32(*a4, v7);
  float32x2_t v10 = vadd_f32(v6, v8);
  float32x2_t v11 = vadd_f32(v9, v10);
  float32x2_t v12 = vsub_f32(v9, v10);
  float32x2_t v13 = vsub_f32(*a4, v7);
  a4[4] = v11;
  a4[5] = v12;
  float32x2_t v14 = vmul_f32(v13, (float32x2_t)vdup_n_s32(0x3F0A8BD4u));
  float32x2_t v15 = vmul_f32(vsub_f32(v6, v8), (float32x2_t)vdup_n_s32(0x3FA73D75u));
  float32x2_t v16 = vadd_f32(v14, v15);
  float32x2_t v17 = vsub_f32(v14, v15);
  a4[7] = v17;
  a4[2] = v12;
  a4[3] = v17;
  float32x2_t v18 = vmla_f32(v17, (float32x2_t)vdup_n_s32(0x3FB504F3u), v16);
  a4[6] = v18;
  *a4 = v11;
  a4[1] = v18;
  __asm { FMOV            V0.2S, #0.25 }
  do
  {
    *(float32x2_t *)(a3[1] + 4 * *a3 * v5) = vmul_f32(a4[v5], _D0);
    ++v5;
  }
  while (v5 != 4);
  return result;
}

uint64_t sub_248408184(uint64_t result, float32x4_t *a2, void *a3, float32x4_t *a4)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x4_t *)((char *)a2 + 4 * result);
  }
  uint64_t v5 = 0;
  float32x4_t v6 = a4[1];
  float32x4_t v8 = a4[2];
  float32x4_t v7 = a4[3];
  float32x4_t v9 = vaddq_f32(*a4, v7);
  float32x4_t v10 = vaddq_f32(v6, v8);
  float32x4_t v11 = vaddq_f32(v9, v10);
  float32x4_t v12 = vsubq_f32(v9, v10);
  float32x4_t v13 = vsubq_f32(*a4, v7);
  a4[4] = v11;
  a4[5] = v12;
  float32x4_t v14 = vmulq_f32(v13, (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  float32x4_t v15 = vmulq_f32(vsubq_f32(v6, v8), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  float32x4_t v16 = vaddq_f32(v14, v15);
  float32x4_t v17 = vsubq_f32(v14, v15);
  a4[7] = v17;
  a4[2] = v12;
  a4[3] = v17;
  float32x4_t v18 = vmlaq_f32(v17, (float32x4_t)vdupq_n_s32(0x3FB504F3u), v16);
  a4[6] = v18;
  *a4 = v11;
  a4[1] = v18;
  __asm { FMOV            V0.4S, #0.25 }
  do
  {
    *(float32x4_t *)(a3[1] + 4 * *a3 * v5) = vmulq_f32(a4[v5], _Q0);
    ++v5;
  }
  while (v5 != 4);
  return result;
}

void sub_248408240(uint64_t a1, float32x4_t *a2, void *a3, float32x4_t *a4)
{
  for (uint64_t i = 0; i != 8; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x4_t *)((char *)a2 + 4 * a1);
  }
  sub_2484085D8((uint64_t)a4, a4 + 8);
  uint64_t v7 = 0;
  v8.i64[0] = 0x3E0000003E000000;
  v8.i64[1] = 0x3E0000003E000000;
  do
  {
    *(float32x4_t *)(a3[1] + 4 * *a3 * v7) = vmulq_f32(a4[v7], v8);
    ++v7;
  }
  while (v7 != 8);
}

void sub_2484082BC(void *a1, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (uint64_t)&a4[32];
    float32x4_t v11 = a4 + 64;
    uint64_t v12 = (uint64_t)&a4[48];
    float32x4_t v29 = a4 + 1;
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v13 = 0;
      float32x4_t v14 = (float32x4_t *)(a1[1] + v8);
      uint64_t v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        float32x4_t v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 32);
      float32x4_t v16 = a4;
      for (uint64_t i = 31; i != 15; --i)
      {
        v16[32] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_2484084A4(v10, v11);
      float32x4_t v18 = a4;
      for (uint64_t j = 31; j != 15; --j)
      {
        v18[48] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (uint64_t k = 0; k != 16; ++k)
        *(float32x4_t *)(v12 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v12 + 16 * k), *(float *)&dword_24854F61C[k]);
      sub_2484084A4(v12, v11);
      uint64_t v21 = 0;
      a4[48] = vmlaq_f32(a4[49], v28, a4[48]);
      do
      {
        a4[v21 + 49] = vaddq_f32(a4[v21 + 49], a4[v21 + 50]);
        ++v21;
      }
      while (v21 != 14);
      uint64_t v22 = 0;
      uint64_t v23 = -512;
      do
      {
        *(_OWORD *)(v10 + v23) = *(_OWORD *)(v10 + v22);
        v22 += 16;
        v23 += 32;
      }
      while (v23);
      uint64_t v24 = 0;
      float32x4_t v25 = v29;
      v26.i64[0] = 0x3D0000003D000000;
      v26.i64[1] = 0x3D0000003D000000;
      do
      {
        *float32x4_t v25 = *(float32x4_t *)(v12 + v24);
        v25 += 2;
        v24 += 16;
      }
      while (v24 != 256);
      for (uint64_t m = 0; m != 32; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v9) = vmulq_f32(a4[m], v26);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

__n128 sub_2484084A4(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = 240; i != 112; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_2484085D8((uint64_t)a2, a2 + 16);
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)&a2[8];
  uint64_t v8 = 240;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 128);
  for (uint64_t j = 0; j != 8; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_24854F5FC[j]);
  sub_2484085D8(v7, a2 + 16);
  uint64_t v10 = 0;
  a2[8] = vmlaq_f32(a2[9], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[8]);
  do
  {
    a2[v10 + 9] = vaddq_f32(a2[v10 + 9], a2[v10 + 10]);
    ++v10;
  }
  while (v10 != 6);
  uint64_t v11 = 0;
  uint64_t v12 = (_OWORD *)a1;
  do
  {
    *uint64_t v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 8);
  uint64_t v13 = 0;
  float32x4_t v14 = (__n128 *)(a1 + 16);
  do
  {
    __n128 result = (__n128)a2[v13 + 8];
    *float32x4_t v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 8);
  return result;
}

__n128 sub_2484085D8(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = 0;
  for (uint64_t i = 112; i != 48; i -= 16)
  {
    a2[v2] = vaddq_f32(*(float32x4_t *)(a1 + v2 * 16), *(float32x4_t *)(a1 + i));
    ++v2;
  }
  uint64_t v4 = 0;
  float32x4_t v5 = *a2;
  float32x4_t v6 = a2[1];
  float32x4_t v8 = a2[2];
  float32x4_t v7 = a2[3];
  float32x4_t v9 = vaddq_f32(*a2, v7);
  float32x4_t v10 = vaddq_f32(v6, v8);
  float32x4_t v11 = vaddq_f32(v9, v10);
  float32x4_t v12 = vsubq_f32(v9, v10);
  a2[8] = v11;
  a2[9] = v12;
  float32x4_t v13 = vmulq_f32(vsubq_f32(v5, v7), (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  float32x4_t v14 = vmulq_f32(vsubq_f32(v6, v8), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  float32x4_t v15 = vaddq_f32(v13, v14);
  float32x4_t v16 = vsubq_f32(v13, v14);
  a2[11] = v16;
  a2[2] = v12;
  a2[3] = v16;
  float32x4_t v17 = vmlaq_f32(v16, (float32x4_t)vdupq_n_s32(0x3FB504F3u), v15);
  a2[10] = v17;
  *a2 = v11;
  a2[1] = v17;
  uint64_t v18 = 112;
  do
  {
    a2[v4 + 4] = vsubq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + v18));
    ++v4;
    v18 -= 16;
  }
  while (v4 != 4);
  for (uint64_t j = 0; j != 4; ++j)
    a2[j + 4] = vmulq_n_f32(a2[j + 4], flt_2484DD0C0[j]);
  uint64_t v20 = 0;
  float32x4_t v21 = a2[4];
  float32x4_t v22 = a2[5];
  float32x4_t v24 = a2[6];
  float32x4_t v23 = a2[7];
  float32x4_t v25 = vaddq_f32(v21, v23);
  float32x4_t v26 = vaddq_f32(v22, v24);
  float32x4_t v27 = vaddq_f32(v25, v26);
  float32x4_t v28 = vsubq_f32(v25, v26);
  a2[8] = v27;
  a2[9] = v28;
  float32x4_t v29 = vmulq_f32(vsubq_f32(v21, v23), (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  float32x4_t v30 = vmulq_f32(vsubq_f32(v22, v24), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  float32x4_t v31 = vaddq_f32(v29, v30);
  float32x4_t v32 = vsubq_f32(v29, v30);
  float32x4_t v33 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
  float32x4_t v34 = vmlaq_f32(v32, v33, v31);
  a2[10] = v34;
  a2[11] = v32;
  a2[4] = vmlaq_f32(v34, v33, v27);
  a2[5] = vaddq_f32(v28, v34);
  a2[6] = vaddq_f32(v28, v32);
  a2[7] = v32;
  float32x4_t v35 = (_OWORD *)a1;
  do
  {
    *float32x4_t v35 = a2[v20];
    v35 += 2;
    ++v20;
  }
  while (v20 != 4);
  uint64_t v36 = 0;
  float32x4_t v37 = (__n128 *)(a1 + 16);
  do
  {
    __n128 result = (__n128)a2[v36 + 4];
    *float32x4_t v37 = result;
    v37 += 2;
    ++v36;
  }
  while (v36 != 4);
  return result;
}

void sub_24840877C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x4_t v10 = (float32x4_t *)(a4 + 256);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      uint64_t v11 = 0;
      float32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        float32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2484084A4(a4, v10);
      for (uint64_t i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24840885C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x4_t v10 = (float32x4_t *)(a4 + 128);
    do
    {
      uint64_t v11 = 0;
      float32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        float32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2484085D8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_248408928(void *result, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      uint64_t v14 = 0;
      float32x4_t v15 = (float32x4_t *)(result[1] + v4);
      uint64_t v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      uint64_t v17 = 0;
      float32x4_t v18 = *a4;
      float32x4_t v19 = a4[1];
      float32x4_t v21 = a4[2];
      float32x4_t v20 = a4[3];
      float32x4_t v22 = vaddq_f32(*a4, v20);
      float32x4_t v23 = vaddq_f32(v19, v21);
      float32x4_t v24 = vaddq_f32(v22, v23);
      float32x4_t v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      float32x4_t v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      float32x4_t v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      float32x4_t v28 = vaddq_f32(v26, v27);
      float32x4_t v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      float32x4_t v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_248408A0C(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int8x16_t a14, double a15, int32x2_t a16, uint64_t a17, unsigned __int32 *a18, int16x4_t **a19, float32x4_t *a20,float32x4_t *a21)
{
  float32x4_t v25 = a20;
  if (a6 << 6)
  {
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = *(void *)(*(void *)(a5 + 64) + 32) + 4 * *(void *)(*(void *)(a5 + 64) + 24 * a3 + 72);
    *(float *)&a9 = *(float *)&a9 / (float)a2;
    *(float *)&a11 = *(float *)&a9 * *(float *)&a11;
    *(float *)&a10 = *(float *)&a9 * *(float *)&a10;
    float32x4_t v29 = *a19;
    float32x4_t v30 = a19[1];
    float32x4_t v31 = a19[2];
    a14.i32[0] = *a18;
    a16.i32[0] = a18[1];
    a14 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
    float32x4_t v32 = (const float *)(a18 + 3);
    float32x4_t v33 = vld1q_dup_f32(v32);
    float32x4_t v34 = vnegq_f32(v33);
    int8x16_t v35 = (int8x16_t)vdupq_lane_s32(a16, 0);
    v21.i32[0] = a18[2];
    int8x16_t v36 = (int8x16_t)vdupq_lane_s32(v21, 0);
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    __asm { FMOV            V18.4S, #1.125 }
    do
    {
      int16x4_t v43 = *v29++;
      int16x4_t v44 = v43;
      int16x4_t v45 = *v30++;
      int16x4_t v46 = v45;
      int16x4_t v47 = *v31++;
      float32x4_t v48 = vcvtq_f32_s32(vmovl_s16(v44));
      int8x16_t v49 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v50 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + v26), *(float *)&a10), (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)vmlaq_f32(v48, vrecpeq_f32(v48), v34), v49), vandq_s8(veorq_s8(a14, vandq_s8((int8x16_t)v48, v37)), vandq_s8(v49, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))))));
      float32x4_t v51 = vcvtq_f32_s32(vmovl_s16(v46));
      int8x16_t v52 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v53 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 4 * a4 + v26), *(float *)&a9), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v35, vandq_s8((int8x16_t)v51, v37)), vandq_s8(v52, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v51, vrecpeq_f32(v51), v34), v52)));
      float32x4_t v54 = vcvtq_f32_s32(vmovl_s16(v47));
      int8x16_t v55 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      float32x4_t v56 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 8 * a4 + v26), *(float *)&a11), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v36, vandq_s8((int8x16_t)v54, v37)), vandq_s8(v55, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v54, vrecpeq_f32(v54), v34), v55)));
      a20[v26 / 0x10] = vmlaq_f32(v50, v53, a12);
      *(float32x4_t *)((char *)a20 + 4 * a4 + v26) = v53;
      *(float32x4_t *)((char *)a20 + 8 * a4 + v26) = vmlaq_f32(v56, v53, a13);
      v27 += 4;
      v26 += 16;
    }
    while (v27 < a6 << 6);
  }
  uint64_t v57 = 0;
  uint64_t v58 = 4 * a4;
  do
  {
    sub_248407410(*a1, (float32x2_t *)(*(void *)(a8 + v57) + 4 * *(void *)(a7 + v57)), a17, v25, a21, a9, a10, a11, *(double *)a12.i64, *(double *)a13.i64, *(double *)a14.i64);
    v57 += 8;
    float32x4_t v25 = (float32x4_t *)((char *)v25 + v58);
  }
  while (v57 != 24);
}

void *sub_248408C04(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2484032DC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_248408C60(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_248408C7C(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_248409DAC(a1, a2);
    float32x4_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    float32x4_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *float32x4_t v6 = 0;
      v6[1] = 0;
      void v6[2] = 0;
      sub_248409DFC(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_248408D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_248408D38(void *a1)
{
  uint64_t v1 = 0;
  *a1 = &unk_26FC65E30;
  uint64_t v2 = a1 + 751;
  do
  {
    sub_2483E8DDC(&v2[v1]);
    v1 -= 74;
  }
  while (v1 != -814);

  JUMPOUT(0x24C579F90);
}

void *sub_248408DC4(void *a1)
{
  uint64_t v2 = 0;
  *a1 = &unk_26FC65E30;
  char v3 = a1 + 751;
  do
  {
    sub_2483E8DDC(&v3[v2]);
    v2 -= 74;
  }
  while (v2 != -814);
  return a1;
}

uint64_t sub_248408E30(void *a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v12 = 0;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v42 = 1;
  int v43 = 2;
  if (a8) {
    uint64_t v13 = sub_24840979C;
  }
  else {
    uint64_t v13 = sub_248409A40;
  }
  if (a8) {
    uint64_t v14 = sub_248409050;
  }
  else {
    uint64_t v14 = sub_2484094FC;
  }
  float32x4_t v15 = a1 + 12;
  uint64_t v16 = a1 + 833;
  uint64_t v17 = a1 + 821;
  while (1)
  {
    uint64_t v18 = *((int *)&v42 + v12);
    float32x4_t v19 = &a1[v18];
    uint64_t v20 = v19[909];
    unint64_t v21 = a2 >> v20;
    uint64_t v22 = v19[912];
    unint64_t v23 = a3 >> v22;
    unint64_t v24 = a3 >> v22 << v22;
    BOOL v25 = a2 >> v20 << v20 == a2 && v24 == a3;
    if (v25 && a1[820]) {
      break;
    }
LABEL_14:
    if (++v12 == 3) {
      return 0;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = v15;
  float32x4_t v29 = &v16[v18];
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  int8x16_t v35 = v13;
  int8x16_t v36 = a4;
  float32x4_t v33 = v15;
  float32x4_t v34 = v14;
  while (1)
  {
    uint64_t v39 = v28;
    float32x4_t v30 = v28 - 7;
    float32x4_t v31 = *v28 ? v13 : v14;
    uint64_t v40 = v27;
    uint64_t v41 = v26;
    uint64_t result = ((uint64_t (*)(void, uint64_t, void, void, void, uint64_t, unint64_t, unint64_t, unint64_t, void, uint64_t, void, void *, uint64_t, void, void, void, void, void))v31)(v17[v27], a6, *(void *)((char *)v29 + v26), *(void *)((char *)v29 + v26 + 264), a1[832], v18, v21, v23, a2, *a4, a1[2] + 4 * a1[3] * v27, *(void *)(a1[819] + 8 * v27), v30, a1[4] + v26, a1[904], a1[903], a1[900], *(void *)(a7 + 8 * v18), *(unsigned int *)(a1[1] + 4 * v27));
    if (result) {
      return result;
    }
    uint64_t v27 = v40 + 1;
    uint64_t v26 = v41 + 24;
    uint64_t v28 = v39 + 74;
    a6 = v37;
    a7 = v38;
    uint64_t v13 = v35;
    a4 = v36;
    float32x4_t v15 = v33;
    uint64_t v14 = v34;
    float32x4_t v29 = &v16[v18];
    if ((unint64_t)(v40 + 1) >= a1[820]) {
      goto LABEL_14;
    }
  }
}

BOOL sub_248409050(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22 = 1 << a2;
  unint64_t v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      int v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0) {
        int v25 = v24 + 1;
      }
      else {
        int v25 = v24 + 2;
      }
      unsigned int v26 = v25 >> 1;
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    unsigned int v26 = *a4;
  }
  else
  {
    unsigned int v26 = 32;
  }
  uint64_t v27 = byte_24854FEF4[a10];
  uint64_t v28 = qword_24854EFA0[3 * v27 + a6];
  int v29 = sub_2484092F4((void *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40) {
    unsigned int v30 = 64;
  }
  else {
    unsigned int v30 = v26;
  }
  int v31 = v29;
  if (v30 >= 8) {
    unsigned int v30 = (v30 >> 1) + 4;
  }
  unint64_t v32 = sub_248409368(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22) {
    return 1;
  }
  unint64_t v34 = v32;
  uint64_t v35 = 0;
  uint64_t v36 = a5;
  uint64_t v37 = a11 + (v28 << 8);
  unint64_t v38 = (uint64_t)v22 << 6;
  unint64_t v39 = v23 - 1;
  uint64_t v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_2485534EC[a10] <= 1u) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = byte_2485534EC[a10];
  }
  if (byte_248553507[a10] <= 1u) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = byte_248553507[a10];
  }
  uint64_t v43 = 4 * v36;
  do
  {
    uint64_t v44 = v40;
    uint64_t v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    uint64_t v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  BOOL result = v32 != 0;
  if (v38 > v23 && v34)
  {
    uint64_t v46 = v34 <= v38 >> 4;
    uint64_t v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      unint64_t v48 = sub_248409368(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_24854F160[v23 >> a2] + (unint64_t)word_24854F0E0[(v39 + v34) >> a2])), a12);
      *(_DWORD *)(a18 + 4 * *(unsigned int *)(v37 + 4 * v23)) += ((v48 >> 1) ^ -(v48 & 1)) << a19;
      uint64_t v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      BOOL result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

uint64_t sub_2484092F4(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = (unsigned int *)a1[9];
  float32x4_t v6 = (unsigned int *)a1[10];
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    float32x4_t v8 = (unsigned int *)a1[9];
    do
    {
      unsigned int v9 = *v8++;
      if (v9 < a3) {
        ++v7;
      }
    }
    while (v8 != v6);
  }
  uint64_t v10 = 13 * (a5 ^ 1);
  if (a5 >= 2) {
    uint64_t v10 = 26;
  }
  return *(unsigned __int8 *)(a1[12] + a1[16] * (v7 + v10 + a4 + (v10 + a4) * (v6 - v5)) + a2);
}

uint64_t sub_248409368(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  float32x4_t v6 = (void *)a3[2];
  if ((unint64_t)v6 > a3[3])
  {
    sub_2483EB0C0(a3);
  }
  else
  {
    unint64_t v7 = a3[1];
    unint64_t v8 = *a3 | (*v6 << v7);
    a3[2] = (unint64_t)v6 + ((63 - v7) >> 3);
    *a3 = v8;
    a3[1] = v7 | 0x38;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v16 = sub_248409FB4(*(void *)(*(void *)(a1 + 8) + 24 * a2), a3);
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 20);
    unint64_t v10 = (unint64_t)(v9 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    unint64_t v11 = *(_DWORD *)(a1 + 40) & v9 & 0xFFFu;
    uint64_t v12 = *(void *)(*(void *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v10);
    if (v12 <= v11) {
      unint64_t v13 = *(void *)(*(void *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v10);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = HIDWORD(v13);
    unint64_t v15 = HIWORD(v13);
    if (v12 <= v11) {
      unint64_t v16 = BYTE1(v12);
    }
    else {
      unint64_t v16 = (unint64_t)(v9 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    }
    unsigned int v17 = v11 + (unsigned __int16)v14 + (v15 ^ WORD1(v12)) * (*(_DWORD *)(a1 + 20) >> 12);
    BOOL v18 = v17 < 0x10000;
    unint64_t v19 = a3[1];
    unint64_t v20 = *a3 >> (16 * v18);
    if (v17 < 0x10000) {
      unsigned int v17 = (unsigned __int16)*a3 | ((unsigned __int16)v17 << 16);
    }
    *(_DWORD *)(a1 + 20) = v17;
    *a3 = v20;
    a3[1] = v19 - 16 * v18;
  }
  unint64_t v21 = (int *)(*(void *)(a1 + 24) + 16 * a2);
  unint64_t v22 = v21[1];
  BOOL v23 = v16 >= v22;
  unint64_t v24 = v16 - v22;
  if (v23)
  {
    int v25 = *v21;
    uint64_t v28 = v21 + 2;
    int v26 = v21[2];
    int v27 = v28[1];
    char v29 = v25 - (v26 + v27) + (v24 >> (v26 + v27));
    int v30 = *a3 & ~(-1 << v29);
    unint64_t v31 = a3[1] - (v29 & 0x1F);
    *a3 >>= v29 & 0x1F;
    a3[1] = v31;
    LODWORD(v16) = v16 & ~(-1 << v27) | ((unint64_t)(v30 | (((v16 >> v27) & ((1 << v26)
                                                                                                - 1) | (1 << v26)) << v29)) << v27);
  }
  return v16;
}

BOOL sub_2484094FC(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22 = 1 << a2;
  unint64_t v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      int v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0) {
        int v25 = v24 + 1;
      }
      else {
        int v25 = v24 + 2;
      }
      unsigned int v26 = v25 >> 1;
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    unsigned int v26 = *a4;
  }
  else
  {
    unsigned int v26 = 32;
  }
  uint64_t v27 = byte_24854FEF4[a10];
  uint64_t v28 = qword_24854EFA0[3 * v27 + a6];
  int v29 = sub_2484092F4((void *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40) {
    unsigned int v30 = 64;
  }
  else {
    unsigned int v30 = v26;
  }
  int v31 = v29;
  if (v30 >= 8) {
    unsigned int v30 = (v30 >> 1) + 4;
  }
  unint64_t v32 = sub_248409368(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22) {
    return 1;
  }
  unint64_t v34 = v32;
  uint64_t v35 = 0;
  uint64_t v36 = a5;
  uint64_t v37 = a11 + (v28 << 8);
  unint64_t v38 = (uint64_t)v22 << 6;
  unint64_t v39 = v23 - 1;
  uint64_t v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_2485534EC[a10] <= 1u) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = byte_2485534EC[a10];
  }
  if (byte_248553507[a10] <= 1u) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = byte_248553507[a10];
  }
  uint64_t v43 = 4 * v36;
  do
  {
    uint64_t v44 = v40;
    uint64_t v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    uint64_t v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  BOOL result = v32 != 0;
  if (v38 > v23 && v34)
  {
    uint64_t v46 = v34 <= v38 >> 4;
    uint64_t v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      uint64_t v48 = sub_248409368(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_24854F160[v23 >> a2] + (unint64_t)word_24854F0E0[(v39 + v34) >> a2])), a12);
      *(_WORD *)(a18 + 2 * *(unsigned int *)(v37 + 4 * v23)) += (unint64_t)(-(v48 & 1) ^ (v48 >> 1)) << a19;
      uint64_t v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      BOOL result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

BOOL sub_24840979C(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22 = 1 << a2;
  unint64_t v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      int v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0) {
        int v25 = v24 + 1;
      }
      else {
        int v25 = v24 + 2;
      }
      unsigned int v26 = v25 >> 1;
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    unsigned int v26 = *a4;
  }
  else
  {
    unsigned int v26 = 32;
  }
  uint64_t v27 = byte_24854FEF4[a10];
  uint64_t v28 = qword_24854EFA0[3 * v27 + a6];
  int v29 = sub_2484092F4((void *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40) {
    unsigned int v30 = 64;
  }
  else {
    unsigned int v30 = v26;
  }
  int v31 = v29;
  if (v30 >= 8) {
    unsigned int v30 = (v30 >> 1) + 4;
  }
  unint64_t v32 = sub_2483EAC28(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22) {
    return 1;
  }
  unint64_t v34 = v32;
  uint64_t v35 = 0;
  uint64_t v36 = a5;
  uint64_t v37 = a11 + (v28 << 8);
  unint64_t v38 = (uint64_t)v22 << 6;
  unint64_t v39 = v23 - 1;
  uint64_t v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_2485534EC[a10] <= 1u) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = byte_2485534EC[a10];
  }
  if (byte_248553507[a10] <= 1u) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = byte_248553507[a10];
  }
  uint64_t v43 = 4 * v36;
  do
  {
    uint64_t v44 = v40;
    uint64_t v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    uint64_t v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  BOOL result = v32 != 0;
  if (v38 > v23 && v34)
  {
    uint64_t v46 = v34 <= v38 >> 4;
    uint64_t v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      unint64_t v48 = sub_2483EAC28(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_24854F160[v23 >> a2] + (unint64_t)word_24854F0E0[(v39 + v34) >> a2])), a12);
      *(_DWORD *)(a18 + 4 * *(unsigned int *)(v37 + 4 * v23)) += ((v48 >> 1) ^ -(v48 & 1)) << a19;
      uint64_t v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      BOOL result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

BOOL sub_248409A40(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22 = 1 << a2;
  unint64_t v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      int v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0) {
        int v25 = v24 + 1;
      }
      else {
        int v25 = v24 + 2;
      }
      unsigned int v26 = v25 >> 1;
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    unsigned int v26 = *a4;
  }
  else
  {
    unsigned int v26 = 32;
  }
  uint64_t v27 = byte_24854FEF4[a10];
  uint64_t v28 = qword_24854EFA0[3 * v27 + a6];
  int v29 = sub_2484092F4((void *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40) {
    unsigned int v30 = 64;
  }
  else {
    unsigned int v30 = v26;
  }
  int v31 = v29;
  if (v30 >= 8) {
    unsigned int v30 = (v30 >> 1) + 4;
  }
  unint64_t v32 = sub_2483EAC28(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22) {
    return 1;
  }
  unint64_t v34 = v32;
  uint64_t v35 = 0;
  uint64_t v36 = a5;
  uint64_t v37 = a11 + (v28 << 8);
  unint64_t v38 = (uint64_t)v22 << 6;
  unint64_t v39 = v23 - 1;
  uint64_t v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_2485534EC[a10] <= 1u) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = byte_2485534EC[a10];
  }
  if (byte_248553507[a10] <= 1u) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = byte_248553507[a10];
  }
  uint64_t v43 = 4 * v36;
  do
  {
    uint64_t v44 = v40;
    uint64_t v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    uint64_t v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  BOOL result = v32 != 0;
  if (v38 > v23 && v34)
  {
    uint64_t v46 = v34 <= v38 >> 4;
    uint64_t v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      uint64_t v48 = sub_2483EAC28(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_24854F160[v23 >> a2] + (unint64_t)word_24854F0E0[(v39 + v34) >> a2])), a12);
      *(_WORD *)(a18 + 2 * *(unsigned int *)(v37 + 4 * v23)) += (unint64_t)(-(v48 & 1) ^ (v48 >> 1)) << a19;
      uint64_t v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      BOOL result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

void *sub_248409CE0(void *result, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = result[906] + a2;
  uint64_t v4 = result[905];
  result[903] = *(void *)(result[901] + 24) + *(void *)(result[901] + 16) * v3 + 4 * v4;
  uint64_t v5 = result[820];
  float32x4_t v6 = result + 833;
  uint64_t v7 = 56;
  do
  {
    uint64_t v8 = result[v2 + 912];
    result[904] = *(void *)(result[902] + 24) + *(void *)(result[902] + 16) * v3 + v4;
    if (v5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = a2 >> v8;
      unint64_t v11 = v6;
      uint64_t v12 = v5;
      do
      {
        void *v11 = *(void *)(result[899] + v9 + v7) + *(void *)(result[899] + v9 + 48) * v10;
        if (v10) {
          uint64_t v13 = *(void *)(result[899] + v9 + v7) + *(void *)(result[899] + v9 + 48) * (v10 - 1);
        }
        else {
          uint64_t v13 = 0;
        }
        v11[33] = v13;
        v11 += 3;
        v9 += 120;
        --v12;
      }
      while (v12);
    }
    ++v2;
    v7 += 40;
    ++v6;
  }
  while (v2 != 3);
  return result;
}

char *sub_248409DAC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2483E92E8();
  }
  BOOL result = (char *)sub_2483F8ED4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_248409DFC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float32x4_t v6 = result;
    BOOL result = sub_2484032DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248409E5C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_248409E78()
{
}

uint64_t sub_248409E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = 0;
  uint64_t v9 = **(void **)(a1 + 8);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v10 = (v8 - v9) >> 3;
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  do
  {
    if (v8 != v9)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (a5)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 288);
          uint64_t v14 = *(void *)(a1 + 24 * i + 8 * v7 + 24) + 4 * *(void *)(a1 + 16);
          do
          {
            *(_DWORD *)(*(void *)(a7 + 8 * v7) + 4 * v12) += *(_DWORD *)(v14 + 4 * v12) << *(_DWORD *)(v13 + 4 * i);
            ++v12;
          }
          while (a5 != v12);
        }
      }
    }
    ++v7;
  }
  while (v7 != 3);
  *(void *)(a1 + 16) += a5;
  return 0;
}

void *sub_248409F34(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_2483F0278(a1, a2);
    float32x4_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_248409F98(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248409FB4(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = (unsigned __int8 *)(a1 + 4 * *a2);
  unint64_t v4 = *v3;
  if (v4 <= 8)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    uint64_t v5 = a2[1] - 8;
    v2 >>= 8;
    v3 += 4 * *(unsigned __int16 *)(a1 + 4 * *a2 + 2)
        + 4 * (v2 & ~(-1 << (v4 - 8)));
    LODWORD(v4) = *v3;
  }
  *a2 = v2 >> v4;
  a2[1] = v5 - v4;
  return *((unsigned __int16 *)v3 + 1);
}

unsigned int *sub_24840A014(unsigned int *__src, char *__dst, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = __src;
  if (a4 == 32) {
    return (unsigned int *)memcpy(__dst, __src, 4 * a3);
  }
  if (a3)
  {
    char v6 = a4 - 1;
    char v7 = ~(_BYTE)a5 + a4;
    int v8 = ~(-1 << (a4 - 1));
    do
    {
      unsigned int v9 = *v5++;
      unsigned int v10 = v9 >> v6;
      unsigned int v11 = v9 & v8;
      if ((v9 & v8) != 0)
      {
        unsigned int v12 = v11 >> v7;
        unsigned int v13 = v11 << (23 - v7);
        int v14 = v13 & 0x7FFFFF;
        unsigned int v15 = __clz(v13 & 0x7FFFFF);
        unsigned int v16 = v13 << (v15 - 8);
        unsigned int v17 = 9 - v15;
        int v18 = v16 & 0x7FFFFE;
        if (v12)
        {
          unsigned int v17 = v12;
          int v18 = v14;
        }
        if (a5 > 7) {
          int v18 = v14;
        }
        else {
          unsigned int v12 = v17;
        }
        unint64_t __src = (unsigned int *)((((-1 << (a5 - 1)) + 1 + v12) << 23) + 1065353216);
        *(_DWORD *)__dst = v18 | ((v10 != 0) << 31) | __src;
      }
      else
      {
        if (v10) {
          float v19 = -0.0;
        }
        else {
          float v19 = 0.0;
        }
        *(float *)__dst = v19;
      }
      __dst += 4;
      --a3;
    }
    while (a3);
  }
  return __src;
}

uint64_t sub_24840A0F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 == *(_DWORD *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3 == *(_DWORD *)(a1 + 4)) {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  sub_2484017B8((uint64_t)&v12, v2, v3);
  uint64_t v4 = v16;
  if (!v16)
  {
    uint64_t v7 = v13;
    uint64_t v6 = v14;
    uint64_t v14 = 0;
    uint64_t v8 = v15;
    *(_OWORD *)a1 = v12;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
    if (v9)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v9 - 24));
      free(*(void **)(v9 - 32));
      unsigned int v10 = v16;
      *(void *)(a1 + 32) = v8;
      if (v10) {
        return v4;
      }
    }
    else
    {
      *(void *)(a1 + 32) = v8;
    }
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v11 - 24));
      free(*(void **)(v11 - 32));
    }
  }
  return v4;
}

uint64_t sub_24840A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(_DWORD *)a1)
  {
    case 1:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = 1;
      goto LABEL_9;
    case 2:
      uint64_t v3 = a3 + 1;
      goto LABEL_6;
    case 3:
      uint64_t v3 = (2 * a3) | 1;
LABEL_6:
      uint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_9;
    case 4:
      uint64_t v3 = 3 * a3 + 1;
      uint64_t v4 = *(void *)(a1 + 8);
      goto LABEL_9;
    case 5:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v3 = 3 * a3 + *(void *)(a1 + 24) * a2 + 18;
LABEL_9:
      uint64_t result = v3 + v4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_24840A270(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_24840A908((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      goto LABEL_18;
    }
    unint64_t v9 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7
        ? 0x38E38E38E38E38ELL
        : v9;
    if (v10 > 0x38E38E38E38E38ELL) {
LABEL_18:
    }
      sub_2483E92E8();
    uint64_t v11 = (char *)sub_2483FE084(v10);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = &v11[72 * v12];
    uint64_t result = sub_24840A7F0(a2, a3, (uint64_t)v11);
    goto LABEL_12;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3);
    sub_24840A4C8(a2, v14, (uint64_t)v8);
    uint64_t result = sub_24840A7F0(v14, a3, *(void *)(a1 + 8));
LABEL_12:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_24840A4C8(a2, a3, (uint64_t)v8);
  uint64_t v15 = result;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != result)
  {
    uint64_t v17 = v16 - 72;
    int v18 = (uint64_t (***)(void))(v16 - 72);
    float v19 = (uint64_t (***)(void))(v16 - 72);
    do
    {
      unint64_t v20 = *v19;
      v19 -= 9;
      uint64_t result = (*v20)(v18);
      v17 -= 72;
      BOOL v21 = v18 == (uint64_t (***)(void))v15;
      int v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_24840A424(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24840A42C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_24840A434(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_24840A478(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 88))
  {
    uint64_t v3 = (void **)(a1 + 24);
    sub_2483FDBFC(&v3);
    uint64_t v3 = (void **)a1;
    sub_2483FDCBC(&v3);
  }
  return a1;
}

uint64_t sub_24840A4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    for (uint64_t i = a1; i != v4; i += 72)
    {
      long long v6 = *(_OWORD *)(i + 8);
      *(void *)(a3 + 24) = *(void *)(i + 24);
      *(_OWORD *)(a3 + 8) = v6;
      if (a3 != i)
      {
        uint64_t v7 = (void **)(a3 + 32);
        uint64_t v8 = *(void *)(a3 + 32);
        uint64_t v9 = *(void *)(i + 32);
        uint64_t v10 = *(void *)(i + 40);
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
        uint64_t v12 = *(void *)(a3 + 48);
        if (0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3) >= v11)
        {
          uint64_t v26 = *(void *)(a3 + 40);
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v8) >> 3);
          if (v27 >= v11)
          {
            if (v9 != v10)
            {
              do
              {
                uint64_t v36 = *(void *)(v9 + 8);
                *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
                *(void *)(v8 + 8) = v36;
                v9 += 24;
                v8 += 24;
              }
              while (v9 != v10);
              uint64_t v26 = *(void *)(a3 + 40);
            }
            if (v26 != v8)
            {
              uint64_t v37 = v26 - 24;
              unint64_t v38 = (void (***)(void))(v26 - 24);
              unint64_t v39 = (void (***)(void))(v26 - 24);
              do
              {
                uint64_t v40 = *v39;
                v39 -= 3;
                (*v40)(v38);
                v37 -= 24;
                BOOL v19 = v38 == (void (***)(void))v8;
                unint64_t v38 = v39;
              }
              while (!v19);
            }
            *(void *)(a3 + 40) = v8;
            goto LABEL_40;
          }
          if (v26 != v8)
          {
            uint64_t v28 = v8 + 8;
            uint64_t v29 = 24 * v27;
            unsigned int v30 = (uint64_t *)(v9 + 8);
            do
            {
              uint64_t v31 = *v30;
              *(_DWORD *)(v28 + 8) = *((_DWORD *)v30 + 2);
              *(void *)uint64_t v28 = v31;
              v28 += 24;
              v30 += 3;
              v29 -= 24;
            }
            while (v29);
            uint64_t v8 = *(void *)(a3 + 40);
          }
          uint64_t v32 = v9 + 24 * v27;
          uint64_t v33 = v8;
          if (v32 != v10)
          {
            uint64_t v34 = v8;
            uint64_t v33 = v8;
            do
            {
              *(void *)uint64_t v33 = &unk_26FC65F40;
              uint64_t v35 = *(void *)(v32 + 8);
              *(_DWORD *)(v33 + 16) = *(_DWORD *)(v32 + 16);
              *(void *)(v33 + 8) = v35;
              v32 += 24;
              v33 += 24;
              v34 += 24;
            }
            while (v32 != v10);
          }
          uint64_t v23 = v33;
        }
        else
        {
          if (v8)
          {
            uint64_t v13 = *(void *)(a3 + 40);
            uint64_t v14 = *(void **)(a3 + 32);
            if (v13 != v8)
            {
              uint64_t v15 = v13 - 24;
              uint64_t v16 = (void (***)(void))(v13 - 24);
              uint64_t v17 = (void (***)(void))(v13 - 24);
              do
              {
                int v18 = *v17;
                v17 -= 3;
                (*v18)(v16);
                v15 -= 24;
                BOOL v19 = v16 == (void (***)(void))v8;
                uint64_t v16 = v17;
              }
              while (!v19);
              uint64_t v14 = *v7;
              uint64_t v4 = a2;
            }
            *(void *)(a3 + 40) = v8;
            operator delete(v14);
            uint64_t v12 = 0;
            *uint64_t v7 = 0;
            *(void *)(a3 + 40) = 0;
            *(void *)(a3 + 48) = 0;
          }
          if (v11 > 0xAAAAAAAAAAAAAAALL) {
            sub_2483E92E8();
          }
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
          uint64_t v21 = 2 * v20;
          if (2 * v20 <= v11) {
            uint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
          }
          if (v20 >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v21;
          }
          sub_248409DAC((void *)(a3 + 32), v22);
          uint64_t v23 = *(void *)(a3 + 40);
          if (v9 != v10)
          {
            uint64_t v24 = *(void *)(a3 + 40);
            do
            {
              *(void *)uint64_t v23 = &unk_26FC65F40;
              uint64_t v25 = *(void *)(v9 + 8);
              *(_DWORD *)(v23 + 16) = *(_DWORD *)(v9 + 16);
              *(void *)(v23 + 8) = v25;
              v9 += 24;
              v23 += 24;
              v24 += 24;
            }
            while (v9 != v10);
          }
        }
        *(void *)(a3 + 40) = v23;
      }
LABEL_40:
      uint64_t v41 = *(void *)(i + 56);
      *(_WORD *)(a3 + 64) = *(_WORD *)(i + 64);
      *(void *)(a3 + 56) = v41;
      a3 += 72;
    }
  }
  return a3;
}

uint64_t sub_24840A7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)uint64_t v7 = &unk_26FC66970;
      long long v8 = *(_OWORD *)(a1 + v6 + 8);
      *(void *)(v7 + 24) = *(void *)(a1 + v6 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(void *)(a3 + v6 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      sub_24840A9A8((char *)(a3 + v6 + 32), *(void *)(a1 + v6 + 32), *(void *)(a1 + v6 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + v6 + 40) - *(void *)(a1 + v6 + 32)) >> 3));
      uint64_t v9 = *(void *)(a1 + v6 + 56);
      *(_WORD *)(v7 + 64) = *(_WORD *)(a1 + v6 + 64);
      *(void *)(v7 + 56) = v9;
      v6 += 72;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_24840A908(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 72;
      uint64_t v6 = v3 - 72;
      uint64_t v7 = v3 - 72;
      do
      {
        long long v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v5 -= 72;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_24840A9A8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_248409DAC(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &unk_26FC65F40;
        uint64_t v9 = *(void *)(a2 + 8);
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
        *(void *)(v7 + 8) = v9;
        a2 += 24;
        v7 += 24;
        v8 += 24;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24840AA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_24840AA5C(uint64_t a1, uint64_t a2, uint64x2_t *a3, unint64_t *a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  uint64_t v16 = a3;
  uint64_t v18 = a1;
  sub_24842A0C4((uint64_t)&v152, a3[1].i64[0], a3[1].i64[1], *(_DWORD *)(a1 + 64), 0);
  uint64_t v19 = v159;
  if (!v159)
  {
    int v112 = a8;
    uint64_t v108 = a7;
    int64x2_t v145 = v152;
    int64x2_t v152 = 0uLL;
    long long v147 = v154;
    float32x4_t v146 = v153;
    uint64_t v148 = v155;
    float v153 = 0;
    long long v154 = 0uLL;
    uint64_t v155 = 0;
    uint64_t v20 = *(void *)v18;
    uint64_t v21 = *(void *)(v18 + 8) - *(void *)v18;
    long long v149 = v156;
    long long v150 = v157;
    unint64_t v22 = *(void *)(v18 + 72);
    unint64_t v23 = v21 >> 6;
    char v151 = v158;
    uint64_t v116 = v16;
    if (v22 < v21 >> 6)
    {
      unint64_t v24 = *(void *)(v18 + 240);
      uint64_t v25 = (unint64_t *)(v20 + (v22 << 6) + 48);
      while (*(v25 - 1) <= v24 && *v25 <= v24)
      {
        v25 += 8;
        if (v23 == ++v22) {
          goto LABEL_52;
        }
      }
    }
    if (v22 >= v23)
    {
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v106 = a4;
      uint64_t v107 = a2;
      int v27 = a6;
      int v109 = a6;
      unint64_t v28 = v22;
      int v117 = a5;
      do
      {
        uint64_t v29 = v18;
        uint64_t v30 = v20 + (v28 << 6);
        uint64_t v31 = (uint64_t *)(v30 + 56);
        uint64_t v32 = *(void *)(v30 + 56);
        int v33 = v32;
        if (SHIDWORD(v32) < (int)v32) {
          int v33 = HIDWORD(v32);
        }
        if (v33 <= v27 && v33 >= a5)
        {
          v35.i64[0] = v32;
          v35.i64[1] = HIDWORD(v32);
          uint64x2_t v36 = (uint64x2_t)vnegq_s64(v35);
          int64x2_t v37 = (int64x2_t)vshlq_u64(*v116, v36);
          int64x2_t v38 = (int64x2_t)vshlq_u64(v116[1], v36);
          int8x16_t v39 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v38, v37), *(uint64x2_t *)(v30 + 40)), (int8x16_t)vqsubq_u64(*(uint64x2_t *)(v30 + 40), (uint64x2_t)v37), (int8x16_t)v38);
          int8x16_t v114 = v39;
          uint64_t v40 = v39.i64[1];
          if (v39.i64[0] && v39.i64[1] != 0)
          {
            if (v112 && *(unsigned char *)(v29 + 258))
            {
              size_t v42 = 4 * v39.i64[0];
              uint64_t v44 = v37.i64[1];
              uint64_t v43 = v37.i64[0];
              do
              {
                bzero((void *)(*(void *)(v30 + 24) + *(void *)(v30 + 16) * v44++ + 4 * v43), v42);
                --v40;
              }
              while (v40);
            }
            else
            {
              sub_2484017B8((uint64_t)v127, v39.u32[0], v39.u32[2]);
              uint64_t v19 = v130;
              if (v130) {
                goto LABEL_100;
              }
              uint64_t v45 = *(unsigned int *)v127;
              int v113 = *(_DWORD *)&v127[4];
              uint64_t v46 = *(void *)&v127[16];
              unsigned int v121 = *(void **)&v127[8];
              uint64_t v47 = v128;
              unsigned int v111 = v129;
              char v48 = v112 ^ 1;
              if (!*(_DWORD *)v127) {
                char v48 = 1;
              }
              if ((v48 & 1) == 0 && *(_DWORD *)&v127[4])
              {
                int8x16_t v49 = v128;
                uint64_t v50 = *(unsigned int *)&v127[4];
                do
                {
                  bzero(v49, 4 * v45);
                  v49 += v46;
                  --v50;
                }
                while (v50);
              }
              uint64_t v51 = *v31;
              uint64_t v52 = v145.i64[1];
              if (v145.i64[1] >= (unint64_t)v146)
              {
                uint64_t v54 = (v145.i64[1] - v145.i64[0]) >> 6;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 58) {
                  sub_2483E92E8();
                }
                uint64_t v56 = (uint64_t)&v146[-v145.i64[0]];
                if ((uint64_t)&v146[-v145.i64[0]] >> 5 > v55) {
                  unint64_t v55 = v56 >> 5;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0) {
                  unint64_t v57 = 0x3FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v57 = v55;
                }
                unint64_t v129 = &v146;
                uint64_t v58 = (char *)sub_24840BC28(v57);
                uint64_t v59 = &v58[64 * v54];
                *(void *)char v127 = v58;
                *(void *)&v127[8] = v59;
                char v128 = &v58[64 * v60];
                *(_DWORD *)uint64_t v59 = v45;
                *((_DWORD *)v59 + 1) = v113;
                *((void *)v59 + 1) = v121;
                *((void *)v59 + 2) = v46;
                *((void *)v59 + 3) = v47;
                *((void *)v59 + 4) = v111;
                *(int8x16_t *)(v59 + 40) = v114;
                *((void *)v59 + 7) = v51;
                float32x4_t v53 = v59 + 64;
                *(void *)&v127[16] = v59 + 64;
                uint64_t v61 = v145.i64[1];
                uint64_t v62 = v145.i64[0];
                uint64_t v63 = *(void *)&v127[8];
                if (v145.i64[1] == v145.i64[0])
                {
                  int64x2_t v67 = vdupq_n_s64(v145.u64[1]);
                  int v27 = v109;
                }
                else
                {
                  int v27 = v109;
                  do
                  {
                    long long v64 = *(_OWORD *)(v61 - 64);
                    *(void *)(v63 - 48) = *(void *)(v61 - 48);
                    *(_OWORD *)(v63 - 64) = v64;
                    uint64_t v65 = *(void *)(v61 - 40);
                    *(void *)(v61 - 40) = 0;
                    *(void *)(v63 - 40) = v65;
                    *(void *)(v63 - 32) = *(void *)(v61 - 32);
                    long long v66 = *(_OWORD *)(v61 - 24);
                    *(void *)(v63 - 8) = *(void *)(v61 - 8);
                    *(_OWORD *)(v63 - 24) = v66;
                    v63 -= 64;
                    v61 -= 64;
                  }
                  while (v61 != v62);
                  int64x2_t v67 = v145;
                  float32x4_t v53 = *(char **)&v127[16];
                }
                v145.i64[0] = v63;
                v145.i64[1] = (uint64_t)v53;
                *(int64x2_t *)&v127[8] = v67;
                uint64_t v68 = v146;
                float32x4_t v146 = v128;
                char v128 = v68;
                *(void *)char v127 = v67.i64[0];
                sub_24840BC60((uint64_t)v127);
              }
              else
              {
                *(_DWORD *)v145.i64[1] = v45;
                *(_DWORD *)(v52 + 4) = v113;
                *(void *)(v52 + 8) = v121;
                *(void *)(v52 + 16) = v46;
                *(void *)(v52 + 24) = v47;
                *(void *)(v52 + 32) = v111;
                *(int8x16_t *)(v52 + 40) = v114;
                *(void *)(v52 + 56) = v51;
                float32x4_t v53 = (char *)(v52 + 64);
                int v27 = v109;
              }
              v145.i64[1] = (uint64_t)v53;
            }
          }
        }
        ++v28;
        uint64_t v18 = v29;
        uint64_t v20 = *(void *)v29;
        a5 = v117;
      }
      while (v28 < (uint64_t)(*(void *)(v29 + 8) - *(void *)v29) >> 6);
      unint64_t v23 = v22;
      uint64_t v16 = v116;
      a6 = v27;
      a4 = v106;
      a2 = v107;
    }
LABEL_52:
    if (!v112 || !*(unsigned char *)(v18 + 258))
    {
      if (v145.i64[0] != v145.i64[1])
      {
        *(_OWORD *)char v127 = xmmword_2484DCB30;
        *(void *)&v127[16] = 1056964608;
        float32x4_t v69 = operator new(0x20uLL);
        unint64_t v129 = (char **)(v69 + 2);
        float v130 = v69 + 2;
        __n128 v70 = (__n128)unk_24855077C;
        *float32x4_t v69 = xmmword_24855076C;
        v69[1] = unk_24855077C;
        char v128 = (char *)v69;
        int v131 = 1119879168;
        uint64_t v132 = 32;
        uint64_t v133 = 0xFFFFFFFFLL;
        uint64_t v134 = 0x33F8147AELL;
        char v135 = 0;
        long long v136 = xmmword_2484DCB20;
        int v137 = 2;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v141 = -1;
        int v142 = 256;
        char v143 = 0;
        char v144 = 0;
        if ((v112 & 1) != 0
          || (uint64_t v71 = v69,
              uint64_t v72 = sub_24840A1D8(v108, *(void *)(v18 + 224), *(void *)(v18 + 232)),
              uint64_t v19 = sub_24842980C(a4, (uint64_t)&v145, 0, v72, (unint64_t *)v127, 1, (void *)(v18 + 264), (unsigned char *)(v18 + 288), v18 + 432), v69 = v71, !v19))
        {
          if (*(unsigned char *)(v18 + 258))
          {
            uint64_t v74 = *(void *)v18;
            uint64_t v73 = *(void *)(v18 + 8);
            if (v23 >= (v73 - *(void *)v18) >> 6)
            {
              uint64_t v19 = 0;
            }
            else
            {
              uint64_t v115 = v69;
              int v75 = 0;
              int v110 = a6;
              int v118 = a5;
              do
              {
                uint64_t v76 = v74 + (v23 << 6);
                int v78 = *(_DWORD *)(v76 + 56);
                int v77 = *(_DWORD *)(v76 + 60);
                if (v77 >= v78) {
                  int v79 = *(_DWORD *)(v76 + 56);
                }
                else {
                  int v79 = *(_DWORD *)(v76 + 60);
                }
                if (v79 <= a6 && v79 >= a5)
                {
                  unint64_t v81 = (unint64_t)v16->i64[0] >> v78;
                  unint64_t v82 = (unint64_t)v16->i64[1] >> v77;
                  unint64_t v83 = (unint64_t)v16[1].i64[0] >> v78;
                  unint64_t v84 = (unint64_t)v16[1].i64[1] >> v77;
                  unint64_t v85 = *(void *)(v76 + 40);
                  unint64_t v86 = *(void *)(v76 + 48);
                  unint64_t v87 = v85 - v81;
                  if (v85 < v81) {
                    unint64_t v87 = 0;
                  }
                  if (v83 + v81 <= v85) {
                    unint64_t v88 = v83;
                  }
                  else {
                    unint64_t v88 = v87;
                  }
                  unint64_t v89 = v86 - v82;
                  if (v86 < v82) {
                    unint64_t v89 = 0;
                  }
                  if (v84 + v82 <= v86) {
                    unint64_t v90 = v84;
                  }
                  else {
                    unint64_t v90 = v89;
                  }
                  if (v88) {
                    BOOL v91 = v90 == 0;
                  }
                  else {
                    BOOL v91 = 1;
                  }
                  if (!v91)
                  {
                    int32x4_t v92 = (uint64_t *)v18;
                    uint64_t v93 = 0;
                    int v94 = v75;
                    uint64_t v95 = v145.i64[0] + ((uint64_t)v75 << 6);
                    uint64_t v96 = *(void *)(v76 + 16);
                    size_t v97 = 4 * v88;
                    uint64_t v98 = 4 * v81;
                    unint64_t v99 = *(void *)(v76 + 24) + v96 * v82;
                    do
                    {
                      memcpy((void *)(v99 + v98), (const void *)(*(void *)(v95 + 24) + *(void *)(v95 + 16) * v93++), v97);
                      v99 += v96;
                    }
                    while (v90 != v93);
                    int v75 = v94 + 1;
                    uint64_t v18 = (uint64_t)v92;
                    uint64_t v74 = *v92;
                    uint64_t v73 = v92[1];
                    a5 = v118;
                    uint64_t v16 = v116;
                    a6 = v110;
                  }
                }
                ++v23;
              }
              while (v23 < (v73 - v74) >> 6);
              uint64_t v19 = 0;
              float32x4_t v69 = v115;
            }
          }
          else
          {
            uint64_t v100 = v69;
            uint64_t v101 = *(void *)(v18 + 88);
            uint64_t v102 = *(void *)(v18 + 96);
            if (v101 == v102)
            {
LABEL_95:
              v119[0] = 0;
              v119[1] = 0;
              long long v120 = v149;
              uint64_t v19 = sub_24840B27C(v18, a2, (BOOL *)v145.i8, a9, a10, v119, *(double *)&v149, v70);
            }
            else
            {
              while (1)
              {
                unsigned int v121 = &unk_26FC66970;
                long long v103 = *(_OWORD *)(v101 + 8);
                uint64_t v123 = *(void *)(v101 + 24);
                long long v122 = v103;
                memset(v124, 0, sizeof(v124));
                sub_24840A9A8(v124, *(void *)(v101 + 32), *(void *)(v101 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v101 + 40) - *(void *)(v101 + 32)) >> 3));
                uint64_t v104 = *(void *)(v101 + 56);
                __int16 v126 = *(_WORD *)(v101 + 64);
                uint64_t v125 = v104;
                uint64_t v19 = sub_24842C084((uint64_t)&v121, (uint64_t)&v145, v18 + 472, 0);
                unsigned int v121 = &unk_26FC66970;
                if (v19) {
                  break;
                }
                v160[0] = (void **)v124;
                sub_2483FEA88(v160);
                v101 += 72;
                if (v101 == v102) {
                  goto LABEL_95;
                }
              }
              v160[0] = (void **)v124;
              sub_2483FEA88(v160);
            }
            float32x4_t v69 = v100;
          }
        }
        operator delete(v69);
        goto LABEL_100;
      }
      uint64_t v19 = 0;
      if (!a9 || !a11)
      {
LABEL_100:
        *(void *)char v127 = &v147;
        sub_2483FDBFC((void ***)v127);
        *(void *)char v127 = &v145;
        sub_2483FDCBC((void ***)v127);
        goto LABEL_101;
      }
      if (*(unsigned char *)(v18 + 256) || *(_DWORD *)(*(void *)(a2 + 408) + 320))
      {
        uint64_t v19 = 0;
        *a11 = 0;
        goto LABEL_100;
      }
    }
    uint64_t v19 = 0;
    goto LABEL_100;
  }
LABEL_101:
  sub_24840A478((uint64_t)&v152);
  return v19;
}

void sub_24840B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_24840A434(&a37);
  sub_2484039E8(&a57);
  sub_24840A478(v57 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_24840B27C(uint64_t a1, uint64_t a2, BOOL *a3, uint64_t a4, uint64_t a5, void *a6, double a7, __n128 a8)
{
  uint64_t v10 = *(void *)(a2 + 408);
  uint64_t v116 = 0;
  uint64_t v117 = a5;
  uint64_t v90 = v10;
  if (*(unsigned char *)(a1 + 256))
  {
    unint64_t v13 = 0;
    int v14 = *(_DWORD *)(a2 + 32);
    BOOL v16 = *(_DWORD *)(v10 + 104) == 1 && v14 == 1;
    if (*(unsigned char *)(v10 + 24)) {
      BOOL v17 = v14 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = !v17;
    BOOL v115 = v16;
    while (1)
    {
      int v19 = *(_DWORD *)(a1 + 64);
      double v20 = 1.0 / (double)~(-1 << v19);
      if (v19 > 31) {
        double v20 = 0.0;
      }
      double v114 = v20;
      int v21 = *(_DWORD *)(a2 + 32);
      if (v21)
      {
        if (v16) {
          unint64_t v22 = 0;
        }
        else {
          unint64_t v22 = v13;
        }
      }
      else
      {
        double v114 = *(float *)(*(void *)(a4 + 4208) + 4 * v13 + 256);
        unint64_t v22 = 1 - v13;
        if (v13 >= 2) {
          unint64_t v22 = v13;
        }
      }
      unint64_t v23 = (unsigned int *)(*(void *)a3 + (v22 << 6));
      if (*((void *)v23 + 5)) {
        BOOL v24 = *((void *)v23 + 6) == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24) {
        return 1;
      }
      uint64_t v25 = *(void *)(a5 + 24) + 40 * v13;
      uint64_t v26 = *(void *)(v25 + 24);
      uint64_t v27 = *(void *)(v25 + 32);
      unsigned int v28 = v23[14];
      unsigned int v29 = v23[15];
      unint64_t v30 = *a6 >> v28;
      unint64_t v31 = a6[1] >> v29;
      unint64_t v32 = (a6[2] + (1 << v28) - 1) / (unint64_t)(1 << v28);
      unint64_t v33 = (a6[3] + (1 << v29) - 1) / (unint64_t)(1 << v29);
      unint64_t v34 = *v23;
      unint64_t v35 = v23[1];
      if (v34 >= v32 + v30) {
        unint64_t v36 = v32 + v30;
      }
      else {
        unint64_t v36 = *v23;
      }
      if (v35 >= v33 + v31) {
        unint64_t v37 = v33 + v31;
      }
      else {
        unint64_t v37 = v23[1];
      }
      BOOL v38 = v36 >= v30;
      unint64_t v39 = v36 - v30;
      if (!v38) {
        unint64_t v39 = 0;
      }
      if (v32 + v30 > v34) {
        unint64_t v32 = v39;
      }
      unint64_t v40 = v37 - v31;
      if (v37 < v31) {
        unint64_t v40 = 0;
      }
      if (v33 + v31 > v35) {
        unint64_t v33 = v40;
      }
      v113[0] = v30;
      v113[1] = v31;
      v113[2] = v32;
      v113[3] = v33;
      uint64_t v112 = v26;
      if (v27 != v33 || v26 != v32) {
        return 1;
      }
      if (v13 != 2 || v21)
      {
        if (v18)
        {
          int v43 = *(_DWORD *)(v90 + 28);
          int v110 = *(_DWORD *)(v90 + 32);
          int v111 = v43;
          uint64_t v102 = v113;
          long long v103 = v23;
          uint64_t v104 = &v115;
          char v105 = &v117;
          uint64_t v106 = &v112;
          uint64_t v107 = (double *)&v111;
          uint64_t v108 = (double *)&v110;
          int v109 = &v116;
          uint64_t v118 = 0;
          float32_t v119 = &v118;
          if (v27)
          {
            unsigned int v44 = 0;
            long long v120 = sub_2483F1794;
            unsigned int v121 = &v102;
            do
              sub_24840BA7C((uint64_t)&v120, v44++);
            while (v27 != v44);
          }
        }
        else
        {
          uint64_t v102 = v113;
          long long v103 = v23;
          uint64_t v104 = &v115;
          char v105 = (uint64_t *)a1;
          uint64_t v106 = &v112;
          uint64_t v107 = &v114;
          uint64_t v108 = (double *)&v117;
          int v109 = &v116;
          uint64_t v118 = 0;
          float32_t v119 = &v118;
          if (v27)
          {
            unsigned int v45 = 0;
            long long v120 = sub_2483F1794;
            unsigned int v121 = &v102;
            do
              sub_24840B850((uint64_t)&v120, v45++);
            while (v27 != v45);
          }
        }
      }
      else
      {
        uint64_t v102 = v113;
        long long v103 = v23;
        uint64_t v104 = a3;
        char v105 = &v117;
        uint64_t v106 = &v116;
        uint64_t v107 = (double *)&v112;
        uint64_t v108 = &v114;
        uint64_t v118 = 0;
        float32_t v119 = &v118;
        if (v27)
        {
          unsigned int v42 = 0;
          long long v120 = sub_2483F1794;
          unsigned int v121 = &v102;
          do
            sub_24840BB84((uint64_t)&v120, v42++);
          while (v27 != v42);
        }
      }
      if (v115) {
        break;
      }
      BOOL v16 = 0;
      unint64_t v13 = v116 + 1;
      uint64_t v116 = v13;
      if (v13 >= 3) {
        goto LABEL_66;
      }
    }
    unint64_t v13 = 1;
    uint64_t v116 = 1;
LABEL_66:
    uint64_t v10 = v90;
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v91 = *(unsigned int *)(v10 + 320);
  if (!v91) {
    return 0;
  }
  uint64_t v47 = 0;
  unint64_t v88 = a3;
  unint64_t v89 = a6;
  while (1)
  {
    uint64_t v48 = *(void *)(v10 + 328) + 96 * v47;
    int v99 = *(_DWORD *)(v48 + 28);
    int v49 = *(unsigned __int8 *)(v48 + 24);
    double v50 = 0.0;
    if (!*(unsigned char *)(v48 + 24)) {
      double v50 = 1.0 / (double)~(-1 << v99);
    }
    uint64_t v51 = (unsigned int *)(*(void *)a3 + (v13 << 6));
    uint64_t v52 = v47 + 3;
    float32x4_t v53 = (void *)(*(void *)(a5 + 24) + 40 * (v47 + 3));
    unint64_t v55 = v53[3];
    uint64_t v54 = v53[4];
    unsigned int v56 = v51[14];
    unsigned int v57 = v51[15];
    unint64_t v58 = *a6 >> v56;
    unint64_t v59 = a6[1] >> v57;
    uint64_t result = 1;
    unint64_t v60 = (a6[2] + (1 << v56) - 1) / (unint64_t)(1 << v56);
    unint64_t v61 = (a6[3] + (1 << v57) - 1) / (unint64_t)(1 << v57);
    unint64_t v62 = *v51;
    unint64_t v63 = v51[1];
    if (v62 >= v60 + v58) {
      unint64_t v64 = v60 + v58;
    }
    else {
      unint64_t v64 = *v51;
    }
    if (v63 >= v61 + v59) {
      unint64_t v65 = v61 + v59;
    }
    else {
      unint64_t v65 = v51[1];
    }
    unint64_t v100 = v58;
    BOOL v38 = v64 >= v58;
    unint64_t v66 = v64 - v58;
    if (!v38) {
      unint64_t v66 = 0;
    }
    if (v60 + v58 > v62) {
      unint64_t v60 = v66;
    }
    unint64_t v67 = v65 - v59;
    if (v65 < v59) {
      unint64_t v67 = 0;
    }
    if (v61 + v59 > v63) {
      unint64_t v61 = v67;
    }
    if (v54 != v61 || v55 != v60) {
      break;
    }
    if (v54)
    {
      unint64_t v69 = v59;
      uint64_t v70 = 0;
      int v98 = *(_DWORD *)(v48 + 32);
      uint64_t v71 = v53[2];
      a8.n128_f32[0] = v50;
      uint64_t v97 = v53[1];
      uint64_t v94 = 4 * v97;
      uint64_t v92 = v47;
      uint64_t v93 = 4 * v58;
      unint64_t v72 = v59;
      uint64_t v73 = v71;
      __n128 v96 = a8;
      do
      {
        uint64_t v74 = *(void *)(*(void *)(a5 + 24) + 40 * v52);
        uint64_t v75 = *(void *)(v74 + 16);
        uint64_t v76 = *(void *)(v74 + 24);
        uint64_t v77 = *((void *)v51 + 2);
        uint64_t v78 = *((void *)v51 + 3);
        if (v49)
        {
          sub_24840A014((unsigned int *)(v78 + v77 * (v70 + v69) + 4 * v100), (char *)(v76 + v75 * (v70 + v73) + 4 * v97), v55, v99, v98);
          a8 = v96;
        }
        else if (*(int *)(a1 + 64) > 22)
        {
          if (v55)
          {
            unint64_t v83 = (float *)(v76 + v94 + v75 * v71);
            unint64_t v84 = (int *)(v78 + v93 + v77 * v72);
            unint64_t v85 = v55;
            do
            {
              int v86 = *v84++;
              float v87 = v50 * (double)v86;
              *v83++ = v87;
              --v85;
            }
            while (v85);
          }
        }
        else if (v55)
        {
          unint64_t v79 = 0;
          uint64_t v80 = (float32x4_t *)(v76 + v94 + v75 * v71);
          unint64_t v81 = (int32x4_t *)(v78 + v93 + v77 * v72);
          do
          {
            int32x4_t v82 = *v81++;
            *v80++ = vmulq_n_f32(vcvtq_f32_s32(v82), a8.n128_f32[0]);
            v79 += 4;
          }
          while (v79 < v55);
        }
        ++v70;
        ++v71;
        ++v72;
      }
      while (v70 != v54);
      unint64_t v13 = v116;
      a3 = v88;
      a6 = v89;
      uint64_t v10 = v90;
      uint64_t v47 = v92;
    }
    ++v47;
    uint64_t v116 = ++v13;
    if (v47 == v91) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24840B850(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (int *)(*(void *)(*(void *)(v2 + 8) + 24)
             + *(void *)(*(void *)(v2 + 8) + 16) * (*(void *)(*(void *)v2 + 8) + a2)
             + 4 * **(void **)v2);
  uint64_t v4 = *(void *)(v2 + 24);
  if (**(unsigned char **)(v2 + 16))
  {
    unint64_t v5 = **(void **)(v2 + 32);
    double v6 = **(double **)(v2 + 40);
    if (*(int *)(v4 + 64) > 22)
    {
      unint64_t v23 = *(void **)(**(void **)(v2 + 48) + 24);
      if (v5)
      {
        BOOL v24 = (float *)(*(void *)(*v23 + 24) + *(void *)(*v23 + 16) * (v23[2] + a2) + 4 * v23[1]);
        uint64_t v25 = v3;
        unint64_t v26 = v5;
        do
        {
          int v27 = *v25++;
          float v28 = v6 * (double)v27;
          *v24++ = v28;
          --v26;
        }
        while (v26);
      }
      if (v5)
      {
        unsigned int v29 = (float *)(*(void *)(v23[5] + 24) + *(void *)(v23[5] + 16) * (v23[7] + a2) + 4 * v23[6]);
        unint64_t v30 = v3;
        unint64_t v31 = v5;
        do
        {
          int v32 = *v30++;
          float v33 = v6 * (double)v32;
          *v29++ = v33;
          --v31;
        }
        while (v31);
      }
      if (v5)
      {
        unint64_t v34 = (float *)(*(void *)(v23[10] + 24) + *(void *)(v23[10] + 16) * (v23[12] + a2) + 4 * v23[11]);
        do
        {
          int v35 = *v3++;
          float v36 = v6 * (double)v35;
          *v34++ = v36;
          --v5;
        }
        while (v5);
      }
    }
    else if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = *(void **)(**(void **)(v2 + 48) + 24);
      uint64_t result = v8[11];
      uint64_t v9 = *(void *)(v8[10] + 24) + *(void *)(v8[10] + 16) * (v8[12] + a2);
      uint64_t v10 = (float32x4_t *)(*(void *)(*v8 + 24) + *(void *)(*v8 + 16) * (v8[2] + a2) + 4 * v8[1]);
      float v11 = v6;
      uint64_t v12 = (float32x4_t *)(*(void *)(v8[5] + 24) + *(void *)(v8[5] + 16) * (v8[7] + a2) + 4 * v8[6]);
      unint64_t v13 = (float32x4_t *)(v9 + 4 * result);
      do
      {
        int32x4_t v14 = *(int32x4_t *)v3;
        v3 += 4;
        float32x4_t v15 = vmulq_n_f32(vcvtq_f32_s32(v14), v11);
        *v10++ = v15;
        *v12++ = v15;
        *v13++ = v15;
        v7 += 4;
      }
      while (v7 < v5);
    }
  }
  else
  {
    BOOL v16 = (void *)(*(void *)(**(void **)(v2 + 48) + 24) + 40 * **(void **)(v2 + 56));
    BOOL v17 = (float *)(*(void *)(*v16 + 24) + *(void *)(*v16 + 16) * (v16[2] + a2) + 4 * v16[1]);
    unint64_t v18 = **(void **)(v2 + 32);
    double v19 = **(double **)(v2 + 40);
    if (*(int *)(v4 + 64) > 22)
    {
      for (; v18; --v18)
      {
        int v37 = *v3++;
        float v38 = v19 * (double)v37;
        *v17++ = v38;
      }
    }
    else if (v18)
    {
      unint64_t v20 = 0;
      float v21 = v19;
      do
      {
        int32x4_t v22 = *(int32x4_t *)v3;
        v3 += 4;
        *(float32x4_t *)BOOL v17 = vmulq_n_f32(vcvtq_f32_s32(v22), v21);
        v17 += 4;
        v20 += 4;
      }
      while (v20 < v18);
    }
  }
  return result;
}

unsigned int *sub_24840BA7C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = a2;
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(v2 + 8) + 24)
                      + *(void *)(*(void *)(v2 + 8) + 16) * (*(void *)(*(void *)v2 + 8) + a2)
                      + 4 * **(void **)v2);
  if (**(unsigned char **)(v2 + 16))
  {
    for (uint64_t i = 0; i != 120; i += 40)
    {
      double v6 = (void *)(*(void *)(**(void **)(v2 + 24) + 24) + i);
      uint64_t result = sub_24840A014(v4, (char *)(*(void *)(*v6 + 24) + *(void *)(*v6 + 16) * (v6[2] + v3) + 4 * v6[1]), **(void **)(v2 + 32), **(_DWORD **)(v2 + 40), **(_DWORD **)(v2 + 48));
    }
  }
  else
  {
    uint64_t v8 = (void *)(*(void *)(**(void **)(v2 + 24) + 24) + 40 * **(void **)(v2 + 56));
    uint64_t v9 = (char *)(*(void *)(*v8 + 24) + *(void *)(*v8 + 16) * (v8[2] + a2) + 4 * v8[1]);
    uint64_t v10 = **(void **)(v2 + 32);
    int v11 = **(_DWORD **)(v2 + 40);
    int v12 = **(_DWORD **)(v2 + 48);
    return sub_24840A014(v4, v9, v10, v11, v12);
  }
  return result;
}

uint64_t sub_24840BB84(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(uint64_t ***)(result + 8);
  unint64_t v3 = *v2[5];
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = **v2;
    uint64_t v6 = (*v2)[1] + a2;
    uint64_t v7 = v2[1][3] + v2[1][2] * v6;
    uint64_t v8 = *(void *)(*v2[2] + 24) + *(void *)(*v2[2] + 16) * v6;
    uint64_t v9 = (void *)(*(void *)(*v2[3] + 24) + 40 * *v2[4]);
    uint64_t v10 = v9[1];
    uint64_t v11 = *(void *)(*v9 + 24) + *(void *)(*v9 + 16) * (v9[2] + a2);
    int v12 = (int32x4_t *)(v7 + 4 * v5);
    unint64_t v13 = (int32x4_t *)(v8 + 4 * v5);
    int32x4_t v14 = (float32x4_t *)(v11 + 4 * v10);
    float v15 = *(double *)v2[6];
    do
    {
      int32x4_t v16 = *v12++;
      int32x4_t v17 = v16;
      int32x4_t v18 = *v13++;
      *v14++ = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(v18, v17)), v15);
      v4 += 4;
    }
    while (v4 < v3);
  }
  return result;
}

void *sub_24840BC28(unint64_t a1)
{
  if (a1 >> 58) {
    sub_2483E9338();
  }
  return operator new(a1 << 6);
}

uint64_t sub_24840BC60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_2483E8DDC((uint64_t *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_24840BCB4(void *result, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v4 = a3[3];
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v7 = *(void *)(a4 + 16);
    uint64_t v6 = *(void *)(a4 + 24);
    unint64_t v8 = a3[2];
    do
    {
      if (v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v6 + *a3 + v7 * (a3[1] + v5);
        uint64_t v11 = *(void *)(a2 + 24) + *(void *)(a2 + 16) * (result[1] + v5) + 4 * *result;
        do
        {
          int v12 = *(_DWORD *)(v11 + 4 * v9);
          if (v12 <= -128) {
            int v12 = -128;
          }
          if (v12 >= 127) {
            LOBYTE(v12) = 127;
          }
          *(unsigned char *)(v10 + v9++) = v12;
          unint64_t v8 = a3[2];
        }
        while (v9 < v8);
        unint64_t v4 = a3[3];
      }
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t sub_24840BD3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = 0;
  if (byte_2485534EC[a4] <= 1u) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = byte_2485534EC[a4];
  }
  if (byte_248553507[a4] <= 1u) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = byte_248553507[a4];
  }
  while (2)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 40) + a3 * *(void *)(a1 + 48);
      if (a5 && *(unsigned __int8 *)(v9 + a2 + v8) != 255) {
        return 1;
      }
      *(unsigned char *)(v9 + a2 + v8) = (2 * a4) | ((v8 | v5) == 0);
      ++v8;
    }
    while (v6 != v8);
    ++v5;
    ++a3;
    if (v5 != v7) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t sub_24840BDD0(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, int a5)
{
  uint64_t v62 = a3;
  if (*(unsigned char *)(a1 + 258))
  {
    uint64_t v6 = a4;
    uint64_t v8 = a2;
    uint64_t v9 = (unsigned int **)a1;
    long long v58 = 0u;
    memset(v57, 0, sizeof(v57));
    int v59 = 8;
    uint64_t v60 = 0;
    char v61 = 1;
    if (a5)
    {
      sub_24842A35C((uint64_t)v57, a1);
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 64);
      int64x2_t v64 = 0uLL;
      memset(v65, 0, sizeof(v65));
      long long v66 = *(_OWORD *)(a1 + 48);
      LODWORD(v67) = v11;
      *((void *)&v67 + 1) = *(void *)(a1 + 72);
      char v68 = *(unsigned char *)(a1 + 80);
      if (&v64 != (int64x2_t *)a1) {
        sub_24840A270((uint64_t)v65 + 8, *(void *)(a1 + 24), *(void *)(a1 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
      }
      uint64_t v46 = v9;
      unint64_t v13 = *v9;
      int v12 = v9[1];
      if (*v9 == v12)
      {
LABEL_28:
        uint64_t v10 = 0;
        unsigned int v56 = 0;
        int64x2_t v48 = v64;
        int64x2_t v49 = v64;
        char v55 = v68;
        uint64_t v5 = *(void **)&v65[0];
        int v12 = (unsigned int *)*((void *)&v65[1] + 1);
        double v50 = *(unsigned int ***)&v65[0];
        int64x2_t v64 = 0uLL;
        memset(v65, 0, sizeof(v65));
        long long v44 = *(_OWORD *)((char *)v65 + 8);
        long long v51 = *(_OWORD *)((char *)v65 + 8);
        uint64_t v52 = *((void *)&v65[1] + 1);
        long long v53 = v66;
        long long v54 = v67;
      }
      else
      {
        v48.i64[0] = (uint64_t)v65;
        while (1)
        {
          uint64_t v15 = *((void *)v13 + 5);
          uint64_t v14 = *((void *)v13 + 6);
          uint64_t v16 = *((void *)v13 + 7);
          sub_2484017B8((uint64_t)v69, v15, v14);
          uint64_t v10 = v72;
          if (v72) {
            break;
          }
          long long v63 = *(_OWORD *)v69;
          uint64_t v17 = *(void *)&v69[16];
          int32x4_t v18 = v70;
          double v19 = v71;
          if (v13[1] && *v13)
          {
            unint64_t v20 = 0;
            float v21 = v70;
            do
            {
              memcpy(v21, (const void *)(*((void *)v13 + 3) + *((void *)v13 + 2) * v20++), 4 * *v13);
              v21 += v17;
            }
            while (v20 < v13[1]);
          }
          int32x4_t v22 = (void *)v64.i64[1];
          if (v64.i64[1] >= *(void *)&v65[0])
          {
            uint64_t v23 = (v64.i64[1] - v64.i64[0]) >> 6;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 58) {
              sub_2483E92E8();
            }
            uint64_t v25 = *(void *)&v65[0] - v64.i64[0];
            if ((*(void *)&v65[0] - v64.i64[0]) >> 5 > v24) {
              unint64_t v24 = v25 >> 5;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            uint64_t v71 = v65;
            int v27 = (char *)sub_24840BC28(v26);
            float v28 = &v27[64 * v23];
            *(void *)unint64_t v69 = v27;
            *(void *)&v69[8] = v28;
            uint64_t v70 = &v27[64 * v29];
            *(_OWORD *)float v28 = v63;
            *((void *)v28 + 2) = v17;
            *((void *)v28 + 3) = v18;
            *((void *)v28 + 4) = v19;
            *((void *)v28 + 5) = v15;
            *((void *)v28 + 6) = v14;
            *((void *)v28 + 7) = v16;
            uint64_t v5 = v28 + 64;
            *(void *)&v69[16] = v28 + 64;
            uint64_t v30 = v64.i64[1];
            uint64_t v31 = v64.i64[0];
            uint64_t v32 = *(void *)&v69[8];
            if (v64.i64[1] == v64.i64[0])
            {
              int64x2_t v36 = vdupq_n_s64(v64.u64[1]);
            }
            else
            {
              do
              {
                long long v33 = *(_OWORD *)(v30 - 64);
                *(void *)(v32 - 48) = *(void *)(v30 - 48);
                *(_OWORD *)(v32 - 64) = v33;
                uint64_t v34 = *(void *)(v30 - 40);
                *(void *)(v30 - 40) = 0;
                *(void *)(v32 - 40) = v34;
                *(void *)(v32 - 32) = *(void *)(v30 - 32);
                long long v35 = *(_OWORD *)(v30 - 24);
                *(void *)(v32 - 8) = *(void *)(v30 - 8);
                *(_OWORD *)(v32 - 24) = v35;
                v32 -= 64;
                v30 -= 64;
              }
              while (v30 != v31);
              int64x2_t v36 = v64;
              uint64_t v5 = *(void **)&v69[16];
            }
            v64.i64[0] = v32;
            v64.i64[1] = (uint64_t)v5;
            *(int64x2_t *)&v69[8] = v36;
            int v37 = *(char **)&v65[0];
            *(void *)&v65[0] = v70;
            uint64_t v70 = v37;
            *(void *)unint64_t v69 = v36.i64[0];
            sub_24840BC60((uint64_t)v69);
          }
          else
          {
            *(_OWORD *)v64.i64[1] = v63;
            v22[2] = v17;
            v22[3] = v18;
            v22[4] = v19;
            v22[5] = v15;
            v22[6] = v14;
            v22[7] = v16;
            uint64_t v5 = v22 + 8;
          }
          v64.i64[1] = (uint64_t)v5;
          v13 += 16;
          if (v13 == v12) {
            goto LABEL_28;
          }
        }
        unsigned int v56 = v72;
      }
      *(void *)unint64_t v69 = (char *)v65 + 8;
      sub_2483FDBFC((void ***)v69);
      *(void *)unint64_t v69 = &v64;
      sub_2483FDCBC((void ***)v69);
      uint64_t v9 = v46;
      uint64_t v6 = a4;
      if (v10)
      {
        sub_24840A478((uint64_t)&v49);
LABEL_48:
        v49.i64[0] = (uint64_t)&v57[1] + 8;
        sub_2483FDBFC((void ***)&v49);
        v49.i64[0] = (uint64_t)v57;
        sub_2483FDCBC((void ***)&v49);
        return v10;
      }
      int64x2_t v64 = v48;
      int64x2_t v49 = 0uLL;
      double v50 = 0;
      long long v51 = 0uLL;
      *(_OWORD *)((char *)v65 + 8) = v44;
      *(void *)&v65[0] = v5;
      *((void *)&v65[1] + 1) = v12;
      uint64_t v52 = 0;
      long long v66 = v53;
      long long v67 = v54;
      char v68 = v55;
      sub_24842A35C((uint64_t)v57, (uint64_t)&v64);
      *(void *)unint64_t v69 = (char *)v65 + 8;
      sub_2483FDBFC((void ***)v69);
      *(void *)unint64_t v69 = &v64;
      sub_2483FDCBC((void ***)v69);
      sub_24840A478((uint64_t)&v49);
      uint64_t v8 = a2;
    }
    if (*((void *)&v58 + 1) * (void)v58 >= (void)v9[30] * (void)v9[30]) {
      float v38 = v6;
    }
    else {
      float v38 = 0;
    }
    sub_248429F54((uint64_t)v57, (uint64_t)(v9 + 59), v38);
    if (v61)
    {
      uint64_t v10 = 1;
    }
    else
    {
      if (*(void *)(*(void *)(a3 + 4208) + 120))
      {
        unint64_t v39 = 0;
        do
        {
          (*(void (**)(void, unint64_t))(**(void **)(a3 + 4488) + 16))(*(void *)(a3 + 4488), v39++);
          unint64_t v40 = *(void *)(*(void *)(a3 + 4208) + 120);
        }
        while (v39 < v40);
      }
      else
      {
        unint64_t v40 = 0;
      }
      LOBYTE(v63) = 0;
      *(void *)unint64_t v69 = v8;
      *(void *)&v69[8] = &v62;
      v49.i64[0] = (uint64_t)&v63;
      v49.i64[1] = (uint64_t)&v62;
      double v50 = v9;
      *(void *)&long long v51 = v8;
      *((void *)&v51 + 1) = v57;
      if (v38)
      {
        BOOL v41 = sub_24840C324(v38, v40, (uint64_t *)v69, v49.i64);
      }
      else
      {
        v64.i64[0] = 0;
        v64.i64[1] = (uint64_t)&v64;
        BOOL v41 = sub_24840C324(&v64, v40, (uint64_t *)v69, v49.i64);
      }
      uint64_t v10 = v41;
      if (!v41)
      {
        unsigned __int8 v42 = atomic_load((unsigned __int8 *)&v63);
        uint64_t v10 = v42 & 1;
      }
    }
    goto LABEL_48;
  }
  return 0;
}

void sub_24840C2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

BOOL sub_24840C324(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    uint64_t v5 = 1;
    if (sub_24840C3D8(v8, 1)) {
      return v5;
    }
    for (unsigned int i = 0; i != v4; ++i)
      sub_24840C424((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(void, uint64_t **, uint64_t (*)(uint64_t **, uint64_t), void (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))*a1)(a1[1], v8, sub_24840C3D8, sub_24840C424, 0, a2) != 0;
}

uint64_t sub_24840C3D8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 12)) {
    uint64_t v3 = *(unsigned char *)(v2 + 24) & 1;
  }
  else {
    uint64_t v3 = 1;
  }
  if (sub_2484B6770(*(void **)(*(void *)(*a1)[1] + 4488), a2, v3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_24840C424(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 16);
  unsigned __int8 v5 = atomic_load(*(unsigned __int8 **)v3);
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *(void *)(**(void **)(v3 + 8) + 4488);
    unint64_t v7 = a2;
    uint64_t v29 = a2;
    uint64_t v30 = a3;
    uint64_t v28 = v6;
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 24))(&v25);
    double v9 = *(double *)&v25;
    *(_OWORD *)uint64x2_t __p = v25;
    unint64_t v32 = v26;
    uint64_t v10 = *(void *)(v3 + 24);
    int v11 = *(BOOL **)(v3 + 32);
    uint64_t v12 = **(void **)(v3 + 8);
    unint64_t v13 = *(void **)(v12 + 4208);
    unint64_t v14 = v13[11];
    unint64_t v15 = v13[17];
    unint64_t v16 = v15 * (v7 / v14);
    unint64_t v18 = v13[1];
    unint64_t v17 = v13[2];
    *(void *)&long long v25 = v15 * (v7 % v14);
    *((void *)&v25 + 1) = v16;
    unint64_t v19 = v18 - v25;
    if (v18 < (unint64_t)v25) {
      unint64_t v19 = 0;
    }
    if ((unint64_t)v25 + v15 <= v18) {
      unint64_t v19 = v15;
    }
    unint64_t v20 = v16 + v15;
    BOOL v21 = v17 >= v16;
    unint64_t v22 = v17 - v16;
    if (!v21) {
      unint64_t v22 = 0;
    }
    if (v20 <= v17) {
      unint64_t v23 = v15;
    }
    else {
      unint64_t v23 = v22;
    }
    unint64_t v26 = v19;
    unint64_t v27 = v23;
    if (sub_24840B27C(v4, v10, v11, v12, (uint64_t)&v28, &v25, v9, v8)
      || (uint64_t v24 = v28,
          ++*(unsigned char *)(*(void *)(v28 + 224) + v29),
          (*(unsigned int (**)(uint64_t))(*(void *)v24 + 32))(v24)))
    {
      atomic_store(1u, *(unsigned __int8 **)v3);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_24840C584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_24840C5A4(int64x2_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  memset(v39, 0, sizeof(v39));
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    __n128 v8 = result + 4;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      if (v3 < 0x11)
      {
        unint64_t v18 = 0;
      }
      else
      {
        unint64_t v16 = (int8x16_t *)(v6 + v7 * (v15 + v5) + 4 * v14);
        uint64_t v17 = 16;
        do
        {
          unint64_t v18 = v17;
          unint64_t v19 = -2;
          unint64_t v20 = (int64x2_t *)v39;
          BOOL v21 = v8;
          do
          {
            int64x2_t v22 = v21[-4];
            int8x16_t v23 = *(int8x16_t *)v21;
            int64x2_t v24 = vaddq_s64(*v21, v22);
            v21[-4] = *v21;
            int8x16_t v25 = veorq_s8((int8x16_t)vshlq_n_s64(v22, 0x17uLL), (int8x16_t)v22);
            *v20++ = v24;
            *(int8x16_t *)v21++ = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v23, 5uLL), v23), v25), (int8x16_t)vshrq_n_u64((uint64x2_t)v25, 0x12uLL));
            v19 += 2;
          }
          while (v19 < 6);
          unint64_t v26 = -4;
          unint64_t v27 = (uint32x4_t *)v39;
          uint64_t v28 = v16;
          do
          {
            uint32x4_t v29 = *v27++;
            *v28++ = vorrq_s8((int8x16_t)vshrq_n_u32(v29, 9uLL), _Q0);
            v26 += 4;
          }
          while (v26 < 0xC);
          uint64_t v17 = v18 + 16;
          v16 += 4;
        }
        while (v18 + 16 < v3);
      }
      unint64_t v30 = -2;
      uint64_t result = (int64x2_t *)v39;
      uint64_t v31 = v8;
      do
      {
        int64x2_t v32 = v31[-4];
        int8x16_t v33 = *(int8x16_t *)v31;
        int64x2_t v34 = vaddq_s64(*v31, v32);
        v31[-4] = *v31;
        int8x16_t v35 = veorq_s8((int8x16_t)vshlq_n_s64(v32, 0x17uLL), (int8x16_t)v32);
        *result++ = v34;
        *(int8x16_t *)v31++ = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v33, 5uLL), v33), v35), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 0x12uLL));
        v30 += 2;
      }
      while (v30 < 6);
      if (v18 < v3)
      {
        int64x2_t v36 = (int8x16_t *)(v6 + v7 * (v15 + v5) + 4 * v18 + 4 * v14);
        int v37 = (uint32x4_t *)v39;
        do
        {
          uint32x4_t v38 = *v37++;
          *v36++ = vorrq_s8((int8x16_t)vshrq_n_u32(v38, 9uLL), _Q0);
          v18 += 4;
        }
        while (v18 < v3);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

void *sub_24840C754(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_2483E9338();
  }
  return operator new(12 * a1);
}

void sub_24840C79C(void **a1, long long *a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666) {
      sub_2483E92E8();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)sub_248403444(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 40 * v9;
    unint64_t v15 = v12 + 40 * v13;
    long long v16 = *a2;
    long long v17 = a2[1];
    *(void *)(v14 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v14 = v16;
    *(_OWORD *)(v14 + 16) = v17;
    __n128 v8 = (void *)(v14 + 40);
    unint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 40);
        long long v21 = *(_OWORD *)(v18 - 24);
        *(void *)(v14 - 8) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = (void *)v14;
    a1[1] = v8;
    a1[2] = (void *)v15;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v4 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v4 = v6;
    *((_OWORD *)v4 + 1) = v7;
    __n128 v8 = v4 + 40;
  }
  a1[1] = v8;
}

void sub_24840C8C4(void *a1)
{
  uint64_t v2 = (char **)(a1 + 13);
  uint64_t v1 = a1[13];
  a1[11] = a1[10];
  a1[14] = v1;
  a1[17] = a1[16];
  a1[20] = a1[19];
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v4 != v3)
  {
    size_t v5 = v3 - v4;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2483E92E8();
    }
    __n128 v8 = (char *)operator new(v5);
    int64_t v9 = 24 * ((v5 - 24) / 0x18) + 24;
    bzero(v8, v9);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = a1[4];
    if (v6 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v6;
    }
    do
    {
      unint64_t v14 = &v8[v10];
      uint64_t v16 = *(void *)(v4 + v10 + 8);
      uint64_t v15 = *(void *)(v4 + v10 + 16);
      *(void *)unint64_t v14 = v11;
      *((void *)v14 + 1) = v16;
      *((void *)v14 + 2) = *(void *)(v12 + 40 * v15 + 32) + v16;
      ++v11;
      v10 += 24;
    }
    while (v13 != v11);
    unint64_t v17 = (unint64_t)&v8[v9];
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    sub_24840D1D8((unint64_t)v8, v17, 126 - 2 * __clz(v18), 1);
    sub_2483FEEE4(v2, *(void *)(v17 - 8));
    unint64_t v19 = v8;
    do
    {
      unint64_t v21 = *((void *)v19 + 1);
      unint64_t v20 = *((void *)v19 + 2);
      BOOL v22 = v20 > v21;
      unint64_t v23 = v20 - v21;
      if (v22)
      {
        int64x2_t v24 = &(*v2)[8 * v21];
        do
        {
          ++*(void *)v24;
          v24 += 8;
          --v23;
        }
        while (v23);
      }
      v19 += 24;
    }
    while (v19 != (char *)v17);
    unint64_t v26 = (char *)a1[11];
    unint64_t v25 = a1[12];
    if ((unint64_t)v26 >= v25)
    {
      uint64_t v28 = (char *)a1[10];
      unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - v28) >> 3);
      unint64_t v30 = v29 + 1;
      if (v29 + 1 > 0x666666666666666) {
        sub_2483E92E8();
      }
      unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (void)v28) >> 3);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x333333333333333) {
        unint64_t v32 = 0x666666666666666;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        unint64_t v32 = (unint64_t)sub_248403444(v32);
        uint64_t v28 = (char *)a1[10];
        unint64_t v26 = (char *)a1[11];
      }
      else
      {
        uint64_t v33 = 0;
      }
      unint64_t v34 = v32 + 40 * v29;
      unint64_t v35 = v32 + 40 * v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = v18;
      unint64_t v27 = (char *)(v34 + 40);
      if (v26 != v28)
      {
        do
        {
          long long v36 = *(_OWORD *)(v26 - 40);
          long long v37 = *(_OWORD *)(v26 - 24);
          *(void *)(v34 - 8) = *((void *)v26 - 1);
          *(_OWORD *)(v34 - 24) = v37;
          *(_OWORD *)(v34 - 40) = v36;
          v34 -= 40;
          v26 -= 40;
        }
        while (v26 != v28);
        uint64_t v28 = (char *)a1[10];
      }
      a1[10] = v34;
      a1[11] = v27;
      a1[12] = v35;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *((void *)v26 + 3) = 0;
      *((void *)v26 + 4) = v18;
      unint64_t v27 = v26 + 40;
    }
    a1[11] = v27;
    uint32x4_t v38 = (char *)a1[10];
    if (v27 != v38)
    {
      unint64_t v39 = 0;
      while (1)
      {
        unint64_t v132 = v39;
        uint64_t v40 = &v38[40 * v39];
        unsigned __int8 v42 = (uint64_t *)(v40 + 24);
        unint64_t v41 = *((void *)v40 + 3);
        int v43 = (unint64_t *)(v40 + 32);
        uint64_t v44 = *((void *)v40 + 4);
        unint64_t v45 = v44 + v41;
        uint64_t v46 = &v8[24 * v41];
        uint64_t v47 = (long long *)&v8[24 * v44 + 24 * v41];
        unint64_t v48 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v47 - v46) >> 3));
        uint64_t v49 = v44 ? v48 : 0;
        sub_24840DAC8((unint64_t)&v8[24 * v41], v47, v49, 1);
        unint64_t v50 = *v43;
        unint64_t v51 = v41 + (*v43 >> 1);
        uint64_t v52 = *(void *)&v8[24 * v51 + 8];
        int v131 = v40;
        *((void *)v40 + 2) = v52;
        long long v53 = (unint64_t *)(v40 + 16);
        uint64_t v129 = v44 + v41;
        if (v51 >= v45)
        {
          BOOL v130 = 0;
        }
        else
        {
          unint64_t v54 = v50 >> 1;
          char v55 = &v8[24 * v51 + 32];
          uint64_t v56 = ~v54 + v44;
          while (v56)
          {
            uint64_t v57 = *(void *)v55;
            v55 += 24;
            --v56;
            ++v51;
            if (v57 != v52) {
              goto LABEL_42;
            }
          }
          unint64_t v51 = v44 + v41;
LABEL_42:
          BOOL v130 = v51 < v45;
        }
        unint64_t v58 = (unint64_t)&v8[24 * v51];
        unint64_t v59 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)v46) >> 3));
        uint64_t v60 = v51 == v41 ? 0 : v59;
        uint64_t v61 = v51 >= v41 ? v41 : v51;
        uint64_t v133 = (long long *)&v8[24 * v51];
        sub_24840D1D8((unint64_t)&v8[24 * v41], v58, v60, 1);
        uint64_t v62 = &v8[24 * v51 - 8];
        unint64_t v63 = v51;
        while (1)
        {
          unint64_t v64 = v63;
          if (v63 <= v41) {
            break;
          }
          --v63;
          unint64_t v65 = *(void *)v62;
          v62 -= 24;
          if (v65 <= *v53)
          {
            uint64_t v61 = v64;
            break;
          }
        }
        uint64_t *v42 = (uint64_t)(a1[17] - a1[16]) >> 4;
        *int v43 = v51 - v61;
        if ((uint64_t)v51 > v61)
        {
          long long v66 = (void *)a1[20];
          uint64_t v67 = v51;
          do
          {
            --v67;
            char v68 = &v8[24 * v67];
            unint64_t v69 = v68 + 16;
            unint64_t v70 = a1[21];
            if ((unint64_t)v66 >= v70)
            {
              uint64_t v71 = a1[19];
              uint64_t v72 = ((uint64_t)v66 - v71) >> 4;
              if ((unint64_t)(v72 + 1) >> 60) {
                sub_2483E92E8();
              }
              uint64_t v73 = v70 - v71;
              uint64_t v74 = v73 >> 3;
              if (v73 >> 3 <= (unint64_t)(v72 + 1)) {
                uint64_t v74 = v72 + 1;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              uint64_t v76 = (char *)sub_2483F3EB0(v75);
              uint64_t v78 = &v76[16 * v72];
              *(void *)uint64_t v78 = *v69;
              *((void *)v78 + 1) = *(void *)v68;
              uint64_t v80 = (char *)a1[19];
              unint64_t v79 = (char *)a1[20];
              unint64_t v81 = v78;
              if (v79 != v80)
              {
                do
                {
                  *((_OWORD *)v81 - 1) = *((_OWORD *)v79 - 1);
                  v81 -= 16;
                  v79 -= 16;
                }
                while (v79 != v80);
                unint64_t v79 = (char *)a1[19];
              }
              long long v66 = v78 + 16;
              a1[19] = v81;
              a1[20] = v78 + 16;
              a1[21] = &v76[16 * v77];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              void *v66 = *v69;
              v66[1] = *(void *)v68;
              v66 += 2;
            }
            a1[20] = v66;
          }
          while (v67 > v61);
        }
        unint64_t v82 = (unint64_t)&v8[24 * v61];
        unint64_t v83 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v133 - v82) >> 3));
        if (v51 == v61) {
          uint64_t v84 = 0;
        }
        else {
          uint64_t v84 = v83;
        }
        sub_24840DAC8(v82, v133, v84, 1);
        if (v51 > v61)
        {
          unint64_t v85 = (void *)a1[17];
          uint64_t v86 = v61;
          do
          {
            float v87 = &v8[24 * v86];
            unint64_t v88 = v87 + 8;
            unint64_t v89 = a1[18];
            if ((unint64_t)v85 >= v89)
            {
              uint64_t v90 = a1[16];
              uint64_t v91 = ((uint64_t)v85 - v90) >> 4;
              if ((unint64_t)(v91 + 1) >> 60) {
                sub_2483E92E8();
              }
              uint64_t v92 = v89 - v90;
              uint64_t v93 = v92 >> 3;
              if (v92 >> 3 <= (unint64_t)(v91 + 1)) {
                uint64_t v93 = v91 + 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              uint64_t v95 = (char *)sub_2483F3EB0(v94);
              uint64_t v97 = &v95[16 * v91];
              *(void *)uint64_t v97 = *v88;
              *((void *)v97 + 1) = *(void *)v87;
              int v99 = (char *)a1[16];
              int v98 = (char *)a1[17];
              unint64_t v100 = v97;
              if (v98 != v99)
              {
                do
                {
                  *((_OWORD *)v100 - 1) = *((_OWORD *)v98 - 1);
                  v100 -= 16;
                  v98 -= 16;
                }
                while (v98 != v99);
                int v98 = (char *)a1[16];
              }
              unint64_t v85 = v97 + 16;
              a1[16] = v100;
              a1[17] = v97 + 16;
              a1[18] = &v95[16 * v96];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *unint64_t v85 = *v88;
              v85[1] = *(void *)v87;
              v85 += 2;
            }
            a1[17] = v85;
            ++v86;
          }
          while (v86 != v51);
        }
        *(void *)int v131 = -1;
        *((void *)v131 + 1) = -1;
        uint32x4_t v38 = (char *)a1[10];
        uint64_t v101 = (void *)a1[11];
        if (v64 > v41) {
          break;
        }
        unint64_t v104 = v132;
        if (v130) {
          goto LABEL_108;
        }
LABEL_125:
        unint64_t v39 = v104 + 1;
        if (v39 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v101 - v38) >> 3)) {
          goto LABEL_126;
        }
      }
      unint64_t v102 = v61 - v41;
      uint64_t v103 = ((char *)v101 - v38) / 40;
      unint64_t v104 = v132;
      *(void *)&v38[40 * v132] = v103;
      unint64_t v105 = a1[12];
      if ((unint64_t)v101 >= v105)
      {
        if ((unint64_t)(v103 + 1) > 0x666666666666666) {
          sub_2483E92E8();
        }
        unint64_t v107 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v105 - (void)v38) >> 3);
        uint64_t v108 = 2 * v107;
        if (2 * v107 <= v103 + 1) {
          uint64_t v108 = v103 + 1;
        }
        if (v107 >= 0x333333333333333) {
          unint64_t v109 = 0x666666666666666;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109)
        {
          unint64_t v109 = (unint64_t)sub_248403444(v109);
          uint64_t v101 = (void *)a1[11];
        }
        else
        {
          uint64_t v110 = 0;
        }
        unint64_t v111 = v109 + 40 * v103;
        *(void *)(v111 + 24) = v41;
        *(void *)(v111 + 32) = v102;
        uint64_t v112 = (void *)a1[10];
        unint64_t v113 = v111;
        if (v101 != v112)
        {
          do
          {
            long long v114 = *(_OWORD *)(v101 - 5);
            long long v115 = *(_OWORD *)(v101 - 3);
            *(void *)(v113 - 8) = *(v101 - 1);
            *(_OWORD *)(v113 - 24) = v115;
            *(_OWORD *)(v113 - 40) = v114;
            v113 -= 40;
            v101 -= 5;
          }
          while (v101 != v112);
          uint64_t v101 = (void *)a1[10];
        }
        uint64_t v106 = (void *)(v111 + 40);
        a1[10] = v113;
        a1[11] = v111 + 40;
        a1[12] = v109 + 40 * v110;
        if (v101) {
          operator delete(v101);
        }
      }
      else
      {
        v101[3] = v41;
        v101[4] = v102;
        uint64_t v106 = v101 + 5;
      }
      a1[11] = v106;
      uint32x4_t v38 = (char *)a1[10];
      uint64_t v101 = v106;
      if (!v130) {
        goto LABEL_125;
      }
LABEL_108:
      uint64_t v116 = v129 - v51;
      uint64_t v117 = ((char *)v101 - v38) / 40;
      *(void *)&v38[40 * v104 + 8] = v117;
      unint64_t v118 = a1[12];
      if ((unint64_t)v101 >= v118)
      {
        if ((unint64_t)(v117 + 1) > 0x666666666666666) {
          sub_2483E92E8();
        }
        unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v118 - (void)v38) >> 3);
        uint64_t v121 = 2 * v120;
        if (2 * v120 <= v117 + 1) {
          uint64_t v121 = v117 + 1;
        }
        if (v120 >= 0x333333333333333) {
          unint64_t v122 = 0x666666666666666;
        }
        else {
          unint64_t v122 = v121;
        }
        if (v122)
        {
          unint64_t v122 = (unint64_t)sub_248403444(v122);
          uint64_t v101 = (void *)a1[11];
        }
        else
        {
          uint64_t v123 = 0;
        }
        unint64_t v124 = v122 + 40 * v117;
        *(void *)(v124 + 24) = v51;
        *(void *)(v124 + 32) = v116;
        uint64_t v125 = (void *)a1[10];
        unint64_t v126 = v124;
        if (v101 != v125)
        {
          do
          {
            long long v127 = *(_OWORD *)(v101 - 5);
            long long v128 = *(_OWORD *)(v101 - 3);
            *(void *)(v126 - 8) = *(v101 - 1);
            *(_OWORD *)(v126 - 24) = v128;
            *(_OWORD *)(v126 - 40) = v127;
            v126 -= 40;
            v101 -= 5;
          }
          while (v101 != v125);
          uint64_t v101 = (void *)a1[10];
        }
        float32_t v119 = (void *)(v124 + 40);
        a1[10] = v126;
        a1[11] = v124 + 40;
        a1[12] = v122 + 40 * v123;
        if (v101) {
          operator delete(v101);
        }
      }
      else
      {
        v101[3] = v51;
        v101[4] = v116;
        float32_t v119 = v101 + 5;
      }
      a1[11] = v119;
      uint32x4_t v38 = (char *)a1[10];
      uint64_t v101 = v119;
      goto LABEL_125;
    }
LABEL_126:
    operator delete(v8);
  }
}

void sub_24840D1A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24840D1D8(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (long long *)(a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(void *)(a2 - 8) < *(void *)(v11 + 16))
                {
                  uint64_t v119 = *(void *)(v11 + 16);
                  long long v111 = *(_OWORD *)v11;
                  long long v49 = *v10;
                  *(void *)(v11 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v11 = v49;
                  *(void *)(a2 - 8) = v119;
                  *uint64_t v10 = v111;
                }
                break;
              case 3uLL:
                sub_24840E800((long long *)v11, (long long *)(v11 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                sub_24840E8F0(v11, v11 + 24, v11 + 48, a2 - 24);
                break;
              case 5uLL:
                unint64_t v50 = (long long *)(v11 + 24);
                unint64_t v51 = (long long *)(v11 + 48);
                uint64_t v52 = (long long *)(v11 + 72);
                sub_24840E8F0(v11, v11 + 24, v11 + 48, v11 + 72);
                if (*(void *)(a2 - 8) < *(void *)(v11 + 88))
                {
                  long long v53 = *v52;
                  uint64_t v54 = *(void *)(v11 + 88);
                  uint64_t v55 = *(void *)(a2 - 8);
                  long long *v52 = *v10;
                  *(void *)(v11 + 88) = v55;
                  *(void *)(a2 - 8) = v54;
                  *uint64_t v10 = v53;
                  if (*(void *)(v11 + 88) < *(void *)(v11 + 64))
                  {
                    uint64_t v56 = *(void *)(v11 + 64);
                    long long v57 = *v51;
                    *unint64_t v51 = *v52;
                    *(void *)(v11 + 64) = *(void *)(v11 + 88);
                    long long *v52 = v57;
                    *(void *)(v11 + 88) = v56;
                    if (*(void *)(v11 + 64) < *(void *)(v11 + 40))
                    {
                      uint64_t v58 = *(void *)(v11 + 40);
                      long long v59 = *v50;
                      *unint64_t v50 = *v51;
                      *(void *)(v11 + 40) = *(void *)(v11 + 64);
                      *unint64_t v51 = v59;
                      *(void *)(v11 + 64) = v58;
                      if (*(void *)(v11 + 40) < *(void *)(v11 + 16))
                      {
                        uint64_t v120 = *(void *)(v11 + 16);
                        long long v112 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v50;
                        *(void *)(v11 + 16) = *(void *)(v11 + 40);
                        *unint64_t v50 = v112;
                        *(void *)(v11 + 40) = v120;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            uint64_t v60 = (_OWORD *)(v11 + 24);
            BOOL v62 = v11 == a2 || v60 == (_OWORD *)a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = (_OWORD *)v11;
                do
                {
                  unint64_t v65 = *((void *)v64 + 5);
                  unint64_t v66 = *((void *)v64 + 2);
                  unint64_t v64 = v60;
                  if (v65 < v66)
                  {
                    long long v113 = *v60;
                    uint64_t v67 = v63;
                    while (1)
                    {
                      uint64_t v68 = v11 + v67;
                      *(_OWORD *)(v68 + 24) = *(_OWORD *)(v11 + v67);
                      *(void *)(v68 + 40) = *(void *)(v11 + v67 + 16);
                      if (!v67) {
                        break;
                      }
                      v67 -= 24;
                      if (v65 >= *(void *)(v68 - 8))
                      {
                        uint64_t v69 = v11 + v67 + 24;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v69 = v11;
LABEL_83:
                    *(_OWORD *)uint64_t v69 = v113;
                    *(void *)(v69 + 16) = v65;
                  }
                  uint64_t v60 = (_OWORD *)((char *)v64 + 24);
                  v63 += 24;
                }
                while ((_OWORD *)((char *)v64 + 24) != (_OWORD *)a2);
              }
            }
            else if (!v62)
            {
              do
              {
                unint64_t v102 = *(void *)(a1 + 40);
                unint64_t v103 = *(void *)(a1 + 16);
                a1 = (unint64_t)v60;
                if (v102 < v103)
                {
                  long long v116 = *v60;
                  unint64_t v104 = v60;
                  do
                  {
                    *unint64_t v104 = *(_OWORD *)((char *)v104 - 24);
                    *((void *)v104 + 2) = *((void *)v104 - 1);
                    unint64_t v105 = *((void *)v104 - 4);
                    unint64_t v104 = (_OWORD *)((char *)v104 - 24);
                  }
                  while (v102 < v105);
                  *unint64_t v104 = v116;
                  *((void *)v104 + 2) = v102;
                }
                uint64_t v60 = (_OWORD *)(a1 + 24);
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v70 = (v13 - 2) >> 1;
              int64_t v71 = v70;
              do
              {
                int64_t v72 = v71;
                if (v70 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  unint64_t v74 = v11 + 24 * v73;
                  if (2 * v72 + 2 < (uint64_t)v13)
                  {
                    unint64_t v75 = *(void *)(v11 + 24 * v73 + 16);
                    unint64_t v76 = *(void *)(v74 + 40);
                    v74 += 24 * (v75 < v76);
                    if (v75 < v76) {
                      uint64_t v73 = 2 * v72 + 2;
                    }
                  }
                  unint64_t v77 = *(void *)(v11 + 24 * v72 + 16);
                  if (*(void *)(v74 + 16) >= v77)
                  {
                    unint64_t v78 = v11 + 24 * v72;
                    long long v114 = *(_OWORD *)v78;
                    do
                    {
                      unint64_t v79 = v78;
                      unint64_t v78 = v74;
                      long long v80 = *(_OWORD *)v74;
                      *(void *)(v79 + 16) = *(void *)(v74 + 16);
                      *(_OWORD *)unint64_t v79 = v80;
                      if (v70 < v73) {
                        break;
                      }
                      uint64_t v81 = (2 * v73) | 1;
                      unint64_t v74 = v11 + 24 * v81;
                      uint64_t v82 = 2 * v73 + 2;
                      if (v82 < (uint64_t)v13)
                      {
                        unint64_t v83 = *(void *)(v11 + 24 * v81 + 16);
                        unint64_t v84 = *(void *)(v74 + 40);
                        v74 += 24 * (v83 < v84);
                        if (v83 < v84) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t v73 = v81;
                    }
                    while (*(void *)(v74 + 16) >= v77);
                    *(_OWORD *)unint64_t v78 = v114;
                    *(void *)(v78 + 16) = v77;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              int64_t v85 = v12 / 0x18uLL;
              do
              {
                uint64_t v86 = 0;
                uint64_t v121 = *(void *)(v11 + 16);
                long long v115 = *(_OWORD *)v11;
                unint64_t v87 = v11;
                do
                {
                  uint64_t v88 = v86 + 1;
                  unint64_t v89 = v87 + 24 * (v86 + 1);
                  uint64_t v90 = (2 * v86) | 1;
                  uint64_t v91 = 2 * v86 + 2;
                  if (v91 < v85)
                  {
                    unint64_t v92 = *(void *)(v87 + 24 * v88 + 16);
                    unint64_t v93 = *(void *)(v89 + 40);
                    v89 += 24 * (v92 < v93);
                    if (v92 < v93) {
                      uint64_t v90 = v91;
                    }
                  }
                  long long v94 = *(_OWORD *)v89;
                  *(void *)(v87 + 16) = *(void *)(v89 + 16);
                  *(_OWORD *)unint64_t v87 = v94;
                  unint64_t v87 = v89;
                  uint64_t v86 = v90;
                }
                while (v90 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 24;
                if (v89 == a2)
                {
                  *(void *)(v89 + 16) = v121;
                  *(_OWORD *)unint64_t v89 = v115;
                }
                else
                {
                  long long v95 = *(_OWORD *)a2;
                  *(void *)(v89 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v89 = v95;
                  *(void *)(a2 + 16) = v121;
                  *(_OWORD *)a2 = v115;
                  uint64_t v96 = v89 - v11 + 24;
                  if (v96 >= 25)
                  {
                    unint64_t v97 = (v96 / 0x18uLL - 2) >> 1;
                    unint64_t v98 = *(void *)(v89 + 16);
                    if (*(void *)(v11 + 24 * v97 + 16) < v98)
                    {
                      long long v108 = *(_OWORD *)v89;
                      do
                      {
                        unint64_t v99 = v89;
                        unint64_t v89 = v11 + 24 * v97;
                        long long v100 = *(_OWORD *)v89;
                        *(void *)(v99 + 16) = *(void *)(v89 + 16);
                        *(_OWORD *)unint64_t v99 = v100;
                        if (!v97) {
                          break;
                        }
                        unint64_t v97 = (v97 - 1) >> 1;
                      }
                      while (*(void *)(v11 + 24 * v97 + 16) < v98);
                      *(_OWORD *)unint64_t v89 = v108;
                      *(void *)(v89 + 16) = v98;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_24840E800((long long *)a1, (long long *)(a1 + 24 * (v13 >> 1)), (long long *)(a2 - 24));
            uint64_t v16 = 3 * v14;
            unint64_t v17 = (long long *)(a1 + 24 * v14 - 24);
            sub_24840E800((long long *)(a1 + 24), v17, (long long *)(a2 - 48));
            unint64_t v18 = (long long *)(a1 + 24 + 8 * v16);
            sub_24840E800((long long *)(a1 + 48), v18, (long long *)(a2 - 72));
            sub_24840E800(v17, (long long *)v15, v18);
            uint64_t v117 = *(void *)(a1 + 16);
            long long v109 = *(_OWORD *)a1;
            uint64_t v19 = *(void *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v19;
            *(void *)(v15 + 16) = v117;
            *(_OWORD *)unint64_t v15 = v109;
          }
          else
          {
            sub_24840E800((long long *)(a1 + 24 * (v13 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v20 = *(void *)(a1 + 16);
          if (*(void *)(a1 - 8) < v20) {
            goto LABEL_12;
          }
          long long v107 = *(_OWORD *)a1;
          if (v20 >= *(void *)(a2 - 8))
          {
            unint64_t v39 = a1 + 24;
            do
            {
              unint64_t v11 = v39;
              if (v39 >= a2) {
                break;
              }
              unint64_t v40 = *(void *)(v39 + 16);
              v39 += 24;
            }
            while (v20 >= v40);
          }
          else
          {
            unint64_t v37 = a1;
            do
            {
              unint64_t v11 = v37 + 24;
              unint64_t v38 = *(void *)(v37 + 40);
              v37 += 24;
            }
            while (v20 >= v38);
          }
          unint64_t v41 = a2;
          if (v11 < a2)
          {
            unint64_t v42 = a2;
            do
            {
              unint64_t v41 = v42 - 24;
              unint64_t v43 = *(void *)(v42 - 8);
              v42 -= 24;
            }
            while (v20 < v43);
          }
          while (v11 < v41)
          {
            uint64_t v118 = *(void *)(v11 + 16);
            long long v110 = *(_OWORD *)v11;
            long long v44 = *(_OWORD *)v41;
            *(void *)(v11 + 16) = *(void *)(v41 + 16);
            *(_OWORD *)unint64_t v11 = v44;
            *(void *)(v41 + 16) = v118;
            *(_OWORD *)unint64_t v41 = v110;
            do
            {
              unint64_t v45 = *(void *)(v11 + 40);
              v11 += 24;
            }
            while (v20 >= v45);
            do
            {
              unint64_t v46 = *(void *)(v41 - 8);
              v41 -= 24;
            }
            while (v20 < v46);
          }
          uint64_t v47 = (long long *)(v11 - 24);
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v48 = *v47;
            *(void *)(a1 + 16) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v48;
          }
          a4 = 0;
          *uint64_t v47 = v107;
          *(void *)(v11 - 8) = v20;
        }
        unint64_t v20 = *(void *)(a1 + 16);
LABEL_12:
        long long v106 = *(_OWORD *)a1;
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          v21 += 24;
        }
        while (*(void *)(v22 + 40) < v20);
        unint64_t v23 = a2;
        if (v22 == a1)
        {
          unint64_t v26 = a2;
          while (v21 < v26)
          {
            unint64_t v24 = v26 - 24;
            unint64_t v27 = *(void *)(v26 - 8);
            v26 -= 24;
            if (v27 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = v26;
        }
        else
        {
          do
          {
            unint64_t v24 = v23 - 24;
            unint64_t v25 = *(void *)(v23 - 8);
            v23 -= 24;
          }
          while (v25 >= v20);
        }
LABEL_22:
        unint64_t v11 = v21;
        if (v21 < v24)
        {
          unint64_t v28 = v24;
          do
          {
            long long v29 = *(_OWORD *)v11;
            uint64_t v30 = *(void *)(v11 + 16);
            uint64_t v31 = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v28;
            *(void *)(v11 + 16) = v31;
            *(void *)(v28 + 16) = v30;
            *(_OWORD *)unint64_t v28 = v29;
            do
            {
              unint64_t v32 = *(void *)(v11 + 40);
              v11 += 24;
            }
            while (v32 < v20);
            do
            {
              unint64_t v33 = *(void *)(v28 - 8);
              v28 -= 24;
            }
            while (v33 >= v20);
          }
          while (v11 < v28);
        }
        unint64_t v34 = (long long *)(v11 - 24);
        if (v11 - 24 != a1)
        {
          long long v35 = *v34;
          *(void *)(a1 + 16) = *(void *)(v11 - 8);
          *(_OWORD *)a1 = v35;
        }
        *unint64_t v34 = v106;
        *(void *)(v11 - 8) = v20;
        if (v21 >= v24) {
          break;
        }
LABEL_33:
        sub_24840D1D8(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v36 = sub_24840E9C0(a1, v11 - 24);
      if (sub_24840E9C0(v11, a2)) {
        break;
      }
      if (!v36) {
        goto LABEL_33;
      }
    }
    a2 = v11 - 24;
    if (!v36) {
      continue;
    }
    break;
  }
}

void sub_24840DAC8(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (long long *)((char *)a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((void *)a2 - 2) < *(void *)(v11 + 8))
                {
                  uint64_t v123 = *(void *)(v11 + 16);
                  long long v118 = *(_OWORD *)v11;
                  long long v51 = *v10;
                  *(void *)(v11 + 16) = *((void *)a2 - 1);
                  *(_OWORD *)unint64_t v11 = v51;
                  *((void *)a2 - 1) = v123;
                  *uint64_t v10 = v118;
                }
                break;
              case 3uLL:
                sub_24840E3A8((long long *)v11, (long long *)(v11 + 24), (long long *)((char *)a2 - 24));
                break;
              case 4uLL:
                sub_24840E498(v11, v11 + 24, v11 + 48, (uint64_t)a2 - 24);
                break;
              case 5uLL:
                uint64_t v52 = (long long *)(v11 + 24);
                long long v53 = (long long *)(v11 + 48);
                uint64_t v54 = (long long *)(v11 + 72);
                sub_24840E498(v11, v11 + 24, v11 + 48, v11 + 72);
                if (*((void *)a2 - 2) < *(void *)(v11 + 80))
                {
                  long long v55 = *v54;
                  uint64_t v56 = *(void *)(v11 + 88);
                  uint64_t v57 = *((void *)a2 - 1);
                  *uint64_t v54 = *v10;
                  *(void *)(v11 + 88) = v57;
                  *((void *)a2 - 1) = v56;
                  *uint64_t v10 = v55;
                  if (*(void *)(v11 + 80) < *(void *)(v11 + 56))
                  {
                    uint64_t v58 = *(void *)(v11 + 64);
                    long long v59 = *v53;
                    *long long v53 = *v54;
                    *(void *)(v11 + 64) = *(void *)(v11 + 88);
                    *uint64_t v54 = v59;
                    *(void *)(v11 + 88) = v58;
                    if (*(void *)(v11 + 56) < *(void *)(v11 + 32))
                    {
                      uint64_t v60 = *(void *)(v11 + 40);
                      long long v61 = *v52;
                      long long *v52 = *v53;
                      *(void *)(v11 + 40) = *(void *)(v11 + 64);
                      *long long v53 = v61;
                      *(void *)(v11 + 64) = v60;
                      if (*(void *)(v11 + 32) < *(void *)(v11 + 8))
                      {
                        uint64_t v124 = *(void *)(v11 + 16);
                        long long v119 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v52;
                        *(void *)(v11 + 16) = *(void *)(v11 + 40);
                        long long *v52 = v119;
                        *(void *)(v11 + 40) = v124;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            BOOL v62 = (long long *)(v11 + 24);
            BOOL v64 = (long long *)v11 == a2 || v62 == a2;
            if (a4)
            {
              if (!v64)
              {
                uint64_t v65 = 0;
                unint64_t v66 = (void *)v11;
                do
                {
                  uint64_t v67 = v62;
                  unint64_t v68 = v66[4];
                  if (v68 < v66[1])
                  {
                    uint64_t v69 = *(void *)v67;
                    uint64_t v70 = v66[5];
                    uint64_t v71 = v65;
                    while (1)
                    {
                      uint64_t v72 = v11 + v71;
                      *(_OWORD *)(v72 + 24) = *(_OWORD *)(v11 + v71);
                      *(void *)(v72 + 40) = *(void *)(v11 + v71 + 16);
                      if (!v71) {
                        break;
                      }
                      v71 -= 24;
                      if (v68 >= *(void *)(v72 - 16))
                      {
                        uint64_t v73 = (void *)(v11 + v71 + 24);
                        goto LABEL_84;
                      }
                    }
                    uint64_t v73 = (void *)v11;
LABEL_84:
                    *uint64_t v73 = v69;
                    v73[1] = v68;
                    v73[2] = v70;
                  }
                  BOOL v62 = (long long *)((char *)v67 + 24);
                  v65 += 24;
                  unint64_t v66 = v67;
                }
                while ((long long *)((char *)v67 + 24) != a2);
              }
            }
            else if (!v64)
            {
              do
              {
                long long v110 = v62;
                unint64_t v111 = *(void *)(a1 + 32);
                if (v111 < *(void *)(a1 + 8))
                {
                  uint64_t v112 = *(void *)v62;
                  uint64_t v113 = *(void *)(a1 + 40);
                  long long v114 = v110;
                  do
                  {
                    *long long v114 = *(long long *)((char *)v114 - 24);
                    *((void *)v114 + 2) = *((void *)v114 - 1);
                    unint64_t v115 = *((void *)v114 - 5);
                    long long v114 = (long long *)((char *)v114 - 24);
                  }
                  while (v111 < v115);
                  *(void *)long long v114 = v112;
                  *((void *)v114 + 1) = v111;
                  *((void *)v114 + 2) = v113;
                }
                BOOL v62 = (long long *)((char *)v110 + 24);
                a1 = (unint64_t)v110;
              }
              while ((long long *)((char *)v110 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v11 != a2)
            {
              int64_t v74 = (v13 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  unint64_t v78 = (void *)(v11 + 24 * v77);
                  if (2 * v76 + 2 < (uint64_t)v13)
                  {
                    unint64_t v79 = *(void *)(v11 + 24 * v77 + 8);
                    unint64_t v80 = v78[4];
                    v78 += 3 * (v79 < v80);
                    if (v79 < v80) {
                      uint64_t v77 = 2 * v76 + 2;
                    }
                  }
                  unint64_t v81 = *(void *)(v11 + 24 * v76 + 8);
                  if (v78[1] >= v81)
                  {
                    uint64_t v82 = (void *)(v11 + 24 * v76);
                    uint64_t v83 = *v82;
                    uint64_t v84 = v82[2];
                    do
                    {
                      int64_t v85 = v82;
                      uint64_t v82 = v78;
                      long long v86 = *(_OWORD *)v78;
                      v85[2] = v78[2];
                      *(_OWORD *)int64_t v85 = v86;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v87 = (2 * v77) | 1;
                      unint64_t v78 = (void *)(v11 + 24 * v87);
                      uint64_t v88 = 2 * v77 + 2;
                      if (v88 < (uint64_t)v13)
                      {
                        unint64_t v89 = *(void *)(v11 + 24 * v87 + 8);
                        unint64_t v90 = v78[4];
                        v78 += 3 * (v89 < v90);
                        if (v89 < v90) {
                          uint64_t v87 = v88;
                        }
                      }
                      uint64_t v77 = v87;
                    }
                    while (v78[1] >= v81);
                    *uint64_t v82 = v83;
                    v82[1] = v81;
                    _OWORD v82[2] = v84;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              int64_t v91 = v12 / 0x18uLL;
              do
              {
                uint64_t v92 = 0;
                uint64_t v125 = *(void *)(v11 + 16);
                long long v120 = *(_OWORD *)v11;
                unint64_t v93 = v11;
                do
                {
                  uint64_t v94 = v92 + 1;
                  long long v95 = (long long *)(v93 + 24 * (v92 + 1));
                  uint64_t v96 = (2 * v92) | 1;
                  uint64_t v97 = 2 * v92 + 2;
                  if (v97 < v91)
                  {
                    unint64_t v98 = *(void *)(v93 + 24 * v94 + 8);
                    unint64_t v99 = *((void *)v95 + 4);
                    long long v95 = (long long *)((char *)v95 + 24 * (v98 < v99));
                    if (v98 < v99) {
                      uint64_t v96 = v97;
                    }
                  }
                  long long v100 = *v95;
                  *(void *)(v93 + 16) = *((void *)v95 + 2);
                  *(_OWORD *)unint64_t v93 = v100;
                  unint64_t v93 = (unint64_t)v95;
                  uint64_t v92 = v96;
                }
                while (v96 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
                a2 = (long long *)((char *)a2 - 24);
                if (v95 == a2)
                {
                  *((void *)v95 + 2) = v125;
                  *long long v95 = v120;
                }
                else
                {
                  long long v101 = *a2;
                  *((void *)v95 + 2) = *((void *)a2 + 2);
                  *long long v95 = v101;
                  *((void *)a2 + 2) = v125;
                  *a2 = v120;
                  uint64_t v102 = (uint64_t)v95 - v11 + 24;
                  if (v102 >= 25)
                  {
                    unint64_t v103 = (v102 / 0x18uLL - 2) >> 1;
                    unint64_t v104 = *((void *)v95 + 1);
                    if (*(void *)(v11 + 24 * v103 + 8) < v104)
                    {
                      uint64_t v105 = *(void *)v95;
                      uint64_t v106 = *((void *)v95 + 2);
                      do
                      {
                        long long v107 = v95;
                        long long v95 = (long long *)(v11 + 24 * v103);
                        long long v108 = *v95;
                        *((void *)v107 + 2) = *((void *)v95 + 2);
                        *long long v107 = v108;
                        if (!v103) {
                          break;
                        }
                        unint64_t v103 = (v103 - 1) >> 1;
                      }
                      while (*(void *)(v11 + 24 * v103 + 8) < v104);
                      *(void *)long long v95 = v105;
                      *((void *)v95 + 1) = v104;
                      *((void *)v95 + 2) = v106;
                    }
                  }
                }
              }
              while (v91-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_24840E3A8((long long *)a1, (long long *)(a1 + 24 * (v13 >> 1)), (long long *)((char *)a2 - 24));
            uint64_t v16 = 3 * v14;
            unint64_t v17 = (long long *)(a1 + 24 * v14 - 24);
            sub_24840E3A8((long long *)(a1 + 24), v17, a2 - 3);
            unint64_t v18 = (long long *)(a1 + 24 + 8 * v16);
            sub_24840E3A8((long long *)(a1 + 48), v18, (long long *)((char *)a2 - 72));
            sub_24840E3A8(v17, (long long *)v15, v18);
            uint64_t v121 = *(void *)(a1 + 16);
            long long v116 = *(_OWORD *)a1;
            uint64_t v19 = *(void *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v19;
            *(void *)(v15 + 16) = v121;
            *(_OWORD *)unint64_t v15 = v116;
          }
          else
          {
            sub_24840E3A8((long long *)(a1 + 24 * (v13 >> 1)), (long long *)a1, (long long *)((char *)a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v20 = *(void *)(a1 + 8);
          if (*(void *)(a1 - 16) < v20) {
            goto LABEL_12;
          }
          if (v20 >= *((void *)a2 - 2))
          {
            unint64_t v40 = a1 + 24;
            do
            {
              unint64_t v11 = v40;
              if (v40 >= (unint64_t)a2) {
                break;
              }
              unint64_t v41 = *(void *)(v40 + 8);
              v40 += 24;
            }
            while (v20 >= v41);
          }
          else
          {
            unint64_t v38 = a1;
            do
            {
              unint64_t v11 = v38 + 24;
              unint64_t v39 = *(void *)(v38 + 32);
              v38 += 24;
            }
            while (v20 >= v39);
          }
          unint64_t v42 = a2;
          if (v11 < (unint64_t)a2)
          {
            unint64_t v43 = a2;
            do
            {
              unint64_t v42 = (long long *)((char *)v43 - 24);
              unint64_t v44 = *((void *)v43 - 2);
              unint64_t v43 = (long long *)((char *)v43 - 24);
            }
            while (v20 < v44);
          }
          uint64_t v45 = *(void *)a1;
          uint64_t v46 = *(void *)(a1 + 16);
          while (v11 < (unint64_t)v42)
          {
            uint64_t v122 = *(void *)(v11 + 16);
            long long v117 = *(_OWORD *)v11;
            long long v47 = *v42;
            *(void *)(v11 + 16) = *((void *)v42 + 2);
            *(_OWORD *)unint64_t v11 = v47;
            *((void *)v42 + 2) = v122;
            long long *v42 = v117;
            do
            {
              unint64_t v48 = *(void *)(v11 + 32);
              v11 += 24;
            }
            while (v20 >= v48);
            do
            {
              unint64_t v49 = *((void *)v42 - 2);
              unint64_t v42 = (long long *)((char *)v42 - 24);
            }
            while (v20 < v49);
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v50 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 16) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v50;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v45;
          *(void *)(v11 - 16) = v20;
          *(void *)(v11 - 8) = v46;
        }
        unint64_t v20 = *(void *)(a1 + 8);
LABEL_12:
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void *)(a1 + 16);
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 24;
        }
        while (*(void *)(v24 + 32) < v20);
        unint64_t v25 = a2;
        if (v24 == a1)
        {
          unint64_t v28 = a2;
          while (v23 < (unint64_t)v28)
          {
            unint64_t v26 = (long long *)((char *)v28 - 24);
            unint64_t v29 = *((void *)v28 - 2);
            unint64_t v28 = (long long *)((char *)v28 - 24);
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = (long long *)((char *)v25 - 24);
            unint64_t v27 = *((void *)v25 - 2);
            unint64_t v25 = (long long *)((char *)v25 - 24);
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v11 = v23;
        if (v23 < (unint64_t)v26)
        {
          unint64_t v30 = (unint64_t)v26;
          do
          {
            long long v31 = *(_OWORD *)v11;
            uint64_t v32 = *(void *)(v11 + 16);
            uint64_t v33 = *(void *)(v30 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
            *(void *)(v11 + 16) = v33;
            *(void *)(v30 + 16) = v32;
            *(_OWORD *)unint64_t v30 = v31;
            do
            {
              unint64_t v34 = *(void *)(v11 + 32);
              v11 += 24;
            }
            while (v34 < v20);
            do
            {
              unint64_t v35 = *(void *)(v30 - 16);
              v30 -= 24;
            }
            while (v35 >= v20);
          }
          while (v11 < v30);
        }
        if (v11 - 24 != a1)
        {
          long long v36 = *(_OWORD *)(v11 - 24);
          *(void *)(a1 + 16) = *(void *)(v11 - 8);
          *(_OWORD *)a1 = v36;
        }
        *(void *)(v11 - 24) = v21;
        *(void *)(v11 - 16) = v20;
        *(void *)(v11 - 8) = v22;
        if (v23 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        sub_24840DAC8(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = sub_24840E568(a1, (void *)(v11 - 24));
      if (sub_24840E568(v11, a2)) {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v11 - 24);
    if (!v37) {
      continue;
    }
    break;
  }
}

long long *sub_24840E3A8(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v4 = *((void *)a3 + 1);
  if (v3 >= *((void *)result + 1))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if (*((void *)a2 + 1) < *((void *)result + 1))
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *uint64_t result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if (*((void *)a3 + 1) >= *((void *)a2 + 1)) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *uint64_t result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

__n128 sub_24840E498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24840E3A8((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

BOOL sub_24840E568(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 2) < *(void *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 3);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 3) = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      sub_24840E3A8((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 3));
      return 1;
    case 4uLL:
      sub_24840E498(a1, a1 + 24, a1 + 48, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      uint64_t v19 = (long long *)(a1 + 24);
      unint64_t v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      sub_24840E498(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(a2 - 2) < *(void *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        long long v23 = *v21;
        uint64_t v24 = *(a2 - 1);
        *uint64_t v21 = *(_OWORD *)(a2 - 3);
        *(void *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 3) = v23;
        *(a2 - 1) = v22;
        if (*(void *)(a1 + 80) < *(void *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          long long v26 = *v20;
          *unint64_t v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v21 = v26;
          *(void *)(a1 + 88) = v25;
          if (*(void *)(a1 + 56) < *(void *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            long long v28 = *v19;
            *uint64_t v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *unint64_t v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(void *)(a1 + 32) < *(void *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = (void *)(a1 + 48);
      sub_24840E3A8((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = (void *)(a1 + 72);
      if ((void *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = v10[1];
    if (v13 < v9[1])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v10[2];
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *(void *)(v17 + 32))
        {
          unint64_t v18 = (void *)(a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      unint64_t v18 = (void *)a1;
LABEL_13:
      *unint64_t v18 = v14;
      v18[1] = v13;
      v18[2] = v15;
      if (++v12 == 8) {
        return v10 + 3 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2) {
      return 1;
    }
  }
}

long long *sub_24840E800(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = *((void *)a2 + 2);
  unint64_t v4 = *((void *)a3 + 2);
  if (v3 >= *((void *)result + 2))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if (*((void *)a2 + 2) < *((void *)result + 2))
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *BOOL result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *BOOL result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if (*((void *)a3 + 2) >= *((void *)a2 + 2)) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *BOOL result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

__n128 sub_24840E8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24840E800((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*(void *)(a3 + 16) < *(void *)(a2 + 16))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      if (*(void *)(a2 + 16) < *(void *)(a1 + 16))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

BOOL sub_24840E9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 8) < *(void *)(a1 + 16))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_24840E800((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_24840E8F0(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v17 = (long long *)(a1 + 24);
      unint64_t v18 = (long long *)(a1 + 48);
      uint64_t v19 = (long long *)(a1 + 72);
      sub_24840E8F0(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(void *)(a2 - 8) < *(void *)(a1 + 88))
      {
        uint64_t v20 = *(void *)(a1 + 88);
        long long v21 = *v19;
        uint64_t v22 = *(void *)(a2 - 8);
        *uint64_t v19 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v22;
        *(_OWORD *)(a2 - 24) = v21;
        *(void *)(a2 - 8) = v20;
        if (*(void *)(a1 + 88) < *(void *)(a1 + 64))
        {
          uint64_t v23 = *(void *)(a1 + 64);
          long long v24 = *v18;
          *unint64_t v18 = *v19;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v19 = v24;
          *(void *)(a1 + 88) = v23;
          if (*(void *)(a1 + 64) < *(void *)(a1 + 40))
          {
            uint64_t v25 = *(void *)(a1 + 40);
            long long v26 = *v17;
            *uint64_t v17 = *v18;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *unint64_t v18 = v26;
            *(void *)(a1 + 64) = v25;
            if (*(void *)(a1 + 40) < *(void *)(a1 + 16))
            {
              uint64_t v27 = *(void *)(a1 + 16);
              long long v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v17 = v28;
              *(void *)(a1 + 40) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_24840E800((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 16);
    if (v13 < *(void *)(v9 + 16))
    {
      long long v29 = *(_OWORD *)v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 88) = *(void *)(a1 + v14 + 64);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (v13 >= *(void *)(v15 + 40))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v16 = v29;
      *(void *)(v16 + 16) = v13;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_24840EC5C(uint64_t result, void *a2, unint64_t a3)
{
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  uint64_t v3 = a2[13];
  if (a3 < (a2[14] - v3) >> 3)
  {
    uint64_t v5 = a2;
    unint64_t v6 = *(void *)(v3 + 8 * a3);
    if (v6)
    {
      uint64_t v7 = result;
      sub_24840EF64((void **)result, v6);
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = v5[10];
        uint64_t v10 = (void *)(v9 + 40 * v8);
        unint64_t v11 = v10[2];
        unint64_t v13 = v10 + 4;
        uint64_t v12 = v10[4];
        if (v11 >= a3)
        {
          if (v12)
          {
            uint64_t v46 = v10 + 2;
            unint64_t v48 = (void *)(v9 + 40 * v8);
            unint64_t v30 = 0;
            do
            {
              unint64_t v31 = v48[3] + v30;
              uint64_t v32 = v5[16];
              if (*(void *)(v32 + 16 * v31) > a3) {
                break;
              }
              uint64_t v33 = (void *)(v32 + 16 * v31 + 8);
              unint64_t v35 = *(void **)(v7 + 8);
              unint64_t v34 = *(void *)(v7 + 16);
              if ((unint64_t)v35 >= v34)
              {
                BOOL v37 = *(void **)v7;
                uint64_t v38 = ((uint64_t)v35 - *(void *)v7) >> 3;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61) {
                  sub_2483E92E8();
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 2 > v39) {
                  unint64_t v39 = v40 >> 2;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41) {
                  unint64_t v41 = (unint64_t)sub_2483F04AC(v41);
                }
                else {
                  uint64_t v42 = 0;
                }
                unint64_t v43 = (void *)(v41 + 8 * v38);
                *unint64_t v43 = *v33;
                long long v36 = v43 + 1;
                while (v35 != v37)
                {
                  uint64_t v44 = *--v35;
                  *--unint64_t v43 = v44;
                }
                *(void *)uint64_t v7 = v43;
                *(void *)(v7 + 8) = v36;
                *(void *)(v7 + 16) = v41 + 8 * v42;
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *unint64_t v35 = *v33;
                long long v36 = v35 + 1;
              }
              *(void *)(v7 + 8) = v36;
              ++v30;
            }
            while (v30 < *v13);
            uint64_t v10 = v48;
            unint64_t v11 = *v46;
          }
          if (v11 <= a3) {
            return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          }
        }
        else
        {
          uint64_t v45 = v5[10];
          uint64_t v47 = v8;
          if (v12)
          {
            unint64_t v14 = 0;
            do
            {
              unint64_t v15 = *(void *)(v45 + 40 * v47 + 24) + v14;
              uint64_t v16 = v5[19];
              if (*(void *)(v16 + 16 * v15) <= a3) {
                break;
              }
              uint64_t v17 = (void *)(v16 + 16 * v15 + 8);
              uint64_t v19 = *(void **)(v7 + 8);
              unint64_t v18 = *(void *)(v7 + 16);
              if ((unint64_t)v19 >= v18)
              {
                long long v21 = v5;
                uint64_t v22 = *(void **)v7;
                uint64_t v23 = ((uint64_t)v19 - *(void *)v7) >> 3;
                unint64_t v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 61) {
                  sub_2483E92E8();
                }
                uint64_t v25 = v18 - (void)v22;
                if (v25 >> 2 > v24) {
                  unint64_t v24 = v25 >> 2;
                }
                long long v26 = (char *)((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v24);
                if (v26) {
                  long long v26 = (char *)sub_2483F04AC((unint64_t)v26);
                }
                else {
                  uint64_t v27 = 0;
                }
                long long v28 = &v26[8 * v23];
                *(void *)long long v28 = *v17;
                uint64_t v20 = v28 + 8;
                uint64_t v5 = v21;
                while (v19 != v22)
                {
                  uint64_t v29 = *--v19;
                  *((void *)v28 - 1) = v29;
                  v28 -= 8;
                }
                *(void *)uint64_t v7 = v28;
                *(void *)(v7 + 8) = v20;
                *(void *)(v7 + 16) = &v26[8 * v27];
                if (v22) {
                  operator delete(v22);
                }
              }
              else
              {
                *uint64_t v19 = *v17;
                uint64_t v20 = v19 + 1;
              }
              *(void *)(v7 + 8) = v20;
              ++v14;
            }
            while (v14 < *v13);
          }
          uint64_t v10 = (void *)(v45 + 40 * v47 + 8);
        }
        uint64_t v8 = *v10;
        if (*v10 == -1) {
          return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        }
      }
    }
  }
  return result;
}

void sub_24840EF30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24840EF64(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_2483E92E8();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_2483F04AC(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_24840F00C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_2483E92E8();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_24840F084(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_24840F0A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int64_t v3 = *(uint64_t **)v2;
  if (*(void *)(*(void *)v2 + 16))
  {
    unint64_t v4 = 0;
    uint64_t v5 = *v3;
    uint64_t v6 = *(void **)(v2 + 8);
    uint64_t v7 = v6[2] * (v3[1] + a2);
    uint64_t v8 = (float32x4_t *)(v6[3] + v7 + 4 * *v3);
    uint64_t v9 = (float32x4_t *)(v6[8] + v7 + 4 * v5);
    uint64_t v10 = (float32x4_t *)(v6[13] + v7 + 4 * v5);
    uint64_t v11 = **(void ***)(v2 + 16);
    uint64_t v12 = v11[2] * a2;
    unint64_t v13 = (float32x4_t *)(v11[3] + v12);
    unint64_t v14 = (float32x4_t *)(v11[8] + v12);
    unint64_t v15 = (float32x4_t *)(v11[13] + v12);
    do
    {
      float32x4_t v16 = *v8++;
      float32x4_t v17 = v16;
      float32x4_t v18 = *v9++;
      float32x4_t v19 = v18;
      float32x4_t v20 = *v10++;
      uint64_t v21 = *(void *)(v2 + 24);
      int32x4_t v22 = *(int32x4_t *)(v21 + 144);
      float32x4_t v23 = vaddq_f32(v17, v19);
      float32x4_t v24 = vsubq_f32(v19, v17);
      uint64_t v25 = (const float *)(v21 + 160);
      float32x4_t v26 = vld1q_dup_f32(v25);
      float32x4_t v27 = vsubq_f32(v23, v26);
      long long v28 = (const float *)(v21 + 164);
      float32x4_t v29 = vld1q_dup_f32(v28);
      unint64_t v30 = (const float *)(v21 + 168);
      float32x4_t v31 = vsubq_f32(v24, v29);
      float32x4_t v32 = vld1q_dup_f32(v30);
      float32x4_t v33 = vsubq_f32(v20, v32);
      float32x4_t v34 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0), v27, vmulq_f32(v27, v27));
      float32x4_t v35 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1), v31, vmulq_f32(v31, v31));
      float32x4_t v36 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(v22, 2), v33, vmulq_f32(v33, v33));
      float32x4_t result = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)v21, v34), v35, *(float32x4_t *)(v21 + 16)), v36, *(float32x4_t *)(v21 + 32));
      float32x4_t v38 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v21 + 48), v34), v35, *(float32x4_t *)(v21 + 64)), v36, *(float32x4_t *)(v21 + 80));
      float32x4_t v39 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v21 + 96), v34), v35, *(float32x4_t *)(v21 + 112)), v36, *(float32x4_t *)(v21 + 128));
      *v13++ = result;
      *v14++ = v38;
      *v15++ = v39;
      v4 += 4;
    }
    while (v4 < *(void *)(*(void *)v2 + 16));
  }
  return result;
}

void sub_24840F1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[3] = a4;
  uint64_t v7 = a3;
  int v4 = *(_DWORD *)(a2 + 24);
  v6[0] = a2;
  v6[1] = a1;
  void v6[2] = &v7;
  v8[0] = 0;
  v8[1] = v8;
  if (v4)
  {
    unsigned int v5 = 0;
    v9[0] = sub_2483F1794;
    v9[1] = v6;
    do
      sub_24840F0A0((uint64_t)v9, v5++);
    while (v4 != v5);
  }
}

void sub_24840F23C(uint64_t a1)
{
  for (uint64_t i = 0; i != 9; ++i)
  {
    int64_t v3 = (const float *)&dword_24854D584[i];
    float32x4_t v4 = vld1q_dup_f32(v3);
    *(float32x4_t *)(a1 + 16 * i) = v4;
  }
  uint64_t v5 = 0;
  *(_OWORD *)(a1 + 144) = xmmword_248552D70;
  *(_OWORD *)(a1 + 176) = xmmword_24854D4E8;
  do
  {
    *(float *)(a1 + v5 + 160) = cbrtf(*(float *)(a1 + v5 + 144));
    v5 += 4;
  }
  while (v5 != 16);
}

BOOL sub_24840F2C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 28)) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 72);
  if (!*(unsigned char *)(a1 + 64) && v1 != 16)
  {
    BOOL v3 = v1 > 0x12;
    int v4 = (1 << v1) & 0x62102;
    if (v3 || v4 == 0) {
      return 0;
    }
  }
  return *(_DWORD *)(a1 + 56) != 1 || *(_DWORD *)(a1 + 16) == 1;
}

uint64_t sub_24840F324(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 21) = *(void *)(a2 + 69);
  *(void *)(a1 + 16) = v4;
  if (a2 + 48 != a1) {
    sub_2483EFEC8((void *)(a1 + 32), *(char **)(a2 + 80), *(char **)(a2 + 88), *(void *)(a2 + 88) - *(void *)(a2 + 80));
  }
  uint64_t v5 = 0;
  long long v6 = *(_OWORD *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 120) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 160) = *(void *)(a2 + 208);
  *(void *)(a1 + 176) = *(void *)(a2 + 224);
  *(void *)(a1 + 192) = *(void *)(a2 + 240);
  LODWORD(v6) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 864) = v6;
  long long v9 = *(_OWORD *)(a2 + 484);
  long long v10 = *(_OWORD *)(a2 + 500);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 516);
  *(_OWORD *)(a1 + 220) = v10;
  *(_OWORD *)(a1 + 204) = v9;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 480);
  int v11 = *(unsigned __int8 *)(a2 + 41);
  *(unsigned char *)(a1 + 241) = v11;
  uint64_t v12 = *(void *)(a2 + 520);
  *(_DWORD *)(a1 + 804) = *(_DWORD *)(a2 + 528);
  *(void *)(a1 + 796) = v12;
  do
  {
    *(float *)(a1 + v5 + 812) = cbrtf(*(float *)(a1 + v5 + 796));
    v5 += 4;
  }
  while (v5 != 12);
  *(_DWORD *)(a1 + 808) = 1065353216;
  *(_DWORD *)(a1 + 824) = 1065353216;
  *(_OWORD *)(a1 + 828) = *(_OWORD *)(a2 + 532);
  BOOL v13 = sub_24840F2C8(a1);
  unint64_t v14 = (char *)a1;
  if (v11)
  {
    unint64_t v14 = (char *)a1;
    if (!v13) {
      unint64_t v14 = sub_2483F0AE8(*(_DWORD *)(a1 + 56) == 1);
    }
  }

  return sub_24840F4A0(a1, (uint64_t)v14);
}

uint64_t sub_24840F4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  __int16 v4 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 256) = v4;
  uint64_t v5 = (void *)(a1 + 264);
  long long v7 = (int *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 269) = *(void *)(a2 + 21);
  *(void *)(a1 + 264) = v6;
  if (a1 + 248 != a2)
  {
    sub_2483EFEC8((void *)(a1 + 280), *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
    __int16 v4 = *(_WORD *)(a1 + 256);
  }
  long long v8 = (_DWORD *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 56);
  long long v10 = *(_OWORD *)(a2 + 72);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 320) = v10;
  *(_OWORD *)(a1 + 336) = v11;
  *(_OWORD *)(a1 + 304) = v9;
  *(void *)(a1 + 368) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 408) = *(void *)(a2 + 160);
  *(void *)(a1 + 424) = *(void *)(a2 + 176);
  *(void *)(a1 + 440) = *(void *)(a2 + 192);
  *(_WORD *)(a1 + 456) = v4;
  *(void *)(a1 + 464) = *v5;
  *(void *)(a1 + 469) = *(void *)((char *)v5 + 5);
  sub_2483EFEC8((void *)(a1 + 480), *(char **)(a1 + 280), *(char **)(a1 + 288), *(void *)(a1 + 288) - *(void *)(a1 + 280));
  long long v12 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 520) = v12;
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a1 + 336);
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a1 + 352);
  *(void *)(a1 + 568) = *(void *)(a1 + 368);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a1 + 384);
  *(void *)(a1 + 608) = *(void *)(a1 + 408);
  *(void *)(a1 + 624) = *(void *)(a1 + 424);
  *(void *)(a1 + 640) = *(void *)(a1 + 440);
  *(unsigned char *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 8;
  *(unsigned char *)(a1 + 648) = sub_24840FAA0(a1 + 16, (uint64_t)v7);
  int v14 = *(unsigned __int8 *)(a1 + 240);
  long long v15 = *(_OWORD *)(a1 + 204);
  long long v16 = *(_OWORD *)(a1 + 220);
  long long v73 = v15;
  long long v74 = v16;
  int v75 = *(_DWORD *)(a1 + 236);
  float32x4_t v17 = (uint64_t *)(a1 + 852);
  *(void *)(a1 + 852) = 0x3F3717593E59B3D0;
  *(_DWORD *)(a1 + 860) = 1033100696;
  if (*(_DWORD *)(a2 + 20) == 1 && *(_DWORD *)(a2 + 16) == 1) {
    goto LABEL_5;
  }
  if (*v8 != 1)
  {
    uint64_t v25 = sub_2483F0A38(0);
    int v26 = *((_DWORD *)v25 + 5);
    if (v26 > 8)
    {
      if (v26 == 9)
      {
        float64x2_t v68 = (float64x2_t)xmmword_2484DCA90;
        long long v66 = xmmword_2484DCAA0;
        long long v27 = xmmword_2484DCAB0;
      }
      else
      {
        float64x2_t v68 = (float64x2_t)xmmword_2484DCA60;
        long long v66 = xmmword_2484DCA70;
        long long v27 = xmmword_2484DCA80;
      }
    }
    else
    {
      if (v26 != 1)
      {
        uint64_t v28 = *(void *)(v25 + 84);
        v29.i64[0] = (int)v28;
        v29.i64[1] = SHIDWORD(v28);
        float64x2_t v30 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
        float64x2_t v31 = vmulq_f64(vcvtq_f64_s64(v29), v30);
        uint64_t v32 = *(void *)(v25 + 92);
        v29.i64[0] = (int)v32;
        v29.i64[1] = SHIDWORD(v32);
        float64x2_t v64 = vmulq_f64(vcvtq_f64_s64(v29), v30);
        long long v66 = (__int128)v31;
        uint64_t v33 = *(void *)(v25 + 100);
        v29.i64[0] = (int)v33;
        v29.i64[1] = SHIDWORD(v33);
        float64x2_t v68 = vmulq_f64(vcvtq_f64_s64(v29), v30);
LABEL_30:
        double v34 = sub_2483F04FC((int *)v25 + 4);
        float v35 = *(double *)&v66;
        float v36 = *((double *)&v66 + 1);
        float v37 = v64.f64[0];
        float v38 = v64.f64[1];
        float v39 = v68.f64[0];
        float v40 = v68.f64[1];
        float v41 = v34;
        float v43 = v42;
        if (!sub_24840FB08((uint64_t)v82, v35, v36, v37, v38, v39, v40, v41, v43)
          && !sub_24840FCC4((uint64_t)&v76, v41, v43))
        {
          sub_2483EF4CC((uint64_t)&v76, (int *)v82, (uint64_t)v72);
        }
        int v44 = *(_DWORD *)(a2 + 20);
        if (v44 > 8)
        {
          if (v44 == 9)
          {
            float64x2_t v69 = (float64x2_t)xmmword_2484DCA90;
            long long v67 = xmmword_2484DCAA0;
            long long v45 = xmmword_2484DCAB0;
          }
          else
          {
            float64x2_t v69 = (float64x2_t)xmmword_2484DCA60;
            long long v67 = xmmword_2484DCA70;
            long long v45 = xmmword_2484DCA80;
          }
        }
        else
        {
          if (v44 != 1)
          {
            uint64_t v46 = *(void *)(a2 + 84);
            v47.i64[0] = (int)v46;
            v47.i64[1] = SHIDWORD(v46);
            float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
            float64x2_t v49 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            uint64_t v50 = *(void *)(a2 + 92);
            v47.i64[0] = (int)v50;
            v47.i64[1] = SHIDWORD(v50);
            float64x2_t v65 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            long long v67 = (__int128)v49;
            uint64_t v51 = *(void *)(a2 + 100);
            v47.i64[0] = (int)v51;
            v47.i64[1] = SHIDWORD(v51);
            float64x2_t v69 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            goto LABEL_41;
          }
          float64x2_t v69 = (float64x2_t)xmmword_2484DCA30;
          long long v67 = xmmword_2484DCA40;
          long long v45 = xmmword_2484DCA50;
        }
        float64x2_t v65 = (float64x2_t)v45;
LABEL_41:
        double v52 = sub_2483F04FC(v7);
        float v53 = *(double *)&v67;
        float v54 = *((double *)&v67 + 1);
        float v55 = v65.f64[0];
        float v56 = v65.f64[1];
        float v57 = v69.f64[0];
        float v58 = v69.f64[1];
        float v59 = v52;
        float v61 = v60;
        if (sub_24840FB08((uint64_t)v82, v53, v54, v55, v56, v57, v58, v59, v61)) {
          return 1;
        }
        *float32x4_t v17 = *(void *)&v82[12];
        *(_DWORD *)(a1 + 860) = *(_DWORD *)&v82[20];
        if (!*(unsigned char *)(a1 + 241)) {
          goto LABEL_5;
        }
        float v62 = sub_2483F04FC(v7);
        *(float *)&double v63 = v63;
        if (sub_24840FCC4((uint64_t)&v76, v62, *(float *)&v63)) {
          return 1;
        }
        sub_2483EF4CC((uint64_t)&v76, (int *)v82, (uint64_t)v71);
        if (sub_2483F0378(v71)) {
          return 1;
        }
        sub_2483EF4CC((uint64_t)v71, v72, (uint64_t)v70);
        sub_2483EF4CC((uint64_t)v70, (int *)(a1 + 204), (uint64_t)&v73);
        int v14 = 0;
LABEL_5:
        BOOL v18 = v14 != 0;
        if (*v8 != 1) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      float64x2_t v68 = (float64x2_t)xmmword_2484DCA30;
      long long v66 = xmmword_2484DCA40;
      long long v27 = xmmword_2484DCA50;
    }
    float64x2_t v64 = (float64x2_t)v27;
    goto LABEL_30;
  }
  BOOL v18 = v14 != 0;
LABEL_9:
  *(_OWORD *)uint64_t v82 = v73;
  *(_OWORD *)&v82[16] = v74;
  int v83 = v75;
  uint64_t v76 = *v17;
  int v19 = *(_DWORD *)(a1 + 860);
  uint64_t v78 = v76;
  int v77 = v19;
  int v79 = v19;
  uint64_t v80 = v76;
  int v81 = v19;
  sub_2483EF4CC((uint64_t)&v76, (int *)v82, (uint64_t)&v73);
LABEL_10:
  if (*(unsigned char *)(a1 + 241))
  {
    uint64_t v20 = 0;
    float v21 = *(float *)(a1 + 200);
    do
    {
      *(float *)v13.i32 = (float)(255.0 / v21) * *((float *)&v73 + v20);
      int32x4_t v13 = vdupq_lane_s32(*(int32x2_t *)v13.i8, 0);
      *(int32x4_t *)(a1 + 652 + 16 * v20++) = v13;
    }
    while (v20 != 9);
    *(double *)&long long v15 = fabs(v21 + -255.0);
    BOOL v22 = *(double *)&v15 <= 0.100000001 && v18;
    *(unsigned char *)(a1 + 844) = v22;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    LODWORD(v15) = *(_DWORD *)(a2 + 68);
    *(double *)&long long v15 = (double)(unint64_t)v15 * 0.0000001;
  }
  else
  {
    *(void *)&long long v15 = 0x3FD89D89E0000000;
    if (*(_DWORD *)(a2 + 72) != 17) {
      *(double *)&long long v15 = 1.0;
    }
  }
  uint64_t result = 0;
  float v24 = *(double *)&v15;
  *(float *)(a1 + 848) = v24;
  return result;
}

BOOL sub_24840FAA0(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_24840FEF4((_DWORD *)a1, (_DWORD *)a2);
  if (result)
  {
    BOOL result = 0;
    if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
    {
      if (*(unsigned char *)(a1 + 48))
      {
        int v5 = *(_DWORD *)(a1 + 52);
        int v6 = *(_DWORD *)(a2 + 52);
      }
      else
      {
        int v5 = *(_DWORD *)(a1 + 56);
        int v6 = *(_DWORD *)(a2 + 56);
      }
      if (v5 == v6) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_24840FB08(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t result = 1;
  if (a9 <= 1.0 && a8 >= 0.0 && a8 <= 1.0 && a9 > 0.0)
  {
    *(void *)&long long v31 = __PAIR64__(LODWORD(a4), LODWORD(a2));
    *((void *)&v31 + 1) = __PAIR64__(LODWORD(a3), LODWORD(a6));
    *(void *)&long long v32 = __PAIR64__(LODWORD(a7), LODWORD(a5));
    *((float *)&v32 + 2) = (float)(1.0 - a2) - a3;
    *((float *)&v32 + 3) = (float)(1.0 - a4) - a5;
    float v33 = (float)(1.0 - a6) - a7;
    v29[0] = v31;
    v29[1] = v32;
    float v30 = v33;
    uint64_t result = sub_2483F0378((float *)v29);
    if (!result)
    {
      v28[0] = a8 / a9;
      v28[1] = 1.0;
      v28[2] = (float)((float)(1.0 - a8) - a9) / a9;
      if (COERCE_INT(fabs(a8 / a9)) > 2139095039)
      {
        return 1;
      }
      else
      {
        int v14 = fabs((float)((float)(1.0 - a8) - a9) / a9);
        uint64_t result = v14 > 2139095039;
        if (v14 <= 2139095039)
        {
          uint64_t v15 = 0;
          long long v16 = v29;
          do
          {
            uint64_t v17 = 0;
            double v18 = 0.0;
            do
            {
              double v18 = v18 + (float)(*(float *)((char *)v16 + v17 * 4) * v28[v17]);
              ++v17;
            }
            while (v17 != 3);
            float v19 = v18;
            *(float *)&v27[v15++] = v19;
            long long v16 = (_OWORD *)((char *)v16 + 12);
          }
          while (v15 != 3);
          int v20 = v27[0];
          uint64_t v21 = 0;
          int v22 = 0;
          int v23 = v27[1];
          uint64_t v24 = 0;
          int v25 = 0;
          int v26 = v27[2];
          sub_2483EF4CC((uint64_t)&v31, &v20, a1);
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_24840FCC4(uint64_t a1, float a2, float a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  BOOL result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    float v6 = a2 / a3;
    v32[1] = 1.0;
    float v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      BOOL result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        uint64_t v8 = 0;
        long long v9 = (char *)dword_24854CCE0;
        do
        {
          uint64_t v10 = 0;
          double v11 = 0.0;
          do
          {
            double v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          float v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        uint64_t v13 = 0;
        int v14 = (char *)dword_24854CCE0;
        do
        {
          uint64_t v15 = 0;
          double v16 = 0.0;
          do
          {
            double v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_248552D10[v15]);
            ++v15;
          }
          while (v15 != 3);
          float v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        BOOL result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          float v19 = v26 / v29;
          uint64_t v20 = 0;
          int v21 = 0;
          float v22 = v27 / v30;
          uint64_t v23 = 0;
          int v24 = 0;
          float v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2483EF4CC((uint64_t)&v19, dword_24854CCE0, (uint64_t)v18);
            sub_2483EF4CC((uint64_t)&unk_24854CD04, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_24840FEF4(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[10];
  BOOL result = 0;
  if (v2 == a2[10] && *a1 == *a2 && (*a1 != 2 || a1[15] == a2[15] && a1[16] == a2[16]))
  {
    if ((v2 - 3) > 0xFFFFFFFD) {
      return 1;
    }
    int v3 = a1[1];
    if (v3 == a2[1]
      && (v3 != 2
       || a1[17] == a2[17]
       && a1[18] == a2[18]
       && a1[19] == a2[19]
       && a1[20] == a2[20]
       && a1[21] == a2[21]
       && a1[22] == a2[22]))
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_24840FFD0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56) == 2
    && (!*(_DWORD *)(a1 + 304) && *(_DWORD *)(a1 + 268) != 1 || !*(unsigned char *)(a1 + 312) && *(_DWORD *)(a1 + 320) == 16)
    || !*(unsigned char *)(a1 + 241) && !sub_24840F2C8(a2))
  {
    return 1;
  }

  return sub_24840F4A0(a1, a2);
}

uint64_t JxlDecoderVersion()
{
  return 10002;
}

uint64_t JxlSignatureCheck(unsigned __int8 *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*a1)
  {
    if (*a1 == 255)
    {
      if (a2 >= 2)
      {
        if (a1[1] == 10) {
          return 2;
        }
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (a2 < 0xC) {
      return 0;
    }
    if (!a1[1]
      && !a1[2]
      && a1[3] == 12
      && a1[4] == 74
      && a1[5] == 88
      && a1[6] == 76
      && a1[7] == 32
      && a1[8] == 13
      && a1[9] == 10
      && a1[10] == 135
      && a1[11] == 10)
    {
      return 3;
    }
  }
  return 1;
}

void JxlDecoderRewind_0(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  sub_2484106F0((size_t *)(a1 + 840), 0);
  *(void *)(a1 + 840) = 0;
  *(_WORD *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 3552) = 0;
  *(_WORD *)(a1 + 963) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 946) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 1012);
  *(void *)(a1 + 1016) = 98;
  *(unsigned char *)(a1 + 1024) = 0;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1048) = 8;
  *(unsigned char *)(a1 + 1056) = 0;
  *(void *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1152) = 0;
  *(void *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1176) = *(void *)(a1 + 1168);
  *(_OWORD *)(a1 + 3592) = 0u;
  *(unsigned char *)(a1 + 3608) = 0;
  sub_2484107D0((uint64_t *)(a1 + 3304), 0);
  sub_248410820((uint64_t *)(a1 + 3312), 0);
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3336) = *(void *)(a1 + 3328);
  int v2 = *(uint64_t **)(a1 + 3296);
  *(void *)(a1 + 3296) = 0;
  if (v2) {
    sub_248410870(v2);
  }
  bzero(&v17, 0x690uLL);
  sub_2484211E4((uint64_t)&v17);
  sub_24841D81C(&v48);
  sub_2484210E8((uint64_t)v51);
  *(unsigned char *)(a1 + 1200) = v18;
  *(void *)(a1 + 1216) = v19;
  *(_DWORD *)(a1 + 1224) = v20;
  *(_WORD *)(a1 + 1232) = v21;
  *(_WORD *)(a1 + 1248) = v23;
  *(void *)(a1 + 1256) = v24[0];
  *(void *)(a1 + 1261) = *(void *)((char *)v24 + 5);
  int v3 = (void *)(a1 + 1272);
  __int16 v4 = *(void **)(a1 + 1272);
  if (v4)
  {
    *(void *)(a1 + 1280) = v4;
    operator delete(v4);
    *int v3 = 0;
    *(void *)(a1 + 1280) = 0;
    *(void *)(a1 + 1288) = 0;
  }
  *(_OWORD *)int v3 = *(_OWORD *)__p;
  *(void *)(a1 + 1288) = v26;
  __p[1] = 0;
  uint64_t v26 = 0;
  __p[0] = 0;
  *(_OWORD *)(a1 + 1296) = v27;
  *(_OWORD *)(a1 + 1312) = v28;
  *(_OWORD *)(a1 + 1328) = v29;
  *(_DWORD *)(a1 + 1344) = v30;
  uint64_t v5 = v33;
  *(void *)(a1 + 1360) = v31;
  *(_OWORD *)(a1 + 1376) = v32;
  *(void *)(a1 + 1400) = v5;
  uint64_t v6 = v35;
  *(void *)(a1 + 1416) = v34;
  *(void *)(a1 + 1432) = v6;
  int v7 = v36[0];
  *(_DWORD *)(a1 + 1443) = *(_DWORD *)((char *)v36 + 3);
  *(_DWORD *)(a1 + 1440) = v7;
  long long v8 = v37;
  *(void *)(a1 + 1472) = v38;
  *(_OWORD *)(a1 + 1456) = v8;
  long long v9 = v39;
  *(_DWORD *)(a1 + 1504) = v40;
  *(_DWORD *)(a1 + 1512) = v41;
  *(_OWORD *)(a1 + 1488) = v9;
  sub_248410A14((void **)(a1 + 1520));
  *(_OWORD *)(a1 + 1520) = v42;
  uint64_t v10 = v45;
  *(void *)(a1 + 1536) = v43;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  *(_OWORD *)(a1 + 1552) = v44;
  *(void *)(a1 + 1568) = v10;
  uint64_t v11 = v46[2];
  *(void *)(a1 + 1584) = v46[0];
  *(void *)(a1 + 1589) = *(void *)((char *)v46 + 5);
  *(unsigned char *)(a1 + 1608) = v47;
  *(void *)(a1 + 1600) = v11;
  *(_OWORD *)(a1 + 1624) = v49;
  *(void *)(a1 + 1640) = v50;
  *(_WORD *)(a1 + 1656) = v51[4];
  long long v12 = v55;
  *(_OWORD *)(a1 + 1704) = v54;
  *(_OWORD *)(a1 + 1720) = v12;
  *(_DWORD *)(a1 + 1736) = v56;
  long long v13 = v53;
  *(_OWORD *)(a1 + 1672) = v52;
  *(_OWORD *)(a1 + 1688) = v13;
  memcpy((void *)(a1 + 1744), v57, 0x464uLL);
  float v17 = &unk_26FC65EF0;
  float v58 = (void **)&v42;
  sub_248410954(&v58);
  float v22 = &unk_26FC65EC8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2880) = *(unsigned char *)(a1 + 1200);
  *(void *)(a1 + 2896) = *(void *)(a1 + 1216);
  *(_DWORD *)(a1 + 2904) = *(_DWORD *)(a1 + 1224);
  *(_WORD *)(a1 + 2912) = *(_WORD *)(a1 + 1232);
  *(_WORD *)(a1 + 2928) = *(_WORD *)(a1 + 1248);
  *(void *)(a1 + 2936) = *(void *)(a1 + 1256);
  *(void *)(a1 + 2941) = *(void *)(a1 + 1261);
  sub_2483EFEC8((void *)(a1 + 2952), *(char **)(a1 + 1272), *(char **)(a1 + 1280), *(void *)(a1 + 1280) - *(void *)(a1 + 1272));
  long long v14 = *(_OWORD *)(a1 + 1312);
  *(_OWORD *)(a1 + 2976) = *(_OWORD *)(a1 + 1296);
  *(_OWORD *)(a1 + 2992) = v14;
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a1 + 1328);
  *(_DWORD *)(a1 + 3024) = *(_DWORD *)(a1 + 1344);
  *(void *)(a1 + 3040) = *(void *)(a1 + 1360);
  *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a1 + 1376);
  *(void *)(a1 + 3080) = *(void *)(a1 + 1400);
  *(void *)(a1 + 3096) = *(void *)(a1 + 1416);
  *(void *)(a1 + 3112) = *(void *)(a1 + 1432);
  *(_DWORD *)(a1 + 3120) = *(_DWORD *)(a1 + 1440);
  *(_DWORD *)(a1 + 3123) = *(_DWORD *)(a1 + 1443);
  *(_OWORD *)(a1 + 3136) = *(_OWORD *)(a1 + 1456);
  *(void *)(a1 + 3152) = *(void *)(a1 + 1472);
  *(_OWORD *)(a1 + 3168) = *(_OWORD *)(a1 + 1488);
  uint64_t v15 = *(void *)(a1 + 1520);
  uint64_t v16 = *(void *)(a1 + 1528);
  *(_DWORD *)(a1 + 3184) = *(_DWORD *)(a1 + 1504);
  *(_DWORD *)(a1 + 3192) = *(_DWORD *)(a1 + 1512);
  sub_248410AB4(a1 + 3200, v15, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 5));
  *(_OWORD *)(a1 + 3232) = *(_OWORD *)(a1 + 1552);
  *(void *)(a1 + 3248) = *(void *)(a1 + 1568);
  *(void *)(a1 + 3264) = *(void *)(a1 + 1584);
  *(void *)(a1 + 3269) = *(void *)(a1 + 1589);
  *(void *)(a1 + 3280) = *(void *)(a1 + 1600);
  *(unsigned char *)(a1 + 3288) = *(unsigned char *)(a1 + 1608);
  operator new();
}

void sub_248410660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  MEMORY[0x24C579F90](v26, 0x10F3C403E7815E9);
  _Unwind_Resume(a1);
}

void sub_2484106F0(size_t *a1, unint64_t a2)
{
  size_t v2 = a1[1];
  if (v2 < a2)
  {
    unint64_t v4 = (3 * v2) >> 1;
    if (v4 <= a2) {
      unint64_t v4 = a2;
    }
    if (v4 <= 0x40) {
      uint64_t v5 = 64;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = (unsigned char *)sub_2484D7BCC(v5 + 8, (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
    if (v6)
    {
      int v7 = v6;
      long long v8 = (const void *)a1[2];
      long long v9 = v6;
      if (v8)
      {
        memcpy(v6, v8, *a1);
        long long v9 = &v7[*a1];
      }
      *long long v9 = 0;
      size_t v10 = a1[2];
      a1[1] = v5;
      a1[2] = (size_t)v7;
      if (v10)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
        uint64_t v11 = *(void **)(v10 - 32);
        free(v11);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

uint64_t sub_2484107D0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_248410F7C(result);
    JUMPOUT(0x24C579F90);
  }
  return result;
}

uint64_t sub_248410820(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2483FD974(result);
    JUMPOUT(0x24C579F90);
  }
  return result;
}

void sub_248410870(uint64_t *a1)
{
  uint64_t v5 = (void **)(a1 + 52);
  sub_2483F77FC(&v5);
  a1[27] = (uint64_t)&unk_26FC65EC8;
  size_t v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = (uint64_t)v2;
    operator delete(v2);
  }
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC(&a1[i]);
  if (*((char *)a1 + 87) < 0) {
    operator delete((void *)a1[8]);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x24C579F90);
}

void sub_248410954(void ***a1)
{
  unsigned int v1 = *a1;
  size_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 96;
      int v7 = v4 - 96;
      long long v8 = v4 - 96;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 96;
        (*v9)(v7);
        v6 -= 96;
        BOOL v10 = v7 == v2;
        int v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_248410A14(void **a1)
{
  unsigned int v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 96;
      uint64_t v6 = v3 - 96;
      int v7 = v3 - 96;
      do
      {
        long long v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v5 -= 96;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_248410AB4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v7 = (void *)result;
  long long v8 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 16) - *(void *)result) >> 5) < a4)
  {
    sub_248410A14((void **)result);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_2483E92E8();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(v7[2] - *v7) >> 5);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[2] - *v7) >> 5) >= 0x155555555555555) {
      unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    sub_248410E48(v7, v10);
    uint64_t result = sub_248410CFC(a2, a3, v7[1]);
LABEL_15:
    v7[1] = result;
    return result;
  }
  uint64_t v11 = *(unsigned char **)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v8) >> 5) < a4)
  {
    uint64_t v12 = a2 + 32 * ((v11 - v8) >> 5);
    if (v11 != v8)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 32 * ((v11 - v8) >> 5);
      do
      {
        uint64_t v15 = &v8[v13];
        *((void *)v15 + 1) = *(void *)(a2 + v13 + 8);
        uint64_t v16 = *(void *)(a2 + v13 + 24);
        *((_DWORD *)v15 + 8) = *(_DWORD *)(a2 + v13 + 32);
        *((void *)v15 + 3) = v16;
        *((_DWORD *)v15 + 10) = *(_DWORD *)(a2 + v13 + 40);
        std::string::operator=((std::string *)&v8[v13 + 48], (const std::string *)(a2 + v13 + 48));
        uint64_t v17 = *(void *)(a2 + v13 + 88);
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + v13 + 72);
        *((void *)v15 + 11) = v17;
        v13 += 96;
      }
      while (v14 != v13);
      long long v8 = (char *)v7[1];
    }
    uint64_t result = sub_248410CFC(v12, a3, (uint64_t)v8);
    goto LABEL_15;
  }
  if (a2 != a3)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v8[v18];
      *((void *)v19 + 1) = *(void *)(a2 + v18 + 8);
      uint64_t v20 = *(void *)(a2 + v18 + 24);
      *((_DWORD *)v19 + 8) = *(_DWORD *)(a2 + v18 + 32);
      *((void *)v19 + 3) = v20;
      *((_DWORD *)v19 + 10) = *(_DWORD *)(a2 + v18 + 40);
      uint64_t result = (uint64_t)std::string::operator=((std::string *)&v8[v18 + 48], (const std::string *)(a2 + v18 + 48));
      uint64_t v21 = *(void *)(a2 + v18 + 88);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + v18 + 72);
      *((void *)v19 + 11) = v21;
      v18 += 96;
    }
    while (a2 + v18 != a3);
    v8 += v18;
    uint64_t v11 = (unsigned char *)v7[1];
  }
  if (v11 != v8)
  {
    float v22 = v11 - 96;
    __int16 v23 = v11 - 96;
    int v24 = (uint64_t (***)(char *))(v11 - 96);
    do
    {
      float v25 = *v24;
      v24 -= 12;
      uint64_t result = (*v25)(v23);
      v22 -= 96;
      BOOL v26 = v23 == v8;
      __int16 v23 = (char *)v24;
    }
    while (!v26);
  }
  v7[1] = v8;
  return result;
}

void sub_248410CF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_248410CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)uint64_t v7 = &unk_26FC66090;
      *(void *)(v7 + 8) = *(void *)(a1 + v6 + 8);
      *(void *)(v7 + 16) = &unk_26FC668F8;
      uint64_t v8 = *(void *)(a1 + v6 + 24);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + v6 + 32);
      *(void *)(v7 + 24) = v8;
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a1 + v6 + 40);
      unint64_t v9 = (unsigned char *)(a3 + v6 + 48);
      unint64_t v10 = (void **)(a1 + v6 + 48);
      if (*(char *)(a1 + v6 + 71) < 0)
      {
        sub_248410EE0(v9, *v10, *(void *)(a1 + v6 + 56));
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        *(void *)(a3 + v6 + 64) = *(void *)(a1 + v6 + 64);
        *(_OWORD *)unint64_t v9 = v11;
      }
      uint64_t v12 = a3 + v6;
      long long v13 = *(_OWORD *)(a1 + v6 + 72);
      *(void *)(v12 + 88) = *(void *)(a1 + v6 + 88);
      *(_OWORD *)(v12 + 72) = v13;
      v6 += 96;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char *sub_248410E48(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_2483E92E8();
  }
  uint64_t result = (char *)sub_248410E98(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *sub_248410E98(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    sub_2483E9338();
  }
  return operator new(96 * a1);
}

void *sub_248410EE0(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2483F04E4();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_248410F7C(uint64_t a1)
{
  *(void *)(a1 + 5392) = &unk_26FC65EC8;
  uint64_t v2 = *(void **)(a1 + 5424);
  if (v2)
  {
    *(void *)(a1 + 5432) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 5192) = &unk_26FC65EC8;
  int v3 = *(void **)(a1 + 5224);
  if (v3)
  {
    *(void *)(a1 + 5232) = v3;
    operator delete(v3);
  }
  *(void *)(a1 + 4944) = &unk_26FC65EC8;
  uint64_t v4 = *(void **)(a1 + 4976);
  if (v4)
  {
    *(void *)(a1 + 4984) = v4;
    operator delete(v4);
  }
  long long v13 = (void **)(a1 + 4912);
  sub_2483F77FC(&v13);
  *(void *)(a1 + 4712) = &unk_26FC65EC8;
  uint64_t v5 = *(void **)(a1 + 4744);
  if (v5)
  {
    *(void *)(a1 + 4752) = v5;
    operator delete(v5);
  }
  for (uint64_t i = 0; i != -120; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + 4696 + i));
  if (*(char *)(a1 + 4583) < 0) {
    operator delete(*(void **)(a1 + 4560));
  }
  uint64_t v7 = *(void *)(a1 + 4496);
  *(void *)(a1 + 4496) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 4488);
  *(void *)(a1 + 4488) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 4480);
  *(void *)(a1 + 4480) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t v10 = *(void **)(a1 + 4424);
  if (v10)
  {
    *(void *)(a1 + 4432) = v10;
    operator delete(v10);
  }
  sub_2483E8DDC((uint64_t *)(a1 + 4304));
  long long v13 = (void **)(a1 + 4248);
  sub_2483F87EC(&v13);
  long long v13 = (void **)(a1 + 4224);
  sub_2484111DC(&v13);
  uint64_t v11 = *(void *)(a1 + 4216);
  *(void *)(a1 + 4216) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  return sub_248411260(a1);
}

void sub_2484111DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        sub_2484022B8(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_248411260(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 2376);
  uint64_t v3 = a1 + 4200;
  uint64_t v4 = a1 + 3944;
  do
  {
    float v22 = (void **)(v3 - 40);
    sub_2483F77FC(&v22);
    *(void *)(v3 - 240) = &unk_26FC65EC8;
    uint64_t v5 = *(void **)(v3 - 208);
    if (v5)
    {
      *(void *)(v3 - 200) = v5;
      operator delete(v5);
    }
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(v3 - 456);
    do
    {
      sub_2483E8DDC((uint64_t *)(v4 + v6));
      v6 -= 40;
    }
    while (v6 != -120);
    if (*(char *)(v3 - 369) < 0) {
      operator delete(*(void **)(v3 - 392));
    }
    uint64_t v8 = *v7;
    *uint64_t v7 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    v4 -= 456;
    v3 -= 456;
  }
  while (v7 != v2);
  uint64_t v9 = a1 + 2360;
  do
  {
    uint64_t v10 = 0;
    v2 -= 15;
    do
    {
      sub_2483E8DDC((uint64_t *)(v9 + v10));
      v10 -= 40;
    }
    while (v10 != -120);
    v9 -= 120;
  }
  while (v2 != (uint64_t *)(a1 + 1896));
  uint64_t v11 = *(void **)(a1 + 1856);
  if (v11)
  {
    *(void *)(a1 + 1864) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 1832);
  if (v12)
  {
    *(void *)(a1 + 1840) = v12;
    operator delete(v12);
  }
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    uint64_t v14 = *(void **)(a1 + i + 1808);
    if (v14)
    {
      *(void *)(a1 + i + 1816) = v14;
      operator delete(v14);
    }
  }
  for (uint64_t j = 1736; j != 1616; j -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + j));
  sub_2483E8DDC((uint64_t *)(a1 + 1616));
  uint64_t v16 = *(void **)(a1 + 1568);
  if (v16)
  {
    *(void *)(a1 + 1576) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 1536);
  if (v17)
  {
    *(void *)(a1 + 1544) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1512);
  if (v18)
  {
    *(void *)(a1 + 1520) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 1488);
  if (v19)
  {
    *(void *)(a1 + 1496) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 1464);
  if (v20)
  {
    *(void *)(a1 + 1472) = v20;
    operator delete(v20);
  }
  float v22 = (void **)(a1 + 1440);
  sub_24841149C(&v22);
  sub_2484114F0((void *)(a1 + 1256));
  sub_2483E8DDC((uint64_t *)(a1 + 1168));
  sub_2483E8DDC((uint64_t *)(a1 + 1128));
  sub_2483E8DDC((uint64_t *)(a1 + 1088));
  sub_2483E8DDC((uint64_t *)(a1 + 1048));
  float v22 = (void **)(a1 + 928);
  sub_248403688(&v22);
  sub_2483FED94((uint64_t *)(a1 + 216));
  sub_2483E8DDC((uint64_t *)(a1 + 176));
  return a1;
}

void sub_24841149C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_248411584((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_2484114F0(void *a1)
{
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_248411584(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 536;
    do
    {
      uint64_t v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + 8) = v5;
        operator delete(v5);
      }
      BOOL v6 = v4 == v3;
      v4 -= 536;
    }
    while (!v6);
  }
  a1[1] = v3;
}

void JxlDecoderReset(uint64_t a1)
{
}

uint64_t JxlDecoderCreate(uint64_t *a1)
{
  if (!a1)
  {
    uint64_t v4 = sub_248421D40;
    uint64_t v5 = 0;
LABEL_9:
    uint64_t v2 = sub_248421D50;
    goto LABEL_10;
  }
  uint64_t v1 = a1[1];
  uint64_t v2 = (void (*)(int, void *))a1[2];
  if ((v1 == 0) != (v2 == 0)) {
    return 0;
  }
  uint64_t v5 = *a1;
  if (v1) {
    uint64_t v4 = (void *(*)(int, size_t))a1[1];
  }
  else {
    uint64_t v4 = sub_248421D40;
  }
  if (!v2) {
    goto LABEL_9;
  }
LABEL_10:
  BOOL v6 = v4(v5, 3640);
  uint64_t v3 = (uint64_t)v6;
  if (v6)
  {
    bzero(v6, 0xE38uLL);
    sub_2483F26D4(v3 + 192);
    *(void *)(v3 + 240) = 0;
    *(_DWORD *)(v3 + 268) = 1245184;
    *(void *)(v3 + 280) = 0;
    *(_DWORD *)(v3 + 288) = 0;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_DWORD *)(v3 + 328) = 0;
    *(_OWORD *)(v3 + 348) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 332) = xmmword_2484DCA20;
    *(_OWORD *)(v3 + 508) = 0u;
    *(_OWORD *)(v3 + 524) = 0u;
    *(_OWORD *)(v3 + 540) = 0u;
    *(_OWORD *)(v3 + 556) = 0u;
    *(_OWORD *)(v3 + 572) = 0u;
    *(_OWORD *)(v3 + 588) = 0u;
    *(_OWORD *)(v3 + 364) = 0u;
    *(_OWORD *)(v3 + 380) = 0u;
    *(_OWORD *)(v3 + 396) = 0u;
    *(_OWORD *)(v3 + 412) = 0u;
    *(_OWORD *)(v3 + 428) = 0u;
    *(_OWORD *)(v3 + 444) = 0u;
    *(_OWORD *)(v3 + 460) = 0u;
    *(_OWORD *)(v3 + 476) = 0u;
    *(_OWORD *)(v3 + 492) = 0u;
    *(_OWORD *)(v3 + 604) = 0u;
    *(_OWORD *)(v3 + 620) = 0u;
    *(_OWORD *)(v3 + 636) = 0u;
    *(_OWORD *)(v3 + 652) = 0u;
    *(_OWORD *)(v3 + 668) = 0u;
    *(_OWORD *)(v3 + 684) = 0u;
    *(_OWORD *)(v3 + 700) = 0u;
    *(_OWORD *)(v3 + 716) = 0u;
    *(_OWORD *)(v3 + 732) = 0u;
    *(_OWORD *)(v3 + 748) = 0u;
    *(_OWORD *)(v3 + 764) = 0u;
    *(_OWORD *)(v3 + 780) = 0u;
    *(_OWORD *)(v3 + 796) = 0u;
    *(_OWORD *)(v3 + 812) = 0u;
    *(void *)(v3 + 828) = 0;
    *(void *)(v3 + 856) = 0;
    *(_OWORD *)(v3 + 840) = 0u;
    *(void *)(v3 + 864) = 0x3E800000001;
    *(void *)(v3 + 872) = 0;
    *(_OWORD *)(v3 + 880) = 0u;
    *(_DWORD *)(v3 + 1040) = 1;
    *(void *)(v3 + 1168) = 0;
    *(_OWORD *)(v3 + 1176) = 0u;
    sub_2484211E4(v3 + 1192);
    sub_24841D81C((void *)(v3 + 1616));
    sub_2484210E8(v3 + 1648);
    sub_2484211E4(v3 + 2872);
    *(void *)(v3 + 3312) = 0;
    *(_OWORD *)(v3 + 3296) = 0u;
    *(_OWORD *)(v3 + 3328) = 0u;
    *(_OWORD *)(v3 + 3344) = 0u;
    *(_OWORD *)(v3 + 3408) = 0u;
    *(_OWORD *)(v3 + 3424) = 0u;
    *(_OWORD *)(v3 + 3440) = 0u;
    *(_OWORD *)(v3 + 3456) = 0u;
    *(_OWORD *)(v3 + 3472) = 0u;
    *(_OWORD *)(v3 + 3488) = 0u;
    *(_OWORD *)(v3 + 3504) = 0u;
    *(void *)(v3 + 3520) = 0;
    *(void *)(v3 + 3616) = 0;
    *(_OWORD *)(v3 + 3624) = 0u;
    *(void *)uint64_t v3 = v5;
    *(void *)(v3 + 8) = v4;
    *(void *)(v3 + 16) = v2;
    JxlDecoderReset(v3);
  }
  return v3;
}

void sub_248411870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 1192) = &unk_26FC65EF0;
  a10 = (void **)(v10 + 1520);
  sub_248410954(&a10);
  *(void *)(v10 + 1240) = &unk_26FC65EC8;
  uint64_t v15 = *(void **)(v10 + 1272);
  if (v15)
  {
    *(void *)(v10 + 1280) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void **)(v10 + 872);
  uint64_t v17 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 1176) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v10 + 880) = v18;
    operator delete(v18);
  }
  sub_2483E8DDC((uint64_t *)(v10 + 856));
  sub_2483E8DDC(v12);
  uint64_t v19 = *(void **)(v10 + 160);
  if (v19)
  {
    *(void *)(v10 + 168) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v10 + 136);
  if (v20)
  {
    *(void *)(v10 + 144) = v20;
    operator delete(v20);
  }
  a10 = (void **)(v10 + 112);
  sub_2483EA640(&a10);
  sub_2483E8DDC(v11);
  uint64_t v21 = *(void **)(v10 + 80);
  if (v21)
  {
    *(void *)(v10 + 88) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void *)(v10 + 24);
  *(void *)(v10 + 24) = 0;
  if (v22) {
    MEMORY[0x24C579F90](v22, 0xC0C40D1025EB5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24841198C(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65EF0;
  uint64_t v4 = (void **)(a1 + 328);
  sub_248410954(&v4);
  *(void *)(a1 + 48) = &unk_26FC65EC8;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_248411A14(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65EF0;
  uint64_t v4 = (void **)(a1 + 328);
  sub_248410954(&v4);
  *(void *)(a1 + 48) = &unk_26FC65EC8;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

void *JxlDecoderDestroy(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    uint64_t v20 = (uint64_t (*)(uint64_t, void *))result[2];
    uint64_t v3 = (void *)result[445];
    if (v3) {
      sub_2483E4150(v3);
    }
    uint64_t v4 = (void *)v1[438];
    if (v4)
    {
      v1[439] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v1[435];
    if (v5)
    {
      v1[436] = v5;
      operator delete(v5);
    }
    BOOL v6 = (void *)v1[432];
    if (v6)
    {
      v1[433] = v6;
      operator delete(v6);
    }
    uint64_t v7 = (void *)v1[429];
    if (v7)
    {
      v1[430] = v7;
      operator delete(v7);
    }
    uint64_t v8 = (void *)v1[426];
    if (v8)
    {
      v1[427] = v8;
      operator delete(v8);
    }
    uint64_t v9 = v1[419];
    v1[419] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = (void *)v1[416];
    if (v10)
    {
      v1[417] = v10;
      operator delete(v10);
    }
    sub_248410820(v1 + 414, 0);
    sub_2484107D0(v1 + 413, 0);
    uint64_t v11 = (uint64_t *)v1[412];
    v1[412] = 0;
    if (v11) {
      sub_248410870(v11);
    }
    v1[359] = &unk_26FC65EF0;
    uint64_t v21 = (void **)(v1 + 400);
    sub_248410954(&v21);
    v1[365] = &unk_26FC65EC8;
    uint64_t v12 = (void *)v1[369];
    if (v12)
    {
      v1[370] = v12;
      operator delete(v12);
    }
    v1[149] = &unk_26FC65EF0;
    uint64_t v21 = (void **)(v1 + 190);
    sub_248410954(&v21);
    v1[155] = &unk_26FC65EC8;
    long long v13 = (void *)v1[159];
    if (v13)
    {
      v1[160] = v13;
      operator delete(v13);
    }
    uint64_t v14 = (void *)v1[146];
    if (v14)
    {
      v1[147] = v14;
      operator delete(v14);
    }
    uint64_t v15 = (void *)v1[109];
    if (v15)
    {
      v1[110] = v15;
      operator delete(v15);
    }
    sub_2483E8DDC(v1 + 107);
    sub_2483E8DDC(v1 + 37);
    uint64_t v16 = (void *)v1[20];
    if (v16)
    {
      v1[21] = v16;
      operator delete(v16);
    }
    uint64_t v17 = (void *)v1[17];
    if (v17)
    {
      v1[18] = v17;
      operator delete(v17);
    }
    uint64_t v21 = (void **)(v1 + 14);
    sub_2483EA640(&v21);
    sub_2483E8DDC(v1 + 13);
    uint64_t v18 = (void *)v1[10];
    if (v18)
    {
      v1[11] = v18;
      operator delete(v18);
    }
    uint64_t v19 = v1[3];
    v1[3] = 0;
    if (v19) {
      MEMORY[0x24C579F90](v19, 0xC0C40D1025EB5);
    }
    return (void *)v20(v2, v1);
  }
  return result;
}

void JxlDecoderSkipFrames(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[422] + a2;
  a1[422] = v2;
  a1[436] = a1[435];
  unint64_t v3 = a1[425] + v2;
  uint64_t v4 = a1[432];
  if (v3 < (a1[433] - v4) >> 3)
  {
    unint64_t v5 = *(void *)(v4 + 8 * v3);
    uint64_t v6 = a1[430];
    uint64_t v7 = a1[429];
    if (v5 < (v6 - v7) >> 2)
    {
      unint64_t v81 = v5;
      uint64_t v8 = 0;
      uint64_t v9 = a1 + 435;
      uint64_t v86 = (uint64_t)(a1[427] - a1[426]) >> 2;
      memset(v87, 0, 192);
      do
      {
        sub_2483FEEE4((char **)v87 + 3 * v8, (v6 - v7) >> 2);
        uint64_t v6 = a1[430];
        uint64_t v7 = a1[429];
        if (v6 != v7)
        {
          uint64_t v10 = 0;
          unint64_t v11 = (v6 - v7) >> 2;
          uint64_t v12 = *((void *)v87 + 3 * v8);
          if (v11 <= 1) {
            unint64_t v11 = 1;
          }
          uint64_t v13 = v86;
          do
          {
            if ((*(_DWORD *)(v7 + 4 * v10) & (1 << v8)) != 0) {
              uint64_t v13 = v10;
            }
            *(void *)(v12 + 8 * v10++) = v13;
          }
          while (v11 != v10);
        }
        ++v8;
      }
      while (v8 != 8);
      unint64_t v14 = v81;
      if ((uint64_t)(v81 + 1) < 0) {
        sub_2483E92E8();
      }
      uint64_t v15 = operator new(v81 + 1);
      uint64_t v16 = a1;
      uint64_t v17 = v15;
      uint64_t v18 = 0;
      do
        v15[v18++] = 0;
      while (v81 + 1 != v18);
      unint64_t v79 = v81 + 1;
      uint64_t v80 = v9;
      uint64_t v84 = v15;
      uint64_t v19 = (char *)operator new(8uLL);
      uint64x2_t __p = 0;
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      *(void *)uint64_t v19 = v81;
      __int16 v23 = v19 + 8;
      v17[v81] = 1;
      int v24 = v19 + 8;
      do
      {
        uint64_t v25 = *(void *)(*((void *)v87 + 3 * v22) + 8 * v14);
        if (v25 != v86 && !v84[v25])
        {
          if (v24 >= v23)
          {
            uint64_t v27 = (v24 - v19) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              goto LABEL_123;
            }
            unint64_t v29 = v21;
            if ((v23 - v19) >> 2 > v28) {
              unint64_t v28 = (v23 - v19) >> 2;
            }
            if ((unint64_t)(v23 - v19) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30) {
              unint64_t v30 = (unint64_t)sub_2483F04AC(v30);
            }
            else {
              uint64_t v31 = 0;
            }
            long long v32 = (char *)(v30 + 8 * v27);
            *(void *)long long v32 = v25;
            BOOL v26 = v32 + 8;
            while (v24 != v19)
            {
              uint64_t v33 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v32 - 1) = v33;
              v32 -= 8;
            }
            __int16 v23 = (char *)(v30 + 8 * v31);
            if (v19)
            {
              unint64_t v34 = v30 + 8 * v31;
              operator delete(v19);
              __int16 v23 = (char *)v34;
            }
            uint64_t v19 = v32;
            unint64_t v21 = v29;
          }
          else
          {
            *(void *)int v24 = v25;
            BOOL v26 = v24 + 8;
          }
          v84[v25] = 1;
          if ((unint64_t)v20 >= v21)
          {
            uint64_t v35 = v23;
            uint64_t v36 = (v20 - __p) >> 3;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61) {
LABEL_123:
            }
              sub_2483E92E8();
            unint64_t v38 = v21 - (void)__p;
            unint64_t v39 = (uint64_t)(v21 - (void)__p) >> 2;
            if (v39 > v37) {
              unint64_t v37 = v39;
            }
            if (v38 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v37;
            }
            if (v40) {
              unint64_t v40 = (unint64_t)sub_2483F04AC(v40);
            }
            else {
              uint64_t v41 = 0;
            }
            long long v42 = (char *)(v40 + 8 * v36);
            *(void *)long long v42 = v25;
            uint64_t v43 = v42 + 8;
            if (v20 == __p)
            {
              long long v44 = __p;
            }
            else
            {
              long long v44 = __p;
              do
              {
                uint64_t v45 = *((void *)v20 - 1);
                v20 -= 8;
                *((void *)v42 - 1) = v45;
                v42 -= 8;
              }
              while (v20 != __p);
            }
            unint64_t v21 = v40 + 8 * v41;
            if (v44)
            {
              unint64_t v46 = v40 + 8 * v41;
              operator delete(v44);
              unint64_t v21 = v46;
            }
            int v24 = v26;
            uint64x2_t __p = v42;
            uint64_t v20 = v43;
            uint64_t v16 = a1;
            unint64_t v14 = v81;
            __int16 v23 = v35;
          }
          else
          {
            *(void *)uint64_t v20 = v25;
            v20 += 8;
            int v24 = v26;
            uint64_t v16 = a1;
          }
        }
        ++v22;
      }
      while (v22 != 8);
      if (v19 != v24)
      {
        while (1)
        {
          uint64_t v49 = *((void *)v24 - 1);
          uint64_t v48 = v24 - 8;
          uint64_t v47 = v49;
          if (v49) {
            break;
          }
          long long v53 = v20;
          long long v52 = v48;
LABEL_103:
          uint64_t v20 = v53;
          int v24 = v52;
          if (v19 == v52)
          {
            if (v52) {
              goto LABEL_105;
            }
            goto LABEL_106;
          }
        }
        uint64_t v50 = 0;
        while (1)
        {
          if (((*(_DWORD *)(v16[426] + 4 * v47) >> v50) & 1) == 0)
          {
            long long v52 = v48;
            long long v53 = v20;
            goto LABEL_64;
          }
          uint64_t v51 = *(void *)(*((void *)v87 + 3 * v50) + 8 * (v47 - 1));
          if (v51 == v86 || v84[v51]) {
            break;
          }
          if (v48 >= v23)
          {
            uint64_t v54 = (v48 - v19) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
              goto LABEL_122;
            }
            unint64_t v56 = v21;
            if ((v23 - v19) >> 2 > v55) {
              unint64_t v55 = (v23 - v19) >> 2;
            }
            if ((unint64_t)(v23 - v19) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57) {
              unint64_t v57 = (unint64_t)sub_2483F04AC(v57);
            }
            else {
              uint64_t v58 = 0;
            }
            float v59 = (char *)(v57 + 8 * v54);
            *(void *)float v59 = v51;
            long long v52 = v59 + 8;
            while (v48 != v19)
            {
              uint64_t v60 = *((void *)v48 - 1);
              v48 -= 8;
              *((void *)v59 - 1) = v60;
              v59 -= 8;
            }
            __int16 v23 = (char *)(v57 + 8 * v58);
            if (v19)
            {
              float v61 = v19;
              float v62 = v23;
              operator delete(v61);
              __int16 v23 = v62;
            }
            uint64_t v19 = v59;
            unint64_t v21 = v56;
          }
          else
          {
            *(void *)uint64_t v48 = v51;
            long long v52 = v48 + 8;
          }
          v84[v51] = 1;
          if ((unint64_t)v20 < v21)
          {
            *(void *)uint64_t v20 = v51;
            v20 += 8;
            goto LABEL_62;
          }
          uint64_t v82 = v23;
          uint64_t v63 = (v20 - __p) >> 3;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61) {
LABEL_122:
          }
            sub_2483E92E8();
          unint64_t v65 = v21 - (void)__p;
          unint64_t v66 = (uint64_t)(v21 - (void)__p) >> 2;
          if (v66 > v64) {
            unint64_t v64 = v66;
          }
          if (v65 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v64;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)sub_2483F04AC(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          float64x2_t v69 = (char *)(v67 + 8 * v63);
          *(void *)float64x2_t v69 = v51;
          long long v53 = v69 + 8;
          if (v20 == __p)
          {
            uint64_t v16 = a1;
            uint64_t v70 = __p;
          }
          else
          {
            uint64_t v16 = a1;
            uint64_t v70 = __p;
            do
            {
              uint64_t v71 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v69 - 1) = v71;
              v69 -= 8;
            }
            while (v20 != __p);
          }
          unint64_t v21 = v67 + 8 * v68;
          if (v70)
          {
            unint64_t v72 = v67 + 8 * v68;
            operator delete(v70);
            unint64_t v21 = v72;
          }
          uint64x2_t __p = v69;
          __int16 v23 = v82;
LABEL_64:
          ++v50;
          uint64_t v48 = v52;
          uint64_t v20 = v53;
          if (v50 == 8) {
            goto LABEL_103;
          }
        }
        long long v52 = v48;
LABEL_62:
        long long v53 = v20;
        uint64_t v16 = a1;
        goto LABEL_64;
      }
      long long v53 = v20;
      long long v52 = v24;
      if (v24) {
LABEL_105:
      }
        operator delete(v52);
LABEL_106:
      operator delete(v84);
      for (uint64_t i = 0; i != -192; i -= 24)
      {
        long long v74 = *(void **)((char *)&v87[10] + i + 8);
        if (v74)
        {
          *(void *)((char *)&v87[11] + i) = v74;
          operator delete(v74);
        }
      }
      LOBYTE(v87[0]) = 0;
      uint64_t v75 = a1[435];
      unint64_t v76 = a1[436] - v75;
      if (v76 <= v81)
      {
        sub_2483EE700(v80, v79 - v76, v87);
      }
      else if (v79 < v76)
      {
        a1[436] = v75 + v79;
      }
      if (__p != v53)
      {
        int v77 = __p;
        do
        {
          uint64_t v78 = *(void *)v77;
          v77 += 8;
          *(unsigned char *)(*v80 + v78) = 1;
        }
        while (v77 != v53);
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
}

void sub_248412378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JxlDecoderSkipCurrentFrame(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 3368) != 2) {
    return 1;
  }
  *(_DWORD *)(a1 + 3368) = 0;
  sub_248412458(a1, *(void *)(a1 + 3360));
  uint64_t result = 0;
  if (*(unsigned char *)(a1 + 3373)) {
    *(unsigned char *)(a1 + 1056) = 0;
  }
  return result;
}

uint64_t sub_248412458(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 3600);
  unint64_t v3 = v2;
  if (!*(unsigned char *)(result + 952))
  {
    uint64_t v4 = *(void *)(result + 904);
    if (*(void *)(result + 920) - v4 >= v2) {
      unint64_t v3 = *(void *)(result + 3600);
    }
    else {
      unint64_t v3 = *(void *)(result + 920) - v4;
    }
  }
  uint64_t v5 = *(void *)(result + 3504);
  uint64_t v6 = *(void *)(result + 3512);
  if (v5 == v6)
  {
    if (a2 <= v3)
    {
      *(void *)(result + 3592) += a2;
      *(void *)(result + 3600) = v2 - a2;
      unint64_t v11 = *(void *)(result + 904) + a2;
    }
    else
    {
      *(void *)(result + 3536) = a2 - v3;
      *(void *)(result + 3592) += v3;
      *(void *)(result + 3600) = v2 - v3;
      unint64_t v11 = *(void *)(result + 904) + v3;
    }
    *(void *)(result + 904) = v11;
  }
  else
  {
    unint64_t v7 = *(void *)(result + 3536) + a2;
    *(void *)(result + 3536) = v7;
    unint64_t v8 = *(void *)(result + 3528);
    unint64_t v9 = v6 - v5;
    if (v8 + v7 >= v9)
    {
      if (v8 + v7 - v9 < v8) {
        unint64_t v8 = v8 + v7 - v9;
      }
      *(void *)(result + 3592) += v8;
      *(void *)(result + 3600) = v2 - v8;
      *(void *)(result + 904) += v8;
      unint64_t v10 = v7 - v9;
      if (v7 < v9) {
        unint64_t v10 = 0;
      }
      *(void *)(result + 3536) = v10;
      *(void *)(result + 3528) = 0;
      *(void *)(result + 3512) = v5;
    }
  }
  return result;
}

uint64_t JxlDecoderSetParallelRunner(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 32)) {
    operator new();
  }
  return 1;
}

uint64_t JxlDecoderSizeHintBasicInfo(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 1016);
  }
}

uint64_t JxlDecoderSubscribeEvents(_DWORD *a1, int a2)
{
  if (a1[8] | a2 & 0x3F) {
    return 1;
  }
  uint64_t result = 0;
  a1[252] = a2;
  a1[253] = a2;
  return result;
}

uint64_t JxlDecoderSetKeepOrientation(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32)) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1000) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetUnpremultiplyAlpha(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32)) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1001) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetRenderSpotcolors(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32)) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1002) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetCoalescing(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32)) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1003) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 3592) || *(unsigned char *)(a1 + 3608)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a1 + 3592) = a2;
  *(void *)(a1 + 3600) = a3;
  return result;
}

uint64_t JxlDecoderReleaseInput(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 3600);
  *(_OWORD *)(a1 + 3592) = 0u;
  return v1;
}

uint64_t JxlDecoderCloseInput(uint64_t result)
{
  *(unsigned char *)(result + 3608) = 1;
  return result;
}

uint64_t JxlDecoderSetJPEGBuffer()
{
  return 1;
}

uint64_t JxlDecoderReleaseJPEGBuffer()
{
  return 1;
}

uint64_t JxlDecoderProcessInput(uint64_t a1)
{
  v363[5] = *MEMORY[0x263EF8340];
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 == 3) {
    return 1;
  }
  uint64_t v2 = a1;
  if (!v1) {
    *(_DWORD *)(a1 + 32) = 1;
  }
  if (!*(unsigned char *)(a1 + 36))
  {
    uint64_t v330 = JxlSignatureCheck(*(unsigned __int8 **)(a1 + 3592), *(void *)(a1 + 3600));
    uint64_t v27 = v330;
    if (v330 == 1) {
      return v27;
    }
    if (!v330)
    {
      if (*(unsigned char *)(v2 + 3608)) {
        return 1;
      }
      else {
        return 2;
      }
    }
    *(unsigned char *)(v2 + 36) = 1;
    if (v330 == 3) {
      *(unsigned char *)(v2 + 1024) = 1;
    }
    else {
      *(unsigned char *)(v2 + 37) = 1;
    }
  }
  unint64_t v3 = (_DWORD *)(v2 + 953);
  uint64_t v349 = (void *)(v2 + 3408);
  uint64_t v358 = (void *)(v2 + 3328);
  uint64_t v359 = (void **)(v2 + 3312);
  int v4 = *(_DWORD *)(v2 + 3552);
  uint64_t v357 = v2;
  uint64_t v352 = (_DWORD *)(v2 + 953);
  while (2)
  {
    while (!v4)
    {
LABEL_260:
      if (*(unsigned char *)(v2 + 1024))
      {
        unint64_t v175 = *(void *)(v2 + 3600);
        if (!v175)
        {
          if (*(_DWORD *)(v2 + 32) == 2)
          {
            if (!*(unsigned char *)(v2 + 3608))
            {
              uint64_t v27 = (*(_DWORD *)(v2 + 1008) >> 13) & 2;
              goto LABEL_568;
            }
            return *(_DWORD *)(v2 + 32) != 2;
          }
          goto LABEL_583;
        }
        int v176 = *(_DWORD *)(v2 + 1008);
        if ((v176 & 0x4000) != 0 && *(_DWORD *)(v2 + 32) == 2 && *(unsigned char *)(v2 + 37))
        {
          if (v175 <= 1)
          {
            uint64_t v179 = *(void *)(v2 + 904);
LABEL_581:
            uint64_t v331 = 106;
            goto LABEL_582;
          }
          char v177 = *(unsigned __int8 **)(v2 + 3592);
          if (*v177 == 255 && v177[1] == 10) {
            return *(_DWORD *)(v2 + 32) != 2;
          }
          int v178 = 1;
        }
        else
        {
          int v178 = 0;
        }
        uint64_t v179 = *(void *)(v2 + 904);
        if (v175 < 8) {
          goto LABEL_581;
        }
        uint64_t v180 = *(void *)(v2 + 3592);
        unsigned int v181 = *(_DWORD *)v180;
        int v182 = *(_DWORD *)(v180 + 4);
        *unint64_t v3 = v182;
        if (v181 == 0x1000000)
        {
          if (v175 >= 0x10)
          {
            unint64_t v183 = bswap64(*(void *)(v180 + 8));
            unint64_t v184 = 16;
            goto LABEL_277;
          }
          uint64_t v331 = 114;
LABEL_582:
          *(void *)(v2 + 1016) = v331 - v179;
LABEL_583:
          if (!*(unsigned char *)(v2 + 3608)) {
            return 2;
          }
          return 1;
        }
        unint64_t v183 = bswap32(v181);
        unint64_t v184 = 8;
LABEL_277:
        BOOL v185 = __CFADD__(v179, v183);
        BOOL v186 = v183 >= v184 || v183 == 0;
        uint64_t v27 = 1;
        if (!v186 || v185) {
          return v27;
        }
        BOOL v187 = *v3 != 1651470946;
        if (*v3 == 1651470946)
        {
          if (v175 < (v184 | 4)) {
            goto LABEL_583;
          }
          int v182 = *(_DWORD *)(v180 + v184);
        }
        v3[1] = v182;
        uint64_t v188 = *(void *)(v2 + 1032) + 1;
        *(void *)(v2 + 1032) = v188;
        if (v178 && *v3 == 541874250) {
          return *(_DWORD *)(v2 + 32) != 2;
        }
        if (v188 == 2)
        {
          if (*v3 != 1887007846) {
            return v27;
          }
        }
        else if (*v3 == 1887007846)
        {
          return v27;
        }
        BOOL v189 = v183 == 0;
        *(unsigned char *)(v2 + 952) = v183 == 0;
        *(void *)(v2 + 912) = v184 + v179;
        uint64_t v190 = v183 + v179;
        if (!v183) {
          uint64_t v190 = 0;
        }
        *(void *)(v2 + 920) = v190;
        if (v183) {
          unint64_t v191 = v183 - v184;
        }
        else {
          unint64_t v191 = 0;
        }
        *(void *)(v2 + 928) = v191;
        *(void *)(v2 + 936) = v183;
        *(void *)(v2 + 944) = v184;
        if ((v176 & 0x4000) != 0)
        {
          char v193 = !v187 && *(unsigned char *)(v2 + 962) != 0;
          uint64_t v194 = *(void **)(v2 + 3560);
          if (v194)
          {
            sub_2483E4150(v194);
            *(void *)(v2 + 3560) = 0;
          }
          *(unsigned char *)(v2 + 3568) = 0;
          *(unsigned char *)(v2 + 3569) = v193;
          *(unsigned char *)(v2 + 3570) = v189;
          *(void *)(v2 + 3576) = v191;
          *(void *)(v2 + 3584) = 0;
        }
        switch(*v3)
        {
          case 0x70797466:
            int v4 = 1;
            break;
          case 0x636C786A:
            if (*(unsigned char *)(v2 + 37)) {
              return 1;
            }
            *(unsigned char *)(v2 + 37) = 1;
            int v4 = 3;
            break;
          case 0x706C786A:
            int v4 = 4;
            break;
          default:
            int v4 = 2;
            break;
        }
        *(_DWORD *)(v2 + 3552) = v4;
        if ((*(unsigned char *)(v2 + 1009) & 0x40) != 0)
        {
          *(unsigned char *)(v2 + 961) = 1;
          *(unsigned char *)(v2 + 964) = 0;
          return 0x4000;
        }
      }
      else
      {
        if (*(_DWORD *)(v2 + 32) == 2) {
          return 0;
        }
        int v4 = 3;
        *(_DWORD *)(v2 + 3552) = 3;
        *(unsigned char *)(v2 + 952) = 1;
      }
    }
    uint64_t v5 = *(void *)(v2 + 944);
    uint64_t v6 = *(void *)(v2 + 3592) + v5;
    *(void *)(v2 + 3592) = v6;
    uint64_t v7 = *(void *)(v2 + 3600) - v5;
    *(void *)(v2 + 3600) = v7;
    uint64_t v8 = *(void *)(v2 + 904) + v5;
    *(void *)(v2 + 904) = v8;
    *(void *)(v2 + 944) = 0;
    if ((*(unsigned char *)(v2 + 1009) & 0x40) != 0 && *(unsigned char *)(v2 + 964))
    {
      uint64_t v9 = *(void *)(v2 + 992);
      unint64_t v10 = (void *)(*(void *)(v2 + 968) + v9);
      *(void *)&long long v362 = v10;
      uint64_t v11 = *(void *)(v2 + 976);
      unint64_t v12 = v11 - v9;
      v363[0] = v11 - v9;
      uint64_t v13 = v8 - *(void *)(v2 + 912);
      uint64_t v14 = *(void *)(v2 + 3584);
      uint64_t v15 = (char *)(v6 + v14 - v13);
      unint64_t v16 = v13 - v14 + v7;
      if (*(unsigned char *)(v2 + 3569))
      {
        if (*(unsigned char *)(v2 + 3568)) {
          goto LABEL_11;
        }
        BOOL v23 = v16 >= 4;
        v16 -= 4;
        if (v23)
        {
          if (!*(unsigned char *)(v2 + 3570))
          {
            unint64_t v24 = *(void *)(v2 + 3576);
            BOOL v23 = v24 >= 4;
            unint64_t v25 = v24 - 4;
            if (!v23) {
              goto LABEL_256;
            }
            *(void *)(v2 + 3576) = v25;
          }
          v15 += 4;
          *(void *)(v2 + 3584) = v14 + 4;
          *(unsigned char *)(v2 + 3568) = 1;
LABEL_11:
          uint64x2_t __p = (unsigned char *)v16;
          uint64_t v17 = *(int **)(v2 + 3560);
          if (!v17)
          {
            uint64_t v18 = (char *)malloc_type_malloc(0x1428uLL, 0x10F2040F1FA04F5uLL);
            uint64_t v17 = (int *)v18;
            if (v18)
            {
              *((void *)v18 + 5) = sub_2484D1C78;
              *((void *)v18 + 6) = sub_2484D1C88;
              *((void *)v18 + 7) = 0;
              *((_DWORD *)v18 + 29) = 0;
              *((void *)v18 + 1) = 0;
              *((_DWORD *)v18 + 4) = 64;
              __int16 v19 = *((_WORD *)v18 + 336);
              *(void *)uint64_t v18 = 0;
              *((void *)v18 + 9) = 0;
              *((void *)v18 + 15) = 0;
              *((_DWORD *)v18 + 170) = 0;
              *((void *)v18 + 42) = 0;
              *(_OWORD *)(v18 + 152) = 0u;
              *(_OWORD *)(v18 + 168) = 0u;
              *((_OWORD *)v18 + 12) = 0u;
              *(_OWORD *)(v18 + 216) = 0u;
              *((_OWORD *)v18 + 23) = 0u;
              *((void *)v18 + 83) = 0;
              *(_OWORD *)(v18 + 648) = 0u;
              *((_OWORD *)v18 + 43) = 0u;
              *((_WORD *)v18 + 336) = v19 & 0xFFC0 | 0x10;
              *((_DWORD *)v18 + 169) = 0;
              *(_OWORD *)(v18 + 100) = xmmword_2484DCB60;
              *((_DWORD *)v18 + 21) = 0;
              *((void *)v18 + 11) = 0;
              *((_DWORD *)v18 + 24) = 0;
              *((void *)v18 + 30) = 0;
              *((void *)v18 + 31) = 0;
              *((_DWORD *)v18 + 96) = 63;
              *((void *)v18 + 89) = 0;
              uint64_t v20 = malloc_type_malloc(0x580uLL, 0x10F00400AFAC3FDuLL);
              if (v20)
              {
                unint64_t v21 = v20;
                bzero(v20, 0x568uLL);
                v21[316] = 1;
                v21[1360] = 0;
                *((void *)v21 + 40) = &unk_26523BC20;
                *((void *)v21 + 104) = &unk_26523BCD0;
                *((void *)v21 + 173) = sub_2484D1C78;
                *((void *)v21 + 174) = sub_2484D1C88;
                *((void *)v21 + 175) = 0;
                *((void *)v17 + 88) = v21;
              }
              else
              {
                free(v17);
                uint64_t v17 = 0;
              }
            }
            *(void *)(v2 + 3560) = v17;
          }
          if (v17[29] < 0) {
            goto LABEL_256;
          }
          uint64_t v347 = v15;
          if (v11 == v9)
          {
            unint64_t v28 = 0;
          }
          else
          {
            if (!(void)v362)
            {
              uint64_t v169 = (uint64_t)v17;
              unsigned int v30 = -20;
              uint64_t v170 = 0;
              goto LABEL_250;
            }
            unint64_t v28 = (void **)&v362;
          }
          if (v17[18])
          {
            unint64_t v29 = (char *)(v17 + 16);
            unsigned int v30 = 2;
            uint64_t v31 = __p;
          }
          else
          {
            uint64_t v31 = __p;
            *((void *)v17 + 4) = __p;
            unsigned int v30 = 1;
            unint64_t v29 = v15;
          }
          int32x4_t v355 = (unint64_t *)(v17 + 2);
          long long v32 = v17 + 16;
          *((void *)v17 + 3) = v29;
          unint64_t v350 = (unsigned __int8 **)(v17 + 172);
          uint64_t v348 = (unsigned __int8 **)(v17 + 84);
          uint64_t v33 = v17 + 188;
          unint64_t v34 = v17 + 324;
LABEL_47:
          while (2)
          {
            while (v30 == 1)
            {
              switch(*v17)
              {
                case 0:
                  int v54 = sub_2483E4100(v355);
                  unsigned int v30 = 2;
                  if (!v54) {
                    continue;
                  }
                  __int16 v55 = *((_WORD *)v17 + 336);
                  *((_WORD *)v17 + 336) = v55 & 0xFFDF;
                  unint64_t v56 = *((void *)v17 + 1);
                  int v57 = v17[4];
                  v17[4] = v57 + 1;
                  if (((v56 >> v57) & 1) == 0)
                  {
                    int v59 = 16;
                    goto LABEL_214;
                  }
                  v17[4] = v57 + 4;
                  int v58 = (v56 >> (v57 + 1)) & 7;
                  if (v58)
                  {
                    int v59 = v58 + 17;
LABEL_214:
                    v17[169] = v59;
                    int v75 = 2;
                    goto LABEL_215;
                  }
                  v17[4] = v57 + 7;
                  int v164 = (v56 >> (v57 + 4)) & 7;
                  if (!v164)
                  {
                    int v59 = 17;
                    goto LABEL_214;
                  }
                  if (v164 != 1)
                  {
                    int v59 = v164 | 8;
                    goto LABEL_214;
                  }
                  unsigned int v30 = -13;
                  if ((v55 & 0x20) != 0)
                  {
                    v17[4] = v57 + 8;
                    if (((v56 >> (v57 + 7)) & 1) == 0)
                    {
                      *((_WORD *)v17 + 336) = v55 | 0x20;
                      unsigned int v30 = 1;
                      *uint64_t v17 = 1;
                    }
                  }
                  continue;
                case 1:
                  int v60 = v17[4];
                  if ((v60 - 59) >= 6)
                  {
                    unint64_t v64 = *v355;
                  }
                  else
                  {
                    uint64_t v61 = *((void *)v17 + 4);
                    unsigned int v30 = 2;
                    if (!v61) {
                      continue;
                    }
                    unint64_t v62 = *((void *)v17 + 1);
                    *((void *)v17 + 1) = v62 >> 8;
                    uint64_t v63 = (unsigned __int8 *)*((void *)v17 + 3);
                    *((void *)&v65 + 1) = *v63;
                    *(void *)&long long v65 = v62;
                    unint64_t v64 = v65 >> 8;
                    *((void *)v17 + 1) = v64;
                    v60 -= 8;
                    *((void *)v17 + 3) = v63 + 1;
                    *((void *)v17 + 4) = v61 - 1;
                  }
                  uint64_t v53 = (v64 >> v60) & 0x3F;
                  v17[169] = v53;
                  v17[4] = v60 + 6;
                  unsigned int v30 = -13;
                  if ((v53 - 31) < 0xFFFFFFEB) {
                    continue;
                  }
                  *uint64_t v17 = 2;
LABEL_106:
                  v17[20] = (1 << v53) - 16;
                  uint64_t v76 = (*((uint64_t (**)(void, uint64_t))v17 + 5))(*((void *)v17 + 7), 12336);
                  *((void *)v17 + 30) = v76;
                  unsigned int v30 = -30;
                  if (!v76) {
                    continue;
                  }
                  *((void *)v17 + 31) = v76 + 7584;
                  *uint64_t v17 = 3;
LABEL_108:
                  v17[66] = 0;
                  *((_OWORD *)v17 + 17) = xmmword_2484DCB70;
                  *((_OWORD *)v17 + 18) = xmmword_2484DCB80;
                  *((_OWORD *)v17 + 19) = xmmword_2484DCB90;
                  *((_OWORD *)v17 + 9) = 0u;
                  *((_OWORD *)v17 + 10) = 0u;
                  *((void *)v17 + 22) = 0;
                  *((void *)v17 + 24) = 0;
                  *((void *)v17 + 25) = 0;
                  *((void *)v17 + 27) = 0;
                  *((void *)v17 + 28) = 0;
                  *uint64_t v348 = 0;
                  *((void *)v17 + 43) = 0;
                  *((unsigned char *)v17 + 352) = 0;
                  *unint64_t v350 = 0;
                  *((void *)v17 + 87) = 0;
                  *uint64_t v17 = 4;
LABEL_109:
                  unsigned int v30 = sub_2483E4388((uint64_t)v17, v355);
                  if (v30 != 1) {
                    continue;
                  }
                  __int16 v77 = *((_WORD *)v17 + 336);
                  if ((v77 & 6) == 0) {
                    goto LABEL_114;
                  }
                  int v78 = v17[4];
                  int v79 = -v78 & 7;
                  if (v79)
                  {
                    uint64_t v80 = *((void *)v17 + 1) >> v78;
                    v17[4] = v79 + v78;
                    unsigned int v30 = -14;
                    if ((v80 & ~(-1 << v79)) != 0) {
                      continue;
                    }
                  }
                  if ((v77 & 4) != 0)
                  {
                    int v41 = 12;
                    goto LABEL_219;
                  }
LABEL_114:
                  if (!v17[66]) {
                    goto LABEL_218;
                  }
                  sub_2483E4854((uint64_t)v17);
                  if ((v17[168] & 2) != 0)
                  {
                    int v41 = 11;
                    goto LABEL_219;
                  }
LABEL_116:
                  int v72 = 0;
                  *((void *)v17 + 115) = v17 + 240;
                  *((_OWORD *)v17 + 47) = 0u;
                  *(void *)uint64_t v17 = 18;
LABEL_117:
                  unsigned int v30 = sub_2483E48C0((uint64_t)v17, v355, (unsigned int *)&v17[v72 + 71]);
                  if (v30 == 1)
                  {
                    ++v17[v17[1] + 71];
                    uint64_t v43 = v17[1];
                    unsigned int v44 = v17[v43 + 71];
                    if (v44 <= 1)
                    {
                      v17[1] = v43 + 1;
                      unsigned int v30 = 1;
                      continue;
                    }
                    *uint64_t v17 = 19;
LABEL_153:
                    unsigned int v30 = sub_2483E4A70(v44 + 2, v44 + 2, (char *)(*((void *)v17 + 30) + 2528 * v43), 0, (uint64_t)v17);
                    if (v30 == 1)
                    {
                      *uint64_t v17 = 20;
LABEL_155:
                      unsigned int v30 = sub_2483E4A70(26, 0x1Au, (char *)(*((void *)v17 + 31) + 1584 * v17[1]), 0, (uint64_t)v17);
                      if (v30 == 1)
                      {
                        *uint64_t v17 = 21;
LABEL_157:
                        uint64_t v113 = v32;
                        uint64_t v114 = v17[1];
                        uint64_t v115 = *((void *)v17 + 31);
                        LODWORD(v360) = 0;
                        if (v17[167])
                        {
                          uint64_t v116 = v17[67];
                          goto LABEL_168;
                        }
                        long long v117 = (unsigned char *)(v115 + 1584 * (int)v114);
                        int v118 = v17[4];
                        if ((v118 - 50) >= 0xF)
                        {
                          unint64_t v122 = *v355;
LABEL_165:
                          unint64_t v125 = v122 >> v118;
                          unint64_t v126 = &v117[4 * (v122 >> v118)];
                          unsigned int v127 = *v126;
                          if (v127 >= 9)
                          {
                            v118 += 8;
                            v126 += 4 * (BYTE1(v125) & ~(-1 << (v127 - 8)) & 0x7F)
                                  + 4 * *(unsigned __int16 *)&v117[4 * v125 + 2];
                            unsigned int v127 = *v126;
                          }
                          v17[4] = v118 + v127;
                          uint64_t v116 = *((unsigned __int16 *)v126 + 1);
LABEL_168:
                          long long v128 = (unsigned __int16 *)((char *)&unk_248551AB0 + 4 * v116);
                          unsigned int v129 = *((unsigned __int8 *)v128 + 2);
                          int v130 = *v128;
                          int v131 = v17[4];
                          unsigned int v132 = 64 - v131;
                          if (64 - v131 >= v129)
                          {
                            unint64_t v136 = *v355;
LABEL_174:
                            v17[4] = v131 + v129;
                            v17[v114 + 68] = ((v136 >> v131) & ~(-1 << v129)) + v130;
                            v17[167] = 0;
                            int v138 = v17[1] + 1;
                            *uint64_t v17 = 18;
                            v17[1] = v138;
                            unsigned int v30 = 1;
                            long long v32 = v113;
                            continue;
                          }
                          uint64_t v133 = *((void *)v17 + 4) - 1;
                          while (v133 != -1)
                          {
                            unint64_t v134 = *((void *)v17 + 1);
                            *((void *)v17 + 1) = v134 >> 8;
                            char v135 = (unsigned __int8 *)*((void *)v17 + 3);
                            *((void *)&v137 + 1) = *v135;
                            *(void *)&long long v137 = v134;
                            unint64_t v136 = v137 >> 8;
                            *((void *)v17 + 1) = v136;
                            v131 -= 8;
                            v17[4] = v131;
                            *((void *)v17 + 3) = v135 + 1;
                            *((void *)v17 + 4) = v133--;
                            v132 += 8;
                            if (v132 >= v129) {
                              goto LABEL_174;
                            }
                          }
                          v17[67] = v116;
                          v17[167] = 1;
                        }
                        else
                        {
                          uint64_t v119 = *((void *)v17 + 4) - 1;
                          while (v119 != -1)
                          {
                            unint64_t v120 = *((void *)v17 + 1);
                            *((void *)v17 + 1) = v120 >> 8;
                            uint64_t v121 = (unsigned __int8 *)*((void *)v17 + 3);
                            *((void *)&v123 + 1) = *v121;
                            *(void *)&long long v123 = v120;
                            unint64_t v122 = v123 >> 8;
                            *((void *)v17 + 1) = v122;
                            int v124 = v118 - 8;
                            v17[4] = v118 - 8;
                            *((void *)v17 + 3) = v121 + 1;
                            *((void *)v17 + 4) = v119--;
                            LODWORD(v121) = v118 - 58;
                            v118 -= 8;
                            if (v121 >= 0xF)
                            {
                              int v118 = v124;
                              goto LABEL_165;
                            }
                          }
                          if (sub_2483E59B4(v117, (uint64_t)v355, &v360))
                          {
                            uint64_t v116 = v360;
                            goto LABEL_168;
                          }
                        }
                        unsigned int v30 = 2;
                        long long v32 = v113;
                        continue;
                      }
                    }
                  }
                  continue;
                case 2:
                  LODWORD(v53) = v17[169];
                  goto LABEL_106;
                case 3:
                  goto LABEL_108;
                case 4:
                  goto LABEL_109;
                case 5:
                  int v66 = v17[4];
                  if ((v66 - 59) >= 6)
                  {
                    unint64_t v70 = *v355;
                  }
                  else
                  {
                    uint64_t v67 = *((void *)v17 + 4);
                    unsigned int v30 = 2;
                    if (!v67) {
                      continue;
                    }
                    unint64_t v68 = *((void *)v17 + 1);
                    *((void *)v17 + 1) = v68 >> 8;
                    float64x2_t v69 = (unsigned __int8 *)*((void *)v17 + 3);
                    *((void *)&v71 + 1) = *v69;
                    *(void *)&long long v71 = v68;
                    unint64_t v70 = v71 >> 8;
                    *((void *)v17 + 1) = v70;
                    v66 -= 8;
                    *((void *)v17 + 3) = v69 + 1;
                    *((void *)v17 + 4) = v67 - 1;
                  }
                  unint64_t v81 = v70 >> v66;
                  v17[4] = v66 + 6;
                  int v82 = (v70 >> v66) & 3;
                  v17[80] = v82;
                  v17[81] = ((v81 >> 2) & 0xF) << v82;
                  uint64_t v83 = (*((uint64_t (**)(void, void))v17 + 5))(*((void *)v17 + 7), v17[71]);
                  *((void *)v17 + 87) = v83;
                  unsigned int v30 = -21;
                  if (!v83) {
                    continue;
                  }
                  LODWORD(i) = 0;
                  *(void *)uint64_t v17 = 6;
LABEL_123:
                  LODWORD(v42) = v17[71];
                  if ((int)i < (int)v42)
                  {
                    for (uint64_t i = (int)i; i < v42; ++i)
                    {
                      int v84 = v17[4];
                      if ((v84 - 63) >= 2)
                      {
                        unint64_t v88 = *v355;
                      }
                      else
                      {
                        uint64_t v85 = *((void *)v17 + 4);
                        if (!v85)
                        {
                          v17[1] = i;
LABEL_212:
                          unsigned int v30 = 2;
                          goto LABEL_47;
                        }
                        unint64_t v86 = *((void *)v17 + 1);
                        *((void *)v17 + 1) = v86 >> 8;
                        uint64_t v87 = (unsigned __int8 *)*((void *)v17 + 3);
                        *((void *)&v89 + 1) = *v87;
                        *(void *)&long long v89 = v86;
                        unint64_t v88 = v89 >> 8;
                        *((void *)v17 + 1) = v88;
                        v84 -= 8;
                        *((void *)v17 + 3) = v87 + 1;
                        *((void *)v17 + 4) = v85 - 1;
                      }
                      v17[4] = v84 + 2;
                      *(unsigned char *)(*((void *)v17 + 87) + i) = (v88 >> v84) & 3;
                      uint64_t v42 = v17[71];
                    }
                  }
                  *uint64_t v17 = 22;
LABEL_131:
                  unsigned int v30 = sub_2483E5C0C(v42 << 6, (unsigned int *)v17 + 171, v350, (uint64_t)v17);
                  if (v30 != 1) {
                    continue;
                  }
                  *((_OWORD *)v17 + 45) = 0u;
                  *((_OWORD *)v17 + 46) = 0u;
                  uint64_t v90 = v17[71];
                  if (v90)
                  {
                    unint64_t v91 = 0;
                    uint64_t v92 = *v350;
                    do
                    {
                      int8x16x4_t v364 = vld4q_s8((const char *)v92);
                      int8x16_t v93 = vld1q_dup_s8((const char *)v92);
                      v364.val[0] = vorrq_s8(vorrq_s8(veorq_s8(v364.val[1], v93), veorq_s8(v364.val[0], v93)), vorrq_s8(veorq_s8(v364.val[2], v93), veorq_s8(v364.val[3], v93)));
                      v364.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v364.val[0]);
                      v364.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v364.val[1].i8);
                      v364.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v364.val[0].i8);
                      int8x16_t v94 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v364.val[0].i8);
                      v364.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v364.val[1]);
                      v364.val[0] = (int8x16_t)vmovl_high_u16((uint16x8_t)v364.val[0]);
                      *(int8x8_t *)v364.val[0].i8 = vorr_s8(vorr_s8(vorr_s8(*(int8x8_t *)v94.i8, *(int8x8_t *)v364.val[2].i8), vorr_s8(*(int8x8_t *)v364.val[0].i8, *(int8x8_t *)v364.val[1].i8)), vorr_s8(vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v364.val[2], v364.val[2], 8uLL)), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v364.val[0], v364.val[0], 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v364.val[1], v364.val[1], 8uLL))));
                      v95.i64[0] = v364.val[0].u32[0];
                      v95.i64[1] = v364.val[0].u32[1];
                      if (!*(void *)&vorr_s8((int8x8_t)v364.val[0].u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)))v17[(v91 >> 5) + 180] |= 1 << v91; {
                      ++v91;
                      }
                      v92 += 64;
                    }
                    while (v90 != v91);
                  }
                  *uint64_t v17 = 23;
LABEL_138:
                  int v96 = v17[80];
                  unsigned int v97 = v17[81];
                  unsigned int v98 = v97 + 16;
                  char v99 = v96 + 1;
                  if ((v17[168] & 0x20) != 0)
                  {
                    if (v97 > 0x7FFFFFFB)
                    {
                      unsigned int v102 = -2147483636;
                    }
                    else
                    {
                      unsigned int v102 = v97 + 16;
                      int v103 = -1;
                      unsigned int v104 = ((2147483644 - v97) >> v96) + 4;
                      do
                      {
                        int v105 = v103++;
                        BOOL v106 = v104 > 3;
                        v104 >>= 1;
                      }
                      while (v106);
                      if ((((((2147483644 - v97) >> v96) + 4) >> v103) & 1 | (2 * (v105 + 2))) != 4) {
                        unsigned int v102 = v97
                      }
                             + ((((((((2147483644 - v97) >> v96) + 4) >> v103) & 1 | (2 * (v105 + 2))) - 5) << v96) | ~(-1 << v96))
                             + 17;
                    }
                    unsigned int v346 = v102;
                    unsigned int v101 = v98 + (62 << v99);
                  }
                  else
                  {
                    int v100 = 24 << v99;
                    LOWORD(v101) = v98 + v100;
                    unsigned int v346 = v98 + v100;
                  }
                  unsigned int v30 = sub_2483E5C0C(4 * v17[73], (unsigned int *)v17 + 82, v348, (uint64_t)v17);
                  if (v30 != 1) {
                    continue;
                  }
                  uint64_t v345 = v32;
                  uint64_t v107 = v17[171];
                  uint64_t v108 = (*((uint64_t (**)(void, uint64_t))v17 + 5))(*((void *)v17 + 7), 2536 * v107);
                  v17[46] = 16777472;
                  *((_WORD *)v17 + 94) = v107;
                  *((void *)v17 + 21) = v108;
                  *((void *)v17 + 22) = v108 + 8 * v107;
                  uint64_t v109 = v17[72];
                  uint64_t v110 = (*((uint64_t (**)(void, uint64_t))v17 + 5))(*((void *)v17 + 7), 4328 * v109);
                  v17[52] = 46138048;
                  *((_WORD *)v17 + 106) = v109;
                  *((void *)v17 + 24) = v110;
                  *((void *)v17 + 25) = v110 + 8 * v109;
                  uint64_t v111 = v17[82];
                  uint64_t v112 = (*((uint64_t (**)(void, uint64_t))v17 + 5))(*((void *)v17 + 7), (4 * (v346 + 376) + 8) * v111);
                  *((_WORD *)v17 + 116) = v101;
                  *((_WORD *)v17 + 117) = v346;
                  *((_WORD *)v17 + 118) = v111;
                  *((void *)v17 + 27) = v112;
                  *((void *)v17 + 28) = v112 + 8 * v111;
                  if (!v108 || !v110 || !v112)
                  {
                    int v165 = sub_2483E422C((uint64_t)v17, 0xFFFFFFEA, __p - v31);
                    uint64_t v2 = v357;
                    unint64_t v3 = v352;
                    goto LABEL_255;
                  }
                  int v73 = 0;
                  *(void *)uint64_t v17 = 24;
                  long long v74 = v17 + 42;
                  uint64_t v2 = v357;
                  unint64_t v3 = v352;
                  long long v32 = v345;
                  goto LABEL_179;
                case 6:
                  LODWORD(i) = v17[1];
                  goto LABEL_123;
                case 7:
                case 8:
                case 9:
                case 10:
                  goto LABEL_201;
                case 11:
                  unsigned int v30 = sub_2483E5A70((size_t *)v363, v28, (uint64_t)v17);
                  if (v30 == 1) {
                    *uint64_t v17 = 14;
                  }
                  continue;
                case 12:
                  int v46 = v17[66];
                  if (v46 < 1) {
                    goto LABEL_218;
                  }
                  int v47 = v17[4];
                  int v48 = v46 + 1;
                  do
                  {
                    if ((v47 - 57) <= 7)
                    {
                      uint64_t v49 = *((void *)v17 + 4);
                      if (!v49) {
                        goto LABEL_212;
                      }
                      unint64_t v50 = *((void *)v17 + 1);
                      *((void *)v17 + 1) = v50 >> 8;
                      uint64_t v51 = (unsigned __int8 *)*((void *)v17 + 3);
                      *((void *)&v52 + 1) = *v51;
                      *(void *)&long long v52 = v50;
                      *((void *)v17 + 1) = v52 >> 8;
                      v47 -= 8;
                      *((void *)v17 + 3) = v51 + 1;
                      *((void *)v17 + 4) = v49 - 1;
                    }
                    v47 += 8;
                    v17[4] = v47;
                    v17[66] = v48 - 2;
                    --v48;
                  }
                  while (v48 > 1);
LABEL_218:
                  int v41 = 14;
                  goto LABEL_219;
                case 13:
                case 15:
                case 16:
                  unsigned int v30 = sub_2483E424C((uint64_t)v17, (size_t *)v363, v28, 0);
                  if (v30 != 1) {
                    continue;
                  }
                  sub_2483E78A8((void **)v17);
                  if (v17[22] == 1 << v17[169]) {
                    v17[21] = v17[20];
                  }
                  if (*v17 == 16)
                  {
                    int v41 = 10;
                    goto LABEL_219;
                  }
                  if (*v17 == 15)
                  {
                    uint64_t v39 = *((void *)v17 + 89);
                    if (!v39
                      || *(_DWORD *)(v39 + 16) == *(_DWORD *)(v39 + 20)
                      || (v40 = v17[19] + sub_2483E78EC((uint64_t)v17, v17[19]), v17[19] = v40, unsigned int v30 = 1, v40 < v17[22]))
                    {
                      if (v17[66]) {
                        int v41 = 7;
                      }
                      else {
                        int v41 = 14;
                      }
                      goto LABEL_219;
                    }
                    continue;
                  }
                  if (v17[1])
                  {
                    int v75 = 8;
LABEL_215:
                    *uint64_t v17 = v75;
                    unsigned int v30 = 1;
                    continue;
                  }
                  if (!v17[66]) {
                    goto LABEL_218;
                  }
                  int v41 = 9;
                  goto LABEL_219;
                case 14:
                  unsigned int v30 = -10;
                  if (v17[66] < 0) {
                    continue;
                  }
                  sub_2483E8AD8((uint64_t)v17);
                  if ((v17[168] & 1) == 0)
                  {
                    int v41 = 3;
LABEL_219:
                    *uint64_t v17 = v41;
                    unsigned int v30 = 1;
                    continue;
                  }
                  int v158 = v17[4];
                  int v159 = -v158 & 7;
                  if (v159)
                  {
                    uint64_t v160 = *((void *)v17 + 1) >> v158;
                    v158 += v159;
                    v17[4] = v158;
                    unsigned int v30 = -15;
                    if ((v160 & ~(-1 << v159)) != 0) {
                      continue;
                    }
                  }
                  if (!v17[18])
                  {
                    uint64_t v161 = (64 - v158) >> 3;
                    unsigned int v162 = (64 - v158) & 0xFFFFFFF8;
                    uint64_t v31 = (unsigned char *)(*((void *)v17 + 4) + v161);
                    uint64_t v15 = (char *)(*((void *)v17 + 3) - v161);
                    *((void *)v17 + 3) = v15;
                    *((void *)v17 + 4) = v31;
                    if (v162 == 64) {
                      unint64_t v163 = 0;
                    }
                    else {
                      unint64_t v163 = *v355 << v162;
                    }
                    *((void *)v17 + 1) = v163;
                    v17[4] = v162 + v158;
                  }
                  *uint64_t v17 = 26;
LABEL_232:
                  if (*((void *)v17 + 15))
                  {
                    unsigned int v30 = sub_2483E424C((uint64_t)v17, (size_t *)v363, v28, 1);
                    if (v30 != 1) {
                      continue;
                    }
                  }
                  uint64_t v327 = __p - v31;
                  uint64_t v328 = (uint64_t)v17;
                  unsigned int v329 = 1;
                  goto LABEL_235;
                case 17:
                  goto LABEL_116;
                case 18:
                  int v72 = v17[1];
                  if (v72 < 3) {
                    goto LABEL_117;
                  }
                  int v41 = 5;
                  goto LABEL_219;
                case 19:
                  uint64_t v43 = v17[1];
                  unsigned int v44 = v17[v43 + 71];
                  goto LABEL_153;
                case 20:
                  goto LABEL_155;
                case 21:
                  goto LABEL_157;
                case 22:
                  LODWORD(v42) = v17[71];
                  goto LABEL_131;
                case 23:
                  goto LABEL_138;
                case 24:
                  int v73 = v17[1];
                  if (v73)
                  {
                    if (v73 == 2)
                    {
                      long long v74 = v17 + 54;
                    }
                    else
                    {
                      long long v74 = v17 + 48;
                      if (v73 != 1)
                      {
                        uint64_t v327 = __p - v31;
                        uint64_t v328 = (uint64_t)v17;
                        unsigned int v329 = -31;
LABEL_235:
                        int v165 = sub_2483E422C(v328, v329, v327);
LABEL_255:
                        if (!v165)
                        {
LABEL_256:
                          uint64_t v27 = 1;
                          goto LABEL_257;
                        }
LABEL_251:
                        *(void *)(v2 + 3584) += v15 - v347;
                        if (!*(unsigned char *)(v2 + 3570)) {
                          *(void *)(v2 + 3576) -= v15 - v347;
                        }
                        uint64_t v27 = dword_248550E10[v165 - 1];
LABEL_257:
                        *(void *)(v2 + 992) = v362 - *(void *)(v2 + 968);
                        if ((v27 & 0xFFFFFFFD) == 0)
                        {
                          int v4 = *(_DWORD *)(v2 + 3552);
                          goto LABEL_259;
                        }
LABEL_568:
                        if (v27)
                        {
                          if (v27 != 2) {
                            return v27;
                          }
                          goto LABEL_583;
                        }
                        return *(_DWORD *)(v2 + 32) != 2;
                      }
                    }
                  }
                  else
                  {
                    long long v74 = v17 + 42;
                  }
LABEL_179:
                  if (*v33 == 1)
                  {
                    int v139 = v17[637];
                  }
                  else
                  {
                    int v139 = 0;
                    *((void *)v17 + 319) = *((void *)v74 + 1);
                    v17[637] = 0;
                    v17[188] = 1;
                  }
                  if (v139 < *((unsigned __int16 *)v74 + 10))
                  {
                    uint64_t v140 = (char *)*((void *)v17 + 319);
                    while (1)
                    {
                      LODWORD(v360) = 0;
                      unsigned int v141 = sub_2483E4A70(*((unsigned __int16 *)v74 + 8), *((unsigned __int16 *)v74 + 9), v140, (int *)&v360, (uint64_t)v17);
                      if (v141 != 1) {
                        goto LABEL_203;
                      }
                      uint64_t v142 = v17[637];
                      *(void *)(*(void *)v74 + 8 * v142) = *((void *)v17 + 319);
                      uint64_t v140 = (char *)(*((void *)v17 + 319) + 4 * v360);
                      *((void *)v17 + 319) = v140;
                      v17[637] = v142 + 1;
                      if ((int)v142 + 1 >= *((unsigned __int16 *)v74 + 10))
                      {
                        int v73 = v17[1];
                        break;
                      }
                    }
                  }
                  v17[188] = 0;
                  v17[1] = v73 + 1;
                  unsigned int v30 = 1;
                  if (v73 >= 2)
                  {
                    *uint64_t v17 = 25;
LABEL_189:
                    unint64_t v143 = v17[75];
                    uint64_t v144 = (v143 << 6);
                    uint64_t v145 = *((void *)v17 + 86);
                    *((void *)v17 + 19) = v145 + v144;
                    v17[64] = (*(unsigned int *)((char *)v17 + ((v143 >> 3) & 0x1FFFFFFC) + 720) >> v143) & 1;
                    *((void *)v17 + 43) = *(void *)(*((void *)v17 + 21)
                                                      + 8 * *(unsigned __int8 *)(v145 + v144));
                    *((void *)v17 + 18) = (char *)&unk_248551B18
                                          + 512 * (unint64_t)(*(unsigned char *)(*((void *)v17 + 87) + v143) & 3);
                    *((void *)v17 + 20) = *((void *)v17 + 42);
                    *((void *)v17 + 17) = **((void **)v17 + 24);
                    int v146 = sub_2483E6048((uint64_t)v17);
                    unsigned int v30 = -27;
                    if (v146)
                    {
                      int v147 = v17[81];
                      if (v147)
                      {
                        for (int j = 0; j != v147; v34[v149] = j)
                        {
                          unsigned int v149 = j + 16;
                          *((unsigned char *)v33 + v149) = 0;
                          ++j;
                        }
                        unsigned int v150 = j + 16;
                      }
                      else
                      {
                        unsigned int v150 = 16;
                      }
                      unsigned int v151 = *((unsigned __int16 *)v17 + 117);
                      if (v150 < v151)
                      {
                        int v152 = 0;
                        int v153 = v17[80];
                        char v154 = 1;
                        do
                        {
                          unsigned int v155 = 1;
                          do
                          {
                            unsigned int v156 = v150 + v155 - 1;
                            *((unsigned char *)v33 + v156) = v154;
                            v34[v156] = v147 + ((((v152 + 2) << v154) - 4) << v153) + v155;
                          }
                          while (!(v155++ >> v153));
                          unsigned int v150 = v150 + v155 - 1;
                          v154 += v152;
                          v152 ^= 1u;
                        }
                        while (v150 < v151);
                      }
                      *uint64_t v17 = 7;
LABEL_201:
                      unsigned int v30 = sub_2483E60F4((uint64_t)v17);
                      if (v30 == 2)
                      {
                        unsigned int v141 = sub_2483E6BF0((uint64_t)v17);
LABEL_203:
                        unsigned int v30 = v141;
                        continue;
                      }
                    }
                  }
                  break;
                case 25:
                  goto LABEL_189;
                case 26:
                  goto LABEL_232;
                default:
                  continue;
              }
            }
            if (v30 == 2)
            {
              if (*((void *)v17 + 15)
                && (unsigned int v35 = sub_2483E424C((uint64_t)v17, (size_t *)v363, v28, 1), (v35 & 0x80000000) != 0))
              {
                unsigned int v30 = v35;
              }
              else
              {
                uint64_t v36 = v17[18];
                if (v36)
                {
                  if (!*((void *)v17 + 4))
                  {
                    v17[18] = 0;
                    unsigned int v30 = 1;
                    *((void *)v17 + 3) = v15;
                    *((void *)v17 + 4) = v31;
                    continue;
                  }
                  if (v31)
                  {
                    char v37 = *v15++;
                    *((unsigned char *)v32 + v36) = v37;
                    uint64_t v38 = (v17[18] + 1);
                    v17[18] = v38;
                    *((void *)v17 + 4) = v38;
                    --v31;
                    unsigned int v30 = 1;
                    continue;
                  }
                  unsigned int v30 = 2;
                }
                else
                {
                  uint64_t v15 = (char *)*((void *)v17 + 3);
                  uint64_t v166 = *((void *)v17 + 4);
                  if (v166)
                  {
                    unsigned int v167 = 0;
                    do
                    {
                      char v168 = *v15++;
                      *((unsigned char *)v32 + v167) = v168;
                      unsigned int v167 = v17[18] + 1;
                      v17[18] = v167;
                      --v166;
                    }
                    while (v166);
                  }
                  uint64_t v31 = 0;
                  unsigned int v30 = 2;
                }
              }
            }
            else if (v17[18])
            {
              v17[18] = 0;
            }
            else
            {
              int v171 = v17[4];
              uint64_t v172 = (64 - v171) >> 3;
              unsigned int v173 = (64 - v171) & 0xFFFFFFF8;
              uint64_t v31 = (unsigned char *)(*((void *)v17 + 4) + v172);
              uint64_t v15 = (char *)(*((void *)v17 + 3) - v172);
              *((void *)v17 + 3) = v15;
              *((void *)v17 + 4) = v31;
              if (v173 == 64) {
                unint64_t v174 = 0;
              }
              else {
                unint64_t v174 = *v355 << v173;
              }
              *((void *)v17 + 1) = v174;
              v17[4] = v173 + v171;
            }
            break;
          }
          uint64_t v170 = __p - v31;
          uint64_t v169 = (uint64_t)v17;
LABEL_250:
          int v165 = sub_2483E422C(v169, v30, v170);
          if (!v165) {
            goto LABEL_256;
          }
          goto LABEL_251;
        }
LABEL_35:
        uint64_t v27 = 2;
        goto LABEL_257;
      }
      if (!*(unsigned char *)(v2 + 3570) && *(void *)(v2 + 3576) < v16) {
        unint64_t v16 = *(void *)(v2 + 3576);
      }
      if (v12 >= v16) {
        size_t v22 = v16;
      }
      else {
        size_t v22 = v11 - v9;
      }
      memcpy(v10, v15, v22);
      *(void *)&long long v362 = v362 + v22;
      if (*(unsigned char *)(v2 + 3570))
      {
        *(void *)(v2 + 3584) += v22;
        if (v12 >= v16) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(v2 + 3576);
        *(void *)(v2 + 3576) = v26 - v22;
        *(void *)(v2 + 3584) += v22;
        if (v12 >= v16)
        {
          if (v26 != v22) {
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v27 = 0;
          goto LABEL_257;
        }
      }
      uint64_t v27 = 7;
      goto LABEL_257;
    }
LABEL_259:
    switch(v4)
    {
      case 0:
        goto LABEL_260;
      case 1:
        if (*(void *)(v2 + 928) < 0xCuLL) {
          return 1;
        }
        unint64_t v322 = *(void *)(v2 + 3600);
        BOOL v23 = v322 >= 4;
        unint64_t v323 = v322 - 4;
        if (!v23) {
          goto LABEL_583;
        }
        unint64_t v324 = *(_DWORD **)(v2 + 3592);
        if (*v324 != 543979626) {
          return 1;
        }
        *(void *)(v2 + 3592) = v324 + 1;
        *(void *)(v2 + 3600) = v323;
        *(void *)(v2 + 904) += 4;
        int v4 = 2;
        goto LABEL_548;
      case 2:
        if (*(unsigned char *)(v2 + 952))
        {
          if (*(unsigned char *)(v2 + 3608) || !*(unsigned char *)(v2 + 963)) {
            return *(_DWORD *)(v2 + 32) != 2;
          }
          uint64_t v334 = *(void *)(v2 + 3600);
          *(void *)(v2 + 3592) += v334;
          *(void *)(v2 + 3600) = 0;
          uint64_t v332 = *(void *)(v2 + 904) + v334;
          goto LABEL_577;
        }
        uint64_t v198 = *(void *)(v2 + 920);
        uint64_t v199 = *(void *)(v2 + 904);
        uint64_t v200 = v198 - v199;
        unint64_t v201 = *(void *)(v2 + 3600);
        unint64_t v202 = v201 - (v198 - v199);
        if (v201 < v198 - v199)
        {
          *(void *)(v2 + 1016) = v200 + 98;
          *(void *)(v2 + 3592) += v201;
          *(void *)(v2 + 3600) = 0;
          uint64_t v332 = v201 + v199;
LABEL_577:
          *(void *)(v2 + 904) = v332;
          goto LABEL_583;
        }
        int v4 = 0;
        *(void *)(v2 + 3592) += v200;
        *(void *)(v2 + 3600) = v202;
        *(void *)(v2 + 904) = v198;
        *(_DWORD *)(v2 + 3552) = 0;
        continue;
      case 3:
        if (!*(void *)(v2 + 24)) {
          operator new();
        }
        if (!*(unsigned char *)(v2 + 39))
        {
          if (*(unsigned char *)(v2 + 38)) {
            goto LABEL_529;
          }
          long long v362 = 0uLL;
          uint64_t v27 = sub_248416190(v2, &v362);
          uint64_t v2 = v357;
          if (v27) {
            goto LABEL_545;
          }
          if (*((void *)&v362 + 1) <= 1uLL)
          {
            sub_2484162BC(v357);
            uint64_t v27 = 2;
            goto LABEL_544;
          }
          if (*(unsigned __int8 *)v362 == 255 && *(unsigned char *)(v362 + 1) == 10)
          {
            *(unsigned char *)(v357 + 38) = 1;
            sub_248412458(v357, 2uLL);
LABEL_529:
            long long v361 = 0uLL;
            uint64_t v27 = sub_248416190(v2, &v361);
            if (!v27) {
              sub_248416374((uint64_t)v363, v361, *((uint64_t *)&v361 + 1));
            }
LABEL_544:
            uint64_t v2 = v357;
            goto LABEL_545;
          }
          uint64_t v27 = 1;
LABEL_545:
          unint64_t v3 = v352;
          if (v27 != 2) {
            return v27;
          }
LABEL_546:
          if (*(void *)(v2 + 904) != *(void *)(v2 + 920)) {
            goto LABEL_583;
          }
          int v4 = *(unsigned __int8 *)(v2 + 952);
          if (*(unsigned char *)(v2 + 952)) {
            goto LABEL_583;
          }
LABEL_548:
          *(_DWORD *)(v2 + 3552) = v4;
          continue;
        }
        int v203 = *(_DWORD *)(v2 + 1008);
        if ((v203 & 0x40) != 0)
        {
          *(_DWORD *)(v2 + 1008) = v203 & 0xFFFFFFBF;
          return 64;
        }
        if (!v203)
        {
          uint64_t v27 = 0;
          *(_DWORD *)(v2 + 32) = 2;
          return v27;
        }
        if (!*(unsigned char *)(v2 + 41))
        {
          if (*(unsigned char *)(v2 + 40))
          {
            long long v361 = 0uLL;
            uint64_t v27 = sub_248416190(v2, &v361);
            if (!v27) {
              sub_248416374((uint64_t)&v362, v361, *((uint64_t *)&v361 + 1));
            }
          }
          else
          {
            long long v361 = 0uLL;
            uint64_t v27 = sub_248416190(v2, &v361);
            if (!v27) {
              sub_248416374((uint64_t)v363, v361, *((uint64_t *)&v361 + 1));
            }
          }
          goto LABEL_544;
        }
        if ((v203 & 0x100) != 0)
        {
          *(_DWORD *)(v2 + 1008) = v203 & 0xFFFFFEFF;
          return 256;
        }
        *(unsigned char *)(v2 + 42) = 1;
        if (!*(unsigned char *)(v2 + 896) && *(unsigned char *)(v2 + 1444)) {
          *(unsigned char *)(v2 + 897) = 1;
        }
        while (1)
        {
          if ((v203 & 0x1600) == 0) {
            goto LABEL_534;
          }
          int v204 = *(_DWORD *)(v2 + 3368);
          if (!v204)
          {
            if (!*(unsigned char *)(v2 + 3374))
            {
              if (!*(void *)(v2 + 3296)) {
                operator new();
              }
              operator new();
            }
LABEL_534:
            int v4 = 2;
            *(_DWORD *)(v2 + 32) = 2;
            int v325 = v203 & 0x4000;
            if (*(unsigned char *)(v2 + 952)) {
              BOOL v326 = 1;
            }
            else {
              BOOL v326 = v325 == 0;
            }
            if (v326) {
              return *(_DWORD *)(v2 + 32) != 2;
            }
            goto LABEL_548;
          }
          if (v204 != 2)
          {
            if (v204 != 1) {
              goto LABEL_473;
            }
            uint64_t v205 = *(void *)(v2 + 3312);
            *(_WORD *)(v205 + 1328) = *(_WORD *)(v2 + 1002);
            if (!*(unsigned char *)(v2 + 897) && (*(unsigned char *)(v2 + 1009) & 0x80) != 0)
            {
              int v315 = sub_248416AA8(v205, *(_DWORD *)(v2 + 1040));
              uint64_t v2 = v357;
              *(_DWORD *)(v357 + 1044) = v315;
              uint64_t v205 = *(void *)(v357 + 3312);
            }
            else
            {
              *(_DWORD *)(v2 + 1044) = 0;
            }
            *(unsigned char *)(v2 + 3372) = 0;
            *(void *)(v2 + 3320) = 0;
            *(void *)(v2 + 3336) = *(void *)(v2 + 3328);
            uint64_t v207 = *(void *)(v205 + 16);
            uint64_t v206 = *(void *)(v205 + 24);
            LOBYTE(v362) = 0;
            uint64_t v208 = v206 - v207;
            if (v208)
            {
              sub_2483EE700(v358, v208 >> 4, &v362);
              uint64_t v2 = v357;
            }
            if (!*(unsigned char *)(v2 + 897))
            {
              int v203 = *(_DWORD *)(v2 + 1008);
              if ((v203 & 0x1000) == 0)
              {
                unint64_t v3 = v352;
                if (*(unsigned char *)(v2 + 3374)) {
                  goto LABEL_534;
                }
                *(_DWORD *)(v2 + 3368) = 0;
                sub_248412458(v2, *(void *)(v2 + 3360));
                goto LABEL_508;
              }
            }
            *(_DWORD *)(v2 + 3368) = 2;
          }
          if (*(unsigned char *)(v2 + 1056))
          {
            *(void *)&long long v362 = 0;
            v363[0] = 0;
            sub_248416D1C(v2, (uint64_t *)&v362, v363);
            unint64_t v209 = *(void *)(v2 + 1152);
            uint64_t v210 = *(unsigned int *)(v2 + 1132);
            if (v209 == 2)
            {
              unint64_t v211 = HIDWORD(v209);
            }
            else if (v209 == 1)
            {
              unint64_t v211 = *(unsigned int *)(v2 + 1220);
            }
            else if (v209 || v210 >= 6)
            {
              unint64_t v211 = 0;
            }
            else
            {
              unint64_t v211 = dword_24854F4D8[v210];
            }
            uint64_t v212 = *(int8x16_t ***)(v2 + 3312);
            int8x16_t v213 = *(int8x16_t *)(v2 + 1072);
            int8x16_t v214 = *(int8x16_t *)(v2 + 1088);
            uint64_t v215 = *(void *)(v2 + 1064);
            uint64_t v216 = *(void *)(v2 + 1120);
            uint64_t v217 = v362;
            uint64_t v218 = v363[0];
            uint64_t v219 = *(unsigned int *)(v2 + 1128);
            uint64_t v220 = *(void *)(v2 + 1136);
            unint64_t v221 = *(void *)(v2 + 1144);
            int v222 = *(unsigned __int8 *)(v2 + 1001);
            int v223 = *(unsigned __int8 *)(v2 + 1000);
            uint64_t v224 = *v212;
            v224[270].i64[0] = v362;
            v224[270].i64[1] = v218;
            v224[271].i32[0] = v219;
            v224[271].i32[1] = v210;
            v224[271].i64[1] = v220;
            uint64_t v225 = v217;
            v224[272].i64[0] = v221;
            uint64_t v226 = *v212;
            v226[272].i64[1] = v211;
            v226[273] = v213;
            v226[274] = v214;
            uint64_t v227 = *v212;
            v227[275].i64[0] = v215;
            v227[275].i64[1] = v216;
            if (v210) {
              char v228 = 1;
            }
            else {
              char v228 = 2;
            }
            if (v210 == 2) {
              char v229 = 0;
            }
            else {
              char v229 = v228;
            }
            unint64_t v230 = (v217 << v229) * v219;
            if (v221 >= 2) {
              unint64_t v230 = (v221 + v230 - 1) / v221 * v221;
            }
            v227[276].i64[0] = v230;
            uint64_t v231 = v212[96][5].i64[1];
            for (uint64_t k = *(void *)(v231 + 328); k != *(void *)(v231 + 336); k += 96)
            {
              if (!*(_DWORD *)(k + 12))
              {
                if (*(unsigned char *)(k + 72)) {
                  BOOL v233 = v222 == 0;
                }
                else {
                  BOOL v233 = 1;
                }
                if (!v233) {
                  v227[278].i8[1] = 1;
                }
                break;
              }
            }
            if (!v223)
            {
              int v234 = *(_DWORD *)(v231 + 248);
              v227[278].i32[1] = v234;
              if (v234 >= 5) {
                v227[270] = vextq_s8(v227[270], v227[270], 8uLL);
              }
            }
            v227[277].i64[0] = v227[276].i64[1];
            uint64_t v235 = *(void *)(v2 + 1168);
            if (*(void *)(v2 + 1176) != v235)
            {
              unint64_t v236 = 0;
              uint64_t v351 = v217;
              do
              {
                uint64_t v237 = (unsigned int *)(v235 + 40 * v236);
                unint64_t v238 = *(void *)(v2 + 1152);
                if (v238 == 2)
                {
                  unint64_t v240 = HIDWORD(v238);
                }
                else if (v238 == 1)
                {
                  unint64_t v240 = *(unsigned int *)(*(void *)(v2 + 1520) + 96 * v236 + 28);
                }
                else if (v238 || (uint64_t v239 = v237[1], v239 >= 6))
                {
                  unint64_t v240 = 0;
                }
                else
                {
                  unint64_t v240 = dword_24854F4D8[v239];
                }
                uint64_t v241 = *v237;
                unsigned int v242 = v237[1];
                unint64_t v243 = *((void *)v237 + 2);
                if (v242) {
                  char v244 = 1;
                }
                else {
                  char v244 = 2;
                }
                if (v242 == 2) {
                  char v244 = 0;
                }
                unint64_t v245 = (v225 << v244) * v241;
                if (v243 >= 2) {
                  unint64_t v245 = (v243 + v245 - 1) / v243 * v243;
                }
                uint64_t v246 = v235 + 40 * v236;
                uint64_t v248 = *(void *)(v246 + 24);
                uint64_t v247 = *(void *)(v246 + 32);
                uint64_t v249 = (void *)*((void *)v237 + 1);
                unint64_t v250 = (void *)**v359;
                unint64_t v251 = v250[554];
                unint64_t v252 = v250[555];
                if (v251 >= v252)
                {
                  uint64_t v254 = v250[553];
                  uint64_t v255 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v251 - v254) >> 3);
                  unint64_t v256 = v255 + 1;
                  if ((unint64_t)(v255 + 1) > 0x2E8BA2E8BA2E8BALL) {
                    sub_2483E92E8();
                  }
                  unint64_t v257 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v252 - v254) >> 3);
                  if (2 * v257 > v256) {
                    unint64_t v256 = 2 * v257;
                  }
                  if (v257 >= 0x1745D1745D1745DLL) {
                    unint64_t v258 = 0x2E8BA2E8BA2E8BALL;
                  }
                  else {
                    unint64_t v258 = v256;
                  }
                  if (v258)
                  {
                    __pa = v249;
                    int v356 = v241;
                    if (v258 > 0x2E8BA2E8BA2E8BALL) {
                      sub_2483E9338();
                    }
                    uint64_t v259 = v247;
                    unint64_t v260 = v258;
                    uint64_t v261 = (char *)operator new(88 * v258);
                    uint64_t v247 = v259;
                    uint64_t v249 = __pa;
                    LODWORD(v241) = v356;
                  }
                  else
                  {
                    uint64_t v261 = 0;
                    unint64_t v260 = 0;
                  }
                  unsigned int v262 = &v261[88 * v255];
                  *(_DWORD *)unsigned int v262 = v241;
                  *((_DWORD *)v262 + 1) = v242;
                  *((void *)v262 + 1) = v249;
                  *((void *)v262 + 2) = v243;
                  *((void *)v262 + 3) = v240;
                  *((_OWORD *)v262 + 2) = 0u;
                  *((_OWORD *)v262 + 3) = 0u;
                  *((void *)v262 + 8) = v248;
                  *((void *)v262 + 9) = v247;
                  *((void *)v262 + 10) = v245;
                  uint64_t v263 = (char *)v250[554];
                  float v264 = (char *)v250[553];
                  float v265 = v262;
                  if (v263 != v264)
                  {
                    do
                    {
                      long long v266 = *(_OWORD *)(v263 - 88);
                      *(_OWORD *)(v265 - 72) = *(_OWORD *)(v263 - 72);
                      *(_OWORD *)(v265 - 88) = v266;
                      long long v267 = *(_OWORD *)(v263 - 56);
                      long long v268 = *(_OWORD *)(v263 - 40);
                      long long v269 = *(_OWORD *)(v263 - 24);
                      *((void *)v265 - 1) = *((void *)v263 - 1);
                      *(_OWORD *)(v265 - 24) = v269;
                      *(_OWORD *)(v265 - 40) = v268;
                      *(_OWORD *)(v265 - 56) = v267;
                      v265 -= 88;
                      v263 -= 88;
                    }
                    while (v263 != v264);
                    uint64_t v263 = (char *)v250[553];
                  }
                  v250[553] = v265;
                  uint64_t v253 = v262 + 88;
                  v250[554] = v262 + 88;
                  v250[555] = &v261[88 * v260];
                  if (v263) {
                    operator delete(v263);
                  }
                  uint64_t v2 = v357;
                  uint64_t v225 = v351;
                }
                else
                {
                  *(_DWORD *)unint64_t v251 = v241;
                  *(_DWORD *)(v251 + 4) = v242;
                  *(void *)(v251 + 8) = v249;
                  *(void *)(v251 + 16) = v243;
                  *(void *)(v251 + 24) = v240;
                  *(_OWORD *)(v251 + 32) = 0u;
                  *(_OWORD *)(v251 + 48) = 0u;
                  *(void *)(v251 + 64) = v248;
                  *(void *)(v251 + 72) = v247;
                  uint64_t v253 = (char *)(v251 + 88);
                  *(void *)(v251 + 80) = v245;
                }
                v250[554] = v253;
                ++v236;
                uint64_t v235 = *(void *)(v2 + 1168);
              }
              while (v236 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v2 + 1176) - v235) >> 3));
            }
          }
          else
          {
            if (*(unsigned char *)(v2 + 897)) {
              return 3;
            }
            if (*(unsigned char *)(v2 + 3373) && !*(unsigned char *)(v2 + 3384)) {
              return 5;
            }
          }
          unint64_t v270 = sub_2483FFBA0(*(void **)(v2 + 3312));
          long long v362 = 0uLL;
          uint64_t v27 = sub_248416190(v2, &v362);
          if (v27) {
            goto LABEL_544;
          }
          uint64_t v271 = v357;
          uint64_t v272 = *(void *)(v357 + 3312);
          unint64_t v273 = *(void *)(v357 + 3320);
          uint64_t v275 = *(void *)(v272 + 16);
          uint64_t v274 = *(void *)(v272 + 24);
          if (v273 >= (v274 - v275) >> 4)
          {
            uint64_t v279 = *(void **)(v357 + 3312);
            int v280 = v279;
          }
          else
          {
            uint64_t v276 = 0;
            while (1)
            {
              uint64_t v277 = (void *)(v275 + 16 * v273);
              if (!*(unsigned char *)(*v358 + v273)) {
                break;
              }
              ++v273;
              v276 += *v277;
              if (v273 >= (v274 - v275) >> 4) {
                goto LABEL_436;
              }
            }
            BOOL v278 = __CFADD__(*v277, v276);
            if ((unint64_t)(*v277 + v276) <= *((void *)&v362 + 1) && !v278) {
              operator new();
            }
LABEL_436:
            uint64_t v279 = *v359;
            uint64_t v271 = v357;
            int v280 = *(void **)(v357 + 3312);
          }
          int v281 = 1;
          if (!sub_2483FB1BC((uint64_t)v279, 0, 0, 0))
          {
            uint64_t v282 = *(void *)(v271 + 3328);
            unint64_t v283 = *(void *)(v271 + 3336) - v282;
            unint64_t v284 = *(void *)(v271 + 3320);
            if (v284 >= v283)
            {
              unint64_t v285 = 0;
            }
            else
            {
              unint64_t v285 = 0;
              uint64_t v286 = 16 * v284;
              do
              {
                if (*(unsigned char *)(v282 + v284) != 1) {
                  break;
                }
                v285 += *(void *)(v280[2] + v286);
                *(void *)(v271 + 3320) = ++v284;
                v286 += 16;
              }
              while (v284 < v283);
            }
            *(void *)(v271 + 3360) -= v285;
            sub_248412458(v271, v285);
            int v281 = 0;
          }
          if (v281) {
            return 1;
          }
          long long v287 = *v359;
          uint64_t v288 = (uint64_t)((*v359)[3] - (*v359)[2]) >> 4;
          uint64_t v289 = (*v359)[177];
          BOOL v290 = v288 != v289 && *((unsigned char *)v287 + 1410) != 0;
          int v291 = *(_DWORD *)(v271 + 1044);
          if (v291 >= 1)
          {
            char v292 = !v290;
            if (*(unsigned char *)(v271 + 3372)) {
              char v292 = 1;
            }
            if ((v292 & 1) == 0)
            {
              *(unsigned char *)(v271 + 3372) = 1;
              uint64_t v335 = 8;
              goto LABEL_591;
            }
          }
          unsigned int v293 = (unsigned __int8 *)v287[170];
          uint64_t v294 = (unsigned __int8 *)v287[171];
          uint64_t v295 = v293 + 1;
          BOOL v296 = v293 == v294 || v295 == v294;
          char v297 = v296;
          uint64_t v298 = (unsigned __int8 *)v287[170];
          if (!v296)
          {
            unsigned __int8 v299 = *v293;
            char v300 = v293 + 1;
            uint64_t v298 = (unsigned __int8 *)v287[170];
            int v301 = v293 + 1;
            do
            {
              unsigned int v303 = *v301++;
              unsigned __int8 v302 = v303;
              if (v303 < v299)
              {
                unsigned __int8 v299 = v302;
                uint64_t v298 = v300;
              }
              char v300 = v301;
            }
            while (v301 != v294);
          }
          if (v288 != v289) {
            break;
          }
          if (!*(unsigned char *)(v271 + 897))
          {
            if (!*((unsigned char *)v287 + 1424) && *((unsigned char *)v287 + 1408) && *((unsigned char *)v287 + 1409))
            {
              char v306 = (unsigned char *)v287[173];
              uint64_t v307 = (unsigned char *)v287[174];
              if (v306 == v307)
              {
LABEL_485:
                if (v293 == v294) {
                  goto LABEL_493;
                }
                unsigned int v308 = *((_DWORD *)v287 + 40);
                do
                  unsigned int v309 = *(v295 - 1);
                while (v308 <= v309 && v295++ != v294);
                if (v308 <= v309)
                {
LABEL_493:
                  int v311 = *((_DWORD *)v287 + 16);
                  if (v311 == 3 || v311 == 0)
                  {
                    if (*((unsigned char *)v287 + 304) || (int v304 = *((_DWORD *)v287 + 90)) != 0) {
                      int v304 = 1 << *((_DWORD *)v287 + 93);
                    }
                    for (uint64_t m = v287[49]; m != v287[50]; m += 40)
                    {
                      if (*((unsigned __int8 *)v287 + 304) | *(_DWORD *)(m + 8)) {
                        int v314 = 1 << *(_DWORD *)(m + 20);
                      }
                      else {
                        int v314 = 0;
                      }
                      v304 |= v314;
                    }
                  }
                  else
                  {
                    int v304 = 0;
                  }
                  uint64_t v316 = v287[9];
                  if ((v316 & 2) != 0)
                  {
                    uint64_t v317 = *(void *)(*v287 + 4208);
                    unint64_t v318 = *(int **)(v317 + 1288);
                    uint64_t v319 = *(int **)(v317 + 1296);
                    if (v318 == v319)
                    {
                      int v320 = 0;
                    }
                    else
                    {
                      int v320 = 0;
                      do
                      {
                        int v321 = *v318;
                        v318 += 10;
                        v320 |= 1 << v321;
                      }
                      while (v318 != v319);
                    }
                    v304 |= v320;
                  }
                  if ((v316 & 0x20) != 0) {
                    v304 |= 16 << *((_DWORD *)v287 + 113);
                  }
                  goto LABEL_468;
                }
              }
              else
              {
                while (*v306)
                {
                  if (++v306 == v307) {
                    goto LABEL_485;
                  }
                }
              }
            }
            int v304 = 0;
LABEL_468:
            *(_DWORD *)(*v349 + 4 * (*(void *)(v271 + 3392) - 1)) = v304;
          }
          if (sub_2483FD840((uint64_t)v287)) {
            return 1;
          }
          uint64_t v2 = v357;
          if (*(unsigned char *)(v357 + 897) || *(unsigned char *)(v357 + 3373))
          {
            *(unsigned char *)(v357 + 1056) = 0;
            *(void *)(v357 + 1176) = *(void *)(v357 + 1168);
          }
LABEL_473:
          *(_DWORD *)(v2 + 3368) = 0;
          uint64_t v305 = *(uint64_t **)(v2 + 3296);
          *(void *)(v2 + 3296) = 0;
          if (v305) {
            sub_248410870(v305);
          }
          unint64_t v3 = v352;
          if (*(unsigned char *)(v2 + 897))
          {
            *(_WORD *)(v2 + 896) = 1;
            *(_DWORD *)(v2 + 1008) &= ~0x200u;
            return 512;
          }
          if (*(unsigned char *)(v2 + 3373) && (*(unsigned char *)(v2 + 1009) & 0x10) != 0 && !*(unsigned char *)(v2 + 3384)) {
            return 4096;
          }
LABEL_508:
          int v203 = *(_DWORD *)(v2 + 1008);
        }
        if (v291 < 2 || v270 > *v298)
        {
          sub_2484162BC(v271);
          uint64_t v2 = v357;
          unint64_t v3 = v352;
          goto LABEL_546;
        }
        unint64_t v336 = *(_DWORD **)(v271 + 3352);
        if ((v297 & 1) == 0)
        {
          unsigned __int8 v337 = *v293;
          uint64_t v338 = v293 + 1;
          do
          {
            unsigned int v340 = *v338++;
            unsigned __int8 v339 = v340;
            if (v340 < v337)
            {
              unsigned __int8 v337 = v339;
              unsigned int v293 = v295;
            }
            uint64_t v295 = v338;
          }
          while (v338 != v294);
        }
        unsigned int v341 = *v293;
        if (v336[28] <= v341)
        {
          unsigned int v344 = 1;
        }
        else
        {
          uint64_t v342 = v336[29];
          if (v342)
          {
            uint64_t v343 = v336 + 30;
            unsigned int v344 = 8;
            do
            {
              if (v343[11] < v341 && *v343 < v344) {
                unsigned int v344 = *v343;
              }
              ++v343;
              --v342;
            }
            while (v342);
          }
          else
          {
            unsigned int v344 = 8;
          }
        }
        uint64_t v335 = v344;
LABEL_591:
        *(void *)(v271 + 1048) = v335;
        return 0x8000;
      case 4:
        if (*(unsigned char *)(v2 + 37)) {
          return 1;
        }
        unint64_t v195 = *(void *)(v2 + 3600);
        BOOL v23 = v195 >= 4;
        unint64_t v196 = v195 - 4;
        if (!v23) {
          goto LABEL_583;
        }
        if (!*(unsigned char *)(v2 + 952) && *(void *)(v2 + 928) < 4uLL) {
          return 1;
        }
        char v197 = *(unsigned char **)(v2 + 3592);
        if ((*v197 & 0x80) != 0) {
          *(unsigned char *)(v2 + 37) = 1;
        }
        *(void *)(v2 + 3592) = v197 + 4;
        *(void *)(v2 + 3600) = v196;
        *(void *)(v2 + 904) += 4;
        int v4 = 3;
        goto LABEL_548;
      default:
        continue;
    }
  }
}

void sub_248415FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  if (STACK[0x210]) {
    operator delete((void *)STACK[0x210]);
  }
  uint64_t v50 = *(void *)(v48 - 160);
  *(void *)(v48 - 160) = 0;
  if (v50)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v50 - 24));
    free(*(void **)(v50 - 32));
  }
  sub_2484164D0((uint64_t *)&STACK[0x240]);
  sub_248416538(a48);
  _Unwind_Resume(a1);
}

uint64_t sub_248416190(uint64_t a1, void *a2)
{
  int v4 = *(char **)(a1 + 3504);
  uint64_t v5 = *(char **)(a1 + 3512);
  if (v4 == v5)
  {
    unint64_t v11 = *(void *)(a1 + 3536);
    if (v11)
    {
      unint64_t v12 = *(void *)(a1 + 3600);
      if (*(unsigned char *)(a1 + 952))
      {
        uint64_t v13 = *(void *)(a1 + 904);
        unint64_t v14 = *(void *)(a1 + 3600);
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 904);
        unint64_t v14 = *(void *)(a1 + 920) - v13;
        if (v14 >= v12) {
          unint64_t v14 = *(void *)(a1 + 3600);
        }
      }
      uint64_t v15 = v14 >= v11 ? *(void *)(a1 + 3536) : v14;
      *(void *)(a1 + 3592) += v15;
      *(void *)(a1 + 3600) = v12 - v15;
      *(void *)(a1 + 904) = v13 + v15;
      *(void *)(a1 + 3536) = v11 - v15;
      if (v14 < v11) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v6 = *(void *)(a1 + 3600);
  if (!*(unsigned char *)(a1 + 952))
  {
    uint64_t v7 = *(void *)(a1 + 904);
    if (*(void *)(a1 + 920) - v7 < v6) {
      unint64_t v6 = *(void *)(a1 + 920) - v7;
    }
  }
  if (v4 != v5)
  {
    sub_2483EFFD4(a1 + 3504, v5, (char *)(*(void *)(a1 + 3592) + *(void *)(a1 + 3528)), (char *)(*(void *)(a1 + 3592) + v6), v6 - *(void *)(a1 + 3528));
    uint64_t result = 0;
    *(void *)(a1 + 3528) = v6;
    uint64_t v9 = *(void *)(a1 + 3504) + *(void *)(a1 + 3536);
    uint64_t v10 = *(void *)(a1 + 3512) - v9;
    *a2 = v9;
    a2[1] = v10;
    return result;
  }
  if (!v6)
  {
LABEL_18:
    sub_2484162BC(a1);
    return 2;
  }
  else
  {
    uint64_t result = 0;
    *a2 = *(void *)(a1 + 3592);
    a2[1] = v6;
  }
  return result;
}

void sub_2484162BC(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 3504);
  if (v2 == *(char **)(a1 + 3512))
  {
    uint64_t v4 = a1 + 3504;
    unint64_t v5 = *(void *)(a1 + 3600);
    if (!*(unsigned char *)(a1 + 952))
    {
      uint64_t v6 = *(void *)(a1 + 904);
      if (*(void *)(a1 + 920) - v6 < v5) {
        unint64_t v5 = *(void *)(a1 + 920) - v6;
      }
    }
    sub_2483EFFD4(v4, v2, *(char **)(a1 + 3592), (char *)(*(void *)(a1 + 3592) + v5), v5);
    *(void *)(a1 + 3592) += v5;
    *(void *)(a1 + 3600) -= v5;
    *(void *)(a1 + 904) += v5;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 3528);
    *(void *)(a1 + 3592) += v3;
    *(void *)(a1 + 3600) -= v3;
    *(void *)(a1 + 904) += v3;
    *(void *)(a1 + 3528) = 0;
  }
}

void sub_248416374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  uint64_t v4 = a3;
  operator new();
}

unint64_t *sub_24841642C(unint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v3 = result[1];
  if (v3 >= a2)
  {
    result[1] = v3 - a2;
    unint64_t v12 = *result >> a2;
    goto LABEL_6;
  }
  char v4 = a2 - v3;
  unint64_t v5 = (a2 - v3) >> 3;
  uint64_t v6 = v4 & 7;
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v8 = result[2];
  unint64_t v7 = result[3];
  if (v5 > v7 + 8 - v8)
  {
    v6 |= 8uLL;
    result[2] = v7 + 8;
    goto LABEL_9;
  }
  uint64_t v9 = (unint64_t *)(v8 + v5);
  result[2] = v8 + v5;
  if (v8 + v5 > v7)
  {
LABEL_9:
    uint64_t result = sub_2483EB0C0(result);
    unint64_t v10 = *v2;
    uint64_t v11 = v2[1];
    goto LABEL_5;
  }
  unint64_t v10 = *v9;
  result[2] = (unint64_t)v9 + 7;
  uint64_t v11 = 56;
LABEL_5:
  v2[1] = v11 - v6;
  unint64_t v12 = v10 >> v6;
LABEL_6:
  *uint64_t v2 = v12;
  return result;
}

uint64_t *sub_2484164D0(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      sub_2484175A4();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

void *sub_248416538(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_2484165BC(unint64_t *a1)
{
  unint64_t v1 = a1[1];
  if ((-*((unsigned char *)a1 + 8) & 7) == 0) {
    return 0;
  }
  uint64_t v3 = 8 - (-*((unsigned char *)a1 + 8) & 7);
  char v4 = (void *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v5 = *a1;
    uint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v5 = *a1 | (*v4 << v1);
    a1[2] = (unint64_t)v4 + ((63 - v1) >> 3);
    uint64_t v6 = v1 | 0x38;
  }
  *a1 = v5 >> v3;
  a1[1] = v6 - v3;
  return (v5 & ~(-1 << v3)) != 0;
}

void sub_248416658(uint64_t a1)
{
  uint64_t v1 = sub_248416EB4(a1);
  *(void *)(v1 + 4208) = v1;
  *(void *)(v1 + 4312) = 0;
  *(_OWORD *)(v1 + 4280) = 0u;
  *(_OWORD *)(v1 + 4296) = 0u;
  *(_OWORD *)(v1 + 4368) = 0u;
  *(_OWORD *)(v1 + 4384) = 0u;
  *(void *)(v1 + 4424) = 0;
  *(_OWORD *)(v1 + 4432) = 0u;
  *(void *)(v1 + 4264) = 0;
  *(_OWORD *)(v1 + 4216) = 0u;
  *(_OWORD *)(v1 + 4232) = 0u;
  *(_OWORD *)(v1 + 4248) = 0u;
  *(_OWORD *)(v1 + 4456) = 0u;
  *(_DWORD *)(v1 + 4472) = 0;
  operator new();
}

void sub_24841677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 5192) = &unk_26FC65EC8;
  uint64_t v13 = *(void **)(v10 + 5224);
  if (v13)
  {
    *(void *)(v10 + 5232) = v13;
    operator delete(v13);
  }
  *(void *)(v10 + 4944) = &unk_26FC65EC8;
  unint64_t v14 = *(void **)(v10 + 4976);
  if (v14)
  {
    *(void *)(v10 + 4984) = v14;
    operator delete(v14);
  }
  sub_2484172B0(v11);
  uint64_t v15 = *(void *)(v10 + 4488);
  *(void *)(v10 + 4488) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(v10 + 4480);
  *(void *)(v10 + 4480) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void **)(v10 + 4424);
  if (v17)
  {
    *(void *)(v10 + 4432) = v17;
    operator delete(v17);
  }
  sub_2483E8DDC((uint64_t *)(v10 + 4304));
  a10 = (void **)(v10 + 4248);
  sub_2483F87EC(&a10);
  a10 = (void **)(v10 + 4224);
  sub_2484111DC(&a10);
  uint64_t v18 = *(void *)(v10 + 4216);
  *(void *)(v10 + 4216) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_248411260(v10);
  _Unwind_Resume(a1);
}

void sub_2484168F0(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *(void **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_2483E92E8();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)sub_2483F04AC(v12);
      unint64_t v7 = *(void **)a1;
      unint64_t v5 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    *unint64_t v14 = *a2;
    uint64_t v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *--v5;
      *--unint64_t v14 = v16;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *unint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
}

void sub_2484169CC(uint64_t a1, _DWORD *a2)
{
  unint64_t v5 = *(_DWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_2483E92E8();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)sub_2483E9300(v12);
      unint64_t v7 = *(_DWORD **)a1;
      unint64_t v5 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (_DWORD *)(v12 + 4 * v8);
    unint64_t v15 = v12 + 4 * v13;
    *unint64_t v14 = *a2;
    uint64_t v6 = v14 + 1;
    while (v5 != v7)
    {
      int v16 = *--v5;
      *--unint64_t v14 = v16;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *unint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
}

uint64_t sub_248416AA8(uint64_t a1, int a2)
{
  BOOL v3 = *(void *)(a1 + 736) == 1 && *(_DWORD *)(a1 + 160) == 1;
  if (*(_DWORD *)(a1 + 64) == 3
    || v3
    || *(void *)(*(void *)(*(void *)(a1 + 768) + 88) + 328) != *(void *)(*(void *)(*(void *)(a1 + 768)
                                                                                               + 88)
                                                                                   + 336)
    || *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 1460) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 1460) = a2;
    if (a2 < 3)
    {
      if (a2 == 2)
      {
        if (*(_DWORD *)(a1 + 164))
        {
          unint64_t v17 = 0;
          uint64_t v18 = *(int **)(a1 + 1472);
          do
          {
            int v19 = *(_DWORD *)(a1 + 4 * v17 + 212) + 1;
            unint64_t v20 = *(void *)(a1 + 1480);
            if ((unint64_t)v18 >= v20)
            {
              size_t v22 = *(int **)(a1 + 1464);
              uint64_t v23 = v18 - v22;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 62) {
LABEL_52:
              }
                sub_2483E92E8();
              uint64_t v25 = v20 - (void)v22;
              if (v25 >> 1 > v24) {
                unint64_t v24 = v25 >> 1;
              }
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v26 = v24;
              }
              if (v26)
              {
                unint64_t v26 = (unint64_t)sub_2483E9300(v26);
                uint64_t v18 = *(int **)(a1 + 1472);
                size_t v22 = *(int **)(a1 + 1464);
              }
              else
              {
                uint64_t v27 = 0;
              }
              unint64_t v28 = (int *)(v26 + 4 * v23);
              *unint64_t v28 = v19;
              unint64_t v21 = v28 + 1;
              while (v18 != v22)
              {
                int v29 = *--v18;
                *--unint64_t v28 = v29;
              }
              *(void *)(a1 + 1464) = v28;
              *(void *)(a1 + 1472) = v21;
              *(void *)(a1 + 1480) = v26 + 4 * v27;
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *uint64_t v18 = v19;
              unint64_t v21 = v18 + 1;
            }
            *(void *)(a1 + 1472) = v21;
            ++v17;
            uint64_t v18 = v21;
          }
          while (v17 < *(unsigned int *)(a1 + 164));
        }
        std::__sort<std::__less<int,int> &,int *>();
      }
    }
    else if (*(_DWORD *)(a1 + 160) >= 2u)
    {
      unint64_t v5 = *(char **)(a1 + 1472);
      unint64_t v6 = 1;
      do
      {
        unint64_t v7 = *(void *)(a1 + 1480);
        if ((unint64_t)v5 >= v7)
        {
          unint64_t v9 = *(char **)(a1 + 1464);
          uint64_t v10 = (v5 - v9) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            goto LABEL_52;
          }
          uint64_t v12 = v7 - (void)v9;
          if (v12 >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            unint64_t v13 = (unint64_t)sub_2483E9300(v13);
            unint64_t v5 = *(char **)(a1 + 1472);
            unint64_t v9 = *(char **)(a1 + 1464);
          }
          else
          {
            uint64_t v14 = 0;
          }
          unint64_t v15 = (_DWORD *)(v13 + 4 * v10);
          *unint64_t v15 = v6;
          uint64_t v8 = (char *)(v15 + 1);
          while (v5 != v9)
          {
            int v16 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *--unint64_t v15 = v16;
          }
          *(void *)(a1 + 1464) = v15;
          *(void *)(a1 + 1472) = v8;
          *(void *)(a1 + 1480) = v13 + 4 * v14;
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v5 = v6;
          uint64_t v8 = v5 + 4;
        }
        *(void *)(a1 + 1472) = v8;
        ++v6;
        unint64_t v5 = v8;
      }
      while (v6 < *(unsigned int *)(a1 + 160));
    }
  }
  return *(unsigned int *)(a1 + 1460);
}

uint64_t sub_248416D1C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 3352);
  int v7 = *(unsigned __int8 *)(a1 + 1000);
  BOOL v8 = *(unsigned char *)(a1 + 1000) != 0;
  unsigned int v9 = *(_DWORD *)(a1 + 1440);
  if (*(unsigned char *)(v6 + 560))
  {
    if (*(unsigned char *)(a1 + 1000)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 >= 5;
    }
    if (v10)
    {
      if (*(unsigned char *)(a1 + 1552)) {
        unsigned int v14 = 8 * *(_DWORD *)(a1 + 1556);
      }
      else {
        unsigned int v14 = *(_DWORD *)(a1 + 1560);
      }
      BOOL v8 = 0;
      uint64_t v11 = v14;
    }
    else
    {
      uint64_t v11 = sub_24841D7BC(a1 + 1544);
    }
    *a2 = v11;
    if (v8 || v9 < 5)
    {
      if (*(unsigned char *)(a1 + 1552)) {
        unsigned int v17 = 8 * *(_DWORD *)(a1 + 1556);
      }
      else {
        unsigned int v17 = *(_DWORD *)(a1 + 1560);
      }
      uint64_t result = v17;
    }
    else
    {
      uint64_t result = sub_24841D7BC(a1 + 1544);
    }
    *a3 = result;
  }
  else
  {
    if (v9 >= 5 && v7 == 0)
    {
      if (*(unsigned char *)(a1 + 1624)) {
        unsigned int v15 = 8 * *(_DWORD *)(a1 + 1628) + 8;
      }
      else {
        unsigned int v15 = *(_DWORD *)(a1 + 1632);
      }
      *a2 = v15;
      uint64_t result = sub_24841D660(a1 + 1616);
    }
    else
    {
      *a2 = sub_24841D660(a1 + 1616);
      if (*(unsigned char *)(a1 + 1624)) {
        unsigned int v13 = 8 * *(_DWORD *)(a1 + 1628) + 8;
      }
      else {
        unsigned int v13 = *(_DWORD *)(a1 + 1632);
      }
      uint64_t result = v13;
    }
    *a3 = result;
    if (!*(unsigned char *)(a1 + 1003))
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64x2_t v20 = 0u;
      uint64_t result = (uint64_t)sub_24840370C(&v20, v6);
      uint64_t v18 = *((void *)&v21 + 1);
      *a2 = v21;
      *a3 = v18;
      if (!v7 && (int)v9 >= 5)
      {
        uint64_t v19 = *a2;
        *a2 = v18;
        *a3 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_248416EB4(uint64_t a1)
{
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v2 = a1 + 208;
  sub_24842F040(a1 + 208);
  *(void *)(a1 + 984) = 0x4000000400;
  *(void *)(a1 + 1016) = v2;
  sub_248430380(a1 + 952);
  *(float *)(a1 + 1000) = *(float *)(a1 + 992) / (float)*(int *)(a1 + 988);
  *(void *)(a1 + 1004) = 0x3F0000003F000000;
  *(_DWORD *)(a1 + 1012) = 1056964608;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(void *)(a1 + 1200) = 0x3C430C3100000054;
  *(void *)(a1 + 1208) = 0x3F80000000000000;
  *(void *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1420) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(void *)(a1 + 1752) = a1 + 1632;
  *(_OWORD *)(a1 + 1440) = 0u;
  sub_248417374(a1 + 1760);
  uint64_t v3 = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  do
  {
    *(void *)(a1 + v3 + 2824) = 0;
    unint64_t v4 = (_OWORD *)(a1 + v3 + 2376);
    v4[26] = 0u;
    v4[27] = 0u;
    v4[24] = 0u;
    v4[25] = 0u;
    v4[22] = 0u;
    v4[23] = 0u;
    v4[20] = 0u;
    v4[21] = 0u;
    v4[18] = 0u;
    v4[19] = 0u;
    v4[16] = 0u;
    v4[17] = 0u;
    v4[14] = 0u;
    v4[15] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    _OWORD v4[6] = 0u;
    v4[7] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *unint64_t v4 = 0u;
    v4[1] = 0u;
    sub_2484171C4((uint64_t)v4);
    *(unsigned char *)(a1 + v3 + 2824) = 0;
    v3 += 456;
  }
  while (v3 != 1824);
  *(void *)(a1 + 4200) = 0;
  return a1;
}

void sub_2484170E8(_Unwind_Exception *a1)
{
  for (uint64_t i = 0; i != -15; i -= 5)
    sub_2483E8DDC(&v1[i + 217]);
  sub_2483E8DDC(v1 + 202);
  uint64_t v6 = (void *)v1[196];
  if (v6)
  {
    v1[197] = (uint64_t)v6;
    operator delete(v6);
  }
  sub_2484174DC(v3);
  sub_2483E8DDC(v1 + 146);
  sub_2483E8DDC(v1 + 141);
  sub_2483E8DDC(v1 + 136);
  sub_2483E8DDC(v1 + 131);
  sub_248417560(v2);
  sub_2483E8DDC(v1 + 22);
  _Unwind_Resume(a1);
}

uint64_t sub_2484171C4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  sub_24841CC24((void *)(a1 + 16));
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  sub_2483F06F8(a1 + 216);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return a1;
}

void sub_248417244(_Unwind_Exception *a1)
{
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC(&v1[i]);
  if (*((char *)v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2484172B0(uint64_t *a1)
{
  uint64_t v6 = (void **)(a1 + 52);
  sub_2483F77FC(&v6);
  a1[27] = (uint64_t)&unk_26FC65EC8;
  uint64_t v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = (uint64_t)v2;
    operator delete(v2);
  }
  for (uint64_t i = 25; i != 10; i -= 5)
    sub_2483E8DDC(&a1[i]);
  if (*((char *)a1 + 87) < 0) {
    operator delete((void *)a1[8]);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sub_248417374(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2483EFEC8((void *)(a1 + 96), byte_2485505FC, "N3jxl8ACImageTIiEE", 0x27uLL);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 104);
  uint64_t v4 = v2 + 1;
  if (v2 != v3 && v4 != v3)
  {
    unsigned __int8 v6 = *v2;
    int v7 = v2 + 1;
    do
    {
      unsigned int v9 = *v7++;
      unsigned __int8 v8 = v9;
      BOOL v10 = v6 >= v9;
      if (v6 <= v9) {
        unsigned __int8 v6 = v8;
      }
      if (!v10) {
        uint64_t v2 = v4;
      }
      uint64_t v4 = v7;
    }
    while (v7 != v3);
  }
  *(void *)(a1 + 120) = *v2 + 1;
  *(void *)(a1 + 128) = 1;
  return a1;
}

void sub_248417420(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[13] = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = (void *)v1[9];
  if (v6)
  {
    v1[10] = v6;
    operator delete(v6);
  }
  uint64_t v7 = 0;
  while (1)
  {
    unsigned __int8 v8 = (void *)v1[v7 + 6];
    if (v8)
    {
      v1[v7 + 7] = v8;
      operator delete(v8);
    }
    v7 -= 3;
    if (v7 == -9) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *sub_248417474(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    uint64_t v5 = (void *)a1[i + 6];
    if (v5)
    {
      a1[i + 7] = v5;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_2484174DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(void *)(a1 + 320) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 288);
  if (v3)
  {
    *(void *)(a1 + 296) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 264);
  if (v4)
  {
    *(void *)(a1 + 272) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(void *)(a1 + 248) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)(a1 + 216);
  sub_24841149C(&v7);
  sub_2484114F0((void *)(a1 + 32));
  return a1;
}

uint64_t sub_248417560(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 720);
  sub_248403688(&v3);
  sub_2483FED94((uint64_t *)(a1 + 8));
  return a1;
}

void sub_2484175A4()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26FC66998;
  __cxa_throw(exception, (struct type_info *)&unk_26FC658C0, (void (*)(void *))std::exception::~exception);
}

void sub_2484175F4(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x24C579F90);
}

void *sub_24841762C()
{
  return &unk_26FC63E18;
}

uint64_t sub_248417638(uint64_t a1, uint64_t a2)
{
  if (sub_248417674(*(void *)(a2 + 8), (uint64_t)"ZN3jxl12_GLOBAL__N_112GetBitReaderENS_4SpanIKhEEE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_248417674(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void sub_2484176C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 56) = 8 * (*(void *)(*a2 + 16) - *(void *)(*a2 + 32) + *(void *)(*a2 + 40))
                       - *(void *)(*a2 + 8);
  sub_248403398(v2);

  JUMPOUT(0x24C579F90);
}

void sub_248417730(uint64_t a1, void *a2)
{
  *a2 = &unk_26FC643E8;
}

void *sub_248417750()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26FC643E8;
  return result;
}

void sub_248417788()
{
}

uint64_t JxlDecoderGetBasicInfo(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 39)) {
    return 2;
  }
  if (!a2) {
    return 0;
  }
  *(_OWORD *)(a2 + 188) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(unsigned __int8 *)(a1 + 1024);
  int v4 = sub_24841D660(a1 + 1616);
  int v5 = v4;
  *(_DWORD *)(a2 + 4) = v4;
  if (*(unsigned char *)(a1 + 1624)) {
    int v6 = 8 * *(_DWORD *)(a1 + 1628) + 8;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 1632);
  }
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 36) = *(unsigned char *)(a1 + 1233) == 0;
  *(void *)(a2 + 12) = *(void *)(a1 + 1220);
  int v8 = *(unsigned __int8 *)(a1 + 1444);
  int v9 = *(unsigned __int8 *)(a1 + 1445);
  *(_DWORD *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = v9;
  int v10 = *(_DWORD *)(a1 + 1440);
  *(_DWORD *)(a2 + 48) = v10;
  if (!*(unsigned char *)(a1 + 1000))
  {
    if (v10 < 5)
    {
      int v4 = v6;
      int v6 = v5;
    }
    else
    {
      *(_DWORD *)(a2 + 4) = v6;
      *(_DWORD *)(a2 + 8) = v4;
    }
    int v5 = v6;
    *(_DWORD *)(a2 + 48) = 1;
    int v6 = v4;
  }
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 1492);
  float v11 = *(float *)(a1 + 1004);
  if (v11 > 0.0) {
    *(float *)(a2 + 20) = v11;
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 1496);
  *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(a1 + 1500);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 1504);
  for (uint64_t i = *(void *)(a1 + 1520); ; i += 96)
  {
    if (i == *(void *)(a1 + 1528))
    {
      int v13 = 0;
      *(_DWORD *)(a2 + 60) = 0;
      *(_DWORD *)(a2 + 64) = 0;
      goto LABEL_21;
    }
    if (!*(_DWORD *)(i + 12)) {
      break;
    }
  }
  *(void *)(a2 + 60) = *(void *)(i + 28);
  int v13 = *(unsigned __int8 *)(i + 72);
LABEL_21:
  *(_DWORD *)(a2 + 68) = v13;
  if (*(_DWORD *)(a1 + 1296) == 1) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  int v15 = *(_DWORD *)(a1 + 1512);
  *(_DWORD *)(a2 + 52) = v14;
  *(_DWORD *)(a2 + 56) = v15;
  if (v8)
  {
    *(_DWORD *)(a2 + 72) = sub_24841D7BC(a1 + 1544);
    if (*(unsigned char *)(a1 + 1552)) {
      int v16 = 8 * *(_DWORD *)(a1 + 1556);
    }
    else {
      int v16 = *(_DWORD *)(a1 + 1560);
    }
    *(_DWORD *)(a2 + 76) = v16;
  }
  if (v9)
  {
    *(void *)(a2 + 80) = *(void *)(a1 + 1584);
    int v17 = *(unsigned __int8 *)(a1 + 1596);
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 1592);
    *(_DWORD *)(a2 + 92) = v17;
  }
  if (*(unsigned char *)(a1 + 1446))
  {
    *(_DWORD *)(a2 + 96) = sub_24841D660(a1 + 1448);
    if (*(unsigned char *)(a1 + 1456)) {
      int v6 = 8 * *(_DWORD *)(a1 + 1460) + 8;
    }
    else {
      int v6 = *(_DWORD *)(a1 + 1464);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 96) = v5;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 100) = v6;
  return result;
}

float JxlDecoderGetExtraChannelInfo(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 39))
  {
    uint64_t v3 = *(void *)(a1 + 1520);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1528) - v3) >> 5) > a2)
    {
      uint64_t v4 = v3 + 96 * a2;
      int v5 = *(_DWORD *)(v4 + 28);
      *(_DWORD *)a3 = *(_DWORD *)(v4 + 12);
      *(_DWORD *)(a3 + 4) = v5;
      if (*(unsigned char *)(v4 + 24)) {
        int v6 = *(_DWORD *)(v4 + 32);
      }
      else {
        int v6 = 0;
      }
      int v7 = *(_DWORD *)(v4 + 40);
      *(_DWORD *)(a3 + 8) = v6;
      *(_DWORD *)(a3 + 12) = v7;
      if (*(char *)(v4 + 71) < 0) {
        uint64_t v4 = *(void *)(v4 + 56);
      }
      else {
        LODWORD(v4) = *(unsigned __int8 *)(v4 + 71);
      }
      uint64_t v8 = v3 + 96 * a2;
      int v9 = *(unsigned __int8 *)(v8 + 72);
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v9;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 76);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v8 + 80);
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(v8 + 84);
      float result = *(float *)(v8 + 88);
      *(float *)(a3 + 36) = result;
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(v8 + 92);
    }
  }
  return result;
}

uint64_t JxlDecoderGetExtraChannelName(uint64_t a1, unint64_t a2, void *__dst, unint64_t a4)
{
  if (!*(unsigned char *)(a1 + 39)) {
    return 2;
  }
  uint64_t v4 = *(void *)(a1 + 1520);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1528) - v4) >> 5) <= a2) {
    return 1;
  }
  uint64_t v5 = v4 + 96 * a2;
  int v6 = (void *)(v5 + 48);
  int v7 = *(char *)(v5 + 71);
  if (v7 < 0)
  {
    size_t v8 = v6[1] + 1;
    if (v8 <= a4)
    {
      int v6 = (void *)*v6;
      goto LABEL_10;
    }
    return 1;
  }
  if (v7 >= a4) {
    return 1;
  }
  size_t v8 = v7 + 1;
LABEL_10:
  memcpy(__dst, v6, v8);
  return 0;
}

uint64_t JxlDecoderGetColorAsEncodedProfile(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 41)) {
    return 2;
  }
  if (a2 == 1 && *(unsigned char *)(a1 + 1233)) {
    uint64_t v4 = *(void *)(a1 + 3304) + 5192;
  }
  else {
    uint64_t v4 = a1 + 1240;
  }
  if (*(unsigned char *)(v4 + 9)) {
    return 1;
  }
  if (!a3) {
    return 0;
  }
  sub_2483EBCC0((uint64_t)v9, v4 + 16);
  uint64_t result = 0;
  *(void *)(a3 + 96) = v10;
  long long v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  long long v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(_OWORD *)(a3 + 48) = v8;
  return result;
}

uint64_t JxlDecoderGetICCProfileSize(uint64_t a1, int a2, void *a3)
{
  if (!*(unsigned char *)(a1 + 41)) {
    return 2;
  }
  if (a2 == 1 && *(unsigned char *)(a1 + 1233)) {
    uint64_t v3 = *(void *)(a1 + 3304) + 5192;
  }
  else {
    uint64_t v3 = a1 + 1240;
  }
  if (*(unsigned char *)(v3 + 9) && (*(_DWORD *)(a1 + 1296) & 0xFFFFFFFE) == 2) {
    return 1;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = *(void *)(v3 + 40) - *(void *)(v3 + 32);
  }
  return result;
}

uint64_t JxlDecoderGetColorAsICCProfile(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  unint64_t v10 = 0;
  uint64_t result = JxlDecoderGetICCProfileSize(a1, a2, &v10);
  if (!result)
  {
    if (v10 <= a4)
    {
      if (*(unsigned char *)(a1 + 41))
      {
        if (a2 == 1 && *(unsigned char *)(a1 + 1233)) {
          uint64_t v9 = *(void *)(a1 + 3304) + 5192;
        }
        else {
          uint64_t v9 = a1 + 1240;
        }
        memcpy(a3, *(const void **)(v9 + 32), *(void *)(v9 + 40) - *(void *)(v9 + 32));
        return 0;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t JxlDecoderGetIntendedDownsamplingRatio(uint64_t a1)
{
  return *(void *)(a1 + 1048);
}

uint64_t JxlDecoderFlushImage(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1056)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 3368) != 2) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 3312);
  if (!*(unsigned char *)(v1 + 1410)) {
    return 1;
  }
  if (*(_DWORD *)(v1 + 360)) {
    char v2 = 1;
  }
  else {
    char v2 = *(unsigned char *)(v1 + 304) != 0;
  }
  for (uint64_t i = *(void *)(v1 + 392); i != *(void *)(v1 + 400); i += 40)
    v2 |= *(_DWORD *)(i + 8) != 0;
  if ((v2 & 1) != 0 && !*(unsigned char *)(v1 + 1424)) {
    goto LABEL_35;
  }
  if (*(_DWORD *)(v1 + 64) != 3 || *(unsigned char *)(v1 + 1424))
  {
    sub_2483FF104(*(void *)(a1 + 3312));
    uint64_t v5 = *(unsigned __int8 **)(v1 + 1360);
    long long v6 = *(unsigned __int8 **)(v1 + 1368);
    long long v7 = v5;
    if (v5 != v6)
    {
      long long v8 = v5 + 1;
      long long v7 = *(unsigned __int8 **)(v1 + 1360);
      if (v5 + 1 != v6)
      {
        unsigned __int8 v9 = *v5;
        long long v7 = *(unsigned __int8 **)(v1 + 1360);
        unint64_t v10 = v5 + 1;
        do
        {
          unsigned int v12 = *v10++;
          unsigned __int8 v11 = v12;
          if (v12 < v9)
          {
            unsigned __int8 v9 = v11;
            long long v7 = v8;
          }
          long long v8 = v10;
        }
        while (v10 != v6);
      }
    }
    if (*(_DWORD *)(v1 + 160) <= *v7) {
      goto LABEL_34;
    }
    if (v5 == v6)
    {
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      do
      {
        if (*(_DWORD *)(v1 + 160) > v5[v13])
        {
          (*(void (**)(void, unint64_t))(**(void **)(*(void *)v1 + 4488) + 16))(*(void *)(*(void *)v1 + 4488), v13);
          long long v6 = *(unsigned __int8 **)(v1 + 1368);
          uint64_t v5 = *(unsigned __int8 **)(v1 + 1360);
        }
        ++v13;
        uint64_t v14 = v6 - v5;
      }
      while (v13 < v6 - v5);
    }
    unsigned __int8 v20 = 0;
    int v16 = *(void **)(v1 + 8);
    v18[0] = v1;
    v18[1] = &v20;
    uint64_t v19 = v1;
    if (!v16)
    {
      v21[0] = 0;
      v21[1] = v21;
      int v16 = v21;
    }
    int v15 = sub_248403A30(v16, v14, &v19, (uint64_t)v18);
    if (v15) {
      return v15 != 0;
    }
    unsigned __int8 v17 = atomic_load(&v20);
    if ((v17 & 1) == 0)
    {
LABEL_34:
      int v15 = sub_24840BDD0(v1 + 776, v1 + 48, *(void *)v1, *(long long **)(v1 + 8), *(unsigned __int8 *)(v1 + 1424));
      return v15 != 0;
    }
LABEL_35:
    int v15 = 1;
    return v15 != 0;
  }
  int v15 = 0;
  return v15 != 0;
}

uint64_t JxlDecoderSetCms(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 3304);
  if (!v2) {
    operator new();
  }
  uint64_t v3 = (_OWORD *)(v2 + 5816);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  v3[2] = a2[2];
  v3[3] = v6;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *(unsigned char *)(*(void *)(a1 + 3304) + 5812) = 1;
  return 0;
}

void sub_248417F68(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F90](v1, 0x10F2C40BD9CC6D3);
  _Unwind_Resume(a1);
}

uint64_t JxlDecoderPreviewOutBufferSize(uint64_t a1, unsigned int *a2, void *a3)
{
  if (*a2 > 2 || *(_DWORD *)(a1 + 2976) == 1) {
    return sub_248417FBC(a1, a2, 0, a3, 1);
  }
  else {
    return 1;
  }
}

uint64_t sub_248417FBC(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v24 = 0;
  uint64_t v10 = sub_24841811C(a1, a2, &v24);
  if (v10) {
    return v10;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a5)
  {
    BOOL v11 = *(unsigned char *)(a1 + 1000) != 0;
    unsigned int v12 = *(_DWORD *)(a1 + 1440);
    if (*(unsigned char *)(a1 + 1000) || v12 < 5)
    {
      uint64_t v15 = sub_24841D7BC(a1 + 1544);
    }
    else
    {
      if (*(unsigned char *)(a1 + 1552)) {
        unsigned int v13 = 8 * *(_DWORD *)(a1 + 1556);
      }
      else {
        unsigned int v13 = *(_DWORD *)(a1 + 1560);
      }
      BOOL v11 = 0;
      uint64_t v15 = v13;
    }
    uint64_t v23 = v15;
    if (v11 || v12 < 5)
    {
      if (*(unsigned char *)(a1 + 1552)) {
        unsigned int v17 = 8 * *(_DWORD *)(a1 + 1556);
      }
      else {
        unsigned int v17 = *(_DWORD *)(a1 + 1560);
      }
      uint64_t v16 = v17;
    }
    else
    {
      uint64_t v16 = sub_24841D7BC(a1 + 1544);
    }
    uint64_t v22 = v16;
    if (!a3) {
      goto LABEL_20;
    }
  }
  else
  {
    sub_248416D1C(a1, &v23, &v22);
    if (!a3)
    {
LABEL_20:
      uint64_t v14 = *a2;
      goto LABEL_21;
    }
  }
  uint64_t v14 = 1;
LABEL_21:
  unint64_t v18 = (unint64_t)(v23 * v14 * v24 + 7) >> 3;
  unint64_t v19 = *((void *)a2 + 2);
  unint64_t v20 = v18;
  if (v19 >= 2) {
    unint64_t v20 = (v19 + v18 - 1) / v19 * v19;
  }
  *a4 = v18 + (v22 - 1) * v20;
  return v10;
}

uint64_t sub_24841811C(uint64_t a1, _DWORD *a2, void *a3)
{
  if (!*(unsigned char *)(a1 + 39)) {
    return 2;
  }
  if (!*(unsigned char *)(a1 + 1003) && (!*(void *)(a1 + 3352) || !*(_DWORD *)(a1 + 3368)) || *a2 > 4u) {
    return 1;
  }
  uint64_t v3 = a2[1];
  if (v3 > 5)
  {
    uint64_t v4 = 0;
    uint64_t result = 1;
  }
  else
  {
    uint64_t v4 = qword_24854F4F0[v3];
    uint64_t result = dword_24854CE0C[v3];
  }
  *a3 = v4;
  return result;
}

uint64_t JxlDecoderSetPreviewOutBuffer(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4)
{
  if (!*(unsigned char *)(a1 + 39)
    || !*(unsigned char *)(a1 + 1444)
    || (*(unsigned char *)(a1 + 1013) & 2) == 0
    || *a2 <= 2 && *(_DWORD *)(a1 + 2976) != 1)
  {
    return 1;
  }
  unint64_t v10 = 0;
  uint64_t result = sub_248417FBC(a1, a2, 0, &v10, 1);
  if (!result)
  {
    uint64_t result = 1;
    if (v10 <= a4)
    {
      *(unsigned char *)(a1 + 1056) = 1;
      *(void *)(a1 + 1064) = a3;
      *(void *)(a1 + 1120) = a4;
      long long v9 = *(_OWORD *)a2;
      *(void *)(a1 + 1144) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 1128) = v9;
      return 0;
    }
  }
  return result;
}

uint64_t JxlDecoderImageOutBufferSize(uint64_t a1, unsigned int *a2, void *a3)
{
  if (*a2 > 2 || *(_DWORD *)(a1 + 2976) == 1) {
    return sub_248417FBC(a1, a2, 0, a3, 0);
  }
  else {
    return 1;
  }
}

uint64_t JxlDecoderSetImageOutBuffer(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4)
{
  if (!*(unsigned char *)(a1 + 39)
    || (*(unsigned char *)(a1 + 1013) & 0x10) == 0
    || *(unsigned char *)(a1 + 1056) && *(void *)(a1 + 1080)
    || *a2 <= 2 && *(_DWORD *)(a1 + 2976) != 1)
  {
    return 1;
  }
  unint64_t v10 = 0;
  uint64_t result = sub_248417FBC(a1, a2, 0, &v10, 0);
  if (!result)
  {
    uint64_t result = 1;
    if (v10 <= a4)
    {
      *(unsigned char *)(a1 + 1056) = 1;
      *(void *)(a1 + 1064) = a3;
      *(void *)(a1 + 1120) = a4;
      long long v9 = *(_OWORD *)a2;
      *(void *)(a1 + 1144) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 1128) = v9;
      return 0;
    }
  }
  return result;
}

uint64_t JxlDecoderExtraChannelBufferSize(uint64_t a1, unsigned int *a2, void *a3, unsigned int a4)
{
  if (*(unsigned char *)(a1 + 39) && (*(unsigned char *)(a1 + 1013) & 0x10) != 0 && *(_DWORD *)(a1 + 1512) > a4) {
    return sub_248417FBC(a1, a2, 1, a3, 0);
  }
  else {
    return 1;
  }
}

__n128 JxlDecoderSetExtraChannelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  unint64_t v30 = 0;
  if (!JxlDecoderExtraChannelBufferSize(a1, (unsigned int *)a2, &v30, a5) && v30 <= a4)
  {
    BOOL v11 = *(char **)(a1 + 1176);
    unsigned int v12 = *(char **)(a1 + 1168);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v12) >> 3);
    if (v13 > a5)
    {
LABEL_25:
      long long v28 = (__n128 *)&v12[40 * a5];
      __n128 result = *(__n128 *)a2;
      v28[1].n128_u64[0] = *(void *)(a2 + 16);
      *long long v28 = result;
      uint64_t v29 = *(void *)(a1 + 1168) + 40 * a5;
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 24) = a3;
      *(void *)(v29 + 32) = a4;
      return result;
    }
    unint64_t v14 = *(unsigned int *)(a1 + 1512);
    unint64_t v15 = v14 - v13;
    if (v14 <= v13)
    {
      if (v14 >= v13)
      {
LABEL_24:
        unsigned int v12 = *(char **)(a1 + 1168);
        goto LABEL_25;
      }
      long long v26 = &v12[40 * v14];
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 1184);
      if (0xCCCCCCCCCCCCCCCDLL * ((v16 - (uint64_t)v11) >> 3) < v15)
      {
        unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (uint64_t)v12) >> 3);
        uint64_t v18 = 2 * v17;
        if (2 * v17 <= v14) {
          uint64_t v18 = *(unsigned int *)(a1 + 1512);
        }
        if (v17 >= 0x333333333333333) {
          unint64_t v19 = 0x666666666666666;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19 > 0x666666666666666) {
          sub_2483E9338();
        }
        unint64_t v20 = (char *)operator new(40 * v19);
        long long v21 = &v20[8 * ((v11 - v12) >> 3)];
        uint64_t v22 = v21;
        uint64_t v23 = 40 * v14 - 8 * ((v11 - v12) >> 3);
        do
        {
          *((void *)v22 + 4) = 0;
          *(_OWORD *)uint64_t v22 = 0uLL;
          *((_OWORD *)v22 + 1) = 0uLL;
          v22 += 40;
          v23 -= 40;
        }
        while (v23);
        if (v11 != v12)
        {
          do
          {
            long long v24 = *(_OWORD *)(v11 - 40);
            long long v25 = *(_OWORD *)(v11 - 24);
            *((void *)v21 - 1) = *((void *)v11 - 1);
            *(_OWORD *)(v21 - 24) = v25;
            *(_OWORD *)(v21 - 40) = v24;
            v21 -= 40;
            v11 -= 40;
          }
          while (v11 != v12);
          BOOL v11 = v12;
        }
        *(void *)(a1 + 1168) = v21;
        *(void *)(a1 + 1176) = &v20[40 * v14];
        *(void *)(a1 + 1184) = &v20[40 * v19];
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_24;
      }
      long long v26 = &v11[40 * v15];
      uint64_t v27 = 40 * v14 - 8 * ((v11 - v12) >> 3);
      do
      {
        *((void *)v11 + 4) = 0;
        *(_OWORD *)BOOL v11 = 0uLL;
        *((_OWORD *)v11 + 1) = 0uLL;
        v11 += 40;
        v27 -= 40;
      }
      while (v27);
    }
    *(void *)(a1 + 1176) = v26;
    goto LABEL_24;
  }
  return result;
}

double JxlDecoderSetImageOutCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 1104) = a3;
  *(void *)(a1 + 1112) = a4;
  *(void *)&double result = JxlDecoderSetMultithreadedImageOutCallback(a1, a2, (uint64_t)nullsub_11, (uint64_t)sub_2484186A4, (uint64_t)nullsub_10, a1 + 1104).n128_u64[0];
  return result;
}

__n128 JxlDecoderSetMultithreadedImageOutCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((!*(unsigned char *)(a1 + 1056) || !*(void *)(a1 + 1064))
    && a3
    && a4
    && a5
    && !sub_24841811C(a1, (_DWORD *)a2, &v13))
  {
    *(unsigned char *)(a1 + 1056) = 1;
    *(void *)(a1 + 1072) = a3;
    *(void *)(a1 + 1080) = a4;
    *(void *)(a1 + 1088) = a5;
    *(void *)(a1 + 1096) = a6;
    __n128 result = *(__n128 *)a2;
    *(void *)(a1 + 1144) = *(void *)(a2 + 16);
    *(__n128 *)(a1 + 1128) = result;
  }
  return result;
}

uint64_t sub_2484186A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))a1)(*(void *)(a1 + 8), a3, a4, a5, a6);
}

uint64_t JxlDecoderGetFrameHeader(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 3352) || !*(_DWORD *)(a1 + 3368)) {
    return 1;
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = *(void *)(a1 + 3352);
  if (*(unsigned char *)(a1 + 1445))
  {
    *(_DWORD *)a2 = *(_DWORD *)(v4 + 376);
    if (*(unsigned char *)(a1 + 1596)) {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + 380);
    }
  }
  if (*(char *)(v4 + 103) < 0) {
    uint64_t v5 = *(void *)(v4 + 88);
  }
  else {
    LODWORD(v5) = *(unsigned __int8 *)(v4 + 103);
  }
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(v4 + 392);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_248416D1C(a1, &v26, &v25);
  int v7 = v25;
  int v8 = v26;
  *(_DWORD *)(a2 + 28) = v26;
  *(_DWORD *)(a2 + 32) = v7;
  if (*(unsigned char *)(a1 + 1003))
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    unint64_t v14 = *(int32x2_t **)(a1 + 3352);
    if (v14[32].i8[0])
    {
      int32x2_t v15 = v14[37];
      *(int32x2_t *)(a2 + 20) = v15;
      *(_DWORD *)(a2 + 16) = 1;
    }
    else
    {
      *(_DWORD *)(a2 + 24) = 0;
      int32x2_t v15 = 0;
      *(void *)(a2 + 16) = 0;
    }
    if (!*(unsigned char *)(a1 + 1000))
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1440);
      if (v16 >= 5)
      {
        if (*(unsigned char *)(a1 + 1624)) {
          int v19 = 8 * *(_DWORD *)(a1 + 1628) + 8;
        }
        else {
          int v19 = *(_DWORD *)(a1 + 1632);
        }
        int v17 = v19;
        int v21 = sub_24841D660(a1 + 1616);
        int32x2_t v20 = vrev64_s32(*(int32x2_t *)(a2 + 20));
        *(int32x2_t *)(a2 + 20) = v20;
        unsigned int v16 = *(_DWORD *)(a1 + 1440);
      }
      else
      {
        int32x2_t v24 = v15;
        int v17 = sub_24841D660(a1 + 1616);
        if (*(unsigned char *)(a1 + 1624)) {
          int v18 = 8 * *(_DWORD *)(a1 + 1628) + 8;
        }
        else {
          int v18 = *(_DWORD *)(a1 + 1632);
        }
        int32x2_t v20 = v24;
        int v21 = v18;
      }
      unsigned int v22 = ((_BYTE)v16 - 1) & 3;
      if ((((_BYTE)v16 - 1) & 3) != 0 && v22 != 3) {
        *(_DWORD *)(a2 + 20) = v17 - (v8 + v20.i32[0]);
      }
      if (v22 >= 2) {
        *(_DWORD *)(a2 + 24) = v21 - v7 - v20.i32[1];
      }
    }
    uint64_t v23 = *(void *)(a1 + 3352);
    int v9 = *(_DWORD *)(v23 + 312);
    int v10 = *(_DWORD *)(v23 + 324);
    int v11 = *(_DWORD *)(v23 + 316);
    int v12 = *(unsigned __int8 *)(v23 + 320);
    int v13 = *(_DWORD *)(v23 + 396);
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 36) = v9;
  *(_DWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 44) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  *(_DWORD *)(a2 + 52) = v13;
  return result;
}

uint64_t JxlDecoderGetExtraChannelBlendInfo(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 3352);
  if (!v3 || !*(_DWORD *)(a1 + 3368) || *(unsigned int *)(a1 + 1512) <= a2) {
    return 1;
  }
  uint64_t result = 0;
  uint64_t v5 = *(void *)(v3 + 344) + 40 * a2;
  int v6 = *(_DWORD *)(v5 + 20);
  int v7 = *(_DWORD *)(v5 + 12);
  *a3 = *(_DWORD *)(v5 + 8);
  a3[1] = v6;
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 16);
  a3[2] = v7;
  a3[3] = v5;
  return result;
}

uint64_t JxlDecoderGetFrameName(uint64_t a1, void *__dst, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 3352);
  if (v3 && *(_DWORD *)(a1 + 3368))
  {
    uint64_t v4 = (void *)(v3 + 80);
    if (*(char *)(v3 + 103) < 0)
    {
      size_t v5 = *(void *)(v3 + 88) + 1;
      if (v5 <= a3)
      {
        uint64_t v4 = (void *)*v4;
        goto LABEL_10;
      }
    }
    else if (*(unsigned __int8 *)(v3 + 103) < a3)
    {
      size_t v5 = *(unsigned __int8 *)(v3 + 103) + 1;
LABEL_10:
      memcpy(__dst, v4, v5);
      return 0;
    }
  }
  return 1;
}

uint64_t JxlDecoderSetPreferredColorProfile(uint64_t a1, int *a2)
{
  return JxlDecoderSetOutputColorProfile(a1, a2, 0, 0);
}

uint64_t JxlDecoderSetOutputColorProfile(uint64_t a1, int *a2, char *a3, unint64_t a4)
{
  if (a2 && a3) {
    return 1;
  }
  if (!((unint64_t)a2 | (unint64_t)a3)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 41)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 42)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 3304);
  if (a3)
  {
    if (!*(unsigned char *)(v8 + 5812)) {
      return 1;
    }
  }
  if (!a2)
  {
    sub_2483F06F8((uint64_t)&v14);
    memset(__p, 0, sizeof(__p));
    sub_2483EFEC8(__p, a3, &a3[a4], a4);
    BOOL v12 = sub_248418CB0((uint64_t)v16, __p, *(void *)(v8 + 5816), *(unsigned int (**)(uint64_t, void, void, int *, int *))(v8 + 5824));
    BOOL v15 = !v12;
    if (v12) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = sub_24840FFD0(v8 + 4944, (uint64_t)&v14);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    goto LABEL_30;
  }
  int v11 = *a2;
  if (*(_DWORD *)(a1 + 2976) != 1) {
    goto LABEL_19;
  }
  if (v11 == 1) {
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 1056))
  {
    uint64_t v9 = 1;
    if (*(_DWORD *)(a1 + 1128) < 3u || v11 == 3) {
      return v9;
    }
  }
  else
  {
LABEL_19:
    if (v11 == 3) {
      return 1;
    }
  }
LABEL_20:
  sub_2483F06F8((uint64_t)&v14);
  if (sub_248418BD4((uint64_t)&v14, a2) || v17 == v18) {
    goto LABEL_21;
  }
  if (!sub_24840FAA0((uint64_t)v16, v8 + 5208))
  {
    if (!sub_24840FFD0(v8 + 4944, (uint64_t)&v14))
    {
      sub_248418C10(a1 + 2920, v8 + 5192);
      goto LABEL_26;
    }
LABEL_21:
    uint64_t v9 = 1;
    goto LABEL_30;
  }
LABEL_26:
  uint64_t v9 = 0;
LABEL_30:
  unint64_t v14 = &unk_26FC65EC8;
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
  return v9;
}

void sub_248418B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_248418BD4(uint64_t a1, int *a2)
{
  BOOL v3 = sub_248418D88(a1 + 16, a2);
  if (!v3) {
    sub_2483EBC50(a1);
  }
  return v3;
}

uint64_t sub_248418C10(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(void *)(a1 + 16) = v4;
  if (a1 != a2) {
    sub_2483EFEC8((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  return a1;
}

BOOL sub_248418CB0(uint64_t a1, void *a2, uint64_t a3, unsigned int (*a4)(uint64_t, void, void, int *, int *))
{
  uint64_t v7 = a1 + 16;
  uint64_t v6 = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = 3;
  *(_DWORD *)(a1 + 56) = 2;
  *(void *)(a1 + 24) = v6;
  int v10 = 0;
  if (!a4(a3, *a2, a2[1] - *a2, v11, &v10)) {
    return 1;
  }
  *(unsigned char *)(a1 + 44) = v10 != 0;
  BOOL result = sub_248418D88(a1, v11);
  if (!result)
  {
    uint64_t v9 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(a1 + 24) = v9;
      operator delete(v9);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    BOOL result = 0;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
    *(void *)(a1 + 32) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

BOOL sub_248418D88(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_DWORD *)(a1 + 40) = *a2;
  unsigned int v4 = a2[1];
  BOOL result = 1;
  if (v4 <= 0xB && ((1 << v4) & 0xC06) != 0)
  {
    *(_DWORD *)a1 = v4;
    if (v4 == 2)
    {
      v18[0] = *(_OWORD *)(a2 + 2);
      BOOL result = sub_248418F4C((int *)a1, (double *)v18);
      if (result) {
        return result;
      }
      int v3 = *a2;
    }
    if (v3 != 3 && v3 != 0) {
      goto LABEL_17;
    }
    unsigned int v9 = a2[6];
    BOOL result = 1;
    if (v9 <= 0xB && ((1 << v9) & 0xA06) != 0)
    {
      *(_DWORD *)(a1 + 4) = v9;
      if (v9 != 2
        || (long long v10 = *((_OWORD *)a2 + 3),
            v18[0] = *((_OWORD *)a2 + 2),
            v18[1] = v10,
            void v18[2] = *((_OWORD *)a2 + 4),
            !(BOOL result = sub_248419038((unsigned int *)a1, (double *)v18))))
      {
LABEL_17:
        unsigned int v11 = a2[20];
        BOOL result = 1;
        if (v11 <= 0x12 && ((1 << v11) & 0x72106) != 0)
        {
          unsigned int v12 = 0;
          char v13 = 0;
LABEL_20:
          *(unsigned char *)(a1 + 48) = v13;
          *(_DWORD *)(a1 + 52) = v12;
          *(_DWORD *)(a1 + 56) = v11;
          unsigned int v14 = a2[24];
          if (v14 <= 3)
          {
            BOOL result = 0;
            *(_DWORD *)(a1 + 8) = v14;
            *(void *)(a1 + 24) = *(void *)(a1 + 16);
          }
          return result;
        }
        if (v11 == 0xFFFF)
        {
          double v15 = *((double *)a2 + 11);
          if (v15 >= 0.000122070312 && v15 <= 1.0)
          {
            if (fabs(v15 + -1.0) <= 0.001)
            {
              unsigned int v12 = 0;
              char v13 = 0;
              unsigned int v11 = 8;
            }
            else if (fabs(v15 + -0.384615385) <= 0.001)
            {
              unsigned int v12 = 0;
              char v13 = 0;
              unsigned int v11 = 17;
            }
            else
            {
              float v17 = v15 * 10000000.0;
              unsigned int v12 = vcvtas_u32_f32(v17);
              char v13 = 1;
              unsigned int v11 = 2;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_248418F4C(int *a1, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    return 1;
  }
  double v3 = a2[1];
  if (v3 == 0.0) {
    return 1;
  }
  if (fabs(v2 + -0.3127) <= 0.001 && fabs(v3 + -0.329) <= 0.001)
  {
    uint64_t v4 = 0;
    int v6 = 1;
LABEL_15:
    *a1 = v6;
    return v4;
  }
  if (fabs(v2 + -0.333333333) <= 0.001 && fabs(v3 + -0.333333333) <= 0.001)
  {
    uint64_t v4 = 0;
    int v6 = 10;
    goto LABEL_15;
  }
  if (fabs(v2 + -0.314) <= 0.001 && fabs(v3 + -0.351) <= 0.001)
  {
    uint64_t v4 = 0;
    int v6 = 11;
    goto LABEL_15;
  }
  *a1 = 2;
  return sub_2484192D4((unsigned int *)a1 + 15, v2, a2[1]);
}

BOOL sub_248419038(unsigned int *a1, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    return 1;
  }
  double v4 = a2[1];
  if (v4 == 0.0) {
    return 1;
  }
  double v5 = a2[2];
  if (v5 == 0.0) {
    return 1;
  }
  double v6 = a2[3];
  if (v6 == 0.0) {
    return 1;
  }
  double v7 = a2[4];
  if (v7 == 0.0) {
    return 1;
  }
  double v8 = a2[5];
  if (v8 == 0.0) {
    return 1;
  }
  if (fabs(v2 + -0.64) <= 0.001
    && fabs(v4 + -0.33) <= 0.001
    && fabs(v5 + -0.3) <= 0.001
    && fabs(v6 + -0.6) <= 0.001
    && fabs(v7 + -0.15) <= 0.001
    && fabs(v8 + -0.06) <= 0.001)
  {
    BOOL result = 0;
    int v13 = 1;
LABEL_35:
    a1[1] = v13;
    return result;
  }
  if (fabs(v2 + -0.708) <= 0.001
    && fabs(v4 + -0.292) <= 0.001
    && fabs(v5 + -0.17) <= 0.001
    && fabs(v6 + -0.797) <= 0.001
    && fabs(v7 + -0.131) <= 0.001
    && fabs(v8 + -0.046) <= 0.001)
  {
    BOOL result = 0;
    int v13 = 9;
    goto LABEL_35;
  }
  if (fabs(v2 + -0.68) <= 0.001
    && fabs(v4 + -0.32) <= 0.001
    && fabs(v5 + -0.265) <= 0.001
    && fabs(v6 + -0.69) <= 0.001
    && fabs(v7 + -0.15) <= 0.001
    && fabs(v8 + -0.06) <= 0.001)
  {
    BOOL result = 0;
    int v13 = 11;
    goto LABEL_35;
  }
  a1[1] = 2;
  BOOL result = sub_2484192D4(a1 + 17, v2, a2[1]);
  if (!result)
  {
    if (sub_2484192D4(a1 + 19, a2[2], a2[3])) {
      return 1;
    }
    double v11 = a2[4];
    double v12 = a2[5];
    return sub_2484192D4(a1 + 21, v11, v12);
  }
  return result;
}

BOOL sub_2484192D4(unsigned int *a1, double a2, double a3)
{
  double v3 = fabs(a3);
  if (fabs(a2) >= 4.0 || v3 >= 4.0) {
    return 1;
  }
  float v5 = a2 * 1000000.0;
  unsigned int v6 = llroundf(v5);
  *a1 = v6;
  if (v6 - 0x200000 < 0xFFC00000) {
    return 1;
  }
  float v8 = a3 * 1000000.0;
  unsigned int v9 = llroundf(v8);
  a1[1] = v9;
  return v9 - 0x200000 < 0xFFC00000;
}

uint64_t JxlDecoderSetDesiredIntensityTarget(uint64_t a1, float a2)
{
  if (a2 < 0.0) {
    return 1;
  }
  uint64_t result = 0;
  *(float *)(a1 + 1004) = a2;
  return result;
}

uint64_t JxlDecoderSetBoxBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 963) || !*(unsigned char *)(a1 + 961)) {
    return 1;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 963) = 257;
  *(void *)(a1 + 968) = a2;
  *(void *)(a1 + 976) = a3;
  *(void *)(a1 + 992) = 0;
  return result;
}

uint64_t JxlDecoderReleaseBoxBuffer(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 963)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 992);
  uint64_t v2 = *(void *)(a1 + 976) - v1;
  *(unsigned char *)(a1 + 963) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  if (*(unsigned char *)(a1 + 964)) {
    uint64_t v3 = *(void *)(a1 + 984) + v1;
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)(a1 + 984) = v3;
  *(unsigned char *)(a1 + 964) = 0;
  return v2;
}

uint64_t JxlDecoderSetDecompressBoxes(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 962) = a2 != 0;
  return 0;
}

uint64_t JxlDecoderGetBoxType(uint64_t a1, _DWORD *a2, int a3)
{
  if (!*(unsigned char *)(a1 + 961)) {
    return 1;
  }
  uint64_t result = 0;
  float v5 = (_DWORD *)(a1 + 953);
  if (a3) {
    ++v5;
  }
  *a2 = *v5;
  return result;
}

uint64_t JxlDecoderGetBoxSizeRaw(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 961)) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 936);
  return result;
}

uint64_t JxlDecoderGetBoxSizeContents(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 961)) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 928);
  return result;
}

uint64_t JxlDecoderSetProgressiveDetail(uint64_t a1, int a2)
{
  if ((a2 - 4) < 0xFFFFFFFD) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 1040) = a2;
  return result;
}

uint64_t JxlDecoderSetImageOutBitDepth(uint64_t a1, int *a2)
{
  if (!*(unsigned char *)(a1 + 1056)) {
    return 1;
  }
  int v2 = *a2;
  uint64_t v3 = *(unsigned int *)(a1 + 1132);
  if (*a2 == 2)
  {
    unsigned int v5 = a2[1];
    if (!v5) {
      return 1;
    }
    goto LABEL_11;
  }
  if (v2 == 1)
  {
    double v4 = (unsigned int *)(a1 + 1220);
  }
  else
  {
    if (v2 || v3 >= 6) {
      return 1;
    }
    double v4 = (unsigned int *)((char *)&unk_24854F4D8 + 4 * v3);
  }
  unsigned int v5 = *v4;
  if (v5)
  {
LABEL_11:
    BOOL v6 = v3 == 2 && v5 > 8;
    if (!v6 && (v3 != 3 || v5 <= 0x10))
    {
      uint64_t v7 = 0;
      uint64_t v9 = *(void *)a2;
      *(_DWORD *)(a1 + 1160) = a2[2];
      *(void *)(a1 + 1152) = v9;
      return v7;
    }
  }
  return 1;
}

uint64_t sub_248419548(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2)
  {
    *(void *)a1 = *a2;
    unsigned int v5 = a2 + 1;
    unint64_t v6 = a2[1] + ((unint64_t)(a3 + 7) >> 3);
    sub_2484106F0(a2 + 1, v6);
    uint64_t v7 = a2[4];
    if (a2[3]) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = 0;
    }
    *unsigned int v5 = v8;
    *(void *)(a1 + 32) = v7;
    a2[4] = a1;
  }
  return a1;
}

void sub_2484195C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 0;
  sub_24841962C(a1, a2, &v10, &v9);
  if (a4)
  {
    uint64_t v7 = a4 + 40 * a3;
    uint64_t v8 = *(void *)(v7 + 24) + v10;
    *(void *)(v7 + 16) += *(void *)(a1 + 16);
    *(void *)(v7 + 24) = v8;
  }
}

void sub_24841962C(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(unsigned char *)(a1 + 24) = 1;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *a2 - *(void *)a1;
    *a3 = v7;
    *a4 = v6 - v7;
    uint64_t v8 = a2 + 1;
    unint64_t v9 = a2[1] - ((unint64_t)(v6 - v7) >> 3);
    sub_2484106F0(a2 + 1, v9);
    if (a2[3]) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0;
    }
    *uint64_t v8 = v10;
    double v11 = *(void **)(a1 + 32);
    for (a2[4] = v11; v11; double v11 = (void *)v11[4])
      *v11 += v7;
  }
}

void sub_2484196CC(unint64_t *a1, uint64_t *a2)
{
  sub_248419548((uint64_t)v9, a1, *a2);
  unint64_t v4 = (unint64_t)*a2 >> 3;
  uint64_t v5 = *a2 & 7;
  if ((unint64_t)*a2 >= 8)
  {
    uint64_t v6 = 0;
    if (v4 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = (unint64_t)*a2 >> 3;
    }
    unint64_t v8 = *a1;
    do
    {
      *(void *)(a1[3] + (v8 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a2[3] + v6) << (v8 & 7)) | *(unsigned __int8 *)(a1[3] + (v8 >> 3));
      unint64_t v8 = *a1 + 8;
      *a1 = v8;
      ++v6;
    }
    while (v7 != v6);
  }
  if (v5)
  {
    *(void *)(a1[3] + (*a1 >> 3)) = ((unint64_t)(*(unsigned __int8 *)(a2[3] + v4) & ~(-1 << v5)) << (*a1 & 7)) | *(unsigned __int8 *)(a1[3] + (*a1 >> 3));
    *a1 += v5;
  }
  sub_24841962C((uint64_t)v9, a1, &v11, &v10);
}

void sub_2484197C4(void *a1, unint64_t **a2)
{
  int v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = *v2;
      v2 += 5;
      v6 += v7 >> 3;
    }
    while (v2 != v3);
    if (v6)
    {
      uint64_t v8 = v6 + a1[1];
      sub_2484106F0(a1 + 1, v8 + 1);
      uint64_t v9 = a1[3];
      if (v9) {
        uint64_t v10 = v8 + 1;
      }
      else {
        uint64_t v10 = 0;
      }
      a1[1] = v10;
      uint64_t v11 = *a1 >> 3;
      int v13 = *a2;
      double v12 = a2[1];
      if (v13 != v12)
      {
        do
        {
          unint64_t v14 = *v13;
          if (*v13 >= 8)
          {
            memcpy((void *)(a1[3] + v11), (const void *)v13[3], v14 >> 3);
            v11 += v14 >> 3;
          }
          v13 += 5;
        }
        while (v13 != v12);
        uint64_t v9 = a1[3];
      }
      *(unsigned char *)(v9 + v11) = 0;
      *a1 += 8 * v6;
    }
  }
}

unint64_t sub_24841989C(unint64_t result, void *a2, void *a3)
{
  unint64_t v3 = a2[3];
  if (v3)
  {
    unint64_t v4 = result;
    uint64_t result = 0;
    uint64_t v5 = a3[526];
    float v6 = *(float *)(v5 + 996);
    uint64_t v7 = a3[537] >> 2;
    uint64_t v8 = *(void *)(v5 + 1080);
    uint64_t v50 = v5;
    uint64_t v51 = 2 * v7;
    unint64_t v9 = a2[2];
    uint64_t v49 = 8 * v7 + 8;
    uint64_t v10 = 4 * v7;
    uint64_t v52 = v7;
    uint64_t v48 = (8 * v7) | 4;
    uint64_t v53 = a2;
    do
    {
      if (v9)
      {
        unint64_t v11 = 0;
        unint64_t v12 = a2[1] + result;
        uint64_t v13 = a3[538];
        uint64_t v14 = a3[537];
        uint64_t v55 = v13 + v14 * v12 + 4 * *a2;
        double v15 = (void *)a3[526];
        uint64_t v16 = *(void *)(v50 + 176) + *(void *)(v50 + 168) * v12 + *a2;
        uint64_t v17 = v14 * v12 + 4 * *a2;
        uint64_t v18 = v13 + v49 + v17;
        int v19 = (unsigned __int8 *)(v15[136] + *a2 + v15[135] * v12);
        uint64_t v20 = v13 + v48 + v17;
        int v57 = (_DWORD *)v18;
        uint64_t v58 = v15[131] + v15[130] * v12 + 4 * *a2;
        unint64_t v56 = result;
        uint64_t v54 = v16;
        do
        {
          unint64_t v21 = *(unsigned __int8 *)(v16 + v11);
          if (v21)
          {
            uint64_t v22 = 0;
            unint64_t v23 = v21 >> 1;
            unint64_t v24 = byte_2485534EC[v21 >> 1];
            float v25 = *(float *)(v4 + 104) / (float)((float)(v6 * (float)*(int *)(v58 + 4 * v11)) * -1.1716);
            unint64_t v26 = byte_248553507[v23];
            if (v24 <= 1) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = v24;
            }
            if (v26 <= 1) {
              uint64_t v28 = 1;
            }
            else {
              uint64_t v28 = byte_248553507[v23];
            }
            uint64_t v29 = v19;
            unint64_t v30 = (float *)v18;
            do
            {
              uint64_t v31 = v29;
              long long v32 = v30;
              uint64_t v33 = v27;
              do
              {
                unsigned int v34 = *v31++;
                float v35 = v25 * *(float *)(v4 + 4 * v34 + 44);
                if (v35 >= -0.0001) {
                  float v36 = -10000.0;
                }
                else {
                  float v36 = 1.0 / v35;
                }
                *v32++ = v36;
                --v33;
              }
              while (v33);
              ++v22;
              unint64_t v30 = (float *)((char *)v30 + v10);
              v29 += v8;
            }
            while (v22 != v28);
            uint64_t v37 = *a2;
            uint64_t v38 = v57;
            uint64_t v39 = v28;
            if (!(v11 + *a2))
            {
              do
              {
                *(v38 - 1) = *v38;
                uint64_t v38 = (_DWORD *)((char *)v38 + v10);
                --v39;
              }
              while (v39);
            }
            uint64_t v40 = -v37;
            uint64_t v41 = v11 + v24 + v37;
            uint64_t v42 = a3[526];
            if (v41 == *(void *)(v42 + 72))
            {
              uint64_t v43 = 4 * v24;
              do
              {
                *(_DWORD *)(v18 + v43) = *(_DWORD *)(v20 + v43);
                v43 += v10;
                --v28;
              }
              while (v28);
              if (v11 == v40) {
                uint64_t v44 = 1;
              }
              else {
                uint64_t v44 = v11 + 2;
              }
              unint64_t v45 = v11 + 3;
            }
            else
            {
              unint64_t v45 = v11 + 2;
              if (v11 == v40) {
                uint64_t v44 = 1;
              }
              else {
                uint64_t v44 = v11 + 2;
              }
            }
            unint64_t v46 = v45 + v24 - v44;
            uint64_t v47 = a2[1];
            if (!(result + v47))
            {
              memcpy((void *)(v55 + 4 * v44 + 4 * v52), (const void *)(v55 + 4 * v44 + 4 * v51), 4 * v46);
              a2 = v53;
              uint64_t v16 = v54;
              uint64_t result = v56;
              uint64_t v47 = v53[1];
              uint64_t v42 = a3[526];
            }
            if (result + v26 + v47 == *(void *)(v42 + 80))
            {
              memcpy((void *)(v55 + 4 * v44 + 4 * (v26 + 2) * v52), (const void *)(v55 + 4 * v44 + 4 * (v52 + v52 * v26)), 4 * v46);
              a2 = v53;
              uint64_t v16 = v54;
              uint64_t result = v56;
            }
          }
          ++v11;
          unint64_t v9 = a2[2];
          v18 += 4;
          ++v19;
          v20 += 4;
        }
        while (v11 < v9);
        unint64_t v3 = a2[3];
      }
      ++result;
    }
    while (result < v3);
  }
  return result;
}

uint64_t sub_248419BD4(uint64_t a1)
{
  int v2 = &unk_26FC65A00;
  long long v3 = xmmword_2484DC960;
  uint64_t v4 = 0;
  return (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v2);
}

uint64x2_t sub_248419C48(uint64_t a1, uint64_t a2, double a3, int64x2_t a4)
{
  int64x2_t v5 = *(int64x2_t *)(a1 + 8);
  a4.i64[0] = 1;
  *(void *)&long long v6 = vaddq_s64(v5, a4).u64[0];
  *((void *)&v6 + 1) = vaddq_s64(v5, v5).i64[1];
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 24) *= 2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
  *(void *)(a1 + 24) >>= 1;
  int64x2_t v7 = *(int64x2_t *)(a1 + 8);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v8.i64[0] = vaddq_s64(v7, v8).u64[0];
  uint64x2_t result = vshrq_n_u64((uint64x2_t)v7, 1uLL);
  v8.i64[1] = result.i64[1];
  *(int64x2_t *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_248419CE0(uint64_t a1)
{
  return 0;
}

uint64_t sub_248419CF4(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *, void, uint64_t))(*a1 + 48))(a1, 0, a2);
  if (!result) {
    ++a1[2];
  }
  return result;
}

uint64_t sub_248419D50()
{
  return 0;
}

uint64_t sub_248419D58()
{
  return 0;
}

uint64_t sub_248419D64(uint64_t a1)
{
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);
  if (result <= 1) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_248419DA8()
{
  return 0;
}

uint64_t sub_248419DB0(float a1, uint64_t a2, float *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t sub_248419DBC(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_248419DC8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  *a4 = a3;
  return 0;
}

uint64_t sub_248419DD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  *a5 = a4;
  return 0;
}

uint64_t sub_248419DE0(uint64_t a1, char a2, unsigned char *a3)
{
  *a3 = a2;
  return 0;
}

void sub_248419DEC(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

uint64_t sub_248419E1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t sub_248419E40(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);
  if (!result) {
    return *a3 == 0;
  }
  return result;
}

uint64_t sub_248419E98(uint64_t a1, int a2)
{
  return a2 ^ 1u;
}

uint64_t sub_248419EA0(uint64_t a1, uint64_t a2, BOOL *a3)
{
  BOOL v5 = *a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL *))(*(void *)a1 + 40))(a1, 1, a2, &v5);
  if (!result) {
    *a3 = v5;
  }
  return result;
}

void *sub_248419F1C(void *result)
{
  *uint64_t result = &unk_26FC63A30;
  return result;
}

uint64_t sub_248419F3C(uint64_t a1)
{
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);
  if (result <= 1) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_248419F80()
{
  return 0;
}

uint64_t sub_248419F88(float a1, uint64_t a2, float *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t sub_248419F94(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_248419FA0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  *a4 = a3;
  return 0;
}

uint64_t sub_248419FAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  *a5 = a4;
  return 0;
}

uint64_t sub_248419FB8(uint64_t a1, char a2, unsigned char *a3)
{
  *a3 = a2;
  return 0;
}

void sub_248419FC4(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

void *sub_248419FF4(void *result)
{
  *uint64_t result = &unk_26FC63A30;
  return result;
}

uint64_t sub_24841A014()
{
  return 1;
}

uint64_t sub_24841A01C(uint64_t a1, float *a2, float a3)
{
  BOOL v4 = vabds_f32(*a2, a3) < 0.000001 && *(unsigned char *)(a1 + 32) != 0;
  *(unsigned char *)(a1 + 32) = v4;
  return 0;
}

uint64_t sub_24841A048(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = *a3 == a2 && *(unsigned char *)(a1 + 32) != 0;
  *(unsigned char *)(a1 + 32) = v4;
  return 0;
}

uint64_t sub_24841A068(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  BOOL v5 = *a4 == a3 && *(unsigned char *)(a1 + 32) != 0;
  *(unsigned char *)(a1 + 32) = v5;
  return 0;
}

uint64_t sub_24841A088(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  BOOL v6 = *a5 == a4 && *(unsigned char *)(a1 + 32) != 0;
  *(unsigned char *)(a1 + 32) = v6;
  return 0;
}

void sub_24841A0A8(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

void *sub_24841A0D8(void *result)
{
  *uint64_t result = &unk_26FC63A30;
  return result;
}

uint64_t sub_24841A0F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = &unk_26FC65B98;
  char v13 = 1;
  int8x8_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  long long v11 = xmmword_2484DC960;
  uint64_t v12 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v10);
  if (!result)
  {
    if (v13)
    {
      *a2 = 0;
      uint64_t v6 = v14;
      uint64_t v7 = v16;
      *a3 = v14;
      if (v7)
      {
        *a2 = v6 - v7;
        uint64_t v17 = 0;
        sub_24841A204(v6 - v7, &v17);
        uint64_t v8 = v17 + v6;
        *a3 = v17 + v6;
        uint8x8_t v9 = (uint8x8_t)vcnt_s8(v15);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] >= 2uLL) {
          *a3 = v8 + 2 * v9.u32[0] - 2;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t sub_24841A204(unint64_t result, uint64_t *a2)
{
  if (!result)
  {
    uint64_t v2 = 2;
    goto LABEL_16;
  }
  if (result < 0x11)
  {
    uint64_t v2 = 6;
    goto LABEL_16;
  }
  if (result < 0x111)
  {
    uint64_t v2 = 10;
    goto LABEL_16;
  }
  if (result < 0x1000)
  {
    uint64_t v7 = 14;
    goto LABEL_15;
  }
  unint64_t v3 = result >> 12;
  unsigned int v4 = 12;
  uint64_t v2 = 19;
  do
  {
    unint64_t v5 = v3;
    v2 += 9;
    if (v3 < 0x100) {
      break;
    }
    v3 >>= 8;
    BOOL v6 = v4 >= 0x34;
    v4 += 8;
  }
  while (!v6);
  if (v5 <= 0xFF)
  {
    uint64_t v7 = v2 - 5;
LABEL_15:
    uint64_t v2 = v7 + 1;
  }
LABEL_16:
  *a2 = v2;
  return result;
}

uint64_t sub_24841A288(void *a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(void *, void, uint64_t *))(*a1 + 48))(a1, 0, a2);
  if (!result)
  {
    ++a1[2];
    uint64_t v5 = *a2;
    a1[6] = *a2;
    if (v5) {
      a1[7] = a1[5];
    }
  }
  return result;
}

uint64_t sub_24841A2FC(uint64_t a1, uint64_t a2, char *a3)
{
  BOOL v6 = &unk_26FC65C20;
  char v9 = 1;
  long long v7 = xmmword_2484DC960;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 16))(a2, &v6);
  *a3 = v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)a1 + 24))(a1, 1, a3);
  if (!result) {
    return *a3 == 0;
  }
  return result;
}

uint64_t sub_24841A3D8(uint64_t a1, float *a2)
{
  float v2 = fabsf(*a2);
  BOOL v3 = v2 != INFINITY && v2 <= 65504.0;
  if (!*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) += 16;
  return 0;
}

uint64_t sub_24841A434(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = 0;
  sub_24841A204(*a3, &v5);
  *(void *)(a1 + 40) += v5;
  return 0;
}

uint64_t sub_24841A480(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v4 = (unint64_t)*a4 >> a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = v4;
  *(unsigned char *)(a1 + 32) = v5;
  *(void *)(a1 + 40) += a2;
  return 0;
}

uint64_t sub_24841A4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v7 = *a5;
  unint64_t v12 = 0;
  BOOL v8 = sub_24841A528(a2, a3, v7, &v13, &v12);
  BOOL v9 = !v8;
  unint64_t v10 = v12;
  if (v8) {
    unint64_t v10 = 0;
  }
  if (!*(unsigned char *)(a1 + 32)) {
    BOOL v9 = 0;
  }
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) += v10;
  return 0;
}

BOOL sub_24841A528(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, unint64_t *a5)
{
  uint64_t v5 = 0;
  v15[0] = a1;
  v15[1] = a2;
  *a4 = 0;
  unint64_t v6 = 64;
  *a5 = 64;
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v15 + v5);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v8 = (v7 & 0x1F) + 1;
      unsigned int v9 = v7 >> 5;
      BOOL v11 = v9 > a3;
      unint64_t v10 = (1 << v8) + v9;
      BOOL v11 = !v11 && v10 > a3;
      unint64_t v12 = v8 + 2;
      if (v11 && v12 < v6)
      {
        *a4 = v5;
        *a5 = v12;
        unint64_t v6 = v8 + 2;
      }
      goto LABEL_12;
    }
    if ((v7 & 0x7FFFFFFF) == a3) {
      break;
    }
LABEL_12:
    if (++v5 == 4) {
      return v6 == 64;
    }
  }
  BOOL result = 0;
  *a4 = v5;
  *a5 = 2;
  return result;
}

void sub_24841A5C4(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

void *sub_24841A5F4(void *result)
{
  *BOOL result = &unk_26FC63A30;
  return result;
}

uint64_t sub_24841A614(uint64_t a1, uint64_t a2)
{
  BOOL v4 = &unk_26FC65A88;
  __int16 v7 = 257;
  uint64_t v8 = a1;
  bzero(&v9, 0x210uLL);
  long long v5 = xmmword_2484DC960;
  uint64_t v6 = 0;
  LODWORD(result) = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 16))(a2, &v4);
  if (result) {
    return result;
  }
  else {
    return (_BYTE)v7 == 0;
  }
}

uint64_t sub_24841A6C4(uint64_t a1)
{
  ++*(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 568);
  if (!v1 || !*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 560);
  uint64_t result = 1;
  BOOL v5 = __CFADD__(v3, v1);
  unint64_t v6 = v3 + v1;
  if (!v5)
  {
    unint64_t v7 = 8
       * (*(void *)(*(void *)(a1 + 40) + 16)
        - *(void *)(*(void *)(a1 + 40) + 32)
        + *(void *)(*(void *)(a1 + 40) + 40))
       - *(void *)(*(void *)(a1 + 40) + 8);
    if (v6 >= v7)
    {
      if (v6 != v7)
      {
        sub_24841642C(*(unint64_t **)(a1 + 40), v6 - v7);
        uint64_t v8 = *(void **)(a1 + 40);
        uint64_t v10 = v8[3];
        uint64_t v9 = v8[4];
        unint64_t v11 = 8 * (v8[2] - v9 + v8[5]) - v8[1];
        v8[7] = v11;
        if (v11 > 8 * (v10 - v9) + 64) {
          return 0xFFFFFFFFLL;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_24841A784(void *a1, unint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(void *, void, unint64_t *))(*a1 + 48))(a1, 0, a2);
  if (!result)
  {
    ++a1[2];
    unint64_t v5 = *a2;
    if (*a2)
    {
      while (1)
      {
        unint64_t v6 = &a1[__clz(__rbit64(v5)) + 6];
        uint64_t result = (*(uint64_t (**)(void *, void, void *))(*a1 + 48))(a1, 0, v6);
        if (result) {
          break;
        }
        uint64_t v7 = a1[70];
        BOOL v8 = __CFADD__(*v6, v7);
        a1[70] = *v6 + v7;
        if (v8) {
          return 1;
        }
        v5 &= v5 - 1;
        if (!v5)
        {
          uint64_t result = 0;
          a1[71] = 8 * (*(void *)(a1[5] + 16) - *(void *)(a1[5] + 32) + *(void *)(a1[5] + 40))
                 - *(void *)(a1[5] + 8);
          return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24841A890()
{
  return 1;
}

uint64_t sub_24841A898(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &unk_26FC65CA8;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 16))(a2, &v3);
}

uint64_t sub_24841A910(uint64_t a1, float *a2)
{
  if (sub_24841A984(*(unint64_t **)(a1 + 40), a2)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(a1 + 32) == 0;
  }
  char v4 = !v3;
  *(unsigned char *)(a1 + 32) = v4;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v7 = v5[3];
  uint64_t v6 = v5[4];
  unint64_t v8 = 8 * (v5[2] - v6 + v5[5]) - v5[1];
  v5[7] = v8;
  if (v8 <= 8 * (v7 - v6) + 64) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24841A984(unint64_t *a1, float *a2)
{
  char v4 = (void *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v6 = *a1;
    uint64_t v7 = a1[1];
  }
  else
  {
    unint64_t v5 = a1[1];
    unint64_t v6 = *a1 | (*v4 << v5);
    a1[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    uint64_t v7 = v5 | 0x38;
  }
  *a1 = v6 >> 16;
  a1[1] = v7 - 16;
  unsigned int v8 = (v6 >> 10) & 0x1F;
  if (v8 == 31) {
    return 1;
  }
  unsigned int v9 = (unsigned __int16)v6;
  unsigned int v10 = v6 & 0x3FF;
  uint64_t result = 0;
  if (v8)
  {
    *(_DWORD *)a2 = ((v9 << 16) & 0x80000000 | (v8 << 23) | (v10 << 13)) + 939524096;
  }
  else
  {
    float v12 = -(float)((float)((float)v10 * 0.00097656) * 0.000061035);
    if (v9 < 0x8000) {
      float v12 = (float)((float)v10 * 0.00097656) * 0.000061035;
    }
    *a2 = v12;
  }
  return result;
}

uint64_t sub_24841AA64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *a3 = sub_24841AACC(*(unint64_t **)(a1 + 40));
  char v4 = *(void **)(a1 + 40);
  uint64_t v6 = v4[3];
  uint64_t v5 = v4[4];
  unint64_t v7 = 8 * (v4[2] - v5 + v4[5]) - v4[1];
  v4[7] = v7;
  if (v7 <= 8 * (v6 - v5) + 64) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24841AACC(unint64_t *a1)
{
  float v2 = (void *)a1[2];
  if ((unint64_t)v2 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  else
  {
    unint64_t v3 = a1[1];
    unint64_t v4 = *a1 | (*v2 << v3);
    a1[2] = (unint64_t)v2 + ((63 - v3) >> 3);
    uint64_t v5 = v3 | 0x38;
  }
  uint64_t v6 = v5 - 2;
  unint64_t v7 = v4 >> 2;
  *a1 = v4 >> 2;
  a1[1] = v5 - 2;
  uint64_t v8 = v4 & 3;
  if ((v4 & 3) != 0)
  {
    if (v8 == 2)
    {
      float v12 = (void *)a1[2];
      if ((unint64_t)v12 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v13 = *a1;
        uint64_t v14 = a1[1];
      }
      else
      {
        unint64_t v13 = (*v12 << v6) | v7;
        a1[2] = (unint64_t)v12 + ((unint64_t)(65 - v5) >> 3);
        uint64_t v14 = v6 | 0x38;
      }
      *a1 = v13 >> 8;
      a1[1] = v14 - 8;
      return v13 + 17;
    }
    else if (v8 == 1)
    {
      unsigned int v9 = (void *)a1[2];
      if ((unint64_t)v9 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v10 = *a1;
        uint64_t v11 = a1[1];
      }
      else
      {
        unint64_t v10 = (*v9 << v6) | v7;
        a1[2] = (unint64_t)v9 + ((unint64_t)(65 - v5) >> 3);
        uint64_t v11 = v6 | 0x38;
      }
      *a1 = v10 >> 4;
      a1[1] = v11 - 4;
      return (v10 & 0xF) + 1;
    }
    else
    {
      int8x8_t v15 = (void *)a1[2];
      if ((unint64_t)v15 > a1[3])
      {
        sub_2483EB0C0(a1);
        unint64_t v16 = *a1;
        uint64_t v17 = a1[1];
      }
      else
      {
        unint64_t v16 = (*v15 << v6) | v7;
        a1[2] = (unint64_t)v15 + ((unint64_t)(65 - v5) >> 3);
        uint64_t v17 = v6 | 0x38;
      }
      uint64_t v8 = v16 & 0xFFF;
      uint64_t v18 = v17 - 12;
      unint64_t v19 = v16 >> 12;
      *a1 = v16 >> 12;
      a1[1] = v18;
      for (uint64_t i = 12; ; i += 8)
      {
        unint64_t v21 = (void *)a1[2];
        if ((unint64_t)v21 > a1[3])
        {
          sub_2483EB0C0(a1);
          unint64_t v22 = *a1;
          uint64_t v23 = a1[1];
        }
        else
        {
          unint64_t v22 = v19 | (*v21 << v18);
          a1[2] = (unint64_t)v21 + ((unint64_t)(63 - v18) >> 3);
          uint64_t v23 = v18 | 0x38;
        }
        uint64_t v24 = v23 - 1;
        unint64_t v25 = v22 >> 1;
        *a1 = v22 >> 1;
        a1[1] = v23 - 1;
        if ((v22 & 1) == 0) {
          break;
        }
        unint64_t v26 = (void *)a1[2];
        unint64_t v27 = a1[3];
        if (i == 60)
        {
          if ((unint64_t)v26 > v27)
          {
            sub_2483EB0C0(a1);
            unint64_t v30 = *a1;
            uint64_t v31 = a1[1];
          }
          else
          {
            unint64_t v30 = (*v26 << v24) | v25;
            a1[2] = (unint64_t)v26 + ((unint64_t)(64 - v23) >> 3);
            uint64_t v31 = v24 | 0x38;
          }
          *a1 = v30 >> 4;
          a1[1] = v31 - 4;
          return v8 | (v30 << 60);
        }
        if ((unint64_t)v26 > v27)
        {
          sub_2483EB0C0(a1);
          unint64_t v28 = *a1;
          uint64_t v29 = a1[1];
        }
        else
        {
          unint64_t v28 = (*v26 << v24) | v25;
          a1[2] = (unint64_t)v26 + ((unint64_t)(64 - v23) >> 3);
          uint64_t v29 = v24 | 0x38;
        }
        uint64_t v18 = v29 - 8;
        unint64_t v19 = v28 >> 8;
        *a1 = v28 >> 8;
        a1[1] = v18;
        v8 |= (unint64_t)v28 << i;
      }
    }
  }
  return v8;
}

uint64_t sub_24841AD54(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = *(unint64_t **)(a1 + 40);
  uint64_t v8 = (void *)v6[2];
  unint64_t v7 = v6[3];
  if ((unint64_t)v8 > v7)
  {
    sub_2483EB0C0(*(void **)(a1 + 40));
    unint64_t v10 = *v6;
    uint64_t v12 = v6[1];
    unint64_t v13 = *(unint64_t **)(a1 + 40);
    uint64_t v11 = (char *)v13[2];
    unint64_t v7 = v13[3];
  }
  else
  {
    unint64_t v9 = v6[1];
    unint64_t v10 = *v6 | (*v8 << v9);
    uint64_t v11 = (char *)v8 + ((63 - v9) >> 3);
    void v6[2] = (unint64_t)v11;
    uint64_t v12 = v9 | 0x38;
    unint64_t v13 = v6;
  }
  *uint64_t v6 = v10 >> a2;
  v6[1] = v12 - a2;
  *a4 = v10 & ~(-1 << a2);
  unint64_t v14 = v13[4];
  unint64_t v15 = 8 * (void)&v11[v13[5] - v14] - v13[1];
  v13[7] = v15;
  if (v15 <= 8 * (v7 - v14) + 64) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24841AE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = sub_24841AE94(a2, a3, *(unint64_t **)(a1 + 40));
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v8 = v6[3];
  uint64_t v7 = v6[4];
  unint64_t v9 = 8 * (v6[2] - v7 + v6[5]) - v6[1];
  v6[7] = v9;
  if (v9 <= 8 * (v8 - v7) + 64) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24841AE94(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v15[0] = a1;
  v15[1] = a2;
  unint64_t v4 = (void *)a3[2];
  if ((unint64_t)v4 > a3[3])
  {
    sub_2483EB0C0(a3);
    unint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  else
  {
    unint64_t v5 = a3[1];
    unint64_t v6 = *a3 | (*v4 << v5);
    a3[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    uint64_t v7 = v5 | 0x38;
  }
  uint64_t v8 = v7 - 2;
  *a3 = v6 >> 2;
  a3[1] = v7 - 2;
  unsigned int v9 = *((_DWORD *)v15 + (v6 & 3));
  if ((v9 & 0x80000000) != 0) {
    return v9 & 0x7FFFFFFF;
  }
  uint64_t v10 = (v9 & 0x1F) + 1;
  uint64_t v11 = (void *)a3[2];
  if ((unint64_t)v11 > a3[3])
  {
    sub_2483EB0C0(a3);
    unint64_t v12 = *a3;
    uint64_t v13 = a3[1];
  }
  else
  {
    unint64_t v12 = (*v11 << v8) | (v6 >> 2);
    a3[2] = (unint64_t)v11 + ((unint64_t)(65 - v7) >> 3);
    uint64_t v13 = v8 | 0x38;
  }
  *a3 = v12 >> v10;
  a3[1] = v13 - v10;
  return (v12 & ~(-1 << v10)) + (v9 >> 5);
}

void sub_24841AF8C(void *a1)
{
  *a1 = &unk_26FC63A30;
  JUMPOUT(0x24C579F90);
}

void *sub_24841AFBC(void *result)
{
  *uint64_t result = &unk_26FC63A30;
  return result;
}

BOOL sub_24841AFDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = &unk_26FC65A88;
  __int16 v7 = 257;
  uint64_t v8 = a1;
  bzero(&v9, 0x210uLL);
  long long v5 = xmmword_2484DC960;
  uint64_t v6 = 0;
  return (*(unsigned int (**)(uint64_t, void **))(*(void *)a2 + 16))(a2, &v4) != -1;
}

uint64_t sub_24841B080(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x6180000002, 0, &v12);
  if (result) {
    return result;
  }
  unsigned int v5 = v12;
  if (v12 >= 5) {
    return 1;
  }
  *(_DWORD *)(a1 + 8) = v12;
  unsigned int v6 = v5 & 0xFFFFFFFE;
  if (*(void *)(a1 + 24)) {
    BOOL v7 = v6 == 2;
  }
  else {
    BOOL v7 = 0;
  }
  uint64_t v8 = v7;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v8)) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x6280000002, 0, a1 + 12);
  if (result) {
    return result;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2))
  {
LABEL_11:
    if (!*(void *)(a1 + 24))
    {
      int v9 = *(_DWORD *)(a1 + 8);
      goto LABEL_19;
    }
  }
  else if (*(void *)(a1 + 24) <= (unint64_t)*(unsigned int *)(a1 + 12))
  {
    return 1;
  }
  int v9 = *(_DWORD *)(a1 + 8);
  if ((v9 & 0xFFFFFFFE) != 2)
  {
LABEL_19:
    BOOL v10 = v9 == 4;
    goto LABEL_20;
  }
  BOOL v10 = 1;
LABEL_20:
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v10)
    || (uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 16),
        !result))
  {
    if (*(_DWORD *)(a1 + 8)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *(unsigned char *)(a1 + 32) != 0;
    }
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v11)) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, a1 + 20);
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_24841B300()
{
}

uint64_t sub_24841B318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned __int8 *)(v4 + 253) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v5)
    || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x1F00000007, 0, a1 + 8), !result))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 404) != 0;
    }
    else {
      BOOL v7 = 0;
    }
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v7)) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 32, 0, a1 + 12);
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_24841B450()
{
}

uint64_t sub_24841B468(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000280000001, 0x8280000003, 1, a1 + 2);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 != 1)) {
      return 0;
    }
    uint64_t v6 = a1 + 3;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x6080000002, 0, a1 + 3);
    if (!result)
    {
      int v7 = *v6;
      if (*v6 <= *v4)
      {
        if (*v4 == 1)
        {
          unint64_t v8 = 0;
LABEL_14:
          a1[v8 + 26] = 0;
          if (!v7) {
            return 0;
          }
          unint64_t v11 = 0;
          unsigned int v12 = a1 + 4;
          while (1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, _DWORD *))(*(void *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, v12);
            if (result) {
              break;
            }
            if (v11 && *v12 >= *(v12 - 1)) {
              return 1;
            }
            ++v11;
            unint64_t v13 = *v6;
            ++v12;
            if (v11 >= v13)
            {
              if (!v13) {
                return 0;
              }
              uint64_t v14 = 0;
              for (uint64_t i = a1 + 15; ; ++i)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x280000002, 0, i);
                if (result) {
                  break;
                }
                unsigned int v16 = *i;
                if (v14 && v16 <= *(i - 1) || v16 >= *v4) {
                  return 1;
                }
                uint64_t result = 0;
                if (++v14 >= (unint64_t)*v6) {
                  return result;
                }
              }
              return result;
            }
          }
        }
        else
        {
          unint64_t v9 = 0;
          BOOL v10 = a1 + 26;
          while (1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(*(void *)a2 + 40))(a2, 2, 0, v10);
            if (result) {
              break;
            }
            ++v9;
            unint64_t v8 = *v4 - 1;
            ++v10;
            if (v9 >= v8)
            {
              int v7 = *v6;
              goto LABEL_14;
            }
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_24841B700()
{
}

uint64_t sub_24841B718(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  unsigned int v58 = *(_DWORD *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, &v58);
  if (!result)
  {
    *(_DWORD *)(a1 + 16) = v58;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2)
      && *(unsigned char *)(a1 + 560)
      && *(_DWORD *)(a1 + 16))
    {
      return 1;
    }
    BOOL v57 = *(_DWORD *)(a1 + 12) == 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, BOOL *))(*(void *)a2 + 24))(a2, 0, &v57);
    if (!result)
    {
      *(_DWORD *)(a1 + 12) = v57;
      BOOL v5 = (unsigned char *)(a1 + 24);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 48))(a2, 0, a1 + 24);
      if (!result)
      {
        uint64_t v6 = *(void *)(a1 + 408);
        if (v6 && !*(unsigned char *)(v6 + 41))
        {
          LOBYTE(v58) = *(_DWORD *)(a1 + 32) == 2;
          uint64_t result = (*(uint64_t (**)(uint64_t, void, unsigned int *))(*(void *)a2 + 24))(a2, 0, &v58);
          if (result) {
            return result;
          }
          int v11 = v58;
          int v12 = (_BYTE)v58 ? 2 : 1;
          *(_DWORD *)(a1 + 32) = v12;
          BOOL v7 = v11 && (unint64_t)((*v5 & 0x20) == 0);
        }
        else
        {
          BOOL v7 = 0;
          *(_DWORD *)(a1 + 32) = 0;
        }
        if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v7)
          || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 40), !result))
        {
          uint64_t v8 = *(void *)(a1 + 408);
          if (v8) {
            unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 336) - *(void *)(v8 + 328)) >> 5);
          }
          else {
            unint64_t v9 = 0;
          }
          if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, (*(void *)v5 & 0x20) == 0))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, a1 + 268);
            if (result) {
              return result;
            }
            if (*(void *)(a1 + 408)
              && !(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v9 != 0))
            {
              uint64_t v32 = *(void *)(a1 + 408);
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v32 + 336) - *(void *)(v32 + 328)) >> 5);
              unsigned int v58 = 1;
              sub_2483F1FEC((char **)(a1 + 272), v33, &v58);
              if (*(void *)(v32 + 336) != *(void *)(v32 + 328))
              {
                uint64_t v34 = 0;
                unint64_t v35 = 0;
                uint64_t v36 = 40;
                do
                {
                  int v37 = *(_DWORD *)(*(void *)(*(void *)(a1 + 408) + 328) + v36);
                  uint64_t v38 = (unsigned int *)(*(void *)(a1 + 272) + v34);
                  *v38 >>= v37;
                  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, v38);
                  if (result) {
                    return result;
                  }
                  unsigned int v39 = *v38 << v37;
                  *uint64_t v38 = v39;
                  if (v39 > 8 || v39 < *(_DWORD *)(a1 + 268)) {
                    return 1;
                  }
                  ++v35;
                  v34 += 4;
                  v36 += 96;
                }
                while (v35 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v32 + 336) - *(void *)(v32 + 328)) >> 5));
              }
            }
            else
            {
              *(void *)(a1 + 280) = *(void *)(a1 + 272);
            }
          }
          if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 1)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 2, 1, a1 + 64), !result))
          {
            BOOL v10 = !*(_DWORD *)(a1 + 12) && (unint64_t)(*(_DWORD *)(a1 + 32) == 0);
            int v13 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v10);
            uint64_t v14 = (void *)(a1 + 68);
            if (v13)
            {
              *uint64_t v14 = 0x200000002;
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, 3, 3, v14);
              if (result) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 3, 2, a1 + 72);
              if (result) {
                return result;
              }
            }
            if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) != 2)
              || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 104),
                  !result))
            {
              if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) == 1)
                || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000280000001, 0x8000000480000003, 1, a1 + 404), !result))
              {
                int v15 = *(_DWORD *)(a1 + 16);
                if (v15 != 1) {
                  *(_DWORD *)(a1 + 404) = 0;
                }
                if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v15 != 1))
                {
                  char v16 = 0;
                  int v17 = *(_DWORD *)(a1 + 16);
                }
                else
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 256);
                  if (result) {
                    return result;
                  }
                  int v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 256));
                  int v17 = *(_DWORD *)(a1 + 16);
                  if (v21) {
                    goto LABEL_64;
                  }
                  if (v17) {
                    BOOL v43 = v17 == 3;
                  }
                  else {
                    BOOL v43 = 1;
                  }
                  uint64_t v44 = v43;
                  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v44))
                  {
                    unsigned int v58 = (2 * *(_DWORD *)(a1 + 296)) ^ (*(int *)(a1 + 296) >> 31);
                    unsigned int v56 = (2 * *(_DWORD *)(a1 + 300)) ^ (*(int *)(a1 + 300) >> 31);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, &v58);
                    if (result) {
                      return result;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, &v56);
                    if (result) {
                      return result;
                    }
                    *(_DWORD *)(a1 + 296) = -(v58 & 1) ^ (v58 >> 1);
                    *(_DWORD *)(a1 + 300) = -(v56 & 1) ^ (v56 >> 1);
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, a1 + 260);
                  if (result) {
                    return result;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, a1 + 264);
                  if (result) {
                    return result;
                  }
                  if (*(unsigned char *)(a1 + 256) && (!*(_DWORD *)(a1 + 260) || !*(_DWORD *)(a1 + 264))) {
                    return 1;
                  }
                  int v17 = *(_DWORD *)(a1 + 16);
                  if (v17 != 3 && v17)
                  {
LABEL_64:
                    char v16 = 0;
                  }
                  else
                  {
                    int v45 = sub_2484037EC(a1);
                    int v46 = sub_2484037C4(a1);
                    int v47 = *(_DWORD *)(a1 + 296);
                    int v48 = *(_DWORD *)(a1 + 300);
                    BOOL v49 = v47 <= 0 && v48 <= 0;
                    int v50 = *(_DWORD *)(a1 + 260) + v47;
                    char v16 = !v49 || v50 < v46 || *(_DWORD *)(a1 + 264) + v48 < v45;
                  }
                }
                if (v17) {
                  BOOL v18 = v17 == 3;
                }
                else {
                  BOOL v18 = 1;
                }
                uint64_t v19 = v18;
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v19))
                {
                  *(unsigned char *)(a1 + 392) = 0;
LABEL_53:
                  BOOL v20 = *(_DWORD *)(a1 + 16) != 1 && *(unsigned char *)(a1 + 392) == 0;
                  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v20)
                    || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, a1 + 396), !result))
                  {
                    int v28 = *(_DWORD *)(a1 + 16);
                    if (v28 == 1)
                    {
                      *(unsigned char *)(a1 + 400) = 1;
                    }
                    else
                    {
                      if (*(unsigned char *)(a1 + 392)
                        || *(_DWORD *)(a1 + 376) && !*(_DWORD *)(a1 + 396)
                        || (*(_DWORD *)(a1 + 312) ? (char v41 = 1) : (char v41 = v16), (v41 & 1) != 0))
                      {
                        uint64_t v29 = 0;
                      }
                      else
                      {
                        if (v28) {
                          BOOL v42 = v28 == 3;
                        }
                        else {
                          BOOL v42 = 1;
                        }
                        uint64_t v29 = v42;
                      }
                      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v29))
                      {
                        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) == 2))
                        {
                          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 1, a1 + 400);
                          if (result) {
                            return result;
                          }
                          if (*(unsigned char *)(a1 + 256))
                          {
                            unint64_t v30 = *(unsigned int *)(a1 + 260);
                            unsigned int v31 = *(_DWORD *)(a1 + 264);
                          }
                          else
                          {
                            uint64_t v53 = *(void *)(a1 + 408);
                            unint64_t v30 = sub_24841D660(v53 + 424);
                            if (*(unsigned char *)(v53 + 432)) {
                              unsigned int v31 = 8 * *(_DWORD *)(v53 + 436) + 8;
                            }
                            else {
                              unsigned int v31 = *(_DWORD *)(v53 + 440);
                            }
                          }
                          if (!*(unsigned char *)(a1 + 400))
                          {
                            uint64_t v54 = *(void *)(a1 + 408);
                            if (v30 < sub_24841D660(v54 + 424)) {
                              return 1;
                            }
                            unsigned int v55 = *(unsigned char *)(v54 + 432) ? 8 * *(_DWORD *)(v54 + 436) + 8 : *(_DWORD *)(v54 + 440);
                            if (v31 < v55 || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300)) {
                              return 1;
                            }
                          }
                        }
                      }
                      else
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 400);
                        if (result) {
                          return result;
                        }
                      }
                    }
                    uint64_t result = sub_24841C8E4(a2, (std::string *)(a1 + 80));
                    if (!result)
                    {
                      *(unsigned char *)(a1 + 552) = v57;
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 416);
                      if (!result)
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1 + 568);
                        if (!result) {
                          return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
                        }
                      }
                    }
                  }
                  return result;
                }
                *(void *)(a1 + 328) = v9;
                *(unsigned char *)(a1 + 336) = v16;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 304);
                if (result) {
                  return result;
                }
                int v22 = *(_DWORD *)(a1 + 312) == 0;
                sub_24841C5B4((void *)(a1 + 344), v9);
                if (v9)
                {
                  uint64_t v23 = 0;
                  unint64_t v24 = v9;
                  do
                  {
                    uint64_t v25 = *(void *)(a1 + 344) + v23;
                    *(unsigned char *)(v25 + 32) = v16;
                    *(void *)(v25 + 24) = v9;
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, v25);
                    if (result) {
                      return result;
                    }
                    int v22 = v22 & (*(_DWORD *)(v25 + 8) == 0);
                    v23 += 40;
                  }
                  while (--v24);
                }
                if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2)
                  || !*(unsigned char *)(a1 + 560)
                  || v22 && !*(unsigned char *)(a1 + 256))
                {
                  uint64_t v26 = *(void *)(a1 + 408);
                  if (v26) {
                    BOOL v27 = *(unsigned __int8 *)(v26 + 253) != 0;
                  }
                  else {
                    BOOL v27 = 0;
                  }
                  if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v27))
                  {
                    *(void *)(a1 + 384) = *(void *)(a1 + 408);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 368);
                    if (result) {
                      return result;
                    }
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 1, a1 + 392);
                  if (result) {
                    return result;
                  }
                  goto LABEL_53;
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_24841C5B4(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *result;
  BOOL v5 = (uint64_t (***)(void))result[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *result) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v24 = (uint64_t (***)(void))(v4 + 40 * a2);
      if (v5 != v24)
      {
        uint64_t v25 = v5 - 5;
        uint64_t v26 = v25;
        BOOL v27 = v25;
        do
        {
          int v28 = *v27;
          v27 -= 5;
          uint64_t result = (void *)(*v28)(v26);
          v25 -= 5;
          BOOL v29 = v26 == v24;
          uint64_t v26 = v27;
        }
        while (!v29);
      }
      v3[1] = v24;
    }
  }
  else
  {
    uint64_t v8 = result[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      unint64_t v30 = &v5[5 * v7];
      uint64_t v31 = 40 * a2 - 8 * (((uint64_t)v5 - *result) >> 3);
      uint64_t v32 = result[1];
      do
      {
        *(void *)uint64_t v32 = &unk_26FC659D8;
        *(void *)(v32 + 24) = 0;
        *(unsigned char *)(v32 + 32) = 0;
        unint64_t v35 = &unk_26FC65A00;
        *(_OWORD *)uint64_t v36 = xmmword_2484DC960;
        *(void *)&v36[16] = 0;
        uint64_t result = (void *)sub_24841B080(v32, (uint64_t)&v35);
        v32 += 40;
        v5 += 5;
        v31 -= 40;
      }
      while (v31);
      v3[1] = v30;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        sub_2483E92E8();
      }
      int v37 = result + 2;
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        unint64_t v11 = 0x666666666666666;
      }
      else {
        unint64_t v11 = v10;
      }
      int v12 = (char *)sub_248403444(v11);
      int v13 = &v12[40 * v6];
      unint64_t v35 = v12;
      *(void *)uint64_t v36 = v13;
      *(void *)&v36[8] = v13;
      *(void *)&v36[16] = &v12[40 * v14];
      int v15 = &v12[40 * a2];
      uint64_t v16 = 40 * a2 - 40 * v6;
      int v17 = v13;
      do
      {
        *(void *)int v17 = &unk_26FC659D8;
        *((void *)v17 + 3) = 0;
        v17[32] = 0;
        uint64_t v38 = &unk_26FC65A00;
        long long v39 = xmmword_2484DC960;
        uint64_t v40 = 0;
        (*(void (**)(char *, void **))(*(void *)v17 + 16))(v17, &v38);
        v17 += 40;
        v13 += 40;
        v16 -= 40;
      }
      while (v16);
      *(void *)&v36[8] = v15;
      uint64_t v18 = *v3;
      unint64_t v19 = v3[1];
      uint64_t v20 = *(void *)v36;
      if (v19 == *v3)
      {
        int64x2_t v23 = vdupq_n_s64(v19);
      }
      else
      {
        uint64_t v21 = *(void *)v36 - 40;
        do
        {
          *(void *)(v20 - 40) = &unk_26FC659D8;
          v20 -= 40;
          long long v22 = *(_OWORD *)(v19 - 32);
          *(_OWORD *)(v20 + 17) = *(_OWORD *)(v19 - 23);
          *(_OWORD *)(v20 + 8) = v22;
          v21 -= 40;
          v19 -= 40;
        }
        while (v19 != v18);
        int64x2_t v23 = *(int64x2_t *)v3;
      }
      *unint64_t v3 = v20;
      uint64_t v33 = v3[2];
      long long v34 = *(_OWORD *)&v36[8];
      *(int64x2_t *)uint64_t v36 = v23;
      *(_OWORD *)(v3 + 1) = v34;
      *(void *)&v36[16] = v33;
      unint64_t v35 = (void *)v23.i64[0];
      return (void *)sub_24841CA38((uint64_t)&v35);
    }
  }
  return result;
}

void sub_24841C8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_24841C8E4(uint64_t a1, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    LODWORD(size) = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  LODWORD(__n) = size;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, std::string::size_type *))(*(void *)a1 + 32))(a1, 0x380000000, 0x60900000204, 0, &__n);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      std::string::resize(a2, __n, 0);
    }
    if (__n)
    {
      unint64_t v6 = 0;
      while (1)
      {
        int v9 = 0;
        unint64_t v7 = a2;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
          unint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        int v9 = v7->__r_.__value_.__s.__data_[v6];
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)a1 + 40))(a1, 8, 0, &v9);
        if (result) {
          break;
        }
        uint64_t v8 = a2;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        v8->__r_.__value_.__s.__data_[v6++] = v9;
        if (v6 >= __n) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24841CA38(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24841CAA4(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65960;
  uint64_t v3 = (void **)(a1 + 344);
  sub_2483FDB3C(&v3);
  float v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }

  JUMPOUT(0x24C579F90);
}

uint64_t sub_24841CB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 8;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 2, 0, v5 + v4);
    if (result) {
      break;
    }
    v4 += 4;
    if (v4 == 12)
    {
      uint64_t v7 = 0;
      unsigned __int8 v8 = 0;
      unsigned __int8 v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned int *)(v5 + v7);
        unsigned int v11 = byte_248550964[v10];
        unsigned int v12 = byte_248550968[v10];
        if (v8 <= v11) {
          unsigned __int8 v8 = v11;
        }
        if (v9 <= v12) {
          unsigned __int8 v9 = v12;
        }
        v7 += 4;
      }
      while (v7 != 12);
      uint64_t result = 0;
      *(unsigned char *)(a1 + 20) = v8;
      *(unsigned char *)(a1 + 21) = v9;
      return result;
    }
  }
  return result;
}

void sub_24841CC0C()
{
}

void *sub_24841CC24(void *a1)
{
  *a1 = &unk_26FC66198;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841CB3C((uint64_t)a1, (uint64_t)&v3);
  return a1;
}

uint64_t sub_24841CCA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FC65960;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = &unk_26FC66198;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_24841CB3C(a1 + 40, (uint64_t)&v5);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = &unk_26FC66820;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_24841B468((unsigned int *)(a1 + 104), (uint64_t)&v5);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = &unk_26FC659D8;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_24841B080(a1 + 304, (uint64_t)&v5);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = &unk_26FC65F68;
  *(void *)(a1 + 384) = a2;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_24841B318(a1 + 368, (uint64_t)&v5);
  *(void *)(a1 + 408) = a2;
  *(void *)(a1 + 416) = &unk_26FC65910;
  *(unsigned char *)(a1 + 552) = 0;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_248421460(a1 + 416, (uint64_t)&v5);
  *(unsigned char *)(a1 + 560) = 0;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v5);
  return a1;
}

void sub_24841CF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 + 344);
  sub_2483FDB3C(&a12);
  uint64_t v15 = *(void **)(v12 + 272);
  if (v15)
  {
    *(void *)(v12 + 280) = v15;
    operator delete(v15);
  }
  if (*(char *)(v12 + 103) < 0) {
    operator delete(*v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24841CF74(uint64_t a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 8);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *v4)
      || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 5, 0, a1 + 12), !result))
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 0)
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x2C00000028, 0x3D00000031, 1, a1 + 16), !result))
      {
        long long v6 = (_DWORD *)(a1 + 20);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 3, 0, a1 + 20);
        if (!result)
        {
          BOOL v7 = !*v6 && (unint64_t)(*v4 != 0);
          if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v7)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 5, 0, a1 + 24), !result))
          {
            if (*v6) {
              BOOL v8 = 0;
            }
            else {
              BOOL v8 = *v4 == 0;
            }
            if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v8)) {
              return 0;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x2C00000028, 0x3D00000031, 1, a1 + 28);
            if (!result) {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_24841D218()
{
}

uint64_t sub_24841D230(uint64_t a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 8);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *v4)
      || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x8000002080000010, 0x42800000024, 1, a1 + 12), !result))
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *v4 == 0)
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x82700000025, 0xA82B00002829, 1, a1 + 16), !result))
      {
        long long v6 = (_DWORD *)(a1 + 20);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 3, 0, a1 + 20);
        if (!result)
        {
          BOOL v7 = !*v6 && (unint64_t)(*v4 != 0);
          if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v7)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x8000002080000010, 0x42800000024, 1, a1 + 24), !result))
          {
            if (*v6) {
              BOOL v8 = 0;
            }
            else {
              BOOL v8 = *v4 == 0;
            }
            if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, v8)) {
              return 0;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x82700000025, 0xA82B00002829, 1, a1 + 28);
            if (!result) {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_24841D4F4()
{
}

uint64_t sub_24841D50C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x800003E880000064, 0x3D00000029, 1, a1 + 8);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x800003E980000001, 0x2900000027, 1, a1 + 12);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x280000000, 0x1F0000000FLL, 0, a1 + 16);
      if (!result)
      {
        uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24);
        return v5(a2, 0, a1 + 20);
      }
    }
  }
  return result;
}

void sub_24841D648()
{
}

uint64_t sub_24841D660(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    unint64_t v2 = qword_24854CF70[v1 - 1];
    if (*(unsigned char *)(a1 + 8)) {
      unsigned int v3 = 8 * *(_DWORD *)(a1 + 12) + 8;
    }
    else {
      unsigned int v3 = *(_DWORD *)(a1 + 16);
    }
    return (v2 * (unint64_t)v3 / HIDWORD(v2));
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    LODWORD(v4) = 8 * *(_DWORD *)(a1 + 24) + 8;
  }
  else
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
  }
  return v4;
}

uint64_t sub_24841D6C8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = 1;
  if (a2 && a3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = v4 + 1;
      if ((qword_24854CF70[v4] * a3 / HIDWORD(qword_24854CF70[v4])) == a2) {
        break;
      }
      ++v4;
      if (v5 == 7)
      {
        *(_DWORD *)(a1 + 20) = 0;
        if (a2 <= 0x100 && a3 <= 0x100 && (a3 & 7) == 0) {
          goto LABEL_9;
        }
LABEL_18:
        *(unsigned char *)(a1 + 8) = 0;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a1 + 20) = v5;
    if (a3 <= 0x100 && (a3 & 7) == 0)
    {
      if (v4 != -1)
      {
        uint64_t v3 = 0;
        *(unsigned char *)(a1 + 8) = 1;
        *(_DWORD *)(a1 + 12) = (a3 >> 3) - 1;
        return v3;
      }
      if (a2 > 0x100) {
        goto LABEL_18;
      }
LABEL_9:
      uint64_t v3 = a2 & 7;
      *(unsigned char *)(a1 + 8) = v3 == 0;
      if ((a2 & 7) == 0)
      {
        *(_DWORD *)(a1 + 12) = (a3 >> 3) - 1;
        *(_DWORD *)(a1 + 24) = (a2 >> 3) - 1;
        return v3;
      }
LABEL_19:
      *(_DWORD *)(a1 + 16) = a3;
      goto LABEL_20;
    }
    uint64_t v3 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = a3;
    if (v4 != -1) {
      return v3;
    }
LABEL_20:
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 28) = a2;
  }
  return v3;
}

uint64_t sub_24841D7BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    unint64_t v2 = qword_24854CF70[v1 - 1];
    if (*(unsigned char *)(a1 + 8)) {
      unsigned int v3 = 8 * *(_DWORD *)(a1 + 12);
    }
    else {
      unsigned int v3 = *(_DWORD *)(a1 + 16);
    }
    return (v2 * (unint64_t)v3 / HIDWORD(v2));
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    LODWORD(v4) = 8 * *(_DWORD *)(a1 + 24);
  }
  else
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
  }
  return v4;
}

void *sub_24841D81C(void *a1)
{
  *a1 = &unk_26FC65938;
  unsigned int v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841CF74((uint64_t)a1, (uint64_t)&v3);
  return a1;
}

uint64_t sub_24841D89C(char *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  sub_2483F02B8(__p, a4);
  int v10 = 0;
  unsigned int v11 = (__int16 *)__p[0];
  unint64_t v12 = 1;
  for (uint64_t i = 1; i != 16; ++i)
  {
    *((_WORD *)&__p[3] + i) = v10;
    v10 += *(unsigned __int16 *)(a5 + 2 * i);
    if (*(_WORD *)(a5 + 2 * i)) {
      unint64_t v12 = i;
    }
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(unsigned __int8 *)(a3 + v14);
    if (*(unsigned char *)(a3 + v14))
    {
      uint64_t v16 = *((unsigned __int16 *)&__p[3] + v15);
      *((_WORD *)&__p[3] + v15) = v16 + 1;
      v11[v16] = v14;
    }
    ++v14;
  }
  while (a4 != v14);
  uint64_t v17 = (1 << a2);
  if (v53 == 1)
  {
    __int16 v18 = *v11;
    if ((int)v17 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v17;
    }
    uint64_t v20 = a1 + 2;
    do
    {
      *((unsigned char *)v20 - 2) = 0;
      *uint64_t v20 = v18;
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = 0;
    unint64_t v23 = a2;
    if (v12 >= a2)
    {
      int v24 = 1 << a2;
    }
    else
    {
      unint64_t v23 = v12;
      int v24 = 1 << v12;
    }
    int v25 = 2;
    unsigned __int8 v26 = 1;
    do
    {
      if (*(_WORD *)(a5 + 2 * v26))
      {
        do
        {
          int v27 = v26 | ((unsigned __int16)v11[v21] << 16);
          int v28 = v24;
          do
          {
            *(_DWORD *)&a1[4 * v22 + 4 * (v28 - v25)] = v27;
            v28 -= v25;
          }
          while (v28 > 0);
          int v29 = 1 << (v26 - 1);
          do
          {
            int v30 = v29;
            v29 >>= 1;
          }
          while ((v30 & v22) != 0);
          ++v21;
          int v22 = ((v30 - 1) & v22) + v30;
          __int16 v31 = *(_WORD *)(a5 + 2 * v26) - 1;
          *(_WORD *)(a5 + 2 * v26) = v31;
        }
        while (v31);
      }
      v25 *= 2;
      ++v26;
    }
    while (v23 >= v26);
    if (v17 != v24)
    {
      do
      {
        memcpy(&a1[4 * v24], a1, 4 * v24);
        BOOL v32 = v17 == 2 * v24;
        v24 *= 2;
      }
      while (!v32);
    }
    unint64_t v33 = a2 + 1;
    if (v12 >= v33)
    {
      int v34 = v17 - 1;
      int v35 = 2;
      int v36 = -1;
      int v37 = 1 << a2;
      uint64_t v38 = a1;
      do
      {
        if (*(_WORD *)(a5 + 2 * v33))
        {
          do
          {
            if ((v22 & v34) != v36)
            {
              int v39 = 1 << (v33 - a2);
              LOBYTE(j) = v33;
              if (v33 <= 0xE)
              {
                unint64_t v41 = (1 << (v33 - a2));
                for (unint64_t j = v33; j != 15; ++j)
                {
                  unint64_t v42 = *(unsigned __int16 *)(a5 + 2 * j);
                  BOOL v43 = v41 > v42;
                  unint64_t v44 = v41 - v42;
                  if (!v43) {
                    break;
                  }
                  unint64_t v41 = 2 * v44;
                }
                int v39 = 1 << (j - a2);
              }
              v38 += 4 * v37;
              uint64_t v17 = (v39 + v17);
              int v45 = &a1[4 * (v22 & v34)];
              *int v45 = j;
              *((_WORD *)v45 + 1) = ((v38 - a1) >> 2) - (v22 & v34);
              int v36 = v22 & v34;
              int v37 = v39;
            }
            int v46 = (v33 - a2) | ((unsigned __int16)v11[v21] << 16);
            int v47 = v37;
            do
            {
              *(_DWORD *)&v38[4 * (v22 >> a2) + 4 * (v47 - v35)] = v46;
              v47 -= v35;
            }
            while (v47 > 0);
            int v48 = 1 << (v33 - 1);
            do
            {
              int v49 = v48;
              v48 >>= 1;
            }
            while ((v49 & v22) != 0);
            ++v21;
            int v22 = ((v49 - 1) & v22) + v49;
            __int16 v50 = *(_WORD *)(a5 + 2 * v33) - 1;
            *(_WORD *)(a5 + 2 * v33) = v50;
          }
          while (v50);
        }
        ++v33;
        v35 *= 2;
      }
      while (v33 <= v12);
      unsigned int v11 = (__int16 *)__p[0];
    }
  }
  if (v11)
  {
    __p[1] = v11;
    operator delete(v11);
  }
  return v17;
}

uint64_t sub_24841DBDC(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1)
  {
    char v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = a1 - 1;
    if (a1 - 1 >= 9) {
      uint64_t v7 = 9;
    }
    uint64_t v8 = v7 + 1;
    while (1)
    {
      v6 |= (unint64_t)(*(unsigned char *)(a2 + v5) & 0x7F) << v4;
      if ((*(unsigned char *)(a2 + v5) & 0x80) == 0) {
        break;
      }
      ++v5;
      v4 += 7;
      if (v8 == v5)
      {
        uint64_t v5 = v8;
        break;
      }
    }
    if (HIDWORD(v6)) {
      return 1;
    }
    unint64_t v9 = v5 + 1;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    unint64_t v9 = 1;
  }
  if (v9 >= a1) {
    return 1;
  }
  char v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = a2 + v9;
  unint64_t v14 = v9 + 1;
  while (1)
  {
    v11 |= (unint64_t)(*(unsigned char *)(v13 + v12) & 0x7F) << v10;
    if ((*(unsigned char *)(v13 + v12) & 0x80) == 0) {
      break;
    }
    unint64_t v15 = v12 + 1;
    if (v12 <= 8)
    {
      unint64_t v16 = v14 + v12;
      v10 += 7;
      ++v12;
      if (v16 < a1) {
        continue;
      }
    }
    goto LABEL_18;
  }
  unint64_t v15 = v12;
LABEL_18:
  if (HIDWORD(v11)) {
    return 1;
  }
  uint64_t v17 = v5 + v15 + 2;
  unint64_t v18 = v11 + v17;
  BOOL v19 = __CFADD__(v11, v17);
  uint64_t v20 = 1;
  if (v18 <= a1 && !v19)
  {
    unint64_t v21 = v6 + 0x10000;
    if (a4) {
      BOOL v22 = v6 > a4;
    }
    else {
      BOOL v22 = 0;
    }
    unsigned int v23 = v22;
    if (v21 >= a3) {
      return v23;
    }
    else {
      return 1;
    }
  }
  return v20;
}

size_t *sub_24841DCEC(size_t *result, const void *a2, int64_t a3)
{
  if (a3 >= 1)
  {
    unint64_t v6 = result;
    size_t v7 = *result;
    unint64_t v8 = *result + a3;
    sub_2484106F0(result, v8);
    size_t v9 = v6[2];
    if (v9) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0;
    }
    *unint64_t v6 = v10;
    return (size_t *)memcpy((void *)(v9 + v7), a2, a3);
  }
  return result;
}

void sub_24841DD6C(size_t *a1, char a2)
{
  size_t v4 = *a1;
  if (*a1 == a1[1])
  {
    sub_2484106F0(a1, v4 + 1);
    size_t v5 = a1[2];
    if (!v5) {
      return;
    }
    size_t v4 = *a1;
  }
  else
  {
    size_t v5 = a1[2];
  }
  *a1 = v4 + 1;
  *(unsigned char *)(v5 + v4) = a2;
}

size_t *sub_24841DDC8(size_t *a1, unint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  sub_2484106F0(a1, a2);
  return a1;
}

void sub_24841DDF8(_Unwind_Exception *a1)
{
  sub_2483E8DDC((uint64_t *)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_24841DE0C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  sub_24841DDC8(v11, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      *(unsigned char *)(v12 + v6) = *(unsigned char *)(a1 + v7);
      v7 += (a2 + a3 - 1) / a3;
      if (v7 >= a2) {
        unint64_t v7 = ++v8;
      }
      ++v6;
    }
    while (a2 != v6);
    uint64_t v9 = 0;
    uint64_t v10 = v12;
    do
    {
      *(unsigned char *)(a1 + v9) = *(unsigned char *)(v10 + v9);
      ++v9;
    }
    while (a2 != v9);
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (!v10) {
      return;
    }
  }
  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
  free(*(void **)(v10 - 32));
}

uint64_t sub_24841DEDC(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v4 = a2[3];
  unint64_t v3 = a2[4];
  unint64_t v5 = 8 * (a2[2] - v3 + a2[5]) - a2[1];
  a2[7] = v5;
  if (v5 > 8 * (v4 - v3) + 64) {
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 16) = v5;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    sub_24841642C(a2, v9);
    return 0;
  }
  unint64_t v11 = sub_24841AACC(a2);
  *(void *)(a1 + 24) = v11;
  if (v11 > 0x10000000) {
    return 1;
  }
  uint64_t result = sub_2483F2760(a2, 0x29uLL, a1 + 56, (unint64_t *)(a1 + 32), 0);
  if (!result)
  {
    sub_2483EA6D0((uint64_t)&v29, a1 + 56, a2, 0);
    long long v12 = v30[0];
    *(_OWORD *)(a1 + 200) = v29;
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 228) = *(_OWORD *)((char *)v30 + 12);
    uint64_t v13 = v31;
    uint64_t v31 = 0;
    uint64_t v14 = *(void *)(a1 + 248);
    *(void *)(a1 + 248) = v13;
    if (v14)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v14 - 24));
      free(*(void **)(v14 - 32));
      uint64_t v15 = v31;
      memcpy((void *)(a1 + 256), v32, 0x214uLL);
      uint64_t v31 = 0;
      if (v15)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v15 - 24));
        free(*(void **)(v15 - 32));
      }
    }
    else
    {
      memcpy((void *)(a1 + 256), v32, 0x214uLL);
    }
    *(void *)a1 = 0;
    if (*(void *)(a1 + 24) >= 0x400uLL) {
      unint64_t v16 = 1024;
    }
    else {
      unint64_t v16 = *(void *)(a1 + 24);
    }
    sub_2484106F0((size_t *)(a1 + 792), v16);
    if (*(void *)(a1 + 808)) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = 0;
    }
    *(void *)(a1 + 792) = v17;
    unint64_t v18 = *(void *)a1;
    unint64_t v19 = *(void *)(a1 + 24);
    unint64_t v20 = 2;
    if (v19 < 2) {
      unint64_t v20 = *(void *)(a1 + 24);
    }
    if (v18 < v20)
    {
      do
      {
        if (v18) {
          unsigned __int8 v21 = **(unsigned char **)(a1 + 808);
        }
        else {
          unsigned __int8 v21 = 0;
        }
        uint64_t v22 = sub_24841F55C(v18, v21, 0);
        *(unsigned char *)(*(void *)(a1 + 808) + *(void *)a1) = sub_2483EAC28(a1 + 200, *(unsigned __int8 *)(*(void *)(a1 + 32) + v22), a2);
        unint64_t v18 = *(void *)a1 + 1;
        *(void *)a1 = v18;
        unint64_t v19 = *(void *)(a1 + 24);
        if (v19 >= 2) {
          unint64_t v23 = 2;
        }
        else {
          unint64_t v23 = *(void *)(a1 + 24);
        }
      }
      while (v18 < v23);
    }
    if (v19 <= 0x16)
    {
      unint64_t v25 = a2[1];
      uint64_t v28 = 8 * (a2[2] - a2[4] + a2[5]);
LABEL_35:
      uint64_t result = 0;
      *(void *)(a1 + 8) = v28 - *(void *)(a1 + 16) - v25;
      return result;
    }
    if (v18 <= 0x15)
    {
      do
      {
        uint64_t v24 = sub_24841F55C(v18, *(unsigned char *)(v18 + *(void *)(a1 + 808) - 1), *(unsigned char *)(v18 + *(void *)(a1 + 808) - 2));
        *(unsigned char *)(*(void *)(a1 + 808) + *(void *)a1) = sub_2483EAC28(a1 + 200, *(unsigned __int8 *)(*(void *)(a1 + 32) + v24), a2);
        unint64_t v18 = *(void *)a1 + 1;
        *(void *)a1 = v18;
      }
      while (v18 < 0x16);
    }
    unint64_t v25 = a2[1];
    unint64_t v27 = a2[3];
    unint64_t v26 = a2[4];
    uint64_t v28 = 8 * (a2[2] - v26 + a2[5]);
    a2[7] = v28 - v25;
    if (v28 - v25 > 8 * (v27 - v26) + 64) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = sub_24841DBDC(*(void *)(a1 + 792), *(void *)(a1 + 808), *(void *)(a1 + 24), a3);
    if (!result) {
      goto LABEL_35;
    }
  }
  return result;
}

uint64_t sub_24841E1DC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)(a1 + 200);
  sub_24841F138((char *)(a1 + 200), (uint64_t)v172);
  unint64_t v7 = a2[4];
  unint64_t v8 = a2[1];
  uint64_t v9 = 8 * (a2[2] - v7 + a2[5]);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = v9 - (*(void *)(a1 + 16) + v8);
  unint64_t v11 = *(void *)a1;
  if (*(void *)a1 < v10)
  {
    unint64_t v12 = *(void *)a1;
    while (1)
    {
      if (!v11 || (v11 & 0x1FF) != 0)
      {
        uint64_t v18 = *(void *)(a1 + 808);
      }
      else
      {
        unint64_t v14 = a2[3];
        unint64_t v13 = a2[4];
        unint64_t v15 = 8 * (a2[2] - v13 + a2[5]) - a2[1];
        a2[7] = v15;
        if (v15 > 8 * (v14 - v13) + 64)
        {
          sub_24841F1E8(v6, (uint64_t)v172);
          *(void *)a1 = v12;
          return 0xFFFFFFFFLL;
        }
        sub_24841F138(v6, (uint64_t)v172);
        uint64_t v16 = 8 * (a2[2] - a2[4] + a2[5]) - (*(void *)(a1 + 16) + a2[1]);
        *(void *)(a1 + 8) = v16;
        unint64_t v12 = *(void *)a1;
        if (*(void *)a1
          && !(unsigned __int16)*(void *)a1
          && (float)((float)((float)(unint64_t)v16 * 0.125) * 256.0) < (float)v12)
        {
          return 1;
        }
        if (*(void *)(a1 + 24) >= v12 + 1024) {
          unint64_t v17 = v12 + 1024;
        }
        else {
          unint64_t v17 = *(void *)(a1 + 24);
        }
        sub_2484106F0((size_t *)(a1 + 792), v17);
        uint64_t v18 = *(void *)(a1 + 808);
        if (v18) {
          unint64_t v19 = v17;
        }
        else {
          unint64_t v19 = 0;
        }
        *(void *)(a1 + 792) = v19;
        unint64_t v11 = *(void *)a1;
      }
      uint64_t v20 = sub_24841F55C(v11, *(unsigned char *)(v11 + v18 - 1), *(unsigned char *)(v11 + v18 - 2));
      *(unsigned char *)(*(void *)(a1 + 808) + *(void *)a1) = sub_2483EAC28((uint64_t)v6, *(unsigned __int8 *)(*(void *)(a1 + 32) + v20), a2);
      unint64_t v11 = *(void *)a1 + 1;
      *(void *)a1 = v11;
      if (v11 >= *(void *)(a1 + 24))
      {
        unint64_t v7 = a2[4];
        unint64_t v8 = a2[1];
        uint64_t v9 = 8 * (a2[2] - v7 + a2[5]);
        unint64_t v11 = v12;
        break;
      }
    }
  }
  a2[7] = v9 - v8;
  if (v9 - v8 > 8 * (a2[3] - v7) + 64)
  {
    sub_24841F1E8(v6, (uint64_t)v172);
    *(void *)a1 = v11;
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 8) = v9 - *(void *)(a1 + 16) - v8;
  if (*(_DWORD *)(a1 + 220) != 1245184) {
    return 1;
  }
  sub_2484106F0((size_t *)a3, 0);
  *(void *)a3 = 0;
  unint64_t v21 = *(void *)(a1 + 792);
  if (!v21) {
    return 1;
  }
  char v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = *(void *)(a1 + 808);
  uint64_t v26 = v21 - 1;
  if (v21 - 1 >= 9) {
    uint64_t v26 = 9;
  }
  uint64_t v27 = v26 + 1;
  while (1)
  {
    v24 |= (unint64_t)(*(unsigned char *)(v25 + v23) & 0x7F) << v22;
    if ((*(unsigned char *)(v25 + v23) & 0x80) == 0) {
      break;
    }
    ++v23;
    v22 += 7;
    if (v27 == v23)
    {
      uint64_t v23 = v27;
      break;
    }
  }
  unint64_t v28 = v23 + 1;
  if (HIDWORD(v24) || v28 >= v21) {
    return 1;
  }
  char v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = v25 + v28;
  while (1)
  {
    v31 |= (unint64_t)(*(unsigned char *)(v33 + v32) & 0x7F) << v30;
    if ((*(unsigned char *)(v33 + v32) & 0x80) == 0) {
      break;
    }
    unint64_t v34 = v32 + 1;
    if (v32 <= 8)
    {
      unint64_t v35 = v23 + 2 + v32;
      v30 += 7;
      ++v32;
      if (v35 < v21) {
        continue;
      }
    }
    goto LABEL_41;
  }
  unint64_t v34 = v32;
LABEL_41:
  if (HIDWORD(v31)) {
    return 1;
  }
  uint64_t v37 = v23 + v34 + 2;
  unint64_t v38 = v31 + v37;
  BOOL v39 = __CFADD__(v31, v37);
  uint64_t v36 = 1;
  if (v38 <= v21 && !v39)
  {
    v175[0] = 0;
    v175[1] = 0;
    int v176 = 0;
    sub_24841DCEC(v175, &xmmword_24854D008, 128);
    if (v175[0] >= 4) {
      _DWORD *v176 = bswap32(v24);
    }
    unint64_t v40 = *(void *)a3;
    if (*(void *)a3 == v24)
    {
LABEL_55:
      if (v31) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v38 == v21;
      }
LABEL_58:
      uint64_t v36 = !v43;
      goto LABEL_283;
    }
    unint64_t v171 = v31 + v37;
    uint64_t v41 = 0;
    uint64_t v42 = (uint64_t)v176;
    unint64_t v165 = v23 + v34 + 2;
    while (v41 != 128)
    {
      sub_24841F2F4(*(unsigned char **)(a3 + 16), v40, v42, v41);
      if (v171 + v41 >= v21) {
        goto LABEL_282;
      }
      sub_24841DD6C((size_t *)a3, *(unsigned char *)(v42 + v41) + *(unsigned char *)(v25 + v165 + v31 + v41));
      ++v41;
      unint64_t v40 = *(void *)a3;
      if (*(void *)a3 == v24)
      {
        unint64_t v38 = v171 + v41;
        goto LABEL_55;
      }
    }
    unint64_t v168 = v171 + 128;
    if (v165 >= v171) {
      goto LABEL_282;
    }
    if (v165 >= v21)
    {
      unint64_t v166 = v23 + v34 + 3;
      uint64_t v48 = a3;
    }
    else
    {
      char v45 = 0;
      unint64_t v46 = 0;
      unint64_t v47 = 0;
      uint64_t v48 = a3;
      while (1)
      {
        v46 |= (unint64_t)(*(unsigned char *)(v25 + v165 + v47) & 0x7F) << v45;
        if ((*(unsigned char *)(v25 + v165 + v47) & 0x80) == 0) {
          break;
        }
        unint64_t v49 = v47 + 1;
        if (v47 <= 8)
        {
          unint64_t v50 = v34 + v23 + 3 + v47;
          v45 += 7;
          ++v47;
          if (v50 < v21) {
            continue;
          }
        }
        goto LABEL_72;
      }
      unint64_t v49 = v47;
LABEL_72:
      unint64_t v51 = v165 + v49 + 1;
      if (v46)
      {
        if (v46 < 0x100000001)
        {
          unint64_t v52 = v46 - 1;
          sub_24841F298(v46 - 1, (size_t *)a3);
          unint64_t v40 = *(void *)a3;
          uint64_t v36 = 1;
          if (*(void *)a3 > v24 || v51 > v171)
          {
LABEL_283:
            unsigned int v155 = v176;
            int v176 = 0;
            if (v155)
            {
              atomic_fetch_add(&qword_26931BDF8, -*((void *)v155 - 3));
              free(*((void **)v155 - 4));
            }
            return v36;
          }
          unint64_t v53 = 0;
          unint64_t v54 = 12 * v52 + 128;
          uint64_t v157 = v25 + 1;
          while (2)
          {
            if (v51 != v171)
            {
              uint64_t v55 = *(unsigned char *)(v25 + v51) & 0x3F;
              unint64_t v166 = v51 + 1;
              int v159 = *(unsigned char *)(v25 + v51) & 0x3F;
              char v160 = *(unsigned char *)(v25 + v51);
              int v56 = 1129469042;
              switch(v160 & 0x3F)
              {
                case 0:
                  goto LABEL_155;
                case 1:
                  uint64_t v36 = 1;
                  if (v168 + 4 > v21 || v168 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_283;
                  }
                  int v56 = *(_DWORD *)(v25 + v168);
                  v168 += 4;
LABEL_85:
                  unint64_t v162 = v51;
                  unint64_t v57 = v40 + 4;
                  unint64_t v58 = v40;
                  sub_2484106F0((size_t *)a3, v40 + 4);
                  uint64_t v59 = *(void *)(a3 + 16);
                  if (v59) {
                    unint64_t v60 = v57;
                  }
                  else {
                    unint64_t v60 = 0;
                  }
                  *(void *)a3 = v60;
                  *(_DWORD *)(v59 + v58) = v56;
                  if (v56 == 1768781164
                    || v56 == 1953524578
                    || v56 == 1953526903
                    || v56 == 1515804779
                    || v56 == 1515804775
                    || (v56 & 0xFFFFFFEF) == 1515804770)
                  {
                    uint64_t v66 = 20;
                  }
                  else
                  {
                    uint64_t v66 = v53;
                  }
                  if ((v160 & 0x40) != 0)
                  {
                    int v68 = v159;
                    if (v166 >= v171) {
                      goto LABEL_282;
                    }
                    if (v166 >= v21)
                    {
                      unint64_t v71 = 0;
                      unint64_t v54 = 0;
                    }
                    else
                    {
                      char v69 = 0;
                      unint64_t v54 = 0;
                      unint64_t v70 = 0;
                      while (1)
                      {
                        v54 |= (unint64_t)(*(unsigned char *)(v157 + v162 + v70) & 0x7F) << v69;
                        if ((*(unsigned char *)(v157 + v162 + v70) & 0x80) == 0) {
                          break;
                        }
                        unint64_t v71 = v70 + 1;
                        if (v70 <= 8)
                        {
                          unint64_t v72 = v162 + 2 + v70;
                          v69 += 7;
                          ++v70;
                          if (v72 < v21) {
                            continue;
                          }
                        }
                        goto LABEL_118;
                      }
                      unint64_t v71 = v70;
                    }
LABEL_118:
                    unint64_t v67 = v162 + v71 + 2;
                  }
                  else
                  {
                    unint64_t v67 = v166;
                    int v68 = v159;
                    if (HIDWORD(v54)) {
                      goto LABEL_282;
                    }
                    v54 += v53;
                  }
                  if (HIDWORD(v54)) {
                    goto LABEL_282;
                  }
                  sub_24841F298(v54, (size_t *)a3);
                  if (v160 < 0)
                  {
                    if (v67 >= v171) {
                      goto LABEL_282;
                    }
                    if (v67 >= v21)
                    {
                      unint64_t v75 = 0;
                      unint64_t v53 = 0;
                    }
                    else
                    {
                      char v73 = 0;
                      unint64_t v53 = 0;
                      unint64_t v74 = 0;
                      while (1)
                      {
                        v53 |= (unint64_t)(*(unsigned char *)(v25 + v67 + v74) & 0x7F) << v73;
                        if ((*(unsigned char *)(v25 + v67 + v74) & 0x80) == 0) {
                          break;
                        }
                        unint64_t v75 = v74 + 1;
                        if (v74 <= 8)
                        {
                          unint64_t v76 = v67 + 1 + v74;
                          v73 += 7;
                          ++v74;
                          if (v76 < v21) {
                            continue;
                          }
                        }
                        goto LABEL_131;
                      }
                      unint64_t v75 = v74;
                    }
LABEL_131:
                    v67 += v75 + 1;
                  }
                  else
                  {
                    unint64_t v53 = v66;
                  }
                  unint64_t v163 = v67;
                  if (HIDWORD(v53)) {
                    goto LABEL_282;
                  }
                  sub_24841F298(v53, (size_t *)a3);
                  if (v68 == 3)
                  {
                    unint64_t v85 = v54 + 2 * v53;
                    if (HIDWORD(v85)) {
                      goto LABEL_282;
                    }
                    size_t v86 = *(void *)a3;
                    unint64_t v87 = *(void *)a3 + 4;
                    sub_2484106F0((size_t *)a3, v87);
                    uint64_t v88 = *(void *)(a3 + 16);
                    if (v88) {
                      unint64_t v89 = v87;
                    }
                    else {
                      unint64_t v89 = 0;
                    }
                    *(void *)a3 = v89;
                    *(_DWORD *)(v88 + v86) = 1515804775;
                    sub_24841F298(v53 + v54, (size_t *)a3);
                    sub_24841F298(v53, (size_t *)a3);
                    size_t v90 = *(void *)a3;
                    unint64_t v91 = *(void *)a3 + 4;
                    sub_2484106F0((size_t *)a3, v91);
                    uint64_t v92 = *(void *)(a3 + 16);
                    if (v92) {
                      unint64_t v93 = v91;
                    }
                    else {
                      unint64_t v93 = 0;
                    }
                    *(void *)a3 = v93;
                    *(_DWORD *)(v92 + v90) = 1515804770;
                  }
                  else
                  {
                    if (v68 != 2) {
                      goto LABEL_151;
                    }
                    size_t v77 = *(void *)a3;
                    unint64_t v78 = *(void *)a3 + 4;
                    sub_2484106F0((size_t *)a3, v78);
                    uint64_t v79 = *(void *)(a3 + 16);
                    if (v79) {
                      unint64_t v80 = v78;
                    }
                    else {
                      unint64_t v80 = 0;
                    }
                    *(void *)a3 = v80;
                    *(_DWORD *)(v79 + v77) = 1129469031;
                    sub_24841F298(v54, (size_t *)a3);
                    sub_24841F298(v53, (size_t *)a3);
                    size_t v81 = *(void *)a3;
                    unint64_t v82 = *(void *)a3 + 4;
                    sub_2484106F0((size_t *)a3, v82);
                    uint64_t v83 = *(void *)(a3 + 16);
                    if (v83) {
                      unint64_t v84 = v82;
                    }
                    else {
                      unint64_t v84 = 0;
                    }
                    *(void *)a3 = v84;
                    *(_DWORD *)(v83 + v81) = 1129469026;
                    LODWORD(v85) = v54;
                  }
                  sub_24841F298(v85, (size_t *)a3);
                  sub_24841F298(v53, (size_t *)a3);
LABEL_151:
                  unint64_t v40 = *(void *)a3;
                  uint64_t v36 = 1;
                  if (*(void *)a3 > v24) {
                    goto LABEL_283;
                  }
                  unint64_t v51 = v163;
                  if (v163 > v171) {
                    goto LABEL_283;
                  }
                  continue;
                case 2:
                  goto LABEL_85;
                case 3:
                  int v56 = 1515804786;
                  goto LABEL_85;
                default:
                  if ((unint64_t)(v55 - 4) > 0x10) {
                    goto LABEL_282;
                  }
                  int v56 = *(_DWORD *)*(&off_26523BD18 + v55 - 4);
                  goto LABEL_85;
              }
            }
            break;
          }
          unint64_t v166 = v171;
          goto LABEL_155;
        }
LABEL_282:
        uint64_t v36 = 1;
        goto LABEL_283;
      }
      unint64_t v166 = v165 + v49 + 1;
    }
LABEL_155:
    if (v171 >= v21) {
      unint64_t v94 = v21;
    }
    else {
      unint64_t v94 = v171;
    }
    uint64_t v36 = 1;
    if (v40 > v24) {
      goto LABEL_283;
    }
    unint64_t v161 = v94;
    if (v166 > v171) {
      goto LABEL_283;
    }
    if (v166 != v171)
    {
      uint64_t v164 = v25 + 1;
      unint64_t v95 = v166;
      unint64_t v96 = v168;
      while (1)
      {
        unint64_t v97 = v95 + 1;
        unint64_t v98 = *(unsigned __int8 *)(v25 + v95);
        if (v98 == 1)
        {
          unint64_t v99 = v171;
          if (v97 >= v171) {
            goto LABEL_282;
          }
          if (v97 >= v21)
          {
            unint64_t v103 = 0;
            uint64_t v101 = 0;
          }
          else
          {
            char v100 = 0;
            uint64_t v101 = 0;
            unint64_t v102 = 0;
            while (1)
            {
              v101 |= (unint64_t)(*(unsigned char *)(v164 + v95 + v102) & 0x7F) << v100;
              if ((*(unsigned char *)(v164 + v95 + v102) & 0x80) == 0) {
                break;
              }
              unint64_t v103 = v102 + 1;
              if (v102 <= 8)
              {
                unint64_t v104 = v95 + 2 + v102;
                v100 += 7;
                ++v102;
                if (v104 < v21) {
                  continue;
                }
              }
              goto LABEL_197;
            }
            unint64_t v103 = v102;
          }
LABEL_197:
          if (v101 + v96 > v21 || v101 + v96 < v96) {
            goto LABEL_282;
          }
          for (v95 += v103 + 2; v101; --v101)
            sub_24841DD6C((size_t *)v48, *(unsigned char *)(v25 + v96++));
        }
        else
        {
          if ((v98 & 0xFE) == 2)
          {
            if (v97 >= v171) {
              goto LABEL_282;
            }
            if (v97 >= v21)
            {
              unint64_t v108 = 0;
              unint64_t v106 = 0;
            }
            else
            {
              char v105 = 0;
              unint64_t v106 = 0;
              unint64_t v107 = 0;
              while (1)
              {
                v106 |= (unint64_t)(*(unsigned char *)(v164 + v95 + v107) & 0x7F) << v105;
                if ((*(unsigned char *)(v164 + v95 + v107) & 0x80) == 0) {
                  break;
                }
                unint64_t v108 = v107 + 1;
                if (v107 <= 8)
                {
                  unint64_t v109 = v95 + 2 + v107;
                  v105 += 7;
                  ++v107;
                  if (v109 < v21) {
                    continue;
                  }
                }
                goto LABEL_224;
              }
              unint64_t v108 = v107;
            }
LABEL_224:
            if (v106 + v96 > v21 || v106 + v96 < v96) {
              goto LABEL_282;
            }
            sub_24841DDC8(v173, v106);
            if (v106)
            {
              for (uint64_t i = 0; i != v106; ++i)
                *(unsigned char *)(v174 + i) = *(unsigned char *)(v25 + v96 + i);
            }
            if (v98 == 2)
            {
LABEL_235:
              sub_24841DE0C(v174, v106, v98);
            }
            else if (v98 == 3)
            {
              unint64_t v98 = 4;
              goto LABEL_235;
            }
            if (v106)
            {
              for (uint64_t j = 0; j != v106; ++j)
                sub_24841DD6C((size_t *)v48, *(unsigned char *)(v174 + j));
              v96 += v106;
            }
            uint64_t v139 = v174;
            uint64_t v174 = 0;
            unint64_t v99 = v171;
            if (v139)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v139 - 24));
              free(*(void **)(v139 - 32));
            }
            v95 += v108 + 2;
            goto LABEL_276;
          }
          if (v98 == 10)
          {
            unint64_t v124 = v40 + 4;
            unint64_t v125 = v40;
            sub_2484106F0((size_t *)v48, v40 + 4);
            uint64_t v126 = *(void *)(v48 + 16);
            if (v126) {
              unint64_t v127 = v124;
            }
            else {
              unint64_t v127 = 0;
            }
            *(void *)uint64_t v48 = v127;
            *(_DWORD *)(v126 + v125) = 542792024;
            int v128 = 4;
            do
            {
              sub_24841DD6C((size_t *)v48, 0);
              --v128;
            }
            while (v128);
            uint64_t v36 = 1;
            if (v96 + 12 > v21 || v96 > 0xFFFFFFFFFFFFFFF3) {
              goto LABEL_283;
            }
            for (uint64_t k = 0; k != 12; ++k)
              sub_24841DD6C((size_t *)v48, *(unsigned char *)(v25 + v96 + k));
            v96 += 12;
            unint64_t v95 = v97;
LABEL_275:
            unint64_t v99 = v171;
            goto LABEL_276;
          }
          if (v98 == 4)
          {
            unint64_t v169 = v96;
            unint64_t v110 = v95;
            unint64_t v111 = v95 + 3;
            uint64_t v36 = 1;
            if (v111 > v171 || v111 < v97) {
              goto LABEL_283;
            }
            unsigned int v112 = *(unsigned __int8 *)(v25 + v97);
            int v113 = v112 & 3;
            unint64_t v114 = (v112 & 3) + 1;
            if (v113 == 2) {
              goto LABEL_282;
            }
            int v167 = (v112 >> 2) & 3;
            unint64_t v115 = v96;
            if (v167 == 3) {
              goto LABEL_282;
            }
            unint64_t v116 = v110 + 2;
            unint64_t v117 = (v112 & 3) + 1;
            if ((v112 & 0x10) != 0)
            {
              if (v116 >= v161) {
                goto LABEL_282;
              }
              char v118 = 0;
              unint64_t v117 = 0;
              unint64_t v119 = 0;
              unint64_t v120 = v25 + 2 + v110;
              while (1)
              {
                v117 |= (unint64_t)(*(unsigned char *)(v120 + v119) & 0x7F) << v118;
                if ((*(unsigned char *)(v120 + v119) & 0x80) == 0) {
                  break;
                }
                unint64_t v121 = v119 + 1;
                if (v119 <= 8)
                {
                  unint64_t v122 = v111 + v119;
                  v118 += 7;
                  ++v119;
                  if (v122 < v21) {
                    continue;
                  }
                }
                goto LABEL_244;
              }
              unint64_t v121 = v119;
LABEL_244:
              if (v117 < v114) {
                goto LABEL_282;
              }
              unint64_t v116 = v111 + v121;
              unint64_t v115 = v96;
              uint64_t v48 = a3;
            }
            if (!v40) {
              goto LABEL_282;
            }
            if (v117 > (v40 - 1) >> 2 || v116 >= v171) {
              goto LABEL_282;
            }
            unint64_t v158 = v116;
            if (v116 >= v21)
            {
              unint64_t v146 = 0;
              unint64_t v142 = 0;
            }
            else
            {
              char v141 = 0;
              unint64_t v142 = 0;
              unint64_t v143 = 0;
              uint64_t v144 = v25 + v116;
              unint64_t v145 = v116 + 1;
              while (1)
              {
                v142 |= (unint64_t)(*(unsigned char *)(v144 + v143) & 0x7F) << v141;
                if ((*(unsigned char *)(v144 + v143) & 0x80) == 0) {
                  break;
                }
                unint64_t v146 = v143 + 1;
                if (v143 <= 8)
                {
                  unint64_t v147 = v145 + v143;
                  v141 += 7;
                  ++v143;
                  if (v147 < v21) {
                    continue;
                  }
                }
                goto LABEL_259;
              }
              unint64_t v146 = v143;
            }
LABEL_259:
            unint64_t v156 = v142 + v115;
            if (v142 + v115 > v21 || v142 + v115 < v115) {
              goto LABEL_282;
            }
            sub_24841DDC8(v173, v142);
            if (v142)
            {
              for (uint64_t m = 0; m != v142; ++m)
                *(unsigned char *)(v174 + m) = *(unsigned char *)(v25 + v169 + m);
            }
            unint64_t v170 = v21;
            if (v113) {
              sub_24841DE0C(v174, v142, v114);
            }
            if (v142)
            {
              uint64_t v150 = 0;
              uint64_t v151 = *(void *)v48;
              do
              {
                char v152 = sub_24841F3D0(*(void *)(v48 + 16), v151, v150, v117, v114, v167);
                sub_24841DD6C((size_t *)v48, *(unsigned char *)(v174 + v150++) + v152);
              }
              while (v142 != v150);
            }
            uint64_t v153 = v174;
            uint64_t v174 = 0;
            if (v153)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v153 - 24));
              free(*(void **)(v153 - 32));
            }
            unint64_t v95 = v158 + v146 + 1;
            unint64_t v96 = v156;
            unint64_t v21 = v170;
            goto LABEL_275;
          }
          if ((v98 & 0xF8) != 0x10) {
            goto LABEL_282;
          }
          int v130 = *(&off_26523BDA0 + v98 - 16);
          unint64_t v131 = v40 + 4;
          unint64_t v132 = v40;
          sub_2484106F0((size_t *)v48, v40 + 4);
          uint64_t v133 = *(void *)(v48 + 16);
          if (v133) {
            unint64_t v134 = v131;
          }
          else {
            unint64_t v134 = 0;
          }
          *(void *)uint64_t v48 = v134;
          *(_DWORD *)(v133 + v132) = *v130;
          uint64_t v135 = 4;
          unint64_t v99 = v171;
          do
          {
            sub_24841DD6C((size_t *)v48, 0);
            --v135;
          }
          while (v135);
          unint64_t v95 = v97;
        }
LABEL_276:
        unint64_t v40 = *(void *)v48;
        if (*(void *)v48 > v24 || v95 > v99) {
          goto LABEL_282;
        }
        if (v95 == v99) {
          goto LABEL_163;
        }
      }
    }
    unint64_t v96 = v168;
LABEL_163:
    BOOL v43 = v96 == v21 && v40 == v24;
    goto LABEL_58;
  }
  return v36;
}

void sub_24841F08C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 136);
  *(void *)(v1 - 136) = 0;
  if (v3)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24));
    free(*(void **)(v3 - 32));
  }
  uint64_t v4 = *(void *)(v1 - 112);
  *(void *)(v1 - 112) = 0;
  if (v4)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
    free(*(void **)(v4 - 32));
  }
  _Unwind_Resume(exception_object);
}

char *sub_24841F138(char *result, uint64_t a2)
{
  *(_DWORD *)a2 = *((_DWORD *)result + 5);
  int v2 = *((_DWORD *)result + 16);
  *(_DWORD *)(a2 + 12) = v2;
  *(void *)(a2 + 4) = *(void *)(result + 68);
  uint64_t v3 = *((void *)result + 7);
  if (v3)
  {
    uint64_t v4 = *(void *)&v2 & 0xFFFFFLL;
    unint64_t v5 = (v2 + 512) & 0xFFFFF;
    uint64_t v6 = (char *)(a2 + 16);
    unint64_t v7 = (const void *)(v3 + 4 * (*(void *)&v2 & 0xFFFFFLL));
    BOOL v8 = v5 >= (*(void *)&v2 & 0xFFFFFuLL);
    unint64_t v9 = v5 - (*(void *)&v2 & 0xFFFFFLL);
    if (v9 != 0 && v8)
    {
      size_t v13 = 4 * v9;
      unint64_t v12 = v6;
    }
    else
    {
      unint64_t v10 = result;
      uint64_t v11 = 0x100000 - v4;
      memcpy(v6, v7, 4 * (0x100000 - v4));
      unint64_t v12 = &v6[4 * v11];
      unint64_t v7 = (const void *)*((void *)v10 + 7);
      size_t v13 = 4 * v5;
    }
    return (char *)memcpy(v12, v7, v13);
  }
  return result;
}

char *sub_24841F1E8(char *result, uint64_t a2)
{
  *((_DWORD *)result + 5) = *(_DWORD *)a2;
  int v2 = *(_DWORD *)(a2 + 12);
  *((_DWORD *)result + 16) = v2;
  *(void *)(result + 68) = *(void *)(a2 + 4);
  uint64_t v3 = *((void *)result + 7);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)&v2 & 0xFFFFFLL;
    unint64_t v6 = (v2 + 512) & 0xFFFFF;
    unint64_t v7 = (void *)(v3 + 4 * (*(void *)&v2 & 0xFFFFFLL));
    uint64_t v8 = a2 + 16;
    BOOL v9 = v6 >= (*(void *)&v2 & 0xFFFFFuLL);
    unint64_t v10 = v6 - (*(void *)&v2 & 0xFFFFFLL);
    if (v10 != 0 && v9)
    {
      size_t v13 = 4 * v10;
      unint64_t v12 = (const void *)(a2 + 16);
    }
    else
    {
      uint64_t v11 = 0x100000 - v5;
      memcpy(v7, (const void *)(a2 + 16), 4 * (0x100000 - v5));
      unint64_t v7 = (void *)*((void *)v4 + 7);
      unint64_t v12 = (const void *)(v8 + 4 * v11);
      size_t v13 = 4 * v6;
    }
    return (char *)memcpy(v7, v12, v13);
  }
  return result;
}

void sub_24841F298(unsigned int a1, size_t *a2)
{
  unint64_t v4 = *a2 + 4;
  sub_2484106F0(a2, v4);
  size_t v5 = a2[2];
  if (v5) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = 0;
  }
  *a2 = v6;
  *(_DWORD *)(v6 + v5 - 4) = bswap32(a1);
}

unsigned char *sub_24841F2F4(unsigned char *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 8 && a4 == 8)
  {
    *(unsigned char *)(a3 + 80) = result[4];
    *(unsigned char *)(a3 + 81) = result[5];
    *(unsigned char *)(a3 + 82) = result[6];
    char v4 = result[7];
    uint64_t v5 = 83;
LABEL_11:
    *(unsigned char *)(a3 + v5) = v4;
    return result;
  }
  if (a2 >= 0x29 && a4 == 41)
  {
    int v6 = result[40];
    if (v6 == 65)
    {
      *(_WORD *)(a3 + 41) = 20560;
      *(unsigned char *)(a3 + 43) = 76;
      int v6 = result[40];
    }
    if (v6 == 77)
    {
      *(_WORD *)(a3 + 41) = 18003;
      char v4 = 84;
LABEL_10:
      uint64_t v5 = 43;
      goto LABEL_11;
    }
  }
  else if (a2 >= 0x2A && a4 == 42 && result[40] == 83)
  {
    int v7 = result[41];
    if (v7 == 71)
    {
      *(_WORD *)(a3 + 42) = 8265;
      if (result[40] != 83) {
        return result;
      }
      int v7 = result[41];
    }
    if (v7 == 85)
    {
      *(unsigned char *)(a3 + 42) = 78;
      char v4 = 87;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_24841F3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a5 == 2)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFFELL) + a2;
    unint64_t v10 = (unsigned __int8 *)(a1 + v9 - a4);
    unsigned int v7 = *v10;
    unsigned int v11 = v10[1];
    if (a6)
    {
      v11 |= v7 << 8;
      unsigned int v7 = bswap32(*(unsigned __int16 *)(a1 + v9 - 2 * a4)) >> 16;
      if (a6 == 2)
      {
        unsigned int v11 = 3 * (v11 - v7) + (bswap32(*(unsigned __int16 *)(a1 + -3 * a4 + v9)) >> 16);
        LOBYTE(v7) = BYTE1(v11);
      }
      else
      {
        LOWORD(v11) = 2 * v11 - v7;
        LOBYTE(v7) = BYTE1(v11);
        if (a6 != 1)
        {
          LOBYTE(v11) = 0;
          LOBYTE(v7) = 0;
        }
      }
    }
    if (a3) {
      LOBYTE(v7) = v11;
    }
  }
  else
  {
    unint64_t v6 = a3 + a2;
    if (a5 == 1)
    {
      LOBYTE(v7) = *(unsigned char *)(a1 + v6 - a4);
      if (a6)
      {
        char v8 = *(unsigned char *)(a1 + v6 - 2 * a4);
        if (a6 == 2)
        {
          LOBYTE(v7) = *(unsigned char *)(a1 + -3 * a4 + v6) + 3 * (v7 - v8);
        }
        else if (a6 == 1)
        {
          LOBYTE(v7) = 2 * v7 - v8;
        }
        else
        {
          LOBYTE(v7) = 0;
        }
      }
    }
    else
    {
      uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + a2;
      if (v12 - a4 + 4 <= v6) {
        unsigned int v13 = bswap32(*(_DWORD *)(a1 + v12 - a4));
      }
      else {
        unsigned int v13 = 0;
      }
      uint64_t v14 = v12 - 2 * a4;
      if (v14 + 4 <= v6) {
        unsigned int v15 = bswap32(*(_DWORD *)(a1 + v14));
      }
      else {
        unsigned int v15 = 0;
      }
      uint64_t v16 = -3 * a4 + v12;
      if (v16 + 4 <= v6) {
        unsigned int v17 = bswap32(*(_DWORD *)(a1 + v16));
      }
      else {
        unsigned int v17 = 0;
      }
      unsigned int v18 = v17 + 3 * (v13 - v15);
      unsigned int v19 = 2 * v13 - v15;
      if (a6 != 1) {
        unsigned int v19 = 0;
      }
      if (a6 != 2) {
        unsigned int v18 = v19;
      }
      if (!a6) {
        unsigned int v18 = v13;
      }
      return (v18 >> (~(8 * a3) & 0x18));
    }
  }
  return v7;
}

uint64_t sub_24841F55C(unint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  if (a1 < 0x81) {
    return 0;
  }
  if ((a2 & 0xDFu) - 65 >= 0x1A)
  {
    uint64_t v4 = 2;
    if (a2 - 48 >= 0xA && (a2 & 0xFD) != 0x2C)
    {
      if (a2)
      {
        if (a2 == 1)
        {
          uint64_t v4 = 4;
        }
        else if (a2 >= 0x10u)
        {
          if (a2 == 255)
          {
            uint64_t v4 = 7;
          }
          else
          {
            uint64_t v4 = 8;
            if (a2 > 0xF0u) {
              uint64_t v4 = 6;
            }
          }
        }
        else
        {
          uint64_t v4 = 5;
        }
      }
      else
      {
        uint64_t v4 = 3;
      }
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  uint64_t v5 = 32;
  if (a3 > 0xF0u) {
    uint64_t v5 = 24;
  }
  if (a3 >= 0x10u) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 16;
  }
  if ((a3 & 0xFD) == 0x2C) {
    uint64_t v6 = 8;
  }
  if (a3 - 48 < 0xA) {
    uint64_t v6 = 8;
  }
  if ((a3 & 0xDFu) - 65 >= 0x1A) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  return v7 + v4;
}

BOOL sub_24841F648(uint64_t a1)
{
  if (!*(_DWORD *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = sub_2484D7BCC(*(void *)(a1 + 16) * v2, (atomic_fetch_add_explicit(dword_26931BDE0, 1u, memory_order_relaxed) & 0xF) << 7);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v4 - 24));
    free(*(void **)(v4 - 32));
    unint64_t v3 = *(void *)(a1 + 24);
  }
  return v3 == 0;
}

int *sub_24841F6D4(int *result, int *a2)
{
  int v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  int v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  int v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  int v5 = result[3];
  result[3] = a2[3];
  uint64_t v6 = *((void *)result + 2);
  uint64_t v7 = *((void *)result + 3);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)result + 3) = v8;
  a2[3] = v5;
  *((void *)a2 + 2) = v6;
  *((void *)a2 + 3) = v7;
  return result;
}

__n128 sub_24841F728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2483F7944(a1 + 96, a2);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a3 + 8);
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a1 + 237) = *(void *)(a3 + 21);
  *(void *)(a1 + 232) = v5;
  if (a1 + 216 != a3) {
    sub_2483EFEC8((void *)(a1 + 248), *(char **)(a3 + 32), *(char **)(a3 + 40), *(void *)(a3 + 40) - *(void *)(a3 + 32));
  }
  long long v6 = *(_OWORD *)(a3 + 56);
  long long v7 = *(_OWORD *)(a3 + 72);
  long long v8 = *(_OWORD *)(a3 + 88);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 272) = v6;
  *(void *)(a1 + 336) = *(void *)(a3 + 120);
  __n128 result = *(__n128 *)(a3 + 136);
  *(__n128 *)(a1 + 352) = result;
  *(void *)(a1 + 376) = *(void *)(a3 + 160);
  *(void *)(a1 + 392) = *(void *)(a3 + 176);
  *(void *)(a1 + 408) = *(void *)(a3 + 192);
  return result;
}

uint64_t sub_24841F7CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    sub_2483E8DDC((uint64_t *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_24841F820(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned char *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 8);
  if (!result)
  {
    long long v6 = (_DWORD *)(a1 + 12);
    long long v7 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t result = v7(a2, 0x8000001080000020, 0x2580000018, 32, a1 + 12);
      if (result) {
        return result;
      }
      int v9 = *(_DWORD *)(a1 + 16);
      long long v8 = (int *)(a1 + 16);
      *long long v8 = v9 - 1;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 4, 7, v8);
      if (result) {
        return result;
      }
      int v10 = *v8 + 1;
      *long long v8 = v10;
    }
    else
    {
      uint64_t result = v7(a2, 0x8000000A80000008, 0x258000000CLL, 8, a1 + 12);
      if (result) {
        return result;
      }
      int v10 = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    if (*v4)
    {
      if ((v10 - 9) < 0xFFFFFFF9 || (*v6 - v10 - 25) < 0xFFFFFFEA) {
        return 1;
      }
    }
    else if (*v6 > 0x1Fu)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_24841F9B0()
{
}

uint64_t sub_24841F9C8(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 9))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 8)))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 16);
    if (result) {
      return result;
    }
  }
  int v4 = (_DWORD *)(a1 + 96);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 3, 0, a1 + 96);
  if (result) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *v4 & 1))
  {
LABEL_8:
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, (*v4 >> 1) & 1))
    {
      for (uint64_t i = 0; i != 55; ++i)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 160 + i * 4, *(float *)&dword_24854D0C4[i]);
        if (result) {
          return result;
        }
      }
    }
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, (*v4 >> 2) & 1))
    {
      uint64_t v8 = 0;
      uint64_t v9 = a1 + 380;
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, v9 + v8 * 4, *(float *)&dword_24854D1A0[v8]);
        if (result) {
          break;
        }
        ++v8;
      }
      while (v8 != 210);
      return result;
    }
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 100 + v6 * 4, *(float *)&dword_24854D088[v6]);
    if (result) {
      return result;
    }
    if (++v6 == 15) {
      goto LABEL_8;
    }
  }
}

void sub_24841FC90()
{
}

uint64_t sub_24841FCA8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    unsigned int __n_4 = *(_DWORD *)(a1 + 12);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 0, &__n_4);
    if (!result)
    {
      unint64_t v5 = __n_4;
      *(_DWORD *)(a1 + 12) = __n_4;
      BOOL v6 = ((1 << v5) & 0x1807F) == 0 || v5 > 0x3F;
      uint64_t result = v6;
      if (!v6)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1 + 16);
        if (!result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, 0x8000000380000000, 0x2280000004, 0, a1 + 40);
          if (!result)
          {
            if (*(_DWORD *)(a1 + 40) <= 3u)
            {
              if (*(char *)(a1 + 71) < 0) {
                uint64_t v7 = *(void *)(a1 + 56);
              }
              else {
                LODWORD(v7) = *(unsigned __int8 *)(a1 + 71);
              }
              unsigned int __n = v7;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)a2 + 32))(a2, 0x380000000, 0x60900000204, 0, &__n);
              if (!result)
              {
                uint64_t v8 = (uint64_t *)(a1 + 48);
                if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2)) {
                  std::string::resize((std::string *)(a1 + 48), __n, 0);
                }
                if (__n)
                {
                  unint64_t v9 = 0;
                  while (1)
                  {
                    int v13 = 0;
                    uint64_t v10 = a1 + 48;
                    if (*(char *)(a1 + 71) < 0) {
                      uint64_t v10 = *v8;
                    }
                    int v13 = *(unsigned __int8 *)(v10 + v9);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)a2 + 40))(a2, 8, 0, &v13);
                    if (result) {
                      break;
                    }
                    uint64_t v11 = a1 + 48;
                    if (*(char *)(a1 + 71) < 0) {
                      uint64_t v11 = *v8;
                    }
                    *(unsigned char *)(v11 + v9++) = v13;
                    if (v9 >= __n) {
                      goto LABEL_30;
                    }
                  }
                }
                else
                {
LABEL_30:
                  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 0)|| (uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 72), !result))
                  {
                    if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 2))
                    {
LABEL_35:
                      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 5))
                      {
                        return (*(_DWORD *)(a1 + 12) - 7) < 9;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x180000001, 0x26700000063, 1, a1 + 92);
                      if (!result) {
                        return (*(_DWORD *)(a1 + 12) - 7) < 9;
                      }
                    }
                    else
                    {
                      uint64_t v12 = 0;
                      while (1)
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a2 + 56))(a2, a1 + 76 + v12, 0.0);
                        if (result) {
                          break;
                        }
                        v12 += 4;
                        if (v12 == 16) {
                          goto LABEL_35;
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              return 1;
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_2484200E8(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66090;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }

  JUMPOUT(0x24C579F90);
}

uint64_t sub_248420158(uint64_t a1)
{
  *(void *)a1 = &unk_26FC66090;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t sub_2484201A8(uint64_t a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, a1, a1 + 8);
  uint64_t v5 = *a2;
  if (!v4)
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 80))(a2, a1);
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t *))(v5 + 96))(a2))
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v12 = &unk_26FC65C20;
    char v15 = 1;
    long long v13 = xmmword_2484DC960;
    uint64_t v14 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)(a1 + 288) + 16))(a1 + 288, &v12);
    BOOL v6 = v15 != 0;
  }
  if (*(_DWORD *)(a1 + 248) != 1 || *(unsigned char *)(a1 + 252) || *(unsigned char *)(a1 + 253))
  {
    char v8 = 1;
  }
  else
  {
    char v8 = !v6;
    if (*(unsigned char *)(a1 + 254)) {
      char v8 = 1;
    }
  }
  LOBYTE(v12) = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void, void **))(*a2 + 24))(a2, 0, &v12);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t *, void))(*a2 + 64))(a2, v12))
    {
      *(_DWORD *)(a1 + 248) = 1;
      *(unsigned char *)(a1 + 254) = 0;
      *(_WORD *)(a1 + 252) = 0;
    }
    else
    {
      --*(_DWORD *)(a1 + 248);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t))(*a2 + 40))(a2, 3, 0, a1 + 248);
      if (result) {
        return result;
      }
      ++*(_DWORD *)(a1 + 248);
      uint64_t result = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*a2 + 24))(a2, 0, a1 + 254);
      if (result) {
        return result;
      }
      if (!(*(unsigned int (**)(uint64_t *, void))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 254)))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 256);
        if (result) {
          return result;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*a2 + 24))(a2, 0, a1 + 252);
      if (result) {
        return result;
      }
      if (!(*(unsigned int (**)(uint64_t *, void))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 252)))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 352);
        if (result) {
          return result;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*a2 + 24))(a2, 0, a1 + 253);
      if (result) {
        return result;
      }
      if (!(*(unsigned int (**)(uint64_t *, void))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 253)))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 384);
        if (result) {
          return result;
        }
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 16);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 24))(a2, 1, a1 + 40);
      if (!result)
      {
        unint64_t v9 = (_DWORD *)(a1 + 320);
        *(_DWORD *)(a1 + 320) = -1431655765 * ((*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 5);
        uint64_t result = (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t, void, uint64_t))(*a2 + 32))(a2, 0x8000000180000000, 0x2B00000043, 0, a1 + 320);
        if (!result)
        {
          if (!(*(unsigned int (**)(uint64_t *, BOOL))(*a2 + 64))(a2, *v9 != 0))
          {
            if ((*(unsigned int (**)(uint64_t *))(*a2 + 96))(a2)) {
              sub_248420890((int64x2_t *)(a1 + 328), *v9);
            }
            uint64_t v10 = *(void *)(a1 + 328);
            uint64_t v11 = *(void *)(a1 + 336);
            while (v10 != v11)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, v10);
              if (result) {
                return result;
              }
              v10 += 96;
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 24))(a2, 1, a1 + 41);
          if (!result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 48);
            if (!result)
            {
              if ((*(unsigned int (**)(uint64_t *, void))(*a2 + 64))(a2, v12)
                || (uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 288), !result))
              {
                if (!(*(unsigned int (**)(uint64_t *))(*a2 + 96))(a2) || !*(unsigned char *)(a1 + 416))
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 104))(a2, a1 + 408);
                  if (!result) {
                    return (*(uint64_t (**)(uint64_t *))(*a2 + 112))(a2);
                  }
                  return result;
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

int64x2_t *sub_248420890(int64x2_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result->i64[0];
  uint64_t v5 = (void *)result->i64[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - result->i64[0]) >> 5);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v28 = (void *)(v4 + 96 * a2);
      if (v5 != v28)
      {
        long long v29 = (uint64_t (***)(void))(v5 - 12);
        char v30 = v29;
        unint64_t v31 = v29;
        do
        {
          unint64_t v32 = *v31;
          v31 -= 12;
          uint64_t result = (int64x2_t *)(*v32)(v30);
          v29 -= 12;
          BOOL v33 = v30 == v28;
          char v30 = v31;
        }
        while (!v33);
      }
      v3->i64[1] = (uint64_t)v28;
    }
  }
  else
  {
    uint64_t v8 = result[1].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 5) >= v7)
    {
      unint64_t v34 = &v5[12 * v7];
      uint64_t v35 = 96 * a2 - 32 * (((uint64_t)v5 - result->i64[0]) >> 5);
      do
      {
        uint64_t result = (int64x2_t *)sub_248420B2C(v5);
        v5 += 12;
        v35 -= 96;
      }
      while (v35);
      v3->i64[1] = (uint64_t)v34;
    }
    else
    {
      if (a2 > 0x2AAAAAAAAAAAAAALL) {
        sub_2483E92E8();
      }
      unint64_t v40 = result + 1;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 5);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x155555555555555) {
        unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)sub_248410E98(v11);
      long long v13 = &v12[96 * v6];
      uint64_t v37 = v12;
      v38.i64[0] = (uint64_t)v13;
      v38.i64[1] = (uint64_t)v13;
      BOOL v39 = &v12[96 * v14];
      uint64_t v15 = 3 * a2;
      uint64_t v16 = &v12[96 * a2];
      uint64_t v17 = 32 * v15 - 96 * v6;
      do
      {
        sub_248420B2C(v13);
        v13 += 96;
        v17 -= 96;
      }
      while (v17);
      v38.i64[1] = (uint64_t)v16;
      uint64_t v19 = v3->i64[0];
      unint64_t v18 = v3->u64[1];
      uint64_t v20 = v38.i64[0];
      if (v18 == v3->i64[0])
      {
        int64x2_t v27 = vdupq_n_s64(v18);
      }
      else
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = v20 + v21;
          *(void *)(v22 - 96) = &unk_26FC66090;
          uint64_t v23 = v18 + v21;
          *(void *)(v22 - 88) = *(void *)(v18 + v21 - 88);
          *(void *)(v22 - 80) = &unk_26FC668F8;
          uint64_t v24 = *(void *)(v18 + v21 - 72);
          *(_DWORD *)(v22 - 64) = *(_DWORD *)(v18 + v21 - 64);
          *(void *)(v22 - 72) = v24;
          *(_DWORD *)(v22 - 56) = *(_DWORD *)(v18 + v21 - 56);
          long long v25 = *(_OWORD *)(v18 + v21 - 48);
          *(void *)(v22 - 32) = *(void *)(v18 + v21 - 32);
          *(_OWORD *)(v22 - 48) = v25;
          *(void *)(v23 - 40) = 0;
          *(void *)(v23 - 32) = 0;
          *(void *)(v23 - 48) = 0;
          long long v26 = *(_OWORD *)(v18 + v21 - 24);
          *(void *)(v22 - 8) = *(void *)(v18 + v21 - 8);
          *(_OWORD *)(v22 - 24) = v26;
          v21 -= 96;
        }
        while (v18 + v21 != v19);
        v20 += v21;
        int64x2_t v27 = *v3;
        uint64_t v16 = (char *)v38.i64[1];
      }
      v3->i64[0] = v20;
      v3->i64[1] = (uint64_t)v16;
      int64x2_t v38 = v27;
      uint64_t v36 = (char *)v3[1].i64[0];
      v3[1].i64[0] = (uint64_t)v39;
      BOOL v39 = v36;
      uint64_t v37 = (char *)v27.i64[0];
      return (int64x2_t *)sub_248420C50((uint64_t)&v37);
    }
  }
  return result;
}

void sub_248420B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void *sub_248420B2C(void *a1)
{
  *a1 = &unk_26FC66090;
  a1[2] = &unk_26FC668F8;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841F820((uint64_t)(a1 + 2), (uint64_t)&v3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  (*(void (**)(void *, void **))(*a1 + 16))(a1, &v3);
  return a1;
}

void sub_248420C34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248420C50(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 96);
    *(void *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_248420CBC(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65EF0;
  uint64_t v3 = (void **)(a1 + 328);
  sub_248410954(&v3);
  *(void *)(a1 + 48) = &unk_26FC65EC8;
  int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x24C579F90);
}

uint64_t sub_248420D64(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 12 + v4 * 4, *(float *)&dword_24854D584[v4]);
      if (result) {
        break;
      }
      if (++v4 == 9)
      {
        uint64_t v6 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 48 + v6, *(float *)((char *)&xmmword_248552D70 + v6));
          if (result) {
            break;
          }
          v6 += 4;
          if (v6 == 12)
          {
            uint64_t v7 = 0;
            uint64_t v8 = a1 + 60;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, v8 + v7, *(float *)((char *)&xmmword_24854D4E8 + v7));
              if (result) {
                break;
              }
              v7 += 4;
              if (v7 == 16) {
                return 0;
              }
            }
            return result;
          }
        }
        return result;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_248420EF0()
{
}

uint64_t sub_248420F08(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    uint64_t v4 = (float *)(a1 + 12);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 12, 255.0);
    if (!result)
    {
      if (*v4 <= 0.0) {
        return 1;
      }
      uint64_t v6 = (float *)(a1 + 16);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a2 + 56))(a2, a1 + 16, 0.0);
      if (!result)
      {
        if (*v6 < 0.0) {
          return 1;
        }
        if (*v6 > *v4) {
          return 1;
        }
        uint64_t v7 = (unsigned char *)(a1 + 20);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 20);
        if (!result)
        {
          uint64_t v8 = (float *)(a1 + 24);
          uint64_t result = (*(uint64_t (**)(uint64_t, float *, double))(*(void *)a2 + 56))(a2, v8, 0.0);
          if (!result)
          {
            if (*v8 < 0.0) {
              return 1;
            }
            uint64_t result = 0;
            if (*v8 > 1.0)
            {
              if (*v7) {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_2484210D0()
{
}

uint64_t sub_2484210E8(uint64_t a1)
{
  *(void *)a1 = &unk_26FC660E0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_26FC660B8;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_248420D64(a1 + 16, (uint64_t)&v3);
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v3);
  return a1;
}

uint64_t sub_2484211E4(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65EF0;
  *(void *)(a1 + 16) = &unk_26FC668F8;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841F820(a1 + 16, (uint64_t)&v3);
  sub_2483F06F8(a1 + 48);
  *(_DWORD *)(a1 + 248) = 1;
  *(_WORD *)(a1 + 252) = 0;
  *(unsigned char *)(a1 + 254) = 0;
  sub_24841D81C((void *)(a1 + 256));
  *(void *)(a1 + 288) = &unk_26FC659B0;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_248420F08(a1 + 288, (uint64_t)&v3);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = &unk_26FC65F18;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841D230(a1 + 352, (uint64_t)&v3);
  *(void *)(a1 + 384) = &unk_26FC66040;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_24841D50C(a1 + 384, (uint64_t)&v3);
  *(unsigned char *)(a1 + 416) = 0;
  uint64_t v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_248421404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 + 328);
  sub_248410954(&a12);
  *(void *)(v12 + 48) = &unk_26FC65EC8;
  uint64_t v14 = *(void **)(v12 + 80);
  if (v14)
  {
    *(void *)(v12 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_248421460(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 1, a1 + 9);
  if (result) {
    return result;
  }
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 9)))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 10);
    if (result) {
      return result;
    }
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 10)))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 12, 0.11517);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 16, 0.061249);
      if (result) {
        return result;
      }
      if (fabsf((float)((float)(*(float *)(a1 + 12) + *(float *)(a1 + 16)) * 4.0) + 1.0) < 0.00000001) {
        return 1;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 20, 0.11517);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 24, 0.061249);
      if (result) {
        return result;
      }
      if (fabsf((float)((float)(*(float *)(a1 + 20) + *(float *)(a1 + 24)) * 4.0) + 1.0) < 0.00000001) {
        return 1;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 28, 0.11517);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 32, 0.061249);
      if (result) {
        return result;
      }
      if (fabsf((float)((float)(*(float *)(a1 + 28) + *(float *)(a1 + 32)) * 4.0) + 1.0) < 0.00000001) {
        return 1;
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 2, 2, a1 + 36);
  if (result) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(_DWORD *)(a1 + 36) != 0))
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1 + 128);
    if (!result)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 112);
      return v5(a2);
    }
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(unsigned char *)(a1 + 136) == 0)) {
    goto LABEL_19;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 40);
  if (result) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 40)))
  {
LABEL_19:
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 76);
    if (result) {
      return result;
    }
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 76)))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 80, 40.0);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 84, 5.0);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 88, 3.5);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 92, 0.45);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 96, 0.6);
      if (result) {
        return result;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, a1 + 100);
    if (result) {
      return result;
    }
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 100)))
    {
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 64))(a2, *(unsigned char *)(a1 + 136) == 0))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 104, 0.46);
        if (result) {
          return result;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 108, 0.9);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 112, 6.5);
      if (result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 116, 0.66667);
      if (result) {
        return result;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 136)))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, a1 + 120, 1.0);
      if (result) {
        return result;
      }
      if (*(float *)(a1 + 120) < 0.00000001) {
        return 1;
      }
    }
    goto LABEL_6;
  }
  unint64_t v6 = 0;
  uint64_t v7 = a1 + 44;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a2 + 56))(a2, v7, (float)v6 / 7.0);
    if (result) {
      return result;
    }
    ++v6;
    v7 += 4;
    if (v6 == 8) {
      goto LABEL_19;
    }
  }
}

void sub_248421D28()
{
}

void *sub_248421D40(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9A607DBBuLL);
}

void sub_248421D50(int a1, void *a2)
{
}

uint64_t sub_248421D58(unint64_t *a1, uint64_t *a2, unint64_t a3)
{
  memset(v74, 0, sizeof(v74));
  *(_OWORD *)uint64x2_t __p = 0u;
  long long v72 = 0u;
  *(_OWORD *)unint64_t v70 = 0u;
  memset(v69, 0, sizeof(v69));
  sub_2483F26D4((uint64_t)v73);
  v73[6] = 0;
  uint64_t v6 = sub_2483F2760(a1, 6uLL, (uint64_t)v69, v74, 0);
  if (!v6)
  {
    uint64_t v7 = (unsigned __int8 *)v74[0];
    if (*((int *)__p[1] + *(unsigned __int8 *)(v74[0] + 1)) <= 0)
    {
      sub_2483EA6D0((uint64_t)v66, (uint64_t)v69, a1, 0);
      uint64_t v8 = 0;
      uint64_t v9 = 0x400000;
      if (a3 < 0x400000) {
        uint64_t v9 = a3;
      }
      unint64_t v65 = v9;
      uint64_t v10 = *a2;
      a2[1] = *a2;
      uint64_t v11 = 1;
      do
      {
        unint64_t v13 = a1[3];
        unint64_t v12 = a1[4];
        unint64_t v14 = 8 * (a1[2] - v12 + a1[5]) - a1[1];
        a1[7] = v14;
        if (v14 > 8 * (v13 - v12) + 64
          || 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a2) >> 3) > v65
          || (unsigned int v15 = sub_2483EAC28((uint64_t)v66, v7[1], a1), v15 > 0x100))
        {
LABEL_48:
          uint64_t v6 = 1;
          goto LABEL_49;
        }
        if (v15)
        {
          __int16 v16 = v15 - 1;
          unint64_t v17 = sub_2483EAC28((uint64_t)v66, *v7, a1);
          int v18 = (v17 >> 1) ^ -(v17 & 1);
          unint64_t v19 = a2[1];
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *a2) >> 3);
          int v21 = v20 + v11++;
          int v22 = v20 + v11;
          unint64_t v23 = a2[2];
          if (v19 >= v23)
          {
            unint64_t v35 = v20 + 1;
            if (v20 + 1 > 0x666666666666666) {
              goto LABEL_60;
            }
            if (0x999999999999999ALL * ((uint64_t)(v23 - *a2) >> 3) > v35) {
              unint64_t v35 = 0x999999999999999ALL * ((uint64_t)(v23 - *a2) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *a2) >> 3) >= 0x333333333333333) {
              unint64_t v36 = 0x666666666666666;
            }
            else {
              unint64_t v36 = v35;
            }
            uint64_t v37 = (char *)sub_248403444(v36);
            BOOL v39 = &v37[40 * v20];
            *(_DWORD *)BOOL v39 = v18;
            *((_WORD *)v39 + 2) = v16;
            *((_DWORD *)v39 + 2) = v21;
            *((_DWORD *)v39 + 3) = v22;
            *((_DWORD *)v39 + 4) = 0;
            *((void *)v39 + 3) = 0;
            *((_DWORD *)v39 + 8) = 1;
            uint64_t v41 = (char *)*a2;
            unint64_t v40 = (char *)a2[1];
            uint64_t v42 = (uint64_t)v39;
            if (v40 != (char *)*a2)
            {
              do
              {
                long long v43 = *(_OWORD *)(v40 - 40);
                long long v44 = *(_OWORD *)(v40 - 24);
                *(_DWORD *)(v42 - 8) = *((_DWORD *)v40 - 2);
                *(_OWORD *)(v42 - 24) = v44;
                *(_OWORD *)(v42 - 40) = v43;
                v42 -= 40;
                v40 -= 40;
              }
              while (v40 != v41);
              unint64_t v40 = (char *)*a2;
            }
            uint64_t v10 = (uint64_t)(v39 + 40);
            *a2 = v42;
            a2[1] = (uint64_t)(v39 + 40);
            a2[2] = (uint64_t)&v37[40 * v38];
            if (v40) {
              operator delete(v40);
            }
            uint64_t v24 = v8;
          }
          else
          {
            *(_DWORD *)unint64_t v19 = v18;
            *(_WORD *)(v19 + 4) = v16;
            *(_DWORD *)(v19 + 8) = v21;
            *(_DWORD *)(v19 + 12) = v22;
            *(_DWORD *)(v19 + 16) = 0;
            *(void *)(v19 + 24) = 0;
            uint64_t v10 = v19 + 40;
            uint64_t v24 = v8;
            *(_DWORD *)(v19 + 32) = 1;
          }
        }
        else
        {
          unint64_t v25 = sub_2483EAC28((uint64_t)v66, v7[2], a1);
          if (v25 > 0xD) {
            goto LABEL_48;
          }
          int v26 = v25;
          unint64_t v27 = sub_2483EAC28((uint64_t)v66, v7[3], a1);
          unsigned int v28 = sub_2483EAC28((uint64_t)v66, v7[4], a1);
          char v29 = v28;
          if (v28 > 0x1E) {
            goto LABEL_48;
          }
          unsigned int v30 = sub_2483EAC28((uint64_t)v66, v7[5], a1);
          if ((0x80000000 >> v29) - 1 <= v30) {
            goto LABEL_48;
          }
          --v11;
          unint64_t v31 = -(uint64_t)(v27 & 1) ^ (v27 >> 1);
          int v32 = (v30 + 1) << v29;
          uint64_t v24 = v8 + 1;
          unint64_t v33 = a2[1];
          unint64_t v34 = a2[2];
          if (v33 >= v34)
          {
            unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *a2) >> 3);
            unint64_t v46 = v45 + 1;
            if (v45 + 1 > 0x666666666666666) {
LABEL_60:
            }
              sub_2483E92E8();
            unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - *a2) >> 3);
            if (2 * v47 > v46) {
              unint64_t v46 = 2 * v47;
            }
            if (v47 >= 0x333333333333333) {
              unint64_t v48 = 0x666666666666666;
            }
            else {
              unint64_t v48 = v46;
            }
            unint64_t v49 = (char *)sub_248403444(v48);
            unint64_t v51 = &v49[40 * v45];
            *(_DWORD *)unint64_t v51 = 0;
            *((_WORD *)v51 + 2) = -1;
            *((_DWORD *)v51 + 2) = v8;
            *((_DWORD *)v51 + 3) = 0;
            *((_DWORD *)v51 + 4) = v26;
            *((void *)v51 + 3) = v31;
            *((_DWORD *)v51 + 8) = v32;
            unint64_t v53 = (char *)*a2;
            unint64_t v52 = (char *)a2[1];
            uint64_t v54 = (uint64_t)v51;
            if (v52 != (char *)*a2)
            {
              do
              {
                long long v55 = *(_OWORD *)(v52 - 40);
                long long v56 = *(_OWORD *)(v52 - 24);
                *(_DWORD *)(v54 - 8) = *((_DWORD *)v52 - 2);
                *(_OWORD *)(v54 - 24) = v56;
                *(_OWORD *)(v54 - 40) = v55;
                v54 -= 40;
                v52 -= 40;
              }
              while (v52 != v53);
              unint64_t v52 = (char *)*a2;
            }
            uint64_t v10 = (uint64_t)(v51 + 40);
            *a2 = v54;
            a2[1] = (uint64_t)(v51 + 40);
            a2[2] = (uint64_t)&v49[40 * v50];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v33 = 0;
            *(_WORD *)(v33 + 4) = -1;
            *(_DWORD *)(v33 + 8) = v8;
            *(_DWORD *)(v33 + 12) = 0;
            *(_DWORD *)(v33 + 16) = v26;
            *(void *)(v33 + 24) = v31;
            uint64_t v10 = v33 + 40;
            *(_DWORD *)(v33 + 32) = v32;
          }
        }
        a2[1] = v10;
        uint64_t v8 = v24;
      }
      while (v11);
      unint64_t v75 = 0;
      unint64_t v76 = 0;
      size_t v77 = 0;
      unint64_t v57 = (char *)sub_2483F04AC(0x100uLL);
      uint64_t v59 = v57;
      uint64_t v60 = 0;
      int64x2_t v61 = vdupq_n_s64(0x7FFFFFFF80000000uLL);
      do
      {
        *(int64x2_t *)&v57[v60] = v61;
        v60 += 16;
      }
      while (v60 != 2048);
      unint64_t v75 = v57;
      unint64_t v76 = v57 + 2048;
      size_t v77 = &v57[8 * v58];
      uint64_t v6 = sub_2484223B0(a2, (uint64_t *)&v75, 0);
      if (v59)
      {
        unint64_t v76 = v59;
        operator delete(v59);
      }
      if (!v6) {
        uint64_t v6 = v67 != 1245184;
      }
LABEL_49:
      uint64_t v62 = v68;
      uint64_t v68 = 0;
      if (v62)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v62 - 24));
        free(*(void **)(v62 - 32));
      }
    }
    else
    {
      uint64_t v6 = 1;
    }
  }
  if (__p[1])
  {
    *(void **)&long long v72 = __p[1];
    operator delete(__p[1]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  v66[0] = (void **)v69 + 1;
  sub_2483EA640(v66);
  uint64_t v63 = *(void *)&v69[0];
  *(void *)&v69[0] = 0;
  if (v63)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v63 - 24));
    free(*(void **)(v63 - 32));
  }
  if (v74[0]) {
    operator delete((void *)v74[0]);
  }
  return v6;
}

void sub_2484222DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v18 - 104) = v17;
  operator delete(v17);
  if (a17)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a17 - 24));
    free(*(void **)(a17 - 32));
  }
  sub_2483EABC4((uint64_t)&STACK[0x260]);
  unint64_t v20 = *(void **)(v18 - 136);
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_24842234C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v12;
    operator delete(v12);
  }
  a11 = (uint64_t)&STACK[0x268];
  sub_2483EA640((void ***)&a11);
  unint64_t v13 = STACK[0x260];
  STACK[0x260] = 0;
  if (v13)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v13 - 24));
    free(*(void **)(v13 - 32));
  }
  JUMPOUT(0x248422338);
}

uint64_t sub_2484223B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(__int16 *)(*a1 + 40 * a3 + 4);
  if (v4 == -1) {
    return 0;
  }
  int v7 = *(_DWORD *)(v3 + 40 * a3);
  uint64_t v8 = *a2;
  if (*(_DWORD *)(*a2 + 8 * v4) > v7 || *(_DWORD *)(v8 + 8 * v4 + 4) <= v7) {
    return 1;
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  int v21 = 0;
  uint64_t v10 = a2[1];
  uint64_t v11 = v10 - v8;
  if (v10 == v8)
  {
    unint64_t v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      sub_2483E92E8();
    }
    unint64_t v12 = (char *)sub_2483F04AC(v11 >> 3);
    unint64_t v13 = v12;
    uint64_t v14 = 0;
    unint64_t v19 = v12;
    int v21 = &v12[8 * v15];
    do
    {
      *(void *)&v12[v14] = *(void *)(v8 + v14);
      v14 += 8;
    }
    while (v8 + v14 != v10);
    unint64_t v20 = &v12[v14];
    uint64_t v3 = *a1;
  }
  unint64_t v17 = &v13[2 * v4];
  *unint64_t v17 = v7 + 1;
  uint64_t v16 = sub_2484223B0(a1, &v19, *(unsigned int *)(v3 + 40 * a3 + 8));
  if (!v16)
  {
    *unint64_t v17 = *(_DWORD *)(*a2 + 8 * v4);
    v13[2 * v4 + 1] = v7;
    uint64_t v16 = sub_2484223B0(a1, &v19, *(unsigned int *)(*a1 + 40 * a3 + 12));
  }
  operator delete(v13);
  return v16;
}

void sub_248422528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24842253C(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned char *a5, BOOL *a6, BOOL *a7)
{
  int v7 = a7;
  *a4 = 0;
  *a7 = 1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v82 = 0u;
  memset(v81, 0, sizeof(v81));
  *(void *)&long long v79 = 0;
  sub_248422B6C(v81, &v79);
  char v69 = a5;
  uint64_t v11 = *((void *)&v82 + 1);
  if (*((void *)&v82 + 1))
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    int v73 = 0;
    int v14 = 0;
    unint64_t v70 = v7;
    while (1)
    {
      uint64_t v15 = *(void *)(*(void *)(*((void *)&v81[0] + 1) + (((unint64_t)v82 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v82 & 0x1FF));
      *(void *)&long long v82 = v82 + 1;
      *((void *)&v82 + 1) = v11 - 1;
      if ((unint64_t)v82 >= 0x400)
      {
        operator delete(**((void ***)&v81[0] + 1));
        *((void *)&v81[0] + 1) += 8;
        *(void *)&long long v82 = v82 - 512;
      }
      uint64_t v16 = *a2;
      uint64_t v17 = *a2 + 40 * v15;
      int v18 = *(__int16 *)(v17 + 4);
      if (v18 > 1) {
        break;
      }
      while ((_WORD)v18 != 0xFFFF)
      {
        uint64_t v19 = v16 + 40 * v15;
        unint64_t v20 = (unsigned int *)(v19 + 8);
        int v21 = (unsigned int *)(v19 + 12);
        if (*(_DWORD *)(a3 + 4 * (__int16)v18) <= *(_DWORD *)v17) {
          int v22 = v21;
        }
        else {
          int v22 = v20;
        }
        uint64_t v15 = *v22;
        uint64_t v17 = v16 + 40 * v15;
        int v18 = *(__int16 *)(v17 + 4);
        if (v18 >= 2) {
          goto LABEL_11;
        }
      }
      uint64_t v43 = v16 + 40 * v15;
      uint64_t v44 = *(void *)(v43 + 24);
      LODWORD(v80) = *(_DWORD *)(v43 + 8);
      HIDWORD(v80) = v44;
      int v45 = *(_DWORD *)(v43 + 16);
      LODWORD(v79) = -1;
      DWORD1(v79) = v45;
      DWORD2(v79) = *(_DWORD *)(v43 + 32);
      BOOL v47 = v45 == 5 && *v7;
      *int v7 = v47;
      v73 |= v45 == 6;
      v14 |= v45 != 6;
      unint64_t v48 = a1;
      unint64_t v49 = a1[2];
      if ((unint64_t)v13 < v49) {
        goto LABEL_57;
      }
      uint64_t v50 = (void *)*a1;
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - *a1) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_86;
      }
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)v50) >> 3);
      if (2 * v53 > v52) {
        unint64_t v52 = 2 * v53;
      }
      if (v53 >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54) {
        unint64_t v54 = (unint64_t)sub_2483F8ED4(v54);
      }
      else {
        uint64_t v55 = 0;
      }
      unint64_t v61 = v54 + 24 * v51;
      *(_OWORD *)unint64_t v61 = v79;
      *(void *)(v61 + 16) = v80;
      unint64_t v12 = v61;
      if (v13 == v50) {
        goto LABEL_74;
      }
      do
      {
        long long v64 = *(_OWORD *)(v13 - 3);
        *(void *)(v12 - 8) = *(v13 - 1);
        *(_OWORD *)(v12 - 24) = v64;
        v12 -= 24;
        v13 -= 3;
      }
      while (v13 != v50);
LABEL_73:
      unint64_t v65 = a1;
      unint64_t v13 = (void *)*a1;
LABEL_75:
      uint64_t v58 = (void *)(v61 + 24);
      *unint64_t v65 = v12;
      v65[1] = v61 + 24;
      _OWORD v65[2] = v54 + 24 * v55;
      if (v13)
      {
        operator delete(v13);
        unint64_t v48 = a1;
      }
      else
      {
        unint64_t v48 = v65;
      }
LABEL_78:
      v48[1] = (unint64_t)v58;
      uint64_t v11 = *((void *)&v82 + 1);
      unint64_t v13 = v58;
      if (!*((void *)&v82 + 1)) {
        goto LABEL_81;
      }
    }
LABEL_11:
    int v72 = v14;
    uint64_t v23 = 0;
    unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v12) >> 3);
    LODWORD(v80) = v71 + DWORD2(v82) + 1;
    unint64_t v24 = (unsigned __int16)v18 + 1;
    if (*a4 > v24) {
      unint64_t v24 = *a4;
    }
    *a4 = v24;
    int v25 = *(_DWORD *)v17;
    LODWORD(v79) = (unsigned __int16)v18;
    DWORD1(v79) = v25;
    char v26 = 1;
    do
    {
      char v27 = v26;
      uint64_t v28 = *a2;
      uint64_t v29 = 12;
      if (v27) {
        uint64_t v29 = 8;
      }
      uint64_t v30 = *(unsigned int *)(*a2 + 40 * v15 + v29);
      uint64_t v31 = v28 + 40 * v30;
      int v32 = *(__int16 *)(v31 + 4);
      if (v32 > 1)
      {
LABEL_22:
        *((_WORD *)&v80 + v23 + 2) = v32;
        *((_DWORD *)&v79 + v23 + 2) = *(_DWORD *)v31;
        uint64_t v77 = *(unsigned int *)(v28 + 40 * v30 + 8);
        sub_248422B6C(v81, &v77);
        uint64_t v77 = *(unsigned int *)(*a2 + 40 * v30 + 12);
        sub_248422B6C(v81, &v77);
        if (v32 + 1 > (unint64_t)*a4) {
          uint64_t v37 = v32 + 1;
        }
        else {
          uint64_t v37 = *a4;
        }
        *a4 = v37;
      }
      else
      {
        while ((_WORD)v32 != 0xFFFF)
        {
          uint64_t v33 = v28 + 40 * v30;
          unint64_t v34 = (unsigned int *)(v33 + 12);
          unint64_t v35 = (unsigned int *)(v33 + 8);
          if (*(_DWORD *)(a3 + 4 * (__int16)v32) <= *(_DWORD *)v31) {
            unint64_t v36 = v34;
          }
          else {
            unint64_t v36 = v35;
          }
          uint64_t v30 = *v36;
          uint64_t v31 = v28 + 40 * v30;
          int v32 = *(__int16 *)(v31 + 4);
          if (v32 >= 2) {
            goto LABEL_22;
          }
        }
        uint64_t v78 = v30;
        *((_WORD *)&v80 + v23 + 2) = 0;
        *((_DWORD *)&v79 + v23 + 2) = 0;
        sub_248422B6C(v81, &v78);
        sub_248422B6C(v81, &v78);
      }
      char v26 = 0;
      uint64_t v23 = 1;
    }
    while ((v27 & 1) != 0);
    uint64_t v38 = 0;
    char v39 = 1;
    int v7 = v70;
    int v14 = v72;
    int v40 = v73;
    while (1)
    {
      char v41 = v39;
      int v42 = *((unsigned __int16 *)&v80 + v38 + 2);
      if (v42 == 15)
      {
        int v40 = 1;
      }
      else
      {
        if ((__int16)v42 < 2) {
          goto LABEL_34;
        }
        int v14 = 1;
        if (v42 == 9) {
          goto LABEL_34;
        }
      }
      *unint64_t v70 = 0;
LABEL_34:
      char v39 = 0;
      uint64_t v38 = 1;
      if ((v41 & 1) == 0)
      {
        if (v18 == 9)
        {
          int v14 = 1;
        }
        else
        {
          if ((unsigned __int16)v18 == 15) {
            int v40 = 1;
          }
          else {
            int v14 = 1;
          }
          *unint64_t v70 = 0;
        }
        int v73 = v40;
        unint64_t v48 = a1;
        unint64_t v56 = a1[2];
        if ((unint64_t)v13 < v56)
        {
LABEL_57:
          long long v57 = v79;
          v13[2] = v80;
          *(_OWORD *)unint64_t v13 = v57;
          uint64_t v58 = v13 + 3;
          goto LABEL_78;
        }
        unint64_t v59 = v71 + 1;
        if (v71 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v12) >> 3);
          if (2 * v60 > v59) {
            unint64_t v59 = 2 * v60;
          }
          if (v60 >= 0x555555555555555) {
            unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v54 = v59;
          }
          if (v54) {
            unint64_t v54 = (unint64_t)sub_2483F8ED4(v54);
          }
          else {
            uint64_t v55 = 0;
          }
          unint64_t v61 = v54 + 8 * ((uint64_t)((uint64_t)v13 - v12) >> 3);
          *(_OWORD *)unint64_t v61 = v79;
          *(void *)(v61 + 16) = v80;
          uint64_t v62 = (void *)*a1;
          unint64_t v12 = v61;
          if (v13 != (void *)*a1)
          {
            do
            {
              long long v63 = *(_OWORD *)(v13 - 3);
              *(void *)(v12 - 8) = *(v13 - 1);
              *(_OWORD *)(v12 - 24) = v63;
              v12 -= 24;
              v13 -= 3;
            }
            while (v13 != v62);
            goto LABEL_73;
          }
LABEL_74:
          unint64_t v65 = a1;
          goto LABEL_75;
        }
LABEL_86:
        sub_2483E92E8();
      }
    }
  }
  LOBYTE(v14) = 0;
  LOBYTE(v73) = 0;
LABEL_81:
  unint64_t v66 = 16;
  if ((unint64_t)*a4 > 0x10) {
    unint64_t v66 = ((*a4 - 13) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  }
  *a4 = v66;
  *char v69 = v73;
  BOOL v67 = v73 != 0;
  if ((_BYTE)v14) {
    BOOL v67 = 0;
  }
  *a6 = v67;
  return sub_248422BF8((uint64_t)v81);
}

void sub_248422B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_248422BF8((uint64_t)va);
  int v18 = *(void **)a8;
  if (*(void *)a8)
  {
    *(void *)(a8 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_248422B6C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_248422CC0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

uint64_t sub_248422BF8(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_248422CC0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v41 = (char *)sub_2483F04AC(v40);
      int v42 = &v41[8 * (v40 >> 2)];
      uint64_t v44 = &v41[8 * v43];
      int v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        unint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)unint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  unint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  int v21 = (char *)*a1;
  int v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    int v25 = operator new(0x1000uLL);
    char v26 = v25;
    if (v19 != v20)
    {
      *(void *)unint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      unint64_t v53 = (char *)sub_2483F04AC(v51);
      int v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v55 = (uint64_t *)a1[1];
      unint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        unint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        unint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)unint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      unint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        int v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v41 = (char *)sub_2483F04AC(v85);
      int v42 = &v41[8 * (v85 >> 2)];
      uint64_t v44 = &v41[8 * v86];
      unint64_t v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        size_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)size_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)sub_2483F04AC(v28);
  uint64_t v31 = v30;
  int v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  unint64_t v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    long long v64 = (char *)sub_2483F04AC(v63);
    int v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)int v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    BOOL v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      char v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        unint64_t v75 = (char *)sub_2483F04AC(v74);
        uint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          uint64_t v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = v68;
          size_t v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)uint64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        uint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          char v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      uint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  unint64_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_248423180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2484231B0(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13 = a2;
  if (!*(void *)(a2 + 56))
  {
    return sub_248424D6C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = (void *)(*a9 + ((uint64_t)a6 << 6));
  v460[0] = a6;
  v460[1] = a7;
  uint64_t v16 = v15 + 5;
  if (!v15[5]) {
    return 0;
  }
  uint64_t v17 = v15 + 6;
  if (!v15[6]) {
    return 0;
  }
  __int16 v459 = 0;
  BOOL v458 = 0;
  unint64_t v457 = 0;
  sub_24842253C((unint64_t *)&v455, a4, (uint64_t)v460, (uint64_t *)&v457, (unsigned char *)&v459 + 1, (BOOL *)&v459, &v458);
  int64_t v18 = v455;
  int64_t v19 = (char *)v456 - (char *)v455;
  if (v456 != v455)
  {
    uint64_t v20 = v19 / 24;
    uint64_t v21 = *a3;
    if ((unint64_t)(v19 / 24) <= 1) {
      uint64_t v20 = 1;
    }
    int v22 = v455 + 4;
    do
    {
      if (*(v22 - 4) == -1) {
        *int v22 = *(unsigned __int8 *)(v21 + *v22);
      }
      v22 += 6;
      --v20;
    }
    while (v20);
  }
  int v426 = a7;
  v428 = (_DWORD *)v13;
  v430 = a1;
  v431 = v15 + 5;
  v421 = v15 + 6;
  uint64_t v422 = (uint64_t)v15;
  if (v19 == 24)
  {
    unsigned int v23 = v18[1];
    unsigned int v24 = v18[2];
    uint64_t v26 = v18[4];
    unsigned int v25 = v18[5];
    if (v23)
    {
      if (v23 == 5 && !v25 && v24 == 1)
      {
        uint64_t v27 = v430;
        if (!*(void *)(v13 + 56) || !*(unsigned char *)(v13 + 16)) {
          goto LABEL_122;
        }
        uint64_t v28 = 0;
        uint64_t v29 = *(unsigned int *)(v13 + 76);
        uint64_t v30 = *(void *)(*(void *)(v13 + 8) + 24 * v29);
        do
        {
          if (*(unsigned char *)(v30 + v28) || *(_WORD *)(v30 + v28 + 2) != 1) {
            goto LABEL_122;
          }
          v28 += 4;
        }
        while (v28 != 32);
        if (*(_DWORD *)(*(void *)(v13 + 24) + 16 * v29 + 4) > 1u)
        {
LABEL_122:
          unint64_t v136 = *v17;
          if (*v17)
          {
            unint64_t v137 = 0;
            uint64_t v138 = v15[2] >> 2;
            uint64_t v139 = -v138;
            uint64_t v140 = *v16;
            uint64_t v141 = -1 * v138;
            do
            {
              if (v140)
              {
                unint64_t v142 = 0;
                unint64_t v143 = (_DWORD *)(v15[3] + v15[2] * v137);
                uint64_t v144 = v143;
                do
                {
                  if (v142)
                  {
                    int v145 = *(v144 - 1);
                    if (v137)
                    {
                      int v147 = v144[v141 - 1];
                      int v146 = v144[v141];
                    }
                    else
                    {
                      int v146 = *(v144 - 1);
                      int v147 = v146;
                    }
                  }
                  else if (v137)
                  {
                    int v146 = v143[v139];
                    int v145 = v146;
                    int v147 = v146;
                  }
                  else
                  {
                    int v146 = 0;
                    int v145 = 0;
                    int v147 = 0;
                  }
                  unint64_t v148 = sub_2483EAC28((uint64_t)v428, v26, v430);
                  if (v146 <= v145) {
                    int v149 = v145;
                  }
                  else {
                    int v149 = v146;
                  }
                  if (v145 >= v146) {
                    int v150 = v146;
                  }
                  else {
                    int v150 = v145;
                  }
                  int v151 = v145 + v146 - v147;
                  if (v150 > v147) {
                    int v151 = v149;
                  }
                  if (v149 >= v147) {
                    int v152 = v151;
                  }
                  else {
                    int v152 = v150;
                  }
                  *v144++ = v152 + ((v148 >> 1) ^ -(v148 & 1));
                  ++v142;
                  uint64_t v140 = *v431;
                }
                while (v142 < *v431);
                uint64_t v15 = (void *)v422;
                unint64_t v136 = *v421;
              }
              ++v137;
            }
            while (v137 < v136);
          }
          goto LABEL_382;
        }
        if (!*v17) {
          goto LABEL_382;
        }
        uint64_t v31 = 0;
        LODWORD(v32) = 0;
        unsigned int v33 = 0;
        int v34 = 0;
        while (1)
        {
          uint64_t v35 = *(void *)(v422 + 16);
          uint64_t v36 = *(void *)(v422 + 24);
          long long v37 = (_DWORD *)(v36 + v35 * v31);
          if (v31)
          {
            uint64_t v38 = v35 * (v31 - 1);
            unint64_t v39 = (_DWORD *)(v36 + v38);
            int v40 = *(_DWORD *)(v36 + v38);
            if (!v34) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v38 = 0;
            int v40 = 0;
            unint64_t v39 = v37 - 1;
            if (!v34)
            {
LABEL_29:
              char v41 = (void *)v27[2];
              if ((unint64_t)v41 > v27[3])
              {
                sub_2483EB0C0(v27);
              }
              else
              {
                unint64_t v42 = v27[1];
                unint64_t v43 = *v27 | (*v41 << v42);
                v27[2] = (unint64_t)v41 + ((63 - v42) >> 3);
                *uint64_t v27 = v43;
                v27[1] = v42 | 0x38;
              }
              unsigned int v44 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * v26), v27);
              unint64_t v45 = *(unsigned int *)(v13 + 84);
              BOOL v46 = v44 >= v45;
              unint64_t v47 = v44 - v45;
              if (v46)
              {
                unint64_t v95 = *(unsigned int *)(v13 + 92);
                BOOL v46 = v47 >= v95;
                unint64_t v96 = v47 - v95;
                if (v46)
                {
                  int v98 = v428[24];
                  int v97 = v428[25];
                  int v99 = v428[22] - (v98 + v97) + (v96 >> (v98 + v97));
                  int v100 = *v430 & ~(-1 << v99);
                  unint64_t v101 = v430[1] - (v99 & 0x1F);
                  *v430 >>= v99 & 0x1F;
                  v430[1] = v101;
                  LODWORD(v47) = v47 & ~(-1 << v97) | ((unint64_t)(v100 | (((v47 >> v97) & ((1 << v98) - 1) | (1 << v98)) << v99)) << v97);
                }
                uint64_t v13 = (uint64_t)v428;
                uint64_t v27 = v430;
                int v34 = v47 + v428[20] - 1;
              }
              else
              {
                unint64_t v48 = (int *)(*(void *)(v13 + 24) + 16 * v26);
                unint64_t v49 = v48[1];
                unint64_t v50 = v44 - v49;
                if (v44 >= v49)
                {
                  int v34 = 0;
                  int v51 = *v48;
                  uint64_t v54 = v48 + 2;
                  int v52 = v48[2];
                  int v53 = v54[1];
                  char v55 = v51 - (v52 + v53) + (v50 >> (v52 + v53));
                  int v56 = *v27 & ~(-1 << v55);
                  unint64_t v57 = v27[1] - (v55 & 0x1F);
                  *v27 >>= v55 & 0x1F;
                  v27[1] = v57;
                  unsigned int v33 = v44 & ~(-1 << v53) | ((v56 | ((((unint64_t)v44 >> v53) & ((1 << v52) - 1) | (1 << v52)) << v55)) << v53);
                }
                else
                {
                  int v34 = 0;
                  unsigned int v33 = v44;
                }
              }
              unint64_t v32 = -(uint64_t)(v33 & 1) ^ ((unint64_t)v33 >> 1);
              goto LABEL_36;
            }
          }
          --v34;
LABEL_36:
          int v58 = v40 + v32;
          *long long v37 = v40 + v32;
          unint64_t v59 = *v431;
          if ((unint64_t)*v431 >= 2)
          {
            uint64_t v60 = 0;
            uint64_t v61 = v36 + v38;
            uint64_t v62 = v37 + 1;
            unint64_t v63 = v39 + 1;
            do
            {
              int v64 = v63[v60];
              int v65 = *(_DWORD *)(v61 + 4 * v60);
              if (v58 >= v64) {
                int v66 = v63[v60];
              }
              else {
                int v66 = v58;
              }
              if (v64 <= v58) {
                int v67 = v58;
              }
              else {
                int v67 = v63[v60];
              }
              int v68 = v64 + v58 - v65;
              if (v66 > v65) {
                int v68 = v67;
              }
              if (v67 >= v65) {
                int v69 = v68;
              }
              else {
                int v69 = v66;
              }
              if (v34)
              {
                --v34;
              }
              else
              {
                uint64_t v70 = (void *)v27[2];
                if ((unint64_t)v70 > v27[3])
                {
                  sub_2483EB0C0(v27);
                }
                else
                {
                  unint64_t v71 = v27[1];
                  unint64_t v72 = *v27 | (*v70 << v71);
                  v27[2] = (unint64_t)v70 + ((63 - v71) >> 3);
                  *uint64_t v27 = v72;
                  v27[1] = v71 | 0x38;
                }
                unsigned int v73 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * v26), v27);
                unint64_t v74 = *(unsigned int *)(v13 + 84);
                BOOL v46 = v73 >= v74;
                unint64_t v75 = v73 - v74;
                if (v46)
                {
                  unint64_t v87 = *(unsigned int *)(v13 + 92);
                  BOOL v46 = v75 >= v87;
                  unint64_t v88 = v75 - v87;
                  if (v46)
                  {
                    int v90 = *(_DWORD *)(v13 + 96);
                    int v89 = *(_DWORD *)(v13 + 100);
                    int v91 = *(_DWORD *)(v13 + 88) - (v90 + v89) + (v88 >> (v90 + v89));
                    int v92 = *v27 & ~(-1 << v91);
                    unint64_t v93 = v27[1] - (v91 & 0x1F);
                    *v27 >>= v91 & 0x1F;
                    v27[1] = v93;
                    LODWORD(v75) = v75 & ~(-1 << v89) | ((unint64_t)(v92 | (((v75 >> v89) & ((1 << v90) - 1) | (1 << v90)) << v91)) << v89);
                  }
                  int v34 = v75 + *(_DWORD *)(v13 + 80) - 1;
                }
                else
                {
                  uint64_t v76 = (int *)(*(void *)(v13 + 24) + 16 * v26);
                  unint64_t v77 = v76[1];
                  unint64_t v78 = v73 - v77;
                  if (v73 >= v77)
                  {
                    int v34 = 0;
                    int v79 = *v76;
                    uint64_t v82 = v76 + 2;
                    int v80 = v76[2];
                    int v81 = v82[1];
                    char v83 = v79 - (v80 + v81) + (v78 >> (v80 + v81));
                    int v84 = *v27 & ~(-1 << v83);
                    unint64_t v85 = v27[1] - (v83 & 0x1F);
                    *v27 >>= v83 & 0x1F;
                    v27[1] = v85;
                    unsigned int v33 = v73 & ~(-1 << v81) | ((v84 | ((((unint64_t)v73 >> v81) & ((1 << v80) - 1) | (1 << v80)) << v83)) << v81);
                  }
                  else
                  {
                    int v34 = 0;
                    unsigned int v33 = v73;
                  }
                }
                unint64_t v32 = -(uint64_t)(v33 & 1) ^ ((unint64_t)v33 >> 1);
                unint64_t v59 = *v431;
              }
              int v58 = v69 + v32;
              v62[v60] = v69 + v32;
              unint64_t v86 = v60 + 2;
              ++v60;
            }
            while (v86 < v59);
          }
          uint64_t v94 = 0;
          if (++v31 >= *v421) {
            goto LABEL_383;
          }
        }
      }
      goto LABEL_76;
    }
    LODWORD(v439) = 0;
    if (sub_248427CF4(v13, v26, &v439, *v17 * *v16))
    {
      unint64_t v125 = *v17;
      if (*v17)
      {
        uint64_t v126 = 0;
        int v127 = v25 + (-(v439 & 1) ^ (v439 >> 1)) * v24;
        uint64_t v128 = *v431;
        uint64_t v129 = (*v431 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          if (v128 >= 1)
          {
            int v130 = (_DWORD *)(v15[3] + v15[2] * v126);
            unint64_t v131 = v129;
            do
            {
              *v130++ = v127;
              --v131;
            }
            while (v131 > 1);
          }
          ++v126;
        }
        while (v126 != v125);
      }
      goto LABEL_382;
    }
    unint64_t v176 = *v17;
    if (v24 != 1 || v25)
    {
      if (v176)
      {
        unint64_t v392 = 0;
        uint64_t v393 = *v431;
        do
        {
          if (v393)
          {
            unint64_t v394 = 0;
            uint64_t v395 = v13;
            uint64_t v396 = *(void *)(v422 + 24) + *(void *)(v422 + 16) * v392;
            do
            {
              unint64_t v397 = sub_2483EAC28(v395, v26, v430);
              *(_DWORD *)(v396 + 4 * v394++) = v25 + v24 * ((v397 >> 1) ^ -(v397 & 1));
              uint64_t v393 = *v431;
            }
            while (v394 < *v431);
            unint64_t v176 = *v421;
            uint64_t v13 = v395;
          }
          ++v392;
        }
        while (v392 < v176);
      }
      goto LABEL_382;
    }
    if (!v176) {
      goto LABEL_382;
    }
    uint64_t v177 = 0;
    uint64_t v178 = *v431;
    while (!v178)
    {
LABEL_237:
      if (++v177 >= v176) {
        goto LABEL_382;
      }
    }
    unint64_t v179 = 0;
    uint64_t v180 = v15[3] + v15[2] * v177;
    while (1)
    {
      unsigned int v181 = *(_DWORD *)(v13 + 68);
      if (!v181)
      {
        int v182 = (void *)v430[2];
        if ((unint64_t)v182 > v430[3])
        {
          sub_2483EB0C0(v430);
        }
        else
        {
          unint64_t v183 = v430[1];
          unint64_t v184 = *v430 | (*v182 << v183);
          v430[2] = (unint64_t)v182 + ((63 - v183) >> 3);
          unint64_t *v430 = v184;
          v430[1] = v183 | 0x38;
        }
        if (*(unsigned char *)(v13 + 16))
        {
          unint64_t v192 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * v26), v430);
        }
        else
        {
          int v185 = *(_DWORD *)(v13 + 20);
          unint64_t v186 = (unint64_t)(v185 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          unint64_t v187 = *(_DWORD *)(v13 + 40) & v185 & 0xFFFu;
          uint64_t v188 = *(void *)(*(void *)v13 + 8 * (v26 << *(_DWORD *)(v13 + 32)) + 8 * v186);
          if (v188 <= v187) {
            unint64_t v189 = *(void *)(*(void *)v13 + 8 * (v26 << *(_DWORD *)(v13 + 32)) + 8 * v186);
          }
          else {
            unint64_t v189 = 0;
          }
          unint64_t v190 = HIDWORD(v189);
          unint64_t v191 = HIWORD(v189);
          if (v188 <= v187) {
            unint64_t v192 = BYTE1(v188);
          }
          else {
            unint64_t v192 = (unint64_t)(v185 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          }
          unsigned int v193 = v187 + (unsigned __int16)v190 + (v191 ^ WORD1(v188)) * (*(_DWORD *)(v13 + 20) >> 12);
          BOOL v194 = v193 < 0x10000;
          unint64_t v195 = *v430 >> (16 * v194);
          if (v193 < 0x10000) {
            unsigned int v193 = (unsigned __int16)*v430 | ((unsigned __int16)v193 << 16);
          }
          *(_DWORD *)(v13 + 20) = v193;
          uint64_t v196 = v430[1] - 16 * v194;
          unint64_t *v430 = v195;
          v430[1] = v196;
        }
        unint64_t v197 = *(unsigned int *)(v13 + 84);
        BOOL v46 = v192 >= v197;
        unint64_t v198 = v192 - v197;
        if (!v46)
        {
          uint64_t v199 = (int *)(*(void *)(v13 + 24) + 16 * v26);
          unint64_t v200 = v199[1];
          BOOL v46 = v192 >= v200;
          unint64_t v201 = v192 - v200;
          if (v46)
          {
            int v202 = *v199;
            uint64_t v205 = v199 + 2;
            int v203 = v199[2];
            int v204 = v205[1];
            char v206 = v202 - (v203 + v204) + (v201 >> (v203 + v204));
            int v207 = *v430 & ~(-1 << v206);
            unint64_t v208 = v430[1] - (v206 & 0x1F);
            *v430 >>= v206 & 0x1F;
            v430[1] = v208;
            LODWORD(v192) = v192 & ~(-1 << v204) | ((unint64_t)(v207 | (((v192 >> v204) & ((1 << v203) - 1) | (1 << v203)) << v206)) << v204);
          }
          uint64_t v209 = *(void *)(v13 + 56);
          if (!v209) {
            goto LABEL_199;
          }
          goto LABEL_198;
        }
        unint64_t v211 = *(unsigned int *)(v13 + 92);
        BOOL v46 = v198 >= v211;
        unint64_t v212 = v198 - v211;
        if (v46)
        {
          int v214 = *(_DWORD *)(v13 + 96);
          int v213 = *(_DWORD *)(v13 + 100);
          char v215 = *(_DWORD *)(v13 + 88) - (v214 + v213) + (v212 >> (v214 + v213));
          int v216 = *v430 & ~(-1 << v215);
          unint64_t v217 = v430[1] - (v215 & 0x1F);
          *v430 >>= v215 & 0x1F;
          v430[1] = v217;
          LODWORD(v198) = v198 & ~(-1 << v213) | ((unint64_t)(v216 | (((v198 >> v213) & ((1 << v214) - 1) | (1 << v214)) << v215)) << v213);
        }
        *(_DWORD *)(v13 + 68) = *(_DWORD *)(v13 + 80) + v198;
        uint64_t v218 = (void *)v430[2];
        if ((unint64_t)v218 > v430[3])
        {
          sub_2483EB0C0(v430);
        }
        else
        {
          unint64_t v219 = v430[1];
          unint64_t v220 = *v430 | (*v218 << v219);
          v430[2] = (unint64_t)v218 + ((63 - v219) >> 3);
          unint64_t *v430 = v220;
          v430[1] = v219 | 0x38;
        }
        uint64_t v221 = *(unsigned int *)(v13 + 76);
        if (*(unsigned char *)(v13 + 16))
        {
          unint64_t v229 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * v221), v430);
          uint64_t v221 = *(unsigned int *)(v13 + 76);
        }
        else
        {
          int v222 = *(_DWORD *)(v13 + 20);
          unint64_t v223 = (unint64_t)(v222 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          unint64_t v224 = *(_DWORD *)(v13 + 40) & v222 & 0xFFFu;
          uint64_t v225 = *(void *)(*(void *)v13 + 8 * (v221 << *(_DWORD *)(v13 + 32)) + 8 * v223);
          if (v225 <= v224) {
            unint64_t v226 = *(void *)(*(void *)v13 + 8 * (v221 << *(_DWORD *)(v13 + 32)) + 8 * v223);
          }
          else {
            unint64_t v226 = 0;
          }
          unint64_t v227 = HIDWORD(v226);
          unint64_t v228 = HIWORD(v226);
          if (v225 <= v224) {
            unint64_t v229 = BYTE1(v225);
          }
          else {
            unint64_t v229 = (unint64_t)(v222 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          }
          unsigned int v230 = v224 + (unsigned __int16)v227 + (v228 ^ WORD1(v225)) * (*(_DWORD *)(v13 + 20) >> 12);
          BOOL v231 = v230 < 0x10000;
          unint64_t v232 = *v430 >> (16 * v231);
          if (v230 < 0x10000) {
            unsigned int v230 = (unsigned __int16)*v430 | ((unsigned __int16)v230 << 16);
          }
          *(_DWORD *)(v13 + 20) = v230;
          uint64_t v233 = v430[1] - 16 * v231;
          unint64_t *v430 = v232;
          v430[1] = v233;
        }
        int v234 = (int *)(*(void *)(v13 + 24) + 16 * v221);
        unint64_t v235 = v234[1];
        BOOL v46 = v229 >= v235;
        unint64_t v236 = v229 - v235;
        if (v46)
        {
          int v237 = *v234;
          unint64_t v240 = v234 + 2;
          int v238 = v234[2];
          int v239 = v240[1];
          char v241 = v237 - (v238 + v239) + (v236 >> (v238 + v239));
          int v242 = *v430 & ~(-1 << v241);
          unint64_t v243 = v430[1] - (v241 & 0x1F);
          *v430 >>= v241 & 0x1F;
          v430[1] = v243;
          LODWORD(v229) = v229 & ~(-1 << v239) | ((unint64_t)(v242 | (((v229 >> v239) & ((1 << v238) - 1) | (1 << v238)) << v241)) << v239);
        }
        uint64_t v244 = *(unsigned int *)(v13 + 584);
        if (v229 >= v244) {
          unint64_t v245 = v229 - v244 + 1;
        }
        else {
          unint64_t v245 = *(unsigned int *)(v13 + 4 * v229 + 104);
        }
        unint64_t v246 = *(unsigned int *)(v13 + 64);
        if (v245 > v246) {
          unint64_t v245 = *(unsigned int *)(v13 + 64);
        }
        if (v245 > 0x100000)
        {
          *(_DWORD *)(v13 + 72) = v246 - 0x100000;
        }
        else
        {
          *(_DWORD *)(v13 + 72) = v246 - v245;
          if (!v245)
          {
            unsigned int v248 = *(_DWORD *)(v13 + 68);
            if (v248 >= 0x100000) {
              unsigned int v248 = 0x100000;
            }
            bzero(*(void **)(v13 + 56), 4 * v248);
          }
        }
        unsigned int v181 = *(_DWORD *)(v13 + 68);
        if (v181 < *(_DWORD *)(v13 + 80))
        {
          LODWORD(v192) = 0;
          goto LABEL_199;
        }
      }
      uint64_t v209 = *(void *)(v13 + 56);
      int v247 = *(_DWORD *)(v13 + 72);
      *(_DWORD *)(v13 + 72) = v247 + 1;
      LODWORD(v192) = *(_DWORD *)(v209 + 4 * (*(void *)&v247 & 0xFFFFFLL));
      *(_DWORD *)(v13 + 68) = v181 - 1;
LABEL_198:
      int v210 = *(_DWORD *)(v13 + 64);
      *(_DWORD *)(v13 + 64) = v210 + 1;
      *(_DWORD *)(v209 + 4 * (*(void *)&v210 & 0xFFFFFLL)) = v192;
LABEL_199:
      *(_DWORD *)(v180 + 4 * v179++) = -(v192 & 1) ^ (v192 >> 1);
      uint64_t v178 = *v431;
      if (v179 >= *v431)
      {
        unint64_t v176 = *v421;
        goto LABEL_237;
      }
    }
  }
LABEL_76:
  if ((_BYTE)v459) {
    LOBYTE(v459) = sub_248427DB0((uint64_t *)&v455, a8);
  }
  if (v458)
  {
    int v103 = sub_248427DB0((uint64_t *)&v455, a8);
    BOOL v458 = v103;
    if (v103)
    {
      unint64_t v104 = *v17;
      if (*v17)
      {
        unint64_t v105 = 0;
        uint64_t v106 = v15[2] >> 2;
        uint64_t v423 = -v106;
        uint64_t v107 = *v431;
        uint64_t v427 = -1 * v106;
        do
        {
          if (v107)
          {
            unint64_t v108 = 0;
            unint64_t v109 = (_DWORD *)(*(void *)(v422 + 24) + *(void *)(v422 + 16) * v105);
            v425 = v109;
            do
            {
              if (v108)
              {
                int v110 = *(v109 - 1);
                uint64_t v111 = v110;
                if (v105)
                {
                  uint64_t v113 = (int)v109[v427 - 1];
                  uint64_t v112 = (int)v109[v427];
                }
                else
                {
                  uint64_t v112 = v110;
                  uint64_t v113 = v110;
                }
              }
              else if (v105)
              {
                int v110 = v425[v423];
                uint64_t v112 = v110;
                uint64_t v111 = v110;
                uint64_t v113 = v110;
              }
              else
              {
                uint64_t v112 = 0;
                int v110 = 0;
                uint64_t v111 = 0;
                uint64_t v113 = 0;
              }
              uint64_t v114 = v111 + v112 - v113;
              if (v114 <= -512) {
                uint64_t v114 = -512;
              }
              if (v114 >= 511) {
                uint64_t v114 = 511;
              }
              uint64_t v115 = v114 + 512;
              unint64_t v116 = sub_2483EAC28((uint64_t)v428, *(unsigned __int8 *)(a8 + v114 + 512), v430);
              if (v110 <= (int)v112) {
                int v117 = v112;
              }
              else {
                int v117 = v110;
              }
              if (v110 >= (int)v112) {
                int v118 = v112;
              }
              else {
                int v118 = v110;
              }
              int v119 = v110 + v112 - v113;
              if (v118 > (int)v113) {
                int v119 = v117;
              }
              if (v117 >= (int)v113) {
                int v118 = v119;
              }
              *v109++ = *(char *)(a8 + 1024 + v115) + v118 + ((v116 >> 1) ^ -(v116 & 1)) * *(char *)(a8 + 2048 + v115);
              ++v108;
              uint64_t v107 = *v431;
            }
            while (v108 < *v431);
            unint64_t v104 = *v421;
          }
          ++v105;
        }
        while (v105 < v104);
      }
      goto LABEL_382;
    }
  }
  if (HIBYTE(v459))
  {
    sub_2483F23D8(&v453, v457);
    unint64_t v120 = v15[2];
    uint64_t v121 = v454 - v453;
    uint64_t v122 = v121 - 16;
    uint64_t v123 = *v16;
    sub_2484017B8((uint64_t)&v439, v121 - 16, *v16);
    int v124 = v443[0];
    if (LODWORD(v443[0]))
    {
      uint64_t v94 = LODWORD(v443[0]);
    }
    else
    {
      long long v446 = v439;
      uint64_t v447 = v440;
      uint64_t v448 = v441;
      uint64_t v420 = v441;
      uint64_t v449 = v442;
      uint64_t v450 = v122;
      uint64_t v451 = v123;
      uint64_t v452 = 0;
      v435 = &unk_26FC66948;
      long long v153 = *(_OWORD *)(a5 + 8);
      long long v154 = *(_OWORD *)(a5 + 40);
      long long v437 = *(_OWORD *)(a5 + 24);
      long long v438 = v154;
      long long v436 = v153;
      sub_248428438((uint64_t)&v439, (uint64_t)&v435, *v16);
      if (*v17)
      {
        unint64_t v155 = 0;
        do
        {
          uint64_t v157 = *(void *)(v422 + 16);
          uint64_t v156 = *(void *)(v422 + 24);
          unint64_t v158 = v453;
          int *v453 = a6;
          v158[1] = v426;
          v158[2] = v155;
          v158[9] = 0;
          sub_2484285D8(v422, v155, a9, a6, (unsigned int *)&v446);
          unint64_t v159 = *v431;
          if (*v431)
          {
            unint64_t v160 = 0;
            uint64_t v161 = v156 + v157 * v155;
            do
            {
              sub_248428B48((uint64_t)&v432, v453, v159, v161 + 4 * v160, v120 >> 2, v160, v155, &v455, &v446, (uint64_t)&v439);
              unint64_t v162 = sub_2483EAC28((uint64_t)v428, v432, v430);
              uint64_t v163 = 0;
              uint64_t v164 = v433 + (-(uint64_t)(v162 & 1) ^ (v162 >> 1)) * v434;
              *(_DWORD *)(v161 + 4 * v160) = v164;
              unint64_t v159 = *v431;
              uint64_t v165 = *v431 + 2;
              if (v155) {
                uint64_t v166 = 0;
              }
              else {
                uint64_t v166 = *v431 + 2;
              }
              uint64_t v167 = 8 * (int)v164;
              unint64_t v168 = v166 + v160;
              *((_DWORD *)__p + v168) = v442 - v167;
              uint64_t v169 = ++v160 + (((uint64_t)(v155 << 63) >> 63) & v165);
              unint64_t v170 = v443;
              do
              {
                uint64_t v171 = *(void *)((char *)&v439 + v163) - v167;
                if (v171 < 0) {
                  uint64_t v171 = v167 - *(void *)((char *)&v439 + v163);
                }
                unint64_t v172 = (unint64_t)(v171 + 3) >> 3;
                uint64_t v173 = *v170;
                v170 += 3;
                *(_DWORD *)(v173 + 4 * v168) = v172;
                *(_DWORD *)(v173 + 4 * v169) += v172;
                v163 += 8;
              }
              while (v163 != 32);
            }
            while (v160 < v159);
          }
          ++v155;
        }
        while (v155 < *v421);
      }
      if (__p)
      {
        v445 = __p;
        operator delete(__p);
      }
      for (uint64_t i = 0; i != -12; i -= 3)
      {
        unint64_t v175 = (void *)v443[i + 9];
        if (v175)
        {
          v443[i + 10] = v175;
          operator delete(v175);
        }
      }
      uint64_t v448 = 0;
      if (v420)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v420 - 24));
        free(*(void **)(v420 - 32));
      }
      uint64_t v94 = 0;
      int v124 = 0;
    }
    if (v453)
    {
      v454 = v453;
      operator delete(v453);
    }
    if (!v124) {
      goto LABEL_382;
    }
    goto LABEL_383;
  }
  sub_2483F23D8(&v435, v457);
  unint64_t v132 = v15[2];
  uint64_t v133 = (uint64_t)(v436 - (void)v435) >> 2;
  uint64_t v134 = *v16;
  uint64_t v419 = v133 - 16;
  sub_2484017B8((uint64_t)&v446, v133 - 16, *v16);
  int v135 = v450;
  if (v450)
  {
    uint64_t v94 = v450;
    goto LABEL_371;
  }
  long long v439 = v446;
  uint64_t v440 = v447;
  uint64_t v441 = v448;
  uint64_t v413 = v448;
  uint64_t v442 = v449;
  v443[0] = v419;
  v443[1] = v134;
  v443[2] = 0;
  if (!*v17) {
    goto LABEL_368;
  }
  unint64_t v249 = 0;
  uint64_t v250 = v132 >> 2;
  unint64_t v417 = ~(v132 >> 2);
  unint64_t v416 = -(uint64_t)(v132 >> 2) - (v132 >> 2);
  uint64_t v414 = -4 * (v132 >> 2);
  uint64_t v415 = 2 - (v132 >> 2);
  do
  {
    uint64_t v251 = *(void *)(v422 + 24);
    uint64_t v429 = *(void *)(v422 + 16);
    unint64_t v252 = (_DWORD *)(v251 + v429 * v249);
    sub_2484285D8(v422, v249, a9, a6, (unsigned int *)&v439);
    uint64_t v253 = v435;
    *(_DWORD *)v435 = a6;
    v253[1] = v426;
    v253[2] = v249;
    v253[9] = 0;
    unint64_t v254 = *v16;
    if (v249 < 2 || (v254 >= 9 ? (BOOL v255 = v419 == 0) : (BOOL v255 = 0), !v255))
    {
      if (v254)
      {
        unint64_t v388 = 0;
        do
        {
          sub_2484287D0((uint64_t)&v446, v435, v254, (uint64_t)v252, v250, v388, v249, &v455, &v439);
          unint64_t v389 = sub_2483EAC28(v13, (int)v446, v430);
          *v252++ = DWORD2(v446) + ((v389 >> 1) ^ -(v389 & 1)) * HIDWORD(v447);
          ++v388;
          unint64_t v254 = *v16;
        }
        while (v388 < *v16);
      }
      goto LABEL_367;
    }
    uint64_t v418 = v251;
    uint64_t v256 = 0;
    char v257 = 1;
    do
    {
      char v258 = v257;
      uint64_t v259 = &v252[v256];
      sub_2484287D0((uint64_t)&v446, v435, *v16, (uint64_t)v259, v250, v256, v249, &v455, &v439);
      unint64_t v260 = sub_2483EAC28(v13, (int)v446, v430);
      char v257 = 0;
      *uint64_t v259 = DWORD2(v446) + ((v260 >> 1) ^ -(v260 & 1)) * HIDWORD(v447);
      uint64_t v256 = 1;
    }
    while ((v258 & 1) != 0);
    uint64_t v263 = v250;
    unint64_t v264 = *v16;
    unint64_t v265 = *v16 - 2;
    if (v265 < 3)
    {
      long long v267 = v430;
      goto LABEL_364;
    }
    unint64_t v266 = 2;
    long long v267 = v430;
    unint64_t v269 = v416;
    unint64_t v268 = v417;
    uint64_t v271 = v414;
    uint64_t v270 = v415;
    do
    {
      uint64_t v272 = &v252[v266];
      uint64_t v273 = (int)v272[v268];
      v261.i64[0] = *(void *)((char *)v272 + v271);
      uint64_t v275 = (int)*(v272 - 2);
      uint64_t v274 = (int)*(v272 - 1);
      uint64_t v276 = (int)v272[v269];
      uint64_t v277 = (int)v272[v270];
      BOOL v278 = (char *)v435;
      if (v261.i32[0] >= 0) {
        LODWORD(v279) = v261.i32[0];
      }
      else {
        uint64_t v279 = -(uint64_t)v261.i32[0];
      }
      *((_DWORD *)v435 + 3) = v266;
      *((_DWORD *)v278 + 4) = v279;
      if (v274 >= 0) {
        LODWORD(v280) = v274;
      }
      else {
        uint64_t v280 = -v274;
      }
      *((_DWORD *)v278 + 5) = v280;
      *((_DWORD *)v278 + 6) = v261.i32[0];
      int v281 = v274 - *((_DWORD *)v278 + 9);
      *((_DWORD *)v278 + 7) = v274;
      *((_DWORD *)v278 + 8) = v281;
      int v282 = v261.i32[0] + v274 - v273;
      v262.i32[0] = v273;
      v283.i64[0] = vzip1q_s32(v262, v261).u64[0];
      v283.i64[1] = __PAIR64__(v274, v283.u32[1]);
      v284.i64[0] = v261.i64[0];
      v284.i64[1] = __PAIR64__(v275, v276);
      *((_DWORD *)v278 + 9) = v282;
      *((_DWORD *)v278 + 10) = v274 - v273;
      int32x4_t v262 = vsubq_s32(v283, v284);
      *(int32x4_t *)(v278 + 44) = v262;
      uint64_t v285 = *v18;
      if ((v285 & 0x80000000) != 0)
      {
        LODWORD(v286) = 0;
      }
      else
      {
        uint64_t v286 = 0;
        long long v287 = v18;
        do
        {
          uint64_t v288 = &v18[6 * v286];
          signed int v289 = v288[1];
          BOOL v290 = *(_DWORD *)&v278[4 * *((__int16 *)v288 + 10)] <= (int)v288[2];
          signed int v291 = v288[3];
          unsigned int v292 = v288[4];
          int v293 = (*(_DWORD *)&v278[4 * *((__int16 *)v287 + 11)] <= v291) | 2;
          if (*(_DWORD *)&v278[4 * v285] > v289) {
            int v293 = v290;
          }
          LODWORD(v286) = v293 + v292;
          uint64_t v294 = &v18[6 * v286];
          uint64_t v295 = *v294;
          if ((v295 & 0x80000000) != 0) {
            break;
          }
          BOOL v296 = &v18[6 * v286];
          signed int v297 = v296[1];
          BOOL v298 = *(_DWORD *)&v278[4 * *((__int16 *)v296 + 10)] <= (int)v296[2];
          signed int v299 = v296[3];
          unsigned int v300 = v296[4];
          int v301 = (*(_DWORD *)&v278[4 * *((__int16 *)v294 + 11)] <= v299) | 2;
          if (*(_DWORD *)&v278[4 * v295] > v297) {
            int v301 = v298;
          }
          uint64_t v286 = v301 + v300;
          long long v287 = &v18[6 * v286];
          uint64_t v285 = *v287;
        }
        while ((v285 & 0x80000000) == 0);
      }
      LODWORD(v302) = 0;
      unsigned int v303 = &v18[6 * v286];
      unsigned int v304 = v303[2];
      unsigned int v305 = v303[5];
      uint64_t v306 = (int)v303[4];
      switch(v303[1])
      {
        case 1u:
          LODWORD(v302) = v274;
          break;
        case 2u:
          LODWORD(v302) = v261.i32[0];
          break;
        case 3u:
          BOOL v307 = __OFADD__(v261.i32[0], v274);
          uint64_t v309 = v261.i32[0] + v274;
          char v308 = (v309 < 0) ^ v307;
          goto LABEL_295;
        case 4u:
          uint64_t v310 = v261.i32[0] + v274 - v273;
          unint64_t v311 = v310 - v274;
          if (v310 - v274 < 0) {
            unint64_t v311 = v274 - v310;
          }
          uint64_t v312 = v310 - v261.i32[0];
          if (v312 < 0) {
            uint64_t v312 = -v312;
          }
          if (v311 >= v312) {
            LODWORD(v302) = v261.i32[0];
          }
          else {
            LODWORD(v302) = v274;
          }
          break;
        case 5u:
          if (v261.i32[0] >= (int)v274) {
            int v313 = v274;
          }
          else {
            int v313 = v261.i32[0];
          }
          if ((int)v274 <= v261.i32[0]) {
            LODWORD(v274) = v261.i32[0];
          }
          if (v313 <= (int)v273) {
            int v314 = v282;
          }
          else {
            int v314 = v274;
          }
          if ((int)v274 >= (int)v273) {
            LODWORD(v302) = v314;
          }
          else {
            LODWORD(v302) = v313;
          }
          break;
        case 7u:
          LODWORD(v302) = v261.i32[1];
          break;
        case 8u:
          LODWORD(v302) = v273;
          break;
        case 9u:
          LODWORD(v302) = v275;
          break;
        case 0xAu:
          BOOL v307 = __OFADD__(v273, v274);
          uint64_t v309 = v273 + v274;
          char v308 = (v309 < 0) ^ v307;
          goto LABEL_295;
        case 0xBu:
          uint64_t v309 = v273 + v261.i32[0];
          char v308 = (v309 < 0) ^ __OFADD__(v273, v261.i32[0]);
          goto LABEL_295;
        case 0xCu:
          uint64_t v309 = v261.i32[1] + (uint64_t)v261.i32[0];
          char v308 = (v309 < 0) ^ __OFADD__(v261.i32[1], v261.i32[0]);
LABEL_295:
          if (v308) {
            ++v309;
          }
          uint64_t v302 = v309 >> 1;
          break;
        case 0xDu:
          uint64_t v345 = 6 * v261.i32[0] - v274 + 8 * v274 + v275 + 3 * v261.i32[1] - 2 * v276 + v277;
          uint64_t v346 = v345 + 8;
          uint64_t v347 = v345 + 23;
          if (v346 >= 0) {
            uint64_t v347 = v346;
          }
          uint64_t v302 = v347 >> 4;
          break;
        default:
          break;
      }
      unsigned int v315 = *(_DWORD *)(v13 + 68);
      if (v315)
      {
        uint64_t v250 = v263;
LABEL_351:
        uint64_t v343 = *(void *)(v13 + 56);
        int v385 = *(_DWORD *)(v13 + 72);
        *(_DWORD *)(v13 + 72) = v385 + 1;
        LODWORD(v326) = *(_DWORD *)(v343 + 4 * (*(void *)&v385 & 0xFFFFFLL));
        *(_DWORD *)(v13 + 68) = v315 - 1;
LABEL_316:
        int v344 = *(_DWORD *)(v13 + 64);
        *(_DWORD *)(v13 + 64) = v344 + 1;
        *(_DWORD *)(v343 + 4 * (*(void *)&v344 & 0xFFFFFLL)) = v326;
        goto LABEL_317;
      }
      uint64_t v316 = (void *)v430[2];
      if ((unint64_t)v316 > v430[3])
      {
        unsigned int v403 = v303[5];
        unsigned int v408 = v303[2];
        int v398 = v302;
        sub_2483EB0C0(v430);
        LODWORD(v302) = v398;
        unsigned int v305 = v403;
        unsigned int v304 = v408;
        uint64_t v271 = v414;
        uint64_t v270 = v415;
        unint64_t v269 = v416;
        unint64_t v268 = v417;
      }
      else
      {
        unint64_t v317 = v430[1];
        unint64_t v318 = *v430 | (*v316 << v317);
        v430[2] = (unint64_t)v316 + ((63 - v317) >> 3);
        unint64_t *v430 = v318;
        v430[1] = v317 | 0x38;
      }
      if (*(unsigned char *)(v13 + 16))
      {
        unsigned int v404 = v305;
        unsigned int v409 = v304;
        int v399 = v302;
        unsigned int v348 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * (int)v306), v430);
        LODWORD(v302) = v399;
        unsigned int v305 = v404;
        uint64_t v271 = v414;
        uint64_t v270 = v415;
        unint64_t v269 = v416;
        unint64_t v268 = v417;
        unint64_t v326 = v348;
        unsigned int v304 = v409;
      }
      else
      {
        int v319 = *(_DWORD *)(v13 + 20);
        unint64_t v320 = (unint64_t)(v319 & 0xFFF) >> *(_DWORD *)(v13 + 36);
        unint64_t v321 = *(_DWORD *)(v13 + 40) & v319 & 0xFFFu;
        uint64_t v322 = *(void *)(*(void *)v13 + 8 * (v306 << *(_DWORD *)(v13 + 32)) + 8 * v320);
        if (v322 <= v321) {
          unint64_t v323 = *(void *)(*(void *)v13 + 8 * (v306 << *(_DWORD *)(v13 + 32)) + 8 * v320);
        }
        else {
          unint64_t v323 = 0;
        }
        unint64_t v324 = HIDWORD(v323);
        unint64_t v325 = HIWORD(v323);
        if (v322 <= v321) {
          unint64_t v326 = BYTE1(v322);
        }
        else {
          unint64_t v326 = (unint64_t)(v319 & 0xFFF) >> *(_DWORD *)(v13 + 36);
        }
        unsigned int v327 = v321 + (unsigned __int16)v324 + (v325 ^ WORD1(v322)) * (*(_DWORD *)(v13 + 20) >> 12);
        BOOL v328 = v327 < 0x10000;
        unint64_t v329 = *v430 >> (16 * v328);
        if (v327 < 0x10000) {
          unsigned int v327 = (unsigned __int16)*v430 | ((unsigned __int16)v327 << 16);
        }
        *(_DWORD *)(v13 + 20) = v327;
        uint64_t v330 = v430[1] - 16 * v328;
        unint64_t *v430 = v329;
        v430[1] = v330;
      }
      unint64_t v331 = *(unsigned int *)(v13 + 84);
      BOOL v46 = v326 >= v331;
      unint64_t v332 = v326 - v331;
      if (v46)
      {
        unint64_t v349 = *(unsigned int *)(v13 + 92);
        BOOL v46 = v332 >= v349;
        unint64_t v350 = v332 - v349;
        if (v46)
        {
          int v352 = *(_DWORD *)(v13 + 96);
          int v351 = *(_DWORD *)(v13 + 100);
          char v353 = *(_DWORD *)(v13 + 88) - (v352 + v351) + (v350 >> (v352 + v351));
          int v354 = *v430 & ~(-1 << v353);
          unint64_t v355 = v430[1] - (v353 & 0x1F);
          *v430 >>= v353 & 0x1F;
          v430[1] = v355;
          LODWORD(v332) = v332 & ~(-1 << v351) | ((unint64_t)(v354 | (((v332 >> v351) & ((1 << v352) - 1) | (1 << v352)) << v353)) << v351);
        }
        uint64_t v250 = v263;
        *(_DWORD *)(v13 + 68) = *(_DWORD *)(v13 + 80) + v332;
        int v356 = (void *)v430[2];
        if ((unint64_t)v356 > v430[3])
        {
          unsigned int v405 = v305;
          unsigned int v410 = v304;
          int v400 = v302;
          sub_2483EB0C0(v430);
          LODWORD(v302) = v400;
          unsigned int v305 = v405;
          unsigned int v304 = v410;
          uint64_t v271 = v414;
          uint64_t v270 = v415;
          unint64_t v269 = v416;
          unint64_t v268 = v417;
        }
        else
        {
          unint64_t v357 = v430[1];
          unint64_t v358 = *v430 | (*v356 << v357);
          v430[2] = (unint64_t)v356 + ((63 - v357) >> 3);
          unint64_t *v430 = v358;
          v430[1] = v357 | 0x38;
        }
        uint64_t v359 = *(unsigned int *)(v13 + 76);
        if (*(unsigned char *)(v13 + 16))
        {
          unsigned int v406 = v305;
          unsigned int v411 = v304;
          int v401 = v302;
          unsigned int v386 = sub_248409FB4(*(void *)(*(void *)(v13 + 8) + 24 * v359), v430);
          LODWORD(v302) = v401;
          unsigned int v305 = v406;
          uint64_t v271 = v414;
          uint64_t v270 = v415;
          unint64_t v269 = v416;
          unint64_t v268 = v417;
          unint64_t v367 = v386;
          unsigned int v304 = v411;
          uint64_t v359 = *(unsigned int *)(v13 + 76);
        }
        else
        {
          int v360 = *(_DWORD *)(v13 + 20);
          unint64_t v361 = (unint64_t)(v360 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          unint64_t v362 = *(_DWORD *)(v13 + 40) & v360 & 0xFFFu;
          uint64_t v363 = *(void *)(*(void *)v13 + 8 * (v359 << *(_DWORD *)(v13 + 32)) + 8 * v361);
          if (v363 <= v362) {
            unint64_t v364 = *(void *)(*(void *)v13 + 8 * (v359 << *(_DWORD *)(v13 + 32)) + 8 * v361);
          }
          else {
            unint64_t v364 = 0;
          }
          unint64_t v365 = HIDWORD(v364);
          unint64_t v366 = HIWORD(v364);
          if (v363 <= v362) {
            unint64_t v367 = BYTE1(v363);
          }
          else {
            unint64_t v367 = (unint64_t)(v360 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          }
          unsigned int v368 = v362 + (unsigned __int16)v365 + (v366 ^ WORD1(v363)) * (*(_DWORD *)(v13 + 20) >> 12);
          BOOL v369 = v368 < 0x10000;
          unint64_t v370 = *v430 >> (16 * v369);
          if (v368 < 0x10000) {
            unsigned int v368 = (unsigned __int16)*v430 | ((unsigned __int16)v368 << 16);
          }
          *(_DWORD *)(v13 + 20) = v368;
          uint64_t v371 = v430[1] - 16 * v369;
          unint64_t *v430 = v370;
          v430[1] = v371;
        }
        uint64_t v372 = (int *)(*(void *)(v13 + 24) + 16 * v359);
        unint64_t v373 = v372[1];
        BOOL v46 = v367 >= v373;
        unint64_t v374 = v367 - v373;
        if (v46)
        {
          int v375 = *v372;
          float32x4_t v378 = v372 + 2;
          int v376 = v372[2];
          int v377 = v378[1];
          char v379 = v375 - (v376 + v377) + (v374 >> (v376 + v377));
          int v380 = *v430 & ~(-1 << v379);
          unint64_t v381 = v430[1] - (v379 & 0x1F);
          *v430 >>= v379 & 0x1F;
          v430[1] = v381;
          LODWORD(v367) = v367 & ~(-1 << v377) | ((unint64_t)(v380 | (((v367 >> v377) & ((1 << v376) - 1) | (1 << v376)) << v379)) << v377);
        }
        uint64_t v382 = *(unsigned int *)(v13 + 584);
        if (v367 >= v382) {
          unint64_t v383 = v367 - v382 + 1;
        }
        else {
          unint64_t v383 = *(unsigned int *)(v13 + 4 * v367 + 104);
        }
        unint64_t v384 = *(unsigned int *)(v13 + 64);
        if (v383 > v384) {
          unint64_t v383 = *(unsigned int *)(v13 + 64);
        }
        if (v383 > 0x100000)
        {
          *(_DWORD *)(v13 + 72) = v384 - 0x100000;
        }
        else
        {
          *(_DWORD *)(v13 + 72) = v384 - v383;
          if (!v383)
          {
            unsigned int v387 = *(_DWORD *)(v13 + 68);
            if (v387 >= 0x100000) {
              unsigned int v387 = 0x100000;
            }
            unsigned int v407 = v305;
            unsigned int v412 = v304;
            int v402 = v302;
            bzero(*(void **)(v13 + 56), 4 * v387);
            LODWORD(v302) = v402;
            unsigned int v305 = v407;
            unsigned int v304 = v412;
            uint64_t v271 = v414;
            uint64_t v270 = v415;
            unint64_t v269 = v416;
            unint64_t v268 = v417;
          }
        }
        unsigned int v315 = *(_DWORD *)(v13 + 68);
        if (v315 >= *(_DWORD *)(v13 + 80)) {
          goto LABEL_351;
        }
        LODWORD(v326) = 0;
      }
      else
      {
        float v333 = (int *)(*(void *)(v13 + 24) + 16 * v306);
        unint64_t v334 = v333[1];
        BOOL v46 = v326 >= v334;
        unint64_t v335 = v326 - v334;
        if (v46)
        {
          int v336 = *v333;
          unsigned __int8 v339 = v333 + 2;
          int v337 = v333[2];
          int v338 = v339[1];
          char v340 = v336 - (v337 + v338) + (v335 >> (v337 + v338));
          int v341 = *v430 & ~(-1 << v340);
          unint64_t v342 = v430[1] - (v340 & 0x1F);
          *v430 >>= v340 & 0x1F;
          v430[1] = v342;
          LODWORD(v326) = v326 & ~(-1 << v338) | ((unint64_t)(v341 | (((v326 >> v338) & ((1 << v337) - 1) | (1 << v337)) << v340)) << v338);
        }
        uint64_t v250 = v263;
        uint64_t v343 = *(void *)(v13 + 56);
        if (v343) {
          goto LABEL_316;
        }
      }
LABEL_317:
      _DWORD *v272 = v302 + v305 + ((v326 >> 1) ^ -(v326 & 1)) * v304;
      ++v266;
      unint64_t v264 = *v431;
      unint64_t v265 = *v431 - 2;
    }
    while (v266 < v265);
    uint64_t v16 = v431;
LABEL_364:
    if (v265 < v264)
    {
      uint64_t v390 = (_DWORD *)(v418 + v429 * v249 + 4 * v265);
      do
      {
        sub_2484287D0((uint64_t)&v446, v435, v264, (uint64_t)v390, v250, v265, v249, &v455, &v439);
        unint64_t v391 = sub_2483EAC28(v13, (int)v446, v267);
        *v390++ = DWORD2(v446) + ((v391 >> 1) ^ -(v391 & 1)) * HIDWORD(v447);
        ++v265;
        unint64_t v264 = *v16;
      }
      while (v265 < *v16);
    }
LABEL_367:
    ++v249;
  }
  while (v249 < *v421);
LABEL_368:
  uint64_t v441 = 0;
  if (v413)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v413 - 24));
    free(*(void **)(v413 - 32));
  }
  uint64_t v94 = 0;
  int v135 = 0;
LABEL_371:
  if (v435)
  {
    *(void *)&long long v436 = v435;
    operator delete(v435);
  }
  if (!v135) {
LABEL_382:
  }
    uint64_t v94 = 0;
LABEL_383:
  if (v455) {
    operator delete(v455);
  }
  return v94;
}

void sub_248424CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  *(void *)(v35 - 200) = 0;
  if (a22)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a22 - 24));
    free(*(void **)(a22 - 32));
  }
  long long v37 = *(void **)(v35 - 160);
  if (v37)
  {
    *(void *)(v35 - 152) = v37;
    operator delete(v37);
  }
  if (*(void *)(v35 - 136)) {
    operator delete(*(void **)(v35 - 136));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248424D6C(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t *a9)
{
  int v9 = a7;
  uint64_t v10 = (void *)(*a9 + ((uint64_t)a6 << 6));
  v833[0] = a6;
  v833[1] = a7;
  if (!v10[5]) {
    return 0;
  }
  uint64_t v11 = v10 + 6;
  if (!v10[6]) {
    return 0;
  }
  __int16 v832 = 0;
  BOOL v831 = 0;
  unint64_t v830 = 0;
  sub_24842253C((unint64_t *)&v828, a4, (uint64_t)v833, (uint64_t *)&v830, (unsigned char *)&v832 + 1, (BOOL *)&v832, &v831);
  uint64_t v16 = v828;
  int64_t v17 = (char *)v829 - (char *)v828;
  if (v829 != v828)
  {
    uint64_t v18 = v17 / 24;
    uint64_t v19 = *a3;
    if ((unint64_t)(v17 / 24) <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v20 = v828 + 4;
    do
    {
      if (*(v20 - 4) == -1) {
        *uint64_t v20 = *(unsigned __int8 *)(v19 + *v20);
      }
      v20 += 6;
      --v18;
    }
    while (v18);
  }
  v794 = v10 + 5;
  v739 = v10 + 6;
  uint64_t v740 = (uint64_t)v10;
  if (v17 != 24) {
    goto LABEL_59;
  }
  unsigned int v21 = v16[1];
  unsigned int v22 = v16[2];
  uint64_t v24 = v16[4];
  unsigned int v23 = v16[5];
  if (!v21)
  {
    LODWORD(v813) = 0;
    if (sub_248427CF4(a2, v24, &v813, *v11 * *v794))
    {
      unint64_t v354 = *v11;
      if (*v11)
      {
        uint64_t v355 = 0;
        int v356 = v23 + (-(v813 & 1) ^ (v813 >> 1)) * v22;
        uint64_t v357 = *v794;
        uint64_t v358 = (*v794 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          if (v357 >= 1)
          {
            uint64_t v359 = (_DWORD *)(v10[3] + v10[2] * v355);
            unint64_t v360 = v358;
            do
            {
              *v359++ = v356;
              --v360;
            }
            while (v360 > 1);
          }
          ++v355;
        }
        while (v355 != v354);
      }
    }
    else
    {
      unint64_t v361 = *v11;
      if (v22 != 1 || v23)
      {
        if (v361)
        {
          unint64_t v572 = 0;
          uint64_t v573 = *v794;
          do
          {
            if (v573)
            {
              unint64_t v574 = 0;
              uint64_t v575 = v10[3] + v10[2] * v572;
              do
              {
                v576 = (void *)a1[2];
                if ((unint64_t)v576 > a1[3])
                {
                  sub_2483EB0C0(a1);
                }
                else
                {
                  unint64_t v577 = a1[1];
                  unint64_t v578 = *a1 | (*v576 << v577);
                  a1[2] = (unint64_t)v576 + ((63 - v577) >> 3);
                  *a1 = v578;
                  a1[1] = v577 | 0x38;
                }
                if (*(unsigned char *)(a2 + 16))
                {
                  unint64_t v586 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * v24), a1);
                }
                else
                {
                  int v579 = *(_DWORD *)(a2 + 20);
                  unint64_t v580 = (unint64_t)(v579 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  unint64_t v581 = *(_DWORD *)(a2 + 40) & v579 & 0xFFFu;
                  uint64_t v582 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v580);
                  if (v582 <= v581) {
                    unint64_t v583 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v580);
                  }
                  else {
                    unint64_t v583 = 0;
                  }
                  unint64_t v584 = HIDWORD(v583);
                  unint64_t v585 = HIWORD(v583);
                  if (v582 <= v581) {
                    unint64_t v586 = BYTE1(v582);
                  }
                  else {
                    unint64_t v586 = (unint64_t)(v579 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  }
                  unsigned int v587 = v581 + (unsigned __int16)v584 + (v585 ^ WORD1(v582)) * (*(_DWORD *)(a2 + 20) >> 12);
                  BOOL v588 = v587 < 0x10000;
                  unint64_t v589 = *a1 >> (16 * v588);
                  if (v587 < 0x10000) {
                    unsigned int v587 = (unsigned __int16)*a1 | ((unsigned __int16)v587 << 16);
                  }
                  *(_DWORD *)(a2 + 20) = v587;
                  uint64_t v590 = a1[1] - 16 * v588;
                  *a1 = v589;
                  a1[1] = v590;
                }
                v591 = (int *)(*(void *)(a2 + 24) + 16 * v24);
                unint64_t v592 = v591[1];
                BOOL v58 = v586 >= v592;
                unint64_t v593 = v586 - v592;
                if (v58)
                {
                  int v594 = *v591;
                  v597 = v591 + 2;
                  int v595 = v591[2];
                  int v596 = v597[1];
                  char v598 = v594 - (v595 + v596) + (v593 >> (v595 + v596));
                  int v599 = *a1 & ~(-1 << v598);
                  unint64_t v600 = a1[1] - (v598 & 0x1F);
                  *a1 >>= v598 & 0x1F;
                  a1[1] = v600;
                  LODWORD(v586) = v586 & ~(-1 << v596) | ((unint64_t)(v599 | (((v586 >> v596) & ((1 << v595) - 1) | (1 << v595)) << v598)) << v596);
                }
                *(_DWORD *)(v575 + 4 * v574++) = v23 + (-(v586 & 1) ^ (v586 >> 1)) * v22;
                uint64_t v573 = *v794;
              }
              while (v574 < *v794);
              unint64_t v361 = *v739;
            }
            ++v572;
          }
          while (v572 < v361);
        }
      }
      else if (v361)
      {
        unint64_t v362 = 0;
        uint64_t v363 = *v794;
        do
        {
          if (v363)
          {
            unint64_t v364 = 0;
            uint64_t v365 = v10[3] + v10[2] * v362;
            do
            {
              unint64_t v366 = (void *)a1[2];
              if ((unint64_t)v366 > a1[3])
              {
                sub_2483EB0C0(a1);
              }
              else
              {
                unint64_t v367 = a1[1];
                unint64_t v368 = *a1 | (*v366 << v367);
                a1[2] = (unint64_t)v366 + ((63 - v367) >> 3);
                *a1 = v368;
                a1[1] = v367 | 0x38;
              }
              if (*(unsigned char *)(a2 + 16))
              {
                unint64_t v376 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * v24), a1);
              }
              else
              {
                int v369 = *(_DWORD *)(a2 + 20);
                unint64_t v370 = (unint64_t)(v369 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                unint64_t v371 = *(_DWORD *)(a2 + 40) & v369 & 0xFFFu;
                uint64_t v372 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v370);
                if (v372 <= v371) {
                  unint64_t v373 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v370);
                }
                else {
                  unint64_t v373 = 0;
                }
                unint64_t v374 = HIDWORD(v373);
                unint64_t v375 = HIWORD(v373);
                if (v372 <= v371) {
                  unint64_t v376 = BYTE1(v372);
                }
                else {
                  unint64_t v376 = (unint64_t)(v369 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                }
                unsigned int v377 = v371 + (unsigned __int16)v374 + (v375 ^ WORD1(v372)) * (*(_DWORD *)(a2 + 20) >> 12);
                BOOL v378 = v377 < 0x10000;
                unint64_t v379 = *a1 >> (16 * v378);
                if (v377 < 0x10000) {
                  unsigned int v377 = (unsigned __int16)*a1 | ((unsigned __int16)v377 << 16);
                }
                *(_DWORD *)(a2 + 20) = v377;
                uint64_t v380 = a1[1] - 16 * v378;
                *a1 = v379;
                a1[1] = v380;
              }
              unint64_t v381 = (int *)(*(void *)(a2 + 24) + 16 * v24);
              unint64_t v382 = v381[1];
              BOOL v58 = v376 >= v382;
              unint64_t v383 = v376 - v382;
              if (v58)
              {
                int v384 = *v381;
                unsigned int v387 = v381 + 2;
                int v385 = v381[2];
                int v386 = v387[1];
                char v388 = v384 - (v385 + v386) + (v383 >> (v385 + v386));
                int v389 = *a1 & ~(-1 << v388);
                unint64_t v390 = a1[1] - (v388 & 0x1F);
                *a1 >>= v388 & 0x1F;
                a1[1] = v390;
                LODWORD(v376) = v376 & ~(-1 << v386) | ((unint64_t)(v389 | (((v376 >> v386) & ((1 << v385) - 1) | (1 << v385)) << v388)) << v386);
              }
              *(_DWORD *)(v365 + 4 * v364++) = -(v376 & 1) ^ (v376 >> 1);
              uint64_t v363 = *v794;
            }
            while (v364 < *v794);
            unint64_t v361 = *v739;
          }
          ++v362;
        }
        while (v362 < v361);
      }
    }
    goto LABEL_398;
  }
  if (v21 == 5 && !v23 && v22 == 1)
  {
    unint64_t v25 = *v11;
    if (*v11)
    {
      unint64_t v26 = 0;
      unint64_t v27 = v10[2];
      uint64_t v28 = -(uint64_t)(v27 >> 2);
      uint64_t v29 = ~(v27 >> 2);
      uint64_t v30 = *v794;
      do
      {
        if (v30)
        {
          unint64_t v31 = 0;
          unint64_t v32 = (_DWORD *)(v10[3] + v10[2] * v26);
          unsigned int v33 = v32;
          do
          {
            if (v31)
            {
              int v34 = *(v33 - 1);
              if (v26)
              {
                int v36 = v33[v29];
                int v35 = v33[v29 + 1];
              }
              else
              {
                int v35 = *(v33 - 1);
                int v36 = v35;
              }
            }
            else if (v26)
            {
              int v35 = v32[v28];
              int v34 = v35;
              int v36 = v35;
            }
            else
            {
              int v35 = 0;
              int v34 = 0;
              int v36 = 0;
            }
            if (v34 >= v35) {
              int v37 = v35;
            }
            else {
              int v37 = v34;
            }
            if (v35 <= v34) {
              int v38 = v34;
            }
            else {
              int v38 = v35;
            }
            int v39 = v34 + v35 - v36;
            if (v37 > v36) {
              int v39 = v38;
            }
            if (v38 >= v36) {
              int v40 = v39;
            }
            else {
              int v40 = v37;
            }
            char v41 = (void *)a1[2];
            if ((unint64_t)v41 > a1[3])
            {
              v782 = v32;
              uint64_t v790 = v28;
              sub_2483EB0C0(a1);
              unint64_t v32 = v782;
              uint64_t v28 = v790;
            }
            else
            {
              unint64_t v42 = a1[1];
              unint64_t v43 = *a1 | (*v41 << v42);
              a1[2] = (unint64_t)v41 + ((63 - v42) >> 3);
              *a1 = v43;
              a1[1] = v42 | 0x38;
            }
            if (*(unsigned char *)(a2 + 16))
            {
              v783 = v32;
              uint64_t v791 = v28;
              unsigned int v67 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * v24), a1);
              unint64_t v32 = v783;
              uint64_t v28 = v791;
              unint64_t v51 = v67;
            }
            else
            {
              int v44 = *(_DWORD *)(a2 + 20);
              unint64_t v45 = (unint64_t)(v44 & 0xFFF) >> *(_DWORD *)(a2 + 36);
              unint64_t v46 = *(_DWORD *)(a2 + 40) & v44 & 0xFFFu;
              uint64_t v47 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v45);
              if (v47 <= v46) {
                unint64_t v48 = *(void *)(*(void *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v45);
              }
              else {
                unint64_t v48 = 0;
              }
              unint64_t v49 = HIDWORD(v48);
              unint64_t v50 = HIWORD(v48);
              if (v47 <= v46) {
                unint64_t v51 = BYTE1(v47);
              }
              else {
                unint64_t v51 = (unint64_t)(v44 & 0xFFF) >> *(_DWORD *)(a2 + 36);
              }
              unsigned int v52 = v46 + (unsigned __int16)v49 + (v50 ^ WORD1(v47)) * (*(_DWORD *)(a2 + 20) >> 12);
              BOOL v53 = v52 < 0x10000;
              unint64_t v54 = *a1 >> (16 * v53);
              if (v52 < 0x10000) {
                unsigned int v52 = (unsigned __int16)*a1 | ((unsigned __int16)v52 << 16);
              }
              *(_DWORD *)(a2 + 20) = v52;
              uint64_t v55 = a1[1] - 16 * v53;
              *a1 = v54;
              a1[1] = v55;
            }
            int v56 = (int *)(*(void *)(a2 + 24) + 16 * v24);
            unint64_t v57 = v56[1];
            BOOL v58 = v51 >= v57;
            unint64_t v59 = v51 - v57;
            if (v58)
            {
              int v60 = *v56;
              unint64_t v63 = v56 + 2;
              int v61 = v56[2];
              int v62 = v63[1];
              char v64 = v60 - (v61 + v62) + (v59 >> (v61 + v62));
              int v65 = *a1 & ~(-1 << v64);
              unint64_t v66 = a1[1] - (v64 & 0x1F);
              *a1 >>= v64 & 0x1F;
              a1[1] = v66;
              LODWORD(v51) = v51 & ~(-1 << v62) | ((unint64_t)(v65 | (((v51 >> v62) & ((1 << v61) - 1) | (1 << v61)) << v64)) << v62);
            }
            *v33++ = (-(v51 & 1) ^ (v51 >> 1)) + v40;
            ++v31;
            uint64_t v30 = *v794;
          }
          while (v31 < *v794);
          unint64_t v25 = *v739;
        }
        ++v26;
      }
      while (v26 < v25);
    }
  }
  else
  {
LABEL_59:
    if ((_BYTE)v832)
    {
      int v69 = v10 + 5;
      int v70 = sub_248427DB0((uint64_t *)&v828, a8);
      LOBYTE(v832) = v70;
    }
    else
    {
      int v70 = 0;
      int v69 = v10 + 5;
    }
    if (v831 && (int v71 = sub_248427DB0((uint64_t *)&v828, a8), v831 = v71, v71))
    {
      unint64_t v72 = *v11;
      if (*v11)
      {
        unint64_t v73 = 0;
        unint64_t v74 = v10[2];
        uint64_t v75 = -(uint64_t)(v74 >> 2);
        uint64_t v76 = *v69;
        uint64_t v77 = 4 * ~(v74 >> 2);
        do
        {
          if (v76)
          {
            unint64_t v78 = 0;
            int v79 = (_DWORD *)(v10[3] + v10[2] * v73);
            int v80 = v79;
            do
            {
              if (v78)
              {
                int v81 = *(v80 - 1);
                uint64_t v82 = v81;
                if (v73)
                {
                  uint64_t v84 = *(int *)((char *)v80 + v77);
                  uint64_t v83 = *(int *)((char *)v80 + v77 + 4);
                }
                else
                {
                  uint64_t v83 = v81;
                  uint64_t v84 = v81;
                }
              }
              else if (v73)
              {
                int v81 = v79[v75];
                uint64_t v83 = v81;
                uint64_t v82 = v81;
                uint64_t v84 = v81;
              }
              else
              {
                uint64_t v83 = 0;
                int v81 = 0;
                uint64_t v82 = 0;
                uint64_t v84 = 0;
              }
              if (v81 >= (int)v83) {
                int v85 = v83;
              }
              else {
                int v85 = v81;
              }
              if (v81 <= (int)v83) {
                int v86 = v83;
              }
              else {
                int v86 = v81;
              }
              int v87 = v81 + v83 - v84;
              if (v85 > (int)v84) {
                int v87 = v86;
              }
              if (v86 >= (int)v84) {
                int v88 = v87;
              }
              else {
                int v88 = v85;
              }
              uint64_t v89 = v82 + v83 - v84;
              if (v89 <= -512) {
                uint64_t v89 = -512;
              }
              if (v89 >= 511) {
                uint64_t v89 = 511;
              }
              uint64_t v90 = v89 + 512;
              uint64_t v91 = *(unsigned __int8 *)(a8 + v89 + 512);
              int v92 = (void *)a1[2];
              if ((unint64_t)v92 > a1[3])
              {
                __pc = (void *)v77;
                uint64_t v784 = v75;
                v773 = v79;
                sub_2483EB0C0(a1);
                int v79 = v773;
                uint64_t v77 = (uint64_t)__pc;
                uint64_t v75 = v784;
              }
              else
              {
                unint64_t v93 = a1[1];
                unint64_t v94 = *a1 | (*v92 << v93);
                a1[2] = (unint64_t)v92 + ((63 - v93) >> 3);
                *a1 = v94;
                a1[1] = v93 | 0x38;
              }
              if (*(unsigned char *)(a2 + 16))
              {
                __pd = (void *)v77;
                uint64_t v785 = v75;
                v774 = v79;
                unsigned int v117 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * v91), a1);
                uint64_t v75 = v785;
                unint64_t v102 = v117;
                int v79 = v774;
                uint64_t v77 = (uint64_t)__pd;
              }
              else
              {
                int v95 = *(_DWORD *)(a2 + 20);
                unint64_t v96 = (unint64_t)(v95 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                unint64_t v97 = *(_DWORD *)(a2 + 40) & v95 & 0xFFFu;
                uint64_t v98 = *(void *)(*(void *)a2 + 8 * (v91 << *(_DWORD *)(a2 + 32)) + 8 * v96);
                if (v98 <= v97) {
                  unint64_t v99 = *(void *)(*(void *)a2 + 8 * (v91 << *(_DWORD *)(a2 + 32)) + 8 * v96);
                }
                else {
                  unint64_t v99 = 0;
                }
                unint64_t v100 = HIDWORD(v99);
                unint64_t v101 = HIWORD(v99);
                if (v98 <= v97) {
                  unint64_t v102 = BYTE1(v98);
                }
                else {
                  unint64_t v102 = (unint64_t)(v95 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                }
                unsigned int v103 = v97 + (unsigned __int16)v100 + (v101 ^ WORD1(v98)) * (*(_DWORD *)(a2 + 20) >> 12);
                BOOL v104 = v103 < 0x10000;
                unint64_t v105 = *a1 >> (16 * v104);
                if (v103 < 0x10000) {
                  unsigned int v103 = (unsigned __int16)*a1 | ((unsigned __int16)v103 << 16);
                }
                *(_DWORD *)(a2 + 20) = v103;
                uint64_t v106 = a1[1] - 16 * v104;
                *a1 = v105;
                a1[1] = v106;
              }
              uint64_t v107 = (int *)(*(void *)(a2 + 24) + 16 * v91);
              unint64_t v108 = v107[1];
              BOOL v58 = v102 >= v108;
              unint64_t v109 = v102 - v108;
              if (v58)
              {
                int v110 = *v107;
                uint64_t v113 = v107 + 2;
                int v111 = v107[2];
                int v112 = v113[1];
                char v114 = v110 - (v111 + v112) + (v109 >> (v111 + v112));
                int v115 = *a1 & ~(-1 << v114);
                unint64_t v116 = a1[1] - (v114 & 0x1F);
                *a1 >>= v114 & 0x1F;
                a1[1] = v116;
                LODWORD(v102) = v102 & ~(-1 << v112) | ((unint64_t)(v115 | (((v102 >> v112) & ((1 << v111) - 1) | (1 << v111)) << v114)) << v112);
              }
              *v80++ = v88
                     + *(char *)(a8 + 1024 + v90)
                     + (-(v102 & 1) ^ (v102 >> 1)) * *(char *)(a8 + 2048 + v90);
              ++v78;
              uint64_t v76 = *v794;
            }
            while (v78 < *v794);
            unint64_t v72 = *v739;
          }
          ++v73;
        }
        while (v73 < v72);
      }
    }
    else if (v70 && (uint64_t v118 = *v69, (unint64_t)*v69 >= 9))
    {
      v809 = &unk_26FC66948;
      long long v810 = *(_OWORD *)(a5 + 8);
      long long v811 = *(_OWORD *)(a5 + 24);
      long long v812 = *(_OWORD *)(a5 + 40);
      sub_248428438((uint64_t)&v813, (uint64_t)&v809, v118);
      sub_2483F23D8(&v801, 1uLL);
      if (*v11)
      {
        unint64_t v119 = 0;
        uint64_t v120 = a8 + 2048;
        uint64_t v775 = a8 + 1024;
        uint64_t v741 = a2;
        do
        {
          uint64_t v122 = v10[2];
          uint64_t v121 = v10[3];
          uint64_t v123 = (_DWORD *)(v121 + v122 * v119);
          if (v119)
          {
            int v124 = (int *)(v121 + v122 * (v119 - 2));
            uint64_t v125 = v122 * (v119 - 1);
            uint64_t v126 = (int *)(v121 + v125);
            if (v119 == 1) {
              int v127 = (int *)(v121 + v125);
            }
            else {
              int v127 = v124;
            }
            uint64_t v128 = *v126;
            uint64_t v129 = *v127;
            uint64_t v130 = *v794;
            v766 = v126 + 1;
            if ((unint64_t)*v794 >= 2) {
              uint64_t v131 = v126[1];
            }
            else {
              uint64_t v131 = *v126;
            }
          }
          else
          {
            uint64_t v129 = 0;
            uint64_t v125 = 0;
            uint64_t v128 = 0;
            uint64_t v131 = 0;
            uint64_t v126 = v123 - 1;
            uint64_t v130 = *v794;
            int v127 = v123 - 1;
            v766 = v123 - 1;
          }
          uint64_t v132 = 0;
          uint64_t v133 = (uint64_t)(v119 << 63) >> 63;
          uint64_t v134 = v133 & (v130 + 2);
          if (v130 == 1) {
            uint64_t v135 = ((uint64_t)(v119 << 63) >> 63) & 3;
          }
          else {
            uint64_t v135 = v134 + 1;
          }
          for (uint64_t i = 40; i != 136; i += 24)
          {
            unint64_t v137 = (*(_DWORD *)(*(void *)((char *)&v813 + i) + 4 * v135)
                                + 2 * *(_DWORD *)(*(void *)((char *)&v813 + i) + 4 * v134));
            int v138 = __clz(v137 + 1) ^ 0x3F;
            if (v138 <= 5) {
              LOBYTE(v138) = 5;
            }
            v795.i32[v132] = ((*(_DWORD *)&v827[4 * (v137 >> (v138 - 5)) + 16]
                                           * *(_DWORD *)&v827[v132 * 4]) >> (v138 - 5))
                           + 4;
            ++v132;
          }
          uint64_t v139 = 0;
          uint64_t v140 = (int *)v818;
          uint64_t v141 = *((int *)v818 + v134);
          uint64_t v142 = *((int *)v818 + v135);
          if (v142 >= 0) {
            unint64_t v143 = *((int *)v818 + v135);
          }
          else {
            unint64_t v143 = -v142;
          }
          if (v141 >= 0) {
            unint64_t v144 = v141;
          }
          else {
            unint64_t v144 = -v141;
          }
          if (v143 <= v144) {
            int v145 = v141;
          }
          else {
            int v145 = v142;
          }
          uint64x2_t __p = (_DWORD *)v801;
          *(_DWORD *)long long v801 = v145;
          uint64_t v146 = (v823 + (uint64_t)v822) * v141 + v824 * (uint64_t)(int)v142;
          uint64_t v147 = (v142 + v141) * v820;
          uint64_t v148 = 8 * v128;
          uint64_t v149 = 8 * v131;
          *(void *)&long long v813 = v149;
          *((void *)&v813 + 1) = 8 * v128 - (v147 >> 5);
          uint64_t v814 = 8 * v128 - ((2 * (int)v141 * (uint64_t)v821) >> 5);
          uint64_t v815 = 8 * v128 - ((v146 + 8 * (v129 - v128) * v825) >> 5);
          *(uint32x4_t *)v808 = vshlq_u32(v795, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v795)) ^ 0x1F) - 4)));
          unsigned int v150 = vaddvq_s32(*(int32x4_t *)v808);
          uint64_t v151 = (v150 >> 1) - 1;
          do
          {
            v151 += *((void *)&v813 + v139) * *((unsigned int *)v808 + v139);
            ++v139;
          }
          while (v139 != 4);
          uint64_t v768 = v121 + v125 - 4;
          uint64_t v152 = (v151 * *(unsigned int *)&v827[4 * v150 + 12]) >> 24;
          if (v149 <= v148) {
            uint64_t v153 = v148;
          }
          else {
            uint64_t v153 = v149;
          }
          if (v148 >= v149) {
            uint64_t v154 = v149;
          }
          else {
            uint64_t v154 = v148;
          }
          if (v152 < v153) {
            uint64_t v153 = v152;
          }
          if (v154 > v153) {
            uint64_t v153 = v154;
          }
          if ((int)v141 <= 0) {
            uint64_t v155 = v153;
          }
          else {
            uint64_t v155 = v152;
          }
          uint64_t v816 = v155;
          if (v145 < -511)
          {
            int v145 = -512;
          }
          else if (v145 > 511)
          {
            int v145 = 511;
          }
          uint64_t v156 = (v145 + 512);
          uint64_t v157 = *(unsigned __int8 *)(a8 + v156);
          unint64_t v158 = (void *)a1[2];
          if ((unint64_t)v158 > a1[3])
          {
            unint64_t v735 = v119;
            v753 = v127;
            v758 = v123;
            uint64_t v342 = (uint64_t)(v119 << 63) >> 63;
            v750 = v126;
            sub_2483EB0C0(a1);
            uint64_t v126 = v750;
            int v127 = v753;
            uint64_t v133 = v342;
            uint64_t v123 = v758;
            a2 = v741;
            unint64_t v119 = v735;
          }
          else
          {
            unint64_t v159 = a1[1];
            unint64_t v160 = *a1 | (*v158 << v159);
            a1[2] = (unint64_t)v158 + ((63 - v159) >> 3);
            *a1 = v160;
            a1[1] = v159 | 0x38;
          }
          if (*(unsigned char *)(a2 + 16))
          {
            uint64_t v343 = *(void *)(*(void *)(a2 + 8) + 24 * v157);
            unint64_t v736 = v119;
            v754 = v127;
            v759 = v123;
            uint64_t v344 = v133;
            v751 = v126;
            unsigned int v345 = sub_248409FB4(v343, a1);
            uint64_t v126 = v751;
            int v127 = v754;
            uint64_t v133 = v344;
            uint64_t v123 = v759;
            a2 = v741;
            unint64_t v119 = v736;
            unint64_t v168 = v345;
          }
          else
          {
            int v161 = *(_DWORD *)(a2 + 20);
            unint64_t v162 = (unint64_t)(v161 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            unint64_t v163 = *(_DWORD *)(a2 + 40) & v161 & 0xFFFu;
            uint64_t v164 = *(void *)(*(void *)a2 + 8 * (v157 << *(_DWORD *)(a2 + 32)) + 8 * v162);
            if (v164 <= v163) {
              unint64_t v165 = *(void *)(*(void *)a2 + 8 * (v157 << *(_DWORD *)(a2 + 32)) + 8 * v162);
            }
            else {
              unint64_t v165 = 0;
            }
            unint64_t v166 = HIDWORD(v165);
            unint64_t v167 = HIWORD(v165);
            if (v164 <= v163) {
              unint64_t v168 = BYTE1(v164);
            }
            else {
              unint64_t v168 = (unint64_t)(v161 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            }
            unsigned int v169 = v163 + (unsigned __int16)v166 + (v167 ^ WORD1(v164)) * (*(_DWORD *)(a2 + 20) >> 12);
            BOOL v170 = v169 < 0x10000;
            unint64_t v171 = *a1 >> (16 * v170);
            if (v169 < 0x10000) {
              unsigned int v169 = (unsigned __int16)*a1 | ((unsigned __int16)v169 << 16);
            }
            *(_DWORD *)(a2 + 20) = v169;
            uint64_t v172 = a1[1] - 16 * v170;
            *a1 = v171;
            a1[1] = v172;
          }
          uint64_t v173 = (int *)(*(void *)(a2 + 24) + 16 * v157);
          unint64_t v174 = v173[1];
          BOOL v58 = v168 >= v174;
          unint64_t v175 = v168 - v174;
          if (v58)
          {
            int v176 = *v173;
            unint64_t v179 = v173 + 2;
            int v177 = v173[2];
            int v178 = v179[1];
            char v180 = v176 - (v177 + v178) + (v175 >> (v177 + v178));
            int v181 = *a1 & ~(-1 << v180);
            unint64_t v182 = a1[1] - (v180 & 0x1F);
            *a1 >>= v180 & 0x1F;
            a1[1] = v182;
            LODWORD(v168) = v168 & ~(-1 << v178) | ((unint64_t)(v181 | (((v168 >> v178) & ((1 << v177) - 1) | (1 << v177)) << v180)) << v178);
          }
          uint64_t v183 = 0;
          unint64_t v184 = *(char *)(v775 + v156)
               + ((unint64_t)((v155 << 29) + 1610612736) >> 32)
               + (int)(-(v168 & 1) ^ (v168 >> 1)) * (uint64_t)*(char *)(v120 + v156);
          *uint64_t v123 = v184;
          unint64_t v185 = *v794;
          uint64_t v186 = *v794 + 2;
          uint64_t v187 = 8 * (int)v184;
          if (v119) {
            uint64_t v188 = 0;
          }
          else {
            uint64_t v188 = *v794 + 2;
          }
          v140[v188] = v155 - v187;
          if (v119) {
            uint64_t v189 = v185 + 3;
          }
          else {
            uint64_t v189 = 1;
          }
          unint64_t v190 = v817;
          do
          {
            uint64_t v191 = *(void *)((char *)&v813 + v183) - v187;
            if (v191 < 0) {
              uint64_t v191 = v187 - *(void *)((char *)&v813 + v183);
            }
            unint64_t v192 = (unint64_t)(v191 + 3) >> 3;
            uint64_t v193 = *v190;
            v190 += 3;
            *(_DWORD *)(v193 + 4 * v188) = v192;
            *(_DWORD *)(v193 + 4 * v189) += v192;
            v183 += 8;
          }
          while (v183 != 32);
          if (v185 < 3)
          {
            uint64_t v264 = v133 & v186;
            unint64_t v195 = 1;
          }
          else
          {
            v744 = (int *)v818;
            uint64_t v747 = v133;
            uint64_t v194 = 2;
            unint64_t v195 = 1;
            v752 = v127;
            v757 = v123;
            v749 = v126;
            do
            {
              uint64_t v196 = 0;
              unint64_t v197 = v195;
              uint64_t v198 = v126[v195];
              uint64_t v199 = v194;
              uint64_t v200 = (int)v123[v197 - 1];
              uint64_t v201 = v766[v197];
              uint64_t v202 = *(int *)(v768 + 4 * v197);
              uint64_t v203 = v127[v197];
              unint64_t v204 = v185 + 2;
              unint64_t v205 = (v133 & (v185 + 2)) + v197;
              if (v185 - 1 <= v197) {
                unint64_t v206 = (v133 & (v185 + 2)) + v197;
              }
              else {
                unint64_t v206 = v205 + 1;
              }
              unint64_t v207 = v205 - 1;
              for (uint64_t j = 40; j != 136; j += 24)
              {
                unint64_t v209 = (*(_DWORD *)(*(void *)((char *)&v813 + j) + 4 * v206)
                                    + *(_DWORD *)(*(void *)((char *)&v813 + j) + 4 * v205)
                                    + *(_DWORD *)(*(void *)((char *)&v813 + j) + 4 * v207));
                int v210 = __clz(v209 + 1) ^ 0x3F;
                if (v210 <= 5) {
                  LOBYTE(v210) = 5;
                }
                v795.i32[v196] = ((*(_DWORD *)&v827[4 * (v209 >> (v210 - 5)) + 16]
                                               * *(_DWORD *)&v827[v196 * 4]) >> (v210 - 5))
                               + 4;
                ++v196;
              }
              uint64_t v211 = 0;
              uint64_t v212 = 8 * v198;
              uint64_t v213 = 8 * v200;
              if (v119) {
                unint64_t v204 = 0;
              }
              uint64_t v214 = v140[v197 - 1 + v204];
              uint64_t v215 = v140[v205];
              uint64_t v216 = v140[v207];
              uint64_t v217 = v214 + v215;
              uint64_t v218 = v140[v206];
              if (v215 >= 0) {
                unint64_t v219 = v215;
              }
              else {
                unint64_t v219 = -v215;
              }
              if (v214 >= 0) {
                unint64_t v220 = v214;
              }
              else {
                unint64_t v220 = -v214;
              }
              if (v219 <= v220) {
                uint64_t v221 = v214;
              }
              else {
                uint64_t v221 = v215;
              }
              if (v216 >= 0) {
                unint64_t v222 = v216;
              }
              else {
                unint64_t v222 = -v216;
              }
              if (v221 >= 0) {
                unint64_t v223 = v221;
              }
              else {
                unint64_t v223 = -v221;
              }
              if (v222 > v223) {
                uint64_t v221 = v216;
              }
              if (v218 >= 0) {
                unint64_t v224 = v218;
              }
              else {
                unint64_t v224 = -v218;
              }
              if (v221 >= 0) {
                unint64_t v225 = v221;
              }
              else {
                unint64_t v225 = -v221;
              }
              if (v224 > v225) {
                LODWORD(v221) = v218;
              }
              _DWORD *__p = v221;
              uint64_t v226 = v213 - 8 * v198 + 8 * v201;
              uint64_t v227 = 8 * v201;
              *(void *)&long long v813 = v226;
              *((void *)&v813 + 1) = v212 - (((v217 + v218) * v820) >> 5);
              uint64_t v814 = v213 - (((v217 + v216) * v821) >> 5);
              uint64_t v815 = v212
                   - ((v822 * (uint64_t)(int)v216
                     + v823 * (uint64_t)(int)v215
                     + v824 * (uint64_t)(int)v218
                     + 8 * ((v203 - v198) * v825 + (v202 - v200) * v826)) >> 5);
              *(uint32x4_t *)v808 = vshlq_u32(v795, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v795)) ^ 0x1F) - 4)));
              unsigned int v228 = vaddvq_s32(*(int32x4_t *)v808);
              uint64_t v229 = (v228 >> 1) - 1;
              do
              {
                v229 += *((void *)&v813 + v211) * *((unsigned int *)v808 + v211);
                ++v211;
              }
              while (v211 != 4);
              uint64_t v230 = (v229 * *(unsigned int *)&v827[4 * v228 + 12]) >> 24;
              if (v227 <= v212) {
                uint64_t v231 = v212;
              }
              else {
                uint64_t v231 = v227;
              }
              if (v213 > v231) {
                uint64_t v231 = v213;
              }
              if (v212 >= v227) {
                uint64_t v212 = v227;
              }
              if (v212 < v213) {
                uint64_t v213 = v212;
              }
              if (v230 >= v231) {
                uint64_t v232 = v231;
              }
              else {
                uint64_t v232 = v230;
              }
              if (v213 <= v232) {
                uint64_t v213 = v232;
              }
              if ((v216 ^ v215 | v214 ^ v215) <= 0) {
                uint64_t v233 = v213;
              }
              else {
                uint64_t v233 = v230;
              }
              uint64_t v816 = v233;
              unint64_t v786 = v199;
              if ((int)v221 < -511)
              {
                LODWORD(v221) = -512;
                int v127 = v752;
                uint64_t v123 = v757;
                uint64_t v133 = v747;
                uint64_t v126 = v749;
              }
              else
              {
                int v127 = v752;
                uint64_t v123 = v757;
                uint64_t v133 = v747;
                uint64_t v126 = v749;
                if ((int)v221 > 511) {
                  LODWORD(v221) = 511;
                }
              }
              uint64_t v234 = (v221 + 512);
              uint64_t v235 = *(unsigned __int8 *)(a8 + v234);
              unint64_t v236 = (void *)a1[2];
              if ((unint64_t)v236 > a1[3])
              {
                unint64_t v733 = v119;
                sub_2483EB0C0(a1);
                uint64_t v126 = v749;
                int v127 = v752;
                uint64_t v133 = v747;
                uint64_t v123 = v757;
                unint64_t v119 = v733;
              }
              else
              {
                unint64_t v237 = a1[1];
                unint64_t v238 = *a1 | (*v236 << v237);
                a1[2] = (unint64_t)v236 + ((63 - v237) >> 3);
                *a1 = v238;
                a1[1] = v237 | 0x38;
              }
              a2 = v741;
              if (*(unsigned char *)(v741 + 16))
              {
                unint64_t v734 = v119;
                unsigned int v271 = sub_248409FB4(*(void *)(*(void *)(v741 + 8) + 24 * v235), a1);
                uint64_t v126 = v749;
                int v127 = v752;
                uint64_t v133 = v747;
                uint64_t v123 = v757;
                unint64_t v119 = v734;
                unint64_t v246 = v271;
              }
              else
              {
                int v239 = *(_DWORD *)(v741 + 20);
                unint64_t v240 = (unint64_t)(v239 & 0xFFF) >> *(_DWORD *)(v741 + 36);
                unint64_t v241 = *(_DWORD *)(v741 + 40) & v239 & 0xFFFu;
                uint64_t v242 = *(void *)(*(void *)v741 + 8 * (v235 << *(_DWORD *)(v741 + 32)) + 8 * v240);
                if (v242 <= v241) {
                  unint64_t v243 = *(void *)(*(void *)v741 + 8 * (v235 << *(_DWORD *)(v741 + 32)) + 8 * v240);
                }
                else {
                  unint64_t v243 = 0;
                }
                unint64_t v244 = HIDWORD(v243);
                unint64_t v245 = HIWORD(v243);
                if (v242 <= v241) {
                  unint64_t v246 = BYTE1(v242);
                }
                else {
                  unint64_t v246 = (unint64_t)(v239 & 0xFFF) >> *(_DWORD *)(v741 + 36);
                }
                unsigned int v247 = v241 + (unsigned __int16)v244 + (v245 ^ WORD1(v242)) * (*(_DWORD *)(v741 + 20) >> 12);
                BOOL v248 = v247 < 0x10000;
                unint64_t v249 = *a1 >> (16 * v248);
                if (v247 < 0x10000) {
                  unsigned int v247 = (unsigned __int16)*a1 | ((unsigned __int16)v247 << 16);
                }
                *(_DWORD *)(v741 + 20) = v247;
                uint64_t v250 = a1[1] - 16 * v248;
                *a1 = v249;
                a1[1] = v250;
              }
              uint64_t v251 = (int *)(*(void *)(v741 + 24) + 16 * v235);
              unint64_t v252 = v251[1];
              BOOL v58 = v246 >= v252;
              unint64_t v253 = v246 - v252;
              if (v58)
              {
                int v254 = *v251;
                char v257 = v251 + 2;
                int v255 = v251[2];
                int v256 = v257[1];
                char v258 = v254 - (v255 + v256) + (v253 >> (v255 + v256));
                int v259 = *a1 & ~(-1 << v258);
                unint64_t v260 = a1[1] - (v258 & 0x1F);
                *a1 >>= v258 & 0x1F;
                a1[1] = v260;
                LODWORD(v246) = v246 & ~(-1 << v256) | ((unint64_t)(v259 | (((v246 >> v256) & ((1 << v255) - 1) | (1 << v255)) << v258)) << v256);
              }
              unint64_t v195 = v786;
              uint64_t v261 = 0;
              unint64_t v262 = *(char *)(v775 + v234)
                   + ((unint64_t)((v233 << 29) + 1610612736) >> 32)
                   + (int)(-(v246 & 1) ^ (v246 >> 1)) * (uint64_t)*(char *)(v120 + v234);
              v123[v197] = v262;
              unint64_t v185 = *v794;
              uint64_t v186 = *v794 + 2;
              if (v119) {
                uint64_t v263 = 0;
              }
              else {
                uint64_t v263 = *v794 + 2;
              }
              uint64_t v264 = v133 & v186;
              uint64_t v265 = 8 * (int)v262;
              unint64_t v266 = v263 + v197;
              v744[v266] = v233 - v265;
              long long v267 = v817;
              do
              {
                uint64_t v268 = *(void *)((char *)&v813 + v261) - v265;
                if (v268 < 0) {
                  uint64_t v268 = v265 - *(void *)((char *)&v813 + v261);
                }
                unint64_t v269 = (unint64_t)(v268 + 3) >> 3;
                uint64_t v270 = *v267;
                v267 += 3;
                *(_DWORD *)(v270 + 4 * v266) = v269;
                *(_DWORD *)(v270 + 4 * (v197 + (v133 & v186) + 1)) += v269;
                v261 += 8;
              }
              while (v261 != 32);
              uint64_t v194 = v786 + 1;
              uint64_t v140 = v744;
            }
            while (v786 + 1 < v185);
            uint64_t v140 = v744;
          }
          uint64_t v272 = 0;
          uint64_t v273 = v126[v195];
          uint64_t v274 = (int)v123[v195 - 1];
          uint64_t v275 = *(int *)(v768 + 4 * v195);
          uint64_t v276 = v127[v195];
          unint64_t v277 = v264 + v195;
          if (v185 - 1 <= v195) {
            unint64_t v278 = v264 + v195;
          }
          else {
            unint64_t v278 = v277 + 1;
          }
          unint64_t v279 = v277 - 1;
          for (uint64_t k = 40; k != 136; k += 24)
          {
            unint64_t v281 = (*(_DWORD *)(*(void *)((char *)&v813 + k) + 4 * v278)
                                + *(_DWORD *)(*(void *)((char *)&v813 + k) + 4 * v277)
                                + *(_DWORD *)(*(void *)((char *)&v813 + k) + 4 * v279));
            int v282 = __clz(v281 + 1) ^ 0x3F;
            if (v282 <= 5) {
              LOBYTE(v282) = 5;
            }
            v795.i32[v272] = ((*(_DWORD *)&v827[4 * (v281 >> (v282 - 5)) + 16]
                                           * *(_DWORD *)&v827[v272 * 4]) >> (v282 - 5))
                           + 4;
            ++v272;
          }
          unint64_t v283 = v195;
          uint64_t v284 = 0;
          uint64_t v285 = 8 * v273;
          if (v119) {
            uint64_t v186 = 0;
          }
          uint64_t v286 = v140[v195 - 1 + v186];
          uint64_t v287 = v140[v277];
          uint64_t v288 = v140[v279];
          uint64_t v289 = v286 + v287;
          uint64_t v290 = v140[v278];
          if (v287 >= 0) {
            unint64_t v291 = v140[v277];
          }
          else {
            unint64_t v291 = -v287;
          }
          if (v286 >= 0) {
            unint64_t v292 = v286;
          }
          else {
            unint64_t v292 = -v286;
          }
          if (v291 <= v292) {
            uint64_t v293 = v286;
          }
          else {
            uint64_t v293 = v287;
          }
          if (v288 >= 0) {
            unint64_t v294 = v288;
          }
          else {
            unint64_t v294 = -v288;
          }
          if (v293 >= 0) {
            unint64_t v295 = v293;
          }
          else {
            unint64_t v295 = -v293;
          }
          if (v294 > v295) {
            uint64_t v293 = v288;
          }
          if (v290 >= 0) {
            unint64_t v296 = v290;
          }
          else {
            unint64_t v296 = -v290;
          }
          if (v293 >= 0) {
            unint64_t v297 = v293;
          }
          else {
            unint64_t v297 = -v293;
          }
          if (v296 > v297) {
            LODWORD(v293) = v290;
          }
          _DWORD *__p = v293;
          uint64_t v298 = 8 * v274;
          *(void *)&long long v813 = 8 * v274;
          *((void *)&v813 + 1) = v285 - (((v289 + v290) * v820) >> 5);
          uint64_t v814 = 8 * v274 - (((v289 + v288) * v821) >> 5);
          uint64_t v815 = v285
               - ((v822 * (uint64_t)(int)v288
                 + v823 * (uint64_t)(int)v287
                 + v824 * (uint64_t)(int)v290
                 + 8 * ((v276 - v273) * v825 + (v275 - v274) * v826)) >> 5);
          *(uint32x4_t *)v808 = vshlq_u32(v795, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v795)) ^ 0x1F) - 4)));
          unsigned int v299 = vaddvq_s32(*(int32x4_t *)v808);
          uint64_t v300 = (v299 >> 1) - 1;
          do
          {
            v300 += *((void *)&v813 + v284) * *((unsigned int *)v808 + v284);
            ++v284;
          }
          while (v284 != 4);
          uint64_t v301 = (v300 * *(unsigned int *)&v827[4 * v299 + 12]) >> 24;
          if (v298 <= v285) {
            uint64_t v302 = v285;
          }
          else {
            uint64_t v302 = v298;
          }
          if (v285 >= v298) {
            uint64_t v285 = v298;
          }
          if (v301 < v302) {
            uint64_t v302 = v301;
          }
          if (v285 <= v302) {
            uint64_t v285 = v302;
          }
          if ((v288 ^ v287 | v286 ^ v287) <= 0) {
            uint64_t v303 = v285;
          }
          else {
            uint64_t v303 = v301;
          }
          uint64_t v816 = v303;
          if ((int)v293 < -511)
          {
            LODWORD(v293) = -512;
          }
          else if ((int)v293 > 511)
          {
            LODWORD(v293) = 511;
          }
          uint64_t v304 = (v293 + 512);
          uint64_t v305 = *(unsigned __int8 *)(a8 + v304);
          uint64_t v306 = (void *)a1[2];
          if ((unint64_t)v306 > a1[3])
          {
            unint64_t v737 = v119;
            v760 = v123;
            uint64_t v346 = v133;
            sub_2483EB0C0(a1);
            uint64_t v133 = v346;
            uint64_t v123 = v760;
            a2 = v741;
            unint64_t v119 = v737;
          }
          else
          {
            unint64_t v307 = a1[1];
            unint64_t v308 = *a1 | (*v306 << v307);
            a1[2] = (unint64_t)v306 + ((63 - v307) >> 3);
            *a1 = v308;
            a1[1] = v307 | 0x38;
          }
          if (*(unsigned char *)(a2 + 16))
          {
            uint64_t v347 = *(void *)(*(void *)(a2 + 8) + 24 * v305);
            unint64_t v738 = v119;
            v761 = v123;
            uint64_t v348 = v133;
            unsigned int v349 = sub_248409FB4(v347, a1);
            uint64_t v133 = v348;
            uint64_t v123 = v761;
            a2 = v741;
            unint64_t v119 = v738;
            unint64_t v316 = v349;
          }
          else
          {
            int v309 = *(_DWORD *)(a2 + 20);
            unint64_t v310 = (unint64_t)(v309 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            unint64_t v311 = *(_DWORD *)(a2 + 40) & v309 & 0xFFFu;
            uint64_t v312 = *(void *)(*(void *)a2 + 8 * (v305 << *(_DWORD *)(a2 + 32)) + 8 * v310);
            if (v312 <= v311) {
              unint64_t v313 = *(void *)(*(void *)a2 + 8 * (v305 << *(_DWORD *)(a2 + 32)) + 8 * v310);
            }
            else {
              unint64_t v313 = 0;
            }
            unint64_t v314 = HIDWORD(v313);
            unint64_t v315 = HIWORD(v313);
            if (v312 <= v311) {
              unint64_t v316 = BYTE1(v312);
            }
            else {
              unint64_t v316 = (unint64_t)(v309 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            }
            unsigned int v317 = v311 + (unsigned __int16)v314 + (v315 ^ WORD1(v312)) * (*(_DWORD *)(a2 + 20) >> 12);
            BOOL v318 = v317 < 0x10000;
            unint64_t v319 = *a1 >> (16 * v318);
            if (v317 < 0x10000) {
              unsigned int v317 = (unsigned __int16)*a1 | ((unsigned __int16)v317 << 16);
            }
            *(_DWORD *)(a2 + 20) = v317;
            uint64_t v320 = a1[1] - 16 * v318;
            *a1 = v319;
            a1[1] = v320;
          }
          unint64_t v321 = (int *)(*(void *)(a2 + 24) + 16 * v305);
          unint64_t v322 = v321[1];
          BOOL v58 = v316 >= v322;
          unint64_t v323 = v316 - v322;
          if (v58)
          {
            int v324 = *v321;
            unsigned int v327 = v321 + 2;
            int v325 = v321[2];
            int v326 = v327[1];
            char v328 = v324 - (v325 + v326) + (v323 >> (v325 + v326));
            int v329 = *a1 & ~(-1 << v328);
            unint64_t v330 = a1[1] - (v328 & 0x1F);
            *a1 >>= v328 & 0x1F;
            a1[1] = v330;
            LODWORD(v316) = v316 & ~(-1 << v326) | ((unint64_t)(v329 | (((v316 >> v326) & ((1 << v325) - 1) | (1 << v325)) << v328)) << v326);
          }
          uint64_t v331 = 0;
          unint64_t v332 = *(char *)(v775 + v304)
               + ((unint64_t)((v303 << 29) + 1610612736) >> 32)
               + (int)(-(v316 & 1) ^ (v316 >> 1)) * (uint64_t)*(char *)(v120 + v304);
          v123[v283] = v332;
          if (v119) {
            uint64_t v333 = 0;
          }
          else {
            uint64_t v333 = *v794 + 2;
          }
          uint64_t v334 = v133 & (*v794 + 2);
          uint64_t v335 = 8 * (int)v332;
          unint64_t v336 = v333 + v283;
          *((_DWORD *)v818 + v333 + v283) = v303 - v335;
          uint64_t v337 = v283 + v334 + 1;
          int v338 = v817;
          do
          {
            uint64_t v339 = *(void *)((char *)&v813 + v331) - v335;
            if (v339 < 0) {
              uint64_t v339 = v335 - *(void *)((char *)&v813 + v331);
            }
            unint64_t v340 = (unint64_t)(v339 + 3) >> 3;
            uint64_t v341 = *v338;
            v338 += 3;
            *(_DWORD *)(v341 + 4 * v336) = v340;
            *(_DWORD *)(v341 + 4 * v337) += v340;
            v331 += 8;
          }
          while (v331 != 32);
          ++v119;
        }
        while (v119 < *v739);
      }
      else
      {
        uint64x2_t __p = (_DWORD *)v801;
      }
      if (__p)
      {
        *((void *)&v801 + 1) = __p;
        operator delete(__p);
      }
      if (v818)
      {
        v819 = v818;
        operator delete(v818);
      }
      for (uint64_t m = 0; m != -12; m -= 3)
      {
        uint64_t v396 = (void *)v817[m + 9];
        if (v396)
        {
          v817[m + 10] = v396;
          operator delete(v396);
        }
      }
    }
    else if (HIBYTE(v832))
    {
      sub_2483F23D8(v808, v830);
      unint64_t v350 = v10[2];
      int64_t v351 = ((char *)v808[1] - (char *)v808[0]) >> 2;
      uint64_t v352 = *v69;
      int64_t v729 = v351 - 16;
      sub_2484017B8((uint64_t)&v813, v351 - 16, *v69);
      int v353 = v817[0];
      if (LODWORD(v817[0]))
      {
        uint64_t v68 = LODWORD(v817[0]);
      }
      else
      {
        long long v801 = v813;
        uint64_t v802 = v814;
        uint64_t v803 = v815;
        uint64_t v728 = v815;
        uint64_t v804 = v816;
        int64_t v805 = v729;
        uint64_t v806 = v352;
        uint64_t v807 = 0;
        v797 = &unk_26FC66948;
        long long v398 = *(_OWORD *)(a5 + 8);
        long long v399 = *(_OWORD *)(a5 + 24);
        long long v800 = *(_OWORD *)(a5 + 40);
        long long v799 = v399;
        long long v798 = v398;
        sub_248428438((uint64_t)&v813, (uint64_t)&v797, *v69);
        if (*v11)
        {
          unint64_t v400 = 0;
          uint64_t v772 = v350 >> 2;
          int v730 = v9;
          do
          {
            __pa = (_DWORD *)(v10[3] + v10[2] * v400);
            unint64_t v787 = v400;
            int v401 = v808[0];
            *(_DWORD *)v808[0] = a6;
            v401[1] = v9;
            v401[2] = v400;
            v401[9] = 0;
            sub_2484285D8((uint64_t)v10, v400, a9, a6, (unsigned int *)&v801);
            unint64_t v402 = v787;
            unint64_t v403 = *v794;
            uint64_t v792 = (uint64_t)(v787 << 63) >> 63;
            if (v787 >= 2 && (v403 >= 9 ? (BOOL v404 = v729 == 0) : (BOOL v404 = 0), v404))
            {
              uint64_t v405 = 0;
              char v406 = 1;
              do
              {
                char v407 = v406;
                sub_248428B48((uint64_t)&v795, (_DWORD *)v808[0], v403, (uint64_t)&__pa[v405], v772, v405, v402, &v828, &v801, (uint64_t)&v813);
                unint64_t v408 = sub_248409368(a2, v795.i32[0], a1);
                unint64_t v402 = v787;
                uint64_t v411 = 0;
                uint64_t v412 = v795.i64[1] + (-(uint64_t)(v408 & 1) ^ (v408 >> 1)) * v796;
                __pa[v405] = v412;
                unint64_t v403 = *v794;
                uint64_t v413 = *v794 + 2;
                if (v787) {
                  uint64_t v414 = 0;
                }
                else {
                  uint64_t v414 = *v794 + 2;
                }
                uint64_t v415 = 8 * (int)v412;
                uint64_t v416 = v414 + v405;
                unint64_t v417 = (int *)v818;
                *((_DWORD *)v818 + v416) = v816 - v415;
                uint64_t v418 = v405 + (v792 & v413) + 1;
                uint64_t v419 = v817;
                do
                {
                  uint64_t v420 = *(void *)((char *)&v813 + v411) - v415;
                  if (v420 < 0) {
                    uint64_t v420 = v415 - *(void *)((char *)&v813 + v411);
                  }
                  unint64_t v421 = (unint64_t)(v420 + 3) >> 3;
                  uint64_t v422 = *v419;
                  v419 += 3;
                  *(_DWORD *)(v422 + 4 * v416) = v421;
                  *(_DWORD *)(v422 + 4 * v418) += v421;
                  v411 += 8;
                }
                while (v411 != 32);
                char v406 = 0;
                uint64_t v405 = 1;
              }
              while ((v407 & 1) != 0);
              unint64_t v423 = v403 - 2;
              if (v403 - 2 >= 3)
              {
                v424 = (char *)v808[0];
                v755 = v818;
                unint64_t v425 = 2;
                do
                {
                  uint64_t v426 = 0;
                  uint64_t v427 = (uint64_t)&__pa[v425];
                  unint64_t v428 = v425 << 32;
                  uint64_t v429 = *(int *)(v427 + 4 * ~(v350 >> 2));
                  v409.i64[0] = *(void *)(v427 - 4 * (v350 >> 2));
                  uint64_t v430 = v409.i32[0];
                  uint64_t v431 = *(int *)(v427 - 8);
                  uint64_t v432 = *(int *)(v427 - 4);
                  uint64_t v433 = *(int *)(v427 + 4 * (-(uint64_t)(v350 >> 2) - (v350 >> 2)));
                  uint64_t v762 = *(int *)(v427 + 4 * (2 - (v350 >> 2)));
                  if (v409.i32[0] >= 0) {
                    LODWORD(v427) = *(void *)(v427 - 4 * (v350 >> 2));
                  }
                  else {
                    uint64_t v427 = -(uint64_t)v409.i32[0];
                  }
                  *((_DWORD *)v424 + 3) = v425;
                  *((_DWORD *)v424 + 4) = v427;
                  if (v432 >= 0) {
                    LODWORD(v434) = v432;
                  }
                  else {
                    uint64_t v434 = -v432;
                  }
                  *((_DWORD *)v424 + 5) = v434;
                  *((_DWORD *)v424 + 6) = v409.i32[0];
                  int v435 = v432 - *((_DWORD *)v424 + 9);
                  *((_DWORD *)v424 + 7) = v432;
                  *((_DWORD *)v424 + 8) = v435;
                  unsigned int v436 = v409.i32[0] + v432 - v429;
                  v410.i32[0] = v429;
                  v437.i64[0] = vzip1q_s32(v410, v409).u64[0];
                  v437.i64[1] = __PAIR64__(v432, v437.u32[1]);
                  *((_DWORD *)v424 + 9) = v436;
                  *((_DWORD *)v424 + 10) = v432 - v429;
                  v438.i64[0] = v409.i64[0];
                  v438.i64[1] = __PAIR64__(v431, v433);
                  *(int32x4_t *)(v424 + 44) = vsubq_s32(v437, v438);
                  unint64_t v439 = v403 + 2;
                  uint64_t v440 = v792 & (v403 + 2);
                  uint64_t v441 = v440 + (int)v425;
                  if (v403 - 1 <= (int)v425) {
                    uint64_t v442 = v440 + (int)v425;
                  }
                  else {
                    uint64_t v442 = v441 + 1;
                  }
                  if (v428) {
                    uint64_t v443 = v441 - 1;
                  }
                  else {
                    uint64_t v443 = v792 & (v403 + 2);
                  }
                  for (uint64_t n = 40; n != 136; n += 24)
                  {
                    unint64_t v445 = (*(_DWORD *)(*(void *)((char *)&v813 + n) + 4 * v442)
                                        + *(_DWORD *)(*(void *)((char *)&v813 + n) + 4 * v441)
                                        + *(_DWORD *)(*(void *)((char *)&v813 + n) + 4 * v443));
                    int v446 = __clz(v445 + 1) ^ 0x3F;
                    if (v446 <= 5) {
                      LOBYTE(v446) = 5;
                    }
                    v834[0].i32[v426] = ((*(_DWORD *)&v827[4 * (v445 >> (v446 - 5)) + 16]
                                                      * *(_DWORD *)&v827[v426 * 4]) >> (v446 - 5))
                                      + 4;
                    ++v426;
                  }
                  if (v428)
                  {
                    if (v402) {
                      unint64_t v447 = 0;
                    }
                    else {
                      unint64_t v447 = v439;
                    }
                    uint64_t v448 = v417[(int)v425 - 1 + v447];
                  }
                  else
                  {
                    uint64_t v448 = 0;
                  }
                  uint64_t v449 = 0;
                  uint64_t v450 = v409.i32[1];
                  uint64_t v451 = 8 * v409.i32[0];
                  uint64_t v452 = 8 * v432;
                  uint64_t v453 = v417[v441];
                  uint64_t v454 = v417[v443];
                  uint64_t v455 = 8 * v409.i32[1];
                  uint64_t v456 = v448 + v453;
                  v769 = v417;
                  uint64_t v457 = v417[v442];
                  if (v453 >= 0) {
                    unint64_t v458 = v453;
                  }
                  else {
                    unint64_t v458 = -v453;
                  }
                  if (v448 >= 0) {
                    unint64_t v459 = v448;
                  }
                  else {
                    unint64_t v459 = -v448;
                  }
                  if (v458 <= v459) {
                    uint64_t v460 = v448;
                  }
                  else {
                    uint64_t v460 = v453;
                  }
                  if (v454 >= 0) {
                    unint64_t v461 = v454;
                  }
                  else {
                    unint64_t v461 = -v454;
                  }
                  if (v460 >= 0) {
                    unint64_t v462 = v460;
                  }
                  else {
                    unint64_t v462 = -v460;
                  }
                  if (v461 > v462) {
                    uint64_t v460 = v454;
                  }
                  if (v457 >= 0) {
                    unint64_t v463 = v457;
                  }
                  else {
                    unint64_t v463 = -v457;
                  }
                  if (v460 >= 0) {
                    unint64_t v464 = v460;
                  }
                  else {
                    unint64_t v464 = -v460;
                  }
                  if (v463 > v464) {
                    LODWORD(v460) = v457;
                  }
                  *((_DWORD *)v424 + 15) = v460;
                  *(void *)&long long v813 = v452 - v451 + v455;
                  *((void *)&v813 + 1) = v451 - (((v456 + v457) * v820) >> 5);
                  uint64_t v814 = v452 - (((v456 + v454) * v821) >> 5);
                  uint64_t v815 = v451
                       - ((v822 * (uint64_t)(int)v454
                         + v823 * (uint64_t)(int)v453
                         + v824 * (uint64_t)(int)v457
                         + 8 * ((v433 - v409.i32[0]) * v825 + (v429 - v432) * v826)) >> 5);
                  int32x4_t v410 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v834[0])) ^ 0x1F) - 4));
                  int32x4_t v409 = (int32x4_t)vshlq_u32((uint32x4_t)v834[0], (uint32x4_t)v410);
                  uint32x4_t v795 = (uint32x4_t)v409;
                  unsigned int v465 = vaddvq_s32(v409);
                  uint64_t v466 = (v465 >> 1) - 1;
                  do
                  {
                    v466 += *((void *)&v813 + v449) * v795.u32[v449];
                    ++v449;
                  }
                  while (v449 != 4);
                  uint64_t v467 = v454 ^ v453 | v448 ^ v453;
                  if (v455 <= v451) {
                    uint64_t v468 = 8 * v430;
                  }
                  else {
                    uint64_t v468 = v455;
                  }
                  if (v452 > v468) {
                    uint64_t v468 = 8 * v432;
                  }
                  if (v451 >= v455) {
                    uint64_t v451 = v455;
                  }
                  if (v451 < v452) {
                    uint64_t v452 = v451;
                  }
                  if ((v466 * *(unsigned int *)&v827[4 * v465 + 12]) >> 24 >= v468) {
                    uint64_t v469 = v468;
                  }
                  else {
                    uint64_t v469 = (v466 * *(unsigned int *)&v827[4 * v465 + 12]) >> 24;
                  }
                  if (v452 <= v469) {
                    uint64_t v452 = v469;
                  }
                  if (v467 <= 0) {
                    uint64_t v470 = v452;
                  }
                  else {
                    uint64_t v470 = (v466 * *(unsigned int *)&v827[4 * v465 + 12]) >> 24;
                  }
                  uint64_t v816 = v470;
                  uint64_t v471 = *v16;
                  if ((v471 & 0x80000000) != 0)
                  {
                    LODWORD(v472) = 0;
                    unint64_t v402 = v787;
                    unint64_t v417 = v769;
                  }
                  else
                  {
                    uint64_t v472 = 0;
                    v473 = v16;
                    unint64_t v402 = v787;
                    unint64_t v417 = v769;
                    do
                    {
                      signed int v474 = *(_DWORD *)&v424[4 * v471];
                      v475 = &v16[6 * v472];
                      signed int v476 = v475[1];
                      BOOL v477 = *(_DWORD *)&v424[4 * *((__int16 *)v475 + 10)] <= (int)v475[2];
                      signed int v478 = v475[3];
                      unsigned int v479 = v475[4];
                      int v480 = (*(_DWORD *)&v424[4 * *((__int16 *)v473 + 11)] <= v478) | 2;
                      if (v474 <= v476) {
                        int v481 = v480;
                      }
                      else {
                        int v481 = v477;
                      }
                      LODWORD(v472) = v481 + v479;
                      v482 = &v16[6 * v472];
                      uint64_t v483 = *v482;
                      if ((v483 & 0x80000000) != 0) {
                        break;
                      }
                      signed int v484 = *(_DWORD *)&v424[4 * v483];
                      v485 = &v16[6 * v472];
                      signed int v486 = v485[1];
                      BOOL v487 = *(_DWORD *)&v424[4 * *((__int16 *)v485 + 10)] <= (int)v485[2];
                      signed int v488 = v485[3];
                      unsigned int v489 = v485[4];
                      int v490 = (*(_DWORD *)&v424[4 * *((__int16 *)v482 + 11)] <= v488) | 2;
                      int v491 = v484 <= v486 ? v490 : v487;
                      uint64_t v472 = v491 + v489;
                      v473 = &v16[6 * v472];
                      uint64_t v471 = *v473;
                    }
                    while ((v471 & 0x80000000) == 0);
                  }
                  v492 = &v16[6 * v472];
                  uint64_t v493 = v492[2];
                  uint64_t v494 = v492[5];
                  uint64_t v495 = (int)v492[4];
                  switch(v492[1])
                  {
                    case 1u:
                      break;
                    case 2u:
                      uint64_t v432 = v430;
                      break;
                    case 3u:
                      BOOL v496 = __OFADD__(v430, v432);
                      uint64_t v498 = v430 + v432;
                      char v497 = (v498 < 0) ^ v496;
                      goto LABEL_528;
                    case 4u:
                      uint64_t v499 = v430 + v432 - v429;
                      unint64_t v500 = v499 - v432;
                      if (v499 - v432 < 0) {
                        unint64_t v500 = v432 - v499;
                      }
                      uint64_t v501 = v499 - v430;
                      if (v501 < 0) {
                        uint64_t v501 = -v501;
                      }
                      if (v500 >= v501) {
                        uint64_t v432 = v430;
                      }
                      break;
                    case 5u:
                      if ((int)v430 >= (int)v432) {
                        int v502 = v432;
                      }
                      else {
                        int v502 = v430;
                      }
                      if ((int)v432 > (int)v430) {
                        LODWORD(v430) = v432;
                      }
                      if (v502 <= (int)v429) {
                        unsigned int v503 = v436;
                      }
                      else {
                        unsigned int v503 = v430;
                      }
                      if ((int)v430 >= (int)v429) {
                        uint64_t v432 = v503;
                      }
                      else {
                        uint64_t v432 = v502;
                      }
                      break;
                    case 6u:
                      uint64_t v432 = (v470 + 3) >> 3;
                      break;
                    case 7u:
                      uint64_t v432 = v450;
                      break;
                    case 8u:
                      uint64_t v432 = v429;
                      break;
                    case 9u:
                      uint64_t v432 = v431;
                      break;
                    case 0xAu:
                      uint64_t v498 = v429 + v432;
                      char v497 = (v429 + v432 < 0) ^ __OFADD__(v429, v432);
                      goto LABEL_528;
                    case 0xBu:
                      BOOL v496 = __OFADD__(v429, v430);
                      uint64_t v498 = v429 + v430;
                      char v497 = (v498 < 0) ^ v496;
                      goto LABEL_528;
                    case 0xCu:
                      BOOL v496 = __OFADD__(v450, v430);
                      uint64_t v498 = v450 + v430;
                      char v497 = (v498 < 0) ^ v496;
LABEL_528:
                      if (v497) {
                        ++v498;
                      }
                      uint64_t v432 = v498 >> 1;
                      break;
                    case 0xDu:
                      uint64_t v540 = 6 * (int)v430 - v432 + 8 * v432 + v431 + 3 * v450 - 2 * v433 + v762;
                      uint64_t v541 = v540 + 8;
                      uint64_t v542 = v540 + 23;
                      if (v541 >= 0) {
                        uint64_t v542 = v541;
                      }
                      uint64_t v432 = v542 >> 4;
                      break;
                    default:
                      uint64_t v432 = 0;
                      break;
                  }
                  v504 = (void *)a1[2];
                  if ((unint64_t)v504 > a1[3])
                  {
                    uint64_t v724 = v492[5];
                    uint64_t v726 = v492[2];
                    int v763 = v470;
                    uint64_t v722 = (int)v492[4];
                    sub_2483EB0C0(a1);
                    uint64_t v495 = v722;
                    uint64_t v494 = v724;
                    uint64_t v493 = v726;
                    LODWORD(v470) = v763;
                    unint64_t v417 = v769;
                    unint64_t v402 = v787;
                  }
                  else
                  {
                    unint64_t v505 = a1[1];
                    unint64_t v506 = *a1 | (*v504 << v505);
                    a1[2] = (unint64_t)v504 + ((63 - v505) >> 3);
                    *a1 = v506;
                    a1[1] = v505 | 0x38;
                  }
                  if (*(unsigned char *)(a2 + 16))
                  {
                    uint64_t v725 = v494;
                    uint64_t v727 = v493;
                    int v764 = v470;
                    uint64_t v723 = v495;
                    unsigned int v543 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * (int)v495), a1);
                    uint64_t v495 = v723;
                    uint64_t v494 = v725;
                    LODWORD(v470) = v764;
                    unint64_t v417 = v769;
                    unint64_t v402 = v787;
                    unint64_t v514 = v543;
                    uint64_t v493 = v727;
                  }
                  else
                  {
                    int v507 = *(_DWORD *)(a2 + 20);
                    unint64_t v508 = (unint64_t)(v507 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    unint64_t v509 = *(_DWORD *)(a2 + 40) & v507 & 0xFFFu;
                    uint64_t v510 = *(void *)(*(void *)a2 + 8 * (v495 << *(_DWORD *)(a2 + 32)) + 8 * v508);
                    if (v510 <= v509) {
                      unint64_t v511 = *(void *)(*(void *)a2 + 8 * (v495 << *(_DWORD *)(a2 + 32)) + 8 * v508);
                    }
                    else {
                      unint64_t v511 = 0;
                    }
                    unint64_t v512 = HIDWORD(v511);
                    unint64_t v513 = HIWORD(v511);
                    if (v510 <= v509) {
                      unint64_t v514 = BYTE1(v510);
                    }
                    else {
                      unint64_t v514 = (unint64_t)(v507 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    }
                    unsigned int v515 = v509 + (unsigned __int16)v512 + (v513 ^ WORD1(v510)) * (*(_DWORD *)(a2 + 20) >> 12);
                    BOOL v516 = v515 < 0x10000;
                    unint64_t v517 = *a1 >> (16 * v516);
                    if (v515 < 0x10000) {
                      unsigned int v515 = (unsigned __int16)*a1 | ((unsigned __int16)v515 << 16);
                    }
                    *(_DWORD *)(a2 + 20) = v515;
                    uint64_t v518 = a1[1] - 16 * v516;
                    *a1 = v517;
                    a1[1] = v518;
                  }
                  v519 = (int *)(*(void *)(a2 + 24) + 16 * v495);
                  unint64_t v520 = v519[1];
                  BOOL v58 = v514 >= v520;
                  unint64_t v521 = v514 - v520;
                  if (v58)
                  {
                    int v522 = *v519;
                    v525 = v519 + 2;
                    int v523 = v519[2];
                    int v524 = v525[1];
                    char v526 = v522 - (v523 + v524) + (v521 >> (v523 + v524));
                    int v527 = *a1 & ~(-1 << v526);
                    unint64_t v528 = a1[1] - (v526 & 0x1F);
                    *a1 >>= v526 & 0x1F;
                    a1[1] = v528;
                    LODWORD(v514) = v514 & ~(-1 << v524) | ((unint64_t)(v527 | (((v514 >> v524) & ((1 << v523) - 1) | (1 << v523)) << v526)) << v524);
                  }
                  uint64_t v529 = 0;
                  unint64_t v530 = v432 + v494 + (-(uint64_t)(v514 & 1) ^ ((unint64_t)v514 >> 1)) * v493;
                  __pa[v425] = v530;
                  unint64_t v403 = *v794;
                  if (v402) {
                    uint64_t v531 = 0;
                  }
                  else {
                    uint64_t v531 = *v794 + 2;
                  }
                  uint64_t v532 = v792 & (*v794 + 2);
                  uint64_t v533 = 8 * (int)v530;
                  unint64_t v534 = v531 + v425;
                  v755[v531 + v425++] = v470 - v533;
                  unint64_t v535 = v425 + v532;
                  v536 = v817;
                  do
                  {
                    uint64_t v537 = *(void *)((char *)&v813 + v529) - v533;
                    if (v537 < 0) {
                      uint64_t v537 = v533 - *(void *)((char *)&v813 + v529);
                    }
                    unint64_t v538 = (unint64_t)(v537 + 3) >> 3;
                    uint64_t v539 = *v536;
                    v536 += 3;
                    *(_DWORD *)(v539 + 4 * v534) = v538;
                    *(_DWORD *)(v539 + 4 * v535) += v538;
                    v529 += 8;
                  }
                  while (v529 != 32);
                  unint64_t v423 = v403 - 2;
                }
                while (v425 < v403 - 2);
              }
              uint64_t v10 = (void *)v740;
              while (v423 < v403)
              {
                sub_248428B48((uint64_t)&v795, (_DWORD *)v808[0], v403, (uint64_t)&__pa[v423], v772, v423, v402, &v828, &v801, (uint64_t)&v813);
                unint64_t v544 = sub_248409368(a2, v795.i32[0], a1);
                unint64_t v402 = v787;
                uint64_t v545 = 0;
                uint64_t v546 = v795.i64[1] + (-(uint64_t)(v544 & 1) ^ (v544 >> 1)) * v796;
                __pa[v423] = v546;
                unint64_t v403 = *v794;
                uint64_t v547 = *v794 + 2;
                if (v787) {
                  uint64_t v548 = 0;
                }
                else {
                  uint64_t v548 = *v794 + 2;
                }
                uint64_t v549 = 8 * (int)v546;
                unint64_t v550 = v548 + v423;
                *((_DWORD *)v818 + v550) = v816 - v549;
                uint64_t v551 = ++v423 + (v792 & v547);
                v552 = v817;
                do
                {
                  uint64_t v553 = *(void *)((char *)&v813 + v545) - v549;
                  if (v553 < 0) {
                    uint64_t v553 = v549 - *(void *)((char *)&v813 + v545);
                  }
                  unint64_t v554 = (unint64_t)(v553 + 3) >> 3;
                  uint64_t v555 = *v552;
                  v552 += 3;
                  *(_DWORD *)(v555 + 4 * v550) = v554;
                  *(_DWORD *)(v555 + 4 * v551) += v554;
                  v545 += 8;
                }
                while (v545 != 32);
              }
            }
            else if (v403)
            {
              unint64_t v556 = 0;
              do
              {
                sub_248428B48((uint64_t)&v795, (_DWORD *)v808[0], v403, (uint64_t)&__pa[v556], v772, v556, v402, &v828, &v801, (uint64_t)&v813);
                unint64_t v557 = sub_248409368(a2, v795.i32[0], a1);
                unint64_t v402 = v787;
                uint64_t v558 = 0;
                uint64_t v559 = v795.i64[1] + (-(uint64_t)(v557 & 1) ^ (v557 >> 1)) * v796;
                __pa[v556] = v559;
                unint64_t v403 = *v794;
                uint64_t v560 = *v794 + 2;
                if (v787) {
                  uint64_t v561 = 0;
                }
                else {
                  uint64_t v561 = *v794 + 2;
                }
                uint64_t v562 = 8 * (int)v559;
                unint64_t v563 = v561 + v556;
                *((_DWORD *)v818 + v563) = v816 - v562;
                uint64_t v564 = ++v556 + (v792 & v560);
                v565 = v817;
                do
                {
                  uint64_t v566 = *(void *)((char *)&v813 + v558) - v562;
                  if (v566 < 0) {
                    uint64_t v566 = v562 - *(void *)((char *)&v813 + v558);
                  }
                  unint64_t v567 = (unint64_t)(v566 + 3) >> 3;
                  uint64_t v568 = *v565;
                  v565 += 3;
                  *(_DWORD *)(v568 + 4 * v563) = v567;
                  *(_DWORD *)(v568 + 4 * v564) += v567;
                  v558 += 8;
                }
                while (v558 != 32);
              }
              while (v556 < v403);
            }
            unint64_t v400 = v402 + 1;
            int v9 = v730;
          }
          while (v400 < *v739);
        }
        if (v818)
        {
          v819 = v818;
          operator delete(v818);
        }
        for (iuint64_t i = 0; ii != -12; ii -= 3)
        {
          v570 = (void *)v817[ii + 9];
          if (v570)
          {
            v817[ii + 10] = v570;
            operator delete(v570);
          }
        }
        uint64_t v803 = 0;
        if (v728)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v728 - 24));
          free(*(void **)(v728 - 32));
        }
        uint64_t v68 = 0;
        int v353 = 0;
      }
      if (v808[0])
      {
        v808[1] = v808[0];
        int v571 = v353;
        operator delete(v808[0]);
        int v353 = v571;
      }
      if (v353) {
        goto LABEL_399;
      }
    }
    else
    {
      sub_2483F23D8(v808, v830);
      unint64_t v391 = v10[2];
      int64_t v392 = ((char *)v808[1] - (char *)v808[0]) >> 2;
      uint64_t v393 = *v69;
      int64_t v771 = v392 - 16;
      sub_2484017B8((uint64_t)&v801, v392 - 16, *v69);
      int v394 = v805;
      if (v805)
      {
        uint64_t v68 = v805;
      }
      else
      {
        int v731 = v9;
        long long v813 = v801;
        uint64_t v814 = v802;
        uint64_t v815 = v803;
        uint64_t v748 = v803;
        uint64_t v816 = v804;
        v817[0] = v771;
        v817[1] = v393;
        v817[2] = 0;
        if (*v11)
        {
          unint64_t v601 = 0;
          uint64_t v602 = v391 >> 2;
          uint64_t v770 = ~v602;
          uint64_t v767 = -v602 - v602;
          uint64_t v756 = -4 * v602;
          uint64_t v765 = 2 - v602;
          uint64_t v793 = v602;
          do
          {
            uint64_t v776 = *(void *)(v740 + 16);
            __pb = *(char **)(v740 + 24);
            v603 = &__pb[v776 * v601];
            sub_2484285D8(v740, v601, a9, a6, (unsigned int *)&v813);
            v604 = v808[0];
            *(_DWORD *)v808[0] = a6;
            v604[1] = v731;
            v604[2] = v601;
            v604[9] = 0;
            unint64_t v605 = *v69;
            if (v601 >= 2 && (v605 >= 9 ? (BOOL v606 = v771 == 0) : (BOOL v606 = 0), v606))
            {
              uint64_t v607 = 0;
              char v608 = 1;
              uint64_t v609 = v602;
              do
              {
                char v610 = v608;
                v611 = &v603[4 * v607];
                sub_2484287D0((uint64_t)&v801, (_DWORD *)v808[0], *v69, (uint64_t)v611, v609, v607, v601, &v828, &v813);
                unint64_t v612 = sub_248409368(a2, (int)v801, a1);
                char v608 = 0;
                *(_DWORD *)v611 = DWORD2(v801) + ((v612 >> 1) ^ -(v612 & 1)) * HIDWORD(v802);
                uint64_t v607 = 1;
              }
              while ((v610 & 1) != 0);
              unint64_t v615 = *v69;
              unint64_t v616 = *v69 - 2;
              if (v616 >= 3)
              {
                v617 = (char *)v808[0];
                unint64_t v618 = 2;
                uint64_t v620 = v767;
                uint64_t v619 = v770;
                uint64_t v622 = v756;
                uint64_t v621 = v765;
                unint64_t v788 = v601;
                do
                {
                  v623 = &v603[4 * v618];
                  uint64_t v624 = *(int *)&v623[4 * v619];
                  v613.i64[0] = *(void *)&v623[v622];
                  uint64_t v626 = *((int *)v623 - 2);
                  uint64_t v625 = *((int *)v623 - 1);
                  uint64_t v627 = *(int *)&v623[4 * v620];
                  uint64_t v628 = *(int *)&v623[4 * v621];
                  if (v613.i32[0] >= 0) {
                    LODWORD(v629) = v613.i32[0];
                  }
                  else {
                    uint64_t v629 = -(uint64_t)v613.i32[0];
                  }
                  *((_DWORD *)v617 + 3) = v618;
                  *((_DWORD *)v617 + 4) = v629;
                  if (v625 >= 0) {
                    LODWORD(v630) = v625;
                  }
                  else {
                    uint64_t v630 = -v625;
                  }
                  *((_DWORD *)v617 + 5) = v630;
                  *((_DWORD *)v617 + 6) = v613.i32[0];
                  int v631 = v625 - *((_DWORD *)v617 + 9);
                  *((_DWORD *)v617 + 7) = v625;
                  *((_DWORD *)v617 + 8) = v631;
                  int v632 = v613.i32[0] + v625 - v624;
                  v614.i32[0] = v624;
                  v633.i64[0] = vzip1q_s32(v614, v613).u64[0];
                  v633.i64[1] = __PAIR64__(v625, v633.u32[1]);
                  v634.i64[0] = v613.i64[0];
                  v634.i64[1] = __PAIR64__(v626, v627);
                  *((_DWORD *)v617 + 9) = v632;
                  *((_DWORD *)v617 + 10) = v625 - v624;
                  int32x4_t v614 = vsubq_s32(v633, v634);
                  *(int32x4_t *)(v617 + 44) = v614;
                  uint64_t v635 = *v16;
                  if ((v635 & 0x80000000) != 0)
                  {
                    LODWORD(v636) = 0;
                  }
                  else
                  {
                    uint64_t v636 = 0;
                    v637 = v16;
                    do
                    {
                      v638 = &v16[6 * v636];
                      signed int v639 = v638[1];
                      BOOL v640 = *(_DWORD *)&v617[4 * *((__int16 *)v638 + 10)] <= (int)v638[2];
                      signed int v641 = v638[3];
                      unsigned int v642 = v638[4];
                      int v643 = (*(_DWORD *)&v617[4 * *((__int16 *)v637 + 11)] <= v641) | 2;
                      if (*(_DWORD *)&v617[4 * v635] > v639) {
                        int v643 = v640;
                      }
                      LODWORD(v636) = v643 + v642;
                      v644 = &v16[6 * v636];
                      uint64_t v645 = *v644;
                      if ((v645 & 0x80000000) != 0) {
                        break;
                      }
                      v646 = &v16[6 * v636];
                      signed int v647 = v646[1];
                      BOOL v648 = *(_DWORD *)&v617[4 * *((__int16 *)v646 + 10)] <= (int)v646[2];
                      signed int v649 = v646[3];
                      unsigned int v650 = v646[4];
                      int v651 = (*(_DWORD *)&v617[4 * *((__int16 *)v644 + 11)] <= v649) | 2;
                      if (*(_DWORD *)&v617[4 * v645] > v647) {
                        int v651 = v648;
                      }
                      uint64_t v636 = v651 + v650;
                      v637 = &v16[6 * v636];
                      uint64_t v635 = *v637;
                    }
                    while ((v635 & 0x80000000) == 0);
                  }
                  LODWORD(v652) = 0;
                  v653 = &v16[6 * v636];
                  unsigned int v654 = v653[2];
                  unsigned int v655 = v653[5];
                  uint64_t v656 = (int)v653[4];
                  switch(v653[1])
                  {
                    case 1u:
                      LODWORD(v652) = v625;
                      break;
                    case 2u:
                      LODWORD(v652) = v613.i32[0];
                      break;
                    case 3u:
                      BOOL v496 = __OFADD__(v613.i32[0], v625);
                      uint64_t v658 = v613.i32[0] + v625;
                      char v657 = (v658 < 0) ^ v496;
                      goto LABEL_675;
                    case 4u:
                      uint64_t v659 = v613.i32[0] + v625 - v624;
                      unint64_t v660 = v659 - v625;
                      if (v659 - v625 < 0) {
                        unint64_t v660 = v625 - v659;
                      }
                      uint64_t v661 = v659 - v613.i32[0];
                      if (v661 < 0) {
                        uint64_t v661 = -v661;
                      }
                      if (v660 >= v661) {
                        LODWORD(v652) = v613.i32[0];
                      }
                      else {
                        LODWORD(v652) = v625;
                      }
                      break;
                    case 5u:
                      if (v613.i32[0] >= (int)v625) {
                        int v662 = v625;
                      }
                      else {
                        int v662 = v613.i32[0];
                      }
                      if ((int)v625 <= v613.i32[0]) {
                        LODWORD(v625) = v613.i32[0];
                      }
                      if (v662 <= (int)v624) {
                        int v663 = v632;
                      }
                      else {
                        int v663 = v625;
                      }
                      if ((int)v625 >= (int)v624) {
                        LODWORD(v652) = v663;
                      }
                      else {
                        LODWORD(v652) = v662;
                      }
                      break;
                    case 7u:
                      LODWORD(v652) = v613.i32[1];
                      break;
                    case 8u:
                      LODWORD(v652) = v624;
                      break;
                    case 9u:
                      LODWORD(v652) = v626;
                      break;
                    case 0xAu:
                      BOOL v496 = __OFADD__(v624, v625);
                      uint64_t v658 = v624 + v625;
                      char v657 = (v658 < 0) ^ v496;
                      goto LABEL_675;
                    case 0xBu:
                      uint64_t v658 = v624 + v613.i32[0];
                      char v657 = (v658 < 0) ^ __OFADD__(v624, v613.i32[0]);
                      goto LABEL_675;
                    case 0xCu:
                      uint64_t v658 = v613.i32[1] + (uint64_t)v613.i32[0];
                      char v657 = (v658 < 0) ^ __OFADD__(v613.i32[1], v613.i32[0]);
LABEL_675:
                      if (v657) {
                        ++v658;
                      }
                      uint64_t v652 = v658 >> 1;
                      break;
                    case 0xDu:
                      uint64_t v689 = 6 * v613.i32[0] - v625 + 8 * v625 + v626 + 3 * v613.i32[1] - 2 * v627 + v628;
                      uint64_t v690 = v689 + 8;
                      uint64_t v691 = v689 + 23;
                      if (v690 >= 0) {
                        uint64_t v691 = v690;
                      }
                      uint64_t v652 = v691 >> 4;
                      break;
                    default:
                      break;
                  }
                  v664 = (void *)a1[2];
                  if ((unint64_t)v664 > a1[3])
                  {
                    unsigned int v742 = v653[5];
                    unsigned int v745 = v653[2];
                    sub_2483EB0C0(a1);
                    unsigned int v655 = v742;
                    unsigned int v654 = v745;
                    uint64_t v622 = v756;
                    uint64_t v621 = v765;
                    uint64_t v620 = v767;
                    uint64_t v619 = v770;
                  }
                  else
                  {
                    unint64_t v665 = a1[1];
                    unint64_t v666 = *a1 | (*v664 << v665);
                    a1[2] = (unint64_t)v664 + ((63 - v665) >> 3);
                    *a1 = v666;
                    a1[1] = v665 | 0x38;
                  }
                  if (*(unsigned char *)(a2 + 16))
                  {
                    unsigned int v743 = v655;
                    unsigned int v746 = v654;
                    unsigned int v692 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * (int)v656), a1);
                    uint64_t v622 = v756;
                    uint64_t v621 = v765;
                    uint64_t v620 = v767;
                    uint64_t v619 = v770;
                    unint64_t v674 = v692;
                    unsigned int v655 = v743;
                    unsigned int v654 = v746;
                  }
                  else
                  {
                    int v667 = *(_DWORD *)(a2 + 20);
                    unint64_t v668 = (unint64_t)(v667 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    unint64_t v669 = *(_DWORD *)(a2 + 40) & v667 & 0xFFFu;
                    uint64_t v670 = *(void *)(*(void *)a2 + 8 * (v656 << *(_DWORD *)(a2 + 32)) + 8 * v668);
                    if (v670 <= v669) {
                      unint64_t v671 = *(void *)(*(void *)a2 + 8 * (v656 << *(_DWORD *)(a2 + 32)) + 8 * v668);
                    }
                    else {
                      unint64_t v671 = 0;
                    }
                    unint64_t v672 = HIDWORD(v671);
                    unint64_t v673 = HIWORD(v671);
                    if (v670 <= v669) {
                      unint64_t v674 = BYTE1(v670);
                    }
                    else {
                      unint64_t v674 = (unint64_t)(v667 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    }
                    unsigned int v675 = v669 + (unsigned __int16)v672 + (v673 ^ WORD1(v670)) * (*(_DWORD *)(a2 + 20) >> 12);
                    BOOL v676 = v675 < 0x10000;
                    unint64_t v677 = *a1 >> (16 * v676);
                    if (v675 < 0x10000) {
                      unsigned int v675 = (unsigned __int16)*a1 | ((unsigned __int16)v675 << 16);
                    }
                    *(_DWORD *)(a2 + 20) = v675;
                    uint64_t v678 = a1[1] - 16 * v676;
                    *a1 = v677;
                    a1[1] = v678;
                  }
                  v679 = (int *)(*(void *)(a2 + 24) + 16 * v656);
                  unint64_t v680 = v679[1];
                  BOOL v58 = v674 >= v680;
                  unint64_t v681 = v674 - v680;
                  if (v58)
                  {
                    int v682 = *v679;
                    v685 = v679 + 2;
                    int v683 = v679[2];
                    int v684 = v685[1];
                    char v686 = v682 - (v683 + v684) + (v681 >> (v683 + v684));
                    int v687 = *a1 & ~(-1 << v686);
                    unint64_t v688 = a1[1] - (v686 & 0x1F);
                    *a1 >>= v686 & 0x1F;
                    a1[1] = v688;
                    LODWORD(v674) = v674 & ~(-1 << v684) | ((unint64_t)(v687 | (((v674 >> v684) & ((1 << v683) - 1) | (1 << v683)) << v686)) << v684);
                  }
                  unint64_t v601 = v788;
                  *(_DWORD *)v623 = v652 + v655 + ((v674 >> 1) ^ -(v674 & 1)) * v654;
                  ++v618;
                  int v69 = v794;
                  unint64_t v615 = *v794;
                  unint64_t v616 = *v794 - 2;
                }
                while (v618 < v616);
              }
              uint64_t v602 = v793;
              if (v616 < v615)
              {
                v693 = &__pb[4 * v616 + v776 * v601];
                do
                {
                  sub_2484287D0((uint64_t)&v801, (_DWORD *)v808[0], v615, (uint64_t)v693, v793, v616, v601, &v828, &v813);
                  unint64_t v694 = sub_248409368(a2, (int)v801, a1);
                  *(_DWORD *)v693 = DWORD2(v801) + ((v694 >> 1) ^ -(v694 & 1)) * HIDWORD(v802);
                  v693 += 4;
                  ++v616;
                  unint64_t v615 = *v69;
                }
                while (v616 < *v69);
              }
            }
            else if (v605)
            {
              unint64_t v695 = 0;
              do
              {
                sub_2484287D0((uint64_t)&v801, (_DWORD *)v808[0], v605, (uint64_t)v603, v602, v695, v601, &v828, &v813);
                uint64_t v696 = (int)v801;
                v697 = (void *)a1[2];
                if ((unint64_t)v697 > a1[3])
                {
                  sub_2483EB0C0(a1);
                }
                else
                {
                  unint64_t v698 = a1[1];
                  unint64_t v699 = *a1 | (*v697 << v698);
                  a1[2] = (unint64_t)v697 + ((63 - v698) >> 3);
                  *a1 = v699;
                  a1[1] = v698 | 0x38;
                }
                if (*(unsigned char *)(a2 + 16))
                {
                  unint64_t v707 = sub_248409FB4(*(void *)(*(void *)(a2 + 8) + 24 * (int)v696), a1);
                }
                else
                {
                  int v700 = *(_DWORD *)(a2 + 20);
                  unint64_t v701 = (unint64_t)(v700 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  unint64_t v702 = *(_DWORD *)(a2 + 40) & v700 & 0xFFFu;
                  uint64_t v703 = *(void *)(*(void *)a2 + 8 * (v696 << *(_DWORD *)(a2 + 32)) + 8 * v701);
                  if (v703 <= v702) {
                    unint64_t v704 = *(void *)(*(void *)a2 + 8 * (v696 << *(_DWORD *)(a2 + 32)) + 8 * v701);
                  }
                  else {
                    unint64_t v704 = 0;
                  }
                  unint64_t v705 = HIDWORD(v704);
                  unint64_t v706 = HIWORD(v704);
                  if (v703 <= v702) {
                    unint64_t v707 = BYTE1(v703);
                  }
                  else {
                    unint64_t v707 = (unint64_t)(v700 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  }
                  unsigned int v708 = v702 + (unsigned __int16)v705 + (v706 ^ WORD1(v703)) * (*(_DWORD *)(a2 + 20) >> 12);
                  BOOL v709 = v708 < 0x10000;
                  unint64_t v710 = *a1 >> (16 * v709);
                  if (v708 < 0x10000) {
                    unsigned int v708 = (unsigned __int16)*a1 | ((unsigned __int16)v708 << 16);
                  }
                  *(_DWORD *)(a2 + 20) = v708;
                  uint64_t v711 = a1[1] - 16 * v709;
                  *a1 = v710;
                  a1[1] = v711;
                }
                v712 = (int *)(*(void *)(a2 + 24) + 16 * v696);
                unint64_t v713 = v712[1];
                BOOL v58 = v707 >= v713;
                unint64_t v714 = v707 - v713;
                if (v58)
                {
                  int v715 = *v712;
                  v718 = v712 + 2;
                  int v716 = v712[2];
                  int v717 = v718[1];
                  char v719 = v715 - (v716 + v717) + (v714 >> (v716 + v717));
                  int v720 = *a1 & ~(-1 << v719);
                  unint64_t v721 = a1[1] - (v719 & 0x1F);
                  *a1 >>= v719 & 0x1F;
                  a1[1] = v721;
                  LODWORD(v707) = v707 & ~(-1 << v717) | ((unint64_t)(v720 | (((v707 >> v717) & ((1 << v716) - 1) | (1 << v716)) << v719)) << v717);
                }
                uint64_t v602 = v793;
                *(_DWORD *)v603 = DWORD2(v801) + ((v707 >> 1) ^ -(v707 & 1)) * HIDWORD(v802);
                v603 += 4;
                ++v695;
                unint64_t v605 = *v69;
              }
              while (v695 < *v69);
            }
            ++v601;
          }
          while (v601 < *v739);
        }
        uint64_t v815 = 0;
        if (v748)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v748 - 24));
          free(*(void **)(v748 - 32));
        }
        uint64_t v68 = 0;
        int v394 = 0;
      }
      if (v808[0])
      {
        v808[1] = v808[0];
        operator delete(v808[0]);
      }
      if (v394) {
        goto LABEL_399;
      }
    }
  }
LABEL_398:
  uint64_t v68 = 0;
LABEL_399:
  if (v828) {
    operator delete(v828);
  }
  return v68;
}

void sub_248427BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  if (a16)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a16 - 24));
    free(*(void **)(a16 - 32));
  }
  if (__p) {
    operator delete(__p);
  }
  if (*(void *)(v55 - 160)) {
    operator delete(*(void **)(v55 - 160));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_248427CF4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  unint64_t v4 = *(_DWORD *)(a1 + 40) & *(_DWORD *)(a1 + 20) & 0xFFFu;
  unint64_t v5 = *(void *)(*(void *)a1
                 + 8 * (a2 << *(_DWORD *)(a1 + 32))
                 + 8 * ((unint64_t)(*(_DWORD *)(a1 + 20) & 0xFFF) >> *(_DWORD *)(a1 + 36)));
  unint64_t v6 = v5;
  unint64_t v7 = BYTE1(v5);
  uint64_t v8 = WORD1(v5);
  unint64_t v9 = HIWORD(v5);
  BOOL v10 = v6 > v4;
  uint64_t v11 = v6 <= v4 ? v9 : 0;
  unint64_t v12 = v10 ? (unint64_t)(*(_DWORD *)(a1 + 20) & 0xFFF) >> *(_DWORD *)(a1 + 36) : v7;
  if ((v11 ^ v8) != 0x1000
    || v12 >= *(unsigned int *)(*(void *)(a1 + 24) + 16 * a2 + 4)
    || v12 >= *(unsigned int *)(a1 + 84))
  {
    return 0;
  }
  *a3 = v12;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = 1;
  if (v13 && a4)
  {
    do
    {
      int v15 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v15 + 1;
      *(_DWORD *)(v13 + 4 * (*(void *)&v15 & 0xFFFFFLL)) = v12;
      uint64_t v14 = 1;
      --a4;
    }
    while (a4);
  }
  return v14;
}

uint64_t sub_248427DB0(uint64_t *a1, uint64_t a2)
{
  BOOL v3 = (char *)operator new(0x10uLL);
  unint64_t v4 = v3 + 16;
  *(void *)BOOL v3 = 0x1FFFFFFFDFFLL;
  *((void *)v3 + 1) = 0;
  uint64_t v84 = a2 + 2048;
  uint64_t v85 = a2;
  uint64_t v83 = a2 + 1024;
  unint64_t v5 = v3 + 16;
  unint64_t v6 = v3 + 16;
  while (1)
  {
    int v8 = *((_DWORD *)v6 - 4);
    v6 -= 16;
    int v7 = v8;
    if ((v8 - 511) < 0xFFFFFC00) {
      break;
    }
    int v9 = *((_DWORD *)v6 + 1);
    if (v9 > 511) {
      break;
    }
    uint64_t v10 = *((void *)v6 + 1);
    uint64_t v11 = *a1;
    uint64_t v12 = *a1 + 24 * v10;
    uint64_t v13 = (__int16 *)(v12 + 20);
    if (*(_DWORD *)v12 != -1)
    {
      uint64_t v14 = v11 + 24 * v10;
      unsigned int v17 = *(_DWORD *)(v14 + 16);
      int v15 = (_DWORD *)(v14 + 16);
      uint64_t v16 = v17;
      if (*v13 < 2)
      {
        int v26 = *(_DWORD *)(v11 + 24 * v10 + 4);
        if (v6 < v4)
        {
          *((_DWORD *)v5 - 4) = v26;
          *((void *)v5 - 1) = v16;
          goto LABEL_64;
        }
        uint64_t v87 = *a1 + 24 * v10;
        int v88 = v15;
        uint64_t v31 = (v6 - v3) >> 4;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60) {
          sub_2483E92E8();
        }
        uint64_t v33 = v16;
        if ((v4 - v3) >> 3 > v32) {
          unint64_t v32 = (v4 - v3) >> 3;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34) {
          unint64_t v34 = (unint64_t)sub_2483F3EB0(v34);
        }
        else {
          uint64_t v35 = 0;
        }
        unint64_t v39 = v34 + 16 * v31;
        *(_DWORD *)unint64_t v39 = v26;
        *(_DWORD *)(v39 + 4) = v9;
        *(void *)(v39 + 8) = v33;
        if (v6 != v3)
        {
          unint64_t v40 = v34 + 16 * v31;
          do
          {
            char v41 = (char *)(v40 - 16);
            *(_OWORD *)(v40 - 16) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v40 -= 16;
          }
          while (v6 != v3);
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v18 = v11 + 24 * v10;
        int v21 = *(_DWORD *)(v18 + 8);
        uint64_t v19 = (int *)(v18 + 8);
        int v20 = v21;
        uint64_t v87 = *a1 + 24 * v10;
        int v88 = v15;
        if (v6 >= v4)
        {
          uint64_t v86 = v16;
          uint64_t v27 = (v6 - v3) >> 4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            sub_2483E92E8();
          }
          if ((v4 - v3) >> 3 > v28) {
            unint64_t v28 = (v4 - v3) >> 3;
          }
          if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)sub_2483F3EB0(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          unint64_t v36 = v29 + 16 * v27;
          *(_DWORD *)unint64_t v36 = v20;
          *(_DWORD *)(v36 + 4) = v9;
          *(void *)(v36 + 8) = v86;
          if (v6 == v3)
          {
            int v38 = (char *)(v29 + 16 * v27);
          }
          else
          {
            unint64_t v37 = v29 + 16 * v27;
            do
            {
              int v38 = (char *)(v37 - 16);
              *(_OWORD *)(v37 - 16) = *((_OWORD *)v6 - 1);
              v6 -= 16;
              v37 -= 16;
            }
            while (v6 != v3);
          }
          unint64_t v4 = (char *)(v29 + 16 * v30);
          unint64_t v5 = (char *)(v36 + 16);
          if (v3) {
            operator delete(v3);
          }
          BOOL v3 = v38;
          uint64_t v12 = v87;
          int v15 = v88;
        }
        else
        {
          *((_DWORD *)v5 - 4) = v20;
          *((void *)v5 - 1) = v16;
        }
        int v42 = *(_DWORD *)(v11 + 24 * v10 + 4);
        int v43 = *v19;
        uint64_t v44 = (*v15 + 1);
        if (v5 < v4)
        {
          *(_DWORD *)unint64_t v5 = v42;
          *((_DWORD *)v5 + 1) = v43;
          *((void *)v5 + 1) = v44;
          v5 += 16;
LABEL_64:
          if (*(__int16 *)(v12 + 22) < 2)
          {
            int v55 = *(_DWORD *)(v11 + 24 * v10 + 4);
            uint64_t v56 = (*v15 + 2);
            if (v5 >= v4)
            {
              uint64_t v62 = (v5 - v3) >> 4;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v63) {
                unint64_t v63 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64) {
                unint64_t v64 = (unint64_t)sub_2483F3EB0(v64);
              }
              else {
                uint64_t v65 = 0;
              }
              unint64_t v69 = v64 + 16 * v62;
              *(_DWORD *)unint64_t v69 = v7;
              *(_DWORD *)(v69 + 4) = v55;
              *(void *)(v69 + 8) = v56;
              if (v5 == v3)
              {
                int v71 = (char *)(v64 + 16 * v62);
              }
              else
              {
                unint64_t v70 = v64 + 16 * v62;
                do
                {
                  int v71 = (char *)(v70 - 16);
                  *(_OWORD *)(v70 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v70 -= 16;
                }
                while (v5 != v3);
              }
              unint64_t v4 = (char *)(v64 + 16 * v65);
              unint64_t v6 = (char *)(v69 + 16);
              if (v3) {
                operator delete(v3);
              }
              BOOL v3 = v71;
            }
            else
            {
              *(_DWORD *)unint64_t v5 = v7;
              *((_DWORD *)v5 + 1) = v55;
              unint64_t v6 = v5 + 16;
              *((void *)v5 + 1) = v56;
            }
          }
          else
          {
            uint64_t v48 = v11 + 24 * v10;
            int v51 = *(_DWORD *)(v48 + 12);
            unint64_t v49 = (int *)(v48 + 12);
            int v50 = v51;
            int v52 = *(v49 - 2);
            uint64_t v53 = (*v15 + 2);
            if (v5 >= v4)
            {
              unint64_t v57 = v15;
              uint64_t v58 = (v5 - v3) >> 4;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v59) {
                unint64_t v59 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v59;
              }
              if (v60) {
                unint64_t v60 = (unint64_t)sub_2483F3EB0(v60);
              }
              else {
                uint64_t v61 = 0;
              }
              unint64_t v66 = v60 + 16 * v58;
              *(_DWORD *)unint64_t v66 = v50;
              *(_DWORD *)(v66 + 4) = v52;
              *(void *)(v66 + 8) = v53;
              if (v5 == v3)
              {
                uint64_t v68 = (char *)(v60 + 16 * v58);
              }
              else
              {
                unint64_t v67 = v60 + 16 * v58;
                do
                {
                  uint64_t v68 = (char *)(v67 - 16);
                  *(_OWORD *)(v67 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v67 -= 16;
                }
                while (v5 != v3);
              }
              unint64_t v4 = (char *)(v60 + 16 * v61);
              unint64_t v54 = (char *)(v66 + 16);
              if (v3) {
                operator delete(v3);
              }
              BOOL v3 = v68;
              int v15 = v57;
            }
            else
            {
              *(_DWORD *)unint64_t v5 = v50;
              *((_DWORD *)v5 + 1) = v52;
              unint64_t v54 = v5 + 16;
              *((void *)v5 + 1) = v53;
            }
            int v72 = *v49;
            uint64_t v73 = (*v15 + 3);
            if (v54 >= v4)
            {
              uint64_t v74 = (v54 - v3) >> 4;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 60) {
                sub_2483E92E8();
              }
              if ((v4 - v3) >> 3 > v75) {
                unint64_t v75 = (v4 - v3) >> 3;
              }
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76) {
                unint64_t v76 = (unint64_t)sub_2483F3EB0(v76);
              }
              else {
                uint64_t v77 = 0;
              }
              unint64_t v78 = v76 + 16 * v74;
              *(_DWORD *)unint64_t v78 = v7;
              *(_DWORD *)(v78 + 4) = v72;
              *(void *)(v78 + 8) = v73;
              if (v54 == v3)
              {
                int v80 = (char *)(v76 + 16 * v74);
              }
              else
              {
                unint64_t v79 = v76 + 16 * v74;
                do
                {
                  int v80 = (char *)(v79 - 16);
                  *(_OWORD *)(v79 - 16) = *((_OWORD *)v54 - 1);
                  v54 -= 16;
                  v79 -= 16;
                }
                while (v54 != v3);
              }
              unint64_t v4 = (char *)(v76 + 16 * v77);
              unint64_t v6 = (char *)(v78 + 16);
              if (v3) {
                operator delete(v3);
              }
              BOOL v3 = v80;
            }
            else
            {
              *(_DWORD *)unint64_t v54 = v7;
              *((_DWORD *)v54 + 1) = v72;
              unint64_t v6 = v54 + 16;
              *((void *)v54 + 1) = v73;
            }
          }
          goto LABEL_122;
        }
        uint64_t v45 = (v5 - v3) >> 4;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60) {
          sub_2483E92E8();
        }
        if ((v4 - v3) >> 3 > v46) {
          unint64_t v46 = (v4 - v3) >> 3;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v46;
        }
        if (v34) {
          unint64_t v34 = (unint64_t)sub_2483F3EB0(v34);
        }
        else {
          uint64_t v35 = 0;
        }
        unint64_t v39 = v34 + 16 * v45;
        *(_DWORD *)unint64_t v39 = v42;
        *(_DWORD *)(v39 + 4) = v43;
        *(void *)(v39 + 8) = v44;
        if (v5 != v3)
        {
          unint64_t v47 = v34 + 16 * v45;
          do
          {
            char v41 = (char *)(v47 - 16);
            *(_OWORD *)(v47 - 16) = *((_OWORD *)v5 - 1);
            v5 -= 16;
            v47 -= 16;
          }
          while (v5 != v3);
          goto LABEL_61;
        }
      }
      char v41 = (char *)v39;
LABEL_61:
      unint64_t v4 = (char *)(v34 + 16 * v35);
      unint64_t v5 = (char *)(v39 + 16);
      if (v3) {
        operator delete(v3);
      }
      BOOL v3 = v41;
      uint64_t v12 = v87;
      int v15 = v88;
      goto LABEL_64;
    }
    if (*(_DWORD *)v13 != (char)*(_DWORD *)v13) {
      break;
    }
    uint64_t v22 = v11 + 24 * v10;
    int v24 = *(_DWORD *)(v22 + 8);
    unsigned int v23 = (_DWORD *)(v22 + 8);
    if (v24 != (char)v24) {
      break;
    }
    if (v7 < v9)
    {
      do
      {
        unsigned int v25 = v7 + 513;
        *(unsigned char *)(v85 + v25) = *(_DWORD *)(v11 + 24 * v10 + 16);
        *(unsigned char *)(v84 + v25) = *v23;
        *(unsigned char *)(v83 + v25) = *(_DWORD *)v13;
        ++v7;
      }
      while (v9 != v7);
    }
LABEL_122:
    unint64_t v5 = v6;
    if (v3 == v6)
    {
      uint64_t v81 = 1;
      goto LABEL_125;
    }
  }
  uint64_t v81 = 0;
  uint64_t result = 0;
  if (!v3) {
    return result;
  }
LABEL_125:
  operator delete(v3);
  return v81;
}

void sub_2484283F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248428438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = &unk_26FC66948;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 424) = unk_24854D68C;
  *(_OWORD *)(a1 + 440) = xmmword_24854D69C;
  *(_OWORD *)(a1 + 456) = unk_24854D6AC;
  *(_OWORD *)(a1 + 360) = unk_24854D64C;
  *(_OWORD *)(a1 + 376) = xmmword_24854D65C;
  *(_OWORD *)(a1 + 392) = unk_24854D66C;
  *(_OWORD *)(a1 + 408) = xmmword_24854D67C;
  *(_OWORD *)(a1 + 296) = unk_24854D60C;
  *(_OWORD *)(a1 + 312) = xmmword_24854D61C;
  unint64_t v6 = (char **)(a1 + 136);
  *(_OWORD *)(a1 + 328) = unk_24854D62C;
  *(_OWORD *)(a1 + 344) = xmmword_24854D63C;
  *(_OWORD *)(a1 + 216) = xmmword_24854D5BC;
  *(_OWORD *)(a1 + 232) = unk_24854D5CC;
  *(_OWORD *)(a1 + 248) = xmmword_24854D5DC;
  unint64_t v7 = 2 * a3 + 4;
  uint64_t v8 = 40;
  *(_OWORD *)(a1 + 264) = unk_24854D5EC;
  *(_OWORD *)(a1 + 280) = xmmword_24854D5FC;
  do
  {
    sub_2483EB1C4((char **)(a1 + v8), v7);
    v8 += 24;
  }
  while (v8 != 136);
  sub_2483EB1C4(v6, v7);
  return a1;
}

void sub_24842853C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 144) = v4;
    operator delete(v4);
  }
  uint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = *(void **)(v1 + v5 + 112);
    if (v6)
    {
      *(void *)(v1 + v5 + 120) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -96) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_248428580(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    long long v4 = *(void **)(a1 + i + 112);
    if (v4)
    {
      *(void *)(a1 + i + 120) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_2484285D8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned int *a5)
{
  if (*a5 && a5[1])
  {
    unint64_t v10 = 0;
    do
      bzero((void *)(*((void *)a5 + 3) + *((void *)a5 + 2) * v10++), 4 * *a5);
    while (v10 < a5[1]);
  }
  if (a4 >= 1)
  {
    unint64_t v11 = *((void *)a5 + 5);
    if (v11)
    {
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = *a3;
      uint64_t v15 = a4;
      unint64_t v16 = *a3 + ((unint64_t)a4 << 6);
      uint64_t v17 = *(void *)(v16 + 40);
      uint64_t v18 = (void *)(v16 + 48);
      uint64_t v19 = (_DWORD *)(v16 + 56);
      int v20 = (_DWORD *)(v16 + 60);
      uint64_t v21 = a2 - 1;
      if (!a2) {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = 4 * (*((void *)a5 + 2) >> 2);
      do
      {
        uint64_t v24 = (v15 - 1);
        unsigned int v25 = (void *)(v14 + (v24 << 6));
        if (v25[5] == v17 && v25[6] == *v18)
        {
          uint64_t v26 = v14 + (v24 << 6);
          if (*(_DWORD *)(v26 + 56) == *v19 && *(_DWORD *)(v26 + 60) == *v20)
          {
            if (v22)
            {
              uint64_t v27 = 0;
              uint64_t v30 = v25 + 2;
              uint64_t v28 = v25[2];
              uint64_t v29 = v30[1];
              uint64_t v31 = (int *)(v29 + v28 * a2);
              unint64_t v32 = (int *)(v29 + v28 * v21);
              uint64_t v33 = (_DWORD *)(*((void *)a5 + 3) + 4 * v12 + 8);
              unint64_t v34 = v32;
              uint64_t v35 = v31;
              do
              {
                uint64_t v37 = *v35++;
                uint64_t v36 = v37;
                if (v37 >= 0) {
                  LODWORD(v38) = v36;
                }
                else {
                  uint64_t v38 = -v36;
                }
                *(v33 - 2) = v38;
                *(v33 - 1) = v36;
                if (v27)
                {
                  int v39 = *(v31 - 1);
                  if (a2)
                  {
                    int v40 = *(v34 - 1);
                    int v41 = *v34;
                  }
                  else
                  {
                    int v41 = v39;
                    int v40 = v39;
                  }
                }
                else
                {
                  int v39 = 0;
                  if (a2)
                  {
                    int v40 = 0;
                    int v41 = *v32;
                  }
                  else
                  {
                    int v41 = 0;
                    int v40 = 0;
                  }
                }
                if (v41 >= v39) {
                  int v42 = v39;
                }
                else {
                  int v42 = v41;
                }
                if (v39 <= v41) {
                  int v43 = v41;
                }
                else {
                  int v43 = v39;
                }
                int v44 = v41 + v39 - v40;
                if (v42 > v40) {
                  int v44 = v43;
                }
                if (v43 < v40) {
                  int v44 = v42;
                }
                uint64_t v45 = v36 - v44;
                if (v45 >= 0) {
                  LODWORD(v46) = v45;
                }
                else {
                  uint64_t v46 = -v45;
                }
                *uint64_t v33 = v46;
                v33[1] = v45;
                ++v27;
                uint64_t v33 = (_DWORD *)((char *)v33 + v23);
                ++v34;
                uint64_t v31 = v35;
              }
              while (v22 != v27);
            }
            v13 += 4;
          }
        }
        if (v15 < 2) {
          break;
        }
        uint64_t v12 = v13;
        --v15;
      }
      while (v11 > v13);
    }
  }
}

uint64_t sub_2484287D0(uint64_t result, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, signed int a6, unsigned int a7, unsigned int **a8, void *a9)
{
  if (!a6)
  {
    if (!a7)
    {
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      goto LABEL_20;
    }
    int v9 = *(_DWORD *)(a4 - 4 * a5);
    uint64_t v12 = v9;
    uint64_t v10 = v9;
    uint64_t v11 = v9;
    goto LABEL_6;
  }
  int v9 = *(_DWORD *)(a4 - 4);
  uint64_t v10 = v9;
  if (a7)
  {
    uint64_t v11 = *(int *)(a4 + 4 * ~a5);
    uint64_t v12 = *(int *)(a4 - 4 * a5);
LABEL_6:
    char v13 = 1;
    if (a6 + 1 >= a3) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = *(int *)(a4 + 4 * (1 - a5));
    }
    goto LABEL_10;
  }
  char v13 = 0;
  uint64_t v11 = v9;
  uint64_t v12 = v9;
  uint64_t v14 = v9;
LABEL_10:
  uint64_t v15 = v10;
  if (a6 >= 2) {
    uint64_t v15 = *(int *)(a4 - 8);
  }
  uint64_t v16 = v12;
  if (a7 >= 2) {
    uint64_t v16 = *(int *)(a4 - 8 * a5);
  }
  char v17 = v13 ^ 1;
  if (a6 + 2 >= a3) {
    char v17 = 1;
  }
  if (v17) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = *(int *)(a4 + 4 * (2 - a5));
  }
LABEL_20:
  if (v12 >= 0) {
    LODWORD(v19) = v12;
  }
  else {
    uint64_t v19 = -v12;
  }
  a2[3] = a6;
  a2[4] = v19;
  if (v10 >= 0) {
    LODWORD(v20) = v10;
  }
  else {
    uint64_t v20 = -v10;
  }
  a2[5] = v20;
  a2[6] = v12;
  int v21 = v9 - a2[9];
  a2[7] = v9;
  a2[8] = v21;
  uint64_t v22 = v10 + v12;
  uint64_t v23 = v10 + v12 - v11;
  a2[9] = v23;
  a2[10] = v9 - v11;
  a2[11] = v11 - v12;
  a2[12] = v12 - v14;
  a2[13] = v12 - v16;
  a2[14] = v9 - v15;
  uint64_t v24 = a9[5];
  if (v24)
  {
    unsigned int v25 = (int *)(a9[3] + a9[2] * a6);
    uint64_t v26 = a2 + 16;
    do
    {
      int v27 = *v25++;
      *v26++ = v27;
      --v24;
    }
    while (v24);
  }
  uint64_t v28 = *a8;
  uint64_t v29 = **a8;
  if ((v29 & 0x80000000) != 0)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = *a8;
    do
    {
      unint64_t v32 = &v28[6 * v30];
      int v33 = v32[1];
      BOOL v34 = a2[*((__int16 *)v32 + 10)] <= (int)v32[2];
      int v36 = v32[3];
      unsigned int v35 = v32[4];
      int v37 = (a2[*((__int16 *)v31 + 11)] <= v36) | 2;
      if (a2[v29] > v33) {
        int v37 = v34;
      }
      LODWORD(v30) = v37 + v35;
      uint64_t v38 = &v28[6 * v30];
      uint64_t v39 = *v38;
      if ((v39 & 0x80000000) != 0) {
        break;
      }
      int v40 = &v28[6 * v30];
      int v41 = v40[1];
      BOOL v42 = a2[*((__int16 *)v40 + 10)] <= (int)v40[2];
      int v44 = v40[3];
      unsigned int v43 = v40[4];
      int v45 = (a2[*((__int16 *)v38 + 11)] <= v44) | 2;
      if (a2[v39] > v41) {
        int v45 = v42;
      }
      uint64_t v30 = v45 + v43;
      uint64_t v31 = &v28[6 * v30];
      uint64_t v29 = *v31;
    }
    while ((v29 & 0x80000000) == 0);
  }
  uint64_t v46 = 0;
  unint64_t v47 = &v28[6 * v30];
  unsigned int v48 = v47[1];
  unsigned int v49 = v47[2];
  uint64_t v50 = (int)v47[5];
  *(_DWORD *)uint64_t result = v47[4];
  *(_DWORD *)(result + 20) = v49;
  switch(v48)
  {
    case 1u:
      uint64_t v46 = v10;
      break;
    case 2u:
      uint64_t v46 = v12;
      break;
    case 3u:
      if (v22 >= 0) {
        uint64_t v51 = v10 + v12;
      }
      else {
        uint64_t v51 = v22 + 1;
      }
      goto LABEL_71;
    case 4u:
      unint64_t v52 = v12 - v11;
      if (v12 - v11 < 0) {
        unint64_t v52 = v11 - v12;
      }
      unint64_t v53 = v10 - v11;
      if (v23 - v12 < 0) {
        unint64_t v53 = v12 - v23;
      }
      if (v52 >= v53) {
        uint64_t v46 = v12;
      }
      else {
        uint64_t v46 = v10;
      }
      break;
    case 5u:
      if (v9 >= (int)v12) {
        int v54 = v12;
      }
      else {
        int v54 = v9;
      }
      if (v9 <= (int)v12) {
        int v55 = v12;
      }
      else {
        int v55 = v9;
      }
      int v56 = v9 + v12 - v11;
      if (v54 > (int)v11) {
        int v56 = v55;
      }
      if (v55 >= (int)v11) {
        int v54 = v56;
      }
      uint64_t v46 = v54;
      break;
    case 7u:
      uint64_t v46 = v14;
      break;
    case 8u:
      uint64_t v46 = v11;
      break;
    case 9u:
      uint64_t v46 = v15;
      break;
    case 0xAu:
      BOOL v57 = __OFADD__(v11, v10);
      uint64_t v51 = v11 + v10;
      char v58 = (v51 < 0) ^ v57;
      goto LABEL_69;
    case 0xBu:
      uint64_t v51 = v11 + v12;
      char v58 = (v11 + v12 < 0) ^ __OFADD__(v11, v12);
      goto LABEL_69;
    case 0xCu:
      uint64_t v51 = v12 + v14;
      char v58 = (v12 + v14 < 0) ^ __OFADD__(v12, v14);
LABEL_69:
      if (v58) {
        ++v51;
      }
LABEL_71:
      uint64_t v46 = v51 >> 1;
      break;
    case 0xDu:
      uint64_t v59 = 3 * v14 - 2 * v16 + 6 * (int)v12 - v10 + 8 * v10 + v15 + v18;
      uint64_t v60 = v59 + 8;
      uint64_t v61 = v59 + 23;
      if (v60 >= 0) {
        uint64_t v61 = v60;
      }
      uint64_t v46 = v61 >> 4;
      break;
    default:
      break;
  }
  *(void *)(result + 8) = v46 + v50;
  *(_DWORD *)(result + 16) = v48;
  return result;
}

uint64_t sub_248428B48(uint64_t result, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, signed int a6, unsigned int a7, unsigned int **a8, void *a9, uint64_t a10)
{
  uint64_t v10 = a6;
  if (!a6)
  {
    if (!a7)
    {
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      int v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v17 = 0;
      uint64_t v20 = 0;
      goto LABEL_20;
    }
    int v11 = *(_DWORD *)(a4 - 4 * a5);
    uint64_t v14 = v11;
    uint64_t v12 = v11;
    uint64_t v13 = v11;
    goto LABEL_6;
  }
  int v11 = *(_DWORD *)(a4 - 4);
  uint64_t v12 = v11;
  if (a7)
  {
    uint64_t v13 = *(int *)(a4 + 4 * ~a5);
    uint64_t v14 = *(int *)(a4 - 4 * a5);
LABEL_6:
    char v15 = 1;
    if (a6 + 1 >= a3) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = *(int *)(a4 + 4 * (1 - a5));
    }
    goto LABEL_10;
  }
  char v15 = 0;
  uint64_t v13 = v11;
  uint64_t v14 = v11;
  uint64_t v16 = v11;
LABEL_10:
  uint64_t v17 = v12;
  if (a6 >= 2) {
    uint64_t v17 = *(int *)(a4 - 8);
  }
  uint64_t v18 = v14;
  if (a7 >= 2) {
    uint64_t v18 = *(int *)(a4 - 8 * a5);
  }
  char v19 = v15 ^ 1;
  if (a6 + 2 >= a3) {
    char v19 = 1;
  }
  if (v19) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = *(int *)(a4 + 4 * (2 - a5));
  }
LABEL_20:
  uint64_t v21 = 0;
  if (v14 >= 0) {
    LODWORD(v22) = v14;
  }
  else {
    uint64_t v22 = -v14;
  }
  a2[3] = a6;
  a2[4] = v22;
  if (v12 >= 0) {
    LODWORD(v23) = v12;
  }
  else {
    uint64_t v23 = -v12;
  }
  int v24 = v11 - a2[9];
  a2[5] = v23;
  a2[6] = v14;
  a2[7] = v11;
  a2[8] = v24;
  uint64_t v25 = v12 + v14;
  uint64_t v26 = v12 + v14 - v13;
  a2[9] = v26;
  a2[10] = v11 - v13;
  a2[11] = v13 - v14;
  a2[12] = v14 - v16;
  unint64_t v27 = a3 + 2;
  if (a7) {
    unint64_t v28 = a3 + 2;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v28 + a6;
  if (a3 - 1 <= a6) {
    unint64_t v30 = v28 + a6;
  }
  else {
    unint64_t v30 = v29 + 1;
  }
  a2[13] = v14 - v18;
  a2[14] = v11 - v17;
  if (a6) {
    unint64_t v31 = v29 - 1;
  }
  else {
    unint64_t v31 = v28;
  }
  for (uint64_t i = 40; i != 136; i += 24)
  {
    unint64_t v33 = (*(_DWORD *)(*(void *)(a10 + i) + 4 * v30)
                       + *(_DWORD *)(*(void *)(a10 + i) + 4 * v29)
                       + *(_DWORD *)(*(void *)(a10 + i) + 4 * v31));
    int v34 = __clz(v33 + 1) ^ 0x3F;
    if (v34 <= 5) {
      LOBYTE(v34) = 5;
    }
    v96.i32[v21] = ((*(_DWORD *)(a10 + 4 * (v33 >> (v34 - 5)) + 216)
                                 * *(_DWORD *)(a10 + v21 * 4 + 200)) >> (v34 - 5))
                 + 4;
    ++v21;
  }
  uint64_t v35 = 8 * v14;
  uint64_t v36 = 8 * v12;
  uint64_t v37 = 8 * v16;
  if (a6)
  {
    if (a7) {
      unint64_t v38 = 0;
    }
    else {
      unint64_t v38 = v27;
    }
    uint64_t v39 = *(void *)(a10 + 136);
    uint64_t v40 = *(int *)(v39 + 4 * (v10 + v38) - 4);
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v39 = *(void *)(a10 + 136);
  }
  uint64_t v41 = 0;
  uint64_t v42 = *(int *)(v39 + 4 * v29);
  uint64_t v43 = *(int *)(v39 + 4 * v31);
  uint64_t v44 = v40 + v42;
  uint64_t v45 = *(int *)(v39 + 4 * v30);
  if (v42 >= 0) {
    unint64_t v46 = v42;
  }
  else {
    unint64_t v46 = -v42;
  }
  if (v40 >= 0) {
    unint64_t v47 = v40;
  }
  else {
    unint64_t v47 = -v40;
  }
  if (v46 <= v47) {
    uint64_t v48 = v40;
  }
  else {
    uint64_t v48 = v42;
  }
  if (v43 >= 0) {
    unint64_t v49 = v43;
  }
  else {
    unint64_t v49 = -v43;
  }
  if (v48 >= 0) {
    unint64_t v50 = v48;
  }
  else {
    unint64_t v50 = -v48;
  }
  if (v49 > v50) {
    uint64_t v48 = v43;
  }
  if (v45 >= 0) {
    unint64_t v51 = v45;
  }
  else {
    unint64_t v51 = -v45;
  }
  if (v48 >= 0) {
    unint64_t v52 = v48;
  }
  else {
    unint64_t v52 = -v48;
  }
  if (v51 > v52) {
    LODWORD(v48) = v45;
  }
  a2[15] = v48;
  uint64_t v53 = *(int *)(a10 + 176);
  uint64_t v54 = v35 - (((v44 + v45) * *(int *)(a10 + 172)) >> 5);
  *(void *)a10 = v37 - v35 + v36;
  *(void *)(a10 + 8) = v54;
  uint64_t v55 = v35
      - ((*(int *)(a10 + 180) * (uint64_t)(int)v43
        + *(int *)(a10 + 184) * (uint64_t)(int)v42
        + *(int *)(a10 + 188) * (uint64_t)(int)v45
        + 8 * ((v18 - v14) * *(int *)(a10 + 192) + (v13 - v12) * *(int *)(a10 + 196))) >> 5);
  *(void *)(a10 + 16) = v36 - (((v44 + v43) * v53) >> 5);
  *(void *)(a10 + 24) = v55;
  int32x4_t v97 = (int32x4_t)vshlq_u32(v96, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v96)) ^ 0x1F) - 4)));
  unsigned int v56 = vaddvq_s32(v97);
  uint64_t v57 = (v56 >> 1) - 1;
  do
  {
    v57 += *(void *)(a10 + 8 * v41) * v97.u32[v41];
    ++v41;
  }
  while (v41 != 4);
  uint64_t v58 = v43 ^ v42 | v40 ^ v42;
  if (v37 <= v35) {
    uint64_t v59 = 8 * v14;
  }
  else {
    uint64_t v59 = 8 * v16;
  }
  if (v36 > v59) {
    uint64_t v59 = 8 * v12;
  }
  if (v35 >= v37) {
    uint64_t v35 = 8 * v16;
  }
  if (v35 < v36) {
    uint64_t v36 = v35;
  }
  if ((v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24 < v59) {
    uint64_t v59 = (v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24;
  }
  if (v36 <= v59) {
    uint64_t v36 = v59;
  }
  if (v58 > 0) {
    uint64_t v36 = (v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24;
  }
  *(void *)(a10 + 32) = v36;
  uint64_t v60 = a9[5];
  if (v60)
  {
    uint64_t v61 = (int *)(a9[3] + a9[2] * v10);
    uint64_t v62 = a2 + 16;
    do
    {
      int v63 = *v61++;
      *v62++ = v63;
      --v60;
    }
    while (v60);
  }
  unint64_t v64 = *a8;
  uint64_t v65 = **a8;
  if ((v65 & 0x80000000) != 0)
  {
    LODWORD(v66) = 0;
  }
  else
  {
    uint64_t v66 = 0;
    unint64_t v67 = v64;
    do
    {
      uint64_t v68 = &v64[6 * v66];
      signed int v69 = v68[1];
      BOOL v70 = a2[*((__int16 *)v68 + 10)] <= (int)v68[2];
      signed int v72 = v68[3];
      unsigned int v71 = v68[4];
      int v73 = (a2[*((__int16 *)v67 + 11)] <= v72) | 2;
      if (a2[v65] > v69) {
        int v73 = v70;
      }
      LODWORD(v66) = v73 + v71;
      uint64_t v74 = &v64[6 * v66];
      uint64_t v75 = *v74;
      if ((v75 & 0x80000000) != 0) {
        break;
      }
      unint64_t v76 = &v64[6 * v66];
      signed int v77 = v76[1];
      BOOL v78 = a2[*((__int16 *)v76 + 10)] <= (int)v76[2];
      signed int v80 = v76[3];
      unsigned int v79 = v76[4];
      int v81 = (a2[*((__int16 *)v74 + 11)] <= v80) | 2;
      if (a2[v75] > v77) {
        int v81 = v78;
      }
      uint64_t v66 = v81 + v79;
      unint64_t v67 = &v64[6 * v66];
      uint64_t v65 = *v67;
    }
    while ((v65 & 0x80000000) == 0);
  }
  uint64_t v82 = &v64[6 * v66];
  unsigned int v83 = v82[1];
  unsigned int v84 = v82[2];
  uint64_t v85 = (int)v82[5];
  *(_DWORD *)uint64_t result = v82[4];
  *(_DWORD *)(result + 20) = v84;
  switch(v83)
  {
    case 1u:
      break;
    case 2u:
      uint64_t v12 = v14;
      break;
    case 3u:
      if (v25 >= 0) {
        uint64_t v86 = v12 + v14;
      }
      else {
        uint64_t v86 = v25 + 1;
      }
      goto LABEL_133;
    case 4u:
      unint64_t v87 = v14 - v13;
      if (v14 - v13 < 0) {
        unint64_t v87 = v13 - v14;
      }
      unint64_t v88 = v12 - v13;
      if (v26 - v14 < 0) {
        unint64_t v88 = v14 - v26;
      }
      if (v87 >= v88) {
        uint64_t v12 = v14;
      }
      break;
    case 5u:
      if (v11 >= (int)v14) {
        LODWORD(v12) = v14;
      }
      else {
        LODWORD(v12) = v11;
      }
      if (v11 <= (int)v14) {
        int v89 = v14;
      }
      else {
        int v89 = v11;
      }
      int v90 = v11 + v14 - v13;
      if ((int)v12 > (int)v13) {
        int v90 = v89;
      }
      if (v89 >= (int)v13) {
        LODWORD(v12) = v90;
      }
      uint64_t v12 = (int)v12;
      break;
    case 6u:
      uint64_t v12 = (v36 + 3) >> 3;
      break;
    case 7u:
      uint64_t v12 = v16;
      break;
    case 8u:
      uint64_t v12 = v13;
      break;
    case 9u:
      uint64_t v12 = v17;
      break;
    case 0xAu:
      BOOL v91 = __OFADD__(v13, v12);
      uint64_t v86 = v13 + v12;
      char v92 = (v86 < 0) ^ v91;
      goto LABEL_131;
    case 0xBu:
      uint64_t v86 = v13 + v14;
      char v92 = (v13 + v14 < 0) ^ __OFADD__(v13, v14);
      goto LABEL_131;
    case 0xCu:
      uint64_t v86 = v14 + v16;
      char v92 = (v14 + v16 < 0) ^ __OFADD__(v14, v16);
LABEL_131:
      if (v92) {
        ++v86;
      }
LABEL_133:
      uint64_t v12 = v86 >> 1;
      break;
    case 0xDu:
      uint64_t v93 = 3 * v16 - 2 * v18 + 6 * (int)v14 - v12 + 8 * v12 + v17 + v20;
      uint64_t v94 = v93 + 8;
      uint64_t v95 = v93 + 23;
      if (v94 >= 0) {
        uint64_t v95 = v94;
      }
      uint64_t v12 = v95 >> 4;
      break;
    default:
      uint64_t v12 = 0;
      break;
  }
  *(void *)(result + 8) = v12 + v85;
  *(_DWORD *)(result + 16) = v83;
  return result;
}

uint64_t sub_248429138(_DWORD *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(void *)a2 + 72))(a2, a1, a1 + 2))
  {
    int v5 = a1[3];
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 5, 16, &v5);
    if (!result)
    {
      a1[3] = v5;
      int v5 = a1[4];
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 5, 10, &v5);
      if (!result)
      {
        a1[4] = v5;
        int v5 = a1[5];
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 5, 7, &v5);
        if (!result)
        {
          a1[5] = v5;
          int v5 = a1[6];
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 5, 7, &v5);
          if (!result)
          {
            a1[6] = v5;
            int v5 = a1[7];
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(a2, 5, 7, &v5);
            if (!result)
            {
              a1[7] = v5;
              int v5 = a1[8];
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)a2 + 40))(a2, 5, 0, &v5);
              if (!result)
              {
                a1[8] = v5;
                int v5 = a1[9];
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)a2 + 40))(a2, 5, 0, &v5);
                if (!result)
                {
                  a1[9] = v5;
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 40))(a2, 4, 13, a1 + 10);
                  if (!result)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 40))(a2, 4, 12, a1 + 11);
                    if (!result)
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 40))(a2, 4, 12, a1 + 12);
                      if (!result) {
                        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 40))(a2, 4, 12, a1 + 13);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_2484294A0()
{
}

uint64_t sub_2484294B8(uint64_t a1)
{
  *(void *)a1 = &unk_26FC65988;
  *(void *)(a1 + 16) = &unk_26FC66948;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  BOOL v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_248429138((_DWORD *)(a1 + 16), (uint64_t)&v3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  BOOL v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_2484295D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2483FDBFC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2484295E8(uint64_t *a1, unint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  unint64_t v5 = (a1[1] - *a1) >> 6;
  __int16 v23 = 1;
  unint64_t v6 = a1[9];
  uint64_t v7 = v4 + (v6 << 6) + 48;
  uint64_t v8 = v4 + 60;
  while (1)
  {
    char v9 = v2;
    int v10 = *((unsigned __int8 *)&v23 + v3);
    if (*((unsigned char *)&v23 + v3)) {
      char v11 = 3;
    }
    else {
      char v11 = 0;
    }
    unint64_t v12 = v6;
    if (v6 < v5)
    {
      uint64_t v13 = (unint64_t *)v7;
      unint64_t v12 = v6;
      while (*(v13 - 1) <= a2 && *v13 <= a2)
      {
        v13 += 8;
        if (v5 == ++v12) {
          goto LABEL_27;
        }
      }
    }
    unint64_t v15 = v5 - v12;
    if (v5 > v12) {
      break;
    }
LABEL_27:
    char v2 = 1;
    uint64_t v3 = 1;
    if (v9) {
      return 0;
    }
  }
  unint64_t v16 = a2 << v11;
  uint64_t v17 = (int *)(v8 + (v12 << 6));
  while (1)
  {
    if (*(void *)(v17 - 5) && *(void *)(v17 - 3) != 0)
    {
      int v20 = *(v17 - 1);
      int v19 = *v17;
      int v21 = *v17 >= v20 ? *(v17 - 1) : *v17;
      if (v10 == v21 > 2)
      {
        if (v20 > v19) {
          LOBYTE(v19) = *(v17 - 1);
        }
        if (!(v16 >> v19)) {
          return 1;
        }
      }
    }
    v17 += 16;
    if (!--v15) {
      goto LABEL_27;
    }
  }
}

uint64_t sub_2484296E4(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2483F26D4(a1 + 88);
  *(void *)(a1 + 136) = 0;
  return a1;
}

void sub_24842972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v12 = *(void **)(v10 + 56);
  if (v12)
  {
    *(void *)(v10 + 64) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(v10 + 32);
  if (v13)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  a10 = (void **)(v10 + 8);
  sub_2483EA640(&a10);
  sub_2483E8DDC((uint64_t *)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_248429770(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    char v2 = *(uint64_t **)(a1 + 8);
    unint64_t v3 = **(void **)a1;
    uint64_t v4 = *v2;
    for (uint64_t i = v2[1]; v3 < (i - v4) >> 6; uint64_t i = v2[1])
    {
      unint64_t v6 = (unsigned int *)(v4 + (v3 << 6));
      if (*v6 && v6[1])
      {
        unint64_t v7 = 0;
        do
          bzero((void *)(*((void *)v6 + 3) + *((void *)v6 + 2) * v7++), 4 * *v6);
        while (v7 < v6[1]);
        char v2 = *(uint64_t **)(a1 + 8);
        uint64_t v4 = *v2;
      }
      ++v3;
    }
  }
  return a1;
}

uint64_t sub_24842980C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6, void *a7, unsigned char *a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v16 = v15 - *(void *)a2;
  if (v15 == *(void *)a2)
  {
    uint64_t v17 = 0;
  }
  else
  {
    if (v16 < 0) {
      sub_2483E92E8();
    }
    uint64_t v17 = (int32x2_t *)sub_2483F04AC(v16 >> 6);
    bzero(v17, v16 >> 3);
    if (v16 >> 3)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v16 >> 6;
      if ((unint64_t)(v16 >> 6) <= 1) {
        uint64_t v19 = 1;
      }
      int v20 = (int64x2_t *)(*(void *)a2 + 40);
      do
      {
        int64x2_t v21 = *v20;
        v20 += 4;
        v17[v18++] = vmovn_s64(v21);
      }
      while (v19 != v18);
    }
  }
  sub_2484294B8((uint64_t)v67);
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    goto LABEL_96;
  }
  if (a3) {
    uint64_t v22 = (void *)a3;
  }
  else {
    uint64_t v22 = v67;
  }
  uint64_t v23 = sub_24841A614((uint64_t)a1, (uint64_t)v22);
  if (v23) {
    goto LABEL_102;
  }
  unint64_t v25 = a1[3];
  unint64_t v24 = a1[4];
  unint64_t v26 = 8 * (a1[2] - v24 + a1[5]) - a1[1];
  a1[7] = v26;
  unint64_t v27 = 8 * (v25 - v24) + 64;
  if (a3) {
    unint64_t v28 = (void *)a3;
  }
  else {
    unint64_t v28 = v67;
  }
  if (a3) {
    unint64_t v29 = (unsigned char *)(a3 + 72);
  }
  else {
    unint64_t v29 = v69;
  }
  if (v26 > v27)
  {
    if (a3) {
      unint64_t v30 = (void *)a3;
    }
    else {
      unint64_t v30 = v67;
    }
    uint64_t v31 = v30[10];
    uint64_t v32 = v28[9];
    if (v31 != v32)
    {
      uint64_t v33 = v31 - 72;
      int v34 = (void (***)(void))(v31 - 72);
      uint64_t v35 = (void (***)(void))(v31 - 72);
      do
      {
        uint64_t v36 = *v35;
        v35 -= 9;
        (*v36)(v34);
        v33 -= 72;
        BOOL v37 = v34 == (void (***)(void))v32;
        int v34 = v35;
      }
      while (!v37);
    }
    v30[10] = v32;
    if ((unsigned char *)(a2 + 24) != v29) {
      sub_24840A270(a2 + 24, v28[9], v32, 0x8E38E38E38E38E39 * ((v32 - v28[9]) >> 3));
    }
    uint64_t v39 = *(void *)a2;
    uint64_t v38 = *(void *)(a2 + 8);
    if (v38 != *(void *)a2)
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = (unsigned int *)(v39 + (v40 << 6));
        if (*v41 && v41[1])
        {
          unint64_t v42 = 0;
          do
            bzero((void *)(*((void *)v41 + 3) + *((void *)v41 + 2) * v42++), 4 * *v41);
          while (v42 < v41[1]);
          uint64_t v39 = *(void *)a2;
          uint64_t v38 = *(void *)(a2 + 8);
        }
        ++v40;
      }
      while (v40 < (v38 - v39) >> 6);
    }
    uint64_t v23 = 0xFFFFFFFFLL;
    goto LABEL_102;
  }
  if ((unsigned char *)(a2 + 24) != v29)
  {
    uint64_t v43 = v67;
    if (a3) {
      uint64_t v43 = (void *)a3;
    }
    sub_24840A270(a2 + 24, v28[9], v43[10], 0x8E38E38E38E38E39 * ((uint64_t)(v43[10] - v28[9]) >> 3));
  }
  uint64_t v45 = *(void *)(a2 + 24);
  uint64_t v44 = *(void *)(a2 + 32);
  while (v45 != v44)
  {
    uint64_t v23 = sub_24842CD90(v45, (uint64_t *)a2);
    if (v23) {
      goto LABEL_102;
    }
    v45 += 72;
  }
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v23 = 1;
    goto LABEL_102;
  }
  uint64_t v23 = sub_2484295E8((uint64_t *)a2, a5[1]);
  if (!v23)
  {
    uint64_t v46 = *(void *)(a2 + 8);
    uint64_t v47 = v46 - *(void *)a2;
    if (v46 == *(void *)a2) {
      goto LABEL_96;
    }
    uint64_t v48 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    if ((unint64_t)(v47 >> 6) <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v47 >> 6;
    }
    unint64_t v52 = (unint64_t *)(*(void *)a2 + 48);
    while (1)
    {
      unint64_t v53 = *(v52 - 1);
      if (v53 && *v52)
      {
        if (v50 >= *(void *)(a2 + 72) && (v53 > *a5 || *v52 > *a5))
        {
LABEL_67:
          if (v48)
          {
            uint64_t v65 = v49;
            uint64_t v78 = 0;
            v76[0] = &v78;
            v76[1] = a2;
            char v77 = 1;
            int v73 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            memset(v72, 0, sizeof(v72));
            sub_2484296E4((uint64_t)v71);
            uint64_t v55 = v67;
            if (a3) {
              uint64_t v55 = (void *)a3;
            }
            if (*((unsigned char *)v55 + 8))
            {
              uint64_t v23 = 1;
              if (a7 && a8 && a9 && *a7 != a7[1])
              {
LABEL_90:
                sub_2483EA6D0((uint64_t)v70, (uint64_t)a8, a1, v65);
                operator new();
              }
              goto LABEL_91;
            }
            unint64_t v56 = 0;
            uint64_t v57 = (unint64_t *)(*(void *)a2 + 48);
            unint64_t v58 = 1024;
            while (1)
            {
              unint64_t v59 = *(v57 - 1);
              if (v56 >= *(void *)(a2 + 72))
              {
                unint64_t v60 = *v57;
                if (v59 > *a5 || v60 > *a5)
                {
LABEL_84:
                  if (v58 >= 0x100000) {
                    unint64_t v62 = 0x100000;
                  }
                  else {
                    unint64_t v62 = v58;
                  }
                  uint64_t v23 = sub_248421D58(a1, (uint64_t *)&v73, v62);
                  if (!v23)
                  {
                    uint64_t v23 = sub_2483F2760(a1, (0xCCCCCCCCCCCCCCCDLL * ((v74 - v73) >> 3) + 1) >> 1, (uint64_t)v71, v72, 0);
                    if (!v23)
                    {
                      a8 = v71;
                      goto LABEL_90;
                    }
                  }
LABEL_91:
                  sub_2483EABC4((uint64_t)v71);
                  if (v72[0]) {
                    operator delete((void *)v72[0]);
                  }
                  if (v73)
                  {
                    uint64_t v74 = v73;
                    operator delete(v73);
                  }
                  sub_248429770((uint64_t)v76);
                  goto LABEL_102;
                }
              }
              else
              {
                unint64_t v60 = *v57;
              }
              v58 += v60 * v59;
              ++v56;
              v57 += 8;
              if (v51 == v56) {
                goto LABEL_84;
              }
            }
          }
LABEL_96:
          if (a6)
          {
            if (a3) {
              int v63 = (uint64_t *)(a3 + 16);
            }
            else {
              int v63 = &v68;
            }
            sub_248429F54(a2, (uint64_t)v63, 0);
          }
          uint64_t v23 = *(unsigned __int8 *)(a2 + 80);
          break;
        }
        if (v53 > v49) {
          unint64_t v49 = *(v52 - 1);
        }
        ++v48;
      }
      ++v50;
      v52 += 8;
      if (v51 == v50) {
        goto LABEL_67;
      }
    }
  }
LABEL_102:
  v67[0] = &unk_26FC65988;
  v70[0] = (void **)v69;
  sub_2483FDBFC(v70);
  if (v17) {
    operator delete(v17);
  }
  return v23;
}

void sub_248429E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v35 = a32;
  a32 = 0;
  if (v35)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v35 - 24));
    free(*(void **)(v35 - 32));
  }
  sub_2483EABC4((uint64_t)&STACK[0x2D8]);
  uint64_t v36 = *(void **)(v33 - 168);
  if (v36) {
    operator delete(v36);
  }
  BOOL v37 = *(void **)(v33 - 144);
  if (v37)
  {
    *(void *)(v33 - 136) = v37;
    operator delete(v37);
  }
  sub_248429770(v33 - 120);
  a26 = (void **)&a23;
  sub_2483FDBFC(&a26);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_248429F54(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 24) != v3)
  {
    while (1)
    {
      char v11 = &unk_26FC66970;
      long long v7 = *(_OWORD *)(v3 - 64);
      uint64_t v13 = *(void *)(v3 - 48);
      long long v12 = v7;
      memset(v14, 0, sizeof(v14));
      sub_24840A9A8(v14, *(void *)(v3 - 40), *(void *)(v3 - 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 - 32) - *(void *)(v3 - 40)) >> 3));
      uint64_t v8 = *(void *)(v3 - 16);
      __int16 v16 = *(_WORD *)(v3 - 8);
      uint64_t v15 = v8;
      if (sub_24842C084((uint64_t)&v11, a1, a2, a3)) {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void (***)(uint64_t))(v9 - 72);
      v9 -= 72;
      (*v10)(v9);
      *(void *)(a1 + 32) = v9;
      char v11 = &unk_26FC66970;
      uint64_t v17 = (void **)v14;
      sub_2483FEA88(&v17);
      uint64_t v3 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 24) == v3) {
        return;
      }
    }
    *(unsigned char *)(a1 + 80) = 1;
    char v11 = &unk_26FC66970;
    uint64_t v17 = (void **)v14;
    sub_2483FEA88(&v17);
  }
}

void sub_24842A0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2483FEA88((void ***)va);
  _Unwind_Resume(a1);
}

void sub_24842A0C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int64x2_t v6 = 0uLL;
  long long v37 = 0u;
  long long v38 = 0u;
  int64x2_t v36 = 0u;
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  LODWORD(v40) = a4;
  *((void *)&v40 + 1) = 0;
  long long v7 = 0uLL;
  long long v8 = 0uLL;
  char v41 = 0;
  if (a5 < 1)
  {
LABEL_19:
    *(_DWORD *)(a1 + 88) = 0;
    int64x2_t v36 = 0uLL;
    long long v37 = 0uLL;
    *(int64x2_t *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    long long v38 = 0uLL;
    long long v32 = v39;
    long long v33 = v40;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v32;
    *(_OWORD *)(a1 + 64) = v33;
    *(unsigned char *)(a1 + 80) = v41;
  }
  else
  {
    int v12 = 0;
    while (1)
    {
      sub_2484017B8((uint64_t)v42, a2, a3);
      if (v45) {
        break;
      }
      long long v34 = *(_OWORD *)v42;
      uint64_t v13 = v43;
      uint64_t v35 = *(void *)&v42[16];
      uint64_t v14 = v44;
      uint64_t v15 = (void *)v36.i64[1];
      if (v36.i64[1] >= (unint64_t)v37)
      {
        uint64_t v17 = (v36.i64[1] - v36.i64[0]) >> 6;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 58) {
          sub_2483E92E8();
        }
        uint64_t v19 = v37 - v36.i64[0];
        if ((uint64_t)(v37 - v36.i64[0]) >> 5 > v18) {
          unint64_t v18 = v19 >> 5;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        uint64_t v44 = &v37;
        int64x2_t v21 = (char *)sub_24840BC28(v20);
        uint64_t v22 = &v21[64 * v17];
        *(void *)unint64_t v42 = v21;
        *(void *)&v42[8] = v22;
        uint64_t v43 = &v21[64 * v23];
        *(_OWORD *)uint64_t v22 = v34;
        *((void *)v22 + 2) = v35;
        *((void *)v22 + 3) = v13;
        *((void *)v22 + 4) = v14;
        *((void *)v22 + 5) = a2;
        *((void *)v22 + 6) = a3;
        *((void *)v22 + 7) = 0;
        __int16 v16 = v22 + 64;
        *(void *)&v42[16] = v22 + 64;
        uint64_t v24 = v36.i64[1];
        uint64_t v25 = v36.i64[0];
        uint64_t v26 = *(void *)&v42[8];
        if (v36.i64[1] == v36.i64[0])
        {
          int64x2_t v30 = vdupq_n_s64(v36.u64[1]);
        }
        else
        {
          do
          {
            long long v27 = *(_OWORD *)(v24 - 64);
            *(void *)(v26 - 48) = *(void *)(v24 - 48);
            *(_OWORD *)(v26 - 64) = v27;
            uint64_t v28 = *(void *)(v24 - 40);
            *(void *)(v24 - 40) = 0;
            *(void *)(v26 - 40) = v28;
            *(void *)(v26 - 32) = *(void *)(v24 - 32);
            long long v29 = *(_OWORD *)(v24 - 24);
            *(void *)(v26 - 8) = *(void *)(v24 - 8);
            *(_OWORD *)(v26 - 24) = v29;
            v26 -= 64;
            v24 -= 64;
          }
          while (v24 != v25);
          int64x2_t v30 = v36;
          __int16 v16 = *(void **)&v42[16];
        }
        v36.i64[0] = v26;
        v36.i64[1] = (uint64_t)v16;
        *(int64x2_t *)&v42[8] = v30;
        uint64_t v31 = (char *)v37;
        *(void *)&long long v37 = v43;
        uint64_t v43 = v31;
        *(void *)unint64_t v42 = v30.i64[0];
        sub_24840BC60((uint64_t)v42);
      }
      else
      {
        *(_OWORD *)v36.i64[1] = *(_OWORD *)v42;
        void v15[2] = v35;
        v15[3] = v13;
        v15[4] = v14;
        v15[5] = a2;
        v15[6] = a3;
        v15[7] = 0;
        __int16 v16 = v15 + 8;
      }
      v36.i64[1] = (uint64_t)v16;
      if (++v12 == a5)
      {
        int64x2_t v6 = v36;
        long long v7 = v37;
        long long v8 = v38;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a1 + 88) = v45;
  }
  *(void *)unint64_t v42 = (char *)&v37 + 8;
  sub_2483FDBFC((void ***)v42);
  *(void *)unint64_t v42 = &v36;
  sub_2483FDCBC((void ***)v42);
}

void sub_24842A31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v5 - 24));
    free(*(void **)(v5 - 32));
  }
  sub_2484039E8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24842A35C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(uint64_t **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    int64x2_t v6 = *(uint64_t **)a1;
    if (v5 != v4)
    {
      do
      {
        long long v7 = v5 - 8;
        sub_2483E8DDC(v5 - 5);
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      int64x2_t v6 = *(uint64_t **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_24840A908((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return a1;
}

BOOL sub_24842A428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), _DWORD *(*)(_DWORD *, unsigned int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24842AC2C, sub_24842A4D8, 0, a2) != 0;
  }
  for (unsigned int i = 0; i != v3; ++i)
    sub_24842A4D8(v6, i);
  return 0;
}

_DWORD *sub_24842A4D8(_DWORD *result, unsigned int a2)
{
  uint64_t v197 = *MEMORY[0x263EF8340];
  char v2 = (void *)*((void *)result + 1);
  uint64_t v3 = 8 * a2;
  uint64_t v4 = *v2;
  uint64_t v5 = (void *)v2[1];
  unint64_t v6 = *(void *)(*v2 + 48) - v3;
  uint64_t v7 = 8;
  if (v6 < 8) {
    uint64_t v7 = *(void *)(*v2 + 48) - 8 * a2;
  }
  uint64_t v193 = 8 * a2;
  uint64_t v194 = v7;
  if (v5[5] >= 0x11uLL && v6 >= 8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(v4 + 16);
    unint64_t v12 = v11 >> 2;
    unint64_t v13 = v5[2];
    uint64_t v14 = v5[3];
    unint64_t v15 = v13 >> 2;
    uint64_t v16 = v2[2];
    unint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(void *)(v16 + 24);
    unint64_t v19 = v17 >> 2;
    uint64_t v20 = v14 + v13 * v3;
    uint64_t v21 = *(void *)(v4 + 24) + v11 * v3;
    uint64_t v22 = v18 + v17 * v3;
    uint64_t result = v196;
    uint64_t v23 = (_DWORD *)(v21 + 32);
    int32x2_t v24 = vdup_n_s32(0x55555556u);
    v25.i64[0] = 0x200000002;
    v25.i64[1] = 0x200000002;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    v27.i64[0] = 0x100000001;
    v27.i64[1] = 0x100000001;
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v20 + 4 * v10;
      char v30 = 1;
      do
      {
        uint64_t v31 = 0;
        char v32 = v30;
        uint64_t v33 = v29 + 4 * v28 * v15;
        uint64_t v34 = v29 + 4 * (v28 | 1) * v15;
        uint64_t v35 = v29 + 4 * (v28 | 2) * v15;
        uint64_t v36 = v29 + 4 * (v28 | 3) * v15;
        long long v37 = &v195[v28 + 256];
        char v38 = 1;
        do
        {
          char v39 = v38;
          int32x4_t v40 = *(int32x4_t *)(v33 + 4 * v31);
          int32x4_t v41 = *(int32x4_t *)(v34 + 4 * v31);
          int32x4_t v42 = *(int32x4_t *)(v35 + 4 * v31);
          int32x4_t v43 = *(int32x4_t *)(v36 + 4 * v31);
          float32x2x2_t v44 = (float32x2x2_t)vzip1q_s32(v40, v42);
          int32x4_t v45 = vzip1q_s32(v41, v43);
          float32x2x2_t v46 = (float32x2x2_t)vzip2q_s32(v40, v42);
          int32x4_t v47 = vzip2q_s32(v41, v43);
          uint64_t v48 = (float *)&v37[8 * v31];
          uint64_t v49 = 32 * v31;
          vst2_f32(v48, v44);
          *(int32x4_t *)((char *)v37 + (v49 | 0x20)) = vzip2q_s32((int32x4_t)v44, v45);
          unint64_t v50 = (float *)((char *)v37 + (v49 | 0x40));
          vst2_f32(v50, v46);
          *(int32x4_t *)((char *)v37 + (v49 | 0x60)) = vzip2q_s32((int32x4_t)v46, v47);
          uint64_t v31 = 4;
          char v38 = 0;
        }
        while ((v39 & 1) != 0);
        char v30 = 0;
        uint64_t v28 = 4;
      }
      while ((v32 & 1) != 0);
      uint64_t v51 = 0;
      uint64_t v52 = v21 + 4 * v10;
      char v53 = 1;
      do
      {
        uint64_t v54 = 0;
        char v55 = v53;
        uint64_t v56 = v52 + 4 * v51 * v12;
        uint64_t v57 = v52 + 4 * (v51 | 1) * v12;
        uint64_t v58 = v52 + 4 * (v51 | 2) * v12;
        uint64_t v59 = v52 + 4 * (v51 | 3) * v12;
        unint64_t v60 = &v196[v51];
        char v61 = 1;
        do
        {
          char v62 = v61;
          int32x4_t v63 = *(int32x4_t *)(v56 + 4 * v54);
          int32x4_t v64 = *(int32x4_t *)(v57 + 4 * v54);
          int32x4_t v65 = *(int32x4_t *)(v58 + 4 * v54);
          int32x4_t v66 = *(int32x4_t *)(v59 + 4 * v54);
          float32x2x2_t v67 = (float32x2x2_t)vzip1q_s32(v63, v65);
          int32x4_t v68 = vzip1q_s32(v64, v66);
          float32x2x2_t v69 = (float32x2x2_t)vzip2q_s32(v63, v65);
          int32x4_t v70 = vzip2q_s32(v64, v66);
          unsigned int v71 = (float *)&v60[8 * v54];
          uint64_t v72 = 32 * v54;
          vst2_f32(v71, v67);
          *(int32x4_t *)((char *)v60 + (v72 | 0x20)) = vzip2q_s32((int32x4_t)v67, v68);
          int v73 = (float *)((char *)v60 + (v72 | 0x40));
          vst2_f32(v73, v69);
          *(int32x4_t *)((char *)v60 + (v72 | 0x60)) = vzip2q_s32((int32x4_t)v69, v70);
          uint64_t v54 = 4;
          char v61 = 0;
        }
        while ((v62 & 1) != 0);
        char v53 = 0;
        uint64_t v51 = 4;
      }
      while ((v55 & 1) != 0);
      uint64_t v74 = 0;
      unint64_t v9 = v10 + 8;
      uint64_t v75 = v23;
      do
      {
        v196[v74 + 64] = *v75;
        ++v74;
        v75 += v12;
      }
      while (v74 != 8);
      uint64_t v76 = 0;
      do
      {
        uint64_t v77 = 0;
        char v78 = 8 * v76;
        unsigned int v79 = &v195[8 * v76 + 256];
        signed int v80 = &v196[8 * v76];
        BOOL v81 = v10 + v76 == 0;
        uint64_t v82 = &v195[8 * v76 + 192];
        unsigned int v83 = &v195[8 * v76++ + 128];
        unsigned int v84 = &v195[((v78 + 56) & 0x38) + 128];
        if (v81) {
          unsigned int v84 = v80;
        }
        char v85 = 1;
        do
        {
          unint64_t v86 = v77;
          int32x4_t v87 = *(int32x4_t *)&v80[v86];
          int32x4_t v88 = *(int32x4_t *)&v84[v86];
          int32x4_t v89 = vsubq_s32(v88, v87);
          int32x4_t v90 = *(int32x4_t *)&v196[8 * v76 + v86];
          int32x4_t v91 = vsubq_s32(v87, v90);
          int32x4_t v92 = (int32x4_t)veorq_s8((int8x16_t)v89, (int8x16_t)v91);
          int32x4_t v93 = vabsq_s32(v89);
          int8x16_t v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL);
          int8x16_t v95 = (int8x16_t)vmull_s32(vzip1_s32(*(int32x2_t *)v94.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)), v24);
          int32x4_t v96 = (int32x4_t)vextq_s8(v95, v95, 8uLL);
          int32x4_t v97 = vabsq_s32(v91);
          int32x4_t v98 = vshrq_n_s32(vaddq_s32(vaddq_s32(vabsq_s32(vsubq_s32(v88, v90)), v25), vtrn2q_s32(vtrn1q_s32(v96, (int32x4_t)vshrq_n_u64((uint64x2_t)vmull_s32(vzip1_s32(*(int32x2_t *)v93.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), v24), 0x20uLL)), v96)), 2uLL);
          int32x4_t v99 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v98, vsliq_n_s32(v98, v93, 1uLL)), (int8x16_t)(*(_OWORD *)&vaddq_s32(v93, v93) | __PAIR128__(0x100000001, 0x100000001)), (int8x16_t)v98);
          int32x4_t v100 = vaddq_s32(v97, v97);
          int32x4_t v101 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v99, v27), v99), v100), (int8x16_t)v100, (int8x16_t)v99);
          int32x4_t v102 = vaddq_s32((int32x4_t)vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v90, v88), (int8x16_t)vnegq_s32(v101), (int8x16_t)v101), vorrq_s8(vorrq_s8((int8x16_t)vceqq_s32(v88, v87), (int8x16_t)vceqq_s32(v87, v90)), (int8x16_t)vcgtq_s32(v92, v26))), *(int32x4_t *)&v79[v86]);
          int32x4_t v103 = vsraq_n_s32(v87, (int32x4_t)vsraq_n_u32((uint32x4_t)v102, (uint32x4_t)v102, 0x1FuLL), 1uLL);
          *(int32x4_t *)&v82[v86] = v103;
          char v104 = v85;
          *(int32x4_t *)&v83[v86] = vsubq_s32(v103, v102);
          uint64_t v77 = 4;
          char v85 = 0;
        }
        while ((v104 & 1) != 0);
      }
      while (v76 != 8);
      uint64_t v105 = 0;
      char v106 = 1;
      do
      {
        uint64_t v107 = 0;
        char v108 = v106;
        unint64_t v109 = &v195[8 * v105 + 192];
        int v110 = (char *)&v195[192] + ((32 * v105) | 0x20);
        int v111 = (char *)&v195[192] + ((32 * v105) | 0x40);
        int v112 = (char *)&v195[192] + ((32 * v105) | 0x60);
        char v113 = 1;
        char v114 = &v195[v105 + 64];
        do
        {
          char v115 = v113;
          int32x4_t v116 = *(int32x4_t *)&v109[v107];
          int32x4_t v117 = *(int32x4_t *)&v110[4 * v107];
          int32x4_t v118 = *(int32x4_t *)&v111[4 * v107];
          int32x4_t v119 = *(int32x4_t *)&v112[4 * v107];
          float32x2x2_t v120 = (float32x2x2_t)vzip1q_s32(v116, v118);
          int32x4_t v121 = vzip1q_s32(v117, v119);
          float32x2x2_t v122 = (float32x2x2_t)vzip2q_s32(v116, v118);
          int32x4_t v123 = vzip2q_s32(v117, v119);
          int v124 = (float *)&v114[8 * v107];
          uint64_t v125 = 32 * v107;
          vst2_f32(v124, v120);
          *(int32x4_t *)((char *)v114 + (v125 | 0x20)) = vzip2q_s32((int32x4_t)v120, v121);
          uint64_t v126 = (float *)((char *)v114 + (v125 | 0x40));
          vst2_f32(v126, v122);
          *(int32x4_t *)((char *)v114 + (v125 | 0x60)) = vzip2q_s32((int32x4_t)v122, v123);
          uint64_t v107 = 4;
          char v113 = 0;
        }
        while ((v115 & 1) != 0);
        char v106 = 0;
        uint64_t v105 = 4;
      }
      while ((v108 & 1) != 0);
      uint64_t v127 = 0;
      char v128 = 1;
      do
      {
        uint64_t v129 = 0;
        char v130 = v128;
        uint64_t v131 = &v195[8 * v127 + 128];
        uint64_t v132 = (char *)&v195[128] + ((32 * v127) | 0x20);
        uint64_t v133 = (char *)&v195[128] + ((32 * v127) | 0x40);
        uint64_t v134 = (char *)&v195[128] + ((32 * v127) | 0x60);
        char v135 = 1;
        unint64_t v136 = &v195[v127];
        do
        {
          char v137 = v135;
          int32x4_t v138 = *(int32x4_t *)&v131[v129];
          int32x4_t v139 = *(int32x4_t *)&v132[4 * v129];
          int32x4_t v140 = *(int32x4_t *)&v133[4 * v129];
          int32x4_t v141 = *(int32x4_t *)&v134[4 * v129];
          float32x2x2_t v142 = (float32x2x2_t)vzip1q_s32(v138, v140);
          int32x4_t v143 = vzip1q_s32(v139, v141);
          float32x2x2_t v144 = (float32x2x2_t)vzip2q_s32(v138, v140);
          int32x4_t v145 = vzip2q_s32(v139, v141);
          uint64_t v146 = (float *)&v136[8 * v129];
          uint64_t v147 = 32 * v129;
          vst2_f32(v146, v142);
          *(int32x4_t *)((char *)v136 + (v147 | 0x20)) = vzip2q_s32((int32x4_t)v142, v143);
          uint64_t v148 = (float *)((char *)v136 + (v147 | 0x40));
          vst2_f32(v148, v144);
          *(int32x4_t *)((char *)v136 + (v147 | 0x60)) = vzip2q_s32((int32x4_t)v144, v145);
          uint64_t v129 = 4;
          char v135 = 0;
        }
        while ((v137 & 1) != 0);
        char v128 = 0;
        uint64_t v127 = 4;
      }
      while ((v130 & 1) != 0);
      for (uint64_t i = 0; i != 8; ++i)
      {
        uint64_t v150 = 0;
        char v151 = 1;
        do
        {
          float32x2x2_t v152 = *(float32x2x2_t *)&v195[8 * i + 64 + v150];
          int32x4_t v153 = *(int32x4_t *)&v195[8 * i + v150];
          uint64_t v154 = (float *)(v22 + 4 * i * v19 + 8 * (v150 | v10));
          vst2_f32(v154, v152);
          v154 += 4;
          char v155 = v151;
          *(int32x4_t *)uint64_t v154 = vzip2q_s32((int32x4_t)v152, v153);
          uint64_t v150 = 4;
          char v151 = 0;
        }
        while ((v155 & 1) != 0);
      }
      v23 += 8;
      v10 += 8;
    }
    while (v9 < *(void *)(v2[1] + 40) - 9);
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (v194)
  {
    uint64_t v156 = 0;
    uint64_t v157 = (void *)v2[3];
    uint64_t v159 = *v157;
    unint64_t v158 = (void *)v157[1];
    uint64_t v161 = *(void *)(*v157 + 16);
    uint64_t v160 = *(void *)(*v157 + 24);
    uint64_t v163 = v158[2];
    uint64_t v162 = v158[3];
    uint64_t v164 = (void *)v157[2];
    uint64_t v166 = v164[2];
    uint64_t v165 = v164[3];
    unint64_t v167 = *(void *)(v159 + 40);
    uint64_t result = (_DWORD *)v164[5];
    uint64_t v168 = v160 + 8 * v161 * a2;
    unsigned int v169 = (_DWORD *)(v165 + 8 * v166 * a2 + 8 * v9);
    uint64_t v170 = 8 * v163 * a2 + 4 * v9 + v162 + 4;
    do
    {
      if (v167 > v9)
      {
        unint64_t v171 = v158[5];
        uint64_t v172 = (int *)v170;
        uint64_t v173 = v169;
        unint64_t v174 = v9;
        do
        {
          uint64_t v175 = *(v172 - 1);
          unint64_t v176 = v174 + 1;
          uint64_t v177 = v175;
          if (v174 + 1 < v171) {
            uint64_t v177 = *v172;
          }
          uint64_t v178 = *(v172 - 1);
          if (v174) {
            uint64_t v178 = (int)*(v173 - 1);
          }
          uint64_t v179 = *(int *)(v168 + 4 * v174);
          uint64_t v180 = -3 * v177 - v175 + 4 * v178;
          uint64_t v181 = (v180 - 6) / 12;
          uint64_t v182 = v178 - v175;
          if ((v181 & 1) + v181 < 2 * (v178 - v175)) {
            uint64_t v181 = 2 * (v178 - v175) - 1;
          }
          uint64_t v183 = 2 * (v175 - v177);
          if ((uint64_t)(v181 & 0xFFFFFFFFFFFFFFFELL) >= v183) {
            uint64_t v183 = v181;
          }
          uint64_t v184 = v175 - v177;
          if (v175 > v177 || v178 > v175) {
            uint64_t v183 = 0;
          }
          uint64_t v186 = (unsigned __int128)((v180 + 6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          uint64_t v187 = (v186 >> 1) + ((unint64_t)v186 >> 63);
          if ((uint64_t)(v187 & 0xFFFFFFFFFFFFFFFELL) > 2 * v182) {
            uint64_t v187 = (2 * v182) | 1;
          }
          if ((v187 & 1) + v187 > 2 * v184) {
            uint64_t v187 = 2 * v184;
          }
          if (v175 < v177 || v178 < v175) {
            uint64_t v187 = v183;
          }
          BOOL v189 = __OFADD__(v187, v179);
          uint64_t v190 = v187 + v179;
          if (v190 < 0 != v189) {
            unint64_t v191 = v190 + 1;
          }
          else {
            unint64_t v191 = v190;
          }
          int v192 = (v191 >> 1) + v175;
          *uint64_t v173 = v192;
          v173[1] = v192 - v190;
          v173 += 2;
          ++v172;
          unint64_t v174 = v176;
        }
        while (v167 != v176);
      }
      if (result) {
        *(_DWORD *)(v165 + (v156 + v193) * v166 + 4 * ((void)result - 1)) = *(_DWORD *)(v162
      }
                                                                                          + (v156 + v193) * v163
                                                                                          + 4 * v158[5]
                                                                                          - 4);
      ++v156;
      v168 += v161;
      unsigned int v169 = (_DWORD *)((char *)v169 + v166);
      v170 += v163;
    }
    while (v156 != v194);
  }
  return result;
}

uint64_t sub_24842AC2C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL sub_24842AC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2;
  v6[0] = sub_2483F1794;
  v6[1] = a3;
  if (*(void *)a1) {
    return (*(unsigned int (**)(void, void *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void *(*)(uint64_t, int), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_24842B05C, sub_24842AD04, 0, a2) != 0;
  }
  for (int i = 0; i != v3; ++i)
    sub_24842AD04((uint64_t)v6, i);
  return 0;
}

void *sub_24842AD04(uint64_t a1, int a2)
{
  uint64_t result = *(void **)(a1 + 8);
  int v3 = (void *)result[1];
  if (*(void *)(*result + 40) >= (unint64_t)(a2 + 1) << 6) {
    unint64_t v4 = (unint64_t)(a2 + 1) << 6;
  }
  else {
    unint64_t v4 = *(void *)(*result + 40);
  }
  if (v3[6])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = (a2 << 6);
    unint64_t v8 = v4 - v7;
    uint64_t v71 = 4 * v7;
    uint64_t v72 = result;
    int32x2_t v9 = vdup_n_s32(0x55555556u);
    v10.i64[0] = 0x200000002;
    v10.i64[1] = 0x200000002;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    uint64_t v13 = 1;
    do
    {
      uint64_t v15 = v3[2];
      uint64_t v14 = v3[3];
      uint64_t v17 = *(void *)(*result + 16);
      uint64_t v16 = *(void *)(*result + 24);
      unint64_t v18 = v6 + 1;
      if (v6 + 1 >= *(void *)(*result + 48)) {
        unint64_t v19 = v6;
      }
      else {
        unint64_t v19 = v6 + 1;
      }
      uint64_t v20 = v16 + v19 * v17 + 4 * v7;
      uint64_t v21 = result[2];
      uint64_t v22 = *(void *)(v21 + 16);
      uint64_t v23 = *(void *)(v21 + 24);
      if (v6) {
        uint64_t v24 = v23 + v22 * (2 * v6 - 1) + 4 * v7;
      }
      else {
        uint64_t v24 = v16 + 4 * v7;
      }
      uint64_t v73 = v14;
      unint64_t v25 = 0;
      if (v8 >= 8)
      {
        uint64_t v26 = v14 + v15 * v6 + 4 * v7;
        do
        {
          uint64_t v27 = 0;
          char v28 = 1;
          do
          {
            uint64_t v29 = 4 * v27;
            int32x4_t v30 = *(int32x4_t *)(v16 + v17 * v6 + 4 * v7 + 4 * v25 + v29);
            int32x4_t v31 = *(int32x4_t *)(v24 + 4 * v25 + v29);
            int32x4_t v32 = vsubq_s32(v31, v30);
            int32x4_t v33 = *(int32x4_t *)(v20 + 4 * v25 + v29);
            int32x4_t v34 = vsubq_s32(v30, v33);
            int32x4_t v35 = (int32x4_t)veorq_s8((int8x16_t)v32, (int8x16_t)v34);
            int32x4_t v36 = vabsq_s32(v32);
            int8x16_t v37 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL);
            int8x16_t v38 = (int8x16_t)vmull_s32(vzip1_s32(*(int32x2_t *)v37.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), v9);
            int32x4_t v39 = (int32x4_t)vextq_s8(v38, v38, 8uLL);
            int32x4_t v40 = vabsq_s32(v34);
            int32x4_t v41 = vshrq_n_s32(vaddq_s32(vaddq_s32(vabsq_s32(vsubq_s32(v31, v33)), v10), vtrn2q_s32(vtrn1q_s32(v39, (int32x4_t)vshrq_n_u64((uint64x2_t)vmull_s32(vzip1_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL)), v9), 0x20uLL)), v39)), 2uLL);
            int32x4_t v42 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v41, vsliq_n_s32(v41, v36, 1uLL)), (int8x16_t)(*(_OWORD *)&vaddq_s32(v36, v36) | __PAIR128__(0x100000001, 0x100000001)), (int8x16_t)v41);
            int32x4_t v43 = vaddq_s32(v40, v40);
            int32x4_t v44 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v42, v12), v42), v43), (int8x16_t)v43, (int8x16_t)v42);
            int32x4_t v45 = vaddq_s32((int32x4_t)vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v33, v31), (int8x16_t)vnegq_s32(v44), (int8x16_t)v44), vorrq_s8(vorrq_s8((int8x16_t)vceqq_s32(v31, v30), (int8x16_t)vceqq_s32(v30, v33)), (int8x16_t)vcgtq_s32(v35, v11))), *(int32x4_t *)(v26 + 4 * v25 + v29));
            int32x4_t v46 = vsraq_n_s32(v30, (int32x4_t)vsraq_n_u32((uint32x4_t)v45, (uint32x4_t)v45, 0x1FuLL), 1uLL);
            *(int32x4_t *)(v23 + v22 * 2 * v6 + 4 * v7 + 4 * v25 + v29) = v46;
            char v47 = v28;
            *(int32x4_t *)(v23 + v22 * ((2 * v6) | 1) + 4 * v7 + 4 * v25 + v29) = vsubq_s32(v46, v45);
            uint64_t v27 = 4;
            char v28 = 0;
          }
          while ((v47 & 1) != 0);
          v25 += 8;
        }
        while ((v25 | 7) < v8);
      }
      if (v25 < v8)
      {
        uint64_t v48 = v23 + v71;
        uint64_t v49 = v23 + v71 + v22 * v13;
        uint64_t v50 = v48 + v22 * v5;
        uint64_t v51 = v73 + v71 + v15 * v6;
        uint64_t v52 = v16 + v71 + v17 * v6;
        do
        {
          int v53 = *(_DWORD *)(v52 + 4 * v25);
          int v54 = v53;
          uint64_t v55 = *(int *)(v20 + 4 * v25);
          int v56 = *(_DWORD *)(v24 + 4 * v25);
          uint64_t v57 = -3 * v55 - v53 + 4 * v56;
          uint64_t v58 = (v57 - 6) / 12;
          uint64_t v59 = v56 - (uint64_t)v53;
          if ((v58 & 1) + v58 < 2 * v59) {
            uint64_t v58 = 2 * v59 - 1;
          }
          if ((uint64_t)(v58 & 0xFFFFFFFFFFFFFFFELL) < 2 * (v53 - v55)) {
            uint64_t v58 = 2 * (v53 - v55);
          }
          if (v53 <= (int)v55 && v56 <= v53) {
            uint64_t v61 = v58;
          }
          else {
            uint64_t v61 = 0;
          }
          uint64_t v62 = (unsigned __int128)((v57 + 6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          uint64_t v63 = (v62 >> 1) + ((unint64_t)v62 >> 63);
          if ((uint64_t)(v63 & 0xFFFFFFFFFFFFFFFELL) > 2 * v59) {
            uint64_t v63 = (2 * v59) | 1;
          }
          if ((v63 & 1) + v63 > 2 * (v53 - v55)) {
            uint64_t v63 = 2 * (v53 - v55);
          }
          if (v53 < (int)v55 || v56 < v53) {
            uint64_t v65 = v61;
          }
          else {
            uint64_t v65 = v63;
          }
          uint64_t v66 = *(int *)(v51 + 4 * v25);
          BOOL v67 = __OFADD__(v65, v66);
          uint64_t v68 = v65 + v66;
          if (v68 < 0 != v67) {
            unint64_t v69 = v68 + 1;
          }
          else {
            unint64_t v69 = v68;
          }
          int v70 = (v69 >> 1) + v54;
          *(_DWORD *)(v50 + 4 * v25) = v70;
          *(_DWORD *)(v49 + 4 * v25++) = v70 - v68;
        }
        while (v25 < v8);
      }
      uint64_t result = v72;
      int v3 = (void *)v72[1];
      v13 += 2;
      v5 += 2;
      unint64_t v6 = v18;
    }
    while (v18 < v3[6]);
  }
  return result;
}

uint64_t sub_24842B05C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_24842B084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = sub_24842B0F8(a3, *(void *)(a1 + 8), a2);
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5 != v4)
    {
      do
      {
        uint64_t v6 = v5 - 64;
        sub_2483E8DDC((uint64_t *)(v5 - 40));
        uint64_t v5 = v6;
      }
      while (v6 != v4);
    }
    *(void *)(a1 + 8) = v4;
  }
}

uint64_t sub_24842B0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a1 + v6 + 40);
      *(void *)(v7 + 56) = *(void *)(a1 + v6 + 56);
      long long v8 = *(_OWORD *)(a1 + v6);
      *(void *)(v7 + 16) = *(void *)(a1 + v6 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      uint64_t v9 = *(void *)(a1 + v6 + 24);
      *(void *)(a1 + v6 + 24) = 0;
      uint64_t v10 = *(void *)(a3 + v6 + 24);
      *(void *)(v7 + 24) = v9;
      if (v10)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v10 - 24));
        free(*(void **)(v10 - 32));
      }
      *(void *)(v7 + 32) = *(void *)(a1 + v6 + 32);
      v6 += 64;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t sub_24842B1BC(unint64_t *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[9];
  int v6 = ((a2[1] - *a2) >> 6) - v5;
  long long v8 = (void (***)(void))*a1;
  unint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    unint64_t v9 = v7 - 24;
    uint64_t v10 = (void (***)(void))(v7 - 24);
    int32x4_t v11 = (void (***)(void))(v7 - 24);
    do
    {
      int8x16_t v12 = *v11;
      v11 -= 3;
      (*v12)(v10);
      v9 -= 24;
      BOOL v13 = v10 == v8;
      uint64_t v10 = v11;
    }
    while (!v13);
    uint64_t v5 = a2[9];
    uint64_t v4 = *a2;
  }
  a1[1] = (unint64_t)v8;
  uint64_t v14 = v4 + (v5 << 6);
  unint64_t v15 = *(void *)(v14 + 40);
  unint64_t v16 = *(void *)(v14 + 48);
  if (v6 >= 3)
  {
    uint64_t v17 = v4 + ((v5 + 1) << 6);
    if (*(void *)(v17 + 40) == v15 && *(void *)(v17 + 48) == v16)
    {
      sub_24842BF48(&v112);
      LOWORD(v113) = 1;
      HIDWORD(v113) = *((_DWORD *)a2 + 18) + 1;
      int v114 = 2;
      unint64_t v18 = a1[2];
      unint64_t v19 = a1[1];
      if (v19 >= v18)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a1) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_113;
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a1) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v23;
        }
        int32x4_t v118 = a1 + 2;
        if (v25) {
          unint64_t v25 = (unint64_t)sub_2483F8ED4(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unint64_t v27 = v25 + 24 * v22;
        *(void *)unint64_t v27 = &unk_26FC65F40;
        uint64_t v28 = v113;
        *(_DWORD *)(v27 + 16) = v114;
        *(void *)(v27 + 8) = v28;
        unint64_t v29 = *a1;
        unint64_t v30 = a1[1];
        if (v30 == *a1)
        {
          int64x2_t v34 = vdupq_n_s64(v30);
          unint64_t v32 = v25 + 24 * v22;
        }
        else
        {
          uint64_t v31 = v25 + 24 * v22 - 24;
          unint64_t v32 = v25 + 24 * v22;
          do
          {
            *(void *)(v32 - 24) = &unk_26FC65F40;
            v32 -= 24;
            uint64_t v33 = *(void *)(v30 - 16);
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(v30 - 8);
            *(void *)(v32 + 8) = v33;
            v31 -= 24;
            v30 -= 24;
          }
          while (v30 != v29);
          int64x2_t v34 = *(int64x2_t *)a1;
        }
        unint64_t v21 = v27 + 24;
        *a1 = v32;
        a1[1] = v27 + 24;
        int64x2_t v116 = v34;
        unint64_t v35 = a1[2];
        a1[2] = v25 + 24 * v26;
        unint64_t v117 = v35;
        uint64_t v115 = v34.i64[0];
        sub_2483FE860((uint64_t)&v115);
      }
      else
      {
        *(void *)unint64_t v19 = &unk_26FC65F40;
        uint64_t v20 = v113;
        *(_DWORD *)(v19 + 16) = v114;
        *(void *)(v19 + 8) = v20;
        unint64_t v21 = v19 + 24;
      }
      a1[1] = v21;
      LOBYTE(v113) = 0;
      unint64_t v36 = a1[2];
      if (v21 >= v36)
      {
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a1) >> 3);
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_113;
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *a1) >> 3);
        uint64_t v41 = 2 * v40;
        if (2 * v40 <= v39 + 1) {
          uint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x555555555555555) {
          unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v42 = v41;
        }
        int32x4_t v118 = a1 + 2;
        if (v42) {
          unint64_t v42 = (unint64_t)sub_2483F8ED4(v42);
        }
        else {
          uint64_t v43 = 0;
        }
        unint64_t v44 = v42 + 24 * v39;
        *(void *)unint64_t v44 = &unk_26FC65F40;
        uint64_t v45 = v113;
        *(_DWORD *)(v44 + 16) = v114;
        *(void *)(v44 + 8) = v45;
        unint64_t v46 = *a1;
        unint64_t v47 = a1[1];
        if (v47 == *a1)
        {
          int64x2_t v51 = vdupq_n_s64(v47);
          unint64_t v49 = v42 + 24 * v39;
        }
        else
        {
          uint64_t v48 = v42 + 24 * v39 - 24;
          unint64_t v49 = v42 + 24 * v39;
          do
          {
            *(void *)(v49 - 24) = &unk_26FC65F40;
            v49 -= 24;
            uint64_t v50 = *(void *)(v47 - 16);
            *(_DWORD *)(v49 + 16) = *(_DWORD *)(v47 - 8);
            *(void *)(v49 + 8) = v50;
            v48 -= 24;
            v47 -= 24;
          }
          while (v47 != v46);
          int64x2_t v51 = *(int64x2_t *)a1;
        }
        unint64_t v38 = v44 + 24;
        *a1 = v49;
        a1[1] = v44 + 24;
        int64x2_t v116 = v51;
        unint64_t v52 = a1[2];
        a1[2] = v42 + 24 * v43;
        unint64_t v117 = v52;
        uint64_t v115 = v51.i64[0];
        sub_2483FE860((uint64_t)&v115);
      }
      else
      {
        *(void *)unint64_t v21 = &unk_26FC65F40;
        uint64_t v37 = v113;
        *(_DWORD *)(v21 + 16) = v114;
        *(void *)(v21 + 8) = v37;
        unint64_t v38 = v21 + 24;
      }
      a1[1] = v38;
    }
  }
  uint64_t result = (uint64_t)sub_24842BF48(&v112);
  HIDWORD(v113) = a2[9];
  int v114 = v6;
  BYTE1(v113) = 1;
  if (v15 <= v16 && v16 >= 9)
  {
    LOBYTE(v113) = 0;
    unint64_t v55 = a1[2];
    unint64_t v56 = a1[1];
    if (v56 < v55)
    {
      *(void *)unint64_t v56 = &unk_26FC65F40;
      uint64_t v57 = v113;
      *(_DWORD *)(v56 + 16) = v114;
      *(void *)(v56 + 8) = v57;
      unint64_t v58 = v56 + 24;
LABEL_66:
      a1[1] = v58;
      unint64_t v16 = (v16 + 1) >> 1;
      goto LABEL_67;
    }
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *a1) >> 3);
    unint64_t v60 = v59 + 1;
    if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *a1) >> 3);
      if (2 * v61 > v60) {
        unint64_t v60 = 2 * v61;
      }
      if (v61 >= 0x555555555555555) {
        unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v62 = v60;
      }
      int32x4_t v118 = a1 + 2;
      if (v62) {
        unint64_t v62 = (unint64_t)sub_2483F8ED4(v62);
      }
      else {
        uint64_t v63 = 0;
      }
      unint64_t v64 = v62 + 24 * v59;
      *(void *)unint64_t v64 = &unk_26FC65F40;
      uint64_t v65 = v113;
      *(_DWORD *)(v64 + 16) = v114;
      *(void *)(v64 + 8) = v65;
      unint64_t v66 = *a1;
      unint64_t v67 = a1[1];
      if (v67 == *a1)
      {
        int64x2_t v71 = vdupq_n_s64(v67);
        unint64_t v69 = v62 + 24 * v59;
      }
      else
      {
        uint64_t v68 = v62 + 24 * v59 - 24;
        unint64_t v69 = v62 + 24 * v59;
        do
        {
          *(void *)(v69 - 24) = &unk_26FC65F40;
          v69 -= 24;
          uint64_t v70 = *(void *)(v67 - 16);
          *(_DWORD *)(v69 + 16) = *(_DWORD *)(v67 - 8);
          *(void *)(v69 + 8) = v70;
          v68 -= 24;
          v67 -= 24;
        }
        while (v67 != v66);
        int64x2_t v71 = *(int64x2_t *)a1;
      }
      unint64_t v58 = v64 + 24;
      *a1 = v69;
      a1[1] = v64 + 24;
      int64x2_t v116 = v71;
      unint64_t v72 = a1[2];
      a1[2] = v62 + 24 * v63;
      unint64_t v117 = v72;
      uint64_t v115 = v71.i64[0];
      uint64_t result = sub_2483FE860((uint64_t)&v115);
      goto LABEL_66;
    }
LABEL_113:
    sub_2483E92E8();
  }
LABEL_67:
  BOOL v73 = v16 > 8;
  BOOL v74 = v15 > 8;
  if (v15 > 8 || v16 >= 9)
  {
    do
    {
      if (v74)
      {
        LOBYTE(v113) = 1;
        unint64_t v76 = a1[1];
        unint64_t v77 = a1[2];
        if (v76 >= v77)
        {
          unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *a1) >> 3);
          unint64_t v81 = v80 + 1;
          if (v80 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_113;
          }
          unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *a1) >> 3);
          if (2 * v82 > v81) {
            unint64_t v81 = 2 * v82;
          }
          if (v82 >= 0x555555555555555) {
            unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v83 = v81;
          }
          int32x4_t v118 = a1 + 2;
          if (v83) {
            unint64_t v83 = (unint64_t)sub_2483F8ED4(v83);
          }
          else {
            uint64_t v84 = 0;
          }
          unint64_t v85 = v83 + 24 * v80;
          *(void *)unint64_t v85 = &unk_26FC65F40;
          uint64_t v86 = v113;
          *(_DWORD *)(v85 + 16) = v114;
          *(void *)(v85 + 8) = v86;
          unint64_t v87 = *a1;
          unint64_t v88 = a1[1];
          if (v88 == *a1)
          {
            int64x2_t v92 = vdupq_n_s64(v88);
            unint64_t v90 = v83 + 24 * v80;
          }
          else
          {
            uint64_t v89 = v83 + 24 * v80 - 24;
            unint64_t v90 = v83 + 24 * v80;
            do
            {
              *(void *)(v90 - 24) = &unk_26FC65F40;
              v90 -= 24;
              uint64_t v91 = *(void *)(v88 - 16);
              *(_DWORD *)(v90 + 16) = *(_DWORD *)(v88 - 8);
              *(void *)(v90 + 8) = v91;
              v89 -= 24;
              v88 -= 24;
            }
            while (v88 != v87);
            int64x2_t v92 = *(int64x2_t *)a1;
          }
          unint64_t v79 = v85 + 24;
          *a1 = v90;
          a1[1] = v85 + 24;
          int64x2_t v116 = v92;
          unint64_t v93 = a1[2];
          a1[2] = v83 + 24 * v84;
          unint64_t v117 = v93;
          uint64_t v115 = v92.i64[0];
          uint64_t result = sub_2483FE860((uint64_t)&v115);
        }
        else
        {
          *(void *)unint64_t v76 = &unk_26FC65F40;
          uint64_t v78 = v113;
          *(_DWORD *)(v76 + 16) = v114;
          *(void *)(v76 + 8) = v78;
          unint64_t v79 = v76 + 24;
        }
        a1[1] = v79;
        unint64_t v15 = (v15 + 1) >> 1;
      }
      if (v73)
      {
        LOBYTE(v113) = 0;
        unint64_t v94 = a1[1];
        unint64_t v95 = a1[2];
        if (v94 >= v95)
        {
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *a1) >> 3);
          unint64_t v99 = v98 + 1;
          if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_113;
          }
          unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - *a1) >> 3);
          if (2 * v100 > v99) {
            unint64_t v99 = 2 * v100;
          }
          if (v100 >= 0x555555555555555) {
            unint64_t v101 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v101 = v99;
          }
          int32x4_t v118 = a1 + 2;
          if (v101) {
            unint64_t v101 = (unint64_t)sub_2483F8ED4(v101);
          }
          else {
            uint64_t v102 = 0;
          }
          unint64_t v103 = v101 + 24 * v98;
          *(void *)unint64_t v103 = &unk_26FC65F40;
          uint64_t v104 = v113;
          *(_DWORD *)(v103 + 16) = v114;
          *(void *)(v103 + 8) = v104;
          unint64_t v105 = *a1;
          unint64_t v106 = a1[1];
          if (v106 == *a1)
          {
            int64x2_t v110 = vdupq_n_s64(v106);
            unint64_t v108 = v101 + 24 * v98;
          }
          else
          {
            uint64_t v107 = v101 + 24 * v98 - 24;
            unint64_t v108 = v101 + 24 * v98;
            do
            {
              *(void *)(v108 - 24) = &unk_26FC65F40;
              v108 -= 24;
              uint64_t v109 = *(void *)(v106 - 16);
              *(_DWORD *)(v108 + 16) = *(_DWORD *)(v106 - 8);
              *(void *)(v108 + 8) = v109;
              v107 -= 24;
              v106 -= 24;
            }
            while (v106 != v105);
            int64x2_t v110 = *(int64x2_t *)a1;
          }
          unint64_t v97 = v103 + 24;
          *a1 = v108;
          a1[1] = v103 + 24;
          int64x2_t v116 = v110;
          unint64_t v111 = a1[2];
          a1[2] = v101 + 24 * v102;
          unint64_t v117 = v111;
          uint64_t v115 = v110.i64[0];
          uint64_t result = sub_2483FE860((uint64_t)&v115);
        }
        else
        {
          *(void *)unint64_t v94 = &unk_26FC65F40;
          uint64_t v96 = v113;
          *(_DWORD *)(v94 + 16) = v114;
          *(void *)(v94 + 8) = v96;
          unint64_t v97 = v94 + 24;
        }
        a1[1] = v97;
        unint64_t v16 = (v16 + 1) >> 1;
      }
      BOOL v73 = v16 > 8;
      BOOL v74 = v15 > 8;
    }
    while (v15 > 8 || v16 > 8);
  }
  return result;
}

void sub_24842BAB8(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 >> 6;
  unint64_t v9 = *a1 + (v7 & 0xFFFFFFFFFFFFFFC0);
  int32x4_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v30 = ((uint64_t)(v6 - (void)v5) >> 6) + 1;
    if (v30 >> 58) {
      sub_2483E92E8();
    }
    uint64_t v32 = v10 - (void)v5;
    if (v32 >> 5 > v30) {
      unint64_t v30 = v32 >> 5;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v30;
    }
    BOOL v74 = v11;
    if (v33)
    {
      unint64_t v35 = (char *)sub_24840BC28(v33);
    }
    else
    {
      unint64_t v35 = 0;
      uint64_t v34 = 0;
    }
    uint64_t v40 = (uint64_t)&v35[64 * v8];
    int64x2_t v71 = v35;
    *(void *)&long long v72 = v40;
    *((void *)&v72 + 1) = v40;
    BOOL v73 = &v35[64 * v34];
    if (v8 == v34)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v43 = 1;
        }
        else {
          unint64_t v43 = v7 >> 5;
        }
        uint64_t v78 = v11;
        unint64_t v44 = (char *)sub_24840BC28(v43);
        unint64_t v46 = (long long *)v72;
        if (*((void *)&v72 + 1) == (void)v72)
        {
          int64x2_t v52 = vdupq_n_s64(v72);
          unint64_t v47 = &v44[64 * (v43 >> 2)];
        }
        else
        {
          unint64_t v47 = &v44[64 * (v43 >> 2) + *((void *)&v72 + 1) - v72];
          uint64_t v48 = &v44[64 * (v43 >> 2)];
          do
          {
            long long v49 = *v46;
            *((void *)v48 + 2) = *((void *)v46 + 2);
            *(_OWORD *)uint64_t v48 = v49;
            uint64_t v50 = *((void *)v46 + 3);
            *((void *)v46 + 3) = 0;
            *((void *)v48 + 3) = v50;
            *((void *)v48 + 4) = *((void *)v46 + 4);
            long long v51 = *(long long *)((char *)v46 + 40);
            *((void *)v48 + 7) = *((void *)v46 + 7);
            *(_OWORD *)(v48 + 40) = v51;
            v48 += 64;
            v46 += 4;
          }
          while (v48 != v47);
          int64x2_t v52 = (int64x2_t)v72;
        }
        int v53 = v73;
        uint64_t v75 = v71;
        int64x2_t v71 = v44;
        *(void *)&long long v72 = &v44[64 * (v43 >> 2)];
        int64x2_t v76 = v52;
        *((void *)&v72 + 1) = v47;
        BOOL v73 = &v44[64 * v45];
        unint64_t v77 = v53;
        sub_24840BC60((uint64_t)&v75);
        uint64_t v40 = *((void *)&v72 + 1);
      }
      else
      {
        unint64_t v41 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v41 = v8 + 1;
        }
        uint64_t v42 = v40 - (v41 >> 1 << 6);
        uint64_t v40 = sub_24842B0F8(v40, v40, v42);
        *(void *)&long long v72 = v42;
        *((void *)&v72 + 1) = v40;
      }
    }
    long long v54 = *a3;
    *(void *)(v40 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v40 = v54;
    uint64_t v55 = *((void *)a3 + 3);
    *((void *)a3 + 3) = 0;
    *(void *)(v40 + 24) = v55;
    *(void *)(v40 + 32) = *((void *)a3 + 4);
    long long v56 = *(long long *)((char *)a3 + 40);
    *(void *)(v40 + 56) = *((void *)a3 + 7);
    *(_OWORD *)(v40 + 40) = v56;
    uint64_t v57 = v72;
    uint64_t v58 = *((void *)&v72 + 1) + 64;
    *((void *)&v72 + 1) += 64;
    unint64_t v59 = (char *)*a1;
    if (*a1 != v9)
    {
      unint64_t v60 = v9;
      do
      {
        long long v61 = *(_OWORD *)(v60 - 64);
        *(void *)(v57 - 48) = *(void *)(v60 - 48);
        *(_OWORD *)(v57 - 64) = v61;
        uint64_t v62 = *(void *)(v60 - 40);
        *(void *)(v60 - 40) = 0;
        *(void *)(v57 - 40) = v62;
        *(void *)(v57 - 32) = *(void *)(v60 - 32);
        long long v63 = *(_OWORD *)(v60 - 24);
        *(void *)(v57 - 8) = *(void *)(v60 - 8);
        *(_OWORD *)(v57 - 24) = v63;
        v57 -= 64;
        v60 -= 64;
      }
      while ((char *)v60 != v59);
      uint64_t v58 = *((void *)&v72 + 1);
    }
    *(void *)&long long v72 = v57;
    uint64_t v64 = a1[1];
    if (v64 != v9)
    {
      do
      {
        long long v65 = *(_OWORD *)v9;
        *(void *)(v58 + 16) = *(void *)(v9 + 16);
        *(_OWORD *)uint64_t v58 = v65;
        uint64_t v66 = *(void *)(v9 + 24);
        *(void *)(v9 + 24) = 0;
        *(void *)(v58 + 24) = v66;
        *(void *)(v58 + 32) = *(void *)(v9 + 32);
        long long v67 = *(_OWORD *)(v9 + 40);
        *(void *)(v58 + 56) = *(void *)(v9 + 56);
        *(_OWORD *)(v58 + 40) = v67;
        v58 += 64;
        v9 += 64;
      }
      while (v9 != v64);
      uint64_t v57 = v72;
      unint64_t v9 = a1[1];
    }
    uint64_t v68 = (char *)*a1;
    *a1 = v57;
    a1[1] = v58;
    unint64_t v69 = (char *)a1[2];
    a1[2] = v73;
    *((void *)&v72 + 1) = v9;
    BOOL v73 = v69;
    int64x2_t v71 = v68;
    *(void *)&long long v72 = v68;
    sub_24840BC60((uint64_t)&v71);
  }
  else if (v9 == v6)
  {
    long long v36 = *a3;
    *(void *)(v9 + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = v36;
    uint64_t v37 = *((void *)a3 + 3);
    *((void *)a3 + 3) = 0;
    *(void *)(v9 + 24) = v37;
    *(void *)(v9 + 32) = *((void *)a3 + 4);
    unint64_t v38 = &v5[64 * v8];
    long long v39 = *(long long *)((char *)a3 + 40);
    *((void *)v38 + 7) = *((void *)a3 + 7);
    *(_OWORD *)(v38 + 40) = v39;
    a1[1] = v9 + 64;
  }
  else
  {
    unint64_t v12 = v9 + 64;
    unint64_t v13 = v6 - 64;
    uint64_t v70 = v7 >> 6;
    uint64_t v14 = a1[1];
    if (v6 >= 0x40)
    {
      do
      {
        long long v15 = *(_OWORD *)v13;
        *(void *)(v14 + 16) = *(void *)(v13 + 16);
        *(_OWORD *)uint64_t v14 = v15;
        uint64_t v16 = *(void *)(v13 + 24);
        *(void *)(v13 + 24) = 0;
        *(void *)(v14 + 24) = v16;
        *(void *)(v14 + 32) = *(void *)(v13 + 32);
        long long v17 = *(_OWORD *)(v13 + 40);
        *(void *)(v14 + 56) = *(void *)(v13 + 56);
        *(_OWORD *)(v14 + 40) = v17;
        v14 += 64;
        v13 += 64;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v12)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (uint64_t)(v6 - v12) >> 6;
      uint64_t v20 = &v5[64 * v70 + 64 * v19];
      uint64_t v21 = -64 * v19;
      do
      {
        uint64_t v22 = v6 + v18;
        *(_OWORD *)(v22 - 24) = *(_OWORD *)&v20[v18 - 24];
        *(void *)(v22 - 8) = *(void *)&v20[v18 - 8];
        long long v23 = *(_OWORD *)&v20[v18 - 64];
        *(void *)(v22 - 48) = *(void *)&v20[v18 - 48];
        *(_OWORD *)(v22 - 64) = v23;
        uint64_t v24 = *(void *)&v20[v18 - 40];
        *(void *)&v20[v18 - 40] = 0;
        uint64_t v25 = *(void *)(v6 + v18 - 40);
        *(void *)(v22 - 40) = v24;
        if (v25)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v25 - 24));
          free(*(void **)(v25 - 32));
        }
        *(void *)(v22 - 32) = *(void *)&v20[v18 - 32];
        v18 -= 64;
      }
      while (v21 != v18);
    }
    uint64_t v26 = &v5[64 * v70];
    *(_OWORD *)(v26 + 40) = *(long long *)((char *)a3 + 40);
    *((void *)v26 + 7) = *((void *)a3 + 7);
    long long v27 = *a3;
    *(void *)(v9 + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = v27;
    uint64_t v28 = *((void *)a3 + 3);
    *((void *)a3 + 3) = 0;
    uint64_t v29 = *(void *)(v9 + 24);
    *(void *)(v9 + 24) = v28;
    if (v29)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v29 - 24));
      free(*(void **)(v29 - 32));
    }
    *(void *)(v9 + 32) = *((void *)a3 + 4);
  }
}

void sub_24842BF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24840BC60((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24842BF48(void *a1)
{
  *a1 = &unk_26FC65F40;
  int v3 = &unk_26FC65A00;
  long long v4 = xmmword_2484DC960;
  uint64_t v5 = 0;
  sub_2483FE8CC((uint64_t)a1, (uint64_t)&v3);
  return a1;
}

int64x2_t *sub_24842BFC8(int64x2_t *a1, __int32 a2)
{
  a1->i64[0] = (uint64_t)&unk_26FC66970;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0;
  a1[4].i16[0] = 1;
  uint64_t v5 = &unk_26FC65A00;
  long long v6 = xmmword_2484DC960;
  uint64_t v7 = 0;
  sub_2483FE208(a1, (uint64_t)&v5);
  a1->i32[2] = a2;
  return a1;
}

void sub_24842C06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2483FEA88((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_24842C084(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  long long v4 = (void *)a2;
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    if (((-1431655765 * ((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3) - 1) & 0x80000000) != 0) {
      return 0;
    }
    uint64_t v151 = -1431655765 * ((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3) - 1;
    uint64_t v149 = (uint64_t)a4;
    while (1)
    {
      uint64_t v36 = *(void *)(a1 + 32);
      unint64_t v37 = *(unsigned int *)(v36 + 24 * v151 + 12);
      if ((v37 & 0x80000000) != 0) {
        return 1;
      }
      uint64_t v38 = *v4;
      uint64_t v39 = v4[1] - *v4;
      uint64_t v9 = 1;
      if ((int)v37 >= (int)((unint64_t)v39 >> 6)) {
        return v9;
      }
      uint64_t v40 = *(unsigned int *)(v36 + 24 * v151 + 16);
      int v41 = v37 + v40 - 1;
      if (v41 < 0) {
        return v9;
      }
      uint64_t v150 = *(unsigned int *)(v36 + 24 * v151 + 16);
      if (v41 >= (int)((unint64_t)v39 >> 6) || v41 < (int)v37) {
        return v9;
      }
      uint64_t v43 = *(unsigned int *)(v36 + 24 * v151 + 16);
      uint64_t v44 = v151;
      uint64_t v45 = v36 + 24 * v151;
      int v157 = *(unsigned __int8 *)(v45 + 8);
      int v46 = *(unsigned __int8 *)(v45 + 9);
      unsigned int v47 = v40 + v37;
      unsigned int v48 = (v39 >> 6) - v40;
      if (v46) {
        uint64_t v49 = v47;
      }
      else {
        uint64_t v49 = v48;
      }
      unint64_t v50 = v4[9];
      if (v50 > v37) {
        v4[9] = v50 - v40;
      }
      unsigned int v155 = v47 - 1;
      if (v37 <= v47 - 1) {
        break;
      }
LABEL_41:
      sub_24842B084((uint64_t)v4, v38 + (v49 << 6), v38 + (v49 << 6) + (v43 << 6));
      uint64_t v9 = 0;
      uint64_t v151 = v44 - 1;
      if (v44 <= 0) {
        return v9;
      }
    }
    uint64_t v146 = v49;
    int v154 = v49 - v37;
    while (1)
    {
      uint64_t v51 = v37;
      uint64_t v52 = *v4;
      unint64_t v53 = *v4 + ((unint64_t)v37 << 6);
      long long v54 = (uint64_t *)(v53 + 40);
      unint64_t v55 = *(void *)(v53 + 40);
      uint64_t v56 = (v154 + v37);
      uint64_t v57 = *v4 + (v56 << 6);
      unint64_t v59 = (void *)(v57 + 40);
      unint64_t v58 = *(void *)(v57 + 40);
      if (v55 < v58) {
        return 1;
      }
      unint64_t v62 = *(void *)(v53 + 48);
      long long v61 = (void *)(v53 + 48);
      unint64_t v60 = v62;
      unint64_t v65 = *(void *)(v57 + 48);
      uint64_t v64 = (void *)(v57 + 48);
      unint64_t v63 = v65;
      if (v60 < v65) {
        return 1;
      }
      uint64_t v159 = v52 + (v51 << 6);
      uint64_t v66 = v52 + (v56 << 6);
      if (v157)
      {
        if (v58)
        {
          unint64_t v67 = v58 + v55;
          uint64_t v68 = v52 + (v51 << 6);
          int v69 = *(_DWORD *)(v68 + 56);
          unsigned int v70 = *(_DWORD *)(v68 + 60);
          sub_2484017B8((uint64_t)&v181, v67, v60);
          uint64_t v9 = v184;
          if (v184) {
            return v9;
          }
          unsigned int v71 = v69 - 1;
          long long v161 = v181;
          uint64_t v72 = *((void *)&v182 + 1);
          BOOL v73 = v183;
          long long v162 = v182;
          uint64_t v163 = v183;
          *(void *)&long long v164 = v67;
          *((void *)&v164 + 1) = v60;
          uint64_t v165 = (int *)__PAIR64__(v70, v71);
          if (*v64)
          {
            *(void *)&long long v169 = v66;
            *((void *)&v169 + 1) = v159;
            *(void *)&long long v170 = &v161;
            *(void *)&long long v181 = v159;
            *((void *)&v181 + 1) = v66;
            *(void *)&long long v182 = &v161;
            *((void *)&v182 + 1) = &v169;
            unint64_t v74 = (unint64_t)(*v61 + 7) >> 3;
            if (v149)
            {
              BOOL v75 = sub_24842A428(v149, v74, (uint64_t)&v181);
            }
            else
            {
              uint64_t v185 = 0;
              uint64_t v186 = &v185;
              BOOL v75 = sub_24842A428((uint64_t)&v185, v74, (uint64_t)&v181);
            }
            uint64_t v9 = v75;
            if (!v75)
            {
              uint64_t v87 = *v4 + (v51 << 6);
              *(_OWORD *)(v87 + 40) = v164;
              *(void *)(v87 + 56) = v165;
              long long v88 = v161;
              *(void *)(v87 + 16) = v162;
              *(_OWORD *)uint64_t v87 = v88;
              uint64_t v89 = *((void *)&v162 + 1);
              *((void *)&v162 + 1) = 0;
              uint64_t v90 = *(void *)(v87 + 24);
              *(void *)(v87 + 24) = v89;
              if (v90)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v90 - 24));
                free(*(void **)(v90 - 32));
              }
              goto LABEL_78;
            }
            goto LABEL_79;
          }
          uint64_t v84 = *v4 + (v51 << 6);
          *(_OWORD *)(v84 + 40) = v164;
          *(void *)(v84 + 56) = v165;
          uint64_t v85 = v162;
          *(_OWORD *)uint64_t v84 = v161;
          uint64_t v86 = *(void *)(v84 + 24);
          *(void *)(v84 + 16) = v85;
          *(void *)(v84 + 24) = v72;
          if (v86)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v86 - 24));
            free(*(void **)(v86 - 32));
          }
          *(void *)(v84 + 32) = v73;
        }
        else
        {
          --*(_DWORD *)(v52 + (v51 << 6) + 56);
        }
      }
      else if (v63)
      {
        unint64_t v76 = v63 + v60;
        uint64_t v77 = v52 + (v51 << 6);
        int v78 = *(_DWORD *)(v77 + 56);
        int v79 = *(_DWORD *)(v77 + 60);
        sub_2484017B8((uint64_t)&v181, v55, v76);
        uint64_t v9 = v184;
        if (v184) {
          return v9;
        }
        long long v161 = v181;
        uint64_t v80 = *((void *)&v182 + 1);
        unint64_t v81 = v183;
        long long v162 = v182;
        uint64_t v163 = v183;
        *(void *)&long long v164 = v55;
        *((void *)&v164 + 1) = v76;
        LODWORD(v165) = v78;
        HIDWORD(v165) = v79 - 1;
        if (*v59)
        {
          *(void *)&long long v181 = v159;
          *((void *)&v181 + 1) = v66;
          *(void *)&long long v182 = &v161;
          unint64_t v82 = (unint64_t)(*v54 + 63) >> 6;
          long long v4 = (void *)a2;
          if (v149)
          {
            BOOL v83 = sub_24842AC54(v149, v82, (uint64_t)&v181);
          }
          else
          {
            *(void *)&long long v169 = 0;
            *((void *)&v169 + 1) = &v169;
            BOOL v83 = sub_24842AC54((uint64_t)&v169, v82, (uint64_t)&v181);
          }
          uint64_t v9 = v83;
          if (!v83)
          {
            uint64_t v94 = *((void *)&v164 + 1);
            if (BYTE8(v164))
            {
              uint64_t v95 = *v54;
              if (*v54)
              {
                uint64_t v96 = *v61 - 1;
                unint64_t v97 = (int *)(*(void *)(v159 + 24) + *(void *)(v159 + 16) * v96);
                unint64_t v98 = (_DWORD *)(*((void *)&v162 + 1) + 2 * v96 * v162);
                do
                {
                  int v99 = *v97++;
                  *v98++ = v99;
                  --v95;
                }
                while (v95);
              }
            }
            uint64_t v87 = *(void *)a2 + (v51 << 6);
            *(void *)(v87 + 40) = v164;
            *(void *)(v87 + 48) = v94;
            *(void *)(v87 + 56) = v165;
            long long v100 = v161;
            *(void *)(v87 + 16) = v162;
            *(_OWORD *)uint64_t v87 = v100;
            uint64_t v101 = *((void *)&v162 + 1);
            *((void *)&v162 + 1) = 0;
            uint64_t v102 = *(void *)(v87 + 24);
            *(void *)(v87 + 24) = v101;
            if (v102)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v102 - 24));
              free(*(void **)(v102 - 32));
            }
            uint64_t v9 = 0;
LABEL_78:
            *(void *)(v87 + 32) = v163;
          }
LABEL_79:
          uint64_t v103 = *((void *)&v162 + 1);
          *((void *)&v162 + 1) = 0;
          if (v103)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v103 - 24));
            free(*(void **)(v103 - 32));
          }
          if (v9) {
            return v9;
          }
          goto LABEL_82;
        }
        long long v4 = (void *)a2;
        uint64_t v91 = *(void *)a2 + (v51 << 6);
        *(_OWORD *)(v91 + 40) = v164;
        *(void *)(v91 + 56) = v165;
        uint64_t v92 = v162;
        *(_OWORD *)uint64_t v91 = v161;
        uint64_t v93 = *(void *)(v91 + 24);
        *(void *)(v91 + 16) = v92;
        *(void *)(v91 + 24) = v80;
        if (v93)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v93 - 24));
          free(*(void **)(v93 - 32));
        }
        *(void *)(v91 + 32) = v81;
      }
      else
      {
        --*(_DWORD *)(v52 + (v51 << 6) + 60);
      }
LABEL_82:
      LODWORD(v37) = v51 + 1;
      if ((int)v51 + 1 > v155)
      {
        uint64_t v38 = *v4;
        uint64_t v43 = v150;
        uint64_t v44 = v151;
        uint64_t v49 = v146;
        goto LABEL_41;
      }
    }
  }
  if (v5 != 1)
  {
    if (!v5)
    {
      long long v6 = a4;
      uint64_t v8 = *(unsigned int *)(a1 + 12);
      unsigned int v7 = *(_DWORD *)(a1 + 16);
      uint64_t v9 = sub_24842D168((uint64_t *)a2, v8, (int)v8 + 2);
      if (v9) {
        return v9;
      }
      uint64_t v185 = v8;
      uint64_t v10 = *v4 + (v8 << 6);
      uint64_t v12 = v10 + 40;
      uint64_t v11 = *(void *)(v10 + 40);
      uint64_t v176 = v11;
      if (v7)
      {
        uint64_t v13 = *(void *)(v10 + 48);
        unsigned int v14 = v7 / 7;
        LODWORD(v175) = v7 / 7;
        LODWORD(v174) = v7 % 7;
        if (v7 % 7)
        {
          *(void *)&long long v161 = v4;
          *((void *)&v161 + 1) = &v185;
          *(void *)&long long v162 = &v175;
          *((void *)&v162 + 1) = &v174;
          uint64_t v163 = &v176;
          if (v6)
          {
            long long v15 = v6;
          }
          else
          {
            *(void *)&long long v181 = 0;
            *((void *)&v181 + 1) = &v181;
            long long v15 = &v181;
          }
          return sub_2484B1818((uint64_t)v15, v13, (uint64_t)&v161);
        }
        else
        {
          long long v161 = *(_OWORD *)v10;
          *(void *)&long long v162 = *(void *)(v10 + 16);
          uint64_t v104 = *(void *)(v10 + 24);
          uint64_t v105 = *(void *)(v10 + 32);
          *(void *)(v10 + 24) = 0;
          uint64_t v106 = *v4 + (v8 << 6);
          uint64_t v107 = v8 + (int)(-3 * (v7 / 0x15) + v14);
          uint64_t v108 = *(void *)(v12 + 16);
          long long v181 = *(_OWORD *)(v106 + 64);
          *(void *)&long long v182 = *(void *)(v106 + 80);
          uint64_t v109 = v4;
          uint64_t v111 = *(void *)(v106 + 88);
          uint64_t v110 = *(void *)(v106 + 96);
          *(void *)(v106 + 88) = 0;
          uint64_t v112 = *v109 + (v8 << 6);
          uint64_t v113 = (v14 + v7 / 0x15 + 1 - 3 * ((1431655766 * (unint64_t)(v14 + v7 / 0x15 + 1)) >> 32))
               + v8;
          long long v114 = *(_OWORD *)(v106 + 104);
          uint64_t v115 = *(void *)(v106 + 120);
          long long v169 = *(_OWORD *)(v112 + 128);
          *(void *)&long long v170 = *(void *)(v112 + 144);
          uint64_t v116 = *(void *)(v112 + 152);
          uint64_t v160 = *(void *)(v112 + 160);
          *(void *)(v112 + 152) = 0;
          long long v158 = *(_OWORD *)(v112 + 168);
          unint64_t v117 = v109;
          uint64_t v118 = *v109 + (v107 << 6);
          int v119 = (int)(v14
                     + ((int)(((1431655765 * (unint64_t)v14) >> 32) - v14) >> 1)
                     + ((((1431655765 * (unint64_t)v14) >> 32) - v14) >> 31)
                     + 2)
               % 3;
          uint64_t v120 = *(void *)(v112 + 184);
          *(void *)(v118 + 40) = v11;
          *(void *)(v118 + 48) = v13;
          *(void *)(v118 + 56) = v108;
          *(void *)(v118 + 16) = v162;
          *(_OWORD *)uint64_t v118 = v161;
          uint64_t v121 = *(void *)(v118 + 24);
          *(void *)(v118 + 24) = v104;
          if (v121)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v121 - 24));
            long long v156 = v114;
            free(*(void **)(v121 - 32));
            long long v114 = v156;
          }
          uint64_t v122 = v8 + v119;
          *(void *)(v118 + 32) = v105;
          uint64_t v123 = *v117 + (v113 << 6);
          *(_OWORD *)(v123 + 40) = v114;
          *(void *)(v123 + 56) = v115;
          *(_OWORD *)uint64_t v123 = v181;
          uint64_t v124 = *(void *)(v123 + 24);
          *(void *)(v123 + 16) = v182;
          *(void *)(v123 + 24) = v111;
          if (v124)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v124 - 24));
            free(*(void **)(v124 - 32));
          }
          *(void *)(v123 + 32) = v110;
          uint64_t v125 = *v117 + (v122 << 6);
          *(_OWORD *)(v125 + 40) = v158;
          *(void *)(v125 + 56) = v120;
          *(_OWORD *)uint64_t v125 = v169;
          uint64_t v126 = *(void *)(v125 + 24);
          *(void *)(v125 + 16) = v170;
          *(void *)(v125 + 24) = v116;
          if (v126)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v126 - 24));
            free(*(void **)(v126 - 32));
          }
          uint64_t v9 = 0;
          *(void *)(v125 + 32) = v160;
        }
        return v9;
      }
      return 0;
    }
    return 1;
  }
  int v16 = *(_DWORD *)(a1 + 12);
  int v17 = *(_DWORD *)(a1 + 28);
  int v18 = *(_DWORD *)(a1 + 60);
  int v179 = v18;
  int v180 = v17;
  if (!*(void *)(a2 + 72)) {
    return 1;
  }
  uint64_t v20 = *(void *)a2;
  uint64_t v19 = *(void *)(a2 + 8);
  int v21 = *(_DWORD *)(*(void *)a2 + 48);
  unint64_t v22 = (v16 + 1);
  unsigned int v177 = v22;
  unsigned int v178 = v21;
  if (v22 >= (v19 - v20) >> 6) {
    return 1;
  }
  unint64_t v23 = v20 + (v22 << 6);
  uint64_t v24 = *(void *)(v23 + 40);
  uint64_t v176 = v24;
  int v25 = v21 - 1;
  if (v21 < 1) {
    return 1;
  }
  uint64_t v27 = *(void *)(v23 + 48);
  if (v21 == 1)
  {
LABEL_19:
    uint64_t v31 = *(void *)(v20 + 24);
    uint64_t v174 = *(void *)(v20 + 16) >> 2;
    uint64_t v175 = v31;
    unint64_t v32 = v20 + (v22 << 6);
    uint64_t v173 = *(void *)(v32 + 16) >> 2;
    int v33 = *(_DWORD *)(a2 + 64);
    if (v33 >= 24) {
      int v33 = 24;
    }
    int v172 = v33;
    if (v24)
    {
      if (v17 | v18)
      {
        uint64_t v34 = (uint64_t)a4;
        unint64_t v171 = 0;
        long long v169 = 0u;
        long long v170 = 0u;
        sub_2484017B8((uint64_t)&v181, *(_DWORD *)v32, *(_DWORD *)(v32 + 4));
        uint64_t v9 = v184;
        if (v184)
        {
LABEL_24:
          uint64_t v35 = *((void *)&v170 + 1);
          *((void *)&v170 + 1) = 0;
          if (v35)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v35 - 24));
            free(*(void **)(v35 - 32));
          }
          return v9;
        }
        long long v169 = v181;
        uint64_t v128 = *((void *)&v182 + 1);
        *((void *)&v182 + 1) = 0;
        uint64_t v129 = v183;
        uint64_t v130 = *((void *)&v170 + 1);
        *(void *)&long long v170 = v182;
        *((void *)&v170 + 1) = v128;
        if (v130)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v130 - 24));
          free(*(void **)(v130 - 32));
          uint64_t v128 = *((void *)&v170 + 1);
        }
        unint64_t v171 = v129;
        unsigned int v131 = *(_DWORD *)v32;
        *(_DWORD *)unint64_t v32 = v169;
        LODWORD(v169) = v131;
        int v132 = *(_DWORD *)(v32 + 4);
        *(_DWORD *)(v32 + 4) = DWORD1(v169);
        DWORD1(v169) = v132;
        int v133 = *(_DWORD *)(v32 + 8);
        *(_DWORD *)(v32 + 8) = DWORD2(v169);
        DWORD2(v169) = v133;
        int v134 = *(_DWORD *)(v32 + 12);
        *(_DWORD *)(v32 + 12) = HIDWORD(v169);
        HIDWORD(v169) = v134;
        uint64_t v135 = *(void *)(v32 + 16);
        *(void *)(v32 + 16) = v170;
        *(void *)&long long v170 = v135;
        uint64_t v136 = *(void *)(v32 + 24);
        *(void *)(v32 + 24) = v128;
        *((void *)&v170 + 1) = v136;
        if (v179 == 6)
        {
          *(void *)&long long v161 = a2;
          *((void *)&v161 + 1) = &v177;
          *(void *)&long long v162 = a3;
          *((void *)&v162 + 1) = &v169;
          uint64_t v163 = &v175;
          *(void *)&long long v164 = v20;
          *((void *)&v164 + 1) = &v174;
          uint64_t v165 = &v172;
          uint64_t v166 = (uint64_t *)&v180;
          unint64_t v167 = &v173;
          uint64_t v168 = &v179;
          if (v34)
          {
            BOOL v137 = sub_2484D8184(v34, v178, (uint64_t)&v161);
          }
          else
          {
            uint64_t v185 = 0;
            uint64_t v186 = &v185;
            BOOL v137 = sub_2484D8184((uint64_t)&v185, v178, (uint64_t)&v161);
          }
        }
        else
        {
          *(void *)&long long v161 = a2;
          *((void *)&v161 + 1) = &v177;
          *(void *)&long long v162 = &v169;
          *((void *)&v162 + 1) = &v175;
          uint64_t v163 = (uint64_t *)v20;
          *(void *)&long long v164 = &v174;
          *((void *)&v164 + 1) = &v172;
          uint64_t v165 = &v180;
          uint64_t v166 = &v173;
          unint64_t v167 = (uint64_t *)&v179;
          if (v34)
          {
            BOOL v137 = sub_2484D7DE8(v34, v178, (uint64_t)&v161);
          }
          else
          {
            uint64_t v185 = 0;
            uint64_t v186 = &v185;
            BOOL v137 = sub_2484D7DE8((uint64_t)&v185, v178, (uint64_t)&v161);
          }
        }
        uint64_t v9 = v137;
        if (v137)
        {
          if (!v184)
          {
            uint64_t v140 = *((void *)&v182 + 1);
            *((void *)&v182 + 1) = 0;
            if (v140)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v140 - 24));
              free(*(void **)(v140 - 32));
            }
          }
          goto LABEL_24;
        }
        if (!v184)
        {
          uint64_t v141 = *((void *)&v182 + 1);
          *((void *)&v182 + 1) = 0;
          if (v141)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v141 - 24));
            free(*(void **)(v141 - 32));
          }
        }
        uint64_t v142 = *((void *)&v170 + 1);
        *((void *)&v170 + 1) = 0;
        if (v142)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v142 - 24));
          free(*(void **)(v142 - 32));
        }
      }
      else
      {
        if (v21 == 1)
        {
          *(void *)&long long v161 = a2;
          *((void *)&v161 + 1) = &v177;
          *(void *)&long long v162 = &v176;
          *((void *)&v162 + 1) = v20;
          uint64_t v163 = &v175;
          *(void *)&long long v164 = &v174;
          *((void *)&v164 + 1) = &v172;
          if (a4)
          {
            uint64_t v127 = a4;
          }
          else
          {
            *(void *)&long long v181 = 0;
            *((void *)&v181 + 1) = &v181;
            uint64_t v127 = &v181;
          }
          BOOL v139 = sub_2484D7C88((uint64_t)v127, v27, (uint64_t)&v161);
        }
        else
        {
          *(void *)&long long v161 = &v178;
          *((void *)&v161 + 1) = a2;
          *(void *)&long long v162 = &v177;
          *((void *)&v162 + 1) = &v176;
          uint64_t v163 = &v175;
          *(void *)&long long v164 = v20;
          *((void *)&v164 + 1) = &v174;
          uint64_t v165 = &v172;
          if (a4)
          {
            int32x4_t v138 = a4;
          }
          else
          {
            *(void *)&long long v181 = 0;
            *((void *)&v181 + 1) = &v181;
            int32x4_t v138 = &v181;
          }
          BOOL v139 = sub_2484D7D38((uint64_t)v138, v27, (uint64_t)&v161);
        }
        uint64_t v9 = v139;
        if (v139) {
          return v9;
        }
      }
    }
    unint64_t v143 = *(void *)(a2 + 72);
    if (v143 <= v177) {
      uint64_t v144 = v143 - 1;
    }
    else {
      uint64_t v144 = (int)v178 + v143 - 2;
    }
    *(void *)(a2 + 72) = v144;
    sub_24842B084(a2, *(void *)a2, *(void *)a2 + 64);
    return 0;
  }
  uint64_t v148 = a4;
  while (1)
  {
    uint64_t v28 = *(int **)(*(void *)a2 + ((unint64_t)v177 << 6) + 56);
    sub_2484017B8((uint64_t)&v181, v24, v27);
    uint64_t v9 = v184;
    if (v184) {
      return v9;
    }
    long long v161 = v181;
    long long v162 = v182;
    uint64_t v29 = (char *)(*(void *)a2 + ((unint64_t)v177 << 6) + 64);
    uint64_t v163 = v183;
    *(void *)&long long v164 = v24;
    *((void *)&v164 + 1) = v27;
    uint64_t v165 = v28;
    sub_24842BAB8((void *)a2, v29, &v161);
    uint64_t v30 = *((void *)&v162 + 1);
    *((void *)&v162 + 1) = 0;
    if (v30)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v30 - 24));
      free(*(void **)(v30 - 32));
    }
    if (!--v25)
    {
      uint64_t v20 = *(void *)a2;
      unint64_t v22 = v177;
      a4 = v148;
      goto LABEL_19;
    }
  }
}

void sub_24842CCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!*(_DWORD *)(v38 - 136))
  {
    uint64_t v40 = *(void *)(v38 - 152);
    *(void *)(v38 - 152) = 0;
    if (v40)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v40 - 24));
      free(*(void **)(v40 - 32));
    }
  }
  if (a38)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a38 - 24));
    free(*(void **)(a38 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24842CD90(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    unsigned int v7 = (unint64_t *)(a1 + 32);
    if (v9 == v8)
    {
      sub_24842B1BC(v7, a2);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
    }
    if (v8 != v9)
    {
      uint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = *(unsigned int *)(v9 + 24 * v10 + 12);
        if ((v11 & 0x80000000) != 0) {
          return 1;
        }
        unint64_t v12 = (unint64_t)(a2[1] - *a2) >> 6;
        uint64_t result = 1;
        if ((int)v11 >= (int)v12) {
          return result;
        }
        uint64_t v13 = *(unsigned int *)(v9 + 24 * v10 + 16);
        int v14 = v11 + v13 - 1;
        if (v14 < 0) {
          return result;
        }
        if (v14 >= (int)v12 || v14 < (int)v11) {
          return result;
        }
        uint64_t v16 = v9 + 24 * v10;
        int v17 = *(unsigned __int8 *)(v16 + 8);
        int v18 = *(unsigned __int8 *)(v16 + 9);
        unsigned int v19 = v13 + v11;
        unint64_t v20 = (v13 + v11 - 1);
        unint64_t v21 = a2[9];
        if (v21 <= v11)
        {
          if (!v18) {
            unsigned int v19 = (unint64_t)(a2[1] - *a2) >> 6;
          }
        }
        else
        {
          if (v18) {
            BOOL v22 = v21 > v20;
          }
          else {
            BOOL v22 = 0;
          }
          if (!v22) {
            return result;
          }
          a2[9] = v21 + v13;
        }
        if (v11 <= v20)
        {
          unsigned int v23 = 0;
          uint64_t v46 = v19;
          while (1)
          {
            uint64_t v24 = v11 + v23;
            uint64_t v25 = *a2 + (v24 << 6);
            int v26 = *(_DWORD *)(v25 + 56);
            if (v26 > 30) {
              return 1;
            }
            int v27 = *(_DWORD *)(v25 + 60);
            if (v27 > 30) {
              return 1;
            }
            uint64_t v28 = *a2 + (v24 << 6);
            uint64_t v31 = *(void *)(v28 + 40);
            uint64_t v29 = (unint64_t *)(v28 + 40);
            uint64_t v30 = v31;
            unint64_t v32 = v29[1];
            if (!v31 || v32 == 0) {
              return 1;
            }
            if (v17)
            {
              unint64_t v34 = (unint64_t)(v30 + 1) >> 1;
              *uint64_t v29 = v34;
              if ((v26 & 0x80000000) == 0) {
                *(_DWORD *)(v25 + 56) = v26 + 1;
              }
              v30 -= v34;
            }
            else
            {
              unint64_t v35 = (v32 + 1) >> 1;
              v29[1] = v35;
              if ((v27 & 0x80000000) == 0) {
                *(_DWORD *)(v25 + 60) = v27 + 1;
              }
              v32 -= v35;
            }
            uint64_t result = sub_24840A0F4(v25);
            if (result) {
              return result;
            }
            sub_2484017B8((uint64_t)&v53, v30, v32);
            uint64_t result = v56;
            if (v56) {
              return result;
            }
            long long v47 = v53;
            long long v48 = v54;
            uint64_t v49 = v55;
            uint64_t v50 = v30;
            unint64_t v51 = v32;
            uint64_t v36 = *a2;
            uint64_t v52 = *(void *)(*a2 + (v24 << 6) + 56);
            sub_24842BAB8(a2, (char *)(v36 + (v46 << 6) + ((unint64_t)v23 << 6)), &v47);
            uint64_t v37 = *((void *)&v48 + 1);
            *((void *)&v48 + 1) = 0;
            if (v37)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v37 - 24));
              free(*(void **)(v37 - 32));
            }
            ++v23;
            if (v11 + v23 > v20)
            {
              uint64_t v9 = *(void *)(a1 + 32);
              uint64_t v8 = *(void *)(a1 + 40);
              break;
            }
          }
        }
        uint64_t result = 0;
        if (++v10 >= 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3)) {
          return result;
        }
      }
    }
    return 0;
  }
  if (v4 != 1)
  {
    if (!v4)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 12);
      return sub_24842D168(a2, v5, v5 + 2);
    }
    return 1;
  }
  unint64_t v38 = *(unsigned int *)(a1 + 12);
  int v39 = v38 + *(_DWORD *)(a1 + 20);
  uint64_t v40 = (v39 - 1);
  if (sub_24842D168(a2, *(_DWORD *)(a1 + 12), v39 - 1)) {
    return 1;
  }
  int v42 = *(_DWORD *)(a1 + 24);
  int v41 = *(_DWORD *)(a1 + 28);
  unint64_t v43 = a2[9];
  if (v43 <= v38) {
    uint64_t v44 = v43 + 1;
  }
  else {
    uint64_t v44 = v43 - (v40 - v38 + 1) + 2;
  }
  a2[9] = v44;
  sub_24842B084((uint64_t)a2, *a2 + (v38 << 6) + 64, *a2 + (v40 << 6) + 64);
  sub_2484017B8((uint64_t)&v53, v41 + v42, v40 - v38 + 1);
  uint64_t result = v56;
  if (!v56)
  {
    long long v47 = v53;
    long long v48 = v54;
    uint64_t v49 = v55;
    uint64_t v50 = (v41 + v42);
    unint64_t v51 = (v40 - v38 + 1);
    uint64_t v52 = -1;
    sub_24842BAB8(a2, (char *)*a2, &v47);
    uint64_t v45 = *((void *)&v48 + 1);
    *((void *)&v48 + 1) = 0;
    if (v45)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v45 - 24));
      free(*(void **)(v45 - 32));
    }
    return 0;
  }
  return result;
}

void sub_24842D130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a14 - 24));
    free(*(void **)(a14 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24842D168(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (a1[1] - *a1) >> 6;
  if (v4 < a2) {
    return 1;
  }
  uint64_t result = 1;
  if (a3 >= a2 && v4 > a3)
  {
    unint64_t v7 = a1[9];
    if (v7 <= a2 || v7 > a3)
    {
      uint64_t v8 = a2 + 1;
      if (v8 > a3) {
        return 0;
      }
      uint64_t v9 = v3 + ((unint64_t)a2 << 6);
      uint64_t v10 = (void *)(v9 + 48);
      unint64_t v11 = (_DWORD *)(v9 + 56);
      unint64_t v12 = (_DWORD *)(v9 + 60);
      uint64_t v13 = *(void *)(v9 + 40);
      int v14 = (_DWORD *)(v3 + (v8 << 6) + 60);
      unint64_t v15 = a3 - (unint64_t)v8 + 1;
      while (v13 == *(void *)(v14 - 5) && *v10 == *(void *)(v14 - 3) && *v11 == *(v14 - 1) && *v12 == *v14)
      {
        uint64_t result = 0;
        v14 += 16;
        if (!--v15) {
          return result;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_24842D240(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 120))
  {
    sub_2483E8DDC((uint64_t *)(a1 + 64));
    sub_2483E8DDC((uint64_t *)(a1 + 24));
  }
  return a1;
}

uint64_t sub_24842D27C(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  float v7 = (float)(a4 - 1) / 1.4142;
  float v8 = v7 / (float)(a2 - 1);
  float v9 = v7 / (float)(a1 - 1);
  uint64_t v10 = (float *)(a3 + 4);
  int32x4_t v11 = vdupq_n_s32(0xC0D55555);
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
  float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
  float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
  float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
  float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x424379A1u);
  float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
  float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
  float32x4_t v22 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
  float32x4_t v23 = (float32x4_t)vdupq_n_s32(0xC19B8831);
  float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
  v25.i64[0] = 0x7F0000007FLL;
  v25.i64[1] = 0x7F0000007FLL;
  __asm
  {
    FMOV            V29.4S, #-1.0
    FMOV            V30.4S, #1.0
  }
  while (1)
  {
    int v59 = 0;
    memset(&v58, 0, 64);
    float v32 = *(float *)(a3 + 68 * v6);
    *(float *)v58.i32 = v32;
    if (v32 < 0.00000001) {
      return 1;
    }
    unint64_t v33 = a4 - 1;
    unint64_t v34 = v10;
    unint64_t v35 = (float *)&v58 + 1;
    if (a4 >= 2)
    {
      do
      {
        float v36 = *v34 + 1.0;
        if (*v34 <= 0.0) {
          float v36 = 1.0 / (float)(1.0 - *v34);
        }
        float v32 = v32 * v36;
        *unint64_t v35 = v32;
        if (v32 < 0.00000001) {
          return 1;
        }
        ++v35;
        ++v34;
      }
      while (--v33);
    }
    if (a1)
    {
      uint64_t v37 = 0;
      unsigned int v38 = 0;
      int32x4_t v39 = vdupq_lane_s32(v58, 0);
      do
      {
        if (a2)
        {
          uint64_t v40 = 0;
          unsigned int v41 = 0;
          v5.f32[0] = (float)(v9 * (float)v38) * (float)(v9 * (float)v38);
          float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
          uint64_t v42 = a5 + 4 * a2 * a1 * v6 + 4 * v37 * a2;
          do
          {
            float32x4_t v43 = (float32x4_t)v39;
            if (a4 != 1)
            {
              uint64_t v44 = 0;
              v43.f32[0] = (float)v41;
              float32x4_t v45 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0), (float32x4_t)xmmword_2484DCBA0), v8);
              float32x4_t v46 = vsqrtq_f32(vmlaq_f32(v5, v45, v45));
              int32x4_t v47 = vcvtq_s32_f32(v46);
              int32x4_t v61 = v47;
              do
              {
                v60.i32[v44] = v58.i32[v61.i32[v44]];
                ++v44;
              }
              while (v44 != 4);
              uint64_t v48 = 0;
              float32x4_t v49 = v60;
              int32x4_t v61 = v47;
              do
              {
                v60.i32[v48] = v58.i32[v61.i32[v48] + 1];
                ++v48;
              }
              while (v48 != 4);
              float32x4_t v50 = vsubq_f32(v46, vcvtq_f32_s32(v47));
              int32x4_t v51 = (int32x4_t)vdivq_f32(v60, v49);
              int32x4_t v52 = vaddq_s32(v51, v11);
              float32x4_t v53 = vaddq_f32((float32x4_t)vsubq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)v52, v25)), _Q29);
              float32x4_t v54 = vmulq_f32(v50, vaddq_f32(vdivq_f32(vmlaq_f32(v16, v53, vmlaq_f32(v13, v12, v53)), vmlaq_f32(v17, v53, vmlaq_f32(v15, v14, v53))), vcvtq_f32_s32(vshrq_n_s32(v52, 0x17uLL))));
              float32x4_t v55 = vrndmq_f32(v54);
              float32x4_t v56 = vsubq_f32(v54, v55);
              float32x4_t v43 = vmulq_f32(v49, vdivq_f32(vmulq_f32(vmlaq_f32(v20, v56, vmlaq_f32(v19, v56, vaddq_f32(v56, v18))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v55), 0x17uLL), _Q30)), vmlaq_f32(v24, v56, vmlaq_f32(v23, v56, vmlaq_f32(v22, v21, v56)))));
            }
            *(float32x4_t *)(v42 + 4 * v40) = v43;
            v41 += 4;
            uint64_t v40 = v41;
          }
          while (v41 < a2);
        }
        uint64_t v37 = ++v38;
      }
      while (v38 < a1);
    }
    ++v6;
    v10 += 17;
    if (v6 == 3) {
      return 0;
    }
  }
}

uint64_t sub_24842D60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  unint64_t v10 = dword_248550648[a4];
  uint64_t v11 = 8 * v10;
  unint64_t v12 = dword_24855068C[a4];
  uint64_t v13 = 8 * v12;
  uint64_t v14 = 8 * v12 * 8 * v10;
  unint64_t v15 = 3 * v14;
  sub_24842DF64(__p, 3 * v14);
  switch(*(_DWORD *)a1)
  {
    case 1:
      uint64_t v16 = 0;
      float32x4_t v17 = (char *)__p[0];
      float32x4_t v18 = (char *)__p[0];
      do
      {
        uint64_t v19 = 0;
        float32x4_t v20 = (_DWORD *)(a1 + 224 + 12 * v16);
        do
        {
          *(_DWORD *)&v18[v19] = *v20;
          v19 += 4;
        }
        while (v19 != 256);
        *(_DWORD *)&v17[(v16 << 8) | 4] = v20[1];
        *(_DWORD *)&v17[(v16 << 8) | 0x20] = v20[1];
        *(_DWORD *)&v17[(v16++ << 8) | 0x24] = v20[2];
        v18 += 256;
      }
      while (v16 != 3);
      goto LABEL_72;
    case 2:
      uint64_t v101 = 0;
      uint64_t v102 = (char *)__p[0];
      uint64_t v103 = (char *)__p[0] + 144;
      uint64_t v104 = (char *)__p[0];
      do
      {
        uint64_t v105 = 0;
        uint64_t v106 = &v102[256 * v101];
        *(_DWORD *)uint64_t v106 = 1161482240;
        uint64_t v107 = (int *)(a1 + 224 + 24 * v101);
        int v108 = *v107;
        *((_DWORD *)v106 + 8) = *v107;
        *((_DWORD *)v106 + 1) = v108;
        *((_DWORD *)v106 + 9) = v107[1];
        char v109 = 1;
        do
        {
          char v110 = v109;
          uint64_t v111 = v105 | (v101 << 6);
          *(_DWORD *)&v102[(4 * v111) | 8] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0x40] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0xC] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0x44] = v107[2];
          uint64_t v105 = 8;
          char v109 = 0;
        }
        while ((v110 & 1) != 0);
        uint64_t v112 = 0;
        *(_DWORD *)&v102[(v101 << 8) | 0x48] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x4C] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x68] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x6C] = v107[3];
        uint64_t v113 = v104;
        do
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            uint64_t v115 = &v113[i];
            *((_DWORD *)v115 + 4) = v107[4];
            *((_DWORD *)v115 + 32) = v107[4];
          }
          ++v112;
          v113 += 32;
        }
        while (v112 != 4);
        uint64_t v116 = 0;
        unint64_t v117 = v103;
        do
        {
          for (uint64_t j = 0; j != 16; j += 4)
            *(_DWORD *)&v117[j] = v107[5];
          ++v116;
          v117 += 32;
        }
        while (v116 != 4);
        ++v101;
        v104 += 256;
        v103 += 256;
      }
      while (v101 != 3);
      goto LABEL_72;
    case 3:
      if (sub_24842D27C(4uLL, 4uLL, a1 + 16, *(void *)(a1 + 8), (uint64_t)v146)) {
        goto LABEL_88;
      }
      uint64_t v21 = 0;
      float32x4_t v22 = (char *)__p[0];
      float32x4_t v23 = v146;
      float32x4_t v24 = (float32x2_t *)__p[0];
      do
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = v21 * v14;
        uint64_t v28 = v24;
        do
        {
          uint64_t v29 = 0;
          uint64_t v30 = v28;
          do
          {
            uint64_t v31 = (const float *)&v23[16 * (v25 >> 2) + v29];
            float32x2_t v32 = vld1_dup_f32(v31);
            *v30++ = v32;
            v29 += 4;
          }
          while (v29 != 16);
          ++v26;
          v28 += 4;
          v25 += 2;
        }
        while (v26 != 8);
        unint64_t v33 = (float *)(a1 + 224 + 8 * v21);
        *(float *)&v22[(4 * v27) | 4] = *(float *)&v22[(4 * v27) | 4] / *v33;
        *(float *)&v22[(4 * v27) | 0x20] = *(float *)&v22[(4 * v27) | 0x20] / *v33;
        *(float *)&v22[(4 * v27) | 0x24] = *(float *)&v22[(4 * v27) | 0x24] / v33[1];
        ++v21;
        float32x4_t v24 = (float32x2_t *)((char *)v24 + 4 * v11 * v13);
        v23 += 64;
      }
      while (v21 != 3);
      goto LABEL_72;
    case 4:
      if (sub_24842D27C(4uLL, 8uLL, a1 + 16, *(void *)(a1 + 8), (uint64_t)v146)) {
        goto LABEL_88;
      }
      uint64_t v34 = 0;
      unint64_t v35 = (char *)__p[0];
      float v36 = (char *)__p[0];
      do
      {
        uint64_t v37 = 0;
        unsigned int v38 = v36;
        do
        {
          int32x4_t v39 = &v146[128 * v34 + (v37 & 0x7FFFFFFFFFFFFFE0)];
          long long v40 = v39[1];
          *unsigned int v38 = *v39;
          v38[1] = v40;
          v38 += 2;
          v37 += 16;
        }
        while (v37 != 128);
        *(float *)&v35[(4 * v34 * v14) | 0x20] = *(float *)&v35[(4 * v34 * v14) | 0x20] / *(float *)(a1 + 224 + 4 * v34);
        ++v34;
        v36 += 4 * v14;
      }
      while (v34 != 3);
      goto LABEL_72;
    case 5:
      if (sub_24842D27C(4uLL, 8uLL, a1 + 16, *(void *)(a1 + 8), (uint64_t)v146)
        || sub_24842D27C(4uLL, 4uLL, a1 + 344, *(void *)(a1 + 336), (uint64_t)v145))
      {
        goto LABEL_88;
      }
      uint64_t v41 = 0;
      uint64_t v42 = a1 + 224;
      float32x4_t v43 = (char *)__p[0];
      uint64_t v44 = a1 + 248;
      float32x4_t v45 = (char *)__p[0] + 32;
      uint64_t v46 = 4 * v11 * v13;
      int32x4_t v47 = (char *)__p[0] + 4;
      uint64_t v48 = v146;
      float32x4_t v49 = v145;
      int32x2_t v50 = vdup_n_s32(0xC0D55555);
      float32x2_t v51 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
      float32x2_t v52 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
      float32x2_t v53 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
      float32x2_t v54 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
      float32x2_t v55 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
      float32x2_t v56 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
      __asm
      {
        FMOV            V21.2S, #-1.0
        FMOV            V22.2S, #1.0
      }
      float32x2_t v63 = (float32x2_t)vdup_n_s32(0x4122CC6Bu);
      float32x2_t v64 = (float32x2_t)vdup_n_s32(0x424379A1u);
      float32x2_t v65 = (float32x2_t)vdup_n_s32(0x42C519F0u);
      float32x2_t v66 = (float32x2_t)vdup_n_s32(0x3E5749EEu);
      float32x2_t v67 = (float32x2_t)vdup_n_s32(0xBCB621BE);
      float32x2_t v68 = (float32x2_t)vdup_n_s32(0xC19B8831);
      float32x2_t v69 = (float32x2_t)vdup_n_s32(0x42C519F1u);
      unsigned int v70 = (float *)__p[0];
      break;
    case 6:
      uint64_t v119 = sub_24842D27C(8 * v10, 8 * v12, a1 + 16, *(void *)(a1 + 8), (uint64_t)__p[0]);
      if (!v119) {
        goto LABEL_72;
      }
      goto LABEL_89;
    case 7:
      uint64_t v120 = *(void **)(a1 + 224);
      if (!v120 || v15 != (uint64_t)(v120[1] - *v120) >> 2) {
        goto LABEL_88;
      }
      if (!v14)
      {
        uint64_t v124 = *a5;
        goto LABEL_77;
      }
      uint64_t v121 = 0;
      uint64_t v122 = (float *)__p[0];
      if (v15 <= 1) {
        uint64_t v123 = 1;
      }
      else {
        uint64_t v123 = 3 * v14;
      }
      do
      {
        v122[v121] = 1.0 / (float)(*(float *)(a1 + 232) * (float)*(int *)(**(void **)(a1 + 224) + 4 * v121));
        ++v121;
      }
      while (v123 != v121);
      goto LABEL_72;
    default:
      goto LABEL_72;
  }
LABEL_24:
  uint64_t v71 = v42 + 36 * v41;
  float v72 = *(float *)(v71 + 20);
  v144[0] = v72;
  if (v72 >= 0.00000001)
  {
    uint64_t v73 = 0;
    while (1)
    {
      float v74 = *(float *)(v44 + v73 * 4);
      BOOL v75 = v74 <= 0.0;
      float v76 = 1.0 / (float)(1.0 - v74);
      float v77 = v74 + 1.0;
      if (v75) {
        float v77 = v76;
      }
      float v72 = v72 * v77;
      v144[v73 + 1] = v72;
      if (v72 < 0.00000001) {
        break;
      }
      if (++v73 == 3)
      {
        unint64_t v78 = 0;
        int v79 = &v43[256 * v41];
        *(_DWORD *)int v79 = 1065353216;
        *((_DWORD *)v79 + 8) = *(_DWORD *)v71;
        *((_DWORD *)v79 + 1) = *(_DWORD *)(v71 + 4);
        *((_DWORD *)v79 + 16) = *(_DWORD *)(v71 + 8);
        *((_DWORD *)v79 + 2) = *(_DWORD *)(v71 + 12);
        *((_DWORD *)v79 + 18) = *(_DWORD *)(v71 + 16);
        uint64_t v80 = (float *)&unk_24854D6BC;
        unint64_t v81 = v70;
        do
        {
          uint64_t v82 = 0;
          BOOL v83 = v81;
          do
          {
            if ((v82 | v78) >= 2)
            {
              float v84 = (float)((float)(v80[v82] + -0.85178) * 3.0) / 12.12;
              uint64_t v85 = &v144[(unint64_t)v84];
              v5.f32[0] = v85[1] / *v85;
              int32x2_t v86 = vdup_lane_s32((int32x2_t)v5, 0);
              int32x2_t v87 = vadd_s32(v86, v50);
              float32x2_t v88 = vadd_f32((float32x2_t)vsub_s32(v86, (int32x2_t)vand_s8((int8x8_t)v87, (int8x8_t)0x7F0000007FLL)), _D21);
              float32x2_t v89 = vmul_n_f32(vadd_f32(vdiv_f32(vmla_f32(v55, v88, vmla_f32(v52, v51, v88)), vmla_f32(v56, v88, vmla_f32(v54, v53, v88))), vcvt_f32_s32(vshr_n_s32(v87, 0x17uLL))), v84 - (float)(unint64_t)v84);
              float32x2_t v90 = vrndm_f32(v89);
              float32x2_t v91 = vsub_f32(v89, v90);
              float32x2_t v5 = vmul_f32(vmla_f32(v65, v91, vmla_f32(v64, v91, vadd_f32(v91, v63))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(v90), 0x17uLL), _D22));
              *BOOL v83 = *v85 * vdiv_f32(v5, vmla_f32(v69, v91, vmla_f32(v68, v91, vmla_f32(v67, v66, v91)))).f32[0];
            }
            ++v82;
            v83 += 2;
          }
          while (v82 != 4);
          ++v78;
          v81 += 16;
          v80 += 4;
        }
        while (v78 != 4);
        uint64_t v92 = 0;
        uint64_t v93 = v48;
        uint64_t v94 = v45;
        do
        {
          for (uint64_t k = 0; k != 8; ++k)
          {
            if (k | v92) {
              *(_DWORD *)&v94[4 * k] = *(_DWORD *)&v93[4 * k];
            }
          }
          ++v92;
          v94 += 64;
          v93 += 32;
        }
        while (v92 != 4);
        uint64_t v96 = 0;
        unint64_t v97 = v49;
        unint64_t v98 = v47;
        do
        {
          uint64_t v99 = 0;
          long long v100 = v98;
          do
          {
            if (v99 | v96) {
              *long long v100 = *(_DWORD *)&v97[4 * v99];
            }
            ++v99;
            v100 += 2;
          }
          while (v99 != 4);
          ++v96;
          v98 += 16;
          v97 += 16;
        }
        while (v96 != 4);
        ++v41;
        v44 += 36;
        v70 += 64;
        v45 += v46;
        v48 += 128;
        v47 += v46;
        v49 += 64;
        if (v41 != 3) {
          goto LABEL_24;
        }
LABEL_72:
        uint64_t v124 = *a5;
        if (!v14)
        {
LABEL_77:
          uint64_t v133 = 0;
          *a5 = v124 + v15;
          uint64_t v134 = ((int)v12 * (uint64_t)(int)v10) << 8;
          if (v12 >= v10) {
            unint64_t v135 = v10;
          }
          else {
            unint64_t v135 = v12;
          }
          if (v12 <= v10) {
            unint64_t v136 = v10;
          }
          else {
            unint64_t v136 = v12;
          }
          uint64_t v137 = 32 * v136;
          size_t v138 = 4 * v136;
          BOOL v139 = (char *)(a3 + 4 * v124);
          do
          {
            uint64_t v140 = v139;
            for (unint64_t m = v135; m; --m)
            {
              bzero(v140, v138);
              v140 += v137;
            }
            ++v133;
            v139 += v134;
          }
          while (v133 != 3);
          uint64_t v119 = 0;
          goto LABEL_89;
        }
        unint64_t v125 = 0;
        uint64_t v126 = (float32x4_t *)__p[0];
        uint64_t v127 = (float32x4_t *)(a2 + 4 * v124);
        uint64_t v128 = (float32x4_t *)(a3 + 4 * v124);
        float32x4_t v129 = (float32x4_t)vdupq_n_s32(0x4CBEBC20u);
        float32x4_t v130 = (float32x4_t)vdupq_n_s32(0x322BCC77u);
        __asm { FMOV            V2.4S, #1.0 }
        while (1)
        {
          float32x4_t v132 = *v126;
          if (*(void *)&vshrn_n_s16((int16x8_t)vcgeq_f32(*v126, v129), 4uLL)
            || *(void *)&vshrn_n_s16((int16x8_t)vcgtq_f32(v130, v132), 4uLL))
          {
            goto LABEL_88;
          }
          *v127++ = vdivq_f32(_Q2, v132);
          *v128++ = v132;
          v125 += 4;
          ++v126;
          if (v125 >= v15) {
            goto LABEL_77;
          }
        }
      }
    }
  }
LABEL_88:
  uint64_t v119 = 1;
LABEL_89:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v119;
}

void *sub_24842DF64(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2483E92A8(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_24842DFC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24842DFDC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)a2[2];
  if ((unint64_t)v6 > a2[3])
  {
    sub_2483EB0C0(a2);
    unint64_t v8 = *a2;
    uint64_t v10 = a2[1];
  }
  else
  {
    unint64_t v7 = a2[1];
    unint64_t v8 = *a2 | (*v6 << v7);
    float v9 = (char *)v6 + ((63 - v7) >> 3);
    uint64_t v10 = v7 | 0x38;
    *a2 = v8;
    a2[1] = v7 | 0x38;
    a2[2] = (unint64_t)v9;
  }
  *a2 = v8 >> 1;
  a2[1] = v10 - 1;
  uint64_t v11 = (uint64_t *)(a1 + 720);
  uint64_t v12 = *(void *)(a1 + 728);
  uint64_t v13 = *(void *)(a1 + 720);
  while (v12 != v13)
    uint64_t v12 = sub_248403910(v12 - 560);
  *(void *)(a1 + 728) = v13;
  memset(&v124[4], 0, 208);
  int v125 = 0;
  memset(&v123[4], 0, 108);
  int v122 = 0;
  memset(&v121[4], 0, 208);
  *(_DWORD *)float32x2_t v90 = 0;
  *(_OWORD *)&v90[4] = *(_OWORD *)v124;
  *(_OWORD *)&v90[20] = *(_OWORD *)&v124[16];
  long long v92 = *(_OWORD *)&v124[80];
  *(_OWORD *)&v91[16] = *(_OWORD *)&v124[64];
  *(_OWORD *)float32x2_t v91 = *(_OWORD *)&v124[48];
  *(_OWORD *)&v90[36] = *(_OWORD *)&v124[32];
  long long v94 = *(_OWORD *)&v124[144];
  *(_OWORD *)&v93[32] = *(_OWORD *)&v124[128];
  *(_OWORD *)&v93[16] = *(_OWORD *)&v124[112];
  *(_OWORD *)uint64_t v93 = *(_OWORD *)&v124[96];
  uint64_t v98 = 0;
  long long v97 = *(_OWORD *)&v124[192];
  long long v96 = *(_OWORD *)&v124[176];
  long long v95 = *(_OWORD *)&v124[160];
  long long v102 = *(_OWORD *)&v123[48];
  long long v103 = *(_OWORD *)&v123[64];
  long long v104 = *(_OWORD *)&v123[80];
  long long v105 = 0u;
  long long v99 = *(_OWORD *)v123;
  long long v100 = *(_OWORD *)&v123[16];
  long long v101 = *(_OWORD *)&v123[32];
  long long v106 = *(_OWORD *)v121;
  long long v107 = *(_OWORD *)&v121[16];
  long long v110 = *(_OWORD *)&v121[64];
  long long v111 = *(_OWORD *)&v121[80];
  long long v108 = *(_OWORD *)&v121[32];
  long long v109 = *(_OWORD *)&v121[48];
  long long v114 = *(_OWORD *)&v121[128];
  long long v115 = *(_OWORD *)&v121[144];
  long long v112 = *(_OWORD *)&v121[96];
  long long v113 = *(_OWORD *)&v121[112];
  uint64_t v119 = 0;
  long long v117 = *(_OWORD *)&v121[176];
  long long v118 = *(_OWORD *)&v121[192];
  long long v116 = *(_OWORD *)&v121[160];
  char v120 = 0;
  sub_24842EA88((void *)(a1 + 720), v90);
  sub_248403910((uint64_t)v90);
  if ((v8 & 1) == 0)
  {
    uint64_t v14 = 0;
    int v79 = (unsigned char *)(a3 + 288);
    uint64_t v80 = (void *)(a3 + 264);
    uint64_t v78 = a3 + 432;
    uint64_t v15 = 224;
    uint64_t v81 = a3;
    while (1)
    {
      uint64_t v16 = dword_248550648[v14];
      uint64_t v17 = *v11;
      uint64_t v18 = dword_24855068C[v14];
      uint64_t v19 = (void *)a2[2];
      if ((unint64_t)v19 > a2[3])
      {
        uint64_t v71 = v15;
        sub_2483EB0C0(a2);
        uint64_t v15 = v71;
        unint64_t v21 = *a2;
        uint64_t v22 = a2[1];
      }
      else
      {
        unint64_t v20 = a2[1];
        unint64_t v21 = *a2 | (*v19 << v20);
        a2[2] = (unint64_t)v19 + ((63 - v20) >> 3);
        uint64_t v22 = v20 | 0x38;
      }
      uint64_t v23 = v17 + 560 * v14;
      uint64_t v24 = (int)v18 * (uint64_t)(int)v16;
      uint64_t v25 = v22 - 3;
      unint64_t v26 = v21 >> 3;
      *a2 = v21 >> 3;
      a2[1] = v22 - 3;
      int v27 = v21 & 7;
      switch(v21 & 7)
      {
        case 1uLL:
          if (v24 != 1) {
            return 1;
          }
          uint64_t v30 = 0;
          uint64_t v31 = v17 + v15;
          uint64_t v82 = v15;
          int v86 = v21 & 7;
          while (1)
          {
            for (uint64_t i = 0; i != 12; i += 4)
            {
              unint64_t v33 = (float *)(v31 + i);
              if (sub_24841A984(a2, (float *)(v31 + i)) || fabsf(*v33) < 0.00000001) {
                return 1;
              }
              *unint64_t v33 = *v33 * 64.0;
            }
            ++v30;
            v31 += 12;
            uint64_t v15 = v82;
            int v27 = v86;
            if (v30 == 3) {
              goto LABEL_78;
            }
          }
        case 2uLL:
          if (v24 != 1) {
            return 1;
          }
          uint64_t v34 = 0;
          uint64_t v35 = v17 + v15;
          uint64_t v83 = v15;
          int v87 = v21 & 7;
          do
          {
            for (uint64_t j = 0; j != 24; j += 4)
            {
              uint64_t v37 = (float *)(v35 + j);
              if (sub_24841A984(a2, (float *)(v35 + j)) || fabsf(*v37) < 0.00000001) {
                return 1;
              }
              *uint64_t v37 = *v37 * 64.0;
            }
            ++v34;
            v35 += 24;
            uint64_t v15 = v83;
            int v27 = v87;
          }
          while (v34 != 3);
          goto LABEL_78;
        case 3uLL:
          if (v24 != 1) {
            return 1;
          }
          uint64_t v84 = v15;
          int v88 = v21 & 7;
          uint64_t v38 = 0;
          uint64_t v39 = v23 + 224;
          do
          {
            uint64_t v40 = 0;
            uint64_t v41 = v39 + 8 * v38;
            char v42 = 1;
            do
            {
              char v43 = v42;
              uint64_t v44 = (float *)(v41 + 4 * v40);
              if (sub_24841A984(a2, v44) || fabsf(*v44) < 0.00000001) {
                return 1;
              }
              char v42 = 0;
              uint64_t v40 = 1;
            }
            while ((v43 & 1) != 0);
            ++v38;
            uint64_t v39 = v23 + 224;
          }
          while (v38 != 3);
          goto LABEL_43;
        case 4uLL:
          if (v24 != 1) {
            return 1;
          }
          uint64_t v84 = v15;
          int v88 = v21 & 7;
          uint64_t v45 = 0;
          uint64_t v46 = v17 + v15;
          do
          {
            if (sub_24841A984(a2, (float *)(v46 + v45)) || fabsf(*(float *)(v46 + v45)) < 0.00000001) {
              return 1;
            }
            v45 += 4;
          }
          while (v45 != 12);
LABEL_43:
          int v47 = sub_24842ECAC(a2, (uint64_t *)(v23 + 8));
          uint64_t v15 = v84;
          goto LABEL_44;
        case 5uLL:
          if (v24 != 1) {
            return 1;
          }
          int v88 = v21 & 7;
          uint64_t v48 = 0;
          uint64_t v49 = v15;
          uint64_t v50 = v17 + v15;
          do
          {
            for (uint64_t k = 0; k != 36; k += 4)
            {
              if (sub_24841A984(a2, (float *)(v50 + k))) {
                return 1;
              }
            }
            for (uint64_t m = 0; m != 24; m += 4)
              *(float *)(v50 + m) = *(float *)(v50 + m) * 64.0;
            ++v48;
            v50 += 36;
          }
          while (v48 != 3);
          if (!sub_24842ECAC(a2, (uint64_t *)(v23 + 8)))
          {
            int v47 = sub_24842ECAC(a2, (uint64_t *)(v23 + 336));
            uint64_t v15 = v49;
LABEL_44:
            int v27 = v88;
            if (!v47) {
              goto LABEL_78;
            }
          }
          return 1;
        case 6uLL:
          uint64_t v53 = v15;
          int v54 = v21 & 7;
          uint64_t v55 = sub_24842ECAC(a2, (uint64_t *)(v23 + 8));
          int v27 = v54;
          uint64_t v15 = v53;
          if (!v55) {
            goto LABEL_78;
          }
          return v55;
        case 7uLL:
          uint64_t v85 = v15;
          int v89 = v21 & 7;
          *(_DWORD *)uint64_t v23 = 7;
          if (sub_24841A984(a2, (float *)(v23 + 232)) || *(float *)(v23 + 232) < 0.00000001) {
            return 1;
          }
          uint64_t v77 = 8 * v18;
          sub_24842A0C4((uint64_t)v124, 8 * v16, 8 * v18, 8, 3);
          uint64_t v75 = *(unsigned int *)&v124[88];
          if (*(_DWORD *)&v124[88])
          {
            sub_24840A478((uint64_t)v124);
            return v75;
          }
          *(_OWORD *)uint64_t v121 = *(_OWORD *)v124;
          memset(v124, 0, 48);
          *(_OWORD *)&v121[24] = *(_OWORD *)&v124[24];
          *(void *)&v121[16] = *(void *)&v124[16];
          *(void *)&v121[40] = *(void *)&v124[40];
          *(_OWORD *)&v121[48] = *(_OWORD *)&v124[48];
          *(_OWORD *)&v121[64] = *(_OWORD *)&v124[64];
          v121[80] = v124[80];
          *(_OWORD *)float32x2_t v90 = xmmword_2484DCB30;
          *(void *)&v90[16] = 1056964608;
          float32x2_t v56 = operator new(0x20uLL);
          *(void *)&v90[32] = v56 + 2;
          *(void *)&v90[40] = v56 + 2;
          _OWORD *v56 = xmmword_24855076C;
          v56[1] = unk_24855077C;
          float v76 = v56;
          *(void *)&v90[24] = v56;
          *(_DWORD *)&v90[48] = 1119879168;
          *(void *)&v91[4] = 32;
          *(void *)&v91[12] = 0xFFFFFFFFLL;
          *(void *)&v91[20] = 0x33F8147AELL;
          v91[28] = 0;
          long long v92 = xmmword_2484DCB20;
          *(_DWORD *)uint64_t v93 = 2;
          memset(&v93[4], 0, 24);
          *(void *)&v93[28] = -1;
          *(_DWORD *)&v93[36] = 256;
          v93[40] = 0;
          v93[44] = 0;
          if (v81)
          {
            *(_DWORD *)uint64_t v123 = 4;
            *(void *)&v123[8] = v14;
            *(_OWORD *)&v123[16] = 0uLL;
            uint64_t v57 = sub_24840A1D8((uint64_t)v123, *(void *)(v81 + 224), *(void *)(v81 + 232));
            uint64_t v58 = sub_24842980C(a2, (uint64_t)v121, 0, v57, (unint64_t *)v90, 1, v80, v79, v78);
          }
          else
          {
            uint64_t v58 = sub_24842980C(a2, (uint64_t)v121, 0, 0, (unint64_t *)v90, 1, 0, 0, 0);
          }
          uint64_t v75 = v58;
          if (!v58)
          {
            int v59 = *(char ***)(v23 + 224);
            if (!v59) {
              operator new();
            }
            sub_2483EB1C4(v59, 3 * v77 * 8 * v16);
            uint64_t v60 = 0;
            uint64_t v61 = 0;
            uint64_t v62 = *(void *)v121;
            while (!v18)
            {
LABEL_74:
              uint64_t v75 = 0;
              ++v61;
              v60 += ((int)v18 * (uint64_t)(int)v16) << 8;
              if (v61 == 3) {
                goto LABEL_77;
              }
            }
            uint64_t v63 = 0;
            uint64_t v65 = *(void *)(v62 + (v61 << 6) + 16);
            float32x2_t v64 = *(int **)(v62 + (v61 << 6) + 24);
            uint64_t v66 = v60;
            while (1)
            {
              float32x2_t v67 = v64;
              uint64_t v68 = v66;
              uint64_t v69 = 8 * v16;
              if (v16) {
                break;
              }
LABEL_73:
              ++v63;
              v66 += 32 * v16;
              float32x2_t v64 = (int *)((char *)v64 + v65);
              if (v63 == v77) {
                goto LABEL_74;
              }
            }
            while (1)
            {
              *(_DWORD *)(**(void **)(v23 + 224) + v68) = *v67;
              int v70 = *v67++;
              if (v70 < 1) {
                break;
              }
              v68 += 4;
              if (!--v69) {
                goto LABEL_73;
              }
            }
            uint64_t v75 = 1;
          }
LABEL_77:
          operator delete(v76);
          *(void *)float32x2_t v90 = &v121[24];
          sub_2483FDBFC((void ***)v90);
          *(void *)float32x2_t v90 = v121;
          sub_2483FDCBC((void ***)v90);
          sub_24840A478((uint64_t)v124);
          uint64_t v15 = v85;
          int v27 = v89;
          if (v75) {
            return v75;
          }
LABEL_78:
          *(_DWORD *)uint64_t v23 = v27;
          ++v14;
          v15 += 560;
          uint64_t v11 = (uint64_t *)(a1 + 720);
          if (v14 == 17) {
            goto LABEL_82;
          }
          break;
        default:
          uint64_t v28 = (void *)a2[2];
          if ((unint64_t)v28 > a2[3])
          {
            uint64_t v72 = v15;
            int v73 = v27;
            sub_2483EB0C0(a2);
            int v27 = v73;
            uint64_t v15 = v72;
          }
          else
          {
            unint64_t v29 = (*v28 << v25) | v26;
            a2[2] = (unint64_t)v28 + ((unint64_t)(66 - v22) >> 3);
            *a2 = v29;
            a2[1] = v25 | 0x38;
          }
          *(unsigned char *)(v23 + 552) = 0;
          goto LABEL_78;
      }
    }
  }
LABEL_82:
  uint64_t v75 = 0;
  *(_DWORD *)a1 = 0;
  return v75;
}

void sub_24842EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void *sub_24842EA88(void *result, const void *a2)
{
  char v2 = result;
  uint64_t v3 = *result;
  unint64_t v4 = (void *)result[1];
  uint64_t v5 = (uint64_t)v4 - *result;
  unint64_t v6 = 0xAF8AF8AF8AF8AF8BLL * (v5 >> 4);
  if (v6 > 0x10)
  {
    if (v5 != 9520)
    {
      uint64_t v24 = (void *)(v3 + 9520);
      while (v4 != v24)
      {
        v4 -= 70;
        uint64_t result = (void *)sub_248403910((uint64_t)v4);
      }
      v2[1] = v24;
    }
  }
  else
  {
    uint64_t v8 = result[2];
    if (0xAF8AF8AF8AF8AF8BLL * ((v8 - (uint64_t)v4) >> 4) >= 17 - v6)
    {
      uint64_t v25 = &v4[70 * (17 - v6)];
      uint64_t v26 = 9520 - 16 * (v5 >> 4);
      do
      {
        uint64_t result = sub_24842EDD8(v4, a2);
        v4 += 70;
        v26 -= 560;
      }
      while (v26);
      v2[1] = v25;
    }
    else
    {
      uint64_t v31 = result + 2;
      unint64_t v9 = 0xAF8AF8AF8AF8AF8BLL * ((v8 - v3) >> 4);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= 0x11) {
        uint64_t v10 = 17;
      }
      if (v9 >= 0x3A83A83A83A83ALL) {
        unint64_t v11 = 0x75075075075075;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)sub_24842EE84(v11);
      uint64_t v13 = &v12[560 * v6];
      uint64_t v28 = v12;
      v29.i64[0] = (uint64_t)v13;
      v29.i64[1] = (uint64_t)v13;
      uint64_t v30 = &v12[560 * v14];
      uint64_t v15 = v12 + 9520;
      unint64_t v16 = v6 - 17;
      do
      {
        sub_24842EDD8(v13, a2);
        v13 += 560;
      }
      while (!__CFADD__(v16++, 1));
      v29.i64[1] = (uint64_t)v15;
      uint64_t v19 = (void *)*v2;
      unint64_t v18 = v2[1];
      unint64_t v20 = (_DWORD *)v29.i64[0];
      if (v18 == *v2)
      {
        int64x2_t v23 = vdupq_n_s64(v18);
      }
      else
      {
        unint64_t v21 = (void *)(v18 - 560);
        do
        {
          v20 -= 140;
          memcpy(v20, v21, 0x229uLL);
          if (*v20 == 7) {
            v21[28] = 0;
          }
          BOOL v22 = v21 == v19;
          v21 -= 70;
        }
        while (!v22);
        int64x2_t v23 = *(int64x2_t *)v2;
        uint64_t v15 = (char *)v29.i64[1];
      }
      *char v2 = v20;
      v2[1] = v15;
      int64x2_t v29 = v23;
      int v27 = (char *)v2[2];
      v2[2] = v30;
      uint64_t v30 = v27;
      uint64_t v28 = (char *)v23.i64[0];
      return (void *)sub_24842EED0((uint64_t)&v28);
    }
  }
  return result;
}

void sub_24842EC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_24842ECAC(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = (void *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2483EB0C0(a1);
    unint64_t v6 = *a1;
    uint64_t v7 = a1[1];
  }
  else
  {
    unint64_t v5 = a1[1];
    unint64_t v6 = *a1 | (*v4 << v5);
    a1[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    uint64_t v7 = v5 | 0x38;
  }
  uint64_t v8 = 0;
  *a1 = v6 >> 4;
  a1[1] = v7 - 4;
  *a2 = (v6 & 0xF) + 1;
  uint64_t v9 = 1;
  uint64_t v10 = (float *)(a2 + 1);
  while (!v9)
  {
LABEL_8:
    uint64_t v13 = (float *)a2 + 17 * v8 + 2;
    if (*v13 < 0.00000001) {
      return 1;
    }
    float *v13 = *v13 * 64.0;
    ++v8;
    v10 += 17;
    if (v8 == 3) {
      return 0;
    }
  }
  unint64_t v11 = 0;
  uint64_t v12 = v10;
  while (!sub_24841A984(a1, v12))
  {
    ++v11;
    uint64_t v9 = *a2;
    ++v12;
    if (v11 >= *a2) {
      goto LABEL_8;
    }
  }
  return 1;
}

void *sub_24842EDD8(void *a1, const void *a2)
{
  if (*(_DWORD *)a1 == 7 && a1[28]) {
    operator new();
  }
  return a1;
}

void sub_24842EE60(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F90](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void *sub_24842EE84(unint64_t a1)
{
  if (a1 >= 0x75075075075076) {
    sub_2483E9338();
  }
  return operator new(560 * a1);
}

uint64_t sub_24842EED0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 560;
    sub_248403910(i - 560);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_24842EF20(uint64_t a1, unint64_t *a2)
{
  unint64_t v5 = (void *)a2[2];
  unint64_t v4 = a2[3];
  if ((unint64_t)v5 > v4)
  {
    sub_2483EB0C0(a2);
    unint64_t v7 = *a2;
    uint64_t v9 = a2[1];
    uint64_t v8 = (char *)a2[2];
    unint64_t v4 = a2[3];
  }
  else
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = *a2 | (*v5 << v6);
    uint64_t v8 = (char *)v5 + ((63 - v6) >> 3);
    a2[2] = (unint64_t)v8;
    uint64_t v9 = v6 | 0x38;
  }
  uint64_t v10 = v9 - 1;
  *a2 = v7 >> 1;
  a2[1] = v10;
  unint64_t v11 = a2[4];
  unint64_t v12 = 8 * (void)&v8[a2[5] - v11] - v10;
  a2[7] = v12;
  if (v12 > 8 * (v4 - v11) + 64) {
    return 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = (float *)(a1 + v14 + 48);
      if (sub_24841A984(a2, v15)) {
        break;
      }
      float v16 = *v15 * 0.0078125;
      *uint64_t v15 = v16;
      if (v16 < 0.00000001) {
        break;
      }
      *(float *)(a1 + v14 + 60) = 1.0 / v16;
      v14 += 4;
      if (v14 == 12) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_24842F040(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2484DCBB0;
  *(void *)(a1 + 64) = 0x4380000044000000;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  memset(&v54[4], 0, 208);
  int v55 = 0;
  *(_OWORD *)((char *)v53 + 4) = 0u;
  *(_OWORD *)((char *)&v53[1] + 4) = 0u;
  *(_OWORD *)((char *)&v53[2] + 4) = 0u;
  *(_OWORD *)((char *)&v53[3] + 4) = 0u;
  *(_OWORD *)((char *)&v53[4] + 4) = 0u;
  *(_OWORD *)((char *)&v53[5] + 4) = 0u;
  v53[6] = 0u;
  int v52 = 0;
  memset(&v51[4], 0, 208);
  int v14 = 0;
  long long v15 = *(_OWORD *)v54;
  long long v16 = *(_OWORD *)&v54[16];
  long long v20 = *(_OWORD *)&v54[80];
  long long v19 = *(_OWORD *)&v54[64];
  long long v18 = *(_OWORD *)&v54[48];
  long long v17 = *(_OWORD *)&v54[32];
  long long v24 = *(_OWORD *)&v54[144];
  long long v23 = *(_OWORD *)&v54[128];
  long long v22 = *(_OWORD *)&v54[112];
  long long v21 = *(_OWORD *)&v54[96];
  uint64_t v28 = 0;
  long long v27 = *(_OWORD *)&v54[192];
  long long v26 = *(_OWORD *)&v54[176];
  long long v25 = *(_OWORD *)&v54[160];
  long long v32 = v53[3];
  long long v33 = v53[4];
  long long v34 = v53[5];
  long long v35 = 0u;
  long long v29 = v53[0];
  long long v30 = v53[1];
  long long v31 = v53[2];
  long long v36 = *(_OWORD *)v51;
  long long v37 = *(_OWORD *)&v51[16];
  long long v40 = *(_OWORD *)&v51[64];
  long long v41 = *(_OWORD *)&v51[80];
  long long v38 = *(_OWORD *)&v51[32];
  long long v39 = *(_OWORD *)&v51[48];
  long long v44 = *(_OWORD *)&v51[128];
  long long v45 = *(_OWORD *)&v51[144];
  long long v42 = *(_OWORD *)&v51[96];
  long long v43 = *(_OWORD *)&v51[112];
  uint64_t v49 = 0;
  long long v47 = *(_OWORD *)&v51[176];
  long long v48 = *(_OWORD *)&v51[192];
  long long v46 = *(_OWORD *)&v51[160];
  char v50 = 0;
  sub_24842EA88((void *)(a1 + 720), &v14);
  sub_248403910((uint64_t)&v14);
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = &v14;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = dword_24855068C[v2] * (uint64_t)dword_248550648[v2];
    uint64_t v7 = v3;
    do
    {
      *(void *)&v4[v5] = v7;
      v5 += 2;
      v7 += v6 << 6;
    }
    while (v5 != 6);
    v3 += 192 * v6;
    ++v2;
    v4 += 6;
  }
  while (v2 != 17);
  uint64_t v8 = 72;
  uint64_t v9 = &qword_24854D700;
  do
  {
    uint64_t v10 = a1 + v8;
    uint64_t v11 = *v9++;
    unint64_t v12 = &v14 + 6 * v11;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v12;
    *(void *)(v10 + 16) = *((void *)v12 + 2);
    v8 += 24;
  }
  while (v8 != 720);
  return a1;
}

void sub_24842F340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_248403910((uint64_t)va);
  sub_248403688((void ***)va);
  sub_2483FED94(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_24842F368(uint64_t a1, unsigned int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26931BDB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26931BDB8))
  {
    dword_269319888[0] = 6;
    qword_269319890 = 6;
    xmmword_269319938 = xmmword_24854D878;
    unk_269319948 = unk_24854D888;
    unk_269319954 = unk_24854D894;
    xmmword_2693198F8 = xmmword_24854D838;
    unk_269319908 = unk_24854D848;
    xmmword_269319918 = xmmword_24854D858;
    unk_269319928 = unk_24854D868;
    xmmword_2693198B8 = xmmword_24854D7F8;
    unk_2693198C8 = unk_24854D808;
    xmmword_2693198D8 = xmmword_24854D818;
    unk_2693198E8 = unk_24854D828;
    xmmword_269319898 = xmmword_24854D7D8;
    unk_2693198A8 = unk_24854D7E8;
    xmmword_269319968 = 0u;
    unk_2693199C4 = 0u;
    xmmword_2693199A8 = 0u;
    unk_2693199B8 = 0u;
    xmmword_269319988 = 0u;
    unk_269319998 = 0u;
    xmmword_269319978 = 0u;
    xmmword_2693199D8 = 0u;
    unk_2693199E8 = 0u;
    xmmword_2693199F8 = 0u;
    unk_269319A08 = 0u;
    xmmword_269319A18 = 0u;
    unk_269319A28 = 0u;
    xmmword_269319A38 = 0u;
    unk_269319A48 = 0u;
    xmmword_269319A58 = 0u;
    unk_269319A68 = 0u;
    xmmword_269319A78 = 0u;
    unk_269319A88 = 0u;
    xmmword_269319A98 = 0u;
    dword_269319AA8 = 0;
    byte_269319AB0 = 0;
    dword_269319AB8 = 1;
    unk_269319AC0 = 0u;
    unk_269319AD0 = 0u;
    unk_269319AE0 = 0u;
    unk_269319AF0 = 0u;
    unk_269319B00 = 0u;
    unk_269319B10 = 0u;
    unk_269319B20 = 0u;
    unk_269319B30 = 0u;
    unk_269319B40 = 0u;
    unk_269319B50 = 0u;
    unk_269319B60 = 0u;
    unk_269319B70 = 0u;
    unk_269319B80 = 0u;
    dword_269319B90 = 0;
    dword_269319BB8 = 1128792064;
    xmmword_269319B98 = xmmword_24854D8A8;
    unk_269319BA8 = unk_24854D8B8;
    dword_269319CD8 = 0;
    xmmword_269319CB8 = 0u;
    unk_269319CC8 = 0u;
    xmmword_269319C98 = 0u;
    unk_269319CA8 = 0u;
    xmmword_269319C78 = 0u;
    unk_269319C88 = 0u;
    xmmword_269319C58 = 0u;
    unk_269319C68 = 0u;
    xmmword_269319C38 = 0u;
    unk_269319C48 = 0u;
    xmmword_269319C18 = 0u;
    unk_269319C28 = 0u;
    xmmword_269319C08 = 0u;
    byte_269319CE0 = 0;
    dword_269319CE8 = 2;
    dword_269319DC0 = 0;
    unk_269319DB0 = 0u;
    unk_269319DA0 = 0u;
    unk_269319D90 = 0u;
    unk_269319D80 = 0u;
    unk_269319D70 = 0u;
    unk_269319D60 = 0u;
    unk_269319D50 = 0u;
    unk_269319D40 = 0u;
    unk_269319D30 = 0u;
    unk_269319D20 = 0u;
    unk_269319D10 = 0u;
    unk_269319D00 = 0u;
    unk_269319CF0 = 0u;
    xmmword_269319DC8 = xmmword_24854D8D0;
    qword_269319E08 = 0x4180000042000000;
    xmmword_269319DF8 = unk_24854D900;
    xmmword_269319DE8 = xmmword_24854D8F0;
    xmmword_269319DD8 = unk_24854D8E0;
    dword_269319F08 = 0;
    xmmword_269319EF8 = 0u;
    xmmword_269319EE8 = 0u;
    xmmword_269319ED8 = 0u;
    xmmword_269319EC8 = 0u;
    xmmword_269319EB8 = 0u;
    xmmword_269319EA8 = 0u;
    xmmword_269319E98 = 0u;
    xmmword_269319E88 = 0u;
    xmmword_269319E78 = 0u;
    xmmword_269319E68 = 0u;
    xmmword_269319E58 = 0u;
    xmmword_269319E48 = 0u;
    xmmword_269319E38 = 0u;
    byte_269319F10 = 0;
    xmmword_269319F28 = xmmword_24854D918;
    xmmword_269319F68 = xmmword_24854D958;
    xmmword_269319F58 = unk_24854D948;
    xmmword_269319F48 = xmmword_24854D938;
    xmmword_269319F38 = unk_24854D928;
    xmmword_269319FA8 = xmmword_24854D998;
    xmmword_269319F98 = unk_24854D988;
    xmmword_269319F88 = xmmword_24854D978;
    xmmword_269319F78 = unk_24854D968;
    *(long long *)((char *)&xmmword_269319FD8 + 12) = unk_24854D9D4;
    xmmword_269319FD8 = unk_24854D9C8;
    xmmword_269319FC8 = xmmword_24854D9B8;
    xmmword_269319FB8 = unk_24854D9A8;
    dword_269319F18 = 3;
    qword_269319F20 = 4;
    qword_26931A008 = 0x3F8000003F800000;
    xmmword_269319FF8 = xmmword_24854D9E8;
    xmmword_26931A068 = 0u;
    xmmword_26931A078 = 0u;
    xmmword_26931A088 = 0u;
    xmmword_26931A098 = 0u;
    xmmword_26931A0A8 = 0u;
    xmmword_26931A0B8 = 0u;
    xmmword_26931A0C8 = 0u;
    xmmword_26931A0D8 = 0u;
    xmmword_26931A0E8 = 0u;
    xmmword_26931A0F8 = 0u;
    xmmword_26931A108 = 0u;
    xmmword_26931A118 = 0u;
    xmmword_26931A128 = 0u;
    dword_26931A138 = 0;
    byte_26931A140 = 0;
    dword_26931A148 = 6;
    qword_26931A150 = 7;
    xmmword_26931A1E8 = unk_24854DA90;
    xmmword_26931A1F8 = xmmword_24854DAA0;
    xmmword_26931A208 = unk_24854DAB0;
    *(long long *)((char *)&xmmword_26931A208 + 12) = unk_24854DABC;
    xmmword_26931A1A8 = unk_24854DA50;
    xmmword_26931A1B8 = xmmword_24854DA60;
    xmmword_26931A1C8 = unk_24854DA70;
    xmmword_26931A1D8 = xmmword_24854DA80;
    xmmword_26931A168 = unk_24854DA10;
    xmmword_26931A178 = xmmword_24854DA20;
    xmmword_26931A188 = unk_24854DA30;
    xmmword_26931A198 = xmmword_24854DA40;
    xmmword_26931A158 = xmmword_24854DA00;
    *(long long *)((char *)&xmmword_26931A278 + 12) = 0u;
    xmmword_26931A278 = 0u;
    xmmword_26931A268 = 0u;
    xmmword_26931A258 = 0u;
    xmmword_26931A248 = 0u;
    xmmword_26931A238 = 0u;
    xmmword_26931A228 = 0u;
    xmmword_26931A298 = 0u;
    xmmword_26931A2A8 = 0u;
    xmmword_26931A2B8 = 0u;
    xmmword_26931A2C8 = 0u;
    xmmword_26931A2D8 = 0u;
    xmmword_26931A2E8 = 0u;
    xmmword_26931A2F8 = 0u;
    xmmword_26931A308 = 0u;
    xmmword_26931A318 = 0u;
    xmmword_26931A328 = 0u;
    xmmword_26931A338 = 0u;
    xmmword_26931A348 = 0u;
    xmmword_26931A358 = 0u;
    dword_26931A368 = 0;
    byte_26931A370 = 0;
    dword_26931A378 = 6;
    qword_26931A380 = 8;
    xmmword_26931A418 = unk_24854DB60;
    xmmword_26931A428 = xmmword_24854DB70;
    xmmword_26931A438 = unk_24854DB80;
    *(long long *)((char *)&xmmword_26931A438 + 12) = unk_24854DB8C;
    xmmword_26931A3D8 = unk_24854DB20;
    xmmword_26931A3E8 = xmmword_24854DB30;
    xmmword_26931A3F8 = unk_24854DB40;
    xmmword_26931A408 = xmmword_24854DB50;
    xmmword_26931A398 = unk_24854DAE0;
    xmmword_26931A3A8 = xmmword_24854DAF0;
    xmmword_26931A3B8 = unk_24854DB00;
    xmmword_26931A3C8 = xmmword_24854DB10;
    xmmword_26931A388 = xmmword_24854DAD0;
    *(long long *)((char *)&xmmword_26931A4A8 + 12) = 0u;
    xmmword_26931A4A8 = 0u;
    xmmword_26931A498 = 0u;
    xmmword_26931A488 = 0u;
    xmmword_26931A478 = 0u;
    xmmword_26931A468 = 0u;
    xmmword_26931A458 = 0u;
    xmmword_26931A4C8 = 0u;
    xmmword_26931A4D8 = 0u;
    xmmword_26931A4E8 = 0u;
    xmmword_26931A4F8 = 0u;
    xmmword_26931A508 = 0u;
    xmmword_26931A518 = 0u;
    xmmword_26931A528 = 0u;
    xmmword_26931A538 = 0u;
    xmmword_26931A548 = 0u;
    xmmword_26931A558 = 0u;
    xmmword_26931A568 = 0u;
    xmmword_26931A578 = 0u;
    xmmword_26931A588 = 0u;
    dword_26931A598 = 0;
    byte_26931A5A0 = 0;
    dword_26931A5A8 = 6;
    qword_26931A5B0 = 7;
    xmmword_26931A648 = unk_24854DC30;
    xmmword_26931A658 = xmmword_24854DC40;
    xmmword_26931A668 = unk_24854DC50;
    *(long long *)((char *)&xmmword_26931A668 + 12) = unk_24854DC5C;
    xmmword_26931A608 = unk_24854DBF0;
    xmmword_26931A618 = xmmword_24854DC00;
    xmmword_26931A628 = unk_24854DC10;
    xmmword_26931A638 = xmmword_24854DC20;
    xmmword_26931A5C8 = unk_24854DBB0;
    xmmword_26931A5D8 = xmmword_24854DBC0;
    xmmword_26931A5E8 = unk_24854DBD0;
    xmmword_26931A5F8 = xmmword_24854DBE0;
    xmmword_26931A5B8 = xmmword_24854DBA0;
    *(long long *)((char *)&xmmword_26931A6D8 + 12) = 0u;
    xmmword_26931A6D8 = 0u;
    xmmword_26931A6C8 = 0u;
    xmmword_26931A6B8 = 0u;
    xmmword_26931A6A8 = 0u;
    xmmword_26931A698 = 0u;
    xmmword_26931A688 = 0u;
    xmmword_26931A6F8 = 0u;
    xmmword_26931A708 = 0u;
    xmmword_26931A718 = 0u;
    xmmword_26931A728 = 0u;
    xmmword_26931A878 = unk_24854DD00;
    xmmword_26931A888 = xmmword_24854DD10;
    xmmword_26931A898 = unk_24854DD20;
    *(long long *)((char *)&xmmword_26931A898 + 12) = unk_24854DD2C;
    xmmword_26931A838 = unk_24854DCC0;
    xmmword_26931A848 = xmmword_24854DCD0;
    xmmword_26931A858 = unk_24854DCE0;
    xmmword_26931A868 = xmmword_24854DCF0;
    xmmword_26931A7F8 = unk_24854DC80;
    xmmword_26931A808 = xmmword_24854DC90;
    xmmword_26931A818 = unk_24854DCA0;
    xmmword_26931A828 = xmmword_24854DCB0;
    xmmword_26931AAA8 = unk_24854DDD0;
    xmmword_26931AAB8 = xmmword_24854DDE0;
    xmmword_26931AAC8 = unk_24854DDF0;
    *(long long *)((char *)&xmmword_26931AAC8 + 12) = unk_24854DDFC;
    xmmword_26931AA68 = unk_24854DD90;
    xmmword_26931AA78 = xmmword_24854DDA0;
    xmmword_26931AA88 = unk_24854DDB0;
    xmmword_26931AA98 = xmmword_24854DDC0;
    xmmword_26931AA28 = unk_24854DD50;
    xmmword_26931AA38 = xmmword_24854DD60;
    xmmword_26931AA48 = unk_24854DD70;
    xmmword_26931AA58 = xmmword_24854DD80;
    xmmword_26931AA18 = xmmword_24854DD40;
    dword_26931AD20 = 1065353216;
    xmmword_26931AD98 = 0u;
    qword_26931AC40 = 4;
    __asm { FMOV            V23.2S, #1.0 }
    qword_26931AD18 = _D23;
    xmmword_26931AD88 = 0u;
    xmmword_26931AC88 = xmmword_24854DE50;
    xmmword_26931AC48 = xmmword_24854DE10;
    dword_26931AC38 = 4;
    xmmword_26931AC58 = unk_24854DE20;
    xmmword_26931AC68 = xmmword_24854DE30;
    xmmword_26931AC78 = unk_24854DE40;
    xmmword_26931ACA8 = xmmword_24854DE70;
    xmmword_26931ACB8 = unk_24854DE80;
    xmmword_26931ACC8 = xmmword_24854DE90;
    xmmword_26931AC18 = 0u;
    dword_26931AC28 = 0;
    xmmword_26931ACF8 = unk_24854DEC0;
    xmmword_26931AC98 = unk_24854DE60;
    byte_26931AC30 = 0;
    xmmword_26931ACD8 = unk_24854DEA0;
    xmmword_26931ACE8 = xmmword_24854DEB0;
    *(long long *)((char *)&xmmword_26931ACF8 + 12) = unk_24854DECC;
    xmmword_26931ABB8 = 0u;
    xmmword_26931ABC8 = 0u;
    xmmword_26931ABD8 = 0u;
    xmmword_26931ABE8 = 0u;
    xmmword_26931ABF8 = 0u;
    xmmword_26931AC08 = 0u;
    xmmword_26931AB58 = 0u;
    xmmword_26931AB68 = 0u;
    xmmword_26931AB78 = 0u;
    xmmword_26931AB88 = 0u;
    xmmword_26931AB98 = 0u;
    xmmword_26931ABA8 = 0u;
    xmmword_26931A738 = 0u;
    xmmword_26931A748 = 0u;
    xmmword_26931A758 = 0u;
    xmmword_26931AB08 = 0u;
    xmmword_26931AAF8 = 0u;
    xmmword_26931AAE8 = 0u;
    *(long long *)((char *)&xmmword_26931AB38 + 12) = 0u;
    xmmword_26931AB38 = 0u;
    xmmword_26931AB28 = 0u;
    xmmword_26931AB18 = 0u;
    xmmword_26931A768 = 0u;
    xmmword_26931A778 = 0u;
    xmmword_26931A788 = 0u;
    xmmword_26931A798 = 0u;
    xmmword_26931A7A8 = 0u;
    xmmword_26931A7B8 = 0u;
    dword_26931A7C8 = 0;
    byte_26931A7D0 = 0;
    dword_26931A7D8 = 6;
    byte_26931AA00 = 0;
    dword_26931AA08 = 6;
    qword_26931AA10 = 8;
    xmmword_26931A9A8 = 0u;
    xmmword_26931A9B8 = 0u;
    xmmword_26931A9C8 = 0u;
    xmmword_26931A9D8 = 0u;
    xmmword_26931A9E8 = 0u;
    dword_26931A9F8 = 0;
    xmmword_26931A948 = 0u;
    xmmword_26931A958 = 0u;
    xmmword_26931A968 = 0u;
    xmmword_26931A978 = 0u;
    xmmword_26931A988 = 0u;
    xmmword_26931A998 = 0u;
    qword_26931A7E0 = 8;
    xmmword_26931A7E8 = xmmword_24854DC70;
    xmmword_26931A8C8 = 0u;
    xmmword_26931A8B8 = 0u;
    xmmword_26931A928 = 0u;
    xmmword_26931A938 = 0u;
    *(long long *)((char *)&xmmword_26931A908 + 12) = 0u;
    xmmword_26931A908 = 0u;
    xmmword_26931A8F8 = 0u;
    xmmword_26931A8E8 = 0u;
    xmmword_26931A8D8 = 0u;
    xmmword_26931ADA8 = 0u;
    xmmword_26931ADB8 = 0u;
    xmmword_26931ADC8 = 0u;
    xmmword_26931ADD8 = 0u;
    xmmword_26931ADE8 = 0u;
    xmmword_26931ADF8 = 0u;
    xmmword_26931AE08 = 0u;
    xmmword_26931AE18 = 0u;
    xmmword_26931AE28 = 0u;
    xmmword_26931AE38 = 0u;
    xmmword_26931AE48 = 0u;
    dword_26931AE58 = 0;
    byte_26931AE60 = 0;
    dword_26931AE68 = 5;
    qword_26931AE70 = 4;
    xmmword_26931AF08 = unk_24854DEA0;
    xmmword_26931AF18 = xmmword_24854DEB0;
    xmmword_26931AF28 = unk_24854DEC0;
    *(long long *)((char *)&xmmword_26931AF28 + 12) = unk_24854DECC;
    xmmword_26931AEC8 = unk_24854DE60;
    xmmword_26931AED8 = xmmword_24854DE70;
    xmmword_26931AEE8 = unk_24854DE80;
    xmmword_26931AEF8 = xmmword_24854DE90;
    xmmword_26931AE88 = unk_24854DE20;
    xmmword_26931AE98 = xmmword_24854DE30;
    xmmword_26931AEA8 = unk_24854DE40;
    xmmword_26931AEB8 = xmmword_24854DE50;
    xmmword_26931AE78 = xmmword_24854DE10;
    xmmword_26931AF78 = unk_24854DF10;
    xmmword_26931AF88 = xmmword_24854DF20;
    xmmword_26931AF98 = unk_24854DF30;
    *(long long *)((char *)&xmmword_26931AF98 + 12) = unk_24854DF3C;
    xmmword_26931AF48 = xmmword_24854DEE0;
    xmmword_26931AF58 = unk_24854DEF0;
    xmmword_26931AF68 = xmmword_24854DF00;
    qword_26931AFB8 = 4;
    unk_26931AFC0 = xmmword_24854D918;
    unk_26931B000 = xmmword_24854D958;
    unk_26931AFF0 = unk_24854D948;
    unk_26931AFE0 = xmmword_24854D938;
    unk_26931AFD0 = unk_24854D928;
    unk_26931B040 = xmmword_24854D998;
    unk_26931B030 = unk_24854D988;
    unk_26931B020 = xmmword_24854D978;
    unk_26931B010 = unk_24854D968;
    unk_26931B07C = unk_24854D9D4;
    xmmword_26931B158 = unk_24854E000;
    unk_26931B070 = unk_24854D9C8;
    unk_26931B060 = xmmword_24854D9B8;
    unk_26931B050 = unk_24854D9A8;
    byte_26931B090 = 0;
    dword_26931B098 = 6;
    qword_26931B0A0 = 8;
    xmmword_26931B138 = unk_24854DFE0;
    xmmword_26931B148 = xmmword_24854DFF0;
    *(long long *)((char *)&xmmword_26931B158 + 12) = unk_24854E00C;
    xmmword_26931B0F8 = unk_24854DFA0;
    xmmword_26931B108 = xmmword_24854DFB0;
    xmmword_26931B118 = unk_24854DFC0;
    xmmword_26931B128 = xmmword_24854DFD0;
    xmmword_26931B0B8 = unk_24854DF60;
    xmmword_26931B0C8 = xmmword_24854DF70;
    xmmword_26931B0D8 = unk_24854DF80;
    xmmword_26931B0E8 = xmmword_24854DF90;
    xmmword_26931B0A8 = xmmword_24854DF50;
    *(long long *)((char *)&xmmword_26931B1C8 + 12) = 0u;
    xmmword_26931B1C8 = 0u;
    xmmword_26931B1B8 = 0u;
    xmmword_26931B1A8 = 0u;
    xmmword_26931B198 = 0u;
    xmmword_26931B188 = 0u;
    xmmword_26931B178 = 0u;
    xmmword_26931B1E8 = 0u;
    xmmword_26931B1F8 = 0u;
    xmmword_26931B208 = 0u;
    xmmword_26931B218 = 0u;
    xmmword_26931B228 = 0u;
    xmmword_26931B238 = 0u;
    xmmword_26931B248 = 0u;
    xmmword_26931B258 = 0u;
    xmmword_26931B268 = 0u;
    xmmword_26931B278 = 0u;
    xmmword_26931B288 = 0u;
    xmmword_26931B298 = 0u;
    xmmword_26931B2A8 = 0u;
    dword_26931B2B8 = 0;
    byte_26931B2C0 = 0;
    dword_26931B2C8 = 6;
    qword_26931B2D0 = 8;
    xmmword_26931B368 = unk_24854E0B0;
    xmmword_26931B378 = xmmword_24854E0C0;
    xmmword_26931B388 = unk_24854E0D0;
    *(long long *)((char *)&xmmword_26931B388 + 12) = unk_24854E0DC;
    xmmword_26931B328 = unk_24854E070;
    xmmword_26931B338 = xmmword_24854E080;
    xmmword_26931B348 = unk_24854E090;
    xmmword_26931B358 = xmmword_24854E0A0;
    xmmword_26931B2E8 = unk_24854E030;
    xmmword_26931B2F8 = xmmword_24854E040;
    xmmword_26931B308 = unk_24854E050;
    xmmword_26931B318 = xmmword_24854E060;
    xmmword_26931B2D8 = xmmword_24854E020;
    *(long long *)((char *)&xmmword_26931B3F8 + 12) = 0u;
    xmmword_26931B3F8 = 0u;
    xmmword_26931B3E8 = 0u;
    xmmword_26931B3D8 = 0u;
    xmmword_26931B3C8 = 0u;
    xmmword_26931B3B8 = 0u;
    xmmword_26931B3A8 = 0u;
    xmmword_26931B418 = 0u;
    xmmword_26931B428 = 0u;
    xmmword_26931B438 = 0u;
    xmmword_26931B448 = 0u;
    xmmword_26931B458 = 0u;
    xmmword_26931B468 = 0u;
    xmmword_26931B478 = 0u;
    xmmword_26931B488 = 0u;
    xmmword_26931B498 = 0u;
    xmmword_26931B4A8 = 0u;
    xmmword_26931B4B8 = 0u;
    xmmword_26931B4C8 = 0u;
    xmmword_26931B4D8 = 0u;
    dword_26931B4E8 = 0;
    byte_26931B4F0 = 0;
    dword_26931B4F8 = 6;
    qword_26931B500 = 8;
    xmmword_26931B598 = unk_24854E180;
    xmmword_26931B5A8 = xmmword_24854E190;
    xmmword_26931B5B8 = unk_24854E1A0;
    *(long long *)((char *)&xmmword_26931B5B8 + 12) = unk_24854E1AC;
    xmmword_26931B558 = unk_24854E140;
    xmmword_26931B568 = xmmword_24854E150;
    xmmword_26931B578 = unk_24854E160;
    xmmword_26931B588 = xmmword_24854E170;
    xmmword_26931B518 = unk_24854E100;
    xmmword_26931B528 = xmmword_24854E110;
    xmmword_26931B538 = unk_24854E120;
    xmmword_26931B548 = xmmword_24854E130;
    xmmword_26931B508 = xmmword_24854E0F0;
    *(long long *)((char *)&xmmword_26931B628 + 12) = 0u;
    xmmword_26931B628 = 0u;
    xmmword_26931B618 = 0u;
    xmmword_26931B608 = 0u;
    xmmword_26931B5F8 = 0u;
    xmmword_26931B5E8 = 0u;
    xmmword_26931B5D8 = 0u;
    xmmword_26931B648 = 0u;
    xmmword_26931B658 = 0u;
    xmmword_26931B668 = 0u;
    xmmword_26931B678 = 0u;
    xmmword_26931B688 = 0u;
    xmmword_26931B698 = 0u;
    xmmword_26931B6A8 = 0u;
    xmmword_26931B6B8 = 0u;
    xmmword_26931B6C8 = 0u;
    xmmword_26931B6D8 = 0u;
    xmmword_26931B6E8 = 0u;
    xmmword_26931B7E8 = unk_24854E270;
    xmmword_26931B6F8 = 0u;
    xmmword_26931B708 = 0u;
    dword_26931B718 = 0;
    byte_26931B720 = 0;
    dword_26931B728 = 6;
    qword_26931B730 = 8;
    xmmword_26931B7C8 = unk_24854E250;
    xmmword_26931B7D8 = xmmword_24854E260;
    *(long long *)((char *)&xmmword_26931B7E8 + 12) = unk_24854E27C;
    xmmword_26931B788 = unk_24854E210;
    xmmword_26931B798 = xmmword_24854E220;
    xmmword_26931B7A8 = unk_24854E230;
    xmmword_26931B7B8 = xmmword_24854E240;
    xmmword_26931B748 = unk_24854E1D0;
    xmmword_26931B758 = xmmword_24854E1E0;
    xmmword_26931B768 = unk_24854E1F0;
    xmmword_26931B778 = xmmword_24854E200;
    xmmword_26931B738 = xmmword_24854E1C0;
    *(long long *)((char *)&xmmword_26931B858 + 12) = 0u;
    xmmword_26931B858 = 0u;
    xmmword_26931B848 = 0u;
    xmmword_26931B838 = 0u;
    xmmword_26931B828 = 0u;
    xmmword_26931B818 = 0u;
    xmmword_26931B808 = 0u;
    xmmword_26931B878 = 0u;
    xmmword_26931B888 = 0u;
    xmmword_26931B898 = 0u;
    xmmword_26931B8A8 = 0u;
    xmmword_26931B8B8 = 0u;
    xmmword_26931B8C8 = 0u;
    xmmword_26931B8D8 = 0u;
    xmmword_26931B8E8 = 0u;
    xmmword_26931B8F8 = 0u;
    xmmword_26931B908 = 0u;
    xmmword_26931B918 = 0u;
    xmmword_26931B928 = 0u;
    xmmword_26931B938 = 0u;
    dword_26931B948 = 0;
    byte_26931B950 = 0;
    dword_26931B958 = 6;
    qword_26931B960 = 8;
    xmmword_26931B9F8 = unk_24854E320;
    xmmword_26931BA08 = xmmword_24854E330;
    xmmword_26931BA18 = unk_24854E340;
    *(long long *)((char *)&xmmword_26931BA18 + 12) = unk_24854E34C;
    xmmword_26931B9B8 = unk_24854E2E0;
    xmmword_26931B9C8 = xmmword_24854E2F0;
    xmmword_26931B9D8 = unk_24854E300;
    xmmword_26931B9E8 = xmmword_24854E310;
    xmmword_26931B978 = unk_24854E2A0;
    xmmword_26931B988 = xmmword_24854E2B0;
    xmmword_26931B998 = unk_24854E2C0;
    xmmword_26931B9A8 = xmmword_24854E2D0;
    xmmword_26931B968 = xmmword_24854E290;
    *(long long *)((char *)&xmmword_26931BA88 + 12) = 0u;
    xmmword_26931BA88 = 0u;
    xmmword_26931BA78 = 0u;
    xmmword_26931BA68 = 0u;
    xmmword_26931BA58 = 0u;
    xmmword_26931BA48 = 0u;
    xmmword_26931BA38 = 0u;
    xmmword_26931BAA8 = 0u;
    xmmword_26931BAB8 = 0u;
    xmmword_26931BAC8 = 0u;
    xmmword_26931BAD8 = 0u;
    xmmword_26931BAE8 = 0u;
    xmmword_26931BAF8 = 0u;
    xmmword_26931BB08 = 0u;
    xmmword_26931BB18 = 0u;
    xmmword_26931BB28 = 0u;
    xmmword_26931BB38 = 0u;
    xmmword_26931BB48 = 0u;
    xmmword_26931BB58 = 0u;
    xmmword_26931BB68 = 0u;
    dword_26931BB78 = 0;
    byte_26931BB80 = 0;
    dword_26931BB88 = 6;
    qword_26931BB90 = 8;
    xmmword_26931BC28 = unk_24854E3F0;
    xmmword_26931BC38 = xmmword_24854E400;
    xmmword_26931BC48 = unk_24854E410;
    *(long long *)((char *)&xmmword_26931BC48 + 12) = unk_24854E41C;
    xmmword_26931BBE8 = unk_24854E3B0;
    xmmword_26931BBF8 = xmmword_24854E3C0;
    xmmword_26931BC08 = unk_24854E3D0;
    xmmword_26931BC18 = xmmword_24854E3E0;
    xmmword_26931BBA8 = unk_24854E370;
    xmmword_26931BBB8 = xmmword_24854E380;
    xmmword_26931BBC8 = unk_24854E390;
    xmmword_26931BBD8 = xmmword_24854E3A0;
    xmmword_26931BB98 = xmmword_24854E360;
    *(long long *)((char *)&xmmword_26931BCB8 + 12) = 0u;
    xmmword_26931BCB8 = 0u;
    xmmword_26931BCA8 = 0u;
    xmmword_26931BC98 = 0u;
    xmmword_26931BC88 = 0u;
    xmmword_26931BC78 = 0u;
    xmmword_26931BC68 = 0u;
    xmmword_26931BCD8 = 0u;
    xmmword_26931BCE8 = 0u;
    xmmword_26931BCF8 = 0u;
    xmmword_26931BD08 = 0u;
    xmmword_26931BD18 = 0u;
    xmmword_26931BD28 = 0u;
    xmmword_26931BD38 = 0u;
    xmmword_26931BD48 = 0u;
    xmmword_26931BD58 = 0u;
    xmmword_26931BD68 = 0u;
    xmmword_26931BD78 = 0u;
    xmmword_26931BD88 = 0u;
    xmmword_26931BD98 = 0u;
    dword_26931BDA8 = 0;
    byte_26931BDB0 = 0;
    __cxa_guard_release(&qword_26931BDB8);
  }
  unint64_t v4 = (uint64_t *)(a1 + 8);
  if (!*(void *)(a1 + 8))
  {
    atomic_fetch_add_explicit(&qword_2693193B8, 1uLL, memory_order_relaxed);
    unint64_t v5 = (unint64_t)malloc_type_malloc(0x303100uLL, 0xFBCB090DuLL);
    if (v5)
    {
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF80;
      uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFF80) + 256;
      *(void *)(v6 + 240) = v5;
      *(void *)(v6 + 248) = 3158016;
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v30 = 0;
    long long v31 = 0uLL;
    sub_248401764((uint64_t *)(a1 + 8), v7);
    *(_OWORD *)(a1 + 16) = 0uLL;
    sub_2483FED94(&v30);
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v8 + 1579008;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v30;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = dword_24855068C[v10] * (uint64_t)dword_248550648[v10];
    uint64_t v14 = v9;
    do
    {
      v11[v12++] = v14;
      v14 += v13 << 6;
    }
    while (v12 != 3);
    v9 += 192 * v13;
    ++v10;
    v11 += 3;
  }
  while (v10 != 17);
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v32 = 394752;
  do
  {
    if ((a2 >> v15)) {
      v16 |= 1 << LODWORD(qword_24854D700[v15]);
    }
    ++v15;
  }
  while (v15 != 27);
  uint64_t v17 = 0;
  int v18 = 0;
  do
  {
    if ((*(_DWORD *)a1 >> v17)) {
      v18 |= 1 << LODWORD(qword_24854D700[v17]);
    }
    ++v17;
  }
  while (v17 != 27);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v21 = &v30;
  do
  {
    if (((1 << v20) & v18) == 0 && ((1 << v20) & v16) != 0)
    {
      uint64_t v29 = *v21;
      long long v23 = (_DWORD *)(*(void *)(a1 + 720) + v19 * 4);
      if (*v23)
      {
        uint64_t result = sub_24842D60C((uint64_t)v23, *v4, *v4 + 1579008, v20, &v29);
        if (result) {
          return result;
        }
      }
      else
      {
        sub_24842D60C((uint64_t)&dword_269319888[v19], *v4, *v4 + 1579008, v20, &v29);
      }
    }
    ++v20;
    v19 += 140;
    v21 += 3;
  }
  while (v20 != 17);
  uint64_t result = 0;
  *(_DWORD *)a1 |= a2;
  return result;
}

uint64_t sub_248430298(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 0x1002A0000002ALL, 0x4002F0002002BLL, 1, a1 + 8);
  if (!result)
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);
    return v5(a2, 0x2480000010, 0x2F00000027, 1, a1 + 12);
  }
  return result;
}

void sub_248430368()
{
}

uint64_t sub_248430380(uint64_t result)
{
  uint64_t v1 = 0;
  double v2 = (double)*(int *)(result + 32);
  float v3 = v2 * 0.0000152587891;
  float v4 = 65536.0 / v2;
  *(float *)(result + 40) = v4;
  *(float *)(result + 44) = v3;
  float v5 = (float)*(int *)(result + 36);
  *(float *)(result + 48) = v4 / v5;
  uint64_t v6 = *(void *)(result + 64) + 60;
  do
  {
    uint64_t v7 = (float *)(result + v1);
    *uint64_t v7 = *(float *)(result + 48) * *(float *)(v6 + v1 - 12);
    v7[4] = *(float *)(v6 + v1) * (float)(*(float *)(result + 44) * v5);
    v1 += 4;
  }
  while (v1 != 12);
  return result;
}

uint64_t sub_248430404(uint64_t a1, float a2, float a3, float a4)
{
  float v6 = (float)((float)(a3 - a4) * 65536.0) / 5.0;
  if (v6 < 1.0) {
    float v6 = 1.0;
  }
  if (v6 > 32768.0) {
    float v6 = 32768.0;
  }
  int v7 = (int)v6;
  int v8 = (int)((float)(a2 * 4096.0) * 1.6);
  if (v8 <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = (int)((float)(a2 * 4096.0) * 1.6);
  }
  if (v7 > v8) {
    int v7 = v9;
  }
  *(_DWORD *)(a1 + 32) = v7;
  sub_248430380(a1);
  *(_DWORD *)(a1 + 36) = (int)fminf((float)(a2 * *(float *)(a1 + 40)) + 0.5, 65536.0);

  return sub_248430380(a1);
}

uint64_t sub_2484304C8(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a4[3];
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a4[1];
    uint64_t v8 = *(void *)(a5 + 16);
    uint64_t v9 = *(void *)(a5 + 24) + v7 * v8 + 4 * *a4;
    uint64_t v10 = a4[2];
    uint64_t v11 = (float *)(a3 + v7 * a2 + 4 * *a4);
    do
    {
      if (v10)
      {
        float v12 = *(float *)(result + 40);
        uint64_t v13 = v11;
        uint64_t v14 = (_DWORD *)v9;
        uint64_t v15 = v10;
        do
        {
          float v16 = *v13++;
          float v17 = (float)(v16 * v12) + 0.5;
          if (v17 > 256.0) {
            float v17 = 256.0;
          }
          *v14++ = (int)fmaxf(v17, 1.0);
          --v15;
        }
        while (v15);
      }
      ++v6;
      v9 += v8;
      uint64_t v11 = (float *)((char *)v11 + a2);
    }
    while (v6 != v5);
  }
  return result;
}

void sub_248430558(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  sub_24842DF64(&__p, a2[1] * (unint64_t)*a2);
  uint64_t v8 = a2[1];
  uint64_t v9 = __p;
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v12 = *((void *)a2 + 2);
    uint64_t v11 = (int *)*((void *)a2 + 3);
    uint64_t v13 = *a2;
    uint64_t v14 = (char *)__p;
    do
    {
      uint64_t v15 = v11;
      float v16 = v14;
      uint64_t v17 = v13;
      if (v13)
      {
        do
        {
          int v18 = *v15++;
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      ++v10;
      v14 += 4 * v13;
      uint64_t v11 = (int *)((char *)v11 + v12);
    }
    while (v10 != v8);
  }
  unint64_t v19 = ((char *)v35 - v9) >> 2;
  unint64_t v20 = v19 >> 1;
  if (&v9[4 * (v19 >> 1)] != (unsigned char *)v35)
  {
    sub_248430724((uint64_t)v9, (float *)&v9[4 * (v19 >> 1)], v35);
    uint64_t v9 = __p;
    unint64_t v19 = ((char *)v35 - (unsigned char *)__p) >> 2;
    unint64_t v20 = v19 >> 1;
  }
  float v21 = *(float *)&v9[4 * v20];
  sub_24842DF64(&v32, v19);
  long long v22 = (float *)__p;
  long long v23 = v32;
  if (v35 != __p)
  {
    unint64_t v24 = ((char *)v35 - (unsigned char *)__p) >> 2;
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    long long v25 = v32;
    do
    {
      float v26 = *v22++;
      *v25++ = vabds_f32(v26, v21);
      --v24;
    }
    while (v24);
  }
  unint64_t v27 = (unint64_t)(v33 - v23) >> 1;
  uint64_t v28 = &v23[v27];
  if (v28 != v33)
  {
    sub_248430724((uint64_t)v23, v28, v33);
    long long v23 = v32;
    unint64_t v27 = (unint64_t)(v33 - v32) >> 1;
  }
  sub_248430404(a1, a4, v21, v23[v27]);
  if (!a3
    || (v30[0] = 0,
        v30[1] = 0,
        *(void *)&long long v29 = *(void *)a2,
        *((void *)&v29 + 1) = HIDWORD(*(void *)a2),
        long long v31 = v29,
        sub_2484304C8(a1, *((void *)a2 + 2), *((void *)a2 + 3), v30, a3),
        (long long v23 = v32) != 0))
  {
    uint64_t v33 = v23;
    operator delete(v23);
  }
  if (__p)
  {
    long long v35 = (float *)__p;
    operator delete(__p);
  }
}

void sub_248430708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248430724(uint64_t result, float *a2, float *a3)
{
  if (a3 != a2)
  {
    float v3 = a3;
    uint64_t v5 = (float *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return sub_248430A04(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        float v36 = *(v3 - 1);
        float v37 = *v5;
        if (v36 < *v5)
        {
          *uint64_t v5 = v36;
          *(v3 - 1) = v37;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 31)
      {
        while (v5 != v3 - 1)
        {
          long long v38 = v5++;
          if (v38 != v3 && v5 != v3)
          {
            float v39 = *v38;
            float v40 = *v38;
            long long v41 = v5;
            long long v42 = v38;
            long long v43 = v5;
            do
            {
              float v44 = *v43++;
              float v45 = v44;
              if (v44 < v40)
              {
                float v40 = v45;
                long long v42 = v41;
              }
              long long v41 = v43;
            }
            while (v43 != v3);
            if (v42 != v38)
            {
              *long long v38 = *v42;
              float *v42 = v39;
            }
          }
        }
        return result;
      }
      uint64_t v7 = &v5[v6 >> 1];
      uint64_t v8 = v3 - 1;
      uint64_t result = sub_248430A04(v5, v7, v3 - 1);
      float v9 = *v5;
      if (*v5 < *v7)
      {
LABEL_12:
        uint64_t v14 = v5 + 1;
        if (v5 + 1 >= v8)
        {
          uint64_t v17 = v5 + 1;
        }
        else
        {
          uint64_t v15 = v5 + 1;
          while (1)
          {
            float v16 = *v7;
            do
            {
              uint64_t v17 = v15;
              float v18 = *v15++;
              float v19 = v18;
            }
            while (v18 < v16);
            do
            {
              float v20 = *--v8;
              float v21 = v20;
            }
            while (v20 >= v16);
            if (v17 >= v8) {
              break;
            }
            *uint64_t v17 = v21;
            *uint64_t v8 = v19;
            uint64_t result = (result + 1);
            if (v7 == v17) {
              uint64_t v7 = v8;
            }
          }
        }
        if (v17 != v7)
        {
          float v22 = *v17;
          if (*v7 < *v17)
          {
            *uint64_t v17 = *v7;
            *uint64_t v7 = v22;
            uint64_t result = (result + 1);
          }
        }
        if (v17 == a2) {
          return result;
        }
        if (!result)
        {
          if (v17 <= a2)
          {
            uint64_t v28 = v17 + 1;
            while (v28 != v3)
            {
              float v30 = *(v28 - 1);
              float v29 = *v28++;
              if (v29 < v30) {
                goto LABEL_27;
              }
            }
          }
          else
          {
            while (v14 != v17)
            {
              float v25 = *(v14 - 1);
              float v24 = *v14++;
              if (v24 < v25) {
                goto LABEL_27;
              }
            }
          }
          return result;
        }
LABEL_27:
        if (v17 <= a2)
        {
          long long v23 = v17 + 1;
        }
        else
        {
          float v3 = v17;
          long long v23 = v5;
        }
      }
      else
      {
        uint64_t v10 = v3 - 2;
        while (v10 != v5)
        {
          uint64_t v11 = v10;
          float v12 = *v10--;
          float v13 = v12;
          if (v12 < *v7)
          {
            *uint64_t v5 = v13;
            float *v11 = v9;
            uint64_t result = (result + 1);
            uint64_t v8 = v11;
            goto LABEL_12;
          }
        }
        float v26 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v26 != v8)
          {
            float v27 = *v26;
            if (v9 < *v26)
            {
              *v26++ = *v8;
              *uint64_t v8 = v27;
              goto LABEL_43;
            }
            ++v26;
          }
          return result;
        }
LABEL_43:
        if (v26 == v8) {
          return result;
        }
        while (1)
        {
          float v31 = *v5;
          do
          {
            long long v23 = v26;
            float v32 = *v26++;
            float v33 = v32;
          }
          while (v31 >= v32);
          do
          {
            float v34 = *--v8;
            float v35 = v34;
          }
          while (v31 < v34);
          if (v23 >= v8) {
            break;
          }
          *long long v23 = v35;
          *uint64_t v8 = v33;
        }
        if (v23 > a2) {
          return result;
        }
      }
      uint64_t v5 = v23;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_248430A04(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void sub_248430A8C(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_2483E92E8();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    float v4 = (char *)sub_2483F04AC(a2);
    float v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    float v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_248430B34(unint64_t a1)
{
  if (a1 >= 0x7A44C6AFC2DD9DLL) {
    sub_2483E9338();
  }
  return operator new(536 * a1);
}

uint64_t *sub_248430B80(uint64_t *result, void *a2)
{
  int64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7 - 536;
      uint64_t v9 = v4 + v7 - 536;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)(v6 + v7 - 520) = *(void *)(v4 + v7 - 520);
      *(void *)(v9 + 16) = 0;
      *(_OWORD *)uint64_t v9 = 0u;
      uint64_t result = (uint64_t *)memcpy((void *)(v6 + v7 - 512), (const void *)(v4 + v7 - 512), 0x200uLL);
      v7 -= 536;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *int64_t v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_248430C60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 536;
    uint64_t v4 = *(void **)(v2 - 536);
    if (v4)
    {
      *(void *)(v2 - 528) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 536;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void (__cdecl *sub_248430CC8(void (__cdecl *result)(_Unwind_Exception *exception_object), uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8))(_Unwind_Exception *exception_object)
{
  v83[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a4;
  unint64_t v9 = a4[1];
  uint64_t v10 = a2 - 4 * *a4;
  v83[0] = (char *)result - 4 * *a4;
  v83[1] = v10;
  v83[2] = a3 - 4 * v8;
  unint64_t v11 = *(void *)(a8 + 8 * v9);
  unint64_t v12 = v9 + 1;
  if (v11 < *(void *)(a8 + 8 * (v9 + 1)))
  {
    float v13 = (float)v9;
    uint64_t v14 = a6 + 20;
    float32x2_t v15 = (float32x2_t)vdup_n_s32(0x3EB504F3u);
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0x3D9F35DBu);
    float32x2_t v17 = (float32x2_t)vdup_n_s32(0x39573B11u);
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x3E6DB0ECu);
    float32x2_t v19 = (float32x2_t)vdup_n_s32(0x3E8E3E87u);
    __asm { FMOV            V18.2S, #1.0 }
    float32x2_t v25 = (float32x2_t)vdup_n_s32(0xBEB504F3);
    uint64_t result = _Unwind_Resume;
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3EB504F3u);
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3D9F35DBu);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x39573B11u);
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3E6DB0ECu);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3E8E3E87u);
    __asm { FMOV            V28.4S, #1.0 }
    v33.i64[0] = 0x8000000080000000;
    v33.i64[1] = 0x8000000080000000;
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xBEB504F3);
    do
    {
      uint64_t v35 = *(void *)(a7 + 8 * v11);
      float v36 = (long long *)(a6 + 32 * v35);
      float v37 = *((float *)v36 + 2);
      uint64_t v38 = (uint64_t)(float)((float)(*(float *)v36 - v37) + 0.5);
      if (v38 <= *a4) {
        uint64_t v38 = *a4;
      }
      uint64_t v39 = (uint64_t)(float)((float)(*(float *)v36 + v37) + 1.5);
      if (v39 >= a4[2] + *a4) {
        uint64_t v39 = a4[2] + *a4;
      }
      uint64_t v40 = v38 + 4;
      if (v38 + 4 <= v39)
      {
        long long v42 = (long long *)((char *)v36 + 12);
        uint64_t result = (void (__cdecl *)(_Unwind_Exception *))(v36 + 1);
        do
        {
          uint64_t v43 = 0;
          uint64_t v41 = v40;
          long long v44 = *v36;
          float32x4_t v45 = vsubq_f32(vcvtq_f32_s32(vaddq_s32(vdupq_n_s32(v38), (int32x4_t)xmmword_2484DCBC0)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36, 0));
          *(float *)&long long v44 = (float)(v13 - COERCE_FLOAT(HIDWORD(*(void *)v36)))
                         * (float)(v13 - COERCE_FLOAT(HIDWORD(*(void *)v36)));
          float32x4_t v46 = vsqrtq_f32(vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v44, 0), v45, v45));
          float32x4_t v47 = vmulq_n_f32(vmlaq_f32(v26, v27, v46), COERCE_FLOAT(*v42));
          int8x16_t v48 = (int8x16_t)vclezq_f32(v47);
          float32x4_t v49 = vabsq_f32(v47);
          float32x4_t v50 = vmlaq_f32(_Q28, v49, vmlaq_f32(v31, v49, vmlaq_f32(v30, v49, vmlaq_f32(v29, v28, v49))));
          float32x4_t v51 = vdivq_f32(_Q28, vmulq_f32(v50, v50));
          float32x4_t v52 = vmulq_n_f32(vmlaq_f32(v34, v27, v46), COERCE_FLOAT(*v42));
          int8x16_t v53 = (int8x16_t)vclezq_f32(v52);
          float32x4_t v54 = vabsq_f32(v52);
          float32x4_t v55 = vmlaq_f32(_Q28, v54, vmlaq_f32(v31, v54, vmlaq_f32(v30, v54, vmlaq_f32(v29, v28, v54))));
          float32x4_t v56 = vdivq_f32(_Q28, vmulq_f32(v55, v55));
          float32x4_t v57 = vsubq_f32((float32x4_t)veorq_s8(vandq_s8(v48, v33), (int8x16_t)vmlsq_f32(_Q28, v51, v51)), (float32x4_t)veorq_s8(vandq_s8(v53, v33), (int8x16_t)vmlsq_f32(_Q28, v56, v56)));
          float32x4_t v58 = vmulq_n_f32(vmulq_f32(v57, v57), COERCE_FLOAT(*(_OWORD *)result));
          do
          {
            float v59 = *(float *)(v14 + 32 * v35 + 4 * v43);
            if (!a5) {
              float v59 = -v59;
            }
            *(float32x4_t *)(v83[v43] + 4 * v38) = vmlaq_n_f32(*(float32x4_t *)(v83[v43] + 4 * v38), v58, v59);
            ++v43;
          }
          while (v43 != 3);
          v40 += 4;
          uint64_t v38 = v41;
        }
        while (v41 + 4 <= v39);
      }
      else
      {
        uint64_t v41 = v38;
      }
      if (v41 < v39)
      {
        uint64_t v60 = a6 + 32 * v35;
        uint64_t v61 = (void *)(v60 + 12);
        uint64_t v62 = (void *)(v60 + 16);
        uint64_t v63 = v14 + 32 * v35;
        do
        {
          uint64_t result = 0;
          int32x2_t v64 = *(int32x2_t *)v36;
          float32x2_t v65 = vsub_f32(vcvt_f32_s32(vadd_s32(vdup_n_s32(v41), (int32x2_t)0x100000000)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36, 0));
          *(float *)v64.i32 = (float)(v13 - COERCE_FLOAT(HIDWORD(*(void *)v36)))
                            * (float)(v13 - COERCE_FLOAT(HIDWORD(*(void *)v36)));
          float32x2_t v66 = vsqrt_f32(vmla_f32((float32x2_t)vdup_lane_s32(v64, 0), v65, v65));
          float32x2_t v67 = vmul_n_f32(vmla_f32(v15, (float32x2_t)0x3F0000003F000000, v66), COERCE_FLOAT(*v61));
          int8x8_t v68 = (int8x8_t)vclez_f32(v67);
          float32x2_t v69 = vabs_f32(v67);
          float32x2_t v70 = vmla_f32(_D18, v69, vmla_f32(v19, v69, vmla_f32(v18, v69, vmla_f32(v17, v16, v69))));
          float32x2_t v71 = vdiv_f32(_D18, vmul_f32(v70, v70));
          float32x2_t v72 = vmul_n_f32(vmla_f32(v25, (float32x2_t)0x3F0000003F000000, v66), COERCE_FLOAT(*v61));
          int8x8_t v73 = (int8x8_t)vclez_f32(v72);
          float32x2_t v74 = vabs_f32(v72);
          float32x2_t v75 = vmla_f32(_D18, v74, vmla_f32(v19, v74, vmla_f32(v18, v74, vmla_f32(v17, v16, v74))));
          float32x2_t v76 = vdiv_f32(_D18, vmul_f32(v75, v75));
          float32x2_t v77 = vsub_f32((float32x2_t)veor_s8(vand_s8(v68, (int8x8_t)0x8000000080000000), (int8x8_t)vmls_f32(_D18, v71, v71)), (float32x2_t)veor_s8(vand_s8(v73, (int8x8_t)0x8000000080000000), (int8x8_t)vmls_f32(_D18, v76, v76)));
          float32x2_t v78 = vmul_n_f32(vmul_f32(v77, v77), COERCE_FLOAT(*v62));
          do
          {
            float v79 = *(float *)(v63 + 4 * (void)result);
            uint64_t v80 = v83[(void)result];
            uint64_t v81 = (const float *)(v80 + 4 * v41);
            float32x2_t v82 = vld1_dup_f32(v81);
            if (!a5) {
              float v79 = -v79;
            }
            *(_DWORD *)(v80 + 4 * v41) = vmla_n_f32(v82, v78, v79).u32[0];
            uint64_t result = (void (__cdecl *)(_Unwind_Exception *))((char *)result + 1);
          }
          while (result != (void (__cdecl *)(_Unwind_Exception *))3);
          ++v41;
        }
        while (v41 != v39);
      }
      ++v11;
    }
    while (v11 < *(void *)(a8 + 8 * v12));
  }
  return result;
}

uint64_t sub_2484310C4(void *a1, uint64_t a2, unint64_t a3, float *a4)
{
  uint64_t v387 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[10];
  a1[8] = a1[7];
  a1[11] = v4;
  uint64_t v348 = (char **)(a1 + 13);
  a1[14] = a1[13];
  uint64_t v372 = 0;
  unint64_t v373 = 0;
  unint64_t v374 = 0;
  int64x2_t v370 = 0uLL;
  unint64_t v371 = 0;
  uint64_t v5 = a1[1];
  unsigned int v345 = (char **)(a1 + 10);
  if (a1[2] != v5)
  {
    uint64_t v6 = a4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v353 = 0;
    unint64_t v10 = ((a3 * a2) << 10) + 0x100000000;
    if (v10 >= 0x40000000000) {
      unint64_t v10 = 0x40000000000;
    }
    unint64_t v364 = v10;
    float v343 = (float)v10;
    uint64_t v11 = 24;
    int8x16_t v341 = (int8x16_t)vdupq_n_s32(0x3F3504F3u);
    __asm { FMOV            V1.4S, #1.0 }
    int64x2_t v339 = vdupq_n_s64(4uLL);
    float32x4_t v340 = _Q1;
    float32x4_t v338 = (float32x4_t)vdupq_n_s32(0x3EAAA64Cu);
    do
    {
      uint64_t v356 = v11;
      uint64_t v359 = v8;
      uint64x2_t __p = 0;
      unint64_t v376 = 0;
      unint64_t v377 = 0;
      float32x2_t v17 = (void *)(v5 + 536 * v9);
      uint64_t v18 = v7[4];
      int v350 = *(_DWORD *)v7;
      float v19 = v6[25];
      float v20 = v6[26];
      float v21 = v6[27];
      sub_248430A8C(&__p, ((uint64_t)(v17[1] - *v17) >> 4) + 1);
      uint64_t v346 = v5;
      unint64_t v362 = (void *)v9;
      long long v23 = (float *)(v18 + 8 * v9);
      float v24 = roundf(*v23);
      float v25 = roundf(v23[1]);
      if (v24 >= 8388600.0 || v24 <= -8388600.0 || v25 >= 8388600.0 || v25 <= -8388600.0)
      {
LABEL_358:
        uint64_t v325 = 1;
        long long v111 = __p;
LABEL_359:
        if (v111) {
          operator delete(v111);
        }
        float32x4_t v130 = 0;
        goto LABEL_378;
      }
      float v29 = (float)(int)v24;
      float v30 = (float)(int)v25;
      float v32 = v376;
      float32x4_t v31 = (char *)v377;
      if ((unint64_t)v376 >= v377)
      {
        float32x4_t v34 = (float *)__p;
        uint64_t v35 = ((char *)v376 - (unsigned char *)__p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          goto LABEL_389;
        }
        if ((uint64_t)(v377 - (void)__p) >> 2 > v36) {
          unint64_t v36 = (uint64_t)(v377 - (void)__p) >> 2;
        }
        if (v377 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        uint64_t v38 = (char *)sub_2483F04AC(v37);
        uint64_t v40 = (float *)&v38[8 * v35];
        *uint64_t v40 = v29;
        v40[1] = v30;
        uint64_t v41 = v40;
        if (v32 != v34)
        {
          do
          {
            uint64_t v42 = *((void *)v32 - 1);
            v32 -= 2;
            *((void *)v41 - 1) = v42;
            v41 -= 2;
          }
          while (v32 != v34);
          float v32 = v34;
        }
        float32x4_t v31 = &v38[8 * v39];
        int8x16_t v33 = v40 + 2;
        uint64x2_t __p = v41;
        unint64_t v377 = (unint64_t)v31;
        if (v32)
        {
          uint64_t v43 = &v38[8 * v39];
          operator delete(v32);
          float32x4_t v31 = v43;
        }
      }
      else
      {
        *unint64_t v376 = v29;
        v32[1] = v30;
        int8x16_t v33 = v32 + 2;
      }
      unint64_t v376 = v33;
      float32x4_t v45 = (_DWORD *)*v17;
      long long v44 = (_DWORD *)v17[1];
      if ((_DWORD *)*v17 != v44)
      {
        unint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        int v49 = (int)v24;
        int v50 = (int)v25;
        while (1)
        {
          v47 += *v45;
          v48 += v45[2];
          if (v47 >= 0) {
            int v51 = v47;
          }
          else {
            int v51 = -v47;
          }
          if (v48 >= 0) {
            int v52 = v48;
          }
          else {
            int v52 = -v48;
          }
          v46 += (v52 + v51);
          BOOL v54 = v46 > v364 || (v47 + 0x7FFFFF) > 0xFFFFFE || (v48 + 0x7FFFFF) > 0xFFFFFE;
          v49 += v47;
          v50 += v48;
          if (v54 || (v49 + 0x7FFFFF) > 0xFFFFFE || (v50 + 0x7FFFFF) > 0xFFFFFE) {
            goto LABEL_358;
          }
          float v57 = (float)v49;
          float v58 = (float)v50;
          if (v33 >= (float *)v31) {
            break;
          }
          *int8x16_t v33 = v57;
          v33[1] = v58;
          v33 += 2;
LABEL_65:
          unint64_t v376 = v33;
          v45 += 4;
          if (v45 == v44)
          {
            unint64_t v377 = (unint64_t)v31;
            unint64_t v9 = (unint64_t)v362;
            goto LABEL_68;
          }
        }
        float v59 = (float *)__p;
        uint64_t v60 = ((char *)v33 - (unsigned char *)__p) >> 3;
        unint64_t v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
        {
          unint64_t v377 = (unint64_t)v31;
LABEL_389:
          sub_2483E92E8();
        }
        if ((v31 - (unsigned char *)__p) >> 2 > v61) {
          unint64_t v61 = (v31 - (unsigned char *)__p) >> 2;
        }
        if ((unint64_t)(v31 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        uint64_t v63 = (char *)sub_2483F04AC(v62);
        float32x2_t v65 = (float *)&v63[8 * v60];
        float32x4_t v31 = &v63[8 * v64];
        *float32x2_t v65 = v57;
        v65[1] = v58;
        float32x2_t v66 = v65 + 2;
        if (v33 == v59)
        {
          uint64x2_t __p = v65;
          unint64_t v376 = v65 + 2;
          float v59 = v33;
        }
        else
        {
          do
          {
            uint64_t v67 = *((void *)v33 - 1);
            v33 -= 2;
            *((void *)v65 - 1) = v67;
            v65 -= 2;
          }
          while (v33 != v59);
          uint64x2_t __p = v65;
          unint64_t v376 = v66;
          if (!v59) {
            goto LABEL_64;
          }
        }
        int8x8_t v68 = &v63[8 * v64];
        operator delete(v59);
        float32x4_t v31 = v68;
LABEL_64:
        int8x16_t v33 = v66;
        goto LABEL_65;
      }
      unint64_t v46 = 0;
LABEL_68:
      float v69 = (float)v350;
      uint64_t v71 = v356;
      uint64_t v70 = v359;
      if (v350 < 0) {
        float v72 = (float)(v69 * -0.125) + 1.0;
      }
      else {
        float v72 = 1.0 / (float)((float)(v69 * 0.125) + 1.0);
      }
      uint64_t v73 = 0;
      v74.i32[1] = 0;
      *(float *)v22.i32 = v20 + (float)(v19 * 0.0);
      *(float *)v74.i32 = v21 + (float)(v19 * 0.0);
      uint64_t v75 = v346 + v356;
      float32x2_t v76 = v378;
      do
      {
        uint64_t v77 = 0;
        float32x2_t v78 = (const float *)((char *)&unk_24854E450 + 4 * v73);
        float32x4_t v79 = vld1q_dup_f32(v78);
        int64x2_t v80 = (int64x2_t)xmmword_2484DC880;
        int64x2_t v81 = (int64x2_t)xmmword_2484DCBD0;
        do
        {
          *(float32x4_t *)&v76[v77] = vmulq_n_f32(vmulq_f32(v79, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v80), (int32x4_t)vceqzq_s64(v81)), v341, (int8x16_t)v340), vcvtq_f32_s32(*(int32x4_t *)(v75 + v77)))), v72);
          int64x2_t v81 = vaddq_s64(v81, v339);
          int64x2_t v80 = vaddq_s64(v80, v339);
          v77 += 16;
        }
        while (v77 != 128);
        ++v73;
        v76 += 128;
        v75 += 128;
      }
      while (v73 != 3);
      uint64_t v82 = 0;
      float32x4_t v83 = (float32x4_t)vdupq_lane_s32(v22, 0);
      float32x4_t v84 = (float32x4_t)vdupq_lane_s32(v74, 0);
      do
      {
        float32x4_t v85 = *(float32x4_t *)&v378[v82 + 128];
        *(float32x4_t *)&v378[v82] = vmlaq_f32(*(float32x4_t *)&v378[v82], v85, v83);
        *(float32x4_t *)&v378[v82 + 256] = vmlaq_f32(*(float32x4_t *)&v378[v82 + 256], v85, v84);
        v82 += 16;
      }
      while (v82 != 128);
      uint64_t v86 = 0;
      unint64_t v383 = 0;
      int64x2_t v384 = 0uLL;
      uint64_t v87 = v346 + v356;
      do
      {
        uint64_t v88 = 0;
        v83.i64[0] = (uint64_t)*(&v383 + v86);
        int64x2_t v89 = 0uLL;
        do
        {
          float32x4_t v90 = vrndpq_f32(vmulq_n_f32(vcvtq_f32_s32(vabsq_s32(*(int32x4_t *)(v87 + v88))), v72));
          int64x2_t v89 = vaddq_s64(v89, (int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v90)));
          float32x4_t v83 = (float32x4_t)vaddq_s64((int64x2_t)v83, (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v90.f32)));
          v88 += 16;
        }
        while (v88 != 128);
        float32x4_t v83 = (float32x4_t)vaddq_s64((int64x2_t)v83, v89);
        *(&v383 + v86++) = (void *)vaddvq_s64((int64x2_t)v83);
        v87 += 128;
      }
      while (v86 != 3);
      unint64_t v91 = (unint64_t)v383 + v384.i64[0] * vcvtps_u32_f32(fabsf(*(float *)v22.i32));
      if (v384.i64[0] > v91) {
        unint64_t v91 = v384.i64[0];
      }
      unint64_t v92 = v384.i64[1] + v384.i64[0] * vcvtps_u32_f32(fabsf(*(float *)v74.i32));
      if (v91 > v92) {
        unint64_t v92 = v91;
      }
      unint64_t v93 = __clz(v92 + 1) ^ 0x3F;
      if (((v92 + 1) & v92) != 0) {
        unint64_t v94 = v93 + 1;
      }
      else {
        unint64_t v94 = v93;
      }
      if (v94 <= 1) {
        unint64_t v94 = 1;
      }
      if (v46 <= 1) {
        unint64_t v95 = 1;
      }
      else {
        unint64_t v95 = v46;
      }
      *(float *)v74.i32 = ceilf(sqrtf((float)(v343 / (float)v94) / (float)v95));
      float32x4_t v96 = (float32x4_t)vdupq_lane_s32(v74, 0);
      int64x2_t v97 = vdupq_n_s64(v94);
      int64x2_t v98 = 0uLL;
      uint64_t v99 = 408;
      int64x2_t v100 = (int64x2_t)xmmword_2484DC880;
      int64x2_t v101 = (int64x2_t)xmmword_2484DCBD0;
      int64x2_t v102 = 0uLL;
      do
      {
        int32x4_t v103 = *(int32x4_t *)(v346 + v359 + v99);
        float32x4_t v104 = vmulq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v100), (int32x4_t)vceqzq_s64(v101)), v341, (int8x16_t)v340), vcvtq_f32_s32(v103)), v338);
        float32x4_t v105 = vmaxnmq_f32(vrndpq_f32(vmulq_n_f32(vcvtq_f32_s32(vabsq_s32(v103)), v72)), v340);
        float32x4_t v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v96, v105), (int8x16_t)v105, (int8x16_t)v96);
        uint64x2_t v107 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v106.f32));
        int64x2_t v108 = (int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v106));
        *(float32x4_t *)((char *)&__p + v99) = vmulq_n_f32(v104, v72);
        v104.i64[0] = v97.i64[0] * v107.i64[0] * v107.i64[0];
        v104.i64[1] = v97.i64[1] * v107.i64[1] * v107.i64[1];
        v108.i64[0] *= v97.i64[0] * v108.i64[0];
        v108.i64[1] *= v97.i64[1] * v108.i64[1];
        int64x2_t v102 = vaddq_s64(v108, v102);
        int64x2_t v98 = vaddq_s64((int64x2_t)v104, v98);
        int64x2_t v109 = vdupq_n_s64(4uLL);
        int64x2_t v101 = vaddq_s64(v101, v109);
        int64x2_t v100 = vaddq_s64(v100, v109);
        v99 += 16;
      }
      while (v99 != 536);
      unint64_t v110 = v353 + vaddvq_s64(vaddq_s64(v98, v102)) * v46;
      long long v111 = __p;
      if (v110 > v364)
      {
        uint64_t v325 = 1;
        goto LABEL_359;
      }
      if (__p != v33)
      {
        long long v112 = (float *)((char *)__p + 8);
        if ((char *)__p + 8 != (char *)v33)
        {
          float v113 = *(float *)__p;
          while (1)
          {
            float v114 = v113;
            float v113 = *v112;
            if (vabds_f32(v114, *v112) < 0.001 && vabds_f32(*(v112 - 1), v112[1]) < 0.001) {
              break;
            }
            v112 += 2;
            if (v112 == v33) {
              goto LABEL_104;
            }
          }
          if (v112 - 2 != v33)
          {
            uint64_t v325 = 1;
            goto LABEL_359;
          }
        }
      }
LABEL_104:
      long long v115 = (void *)v370.i64[1];
      unint64_t v353 = v110;
      if (v370.i64[1] >= (unint64_t)v371)
      {
        unint64_t v117 = 0xF0B7672A07A44C6BLL * ((v370.i64[1] - v370.i64[0]) >> 3);
        unint64_t v118 = v117 + 1;
        if (v117 + 1 > 0x7A44C6AFC2DD9CLL) {
          sub_2483E92E8();
        }
        if (0xE16ECE540F4898D6 * ((uint64_t)&v371[-v370.i64[0]] >> 3) > v118) {
          unint64_t v118 = 0xE16ECE540F4898D6 * ((uint64_t)&v371[-v370.i64[0]] >> 3);
        }
        if (0xF0B7672A07A44C6BLL * ((uint64_t)&v371[-v370.i64[0]] >> 3) >= 0x3D226357E16ECELL) {
          unint64_t v119 = 0x7A44C6AFC2DD9CLL;
        }
        else {
          unint64_t v119 = v118;
        }
        int v386 = &v371;
        if (v119)
        {
          if (v119 > 0x7A44C6AFC2DD9CLL) {
            sub_2483E9338();
          }
          char v120 = (char *)operator new(536 * v119);
        }
        else
        {
          char v120 = 0;
        }
        uint64_t v121 = &v120[8 * ((v370.i64[1] - v370.i64[0]) >> 3)];
        unint64_t v383 = v120;
        v384.i64[0] = (uint64_t)v121;
        v384.i64[1] = (uint64_t)v121;
        int v385 = &v120[536 * v119];
        *((void *)v121 + 1) = 0;
        *((void *)v121 + 2) = 0;
        *(void *)uint64_t v121 = 0;
        sub_248432A14(v121, v111, (uint64_t)v33, ((char *)v33 - (unsigned char *)v111) >> 3);
        memcpy(&v120[536 * v117 + 24], v378, 0x200uLL);
        uint64_t v122 = v384.i64[0];
        uint64_t v116 = v384.i64[1] + 536;
        v384.i64[1] += 536;
        int64x2_t v123 = v370;
        uint64_t v7 = a1;
        uint64_t v6 = a4;
        if (v370.i64[1] == v370.i64[0])
        {
          int64x2_t v127 = vdupq_n_s64(v370.u64[1]);
        }
        else
        {
          uint64_t v124 = 0;
          do
          {
            uint64_t v125 = v122 + v124 - 536;
            uint64_t v126 = v123.i64[1] + v124 - 536;
            *(void *)(v125 + 16) = 0;
            *(_OWORD *)uint64_t v125 = 0u;
            *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
            *(void *)(v122 + v124 - 520) = *(void *)(v123.i64[1] + v124 - 520);
            *(void *)(v126 + 16) = 0;
            *(_OWORD *)uint64_t v126 = 0u;
            memcpy((void *)(v122 + v124 - 512), (const void *)(v123.i64[1] + v124 - 512), 0x200uLL);
            v124 -= 536;
          }
          while (v123.i64[1] + v124 != v123.i64[0]);
          v122 += v124;
          int64x2_t v127 = v370;
          uint64_t v116 = v384.i64[1];
        }
        v370.i64[0] = v122;
        v370.i64[1] = v116;
        int64x2_t v384 = v127;
        uint64_t v128 = v371;
        unint64_t v371 = v385;
        int v385 = v128;
        unint64_t v383 = (void *)v127.i64[0];
        sub_248430C60((uint64_t)&v383);
        uint64_t v71 = v356;
        uint64_t v70 = v359;
      }
      else
      {
        *(void *)v370.i64[1] = 0;
        v115[1] = 0;
        v115[2] = 0;
        sub_248432A14(v115, v111, (uint64_t)v33, ((char *)v33 - (unsigned char *)v111) >> 3);
        memcpy(v115 + 3, v378, 0x200uLL);
        uint64_t v116 = (uint64_t)(v115 + 67);
        uint64_t v7 = a1;
        uint64_t v6 = a4;
      }
      v370.i64[1] = v116;
      if (__p) {
        operator delete(__p);
      }
      ++v9;
      uint64_t v5 = v7[1];
      uint64_t v11 = v71 + 536;
      uint64_t v8 = v70 + 536;
    }
    while (v9 < 0xF0B7672A07A44C6BLL * ((v7[2] - v5) >> 3));
    uint64_t v342 = v370.i64[1];
    uint64_t v129 = v370.i64[0];
    if (v370.i64[0] != v370.i64[1])
    {
      float32x4_t v130 = 0;
      unsigned int v131 = 0;
      float32x4_t v132 = 0;
      unint64_t v354 = (float32x4_t *)(v370.i64[0] + 24);
      float v133 = 31.0;
      while (1)
      {
        uint64_t v344 = v132;
        uint64_t v363 = v130;
        uint64_t v134 = (float32x2_t *)v372;
        unint64_t v373 = (float *)v372;
        unint64_t v368 = 0;
        unint64_t v369 = 0;
        unint64_t v367 = 0;
        uint64_t v347 = v129;
        sub_248432A14(&v367, *(const void **)v129, *(void *)(v129 + 8), (uint64_t)(*(void *)(v129 + 8) - *(void *)v129) >> 3);
        unint64_t v136 = (float32x2_t *)v367;
        unint64_t v135 = v368;
        if (v367 == v368) {
          goto LABEL_248;
        }
        uint64_t v137 = (char *)v368 - (unsigned char *)v367;
        if ((char *)v368 - (unsigned char *)v367 == 8)
        {
          if (v134 < v374)
          {
            *uint64_t v134 = *(float32x2_t *)v367;
            size_t v138 = v134 + 1;
            goto LABEL_247;
          }
          unint64_t v145 = ((char *)v374 - (char *)v134) >> 2;
          if (v145 <= 1) {
            unint64_t v145 = 1;
          }
          if ((unint64_t)((char *)v374 - (char *)v134) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v146 = v145;
          }
          uint64_t v147 = (float32x2_t *)sub_2483F04AC(v146);
          *uint64_t v147 = *v136;
          size_t v138 = v147 + 1;
          uint64_t v372 = v147;
          unint64_t v374 = &v147[v148];
          if (v134)
          {
            uint64_t v149 = v134;
            goto LABEL_246;
          }
          goto LABEL_247;
        }
        sub_248430A8C(&v372, 2 * v137 - 15);
        BOOL v139 = v136 + 1;
        float32x2_t v140 = vadd_f32(*v136, vsub_f32(*v136, v136[1]));
        uint64_t v141 = (float32x2_t *)v369;
        if ((unint64_t)v135 < v369)
        {
          uint64_t v142 = v135 - 1;
          unint64_t v143 = v135;
          while (v142 < v135)
          {
            float32x2_t v144 = *v142++;
            *v143++ = v144;
          }
          unint64_t v368 = v143;
          if (v135 != v139) {
            memmove(&v135[-(v135 - v139)], v136, (char *)v135 - (char *)v139);
          }
          *unint64_t v136 = v140;
          goto LABEL_166;
        }
        unint64_t v150 = (v137 >> 3) + 1;
        if (v150 >> 61) {
          sub_2483E92E8();
        }
        if ((uint64_t)(v369 - (void)v136) >> 2 > v150) {
          unint64_t v150 = (uint64_t)(v369 - (void)v136) >> 2;
        }
        unint64_t v151 = v369 - (unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v150;
        if (!v151) {
          break;
        }
        float32x2x2_t v152 = (float32x2_t *)sub_2483F04AC(v151);
        int v154 = v152;
        if (!v153) {
          goto LABEL_155;
        }
        uint64_t v141 = &v152[v153];
LABEL_158:
        float32x2_t *v154 = v140;
        int v157 = v154 + 1;
        long long v158 = (float32x2_t *)v367;
        if (v367 != v136)
        {
          uint64_t v159 = v136;
          do
          {
            float32x2_t v160 = v159[-1];
            --v159;
            v154[-1] = v160;
            --v154;
          }
          while (v159 != v158);
        }
        int64_t v161 = (char *)v368 - (char *)v136;
        if (v368 != v136) {
          memmove(v157, v136, (char *)v368 - (char *)v136);
        }
        unint64_t v143 = (float32x2_t *)((char *)v157 + v161);
        long long v162 = v367;
        unint64_t v367 = v154;
        unint64_t v368 = v143;
        unint64_t v369 = (unint64_t)v141;
        if (v162) {
          operator delete(v162);
        }
        unint64_t v136 = v154;
LABEL_166:
        uint64_t v163 = (char *)v143 - (char *)v136;
        float32x2_t v164 = vadd_f32(v143[-1], vsub_f32(v143[-1], v143[-2]));
        if (v143 >= v141)
        {
          uint64_t v166 = v163 >> 3;
          unint64_t v167 = (v163 >> 3) + 1;
          if (v167 >> 61) {
            goto LABEL_385;
          }
          if (((char *)v141 - (char *)v136) >> 2 > v167) {
            unint64_t v167 = ((char *)v141 - (char *)v136) >> 2;
          }
          if ((unint64_t)((char *)v141 - (char *)v136) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v168 = v167;
          }
          if (v168) {
            unint64_t v168 = (unint64_t)sub_2483F04AC(v168);
          }
          else {
            uint64_t v169 = 0;
          }
          long long v170 = (float32x2_t *)(v168 + 8 * v166);
          *long long v170 = v164;
          uint64_t v165 = v170 + 1;
          if (v143 == v136)
          {
            unint64_t v367 = (void *)(v168 + 8 * v166);
            unint64_t v368 = v170 + 1;
            unint64_t v369 = v168 + 8 * v169;
          }
          else
          {
            do
            {
              float32x2_t v171 = v143[-1];
              --v143;
              v170[-1] = v171;
              --v170;
            }
            while (v143 != v136);
            unint64_t v136 = (float32x2_t *)v367;
            unint64_t v367 = v170;
            unint64_t v368 = v165;
            unint64_t v369 = v168 + 8 * v169;
            if (!v136) {
              goto LABEL_183;
            }
          }
          operator delete(v136);
        }
        else
        {
          float32x2_t *v143 = v164;
          uint64_t v165 = v143 + 1;
        }
LABEL_183:
        unint64_t v368 = v165;
        int v172 = (float *)v367;
        uint64_t v173 = (float32x2_t *)v373;
        if ((char *)v165 - (unsigned char *)v367 == 24)
        {
          uint64_t v174 = 3;
          goto LABEL_230;
        }
        uint64_t v175 = 0;
        uint64_t v360 = 2;
        uint64_t v357 = 3;
        do
        {
          uint64_t v176 = &v172[2 * (void)v175];
          uint64_t v365 = (float32x2_t *)v176;
          if (v173 >= v374)
          {
            unsigned int v178 = (float32x2_t *)v372;
            uint64_t v179 = ((char *)v173 - (unsigned char *)v372) >> 3;
            unint64_t v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 61) {
              goto LABEL_385;
            }
            uint64_t v181 = (char *)v374 - (unsigned char *)v372;
            if (((char *)v374 - (unsigned char *)v372) >> 2 > v180) {
              unint64_t v180 = v181 >> 2;
            }
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v182 = v180;
            }
            if (v182) {
              unint64_t v182 = (unint64_t)sub_2483F04AC(v182);
            }
            else {
              uint64_t v183 = 0;
            }
            unsigned int v184 = (float32x2_t *)(v182 + 8 * v179);
            *unsigned int v184 = v365[1];
            unsigned int v177 = v184 + 1;
            if (v173 != v178)
            {
              do
              {
                float32x2_t v185 = v173[-1];
                --v173;
                v184[-1] = v185;
                --v184;
              }
              while (v173 != v178);
              uint64_t v173 = (float32x2_t *)v372;
            }
            uint64_t v372 = v184;
            unint64_t v373 = (float *)v177;
            unint64_t v374 = (float32x2_t *)(v182 + 8 * v183);
            if (v173) {
              operator delete(v173);
            }
            uint64_t v176 = &v172[2 * (void)v175];
          }
          else
          {
            *uint64_t v173 = *(float32x2_t *)(v176 + 2);
            unsigned int v177 = v173 + 1;
          }
          uint64_t v186 = 0;
          unint64_t v373 = (float *)v177;
          LODWORD(v383) = 0;
          float v187 = *v176;
          unint64_t __src = v175;
          float v188 = v172[2 * (void)v175 + 1];
          BOOL v189 = &v172[v357];
          float v190 = 0.0;
          do
          {
            float v191 = *(v189 - 1);
            float v192 = *v189;
            float v193 = sqrtf(hypotf(v191 - v187, *v189 - v188));
            *(float *)((char *)&v381 + v186) = v193;
            uint64_t v194 = (float *)((char *)&v383 + v186);
            v186 += 4;
            float v190 = v190 + v193;
            v194[1] = v190;
            v189 += 2;
            float v188 = v192;
            float v187 = v191;
          }
          while (v186 != 12);
          unint64_t v195 = &v172[v360];
          int v196 = 1;
          uint64_t v173 = v177;
          uint64_t v197 = v365;
          do
          {
            uint64_t v198 = 0;
            float v200 = v381;
            float v199 = v382;
            uint64x2_t __p = 0;
            unint64_t v376 = 0;
            unint64_t v377 = 0;
            float v201 = v381 + (float)((float)((float)v196 * 0.0625) * v382);
            float32x2_t v202 = *v197;
            do
            {
              float32x2_t v203 = *(float32x2_t *)&v195[2 * v198];
              *(&__p + v198) = (void *)vadd_f32(v202, vmul_n_f32(vsub_f32(v203, v202), (float)(v201 - *((float *)&v383 + v198)) / *(&v381 + v198)));
              ++v198;
              float32x2_t v202 = v203;
            }
            while (v198 != 3);
            uint64_t v204 = 0;
            float32x2_t v379 = 0;
            float32x2_t v380 = 0;
            char v205 = 1;
            unint64_t v206 = __p;
            do
            {
              char v207 = v205;
              float v208 = *(&v381 + v204 + 1);
              float32x2_t v209 = (float32x2_t)*(&__p + v204 + 1);
              *(&v379 + v204) = vadd_f32((float32x2_t)v206, vmul_n_f32(vsub_f32(v209, (float32x2_t)v206), (float)(v201 - *((float *)&v383 + v204)) / (float)(v200 + v208)));
              float v200 = v208;
              uint64_t v204 = 1;
              unint64_t v206 = (void *)v209;
              char v205 = 0;
            }
            while ((v207 & 1) != 0);
            float32x2_t v210 = vadd_f32(v379, vmul_n_f32(vsub_f32(v380, v379), (float)(v201 - *((float *)&v383 + 1)) / v199));
            if (v173 < v374)
            {
              *v173++ = v210;
              goto LABEL_228;
            }
            uint64_t v211 = (float32x2_t *)v372;
            uint64_t v212 = ((char *)v173 - (unsigned char *)v372) >> 3;
            unint64_t v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61) {
              goto LABEL_385;
            }
            uint64_t v214 = (char *)v374 - (unsigned char *)v372;
            if (((char *)v374 - (unsigned char *)v372) >> 2 > v213) {
              unint64_t v213 = v214 >> 2;
            }
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v215 = v213;
            }
            if (v215) {
              unint64_t v215 = (unint64_t)sub_2483F04AC(v215);
            }
            else {
              uint64_t v216 = 0;
            }
            uint64_t v217 = (float32x2_t *)(v215 + 8 * v212);
            float32x2_t *v217 = v210;
            uint64_t v218 = v217 + 1;
            if (v173 == v211)
            {
              uint64_t v372 = v217;
              unint64_t v373 = (float *)&v217[1];
              unint64_t v374 = (float32x2_t *)(v215 + 8 * v216);
            }
            else
            {
              do
              {
                float32x2_t v219 = v173[-1];
                --v173;
                v217[-1] = v219;
                --v217;
              }
              while (v173 != v211);
              uint64_t v173 = (float32x2_t *)v372;
              uint64_t v372 = v217;
              unint64_t v373 = (float *)v218;
              unint64_t v374 = (float32x2_t *)(v215 + 8 * v216);
              if (!v173) {
                goto LABEL_227;
              }
            }
            operator delete(v173);
LABEL_227:
            uint64_t v173 = v218;
            uint64_t v197 = v365;
LABEL_228:
            unint64_t v373 = (float *)v173;
            ++v196;
          }
          while (v196 != 16);
          uint64_t v175 = __src + 1;
          int v172 = (float *)v367;
          uint64_t v174 = ((char *)v368 - (unsigned char *)v367) >> 3;
          v357 += 2;
          v360 += 2;
        }
        while ((unint64_t)(__src + 1) < v174 - 3);
LABEL_230:
        uint64_t v220 = v174 - 2;
        if (v173 < v374)
        {
          *uint64_t v173 = *(float32x2_t *)&v172[2 * v220];
          size_t v138 = v173 + 1;
          goto LABEL_247;
        }
        uint64_t v221 = (float32x2_t *)v372;
        uint64_t v222 = ((char *)v173 - (unsigned char *)v372) >> 3;
        unint64_t v223 = v222 + 1;
        if ((unint64_t)(v222 + 1) >> 61) {
LABEL_385:
        }
          sub_2483E92E8();
        uint64_t v224 = (char *)v374 - (unsigned char *)v372;
        if (((char *)v374 - (unsigned char *)v372) >> 2 > v223) {
          unint64_t v223 = v224 >> 2;
        }
        if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v223;
        }
        if (v225) {
          unint64_t v225 = (unint64_t)sub_2483F04AC(v225);
        }
        else {
          uint64_t v226 = 0;
        }
        uint64_t v227 = (float32x2_t *)(v225 + 8 * v222);
        *uint64_t v227 = *(float32x2_t *)&v172[2 * v220];
        size_t v138 = v227 + 1;
        if (v173 != v221)
        {
          do
          {
            float32x2_t v228 = v173[-1];
            --v173;
            v227[-1] = v228;
            --v227;
          }
          while (v173 != v221);
          uint64_t v173 = (float32x2_t *)v372;
        }
        uint64_t v372 = v227;
        unint64_t v373 = (float *)v138;
        unint64_t v374 = (float32x2_t *)(v225 + 8 * v226);
        if (v173)
        {
          uint64_t v149 = v173;
LABEL_246:
          operator delete(v149);
        }
LABEL_247:
        unint64_t v373 = (float *)v138;
        unint64_t v136 = (float32x2_t *)v367;
LABEL_248:
        if (v136)
        {
          unint64_t v368 = v136;
          operator delete(v136);
        }
        uint64_t v229 = (float *)v372;
        uint64_t v230 = *(void *)v372;
        uint64_t v231 = (float *)sub_24840C754(1uLL);
        float v232 = *((float *)&v230 + 1);
        float v233 = *(float *)&v230;
        uint64_t v235 = (char *)&v231[3 * v234];
        *(void *)uint64_t v231 = v230;
        v231[2] = 1.0;
        unint64_t v236 = v231 + 3;
        while (2)
        {
          unint64_t v237 = v236;
LABEL_252:
          unint64_t v238 = v373;
          if (v229 == v373)
          {
            unint64_t v252 = v231;
            unint64_t v236 = v237;
          }
          else
          {
            float v239 = 0.0;
            float v240 = v232;
            float v241 = v233;
            while (1)
            {
              float v242 = *v229;
              float v243 = v229[1];
              float v244 = *v229 - v241;
              float v245 = v243 - v240;
              float v246 = sqrtf((float)(v245 * v245) + (float)(v244 * v244));
              float v247 = v239 + v246;
              if ((float)(v239 + v246) >= 1.0) {
                break;
              }
              v229 += 2;
              float v240 = v243;
              float v241 = v242;
              float v239 = v239 + v246;
              if (v229 == v373)
              {
                if (v237 < (float *)v235)
                {
                  *(void *)unint64_t v237 = *((void *)v229 - 1);
                  v237[2] = v247;
                  unint64_t v236 = v237 + 3;
                  unint64_t v252 = v231;
                  goto LABEL_292;
                }
                unint64_t v248 = 0xAAAAAAAAAAAAAAABLL * (v237 - v231) + 1;
                if (v248 > 0x1555555555555555) {
                  goto LABEL_387;
                }
                if (0x5555555555555556 * ((v235 - (char *)v231) >> 2) > v248) {
                  unint64_t v248 = 0x5555555555555556 * ((v235 - (char *)v231) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v235 - (char *)v231) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v249 = 0x1555555555555555;
                }
                else {
                  unint64_t v249 = v248;
                }
                uint64_t v250 = (char *)sub_24840C754(v249);
                unint64_t v252 = (float *)&v250[4 * (v237 - v231)];
                *(void *)unint64_t v252 = *((void *)v229 - 1);
                v252[2] = v247;
                unint64_t v236 = v252 + 3;
                if (v237 == v231)
                {
                  if (v231)
                  {
                    operator delete(v231);
                    unint64_t v236 = v252 + 3;
                  }
                  goto LABEL_292;
                }
                uint64_t v235 = &v250[12 * v251];
                do
                {
                  uint64_t v253 = *(void *)(v237 - 3);
                  v237 -= 3;
                  int v254 = *((_DWORD *)v237 + 2);
                  *(void *)(v252 - 3) = v253;
                  v252 -= 3;
                  *((_DWORD *)v252 + 2) = v254;
                }
                while (v237 != v231);
                if (v231)
                {
                  int v255 = v231;
                  int v256 = v236;
                  char v257 = v235;
                  operator delete(v255);
                  uint64_t v235 = v257;
                  unint64_t v236 = v256;
                  BOOL v258 = v247 < 1.0;
                  uint64_t v231 = v252;
                  unint64_t v237 = v256;
                }
                else
                {
                  BOOL v258 = v247 < 1.0;
                  uint64_t v231 = v252;
                  unint64_t v237 = v236;
                }
                uint64_t v229 = v238;
                if (v258) {
                  goto LABEL_292;
                }
                goto LABEL_252;
              }
            }
            float v259 = (float)(1.0 - v239) / v246;
            float v260 = v241 + (float)(v244 * v259);
            float v261 = v240 + (float)(v245 * v259);
            if (v237 >= (float *)v235)
            {
              unint64_t v263 = 0xAAAAAAAAAAAAAAABLL * (v237 - v231) + 1;
              if (v263 > 0x1555555555555555) {
LABEL_387:
              }
                sub_2483E92E8();
              if (0x5555555555555556 * ((v235 - (char *)v231) >> 2) > v263) {
                unint64_t v263 = 0x5555555555555556 * ((v235 - (char *)v231) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v235 - (char *)v231) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v264 = 0x1555555555555555;
              }
              else {
                unint64_t v264 = v263;
              }
              uint64_t v265 = (char *)sub_24840C754(v264);
              long long v267 = &v265[4 * (v237 - v231)];
              unint64_t v262 = LODWORD(v260) | ((unint64_t)LODWORD(v261) << 32);
              *(void *)long long v267 = v262;
              *((_DWORD *)v267 + 2) = 1065353216;
              uint64_t v268 = v267;
              while (v237 != v231)
              {
                uint64_t v269 = *(void *)(v237 - 3);
                v237 -= 3;
                int v270 = *((_DWORD *)v237 + 2);
                *(void *)(v268 - 12) = v269;
                v268 -= 12;
                *((_DWORD *)v268 + 2) = v270;
              }
              uint64_t v235 = &v265[12 * v266];
              unint64_t v236 = (float *)(v267 + 12);
              if (v231)
              {
                unsigned int v271 = v231;
                uint64_t v272 = v267 + 12;
                uint64_t v273 = v235;
                operator delete(v271);
                uint64_t v235 = v273;
                unint64_t v236 = (float *)v272;
              }
              uint64_t v231 = (float *)v268;
            }
            else
            {
              unint64_t v262 = LODWORD(v260) | ((unint64_t)LODWORD(v261) << 32);
              *(void *)unint64_t v237 = v262;
              v237[2] = 1.0;
              unint64_t v236 = v237 + 3;
            }
            float v232 = *((float *)&v262 + 1);
            float v233 = *(float *)&v262;
            unint64_t v252 = v231;
            if (v247 >= 1.0) {
              continue;
            }
          }
          break;
        }
LABEL_292:
        float v274 = *(v236 - 1) + (float)(unint64_t)(-2 - 0x5555555555555555 * (v236 - v252));
        if (v274 <= 0.0)
        {
          float32x4_t v132 = v344;
LABEL_354:
          if (v252) {
            goto LABEL_355;
          }
        }
        else
        {
          uint64_t v275 = a1;
          float32x4_t v132 = v344;
          if (v252 != v236)
          {
            int v276 = 0;
            unint64_t v277 = v252;
            float v278 = 1.0 / v274;
            uint64_t v358 = v236;
            while (1)
            {
              uint64_t v279 = 0;
              int v361 = v276;
              unint64_t v366 = v277;
              float v280 = v277[2];
              float v281 = v278 * (float)v276;
              if (v281 >= 1.0) {
                float v282 = v133;
              }
              else {
                float v282 = v281 * v133;
              }
              unint64_t v283 = v354;
              do
              {
                *(float *)((char *)&v383 + v279) = sub_248433460(v283, v282);
                v279 += 4;
                v283 += 8;
              }
              while (v279 != 12);
              float v284 = sub_248433460((float32x4_t *)(v347 + 408), v282);
              float v285 = v284;
              if (((LODWORD(v284) & 0x7FFFFFFFu) - 0x800000) >> 24 > 0x7E
                && (LODWORD(v284) & 0x7FFFFFFFu) - 1 > 0x7FFFFE)
              {
                uint64_t v289 = v358;
              }
              else
              {
                float v287 = 1.0 / v284;
                BOOL v288 = COERCE_INT(fabs(1.0 / v284)) <= 2139095039 && (LODWORD(v280) & 0x7FFFFFFFu) <= 0x7F7FFFFF;
                uint64_t v289 = v358;
                if (v288)
                {
                  uint64_t v290 = 0;
                  float v291 = 0.01;
                  do
                  {
                    float v292 = fabsf(v280 * *(float *)((char *)&v383 + v290));
                    if (v291 < v292) {
                      float v291 = v292;
                    }
                    v290 += 4;
                  }
                  while (v290 != 12);
                  float v293 = sqrt((-11.5129255 - logf(v291)) * (float)(v285 * (float)(v285 * -2.0)));
                  int v294 = *(_DWORD *)v366;
                  float v295 = v366[1];
                  uint64x2_t __p = v383;
                  uint64_t v296 = llroundf(v295 - v293);
                  LODWORD(v376) = v384.i32[0];
                  int64_t v297 = llroundf(v295 + v293);
                  uint64_t v298 = v296 & ~(v296 >> 63);
                  unint64_t __srca = (void *)v297;
                  if (v298 <= v297)
                  {
                    do
                    {
                      uint64_t v299 = (uint64_t)(v275[8] - v275[7]) >> 5;
                      if (v131 >= v132)
                      {
                        uint64_t v300 = ((char *)v131 - (char *)v363) >> 4;
                        unint64_t v301 = v300 + 1;
                        if ((unint64_t)(v300 + 1) >> 60) {
                          sub_2483E92E8();
                        }
                        if (v132 - v363 > v301) {
                          unint64_t v301 = v132 - v363;
                        }
                        if ((unint64_t)((char *)v132 - (char *)v363) >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v302 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v302 = v301;
                        }
                        uint64_t v303 = (char *)sub_2483F3EB0(v302);
                        uint64_t v305 = (uint64_t *)&v303[16 * v300];
                        *uint64_t v305 = v298;
                        v305[1] = v299;
                        if (v131 == v363)
                        {
                          unint64_t v308 = &v303[16 * v300];
                          uint64_t v275 = a1;
                          unint64_t v307 = v363;
                        }
                        else
                        {
                          uint64_t v306 = &v303[16 * v300];
                          uint64_t v275 = a1;
                          unint64_t v307 = v363;
                          do
                          {
                            unint64_t v308 = v306 - 16;
                            *((_OWORD *)v306 - 1) = *((_OWORD *)v131 - 1);
                            v131 -= 2;
                            v306 -= 16;
                          }
                          while (v131 != v363);
                        }
                        float32x4_t v132 = (unint64_t *)&v303[16 * v304];
                        unsigned int v131 = (unint64_t *)(v305 + 2);
                        if (v307) {
                          operator delete(v307);
                        }
                        uint64_t v363 = (unint64_t *)v308;
                        int64_t v297 = (int64_t)__srca;
                      }
                      else
                      {
                        *unsigned int v131 = v298;
                        v131[1] = v299;
                        v131 += 2;
                      }
                    }
                    while (v298++ != v297);
                  }
                  float v309 = v280 * (float)(v285 * 0.25);
                  unint64_t v310 = v275[8];
                  unint64_t v311 = v275[9];
                  if (v310 >= v311)
                  {
                    uint64_t v314 = v275[7];
                    uint64_t v315 = (uint64_t)(v310 - v314) >> 5;
                    unint64_t v316 = v315 + 1;
                    if ((unint64_t)(v315 + 1) >> 59) {
                      sub_2483E92E8();
                    }
                    uint64_t v317 = v311 - v314;
                    if (v317 >> 4 > v316) {
                      unint64_t v316 = v317 >> 4;
                    }
                    if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v318 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v318 = v316;
                    }
                    if (v318) {
                      unint64_t v318 = (unint64_t)sub_24843356C(v318);
                    }
                    else {
                      uint64_t v319 = 0;
                    }
                    unint64_t v320 = v318 + 32 * v315;
                    *(_DWORD *)unint64_t v320 = v294;
                    *(float *)(v320 + 4) = v295;
                    *(float *)(v320 + 8) = v293;
                    *(float *)(v320 + 12) = v287;
                    *(float *)(v320 + 16) = v309;
                    *(void *)(v320 + 20) = __p;
                    *(_DWORD *)(v320 + 28) = v376;
                    unint64_t v322 = (char *)v275[7];
                    unint64_t v321 = (char *)v275[8];
                    unint64_t v323 = v320;
                    float v133 = 31.0;
                    if (v321 != v322)
                    {
                      do
                      {
                        long long v324 = *((_OWORD *)v321 - 1);
                        *(_OWORD *)(v323 - 32) = *((_OWORD *)v321 - 2);
                        *(_OWORD *)(v323 - 16) = v324;
                        v323 -= 32;
                        v321 -= 32;
                      }
                      while (v321 != v322);
                      unint64_t v321 = (char *)v275[7];
                    }
                    unint64_t v312 = v320 + 32;
                    v275[7] = v323;
                    v275[8] = v320 + 32;
                    v275[9] = v318 + 32 * v319;
                    if (v321) {
                      operator delete(v321);
                    }
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v310 = v294;
                    *(float *)(v310 + 4) = v295;
                    *(float *)(v310 + 8) = v293;
                    *(float *)(v310 + 12) = v287;
                    *(float *)(v310 + 16) = v309;
                    *(void *)(v310 + 20) = __p;
                    *(_DWORD *)(v310 + 28) = v376;
                    unint64_t v312 = v310 + 32;
                    float v133 = 31.0;
                  }
                  uint64_t v289 = v358;
                  int v313 = v361;
                  v275[8] = v312;
                  goto LABEL_336;
                }
              }
              int v313 = v361;
LABEL_336:
              int v276 = v313 + 1;
              unint64_t v277 = v366 + 3;
              if (v366 + 3 == v289) {
                goto LABEL_354;
              }
            }
          }
LABEL_355:
          operator delete(v252);
        }
        uint64_t v129 = v347 + 536;
        unint64_t v354 = (float32x4_t *)((char *)v354 + 536);
        float32x4_t v130 = v363;
        if (v347 + 536 == v342) {
          goto LABEL_363;
        }
      }
      int v154 = 0;
LABEL_155:
      unsigned int v155 = (float32x2_t *)sub_2483F04AC(1uLL);
      uint64_t v141 = &v155[v156];
      if (v154) {
        operator delete(v154);
      }
      int v154 = v155;
      goto LABEL_158;
    }
  }
  float32x4_t v130 = 0;
  unsigned int v131 = 0;
LABEL_363:
  unint64_t v326 = ((char *)v131 - (char *)v130) >> 4;
  unint64_t v327 = 126 - 2 * __clz(v326);
  if (v131 == v130) {
    uint64_t v328 = 0;
  }
  else {
    uint64_t v328 = v327;
  }
  sub_248432A90((unint64_t)v130, v131, v328, 1);
  sub_2483FEEE4(v345, ((char *)v131 - (char *)v130) >> 4);
  sub_2483FEEE4(v348, a3 + 1);
  unint64_t v329 = a3;
  if (v131 != v130)
  {
    unint64_t v330 = *v345;
    if (v326 <= 1) {
      uint64_t v331 = 1;
    }
    else {
      uint64_t v331 = ((char *)v131 - (char *)v130) >> 4;
    }
    unint64_t v332 = v130 + 1;
    do
    {
      *(void *)unint64_t v330 = *v332;
      unint64_t v333 = *(v332 - 1);
      if (v333 < a3) {
        ++*(void *)&(*v348)[8 * v333 + 8];
      }
      v332 += 2;
      v330 += 8;
      --v331;
    }
    while (v331);
  }
  if (a3)
  {
    uint64_t v334 = *v348 + 8;
    uint64_t v335 = *(void *)*v348;
    do
    {
      v335 += *v334;
      *v334++ = v335;
      --v329;
    }
    while (v329);
  }
  uint64_t v325 = 0;
LABEL_378:
  uint64x2_t __p = &v370;
  sub_2484335A4((void ***)&__p);
  if (v372) {
    operator delete(v372);
  }
  if (v130) {
    operator delete(v130);
  }
  return v325;
}

void sub_248432930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char *a46,void *a47)
{
  if (v47) {
    operator delete(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  a46 = &a39;
  sub_2484335A4((void ***)&a46);
  if (a43) {
    operator delete(a43);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void *sub_248432A14(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_2484032DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248432A74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_248432A90(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t *)result;
LABEL_2:
  unint64_t v10 = a2 - 2;
  uint64_t k = v9;
  while (1)
  {
    unint64_t v9 = k;
    uint64_t v12 = (char *)a2 - (char *)k;
    unint64_t v13 = ((char *)a2 - (char *)k) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v45 = *v10;
          unint64_t v46 = *k;
          if (*v10 < *k || v46 >= v45 && *(a2 - 1) < k[1])
          {
            *uint64_t k = v45;
            *(a2 - 2) = v46;
            unint64_t v47 = k[1];
            k[1] = *(a2 - 1);
            *(a2 - 1) = v47;
          }
          break;
        case 3uLL:
          uint64_t result = (unint64_t)sub_248433638(k, k + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)sub_24843376C(k, k + 2, k + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)sub_24843386C(k, k + 2, k + 4, k + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383)
    {
      int v48 = k + 2;
      BOOL v50 = k == a2 || v48 == a2;
      if (a4)
      {
        if (v50) {
          return result;
        }
        uint64_t v51 = 0;
        int v52 = k;
        while (2)
        {
          int8x16_t v53 = v52;
          int v52 = v48;
          unint64_t v54 = v53[2];
          unint64_t v55 = *v53;
          if (v54 < *v53)
          {
            unint64_t v56 = v53[3];
            goto LABEL_112;
          }
          if (v55 >= v54)
          {
            unint64_t v56 = v53[3];
            if (v56 < v53[1])
            {
LABEL_112:
              v53[2] = v55;
              v52[1] = v53[1];
              float v57 = k;
              if (v53 != k)
              {
                uint64_t v58 = v51;
                do
                {
                  unint64_t v59 = *(unint64_t *)((char *)k + v58 - 16);
                  if (v54 >= v59)
                  {
                    if (v59 < v54)
                    {
                      float v57 = v53;
                      goto LABEL_121;
                    }
                    float v57 = (unint64_t *)((char *)k + v58);
                    unint64_t v60 = *(unint64_t *)((char *)k + v58 - 8);
                    if (v56 >= v60) {
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    unint64_t v60 = *(unint64_t *)((char *)k + v58 - 8);
                  }
                  v53 -= 2;
                  unint64_t v61 = (unint64_t *)((char *)k + v58);
                  *unint64_t v61 = v59;
                  v61[1] = v60;
                  v58 -= 16;
                }
                while (v58);
                float v57 = k;
              }
LABEL_121:
              unint64_t *v57 = v54;
              v57[1] = v56;
            }
          }
          int v48 = v52 + 2;
          v51 += 16;
          if (v52 + 2 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v50) {
        return result;
      }
      while (2)
      {
        uint64_t v77 = v9;
        unint64_t v9 = v48;
        unint64_t v78 = v77[2];
        unint64_t v79 = *v77;
        if (v78 >= *v77)
        {
          if (v79 >= v78)
          {
            unint64_t v80 = v77[3];
            if (v80 < v77[1]) {
              goto LABEL_159;
            }
          }
        }
        else
        {
          unint64_t v80 = v77[3];
          do
          {
            do
            {
LABEL_159:
              int64x2_t v81 = v77;
              unint64_t v82 = v79;
              unint64_t v83 = *(v77 - 2);
              v77 -= 2;
              unint64_t v79 = v83;
              unint64_t v84 = v77[3];
              v77[4] = v82;
              v77[5] = v84;
            }
            while (v78 < v83);
          }
          while (v79 >= v78 && v80 < *(v81 - 1));
          unint64_t *v81 = v78;
          v81[1] = v80;
        }
        int v48 = v9 + 2;
        if (v9 + 2 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    float32x2_t v15 = &k[2 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x801)
    {
      sub_248433638(v9, &v9[2 * (v13 >> 1)], a2 - 2);
      sub_248433638(v9 + 2, v15 - 2, a2 - 4);
      sub_248433638(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
      uint64_t result = (unint64_t)sub_248433638(v15 - 2, v15, &v9[2 * v14 + 2]);
      long long v16 = *(_OWORD *)v9;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
      *(_OWORD *)float32x2_t v15 = v16;
    }
    else
    {
      uint64_t result = (unint64_t)sub_248433638(&v9[2 * (v13 >> 1)], v9, a2 - 2);
    }
    --a3;
    unint64_t v17 = *v9;
    if ((a4 & 1) != 0 || (unint64_t v18 = *(v9 - 2), v18 < v17))
    {
LABEL_14:
      unint64_t v20 = v9[1];
      for (uint64_t i = v9 + 2; ; i += 2)
      {
        unint64_t v22 = *i;
        if (*i >= v17 && (v17 < v22 || i[1] >= v20)) {
          break;
        }
      }
      if (i - 2 == v9)
      {
        uint64_t j = a2;
        if (i < a2)
        {
          unint64_t v26 = *v10;
          uint64_t j = a2 - 2;
          if (*v10 >= v17)
          {
            uint64_t j = a2 - 2;
            do
            {
              if (v17 >= v26)
              {
                if (j[1] < v20 || i >= j) {
                  break;
                }
              }
              else if (i >= j)
              {
                break;
              }
              unint64_t v28 = *(j - 2);
              j -= 2;
              unint64_t v26 = v28;
            }
            while (v28 >= v17);
          }
        }
      }
      else
      {
        unint64_t v23 = *v10;
        for (uint64_t j = a2 - 2; v23 >= v17 && (v17 < v23 || j[1] >= v20); j -= 2)
        {
          unint64_t v25 = *(j - 2);
          unint64_t v23 = v25;
        }
      }
      uint64_t k = i;
      if (i < j)
      {
        unint64_t v29 = *j;
        uint64_t k = i;
        float v30 = j;
        do
        {
          *uint64_t k = v29;
          *float v30 = v22;
          unint64_t v31 = k[1];
          k[1] = v30[1];
          v30[1] = v31;
          do
          {
            do
            {
              unint64_t v32 = k[2];
              k += 2;
              unint64_t v22 = v32;
            }
            while (v32 < v17);
          }
          while (v17 >= v22 && k[1] < v20);
          do
          {
            unint64_t v33 = *(v30 - 2);
            v30 -= 2;
            unint64_t v29 = v33;
          }
          while (v33 >= v17 && (v17 < v29 || v30[1] >= v20));
        }
        while (k < v30);
      }
      if (k - 2 != v9)
      {
        *unint64_t v9 = *(k - 2);
        v9[1] = *(k - 1);
      }
      *(k - 2) = v17;
      *(k - 1) = v20;
      if (i < j) {
        goto LABEL_51;
      }
      BOOL v34 = sub_2484339C0(v9, k - 2);
      uint64_t result = sub_2484339C0(k, a2);
      if (result)
      {
        a2 = k - 2;
        if (v34) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v34)
      {
LABEL_51:
        uint64_t result = sub_248432A90(v9, k - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 < v18)
      {
        unint64_t v19 = v9[1];
      }
      else
      {
        unint64_t v19 = v9[1];
        if (*(v9 - 1) < v19) {
          goto LABEL_14;
        }
      }
      unint64_t v35 = *v10;
      if (v17 >= *v10 && (v35 < v17 || v19 >= *(a2 - 1)))
      {
        for (uint64_t k = v9 + 2; k < a2 && v17 >= *k && (*k < v17 || v19 >= k[1]); k += 2)
          ;
      }
      else
      {
        uint64_t k = v9;
        do
        {
          unint64_t v37 = k[2];
          k += 2;
          unint64_t v36 = v37;
        }
        while (v17 >= v37 && (v36 < v17 || v19 >= k[1]));
      }
      uint64_t m = a2;
      if (k < a2)
      {
        for (uint64_t m = a2 - 2; v17 < v35 || v35 >= v17 && v19 < m[1]; m -= 2)
        {
          unint64_t v39 = *(m - 2);
          unint64_t v35 = v39;
        }
      }
      if (k < m)
      {
        unint64_t v40 = *k;
        unint64_t v41 = *m;
        do
        {
          *uint64_t k = v41;
          *uint64_t m = v40;
          unint64_t v42 = k[1];
          k[1] = m[1];
          m[1] = v42;
          do
          {
            unint64_t v43 = k[2];
            k += 2;
            unint64_t v40 = v43;
          }
          while (v17 >= v43 && (v40 < v17 || v19 >= k[1]));
          do
          {
            do
            {
              unint64_t v44 = *(m - 2);
              m -= 2;
              unint64_t v41 = v44;
            }
            while (v17 < v44);
          }
          while (v41 >= v17 && v19 < m[1]);
        }
        while (k < m);
      }
      BOOL v4 = k - 2 >= v9;
      BOOL v5 = k - 2 == v9;
      if (k - 2 != v9)
      {
        *unint64_t v9 = *(k - 2);
        v9[1] = *(k - 1);
      }
      a4 = 0;
      *(k - 2) = v17;
      *(k - 1) = v19;
    }
  }
  if (k != a2)
  {
    int64_t v62 = (v13 - 2) >> 1;
    int64_t v63 = v62;
    while (2)
    {
      int64_t v64 = v63;
      if (v62 >= v63)
      {
        uint64_t v65 = (2 * v63) | 1;
        float32x2_t v66 = &k[2 * v65];
        if (2 * v64 + 2 < (uint64_t)v13)
        {
          unint64_t v67 = v66[2];
          if (*v66 < v67 || v67 >= *v66 && k[2 * v65 + 1] < v66[3])
          {
            v66 += 2;
            uint64_t v65 = 2 * v64 + 2;
          }
        }
        int8x8_t v68 = &k[2 * v64];
        unint64_t v69 = *v66;
        unint64_t v70 = *v68;
        if (*v66 >= *v68)
        {
          if (v70 < v69)
          {
            unint64_t v71 = v68[1];
            goto LABEL_136;
          }
          unint64_t v71 = k[2 * v64 + 1];
          if (v66[1] >= v71)
          {
LABEL_136:
            *int8x8_t v68 = v69;
            v68[1] = v66[1];
            if (v62 >= v65)
            {
              while (1)
              {
                uint64_t v73 = 2 * v65;
                uint64_t v65 = (2 * v65) | 1;
                float v72 = &k[2 * v65];
                uint64_t v74 = v73 + 2;
                if (v74 < (uint64_t)v13)
                {
                  unint64_t v75 = v72[2];
                  if (*v72 < v75 || v75 >= *v72 && k[2 * v65 + 1] < v72[3])
                  {
                    v72 += 2;
                    uint64_t v65 = v74;
                  }
                }
                unint64_t v76 = *v72;
                if (*v72 < v70 || v70 >= v76 && v72[1] < v71) {
                  break;
                }
                unint64_t *v66 = v76;
                v66[1] = v72[1];
                float32x2_t v66 = v72;
                if (v62 < v65) {
                  goto LABEL_138;
                }
              }
            }
            float v72 = v66;
LABEL_138:
            *float v72 = v70;
            v72[1] = v71;
          }
        }
      }
      int64_t v63 = v64 - 1;
      if (v64) {
        continue;
      }
      break;
    }
    uint64_t v85 = (unint64_t)v12 >> 4;
    while (2)
    {
      int64_t v86 = 0;
      unint64_t v87 = *k;
      unint64_t v88 = k[1];
      uint64_t v89 = v85 - 2;
      if (v85 < 2) {
        uint64_t v89 = v85 - 1;
      }
      uint64_t v90 = v89 >> 1;
      unint64_t v91 = k;
      do
      {
        unint64_t v92 = v91;
        int64_t v93 = v86 + 1;
        v91 += 2 * v86 + 2;
        uint64_t v94 = 2 * v86;
        uint64_t result = (2 * v86) | 1;
        int64_t v86 = result;
        uint64_t v95 = v94 + 2;
        if (v95 < v85)
        {
          uint64_t result = (unint64_t)(v91 + 2);
          unint64_t v96 = v91[2];
          if (*v91 < v96 || v96 >= *v91 && v92[2 * v93 + 1] < v91[3])
          {
            v91 += 2;
            int64_t v86 = v95;
          }
        }
        *unint64_t v92 = *v91;
        v92[1] = v91[1];
      }
      while (v86 <= v90);
      if (v91 == a2 - 2)
      {
        unint64_t *v91 = v87;
        v91[1] = v88;
      }
      else
      {
        unint64_t *v91 = *(a2 - 2);
        v91[1] = *(a2 - 1);
        *(a2 - 2) = v87;
        *(a2 - 1) = v88;
        uint64_t v97 = (char *)v91 - (char *)k + 16;
        if (v97 >= 17)
        {
          unint64_t v98 = (v97 >> 4) - 2;
          unint64_t v99 = v98 >> 1;
          int64x2_t v100 = &k[2 * (v98 >> 1)];
          unint64_t v101 = *v100;
          unint64_t v102 = *v91;
          if (*v100 < *v91)
          {
            unint64_t v103 = v91[1];
            goto LABEL_178;
          }
          if (v102 >= v101)
          {
            uint64_t result = k[2 * v99 + 1];
            unint64_t v103 = v91[1];
            if (result < v103)
            {
LABEL_178:
              unint64_t *v91 = v101;
              v91[1] = k[2 * v99 + 1];
              if (v98 >= 2)
              {
                while (1)
                {
                  unint64_t v105 = v99 - 1;
                  unint64_t v99 = (v99 - 1) >> 1;
                  float32x4_t v104 = &k[2 * v99];
                  unint64_t v106 = *v104;
                  if (*v104 >= v102)
                  {
                    if (v102 < v106) {
                      break;
                    }
                    uint64_t result = k[2 * v99 + 1];
                    if (result >= v103) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t result = v104[1];
                  }
                  *int64x2_t v100 = v106;
                  v100[1] = result;
                  int64x2_t v100 = &k[2 * v99];
                  if (v105 <= 1) {
                    goto LABEL_185;
                  }
                }
              }
              float32x4_t v104 = v100;
LABEL_185:
              *float32x4_t v104 = v102;
              v104[1] = v103;
            }
          }
        }
      }
      a2 -= 2;
      if (v85-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

float sub_248433460(float32x4_t *a1, float a2)
{
  float v2 = a2 + 0.5;
  float32x4_t v3 = 0uLL;
  BOOL v4 = &xmmword_24854E460;
  float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
  float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  unint64_t v9 = -4;
  __asm { FMOV            V6.4S, #0.25 }
  float32x4_t v15 = (float32x4_t)vdupq_n_s32(0xBF574380);
  float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3FD744FCu);
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3D8E8CBEu);
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0xBFB504F3);
  __asm { FMOV            V19.4S, #-1.0 }
  float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
  do
  {
    float32x4_t v21 = (float32x4_t)*v4++;
    float32x4_t v22 = vmulq_n_f32(v21, v2);
    float32x4_t v23 = vsubq_f32(v22, vmulq_f32(vrndmq_f32(vmulq_f32(v22, v5)), v6));
    float32x4_t v24 = vminnmq_f32(v23, vsubq_f32(v6, v23));
    int32x4_t v25 = vcgeq_f32(v24, v7);
    float32x4_t v26 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vsubq_f32(v8, v24), (int8x16_t)v24), _Q6);
    float32x4_t v27 = vmulq_f32(v26, v26);
    float32x4_t v28 = vmlaq_f32(vmlaq_f32(v16, v15, v27), v17, vmulq_f32(v27, v27));
    float32x4_t v29 = vmlaq_f32(v18, v28, v28);
    float32x4_t v30 = *a1++;
    float32x4_t v3 = vmlaq_f32(v3, v20, vmulq_f32(v30, (float32x4_t)veorq_s8((int8x16_t)vshlq_n_s32(v25, 0x1FuLL), (int8x16_t)vmlaq_f32(_Q19, v29, v29))));
    v9 += 4;
  }
  while (v9 < 0x1C);
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v3, v3));
}

void *sub_24843356C(unint64_t a1)
{
  if (a1 >> 59) {
    sub_2483E9338();
  }
  return operator new(32 * a1);
}

void sub_2484335A4(void ***a1)
{
  uint64_t v1 = *a1;
  float v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    float32x4_t v5 = **a1;
    if (v4 != v2)
    {
      float32x4_t v6 = v4 - 536;
      do
      {
        float32x4_t v7 = *(void **)v6;
        if (*(void *)v6)
        {
          *((void *)v6 + 1) = v7;
          operator delete(v7);
        }
        BOOL v8 = v6 == v2;
        v6 -= 536;
      }
      while (!v8);
      float32x4_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *sub_248433638(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    unint64_t v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      BOOL v8 = a2 + 1;
      unint64_t v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      unint64_t v10 = *a2;
      unint64_t v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        unint64_t v15 = *result;
        *uint64_t result = *v8;
        *BOOL v8 = v15;
      }
    }
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      float32x4_t v6 = a3 + 1;
LABEL_17:
      BOOL v8 = v6;
      goto LABEL_18;
    }
    *uint64_t result = v3;
    *a2 = v4;
    unint64_t v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    unint64_t v13 = *a3;
    unint64_t v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      float32x4_t v6 = a3 + 1;
      uint64_t result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unint64_t *sub_24843376C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_248433638(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a3;
    unint64_t v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *sub_24843386C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_24843376C(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a4;
    unint64_t v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a2;
        unint64_t v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL sub_2484339C0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_248433638(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_24843376C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_24843386C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      sub_248433638(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      unint64_t v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v15 = v10[1];
    }
    *unint64_t v10 = v14;
    v10[1] = v9[1];
    unint64_t v16 = a1;
    if (v9 == a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unint64_t v18 = (char *)a1 + v17;
      unint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        unint64_t v20 = *((void *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        unint64_t v16 = v9;
        goto LABEL_22;
      }
      unint64_t v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *((void *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        unint64_t v16 = a1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *unint64_t v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_248433BD4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)((a3 - a2) >> 2) >> 1;
  int v6 = a4 - v5;
  if (a4 < v5) {
    int v6 = 0;
  }
  int v7 = *(_DWORD *)result - 1;
  if (v7 >= (int)v5 + (int)a4) {
    int v7 = v5 + a4;
  }
  float v8 = 0.0;
  if (v7 >= v6)
  {
    uint64_t v9 = ~(uint64_t)v7 + v6;
    unint64_t v10 = (float *)(a2 + 4 * (v5 + v6 - a4));
    do
    {
      float v11 = *v10++;
      float v8 = v8 + v11;
      BOOL v12 = __CFADD__(v9++, 1);
    }
    while (!v12);
  }
  uint64_t v13 = *(unsigned int *)(result + 4);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(result + 16);
    unint64_t v16 = (float *)(a2 + 4 * (v5 + v6 - a4));
    uint64_t v17 = *(void *)(result + 24) + 4 * v6;
    float v18 = 1.0 / v8;
    do
    {
      float v19 = 0.0;
      if (v7 >= v6)
      {
        unint64_t v20 = (float *)v17;
        unint64_t v21 = v16;
        BOOL result = ~(uint64_t)v7 + v6;
        do
        {
          float v22 = *v20++;
          float v23 = v22;
          float v24 = *v21++;
          float v19 = v19 + (float)(v23 * v24);
          BOOL v12 = __CFADD__(result++, 1);
        }
        while (!v12);
      }
      *(float *)(a5 + 4 * v14++) = v18 * v19;
      v17 += v15;
    }
    while (v14 != v13);
  }
  return result;
}

void sub_248433CAC(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  int v7 = (float *)*a2;
  uint64_t v8 = a2[1] - *a2;
  uint64_t v9 = v8 >> 2;
  unint64_t v10 = (unint64_t)(v8 >> 2) >> 1;
  if (v8)
  {
    if ((unint64_t)v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v8 >> 2;
    }
    float v12 = 0.0;
    do
    {
      float v13 = *v7++;
      float v12 = v12 + v13;
      --v11;
    }
    while (v11);
  }
  else
  {
    float v12 = 0.0;
  }
  unint64_t v14 = v10 + 1;
  float v15 = 1.0 / v12;
  sub_24842DF64(__p, v10 + 1);
  unint64_t v16 = (float *)*a2;
  uint64_t v17 = (float *)__p[0];
  do
  {
    float v18 = *v16++;
    *v17++ = v15 * v18;
    --v14;
  }
  while (v14);
  if (v10 >= v6) {
    unint64_t v19 = v6;
  }
  else {
    unint64_t v19 = v10;
  }
  if (v6 >= v10) {
    unint64_t v20 = v6 - v10;
  }
  else {
    unint64_t v20 = 0;
  }
  if (v9 > 14)
  {
    if (v9 == 15)
    {
      uint64_t v36 = a1[1];
      if (v36)
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = *((void *)a1 + 2);
        unint64_t v40 = (float *)__p[0];
        uint64_t v41 = *((void *)a1 + 3) + 4 * v19 - 4 * v10;
        do
        {
          if (v19 < v20)
          {
            unint64_t v42 = (float *)(v41 + v39 * v38);
            uint64_t v43 = *(void *)(a3 + 16);
            unint64_t v44 = *(void *)(a3 + 24) + v19 * v43;
            unint64_t v45 = v6 - 2 * v19;
            unint64_t v46 = v42;
            do
            {
              float v47 = v46[1];
              ++v46;
              *(float *)(v44 + v37) = (float)((float)(v42[3] + v42[11]) * v40[3])
                                    + (float)((float)((float)((float)(v42[2] + v42[12]) * v40[2])
                                                    + (float)((float)(v42[6] + v42[8]) * v40[6]))
                                            + (float)((float)((float)((float)(v47 + v42[13]) * v40[1])
                                                            + (float)((float)(v42[5] + v42[9]) * v40[5]))
                                                    + (float)((float)((float)((float)(*v42 + v42[14]) * *v40)
                                                                    + (float)((float)(v42[4] + v42[10]) * v40[4]))
                                                            + (float)(v42[7] * v40[7]))));
              v44 += v43;
              unint64_t v42 = v46;
              --v45;
            }
            while (v45);
          }
          ++v38;
          v37 += 4;
        }
        while (v38 != v36);
      }
    }
    else
    {
      uint64_t v61 = a1[1];
      if (v61)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = *((void *)a1 + 2);
        uint64_t v65 = (float *)__p[0];
        uint64_t v66 = *((void *)a1 + 3) + 4 * v19 - 4 * v10;
        do
        {
          if (v19 < v20)
          {
            unint64_t v67 = (float *)(v66 + v64 * v63);
            uint64_t v68 = *(void *)(a3 + 16);
            unint64_t v69 = *(void *)(a3 + 24) + v19 * v68;
            unint64_t v70 = v6 - 2 * v19;
            unint64_t v71 = v67;
            do
            {
              float v72 = v71[1];
              ++v71;
              float v73 = (float)((float)((float)((float)(v72 + v67[31]) * v65[1])
                                  + (float)((float)(v67[5] + v67[27]) * v65[5]))
                          + (float)((float)(v67[9] + v67[23]) * v65[9]))
                  + (float)((float)(v67[13] + v67[19]) * v65[13]);
              *(float *)(v69 + v62) = (float)((float)((float)((float)((float)(v67[3] + v67[29]) * v65[3])
                                                            + (float)((float)(v67[7] + v67[25]) * v65[7]))
                                                    + (float)((float)(v67[11] + v67[21]) * v65[11]))
                                            + (float)((float)(v67[15] + v67[17]) * v65[15]))
                                    + (float)((float)((float)((float)((float)((float)(v67[2] + v67[30]) * v65[2])
                                                                    + (float)((float)(v67[6] + v67[26]) * v65[6]))
                                                            + (float)((float)(v67[10] + v67[22]) * v65[10]))
                                                    + (float)((float)(v67[14] + v67[18]) * v65[14]))
                                            + (float)(v73
                                                    + (float)((float)((float)((float)((float)((float)(*v67 + v67[32])
                                                                                            * *v65)
                                                                                    + (float)((float)(v67[4] + v67[28])
                                                                                            * v65[4]))
                                                                            + (float)((float)(v67[8] + v67[24]) * v65[8]))
                                                                    + (float)((float)(v67[12] + v67[20]) * v65[12]))
                                                            + (float)(v67[16] * v65[16]))));
              v69 += v68;
              unint64_t v67 = v71;
              --v70;
            }
            while (v70);
          }
          ++v63;
          v62 += 4;
        }
        while (v63 != v61);
      }
    }
  }
  else if (v9 == 7)
  {
    uint64_t v21 = a1[1];
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      float v24 = *(float *)__p[0];
      float32x2_t v25 = *(float32x2_t *)((char *)__p[0] + 4);
      uint64_t v26 = *((void *)a1 + 2);
      float v27 = *((float *)__p[0] + 3);
      uint64_t v28 = *((void *)a1 + 3) + 4 * v19 - 4 * v10;
      do
      {
        if (v19 < v20)
        {
          uint64_t v29 = v28 + v26 * v23;
          uint64_t v30 = *(void *)(a3 + 16);
          unint64_t v31 = *(void *)(a3 + 24) + v19 * v30;
          unint64_t v32 = v6 - 2 * v19;
          uint64_t v33 = v29;
          do
          {
            float32x2_t v34 = *(float32x2_t *)(v33 + 4);
            v33 += 4;
            float32x2_t v35 = vmul_f32(v25, vadd_f32(v34, (float32x2_t)vrev64_s32(*(int32x2_t *)(v29 + 16))));
            *(float *)(v31 + v22) = v35.f32[1]
                                  + (float)(v35.f32[0]
                                          + (float)((float)(v24 * (float)(*(float *)v29 + *(float *)(v29 + 24)))
                                                  + (float)(*(float *)(v29 + 12) * v27)));
            v31 += v30;
            uint64_t v29 = v33;
            --v32;
          }
          while (v32);
        }
        ++v23;
        v22 += 4;
      }
      while (v23 != v21);
    }
  }
  else
  {
    uint64_t v48 = a1[1];
    if (v48)
    {
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = *((void *)a1 + 2);
      int v52 = (float32x2_t *)__p[0];
      uint64_t v53 = *((void *)a1 + 3) + 4 * v19 - 4 * v10;
      do
      {
        if (v19 < v20)
        {
          uint64_t v54 = v53 + v51 * v50;
          uint64_t v55 = *(void *)(a3 + 16);
          unint64_t v56 = *(void *)(a3 + 24) + v19 * v55;
          unint64_t v57 = v6 - 2 * v19;
          uint64_t v58 = v54;
          do
          {
            float v59 = *(float *)(v58 + 4);
            v58 += 4;
            float32x2_t v60 = vmul_f32(vadd_f32(*(float32x2_t *)(v54 + 8), (float32x2_t)vrev64_s32(*(int32x2_t *)(v54 + 36))), v52[1]);
            *(float *)(v56 + v49) = v60.f32[1]
                                  + (float)(v60.f32[0]
                                          + (float)((float)((float)((float)(v59 + *(float *)(v54 + 44)) * v52->f32[1])
                                                          + (float)((float)(*(float *)(v54 + 20) + *(float *)(v54 + 28))
                                                                  * v52[2].f32[1]))
                                                  + (float)((float)((float)((float)(*(float *)v54 + *(float *)(v54 + 48))
                                                                          * v52->f32[0])
                                                                  + (float)((float)(*(float *)(v54 + 16)
                                                                                  + *(float *)(v54 + 32))
                                                                          * v52[2].f32[0]))
                                                          + (float)(*(float *)(v54 + 24) * v52[3].f32[0]))));
            v56 += v55;
            uint64_t v54 = v58;
            --v57;
          }
          while (v57);
        }
        ++v50;
        v49 += 4;
      }
      while (v50 != v48);
    }
  }
  if (v19)
  {
    unint64_t v74 = 0;
    uint64_t v76 = *(void *)(a3 + 16);
    uint64_t v75 = *(void *)(a3 + 24);
    do
    {
      sub_248433BD4((uint64_t)a1, *a2, a2[1], v74++, v75);
      v75 += v76;
    }
    while (v19 != v74);
  }
  if (v20 < *a1)
  {
    uint64_t v77 = *(void *)(a3 + 16);
    uint64_t v78 = *(void *)(a3 + 24) + v77 * v20;
    do
    {
      sub_248433BD4((uint64_t)a1, *a2, a2[1], v20++, v78);
      v78 += v77;
    }
    while (v20 < *a1);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_2484341E4(unsigned int *a1, uint64_t a2, unsigned int *a3, float a4)
{
  double v33 = -1.0 / ((a4 + a4) * a4);
  int v7 = (int)(float)(fabsf(a4) * 2.25);
  if (v7 <= 1) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = v7;
  }
  sub_24842DF64(&v45, (2 * v8) | 1);
  unint64_t v9 = 0;
  unint64_t v10 = v45;
  unint64_t v11 = 2 * v8;
  uint64x2_t v32 = (uint64x2_t)vdupq_n_s64(v11);
  int32x2_t v12 = vadd_s32(vdup_n_s32(-v8), (int32x2_t)0x100000000);
  unint64_t v13 = v11 + 2;
  do
  {
    int32x2_t v36 = vmovn_s64((int64x2_t)vcgeq_u64(v32, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v9), (int8x16_t)xmmword_2484DC880)));
    v14.i64[0] = v12.i32[0];
    v14.i64[1] = v12.i32[1];
    float64x2_t v15 = vcvtq_f64_s64(v14);
    float64x2_t __x = vmulq_f64(vmulq_n_f64(v15, v33), v15);
    double v35 = exp(__x.f64[1]);
    double v16 = exp(__x.f64[0]);
    v17.i32[1] = HIDWORD(v35);
    v18.i32[1] = v36.i32[1];
    if (v36.i8[0])
    {
      float v19 = v16;
      v10[v9] = v19;
    }
    if (v36.i8[4])
    {
      float v20 = v35;
      v10[v9 + 1] = v20;
    }
    v9 += 2;
    int32x2_t v12 = vadd_s32(v12, (int32x2_t)0x200000002);
  }
  while (v13 != v9);
  if (a1 != a3 && (char *)v46 - (char *)v10 == 20)
  {
    int32x2_t v21 = 0;
    if (v10 != v46)
    {
      uint64_t v22 = v10;
      do
      {
        float v23 = *v22++;
        *(float *)v21.i32 = *(float *)v21.i32 + v23;
      }
      while (v22 != v46);
    }
    *(float *)v21.i32 = 1.0 / *(float *)v21.i32;
    *(float *)v17.i32 = *(float *)v21.i32 * v10[2];
    *(float *)v18.i32 = *(float *)v21.i32 * v10[1];
    *(float *)v21.i32 = *(float *)v21.i32 * *v10;
    float32x4_t v39 = (float32x4_t)vdupq_lane_s32(v17, 0);
    int32x4_t v40 = vdupq_lane_s32(v18, 0);
    int32x4_t v41 = vdupq_lane_s32(v21, 0);
    float32x4_t v42 = v39;
    int32x4_t v43 = v40;
    int32x4_t v44 = v41;
    v37[0] = 0;
    v37[1] = 0;
    *(void *)&long long v24 = *(void *)a1;
    *((void *)&v24 + 1) = HIDWORD(*(void *)a1);
    long long v38 = v24;
    sub_2484AE67C((unint64_t)a1, v37, &v39, 0, a3);
    goto LABEL_18;
  }
  if (*(_DWORD *)a2)
  {
LABEL_17:
    sub_248433CAC(a1, (uint64_t *)&v45, a2);
    sub_248433CAC((unsigned int *)a2, (uint64_t *)&v45, (uint64_t)a3);
LABEL_18:
    uint64_t v25 = 0;
    goto LABEL_19;
  }
  sub_2483EA250((uint64_t)&v39, a1[1], *a1);
  uint64_t v25 = v41.u32[2];
  if (!v41.i32[2])
  {
    int32x4_t v27 = v40;
    v40.i64[1] = 0;
    uint64_t v28 = v41.i64[0];
    *(float32x4_t *)a2 = v39;
    uint64_t v29 = *(void *)(a2 + 24);
    *(int32x4_t *)(a2 + 16) = v27;
    if (v29)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v29 - 24));
      free(*(void **)(v29 - 32));
      __int32 v30 = v41.i32[2];
      *(void *)(a2 + 32) = v28;
      if (v30) {
        goto LABEL_17;
      }
    }
    else
    {
      *(void *)(a2 + 32) = v28;
    }
    uint64_t v31 = v40.i64[1];
    v40.i64[1] = 0;
    if (v31)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v31 - 24));
      free(*(void **)(v31 - 32));
    }
    goto LABEL_17;
  }
LABEL_19:
  if (v45)
  {
    unint64_t v46 = v45;
    operator delete(v45);
  }
  return v25;
}

void sub_248434498(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2484344B8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  sub_2483EA250((uint64_t)&v68, v6, v7);
  uint64_t v8 = v72;
  if (!v72)
  {
    uint64_t v10 = v69;
    uint64_t v9 = v70;
    uint64_t v70 = 0;
    uint64_t v11 = v71;
    *(_OWORD *)a2 = v68;
    uint64_t v12 = *(void *)(a2 + 24);
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v9;
    if (v12)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v12 - 24));
      free(*(void **)(v12 - 32));
    }
    *(void *)(a2 + 32) = v11;
    sub_2483EA250((uint64_t)&v63, v6, v7);
    uint64_t v8 = v67;
    if (!v67)
    {
      uint64_t v14 = v64;
      uint64_t v13 = v65;
      uint64_t v65 = 0;
      uint64_t v15 = v66;
      *(_OWORD *)(a2 + 40) = v63;
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a2 + 56) = v14;
      *(void *)(a2 + 64) = v13;
      if (v16)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v16 - 24));
        free(*(void **)(v16 - 32));
      }
      uint64_t v17 = 0;
      *(void *)(a2 + 72) = v15;
      char v18 = 1;
      __asm
      {
        FMOV            V24.4S, #1.5
        FMOV            V25.4S, #-1.5
      }
      float32x4_t v61 = (float32x4_t)vdupq_n_s32(0xBD23D70A);
      float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x3D23D70Au);
      float32x4_t v59 = (float32x4_t)vdupq_n_s32(0x3F39663Bu);
      float32x4_t v60 = (float32x4_t)vdupq_n_s32(0xC1E3C0E2);
      float32x4_t v57 = (float32x4_t)vdupq_n_s32(0xC0A622D7);
      float32x4_t v58 = (float32x4_t)vdupq_n_s32(0x41E3C0E2u);
      float32x4_t v55 = (float32x4_t)vdupq_n_s32(0x402C5C5Eu);
      float32x4_t v56 = (float32x4_t)vdupq_n_s32(0x40A622D7u);
      float32x4_t v53 = (float32x4_t)vdupq_n_s32(0x3E072B02u);
      float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x4009EB85u);
      float32x4_t v51 = _Q24;
      float32x4_t v52 = (float32x4_t)vdupq_n_s32(0xBE072B02);
      float32x4_t v50 = _Q25;
      while (1)
      {
        char v25 = v18;
        if (v7)
        {
          uint64_t v26 = 0;
          uint64_t v28 = *(void *)(a2 + 40 * v17 + 16);
          int32x4_t v27 = *(_DWORD **)(a2 + 40 * v17 + 24);
          uint64_t v30 = *(void *)&a1[10 * v17 + 4];
          uint64_t v29 = *(int **)&a1[10 * v17 + 6];
          do
          {
            uint64_t v31 = v29;
            uint64x2_t v32 = v27;
            unint64_t v33 = v6;
            if (v6)
            {
              do
              {
                int v34 = *v31++;
                *v32++ = v34;
                --v33;
              }
              while (v33);
            }
            ++v26;
            int32x4_t v27 = (_DWORD *)((char *)v27 + v28);
            uint64_t v29 = (int *)((char *)v29 + v30);
          }
          while (v26 != v7);
        }
        uint64_t v8 = sub_2484341E4(&a1[10 * v17], a3, &a1[10 * v17], 1.5642);
        if (v8) {
          break;
        }
        if (v25)
        {
          if (v7)
          {
            for (uint64_t i = 0; i != v7; ++i)
            {
              if (v6)
              {
                unint64_t v36 = 0;
                uint64_t v37 = (float32x4_t *)(*(void *)(a2 + 24) + *(void *)(a2 + 16) * i);
                long long v38 = (float32x4_t *)(*((void *)a1 + 3) + *((void *)a1 + 2) * i);
                do
                {
                  float32x4_t v39 = vsubq_f32(*v37, *v38);
                  *(int8x16_t *)long long v38 = vbslq_s8((int8x16_t)vcgtq_f32(*v38, v51), (int8x16_t)vaddq_f32(*v38, v50), vandq_s8((int8x16_t)vaddq_f32(*v38, v51), (int8x16_t)vcgtq_f32(v50, *v38)));
                  ++v38;
                  *(int8x16_t *)v37++ = vbslq_s8((int8x16_t)vcgtq_f32(v39, v62), (int8x16_t)vaddq_f32(v39, v61), vandq_s8((int8x16_t)vaddq_f32(v39, v62), (int8x16_t)vcgtq_f32(v61, v39)));
                  v36 += 4;
                }
                while (v36 < v6);
              }
            }
          }
        }
        else
        {
          if (!v7) {
            goto LABEL_29;
          }
          for (uint64_t j = 0; j != v7; ++j)
          {
            if (v6)
            {
              unint64_t v41 = 0;
              float32x4_t v42 = (float32x4_t *)(*(void *)(a2 + 64) + *(void *)(a2 + 56) * j);
              int32x4_t v43 = (float32x4_t *)(*((void *)a1 + 8) + *((void *)a1 + 7) * j);
              do
              {
                float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60, *v43), (int8x16_t)vmlaq_f32(v60, v59, vaddq_f32(*v43, v58)), vbslq_s8((int8x16_t)vcgeq_f32(*v43, v58), (int8x16_t)vmlaq_f32(v58, v59, vaddq_f32(*v43, v60)), *(int8x16_t *)v43));
                float32x4_t v45 = vsubq_f32(*v42, v44);
                *v42++ = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v57, v45), (int8x16_t)vmlaq_f32(v57, v59, vaddq_f32(v45, v56)), vbslq_s8((int8x16_t)vcgeq_f32(v45, v56), (int8x16_t)vmlaq_f32(v56, v59, vaddq_f32(v45, v57)), (int8x16_t)v45)), v55);
                float32x4_t v46 = vmulq_f32(v44, v54);
                *v43++ = vaddq_f32(v46, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v53), (int8x16_t)v53, vbslq_s8((int8x16_t)vcgtq_f32(v52, v46), (int8x16_t)v52, (int8x16_t)v46)));
                v41 += 4;
              }
              while (v41 < v6);
            }
          }
        }
        char v18 = 0;
        uint64_t v17 = 1;
        if ((v25 & 1) == 0)
        {
LABEL_29:
          uint64_t v8 = 0;
          break;
        }
      }
      if (!v67)
      {
        uint64_t v47 = v65;
        uint64_t v65 = 0;
        if (v47)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v47 - 24));
          free(*(void **)(v47 - 32));
        }
      }
    }
    if (!v72)
    {
      uint64_t v48 = v70;
      uint64_t v70 = 0;
      if (v48)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v48 - 24));
        free(*(void **)(v48 - 32));
      }
    }
  }
  return v8;
}

void sub_2484348BC(_Unwind_Exception *exception_object)
{
  if (!*(_DWORD *)(v1 - 104))
  {
    uint64_t v3 = *(void *)(v1 - 120);
    *(void *)(v1 - 120) = 0;
    if (v3)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v3 - 24));
      free(*(void **)(v3 - 32));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_248434930(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2483F0C3C((uint64_t)v94, *a2, a2[1]);
  uint64_t v6 = v95;
  if (!v95)
  {
    sub_2483F0E78((uint64_t)v92, (uint64_t)v94);
    uint64_t v7 = (unsigned int *)(a3 + 280);
    sub_2483F7944(a3 + 280, (uint64_t)v92);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)&v92[i]);
    sub_2483F0C3C((uint64_t)v92, *a2, a2[1]);
    uint64_t v6 = v93;
    if (!v93)
    {
      sub_2483F0E78((uint64_t)&v87, (uint64_t)v92);
      uint64_t v9 = a3 + 160;
      sub_2483F7944(a3 + 160, (uint64_t)&v87);
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)((char *)&v87 + j));
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = &a2[10 * v11];
        uint64_t v6 = sub_2484341E4(v12, a1, &v7[10 * v11], 7.1559);
        if (v6) {
          break;
        }
        unint64_t v13 = v12[1];
        if (v13)
        {
          unint64_t v14 = 0;
          LODWORD(v15) = *v12;
          do
          {
            if (v15)
            {
              unint64_t v16 = 0;
              uint64_t v17 = (float32x4_t *)(*(void *)(v9 + 40 * v11 + 24) + *(void *)(v9 + 40 * v11 + 16) * v14);
              char v18 = (float32x4_t *)(*(void *)&v7[10 * v11 + 6] + *(void *)&v7[10 * v11 + 4] * v14);
              float v19 = (float32x4_t *)(*((void *)v12 + 3) + *((void *)v12 + 2) * v14);
              do
              {
                float32x4_t v20 = *v19++;
                float32x4_t v21 = v20;
                float32x4_t v22 = *v18++;
                *v17++ = vsubq_f32(v21, v22);
                v16 += 4;
                unint64_t v15 = *v12;
              }
              while (v16 < v15);
              unint64_t v13 = v12[1];
            }
            ++v14;
          }
          while (v14 < v13);
        }
        if (++v11 == 3)
        {
          unint64_t v23 = *(unsigned int *)(a3 + 284);
          if (v23)
          {
            unint64_t v24 = 0;
            LODWORD(v25) = *(_DWORD *)(a3 + 280);
            float32x4_t v26 = (float32x4_t)vdupq_n_s32(0xBEB97B11);
            float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x424784F6u);
            float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x420754D3u);
            float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x41675511u);
            do
            {
              if (v25)
              {
                unint64_t v30 = 0;
                uint64_t v31 = *(void *)(a3 + 296) * v24;
                uint64x2_t v32 = (float32x4_t *)(*(void *)(a3 + 384) + v31);
                unint64_t v33 = (float32x4_t *)(*(void *)(a3 + 344) + v31);
                int v34 = (float32x4_t *)(*(void *)(a3 + 304) + v31);
                do
                {
                  float32x4_t v35 = vmlaq_f32(*v32, v26, *v33);
                  float32x4_t v36 = vmulq_f32(*v33, v29);
                  *int v34 = vmulq_f32(*v34, v28);
                  ++v34;
                  *v33++ = v36;
                  *v32++ = vmulq_f32(v35, v27);
                  v30 += 4;
                  unint64_t v25 = *v7;
                }
                while (v30 < v25);
                unint64_t v23 = *(unsigned int *)(a3 + 284);
              }
              ++v24;
            }
            while (v24 < v23);
          }
          unint64_t v37 = *(unsigned int *)(a3 + 160);
          uint64_t v38 = *(unsigned int *)(a3 + 164);
          sub_2483EA250((uint64_t)&v87, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 164));
          uint64_t v6 = v91;
          if (!v91)
          {
            uint64_t v39 = v88;
            uint64_t v40 = v89;
            uint64_t v89 = 0;
            uint64_t v41 = v90;
            *(_OWORD *)(a3 + 80) = v87;
            *(void *)(a3 + 96) = v39;
            uint64_t v42 = *(void *)(a3 + 104);
            *(void *)(a3 + 104) = v40;
            if (v42)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v42 - 24));
              free(*(void **)(v42 - 32));
            }
            *(void *)(a3 + 112) = v41;
            sub_2483EA250((uint64_t)&v96, v37, v38);
            uint64_t v6 = v100;
            if (!v100)
            {
              uint64_t v44 = v97;
              uint64_t v43 = v98;
              uint64_t v98 = 0;
              uint64_t v45 = v99;
              *(_OWORD *)(a3 + 120) = v96;
              uint64_t v46 = *(void *)(a3 + 144);
              *(void *)(a3 + 136) = v44;
              *(void *)(a3 + 144) = v43;
              if (v46)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v46 - 24));
                free(*(void **)(v46 - 32));
              }
              char v47 = 0;
              uint64_t v48 = 0;
              *(void *)(a3 + 152) = v45;
              char v49 = 1;
              float32x4_t v85 = (float32x4_t)vdupq_n_s32(0xBE947AE1);
              float32x4_t v86 = (float32x4_t)vdupq_n_s32(0x3E947AE1u);
              float32x4_t v83 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
              float32x4_t v84 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
              while (1)
              {
                char v50 = v47;
                if (v38)
                {
                  for (uint64_t k = 0; k != v38; ++k)
                  {
                    if (v37)
                    {
                      unint64_t v52 = 0;
                      float32x4_t v53 = (_OWORD *)(*(void *)(a3 + 80 + 40 * v48 + 24) + *(void *)(a3 + 80 + 40 * v48 + 16) * k);
                      float32x4_t v54 = (long long *)(*(void *)(v9 + 40 * v48 + 24) + *(void *)(a3 + 176) * k);
                      do
                      {
                        long long v55 = *v54++;
                        *v53++ = v55;
                        v52 += 4;
                      }
                      while (v52 < v37);
                    }
                  }
                }
                uint64_t v6 = sub_2484341E4((unsigned int *)(v9 + 40 * v48), a1, (unsigned int *)(v9 + 40 * v48), 3.2249);
                if (v6) {
                  break;
                }
                if (v49)
                {
                  if (v38)
                  {
                    for (uint64_t m = 0; m != v38; ++m)
                    {
                      if (v37)
                      {
                        unint64_t v57 = 0;
                        float32x4_t v58 = (float32x4_t *)(*(void *)(a3 + 104) + *(void *)(a3 + 96) * m);
                        float32x4_t v59 = (float32x4_t *)(*(void *)(a3 + 184) + *(void *)(a3 + 176) * m);
                        do
                        {
                          float32x4_t v60 = vsubq_f32(*v58, *v59);
                          *(int8x16_t *)float32x4_t v59 = vbslq_s8((int8x16_t)vcgtq_f32(*v59, v86), (int8x16_t)vaddq_f32(*v59, v85), vandq_s8((int8x16_t)vaddq_f32(*v59, v86), (int8x16_t)vcgtq_f32(v85, *v59)));
                          ++v59;
                          *v58++ = v60;
                          v57 += 4;
                        }
                        while (v57 < v37);
                      }
                    }
                  }
                }
                else if (v38)
                {
                  for (uint64_t n = 0; n != v38; ++n)
                  {
                    if (v37)
                    {
                      unint64_t v62 = 0;
                      long long v63 = (float32x4_t *)(*(void *)(a3 + 144) + *(void *)(a3 + 136) * n);
                      uint64_t v64 = (float32x4_t *)(*(void *)(a3 + 224) + *(void *)(a3 + 176) * n);
                      do
                      {
                        float32x4_t v65 = vsubq_f32(*v63, *v64);
                        float32x4_t *v64 = vaddq_f32(*v64, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v64, v84), (int8x16_t)v84, vbslq_s8((int8x16_t)vcgtq_f32(v83, *v64), (int8x16_t)v83, *(int8x16_t *)v64)));
                        ++v64;
                        *v63++ = v65;
                        v62 += 4;
                      }
                      while (v62 < v37);
                    }
                  }
                }
                char v49 = 0;
                char v47 = 1;
                uint64_t v48 = 1;
                if (v50)
                {
                  uint64_t v6 = sub_2484341E4((unsigned int *)(a3 + 240), a1, (unsigned int *)(a3 + 240), 3.2249);
                  if (!v6)
                  {
                    uint64_t v66 = *(unsigned int *)(a3 + 124);
                    if (v66)
                    {
                      uint64_t v67 = 0;
                      unint64_t v68 = *(unsigned int *)(a3 + 120);
                      uint64_t v70 = *(void *)(a3 + 96);
                      uint64_t v69 = *(float32x4_t **)(a3 + 104);
                      float32x4_t v71 = (float32x4_t)vdupq_n_s32(0x42380000u);
                      float32x4_t v72 = (float32x4_t)vdupq_n_s32(0x3EB1A74Au);
                      float32x4_t v73 = (float32x4_t)vdupq_n_s32(0x3F272C5Bu);
                      do
                      {
                        if (v68)
                        {
                          unint64_t v74 = 0;
                          uint64_t v75 = (float32x4_t *)(*(void *)(a3 + 144) + *(void *)(a3 + 136) * v67);
                          uint64_t v76 = v69;
                          do
                          {
                            float32x4_t v77 = *v75++;
                            float32x4_t *v76 = vmulq_f32(*v76, vmlaq_f32(v73, v72, vdivq_f32(v71, vmlaq_f32(v71, v77, v77))));
                            ++v76;
                            v74 += 4;
                          }
                          while (v74 < v68);
                        }
                        ++v67;
                        uint64_t v69 = (float32x4_t *)((char *)v69 + v70);
                      }
                      while (v67 != v66);
                    }
                    uint64_t v6 = 0;
                  }
                  break;
                }
              }
              if (!v100)
              {
                uint64_t v78 = v98;
                uint64_t v98 = 0;
                if (v78)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v78 - 24));
                  free(*(void **)(v78 - 32));
                }
              }
            }
            if (!v91)
            {
              uint64_t v79 = v89;
              uint64_t v89 = 0;
              if (v79)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
                free(*(void **)(v79 - 32));
              }
            }
            if (!v6) {
              uint64_t v6 = sub_2484344B8((unsigned int *)(a3 + 80), a3, a1);
            }
          }
          break;
        }
      }
      if (!v93)
      {
        for (iuint64_t i = 104; ii != -16; ii -= 40)
          sub_2483E8DDC((uint64_t *)&v92[ii]);
      }
    }
    if (!v95)
    {
      for (juint64_t j = 104; jj != -16; jj -= 40)
        sub_2483E8DDC((uint64_t *)&v94[jj]);
    }
  }
  return v6;
}

void sub_248434F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!*(_DWORD *)(v64 - 112))
  {
    uint64_t v66 = *(void *)(v64 - 128);
    *(void *)(v64 - 128) = 0;
    if (v66)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v66 - 24));
      free(*(void **)(v66 - 32));
    }
  }
  if (!a22 && a20)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a20 - 24));
    free(*(void **)(a20 - 32));
  }
  if (!a47)
  {
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)(&a32 + i));
  }
  if (!a64)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a49 + j));
  }
  _Unwind_Resume(a1);
}

void sub_248435020(unsigned int *a1, uint64_t a2, float *a3, unsigned int *a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13)
{
  uint64_t v166 = *MEMORY[0x263EF8340];
  unint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14)
  {
    uint64_t v15 = 0;
    a7.n128_f64[0] = sqrt(a7.n128_f64[0] * 0.5) * 0.399058176 / 8.5 * *(double *)a9.i64;
    a7.n128_f32[0] = a7.n128_f64[0];
    float v16 = sqrt(a8 * 0.330000013) * 0.399058176 / 8.5 * *(double *)a9.i64;
    uint64_t v18 = *((void *)a1 + 2);
    uint64_t v17 = (float *)*((void *)a1 + 3);
    a10.i64[0] = 0x3FE199999999999ALL;
    a11.i64[0] = 0x3FF0CCCCCCCCCCCDLL;
    uint64_t v20 = *((void *)a4 + 2);
    float v19 = (_DWORD *)*((void *)a4 + 3);
    a9.f32[0] = *(double *)a9.i64;
    a12.i64[0] = COERCE_UNSIGNED_INT(0.5) | 0x3FD51EB800000000;
    while (1)
    {
      float32x4_t v21 = v17;
      float32x4_t v22 = a3;
      unint64_t v23 = v19;
      unint64_t v24 = v13;
      if (v13) {
        break;
      }
LABEL_17:
      ++v15;
      float v19 = (_DWORD *)((char *)v19 + v20);
      a3 = (float *)((char *)a3 + a2);
      uint64_t v17 = (float *)((char *)v17 + v18);
      if (v15 == v14) {
        goto LABEL_18;
      }
    }
    while (1)
    {
      float v25 = (float)((float)(fabsf(*v21) + fabsf(*v22)) * 0.5) + a9.f32[0];
      a13.f32[0] = (float)(*v21 - *v22) * (float)(a7.n128_f32[0] / v25);
      *unint64_t v23 = a13.i32[0];
      float v26 = v16 / v25;
      double v27 = fabsf(*v21);
      double v28 = v27 * 0.55;
      double v29 = v27 * 1.05;
      double v30 = *v22;
      if (*v21 >= 0.0)
      {
        if (v28 > v30)
        {
          double v33 = v26;
          double v34 = v28 - v30;
          goto LABEL_11;
        }
        if (v29 < v30)
        {
          double v31 = v26;
          double v32 = v30 - v29;
LABEL_14:
          *(double *)a13.i64 = a13.f32[0] - v32 * v31;
          goto LABEL_15;
        }
      }
      else
      {
        if (v30 > -v28)
        {
          double v31 = v26;
          double v32 = v28 + v30;
          goto LABEL_14;
        }
        if (v30 < -v29)
        {
          double v33 = v26;
          double v34 = (float)-*v22 - v29;
LABEL_11:
          *(double *)a13.i64 = v34 * v33 + a13.f32[0];
LABEL_15:
          a13.f32[0] = *(double *)a13.i64;
          *unint64_t v23 = a13.i32[0];
        }
      }
      ++v23;
      ++v22;
      ++v21;
      if (!--v24) {
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  unint64_t v145 = v14;
  uint64_t v161 = 0;
  unint64_t v163 = v13;
  long long v35 = 0uLL;
  do
  {
    if (v13)
    {
      uint64_t v36 = 0;
      uint64_t v37 = a6 + v161 * a5;
      uint64_t v39 = *((void *)a4 + 2);
      uint64_t v38 = *((void *)a4 + 3);
      int v40 = v161 - 4;
      int v41 = -4;
      unsigned int v43 = *a4;
      unsigned int v42 = a4[1];
      do
      {
        uint64_t v44 = 0;
        uint64_t v45 = v164;
        do
        {
          uint64_t v46 = (v40 + v44);
          if (v40 + (int)v44 < 0 || v42 <= v46)
          {
            char v50 = &v164[3 * v44];
            v50[1] = v35;
            v50[2] = v35;
            *char v50 = v35;
          }
          else
          {
            uint64_t v47 = 0;
            uint64_t v48 = v38 + v39 * v46;
            do
            {
              unsigned int v49 = v41 + v47;
              a7.n128_u64[0] = 0;
              if (((v41 + v47) & 0x80000000) == 0 && v43 > v49) {
                a7.n128_u32[0] = *(_DWORD *)(v48 + 4 * v49);
              }
              *((_DWORD *)v45 + v47++) = a7.n128_u32[0];
            }
            while (v47 != 9);
            HIDWORD(v164[3 * v44 + 2]) = 0;
            *(void *)((char *)&v164[3 * v44 + 2] + 4) = 0;
          }
          ++v44;
          v45 += 3;
        }
        while (v44 != 9);
        a7.n128_u64[0] = (unint64_t)sub_248435A34(v165, 12, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v37 + 4 * v36);
        long long v35 = 0uLL;
        *(_DWORD *)(v37 + 4 * v36++) = a7.n128_u32[0];
        ++v41;
        LODWORD(v13) = v163;
      }
      while (v36 != v163);
    }
    ++v161;
  }
  while (v161 != 4);
  unint64_t v51 = v145;
  unint64_t v52 = *((void *)a4 + 2);
  unint64_t v53 = v52 >> 2;
  if (v145 - 4 < 5)
  {
    unint64_t v127 = 4;
  }
  else
  {
    uint64_t v54 = *((void *)a4 + 3);
    uint64_t v55 = a5;
    uint64_t v57 = *a4;
    uint64_t v56 = a4[1];
    uint64_t v58 = a6 + 4 * a5 + 16;
    uint64_t v59 = 4 * v52 - 16 * v53 + v54 + 12;
    uint64_t v60 = 4 * v52 + 28;
    uint64_t v61 = v54 + v60 - 12 * v53;
    uint64_t v62 = v54 + v60 - 8 * v53;
    uint64_t v63 = 4 * v52 - 4 * v53 + v54 + 16;
    uint64_t v64 = 16 * v53 + 4 * v52 + v54 + 12;
    uint64_t v65 = 4 * v52 + 4 * v53 + v54 + 16;
    uint64_t v66 = 12 * v53 + 4 * v52 + v54 + 16;
    uint64_t v67 = 8 * v53 + 4 * v52 + v54 + 28;
    uint64_t v68 = 4;
    float32x4_t v69 = 0uLL;
    uint64_t v70 = v54 + 4 * v52;
    do
    {
      uint64_t v147 = v67;
      uint64_t v148 = v66;
      uint64_t v149 = v65;
      uint64_t v150 = v64;
      uint64_t v151 = v63;
      uint64_t v152 = v62;
      uint64_t v153 = v61;
      uint64_t v154 = v59;
      uint64_t v155 = v58;
      uint64_t v71 = 0;
      uint64_t v158 = v54 + v68 * v52;
      int v72 = v68 - 4;
      int v73 = -4;
      unint64_t v159 = v68;
      uint64_t v74 = a6 + v68 * v55;
      do
      {
        uint64_t v75 = 0;
        uint64_t v76 = v164;
        do
        {
          uint64_t v77 = (v72 + v75);
          if (v72 + (int)v75 < 0 || v56 <= v77)
          {
            int64x2_t v81 = (float32x4_t *)&v164[3 * v75];
            v81[1] = v69;
            _OWORD v81[2] = v69;
            float32x4_t *v81 = v69;
          }
          else
          {
            uint64_t v78 = 0;
            uint64_t v79 = v54 + v52 * v77;
            do
            {
              unsigned int v80 = v73 + v78;
              a7.n128_u64[0] = 0;
              if (((v73 + v78) & 0x80000000) == 0 && v57 > v80) {
                a7.n128_u32[0] = *(_DWORD *)(v79 + 4 * v80);
              }
              *((_DWORD *)v76 + v78++) = a7.n128_u32[0];
            }
            while (v78 != 9);
            HIDWORD(v164[3 * v75 + 2]) = 0;
            *(void *)((char *)&v164[3 * v75 + 2] + 4) = 0;
          }
          ++v75;
          v76 += 3;
        }
        while (v75 != 9);
        a7.n128_u64[0] = (unint64_t)sub_248435A34(v165, 12, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = *(float *)(v74 + 4 * v71) + a7.n128_f32[0];
        float32x4_t v69 = 0uLL;
        *(_DWORD *)(v74 + 4 * v71++) = a7.n128_u32[0];
        ++v73;
      }
      while (v71 != 4);
      LODWORD(v13) = v163;
      if (v163 >= 0xC)
      {
        uint64_t v83 = 0;
        for (unint64_t i = 12; i <= v163; i += 4)
        {
          float32x4_t v85 = *(float32x4_t *)(v70 + v83 + 16);
          float32x4_t v86 = *(float32x4_t *)(v70 + v83 + 12);
          float32x4_t v87 = vaddq_f32(v85, *(float32x4_t *)(v70 + v83 + 20));
          float32x4_t v88 = vaddq_f32(*(float32x4_t *)(v70 + v83 + 32), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + v83), *(float32x4_t *)(v70 + v83 + 4)), vaddq_f32(*(float32x4_t *)(v70 + v83 + 8), v86)), vaddq_f32(v87, vaddq_f32(*(float32x4_t *)(v70 + v83 + 24), *(float32x4_t *)(v70 + v83 + 28)))));
          float32x4_t v89 = *(float32x4_t *)(v151 + v83);
          float32x4_t v90 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83));
          float32x4_t v91 = vaddq_f32(*(float32x4_t *)(v150 + v83 + 4), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 4), *(float32x4_t *)(v153 + v83 - 12)), vaddq_f32(*(float32x4_t *)(v152 + v83 - 12), v89)), vaddq_f32(v90, vaddq_f32(*(float32x4_t *)(v147 + v83 - 12), *(float32x4_t *)(v148 + v83)))));
          float32x4_t v92 = vmlaq_f32(vmulq_f32(v88, v88), v91, v91);
          float32x4_t v93 = *(float32x4_t *)(v151 + v83 - 4);
          float32x4_t v94 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83 + 4));
          float32x4_t v95 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 - 24), *(float32x4_t *)(v152 + v83 - 20)), vaddq_f32(v93, vaddq_f32(v94, vaddq_f32(*(float32x4_t *)(v147 + v83 - 4), *(float32x4_t *)(v148 + v83 + 12)))));
          float32x4_t v96 = vmlaq_f32(v92, v95, v95);
          a12 = *(float32x4_t *)(v151 + v83 + 4);
          float32x4_t v97 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83 - 4));
          float32x4_t v98 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83), *(float32x4_t *)(v152 + v83 - 4)), vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(*(float32x4_t *)(v147 + v83 - 20), *(float32x4_t *)(v148 + v83 - 12)))));
          float32x4_t v99 = vmlaq_f32(v96, v98, v98);
          float32x4_t v100 = *(float32x4_t *)(v152 + v83 - 8);
          float32x4_t v101 = *(float32x4_t *)(v147 + v83 - 16);
          float32x4_t v102 = vaddq_f32(*(float32x4_t *)(v150 + v83), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 8), *(float32x4_t *)(v153 + v83 - 8)), vaddq_f32(v89, v100)), vaddq_f32(v90, vaddq_f32(v101, *(float32x4_t *)(v148 + v83 - 4)))));
          float32x4_t v103 = *(float32x4_t *)(v152 + v83 - 16);
          float32x4_t v104 = *(float32x4_t *)(v147 + v83 - 8);
          float32x4_t v105 = vaddq_f32(*(float32x4_t *)(v150 + v83 + 8), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83), *(float32x4_t *)(v153 + v83 - 16)), vaddq_f32(v89, v103)), vaddq_f32(v90, vaddq_f32(v104, *(float32x4_t *)(v148 + v83 + 4)))));
          float32x4_t v106 = *(float32x4_t *)(v151 + v83 - 8);
          float32x4_t v107 = *(float32x4_t *)(v149 + v83 + 8);
          float32x4_t v108 = vaddq_f32(*(float32x4_t *)(v149 + v83 + 16), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v151 + v83 - 16), *(float32x4_t *)(v151 + v83 - 12)), vaddq_f32(v86, v106)), vaddq_f32(v87, vaddq_f32(v107, *(float32x4_t *)(v149 + v83 + 12)))));
          float32x4_t v109 = *(float32x4_t *)(v149 + v83 - 8);
          float32x4_t v110 = *(float32x4_t *)(v151 + v83 + 8);
          a9 = vaddq_f32(*(float32x4_t *)(v151 + v83 + 16), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v149 + v83 - 16), *(float32x4_t *)(v149 + v83 - 12)), vaddq_f32(v86, v109)), vaddq_f32(v87, vaddq_f32(v110, *(float32x4_t *)(v151 + v83 + 12)))));
          float32x4_t v111 = vaddq_f32(vaddq_f32(v103, *(float32x4_t *)(v153 + v83 - 20)), vaddq_f32(v93, vaddq_f32(v94, vaddq_f32(v104, *(float32x4_t *)(v148 + v83 + 8)))));
          float32x4_t v112 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v99, v102, v102), v105, v105), v108, v108), a9, a9), v111, v111);
          float32x4_t v113 = vaddq_f32(vaddq_f32(v100, *(float32x4_t *)(v153 + v83 - 4)), vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(v101, *(float32x4_t *)(v148 + v83 - 8)))));
          float32x4_t v114 = vmlaq_f32(v112, v113, v113);
          a13 = vaddq_f32(v94, vaddq_f32(v107, *(float32x4_t *)(v147 + v83)));
          float32x4_t v115 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v152 + v83 - 24), v106), vaddq_f32(v93, a13));
          float32x4_t v116 = vmlaq_f32(v114, v115, v115);
          a11 = vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(v109, *(float32x4_t *)(v147 + v83 - 24))));
          a10 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v152 + v83), v110), a11);
          float32x4_t v69 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v116, a10, a10), a9, a9), v108, v108), v105, v105), v102, v102);
          a7 = (__n128)vaddq_f32(*(float32x4_t *)(v155 + v83), v69);
          *(__n128 *)(v155 + v83) = a7;
          v83 += 16;
        }
        unint64_t v82 = i - 8;
      }
      else
      {
        unint64_t v82 = 4;
      }
      if (v82 < v163)
      {
        int v117 = v82 - 4;
        do
        {
          if (v57 - 4 <= v82 || v56 - 4 <= v159)
          {
            uint64_t v120 = 0;
            uint64_t v121 = v164;
            float32x4_t v69 = 0uLL;
            do
            {
              uint64_t v122 = (v72 + v120);
              if (v72 + (int)v120 < 0 || v56 <= v122)
              {
                uint64_t v126 = &v164[3 * v120];
                v126[1] = 0uLL;
                v126[2] = 0uLL;
                *uint64_t v126 = 0uLL;
              }
              else
              {
                uint64_t v123 = 0;
                uint64_t v124 = v54 + v52 * v122;
                do
                {
                  unsigned int v125 = v117 + v123;
                  a7.n128_u64[0] = 0;
                  if (((v117 + v123) & 0x80000000) == 0 && v57 > v125) {
                    a7.n128_u32[0] = *(_DWORD *)(v124 + 4 * v125);
                  }
                  *((_DWORD *)v121 + v123++) = a7.n128_u32[0];
                }
                while (v123 != 9);
                HIDWORD(v164[3 * v120 + 2]) = 0;
                *(void *)((char *)&v164[3 * v120 + 2] + 4) = 0;
              }
              ++v120;
              v121 += 3;
            }
            while (v120 != 9);
            unint64_t v118 = v165;
            uint64_t v119 = 12;
          }
          else
          {
            unint64_t v118 = (float *)(v158 + 4 * v82);
            uint64_t v119 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_248435A34(v118, v119, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          v69.i32[0] = *(_DWORD *)(v74 + 4 * v82);
          a7.n128_f32[0] = a7.n128_f32[0] + v69.f32[0];
          *(_DWORD *)(v74 + 4 * v82++) = a7.n128_u32[0];
          ++v117;
          LODWORD(v13) = v163;
        }
        while (v82 != v163);
      }
      uint64_t v68 = v159 + 1;
      uint64_t v55 = a5;
      uint64_t v58 = v155 + a5;
      v70 += v52;
      uint64_t v59 = v154 + v52;
      uint64_t v61 = v153 + v52;
      uint64_t v62 = v152 + v52;
      uint64_t v63 = v151 + v52;
      uint64_t v64 = v150 + v52;
      uint64_t v65 = v149 + v52;
      uint64_t v66 = v148 + v52;
      uint64_t v67 = v147 + v52;
      unint64_t v127 = v145 - 4;
      float32x4_t v69 = 0uLL;
    }
    while (v159 + 1 != v145 - 4);
    unint64_t v51 = v145;
  }
  if (v127 < v51)
  {
    long long v128 = 0uLL;
    do
    {
      unint64_t v162 = v127;
      if (v13)
      {
        unint64_t v129 = 0;
        uint64_t v130 = a6 + v127 * a5;
        uint64_t v131 = *((void *)a4 + 3);
        uint64_t v132 = *a4;
        uint64_t v133 = a4[1];
        int v134 = v127 - 4;
        uint64_t v160 = v131 + v127 * v52;
        int v135 = -4;
        do
        {
          if (v129 < 4 || v132 - 4 <= v129 || v133 - 4 <= v162)
          {
            uint64_t v138 = 0;
            BOOL v139 = v164;
            do
            {
              uint64_t v140 = (v134 + v138);
              if (v134 + (int)v138 < 0 || v133 <= v140)
              {
                float32x2_t v144 = &v164[3 * v138];
                v144[1] = v128;
                v144[2] = v128;
                _OWORD *v144 = v128;
              }
              else
              {
                uint64_t v141 = 0;
                uint64_t v142 = v131 + v52 * v140;
                do
                {
                  unsigned int v143 = v135 + v141;
                  a7.n128_u64[0] = 0;
                  if (((v135 + v141) & 0x80000000) == 0 && v132 > v143) {
                    a7.n128_u32[0] = *(_DWORD *)(v142 + 4 * v143);
                  }
                  *((_DWORD *)v139 + v141++) = a7.n128_u32[0];
                }
                while (v141 != 9);
                HIDWORD(v164[3 * v138 + 2]) = 0;
                *(void *)((char *)&v164[3 * v138 + 2] + 4) = 0;
              }
              ++v138;
              v139 += 3;
            }
            while (v138 != 9);
            unint64_t v136 = v165;
            uint64_t v137 = 12;
          }
          else
          {
            unint64_t v136 = (float *)(v160 + 4 * v129);
            uint64_t v137 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_248435A34(v136, v137, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v130 + 4 * v129);
          *(_DWORD *)(v130 + 4 * v129++) = a7.n128_u32[0];
          ++v135;
          LODWORD(v13) = v163;
          long long v128 = 0uLL;
        }
        while (v129 != v163);
      }
      unint64_t v127 = v162 + 1;
    }
    while (v162 + 1 != v145);
  }
}

int32x2_t sub_248435A34(float *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  *(float *)&a3 = *(a1 - 1);
  float v13 = *a1;
  unint64_t v14 = &a1[-3 * a2];
  uint64_t v15 = &a1[-a2];
  float v16 = &a1[a2];
  uint64_t v17 = a1 - 4;
  uint64_t v18 = a1 - 3;
  float v19 = a1 - 2;
  uint64_t v20 = a1 + 2;
  float32x4_t v21 = &a1[3 * a2];
  float32x4_t v22 = a1 + 3;
  unint64_t v23 = a1 + 4;
  *(float *)&a5 = *a1 + a1[1];
  *(float *)&a4 = a1[4]
                + (float)((float)((float)(*(a1 - 4) + *(a1 - 3)) + (float)(*(a1 - 2) + *(float *)&a3))
                        + (float)(*(float *)&a5 + (float)(a1[2] + a1[3])));
  *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
  unint64_t v24 = &v14[-a2];
  float v25 = &v15[-a2];
  float v26 = &v16[a2];
  double v27 = &v21[a2];
  float v28 = v15[1];
  float v29 = v25[1];
  v10.f32[0] = v13 + *v16;
  float v30 = v26[1];
  *(float *)&a9 = *v27
                + (float)((float)((float)(*v24 + *v14) + (float)(*v25 + *v15))
                        + (float)(v10.f32[0] + (float)(*v26 + *v21)));
  float32x2_t v31 = vmla_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a9, *(float32x2_t *)&a9);
  float v32 = *(v15 - 1);
  float v33 = v13 + v16[1];
  float v34 = *(v14 - 2);
  v12.f32[0] = (float)(*(v14 - 3) + *(v25 - 2)) + (float)(v32 + (float)(v33 + (float)(v26[2] + v21[3])));
  float32x2_t v35 = vmla_f32(v31, v12, v12);
  float v36 = v13 + *(v16 - 1);
  float v37 = v14[2];
  v12.f32[0] = (float)(v14[3] + v25[2]) + (float)(v28 + (float)(v36 + (float)(*(v26 - 2) + *(v21 - 3))));
  float32x2_t v38 = vmla_f32(v35, v12, v12);
  float v39 = *(v26 - 1);
  v11.f32[0] = *(v27 - 1)
             + (float)((float)((float)(v24[1] + v14[1]) + (float)(*v15 + v29))
                     + (float)(v10.f32[0] + (float)(v39 + *(v21 - 1))));
  float v40 = *(v25 - 1);
  v9.f32[0] = v27[1]
            + (float)((float)((float)(*(v24 - 1) + *(v14 - 1)) + (float)(*v15 + v40))
                    + (float)(v10.f32[0] + (float)(v30 + v21[1])));
  int v41 = &v19[-a2];
  float v42 = v20[a2];
  v10.f32[0] = v23[a2]
             + (float)((float)((float)(v17[-a2] + v18[-a2]) + (float)(*(float *)&a3 + *v41))
                     + (float)(*(float *)&a5 + (float)(v42 + v22[a2])));
  float v43 = v19[a2];
  float v44 = v20[-a2];
  *(float *)&a3 = v23[-a2]
                + (float)((float)((float)(v17[a2] + v18[a2]) + (float)(*(float *)&a3 + v43))
                        + (float)(*(float *)&a5 + (float)(v44 + v22[-a2])));
  *(float *)&a5 = (float)(v40 + v34) + (float)(v32 + (float)(v33 + (float)(v30 + v21[2])));
  float32x2_t v45 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(v38, v11, v11), v9, v9), v10, v10), *(float32x2_t *)&a3, *(float32x2_t *)&a3), *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(v29 + v37) + (float)(v28 + (float)(v36 + (float)(v39 + *(v21 - 2))));
  float32x2_t v46 = vmla_f32(v45, *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(*(v25 - 3) + *v41) + (float)(v32 + (float)(v33 + (float)(v42 + v26[3])));
  float32x2_t v47 = vmla_f32(v46, *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(v25[3] + v44) + (float)(v28 + (float)(v36 + (float)(v43 + *(v26 - 3))));
  return vdup_lane_s32((int32x2_t)vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(v47, *(float32x2_t *)&a5, *(float32x2_t *)&a5), *(float32x2_t *)&a3, *(float32x2_t *)&a3), v10, v10), v9, v9), v11, v11), 0);
}

void sub_248435CC0(unsigned int *a1, uint64_t a2, float *a3, unsigned int *a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  unint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14)
  {
    uint64_t v15 = 0;
    a7.n128_f64[0] = sqrt(a7.n128_f64[0] * 0.5) * 0.611612574 / 8.5 * *(double *)a9.i64;
    a7.n128_f32[0] = a7.n128_f64[0];
    float v16 = sqrt(a8 * 0.330000013) * 0.611612574 / 8.5 * *(double *)a9.i64;
    uint64_t v18 = *((void *)a1 + 2);
    uint64_t v17 = (float *)*((void *)a1 + 3);
    a10.i64[0] = 0x3FE199999999999ALL;
    a11.i64[0] = 0x3FF0CCCCCCCCCCCDLL;
    uint64_t v20 = *((void *)a4 + 2);
    float v19 = (_DWORD *)*((void *)a4 + 3);
    a9.f32[0] = *(double *)a9.i64;
    a12.i64[0] = COERCE_UNSIGNED_INT(0.5) | 0x3FD51EB800000000;
    while (1)
    {
      float32x4_t v21 = v17;
      float32x4_t v22 = a3;
      unint64_t v23 = v19;
      unint64_t v24 = v13;
      if (v13) {
        break;
      }
LABEL_17:
      ++v15;
      float v19 = (_DWORD *)((char *)v19 + v20);
      a3 = (float *)((char *)a3 + a2);
      uint64_t v17 = (float *)((char *)v17 + v18);
      if (v15 == v14) {
        goto LABEL_18;
      }
    }
    while (1)
    {
      float v25 = (float)((float)(fabsf(*v21) + fabsf(*v22)) * 0.5) + a9.f32[0];
      a13.f32[0] = (float)(*v21 - *v22) * (float)(a7.n128_f32[0] / v25);
      *unint64_t v23 = a13.i32[0];
      float v26 = v16 / v25;
      double v27 = fabsf(*v21);
      double v28 = v27 * 0.55;
      double v29 = v27 * 1.05;
      double v30 = *v22;
      if (*v21 >= 0.0)
      {
        if (v28 > v30)
        {
          double v33 = v26;
          double v34 = v28 - v30;
          goto LABEL_11;
        }
        if (v29 < v30)
        {
          double v31 = v26;
          double v32 = v30 - v29;
LABEL_14:
          *(double *)a13.i64 = a13.f32[0] - v32 * v31;
          goto LABEL_15;
        }
      }
      else
      {
        if (v30 > -v28)
        {
          double v31 = v26;
          double v32 = v28 + v30;
          goto LABEL_14;
        }
        if (v30 < -v29)
        {
          double v33 = v26;
          double v34 = (float)-*v22 - v29;
LABEL_11:
          *(double *)a13.i64 = v34 * v33 + a13.f32[0];
LABEL_15:
          a13.f32[0] = *(double *)a13.i64;
          *unint64_t v23 = a13.i32[0];
        }
      }
      ++v23;
      ++v22;
      ++v21;
      if (!--v24) {
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  unint64_t v150 = v14;
  uint64_t v166 = 0;
  unint64_t v168 = v13;
  long long v35 = 0uLL;
  do
  {
    if (v13)
    {
      uint64_t v36 = 0;
      uint64_t v37 = a6 + v166 * a5;
      uint64_t v39 = *((void *)a4 + 2);
      uint64_t v38 = *((void *)a4 + 3);
      int v40 = v166 - 4;
      int v41 = -4;
      unsigned int v43 = *a4;
      unsigned int v42 = a4[1];
      do
      {
        uint64_t v44 = 0;
        float32x2_t v45 = v169;
        do
        {
          uint64_t v46 = (v40 + v44);
          if (v40 + (int)v44 < 0 || v42 <= v46)
          {
            char v50 = &v169[3 * v44];
            v50[1] = v35;
            v50[2] = v35;
            *char v50 = v35;
          }
          else
          {
            uint64_t v47 = 0;
            uint64_t v48 = v38 + v39 * v46;
            do
            {
              unsigned int v49 = v41 + v47;
              a7.n128_u64[0] = 0;
              if (((v41 + v47) & 0x80000000) == 0 && v43 > v49) {
                a7.n128_u32[0] = *(_DWORD *)(v48 + 4 * v49);
              }
              *((_DWORD *)v45 + v47++) = a7.n128_u32[0];
            }
            while (v47 != 9);
            HIDWORD(v169[3 * v44 + 2]) = 0;
            *(void *)((char *)&v169[3 * v44 + 2] + 4) = 0;
          }
          ++v44;
          v45 += 3;
        }
        while (v44 != 9);
        a7.n128_u64[0] = (unint64_t)sub_248436670(v170, 12, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v37 + 4 * v36);
        long long v35 = 0uLL;
        *(_DWORD *)(v37 + 4 * v36++) = a7.n128_u32[0];
        ++v41;
        LODWORD(v13) = v168;
      }
      while (v36 != v168);
    }
    ++v166;
  }
  while (v166 != 4);
  unint64_t v51 = v150;
  unint64_t v52 = *((void *)a4 + 2);
  unint64_t v53 = v52 >> 2;
  if (v150 - 4 < 5)
  {
    unint64_t v132 = 4;
  }
  else
  {
    uint64_t v54 = *((void *)a4 + 3);
    uint64_t v55 = a5;
    uint64_t v57 = *a4;
    uint64_t v56 = a4[1];
    uint64_t v58 = a6 + 4 * a5 + 16;
    uint64_t v59 = 12 * v53 + 4 * v52 + v54 + 28;
    uint64_t v60 = 4 * v52 + 4 * v53 + v54 + 32;
    uint64_t v61 = 4 * v52 - 4 * v53 + v54 + 32;
    uint64_t v62 = 4 * v52 + 24;
    uint64_t v63 = v54 + v62 - 16 * v53;
    uint64_t v64 = 16 * v53 + 4 * v52 + v54 + 12;
    uint64_t v65 = v54 + v62 - 12 * v53;
    uint64_t v66 = v54 + 4 * v52 - 8 * v53;
    uint64_t v67 = 8 * v53 + 4 * v52 + v54 + 16;
    uint64_t v68 = 4;
    float32x4_t v69 = 0uLL;
    uint64_t v70 = v54 + 4 * v52;
    do
    {
      uint64_t v152 = v67;
      uint64_t v153 = v66;
      uint64_t v154 = v65;
      uint64_t v155 = v64;
      uint64_t v156 = v63;
      uint64_t v157 = v61;
      uint64_t v158 = v60;
      uint64_t v159 = v59;
      uint64_t v160 = v58;
      uint64_t v71 = 0;
      uint64_t v163 = v54 + v68 * v52;
      int v72 = v68 - 4;
      int v73 = -4;
      unint64_t v164 = v68;
      uint64_t v74 = a6 + v68 * v55;
      do
      {
        uint64_t v75 = 0;
        uint64_t v76 = v169;
        do
        {
          uint64_t v77 = (v72 + v75);
          if (v72 + (int)v75 < 0 || v56 <= v77)
          {
            int64x2_t v81 = (float32x4_t *)&v169[3 * v75];
            v81[1] = v69;
            _OWORD v81[2] = v69;
            float32x4_t *v81 = v69;
          }
          else
          {
            uint64_t v78 = 0;
            uint64_t v79 = v54 + v52 * v77;
            do
            {
              unsigned int v80 = v73 + v78;
              a7.n128_u64[0] = 0;
              if (((v73 + v78) & 0x80000000) == 0 && v57 > v80) {
                a7.n128_u32[0] = *(_DWORD *)(v79 + 4 * v80);
              }
              *((_DWORD *)v76 + v78++) = a7.n128_u32[0];
            }
            while (v78 != 9);
            HIDWORD(v169[3 * v75 + 2]) = 0;
            *(void *)((char *)&v169[3 * v75 + 2] + 4) = 0;
          }
          ++v75;
          v76 += 3;
        }
        while (v75 != 9);
        a7.n128_u64[0] = (unint64_t)sub_248436670(v170, 12, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = *(float *)(v74 + 4 * v71) + a7.n128_f32[0];
        float32x4_t v69 = 0uLL;
        *(_DWORD *)(v74 + 4 * v71++) = a7.n128_u32[0];
        ++v73;
      }
      while (v71 != 4);
      LODWORD(v13) = v168;
      if (v168 >= 0xC)
      {
        uint64_t v83 = 0;
        for (unint64_t i = 12; i <= v168; i += 4)
        {
          float32x4_t v85 = *(float32x4_t *)(v70 + v83 + 16);
          float32x4_t v86 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + v83), *(float32x4_t *)(v70 + v83 + 8)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v70 + v83 + 24), *(float32x4_t *)(v70 + v83 + 32))));
          float32x4_t v87 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 8), *(float32x4_t *)(v153 + v83 + 16)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83), *(float32x4_t *)(v155 + v83 + 4))));
          float32x4_t v88 = vmlaq_f32(vmulq_f32(v86, v86), v87, v87);
          float32x4_t v89 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 - 20), *(float32x4_t *)(v153 + v83 + 8)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83 + 8), *(float32x4_t *)(v159 + v83))));
          float32x4_t v90 = vmlaq_f32(v88, v89, v89);
          float32x4_t v91 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 4), *(float32x4_t *)(v153 + v83 + 24)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83 - 8), *(float32x4_t *)(v159 + v83 - 24))));
          float32x4_t v92 = vmlaq_f32(v90, v91, v91);
          float32x4_t v93 = *(float32x4_t *)(v153 + v83 + 20);
          float32x4_t v94 = *(float32x4_t *)(v152 + v83 - 4);
          float32x4_t v95 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 4), v93), vaddq_f32(v85, vaddq_f32(v94, *(float32x4_t *)(v155 + v83))));
          float32x4_t v96 = vmlaq_f32(v92, v95, v95);
          float32x4_t v97 = *(float32x4_t *)(v153 + v83 + 12);
          float32x4_t v98 = *(float32x4_t *)(v152 + v83 + 4);
          float32x4_t v99 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 12), v97), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v155 + v83 + 8))));
          float32x4_t v100 = vmlaq_f32(v96, v99, v99);
          float32x4_t v101 = *(float32x4_t *)(v157 + v83 - 24);
          float32x4_t v102 = *(float32x4_t *)(v158 + v83 - 8);
          float32x4_t v103 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v157 + v83 - 32), v101), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v158 + v83))));
          float32x4_t v104 = vmlaq_f32(v100, v103, v103);
          float32x4_t v105 = *(float32x4_t *)(v158 + v83 - 24);
          float32x4_t v106 = *(float32x4_t *)(v157 + v83 - 8);
          float32x4_t v107 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v158 + v83 - 32), v105), vaddq_f32(v85, vaddq_f32(v106, *(float32x4_t *)(v157 + v83))));
          float32x4_t v108 = vmlaq_f32(v104, v107, v107);
          float32x4_t v109 = vaddq_f32(vaddq_f32(v97, *(float32x4_t *)(v154 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v159 + v83 - 4))));
          float32x4_t v110 = vmlaq_f32(v108, v109, v109);
          float32x4_t v111 = vaddq_f32(vaddq_f32(v93, *(float32x4_t *)(v154 + v83)), vaddq_f32(v85, vaddq_f32(v94, *(float32x4_t *)(v159 + v83 - 20))));
          float32x4_t v112 = vmlaq_f32(v110, v111, v111);
          float32x4_t v113 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 + 4), v101), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v152 + v83 + 12))));
          float32x4_t v114 = vmlaq_f32(v112, v113, v113);
          float32x4_t v115 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 + 28), v106), vaddq_f32(v85, vaddq_f32(v105, *(float32x4_t *)(v152 + v83 - 12))));
          float32x4_t v116 = vmlaq_f32(v114, v115, v115);
          float32x4_t v117 = vaddq_f32(vaddq_f32(v105, *(float32x4_t *)(v152 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v106, *(float32x4_t *)(v153 + v83 + 32))));
          float32x4_t v118 = vmlaq_f32(v116, v117, v117);
          float32x4_t v119 = vaddq_f32(vaddq_f32(v101, *(float32x4_t *)(v153 + v83)), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v152 + v83 + 16))));
          float32x4_t v120 = vaddq_f32(vaddq_f32(v97, *(float32x4_t *)(v156 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v155 + v83 + 12))));
          float32x4_t v121 = vmlaq_f32(vmlaq_f32(v118, v119, v119), v120, v120);
          a12 = *(float32x4_t *)(v156 + v83);
          a13 = *(float32x4_t *)(v155 + v83 - 4);
          a11 = vaddq_f32(v94, a13);
          a10 = vaddq_f32(v93, a12);
          float32x4_t v69 = vaddq_f32(a10, vaddq_f32(v85, a11));
          a9 = vmlaq_f32(v121, v69, v69);
          a7 = (__n128)vaddq_f32(*(float32x4_t *)(v160 + v83), a9);
          *(__n128 *)(v160 + v83) = a7;
          v83 += 16;
        }
        unint64_t v82 = i - 8;
      }
      else
      {
        unint64_t v82 = 4;
      }
      if (v82 < v168)
      {
        int v122 = v82 - 4;
        do
        {
          if (v57 - 4 <= v82 || v56 - 4 <= v164)
          {
            uint64_t v125 = 0;
            uint64_t v126 = v169;
            float32x4_t v69 = 0uLL;
            do
            {
              uint64_t v127 = (v72 + v125);
              if (v72 + (int)v125 < 0 || v56 <= v127)
              {
                uint64_t v131 = &v169[3 * v125];
                v131[1] = 0uLL;
                v131[2] = 0uLL;
                *uint64_t v131 = 0uLL;
              }
              else
              {
                uint64_t v128 = 0;
                uint64_t v129 = v54 + v52 * v127;
                do
                {
                  unsigned int v130 = v122 + v128;
                  a7.n128_u64[0] = 0;
                  if (((v122 + v128) & 0x80000000) == 0 && v57 > v130) {
                    a7.n128_u32[0] = *(_DWORD *)(v129 + 4 * v130);
                  }
                  *((_DWORD *)v126 + v128++) = a7.n128_u32[0];
                }
                while (v128 != 9);
                HIDWORD(v169[3 * v125 + 2]) = 0;
                *(void *)((char *)&v169[3 * v125 + 2] + 4) = 0;
              }
              ++v125;
              v126 += 3;
            }
            while (v125 != 9);
            uint64_t v123 = v170;
            uint64_t v124 = 12;
          }
          else
          {
            uint64_t v123 = (float *)(v163 + 4 * v82);
            uint64_t v124 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_248436670(v123, v124, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          v69.i32[0] = *(_DWORD *)(v74 + 4 * v82);
          a7.n128_f32[0] = a7.n128_f32[0] + v69.f32[0];
          *(_DWORD *)(v74 + 4 * v82++) = a7.n128_u32[0];
          ++v122;
          LODWORD(v13) = v168;
        }
        while (v82 != v168);
      }
      uint64_t v68 = v164 + 1;
      uint64_t v55 = a5;
      uint64_t v58 = v160 + a5;
      v70 += v52;
      uint64_t v59 = v159 + v52;
      uint64_t v60 = v158 + v52;
      uint64_t v61 = v157 + v52;
      uint64_t v63 = v156 + v52;
      uint64_t v64 = v155 + v52;
      uint64_t v65 = v154 + v52;
      uint64_t v66 = v153 + v52;
      uint64_t v67 = v152 + v52;
      unint64_t v132 = v150 - 4;
      float32x4_t v69 = 0uLL;
    }
    while (v164 + 1 != v150 - 4);
    unint64_t v51 = v150;
  }
  if (v132 < v51)
  {
    long long v133 = 0uLL;
    do
    {
      unint64_t v167 = v132;
      if (v13)
      {
        unint64_t v134 = 0;
        uint64_t v135 = a6 + v132 * a5;
        uint64_t v136 = *((void *)a4 + 3);
        uint64_t v137 = *a4;
        uint64_t v138 = a4[1];
        int v139 = v132 - 4;
        uint64_t v165 = v136 + v132 * v52;
        int v140 = -4;
        do
        {
          if (v134 < 4 || v137 - 4 <= v134 || v138 - 4 <= v167)
          {
            uint64_t v143 = 0;
            float32x2_t v144 = v169;
            do
            {
              uint64_t v145 = (v139 + v143);
              if (v139 + (int)v143 < 0 || v138 <= v145)
              {
                uint64_t v149 = &v169[3 * v143];
                v149[1] = v133;
                v149[2] = v133;
                *uint64_t v149 = v133;
              }
              else
              {
                uint64_t v146 = 0;
                uint64_t v147 = v136 + v52 * v145;
                do
                {
                  unsigned int v148 = v140 + v146;
                  a7.n128_u64[0] = 0;
                  if (((v140 + v146) & 0x80000000) == 0 && v137 > v148) {
                    a7.n128_u32[0] = *(_DWORD *)(v147 + 4 * v148);
                  }
                  *((_DWORD *)v144 + v146++) = a7.n128_u32[0];
                }
                while (v146 != 9);
                HIDWORD(v169[3 * v143 + 2]) = 0;
                *(void *)((char *)&v169[3 * v143 + 2] + 4) = 0;
              }
              ++v143;
              v144 += 3;
            }
            while (v143 != 9);
            uint64_t v141 = v170;
            uint64_t v142 = 12;
          }
          else
          {
            uint64_t v141 = (float *)(v165 + 4 * v134);
            uint64_t v142 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_248436670(v141, v142, a7.n128_f64[0], 0.0, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v135 + 4 * v134);
          *(_DWORD *)(v135 + 4 * v134++) = a7.n128_u32[0];
          ++v140;
          LODWORD(v13) = v168;
          long long v133 = 0uLL;
        }
        while (v134 != v168);
      }
      unint64_t v132 = v167 + 1;
    }
    while (v167 + 1 != v150);
  }
}

int32x2_t sub_248436670(float *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x2_t v11 = &a1[-3 * a2];
  float32x2_t v12 = &a1[3 * a2];
  *(float *)&a4 = (float)(*(a1 - 4) + *(a1 - 2)) + (float)(*a1 + (float)(a1[2] + a1[4]));
  *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
  unint64_t v13 = &v11[-a2];
  unint64_t v14 = &a1[-a2 - a2];
  uint64_t v15 = (uint64_t)&a1[a2 + a2];
  float v16 = &v12[a2];
  LODWORD(a6) = *(_DWORD *)(v15 + 4);
  float v17 = v14[1];
  *(float *)&a9 = (float)(*v13 + *v14) + (float)(*a1 + (float)(*(float *)v15 + *v16));
  float v18 = *(v14 - 1);
  float v19 = *(v11 - 2);
  v9.f32[0] = (float)(*(v11 - 3) + *(v14 - 2)) + (float)(*a1 + (float)(*(float *)(v15 + 8) + v12[3]));
  float32x2_t v20 = vmla_f32(vmla_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a9, *(float32x2_t *)&a9), v9, v9);
  float v21 = *(float *)(v15 - 4);
  float v22 = v11[2];
  v10.f32[0] = (float)(v11[3] + v14[2]) + (float)(*a1 + (float)(*(float *)(v15 - 8) + *(v12 - 3)));
  *(float *)&a8 = (float)(v13[1] + v17) + (float)(*a1 + (float)(v21 + *(v16 - 1)));
  *(float *)&a7 = (float)(*(v13 - 1) + v18) + (float)(*a1 + (float)(*(float *)&a6 + v16[1]));
  float32x2_t v23 = vmla_f32(vmla_f32(vmla_f32(v20, v10, v10), *(float32x2_t *)&a8, *(float32x2_t *)&a8), *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  unint64_t v24 = &a1[-a2 - 2];
  float v25 = a1[a2 + 2];
  *(float *)&a7 = (float)(a1[-a2 - 4] + *v24) + (float)(*a1 + (float)(v25 + a1[a2 + 4]));
  float32x2_t v26 = vmla_f32(v23, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  float v27 = a1[a2 - 2];
  float v28 = a1[-a2 + 2];
  *(float *)&a7 = (float)(a1[a2 - 4] + v27) + (float)(*a1 + (float)(v28 + a1[-a2 + 4]));
  float32x2_t v29 = vmla_f32(v26, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v18 + v19) + (float)(*a1 + (float)(*(float *)&a6 + v12[2]));
  float32x2_t v30 = vmla_f32(v29, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v17 + v22) + (float)(*a1 + (float)(v21 + *(v12 - 2)));
  float32x2_t v31 = vmla_f32(v30, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(*(v14 - 3) + *v24) + (float)(*a1 + (float)(v25 + *(float *)(v15 + 12)));
  float32x2_t v32 = vmla_f32(v31, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v14[3] + v28) + (float)(*a1 + (float)(v27 + *(float *)(v15 - 12)));
  float32x2_t v33 = vmla_f32(v32, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v27 + *(float *)(v15 - 16)) + (float)(*a1 + (float)(v28 + v14[4]));
  float32x2_t v34 = vmla_f32(v33, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(*v24 + *(v14 - 4)) + (float)(*a1 + (float)(v25 + *(float *)(v15 + 16)));
  *(float *)&a6 = (float)(v18 + *(v13 - 2)) + (float)(*a1 + (float)(*(float *)&a6 + v16[2]));
  *(float *)&a3 = (float)(v17 + v13[2]) + (float)(*a1 + (float)(v21 + *(v16 - 2)));
  return vdup_lane_s32((int32x2_t)vmla_f32(vmla_f32(vmla_f32(v34, *(float32x2_t *)&a7, *(float32x2_t *)&a7), *(float32x2_t *)&a6, *(float32x2_t *)&a6), *(float32x2_t *)&a3, *(float32x2_t *)&a3), 0);
}

unsigned int *sub_248436880(unsigned int *result, void *a2, uint64_t a3, float *a4)
{
  uint64_t v4 = result[1];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v7 = *((void *)result + 7);
    uint64_t v6 = (float *)*((void *)result + 8);
    uint64_t v9 = a2[7];
    uint64_t v8 = (float *)a2[8];
    uint64_t v11 = *((void *)result + 2);
    float32x2_t v10 = (float *)*((void *)result + 3);
    uint64_t v13 = a2[2];
    float32x2_t v12 = (float *)a2[3];
    BOOL result = (unsigned int *)*result;
    do
    {
      unint64_t v14 = v12;
      uint64_t v15 = v10;
      float v16 = v8;
      float v17 = v6;
      float v18 = a4;
      float v19 = result;
      if (result)
      {
        do
        {
          float v20 = *v14++;
          float v21 = v20;
          float v22 = *v15++;
          float v23 = (float)(v21 + v22) * 2.5;
          float v24 = *v16++;
          float v25 = v24;
          float v26 = *v17++;
          *v18++ = sqrtf((float)((float)((float)(v26 * 0.4) + (float)(v25 * 0.4))* (float)((float)(v26 * 0.4) + (float)(v25 * 0.4)))+ (float)(v23 * v23));
          float v19 = (unsigned int *)((char *)v19 - 1);
        }
        while (v19);
      }
      ++v5;
      a4 = (float *)((char *)a4 + a3);
      uint64_t v6 = (float *)((char *)v6 + v7);
      uint64_t v8 = (float *)((char *)v8 + v9);
      float32x2_t v10 = (float *)((char *)v10 + v11);
      float32x2_t v12 = (float *)((char *)v12 + v13);
    }
    while (v5 != v4);
  }
  return result;
}

unsigned int *sub_24843692C(unsigned int *result, uint64_t a2, float *a3)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    uint64_t v7 = *((void *)result + 2);
    uint64_t v6 = (float *)*((void *)result + 3);
    do
    {
      uint64_t v8 = v6;
      uint64_t v9 = a3;
      uint64_t v10 = v5;
      if (v5)
      {
        do
        {
          float v11 = *v8++;
          *v9++ = sqrtf((float)(fabsf(v11) * 6.1942) + 78.113) + -8.8381;
          --v10;
        }
        while (v10);
      }
      ++v4;
      a3 = (float *)((char *)a3 + a2);
      uint64_t v6 = (float *)((char *)v6 + v7);
    }
    while (v4 != v3);
  }
  return result;
}

void (__cdecl *sub_2484369A0(void (__cdecl *result)(_Unwind_Exception *exception_object), uint64_t a2, uint64_t a3))(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *((unsigned int *)result + 1);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = *(unsigned int *)result;
    uint64_t v6 = *((void *)result + 2);
    uint64_t v7 = *((void *)result + 3);
    unint64_t v8 = v3 - 3;
    uint64_t v9 = v7 - 12;
    uint64_t v10 = v7 - 12 + 3 * v6;
    uint64_t v11 = v7 - 3 * v6 - 12;
    BOOL result = _Unwind_Resume;
    do
    {
      if (v5)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          float v14 = *(float *)(v9 + v12 + 12);
          float v15 = v14 + v14;
          float v33 = v14 + v14;
          float v34 = v14;
          float v32 = v14 + v14;
          if (v13 >= 3)
          {
            float v16 = *(float *)(v9 + v12);
            if (v15 > v16)
            {
              if (v14 <= v16)
              {
                float v17 = &v33;
              }
              else
              {
                float v33 = v14;
                float v17 = &v34;
              }
              float v32 = v14 + v14;
              *float v17 = v16;
            }
            if (v4 >= 3)
            {
              float v18 = *(float *)(v11 + v12);
              if (v15 > v18)
              {
                if (v34 <= v18)
                {
                  if (v33 <= v18)
                  {
                    float v19 = &v32;
                  }
                  else
                  {
                    float v32 = v33;
                    float v19 = &v33;
                  }
                }
                else
                {
                  float v32 = v33;
                  float v33 = v34;
                  float v19 = &v34;
                }
                *float v19 = v18;
                float v15 = v32;
              }
            }
            if (v4 < v8)
            {
              float v20 = *(float *)(v10 + v12);
              if (v15 > v20)
              {
                if (v34 <= v20)
                {
                  if (v33 <= v20)
                  {
                    float v21 = &v32;
                  }
                  else
                  {
                    float v32 = v33;
                    float v21 = &v33;
                  }
                }
                else
                {
                  float v32 = v33;
                  float v33 = v34;
                  float v21 = &v34;
                }
                *float v21 = v20;
                float v15 = v32;
              }
            }
          }
          if (v13 < v5 - 3)
          {
            float v22 = *(float *)(v9 + v12 + 24);
            if (v15 > v22)
            {
              if (v34 <= v22)
              {
                if (v33 <= v22)
                {
                  float v23 = &v32;
                }
                else
                {
                  float v32 = v33;
                  float v23 = &v33;
                }
              }
              else
              {
                float v32 = v33;
                float v33 = v34;
                float v23 = &v34;
              }
              *float v23 = v22;
              float v15 = v32;
            }
            if (v4 >= 3)
            {
              float v24 = *(float *)(v11 + v12 + 24);
              if (v15 > v24)
              {
                if (v34 <= v24)
                {
                  if (v33 <= v24)
                  {
                    float v25 = &v32;
                  }
                  else
                  {
                    float v32 = v33;
                    float v25 = &v33;
                  }
                }
                else
                {
                  float v32 = v33;
                  float v33 = v34;
                  float v25 = &v34;
                }
                *float v25 = v24;
                float v15 = v32;
              }
            }
            if (v4 < v8)
            {
              float v26 = *(float *)(v10 + v12 + 24);
              if (v15 > v26)
              {
                if (v34 <= v26)
                {
                  if (v33 <= v26)
                  {
                    float v27 = &v32;
                  }
                  else
                  {
                    float v32 = v33;
                    float v27 = &v33;
                  }
                }
                else
                {
                  float v32 = v33;
                  float v33 = v34;
                  float v27 = &v34;
                }
                *float v27 = v26;
                float v15 = v32;
              }
            }
          }
          if (v4 >= 3)
          {
            float v28 = *(float *)(v11 + v12 + 12);
            if (v15 > v28)
            {
              if (v34 <= v28)
              {
                if (v33 <= v28)
                {
                  float32x2_t v29 = &v32;
                }
                else
                {
                  float v32 = v33;
                  float32x2_t v29 = &v33;
                }
              }
              else
              {
                float v32 = v33;
                float v33 = v34;
                float32x2_t v29 = &v34;
              }
              *float32x2_t v29 = v28;
              float v15 = v32;
            }
          }
          if (v4 < v8)
          {
            float v30 = *(float *)(v10 + v12 + 12);
            if (v15 > v30)
            {
              if (v34 <= v30)
              {
                if (v33 <= v30)
                {
                  float32x2_t v31 = &v32;
                }
                else
                {
                  float v32 = v33;
                  float32x2_t v31 = &v33;
                }
              }
              else
              {
                float v32 = v33;
                float v33 = v34;
                float32x2_t v31 = &v34;
              }
              *float32x2_t v31 = v30;
              float v15 = v32;
            }
          }
          *(float *)(a3 + v12) = (float)((float)(v33 * 0.3) + (float)(v34 * 0.45)) + (float)(v15 * 0.25);
          ++v13;
          v12 += 4;
        }
        while (4 * v5 != v12);
      }
      ++v4;
      a3 += a2;
      v10 += v6;
      v11 += v6;
      v9 += v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_248436CB0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_2483EA250((uint64_t)&v57, a3, a4);
  uint64_t v14 = v61;
  if (!v61)
  {
    long long v53 = v57;
    float v15 = v59;
    uint64_t v59 = 0;
    uint64_t v54 = v58;
    uint64_t v55 = v15;
    uint64_t v56 = v60;
    sub_2483EA250((uint64_t)&v48, a3, a4);
    uint64_t v14 = v52;
    if (!v52)
    {
      long long v44 = v48;
      float v16 = v50;
      char v50 = 0;
      uint64_t v45 = v49;
      uint64_t v46 = v16;
      uint64_t v47 = v51;
      sub_248436880((unsigned int *)(a1 + 80), (void *)a1, v54, v15);
      sub_248436880((unsigned int *)(a2 + 80), (void *)a2, v45, v16);
      uint64_t v17 = v53;
      uint64_t v18 = DWORD1(v53);
      sub_2483EA250((uint64_t)&v90, v53, DWORD1(v53));
      uint64_t v14 = v94;
      if (!v94)
      {
        uint64_t v20 = v91;
        uint64_t v19 = v92;
        uint64_t v92 = 0;
        uint64_t v21 = v93;
        *(_OWORD *)a6 = v90;
        uint64_t v22 = *(void *)(a6 + 24);
        *(void *)(a6 + 16) = v20;
        *(void *)(a6 + 24) = v19;
        if (v22)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v22 - 24));
          free(*(void **)(v22 - 32));
        }
        *(void *)(a6 + 32) = v21;
        sub_2483EA250((uint64_t)&v86, v17, v18);
        uint64_t v14 = v89;
        if (!v89)
        {
          long long v83 = v86;
          long long v84 = v87;
          *((void *)&v87 + 1) = 0;
          uint64_t v85 = v88;
          sub_2483EA250((uint64_t)&v79, v17, v18);
          uint64_t v14 = v82;
          if (!v82)
          {
            long long v76 = v79;
            long long v77 = v80;
            *((void *)&v80 + 1) = 0;
            uint64_t v78 = v81;
            sub_2483EA250((uint64_t)&v72, v17, v18);
            uint64_t v14 = v75;
            if (!v75)
            {
              long long v69 = v72;
              long long v70 = v73;
              *((void *)&v73 + 1) = 0;
              uint64_t v71 = v74;
              sub_2483EA250((uint64_t)&v65, v17, v18);
              uint64_t v14 = v68;
              if (!v68)
              {
                long long v62 = v65;
                long long v63 = v66;
                *((void *)&v66 + 1) = 0;
                uint64_t v64 = v67;
                sub_24843692C((unsigned int *)&v53, v84, *((float **)&v84 + 1));
                sub_24843692C((unsigned int *)&v44, v77, *((float **)&v77 + 1));
                uint64_t v14 = sub_2484341E4((unsigned int *)&v83, a5, (unsigned int *)&v69, 2.7);
                if (!v14)
                {
                  sub_2484369A0((void (__cdecl *)(_Unwind_Exception *))&v69, v84, *((uint64_t *)&v84 + 1));
                  uint64_t v14 = sub_2484341E4((unsigned int *)&v76, a5, (unsigned int *)&v62, 2.7);
                  if (!v14)
                  {
                    if (v18)
                    {
                      uint64_t v33 = 0;
                      uint64_t v34 = *((void *)&v84 + 1);
                      uint64_t v35 = v84;
                      do
                      {
                        if (v17)
                        {
                          uint64_t v36 = 0;
                          uint64_t v37 = *(void *)(a6 + 24) + *(void *)(a6 + 16) * v33;
                          uint64_t v38 = *((void *)&v70 + 1) + v70 * v33;
                          uint64_t v39 = *((void *)&v63 + 1) + v63 * v33;
                          do
                          {
                            *(_DWORD *)(v37 + v36) = *(_DWORD *)(v34 + v36);
                            if (a7)
                            {
                              float v40 = *(float *)(v38 + v36) - *(float *)(v39 + v36);
                              uint64_t v41 = *(void *)(a7 + 24) + v33 * *(void *)(a7 + 16);
                              *(float *)(v41 + v36) = *(float *)(v41 + v36) + (float)((float)(v40 * 10.0) * v40);
                            }
                            v36 += 4;
                          }
                          while (4 * v17 != v36);
                        }
                        ++v33;
                        v34 += v35;
                      }
                      while (v33 != v18);
                    }
                    uint64_t v14 = 0;
                  }
                }
                uint64_t v42 = *((void *)&v63 + 1);
                *((void *)&v63 + 1) = 0;
                if (!v42
                  || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v42 - 24)), free(*(void **)(v42 - 32)), !v68))
                {
                  uint64_t v43 = *((void *)&v66 + 1);
                  *((void *)&v66 + 1) = 0;
                  if (v43)
                  {
                    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v43 - 24));
                    free(*(void **)(v43 - 32));
                  }
                }
              }
              uint64_t v23 = *((void *)&v70 + 1);
              *((void *)&v70 + 1) = 0;
              if (v23)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v23 - 24));
                free(*(void **)(v23 - 32));
              }
              if (!v75)
              {
                uint64_t v24 = *((void *)&v73 + 1);
                *((void *)&v73 + 1) = 0;
                if (v24)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v24 - 24));
                  free(*(void **)(v24 - 32));
                }
              }
            }
            uint64_t v25 = *((void *)&v77 + 1);
            *((void *)&v77 + 1) = 0;
            if (v25)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v25 - 24));
              free(*(void **)(v25 - 32));
            }
            if (!v82)
            {
              uint64_t v26 = *((void *)&v80 + 1);
              *((void *)&v80 + 1) = 0;
              if (v26)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v26 - 24));
                free(*(void **)(v26 - 32));
              }
            }
          }
          uint64_t v27 = *((void *)&v84 + 1);
          *((void *)&v84 + 1) = 0;
          if (v27)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v27 - 24));
            free(*(void **)(v27 - 32));
          }
          if (!v89)
          {
            uint64_t v28 = *((void *)&v87 + 1);
            *((void *)&v87 + 1) = 0;
            if (v28)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v28 - 24));
              free(*(void **)(v28 - 32));
            }
          }
        }
        if (!v94)
        {
          uint64_t v29 = v92;
          uint64_t v92 = 0;
          if (v29)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v29 - 24));
            free(*(void **)(v29 - 32));
          }
        }
      }
      uint64_t v46 = 0;
      if (v16)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)v16 - 3));
        free(*((void **)v16 - 4));
      }
      if (!v52)
      {
        float v30 = v50;
        char v50 = 0;
        if (v30)
        {
          atomic_fetch_add(&qword_26931BDF8, -*((void *)v30 - 3));
          free(*((void **)v30 - 4));
        }
      }
    }
    uint64_t v55 = 0;
    if (v15)
    {
      atomic_fetch_add(&qword_26931BDF8, -*((void *)v15 - 3));
      free(*((void **)v15 - 4));
    }
    if (!v61)
    {
      float32x2_t v31 = v59;
      uint64_t v59 = 0;
      if (v31)
      {
        atomic_fetch_add(&qword_26931BDF8, -*((void *)v31 - 3));
        free(*((void **)v31 - 4));
      }
    }
  }
  return v14;
}

void sub_2484371DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a36 || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(a36 - 24)), free(*(void **)(a36 - 32)), !a44))
  {
    if (a42)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a42 - 24));
      free(*(void **)(a42 - 32));
    }
  }
  if (a48)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a48 - 24));
    free(*(void **)(a48 - 32));
  }
  if (!a56 && a54)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a54 - 24));
    free(*(void **)(a54 - 32));
  }
  if (a60)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a60 - 24));
    free(*(void **)(a60 - 32));
  }
  if (!a68 && a66)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a66 - 24));
    free(*(void **)(a66 - 32));
  }
  uint64_t v70 = *(void *)(v68 - 216);
  *(void *)(v68 - 216) = 0;
  if (v70)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v70 - 24));
    free(*(void **)(v70 - 32));
  }
  if (!*(_DWORD *)(v68 - 152))
  {
    uint64_t v71 = *(void *)(v68 - 168);
    *(void *)(v68 - 168) = 0;
    if (v71)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v71 - 24));
      free(*(void **)(v71 - 32));
    }
  }
  if (!*(_DWORD *)(v68 - 104))
  {
    uint64_t v72 = *(void *)(v68 - 120);
    *(void *)(v68 - 120) = 0;
    if (v72)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v72 - 24));
      free(*(void **)(v72 - 32));
    }
  }
  if (a12)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a12 - 24));
    free(*(void **)(a12 - 32));
  }
  if (!a20 && a18)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a18 - 24));
    free(*(void **)(a18 - 32));
  }
  if (a24)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a24 - 24));
    free(*(void **)(a24 - 32));
  }
  if (!a32)
  {
    if (a30)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a30 - 24));
      free(*(void **)(a30 - 32));
    }
  }
  _Unwind_Resume(a1);
}

unsigned int *sub_248437458(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = result[1];
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *result;
    uint64_t v10 = *((void *)result + 2);
    uint64_t v9 = *((void *)result + 3);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = (uint64_t *)(a2 + 24);
    __asm { FMOV            V4.2D, #1.0 }
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x3FB227F5C0000000uLL);
    BOOL result = *(unsigned int **)(a3 + 16);
    do
    {
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v20 = 0;
          float64x2_t v21 = vmulq_f64(vaddq_f64(vdivq_f64((float64x2_t)xmmword_2484DCC00, vmlaq_n_f64((float64x2_t)xmmword_2484DCBF0, (float64x2_t)xmmword_2484DCBE0, *(float *)(v9 + v10 * v7 + 4 * i))), _Q4), v18);
          uint64_t v22 = v12;
          uint64_t v23 = (uint64_t *)(a3 + 24);
          do
          {
            uint64_t v24 = *v22;
            v22 += 5;
            v28[v20] = *(_DWORD *)(v24 + v11 * v7 + 4 * i);
            uint64_t v25 = *v23;
            v23 += 5;
            v27[v20++] = *(_DWORD *)(v25 + (void)result * v7 + 4 * i);
          }
          while (v20 != 3);
          float32x2_t v26 = vcvt_f32_f64(vmulq_f64(v21, v21));
          *(float *)(a5 + v7 * a4 + 4 * i) = sqrtf(vaddv_f32(vmla_f32(vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v27[1], v28[1]), v26), v26, vmul_n_f32((float32x2_t)__PAIR64__(v27[0], v28[0]), a6)), v26, (float32x2_t)__PAIR64__(v27[2], v28[2]))));
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_2484375D0(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = sub_2484341E4(a1, a4, (unsigned int *)a3, 1.2);
  if (!result)
  {
    uint64_t result = sub_2484341E4(a1 + 10, a4, (unsigned int *)(a3 + 40), 1.2);
    if (!result)
    {
      uint64_t result = sub_2484341E4(a1 + 20, a4, (unsigned int *)(a3 + 80), 1.2);
      if (!result)
      {
        unint64_t v11 = a1[1];
        if (v11)
        {
          unint64_t v12 = 0;
          unint64_t v13 = (const float *)(a2 + 8);
          float32x4_t v14 = vld1q_dup_f32(v13);
          float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3D9F241Fu);
          float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x3FE0BC5Du);
          float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3F223C30u);
          float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3E9960A6u);
          float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3DCA33ABu);
          float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3F31A457u);
          float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3E62E7AEu);
          float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E51B76Eu);
          float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x41439F8Fu);
          float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x3CA3D70Au);
          float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x411F897Au);
          int32x4_t v27 = vdupq_n_s32(0xC0D55555);
          float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
          float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
          float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
          float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
          float32x4_t v32 = (float32x4_t)vdupq_n_s32(0xC1B948A1);
          LODWORD(v33) = *a1;
          float32x4_t v34 = 0uLL;
          v35.i64[0] = 0x7F0000007FLL;
          v35.i64[1] = 0x7F0000007FLL;
          __asm { FMOV            V25.4S, #-1.0 }
          float32x4_t v118 = v17;
          float32x4_t v119 = (float32x4_t)vdupq_n_s32(0x41556F1Du);
          float32x4_t v116 = v18;
          float32x4_t v117 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
          float32x4_t v114 = v24;
          float32x4_t v115 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
          float32x4_t v112 = v22;
          float32x4_t v113 = _Q25;
          do
          {
            if (v33)
            {
              uint64_t v41 = 0;
              unint64_t v42 = 0;
              uint64_t v43 = a5[2] * v12;
              uint64_t v44 = a5[13] + v43;
              uint64_t v45 = a5[8] + v43;
              uint64_t v46 = a5[3] + v43;
              uint64_t v47 = *((void *)a1 + 2) * v12;
              uint64_t v48 = *((void *)a1 + 13) + v47;
              uint64_t v49 = *((void *)a1 + 8) + v47;
              uint64_t v50 = *((void *)a1 + 3) + v47;
              uint64_t v51 = *(void *)(a3 + 16) * v12;
              uint64_t v52 = *(void *)(a3 + 104) + v51;
              uint64_t v53 = *(void *)(a3 + 64) + v51;
              uint64_t v54 = *(void *)(a3 + 24) + v51;
              do
              {
                float32x4_t v55 = vmulq_f32(v14, *(float32x4_t *)(v54 + v41));
                float32x4_t v56 = vmulq_f32(v14, *(float32x4_t *)(v53 + v41));
                float32x4_t v57 = vmulq_f32(v14, *(float32x4_t *)(v52 + v41));
                float32x4_t v58 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v16, v15, v57), v17, v56), v18, v55);
                float32x4_t v59 = v15;
                float32x4_t v60 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v16, v19, v57), v20, v56), v21, v55);
                float32x4_t v61 = v14;
                float32x4_t v62 = v32;
                float32x4_t v63 = v21;
                float32x4_t v64 = v20;
                float32x4_t v65 = v19;
                float32x4_t v66 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v23, v22, v57), v24, v56), v24, v55);
                float32x4_t v67 = vmaxnmq_f32(vmaxnmq_f32(v58, v16), v25);
                float32x4_t v68 = vmaxnmq_f32(vmaxnmq_f32(v60, v16), v25);
                float32x4_t v69 = vmaxnmq_f32(vmaxnmq_f32(v66, v23), v25);
                int32x4_t v70 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v67, v34), v26);
                int32x4_t v71 = vaddq_s32(v70, v27);
                float32x4_t v72 = vaddq_f32((float32x4_t)vsubq_s32(v70, (int32x4_t)vandq_s8((int8x16_t)v71, v35)), v113);
                float32x4_t v73 = vmlaq_f32(v117, v72, vmlaq_f32(v29, v28, v72));
                float32x4_t v74 = vmlaq_f32(v115, v72, vmlaq_f32(v31, v30, v72));
                int32x4_t v75 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v68, v34), v26);
                int32x4_t v76 = vaddq_s32(v75, v27);
                float32x4_t v77 = v23;
                float32x4_t v78 = vaddq_f32((float32x4_t)vsubq_s32(v75, (int32x4_t)vandq_s8((int8x16_t)v76, v35)), v113);
                float32x4_t v79 = vmlaq_f32(v117, v78, vmlaq_f32(v29, v28, v78));
                float32x4_t v80 = vmlaq_f32(v115, v78, vmlaq_f32(v31, v30, v78));
                int32x4_t v81 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v69, v34), v26);
                int32x4_t v82 = vaddq_s32(v81, v27);
                float32x4_t v83 = vaddq_f32((float32x4_t)vsubq_s32(v81, (int32x4_t)vandq_s8((int8x16_t)v82, v35)), v113);
                float32x4_t v84 = vmlaq_f32(v29, v28, v83);
                float32x4_t v85 = v28;
                float32x4_t v86 = v26;
                float32x4_t v87 = vmlaq_f32(v31, v30, v83);
                float32x4_t v88 = v31;
                float32x4_t v89 = v30;
                float32x4_t v90 = v29;
                int32x4_t v91 = v27;
                float32x4_t v92 = vmlaq_f32(v117, v83, v84);
                float32x4_t v93 = vmlaq_f32(v115, v83, v87);
                float32x4_t v94 = vdivq_f32(v73, v74);
                float32x4_t v19 = v65;
                float32x4_t v20 = v64;
                float32x4_t v21 = v63;
                float32x4_t v32 = v62;
                float32x4_t v14 = v61;
                int32x4_t v95 = vshrq_n_s32(v71, 0x17uLL);
                float32x4_t v15 = v59;
                float32x4_t v17 = v118;
                float32x4_t v18 = v116;
                float32x4_t v96 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(v94, vcvtq_f32_s32(v95))), v67);
                float32x4_t v22 = v112;
                float32x4_t v24 = v114;
                float32x4_t v97 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(vdivq_f32(v79, v80), vcvtq_f32_s32(vshrq_n_s32(v76, 0x17uLL)))), v68);
                float32x4_t v98 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(vdivq_f32(v92, v93), vcvtq_f32_s32(vshrq_n_s32(v82, 0x17uLL)))), v69);
                float32x4_t v99 = vmulq_f32(v14, *(float32x4_t *)(v48 + v41));
                float32x4_t v100 = vmlaq_f32(v16, v59, v99);
                float32x4_t v101 = vmlaq_f32(v16, v19, v99);
                float32x4_t v102 = vmlaq_f32(v77, v112, v99);
                float32x4_t v103 = vmulq_f32(v14, *(float32x4_t *)(v49 + v41));
                float32x4_t v104 = vmlaq_f32(v100, v118, v103);
                float32x4_t v105 = vmlaq_f32(v101, v20, v103);
                float32x4_t v106 = vmlaq_f32(v102, v114, v103);
                float32x4_t v107 = vmulq_f32(v14, *(float32x4_t *)(v50 + v41));
                float32x4_t v108 = vmulq_f32(vmaxnmq_f32(v97, v25), vmlaq_f32(v105, v21, v107));
                float32x4_t v23 = v77;
                float32x4_t v109 = vmaxnmq_f32(vmulq_f32(vmaxnmq_f32(v96, v25), vmlaq_f32(v104, v116, v107)), v16);
                float32x4_t v110 = vmaxnmq_f32(v108, v16);
                *(float32x4_t *)(v46 + v41) = vsubq_f32(v109, v110);
                *(float32x4_t *)(v45 + v41) = vaddq_f32(v109, v110);
                float32x4_t v111 = vmaxnmq_f32(vmulq_f32(vmaxnmq_f32(v98, v25), vmlaq_f32(v106, v114, v107)), v77);
                int32x4_t v27 = v91;
                float32x4_t v29 = v90;
                float32x4_t v30 = v89;
                float32x4_t v31 = v88;
                v35.i64[0] = 0x7F0000007FLL;
                v35.i64[1] = 0x7F0000007FLL;
                *(float32x4_t *)(v44 + v41) = v111;
                float32x4_t v26 = v86;
                float32x4_t v28 = v85;
                float32x4_t v34 = 0uLL;
                v42 += 4;
                unint64_t v33 = *a1;
                v41 += 16;
              }
              while (v42 < v33);
              unint64_t v11 = a1[1];
            }
            ++v12;
          }
          while (v12 < v11);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_248437AA8(void *a1)
{
  sub_248437AE0(a1);

  JUMPOUT(0x24C579F90);
}

void *sub_248437AE0(void *a1)
{
  *a1 = &unk_26FC66150;
  uint64_t v2 = a1[76];
  a1[76] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_2483E8DDC(a1 + 74);
  for (uint64_t i = 68; i != 53; i -= 5)
    sub_2483E8DDC(&a1[i]);
  do
  {
    sub_2483E8DDC(&a1[i]);
    i -= 5;
  }
  while (i != 38);
  do
  {
    sub_2483E8DDC(&a1[i]);
    i -= 5;
  }
  while (i != 23);
  do
  {
    sub_2483E8DDC(&a1[i]);
    i -= 5;
  }
  while (i != 13);
  do
  {
    sub_2483E8DDC(&a1[i]);
    i -= 5;
  }
  while (i != 3);
  return a1;
}

void sub_248437BC4()
{
}

void sub_248437ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(v60 + i));
  if (!a42)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a27 + j));
  }
  for (uint64_t k = 104; k != -16; k -= 40)
    sub_2483E8DDC((uint64_t *)(&a44 + k));
  if (!LODWORD(STACK[0x200]))
  {
    for (uint64_t m = 104; m != -16; m -= 40)
      sub_2483E8DDC((uint64_t *)(&a59 + m));
  }
  if (!*(_DWORD *)(v61 - 96))
  {
    for (uint64_t n = 104; n != -16; n -= 40)
      sub_2483E8DDC((uint64_t *)(v61 - 216 + n));
  }
  (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  _Unwind_Resume(a1);
}

void sub_248437FC8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  sub_2483F0C3C((uint64_t)v43, (unint64_t)(v4 + 1) >> 1, (unint64_t)(v5 + 1) >> 1);
  if (v44)
  {
    *(_DWORD *)(a1 + 120) = v44;
  }
  else
  {
    uint64_t v38 = a1;
    sub_2483F0E78((uint64_t)&v39, (uint64_t)v43);
    uint64_t v6 = 0;
    if ((unint64_t)(v4 + 1) >> 1 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = (unint64_t)(v4 + 1) >> 1;
    }
    size_t v8 = 4 * v7;
    if ((unint64_t)(v5 + 1) >> 1 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = (unint64_t)(v5 + 1) >> 1;
    }
    do
    {
      if (v5)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v41;
        unint64_t v12 = v9;
        do
        {
          if (v4) {
            bzero((void *)(v42[5 * v6] + v10), v8);
          }
          v10 += v11;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != 3);
    uint64_t v13 = 0;
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    uint64_t v17 = v39;
    uint64_t v16 = v40;
    BOOL v19 = (v15 & 1) == 0 || v40 == 0;
    uint64_t v20 = v41;
    uint64_t v21 = (v40 - 1) * v41;
    BOOL v23 = (v14 & 1) == 0 || v39 == 0;
    uint64_t v24 = 4 * v39 - 4;
    do
    {
      if (v14)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        uint64_t v27 = *((void *)a2 + 2);
        uint64_t v28 = v41;
        do
        {
          if (v15)
          {
            uint64_t v29 = 0;
            unint64_t v30 = v42[5 * v13] + v28 * (v26 >> 1);
            uint64_t v31 = *(void *)&a2[10 * v13 + 6] + v25;
            do
            {
              *(float *)(v30 + ((2 * v29) & 0xFFFFFFFFFFFFFFFCLL)) = *(float *)(v30 + ((2 * v29) & 0xFFFFFFFFFFFFFFFCLL))
                                                                   + (float)(*(float *)(v31 + 4 * v29) * 0.25);
              ++v29;
            }
            while (v15 != v29);
          }
          ++v26;
          v25 += v27;
        }
        while (v26 != v14);
      }
      if (!v19)
      {
        uint64_t v32 = v42[5 * v13];
        uint64_t v33 = v16;
        do
        {
          *(float *)(v32 + v24) = *(float *)(v32 + v24) + *(float *)(v32 + v24);
          v32 += v20;
          --v33;
        }
        while (v33);
      }
      if (!v23)
      {
        float32x4_t v34 = (float *)(v42[5 * v13] + v21);
        uint64_t v35 = v17;
        do
        {
          *float32x4_t v34 = *v34 + *v34;
          ++v34;
          --v35;
        }
        while (v35);
      }
      ++v13;
    }
    while (v13 != 3);
    *(_DWORD *)(v38 + 120) = 0;
    sub_2483F0E78(v38, (uint64_t)&v39);
    for (uint64_t i = 104; i != -16; i -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&v39 + i));
    if (!v44)
    {
      for (uint64_t j = 104; j != -16; j -= 40)
        sub_2483E8DDC((uint64_t *)&v43[j]);
    }
  }
}

uint64_t sub_248438224(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (*(void *)(a1 + 8) >= 8uLL && *(void *)(a1 + 16) > 7uLL)
  {
    memset(v138, 0, sizeof(v138));
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    memset(v133, 0, sizeof(v133));
    long long v131 = 0u;
    long long v129 = 0u;
    memset(v130, 0, sizeof(v130));
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v124 = 0u;
    uint64_t v6 = sub_248434930(a1 + 568, a2, (uint64_t)&v124);
    if (!v6)
    {
      sub_2483EA250((uint64_t)&v119, *(void *)(a1 + 8), *(void *)(a1 + 16));
      uint64_t v6 = v123;
      if (!v123)
      {
        *(_OWORD *)a3 = v119;
        uint64_t v7 = v121;
        uint64_t v121 = 0;
        uint64_t v8 = v122;
        uint64_t v9 = *((void *)a3 + 3);
        *((void *)a3 + 2) = v120;
        *((void *)a3 + 3) = v7;
        if (v9)
        {
          atomic_fetch_add(&qword_26931BDF8, -*(void *)(v9 - 24));
          free(*(void **)(v9 - 32));
        }
        *((void *)a3 + 4) = v8;
        unint64_t v10 = *(void *)(a1 + 8);
        if (v10 >= 8 && (unint64_t v11 = *(void *)(a1 + 16), v11 > 7))
        {
          float v17 = *(float *)(a1 + 24);
          float v16 = *(float *)(a1 + 28);
          sub_2483EA250((uint64_t)&v156, v10, v11);
          uint64_t v6 = v159;
          if (!v159)
          {
            long long v153 = v156;
            long long v154 = v157;
            *((void *)&v157 + 1) = 0;
            uint64_t v155 = v158;
            sub_2483F0C3C((uint64_t)v151, *(void *)(a1 + 8), *(void *)(a1 + 16));
            uint64_t v6 = v152;
            if (!v152)
            {
              sub_2483F0E78((uint64_t)v145, (uint64_t)v151);
              sub_248438C34(v145);
              double v18 = v17;
              v19.n128_f64[0] = v17 * 1.10039033;
              v20.i64[0] = 0x4051F1EBF888C433;
              sub_248435020((unsigned int *)(a1 + 80), *((uint64_t *)&v127 + 1), (float *)v128, (unsigned int *)&v153, v149, v150, v19, 1.10039033 / v17, v20, v21, v22, v23, v24);
              v25.n128_f64[0] = v17 * 173.5;
              v26.i64[0] = 5.0;
              sub_248435020((unsigned int *)(a1 + 40), v125, *((float **)&v125 + 1), (unsigned int *)&v153, v146, v147[0], v25, 173.5 / v17, v26, v27, v28, v29, v30);
              double v31 = sqrtf(v17);
              v32.n128_f64[0] = v31 * 18.7237414;
              v33.i64[0] = 0x415129199CF2CF96;
              sub_248435CC0((unsigned int *)(a1 + 160), *((uint64_t *)&v131 + 1), (float *)v132, (unsigned int *)&v153, v149, v150, v32, 18.7237414 / v31, v33, v34, v35, v36, v37);
              v38.n128_f64[0] = v31 * 6923.99476;
              v39.i64[0] = 0x40BF7328887A0C8BLL;
              sub_248435CC0((unsigned int *)(a1 + 120), *(uint64_t *)&v130[0], *((float **)&v130[0] + 1), (unsigned int *)&v153, v146, v147[0], v38, 6923.99476 / v31, v39, v40, v41, v42, v43);
              v44.n128_u64[0] = 0x40428A7E8D23887ELL;
              v45.i64[0] = 0x419F0E90AE395810;
              sub_248435CC0((unsigned int *)(a1 + 240), *((uint64_t *)&v134 + 1), (float *)v135, (unsigned int *)&v153, v149, v150, v44, 37.081987, v45, v46, v47, v48, v49);
              v50.n128_u64[0] = 0x40C01B60694D0B21;
              v51.i64[0] = 0x412ECAD569613D32;
              sub_248435CC0((unsigned int *)(a1 + 200), *(uint64_t *)&v133[1], *((float **)&v133[1] + 1), (unsigned int *)&v153, v146, v147[0], v50, 8246.75321, v51, v52, v53, v54, v55);
              sub_2483F0C3C((uint64_t)v143, *(void *)(a1 + 8), *(void *)(a1 + 16));
              uint64_t v6 = v144;
              if (!v144)
              {
                sub_2483F0E78((uint64_t)v142, (uint64_t)v143);
                uint64_t v56 = 0;
                float32x4_t v57 = (float32x4_t)vdupq_n_s32(0x3ECCCCCDu);
                do
                {
                  if (v56 != 2)
                  {
                    double v58 = dbl_24854E4E0[v56];
                    float v59 = v58 * v18;
                    float v60 = v58 / v18;
                    if (v59 != 0.0 || v60 != 0.0)
                    {
                      uint64_t v61 = (_DWORD *)(a1 + 40 * v56 + 120);
                      unint64_t v62 = *(unsigned int *)(a1 + 40 * v56 + 124);
                      if (v62)
                      {
                        unint64_t v63 = 0;
                        float v64 = v59 * 0.8;
                        float v65 = v60 * 0.8;
                        uint64_t v66 = *(void *)&v145[10 * v56 + 4];
                        uint64_t v67 = v147[5 * v56];
                        LODWORD(v68) = *v61;
                        do
                        {
                          if (v68)
                          {
                            unint64_t v69 = 0;
                            int32x4_t v70 = (float32x4_t *)(*((void *)v130 + 5 * v56 + 1) + *((void *)v130 + 5 * v56) * v63);
                            int32x4_t v71 = (float32x4_t *)(*(void *)(a1 + 40 * v56 + 144)
                                                + *(void *)(a1 + 40 * v56 + 136) * v63);
                            float32x4_t v72 = (float32x4_t *)v67;
                            do
                            {
                              float32x4_t v73 = *v71++;
                              float32x4_t v74 = v73;
                              float32x4_t v75 = *v70++;
                              float32x4_t v76 = vsubq_f32(v74, v75);
                              float32x4_t v77 = vmlaq_n_f32(*v72, vmulq_f32(v76, v76), v64);
                              float32x4_t v78 = vabsq_f32(v74);
                              float32x4_t v79 = vmulq_f32(v78, v57);
                              float32x4_t v80 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v74), vbslq_s8((int8x16_t)vcgtq_f32(v75, vnegq_f32(v79)), (int8x16_t)vaddq_f32(v75, v79), vandq_s8((int8x16_t)vsubq_f32(vnegq_f32(v75), v78), (int8x16_t)vcgtq_f32(vnegq_f32(v78), v75))), vbslq_s8((int8x16_t)vcgtq_f32(v79, v75), (int8x16_t)vsubq_f32(v79, v75), vandq_s8((int8x16_t)vsubq_f32(v75, v78), (int8x16_t)vcgtq_f32(v75, v78))));
                              *v72++ = vmlaq_n_f32(v77, vmulq_f32(v80, v80), v65);
                              v69 += 4;
                              unint64_t v68 = *v61;
                            }
                            while (v69 < v68);
                            unint64_t v62 = *(unsigned int *)(a1 + 40 * v56 + 124);
                          }
                          ++v63;
                          v67 += v66;
                        }
                        while (v63 < v62);
                      }
                    }
                  }
                  int32x4_t v81 = &dbl_24854E4E0[v56];
                  float v82 = v81[3];
                  if (v82 != 0.0)
                  {
                    float32x4_t v83 = (unsigned int *)(a1 + 200 + 40 * v56);
                    unint64_t v84 = v83[1];
                    if (v84)
                    {
                      unint64_t v85 = 0;
                      uint64_t v87 = *(void *)&v145[10 * v56 + 4];
                      uint64_t v86 = v147[5 * v56];
                      LODWORD(v88) = *v83;
                      do
                      {
                        if (v88)
                        {
                          unint64_t v89 = 0;
                          float32x4_t v90 = (float32x4_t *)(*((void *)&v133[1] + 5 * v56 + 1)
                                              + *((void *)&v133[1] + 5 * v56) * v85);
                          int32x4_t v91 = (float32x4_t *)(*((void *)v83 + 3) + *((void *)v83 + 2) * v85);
                          float32x4_t v92 = (float32x4_t *)v86;
                          do
                          {
                            float32x4_t v93 = *v91++;
                            float32x4_t v94 = v93;
                            float32x4_t v95 = *v90++;
                            float32x4_t v96 = vsubq_f32(v94, v95);
                            *float32x4_t v92 = vmlaq_n_f32(*v92, vmulq_f32(v96, v96), v82);
                            ++v92;
                            v89 += 4;
                            unint64_t v88 = *v83;
                          }
                          while (v89 < v88);
                          unint64_t v84 = v83[1];
                        }
                        ++v85;
                        v86 += v87;
                      }
                      while (v85 < v84);
                    }
                  }
                  float v97 = v81[6];
                  if (v97 != 0.0)
                  {
                    float32x4_t v98 = (unsigned int *)(a1 + 320 + 40 * v56);
                    unint64_t v99 = v98[1];
                    if (v99)
                    {
                      unint64_t v100 = 0;
                      uint64_t v101 = *(void *)&v142[40 * v56 + 16];
                      float32x4_t v102 = *(float32x4_t **)&v142[40 * v56 + 24];
                      LODWORD(v103) = *v98;
                      do
                      {
                        if (v103)
                        {
                          unint64_t v104 = 0;
                          float32x4_t v105 = (float32x4_t *)(*((void *)&v138[2] + 5 * v56)
                                               + *((void *)&v138[1] + 5 * v56 + 1) * v100);
                          float32x4_t v106 = (float32x4_t *)(*((void *)v98 + 3) + *((void *)v98 + 2) * v100);
                          float32x4_t v107 = v102;
                          do
                          {
                            float32x4_t v108 = *v106++;
                            float32x4_t v109 = v108;
                            float32x4_t v110 = *v105++;
                            float32x4_t v111 = vsubq_f32(v109, v110);
                            *v107++ = vmulq_n_f32(vmulq_f32(v111, v111), v97);
                            v104 += 4;
                            unint64_t v103 = *v98;
                          }
                          while (v104 < v103);
                          unint64_t v99 = v98[1];
                        }
                        ++v100;
                        float32x4_t v102 = (float32x4_t *)((char *)v102 + v101);
                      }
                      while (v100 < v99);
                    }
                  }
                  ++v56;
                }
                while (v56 != 3);
                uint64_t v141 = 0;
                long long v139 = 0u;
                long long v140 = 0u;
                uint64_t v6 = sub_248436CB0(a1 + 40, (uint64_t)&v124, *(void *)(a1 + 8), *(void *)(a1 + 16), a1 + 568, (uint64_t)&v139, (uint64_t)&v148);
                if (!v6) {
                  sub_248437458((unsigned int *)&v139, (uint64_t)v142, (uint64_t)v145, *((void *)a3 + 2), *((void *)a3 + 3), v16);
                }
                uint64_t v112 = *((void *)&v140 + 1);
                *((void *)&v140 + 1) = 0;
                if (v112)
                {
                  atomic_fetch_add(&qword_26931BDF8, -*(void *)(v112 - 24));
                  free(*(void **)(v112 - 32));
                }
                for (uint64_t i = 104; i != -16; i -= 40)
                  sub_2483E8DDC((uint64_t *)&v142[i]);
                if (!v144)
                {
                  for (uint64_t j = 104; j != -16; j -= 40)
                    sub_2483E8DDC((uint64_t *)&v143[j]);
                }
              }
              for (uint64_t k = 26; k != -4; k -= 10)
                sub_2483E8DDC((uint64_t *)&v145[k]);
              if (!v152)
              {
                for (uint64_t m = 104; m != -16; m -= 40)
                  sub_2483E8DDC((uint64_t *)&v151[m]);
              }
            }
            uint64_t v117 = *((void *)&v154 + 1);
            *((void *)&v154 + 1) = 0;
            if (v117)
            {
              atomic_fetch_add(&qword_26931BDF8, -*(void *)(v117 - 24));
              free(*(void **)(v117 - 32));
            }
            if (!v159)
            {
              uint64_t v118 = *((void *)&v157 + 1);
              *((void *)&v157 + 1) = 0;
              if (v118)
              {
                atomic_fetch_add(&qword_26931BDF8, -*(void *)(v118 - 24));
                free(*(void **)(v118 - 32));
              }
            }
          }
        }
        else
        {
          if (*a3 && a3[1])
          {
            unint64_t v12 = 0;
            do
              bzero((void *)(*((void *)a3 + 3) + *((void *)a3 + 2) * v12++), 4 * *a3);
            while (v12 < a3[1]);
          }
          uint64_t v6 = 0;
        }
        if (!v123)
        {
          uint64_t v13 = v121;
          uint64_t v121 = 0;
          if (v13)
          {
            atomic_fetch_add(&qword_26931BDF8, -*(void *)(v13 - 24));
            free(*(void **)(v13 - 32));
          }
        }
      }
    }
    for (uint64_t n = 384; n != 264; n -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&v124 + n));
    do
    {
      sub_2483E8DDC((uint64_t *)((char *)&v124 + n));
      n -= 40;
    }
    while (n != 144);
    do
    {
      sub_2483E8DDC((uint64_t *)((char *)&v124 + n));
      n -= 40;
    }
    while (n != 64);
    do
    {
      sub_2483E8DDC((uint64_t *)((char *)&v124 + n));
      n -= 40;
    }
    while (n != -16);
  }
  else
  {
    if (*a3 && a3[1])
    {
      unint64_t v5 = 0;
      do
        bzero((void *)(*((void *)a3 + 3) + *((void *)a3 + 2) * v5++), 4 * *a3);
      while (v5 < a3[1]);
    }
    return 0;
  }
  return v6;
}

void sub_2484389DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v74 = a69;
  a69 = 0;
  if (v74)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v74 - 24));
    free(*(void **)(v74 - 32));
  }
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a72 + i));
  if (!LODWORD(STACK[0x2E0]))
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x268] + j));
  }
  for (uint64_t k = 104; k != -16; k -= 40)
    sub_2483E8DDC((uint64_t *)((char *)&STACK[0x2E8] + k));
  if (!LODWORD(STACK[0x3D8]))
  {
    for (uint64_t m = 104; m != -16; m -= 40)
      sub_2483E8DDC((uint64_t *)((char *)&STACK[0x360] + m));
  }
  uint64_t v79 = *(void *)(v72 - 184);
  *(void *)(v72 - 184) = 0;
  if (v79)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v79 - 24));
    free(*(void **)(v79 - 32));
  }
  if (!*(_DWORD *)(v72 - 120))
  {
    uint64_t v80 = *(void *)(v72 - 136);
    *(void *)(v72 - 136) = 0;
    if (v80)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v80 - 24));
      free(*(void **)(v80 - 32));
    }
  }
  if (!a14)
  {
    if (a12)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a12 - 24));
      free(*(void **)(a12 - 32));
    }
  }
  sub_248438BBC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_248438B44(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = a3[1];
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = *a3;
    uint64_t v7 = *((void *)a3 + 2);
    uint64_t v6 = *((void *)a3 + 3);
    do
    {
      if (v5)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          float v9 = *(float *)(v6 + 4 * i) * 0.85;
          *(float *)(v6 + 4 * i) = v9;
          *(float *)(v6 + 4 * i) = v9
                                 + (float)(*(float *)(a2 + (v4 >> 1) * result + ((2 * i) & 0xFFFFFFFFFFFFFFFCLL)) * 0.5);
        }
      }
      ++v4;
      v6 += v7;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_248438BBC(uint64_t a1)
{
  for (uint64_t i = 384; i != 264; i -= 40)
    sub_2483E8DDC((uint64_t *)(a1 + i));
  do
  {
    sub_2483E8DDC((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != 144);
  do
  {
    sub_2483E8DDC((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != 64);
  do
  {
    sub_2483E8DDC((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != -16);
  return a1;
}

void sub_248438C34(unsigned int *a1)
{
  uint64_t v2 = 0;
  unint64_t v3 = a1[1];
  unint64_t v4 = v3;
  do
  {
    if (v4)
    {
      unint64_t v5 = 0;
      uint64_t v6 = *a1;
      do
      {
        if (v6)
        {
          bzero((void *)(*(void *)&a1[10 * v2 + 6] + *((void *)a1 + 2) * v5), 4 * v6);
          uint64_t v6 = *a1;
          unint64_t v3 = a1[1];
        }
        ++v5;
        unint64_t v4 = v3;
      }
      while (v5 < v3);
    }
    ++v2;
  }
  while (v2 != 3);
}

double sub_248438CC0(double a1)
{
  double v2 = 0.0;
  double v3 = 1.0;
  do
  {
    long double v4 = 2.0 / (exp((v2 + -1.0) * 4.8) + 1.0);
    double v5 = (v4 + -1.0) * 1.2223 + 0.7777;
    double v6 = v4 * 0.7777;
    if (v2 < 1.0) {
      double v6 = v5;
    }
    if (v6 >= a1) {
      double v7 = v3;
    }
    else {
      double v7 = -v3;
    }
    double v2 = v2 + v7;
    double v3 = v3 * 0.5;
  }
  while (v3 >= 1.0e-10);
  return v2;
}

BOOL sub_248438D7C(unsigned int *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = *a1;
  if (v4 <= a2) {
    return 0;
  }
  BOOL result = 0;
  if ((a3 & 7) == 0 || a1[1] <= a3) {
    return result;
  }
  if (v4 >= a4) {
    unint64_t v4 = a4;
  }
  unint64_t v7 = *((void *)a1 + 3) + *((void *)a1 + 2) * a3;
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    while ((*(unsigned char *)(v7 + a2) & 1) == 0)
    {
      if (v8 == --a2)
      {
        a2 = v8;
        break;
      }
    }
  }
  if (a2 >= v4) {
    return 0;
  }
  while (1)
  {
    unint64_t v9 = *(unsigned __int8 *)(v7 + a2);
    BOOL result = (v9 & 1) == 0;
    if ((v9 & 1) == 0) {
      break;
    }
    a2 += byte_2485534EC[v9 >> 1];
    if (a2 >= v4) {
      return 0;
    }
  }
  return result;
}

BOOL sub_248438E14(unsigned int *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (*a1 <= a2) {
    return 0;
  }
  BOOL v4 = 0;
  if ((a2 & 7) == 0) {
    return v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a3) {
    return v4;
  }
  if (v5 >= a4) {
    unint64_t v5 = a4;
  }
  unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    uint64_t v7 = *((void *)a1 + 2);
    unint64_t v8 = *((void *)a1 + 3) + v7 * a3;
    uint64_t v9 = -v7;
    while ((*(unsigned char *)(v8 + a2) & 1) == 0)
    {
      v8 += v9;
      if (v6 == --a3)
      {
        a3 = v6;
        break;
      }
    }
  }
  if (a3 >= v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v10 = *(unsigned __int8 *)(*((void *)a1 + 3) + *((void *)a1 + 2) * a3 + a2);
    BOOL v4 = (v10 & 1) == 0;
    if ((v10 & 1) == 0) {
      break;
    }
    a3 += byte_248553507[v10 >> 1];
    if (a3 >= v5) {
      return 0;
    }
  }
  return v4;
}

float sub_248438EBC(float32x4_t *a1, unint64_t a2, unint64_t a3, float *a4, uint64_t a5, uint64_t a6, float32x4_t *a7, float a8)
{
  uint64_t v8 = (uint64_t)a7;
  unint64_t v10 = a4;
  unint64_t v11 = a3;
  int64_t v14 = (int64_t)a1;
  uint64_t v15 = 0;
  uint64_t v612 = *MEMORY[0x263EF8340];
  uint64_t v575 = a7 + 0x4000;
  uint64_t v547 = 1 << byte_24854EE58[a1->u32[0]];
  uint64_t v552 = v547 << 6;
  uint64_t v542 = (uint64_t)&a7[18432];
  uint64_t v543 = (uint64_t)&a7[24576];
  uint64_t v535 = (uint64_t)&a7[20480];
  uint64_t v536 = (uint64_t)&a7[0x8000];
  uint64_t v533 = (uint64_t)&a7[16400];
  uint64_t v534 = (uint64_t)&a7[17408];
  uint64_t v532 = (uint64_t)&a7[16640];
  uint64_t v540 = (uint64_t)&a7[16512];
  uint64_t v541 = (uint64_t)&a7[16896];
  uint64_t v544 = (uint64_t)&a7[16448];
  uint64_t v539 = (uint64_t)&a7[16416];
  unint64_t v572 = a7 + 16392;
  uint64_t v562 = v547 << 8;
  uint64_t v16 = a6 + 4;
  uint64_t v17 = a6 + 32;
  uint64_t v550 = 4 * a2;
  uint64_t v564 = 4 * a3;
  uint64_t v18 = a6;
  do
  {
    float v19 = *(float *)v14;
    uint64_t v20 = a6 + 4 * v15 * v552;
    uint64_t v21 = *(void *)&v10[2 * v15 + 14];
    uint64_t v22 = *((void *)v10 + 10);
    unint64_t v23 = a2 + v22 * v11;
    int64_t v14 = v21 + 4 * v23;
    uint64_t v573 = v22;
    switch(LODWORD(v19))
    {
      case 0:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v533;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8, (uint64_t)&v610, (uint64_t)&v576, 8, v533);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        sub_2484065E0(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8;
        uint64_t v26 = 8;
        goto LABEL_138;
      case 1:
        uint64_t v27 = 0;
        uint64_t v28 = 16 * v22;
        uint64_t v29 = 4 * v22;
        uint64_t v30 = v21 + v550;
        char v31 = 1;
        uint64_t v32 = v21 + 4 * v23;
        do
        {
          uint64_t v33 = 0;
          char v34 = v31;
          char v35 = 1;
          uint64_t v36 = ((4 * v27) | 1) * v22 + 1;
          uint64_t v37 = 8 * v27;
          uint64_t v38 = v32 + v28 * v27;
          uint64_t v39 = 32 * v27;
          uint64_t v40 = v30 + v22 * (v564 + 16 * v27);
          do
          {
            char v41 = v35;
            uint64_t v42 = 4 * v33;
            uint64_t v43 = 16 * v33;
            float v44 = 0.0;
            uint64_t v45 = 4;
            uint64_t v46 = v38 + 16 * v33;
            do
            {
              float v44 = (float)((float)((float)(v44 + COERCE_FLOAT(*(_OWORD *)v46)) + COERCE_FLOAT(HIDWORD(*(void *)v46)))
                          + COERCE_FLOAT(*(void *)(v46 + 8)))
                  + COERCE_FLOAT(HIDWORD(*(_OWORD *)v46));
              v46 += v29;
              --v45;
            }
            while (v45);
            uint64_t v47 = v36 + v42;
            uint64_t v48 = v33 | v37;
            uint64_t v49 = v39 + v42;
            uint64_t v50 = v40 + v43;
            do
            {
              uint64_t v51 = 0;
              uint64_t v52 = v49;
              do
              {
                if (v45 != 1 || v51 != 4) {
                  *(float *)(v18 + v52) = *(float *)(v50 + v51) - *(float *)(v14 + 4 * v47);
                }
                v51 += 4;
                v52 += 8;
              }
              while (v51 != 16);
              ++v45;
              v49 += 64;
              v50 += v29;
            }
            while (v45 != 4);
            char v35 = 0;
            *(_DWORD *)(v20 + ((4 * v48) | 0x48)) = *(_DWORD *)(v20 + 4 * v48);
            *(float *)(v20 + 4 * v48) = v44 * 0.0625;
            uint64_t v33 = 1;
          }
          while ((v41 & 1) != 0);
          char v31 = 0;
          uint64_t v27 = 1;
          uint64_t v22 = v573;
        }
        while ((v34 & 1) != 0);
        float v53 = *(float *)v20;
        float v54 = *(float *)(v20 + 4);
        float v55 = *(float *)(v20 + 32);
        float v56 = *(float *)(v20 + 36);
        float v57 = *(float *)v20 + v54;
        *(float *)uint64_t v20 = (float)((float)(v57 + v55) + v56) * 0.25;
        *(float *)(v20 + 4) = (float)((float)(v57 - v55) - v56) * 0.25;
        float v58 = v53 - v54;
        float v59 = (float)((float)(v58 + v55) - v56) * 0.25;
        float v60 = (float)((float)(v58 - v55) + v56) * 0.25;
        goto LABEL_27;
      case 2:
        for (uint64_t i = 16; i != 144; i += 32)
        {
          unint64_t v63 = (const float *)(v14 + 4 * v22);
          float32x4x2_t v613 = vld2q_f32((const float *)v14);
          uint64_t v61 = 8 * v22;
          v14 += v61;
          float32x4x2_t v614 = vld2q_f32(v63);
          float32x4_t v64 = vaddq_f32(v613.val[0], v613.val[1]);
          float32x4_t v65 = vaddq_f32(vaddq_f32(v64, v614.val[0]), v614.val[1]);
          float32x4_t v66 = vsubq_f32(vsubq_f32(v64, v614.val[0]), v614.val[1]);
          v613.val[0] = vsubq_f32(v613.val[0], v613.val[1]);
          v613.val[1] = vsubq_f32(vaddq_f32(v613.val[0], v614.val[0]), v614.val[1]);
          v613.val[0] = vaddq_f32(vsubq_f32(v613.val[0], v614.val[0]), v614.val[1]);
          __asm { FMOV            V2.4S, #0.25 }
          int32x4_t v71 = (float32x4_t *)((char *)&v576 + i);
          v71[-1] = vmulq_f32(v65, v614.val[0]);
          *int32x4_t v71 = vmulq_f32(v66, v614.val[0]);
          v71[7] = vmulq_f32(v613.val[1], v614.val[0]);
          v71[8] = vmulq_f32(v613.val[0], v614.val[0]);
        }
        uint64_t v72 = 0;
        long long v73 = v589;
        *(_OWORD *)(v20 + 192) = v588;
        *(_OWORD *)(v20 + 208) = v73;
        long long v74 = v591;
        *(_OWORD *)(v20 + 224) = v590;
        *(_OWORD *)(v20 + 240) = v74;
        long long v75 = v585;
        *(_OWORD *)(v20 + 128) = v584;
        *(_OWORD *)(v20 + 144) = v75;
        long long v76 = v587;
        *(_OWORD *)(v20 + 160) = v586;
        *(_OWORD *)(v20 + 176) = v76;
        long long v77 = v581;
        *(_OWORD *)(v20 + 64) = v580;
        *(_OWORD *)(v20 + 80) = v77;
        long long v78 = v583;
        *(_OWORD *)(v20 + 96) = v582;
        *(_OWORD *)(v20 + 112) = v78;
        long long v79 = v577;
        *(float32x4_t *)uint64_t v20 = v576;
        *(_OWORD *)(v20 + 16) = v79;
        long long v80 = v579;
        char v81 = 1;
        *(_OWORD *)(v20 + 32) = v578;
        *(_OWORD *)(v20 + 48) = v80;
        do
        {
          uint64_t v82 = 0;
          char v83 = v81;
          uint64_t v84 = 16 * v72;
          uint64_t v85 = 8 * v72;
          char v86 = 1;
          do
          {
            char v87 = v86;
            uint64_t v88 = (8 * v82) | (4 * v84);
            float v89 = *(float *)(v20 + v88);
            float v90 = *(float *)(v20 + (v88 | 4));
            float v91 = *(float *)(v20 + (v88 | 0x20));
            float v92 = *(float *)(v20 + (v88 | 0x24));
            float v93 = (float)((float)(v89 + v90) + v91) + v92;
            float v94 = (float)((float)(v89 + v90) - v91) - v92;
            float v95 = v89 - v90;
            uint64_t v96 = v82 | v85;
            v576.f32[v96] = v93 * 0.25;
            *(float *)((char *)v576.f32 + ((4 * v96) | 8)) = v94 * 0.25;
            *(float *)((char *)v576.f32 + ((4 * v96) | 0x40)) = (float)((float)(v95 + v91) - v92) * 0.25;
            *(float *)((char *)v576.f32 + ((4 * v96) | 0x48)) = (float)((float)(v95 - v91) + v92) * 0.25;
            uint64_t v82 = 1;
            char v86 = 0;
          }
          while ((v87 & 1) != 0);
          char v81 = 0;
          uint64_t v72 = 1;
        }
        while ((v83 & 1) != 0);
        for (uint64_t j = 0; j != 128; j += 32)
          *(float32x4_t *)(v18 + j) = *(float32x4_t *)((char *)&v576 + j);
        float v98 = *(float *)(v20 + 4);
        float v99 = *(float *)(v20 + 32);
        float v100 = *(float *)(v20 + 36);
        float v101 = *(float *)v20 + v98;
        float v102 = *(float *)v20 - v98;
        float v59 = (float)((float)(v102 + v99) - v100) * 0.25;
        *(float *)uint64_t v20 = (float)((float)(v101 + v99) + v100) * 0.25;
        *(float *)(v20 + 4) = (float)((float)(v101 - v99) - v100) * 0.25;
        float v60 = (float)((float)(v102 - v99) + v100) * 0.25;
LABEL_27:
        *(float *)(v20 + 32) = v59;
        *(float *)(v20 + 36) = v60;
        goto LABEL_143;
      case 3:
        uint64_t v554 = v16;
        uint64_t v557 = v15;
        uint64_t v103 = 0;
        uint64_t v566 = 4 * v22;
        char v104 = 1;
        do
        {
          uint64_t v105 = 0;
          char v569 = v104;
          float32x4_t v106 = (char *)(v14 + 4 * v566 * v103);
          uint64_t v107 = 32 * v103;
          char v108 = 1;
          do
          {
            char v109 = v108;
            float32x4_t v110 = &v576;
            sub_24843C88C(v22, (float32x4_t *)&v106[16 * v105], (int32x4_t *)&v576, (uint64_t)v575);
            uint64_t v111 = 0;
            uint64_t v112 = v107 + 4 * v105;
            do
            {
              uint64_t v113 = 0;
              uint64_t v114 = v112;
              do
              {
                *(_DWORD *)(v18 + v114) = v110->i32[v113++];
                v114 += 8;
              }
              while (v113 != 4);
              ++v111;
              v112 += 64;
              ++v110;
            }
            while (v111 != 4);
            char v108 = 0;
            uint64_t v105 = 1;
            uint64_t v22 = v573;
          }
          while ((v109 & 1) != 0);
          char v104 = 0;
          uint64_t v103 = 1;
        }
        while ((v569 & 1) != 0);
        float v115 = *(float *)v20;
        float v116 = *(float *)(v20 + 4);
        float v117 = *(float *)(v20 + 32);
        float v118 = *(float *)(v20 + 36);
        float v119 = *(float *)v20 + v116;
        *(float *)uint64_t v20 = (float)((float)(v119 + v117) + v118) * 0.25;
        *(float *)(v20 + 4) = (float)((float)(v119 - v117) - v118) * 0.25;
        float v120 = v115 - v116;
        *(float *)(v20 + 32) = (float)((float)(v120 + v117) - v118) * 0.25;
        *(float *)(v20 + 36) = (float)((float)(v120 - v117) + v118) * 0.25;
        unint64_t v10 = a4;
        goto LABEL_51;
      case 4:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 16;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v544;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4, (uint64_t)&v610, (uint64_t)&v576, 16, v544);
        v576.i64[0] = 16;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        sub_248406244(&v576, &v592);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4;
        uint64_t v26 = 16;
        goto LABEL_138;
      case 5:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 32;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v532;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v610, (uint64_t)&v576, 32, v532);
        v576.i64[0] = 32;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 32);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C;
        uint64_t v26 = 32;
        goto LABEL_138;
      case 6:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v539;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4, (uint64_t)&v610, (uint64_t)&v576, 8, v539);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        sub_248406414(&v576, &v592);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8;
        uint64_t v26 = 16;
        goto LABEL_140;
      case 7:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8, (uint64_t)&v610, (uint64_t)&v576, 16, v539);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_24840632C(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4, (uint64_t)&v576, (uint64_t)&v592, 8, v539);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_248406414(&v576, &v592);
        goto LABEL_143;
      case 8:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v544;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v610, (uint64_t)&v576, 8, v544);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_24843C928(&v576, &v592);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        unsigned int v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8;
        goto LABEL_44;
      case 9:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D7F8, (uint64_t)&v610, (uint64_t)&v576, 32, v544);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_2484064F8(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v576, (uint64_t)&v592, 8, v544);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_24843C928(&v576, &v592);
        goto LABEL_143;
      case 0xA:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 16;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v540;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v610, (uint64_t)&v576, 16, v540);
        v576.i64[0] = 16;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 16);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        unsigned int v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4;
LABEL_44:
        __n128 v25 = v123;
        uint64_t v26 = 32;
        goto LABEL_140;
      case 0xB:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D8C4, (uint64_t)&v610, (uint64_t)&v576, 32, v540);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 16, 32);
        v576.i64[0] = 16;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v576, (uint64_t)&v592, 16, v540);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v10 = a4;
        v592.i64[0] = 32;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648;
        uint64_t v26 = 32;
        uint64_t v124 = 16;
        goto LABEL_142;
      case 0xC:
        uint64_t v554 = v16;
        uint64_t v557 = v15;
        uint64_t v125 = 0;
        uint64_t v126 = 4 * v22;
        char v127 = 1;
        do
        {
          char v128 = v127;
          uint64_t v129 = 32 * v125;
          v592.i64[0] = v22;
          v592.i64[1] = v14 + 4 * v126 * v125;
          sub_24843C7DC((uint64_t)&v592, &v576, v575);
          for (uint64_t k = 0; k != 128; k += 32)
          {
            uint64_t v131 = v18 + v129;
            long long v132 = *(long long *)((char *)&v576 + k + 16);
            *(float32x4_t *)uint64_t v131 = *(float32x4_t *)((char *)&v576 + k);
            *(_OWORD *)(v131 + 16) = v132;
            v129 += 64;
          }
          char v127 = 0;
          uint64_t v125 = 1;
          uint64_t v22 = v573;
        }
        while ((v128 & 1) != 0);
        float v133 = *(float *)v20;
        float v134 = *(float *)(v20 + 32);
        *(float *)uint64_t v20 = (float)(*(float *)v20 + v134) * 0.5;
        *(float *)(v20 + 32) = (float)(v133 - v134) * 0.5;
LABEL_51:
        uint64_t v8 = (uint64_t)a7;
        unint64_t v11 = a3;
        int64_t v14 = (int64_t)a1;
        goto LABEL_57;
      case 0xD:
        uint64_t v554 = v16;
        uint64_t v557 = v15;
        uint64_t v135 = 0;
        char v136 = 1;
        do
        {
          char v570 = v136;
          uint64_t v137 = 32 * v135;
          v592.i64[0] = 4;
          v592.i64[1] = (uint64_t)&v576;
          sub_248408240(v22, (float32x4_t *)(v14 + 16 * v135), &v592, v572);
          v592.i64[0] = 4;
          v592.i64[1] = (uint64_t)&v576;
          uint64_t v610 = 8;
          v611 = v575;
          sub_248407100(&v592, &v610);
          v592.i64[0] = 8;
          v592.i64[1] = (uint64_t)v575;
          uint64_t v610 = 8;
          v611 = &v576;
          sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D9A4, (uint64_t)&v592, (uint64_t)&v610, 8, (uint64_t)v572);
          for (uint64_t m = 0; m != 128; m += 32)
          {
            uint64_t v139 = v18 + v137;
            long long v140 = *(long long *)((char *)&v576 + m + 16);
            *(float32x4_t *)uint64_t v139 = *(float32x4_t *)((char *)&v576 + m);
            *(_OWORD *)(v139 + 16) = v140;
            v137 += 64;
          }
          char v136 = 0;
          uint64_t v135 = 1;
          uint64_t v22 = v573;
        }
        while ((v570 & 1) != 0);
        float v141 = *(float *)v20;
        float v142 = *(float *)(v20 + 32);
        *(float *)uint64_t v20 = (float)(*(float *)v20 + v142) * 0.5;
        *(float *)(v20 + 32) = (float)(v141 - v142) * 0.5;
        uint64_t v8 = (uint64_t)a7;
        unint64_t v11 = a3;
        int64_t v14 = (int64_t)a1;
        unint64_t v10 = a4;
LABEL_57:
        uint64_t v16 = v554;
        uint64_t v15 = v557;
        break;
      case 0xE:
        uint64_t v143 = 0;
        long long v599 = 0u;
        long long v598 = 0u;
        long long v597 = 0u;
        long long v596 = 0u;
        long long v595 = 0u;
        long long v593 = 0u;
        long long v594 = 0u;
        uint64_t v144 = 4 * v22;
        uint64_t v145 = (float32x4_t *)(v21 + 4 * v23);
        float32x4_t v592 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v592 + v143) = *v145;
          v143 += 16;
          uint64_t v145 = (float32x4_t *)((char *)v145 + v144);
        }
        while (v143 != 64);
        unint64_t v146 = 0;
        uint64_t v147 = (float32x4_t *)&unk_24854F660;
        do
        {
          uint64_t v148 = 0;
          float32x4_t v149 = 0uLL;
          do
          {
            float32x4_t v149 = vmlaq_n_f32(v149, v147[v148 * 4], v592.f32[v148]);
            ++v148;
          }
          while (v148 != 16);
          *(float32x4_t *)((char *)&v610 + 4 * v146) = v149;
          ++v147;
          _CF = v146 >= 0xC;
          v146 += 4;
        }
        while (!_CF);
        uint64_t v150 = 0;
        uint64_t v151 = &v610;
        unsigned int v152 = (_DWORD *)v18;
        do
        {
          uint64_t v153 = 0;
          long long v154 = v152;
          do
          {
            _DWORD *v154 = *(_DWORD *)((char *)v151 + v153);
            v154 += 2;
            v153 += 4;
          }
          while (v153 != 16);
          ++v150;
          v152 += 16;
          v151 += 2;
        }
        while (v150 != 4);
        uint64_t v155 = &v592;
        sub_24843C88C(v22, (float32x4_t *)(v14 + 16), (int32x4_t *)&v592, (uint64_t)&v576);
        uint64_t v156 = 0;
        long long v157 = (_DWORD *)v16;
        do
        {
          uint64_t v158 = 0;
          unsigned int v159 = v157;
          do
          {
            *unsigned int v159 = v155->i32[v158];
            v159 += 2;
            ++v158;
          }
          while (v158 != 8);
          ++v156;
          v157 += 16;
          ++v155;
        }
        while (v156 != 4);
        int64_t v608 = v573;
        uint64_t v609 = (float32x4_t *)(v14 + 4 * v144);
        sub_24843C7DC((uint64_t)&v608, &v592, &v576);
        uint64_t v160 = 0;
        uint64_t v161 = v17;
        do
        {
          long long v162 = *(long long *)((char *)&v592 + v160 + 16);
          *(float32x4_t *)uint64_t v161 = *(float32x4_t *)((char *)&v592 + v160);
          *(_OWORD *)(v161 + 16) = v162;
          v161 += 64;
          v160 += 32;
        }
        while (v160 != 128);
        float v163 = *(float *)(v20 + 4);
        float v164 = *(float *)v20 * 0.25;
        float v165 = *(float *)(v20 + 32);
        *(float *)uint64_t v20 = (float)((float)(v164 + v163) + (float)(v165 * 2.0)) * 0.25;
        *(float *)(v20 + 4) = (float)(v164 - v163) * 0.5;
        *(float *)(v20 + 32) = (float)((float)(v164 + v163) + (float)(v165 * -2.0)) * 0.25;
        uint64_t v8 = (uint64_t)a7;
        goto LABEL_130;
      case 0xF:
        uint64_t v166 = 0;
        long long v599 = 0u;
        long long v598 = 0u;
        long long v597 = 0u;
        long long v596 = 0u;
        long long v595 = 0u;
        long long v593 = 0u;
        long long v594 = 0u;
        unint64_t v167 = (int32x4_t *)(v21 + 4 * v23 + 16);
        float32x4_t v592 = 0u;
        do
        {
          int8x16_t v168 = (int8x16_t)vrev64q_s32(*v167);
          *(int8x16_t *)((char *)&v592 + v166) = vextq_s8(v168, v168, 8uLL);
          v166 += 16;
          unint64_t v167 = (int32x4_t *)((char *)v167 + 4 * v22);
        }
        while (v166 != 64);
        unint64_t v169 = 0;
        long long v170 = (float32x4_t *)&unk_24854F660;
        do
        {
          uint64_t v171 = 0;
          float32x4_t v172 = 0uLL;
          do
          {
            float32x4_t v172 = vmlaq_n_f32(v172, v170[v171 * 4], v592.f32[v171]);
            ++v171;
          }
          while (v171 != 16);
          *(float32x4_t *)((char *)&v610 + 4 * v169) = v172;
          ++v170;
          _CF = v169 >= 0xC;
          v169 += 4;
        }
        while (!_CF);
        uint64_t v173 = 0;
        uint64_t v174 = &v610;
        uint64_t v175 = (_DWORD *)v18;
        do
        {
          uint64_t v176 = 0;
          unsigned int v177 = v175;
          do
          {
            *unsigned int v177 = *(_DWORD *)((char *)v174 + v176);
            v177 += 2;
            v176 += 4;
          }
          while (v176 != 16);
          ++v173;
          v175 += 16;
          v174 += 2;
        }
        while (v173 != 4);
        unsigned int v178 = &v592;
        sub_24843C88C(v22, (float32x4_t *)v14, (int32x4_t *)&v592, (uint64_t)&v576);
        uint64_t v179 = 0;
        unint64_t v180 = (_DWORD *)v16;
        do
        {
          uint64_t v181 = 0;
          unint64_t v182 = v180;
          do
          {
            *unint64_t v182 = v178->i32[v181];
            v182 += 2;
            ++v181;
          }
          while (v181 != 8);
          ++v179;
          v180 += 16;
          ++v178;
        }
        while (v179 != 4);
        int64_t v608 = v573;
        uint64_t v609 = (float32x4_t *)(v14 + 16 * v573);
        sub_24843C7DC((uint64_t)&v608, &v592, &v576);
        uint64_t v183 = 0;
        uint64_t v184 = v17;
        do
        {
          long long v185 = *(long long *)((char *)&v592 + v183 + 16);
          *(float32x4_t *)uint64_t v184 = *(float32x4_t *)((char *)&v592 + v183);
          *(_OWORD *)(v184 + 16) = v185;
          v184 += 64;
          v183 += 32;
        }
        while (v183 != 128);
        goto LABEL_129;
      case 0x10:
        long long v599 = 0u;
        long long v598 = 0u;
        long long v597 = 0u;
        long long v596 = 0u;
        long long v595 = 0u;
        long long v593 = 0u;
        long long v594 = 0u;
        float32x4_t v592 = 0u;
        uint64_t v186 = (float32x4_t *)(v21 + 16 * v22 + 4 * v23);
        for (uint64_t n = 48; n != -16; n -= 16)
        {
          *(float32x4_t *)((char *)&v592 + n) = *v186;
          uint64_t v186 = (float32x4_t *)((char *)v186 + 4 * v22);
        }
        unint64_t v188 = 0;
        BOOL v189 = (float32x4_t *)&unk_24854F660;
        do
        {
          uint64_t v190 = 0;
          float32x4_t v191 = 0uLL;
          do
          {
            float32x4_t v191 = vmlaq_n_f32(v191, v189[v190 * 4], v592.f32[v190]);
            ++v190;
          }
          while (v190 != 16);
          *(float32x4_t *)((char *)&v610 + 4 * v188) = v191;
          ++v189;
          _CF = v188 >= 0xC;
          v188 += 4;
        }
        while (!_CF);
        uint64_t v192 = 0;
        float v193 = &v610;
        uint64_t v194 = (_DWORD *)v18;
        do
        {
          uint64_t v195 = 0;
          int v196 = v194;
          do
          {
            _DWORD *v196 = *(_DWORD *)((char *)v193 + v195);
            v196 += 2;
            v195 += 4;
          }
          while (v195 != 16);
          ++v192;
          v194 += 16;
          v193 += 2;
        }
        while (v192 != 4);
        uint64_t v197 = &v592;
        sub_24843C88C(v22, (float32x4_t *)(v14 + 16 * v22 + 16), (int32x4_t *)&v592, (uint64_t)&v576);
        uint64_t v198 = 0;
        float v199 = (_DWORD *)v16;
        do
        {
          uint64_t v200 = 0;
          float v201 = v199;
          do
          {
            *float v201 = v197->i32[v200];
            v201 += 2;
            ++v200;
          }
          while (v200 != 8);
          ++v198;
          v199 += 16;
          ++v197;
        }
        while (v198 != 4);
        int64_t v608 = v573;
        uint64_t v609 = (float32x4_t *)v14;
        sub_24843C7DC((uint64_t)&v608, &v592, &v576);
        uint64_t v202 = 0;
        uint64_t v203 = v17;
        do
        {
          long long v204 = *(long long *)((char *)&v592 + v202 + 16);
          *(float32x4_t *)uint64_t v203 = *(float32x4_t *)((char *)&v592 + v202);
          *(_OWORD *)(v203 + 16) = v204;
          v203 += 64;
          v202 += 32;
        }
        while (v202 != 128);
        goto LABEL_129;
      case 0x11:
        long long v599 = 0u;
        long long v598 = 0u;
        long long v597 = 0u;
        long long v596 = 0u;
        long long v595 = 0u;
        long long v593 = 0u;
        long long v594 = 0u;
        float32x4_t v592 = 0u;
        char v205 = (int32x4_t *)(v21 + 16 * v22 + 4 * v23 + 16);
        for (iuint64_t i = 48; ii != -16; ii -= 16)
        {
          int8x16_t v207 = (int8x16_t)vrev64q_s32(*v205);
          *(int8x16_t *)((char *)&v592 + ii) = vextq_s8(v207, v207, 8uLL);
          char v205 = (int32x4_t *)((char *)v205 + 4 * v22);
        }
        unint64_t v208 = 0;
        float32x2_t v209 = (float32x4_t *)&unk_24854F660;
        do
        {
          uint64_t v210 = 0;
          float32x4_t v211 = 0uLL;
          do
          {
            float32x4_t v211 = vmlaq_n_f32(v211, v209[v210 * 4], v592.f32[v210]);
            ++v210;
          }
          while (v210 != 16);
          *(float32x4_t *)((char *)&v610 + 4 * v208) = v211;
          ++v209;
          _CF = v208 >= 0xC;
          v208 += 4;
        }
        while (!_CF);
        uint64_t v212 = 0;
        unint64_t v213 = &v610;
        uint64_t v214 = (_DWORD *)v18;
        do
        {
          uint64_t v215 = 0;
          uint64_t v216 = v214;
          do
          {
            *uint64_t v216 = *(_DWORD *)((char *)v213 + v215);
            v216 += 2;
            v215 += 4;
          }
          while (v215 != 16);
          ++v212;
          v214 += 16;
          v213 += 2;
        }
        while (v212 != 4);
        uint64_t v217 = &v592;
        sub_24843C88C(v22, (float32x4_t *)(v14 + 16 * v22), (int32x4_t *)&v592, (uint64_t)&v576);
        uint64_t v218 = 0;
        float32x2_t v219 = (_DWORD *)v16;
        do
        {
          uint64_t v220 = 0;
          uint64_t v221 = v219;
          do
          {
            *uint64_t v221 = v217->i32[v220];
            v221 += 2;
            ++v220;
          }
          while (v220 != 8);
          ++v218;
          v219 += 16;
          ++v217;
        }
        while (v218 != 4);
        int64_t v608 = v573;
        uint64_t v609 = (float32x4_t *)v14;
        sub_24843C7DC((uint64_t)&v608, &v592, &v576);
        uint64_t v222 = 0;
        uint64_t v223 = v17;
        do
        {
          long long v224 = *(long long *)((char *)&v592 + v222 + 16);
          *(float32x4_t *)uint64_t v223 = *(float32x4_t *)((char *)&v592 + v222);
          *(_OWORD *)(v223 + 16) = v224;
          v223 += 64;
          v222 += 32;
        }
        while (v222 != 128);
LABEL_129:
        float v225 = *(float *)(v20 + 4);
        float v226 = *(float *)v20 * 0.25;
        float v227 = *(float *)(v20 + 32);
        *(float *)uint64_t v20 = (float)((float)(v226 + v225) + (float)(v227 * 2.0)) * 0.25;
        *(float *)(v20 + 4) = (float)(v226 - v225) * 0.5;
        *(float *)(v20 + 32) = (float)((float)(v226 + v225) + (float)(v227 * -2.0)) * 0.25;
LABEL_130:
        unint64_t v11 = a3;
        goto LABEL_143;
      case 0x12:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 64;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v534;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568, (uint64_t)&v610, (uint64_t)&v576, 64, v534);
        v576.i64[0] = 64;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 64);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568;
        uint64_t v26 = 64;
        goto LABEL_138;
      case 0x13:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 32;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v541;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568, (uint64_t)&v610, (uint64_t)&v576, 32, v541);
        v576.i64[0] = 32;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 32);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C;
        uint64_t v26 = 64;
        goto LABEL_140;
      case 0x14:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D72C, (uint64_t)&v610, (uint64_t)&v576, 64, v541);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 64);
        v576.i64[0] = 32;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568, (uint64_t)&v576, (uint64_t)&v592, 32, v541);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v10 = a4;
        v592.i64[0] = 64;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648;
        uint64_t v26 = 64;
        uint64_t v124 = 32;
        goto LABEL_142;
      case 0x15:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 128;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v535;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C, (uint64_t)&v610, (uint64_t)&v576, 128, v535);
        v576.i64[0] = 128;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 128);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C;
        uint64_t v26 = 128;
        goto LABEL_138;
      case 0x16:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 64;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v542;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C, (uint64_t)&v610, (uint64_t)&v576, 64, v542);
        v576.i64[0] = 64;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 64);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568;
        uint64_t v26 = 128;
        goto LABEL_140;
      case 0x17:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D568, (uint64_t)&v610, (uint64_t)&v576, 128, v542);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 128);
        v576.i64[0] = 64;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C, (uint64_t)&v576, (uint64_t)&v592, 64, v542);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v10 = a4;
        v592.i64[0] = 128;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648;
        uint64_t v26 = 128;
        uint64_t v124 = 64;
        goto LABEL_142;
      case 0x18:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 256;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v24 = v536;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CF08, (uint64_t)&v610, (uint64_t)&v576, 256, v536);
        v576.i64[0] = 256;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 256;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 256, 256);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 256;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CF08;
        uint64_t v26 = 256;
LABEL_138:
        uint64_t v124 = v24;
        goto LABEL_142;
      case 0x19:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 128;
        v576.i64[1] = a6 + 4 * v15 * v552;
        uint64_t v555 = v16;
        uint64_t v121 = v10;
        uint64_t v122 = v543;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CF08, (uint64_t)&v610, (uint64_t)&v576, 128, v543);
        v576.i64[0] = 128;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 256;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 256, 128);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 256;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C;
        uint64_t v26 = 256;
LABEL_140:
        uint64_t v124 = v122;
        unint64_t v10 = v121;
        uint64_t v16 = v555;
        goto LABEL_142;
      case 0x1A:
        uint64_t v610 = *((void *)v10 + 10);
        v611 = (float32x4_t *)(v21 + 4 * v23);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D49C, (uint64_t)&v610, (uint64_t)&v576, 256, v543);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        v592.i64[1] = a6 + 4 * v15 * v552;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 256);
        v576.i64[0] = 128;
        v576.i64[1] = a6 + 4 * v15 * v552;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CF08, (uint64_t)&v576, (uint64_t)&v592, 128, v543);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v10 = a4;
        v592.i64[0] = 256;
        unint64_t v11 = a3;
        v592.i64[1] = a6 + 4 * v15 * v552;
        __n128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648;
        uint64_t v26 = 256;
        uint64_t v124 = 128;
LABEL_142:
        sub_248405EEC(v25, (uint64_t)&v576, (uint64_t)&v592, v26, v124);
LABEL_143:
        int64_t v14 = (int64_t)a1;
        break;
      default:
        break;
    }
    ++v15;
    v18 += v562;
    v16 += v562;
    v17 += v562;
  }
  while (v15 != 3);
  uint64_t v228 = *(unsigned int *)v14;
  unint64_t v229 = byte_2485534EC[v228];
  unint64_t v230 = byte_248553507[v228];
  unint64_t v231 = v230 * v229;
  if (v230 * v229 == 1)
  {
    float v236 = *(float *)(*((void *)v10 + 1) + 4 * (*((void *)v10 + 2) * (v11 >> 3) + (a2 >> 3)));
    uint64_t v237 = v547;
  }
  else if (v231 == 2)
  {
    unint64_t v232 = 0x850uLL >> v228;
    uint64_t v233 = *((void *)v10 + 1);
    uint64_t v234 = *((void *)v10 + 2);
    unint64_t v235 = v234 * (v11 >> 3) + (a2 >> 3);
    float v236 = *(float *)(v233 + 4 * v235);
    uint64_t v237 = v547;
    if (v232) {
      float v238 = *(float *)(v233 + 4 * (v234 + v234 * (v11 >> 3) + (a2 >> 3)));
    }
    else {
      float v238 = *(float *)(v233 + 4 * v235 + 4);
    }
    if (v236 < v238) {
      float v236 = v238;
    }
  }
  else
  {
    uint64_t v239 = 0;
    uint64_t v240 = *((void *)v10 + 2);
    if (v229 <= 1) {
      unint64_t v229 = 1;
    }
    if (v230 <= 1) {
      unint64_t v230 = 1;
    }
    uint64_t v241 = *((void *)v10 + 1) + 4 * (v240 * (v11 >> 3) + (a2 >> 3));
    uint64_t v242 = 4 * v240;
    int32x2_t v243 = 0;
    uint64_t v237 = v547;
    do
    {
      float v244 = (float *)v241;
      unint64_t v245 = v229;
      do
      {
        float v246 = *v244++;
        float v247 = (float)((float)(v246 * v246) * (float)(v246 * v246))
             * (float)((float)(v246 * v246) * (float)(v246 * v246));
        *(float *)v243.i32 = *(float *)v243.i32 + (float)(v247 * v247);
        --v245;
      }
      while (v245);
      ++v239;
      v241 += v242;
    }
    while (v239 != v230);
    *(float *)v243.i32 = *(float *)v243.i32 / (float)v231;
    int32x2_t v248 = vdup_lane_s32(v243, 0);
    int32x2_t v249 = vadd_s32(v248, vdup_n_s32(0xC0D55555));
    __asm { FMOV            V2.2S, #-1.0 }
    float32x2_t v251 = vadd_f32((float32x2_t)vsub_s32(v248, (int32x2_t)vand_s8((int8x8_t)v249, (int8x8_t)0x7F0000007FLL)), _D2);
    float32x2_t v252 = vmul_f32(vadd_f32(vdiv_f32(vmla_f32((float32x2_t)vdup_n_s32(0xB5F85AB0), v251, vmla_f32((float32x2_t)vdup_n_s32(0x3FB6E02Bu), (float32x2_t)vdup_n_s32(0x3F3E11C7u), v251)), vmla_f32((float32x2_t)vdup_n_s32(0x3F7D8625u), v251, vmla_f32((float32x2_t)vdup_n_s32(0x3F813CEDu), (float32x2_t)vdup_n_s32(0x3E32458Cu), v251))), vcvt_f32_s32(vshr_n_s32(v249, 0x17uLL))), (float32x2_t)vdup_n_s32(0x3D800000u));
    float32x2_t v253 = vrndm_f32(v252);
    __asm { FMOV            V3.2S, #1.0 }
    float32x2_t v255 = vsub_f32(v252, v253);
    LODWORD(v236) = vdiv_f32(vmul_f32(vmla_f32((float32x2_t)vdup_n_s32(0x42C519F0u), v255, vmla_f32((float32x2_t)vdup_n_s32(0x424379A1u), v255, vadd_f32(v255, (float32x2_t)vdup_n_s32(0x4122CC6Bu)))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(v253), 0x17uLL), _D3)), vmla_f32((float32x2_t)vdup_n_s32(0x42C519F1u), v255, vmla_f32((float32x2_t)vdup_n_s32(0xC19B8831), v255, vmla_f32((float32x2_t)vdup_n_s32(0xBCB621BE), (float32x2_t)vdup_n_s32(0x3E5749EEu), v255)))).u32[0];
  }
  float v558 = v236;
  uint64_t v574 = 0;
  unint64_t v548 = v231 << 6;
  uint64_t v556 = v237 << 8;
  uint64_t v545 = (float32x4_t *)(a6 + 4 * v552);
  uint64_t v256 = *(unsigned int *)v14;
  uint64_t v537 = v8 + 32;
  uint64_t v538 = v8 + 4;
  uint64_t v531 = a6 + 16;
  float32x4_t v257 = 0uLL;
  float v258 = 0.0;
  __asm { FMOV            V5.4S, #1.0 }
  float v260 = (float32x4_t *)a6;
  int8x16_t v553 = _Q5;
  unint64_t v551 = v231;
  do
  {
    float32x4_t v571 = v257;
    uint64_t v568 = v260;
    if (v231)
    {
      unint64_t v261 = 0;
      uint64_t v262 = *(void *)(*(void *)v10 + 8 * (v574 + 3 * v256) + 72);
      unint64_t v263 = (float32x4_t *)(*(void *)(*(void *)v10 + 40) + 4 * v262);
      unint64_t v264 = (const float *)(a5 + 4 * v574);
      float32x4_t v265 = vld1q_dup_f32(v264);
      uint64_t v266 = (float32x4_t *)(*(void *)(*(void *)v10 + 32) + 4 * v262);
      float32x4_t v267 = 0uLL;
      uint64_t v268 = v260;
      uint64_t v269 = v545;
      int v270 = (float32x4_t *)v8;
      float32x4_t v271 = 0uLL;
      do
      {
        float32x4_t v272 = *v268++;
        float32x4_t v273 = v272;
        float32x4_t v274 = *v269++;
        float32x4_t v275 = vmulq_f32(v265, v274);
        float32x4_t v276 = *v263++;
        float32x4_t v277 = vmulq_f32(vsubq_f32(v273, v275), vmulq_n_f32(v276, v558));
        float32x4_t v278 = vrndnq_f32(v277);
        float32x4_t v279 = *v266++;
        *v270++ = vmulq_f32(v279, vsubq_f32(v277, v278));
        float32x4_t v267 = vaddq_f32(v267, vsqrtq_f32(vabsq_f32(v278)));
        float32x4_t v271 = vaddq_f32(v271, (float32x4_t)vbicq_s8(_Q5, (int8x16_t)vceqzq_f32(v278)));
        v261 += 4;
      }
      while (v261 < v548);
      uint64_t v256 = *(unsigned int *)v14;
    }
    else
    {
      float32x4_t v271 = 0uLL;
      float32x4_t v267 = 0uLL;
    }
    float32x4_t v565 = v267;
    float32x4_t v567 = v271;
    unint64_t v231 = byte_2485534EC[v256];
    int64_t v14 = 8 * v231;
    switch(v256)
    {
      case 0:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v533;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CDAC, (uint64_t)&v576, (uint64_t)&v592, 8, v533);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = v8;
        sub_2484065E0(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CDAC;
        uint64_t v282 = 8;
        goto LABEL_353;
      case 1:
        uint64_t v283 = 0;
        float v284 = *(float *)v8;
        float v285 = *(float *)(v8 + 4);
        float v286 = *(float *)(v8 + 32);
        float v287 = *(float *)(v8 + 36);
        float v288 = *(float *)v8 + v285;
        v576.f32[0] = (float)(v288 + v286) + v287;
        v576.f32[1] = (float)(v288 - v286) - v287;
        float v289 = v284 - v285;
        v576.f32[2] = (float)(v289 + v286) - v287;
        v576.f32[3] = (float)(v289 - v286) + v287;
        unint64_t v290 = v231 << 7;
        uint64_t v291 = 32 * v231;
        char v292 = 1;
        unint64_t v231 = v551;
        do
        {
          uint64_t v293 = 0;
          char v294 = v292;
          uint64_t v295 = 2 * v283;
          uint64_t v296 = 8 * v283;
          char v297 = 1;
          uint64_t v298 = ((4 * v283) | 1) * v14;
          uint64_t v299 = 4 * v283 * v14;
          uint64_t v300 = a6 + v290 * v283;
          uint64_t v301 = v8 + 32 * v283;
          do
          {
            uint64_t v302 = 0;
            char v303 = v297;
            uint64_t v304 = v293 | v296;
            uint64_t v305 = (float *)(v301 + 4 * v293);
            float v306 = 0.0;
            unint64_t v307 = v305;
            do
            {
              uint64_t v308 = 0;
              float v309 = v307;
              do
              {
                if (v308 | v302) {
                  float v306 = v306 + *v309;
                }
                ++v308;
                v309 += 2;
              }
              while (v308 != 4);
              ++v302;
              v307 += 16;
            }
            while (v302 != 4);
            uint64_t v310 = 0;
            uint64_t v311 = 4 * v293;
            uint64_t v312 = v298 | (4 * v293) | 1;
            *(float *)(a6 + 4 * v312) = v576.f32[v293 | v295] + (float)(v306 * -0.0625);
            uint64_t v313 = v300 + 16 * v293;
            do
            {
              uint64_t v314 = 0;
              uint64_t v315 = v305;
              do
              {
                if (v310 != 1 || v314 != 4) {
                  *(float *)(v313 + v314) = *v315 + *(float *)(a6 + 4 * v312);
                }
                v314 += 4;
                v315 += 2;
              }
              while (v314 != 16);
              ++v310;
              v313 += v291;
              v305 += 16;
            }
            while (v310 != 4);
            char v297 = 0;
            *(float *)(a6 + 4 * (v311 | v299)) = *(float *)(v8 + ((4 * v304) | 0x48)) + *(float *)(a6 + 4 * v312);
            uint64_t v293 = 1;
          }
          while ((v303 & 1) != 0);
          char v292 = 0;
          uint64_t v283 = 1;
        }
        while ((v294 & 1) != 0);
        goto LABEL_345;
      case 2:
        uint64_t v316 = 0;
        long long v317 = *(_OWORD *)(v8 + 208);
        long long v604 = *(_OWORD *)(v8 + 192);
        long long v605 = v317;
        long long v318 = *(_OWORD *)(v8 + 240);
        long long v606 = *(_OWORD *)(v8 + 224);
        long long v607 = v318;
        long long v319 = *(_OWORD *)(v8 + 144);
        long long v600 = *(_OWORD *)(v8 + 128);
        long long v601 = v319;
        long long v320 = *(_OWORD *)(v8 + 176);
        long long v602 = *(_OWORD *)(v8 + 160);
        long long v603 = v320;
        long long v321 = *(_OWORD *)(v8 + 80);
        long long v596 = *(_OWORD *)(v8 + 64);
        long long v597 = v321;
        long long v322 = *(_OWORD *)(v8 + 112);
        long long v598 = *(_OWORD *)(v8 + 96);
        long long v599 = v322;
        long long v323 = *(_OWORD *)(v8 + 16);
        float32x4_t v592 = *(float32x4_t *)v8;
        long long v593 = v323;
        long long v324 = *(_OWORD *)(v8 + 48);
        long long v594 = *(_OWORD *)(v8 + 32);
        long long v595 = v324;
        float32_t v325 = (float)((float)(v592.f32[0] + v592.f32[1]) - *(float *)&v594) - *((float *)&v594 + 1);
        *(float *)&long long v324 = (float)((float)(v592.f32[0] - v592.f32[1]) + *(float *)&v594) - *((float *)&v594 + 1);
        *(float *)&unsigned int v326 = (float)((float)(v592.f32[0] - v592.f32[1]) - *(float *)&v594) + *((float *)&v594 + 1);
        v592.f32[0] = (float)((float)(v592.f32[0] + v592.f32[1]) + *(float *)&v594) + *((float *)&v594 + 1);
        v592.f32[1] = v325;
        *(void *)&long long v594 = __PAIR64__(v326, v324);
        char v327 = 1;
        int64_t v14 = (int64_t)a1;
        do
        {
          uint64_t v328 = 0;
          char v329 = v327;
          uint64_t v330 = 8 * v316;
          uint64_t v331 = 16 * v316;
          char v332 = 1;
          do
          {
            char v333 = v332;
            unint64_t v334 = 4 * (v328 | v330);
            float v335 = v592.f32[v334 / 4];
            float v336 = *(float *)((char *)v592.f32 + (v334 | 8));
            float v337 = *(float *)((char *)v592.f32 + (v334 | 0x40));
            float v338 = *(float *)((char *)v592.f32 + (v334 | 0x48));
            float v339 = (float)((float)(v335 + v336) + v337) + v338;
            float v340 = (float)((float)(v335 + v336) - v337) - v338;
            float v341 = v335 - v336;
            uint64_t v342 = (8 * v328) | (4 * v331);
            *(float *)((char *)v576.f32 + v342) = v339;
            *(float *)((char *)v576.f32 + (v342 | 4)) = v340;
            *(float *)((char *)v576.f32 + (v342 | 0x20)) = (float)(v341 + v337) - v338;
            *(float *)((char *)v576.f32 + (v342 | 0x24)) = (float)(v341 - v337) + v338;
            uint64_t v328 = 1;
            char v332 = 0;
          }
          while ((v333 & 1) != 0);
          char v327 = 0;
          uint64_t v316 = 1;
        }
        while ((v329 & 1) != 0);
        for (juint64_t j = 0; jj != 128; jj += 32)
          *(float32x4_t *)((char *)&v592 + jj) = *(float32x4_t *)((char *)&v576 + jj);
        uint64_t v344 = 0;
        unsigned int v345 = (float32x4_t *)&v600;
        do
        {
          float32x4_t v346 = v345[-8];
          float32x4_t v347 = v345[-7];
          float32x4_t v348 = *v345;
          float32x4_t v349 = v345[1];
          v345 += 2;
          float32x4_t v350 = vaddq_f32(v346, v347);
          v615.val[0] = vaddq_f32(vaddq_f32(v350, v348), v349);
          v615.val[1] = vsubq_f32(vsubq_f32(v350, v348), v349);
          float32x4_t v351 = vsubq_f32(v346, v347);
          v616.val[0] = vsubq_f32(vaddq_f32(v351, v348), v349);
          uint64_t v352 = &v576.f32[v344];
          vst2q_f32(v352, v615);
          v352 += 8;
          v616.val[1] = vaddq_f32(vsubq_f32(v351, v348), v349);
          vst2q_f32(v352, v616);
          v344 += 16;
        }
        while (v344 != 64);
        uint64_t v353 = 0;
        long long v604 = v588;
        long long v605 = v589;
        long long v606 = v590;
        long long v607 = v591;
        long long v600 = v584;
        long long v601 = v585;
        long long v602 = v586;
        long long v603 = v587;
        long long v596 = v580;
        long long v597 = v581;
        long long v598 = v582;
        long long v599 = v583;
        float32x4_t v592 = v576;
        long long v593 = v577;
        uint64_t v354 = a6;
        long long v594 = v578;
        long long v595 = v579;
        do
        {
          long long v355 = *(long long *)((char *)&v592 + v353 + 16);
          *(float32x4_t *)uint64_t v354 = *(float32x4_t *)((char *)&v592 + v353);
          *(_OWORD *)(v354 + 16) = v355;
          v353 += 32;
          v354 += 32 * v231;
        }
        while (v353 != 256);
        goto LABEL_360;
      case 3:
        uint64_t v356 = 0;
        float v357 = *(float *)v8;
        float v358 = *(float *)(v8 + 4);
        float v359 = *(float *)(v8 + 32);
        float v360 = *(float *)(v8 + 36);
        float v361 = *(float *)v8 + v358;
        v592.f32[0] = (float)(v361 + v359) + v360;
        v592.f32[1] = (float)(v361 - v359) - v360;
        float v362 = v357 - v358;
        v592.f32[2] = (float)(v362 + v359) - v360;
        v592.f32[3] = (float)(v362 - v359) + v360;
        uint64_t v363 = 32 * v231;
        char v364 = 1;
        do
        {
          uint64_t v365 = 0;
          char v366 = v364;
          uint64_t v367 = 2 * v356;
          uint64_t v368 = a6 + 4 * v363 * v356;
          uint64_t v369 = v8 + 32 * v356;
          char v370 = 1;
          do
          {
            uint64_t v371 = 0;
            char v372 = v370;
            v576.i32[0] = v592.i32[v365 | v367];
            unint64_t v373 = (__int32 *)(v369 + 4 * v365);
            unint64_t v374 = &v576;
            do
            {
              uint64_t v375 = 0;
              unint64_t v376 = v373;
              do
              {
                if (v375 | v371) {
                  v374->i32[v375] = *v376;
                }
                ++v375;
                v376 += 2;
              }
              while (v375 != 4);
              ++v371;
              ++v374;
              v373 += 16;
            }
            while (v371 != 4);
            sub_248406194((uint64_t)&v576, v14, v368 + 16 * v365, (uint64_t)v575);
            char v370 = 0;
            uint64_t v365 = 1;
          }
          while ((v372 & 1) != 0);
          char v364 = 0;
          uint64_t v356 = 1;
          uint64_t v8 = (uint64_t)a7;
        }
        while ((v366 & 1) != 0);
        unint64_t v11 = a3;
        int64_t v14 = (int64_t)a1;
        goto LABEL_360;
      case 4:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v544;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CE20, (uint64_t)&v576, (uint64_t)&v592, 16, v544);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        v592.i64[1] = v8;
        sub_248406244(&v576, &v592);
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CE20;
        goto LABEL_214;
      case 5:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v532;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CD38, (uint64_t)&v576, (uint64_t)&v592, 32, v532);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 32);
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CD38;
        goto LABEL_218;
      case 6:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v539;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CDAC, (uint64_t)&v576, (uint64_t)&v592, 16, v539);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = v8;
        sub_24840632C(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        BOOL v378 = sub_24843CE20;
        goto LABEL_216;
      case 7:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        sub_24840632C(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = v8;
        uint64_t v280 = v539;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CE20, (uint64_t)&v576, (uint64_t)&v592, 8, v539);
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        sub_248406414(&v576, &v592);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        float v281 = sub_24843CDAC;
LABEL_214:
        uint64_t v282 = 16;
        goto LABEL_353;
      case 8:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v544;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CDAC, (uint64_t)&v576, (uint64_t)&v592, 32, v544);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = v8;
        sub_2484064F8(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        BOOL v378 = sub_24843CD38;
LABEL_216:
        float v281 = v378;
        uint64_t v282 = 8;
        goto LABEL_355;
      case 9:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 8;
        v592.i64[1] = (uint64_t)v575;
        sub_2484064F8(&v576, &v592);
        v576.i64[0] = 8;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 8;
        v592.i64[1] = v8;
        uint64_t v280 = v544;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CD38, (uint64_t)&v576, (uint64_t)&v592, 8, v544);
        v576.i64[0] = 8;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_24843C928(&v576, &v592);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        float v281 = sub_24843CDAC;
LABEL_218:
        uint64_t v282 = 32;
        goto LABEL_353;
      case 10:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v540;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CE20, (uint64_t)&v576, (uint64_t)&v592, 32, v540);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 16, 32);
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CD38;
        uint64_t v282 = 16;
        goto LABEL_355;
      case 11:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 16;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 16, 32);
        v576.i64[0] = 16;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 16;
        v592.i64[1] = v8;
        uint64_t v379 = v540;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CD38, (uint64_t)&v576, (uint64_t)&v592, 16, v540);
        v576.i64[0] = 16;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 16);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        unint64_t v10 = a4;
        float v281 = sub_24843CE20;
        uint64_t v282 = 32;
        goto LABEL_357;
      case 12:
        uint64_t v380 = 0;
        float v381 = *(float *)(v8 + 32);
        float v382 = *(float *)v8 - v381;
        *(float *)&uint64_t v610 = *(float *)v8 + v381;
        *((float *)&v610 + 1) = v382;
        uint64_t v383 = 32 * v231;
        char v384 = 1;
        do
        {
          uint64_t v385 = 0;
          char v386 = v384;
          v576.i32[0] = *((_DWORD *)&v610 + v380);
          uint64_t v387 = v8 + 32 * v380;
          char v388 = &v576;
          do
          {
            for (kuint64_t k = 0; kk != 8; ++kk)
            {
              if (kk | v385) {
                v388->i32[kk] = *(_DWORD *)(v387 + 4 * kk);
              }
            }
            ++v385;
            v388 += 2;
            v387 += 64;
          }
          while (v385 != 4);
          v592.i64[0] = v14;
          v592.i64[1] = a6 + 4 * v383 * v380;
          sub_24843CA0C(&v576, (uint64_t)&v592, v575);
          char v384 = 0;
          uint64_t v380 = 1;
        }
        while ((v386 & 1) != 0);
        goto LABEL_292;
      case 13:
        uint64_t v390 = 0;
        float v391 = *(float *)(v8 + 32);
        float v392 = *(float *)v8 - v391;
        *(float *)&int64_t v608 = *(float *)v8 + v391;
        *((float *)&v608 + 1) = v392;
        char v393 = 1;
        do
        {
          uint64_t v394 = 0;
          char v395 = v393;
          v576.i32[0] = *((_DWORD *)&v608 + v390);
          uint64_t v396 = v8 + 32 * v390;
          unint64_t v397 = &v576;
          do
          {
            for (uint64_t mm = 0; mm != 8; ++mm)
            {
              if (mm | v394) {
                v397->i32[mm] = *(_DWORD *)(v396 + 4 * mm);
              }
            }
            ++v394;
            v397 += 2;
            v396 += 64;
          }
          while (v394 != 4);
          v592.i64[0] = 8;
          v592.i64[1] = (uint64_t)&v576;
          long long v399 = (float32x4_t *)(a6 + 16 * v390);
          uint64_t v610 = 8;
          v611 = v575;
          sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CE94, (uint64_t)&v592, (uint64_t)&v610, 8, (uint64_t)v572);
          v592.i64[0] = 8;
          v592.i64[1] = (uint64_t)v575;
          uint64_t v610 = 4;
          v611 = &v576;
          sub_248405F04(&v592, &v610);
          sub_248405FAC(&v576, 4, v399, v14, v572);
          char v393 = 0;
          uint64_t v390 = 1;
        }
        while ((v395 & 1) != 0);
        unint64_t v11 = a3;
        unint64_t v10 = a4;
        goto LABEL_359;
      case 14:
        uint64_t v400 = 0;
        float v401 = *(float *)v8;
        float v402 = *(float *)(v8 + 4);
        float v403 = *(float *)(v8 + 32);
        float v404 = *(float *)v8 + v403;
        *(float *)&uint64_t v610 = (float)(v402 + v404) * 4.0;
        uint64_t v405 = &v610;
        char v406 = (_DWORD *)v8;
        do
        {
          uint64_t v407 = 0;
          unint64_t v408 = v406;
          do
          {
            if (v407 | v400) {
              *((_DWORD *)v405 + v407) = *v408;
            }
            ++v407;
            v408 += 2;
          }
          while (v407 != 4);
          ++v400;
          v405 += 2;
          v406 += 16;
        }
        while (v400 != 4);
        unint64_t v409 = 0;
        int32x4_t v410 = (float32x4_t *)&unk_24854E670;
        do
        {
          uint64_t v411 = 0;
          float32x4_t v412 = 0uLL;
          do
          {
            float32x4_t v412 = vmlaq_n_f32(v412, v410[v411], *(float *)((char *)&v610 + v411));
            v411 += 4;
          }
          while (v411 != 64);
          *(float32x4_t *)((char *)&v592 + 4 * v409) = v412;
          ++v410;
          _CF = v409 >= 0xC;
          v409 += 4;
        }
        while (!_CF);
        uint64_t v413 = 0;
        uint64_t v414 = 32 * v231;
        uint64_t v415 = (float32x4_t *)a6;
        do
        {
          *uint64_t v415 = *(float32x4_t *)((char *)&v592 + v413);
          v413 += 16;
          uint64_t v415 = (float32x4_t *)((char *)v415 + v414);
        }
        while (v413 != 64);
        uint64_t v416 = 0;
        v592.f32[0] = v404 - v402;
        unint64_t v417 = &v592;
        uint64_t v418 = (__int32 *)v538;
        do
        {
          uint64_t v419 = 0;
          uint64_t v420 = v418;
          do
          {
            if (v419 | v416) {
              v417->i32[v419] = *v420;
            }
            ++v419;
            v420 += 2;
          }
          while (v419 != 4);
          ++v416;
          ++v417;
          v418 += 16;
        }
        while (v416 != 4);
        float32_t v421 = v401 - v403;
        uint64_t v422 = &v592;
        sub_248406194((uint64_t)&v592, v14, v531, (uint64_t)&v576);
        uint64_t v423 = 0;
        v592.f32[0] = v421;
        uint64_t v424 = v537;
        do
        {
          for (nuint64_t n = 0; nn != 8; ++nn)
          {
            if (nn | v423) {
              v422->i32[nn] = *(_DWORD *)(v424 + 4 * nn);
            }
          }
          ++v423;
          v422 += 2;
          v424 += 64;
        }
        while (v423 != 4);
        uint64_t v426 = a6 + 4 * v414;
        goto LABEL_291;
      case 15:
        uint64_t v427 = 0;
        float v428 = *(float *)v8;
        float v429 = *(float *)(v8 + 4);
        float v430 = *(float *)(v8 + 32);
        float v431 = *(float *)v8 + v430;
        *(float *)&uint64_t v610 = (float)(v429 + v431) * 4.0;
        uint64_t v432 = &v610;
        uint64_t v433 = (_DWORD *)v8;
        do
        {
          uint64_t v434 = 0;
          int v435 = v433;
          do
          {
            if (v434 | v427) {
              *((_DWORD *)v432 + v434) = *v435;
            }
            ++v434;
            v435 += 2;
          }
          while (v434 != 4);
          ++v427;
          v432 += 2;
          v433 += 16;
        }
        while (v427 != 4);
        unint64_t v436 = 0;
        int32x4_t v437 = (float32x4_t *)&unk_24854E670;
        do
        {
          uint64_t v438 = 0;
          float32x4_t v439 = 0uLL;
          do
          {
            float32x4_t v439 = vmlaq_n_f32(v439, v437[v438], *(float *)((char *)&v610 + v438));
            v438 += 4;
          }
          while (v438 != 64);
          *(float32x4_t *)((char *)&v592 + 4 * v436) = v439;
          ++v437;
          _CF = v436 >= 0xC;
          v436 += 4;
        }
        while (!_CF);
        uint64_t v440 = 0;
        uint64_t v441 = 16;
        do
        {
          int8x16_t v442 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v592 + v440));
          *(int8x16_t *)(a6 + v441) = vextq_s8(v442, v442, 8uLL);
          v440 += 16;
          v441 += 32 * v231;
        }
        while (v440 != 64);
        uint64_t v443 = 0;
        v592.f32[0] = v431 - v429;
        v444 = &v592;
        unint64_t v445 = (__int32 *)v538;
        do
        {
          uint64_t v446 = 0;
          unint64_t v447 = v445;
          do
          {
            if (v446 | v443) {
              v444->i32[v446] = *v447;
            }
            ++v446;
            v447 += 2;
          }
          while (v446 != 4);
          ++v443;
          ++v444;
          v445 += 16;
        }
        while (v443 != 4);
        float32_t v448 = v428 - v430;
        uint64_t v449 = &v592;
        sub_248406194((uint64_t)&v592, 8 * v231, a6, (uint64_t)&v576);
        uint64_t v450 = 0;
        v592.f32[0] = v448;
        uint64_t v451 = v537;
        do
        {
          for (uint64_t i1 = 0; i1 != 8; ++i1)
          {
            if (i1 | v450) {
              v449->i32[i1] = *(_DWORD *)(v451 + 4 * i1);
            }
          }
          ++v450;
          v449 += 2;
          v451 += 64;
        }
        while (v450 != 4);
        uint64_t v426 = a6 + (v231 << 7);
LABEL_291:
        int64_t v608 = v14;
        uint64_t v609 = (float32x4_t *)v426;
        sub_24843CA0C(&v592, (uint64_t)&v608, &v576);
LABEL_292:
        unint64_t v11 = a3;
        goto LABEL_359;
      case 16:
        uint64_t v453 = 0;
        float v454 = *(float *)v8;
        float v455 = *(float *)(v8 + 4);
        float v456 = *(float *)(v8 + 32);
        float v457 = *(float *)v8 + v456;
        *(float *)&uint64_t v610 = (float)(v455 + v457) * 4.0;
        unint64_t v458 = &v610;
        unint64_t v459 = (_DWORD *)v8;
        do
        {
          uint64_t v460 = 0;
          unint64_t v461 = v459;
          do
          {
            if (v460 | v453) {
              *((_DWORD *)v458 + v460) = *v461;
            }
            ++v460;
            v461 += 2;
          }
          while (v460 != 4);
          ++v453;
          v458 += 2;
          v459 += 16;
        }
        while (v453 != 4);
        unint64_t v462 = 0;
        unint64_t v463 = (float32x4_t *)&unk_24854E670;
        do
        {
          uint64_t v464 = 0;
          float32x4_t v465 = 0uLL;
          do
          {
            float32x4_t v465 = vmlaq_n_f32(v465, v463[v464], *(float *)((char *)&v610 + v464));
            v464 += 4;
          }
          while (v464 != 64);
          *(float32x4_t *)((char *)&v592 + 4 * v462) = v465;
          ++v463;
          _CF = v462 >= 0xC;
          v462 += 4;
        }
        while (!_CF);
        unint64_t v466 = v231 << 7;
        uint64_t v467 = 32 * v231;
        for (uint64_t i2 = 48; i2 != -16; i2 -= 16)
        {
          *(float32x4_t *)(a6 + v466) = *(float32x4_t *)((char *)&v592 + i2);
          v466 += v467;
        }
        uint64_t v469 = 0;
        v592.f32[0] = v457 - v455;
        uint64_t v470 = &v592;
        uint64_t v471 = (__int32 *)v538;
        unint64_t v231 = v551;
        do
        {
          uint64_t v472 = 0;
          v473 = v471;
          do
          {
            if (v472 | v469) {
              v470->i32[v472] = *v473;
            }
            ++v472;
            v473 += 2;
          }
          while (v472 != 4);
          ++v469;
          ++v470;
          v471 += 16;
        }
        while (v469 != 4);
        float32_t v474 = v454 - v456;
        v475 = &v592;
        sub_248406194((uint64_t)&v592, v14, v531 + 4 * v467, (uint64_t)&v576);
        uint64_t v476 = 0;
        v592.f32[0] = v474;
        uint64_t v477 = v537;
        do
        {
          for (uint64_t i3 = 0; i3 != 8; ++i3)
          {
            if (i3 | v476) {
              v475->i32[i3] = *(_DWORD *)(v477 + 4 * i3);
            }
          }
          ++v476;
          v475 += 2;
          v477 += 64;
        }
        while (v476 != 4);
        goto LABEL_344;
      case 17:
        uint64_t v479 = 0;
        float v480 = *(float *)v8;
        float v481 = *(float *)(v8 + 4);
        float v482 = *(float *)(v8 + 32);
        float v483 = *(float *)v8 + v482;
        *(float *)&uint64_t v610 = (float)(v481 + v483) * 4.0;
        signed int v484 = &v610;
        v485 = (_DWORD *)v8;
        do
        {
          uint64_t v486 = 0;
          BOOL v487 = v485;
          do
          {
            if (v486 | v479) {
              *((_DWORD *)v484 + v486) = *v487;
            }
            ++v486;
            v487 += 2;
          }
          while (v486 != 4);
          ++v479;
          v484 += 2;
          v485 += 16;
        }
        while (v479 != 4);
        unint64_t v488 = 0;
        unsigned int v489 = (float32x4_t *)&unk_24854E670;
        do
        {
          uint64_t v490 = 0;
          float32x4_t v491 = 0uLL;
          do
          {
            float32x4_t v491 = vmlaq_n_f32(v491, v489[v490], *(float *)((char *)&v610 + v490));
            v490 += 4;
          }
          while (v490 != 64);
          *(float32x4_t *)((char *)&v592 + 4 * v488) = v491;
          ++v489;
          _CF = v488 >= 0xC;
          v488 += 4;
        }
        while (!_CF);
        uint64_t v492 = (v231 << 7) | 0x10;
        for (uint64_t i4 = 48; i4 != -16; i4 -= 16)
        {
          int8x16_t v494 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v592 + i4));
          *(int8x16_t *)(a6 + v492) = vextq_s8(v494, v494, 8uLL);
          v492 += 32 * v231;
        }
        uint64_t v495 = 0;
        v592.f32[0] = v483 - v481;
        BOOL v496 = &v592;
        char v497 = (__int32 *)v538;
        do
        {
          uint64_t v498 = 0;
          uint64_t v499 = v497;
          do
          {
            if (v498 | v495) {
              v496->i32[v498] = *v499;
            }
            ++v498;
            v499 += 2;
          }
          while (v498 != 4);
          ++v495;
          ++v496;
          v497 += 16;
        }
        while (v495 != 4);
        float32_t v500 = v480 - v482;
        uint64_t v501 = &v592;
        sub_248406194((uint64_t)&v592, 8 * v231, a6 + (v231 << 7), (uint64_t)&v576);
        uint64_t v502 = 0;
        v592.f32[0] = v500;
        uint64_t v503 = v537;
        unint64_t v231 = v551;
        do
        {
          for (uint64_t i5 = 0; i5 != 8; ++i5)
          {
            if (i5 | v502) {
              v501->i32[i5] = *(_DWORD *)(v503 + 4 * i5);
            }
          }
          ++v502;
          v501 += 2;
          v503 += 64;
        }
        while (v502 != 4);
LABEL_344:
        int64_t v608 = v14;
        uint64_t v609 = (float32x4_t *)a6;
        sub_24843CA0C(&v592, (uint64_t)&v608, &v576);
        unint64_t v11 = a3;
LABEL_345:
        int64_t v14 = (int64_t)a1;
        break;
      case 18:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v534;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CCC4, (uint64_t)&v576, (uint64_t)&v592, 64, v534);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 64);
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CCC4;
        uint64_t v282 = 64;
        goto LABEL_353;
      case 19:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v541;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CD38, (uint64_t)&v576, (uint64_t)&v592, 64, v541);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 64);
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CCC4;
        uint64_t v282 = 32;
        goto LABEL_355;
      case 20:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        v592.i64[0] = 32;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 32, 64);
        v576.i64[0] = 32;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 32;
        v592.i64[1] = v8;
        uint64_t v379 = v541;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CCC4, (uint64_t)&v576, (uint64_t)&v592, 32, v541);
        v576.i64[0] = 32;
        v576.i64[1] = v8;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 32);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        unint64_t v10 = a4;
        float v281 = sub_24843CD38;
        uint64_t v282 = 64;
        goto LABEL_357;
      case 21:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v535;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CC50, (uint64_t)&v576, (uint64_t)&v592, 128, v535);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 128);
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CC50;
        uint64_t v282 = 128;
        goto LABEL_353;
      case 22:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v542;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CCC4, (uint64_t)&v576, (uint64_t)&v592, 128, v542);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 128);
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CC50;
        uint64_t v282 = 64;
        goto LABEL_355;
      case 23:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        v592.i64[0] = 64;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 64, 128);
        v576.i64[0] = 64;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 64;
        v592.i64[1] = v8;
        uint64_t v379 = v542;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CC50, (uint64_t)&v576, (uint64_t)&v592, 64, v542);
        v576.i64[0] = 64;
        v576.i64[1] = v8;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 64);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        unint64_t v10 = a4;
        float v281 = sub_24843CCC4;
        uint64_t v282 = 128;
        goto LABEL_357;
      case 24:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 256;
        v576.i64[1] = v8;
        v592.i64[0] = 256;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v280 = v536;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CAC0, (uint64_t)&v576, (uint64_t)&v592, 256, v536);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 256;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 256, 256);
        v576.i64[0] = 256;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CAC0;
        uint64_t v282 = 256;
LABEL_353:
        uint64_t v505 = v280;
        unint64_t v10 = a4;
        goto LABEL_358;
      case 25:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 256;
        v576.i64[1] = v8;
        v592.i64[0] = 256;
        v592.i64[1] = (uint64_t)v575;
        uint64_t v377 = v543;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CC50, (uint64_t)&v576, (uint64_t)&v592, 256, v543);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        v592.i64[1] = v8;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 256);
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        unint64_t v11 = a3;
        float v281 = sub_24843CAC0;
        uint64_t v282 = 128;
LABEL_355:
        uint64_t v505 = v377;
        goto LABEL_358;
      case 26:
        uint64_t v610 = 8 * v231;
        v611 = (float32x4_t *)a6;
        v576.i64[0] = 256;
        v576.i64[1] = v8;
        v592.i64[0] = 128;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 128, 256);
        v576.i64[0] = 128;
        v576.i64[1] = (uint64_t)v575;
        v592.i64[0] = 128;
        v592.i64[1] = v8;
        uint64_t v379 = v543;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CAC0, (uint64_t)&v576, (uint64_t)&v592, 128, v543);
        v576.i64[0] = 128;
        v576.i64[1] = v8;
        v592.i64[0] = 256;
        v592.i64[1] = (uint64_t)v575;
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D648, (uint64_t)&v576, (uint64_t)&v592, 256, 128);
        v576.i64[0] = 256;
        v576.i64[1] = (uint64_t)v575;
        unint64_t v11 = a3;
        unint64_t v10 = a4;
        float v281 = sub_24843CC50;
        uint64_t v282 = 256;
LABEL_357:
        uint64_t v505 = v379;
LABEL_358:
        sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v281, (uint64_t)&v576, (uint64_t)&v610, v282, v505);
LABEL_359:
        int64_t v14 = (int64_t)a1;
LABEL_360:
        unint64_t v231 = v551;
        break;
      default:
        break;
    }
    uint64_t v506 = 0;
    uint64_t v256 = *(unsigned int *)v14;
    unint64_t v507 = byte_2485534EC[v256];
    uint64_t v508 = 8 * v507;
    if (v507 <= 1) {
      unint64_t v507 = 1;
    }
    if (byte_248553507[v256] <= 1u) {
      uint64_t v509 = 1;
    }
    else {
      uint64_t v509 = byte_248553507[v256];
    }
    float32x4_t v510 = 0uLL;
    do
    {
      for (uint64_t i6 = 0; i6 != v507; ++i6)
      {
        for (uint64_t i7 = 0; i7 != 8; ++i7)
        {
          uint64_t v513 = 0;
          char v514 = 1;
          do
          {
            char v515 = v514;
            float32x4_t v516 = vmulq_f32(*(float32x4_t *)(a6 + 32 * i6 + 4 * v508 * (i7 + 8 * v506) + 4 * v513), vabsq_f32(*(float32x4_t *)(*((void *)v10 + 5)+ 4 * (a2 + 8 * i6 + v513 + *((void *)v10 + 6) * (v11 + 8 * v506 + i7)))));
            float32x4_t v517 = vmulq_f32(v516, v516);
            float32x4_t v518 = vmulq_f32(v517, v517);
            float32x4_t v510 = vaddq_f32(v510, vmulq_f32(v518, v518));
            uint64_t v513 = 4;
            char v514 = 0;
          }
          while ((v515 & 1) != 0);
        }
      }
      ++v506;
    }
    while (v506 != v509);
    uint64_t v519 = v574;
    float32x4_t v563 = v510;
    float v520 = pow(*(long double *)&aFfffff[8 * v574], 8.0);
    float32x4_t v257 = vaddq_f32(v571, vmulq_n_f32(v563, v520));
    float v521 = v258 + (float)(v10[23] * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v565, v565)));
    unint64_t v522 = (unint64_t)vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v567, v567));
    unint64_t v523 = __clz(v522 + 1) ^ 0x3F;
    if (((v522 + 1) & v522) != 0) {
      unint64_t v524 = v523 + 1;
    }
    else {
      unint64_t v524 = v523;
    }
    unint64_t v525 = __clz(v524 + 18);
    uint64_t v526 = v525 ^ 0x3F;
    unint64_t v527 = 64 - v525;
    if (((v524 + 18) & (v524 + 17)) != 0) {
      uint64_t v528 = v527;
    }
    else {
      uint64_t v528 = v526;
    }
    float v258 = v521 + (float)(v10[24] * (float)(v524 + v528 + 1));
    float v260 = (float32x4_t *)((char *)v568 + v556);
    ++v574;
    _Q5 = v553;
  }
  while (v519 != 2);
  float v529 = pow((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v257, v257)) / (float)v548), 0.125)
       * (double)v548
       / v558;
  return (float)(v258 * a8) + (float)(v10[22] * v529);
}

double sub_24843C7DC(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v5 = a3 + 8;
  uint64_t v9 = 8;
  unint64_t v10 = a3;
  sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843D9A4, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  uint64_t v9 = 8;
  unint64_t v10 = a3;
  uint64_t v7 = 4;
  uint64_t v8 = a2;
  sub_248405F04(&v9, &v7);
  uint64_t v9 = 4;
  unint64_t v10 = a3;
  sub_248408240(4, a2, &v9, v5);
  uint64_t v9 = 4;
  unint64_t v10 = a3;
  uint64_t v7 = 8;
  uint64_t v8 = a2;
  *(void *)&double result = sub_248407100(&v9, &v7).u64[0];
  return result;
}

uint64_t sub_24843C88C(uint64_t a1, float32x4_t *a2, int32x4_t *a3, uint64_t a4)
{
  unint64_t v6 = (float32x4_t *)(a4 + 64);
  uint64_t v17 = 4;
  uint64_t v18 = a3;
  sub_248408184(a1, a2, &v17, (float32x4_t *)(a4 + 64));
  int32x4_t v7 = a3[1];
  int32x4_t v8 = a3[2];
  int32x4_t v9 = a3[3];
  float32x2x2_t v10 = (float32x2x2_t)vzip1q_s32(*a3, v8);
  int32x4_t v11 = vzip1q_s32(v7, v9);
  float32x2x2_t v12 = (float32x2x2_t)vzip2q_s32(*a3, v8);
  int32x4_t v13 = vzip2q_s32(v7, v9);
  int64_t v14 = (float *)a4;
  vst2_f32(v14, v10);
  v14 += 4;
  *(int32x4_t *)int64_t v14 = vzip2q_s32((int32x4_t)v10, v11);
  uint64_t v15 = (float *)(a4 + 32);
  vst2_f32(v15, v12);
  *(int32x4_t *)(a4 + 48) = vzip2q_s32((int32x4_t)v12, v13);
  uint64_t v17 = 4;
  uint64_t v18 = a3;
  return sub_248408184(4, (float32x4_t *)a4, &v17, v6);
}

void *sub_24843C928(void *result, void *a2)
{
  unint64_t v2 = 0;
  do
  {
    uint64_t v3 = 0;
    char v4 = 1;
    do
    {
      uint64_t v5 = result[1];
      int32x4_t v6 = *(int32x4_t *)(v5 + 4 * *result * v2 + 4 * v3);
      int32x4_t v7 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 1) + 4 * v3);
      int32x4_t v8 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 2) + 4 * v3);
      int32x4_t v9 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 3) + 4 * v3);
      float32x2x2_t v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      int32x4_t v11 = vzip1q_s32(v7, v9);
      float32x2x2_t v12 = (float *)(a2[1] + 4 * *a2 * v3 + 4 * v2);
      uint64_t v13 = 4 * v2;
      float32x2x2_t v14 = (float32x2x2_t)vzip2q_s32(v6, v8);
      vst2_f32(v12, v10);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 1) + v13) = vzip2q_s32((int32x4_t)v10, v11);
      int32x4_t v15 = vzip2q_s32(v7, v9);
      uint64_t v16 = (float *)(a2[1] + 4 * *a2 * (v3 | 2) + 4 * v2);
      char v17 = v4;
      vst2_f32(v16, v14);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 3) + v13) = vzip2q_s32((int32x4_t)v14, v15);
      uint64_t v3 = 4;
      char v4 = 0;
    }
    while ((v17 & 1) != 0);
    BOOL v18 = v2 >= 0x1C;
    v2 += 4;
  }
  while (!v18);
  return result;
}

uint64_t sub_24843CA0C(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  int32x4_t v6 = a3 + 8;
  uint64_t v10 = 8;
  int32x4_t v11 = a1;
  uint64_t v8 = 4;
  int32x4_t v9 = a3;
  sub_248405F04(&v10, &v8);
  sub_248405FAC(a3, 4, a1, 4, v6);
  uint64_t v10 = 4;
  int32x4_t v11 = a1;
  uint64_t v8 = 8;
  int32x4_t v9 = a3;
  sub_248407100(&v10, &v8);
  uint64_t v10 = 8;
  int32x4_t v11 = a3;
  return sub_248405EEC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24843CE94, (uint64_t)&v10, a2, 8, (uint64_t)v6);
}

void sub_24843CAC0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    int32x4_t v9 = a4 + 256;
    uint64_t v10 = a4 + 128;
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v11 = 0;
      uint64_t v13 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      uint64_t v16 = (float32x4_t *)(v12 + v7);
      uint64_t v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        uint64_t v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 128);
      uint64_t v18 = v12 + 4 * v13;
      for (uint64_t i = 128; i != 256; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_248406858(a4, 4, a4, 4, v9);
      for (uint64_t j = 0; j != -127; --j)
        a4[j + 255] = vaddq_f32(a4[j + 255], a4[j + 254]);
      *uint64_t v10 = vmulq_f32(*v10, v27);
      sub_248406858(v10, 4, v10, 4, v9);
      uint64_t v22 = 0;
      uint64_t v23 = v15 + 1020 * v14;
      do
      {
        v21.i32[0] = dword_24854FBE0[v22];
        uint64_t v24 = &a4[v22];
        float32x4_t v25 = v24[128];
        float32x4_t v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 128);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_24843CC50(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406858((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CCC4(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406990((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CD38(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406AC4((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CDAC(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248405FAC((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CE20(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248406BF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CE94(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 4)
    {
      sub_248407054((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

void sub_24843CF08(void *a1, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&a4[256];
    uint64_t v10 = a4 + 512;
    uint64_t v11 = (uint64_t)&a4[384];
    uint64_t v12 = a4 + 1;
    float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = (float32x4_t *)(a1[1] + v7);
      uint64_t v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        uint64_t v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      uint64_t v16 = a4;
      for (uint64_t i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_24843D0F8(v9, v10);
      uint64_t v18 = a4;
      for (uint64_t j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (uint64_t k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_24854FBE0[k]);
      sub_24843D0F8(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      uint64_t v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      uint64_t v22 = a4;
      do
      {
        *uint64_t v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      uint64_t v23 = 0;
      uint64_t v24 = v12;
      do
      {
        *uint64_t v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (uint64_t m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

__n128 sub_24843D0F8(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = 2032; i != 1008; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_24843D234((uint64_t)a2, a2 + 128);
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)&a2[64];
  uint64_t v8 = 2032;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 1024);
  for (uint64_t j = 0; j != 64; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_24854FAE0[j]);
  sub_24843D234(v7, a2 + 128);
  uint64_t v10 = 0;
  a2[64] = vmlaq_f32(a2[65], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[64]);
  do
  {
    a2[v10 + 65] = vaddq_f32(a2[v10 + 65], a2[v10 + 66]);
    ++v10;
  }
  while (v10 != 62);
  uint64_t v11 = 0;
  uint64_t v12 = (_OWORD *)a1;
  do
  {
    *uint64_t v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 64);
  uint64_t v13 = 0;
  uint64_t v14 = (__n128 *)(a1 + 16);
  do
  {
    __n128 result = (__n128)a2[v13 + 64];
    *uint64_t v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 64);
  return result;
}

__n128 sub_24843D234(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = 1008; i != 496; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_24843D368((uint64_t)a2, a2 + 64);
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)&a2[32];
  uint64_t v8 = 1008;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 512);
  for (uint64_t j = 0; j != 32; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_24854FA60[j]);
  sub_24843D368(v7, a2 + 64);
  uint64_t v10 = 0;
  a2[32] = vmlaq_f32(a2[33], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[32]);
  do
  {
    a2[v10 + 33] = vaddq_f32(a2[v10 + 33], a2[v10 + 34]);
    ++v10;
  }
  while (v10 != 30);
  uint64_t v11 = 0;
  uint64_t v12 = (_OWORD *)a1;
  do
  {
    *uint64_t v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 32);
  uint64_t v13 = 0;
  uint64_t v14 = (__n128 *)(a1 + 16);
  do
  {
    __n128 result = (__n128)a2[v13 + 32];
    *uint64_t v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 32);
  return result;
}

__n128 sub_24843D368(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = 496; i != 240; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_2484084A4((uint64_t)a2, a2 + 32);
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)&a2[16];
  uint64_t v8 = 496;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 256);
  for (uint64_t j = 0; j != 16; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_24854F61C[j]);
  sub_2484084A4(v7, a2 + 32);
  uint64_t v10 = 0;
  a2[16] = vmlaq_f32(a2[17], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[16]);
  do
  {
    a2[v10 + 17] = vaddq_f32(a2[v10 + 17], a2[v10 + 18]);
    ++v10;
  }
  while (v10 != 14);
  uint64_t v11 = 0;
  uint64_t v12 = (_OWORD *)a1;
  do
  {
    *uint64_t v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 16);
  uint64_t v13 = 0;
  uint64_t v14 = (__n128 *)(a1 + 16);
  do
  {
    __n128 result = (__n128)a2[v13 + 16];
    *uint64_t v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 16);
  return result;
}

void sub_24843D49C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        uint64_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_24843D0F8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24843D568(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 1024);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        uint64_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_24843D234(a4, v10);
      for (uint64_t i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_24843D648(void *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 12;
    uint64_t v7 = 8;
    uint64_t v8 = 4;
    do
    {
      if (a4)
      {
        uint64_t v9 = 0;
        for (unint64_t i = 0; i < a4; i += 4)
        {
          uint64_t v11 = result[1];
          int32x4_t v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          int32x4_t v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          int32x4_t v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          int32x4_t v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          float32x2x2_t v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          int32x4_t v17 = vzip1q_s32(v13, v15);
          float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          int32x4_t v19 = vzip2q_s32(v13, v15);
          uint64_t v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          uint64_t v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          uint64_t v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_24843D72C(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 512);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_24843D368(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24843D7F8(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 128);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2484085D8(a4, v10);
      uint64_t v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_24843D8C4(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (float32x4_t *)(a4 + 256);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      uint64_t v11 = 0;
      int32x4_t v12 = (_OWORD *)(a1[1] + v8);
      uint64_t v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        int32x4_t v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2484084A4(a4, v10);
      for (uint64_t i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void *sub_24843D9A4(void *result, void *a2, unint64_t a3, float32x4_t *a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      uint64_t v14 = 0;
      float32x4_t v15 = (float32x4_t *)(result[1] + v4);
      uint64_t v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      uint64_t v17 = 0;
      float32x4_t v18 = *a4;
      float32x4_t v19 = a4[1];
      float32x4_t v21 = a4[2];
      float32x4_t v20 = a4[3];
      float32x4_t v22 = vaddq_f32(*a4, v20);
      float32x4_t v23 = vaddq_f32(v19, v21);
      float32x4_t v24 = vaddq_f32(v22, v23);
      float32x4_t v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      float32x4_t v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      float32x4_t v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      float32x4_t v28 = vaddq_f32(v26, v27);
      float32x4_t v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      float32x4_t v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_24843DA88(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t *a14)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (a1 == 4) {
    LODWORD(v18) = 10;
  }
  else {
    LODWORD(v18) = 19;
  }
  if (a1 == 4) {
    unsigned int v19 = 11;
  }
  else {
    unsigned int v19 = 20;
  }
  if (a1 == 4) {
    unsigned int v20 = 5;
  }
  else {
    unsigned int v20 = 18;
  }
  if (a1 == 2) {
    uint64_t v18 = 6;
  }
  else {
    uint64_t v18 = v18;
  }
  uint64_t v89 = v18;
  uint64_t v21 = v18 | 0x100000000;
  if (a1 == 2) {
    uint64_t v22 = 7;
  }
  else {
    uint64_t v22 = v19;
  }
  uint64_t v88 = v22;
  v92.i64[1] = v22 | 0x100000000;
  v93.i64[0] = v21;
  if (a1 == 2) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = v20;
  }
  v92.i64[0] = v23 | 0x100000000;
  unint64_t v24 = a6 + a4;
  uint64_t v26 = *(void *)(a11 + 16);
  uint64_t v25 = *(void *)(a11 + 24);
  unint64_t v27 = a5 + a3;
  unint64_t v28 = a5 + a3 + a1;
  if (sub_248438D7C((unsigned int *)a11, a5 + a3, a6 + a4, v28)
    || sub_248438D7C((unsigned int *)a11, v27, v24 + a1, v28)
    || sub_248438E14((unsigned int *)a11, v27, v24, v24 + a1)
    || sub_248438E14((unsigned int *)a11, v28, v24, v24 + a1))
  {
    return;
  }
  uint64_t v85 = a6;
  unint64_t v29 = a1 >> 1;
  uint64_t v84 = v25 + v26 * v24;
  uint64_t v30 = v25 + v26 * (v24 + (a1 >> 1));
  uint64_t v31 = a12;
  uint64_t v82 = v30;
  unint64_t v83 = v27 + (a1 >> 1);
  BOOL v32 = sub_248438E14((unsigned int *)a11, v83, v24, v24 + a1);
  unint64_t v81 = v24 + (a1 >> 1);
  BOOL v33 = sub_248438D7C((unsigned int *)a11, v27, v81, v28);
  unint64_t v34 = 0;
  v93.i64[1] = 0;
  uint64_t v94 = 0;
  uint64_t v35 = 32 * v85;
  uint64_t v36 = a5;
  uint64_t v37 = a12 + 32 * v85 + 4 * a5;
  do
  {
    unint64_t v38 = 0;
    do
    {
      v93.f32[2 * (v34 / v29) + 2 + v38 / v29] = *(float *)(v37 + 4 * v38) + v93.f32[2 * (v34 / v29) + 2 + v38 / v29];
      ++v38;
    }
    while (a1 != v38);
    ++v34;
    v37 += 32;
  }
  while (v34 != a1);
  if (!v32)
  {
    BOOL v43 = v33;
    if (v89 == *(unsigned __int8 *)(v84 + v27) >> 1)
    {
      float v40 = 3.4028e38;
      uint64_t v41 = a8;
    }
    else
    {
      uint64_t v41 = a8;
      float v40 = sub_248438EBC(&v93, 8 * v27, 8 * v24, a7, a8, a13, a14, a9);
    }
    if (v89 == *(unsigned __int8 *)(v84 + v83) >> 1) {
      float v39 = 3.4028e38;
    }
    else {
      float v39 = sub_248438EBC(&v93, 8 * v83, 8 * v24, a7, v41, a13, a14, a9);
    }
    BOOL v45 = v43;
    uint64_t v35 = 32 * v85;
    uint64_t v31 = a12;
    uint64_t v36 = a5;
    if (!v45) {
      goto LABEL_29;
    }
LABEL_42:
    float v44 = 3.4028e38;
    float v42 = 3.4028e38;
    goto LABEL_43;
  }
  float v39 = 3.4028e38;
  float v40 = 3.4028e38;
  uint64_t v41 = a8;
  if (v33) {
    goto LABEL_42;
  }
LABEL_29:
  if (v88 == *(unsigned __int8 *)(v84 + v27) >> 1) {
    float v42 = 3.4028e38;
  }
  else {
    float v42 = sub_248438EBC((float32x4_t *)&v92.u32[2], 8 * v27, 8 * v24, a7, v41, a13, a14, a9);
  }
  if (v88 == *(unsigned __int8 *)(v82 + v27) >> 1) {
    float v44 = 3.4028e38;
  }
  else {
    float v44 = sub_248438EBC((float32x4_t *)&v92.u32[2], 8 * v27, 8 * v81, a7, v41, a13, a14, a9);
  }
LABEL_43:
  if (a2) {
    float v46 = sub_248438EBC(&v92, 8 * v27, 8 * v24, a7, v41, a13, a14, a10);
  }
  else {
    float v46 = 3.4028e38;
  }
  if ((float)(v93.f32[2] + *(float *)&v94) >= v40) {
    float v47 = v40;
  }
  else {
    float v47 = v93.f32[2] + *(float *)&v94;
  }
  float v48 = v93.f32[3] + *((float *)&v94 + 1);
  if ((float)(v93.f32[3] + *((float *)&v94 + 1)) >= v39) {
    float v49 = v39;
  }
  else {
    float v49 = v93.f32[3] + *((float *)&v94 + 1);
  }
  float v50 = v47 + v49;
  if ((float)(v93.f32[2] + v93.f32[3]) >= v42) {
    float v51 = v42;
  }
  else {
    float v51 = v93.f32[2] + v93.f32[3];
  }
  float v52 = *(float *)&v94 + *((float *)&v94 + 1);
  if ((float)(*(float *)&v94 + *((float *)&v94 + 1)) >= v44) {
    float v53 = v44;
  }
  else {
    float v53 = *(float *)&v94 + *((float *)&v94 + 1);
  }
  float v54 = v51 + v53;
  if (v46 < v50 && v46 < v54)
  {
    sub_24840BD3C(a11, v27, v24, v23, 0);
    unsigned int v66 = byte_2485534EC[v23];
    if (v66 <= 1) {
      unsigned int v66 = 1;
    }
    size_t v67 = 4 * v66;
    if (byte_248553507[v23] <= 1u) {
      uint64_t v68 = 1;
    }
    else {
      uint64_t v68 = byte_248553507[v23];
    }
    unint64_t v69 = (char *)(v31 + v35 + 4 * v36);
    do
    {
      bzero(v69, v67);
      v69 += 32;
      --v68;
    }
    while (v68);
    float v44 = v46;
    goto LABEL_106;
  }
  if (v50 >= v54)
  {
    if (v42 < (float)(v93.f32[2] + v93.f32[3]))
    {
      sub_24840BD3C(a11, v27, v24, v88, 0);
      unsigned int v70 = byte_2485534EC[v88];
      if (v70 <= 1) {
        unsigned int v70 = 1;
      }
      size_t v71 = 4 * v70;
      uint64_t v72 = v31;
      if (byte_248553507[v88] <= 1u) {
        uint64_t v73 = 1;
      }
      else {
        uint64_t v73 = byte_248553507[v88];
      }
      uint64_t v74 = v72;
      long long v75 = (char *)(v72 + v35 + 4 * v36);
      do
      {
        bzero(v75, v71);
        v75 += 32;
        --v73;
      }
      while (v73);
      uint64_t v36 = a5;
      uint64_t v31 = v74;
      *(float *)(v74 + 4 * (a5 + 8 * v85)) = v42;
    }
    if (v44 < v52)
    {
      sub_24840BD3C(a11, v27, v81, v88, 0);
      uint64_t v76 = v29 + v85;
      unsigned int v77 = byte_2485534EC[v88];
      if (v77 <= 1) {
        unsigned int v77 = 1;
      }
      size_t v78 = 4 * v77;
      if (byte_248553507[v88] <= 1u) {
        uint64_t v79 = 1;
      }
      else {
        uint64_t v79 = byte_248553507[v88];
      }
      uint64_t v85 = v76;
      long long v80 = (char *)(v31 + 32 * v76 + 4 * v36);
      do
      {
        bzero(v80, v78);
        v80 += 32;
        --v79;
      }
      while (v79);
      goto LABEL_106;
    }
  }
  else
  {
    if (v40 < (float)(v93.f32[2] + *(float *)&v94))
    {
      sub_24840BD3C(a11, v27, v24, v89, 0);
      unsigned int v56 = byte_2485534EC[v89];
      if (v56 <= 1) {
        unsigned int v56 = 1;
      }
      size_t v57 = 4 * v56;
      uint64_t v58 = v36;
      if (byte_248553507[v89] <= 1u) {
        uint64_t v59 = 1;
      }
      else {
        uint64_t v59 = byte_248553507[v89];
      }
      uint64_t v60 = v31;
      uint64_t v61 = (char *)(v31 + v35 + 4 * v58);
      do
      {
        bzero(v61, v57);
        v61 += 32;
        --v59;
      }
      while (v59);
      uint64_t v36 = a5;
      uint64_t v31 = v60;
      *(float *)(v60 + 4 * (a5 + 8 * v85)) = v40;
    }
    if (v39 < v48)
    {
      sub_24840BD3C(a11, v83, v24, v89, 0);
      v36 += v29;
      unsigned int v62 = byte_2485534EC[v89];
      if (v62 <= 1) {
        unsigned int v62 = 1;
      }
      size_t v63 = 4 * v62;
      if (byte_248553507[v89] <= 1u) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = byte_248553507[v89];
      }
      float32x4_t v65 = (char *)(v31 + v35 + 4 * v36);
      do
      {
        bzero(v65, v63);
        v65 += 32;
        --v64;
      }
      while (v64);
      float v44 = v39;
LABEL_106:
      *(float *)(v31 + 4 * (v36 + 8 * v85)) = v44;
    }
  }
}

void sub_24843E158(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    unint64_t v2 = (void (*)(uint64_t, void))a1[1];
    if (v2)
    {
      v2(a1[2], *(void *)(v1 - 16));
    }
    else
    {
      uint64_t v3 = *(void **)(v1 - 16);
      free(v3);
    }
  }
}

unsigned int *sub_24843E1AC(unsigned int *result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_2483E8E1C(result, 1u);
    uint64_t v5 = sub_2483E8E1C(v3, 2u) + v4;
    a2[76] = v5 + sub_2483E8E1C(v3, 3u);
    uint64_t v6 = sub_2483E8E1C(v3, 0xCu);
    a2[77] = sub_2483E8E1C(v3, 0xDu) + v6;
    uint64_t v7 = sub_2483E8E1C(v3, 0xEu);
    uint64_t v8 = sub_2483E8E1C(v3, 0xFu) + v7;
    uint64_t v9 = sub_2483E8E1C(v3, 0x10u);
    a2[78] = v8 + v9 + sub_2483E8E1C(v3, 0x11u);
    a2[79] = sub_2483E8E1C(v3, 0);
    uint64_t v10 = sub_2483E8E1C(v3, 7u);
    a2[80] = sub_2483E8E1C(v3, 6u) + v10;
    uint64_t v11 = sub_2483E8E1C(v3, 9u);
    a2[81] = sub_2483E8E1C(v3, 8u) + v11;
    a2[82] = sub_2483E8E1C(v3, 4u);
    uint64_t v12 = sub_2483E8E1C(v3, 0xBu);
    a2[83] = sub_2483E8E1C(v3, 0xAu) + v12;
    a2[84] = sub_2483E8E1C(v3, 5u);
    uint64_t v13 = sub_2483E8E1C(v3, 0x14u);
    a2[85] = sub_2483E8E1C(v3, 0x13u) + v13;
    __n128 result = (unsigned int *)sub_2483E8E1C(v3, 0x12u);
    a2[86] = result;
  }
  return result;
}

uint64_t sub_24843E34C(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, float a5)
{
  float v5 = 1.0;
  if (a5 > 1.5414)
  {
    float v5 = (float)((float)(a5 + -1.5414) * -0.56391) + 1.0;
    if (v5 < 0.0) {
      float v5 = 0.0;
    }
  }
  uint64_t v6 = a3[3];
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(a4 + 16);
    uint64_t v9 = *(void *)(a4 + 24);
    uint64_t v11 = *a3;
    uint64_t v10 = a3[1];
    uint64_t v12 = a3[2];
    uint64_t v13 = (float *)(v9 + v10 * v8 + 4 * *a3);
    uint64_t v14 = 4 * (v8 >> 2);
    do
    {
      if (v12)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13;
        do
        {
          unint64_t v17 = *(unsigned __int8 *)(a2 + (v10 + v7) * result + v11 + v15);
          if (v17)
          {
            uint64_t v18 = 0;
            unint64_t v19 = v17 >> 1;
            unint64_t v20 = byte_248553507[v19];
            float v21 = *(float *)(v9 + (v10 + v7) * v8 + 4 * v11 + 4 * v15);
            unint64_t v22 = byte_2485534EC[v19];
            if (v22 <= 1) {
              uint64_t v23 = 1;
            }
            else {
              uint64_t v23 = byte_2485534EC[v19];
            }
            if (v20 <= 1) {
              uint64_t v24 = 1;
            }
            else {
              uint64_t v24 = v20;
            }
            float v25 = 0.0;
            uint64_t v26 = v16;
            do
            {
              unint64_t v27 = v26;
              uint64_t v28 = v23;
              do
              {
                float v29 = *v27++;
                float v30 = v29;
                float v25 = v25 + v29;
                if (v29 >= v21) {
                  float v21 = v30;
                }
                --v28;
              }
              while (v28);
              ++v18;
              uint64_t v26 = (float *)((char *)v26 + v14);
            }
            while (v18 != v24);
            unint64_t v31 = v22 * (unint64_t)v20;
            if (v31 > 3) {
              float v21 = (float)(v5 * v21) + (float)((float)(1.0 - v5) * (float)(v25 / (float)v31));
            }
            uint64_t v32 = 0;
            BOOL v33 = v16;
            do
            {
              unint64_t v34 = v33;
              uint64_t v35 = v23;
              do
              {
                *v34++ = v21;
                --v35;
              }
              while (v35);
              ++v32;
              BOOL v33 = (float *)((char *)v33 + v14);
            }
            while (v32 != v24);
          }
          ++v15;
          ++v16;
        }
        while (v15 != v12);
      }
      ++v7;
      uint64_t v13 = (float *)((char *)v13 + v8);
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_24843E4DC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2)
  {
    int v4 = a2;
    v9[0] = a3;
    v9[1] = a4;
    if (*(void *)result)
    {
      return (*(uint64_t (**)(void, uint64_t **, uint64_t (*)(uint64_t **, unint64_t), unint64_t (*)(uint64_t, unsigned int, int, double, double, double), void, uint64_t))result)(*(void *)(result + 8), v9, sub_24843E580, sub_24843E828, 0, a2);
    }
    else
    {
      __n128 result = sub_24843E580(v9, 1uLL);
      if (!result)
      {
        for (unsigned int i = 0; i != v4; ++i)
          __n128 result = sub_24843E828((uint64_t)v9, i, 0, v5, v6, v7);
      }
    }
  }
  return result;
}

uint64_t sub_24843E580(uint64_t **a1, unint64_t a2)
{
  uint64_t v3 = **a1;
  sub_2483EA250((uint64_t)&v30, 0x48u, a2);
  int v4 = v34;
  if (!v34)
  {
    uint64_t v6 = v31;
    uint64_t v5 = v32;
    uint64_t v32 = 0;
    uint64_t v7 = v33;
    *(_OWORD *)(v3 + 64) = v30;
    uint64_t v8 = *(void *)(v3 + 88);
    *(void *)(v3 + 80) = v6;
    *(void *)(v3 + 88) = v5;
    if (v8)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v8 - 24));
      free(*(void **)(v8 - 32));
    }
    *(void *)(v3 + 96) = v7;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3);
    BOOL v10 = a2 > v9;
    unint64_t v11 = a2 - v9;
    if (v10)
    {
      while (1)
      {
        sub_2483EA250((uint64_t)&v25, 0x12u, 0x12u);
        int v4 = v29;
        if (v29) {
          break;
        }
        uint64_t v12 = v27;
        uint64_t v13 = v28;
        uint64_t v27 = 0;
        unint64_t v14 = *(void *)(v3 + 8);
        unint64_t v15 = *(void *)(v3 + 16);
        if (v14 >= v15)
        {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *(void *)v3) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0x666666666666666) {
            sub_2483E92E8();
          }
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - *(void *)v3) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x333333333333333) {
            unint64_t v20 = 0x666666666666666;
          }
          else {
            unint64_t v20 = v18;
          }
          void v35[4] = v3 + 16;
          if (v20) {
            unint64_t v20 = (unint64_t)sub_248403444(v20);
          }
          else {
            uint64_t v21 = 0;
          }
          unint64_t v22 = v20 + 40 * v17;
          v35[0] = v20;
          v35[1] = v22;
          v35[3] = v20 + 40 * v21;
          *(_OWORD *)unint64_t v22 = v25;
          *(void *)(v22 + 16) = v26;
          *(void *)(v22 + 24) = v12;
          *(void *)(v22 + 32) = v13;
          v35[2] = v22 + 40;
          sub_24843F914((uint64_t *)v3, v35);
          unint64_t v16 = *(void *)(v3 + 8);
          sub_24841F7CC((uint64_t)v35);
        }
        else
        {
          *(_OWORD *)unint64_t v14 = v25;
          *(void *)(v14 + 16) = v26;
          *(void *)(v14 + 24) = v12;
          *(void *)(v14 + 32) = v13;
          unint64_t v16 = v14 + 40;
          *(void *)(v3 + 8) = v14 + 40;
        }
        *(void *)(v3 + 8) = v16;
        if (!--v11) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      int v4 = 0;
    }
    if (!v34)
    {
      uint64_t v23 = v32;
      uint64_t v32 = 0;
      if (v23)
      {
        atomic_fetch_add(&qword_26931BDF8, -*(void *)(v23 - 24));
        free(*(void **)(v23 - 32));
      }
    }
  }
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_24843E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  if (!v21 || (atomic_fetch_add(&qword_26931BDF8, -*(void *)(v21 - 24)), free(*(void **)(v21 - 32)), !a15))
  {
    if (a13)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a13 - 24));
      free(*(void **)(a13 - 32));
    }
  }
  if (!a21)
  {
    if (a19)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(a19 - 24));
      free(*(void **)(a19 - 32));
    }
  }
  _Unwind_Resume(a1);
}

unint64_t sub_24843E828(uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6)
{
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = **(void **)v9;
  unint64_t v11 = (v10 + 7) >> 3;
  unint64_t v12 = a2 / v11;
  uint64_t v13 = *(uint64_t **)(v9 + 48);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  unint64_t v16 = *v13 + ((a2 % v11) << 6);
  unint64_t v17 = v16 - 2;
  unint64_t v18 = a2 % v11;
  unint64_t v281 = 8 * v12;
  unint64_t v19 = 8 * v12 + 8;
  if (v18) {
    unint64_t v17 = *v13 + ((a2 % v11) << 6);
  }
  if (**(void **)(v9 + 8) < v19) {
    unint64_t v19 = **(void **)(v9 + 8);
  }
  unint64_t v278 = 8 * v18;
  if (v10 >= 8 * v18 + 8) {
    uint64_t v20 = 8 * v18 + 8;
  }
  else {
    uint64_t v20 = **(void **)v9;
  }
  unint64_t v21 = v20 - 8 * v18;
  float32x4_t v274 = *(uint64_t **)(v9 + 16);
  float v265 = **(float **)(v9 + 24);
  unint64_t v22 = *(unsigned int **)(v9 + 40);
  float v257 = **(float **)(v9 + 32);
  uint64_t v256 = **(void **)(v9 + 56);
  unint64_t v24 = *v22;
  unint64_t v23 = v22[1];
  float32x4_t v272 = v22;
  unint64_t v25 = v12 << 6;
  unint64_t v26 = v14 + (v12 << 6);
  unint64_t v266 = v19 - 8 * v12;
  if (v15) {
    unint64_t v27 = v17;
  }
  else {
    unint64_t v27 = v18 << 6;
  }
  unint64_t v284 = v20;
  uint64_t v28 = v13[2];
  uint64_t v29 = v13[3];
  unint64_t v264 = v21;
  unint64_t v262 = *v13 + ((a2 % v11) << 6);
  _CF = 8 * v20 != v28 || v28 + v15 >= v24;
  uint64_t v31 = v16 + 8 * v21 + 2;
  float v258 = *(uint64_t **)(v9 + 48);
  unint64_t v259 = v16 + 8 * v21;
  if (_CF) {
    uint64_t v31 = v16 + 8 * v21;
  }
  unint64_t v271 = v31;
  unint64_t v32 = v26 - 2;
  unint64_t v260 = v26;
  unint64_t v261 = v26 + 8 * v266;
  if (v11 <= a2) {
    unint64_t v32 = v26;
  }
  if (v14) {
    unint64_t v25 = v32;
  }
  unint64_t v273 = v19;
  unint64_t v282 = v23;
  BOOL v33 = 8 * v19 != v29 || v29 + v14 >= v23;
  unint64_t v34 = v26 + 8 * v266 + 2;
  if (v33) {
    unint64_t v34 = v26 + 8 * v266;
  }
  unint64_t v270 = v34;
  if (v25 < v34)
  {
    uint64_t v268 = v272[8];
    uint64_t v269 = *(void *)(**(void **)(v9 + 64) + 16);
    uint64_t v35 = *(void *)(**(void **)(v9 + 64) + 24) + v25 * v269 + 4 * v27;
    uint64_t v276 = v272[2];
    uint64_t v36 = v268 + v25 * v276 + 4 * v27;
    uint64_t v267 = v268 + 4 * v27;
    float v37 = -0.25;
    float32x2_t v38 = (float32x2_t)vdup_n_s32(0x42EFD02Bu);
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x431D2FBDu);
    *(int32x2_t *)v6.f32 = vdup_n_s32(0x40ACF18Eu);
    do
    {
      if (v25) {
        unint64_t v41 = v25 - 1;
      }
      else {
        unint64_t v41 = 0;
      }
      unint64_t v279 = v25 + 1;
      if (v25 + 1 >= v282) {
        unint64_t v42 = v25;
      }
      else {
        unint64_t v42 = v25 + 1;
      }
      if (v27 < v271)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v267 + v276 * v41;
        uint64_t v45 = v268 + v25 * v276;
        uint64_t v46 = v267 + v42 * v276;
        unint64_t v47 = v27;
        do
        {
          uint64_t v48 = v27 + v43;
          if (v27 + v43 + 1 < v24) {
            ++v48;
          }
          float v49 = (float *)(v36 + 4 * v43);
          *(float *)&a6 = *v49 + 0.019;
          float v50 = (float)((float)((float)(*(float *)(v46 + 4 * v43) + *(float *)(v44 + 4 * v43)) + v49[-(v47 != 0)])
                      + *(float *)(v45 + 4 * v48))
              * v37;
          float32x2_t v51 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0), 0);
          float32x2_t v52 = vmul_f32(v51, v51);
          ++v47;
          float v53 = log1pf(fabsf((float)(*v49 + v50)* vdiv_f32(vmla_f32(*(float32x2_t *)v6.f32, v52, vmul_f32(v51, v40)), vmla_f32(v39, v38, v52)).f32[0]));
          float v37 = -0.25;
          *(float *)(v35 + 4 * v43++) = 1.0 / (float)(v53 + 0.01);
        }
        while (v27 - v271 + v43);
      }
      v35 += v269;
      v36 += v276;
      unint64_t v25 = v279;
    }
    while (v279 != v270);
  }
  if (v262) {
    unint64_t v54 = v262 - 4;
  }
  else {
    unint64_t v54 = 0;
  }
  if (v259 == v24) {
    unint64_t v55 = v259;
  }
  else {
    unint64_t v55 = v259 + 4;
  }
  unint64_t v56 = v260 - 4;
  if (!v260) {
    unint64_t v56 = 0;
  }
  if (v261 == v282) {
    unint64_t v57 = v261;
  }
  else {
    unint64_t v57 = v261 + 4;
  }
  uint64_t v58 = *v274;
  uint64_t v59 = (_DWORD *)(*v274 + 40 * a3);
  unint64_t result = (v55 - v54) >> 2;
  unint64_t v61 = (v57 - v56) >> 2;
  *uint64_t v59 = result;
  v59[1] = v61;
  if (v57 > v56)
  {
    unint64_t v62 = 0;
    if (result <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = (v55 - v54) >> 2;
    }
    float32x2_t v64 = (float32x2_t)vdup_n_s32(0x42EFD02Bu);
    float32x2_t v65 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
    float32x2_t v66 = (float32x2_t)vdup_n_s32(0x431D2FBDu);
    float32x2_t v67 = (float32x2_t)vdup_n_s32(0x40ACF18Eu);
    float32x2_t v68 = (float32x2_t)vdup_n_s32(0x480E0877u);
    float32x4_t v69 = (float32x4_t)vdupq_n_s32(0x3C9BA5E3u);
    float32x2_t v70 = (float32x2_t)vdup_n_s32(0x41DFC37Bu);
    __asm { FMOV            V19.4S, #0.25 }
    float32x4_t v75 = (float32x4_t)vdupq_n_s32(0x42EFD02Bu);
    float32x4_t v76 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
    float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x431D2FBDu);
    float32x4_t v78 = (float32x4_t)vdupq_n_s32(0x40ACF18Eu);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
    float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x480E0877u);
    float32x4_t v80 = (float32x4_t)vdupq_n_s32(0x41DFC37Bu);
    unint64_t v81 = v56;
    do
    {
      if (v81) {
        unint64_t v82 = v81 - 1;
      }
      else {
        unint64_t v82 = 0;
      }
      unint64_t v83 = v81 + 1;
      if (v81 + 1 >= v282) {
        unint64_t v84 = v81;
      }
      else {
        unint64_t v84 = v81 + 1;
      }
      uint64_t v85 = v272[2];
      uint64_t v86 = v272[8];
      char v87 = (float *)(v86 + v85 * v81);
      uint64_t v88 = v85 * v82;
      uint64_t v89 = v84 * v85;
      float v90 = (float *)(v86 + v84 * v85);
      uint64_t v91 = v274[11];
      uint64_t v92 = v274[10] * a3;
      if (v54)
      {
        uint64_t v93 = v81 & 3;
        uint64_t v94 = v262 - 4;
      }
      else
      {
        v8.f32[0] = *v87 + 0.019;
        float32x2_t v95 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0), 0);
        float32x2_t v96 = vmul_f32(v95, v95);
        *(float32x2_t *)v6.f32 = vmla_f32(v65, v64, v96);
        *(float32x2_t *)v8.f32 = vdiv_f32(vmla_f32(v67, v96, vmul_f32(v95, v66)), *(float32x2_t *)v6.f32);
        float v97 = (float)(*v87
                    - (float)((float)((float)((float)(*v90 + *(float *)(v86 + v88)) + *v87) + v87[v24 > 1])
                            * 0.25))
            * v8.f32[0];
        float v98 = v97 * v97;
        if (v98 >= 0.2) {
          float v98 = 0.2;
        }
        float v99 = 0.25 * vsqrt_f32(vmla_n_f32(v70, v68, v98)).f32[0];
        uint64_t v93 = v81 & 3;
        if ((v81 & 3) != 0) {
          float v99 = v99 + *(float *)(v91 + v92);
        }
        *(float *)(v91 + v92) = v99;
        uint64_t v94 = 1;
      }
      if (v94 + 5 >= v55)
      {
        unint64_t v108 = v94;
      }
      else
      {
        float v100 = (float32x4_t *)(v91 - 4 * v54 + v92 + 4 * v94);
        float v101 = (float32x4_t *)(v86 + v88 + 4 * v94);
        float v102 = (float32x4_t *)(v86 + v89 + 4 * v94);
        uint64_t v103 = v86 + v85 * v81 + 4 * v94;
        do
        {
          float32x4_t v104 = vmaxnmq_f32(vaddq_f32(*(float32x4_t *)v103, v69), (float32x4_t)0);
          float32x4_t v105 = vmulq_f32(v104, v104);
          float32x4_t v6 = vmlaq_f32(v76, v75, v105);
          float32x4_t v8 = vdivq_f32(vmlaq_f32(v78, v105, vmulq_f32(v104, v77)), v6);
          float32x4_t v106 = vmulq_f32(v8, vsubq_f32(*(float32x4_t *)v103, vmulq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v103 + 4), *(float32x4_t *)(v103 - 4)), vaddq_f32(*v102, *v101)), _Q19)));
          float32x4_t v107 = vmulq_f32(vsqrtq_f32(vmlaq_f32(v80, v79, vminnmq_f32(vmulq_f32(v106, v106), v7))), _Q19);
          if (v93) {
            float32x4_t v107 = vaddq_f32(v107, *v100);
          }
          *v100++ = v107;
          unint64_t v108 = v94 + 4;
          unint64_t v109 = v94 + 9;
          ++v101;
          ++v102;
          v103 += 16;
          v94 += 4;
        }
        while (v109 < v55);
      }
      if (v108 < v55)
      {
        uint64_t v110 = v91 - 4 * v54 + v92;
        uint64_t v111 = v86 + v85 * v82;
        do
        {
          unint64_t v112 = v108 + 1;
          if (v108 + 1 >= v24) {
            unint64_t v113 = v108;
          }
          else {
            unint64_t v113 = v108 + 1;
          }
          uint64_t v114 = &v87[v108];
          v8.f32[0] = *v114 + 0.019;
          float32x2_t v115 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0), 0);
          float32x2_t v116 = vmul_f32(v115, v115);
          *(float32x2_t *)v6.f32 = vmla_f32(v65, v64, v116);
          *(float32x2_t *)v8.f32 = vdiv_f32(vmla_f32(v67, v116, vmul_f32(v115, v66)), *(float32x2_t *)v6.f32);
          float v117 = (float)(*v114
                       - (float)((float)((float)((float)(v90[v108] + *(float *)(v111 + 4 * v108)) + v114[-(v108 != 0)])
                                       + v87[v113])
                               * 0.25))
               * v8.f32[0];
          float v118 = v117 * v117;
          if (v118 >= 0.2) {
            float v118 = 0.2;
          }
          float v119 = 0.25 * vsqrt_f32(vmla_n_f32(v70, v68, v118)).f32[0];
          if (v93) {
            float v119 = v119 + *(float *)(v110 + 4 * v108);
          }
          *(float *)(v110 + 4 * v108++) = v119;
        }
        while (v55 != v112);
      }
      if (v93 == 3 && v55 - v54 >= 4)
      {
        float v120 = (float *)(*(void *)(*v274 + 40 * a3 + 24) + *(void *)(*v274 + 40 * a3 + 16) * (v62 >> 2));
        uint64_t v121 = (float *)(v91 + v92 + 8);
        uint64_t v122 = v63;
        do
        {
          float v123 = *(v121 - 2) + *(v121 - 1);
          float v124 = *v121;
          float v125 = v121[1];
          v121 += 4;
          *v120++ = (float)((float)(v123 + v124) + v125) * 0.25;
          --v122;
        }
        while (v122);
      }
      ++v62;
      unint64_t v81 = v83;
    }
    while (v83 != v57);
    uint64_t v58 = *v274;
    uint64_t v126 = (unsigned int *)(*v274 + 40 * a3);
    unint64_t result = *v126;
    LODWORD(v61) = v126[1];
  }
  BOOL v127 = (v54 & 7) != 0;
  BOOL v128 = (v56 & 7) != 0;
  float v129 = (float)(2.0 - v265) * 0.5;
  if (v265 >= 2.0) {
    float v129 = 0.0;
  }
  if (v273 != v281)
  {
    unint64_t v130 = 0;
    unint64_t v131 = result;
    float v132 = (float)(v129 * 0.0) + 0.125;
    float v133 = (float)(v129 * -0.1) + 0.1;
    float v134 = (float)(v129 * -0.09) + 0.09;
    float v135 = (float)(v129 * -0.06) + 0.06;
    float v136 = 0.2996 / (float)(v135 + (float)(v134 + (float)(v132 + v133)));
    float v137 = v132 * v136;
    float v138 = v133 * v136;
    float v139 = v134 * v136;
    float v140 = v135 * v136;
    uint64_t v141 = v58 + 40 * a3;
    unint64_t result = *(void *)(v141 + 16);
    uint64_t v142 = *(void *)(v141 + 24);
    uint64_t v144 = v274[5];
    uint64_t v143 = v274[6];
    uint64_t v145 = v142 + 4 * v127;
    uint64_t v146 = v142 + result * v128 + 4 * v127;
    uint64_t v147 = v128;
    do
    {
      if (v147) {
        uint64_t v148 = v147 - 1;
      }
      else {
        uint64_t v148 = 0;
      }
      unint64_t v149 = v130 + v128;
      if (v130 + v128) {
        uint64_t v150 = v130 + v128 - 1;
      }
      else {
        uint64_t v150 = 0;
      }
      if (v149 + 1 >= v61) {
        unint64_t v151 = v130 + v128;
      }
      else {
        unint64_t v151 = v149 + 1;
      }
      if (v284 != v278)
      {
        unint64_t v152 = 0;
        uint64_t v153 = v145 + result * v148;
        uint64_t v154 = v142 + v150 * result;
        uint64_t v155 = v142 + v149 * result;
        unint64_t v156 = v151 * result;
        uint64_t v157 = v142 + v151 * result;
        uint64_t v158 = v143 + (v281 + (v130 >> 1)) * v144 + 4 * v278;
        uint64_t v159 = v145 + v156;
        uint64_t v160 = v127;
        do
        {
          BOOL v161 = v160 != 0;
          unint64_t v162 = v127 + v152;
          if (v127 + v152 + 1 < v131) {
            ++v162;
          }
          float v163 = (float *)(v146 + 4 * v152);
          float v164 = *v163;
          float v166 = *(float *)(v155 + 4 * v162);
          float v287 = v163[-v161];
          float v165 = v287;
          *(float *)float v288 = v164;
          float v167 = *(float *)(v153 - 4 * v161 + 4 * v152);
          float v285 = v167;
          float v286 = v166;
          if (v164 <= v287)
          {
            float v168 = v287;
            float v165 = v164;
          }
          else
          {
            float v287 = v164;
            *(float *)float v288 = v165;
            float v168 = v164;
          }
          if (v165 <= v166)
          {
            float v169 = v166;
            float v166 = v165;
          }
          else
          {
            *(float *)float v288 = v166;
            float v286 = v165;
            float v169 = v165;
          }
          if (v166 <= v167)
          {
            float v170 = v166;
            float v166 = v167;
          }
          else
          {
            *(float *)float v288 = v167;
            float v285 = v166;
            float v170 = v167;
          }
          if (v168 <= v169)
          {
            float v171 = v169;
            float v169 = v168;
          }
          else
          {
            float v286 = v168;
            float v287 = v169;
            float v171 = v168;
          }
          if (v169 <= v166)
          {
            float v172 = v169;
            float v169 = v166;
          }
          else
          {
            float v287 = v166;
            float v285 = v169;
            float v172 = v166;
          }
          if (v171 <= v169)
          {
            float v173 = v171;
            float v171 = v169;
          }
          else
          {
            float v285 = v171;
            float v286 = v169;
            float v173 = v169;
          }
          float v174 = *(float *)(v153 + 4 * v152);
          if (v171 > v174)
          {
            if (v170 <= v174)
            {
              if (v172 <= v174)
              {
                if (v173 <= v174)
                {
                  uint64_t v175 = &v285;
                }
                else
                {
                  float v285 = v173;
                  uint64_t v175 = &v286;
                }
              }
              else
              {
                float v285 = v173;
                float v286 = v172;
                uint64_t v175 = &v287;
              }
            }
            else
            {
              float v285 = v173;
              float v286 = v172;
              uint64_t v175 = (float *)v288;
              float v287 = v170;
            }
            *uint64_t v175 = v174;
            float v171 = v285;
            float v170 = *(float *)v288;
          }
          float v176 = *(float *)(v154 + 4 * v162);
          if (v171 > v176)
          {
            if (v170 <= v176)
            {
              if (v287 <= v176)
              {
                if (v286 <= v176)
                {
                  unsigned int v177 = &v285;
                }
                else
                {
                  float v285 = v286;
                  unsigned int v177 = &v286;
                }
              }
              else
              {
                float v285 = v286;
                float v286 = v287;
                unsigned int v177 = &v287;
              }
            }
            else
            {
              float v285 = v286;
              float v286 = v287;
              float v287 = v170;
              unsigned int v177 = (float *)v288;
            }
            *unsigned int v177 = v176;
            float v171 = v285;
            float v170 = *(float *)v288;
          }
          float v178 = *(float *)(v159 - 4 * v161 + 4 * v152);
          if (v171 > v178)
          {
            if (v170 <= v178)
            {
              if (v287 <= v178)
              {
                if (v286 <= v178)
                {
                  uint64_t v179 = &v285;
                }
                else
                {
                  float v285 = v286;
                  uint64_t v179 = &v286;
                }
              }
              else
              {
                float v285 = v286;
                float v286 = v287;
                uint64_t v179 = &v287;
              }
            }
            else
            {
              float v285 = v286;
              float v286 = v287;
              float v287 = v170;
              uint64_t v179 = (float *)v288;
            }
            *uint64_t v179 = v178;
            float v171 = v285;
            float v170 = *(float *)v288;
          }
          float v180 = *(float *)(v159 + 4 * v152);
          if (v171 > v180)
          {
            if (v170 <= v180)
            {
              if (v287 <= v180)
              {
                if (v286 <= v180)
                {
                  uint64_t v181 = &v285;
                }
                else
                {
                  float v285 = v286;
                  uint64_t v181 = &v286;
                }
              }
              else
              {
                float v285 = v286;
                float v286 = v287;
                uint64_t v181 = &v287;
              }
            }
            else
            {
              float v285 = v286;
              float v286 = v287;
              float v287 = v170;
              uint64_t v181 = (float *)v288;
            }
            *uint64_t v181 = v180;
            float v171 = v285;
            float v170 = *(float *)v288;
          }
          float v182 = *(float *)(v157 + 4 * v162);
          if (v171 > v182)
          {
            if (v170 <= v182)
            {
              if (v287 <= v182)
              {
                if (v286 <= v182)
                {
                  uint64_t v183 = &v285;
                }
                else
                {
                  float v285 = v286;
                  uint64_t v183 = &v286;
                }
              }
              else
              {
                float v285 = v286;
                float v286 = v287;
                uint64_t v183 = &v287;
              }
            }
            else
            {
              float v285 = v286;
              float v286 = v287;
              float v287 = v170;
              uint64_t v183 = (float *)v288;
            }
            *uint64_t v183 = v182;
            float v170 = *(float *)v288;
            float v171 = v285;
          }
          float v184 = (float)((float)((float)(v138 * v287) + (float)(v137 * v170)) + (float)(v139 * v286))
               + (float)(v140 * v171);
          unint64_t v185 = v152 >> 1;
          if ((v152 | v130)) {
            float v184 = v184 + *(float *)(v158 + 4 * v185);
          }
          *(float *)(v158 + 4 * v185) = v184;
          ++v152;
          ++v160;
        }
        while (2 * v264 != v152);
      }
      ++v130;
      ++v147;
      v146 += result;
    }
    while (v130 != 2 * v266);
    uint64_t v186 = 0;
    uint64_t v188 = *(void *)(v256 + 16);
    uint64_t v187 = *(void *)(v256 + 24);
    do
    {
      if (v284 != v278)
      {
        uint64_t v189 = 0;
        unint64_t v190 = v264;
        do
        {
          *(float *)(v187 + (v186 + v281) * v188 + 4 * v278 + 4 * v189) = 1.0
                                                                        / (float)(*(float *)(v143
                                                                                           + (v186 + v281) * v144
                                                                                           + 4 * v278
                                                                                           + 4 * v189)
                                                                                + 0.001);
          ++v189;
          --v190;
        }
        while (v190);
      }
      ++v186;
    }
    while (v186 != v266);
  }
  float v191 = 1.0;
  if (v265 >= 2.0)
  {
    float v191 = (float)((float)(v265 + -2.0) / -12.0) + 1.0;
    if (v191 < 0.0) {
      float v191 = 0.0;
    }
  }
  if (v273 > v281)
  {
    float v283 = v257 * v191;
    float v192 = (float)(v257 * 0.48) * (float)(1.0 - v191);
    uint64_t v280 = v274[6];
    uint64_t v277 = v274[5];
    uint64_t v194 = v272[7];
    uint64_t v193 = v272[8];
    uint64_t v195 = *v258;
    uint64_t v275 = v258[1];
    uint64_t v197 = v272[2];
    uint64_t v196 = v272[3];
    float32x4_t v198 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    float32x4_t v199 = (float32x4_t)vdupq_n_s32(0x406DF31Du);
    float32x4_t v200 = (float32x4_t)vdupq_n_s32(0x3CA8C6FBu);
    float32x4_t v201 = (float32x4_t)vdupq_n_s32(0x43974C46u);
    float32x4_t v202 = (float32x4_t)vdupq_n_s32(0x3E23D70Au);
    float32x4_t v203 = (float32x4_t)vdupq_n_s32(0x42EFD02Bu);
    float32x4_t v204 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
    float32x4_t v205 = (float32x4_t)vdupq_n_s32(0x431D2FBDu);
    float32x4_t v206 = (float32x4_t)vdupq_n_s32(0x40ACF18Eu);
    v207.i64[0] = 0x3F0000003F000000;
    v207.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V21.4S, #1.0 }
    float32x4_t v209 = (float32x4_t)vdupq_n_s32(0x40D96B1Cu);
    float32x4_t v210 = (float32x4_t)vdupq_n_s32(0x418ACD8Cu);
    float32x4_t v211 = (float32x4_t)vdupq_n_s32(0x3F6DF31Du);
    unint64_t result = 3235206485;
    v7.i32[0] = 1062008135;
    float32x4_t v212 = (float32x4_t)vdupq_n_s32(0x411788B3u);
    float32x4_t v213 = (float32x4_t)vdupq_n_s32(0xBF43C361);
    int32x4_t v214 = vdupq_n_s32(0xC0D55555);
    do
    {
      if (v284 > v278)
      {
        unint64_t v215 = v278;
        uint64_t v216 = v280 + v281 * v277;
        uint64_t v217 = v275 + 8 * v281;
        do
        {
          uint64_t v218 = 0;
          v6.i32[0] = *(_DWORD *)(v216 + 4 * v215);
          float32x4_t v219 = vmaxnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v6, v7), 0), v198);
          float32x4_t v220 = vmlaq_f32(v199, v219, v219);
          float32x4_t v221 = 0uLL;
          do
          {
            uint64_t v222 = 0;
            uint64_t v223 = (v218 + v217) * v194;
            uint64_t v224 = v193 + v223 + 4 * v195 + 32 * v215;
            uint64_t v225 = v194 + v223;
            if (v218 == 7) {
              uint64_t v225 = v223;
            }
            uint64_t v226 = v193 + 4 * v195 + 32 * v215 + v225;
            char v227 = 1;
            do
            {
              char v228 = v227;
              float32x4_t v221 = vaddq_f32(vminnmq_f32(vabdq_f32(*(float32x4_t *)(v224 + 1 * v222), *(float32x4_t *)(v226 + 1 * v222)), v200), vaddq_f32(v221, (float32x4_t)vandq_s8((int8x16_t)xmmword_24854EA70[v222], (int8x16_t)vminnmq_f32(vabdq_f32(*(float32x4_t *)(v224 + 1 * v222), *(float32x4_t *)(v224 + 1 * v222 + 4)), v200))));
              uint64_t v222 = 1;
              char v227 = 0;
            }
            while ((v228 & 1) != 0);
            ++v218;
          }
          while (v218 != 8);
          uint64_t v229 = 0;
          float32x4_t v230 = vaddq_f32(v219, v201);
          float v231 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v221, v221));
          float32x4_t v232 = 0uLL;
          do
          {
            uint64_t v233 = 0;
            unint64_t result = v196 + (v229 + v217) * v197 + 4 * v195 + 32 * v215;
            char v234 = 1;
            do
            {
              uint64_t v235 = 4 * v233;
              float32x4_t v236 = *(float32x4_t *)(result + v235);
              char v237 = v234;
              float32x4_t v238 = vaddq_f32(*(float32x4_t *)(v193 + (v229 + v217) * v194 + 4 * v195 + 32 * v215 + v235), v202);
              float32x4_t v239 = vsubq_f32(v238, v236);
              float32x4_t v240 = vaddq_f32(v238, v236);
              float32x4_t v241 = vmaxnmq_f32(v239, (float32x4_t)0);
              float32x4_t v242 = vmulq_f32(v241, v241);
              float32x4_t v243 = vmlaq_f32(v206, v242, vmulq_f32(v241, v205));
              float32x4_t v244 = vmaxnmq_f32(v240, (float32x4_t)0);
              float32x4_t v245 = vmulq_f32(v244, v244);
              float32x4_t v232 = vaddq_f32(v232, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v204, v203, v242), v243), vdivq_f32(vmlaq_f32(v204, v203, v245), vmlaq_f32(v206, v245, vmulq_f32(v244, v205)))), v207));
              uint64_t v233 = 4;
              char v234 = 0;
            }
            while ((v237 & 1) != 0);
            ++v229;
          }
          while (v229 != 8);
          float32x4_t v246 = vdivq_f32(_Q21, v230);
          float32x4_t v247 = vmlaq_f32(vmulq_f32(vdivq_f32(_Q21, v220), v209), v210, v246);
          v246.f32[0] = (float)(v231 + -1.1109) * -0.38079;
          float32x4_t v248 = vaddq_f32(vaddq_f32(vmlaq_f32(v247, v212, vdivq_f32(_Q21, vmlaq_f32(v211, v219, v219))), v213), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v246.f32, 0));
          v246.i64[0] = vpaddq_f32(v232, v232).u64[0];
          v246.f32[0] = vaddv_f32(*(float32x2_t *)v246.f32) * 0.015625;
          int32x4_t v249 = vdupq_lane_s32(*(int32x2_t *)v246.f32, 0);
          int32x4_t v250 = vaddq_s32(v249, v214);
          _Q9 = vshrq_n_s32(v250, 0x17uLL);
          v252.i64[0] = 0x7F0000007FLL;
          v252.i64[1] = 0x7F0000007FLL;
          float32x4_t v253 = (float32x4_t)vsubq_s32(v249, (int32x4_t)vandq_s8((int8x16_t)v250, v252));
          __asm { FMOV            V8.4S, #-1.0 }
          float32x4_t v255 = vaddq_f32(v253, _Q8);
          float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x3DCDF31Au);
          v248.i64[0] = vmlaq_f32(v248, v6, vaddq_f32(vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xB5F85AB0), v255, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3FB6E02Bu), (float32x4_t)vdupq_n_s32(0x3F3E11C7u), v255)), vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7D8625u), v255, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F813CEDu), (float32x4_t)vdupq_n_s32(0x3E32458Cu), v255))), vcvtq_f32_s32(_Q9))).u64[0];
          v248.f32[0] = 1.4427 * v248.f32[0];
          *(int32x2_t *)v248.f32 = vdup_lane_s32(*(int32x2_t *)v248.f32, 0);
          *(float32x2_t *)v255.f32 = vrndm_f32(*(float32x2_t *)v248.f32);
          __asm { FMOV            V9.2S, #1.0 }
          *(float32x2_t *)v248.f32 = vsub_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v255.f32);
          *(float32x2_t *)v6.f32 = vmla_f32((float32x2_t)vdup_n_s32(0x42C519F1u), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0xC19B8831), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0xBCB621BE), (float32x2_t)vdup_n_s32(0x3E5749EEu), *(float32x2_t *)v248.f32)));
          *(float *)(v216 + 4 * v215++) = vmlas_n_f32(v192, v283, vdiv_f32(vmul_f32(vmla_f32((float32x2_t)vdup_n_s32(0x42C519F0u), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0x424379A1u), *(float32x2_t *)v248.f32, vadd_f32(*(float32x2_t *)v248.f32, (float32x2_t)vdup_n_s32(0x4122CC6Bu)))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(*(float32x2_t *)v255.f32), 0x17uLL), *(int32x2_t *)_Q9.i8)), *(float32x2_t *)v6.f32).f32[0]);
        }
        while (v215 != v284);
      }
      ++v281;
    }
    while (v281 != v273);
  }
  return result;
}

uint64_t *sub_24843F914(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      long long v6 = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      uint64_t v7 = *(void *)(v3 - 16);
      uint64_t v8 = *(void *)(v3 - 8);
      *(void *)(v3 - 16) = 0;
      *(void *)(v4 - 16) = v7;
      *(void *)(v4 - 8) = v8;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  *unint64_t result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24843F99C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, long long *a6)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v7 = a5 + 4576;
  if (*(unsigned char *)(a5 + 4576))
  {
    uint64_t v20 = a5 + 952;
    uint64_t v21 = a5 + 1024;
    float v8 = sqrtf(0.1 / *(float *)(a5 + 4544)) * 16.0;
    v26[1] = 0;
    v26[0] = 0;
    *(void *)&long long v9 = *(void *)a4;
    *((void *)&v9 + 1) = HIDWORD(*(void *)a4);
    long long v27 = v9;
    sub_24843E34C(*(void *)(a5 + 168), *(void *)(a5 + 176), v26, (uint64_t)a4, *(float *)(a5 + 4936));
    __asm { FMOV            V1.2S, #1.0 }
    uint64_t v28 = (void *)vdiv_f32(_D1, *(float32x2_t *)(v7 + 4));
    *(float *)&uint64_t v29 = 1.0 / *(float *)(a5 + 4588);
    sub_248430558(v20, a4, v21, v8);
    sub_248440AA0((uint64_t)v26, a1, a3, a5);
  }
  if (a2)
  {
    if (*(int *)(a5 + 4592) <= 2)
    {
      int v15 = *(_DWORD *)(a5 + 4924);
      if (v15 < 2 || (double)v15 * 4.0 < *(float *)(a5 + 4936))
      {
        __asm { FMOV            V0.2S, #1.0 }
        uint64_t v29 = _D0;
        long long v17 = a6[1];
        long long v31 = *a6;
        long long v32 = v17;
        long long v18 = a6[3];
        long long v33 = a6[2];
        uint64_t v28 = &unk_26FC66208;
        int v30 = 1117782016;
        long long v34 = v18;
        uint64_t v37 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        sub_248437BC4();
      }
    }
  }
  return 0;
}

void sub_248440974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(a21 - 24));
    free(*(void **)(a21 - 32));
  }
  if (!LODWORD(STACK[0x538]))
  {
    unint64_t v23 = STACK[0x528];
    STACK[0x528] = 0;
    if (v23)
    {
      atomic_fetch_add(&qword_26931BDF8, -*(void *)(v23 - 24));
      free(*(void **)(v23 - 32));
    }
  }
  if (v21)
  {
    atomic_fetch_add(&qword_26931BDF8, -*(void *)(v21 - 24));
    free(*(void **)(v21 - 32));
  }
  unint64_t v24 = STACK[0x620];
  STACK[0x5C8] = a20;
  STACK[0x620] = 0;
  if (v24) {
    (*(void (**)(unint64_t))(*(void *)v24 + 8))(v24);
  }
  _Unwind_Resume(a1);
}

void sub_248440AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  sub_248441248();
}

void sub_248440EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,uint64_t a54)
{
  for (uint64_t i = 104; i != -16; i -= 40)
    sub_2483E8DDC((uint64_t *)(&a23 + i));
  if (!a53)
  {
    for (uint64_t j = 104; j != -16; j -= 40)
      sub_2483E8DDC((uint64_t *)(&a38 + j));
  }
  sub_2484172B0(&a54);
  sub_248441390((uint64_t)&STACK[0x328]);
  sub_2484107D0((uint64_t *)(v54 - 144), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_248440F88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 16) = &unk_26FC66198;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 30) = *(uint64_t *)((char *)a2 + 30);
  *(void *)(a1 + 24) = v5;
  long long v6 = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v6;
  long long v7 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v7;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = 0;
  *(void *)(a1 + 88) = a2[11];
  sub_2483F0E78(a1 + 96, (uint64_t)(a2 + 12));
  *(void *)(a1 + 216) = &unk_26FC65EC8;
  *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
  uint64_t v8 = a2[29];
  *(void *)(a1 + 237) = *(uint64_t *)((char *)a2 + 237);
  *(void *)(a1 + 232) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  *(void *)(a1 + 264) = a2[33];
  a2[31] = 0;
  a2[32] = 0;
  a2[33] = 0;
  long long v9 = *((_OWORD *)a2 + 17);
  long long v10 = *((_OWORD *)a2 + 18);
  long long v11 = *((_OWORD *)a2 + 19);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_OWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 304) = v11;
  *(_OWORD *)(a1 + 272) = v9;
  *(void *)(a1 + 328) = &unk_26FC66920;
  *(void *)(a1 + 336) = a2[42];
  *(void *)(a1 + 344) = &unk_26FC66170;
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(void *)(a1 + 368) = &unk_26FC66920;
  *(void *)(a1 + 376) = a2[47];
  *(void *)(a1 + 384) = &unk_26FC66920;
  *(void *)(a1 + 392) = a2[49];
  *(void *)(a1 + 400) = &unk_26FC66920;
  *(void *)(a1 + 408) = a2[51];
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  uint64_t v12 = a2[55];
  *(void *)(a1 + 432) = a2[54];
  a2[52] = 0;
  a2[53] = 0;
  a2[54] = 0;
  *(void *)(a1 + 440) = v12;
  return a1;
}

uint64_t *sub_24844117C(uint64_t *a1)
{
  if (!*((_DWORD *)a1 + 112))
  {
    long long v6 = (void **)(a1 + 52);
    sub_2483F77FC(&v6);
    a1[27] = (uint64_t)&unk_26FC65EC8;
    uint64_t v2 = (void *)a1[31];
    if (v2)
    {
      a1[32] = (uint64_t)v2;
      operator delete(v2);
    }
    for (uint64_t i = 25; i != 10; i -= 5)
      sub_2483E8DDC(&a1[i]);
    if (*((char *)a1 + 87) < 0) {
      operator delete((void *)a1[8]);
    }
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return a1;
}

void sub_248441248()
{
}

void sub_248441298(_Unwind_Exception *a1)
{
  MEMORY[0x24C579F90](v1, 0x10F2C40BD9CC6D3);
  _Unwind_Resume(a1);
}

void sub_2484412BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    int v4 = a2;
    v6[0] = a3;
    v6[1] = a4;
    if (*(void *)a1)
    {
      (*(void (**)(void, uint64_t *, uint64_t (*)(uint64_t *, unint64_t), void (*)(uint64_t, unsigned int, uint64_t), void, uint64_t))a1)(*(void *)(a1 + 8), v6, sub_2484419F8, sub_248441AC0, 0, a2);
    }
    else if (!sub_2484419F8(v6, 1uLL))
    {
      for (unsigned int i = 0; i != v4; ++i)
        sub_248441AC0((uint64_t)v6, i, 0);
    }
  }
}

void sub_248441360(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    sub_2483AB42C(v2, *(void (**)(uint64_t, void *))(a1 + 8), *(void *)(a1 + 16));
  }
}

uint64_t sub_248441390(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1232);
  if (v2)
  {
    *(void *)(a1 + 1240) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1200);
  if (v3)
  {
    *(void *)(a1 + 1208) = v3;
    operator delete(v3);
  }
  uint64_t v12 = (void **)(a1 + 1176);
  sub_2483EA640(&v12);
  int v4 = *(void **)(a1 + 1152);
  if (v4)
  {
    *(void *)(a1 + 1160) = v4;
    operator delete(v4);
  }
  sub_2484414D4(a1 + 512);
  uint64_t v5 = *(void **)(a1 + 344);
  if (v5)
  {
    *(void *)(a1 + 352) = v5;
    operator delete(v5);
  }
  uint64_t v12 = (void **)(a1 + 320);
  sub_2483F77FC(&v12);
  long long v6 = *(void **)(a1 + 248);
  if (v6)
  {
    *(void *)(a1 + 256) = v6;
    operator delete(v6);
  }
  uint64_t v12 = (void **)(a1 + 216);
  sub_2484415B0(&v12);
  uint64_t v12 = (void **)(a1 + 192);
  sub_2483F87EC(&v12);
  uint64_t v12 = (void **)(a1 + 168);
  sub_248410954(&v12);
  uint64_t v12 = (void **)(a1 + 144);
  sub_2483F87EC(&v12);
  long long v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(void *)(a1 + 128) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
  }
  uint64_t v12 = (void **)(a1 + 72);
  sub_248441644(&v12);
  uint64_t v12 = (void **)(a1 + 48);
  sub_2484416C8(&v12);
  long long v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(void *)(a1 + 32) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_2484414D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 592);
  if (v2)
  {
    *(void *)(a1 + 600) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(void *)(a1 + 576) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 544);
  if (v4)
  {
    *(void *)(a1 + 552) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 520);
  if (v5)
  {
    *(void *)(a1 + 528) = v5;
    operator delete(v5);
  }
  uint64_t v13 = (void **)(a1 + 496);
  sub_24841149C(&v13);
  long long v6 = *(void **)(a1 + 464);
  if (v6)
  {
    *(void *)(a1 + 472) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)(a1 + 440);
  if (v7)
  {
    *(void *)(a1 + 448) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 416);
  if (v8)
  {
    *(void *)(a1 + 424) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(void *)(a1 + 312) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)(a1 + 224);
  if (v10)
  {
    *(void *)(a1 + 232) = v10;
    operator delete(v10);
  }
  long long v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(void *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_2484415B0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        sub_2484417E4(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}